{
    "advisory_record": {
        "cve_id": "CVE-2018-5968",
        "description": "FasterXML jackson-databind through 2.8.11 and 2.9.x through 2.9.3 allows unauthenticated remote code execution because of an incomplete fix for the CVE-2017-7525 and CVE-2017-17485 deserialization flaws. This is exploitable via two different gadgets that bypass a blacklist.",
        "reserved_timestamp": 1516492800,
        "published_timestamp": 1516593600,
        "updated_timestamp": 1603228494,
        "repository_url": null,
        "references": {
            "": 388,
            "https://access.redhat.com/support/": 55,
            "https://access.redhat.com/downloads/": 44,
            "https://access.redhat.com/errata/": 33,
            "https://access.redhat.com/labs/": 33,
            "https://access.redhat.com/management/": 22,
            "https://access.redhat.com/": 22,
            "https://access.redhat.com/documentation": 22,
            "https://access.redhat.com/product-life-cycles/": 22,
            "https://access.redhat.com/security": 22,
            "https://access.redhat.com/security/security-updates/#/security-advisories": 22,
            "https://access.redhat.com/security/security-updates/#/cve": 22,
            "https://access.redhat.com/support/contact/": 22,
            "https://status.redhat.com": 22,
            "https://access.redhat.com/products/red-hat-enterprise-linux/": 21,
            "https://access.redhat.com/products/red-hat-openshift-container-platform": 21,
            "https://access.redhat.com/products/red-hat-ansible-automation-platform/": 21,
            "https://access.redhat.com/products/": 21,
            "https://access.redhat.com/downloads/content/package-browser": 11,
            "https://catalog.redhat.com/software/containers/explore/": 11,
            "https://access.redhat.com/articles/1202803": 11,
            "https://access.redhat.com/search/?q=*&p=1&rows=10&documentKind=Solution": 11,
            "https://access.redhat.com/search/?q=*&p=1&rows=10&documentKind=Article": 11,
            "https://access.redhat.com/documentation/en/red_hat_enterprise_linux": 11,
            "https://access.redhat.com/documentation/en/openshift_container_platform": 11,
            "https://access.redhat.com/documentation/en/red_hat_ansible_automation_platform": 11,
            "https://access.redhat.com/documentation/": 11,
            "https://access.redhat.com/security/": 11,
            "https://access.redhat.com/security/vulnerabilities": 11,
            "https://access.redhat.com/security/data": 11,
            "https://access.redhat.com/security/security-updates/#/security-labs": 11,
            "https://access.redhat.com/security/updates/backporting/": 11,
            "https://access.redhat.com/support/cases/": 11,
            "https://access.redhat.com/support/cases/#/troubleshoot": 11,
            "https://access.redhat.com/community": 11,
            "https://access.redhat.com/community/": 11,
            "https://access.redhat.com/discussions/": 11,
            "https://access.redhat.com/announcements/": 11,
            "https://access.redhat.com/accelerators/": 11,
            "https://access.redhat.com/jbossnetwork/restricted/listSoftware.html": 11,
            "https://cloud.redhat.com/insights": 11,
            "https://access.redhat.com/changeLanguage?language=en": 11,
            "https://access.redhat.com/changeLanguage?language=ko": 11,
            "https://access.redhat.com/changeLanguage?language=ja": 11,
            "https://access.redhat.com/changeLanguage?language=zh_CN": 11,
            "https://redhat.com/en": 11,
            "https://twitter.com/RedHat": 11,
            "https://access.redhat.com/management": 11,
            "https://access.redhat.com/support": 11,
            "https://access.redhat.com/support/customer-service": 11,
            "https://access.redhat.com/articles/33844": 11,
            "https://access.redhat.com/help/login_assistance": 11,
            "https://www.redhat.com/en/trust": 11,
            "https://www.redhat.com/en/about/browser-support": 11,
            "https://www.redhat.com/en/about/digital-accessibility": 11,
            "https://access.redhat.com/recognition/": 11,
            "https://access.redhat.com/help/colophon/": 11,
            "https://www.redhat.com/": 11,
            "http://developers.redhat.com/": 11,
            "https://connect.redhat.com/": 11,
            "https://cloud.redhat.com/": 11,
            "https://access.redhat.com/subscription-value": 11,
            "https://www.redhat.com/about/": 11,
            "http://jobs.redhat.com": 11,
            "https://redhat.com/en/about/company": 11,
            "https://redhat.com/en/jobs": 11,
            "https://redhat.com/en/events": 11,
            "https://redhat.com/en/about/office-locations": 11,
            "https://redhat.com/en/contact": 11,
            "https://redhat.com/en/blog": 11,
            "https://redhat.com/en/about/our-culture/diversity-equity-inclusion": 11,
            "https://coolstuff.redhat.com/": 11,
            "https://www.redhat.com/en/summit": 11,
            "https://redhat.com/en/about/privacy-policy": 11,
            "https://redhat.com/en/about/terms-use": 11,
            "https://redhat.com/en/about/all-policies-guidelines": 11,
            "https://redhat.com/en/about/digital-accessibility": 11,
            "https://access.redhat.com/changeLanguage?language=fr": 10,
            "https://access.redhat.com/products/red-hat-satellite/": 10,
            "https://access.redhat.com/products/red-hat-subscription-management/": 10,
            "https://access.redhat.com/products/red-hat-insights/": 10,
            "https://access.redhat.com/products/red-hat-openstack-platform/": 10,
            "https://access.redhat.com/products/red-hat-openshift-container-platform/": 10,
            "https://access.redhat.com/products/red-hat-openshift-ai/": 10,
            "https://access.redhat.com/products/openshift-dedicated-red-hat/": 10,
            "https://access.redhat.com/products/red-hat-advanced-cluster-security-for-kubernetes/": 10,
            "https://access.redhat.com/products/red-hat-advanced-cluster-management-for-kubernetes/": 10,
            "https://access.redhat.com/products/red-hat-quay/": 10,
            "https://access.redhat.com/products/red-hat-openshift-dev-spaces": 10,
            "https://access.redhat.com/products/red-hat-openshift-service-aws": 10,
            "https://access.redhat.com/products/red-hat-storage/": 10,
            "https://access.redhat.com/products/red-hat-hyperconverged-infrastructure/": 10,
            "https://access.redhat.com/products/red-hat-ceph-storage/": 10,
            "https://access.redhat.com/products/red-hat-openshift-data-foundation": 10,
            "https://access.redhat.com/products/red-hat-runtimes/": 10,
            "https://access.redhat.com/products/red-hat-jboss-enterprise-application-platform/": 10,
            "https://access.redhat.com/products/red-hat-data-grid/": 10,
            "https://access.redhat.com/products/red-hat-jboss-web-server/": 10,
            "https://access.redhat.com/products/red-hat-build-of-keycloak/": 10,
            "https://access.redhat.com/products/spring-boot/": 10,
            "https://access.redhat.com/products/nodejs/": 10,
            "https://access.redhat.com/products/quarkus/": 10,
            "https://access.redhat.com/products/red-hat-application-foundations/": 10,
            "https://access.redhat.com/products/red-hat-fuse/": 10,
            "https://access.redhat.com/products/red-hat-amq/": 10,
            "https://access.redhat.com/products/red-hat-3scale/": 10,
            "https://github.com/FasterXML/jackson-databind/issues/1899": 8,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1538332": 7,
            "https://www.redhat.com/security/data/cve/CVE-2018-5968.html": 7,
            "https://access.redhat.com/security/updates/classification/#important": 7,
            "https://access.redhat.com/security/team/contact/": 7,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1506612": 6,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1528565": 6,
            "https://www.redhat.com/security/data/cve/CVE-2017-15095.html": 6,
            "https://www.redhat.com/security/data/cve/CVE-2017-17485.html": 6,
            "commit::038b471e2efde2e8f96b4e0be958d3e5a1ff1d05": 5,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1503055": 5,
            "https://www.redhat.com/security/data/cve/CVE-2017-12196.html": 5,
            "https://github.com/advisories/GHSA-w3f4-3q6j-rh82": 5,
            "https://access.redhat.com/errata/RHSA-2018:0479": 4,
            "https://access.redhat.com/errata/RHSA-2018:0481": 4,
            "https://access.redhat.com/errata/RHSA-2018:1525": 4,
            "https://access.redhat.com/errata/RHSA-2018:0480": 4,
            "https://access.redhat.com/errata/RHSA-2018:0478": 4,
            "https://access.redhat.com/errata/RHSA-2019:2858": 4,
            "https://access.redhat.com/errata/RHSA-2019:3149": 4,
            "https://access.redhat.com/solutions/3279231": 4,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1483823": 4,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1498378": 4,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1503610": 4,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1534343": 4,
            "https://www.redhat.com/security/data/cve/CVE-2017-7561.html": 4,
            "https://www.redhat.com/security/data/cve/CVE-2017-12174.html": 4,
            "https://www.redhat.com/security/data/cve/CVE-2017-15089.html": 4,
            "https://www.redhat.com/security/data/cve/CVE-2018-1048.html": 4,
            "https://github.com/arunnc": 4,
            "https://access.redhat.com/articles/11258": 3,
            "https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/": 3,
            "https://www.debian.org/security/2018/dsa-4114": 2,
            "https://www.oracle.com/security-alerts/cpuoct2020.html": 2,
            "https://support.hpe.com/hpsc/doc/public/display?docLocale=en_US&docId=emr_na-hpesbhf03902en_us": 2,
            "https://security.netapp.com/advisory/ntap-20180423-0002/": 2,
            "https://access.redhat.com/security/cve/CVE-2017-7525": 2,
            "https://access.redhat.com/security/cve/CVE-2017-17485": 2,
            "https://access.redhat.com/security/cve/CVE-2018-5968": 2,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1462702": 2,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1549276": 2,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1573391": 2,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1666415": 2,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1666418": 2,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1666423": 2,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1666428": 2,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1666482": 2,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1666484": 2,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1666489": 2,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1671096": 2,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1671097": 2,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1677341": 2,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1713468": 2,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1725795": 2,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1725807": 2,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1737517": 2,
            "https://www.redhat.com/security/data/cve/CVE-2017-7525.html": 2,
            "https://www.redhat.com/security/data/cve/CVE-2018-7489.html": 2,
            "https://www.redhat.com/security/data/cve/CVE-2018-10237.html": 2,
            "https://www.redhat.com/security/data/cve/CVE-2018-11307.html": 2,
            "https://www.redhat.com/security/data/cve/CVE-2018-12022.html": 2,
            "https://www.redhat.com/security/data/cve/CVE-2018-12023.html": 2,
            "https://www.redhat.com/security/data/cve/CVE-2018-14718.html": 2,
            "https://www.redhat.com/security/data/cve/CVE-2018-14719.html": 2,
            "https://www.redhat.com/security/data/cve/CVE-2018-14720.html": 2,
            "https://www.redhat.com/security/data/cve/CVE-2018-14721.html": 2,
            "https://www.redhat.com/security/data/cve/CVE-2018-19360.html": 2,
            "https://www.redhat.com/security/data/cve/CVE-2018-19361.html": 2,
            "https://www.redhat.com/security/data/cve/CVE-2018-19362.html": 2,
            "https://www.redhat.com/security/data/cve/CVE-2019-12086.html": 2,
            "https://www.redhat.com/security/data/cve/CVE-2019-12384.html": 2,
            "https://www.redhat.com/security/data/cve/CVE-2019-12814.html": 2,
            "https://www.redhat.com/security/data/cve/CVE-2019-14379.html": 2,
            "https://security.netapp.com/en": 2,
            "https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax": 2,
            "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062": 2,
            "https://github.com/OneSourceCat": 2,
            "https://github.com/codelion": 2,
            "commit::90ee9f522a127093075b4c30c7c2bc876300fcc0": 2,
            "commit::8438b6f5db04349608c41b8af1001751537f13e3": 2,
            "https://console.redhat.com/insights/patch/advisories/RHSA-2018:0479": 1,
            "https://console.redhat.com/insights/patch/advisories/RHSA-2018:0481": 1,
            "https://console.redhat.com/insights/patch/advisories/RHSA-2018:1525": 1,
            "https://access.redhat.com/articles/2974891": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1422982": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1463853": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1464486": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1467946": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1476755": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1548909": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1553525": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1557130": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1561888": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1563737": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-1073.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-1111.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-7750.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-8088.html": 1,
            "https://console.redhat.com/insights/patch/advisories/RHSA-2018:0480": 1,
            "https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.1/html/installation_guide/": 1,
            "https://access.redhat.com/jbossnetwork/restricted/listSoftware.html?product=appplatform&downloadType=securityPatches&version=7.1": 1,
            "https://access.redhat.com/documentation/en/red-hat-jboss-enterprise-application-platform/version-7.1": 1,
            "https://access.redhat.com/documentation/en/jboss-enterprise-application-platform/": 1,
            "https://docs.openshift.com/container-platform/4.1/release_notes/ocp-4-1-release-notes.html": 1,
            "https://docs.openshift.com/container-platform/3.11/release_notes/ocp_3_11_release_notes.html": 1,
            "https://www.netapp.com/": 1,
            "https://mysupport.netapp.com": 1,
            "https://community.netapp.com": 1,
            "https://www.netapp.com/company/contact-us/": 1,
            "https://security.netapp.com": 1,
            "https://security.netapp.com/advisory/": 1,
            "https://security.netapp.com/bulletins/": 1,
            "https://security.netapp.com/contact/": 1,
            "https://security.netapp.com/policy/": 1,
            "https://security.netapp.com/resources/": 1,
            "https://security.netapp.com/certs/": 1,
            "https://security.netapp.com/advisory": 1,
            "https://security.netapp.com/advisory/ntap-20180423-0002": 1,
            "https://www.netapp.com/company/legal/privacy-policy/": 1,
            "https://nvd.nist.gov/vuln/detail/CVE-2018-5968": 1,
            "https://mysupport.netapp.com/info/communications/ECMLP2841272.html": 1,
            "https://mysupport.netapp.com/products/eseries_webservices/3.1/": 1,
            "https://mysupport.netapp.com/products/eseries_santricityos/11.50.1/": 1,
            "https://mysupport.netapp.com/site/downloads/": 1,
            "http://mysupport.netapp.com": 1,
            "https://security.netapp.com/advisory/NTAP-20180423-0002": 1,
            "https://www.netapp.com/forms/site-feedback/": 1,
            "https://github.com/features/actions": 1,
            "https://github.com/features/packages": 1,
            "https://github.com/features/security": 1,
            "https://github.com/features/codespaces": 1,
            "https://github.com/features/copilot": 1,
            "https://github.com/features/code-review": 1,
            "https://github.com/features/issues": 1,
            "https://github.com/features/discussions": 1,
            "https://github.com/features": 1,
            "https://docs.github.com": 1,
            "https://skills.github.com": 1,
            "https://github.blog": 1,
            "https://github.com/enterprise": 1,
            "https://github.com/team": 1,
            "https://github.com/enterprise/startups": 1,
            "https://github.com/solutions/industries/healthcare": 1,
            "https://github.com/solutions/industries/financial-services": 1,
            "https://github.com/solutions/industries/manufacturing": 1,
            "https://github.com/solutions/ci-cd": 1,
            "https://github.com/solutions/devops": 1,
            "https://github.com/solutions/devsecops": 1,
            "https://resources.github.com/learn/pathways": 1,
            "https://resources.github.com": 1,
            "https://github.com/customer-stories": 1,
            "https://partner.github.com": 1,
            "https://github.com/readme": 1,
            "https://github.com/topics": 1,
            "https://github.com/trending": 1,
            "https://github.com/collections": 1,
            "https://github.com/enterprise/advanced-security": 1,
            "https://github.com/pricing": 1,
            "https://docs.github.com/terms": 1,
            "https://docs.github.com/privacy": 1,
            "https://github.com/cowtowncoder": 1,
            "https://github.com/FasterXML/jackson-databind/issues/1872": 1,
            "https://github.com/FasterXML/jackson-databind/issues/1931": 1,
            "https://github.com/FasterXML/jackson-databind/issues/1899#issuecomment-365658459": 1,
            "https://github.com/notifications/unsubscribe-auth/AVtJFfwjs3rlS40kjlDXsT4BmUc7OCveks5tUwbOgaJpZM4Rixed": 1,
            "https://www.sourceclear.com/": 1,
            "https://www.sourceclear.com/vulnerability-database/security/remote-code-execution-rce-/java/sid-5732/summary": 1,
            "https://github.com/ScrapCodes": 1,
            "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.6.7.x": 1,
            "https://github.com": 1,
            "https://docs.github.com/site-policy/github-terms/github-terms-of-service": 1,
            "https://docs.github.com/site-policy/privacy-policies/github-privacy-statement": 1,
            "https://github.com/security": 1,
            "https://www.githubstatus.com/": 1,
            "https://docs.github.com/": 1,
            "https://support.github.com?tags=dotcom-footer": 1,
            "https://access.redhat.com/search?q=Red+Hat+JBoss+Enterprise+Application+Platform&documentKind=Article%26Solution": 1,
            "https://access.redhat.com/search?q=Secure&documentKind=Article%26Solution": 1,
            "https://access.redhat.com/search?q=jaxrs&documentKind=Article%26Solution": 1
        },
        "affected_products": [
            "n/a",
            "FasterXML",
            "jackson"
        ],
        "versions": {
            "status": "affected",
            "version": "n/a"
        },
        "files": [
            "FasterXML",
            "CVE-2017-17485",
            "jackson-databind",
            "CVE-2017-7525"
        ],
        "keywords": [
            "databind",
            "gadget",
            "blacklist",
            "flaw",
            "code",
            "execution",
            "deserialization",
            "jackson",
            "fasterxml",
            "allow",
            "bypass"
        ],
        "files_extension": [],
        "has_fixing_commit": true
    },
    "commits": [
        {
            "commit_id": "038b471e2efde2e8f96b4e0be958d3e5a1ff1d05",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1516597267,
            "hunks": 3,
            "message": "Fix #1899",
            "diff": [
                "diff --git a/release-notes/VERSION b/release-notes/VERSION",
                "index b0becca90..e5c11b30c 100644",
                "--- a/release-notes/VERSION",
                "+++ b/release-notes/VERSION",
                "@@ -7,5 +7,7 @@ Project: jackson-databind",
                "-#1872 `NullPointerException` in `SubTypeValidator.validateSubType` when",
                "+#1872: `NullPointerException` in `SubTypeValidator.validateSubType` when",
                "   validating Spring interface",
                "  (reported by Rob W)",
                "+#1899: Another two gadgets to exploit default typing issue in jackson-databind",
                "+ (reported by OneSourceCat@github)",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
                "index 42273e084..37b122734 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
                "@@ -52,2 +52,6 @@ public class SubTypeValidator",
                "         s.add(\"com.sun.org.apache.bcel.internal.util.ClassLoader\");",
                "+        // [databind#1899]: more 3rd party",
                "+        s.add(\"org.hibernate.jmx.StatisticsService\");",
                "+        s.add(\"org.apache.ibatis.datasource.jndi.JndiDataSourceFactory\");",
                "+",
                "         DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);"
            ],
            "changed_files": [
                "release-notes/VERSION",
                "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1899": "Bump Jackson to v2.9.4 to resolve CVE-2017-15095 et al guyboertje/jrjackson#66 Spring and Jackson vulnerabilities Activiti/Activiti#1749 Upgrade to Jackson 2.8.11.20180217 spring-projects/spring-boot#11475 Bump Jackson to v2.9.4 to resolve CVE-2017-15095 et al guyboertje/jrjackson#67 Using a component with Known Vulnerability Jackson Deserialize RCE (CVE-2017-7525) msgpack/msgpack-java#463 [deleted] Contrast-Security-OSS/ghardy-test#384 [deleted] Contrast-Security-OSS/ghardy-test#396 [deleted] Contrast-Security-OSS/ghardy-test#412 [deleted] Contrast-Security-OSS/ghardy-test#432 [deleted] Contrast-Security-OSS/ghardy-test#450 [deleted] Contrast-Security-OSS/ghardy-test#460 [deleted] Contrast-Security-OSS/ghardy-test#479 [deleted] Contrast-Security-OSS/ghardy-test#497 [deleted] Contrast-Security-OSS/ghardy-test#516 [deleted] Contrast-Security-OSS/ghardy-test#532 [deleted] Contrast-Security-OSS/ghardy-test#552 [deleted] Contrast-Security-OSS/ghardy-test#572 Vulnerabilities found in com.fasterxml.jackson.core:jackson-databind 2.7.1 Contrast-Security-OSS/ghardy-test#592 CVE-2019-10202 #2700 BRAVO-666 - Create release artifact after creating the release EliLillyCo/jenkinsdsl#1 CVE-2018-5968 - high detected in com.fasterxml.jackson.core:jackson-databind rhicksiii91/java-goof-test#116 CVE-2018-5968 - high detected in com.fasterxml.jackson.core:jackson-databind rhicksiii91/java-goof-test#212 CVE-2018-5968 @ Maven-com.fasterxml.jackson.core:jackson-databind-2.6.7.1 scott-cx/edgemere#67 CVE-2018-5968 @ Maven-com.fasterxml.jackson.core:jackson-databind-2.0.4 cxronen/BookStore_VSCode#88 CVE-2018-5968 @ Maven-com.fasterxml.jackson.core:jackson-databind-2.8.9 margaritalm/BookStore_Small_CLI_small#19 CVE-2018-5968 @ Maven-com.fasterxml.jackson.core:jackson-databind-2.0.4 cxronen/BookStore_VSCode#298 CVE-2018-5968 @ Maven-com.fasterxml.jackson.core:jackson-databind-2.0.4 cxronen/BookStore_VSCode#501 Findings for High davisbarillas/shiftleft-java-demo2#55 Findings for High davisbarillas/JavaVulnerableLab#12 CVE-2018-5968 @ Maven-com.fasterxml.jackson.core:jackson-databind-2.0.4 cxronen/BookStore_VSCode#647 CVE-2018-5968 @ Maven-com.fasterxml.jackson.core:jackson-databind-2.0.4 cxronen/BookStore_VSCode#937"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "jackson-databind-2.10.0",
                "jackson-databind-2.10.0.pr1",
                "jackson-databind-2.10.0.pr2",
                "jackson-databind-2.10.0.pr3",
                "jackson-databind-2.10.1",
                "jackson-databind-2.10.2",
                "jackson-databind-2.10.3",
                "jackson-databind-2.10.4",
                "jackson-databind-2.10.5",
                "jackson-databind-2.10.5.1",
                "jackson-databind-2.11.0",
                "jackson-databind-2.11.0.rc1",
                "jackson-databind-2.11.1",
                "jackson-databind-2.11.2",
                "jackson-databind-2.11.3",
                "jackson-databind-2.11.4",
                "jackson-databind-2.12.0",
                "jackson-databind-2.12.0-rc1",
                "jackson-databind-2.12.0-rc2",
                "jackson-databind-2.12.1",
                "jackson-databind-2.12.2",
                "jackson-databind-2.12.3",
                "jackson-databind-2.12.4",
                "jackson-databind-2.12.5",
                "jackson-databind-2.12.6",
                "jackson-databind-2.12.6.1",
                "jackson-databind-2.12.7",
                "jackson-databind-2.12.7.1",
                "jackson-databind-2.12.7.2",
                "jackson-databind-2.13.0",
                "jackson-databind-2.13.0-rc1",
                "jackson-databind-2.13.0-rc2",
                "jackson-databind-2.13.1",
                "jackson-databind-2.13.2",
                "jackson-databind-2.13.2.1",
                "jackson-databind-2.13.2.2",
                "jackson-databind-2.13.3",
                "jackson-databind-2.13.4",
                "jackson-databind-2.13.4.1",
                "jackson-databind-2.13.4.2",
                "jackson-databind-2.13.5",
                "jackson-databind-2.14.0",
                "jackson-databind-2.14.0-rc1",
                "jackson-databind-2.14.0-rc2",
                "jackson-databind-2.14.0-rc3",
                "jackson-databind-2.14.1",
                "jackson-databind-2.14.2",
                "jackson-databind-2.14.3",
                "jackson-databind-2.15.0",
                "jackson-databind-2.15.0-rc1",
                "jackson-databind-2.15.0-rc2",
                "jackson-databind-2.15.0-rc3",
                "jackson-databind-2.15.1",
                "jackson-databind-2.15.2",
                "jackson-databind-2.15.3",
                "jackson-databind-2.15.4",
                "jackson-databind-2.16.0",
                "jackson-databind-2.16.0-rc1",
                "jackson-databind-2.16.1",
                "jackson-databind-2.16.2",
                "jackson-databind-2.17.0",
                "jackson-databind-2.17.0-rc1",
                "jackson-databind-2.17.1",
                "jackson-databind-2.17.2",
                "jackson-databind-2.8.11.1",
                "jackson-databind-2.8.11.2",
                "jackson-databind-2.8.11.3",
                "jackson-databind-2.8.11.4",
                "jackson-databind-2.8.11.5",
                "jackson-databind-2.8.11.6",
                "jackson-databind-2.9.10",
                "jackson-databind-2.9.10.1",
                "jackson-databind-2.9.10.2",
                "jackson-databind-2.9.10.3",
                "jackson-databind-2.9.10.4",
                "jackson-databind-2.9.10.5",
                "jackson-databind-2.9.10.6",
                "jackson-databind-2.9.10.7",
                "jackson-databind-2.9.10.8",
                "jackson-databind-2.9.4",
                "jackson-databind-2.9.5",
                "jackson-databind-2.9.6",
                "jackson-databind-2.9.7",
                "jackson-databind-2.9.8",
                "jackson-databind-2.9.9",
                "jackson-databind-2.9.9.1",
                "jackson-databind-2.9.9.2",
                "jackson-databind-2.9.9.3"
            ],
            "matched_rules": [
                {
                    "id": "XREF_GH",
                    "message": "The commit and the advisory (including referenced pages) mention the same github issue: 1899",
                    "relevance": 32
                },
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 5 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
                    "relevance": 8
                },
                {
                    "id": "SEC_KEYWORDS_IN_LINKED_GH",
                    "message": "The github issue 1899 contains some security-related terms: vulnerability, rce",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: fasterxml",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1899",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "90ee9f522a127093075b4c30c7c2bc876300fcc0",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1516597442,
            "hunks": 1,
            "message": "update release notes wrt #1899",
            "diff": [
                "diff --git a/release-notes/VERSION-2.x b/release-notes/VERSION-2.x",
                "index 3cf812f6f..22af5ec6f 100644",
                "--- a/release-notes/VERSION-2.x",
                "+++ b/release-notes/VERSION-2.x",
                "@@ -28,2 +28,4 @@ Project: jackson-databind",
                "  (reported by mcortella@github)",
                "+#1899: Another two gadgets to exploit default typing issue in jackson-databind",
                "+ (reported by OneSourceCat@github)"
            ],
            "changed_files": [
                "release-notes/VERSION-2.x"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1899": "Bump Jackson to v2.9.4 to resolve CVE-2017-15095 et al guyboertje/jrjackson#66 Spring and Jackson vulnerabilities Activiti/Activiti#1749 Upgrade to Jackson 2.8.11.20180217 spring-projects/spring-boot#11475 Bump Jackson to v2.9.4 to resolve CVE-2017-15095 et al guyboertje/jrjackson#67 Using a component with Known Vulnerability Jackson Deserialize RCE (CVE-2017-7525) msgpack/msgpack-java#463 [deleted] Contrast-Security-OSS/ghardy-test#384 [deleted] Contrast-Security-OSS/ghardy-test#396 [deleted] Contrast-Security-OSS/ghardy-test#412 [deleted] Contrast-Security-OSS/ghardy-test#432 [deleted] Contrast-Security-OSS/ghardy-test#450 [deleted] Contrast-Security-OSS/ghardy-test#460 [deleted] Contrast-Security-OSS/ghardy-test#479 [deleted] Contrast-Security-OSS/ghardy-test#497 [deleted] Contrast-Security-OSS/ghardy-test#516 [deleted] Contrast-Security-OSS/ghardy-test#532 [deleted] Contrast-Security-OSS/ghardy-test#552 [deleted] Contrast-Security-OSS/ghardy-test#572 Vulnerabilities found in com.fasterxml.jackson.core:jackson-databind 2.7.1 Contrast-Security-OSS/ghardy-test#592 CVE-2019-10202 #2700 BRAVO-666 - Create release artifact after creating the release EliLillyCo/jenkinsdsl#1 CVE-2018-5968 - high detected in com.fasterxml.jackson.core:jackson-databind rhicksiii91/java-goof-test#116 CVE-2018-5968 - high detected in com.fasterxml.jackson.core:jackson-databind rhicksiii91/java-goof-test#212 CVE-2018-5968 @ Maven-com.fasterxml.jackson.core:jackson-databind-2.6.7.1 scott-cx/edgemere#67 CVE-2018-5968 @ Maven-com.fasterxml.jackson.core:jackson-databind-2.0.4 cxronen/BookStore_VSCode#88 CVE-2018-5968 @ Maven-com.fasterxml.jackson.core:jackson-databind-2.8.9 margaritalm/BookStore_Small_CLI_small#19 CVE-2018-5968 @ Maven-com.fasterxml.jackson.core:jackson-databind-2.0.4 cxronen/BookStore_VSCode#298 CVE-2018-5968 @ Maven-com.fasterxml.jackson.core:jackson-databind-2.0.4 cxronen/BookStore_VSCode#501 Findings for High davisbarillas/shiftleft-java-demo2#55 Findings for High davisbarillas/JavaVulnerableLab#12 CVE-2018-5968 @ Maven-com.fasterxml.jackson.core:jackson-databind-2.0.4 cxronen/BookStore_VSCode#647 CVE-2018-5968 @ Maven-com.fasterxml.jackson.core:jackson-databind-2.0.4 cxronen/BookStore_VSCode#937"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "jackson-databind-2.10.0",
                "jackson-databind-2.10.0.pr1",
                "jackson-databind-2.10.0.pr2",
                "jackson-databind-2.10.0.pr3",
                "jackson-databind-2.10.1",
                "jackson-databind-2.10.2",
                "jackson-databind-2.10.3",
                "jackson-databind-2.10.4",
                "jackson-databind-2.10.5",
                "jackson-databind-2.10.5.1",
                "jackson-databind-2.11.0",
                "jackson-databind-2.11.0.rc1",
                "jackson-databind-2.11.1",
                "jackson-databind-2.11.2",
                "jackson-databind-2.11.3",
                "jackson-databind-2.11.4",
                "jackson-databind-2.12.0",
                "jackson-databind-2.12.0-rc1",
                "jackson-databind-2.12.0-rc2",
                "jackson-databind-2.12.1",
                "jackson-databind-2.12.2",
                "jackson-databind-2.12.3",
                "jackson-databind-2.12.4",
                "jackson-databind-2.12.5",
                "jackson-databind-2.12.6",
                "jackson-databind-2.12.6.1",
                "jackson-databind-2.12.7",
                "jackson-databind-2.12.7.1",
                "jackson-databind-2.12.7.2",
                "jackson-databind-2.13.0",
                "jackson-databind-2.13.0-rc1",
                "jackson-databind-2.13.0-rc2",
                "jackson-databind-2.13.1",
                "jackson-databind-2.13.2",
                "jackson-databind-2.13.2.1",
                "jackson-databind-2.13.2.2",
                "jackson-databind-2.13.3",
                "jackson-databind-2.13.4",
                "jackson-databind-2.13.4.1",
                "jackson-databind-2.13.4.2",
                "jackson-databind-2.13.5",
                "jackson-databind-2.14.0",
                "jackson-databind-2.14.0-rc1",
                "jackson-databind-2.14.0-rc2",
                "jackson-databind-2.14.0-rc3",
                "jackson-databind-2.14.1",
                "jackson-databind-2.14.2",
                "jackson-databind-2.14.3",
                "jackson-databind-2.15.0",
                "jackson-databind-2.15.0-rc1",
                "jackson-databind-2.15.0-rc2",
                "jackson-databind-2.15.0-rc3",
                "jackson-databind-2.15.1",
                "jackson-databind-2.15.2",
                "jackson-databind-2.15.3",
                "jackson-databind-2.15.4",
                "jackson-databind-2.16.0",
                "jackson-databind-2.16.0-rc1",
                "jackson-databind-2.16.1",
                "jackson-databind-2.16.2",
                "jackson-databind-2.17.0",
                "jackson-databind-2.17.0-rc1",
                "jackson-databind-2.17.1",
                "jackson-databind-2.17.2",
                "jackson-databind-2.9.10",
                "jackson-databind-2.9.10.1",
                "jackson-databind-2.9.10.2",
                "jackson-databind-2.9.10.3",
                "jackson-databind-2.9.10.4",
                "jackson-databind-2.9.10.5",
                "jackson-databind-2.9.10.6",
                "jackson-databind-2.9.10.7",
                "jackson-databind-2.9.10.8",
                "jackson-databind-2.9.4",
                "jackson-databind-2.9.5",
                "jackson-databind-2.9.6",
                "jackson-databind-2.9.7",
                "jackson-databind-2.9.8",
                "jackson-databind-2.9.9",
                "jackson-databind-2.9.9.1",
                "jackson-databind-2.9.9.2",
                "jackson-databind-2.9.9.3"
            ],
            "matched_rules": [
                {
                    "id": "XREF_GH",
                    "message": "The commit and the advisory (including referenced pages) mention the same github issue: 1899",
                    "relevance": 32
                },
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 2 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "SEC_KEYWORDS_IN_LINKED_GH",
                    "message": "The github issue 1899 contains some security-related terms: vulnerability, rce",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1899",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "1ce6a0a1e20faf8929637d4ab43a2ba915470732",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1516674050,
            "hunks": 7,
            "message": "Fix #1907",
            "diff": [
                "diff --git a/release-notes/CREDITS-2.x b/release-notes/CREDITS-2.x",
                "new file mode 100644",
                "index 000000000..ffa2e03d4",
                "--- /dev/null",
                "+++ b/release-notes/CREDITS-2.x",
                "@@ -0,0 +1,744 @@",
                "+Here are people who have contributed to the development of Jackson JSON processor",
                "+databind core component, version 2.x",
                "+(version numbers in brackets indicate release in which the problem was fixed)",
                "+",
                "+(note: for older credits, check out release notes for 1.x versions)",
                "+",
                "+Tatu Saloranta, tatu.saloranta@iki.fi: author",
                "+",
                "+Pascal G\u00c2\u008elinas:",
                "+  * Contributed fixes to 'MappingIterator' handling (Pull#58 and Pull#59)",
                "+   (2.1.0)",
                "+  * Reported #220: ContainerNode missing 'createNumber(BigInteger)'",
                "+   (2.2.2)",
                "+",
                "+Joern Huxhorn: (huxi@github)",
                "+  * Suggested [JACKSON-636]: Add 'SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS' to allow",
                "+    forced sorting of Maps during serialization",
                "+   (2.0.0)",
                "+  * Reported #479: NPE on trying to deserialize a `String[]` that contains null",
                "+   (2.4.1)",
                "+  * Reported #1411: MapSerializer._orderEntries should check for null keys",
                "+   (2.7.9)",
                "+",
                "+James Roper:",
                "+ * Requested [JACKSON-732]: Allow 'AnnotationIntrospector.findContentDeserializer()'",
                "+    (and similar) to return instance, not just Class<?> for instance",
                "+  (2.0.0)",
                "+ * Suggested [JACKSON-800]: Adding a method for letting modules register",
                "+    DeserializationProblemHandlers",
                "+  (2.0.0)",
                "+",
                "+Casey Lucas:",
                "+ * Reported [JACKSON-798]: Problem with external type id, creators",
                "+  (2.0.0)",
                "+",
                "+Tammo van Lessen:",
                "+ * Reported [JACKSON-811]: Problems with @JsonIdentityInfo, abstract types",
                "+  (2.0.0)",
                "+ * Reported [JACKSON-814]: Parsing RFC822/RFC1123 dates failes on non-US locales",
                "+  (2.0.0)",
                "+",
                "+Raymond Myers:",
                "+ * Suggested [JACKSON-810]: Deserialization Feature: Allow unknown Enum values via",
                "+    'DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL'",
                "+  (2.0.0)",
                "+",
                "+Ryan Gardner:",
                "+ * Contributed #5 -- Add support for maps with java.util.Locale keys",
                "+    to the set of StdKeyDeserializers",
                "+  (2.0.1)",
                "+",
                "+Razvan Dragut:",
                "+ * Suggested [JACKSON-850]: Allow use of zero-arg factory methods as \"default creator\"",
                "+  (2.1.0)",
                "+",
                "+Duncan Atkinson:",
                "+ * Reported [JACKSON-851]: State corruption with ObjectWriter, DefaultPrettyPrinter",
                "+  (2.1.0)",
                "+",
                "+Mark Wolfe:",
                "+ * Suggested #45: Add `@JsonNaming()` for per-class naming strategy overrides",
                "+  (2.1.0)",
                "+",
                "+Dmitry Katsubo:",
                "+ * Contributed patch for #65: Add getters to `ObjectMapper`, DeserializationContext,",
                "+   DeserializationFactory.",
                "+  (2.1.0)",
                "+",
                "+Francis Galiegue:",
                "+ * Reported #93 (and suggested fix): bug in `ObjectMapper.setAll(...)'",
                "+  implementation",
                "+  (2.1.1)",
                "+ * Reported #433: `ObjectMapper`'s `.valueToTree()` wraps `JsonSerializable` objects",
                "+  into a POJONode",
                "+  (2.3.3)",
                "+ * Contributed #434: Ensure that DecimalNodes with mathematically equal values are equal",
                "+  (2.4.0)",
                "+",
                "+kelaneren@github:",
                "+ * Reported #157, contributed unit test: NPE when registering same module twice.",
                "+  (2.1.4)",
                "+",
                "+Eric Tschetter (cheddar@github):",
                "+  * Reported issues #166, #167, #170 (regressions from 1.9.x to 2.x)",
                "+   (2.1.4)",
                "+",
                "+Thierry D (thierryd@github)",
                "+  * Reported #214: Problem with LICENSE, NOTICE, Android packaging",
                "+   (2.2.2)",
                "+",
                "+Luke G-H (lukegh@github)",
                "+  * Reported #223: Duplicated nulls with @JsonFormat(shape=Shape.ARRAY)",
                "+   (2.2.2)",
                "+",
                "+Karl Moore (karldmoore@github)",
                "+  * Reported #217: JsonProcessingExceptions not all wrapped as expected",
                "+   (2.2.2)",
                "+",
                "+David Phillips:",
                "+  * Requested #308: Improve serialization and deserialization speed of `java.util.UUID`",
                "+   (2.3.0)",
                "+",
                "+Seth Pellegrino (jivesoft):",
                "+  * Contributed #317: Fix `JsonNode` support for nulls bound to\t`ObjectNode`, `ArrayNode`",
                "+   (2.3.0)",
                "+",
                "+Florian Schoppmann (fschopp@github)",
                "+  * Reported #357: StackOverflowError with contentConverter that returns array type",
                "+   (2.7.0)",
                "+  * Reported #358: `IterableSerializer` ignoring\tannotated content serializer",
                "+   (2.3.1)",
                "+  * Reported #359: Converted object not using explicitly annotated serializer",
                "+   (2.4.0)",
                "+",
                "+Martin Traverso:",
                "+  * Reported #406: Cannot use external type id + @JsonTypeIdResolver",
                "+   (2.3.2)",
                "+",
                "+Matthew Morrissette:",
                "+  * Contributed #381: Allow inlining/unwrapping of value from single-component JSON array",
                "+   (2.4.0)",
                "+",
                "+Will Palmeri: (wpalmeri@github)",
                "+  * Contributed #407: Make array and Collection serializers use configured value null handler",
                "+   (2.4.0)",
                "+",
                "+Cemalettin Koc: (cemo@github)",
                "+  * Reported #353: Problems with polymorphic types, `JsonNode` (related to #88)",
                "+   (2.4.0)",
                "+",
                "+Ben Fagin: (UnquietCode@github)",
                "+  * Suggested #442: Make `@JsonUnwrapped` indicate property inclusion",
                "+   (2.4.0)",
                "+  * Contributed #81/#455: Allow use of @JsonUnwrapped with typed (@JsonTypeInfo) classes,",
                "+    provided that (new) feature `SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS`",
                "+    is disabled",
                "+   (2.4.0)",
                "+",
                "+Chris Cleveland:",
                "+  * Suggested #463: Add 'JsonNode.asText(String defaultValue)`",
                "+   (2.4.0)",
                "+",
                "+Benson Margulies:",
                "+  * Reported #467: Unwanted POJO's embedded in tree via serialization to tree",
                "+   (2.4.0)",
                "+  * Reported #601: ClassCastException for a custom serializer for enum key in `EnumMap`",
                "+   (2.4.4)",
                "+  * Contributed 944: Failure to use custom deserializer for key deserializer",
                "+   (2.6.3)",
                "+  * Reported #1120: String value omitted from weirdStringException",
                "+   (2.6.6)",
                "+  * Reported, fixed #1235: `java.nio.file.Path` support incomplete",
                "+   (2.8.0)",
                "+  * Reported #1270: Generic type returned from type id resolver seems to be ignored",
                "+   (2.8.0)",
                "+",
                "+Steve Sanbeg: (sanbeg@github)",
                "+  * Contributed #482: Make date parsing error behavior consistent with JDK",
                "+   (2.4.1)",
                "+",
                "+Ian Barfield: (tea-dragon@github)",
                "+  * Reported #580: delegate deserializers choke on a (single) abstract/polymorphic parameter",
                "+   (2.4.4)",
                "+  * Reported #844: Using JsonCreator still causes invalid path references in JsonMappingException",
                "+   (2.5.5)",
                "+",
                "+Eugene Lukash",
                "+  * Reported #592: Wrong `TokenBuffer` delegate deserialization using `@JsonCreator`",
                "+   (2.4.4)",
                "+",
                "+Fernando Otero (zeitos@github)",
                "+  * Contributed fix for #610: Problem with forward reference in hierarchies",
                "+   (2.4.4)",
                "+",
                "+Lovro Pand\u00c5\u00bei\u00c4\u0087 (lpandzic@github)",
                "+  * Reported #421: @JsonCreator not used in case of multiple creators with parameter names",
                "+   (2.5.0)",
                "+",
                "+Adam Stroud (adstro@github)",
                "+  * Contributed\t#576: Add fluent API for adding mixins",
                "+   (2.5.0)",
                "+",
                "+David Fleeman (fleebytes@github)",
                "+  * Contributed #528 implementation: Add support for `JsonType.As.EXISTING_PROPERTY`",
                "+   (2.5.0)",
                "+",
                "+Aur\u00c3\u00a9lien Leboulanger (herau@github)",
                "+  * Contributed improvement for #597: Improve error messaging for cases\twhere JSON Creator",
                "+    returns null (which is illegal)",
                "+   (2.5.0)",
                "+",
                "+Michael Spiegel (mspiegel@githib)",
                "+  * Contributed #636: `ClassNotFoundException` for classes not (yet) needed during serialization",
                "+   (2.5.0)",
                "+",
                "+Michael Ressler (mressler@github)",
                "+  * Contributed #566: Add support for case-insensitive deserialization",
                "+   (`MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES`)",
                "+   (2.5.0)",
                "+",
                "+Konstantin Labun (kulabun@github)",
                "+  * Reported #647: Deserialization fails when @JsonUnwrapped property contains an object with same property name",
                "+   (2.5.0)",
                "+",
                "+Christopher Smith (chrylis@github)",
                "+  * Reported #594: `@JsonValue` on enum not used when enum value is a Map key",
                "+   (2.5.0)",
                "+",
                "+Alexandre Santana Campelo (alexqi200@github):",
                "+  * Contributed #671: Adding `java.util.Currency` deserialization support for maps",
                "+   (2.5.1)",
                "+",
                "+Zoltan Farkas (zolyfarkas@github)",
                "+  * Reported #674: Spring CGLIB proxies not handled as intended",
                "+   (2.5.1)",
                "+",
                "+Ludevik@github:",
                "+  * Reported #682: Class<?>-valued Map keys not serialized properly",
                "+   (2.5.1)",
                "+",
                "+Antibrumm@github:",
                "+  * Reported #691: Jackson 2.5.0. NullSerializer for MapProperty failing",
                "+   (2.5.2)",
                "+  * Reported #984: JsonStreamContexts are not build the same way for write.. and convert methods",
                "+   (2.6.4)",
                "+",
                "+Shumpei Akai (flexfrank@github)",
                "+  * Reported #703: Multiple calls to ObjectMapper#canSerialize(Object.class) returns different values",
                "+   (2.5.2)",
                "+",
                "+Francisco A. Lozano (flozano@github)",
                "+  * Contributed fix for #703 (see above)",
                "+   (2.5.2)",
                "+",
                "+Dylan Scott (dylanscott@github)",
                "+  * Reported #738: #738: @JsonTypeInfo non-deterministically ignored in 2.5.1 (concurrency",
                "+    issue)",
                "+   (2.5.2)",
                "+",
                "+Alain Gilbert (agilbert314@github)",
                "+  * Reporter, contributed #766: Fix Infinite recursion (StackOverflowError) when",
                "+    serializing a SOAP object",
                "+   (2.5.3)",
                "+",
                "+Alexey Gavrilov (Alexey1Gavrilov@github)",
                "+  * Reported, contributed fix for #761: Builder deserializer: in-compatible type exception",
                "+    when return type is super type",
                "+   (2.5.3)",
                "+",
                "+Dmitry Spikhalskiy (Spikhalskiy@github)",
                "+  * Reported #731, suggested the way to fix it: XmlAdapter result marshaling error in",
                "+    case of ValueType=Object",
                "+   (2.5.3)",
                "+  * Reported #1456: `TypeFactory` type resolution broken in 2.7 for generic types",
                "+   when using `constructType` with context",
                "+   (2.7.9 / 2.8.6)",
                "+",
                "+John Meyer (jpmeyer@github)",
                "+  * Reported, contributed fix for #745: EnumDeserializer.deserializerForCreator() fails",
                "+    when used to deserialize a Map key",
                "+   (2.5.3)",
                "+",
                "+Andrew Duckett (andrewduckett@github)",
                "+  * Reported #771: Annotation bundles ignored when added to Mixin",
                "+   (2.5.4)",
                "+",
                "+Charles Allen:",
                "+  * Contributed #785: Add handlings for classes which are available in",
                "+    `Thread.currentThread().getContextClassLoader()`",
                "+   (2.5.4)",
                "+",
                "+Andrew Goodale (newyankeecodeshop@github)",
                "+  * Contributed #816: Allow date-only ISO strings to have no time zone",
                "+   (2.5.4)",
                "+",
                "+Kamil Benedykci\u00c5\u0084ski (Kamil-Benedykcinski@github)",
                "+  * Contributed #801: Using `@JsonCreator` cause generating invalid path reference",
                "+   in `JsonMappingException`",
                "+   (2.5.4)",
                "+",
                "+Chi Kim (chikim79@github)",
                "+  * Reported #878: serializeWithType on BeanSerializer does not setCurrentValue",
                "+   (2.5.5 / 2.6.1)",
                "+",
                "+Charles Allen (drcrallen@github):",
                "+  * Reported #696: Copy constructor does not preserve `_injectableValues`",
                "+   (2.6.0)",
                "+",
                "+Chris Pimlott (pimlottc@github):",
                "+  * Suggested #348: ObjectMapper.valueToTree does not work with @JsonRawValue",
                "+   (2.6.0)",
                "+",
                "+Laird Nelson (ljnelson@github)",
                "+  * Suggested #688: Provide a means for an ObjectMapper to discover mixin annotation",
                "+    classes on demand",
                "+   (2.6.0)",
                "+  * Reported #1088: NPE possibility in SimpleMixinResolver",
                "+   (2.6.6)",
                "+",
                "+Derk Norton (derknorton@github)",
                "+  * Suggested #689: Add `ObjectMapper.setDefaultPrettyPrinter(PrettyPrinter)`",
                "+   (2.6.0)",
                "+",
                "+Michal Letynski (mletynski@github)",
                "+  * Suggested #296: Serialization of transient fields with public getters (add",
                "+    MapperFeature.PROPAGATE_TRANSIENT_MARKER)",
                "+   (2.6.0)",
                "+",
                "+Jeff Schnitzer (stickfigure@github)",
                "+  * Suggested #504: Add `DeserializationFeature.USE_LONG_FOR_INTS`",
                "+   (2.6.0)",
                "+",
                "+Jerry Yang (islanderman@github)",
                "+  * Contributed #820: Add new method for `ObjectReader`, to bind from JSON Pointer position",
                "+   (2.6.0)",
                "+",
                "+Lars Pfannenschmidt (larsp@github)",
                "+  * Contributed #826: Replaced synchronized HashMap with ConcurrentHashMap in",
                "+   TypeDeserializerBase._findDeserializer",
                "+   (2.6.0)",
                "+",
                "+Stephen A. Goss (thezerobit@github)",
                "+  * Contributed #828: Respect DeserializationFeatures.WRAP_EXCEPTIONS in CollectionDeserializer",
                "+   (2.6.0)",
                "+",
                "+Andy Wilkinson (wilkinsona@github)",
                "+  * Reported #889: Configuring an ObjectMapper's DateFormat changes time zone",
                "+   (2.6.1)",
                "+",
                "+lufe66@github:",
                "+  * Reported 894: When using withFactory on ObjectMapper, the created Factory has a TypeParser",
                "+    which still has the original Factory",
                "+   (2.6.2)",
                "+",
                "+Daniel Walker (dsw2127@github)",
                "+  * Reported, contributed fix for #913: `ObjectMapper.copy()` does not preserve",
                "+   `MappingJsonFactory` features",
                "+   (2.6.2)",
                "+",
                "+Sadayuki Furuhashi (frsyuki@github)",
                "+  * Reported #941: Deserialization from \"{}\" to ObjectNode field causes",
                "+    \"out of END_OBJECT token\" error",
                "+   (2.6.3)",
                "+",
                "+David Haraburda (dharaburda@github)",
                "+  * Contributed #918: Add `MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING`",
                "+   (2.7.0)",
                "+",
                "+Sergio Mira (Sergio-Mira@github)",
                "+  * Contributed #940: Add missing `hashCode()` implementations for `JsonNode` types that did not have them",
                "+   (2.6.3)",
                "+",
                "+Andreas Pieber (anpieber@github)",
                "+  * Reported #939: Regression: DateConversionError in 2.6.x\t",
                "+   (2.6.3)",
                "+",
                "+Jesse Wilson (swankjesse@github)",
                "+  * Contributed #948: Support leap seconds, any number of millisecond digits for ISO-8601 Dates.",
                "+   (2.6.3)",
                "+  * Contributed #949: Report the offending substring when number parsing fails",
                "+   (2.6.3)",
                "+",
                "+Warren Bloomer (stormboy@github)",
                "+  * Reported #942: Handle null type id for polymorphic values that use external type id",
                "+   (2.6.3)",
                "+",
                "+Ievgen Pianov (pyanoveugen@github)",
                "+  * Reported #989: Deserialization from \"{}\" to java.lang.Object causes \"out of END_OBJECT token\" error",
                "+   (2.6.3)",
                "+",
                "+Jayson Minard (apatrida@github)",
                "+  * Reported #1005: Synthetic constructors confusing Jackson data binding",
                "+   (2.6.4)",
                "+  * Reported #1438: `ACCEPT_CASE_INSENSITIVE_PROPERTIES` is not respected for creator properties",
                "+   (2.8.5)",
                "+",
                "+David Bakin (david-bakin@github)",
                "+  * Reported #1013: `@JsonUnwrapped` is not treated as assuming `@JsonProperty(\"\")`",
                "+   (2.6.4)",
                "+  * Suggested #1011: Change ObjectWriter::withAttributes() to take a Map with some kind of wildcard types",
                "+   (2.7.0)",
                "+",
                "+Dmitry Romantsov (DmRomantsov@github)",
                "+  * Reported #1036: Problem with case-insensitive deserialization",
                "+   (2.6.4)",
                "+",
                "+Daniel Norberg (danielnorberg@github)",
                "+  * Contributed #1099: Fix custom comparator container node traversal",
                "+   (2.6.6)",
                "+",
                "+Miles Kaufmann (milesk-amzn@github)",
                "+  * Reported #432: `StdValueInstantiator` unwraps exceptions, losing context",
                "+   (2.7.0)",
                "+",
                "+Thomas Mortagne (tmortagne@github)",
                "+  * Suggested #857: Add support for java.beans.Transient",
                "+   (2.7.0)",
                "+",
                "+Jonas Konrad (yawkat@github)",
                "+  * Suggested #905: Add support for `@ConstructorProperties`",
                "+   (2.7.0)",
                "+",
                "+Jirka Kremser (Jiri-Kremser@github)",
                "+  * Suggested #924: SequenceWriter.writeAll() could accept Iterable",
                "+   (2.7.0)",
                "+",
                "+Daniel Mischler (danielmischler@github)",
                "+  * Requested #963: Add PropertyNameStrategy `KEBAB_CASE`",
                "+   (2.7.0)",
                "+",
                "+Shumpei Akai (flexfrank@github)",
                "+  * Reported #978: ObjectMapper#canSerialize(Object.class) returns false even though",
                "+   FAIL_ON_EMPTY_BEANS is disabled",
                "+   (2.7.0)",
                "+",
                "+Hugo Wood (hgwood@github)",
                "+  * Contributed #1010: Support for array delegator",
                "+   (2.7.0)",
                "+",
                "+Julian Hyde (julianhyde@github)",
                "+  * Reported #1083: Field in base class is not recognized, when using `@JsonType.defaultImpl`",
                "+   (2.7.1)",
                "+",
                "+Thibault Kruse (tkruse@github)",
                "+  * Reported #1102: Handling of deprecated `SimpleType.construct()` too minimalistic",
                "+   (2.7.1)",
                "+",
                "+Aleks Seovic (aseovic@github)",
                "+  * Reported #1109: @JsonFormat is ignored by the DateSerializer unless either a custom pattern",
                "+    or a timezone are specified",
                "+   (2.7.1)",
                "+",
                "+Timur Shakurov (saladinkzn@github)",
                "+  * Reported #1134: Jackson 2.7 doesn't work with jdk6 due to use of `Collections.emptyIterator()`",
                "+   (2.7.2)",
                "+",
                "+Jiri Mikulasek (pirkogdc@github)",
                "+  * Reported #1124: JsonAnyGetter ignores JsonSerialize(contentUsing=...)",
                "+   (2.7.2)",
                "+",
                "+Xavi Torrens (xavitorrens@github)",
                "+  * Reported #1150: Problem with Object id handling, explicit `null` token",
                "+   (2.7.3)",
                "+",
                "+Yoann Rodi\u00c3\u00a8re (fenrhil@github)",
                "+  * Reported #1154: @JsonFormat.pattern on dates is now ignored if shape is not",
                "+    explicitely provided",
                "+   (2.7.3)",
                "+",
                "+Mark Woon (markwoon@github)",
                "+  * Reported #1178: `@JsonSerialize(contentAs=superType)` behavior disallowed in 2.7",
                "+   (2.7.4)",
                "+  * Reported #1231: `@JsonSerialize(as=superType)` behavior disallowed in 2.7.4",
                "+   (2.7.5)",
                "+  * Suggested #507: Support for default `@JsonView` for a class",
                "+   (2.9.0)",
                "+",
                "+Tom Mack (tommack@github)",
                "+  * Reported #1208: treeToValue doesn't handle POJONodes that contain exactly",
                "+    the requested value type",
                "+   (2.7.4)",
                "+",
                "+William Headrick (headw01@github)",
                "+   * Reported#1223: `BasicClassIntrospector.forSerialization(...).findProperties` should",
                "+    respect MapperFeature.AUTO_DETECT_GETTERS/SETTERS?",
                "+   (2.7.5)",
                "+",
                "+Nick Babcock (nickbabcock)",
                "+  * Reported #1225: `JsonMappingException` should override getProcessor()",
                "+   (2.7.5)",
                "+  * Suggested #1356: Differentiate between input and code exceptions on deserialization",
                "+   (2.9.0)",
                "+",
                "+Andrew Joseph (apjoseph@github)",
                "+  * Reported #1248: `Annotated` returns raw type in place of Generic Type in 2.7.x",
                "+   (2.7.5)",
                "+",
                "+Erich Schubert (kno10@github)",
                "+  * Reported #1260: `NullPointerException` in `JsonNodeDeserializer`, provided fix",
                "+   (2.7.5)",
                "+",
                "+Brian Pontarelli (voidmain@github)",
                "+  * Reported #1301: Problem with `JavaType.toString()` for recursive (self-referential) types",
                "+   (2.7.6)",
                "+",
                "+Max Drobotov (fizmax@github)",
                "+  * Reported, contributed fix for #1332: `ArrayIndexOutOfBoundException` for enum by index deser",
                "+   (2.7.7)",
                "+",
                "+Stuart Douglas (stuartwdouglas@github)",
                "+  * Reported #1363: The static field ClassUtil.sCached can cause a class loader leak",
                "+   (2.7.8)",
                "+",
                "+Josh Caplan (jecaplan@github)",
                "+  * Reported, suggested fix for #1368: Problem serializing `JsonMappingException` due to addition",
                "+    of non-ignored `processor` property (added in 2.7)",
                "+   (2.7.8)",
                "+",
                "+Diego de Estrada (diegode@github)",
                "+  * Contributed fix for #1367: No Object Id found for an instance when using `@ConstructorProperties`",
                "+   (2.7.9)",
                "+",
                "+Kevin Hogeland (khogeland@github)",
                "+  * Reported #1501: `ArrayIndexOutOfBoundsException` on non-static inner class constructor",
                "+   (2.7.9)",
                "+",
                "+Artur Jonkisz (ajonkisz@github)",
                "+  * Reported #960: `@JsonCreator` not working on a factory with no arguments for ae enum type",
                "+   (2.8.0)",
                "+",
                "+Mikhail Kokho (mkokho@github)",
                "+  * Contributed impl for #990: Allow failing on `null` values for creator (add",
                "+  `DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES`)",
                "+   (2.8.0)",
                "+",
                "+Aleksandr Oksenenko (oleksandr-oksenenko@github)",
                "+  * Reported #999: External property is not deserialized",
                "+   (2.8.0)",
                "+",
                "+Lokesh Kumar (LokeshN@github)",
                "+  * Contributed impl for #1082: Can not use static Creator factory methods for `Enum`s,",
                "+    with JsonCreator.Mode.PROPERTIES",
                "+   (2.8.0)",
                "+  * Reported #1217: `@JsonIgnoreProperties` on Pojo fields not working for deserialization",
                "+   (2.8.0)",
                "+",
                "+Ross Goldberg",
                "+  * Reported #1165, provided fix for: `CoreXMLDeserializers` does not handle",
                "+    time-only `XMLGregorianCalendar`s",
                "+   (2.8.0)",
                "+",
                "+Maarten Billemont (lhunath@github)",
                "+  * Suggested #1184: Allow overriding of `transient` with explicit inclusion with `@JsonProperty`",
                "+   (2.8.0)",
                "+",
                "+Vladimir Kulev (lightoze@github)",
                "+  * Reported #1028: Ignore USE_BIG_DECIMAL_FOR_FLOATS for NaN/Infinity",
                "+   (2.8.0)",
                "+",
                "+Ari Fogel (arifogel@github)",
                "+  * Reported #1261, contributed fix for: `@JsonIdentityInfo` deserialization fails with",
                "+    combination of forward references, `@JsonCreator`",
                "+   (2.8.0)",
                "+",
                "+Andriy Plokhotnyuk (plokhotnyuk@github)",
                "+  * Requested #1277: Add caching of resolved generic types for `TypeFactory`",
                "+   (2.8.0)",
                "+",
                "+Arek Gabiga (arekgabiga@github)",
                "+  * Reported #1297: Deserialization of generic type with Map.class",
                "+   (2.8.1)",
                "+",
                "+Chris Jester-Young (cky@github)",
                "+  * Contributed #1335: Unconditionally call `TypeIdResolver.getDescForKnownTypeIds`",
                "+   (2.8.2)",
                "+",
                "+Andrew Snare (asnare@github)",
                "+  * Reported #1315: Binding numeric values can BigDecimal lose precision",
                "+   (2.8.2)",
                "+",
                "+Gili Tzabari (cowwoc@github)",
                "+  * Reported #1351: `@JsonInclude(NON_DEFAULT)` doesn't omit null fields",
                "+   (2.8.3)",
                "+",
                "+Oleg Zhukov (OlegZhukov@github)",
                "+  * Reported #1384: `@JsonDeserialize(keyUsing = ...)` does not work correctly",
                "+   together with `DefaultTyping.NON_FINAL`",
                "+   (2.8.4)",
                "+",
                "+Pavel Popov (tolkonepiu@github)",
                "+  * Contributed fix #1389: Problem with handling of multi-argument creator with Enums",
                "+   (2.8.4)",
                "+",
                "+Josh Gruenberg (joshng@github)",
                "+  * Reported #1403: Reference-chain hints use incorrect class-name for inner classes",
                "+   (2.8.4)",
                "+",
                "+Kevin Donnelly (kpdonn@github)",
                "+  * Reported #1432: Off by 1 bug in PropertyValueBuffer",
                "+   (2.8.5)",
                "+",
                "+Nathanial Ofiesh (ofiesh@github)",
                "+  * Reported #1441: Failure with custom Enum key deserializer, polymorphic types",
                "+   (2.8.5)",
                "+",
                "+Fr\u00c3\u00a9d\u00c3\u00a9ric Camblor (fcamblor@github)",
                "+  * Reported #1451: Type parameter not passed by `ObjectWriter` if serializer pre-fetch disabled",
                "+   (2.8.6)",
                "+",
                "+Stephan Schroevers (Stephan202@github)",
                "+  * Reported #1505: @JsonEnumDefaultValue should take precedence over FAIL_ON_NUMBERS_FOR_ENUMS",
                "+   (2.8.7)",
                "+",
                "+Alex Panchenko (panchenko@github)",
                "+  * Reported #1543: JsonFormat.Shape.NUMBER_INT does not work when defined on enum type in 2.8",
                "+   (2.8.8)",
                "+",
                "+Joshua Jones",
                "+  * Reported #1573, contributed fix: Missing properties when deserializing using a builder class",
                "+   with a non-default constructor and a mutator annotated with `@JsonUnwrapped`",
                "+   (2.8.8)",
                "+",
                "+Ivo Studens (istudens@redhat.com)",
                "+  * Contributed #1585: Invoke ServiceLoader.load() inside of a privileged block",
                "+    when loading modules using `ObjectMapper.findModules()`",
                "+   (2.8.9)",
                "+",
                "+Javy Luo (AnywnYu@github)",
                "+  * Reported #1595: `JsonIgnoreProperties.allowSetters` is not working in Jackson 2.8",
                "+   (2.8.9)",
                "+",
                "+Marco Catania (catanm@github.com)",
                "+  * Contributed #1597: Escape JSONP breaking characters",
                "+   (2.8.9)",
                "+",
                "+Andrew Joseph (apjoseph@github)",
                "+  * Reported #1629 `FromStringDeserializer` ignores registered `DeserializationProblemHandler`",
                "+    for `java.util.UUID`",
                "+   (2.8.9)",
                "+",
                "+Joe Littlejohn (joelittlejohn@github)",
                "+  * Contributed #1642: Support `READ_UNKNOWN_ENUM_VALUES_AS_NULL` with `@JsonCreator`",
                "+   (2.8.9)",
                "+",
                "+Slobodan Pejic (slobo-showbie@github)",
                "+  * Reported #1647, contributed fix: Missing properties from base class when recursive",
                "+    types are involved",
                "+   (2.8.9)",
                "+",
                "+Bertrand Renuart (brenuart@github)",
                "+  * Reported #1648: `DateTimeSerializerBase` ignores configured date format when creating contextual",
                "+   (2.8.9)",
                "+  * Reported #1651: `StdDateFormat` fails to parse 'zulu' date when TimeZone other than UTC",
                "+   (2.8.9)",
                "+  * Suggested #1745: StdDateFormat: accept and truncate millis larger than 3 digits",
                "+   (2.9.1)",
                "+  * Contributed #1749: StdDateFormat: performance improvement of '_format(..)' method",
                "+   (2.9.1)",
                "+  * Contributed #1759: Reuse `Calendar` instance during parsing by `StdDateFormat`",
                "+   (2.9.1)",
                "+",
                "+Kevin Gallardo (newkek@github)",
                "+  * Reported #1658: Infinite recursion when deserializing a class extending a Map,",
                "+    with a recursive value type",
                "+   (2.8.10)",
                "+  * Reported #1729: Integer bounds verification when calling `TokenBuffer.getIntValue()`",
                "+   (2.9.4)",
                "+",
                "+Lukas Euler",
                "+  * Reported #1735: Missing type checks when using polymorphic type ids",
                "+",
                "+Connor Kuhn (ckuhn@github)",
                "+  * Contributed #1341: FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY",
                "+   (2.9.0)",
                "+",
                "+Jan Lolling (jlolling@github)",
                "+  * Contributed #1319: Add `ObjectNode.put(String, BigInteger)`",
                "+   (2.9.0)",
                "+",
                "+Michael R Fairhurst (MichaelRFairhurst@github)",
                "+  * Reported #1035: `@JsonAnySetter` assumes key of `String`, does not consider declared type.",
                "+   (2.9.0)",
                "+",
                "+Fabrizio Cucci (fabriziocucci@github)",
                "+  * Reported #1406: `ObjectMapper.readTree()` methods do not return `null` on end-of-input",
                "+   (2.9.0)",
                "+",
                "+Emiliano Clari\u00c3\u00a1 (emilianogc@github)",
                "+  * Contributed #1434: Explicitly pass null on invoke calls with no arguments",
                "+   (2.9.0)",
                "+",
                "+Ana Eliza Barbosa (AnaEliza@github)",
                "+  * Contributed #1520: Case insensitive enum deserialization feature.",
                "+   (2.9.0)",
                "+",
                "+Lyor Goldstein (lgoldstein@github)",
                "+  * Reported #1544: `EnumMapDeserializer` assumes a pure `EnumMap` and does not support",
                "+    derived classes",
                "+   (2.9.0)",
                "+",
                "+Harleen Sahni (harleensahni@github)",
                "+  * Reported #403: Make FAIL_ON_NULL_FOR_PRIMITIVES apply to primitive arrays and other",
                "+    types that wrap primitives",
                "+   (2.9.0)",
                "+",
                "+Jared Jacobs (2is10@github)",
                "+  * Requested #1605: Allow serialization of `InetAddress` as simple numeric host address",
                "+   (2.9.0)",
                "+",
                "+Patrick Gunia (pgunia@github)",
                "+  * Reported #1440: Wrong `JsonStreamContext` in `DeserializationProblemHandler` when reading",
                "+  `TokenBuffer` content",
                "+   (2.9.0)",
                "+",
                "+Carsten Wickner (CarstenWickner@github)",
                "+  * Contributed #1522: Global `@JsonInclude(Include.NON_NULL)` for all properties with a specific type",
                "+   (2.9.0)",
                "+",
                "+Chris Plummer (strmer15@github)",
                "+  * Reported #1637: `ObjectReader.at()` with `JsonPointer` stops after first collection",
                "+   (2.9.0)",
                "+",
                "+Christian Basler (Dissem@github)",
                "+  * Reported #1688: Deserialization fails for `java.nio.file.Path` implementations when",
                "+    default typing enabled",
                "+   (2.9.0)",
                "+",
                "+Tim Bartley (tbartley@github)",
                "+  * Reported, suggested fix for #1705: Non-generic interface method hides type resolution info",
                "+    from generic base class",
                "+   (2.9.1)",
                "+",
                "+Lu\u00c3\u00ads Cleto (luiscleto@github)",
                "+  * Suggested 1768: Improve `TypeFactory.constructFromCanonical()` to work with",
                "+   `java.lang.reflect.Type.getTypeName()` format",
                "+   (2.9.2)",
                "+",
                "+Vincent Demay (vdemay@github)",
                "+  * Reported #1793: `java.lang.NullPointerException` in `ObjectArraySerializer.acceptJsonFormatVisitor()`",
                "+    for array value with `@JsonValue`",
                "+   (2.9.2)",
                "+",
                "+Peter Jurkovic (peterjurkovic@github)",
                "+  * Reported #1823: ClassNameIdResolver doesn't handle resolve Collections$SingletonMap,",
                "+    Collections$SingletonSet",
                "+   (2.9.3)",
                "+",
                "+alinakovalenko@github:",
                "+  * Reported #1844: Map \"deep\" merge only adds new items, but not override existing values",
                "+   (2.9.3)",
                "+",
                "+Pier-Luc Whissell (pwhissell@github):",
                "+  * Reported #1673: Serialising generic value classes via Reference Types (like Optional) fails",
                "+    to include type information",
                "+   (2.9.4)",
                "+",
                "+Alexander Skvortcov (askvortcov@github)",
                "+  * Reported #1853: Deserialise from Object (using Creator methods) returns field name",
                "+    instead of value",
                "+   (2.9.4)",
                "+",
                "+Joe Schafer (jschaf@github)",
                "+  * Reported #1907: Remove `getClass()` from `_valueType` argument for error reporting",
                "+   (2.9.4)",
                "diff --git a/release-notes/VERSION-2.x b/release-notes/VERSION-2.x",
                "index 22af5ec6f..dc9f089c8 100644",
                "--- a/release-notes/VERSION-2.x",
                "+++ b/release-notes/VERSION-2.x",
                "@@ -1,3 +1,2 @@",
                "-Project: jackson-databind",
                "-------------------------------------------------------------------------",
                "+Project: jackson-databin------------------------------------------------------------------------",
                " === Releases === ",
                "@@ -30,2 +29,4 @@ Project: jackson-databind",
                "  (reported by OneSourceCat@github)",
                "+#1907: Remove `getClass()` from `_valueType` argument for error reporting",
                "+ (reported by Joe S)",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/FactoryBasedEnumDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/FactoryBasedEnumDeserializer.java",
                "index 92b78249b..8802f5a70 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/FactoryBasedEnumDeserializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/FactoryBasedEnumDeserializer.java",
                "@@ -179,14 +179,13 @@ class FactoryBasedEnumDeserializer",
                "     protected final Object _deserializeWithErrorWrapping(JsonParser p, DeserializationContext ctxt,",
                "-    \t\tSettableBeanProperty prop) throws IOException {",
                "-    \ttry {",
                "-    \t\treturn prop.deserialize(p, ctxt);",
                "-    \t} catch (Exception e) {",
                "-    \t\twrapAndThrow(e, _valueClass.getClass(), prop.getName(), ctxt);",
                "-    \t\t// never gets here, unless caller declines to throw an exception",
                "-    \t\treturn null;",
                "-    \t}",
                "+            SettableBeanProperty prop) throws IOException",
                "+    {",
                "+        try {",
                "+            return prop.deserialize(p, ctxt);",
                "+        } catch (Exception e) {",
                "+            return wrapAndThrow(e, handledType(), prop.getName(), ctxt);",
                "+        }",
                "     }",
                "-    public void wrapAndThrow(Throwable t, Object bean, String fieldName, DeserializationContext ctxt)",
                "-    \t\tthrows IOException",
                "+    protected Object wrapAndThrow(Throwable t, Object bean, String fieldName, DeserializationContext ctxt)",
                "+            throws IOException",
                "     {",
                "@@ -211,2 +210,2 @@ class FactoryBasedEnumDeserializer",
                "     }",
                "-}",
                "\\ No newline at end of file",
                "+}"
            ],
            "changed_files": [
                "release-notes/CREDITS-2.x",
                "release-notes/VERSION-2.x",
                "src/main/java/com/fasterxml/jackson/databind/deser/std/FactoryBasedEnumDeserializer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1907": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "jackson-databind-2.10.0",
                "jackson-databind-2.10.0.pr1",
                "jackson-databind-2.10.0.pr2",
                "jackson-databind-2.10.0.pr3",
                "jackson-databind-2.10.1",
                "jackson-databind-2.10.2",
                "jackson-databind-2.10.3",
                "jackson-databind-2.10.4",
                "jackson-databind-2.10.5",
                "jackson-databind-2.10.5.1",
                "jackson-databind-2.11.0",
                "jackson-databind-2.11.0.rc1",
                "jackson-databind-2.11.1",
                "jackson-databind-2.11.2",
                "jackson-databind-2.11.3",
                "jackson-databind-2.11.4",
                "jackson-databind-2.12.0",
                "jackson-databind-2.12.0-rc1",
                "jackson-databind-2.12.0-rc2",
                "jackson-databind-2.12.1",
                "jackson-databind-2.12.2",
                "jackson-databind-2.12.3",
                "jackson-databind-2.12.4",
                "jackson-databind-2.12.5",
                "jackson-databind-2.12.6",
                "jackson-databind-2.12.6.1",
                "jackson-databind-2.12.7",
                "jackson-databind-2.12.7.1",
                "jackson-databind-2.12.7.2",
                "jackson-databind-2.13.0",
                "jackson-databind-2.13.0-rc1",
                "jackson-databind-2.13.0-rc2",
                "jackson-databind-2.13.1",
                "jackson-databind-2.13.2",
                "jackson-databind-2.13.2.1",
                "jackson-databind-2.13.2.2",
                "jackson-databind-2.13.3",
                "jackson-databind-2.13.4",
                "jackson-databind-2.13.4.1",
                "jackson-databind-2.13.4.2",
                "jackson-databind-2.13.5",
                "jackson-databind-2.14.0",
                "jackson-databind-2.14.0-rc1",
                "jackson-databind-2.14.0-rc2",
                "jackson-databind-2.14.0-rc3",
                "jackson-databind-2.14.1",
                "jackson-databind-2.14.2",
                "jackson-databind-2.14.3",
                "jackson-databind-2.15.0",
                "jackson-databind-2.15.0-rc1",
                "jackson-databind-2.15.0-rc2",
                "jackson-databind-2.15.0-rc3",
                "jackson-databind-2.15.1",
                "jackson-databind-2.15.2",
                "jackson-databind-2.15.3",
                "jackson-databind-2.15.4",
                "jackson-databind-2.16.0",
                "jackson-databind-2.16.0-rc1",
                "jackson-databind-2.16.1",
                "jackson-databind-2.16.2",
                "jackson-databind-2.17.0",
                "jackson-databind-2.17.0-rc1",
                "jackson-databind-2.17.1",
                "jackson-databind-2.17.2",
                "jackson-databind-2.9.10",
                "jackson-databind-2.9.10.1",
                "jackson-databind-2.9.10.2",
                "jackson-databind-2.9.10.3",
                "jackson-databind-2.9.10.4",
                "jackson-databind-2.9.10.5",
                "jackson-databind-2.9.10.6",
                "jackson-databind-2.9.10.7",
                "jackson-databind-2.9.10.8",
                "jackson-databind-2.9.4",
                "jackson-databind-2.9.5",
                "jackson-databind-2.9.6",
                "jackson-databind-2.9.7",
                "jackson-databind-2.9.8",
                "jackson-databind-2.9.9",
                "jackson-databind-2.9.9.1",
                "jackson-databind-2.9.9.2",
                "jackson-databind-2.9.9.3"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/deser/std/FactoryBasedEnumDeserializer.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: fasterxml",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1907",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c52b0d1ee9c64f786498a1ecc0055015d9f1ecc5",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1515816599,
            "hunks": 49,
            "message": "Fix #1888",
            "diff": [
                "diff --git a/release-notes/VERSION b/release-notes/VERSION",
                "index b125d4f9f..e3321369e 100644",
                "--- a/release-notes/VERSION",
                "+++ b/release-notes/VERSION",
                "@@ -20,2 +20,4 @@ Versions: 3.x (for earlier see VERSION-2.x)",
                " #1790: Add `createParser` methods in `ObjectMapper`, `ObjectReader`",
                "+#1888: Merge `ResolvableSerializer` into `JsonSerializer`, `ResolvableDeserializer`",
                "+ into `JsonDeserializer`",
                " - Remove `MappingJsonFactory`",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java",
                "index 1ae07a19c..d28ba60ca 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java",
                "@@ -578,3 +578,3 @@ public abstract class DeserializationContext",
                "      * {@link #findRootValueDeserializer(JavaType)}.",
                "-     * This method is usually called from within {@link ResolvableDeserializer#resolve},",
                "+     * This method is usually called from within {@link JsonDeserializer#resolve},",
                "      * and expectation is that caller then calls either",
                "@@ -583,4 +583,2 @@ public abstract class DeserializationContext",
                "      * later point, as necessary.",
                "-     *",
                "-     * @since 2.5",
                "      */",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java",
                "index d2a4c7b88..a99121887 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java",
                "@@ -24,3 +24,3 @@ import com.fasterxml.jackson.databind.util.NameTransformer;",
                "  * of its contents by using other deserializer(s) -- it typically also needs",
                "- * to implement {@link com.fasterxml.jackson.databind.deser.ResolvableDeserializer},",
                "+ * to implement {@link #resolve}",
                "  * which can locate dependant deserializers. This is important to allow dynamic",
                "@@ -38,8 +38,4 @@ import com.fasterxml.jackson.databind.util.NameTransformer;",
                "  * deserializer for handling that particular property.",
                "- *<p>",
                "- * If both",
                "- * {@link com.fasterxml.jackson.databind.deser.ResolvableDeserializer} and",
                "- * {@link com.fasterxml.jackson.databind.deser.ContextualDeserializer}",
                "- * are implemented, resolution of deserializers occurs before",
                "- * contextualization.",
                "+ *<br />",
                "+ * Resolution of deserializers occurs before contextualization.",
                "  */",
                "@@ -48,2 +44,22 @@ public abstract class JsonDeserializer<T>",
                " {",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Initialization, with former `ResolvableDeserializer`",
                "+    /**********************************************************",
                "+     */",
                "+",
                "+    /**",
                "+     * Method called after deserializer instance has been constructed",
                "+     * (and registered as necessary by provider objects),",
                "+     * but before it has returned it to the caller.",
                "+     * Called object can then resolve its dependencies to other types,",
                "+     * including self-references (direct or indirect).",
                "+     *",
                "+     * @param ctxt Context to use for accessing configuration, resolving",
                "+     *    secondary deserializers",
                "+     */",
                "+    public void resolve(DeserializationContext ctxt) throws JsonMappingException {",
                "+        // Default implementation does nothing",
                "+    }",
                "+",
                "     /*",
                "@@ -211,5 +227,6 @@ public abstract class JsonDeserializer<T>",
                "      *<p>",
                "-     * Note that cached instances are still resolved on per-property basis,",
                "-     * if instance implements {@link com.fasterxml.jackson.databind.deser.ResolvableDeserializer}:",
                "-     * cached instance is just as the base. This means that in most cases it is safe to",
                "+     * Note that cached instances are still contextualized on per-property basis",
                "+     * (but note that {@link JsonDeserializer#resolve(DeserializationContext)}d",
                "+     * just once!)",
                "+     * This means that in most cases it is safe to",
                "      * cache instances; however, it only makes sense to cache instances",
                "@@ -217,4 +234,3 @@ public abstract class JsonDeserializer<T>",
                "      *<p>",
                "-     * Default implementation returns false, to indicate that no caching",
                "-     * is done.",
                "+     * Default implementation returns false, to indicate that no caching is done.",
                "      */",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/JsonSerializer.java b/src/main/java/com/fasterxml/jackson/databind/JsonSerializer.java",
                "index a36895184..488d21a5b 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/JsonSerializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/JsonSerializer.java",
                "@@ -53,3 +53,3 @@ public abstract class JsonSerializer<T>",
                "     /**********************************************************",
                "-    /* Initialization, with former `ResolvableSerializer",
                "+    /* Initialization, with former `ResolvableSerializer`",
                "     /**********************************************************",
                "@@ -69,4 +69,3 @@ public abstract class JsonSerializer<T>",
                "      */",
                "-    public void resolve(SerializerProvider provider)",
                "-        throws JsonMappingException {",
                "+    public void resolve(SerializerProvider provider) throws JsonMappingException {",
                "         // Default implementation does nothing",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/KeyDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/KeyDeserializer.java",
                "index 217527d41..12c5a2bac 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/KeyDeserializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/KeyDeserializer.java",
                "@@ -11,2 +11,28 @@ public abstract class KeyDeserializer",
                " {",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Initialization, with former `ResolvableDeserializer`",
                "+    /**********************************************************",
                "+     */",
                "+",
                "+    /**",
                "+     * Method called after deserializer instance has been constructed",
                "+     * (and registered as necessary by provider objects),",
                "+     * but before it has returned it to the caller.",
                "+     * Called object can then resolve its dependencies to other types,",
                "+     * including self-references (direct or indirect).",
                "+     *",
                "+     * @param ctxt Context to use for accessing configuration, resolving",
                "+     *    secondary deserializers",
                "+     */",
                "+    public void resolve(DeserializationContext ctxt) throws JsonMappingException {",
                "+        // Default implementation does nothing",
                "+    }",
                "+",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Main API",
                "+    /**********************************************************",
                "+     */",
                "+    ",
                "     /**",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
                "index b7a324006..aa34f0d90 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
                "@@ -27,3 +27,3 @@ public abstract class BeanDeserializerBase",
                "     extends StdDeserializer<Object>",
                "-    implements ContextualDeserializer, ResolvableDeserializer,",
                "+    implements ContextualDeserializer,",
                "         ValueInstantiator.Gettable,",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/ContextualDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/ContextualDeserializer.java",
                "index 9db1f7530..39d0aef2e 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/ContextualDeserializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/ContextualDeserializer.java",
                "@@ -13,4 +13,3 @@ import com.fasterxml.jackson.databind.*;",
                "  * Note that in cases where deserializer needs both contextualization and",
                "- * resolution -- that is, implements both this interface and {@link ResolvableDeserializer}",
                "- * -- resolution via {@link ResolvableDeserializer} occurs first, and contextual",
                "+ * resolution -- resolution occurs first, and contextual",
                "  * resolution (via this interface) later on.",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java b/src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
                "index 858a8f5ff..f01491f37 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
                "@@ -236,5 +236,3 @@ public abstract class DefaultDeserializationContext",
                "         // First: need to resolve",
                "-        if (deser instanceof ResolvableDeserializer) {",
                "-            ((ResolvableDeserializer) deser).resolve(this);",
                "-        }",
                "+        deser.resolve(this);",
                "         return (JsonDeserializer<Object>) deser;",
                "@@ -277,5 +275,3 @@ public abstract class DefaultDeserializationContext",
                "         // First: need to resolve",
                "-        if (deser instanceof ResolvableDeserializer) {",
                "-            ((ResolvableDeserializer) deser).resolve(this);",
                "-        }",
                "+        deser.resolve(this);",
                "         return deser;",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java b/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
                "index b4dbdbe23..be1569c89 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
                "@@ -122,3 +122,3 @@ public final class DeserializerCache",
                "      * Note also that deserializer returned is guaranteed to be resolved",
                "-     * (if it is of type {@link ResolvableDeserializer}), but",
                "+     * (see {@link JsonDeserializer#resolve}), but",
                "      * not contextualized (wrt {@link ContextualDeserializer}): caller",
                "@@ -170,5 +170,3 @@ public final class DeserializerCache",
                "         // First: need to resolve?",
                "-        if (kd instanceof ResolvableDeserializer) {",
                "-            ((ResolvableDeserializer) kd).resolve(ctxt);",
                "-        }",
                "+        kd.resolve(ctxt);",
                "         return kd;",
                "@@ -290,5 +288,6 @@ public final class DeserializerCache",
                "          */",
                "-        if (deser instanceof ResolvableDeserializer) {",
                "-            _incompleteDeserializers.put(type, deser);",
                "-            ((ResolvableDeserializer)deser).resolve(ctxt);",
                "+        _incompleteDeserializers.put(type, deser);",
                "+        try {",
                "+            deser.resolve(ctxt);",
                "+        } finally {",
                "             _incompleteDeserializers.remove(type);",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/Deserializers.java b/src/main/java/com/fasterxml/jackson/databind/deser/Deserializers.java",
                "index 360a08fbc..4fd09db08 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/Deserializers.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/Deserializers.java",
                "@@ -102,4 +102,4 @@ public interface Deserializers",
                "      * @param elementDeserializer Deserializer to use for elements, if explicitly defined (by using",
                "-     *    annotations, for exmple). May be null, in which case it should be resolved here (or using",
                "-     *    {@link ResolvableDeserializer} callback)",
                "+     *    annotations, for example). May be null, in which case it will need to be resolved",
                "+     *    by deserializer at a later point.",
                "      * ",
                "@@ -112,3 +112,2 @@ public interface Deserializers",
                "-    ",
                "     /**",
                "@@ -129,4 +128,4 @@ public interface Deserializers",
                "      * @param elementDeserializer Deserializer to use for elements, if explicitly defined (by using",
                "-     *    annotations, for exmple). May be null, in which case it should be resolved here (or using",
                "-     *    {@link ResolvableDeserializer} callback)",
                "+     *    annotations, for example). May be null, in which case it will need to be resolved",
                "+     *    by deserializer at a later point.",
                "      * ",
                "@@ -157,4 +156,4 @@ public interface Deserializers",
                "      * @param elementDeserializer Deserializer to use for elements, if explicitly defined (by using",
                "-     *    annotations, for exmple). May be null, in which case it should be resolved here (or using",
                "-     *    {@link ResolvableDeserializer} callback)",
                "+     *    annotations, for example). May be null, in which case it will need to be resolved",
                "+     *    by deserializer at a later point.",
                "      * ",
                "@@ -178,3 +177,3 @@ public interface Deserializers",
                "      * Otherwise null is passed, and key deserializer needs to be obtained later during",
                "-     * resolution (using {@link ResolvableDeserializer#resolve}).",
                "+     * resolution of map serializer constructed here.",
                "      * ",
                "@@ -190,4 +189,4 @@ public interface Deserializers",
                "      * @param elementDeserializer Deserializer to use for elements, if explicitly defined (by using",
                "-     *    annotations, for exmple). May be null, in which case it should be resolved here (or using",
                "-     *    {@link ResolvableDeserializer} callback)",
                "+     *    annotations, for example). May be null, in which case it will need to be resolved",
                "+     *    by deserializer at a later point.",
                "      * ",
                "@@ -214,3 +213,3 @@ public interface Deserializers",
                "      * Otherwise null is passed, and key deserializer needs to be obtained later during",
                "-     * resolution (using {@link ResolvableDeserializer#resolve}).",
                "+     * resolution, by deserializer constructed here.",
                "      * ",
                "@@ -226,4 +225,4 @@ public interface Deserializers",
                "      * @param elementDeserializer Deserializer to use for elements, if explicitly defined (by using",
                "-     *    annotations, for exmple). May be null, in which case it should be resolved here (or using",
                "-     *    {@link ResolvableDeserializer} callback)",
                "+     *    annotations, for example). May be null, in which case it will need to be resolved",
                "+     *    by deserializer at a later point.",
                "      * ",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/ResolvableDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/ResolvableDeserializer.java",
                "index 0d97b2d0d..d4720773e 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/ResolvableDeserializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/ResolvableDeserializer.java",
                "@@ -5,3 +5,3 @@ import com.fasterxml.jackson.databind.JsonMappingException;",
                "-/**",
                "+/*",
                "  * Interface used to indicate deserializers that want to do post-processing",
                "@@ -29,15 +29,13 @@ import com.fasterxml.jackson.databind.JsonMappingException;",
                "  * resolution (using {@link ContextualDeserializer}) later on.",
                "+ *",
                "+ * @deprecated Since 3.0: method demoted to <code>JsonSerializer</code>",
                "  */",
                "+/**",
                "+ * Leftover interface from 2.x: method now merged in <code>JsonSerializer</code>",
                "+ *",
                "+ * @deprecated Since 3.0: method demoted to <code>JsonSerializer</code>",
                "+*/",
                "+@Deprecated",
                " public interface ResolvableDeserializer",
                " {",
                "-    /**",
                "-     * Method called after deserializer instance has been constructed",
                "-     * (and registered as necessary by provider objects),",
                "-     * but before it has returned it to the caller.",
                "-     * Called object can then resolve its dependencies to other types,",
                "-     * including self-references (direct or indirect).",
                "-     *",
                "-     * @param ctxt Context to use for accessing configuration, resolving",
                "-     *    secondary deserializers",
                "-     */",
                "     public abstract void resolve(DeserializationContext ctxt)",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/DelegatingDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/DelegatingDeserializer.java",
                "index f4368780e..92798e271 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/DelegatingDeserializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/DelegatingDeserializer.java",
                "@@ -17,4 +17,2 @@ import com.fasterxml.jackson.databind.util.AccessPattern;",
                "  * in some cases)",
                "- * ",
                "- * @since 2.1",
                "  */",
                "@@ -22,3 +20,3 @@ public abstract class DelegatingDeserializer",
                "     extends StdDeserializer<Object>",
                "-    implements ContextualDeserializer, ResolvableDeserializer",
                "+    implements ContextualDeserializer",
                " {",
                "@@ -56,4 +54,4 @@ public abstract class DelegatingDeserializer",
                "     public void resolve(DeserializationContext ctxt) throws JsonMappingException {",
                "-        if (_delegatee instanceof ResolvableDeserializer) {",
                "-            ((ResolvableDeserializer) _delegatee).resolve(ctxt);",
                "+        if (_delegatee != null) {",
                "+            _delegatee.resolve(ctxt);",
                "         }",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumMapDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumMapDeserializer.java",
                "index be8e082c0..a1732b156 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumMapDeserializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumMapDeserializer.java",
                "@@ -7,7 +7,3 @@ import com.fasterxml.jackson.core.*;",
                " import com.fasterxml.jackson.databind.*;",
                "-import com.fasterxml.jackson.databind.deser.ContextualDeserializer;",
                "-import com.fasterxml.jackson.databind.deser.NullValueProvider;",
                "-import com.fasterxml.jackson.databind.deser.ResolvableDeserializer;",
                "-import com.fasterxml.jackson.databind.deser.SettableBeanProperty;",
                "-import com.fasterxml.jackson.databind.deser.ValueInstantiator;",
                "+import com.fasterxml.jackson.databind.deser.*;",
                " import com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator;",
                "@@ -26,3 +22,3 @@ public class EnumMapDeserializer",
                "     extends ContainerDeserializerBase<EnumMap<?,?>>",
                "-    implements ContextualDeserializer, ResolvableDeserializer",
                "+    implements ContextualDeserializer",
                " {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java",
                "index 8924a2ca2..fb5f5175b 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java",
                "@@ -31,3 +31,3 @@ public class MapDeserializer",
                "     extends ContainerDeserializerBase<Map<Object,Object>>",
                "-    implements ContextualDeserializer, ResolvableDeserializer",
                "+    implements ContextualDeserializer",
                " {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDelegatingDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDelegatingDeserializer.java",
                "index 0b7e0ed08..089311905 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDelegatingDeserializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDelegatingDeserializer.java",
                "@@ -8,3 +8,2 @@ import com.fasterxml.jackson.databind.*;",
                " import com.fasterxml.jackson.databind.deser.ContextualDeserializer;",
                "-import com.fasterxml.jackson.databind.deser.ResolvableDeserializer;",
                " import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;",
                "@@ -29,4 +28,2 @@ import com.fasterxml.jackson.databind.util.Converter;",
                "  * ",
                "- * @since 2.1",
                "- * ",
                "  * @see StdNodeBasedDeserializer",
                "@@ -36,3 +33,3 @@ public class StdDelegatingDeserializer<T>",
                "     extends StdDeserializer<T>",
                "-    implements ContextualDeserializer, ResolvableDeserializer",
                "+    implements ContextualDeserializer",
                " {",
                "@@ -114,4 +111,5 @@ public class StdDelegatingDeserializer<T>",
                "     {",
                "-        if (_delegateDeserializer != null && _delegateDeserializer instanceof ResolvableDeserializer) {",
                "-            ((ResolvableDeserializer) _delegateDeserializer).resolve(ctxt);",
                "+        if (_delegateDeserializer != null) {",
                "+            _delegateDeserializer.resolve(ctxt);",
                "+            ",
                "         }",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdNodeBasedDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdNodeBasedDeserializer.java",
                "index b48340c96..2bd9d1f02 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdNodeBasedDeserializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdNodeBasedDeserializer.java",
                "@@ -6,3 +6,2 @@ import com.fasterxml.jackson.core.*;",
                " import com.fasterxml.jackson.databind.*;",
                "-import com.fasterxml.jackson.databind.deser.ResolvableDeserializer;",
                " import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;",
                "@@ -16,4 +15,2 @@ import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;",
                "  *   input data is deserialized into.",
                "- * ",
                "- * @since 2.5",
                "  */",
                "@@ -21,3 +18,2 @@ public abstract class StdNodeBasedDeserializer<T>",
                "     extends StdDeserializer<T>",
                "-    implements ResolvableDeserializer",
                " {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
                "index 99ddcad1b..0c7709d93 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
                "@@ -6,12 +6,5 @@ import java.util.*;",
                " import com.fasterxml.jackson.core.*;",
                "-import com.fasterxml.jackson.databind.BeanProperty;",
                "-import com.fasterxml.jackson.databind.DeserializationConfig;",
                "-import com.fasterxml.jackson.databind.DeserializationContext;",
                "-import com.fasterxml.jackson.databind.DeserializationFeature;",
                "-import com.fasterxml.jackson.databind.JavaType;",
                "-import com.fasterxml.jackson.databind.JsonDeserializer;",
                "-import com.fasterxml.jackson.databind.JsonMappingException;",
                "+import com.fasterxml.jackson.databind.*;",
                " import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;",
                " import com.fasterxml.jackson.databind.deser.ContextualDeserializer;",
                "-import com.fasterxml.jackson.databind.deser.ResolvableDeserializer;",
                " import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;",
                "@@ -34,3 +27,3 @@ public class UntypedObjectDeserializer",
                "     extends StdDeserializer<Object>",
                "-    implements ResolvableDeserializer, ContextualDeserializer",
                "+    implements ContextualDeserializer",
                " {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/ResolvableSerializer.java b/src/main/java/com/fasterxml/jackson/databind/ser/ResolvableSerializer.java",
                "index 407ceeb68..2bc3828f8 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/ResolvableSerializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/ResolvableSerializer.java",
                "@@ -4,3 +4,3 @@ import com.fasterxml.jackson.databind.*;",
                "-/**",
                "+/*",
                "  * Interface used to indicate serializers that want to do post-processing",
                "@@ -10,3 +10,5 @@ import com.fasterxml.jackson.databind.*;",
                "  * to eagerly find serializers for contained field types.",
                "- *",
                "+ */",
                "+",
                "+/**",
                "  * @deprecated Since 3.0: method demoted to <code>JsonSerializer</code>",
                "@@ -16,14 +18,2 @@ public interface ResolvableSerializer",
                " {",
                "-    /**",
                "-     * Method called after {@link SerializerProvider} has registered",
                "-     * the serializer, but before it has returned it to the caller.",
                "-     * Called object can then resolve its dependencies to other types,",
                "-     * including self-references (direct or indirect).",
                "-     *<p>",
                "-     * Note that this method does NOT return serializer, since resolution",
                "-     * is not allowed to change actual serializer to use.",
                "-     *",
                "-     * @param provider Provider that has constructed serializer this method",
                "-     *   is called on.",
                "-     */",
                "     public abstract void resolve(SerializerProvider provider)"
            ],
            "changed_files": [
                "release-notes/VERSION",
                "src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java",
                "src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java",
                "src/main/java/com/fasterxml/jackson/databind/JsonSerializer.java",
                "src/main/java/com/fasterxml/jackson/databind/KeyDeserializer.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/ContextualDeserializer.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/Deserializers.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/ResolvableDeserializer.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/std/DelegatingDeserializer.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/std/EnumMapDeserializer.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/std/StdDelegatingDeserializer.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/std/StdNodeBasedDeserializer.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
                "src/main/java/com/fasterxml/jackson/databind/ser/ResolvableSerializer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1888": "Merge ContextualSerializer into JsonSerializer, ContextualDeserializer into JsonDeserializer #1889 Embed ResolvableSerializer into JsonSerializer (and same for deserializer) FasterXML/jackson3-dev#23 [delete] #1915"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/JsonSerializer.java, src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java, src/main/java/com/fasterxml/jackson/databind/deser/ContextualDeserializer.java, src/main/java/com/fasterxml/jackson/databind/deser/Deserializers.java, src/main/java/com/fasterxml/jackson/databind/deser/std/StdNodeBasedDeserializer.java, src/main/java/com/fasterxml/jackson/databind/deser/std/StdDelegatingDeserializer.java, src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java, src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java, src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java, src/main/java/com/fasterxml/jackson/databind/deser/std/EnumMapDeserializer.java, src/main/java/com/fasterxml/jackson/databind/deser/ResolvableDeserializer.java, src/main/java/com/fasterxml/jackson/databind/ser/ResolvableSerializer.java, src/main/java/com/fasterxml/jackson/databind/KeyDeserializer.java, src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java, src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java, src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java, src/main/java/com/fasterxml/jackson/databind/deser/std/DelegatingDeserializer.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: deserialization, fasterxml",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1888",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e8546e913b3a1eb644f9703a8d55e071931cb185",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1517269188,
            "hunks": 10,
            "message": "Fix #1917",
            "diff": [
                "diff --git a/release-notes/VERSION b/release-notes/VERSION",
                "index 4bcb85761..41e5c1c59 100644",
                "--- a/release-notes/VERSION",
                "+++ b/release-notes/VERSION",
                "@@ -27,2 +27,3 @@ Versions: 3.x (for earlier see VERSION-2.x)",
                " #1916: Change `MapperFeature.USE_GETTERS_AS_SETTERS)` default to `false`",
                "+#1917: Remove `canSerialize` and `canDeserialize` methods from `ObjectMapper`",
                " - Remove `MappingJsonFactory`",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java",
                "index df4857dc0..ffc32e697 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java",
                "@@ -6,3 +6,2 @@ import java.text.ParseException;",
                " import java.util.*;",
                "-import java.util.concurrent.atomic.AtomicReference;",
                "@@ -537,22 +536,2 @@ public abstract class DeserializationContext",
                "-    /**",
                "-     * Method for checking whether we could find a deserializer",
                "-     * for given type.",
                "-     */",
                "-    public boolean hasValueDeserializerFor(JavaType type, AtomicReference<Throwable> cause) {",
                "-        try {",
                "-            return _cache.hasValueDeserializerFor(this, _factory, type);",
                "-        } catch (JsonMappingException e) {",
                "-            if (cause != null) {",
                "-                cause.set(e);",
                "-            }",
                "-        } catch (RuntimeException e) {",
                "-            if (cause == null) { // earlier behavior",
                "-                throw e;",
                "-            }",
                "-            cause.set(e);",
                "-        }",
                "-        return false;",
                "-    }",
                "-    ",
                "     /**",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "index ea8a60677..59cfc8457 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "@@ -10,3 +10,2 @@ import java.util.*;",
                " import java.util.concurrent.ConcurrentHashMap;",
                "-import java.util.concurrent.atomic.AtomicReference;",
                "@@ -2573,42 +2572,4 @@ public class ObjectMapper",
                "         return (T) result;",
                "-    } ",
                "-",
                "-    /*",
                "-    /**********************************************************",
                "-    /* Public API, accessors",
                "-    /**********************************************************",
                "-     */",
                "-",
                "-    /**",
                "-     * Method that can be called to check whether mapper thinks",
                "-     * it could deserialize an Object of given type.",
                "-     * Check is done by checking whether a registered deserializer can",
                "-     * be found or built for the type; if not (either by no mapping being",
                "-     * found, or through an <code>Exception</code> being thrown, false",
                "-     * is returned.",
                "-     *<p>",
                "-     * <b>NOTE</b>: in case an exception is thrown during course of trying",
                "-     * co construct matching deserializer, it will be effectively swallowed.",
                "-     * If you want access to that exception, call",
                "-     * {@link #canDeserialize(JavaType, AtomicReference)} instead.",
                "-     *",
                "-     * @return True if mapper can find a serializer for instances of",
                "-     *  given class (potentially serializable), false otherwise (not",
                "-     *  serializable)",
                "-     */",
                "-    public boolean canDeserialize(JavaType type)",
                "-    {",
                "-        return createDeserializationContext().hasValueDeserializerFor(type, null);",
                "     }",
                "-    /**",
                "-     * Method similar to {@link #canDeserialize(JavaType)} but that can return",
                "-     * actual {@link Throwable} that was thrown when trying to construct",
                "-     * serializer: this may be useful in figuring out what the actual problem is.",
                "-     */",
                "-    public boolean canDeserialize(JavaType type, AtomicReference<Throwable> cause)",
                "-    {",
                "-        return createDeserializationContext().hasValueDeserializerFor(type, cause);",
                "-    }",
                "-    ",
                "     /*",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java b/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
                "index 217a85a37..00c078c45 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
                "@@ -174,2 +174,3 @@ public final class DeserializerCache",
                "+    // as per [databind#1917], not needed any more:",
                "     /**",
                "@@ -178,3 +179,2 @@ public final class DeserializerCache",
                "      * through fields or membership in an array or collection)",
                "-     */",
                "     public boolean hasValueDeserializerFor(DeserializationContext ctxt,",
                "@@ -183,5 +183,4 @@ public final class DeserializerCache",
                "     {",
                "-        /* Note: mostly copied from findValueDeserializer, except for",
                "-         * handling of unknown types",
                "-         */",
                "+        // Note: mostly copied from findValueDeserializer, except for",
                "+        // handling of unknown types",
                "         JsonDeserializer<Object> deser = _findCachedDeserializer(type);",
                "@@ -192,2 +191,4 @@ public final class DeserializerCache",
                "     }",
                "+*/",
                "+"
            ],
            "changed_files": [
                "release-notes/VERSION",
                "src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java",
                "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1917": "Revert \"Fix #4561 (revert #4430)\" -- i.e. go back to modified #4430. #4568 Deprecate ObjectMapper.canDeserialize()/ObjectMapper.canSerialize() in 2.18 #4570"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java, src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java, src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: deserialization, fasterxml",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1917",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2da6113b54143c10c2da7491567d36138bbb2554",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1516051195,
            "hunks": 8,
            "message": "Fix #1673",
            "diff": [
                "diff --git a/release-notes/CREDITS b/release-notes/CREDITS",
                "index c97a87390..2ebbba052 100644",
                "--- a/release-notes/CREDITS",
                "+++ b/release-notes/CREDITS",
                "@@ -730 +730,6 @@ alinakovalenko@github:",
                "    (2.9.3)",
                "+",
                "+Pier-Luc Whissell (pwhissell@github):",
                "+  * Reported #1673: Serialising generic value classes via Reference Types (like Optional) fails",
                "+    to include type information",
                "+   (2.9.4)",
                "diff --git a/release-notes/VERSION-2.x b/release-notes/VERSION-2.x",
                "index d19a1df6d..aec9c251a 100644",
                "--- a/release-notes/VERSION-2.x",
                "+++ b/release-notes/VERSION-2.x",
                "@@ -7,2 +7,5 @@ Project: jackson-databind",
                "+#1673: Serialising generic value classes via Reference Types (like Optional) fails",
                "+  to include type information",
                "+ (reported by Pier-Luc W)",
                " #1729: Integer bounds verification when calling `TokenBuffer.getIntValue()`",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/ReferenceTypeSerializer.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/ReferenceTypeSerializer.java",
                "index 89300ce60..b300c3551 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/ReferenceTypeSerializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/ReferenceTypeSerializer.java",
                "@@ -444,7 +444,17 @@ public abstract class ReferenceTypeSerializer<T>",
                "     private final JsonSerializer<Object> _findCachedSerializer(SerializerProvider provider,",
                "-            Class<?> type) throws JsonMappingException",
                "+            Class<?> rawType) throws JsonMappingException",
                "     {",
                "-        JsonSerializer<Object> ser = _dynamicSerializers.serializerFor(type);",
                "+        JsonSerializer<Object> ser = _dynamicSerializers.serializerFor(rawType);",
                "         if (ser == null) {",
                "-            ser = _findSerializer(provider, type, _property);",
                "+            // NOTE: call this instead of `map._findAndAddDynamic(...)` (which in turn calls",
                "+            // `findAndAddSecondarySerializer`) since we may need to apply unwrapper",
                "+            // too, before caching. But calls made are the same",
                "+            if (_referredType.hasGenericTypes()) {",
                "+                // [databind#1673] Must ensure we will resolve all available type information",
                "+                //  so as not to miss generic declaration of, say, `List<GenericPojo>`...",
                "+                JavaType fullType = provider.constructSpecializedType(_referredType, rawType);",
                "+                ser = provider.findValueSerializer(fullType, _property);",
                "+            } else {",
                "+                ser = provider.findValueSerializer(rawType, _property);",
                "+            }",
                "             if (_unwrapper != null) {",
                "@@ -452,3 +462,3 @@ public abstract class ReferenceTypeSerializer<T>",
                "             }",
                "-            _dynamicSerializers = _dynamicSerializers.newWith(type, ser);",
                "+            _dynamicSerializers = _dynamicSerializers.newWith(rawType, ser);",
                "         }",
                "@@ -457,11 +467,2 @@ public abstract class ReferenceTypeSerializer<T>",
                "-    private final JsonSerializer<Object> _findSerializer(SerializerProvider provider,",
                "-            Class<?> type, BeanProperty prop) throws JsonMappingException",
                "-    {",
                "-        // 13-Mar-2017, tatu: Used to call `findTypeValueSerializer()`, but contextualization",
                "-        //   not working for that case for some reason",
                "-//        return provider.findTypedValueSerializer(type, true, prop);",
                "-        return provider.findValueSerializer(type, prop);",
                "-    }",
                "-",
                "     private final JsonSerializer<Object> _findSerializer(SerializerProvider provider,",
                "@@ -471,2 +472,4 @@ public abstract class ReferenceTypeSerializer<T>",
                "         //   not working for that case for some reason",
                "+        // 15-Jan-2017, tatu: ... possibly because we need to access \"secondary\" serializer,",
                "+        //   not primary (primary being one for Reference type itself, not value)",
                " //        return provider.findTypedValueSerializer(type, true, prop);"
            ],
            "changed_files": [
                "release-notes/CREDITS",
                "release-notes/VERSION-2.x",
                "src/main/java/com/fasterxml/jackson/databind/ser/std/ReferenceTypeSerializer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1673": "@JsonInclude content inclusion does not work FasterXML/jackson-module-scala#346 change OptionSerializer to use ReferenceTypeSerializer FasterXML/jackson-module-scala#362 FinatraObjectMapper.parse could not process Generic types twitter/finatra#463 FinatraObjectMapper.parse handling of Generic types twitter/finatra#480"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "jackson-databind-2.10.0",
                "jackson-databind-2.10.0.pr1",
                "jackson-databind-2.10.0.pr2",
                "jackson-databind-2.10.0.pr3",
                "jackson-databind-2.10.1",
                "jackson-databind-2.10.2",
                "jackson-databind-2.10.3",
                "jackson-databind-2.10.4",
                "jackson-databind-2.10.5",
                "jackson-databind-2.10.5.1",
                "jackson-databind-2.11.0",
                "jackson-databind-2.11.0.rc1",
                "jackson-databind-2.11.1",
                "jackson-databind-2.11.2",
                "jackson-databind-2.11.3",
                "jackson-databind-2.11.4",
                "jackson-databind-2.12.0",
                "jackson-databind-2.12.0-rc1",
                "jackson-databind-2.12.0-rc2",
                "jackson-databind-2.12.1",
                "jackson-databind-2.12.2",
                "jackson-databind-2.12.3",
                "jackson-databind-2.12.4",
                "jackson-databind-2.12.5",
                "jackson-databind-2.12.6",
                "jackson-databind-2.12.6.1",
                "jackson-databind-2.12.7",
                "jackson-databind-2.12.7.1",
                "jackson-databind-2.12.7.2",
                "jackson-databind-2.13.0",
                "jackson-databind-2.13.0-rc1",
                "jackson-databind-2.13.0-rc2",
                "jackson-databind-2.13.1",
                "jackson-databind-2.13.2",
                "jackson-databind-2.13.2.1",
                "jackson-databind-2.13.2.2",
                "jackson-databind-2.13.3",
                "jackson-databind-2.13.4",
                "jackson-databind-2.13.4.1",
                "jackson-databind-2.13.4.2",
                "jackson-databind-2.13.5",
                "jackson-databind-2.14.0",
                "jackson-databind-2.14.0-rc1",
                "jackson-databind-2.14.0-rc2",
                "jackson-databind-2.14.0-rc3",
                "jackson-databind-2.14.1",
                "jackson-databind-2.14.2",
                "jackson-databind-2.14.3",
                "jackson-databind-2.15.0",
                "jackson-databind-2.15.0-rc1",
                "jackson-databind-2.15.0-rc2",
                "jackson-databind-2.15.0-rc3",
                "jackson-databind-2.15.1",
                "jackson-databind-2.15.2",
                "jackson-databind-2.15.3",
                "jackson-databind-2.15.4",
                "jackson-databind-2.16.0",
                "jackson-databind-2.16.0-rc1",
                "jackson-databind-2.16.1",
                "jackson-databind-2.16.2",
                "jackson-databind-2.17.0",
                "jackson-databind-2.17.0-rc1",
                "jackson-databind-2.17.1",
                "jackson-databind-2.17.2",
                "jackson-databind-2.9.10",
                "jackson-databind-2.9.10.1",
                "jackson-databind-2.9.10.2",
                "jackson-databind-2.9.10.3",
                "jackson-databind-2.9.10.4",
                "jackson-databind-2.9.10.5",
                "jackson-databind-2.9.10.6",
                "jackson-databind-2.9.10.7",
                "jackson-databind-2.9.10.8",
                "jackson-databind-2.9.4",
                "jackson-databind-2.9.5",
                "jackson-databind-2.9.6",
                "jackson-databind-2.9.7",
                "jackson-databind-2.9.8",
                "jackson-databind-2.9.9",
                "jackson-databind-2.9.9.1",
                "jackson-databind-2.9.9.2",
                "jackson-databind-2.9.9.3"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/ser/std/ReferenceTypeSerializer.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: fasterxml",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1673",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "562484cf45e8f0c50fc03d761ae80bfb1754ab3a",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1516726395,
            "hunks": 18,
            "message": "Work on #1890: possible fix, but need to figure out how to solve one new regression",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
                "index 8531bae7d..2315960be 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
                "@@ -434,4 +434,3 @@ public abstract class BeanDeserializerBase",
                "     @Override",
                "-    public void resolve(DeserializationContext ctxt)",
                "-        throws JsonMappingException",
                "+    public void resolve(DeserializationContext ctxt) throws JsonMappingException",
                "     {",
                "@@ -443,2 +442,14 @@ public abstract class BeanDeserializerBase",
                "             creatorProps = _valueInstantiator.getFromObjectArguments(ctxt.getConfig());",
                "+",
                "+            // 22-Jan-2018, tatu: May need to propagate \"ignorable\" status (from `Access.READ_ONLY`",
                "+            //     or perhaps class-ignorables) into Creator properties too. Can not just delete,",
                "+            //     at this point, but is needed for further processing down the line",
                "+            if (_ignorableProps != null) {",
                "+                for (int i = 0, end = creatorProps.length; i < end; ++i) {",
                "+                    SettableBeanProperty prop  = creatorProps[i];",
                "+                    if (_ignorableProps.contains(prop.getName())) {",
                "+                        creatorProps[i].markAsIgnorable();",
                "+                    }",
                "+                }",
                "+            }",
                "         } else {",
                "@@ -453,2 +464,4 @@ public abstract class BeanDeserializerBase",
                "         // contextualize (since that can lead to problems with self-references)",
                "+        // 22-Jan-2018, tatu: NOTE! Need not check for `isIgnorable` as that can",
                "+        //   only happen for props in `creatorProps`",
                "@@ -526,3 +539,3 @@ public abstract class BeanDeserializerBase",
                "         // \"any setter\" may also need to be resolved now",
                "-        if (_anySetter != null && !_anySetter.hasValueDeserializer()) {",
                "+        if ((_anySetter != null) && !_anySetter.hasValueDeserializer()) {",
                "             _anySetter = _anySetter.withValueDeserializer(findDeserializer(ctxt,",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
                "index e4250770f..4c41097e7 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
                "@@ -343,3 +343,2 @@ public class BeanDeserializerBuilder",
                "         _fixAccess(props);",
                "-",
                "         BeanPropertyMap propertyMap = BeanPropertyMap.construct(props,",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
                "index 6dff75f82..6cdeb95f4 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
                "@@ -466,3 +466,2 @@ public class BeanDeserializerFactory",
                "         Set<String> ignored;",
                "-",
                "         if (ignorals != null) {",
                "@@ -499,3 +498,2 @@ public class BeanDeserializerFactory",
                "                 beanDesc, builder, beanDesc.findProperties(), ignored);",
                "-",
                "         // After which we can let custom code change the set",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/CreatorProperty.java b/src/main/java/com/fasterxml/jackson/databind/deser/CreatorProperty.java",
                "index 5e1e28637..2d42a8157 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/CreatorProperty.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/CreatorProperty.java",
                "@@ -45,7 +45,2 @@ public class CreatorProperty",
                "-    /**",
                "-     * @since 2.1",
                "-     */",
                "-    protected final int _creatorIndex;",
                "-",
                "     /**",
                "@@ -63,2 +58,18 @@ public class CreatorProperty",
                "+    /**",
                "+     * @since 2.1",
                "+     */",
                "+    protected final int _creatorIndex;",
                "+",
                "+    /**",
                "+     * Marker flag that may have to be set during construction, to indicate that",
                "+     * although property may have been constructed and added as a placeholder,",
                "+     * it represents something that should be ignored during deserialization.",
                "+     * This mostly concerns Creator properties which may not be easily deleted",
                "+     * during processing.",
                "+     *",
                "+     * @since 2.9.4",
                "+     */",
                "+    protected boolean _ignorable;",
                "+",
                "     /**",
                "@@ -96,5 +107,6 @@ public class CreatorProperty",
                "         _annotated = src._annotated;",
                "-        _creatorIndex = src._creatorIndex;",
                "         _injectableValueId = src._injectableValueId;",
                "         _fallbackSetter = src._fallbackSetter;",
                "+        _creatorIndex = src._creatorIndex;",
                "+        _ignorable = src._ignorable;",
                "     }",
                "@@ -105,5 +117,6 @@ public class CreatorProperty",
                "         _annotated = src._annotated;",
                "-        _creatorIndex = src._creatorIndex;",
                "         _injectableValueId = src._injectableValueId;",
                "         _fallbackSetter = src._fallbackSetter;",
                "+        _creatorIndex = src._creatorIndex;",
                "+        _ignorable = src._ignorable;",
                "     }",
                "@@ -145,2 +158,18 @@ public class CreatorProperty",
                "+    @Override",
                "+    public void markAsIgnorable() {",
                "+        _ignorable = true;",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean isIgnorable() {",
                "+        return _ignorable;",
                "+    }",
                "+",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Injection support",
                "+    /**********************************************************",
                "+     */",
                "+",
                "     /**",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java b/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
                "index 6ce47aa4c..df7f6cf19 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
                "@@ -333,2 +333,12 @@ public abstract class SettableBeanProperty",
                "+    /**",
                "+     * @since 2.9.4",
                "+     */",
                "+    public void markAsIgnorable() { }",
                "+",
                "+    /**",
                "+     * @since 2.9.4",
                "+     */",
                "+    public boolean isIgnorable() { return false; }",
                "+",
                "     /*",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java b/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
                "index 905a50fb4..2ea0894bc 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
                "@@ -180,4 +180,3 @@ public class CreatorCollector {",
                "                     // a name at all, and need to be skipped",
                "-                    if (name.length() == 0",
                "-                            && properties[i].getInjectableValueId() != null) {",
                "+                    if (name.isEmpty() && (properties[i].getInjectableValueId() != null)) {",
                "                         continue;",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.java b/src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.java",
                "index 4e7bc4415..566b54f00 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.java",
                "@@ -73,6 +73,9 @@ public final class PropertyBasedCreator",
                "             for (SettableBeanProperty prop : creatorProps) {",
                "-                List<PropertyName> aliases = prop.findAliases(config);",
                "-                if (!aliases.isEmpty()) {",
                "-                    for (PropertyName pn : aliases) {",
                "-                        _propertyLookup.put(pn.getSimpleName(), prop);",
                "+                // 22-Jan-2018, tatu: ignorable entries should be ignored, even if got aliases",
                "+                if (!prop.isIgnorable()) {",
                "+                    List<PropertyName> aliases = prop.findAliases(config);",
                "+                    if (!aliases.isEmpty()) {",
                "+                        for (PropertyName pn : aliases) {",
                "+                            _propertyLookup.put(pn.getSimpleName(), prop);",
                "+                        }",
                "                     }",
                "@@ -84,3 +87,6 @@ public final class PropertyBasedCreator",
                "             _allProperties[i] = prop;",
                "-            _propertyLookup.put(prop.getName(), prop);",
                "+            // 22-Jan-2018, tatu: ignorable entries should be skipped",
                "+            if (!prop.isIgnorable()) {",
                "+                _propertyLookup.put(prop.getName(), prop);",
                "+            }",
                "         }"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/CreatorProperty.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1890": "Add ignore property #1890 #1891 Exception when deserialization uses a record with a constructor property with access=READ_ONLY #4119"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "jackson-databind-2.10.0",
                "jackson-databind-2.10.0.pr1",
                "jackson-databind-2.10.0.pr2",
                "jackson-databind-2.10.0.pr3",
                "jackson-databind-2.10.1",
                "jackson-databind-2.10.2",
                "jackson-databind-2.10.3",
                "jackson-databind-2.10.4",
                "jackson-databind-2.10.5",
                "jackson-databind-2.10.5.1",
                "jackson-databind-2.11.0",
                "jackson-databind-2.11.0.rc1",
                "jackson-databind-2.11.1",
                "jackson-databind-2.11.2",
                "jackson-databind-2.11.3",
                "jackson-databind-2.11.4",
                "jackson-databind-2.12.0",
                "jackson-databind-2.12.0-rc1",
                "jackson-databind-2.12.0-rc2",
                "jackson-databind-2.12.1",
                "jackson-databind-2.12.2",
                "jackson-databind-2.12.3",
                "jackson-databind-2.12.4",
                "jackson-databind-2.12.5",
                "jackson-databind-2.12.6",
                "jackson-databind-2.12.6.1",
                "jackson-databind-2.12.7",
                "jackson-databind-2.12.7.1",
                "jackson-databind-2.12.7.2",
                "jackson-databind-2.13.0",
                "jackson-databind-2.13.0-rc1",
                "jackson-databind-2.13.0-rc2",
                "jackson-databind-2.13.1",
                "jackson-databind-2.13.2",
                "jackson-databind-2.13.2.1",
                "jackson-databind-2.13.2.2",
                "jackson-databind-2.13.3",
                "jackson-databind-2.13.4",
                "jackson-databind-2.13.4.1",
                "jackson-databind-2.13.4.2",
                "jackson-databind-2.13.5",
                "jackson-databind-2.14.0",
                "jackson-databind-2.14.0-rc1",
                "jackson-databind-2.14.0-rc2",
                "jackson-databind-2.14.0-rc3",
                "jackson-databind-2.14.1",
                "jackson-databind-2.14.2",
                "jackson-databind-2.14.3",
                "jackson-databind-2.15.0",
                "jackson-databind-2.15.0-rc1",
                "jackson-databind-2.15.0-rc2",
                "jackson-databind-2.15.0-rc3",
                "jackson-databind-2.15.1",
                "jackson-databind-2.15.2",
                "jackson-databind-2.15.3",
                "jackson-databind-2.15.4",
                "jackson-databind-2.16.0",
                "jackson-databind-2.16.0-rc1",
                "jackson-databind-2.16.1",
                "jackson-databind-2.16.2",
                "jackson-databind-2.17.0",
                "jackson-databind-2.17.0-rc1",
                "jackson-databind-2.17.1",
                "jackson-databind-2.17.2",
                "jackson-databind-2.9.10",
                "jackson-databind-2.9.10.1",
                "jackson-databind-2.9.10.2",
                "jackson-databind-2.9.10.3",
                "jackson-databind-2.9.10.4",
                "jackson-databind-2.9.10.5",
                "jackson-databind-2.9.10.6",
                "jackson-databind-2.9.10.7",
                "jackson-databind-2.9.10.8",
                "jackson-databind-2.9.4",
                "jackson-databind-2.9.5",
                "jackson-databind-2.9.6",
                "jackson-databind-2.9.7",
                "jackson-databind-2.9.8",
                "jackson-databind-2.9.9",
                "jackson-databind-2.9.9.1",
                "jackson-databind-2.9.9.2",
                "jackson-databind-2.9.9.3"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java, src/main/java/com/fasterxml/jackson/databind/deser/CreatorProperty.java, src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java, src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java, src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.java, src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java, src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: fasterxml",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1890",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b30fa0963db3560a5907595a9bad385fb7092b0b",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1517011280,
            "hunks": 5,
            "message": "Fix #1911",
            "diff": [
                "diff --git a/release-notes/VERSION-2.x b/release-notes/VERSION-2.x",
                "index a4b9ca943..b6af089a3 100644",
                "--- a/release-notes/VERSION-2.x",
                "+++ b/release-notes/VERSION-2.x",
                "@@ -6,2 +6,8 @@ Project: jackson-databind",
                "+2.9.5 (not released yet)",
                "+",
                "+#1911: Allow serialization of `BigDecimal` as String, using",
                "+  `@JsonFormat(shape=Shape.String)`, config overrides",
                "+ (suggested by cen1@github)",
                "+",
                " 2.9.4 (24-Jan-2018)",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java",
                "index 4e57a2ad8..118079836 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java",
                "@@ -7,2 +7,3 @@ import java.math.BigInteger;",
                "+import com.fasterxml.jackson.annotation.JsonFormat;",
                " import com.fasterxml.jackson.core.JsonGenerator;",
                "@@ -12,2 +13,3 @@ import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;",
                " import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;",
                "+import com.fasterxml.jackson.databind.ser.ContextualSerializer;",
                "@@ -22,2 +24,3 @@ public class NumberSerializer",
                "     extends StdScalarSerializer<Number>",
                "+    implements ContextualSerializer",
                " {",
                "@@ -39,2 +42,17 @@ public class NumberSerializer",
                "+    @Override",
                "+    public JsonSerializer<?> createContextual(SerializerProvider prov,",
                "+            BeanProperty property) throws JsonMappingException",
                "+    {",
                "+        JsonFormat.Value format = findFormatOverrides(prov, property, handledType());",
                "+        if (format != null) {",
                "+            switch (format.getShape()) {",
                "+            case STRING:",
                "+                return ToStringSerializer.instance;",
                "+            default:",
                "+            }",
                "+        }",
                "+        return this;",
                "+    }",
                "+",
                "     @Override"
            ],
            "changed_files": [
                "release-notes/VERSION-2.x",
                "src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1911": "Default serialisation for BigInteger should be as a JSON String #2517 Serializing BigDecimal values inside containers ignores shape override #2519 Precision lost on BigDecimals micronaut-projects/micronaut-core#2618 [BUG] azure-spring-data-cosmos loses decimal trailing zeros when serializing BigDecimal Azure/azure-sdk-for-java#38691"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "jackson-databind-2.10.0",
                "jackson-databind-2.10.0.pr1",
                "jackson-databind-2.10.0.pr2",
                "jackson-databind-2.10.0.pr3",
                "jackson-databind-2.10.1",
                "jackson-databind-2.10.2",
                "jackson-databind-2.10.3",
                "jackson-databind-2.10.4",
                "jackson-databind-2.10.5",
                "jackson-databind-2.10.5.1",
                "jackson-databind-2.11.0",
                "jackson-databind-2.11.0.rc1",
                "jackson-databind-2.11.1",
                "jackson-databind-2.11.2",
                "jackson-databind-2.11.3",
                "jackson-databind-2.11.4",
                "jackson-databind-2.12.0",
                "jackson-databind-2.12.0-rc1",
                "jackson-databind-2.12.0-rc2",
                "jackson-databind-2.12.1",
                "jackson-databind-2.12.2",
                "jackson-databind-2.12.3",
                "jackson-databind-2.12.4",
                "jackson-databind-2.12.5",
                "jackson-databind-2.12.6",
                "jackson-databind-2.12.6.1",
                "jackson-databind-2.12.7",
                "jackson-databind-2.12.7.1",
                "jackson-databind-2.12.7.2",
                "jackson-databind-2.13.0",
                "jackson-databind-2.13.0-rc1",
                "jackson-databind-2.13.0-rc2",
                "jackson-databind-2.13.1",
                "jackson-databind-2.13.2",
                "jackson-databind-2.13.2.1",
                "jackson-databind-2.13.2.2",
                "jackson-databind-2.13.3",
                "jackson-databind-2.13.4",
                "jackson-databind-2.13.4.1",
                "jackson-databind-2.13.4.2",
                "jackson-databind-2.13.5",
                "jackson-databind-2.14.0",
                "jackson-databind-2.14.0-rc1",
                "jackson-databind-2.14.0-rc2",
                "jackson-databind-2.14.0-rc3",
                "jackson-databind-2.14.1",
                "jackson-databind-2.14.2",
                "jackson-databind-2.14.3",
                "jackson-databind-2.15.0",
                "jackson-databind-2.15.0-rc1",
                "jackson-databind-2.15.0-rc2",
                "jackson-databind-2.15.0-rc3",
                "jackson-databind-2.15.1",
                "jackson-databind-2.15.2",
                "jackson-databind-2.15.3",
                "jackson-databind-2.15.4",
                "jackson-databind-2.16.0",
                "jackson-databind-2.16.0-rc1",
                "jackson-databind-2.16.1",
                "jackson-databind-2.16.2",
                "jackson-databind-2.17.0",
                "jackson-databind-2.17.0-rc1",
                "jackson-databind-2.17.1",
                "jackson-databind-2.17.2",
                "jackson-databind-2.9.10",
                "jackson-databind-2.9.10.1",
                "jackson-databind-2.9.10.2",
                "jackson-databind-2.9.10.3",
                "jackson-databind-2.9.10.4",
                "jackson-databind-2.9.10.5",
                "jackson-databind-2.9.10.6",
                "jackson-databind-2.9.10.7",
                "jackson-databind-2.9.10.8",
                "jackson-databind-2.9.5",
                "jackson-databind-2.9.6",
                "jackson-databind-2.9.7",
                "jackson-databind-2.9.8",
                "jackson-databind-2.9.9",
                "jackson-databind-2.9.9.1",
                "jackson-databind-2.9.9.2",
                "jackson-databind-2.9.9.3"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: fasterxml",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1911",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c612c1e4cd6f552fd8fdc461492589ffb5e8fcfc",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1516752453,
            "hunks": 7,
            "message": "Fix #1382",
            "diff": [
                "diff --git a/release-notes/VERSION-2.x b/release-notes/VERSION-2.x",
                "index 7c8e1d058..ab50e4478 100644",
                "--- a/release-notes/VERSION-2.x",
                "+++ b/release-notes/VERSION-2.x",
                "@@ -7,2 +7,4 @@ Project: jackson-databind",
                "+#1382: `@JsonProperty(access=READ_ONLY)` unxepected behaviour with `Collections`",
                "+ (reported by hexfaker@github)",
                " #1673: Serialising generic value classes via Reference Types (like Optional) fails",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
                "index e4250770f..c16948cdf 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
                "@@ -329,2 +329,9 @@ public class BeanDeserializerBuilder",
                "+    /**",
                "+     * @since 2.9.4",
                "+     */",
                "+    public boolean hasIgnorable(String name) {",
                "+        return (_ignorableProps != null) && _ignorableProps.contains(name);",
                "+    }",
                "+",
                "     /*",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
                "index 6dff75f82..6c4db272d 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
                "@@ -484,2 +484,4 @@ public class BeanDeserializerFactory",
                "         } else {",
                "+            // 23-Jan-2018, tatu: although [databind#1805] would suggest we should block",
                "+            //   properties regardless, for now only consider unless there's any setter...",
                "             Collection<String> ignored2 = beanDesc.getIgnoredPropertyNames();",
                "@@ -511,6 +513,5 @@ public class BeanDeserializerFactory",
                "-            /* 18-Oct-2013, tatu: Although constructor parameters have highest precedence,",
                "-             *   we need to do linkage (as per [databind#318]), and so need to start with",
                "-             *   other types, and only then create constructor parameter, if any.",
                "-             */",
                "+            // 18-Oct-2013, tatu: Although constructor parameters have highest precedence,",
                "+            //   we need to do linkage (as per [databind#318]), and so need to start with",
                "+            //   other types, and only then create constructor parameter, if any.",
                "             if (propDef.hasSetter()) {",
                "@@ -528,3 +529,9 @@ public class BeanDeserializerFactory",
                "                     if (useGettersAsSetters && _isSetterlessType(getter.getRawType())) {",
                "-                        prop = constructSetterlessProperty(ctxt, beanDesc, propDef);",
                "+                        // 23-Jan-2018, tatu: As per [databind#1805], need to ensure we don't",
                "+                        //   accidentally sneak in getter-as-setter for `READ_ONLY` properties",
                "+                        if (builder.hasIgnorable(propDef.getName())) {",
                "+                            ;",
                "+                        } else {",
                "+                            prop = constructSetterlessProperty(ctxt, beanDesc, propDef);",
                "+                        }",
                "                     } else if (!propDef.hasConstructorParameter()) {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
                "index d21d1a506..0dc1bbefb 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
                "@@ -723,3 +723,3 @@ public class POJOPropertiesCollector",
                "                 prop.removeIgnored();",
                "-                if (!_forSerialization && !prop.couldDeserialize()) {",
                "+                if (!prop.couldDeserialize()) {",
                "                     _collectIgnorals(prop.getName());",
                "@@ -744,3 +744,3 @@ public class POJOPropertiesCollector",
                "             JsonProperty.Access acc = prop.removeNonVisible(inferMutators);",
                "-            if (!_forSerialization && (acc == JsonProperty.Access.READ_ONLY)) {",
                "+            if (acc == JsonProperty.Access.READ_ONLY) {",
                "                 _collectIgnorals(prop.getName());"
            ],
            "changed_files": [
                "release-notes/VERSION-2.x",
                "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
                "src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1382": "JsonProperty.Access.READ_ONLY not work #1805"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "jackson-databind-2.10.0",
                "jackson-databind-2.10.0.pr1",
                "jackson-databind-2.10.0.pr2",
                "jackson-databind-2.10.0.pr3",
                "jackson-databind-2.10.1",
                "jackson-databind-2.10.2",
                "jackson-databind-2.10.3",
                "jackson-databind-2.10.4",
                "jackson-databind-2.10.5",
                "jackson-databind-2.10.5.1",
                "jackson-databind-2.11.0",
                "jackson-databind-2.11.0.rc1",
                "jackson-databind-2.11.1",
                "jackson-databind-2.11.2",
                "jackson-databind-2.11.3",
                "jackson-databind-2.11.4",
                "jackson-databind-2.12.0",
                "jackson-databind-2.12.0-rc1",
                "jackson-databind-2.12.0-rc2",
                "jackson-databind-2.12.1",
                "jackson-databind-2.12.2",
                "jackson-databind-2.12.3",
                "jackson-databind-2.12.4",
                "jackson-databind-2.12.5",
                "jackson-databind-2.12.6",
                "jackson-databind-2.12.6.1",
                "jackson-databind-2.12.7",
                "jackson-databind-2.12.7.1",
                "jackson-databind-2.12.7.2",
                "jackson-databind-2.13.0",
                "jackson-databind-2.13.0-rc1",
                "jackson-databind-2.13.0-rc2",
                "jackson-databind-2.13.1",
                "jackson-databind-2.13.2",
                "jackson-databind-2.13.2.1",
                "jackson-databind-2.13.2.2",
                "jackson-databind-2.13.3",
                "jackson-databind-2.13.4",
                "jackson-databind-2.13.4.1",
                "jackson-databind-2.13.4.2",
                "jackson-databind-2.13.5",
                "jackson-databind-2.14.0",
                "jackson-databind-2.14.0-rc1",
                "jackson-databind-2.14.0-rc2",
                "jackson-databind-2.14.0-rc3",
                "jackson-databind-2.14.1",
                "jackson-databind-2.14.2",
                "jackson-databind-2.14.3",
                "jackson-databind-2.15.0",
                "jackson-databind-2.15.0-rc1",
                "jackson-databind-2.15.0-rc2",
                "jackson-databind-2.15.0-rc3",
                "jackson-databind-2.15.1",
                "jackson-databind-2.15.2",
                "jackson-databind-2.15.3",
                "jackson-databind-2.15.4",
                "jackson-databind-2.16.0",
                "jackson-databind-2.16.0-rc1",
                "jackson-databind-2.16.1",
                "jackson-databind-2.16.2",
                "jackson-databind-2.17.0",
                "jackson-databind-2.17.0-rc1",
                "jackson-databind-2.17.1",
                "jackson-databind-2.17.2",
                "jackson-databind-2.9.10",
                "jackson-databind-2.9.10.1",
                "jackson-databind-2.9.10.2",
                "jackson-databind-2.9.10.3",
                "jackson-databind-2.9.10.4",
                "jackson-databind-2.9.10.5",
                "jackson-databind-2.9.10.6",
                "jackson-databind-2.9.10.7",
                "jackson-databind-2.9.10.8",
                "jackson-databind-2.9.4",
                "jackson-databind-2.9.5",
                "jackson-databind-2.9.6",
                "jackson-databind-2.9.7",
                "jackson-databind-2.9.8",
                "jackson-databind-2.9.9",
                "jackson-databind-2.9.9.1",
                "jackson-databind-2.9.9.2",
                "jackson-databind-2.9.9.3"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java, src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java, src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: fasterxml",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1382",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e73f29e1eef7ef086b281ffcf03f794a5d2f63fe",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1516636257,
            "hunks": 1,
            "message": "Remove incorrect fall-through comment (#1908) Fall through will never happen since it's preceeded by a return statement.",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
                "index 1d6bf3139..280b4df10 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
                "@@ -585,3 +585,2 @@ public class NumberDeserializers",
                "                         \"not a valid Long value\");",
                "-                // fall-through",
                "             case JsonTokenId.ID_NULL:"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1908": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: fasterxml",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1908",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "dd101490789d72ed0a7fcc2dd8076f607a2f26f8",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1516597750,
            "hunks": 1,
            "message": "Add ignore property #1890 (#1891) Test case for #1890, tentative fix (will likely want to move to different place to avoid perf overhead)",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
                "index 7053c7032..0db44d0aa 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
                "@@ -567,2 +567,6 @@ public class BeanDeserializer",
                "             }",
                "+            if(_ignorableProps != null && _ignorableProps.contains(propName)){",
                "+                continue;",
                "+            }",
                "+",
                "             // creator property?"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1890": "Add ignore property #1890 #1891 Exception when deserialization uses a record with a constructor property with access=READ_ONLY #4119",
                "1891": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: fasterxml",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1890, 1891",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4c448eebb26309ff1b991f3c37d73c72bf4bf4ea",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1516169680,
            "hunks": 3,
            "message": "Fix #1895",
            "diff": [
                "diff --git a/release-notes/VERSION-2.x b/release-notes/VERSION-2.x",
                "index dbe5b2c22..b588e2125 100644",
                "--- a/release-notes/VERSION-2.x",
                "+++ b/release-notes/VERSION-2.x",
                "@@ -24,2 +24,4 @@ Project: jackson-databind",
                "  (reported by reda-alaoui@github)",
                "+#1895: Per-type config override \"JsonFormat.Shape.OBJECT\" for Map.Entry not working",
                "+ (reported by mcortella@github)",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
                "index 0c09ae156..a3d422ffa 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
                "@@ -865,4 +865,6 @@ public abstract class BasicSerializerFactory",
                "         //   serialization as `Shape.NATURAL` instead; that's JSON Object too.",
                "-        JsonFormat.Value format = beanDesc.findExpectedFormat(null);",
                "-        if (format != null && format.getShape() == JsonFormat.Shape.OBJECT) {",
                "+        JsonFormat.Value formatOverride = prov.getDefaultPropertyFormat(Map.Entry.class);",
                "+        JsonFormat.Value formatFromAnnotation = beanDesc.findExpectedFormat(null);",
                "+        JsonFormat.Value format = JsonFormat.Value.merge(formatFromAnnotation, formatOverride);",
                "+        if (format.getShape() == JsonFormat.Shape.OBJECT) {",
                "             return null;",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java",
                "index 9aaff5fac..135add092 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java",
                "@@ -142,3 +142,3 @@ public final class BooleanSerializer",
                "         }",
                "-}",
                "+    }",
                " }"
            ],
            "changed_files": [
                "release-notes/VERSION-2.x",
                "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
                "src/main/java/com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1895": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "jackson-databind-2.10.0",
                "jackson-databind-2.10.0.pr1",
                "jackson-databind-2.10.0.pr2",
                "jackson-databind-2.10.0.pr3",
                "jackson-databind-2.10.1",
                "jackson-databind-2.10.2",
                "jackson-databind-2.10.3",
                "jackson-databind-2.10.4",
                "jackson-databind-2.10.5",
                "jackson-databind-2.10.5.1",
                "jackson-databind-2.11.0",
                "jackson-databind-2.11.0.rc1",
                "jackson-databind-2.11.1",
                "jackson-databind-2.11.2",
                "jackson-databind-2.11.3",
                "jackson-databind-2.11.4",
                "jackson-databind-2.12.0",
                "jackson-databind-2.12.0-rc1",
                "jackson-databind-2.12.0-rc2",
                "jackson-databind-2.12.1",
                "jackson-databind-2.12.2",
                "jackson-databind-2.12.3",
                "jackson-databind-2.12.4",
                "jackson-databind-2.12.5",
                "jackson-databind-2.12.6",
                "jackson-databind-2.12.6.1",
                "jackson-databind-2.12.7",
                "jackson-databind-2.12.7.1",
                "jackson-databind-2.12.7.2",
                "jackson-databind-2.13.0",
                "jackson-databind-2.13.0-rc1",
                "jackson-databind-2.13.0-rc2",
                "jackson-databind-2.13.1",
                "jackson-databind-2.13.2",
                "jackson-databind-2.13.2.1",
                "jackson-databind-2.13.2.2",
                "jackson-databind-2.13.3",
                "jackson-databind-2.13.4",
                "jackson-databind-2.13.4.1",
                "jackson-databind-2.13.4.2",
                "jackson-databind-2.13.5",
                "jackson-databind-2.14.0",
                "jackson-databind-2.14.0-rc1",
                "jackson-databind-2.14.0-rc2",
                "jackson-databind-2.14.0-rc3",
                "jackson-databind-2.14.1",
                "jackson-databind-2.14.2",
                "jackson-databind-2.14.3",
                "jackson-databind-2.15.0",
                "jackson-databind-2.15.0-rc1",
                "jackson-databind-2.15.0-rc2",
                "jackson-databind-2.15.0-rc3",
                "jackson-databind-2.15.1",
                "jackson-databind-2.15.2",
                "jackson-databind-2.15.3",
                "jackson-databind-2.15.4",
                "jackson-databind-2.16.0",
                "jackson-databind-2.16.0-rc1",
                "jackson-databind-2.16.1",
                "jackson-databind-2.16.2",
                "jackson-databind-2.17.0",
                "jackson-databind-2.17.0-rc1",
                "jackson-databind-2.17.1",
                "jackson-databind-2.17.2",
                "jackson-databind-2.9.10",
                "jackson-databind-2.9.10.1",
                "jackson-databind-2.9.10.2",
                "jackson-databind-2.9.10.3",
                "jackson-databind-2.9.10.4",
                "jackson-databind-2.9.10.5",
                "jackson-databind-2.9.10.6",
                "jackson-databind-2.9.10.7",
                "jackson-databind-2.9.10.8",
                "jackson-databind-2.9.4",
                "jackson-databind-2.9.5",
                "jackson-databind-2.9.6",
                "jackson-databind-2.9.7",
                "jackson-databind-2.9.8",
                "jackson-databind-2.9.9",
                "jackson-databind-2.9.9.1",
                "jackson-databind-2.9.9.2",
                "jackson-databind-2.9.9.3"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java, src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: fasterxml",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1895",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8662a092f6d404f0bb3470be48f4620878aa9959",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1517370014,
            "hunks": 3,
            "message": "...",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java b/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "index 226c92266..abefa1b2e 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "@@ -9,2 +9,3 @@ import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;",
                " import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;",
                "+import com.fasterxml.jackson.databind.node.JsonNodeFactory;",
                " import com.fasterxml.jackson.databind.ser.*;",
                "@@ -224,2 +225,7 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    protected B nodeFactory(JsonNodeFactory f) {",
                "+        _baseSettings = _baseSettings.with(f);",
                "+        return _this();",
                "+    }",
                "+",
                "     public B subtypeResolver(SubtypeResolver r) {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "index 2acccb233..94134803b 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "@@ -1430,12 +1430,2 @@ public class ObjectMapper",
                "-    /**",
                "-     * Method for specifying {@link JsonNodeFactory} to use for",
                "-     * constructing root level tree nodes (via method",
                "-     * {@link #createObjectNode}",
                "-     */",
                "-    public ObjectMapper setNodeFactory(JsonNodeFactory f) {",
                "-        _deserializationConfig = _deserializationConfig.with(f);",
                "-        return this;",
                "-    }",
                "-",
                "     /**"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "cb24c3be017441e986d7bebb141625884bb70f2f"
                ],
                [
                    "no-tag",
                    "7359eeac04065b6fe4eec39c7bae52958f2624b6"
                ]
            ],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java, src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: fasterxml",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b18ecb3b30fceb64d45b937ff7ec4f8e2f06fa77",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1517269050,
            "hunks": 7,
            "message": "first part (canSerialize) of #1917",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "index 29437a959..ea8a60677 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "@@ -2581,30 +2581,2 @@ public class ObjectMapper",
                "-    /**",
                "-     * Method that can be called to check whether mapper thinks",
                "-     * it could serialize an instance of given Class.",
                "-     * Check is done",
                "-     * by checking whether a serializer can be found for the type.",
                "-     *<p>",
                "-     * NOTE: since this method does NOT throw exceptions, but internal",
                "-     * processing may, caller usually has little information as to why",
                "-     * serialization would fail. If you want access to internal {@link Exception},",
                "-     * call {@link #canSerialize(Class, AtomicReference)} instead.",
                "-     *",
                "-     * @return True if mapper can find a serializer for instances of",
                "-     *  given class (potentially serializable), false otherwise (not",
                "-     *  serializable)",
                "-     */",
                "-    public boolean canSerialize(Class<?> type) {",
                "-        return _serializerProvider().hasSerializerFor(type, null);",
                "-    }",
                "-",
                "-    /**",
                "-     * Method similar to {@link #canSerialize(Class)} but that can return",
                "-     * actual {@link Throwable} that was thrown when trying to construct",
                "-     * serializer: this may be useful in figuring out what the actual problem is.",
                "-     */",
                "-    public boolean canSerialize(Class<?> type, AtomicReference<Throwable> cause) {",
                "-        return _serializerProvider().hasSerializerFor(type, cause);",
                "-    }",
                "-    ",
                "     /**",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java b/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java",
                "index 7451ee4ab..a55059c4b 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java",
                "@@ -7,3 +7,2 @@ import java.util.Map;",
                " import java.util.TimeZone;",
                "-import java.util.concurrent.atomic.AtomicReference;",
                "@@ -1054,14 +1053,2 @@ public class ObjectWriter",
                "-    public boolean canSerialize(Class<?> type) {",
                "-        return _serializerProvider().hasSerializerFor(type, null);",
                "-    }",
                "-",
                "-    /**",
                "-     * Method for checking whether instances of given type can be serialized,",
                "-     * and optionally why (as per {@link Throwable} returned).",
                "-     */",
                "-    public boolean canSerialize(Class<?> type, AtomicReference<Throwable> cause) {",
                "-        return _serializerProvider().hasSerializerFor(type, cause);",
                "-    }",
                "-",
                "     /*",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java b/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
                "index 3cf493abf..a46498d65 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
                "@@ -1340,32 +1340,2 @@ public abstract class SerializerProvider",
                "-    /**",
                "-     * Method that will try to find a serializer, either from cache",
                "-     * or by constructing one; but will not return an \"unknown\" serializer",
                "-     * if this cannot be done but rather returns null.",
                "-     *",
                "-     * @return Serializer if one can be found, null if not.",
                "-     */",
                "-    protected JsonSerializer<Object> _findExplicitUntypedSerializer(Class<?> runtimeType)",
                "-        throws JsonMappingException",
                "-    {        ",
                "-        // Fast lookup from local lookup thingy works?",
                "-        JsonSerializer<Object> ser = _knownSerializers.untypedValueSerializer(runtimeType);",
                "-        if (ser == null) {",
                "-            // If not, maybe shared map already has it?",
                "-            ser = _serializerCache.untypedValueSerializer(runtimeType);",
                "-            if (ser == null) {",
                "-                ser = _createAndCacheUntypedSerializer(runtimeType);",
                "-            }",
                "-        }",
                "-        /* 18-Sep-2014, tatu: This is unfortunate patch over related change",
                "-         *    that pushes creation of \"unknown type\" serializer deeper down",
                "-         *    in BeanSerializerFactory; as a result, we need to \"undo\" creation",
                "-         *    here.",
                "-         */",
                "-        if (isUnknownTypeSerializer(ser)) {",
                "-            return null;",
                "-        }",
                "-        return ser;",
                "-    }",
                "-",
                "     /*",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java b/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
                "index 046df44bb..058529945 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
                "@@ -4,3 +4,2 @@ import java.io.IOException;",
                " import java.util.*;",
                "-import java.util.concurrent.atomic.AtomicReference;",
                "@@ -231,36 +230,2 @@ filter.getClass().getName(), t.getClass().getName(), t.getMessage());",
                "-    /**",
                "-     * Method that can be called to see if this serializer provider",
                "-     * can find a serializer for an instance of given class.",
                "-     *<p>",
                "-     * Note that no Exceptions are thrown, including unchecked ones:",
                "-     * implementations are to swallow exceptions if necessary.",
                "-     */",
                "-    public boolean hasSerializerFor(Class<?> cls, AtomicReference<Throwable> cause)",
                "-    {",
                "-        // 07-Nov-2015, tatu: One special case, Object.class; will work only if",
                "-        //   empty beans are allowed or custom serializer registered. Easiest to",
                "-        //   check here.",
                "-        if (cls == Object.class) {",
                "-            if (!_config.isEnabled(SerializationFeature.FAIL_ON_EMPTY_BEANS)) {",
                "-                return true;",
                "-            }",
                "-        }",
                "-        ",
                "-        try {",
                "-            JsonSerializer<?> ser = _findExplicitUntypedSerializer(cls);",
                "-            return (ser != null);",
                "-        } catch (JsonMappingException e) {",
                "-            if (cause != null) {",
                "-                cause.set(e);",
                "-            }",
                "-        } catch (RuntimeException e) {",
                "-            if (cause == null) { // earlier behavior",
                "-                throw e;",
                "-            }",
                "-            cause.set(e);",
                "-        }",
                "-        return false;",
                "-    }",
                "-",
                "     /**",
                "@@ -269,4 +234,2 @@ filter.getClass().getName(), t.getClass().getName(), t.getMessage());",
                "      * provider instances.",
                "-     *",
                "-     * @since 2.8",
                "      */"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java",
                "src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
                "src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1917": "Revert \"Fix #4561 (revert #4430)\" -- i.e. go back to modified #4430. #4568 Deprecate ObjectMapper.canDeserialize()/ObjectMapper.canSerialize() in 2.18 #4570"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java, src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java, src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java, src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: fasterxml",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1917",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "eb7cf73d6676bd56354a0d513e11b886fc799478",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1516679224,
            "hunks": 8,
            "message": "Fix #1906",
            "diff": [
                "diff --git a/release-notes/CREDITS-2.x b/release-notes/CREDITS-2.x",
                "index ffa2e03d4..5dbb52303 100644",
                "--- a/release-notes/CREDITS-2.x",
                "+++ b/release-notes/CREDITS-2.x",
                "@@ -742,2 +742,4 @@ Alexander Skvortcov (askvortcov@github)",
                " Joe Schafer (jschaf@github)",
                "+  * Reported #1906: Add string format specifier for error message in `PropertyValueBuffer`",
                "+   (2.9.4)",
                "   * Reported #1907: Remove `getClass()` from `_valueType` argument for error reporting",
                "diff --git a/release-notes/VERSION-2.x b/release-notes/VERSION-2.x",
                "index dc9f089c8..460202094 100644",
                "--- a/release-notes/VERSION-2.x",
                "+++ b/release-notes/VERSION-2.x",
                "@@ -1,5 +1,7 @@",
                "-Project: jackson-databin------------------------------------------------------------------------",
                "-=== Releases === ",
                "+------------------------------------------------------------------------",
                "+Project: jackson-databind",
                " ------------------------------------------------------------------------",
                "+=== Releases === ",
                "+",
                " 2.9.4 (not yet released)",
                "@@ -29,2 +31,4 @@ Project: jackson-databin--------------------------------------------------------",
                "  (reported by OneSourceCat@github)",
                "+#1906: Add string format specifier for error message in `PropertyValueBuffer`",
                "+ (reported by Joe S)",
                " #1907: Remove `getClass()` from `_valueType` argument for error reporting",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.java b/src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.java",
                "index 068d08b4d..76e0b2b1b 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.java",
                "@@ -133,5 +133,5 @@ public class PropertyValueBuffer",
                "         if (value == null && _context.isEnabled(DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES)) {",
                "-            return _context.reportInputMismatch(prop, String.format(",
                "-                \"Null value for creator property '%s'; DeserializationFeature.FAIL_ON_NULL_FOR_CREATOR_PARAMETERS enabled\",",
                "-                prop.getName(), prop.getCreatorIndex()));",
                "+            return _context.reportInputMismatch(prop,",
                "+                \"Null value for creator property '%s' (index %d); `DeserializationFeature.FAIL_ON_NULL_FOR_CREATOR_PARAMETERS` enabled\",",
                "+                prop.getName(), prop.getCreatorIndex());",
                "         }",
                "@@ -174,3 +174,3 @@ public class PropertyValueBuffer",
                "                     _context.reportInputMismatch(prop.getType(),",
                "-                            \"Null value for creator property '%s' (index %d); DeserializationFeature.FAIL_ON_NULL_FOR_CREATOR_PARAMETERS enabled\",",
                "+                            \"Null value for creator property '%s' (index %d); `DeserializationFeature.FAIL_ON_NULL_FOR_CREATOR_PARAMETERS` enabled\",",
                "                             prop.getName(), props[ix].getCreatorIndex());",
                "@@ -193,10 +193,9 @@ public class PropertyValueBuffer",
                "         if (prop.isRequired()) {",
                "-            _context.reportInputMismatch(prop, String.format(",
                "-                    \"Missing required creator property '%s' (index %d)\",",
                "-                    prop.getName(), prop.getCreatorIndex()));",
                "+            _context.reportInputMismatch(prop, \"Missing required creator property '%s' (index %d)\",",
                "+                    prop.getName(), prop.getCreatorIndex());",
                "         }",
                "         if (_context.isEnabled(DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES)) {",
                "-            _context.reportInputMismatch(prop, String.format(",
                "-                    \"Missing creator property '%s' (index %d); DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES enabled\",",
                "-                    prop.getName(), prop.getCreatorIndex()));",
                "+            _context.reportInputMismatch(prop,",
                "+                    \"Missing creator property '%s' (index %d); `DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES` enabled\",",
                "+                    prop.getName(), prop.getCreatorIndex());",
                "         }"
            ],
            "changed_files": [
                "release-notes/CREDITS-2.x",
                "release-notes/VERSION-2.x",
                "src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1906": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "jackson-databind-2.10.0",
                "jackson-databind-2.10.0.pr1",
                "jackson-databind-2.10.0.pr2",
                "jackson-databind-2.10.0.pr3",
                "jackson-databind-2.10.1",
                "jackson-databind-2.10.2",
                "jackson-databind-2.10.3",
                "jackson-databind-2.10.4",
                "jackson-databind-2.10.5",
                "jackson-databind-2.10.5.1",
                "jackson-databind-2.11.0",
                "jackson-databind-2.11.0.rc1",
                "jackson-databind-2.11.1",
                "jackson-databind-2.11.2",
                "jackson-databind-2.11.3",
                "jackson-databind-2.11.4",
                "jackson-databind-2.12.0",
                "jackson-databind-2.12.0-rc1",
                "jackson-databind-2.12.0-rc2",
                "jackson-databind-2.12.1",
                "jackson-databind-2.12.2",
                "jackson-databind-2.12.3",
                "jackson-databind-2.12.4",
                "jackson-databind-2.12.5",
                "jackson-databind-2.12.6",
                "jackson-databind-2.12.6.1",
                "jackson-databind-2.12.7",
                "jackson-databind-2.12.7.1",
                "jackson-databind-2.12.7.2",
                "jackson-databind-2.13.0",
                "jackson-databind-2.13.0-rc1",
                "jackson-databind-2.13.0-rc2",
                "jackson-databind-2.13.1",
                "jackson-databind-2.13.2",
                "jackson-databind-2.13.2.1",
                "jackson-databind-2.13.2.2",
                "jackson-databind-2.13.3",
                "jackson-databind-2.13.4",
                "jackson-databind-2.13.4.1",
                "jackson-databind-2.13.4.2",
                "jackson-databind-2.13.5",
                "jackson-databind-2.14.0",
                "jackson-databind-2.14.0-rc1",
                "jackson-databind-2.14.0-rc2",
                "jackson-databind-2.14.0-rc3",
                "jackson-databind-2.14.1",
                "jackson-databind-2.14.2",
                "jackson-databind-2.14.3",
                "jackson-databind-2.15.0",
                "jackson-databind-2.15.0-rc1",
                "jackson-databind-2.15.0-rc2",
                "jackson-databind-2.15.0-rc3",
                "jackson-databind-2.15.1",
                "jackson-databind-2.15.2",
                "jackson-databind-2.15.3",
                "jackson-databind-2.15.4",
                "jackson-databind-2.16.0",
                "jackson-databind-2.16.0-rc1",
                "jackson-databind-2.16.1",
                "jackson-databind-2.16.2",
                "jackson-databind-2.17.0",
                "jackson-databind-2.17.0-rc1",
                "jackson-databind-2.17.1",
                "jackson-databind-2.17.2",
                "jackson-databind-2.9.10",
                "jackson-databind-2.9.10.1",
                "jackson-databind-2.9.10.2",
                "jackson-databind-2.9.10.3",
                "jackson-databind-2.9.10.4",
                "jackson-databind-2.9.10.5",
                "jackson-databind-2.9.10.6",
                "jackson-databind-2.9.10.7",
                "jackson-databind-2.9.10.8",
                "jackson-databind-2.9.4",
                "jackson-databind-2.9.5",
                "jackson-databind-2.9.6",
                "jackson-databind-2.9.7",
                "jackson-databind-2.9.8",
                "jackson-databind-2.9.9",
                "jackson-databind-2.9.9.1",
                "jackson-databind-2.9.9.2",
                "jackson-databind-2.9.9.3"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: fasterxml",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1906",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "cd14544a7006a83b95a728eb748e0bf941da2cc2",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1516171379,
            "hunks": 7,
            "message": "Fix #1868 for good",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/impl/JavaUtilCollectionsDeserializers.java b/src/main/java/com/fasterxml/jackson/databind/deser/impl/JavaUtilCollectionsDeserializers.java",
                "index c3ebb6d10..ce27bbc59 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/JavaUtilCollectionsDeserializers.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/JavaUtilCollectionsDeserializers.java",
                "@@ -36,5 +36,23 @@ public abstract class JavaUtilCollectionsDeserializers",
                "-    private final static Class<?> CLASS_SINGLETON_SET = Collections.singleton(Boolean.TRUE).getClass();",
                "-    private final static Class<?> CLASS_SINGLETON_LIST = Collections.singletonList(Boolean.TRUE).getClass();",
                "-    private final static Class<?> CLASS_SINGLETON_MAP = Collections.singletonMap(\"a\", \"b\").getClass();",
                "+    private final static Class<?> CLASS_SINGLETON_SET;",
                "+    private final static Class<?> CLASS_SINGLETON_LIST;",
                "+    private final static Class<?> CLASS_SINGLETON_MAP;",
                "+",
                "+    private final static Class<?> CLASS_UNMODIFIABLE_SET;",
                "+    private final static Class<?> CLASS_UNMODIFIABLE_LIST;",
                "+    private final static Class<?> CLASS_UNMODIFIABLE_MAP;",
                "+",
                "+    static {",
                "+        Set<?> set = Collections.singleton(Boolean.TRUE);",
                "+        CLASS_SINGLETON_SET = set.getClass();",
                "+        CLASS_UNMODIFIABLE_SET = Collections.unmodifiableSet(set).getClass();",
                "+",
                "+        List<?> list = Collections.singletonList(Boolean.TRUE);",
                "+        CLASS_SINGLETON_LIST = list.getClass();",
                "+        CLASS_UNMODIFIABLE_LIST = Collections.unmodifiableList(list).getClass();",
                "+",
                "+        Map<?,?> map = Collections.singletonMap(\"a\", \"b\");",
                "+        CLASS_SINGLETON_MAP = map.getClass();",
                "+        CLASS_UNMODIFIABLE_MAP = Collections.unmodifiableMap(map).getClass();",
                "+    }",
                "@@ -48,7 +66,11 @@ public abstract class JavaUtilCollectionsDeserializers",
                "         if (type.hasRawClass(CLASS_AS_ARRAYS_LIST)) {",
                "-            conv = converter(TYPE_AS_LIST, type);",
                "+            conv = converter(TYPE_AS_LIST, type, List.class);",
                "         } else if (type.hasRawClass(CLASS_SINGLETON_LIST)) {",
                "-            conv = converter(TYPE_SINGLETON_LIST, type);",
                "+            conv = converter(TYPE_SINGLETON_LIST, type, List.class);",
                "         } else if (type.hasRawClass(CLASS_SINGLETON_SET)) {",
                "-            conv = converter(TYPE_SINGLETON_SET, type);",
                "+            conv = converter(TYPE_SINGLETON_SET, type, Set.class);",
                "+        } else if (type.hasRawClass(CLASS_UNMODIFIABLE_LIST)) {",
                "+            conv = converter(TYPE_UNMODIFIABLE_LIST, type, List.class);",
                "+        } else if (type.hasRawClass(CLASS_UNMODIFIABLE_SET)) {",
                "+            conv = converter(TYPE_UNMODIFIABLE_SET, type, Set.class);",
                "         } else {",
                "@@ -67,3 +89,5 @@ public abstract class JavaUtilCollectionsDeserializers",
                "         if (type.hasRawClass(CLASS_SINGLETON_MAP)) {",
                "-            conv = converter(TYPE_SINGLETON_MAP, type);",
                "+            conv = converter(TYPE_SINGLETON_MAP, type, Map.class);",
                "+        } else if (type.hasRawClass(CLASS_UNMODIFIABLE_MAP)) {",
                "+            conv = converter(TYPE_UNMODIFIABLE_MAP, type, Map.class);",
                "         } else {",
                "@@ -74,25 +98,6 @@ public abstract class JavaUtilCollectionsDeserializers",
                "-    static JavaUtilCollectionsConverter converter(int kind, JavaType concreteType)",
                "+    static JavaUtilCollectionsConverter converter(int kind,",
                "+            JavaType concreteType, Class<?> rawSuper)",
                "     {",
                "-        JavaType inputType;",
                "-",
                "-        switch (kind) {",
                "-        case TYPE_SINGLETON_SET:",
                "-        case TYPE_UNMODIFIABLE_SET:",
                "-            inputType = concreteType.findSuperType(Set.class);",
                "-            break;",
                "-",
                "-        case TYPE_SINGLETON_MAP:",
                "-        case TYPE_UNMODIFIABLE_MAP:",
                "-            inputType = concreteType.findSuperType(Map.class);",
                "-            break;",
                "-",
                "-        case TYPE_SINGLETON_LIST:",
                "-        case TYPE_UNMODIFIABLE_LIST:",
                "-        case TYPE_AS_LIST:",
                "-        default:",
                "-            inputType = concreteType.findSuperType(List.class);",
                "-            break;",
                "-        }",
                "-        return new JavaUtilCollectionsConverter(kind, inputType);",
                "+        return new JavaUtilCollectionsConverter(kind, concreteType.findSuperType(rawSuper));",
                "     }"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/deser/impl/JavaUtilCollectionsDeserializers.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1868": "Class name handling for Collections.unmodifiableList changed in 2.9.4-SNAPSHOT #1880 Class name handling for Collections.emptyMap() changed in 2.9.3+ #1881"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "jackson-databind-2.10.0",
                "jackson-databind-2.10.0.pr1",
                "jackson-databind-2.10.0.pr2",
                "jackson-databind-2.10.0.pr3",
                "jackson-databind-2.10.1",
                "jackson-databind-2.10.2",
                "jackson-databind-2.10.3",
                "jackson-databind-2.10.4",
                "jackson-databind-2.10.5",
                "jackson-databind-2.10.5.1",
                "jackson-databind-2.11.0",
                "jackson-databind-2.11.0.rc1",
                "jackson-databind-2.11.1",
                "jackson-databind-2.11.2",
                "jackson-databind-2.11.3",
                "jackson-databind-2.11.4",
                "jackson-databind-2.12.0",
                "jackson-databind-2.12.0-rc1",
                "jackson-databind-2.12.0-rc2",
                "jackson-databind-2.12.1",
                "jackson-databind-2.12.2",
                "jackson-databind-2.12.3",
                "jackson-databind-2.12.4",
                "jackson-databind-2.12.5",
                "jackson-databind-2.12.6",
                "jackson-databind-2.12.6.1",
                "jackson-databind-2.12.7",
                "jackson-databind-2.12.7.1",
                "jackson-databind-2.12.7.2",
                "jackson-databind-2.13.0",
                "jackson-databind-2.13.0-rc1",
                "jackson-databind-2.13.0-rc2",
                "jackson-databind-2.13.1",
                "jackson-databind-2.13.2",
                "jackson-databind-2.13.2.1",
                "jackson-databind-2.13.2.2",
                "jackson-databind-2.13.3",
                "jackson-databind-2.13.4",
                "jackson-databind-2.13.4.1",
                "jackson-databind-2.13.4.2",
                "jackson-databind-2.13.5",
                "jackson-databind-2.14.0",
                "jackson-databind-2.14.0-rc1",
                "jackson-databind-2.14.0-rc2",
                "jackson-databind-2.14.0-rc3",
                "jackson-databind-2.14.1",
                "jackson-databind-2.14.2",
                "jackson-databind-2.14.3",
                "jackson-databind-2.15.0",
                "jackson-databind-2.15.0-rc1",
                "jackson-databind-2.15.0-rc2",
                "jackson-databind-2.15.0-rc3",
                "jackson-databind-2.15.1",
                "jackson-databind-2.15.2",
                "jackson-databind-2.15.3",
                "jackson-databind-2.15.4",
                "jackson-databind-2.16.0",
                "jackson-databind-2.16.0-rc1",
                "jackson-databind-2.16.1",
                "jackson-databind-2.16.2",
                "jackson-databind-2.17.0",
                "jackson-databind-2.17.0-rc1",
                "jackson-databind-2.17.1",
                "jackson-databind-2.17.2",
                "jackson-databind-2.9.10",
                "jackson-databind-2.9.10.1",
                "jackson-databind-2.9.10.2",
                "jackson-databind-2.9.10.3",
                "jackson-databind-2.9.10.4",
                "jackson-databind-2.9.10.5",
                "jackson-databind-2.9.10.6",
                "jackson-databind-2.9.10.7",
                "jackson-databind-2.9.10.8",
                "jackson-databind-2.9.4",
                "jackson-databind-2.9.5",
                "jackson-databind-2.9.6",
                "jackson-databind-2.9.7",
                "jackson-databind-2.9.8",
                "jackson-databind-2.9.9",
                "jackson-databind-2.9.9.1",
                "jackson-databind-2.9.9.2",
                "jackson-databind-2.9.9.3"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/deser/impl/JavaUtilCollectionsDeserializers.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: fasterxml",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1868",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "134aa746c896e167d3a156066a2e10263f458d2f",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1516919509,
            "hunks": 9,
            "message": "Fix #1883",
            "diff": [
                "diff --git a/release-notes/VERSION b/release-notes/VERSION",
                "index 12a556e3e..917ee5790 100644",
                "--- a/release-notes/VERSION",
                "+++ b/release-notes/VERSION",
                "@@ -20,2 +20,4 @@ Versions: 3.x (for earlier see VERSION-2.x)",
                " #1790: Add `createParser` methods in `ObjectMapper`, `ObjectReader`",
                "+#1883: Add \"abstract type mapping\" for deserialization from `Map<ENUMTYPE,V>`",
                "+  into `EnumMap` (and `Set<ENUMTYPE>` to `EnumSet<EnumType>`) ",
                " #1888: Merge `ResolvableSerializer` into `JsonSerializer`, `ResolvableDeserializer`",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "index 81ce1c4f0..ac6bd638f 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "@@ -1363,5 +1363,4 @@ public class ObjectMapper",
                "     {",
                "-        /* 18-Sep-2014, tatu: Let's add explicit check to ensure no one tries to",
                "-         *   use \"As.EXTERNAL_PROPERTY\", since that will not work (with 2.5+)",
                "-         */",
                "+        // 18-Sep-2014, tatu: Let's add explicit check to ensure no one tries to",
                "+        //   use \"As.EXTERNAL_PROPERTY\", since that will not work (with 2.5+)",
                "         if (includeAs == JsonTypeInfo.As.EXTERNAL_PROPERTY) {",
                "@@ -1369,3 +1368,2 @@ public class ObjectMapper",
                "         }",
                "-        ",
                "         TypeResolverBuilder<?> typer = new DefaultTypeResolverBuilder(applicability);",
                "@@ -1669,3 +1667,3 @@ public class ObjectMapper",
                "      */",
                "-    public Object setHandlerInstantiator(HandlerInstantiator hi)",
                "+    public ObjectMapper setHandlerInstantiator(HandlerInstantiator hi)",
                "     {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
                "index 7bcfef739..5d7df8e26 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
                "@@ -1208,4 +1208,10 @@ nonAnnotatedParamIndex, ctor);",
                "             if (contentDeser == null) { // not defined by annotation",
                "+                // [databind#1853]: Map `Set<ENUM>` to `EnumSet<ENUM>`",
                "+                if (contentType.isEnumType() && (collectionClass == Set.class)) {",
                "+                    collectionClass = EnumSet.class;",
                "+                    type = (CollectionType) config.getTypeFactory().constructSpecializedType(type, collectionClass);",
                "+                }",
                "                 // One special type: EnumSet:",
                "                 if (EnumSet.class.isAssignableFrom(collectionClass)) {",
                "+                    // 25-Jan-2018, tatu: shouldn't we pass `contentDeser`?",
                "                     deser = new EnumSetDeserializer(contentType, null);",
                "@@ -1345,2 +1351,8 @@ nonAnnotatedParamIndex, ctor);",
                "             Class<?> mapClass = type.getRawClass();",
                "+            // [databind#1853]: Map `Map<ENUM,x>` to `EnumMap<ENUM,x>`",
                "+            if ((mapClass == Map.class) && keyType.isEnumType()) {",
                "+                mapClass = EnumMap.class;",
                "+                type = (MapType) config.getTypeFactory().constructSpecializedType(type, mapClass);",
                "+//                type = (MapType) config.getTypeFactory().constructMapType(mapClass, keyType, contentType);",
                "+            }",
                "             if (EnumMap.class.isAssignableFrom(mapClass)) {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumSetDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumSetDeserializer.java",
                "index c5799de85..68682717a 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumSetDeserializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumSetDeserializer.java",
                "@@ -32,4 +32,2 @@ public class EnumSetDeserializer",
                "      * or not. If null, left to global defaults.",
                "-     *",
                "-     * @since 2.7",
                "      */",
                "@@ -57,5 +55,2 @@ public class EnumSetDeserializer",
                "-    /**",
                "-     * @since 2.7",
                "-     */",
                "     @SuppressWarnings(\"unchecked\" )"
            ],
            "changed_files": [
                "release-notes/VERSION",
                "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/std/EnumSetDeserializer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1883": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java, src/main/java/com/fasterxml/jackson/databind/deser/std/EnumSetDeserializer.java, src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: fasterxml",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1883",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5814b75f9af38986cecd78bb1b8431cb50d066fd",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1516231647,
            "hunks": 2,
            "message": "Add failing test for #1853; improve error checking for `StringDeserializer` (wrt `JsonToken.FIELD_NAME`)",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
                "index 70cf8e87f..bd92e4c8e 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
                "@@ -312,3 +312,3 @@ public class BeanDeserializer",
                "          */",
                "-        if (_objectIdReader != null && _objectIdReader.maySerializeAsObject()) {",
                "+        if ((_objectIdReader != null) && _objectIdReader.maySerializeAsObject()) {",
                "             if (p.hasTokenId(JsonTokenId.ID_FIELD_NAME)",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/StringDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/StringDeserializer.java",
                "index 42fed4e82..c563f4bdd 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StringDeserializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StringDeserializer.java",
                "@@ -54,5 +54,9 @@ public class StringDeserializer extends StdScalarDeserializer<String> // non-fin",
                "         // allow coercions for other scalar types",
                "-        String text = p.getValueAsString();",
                "-        if (text != null) {",
                "-            return text;",
                "+        // 17-Jan-2018, tatu: Related to [databind#1853] avoid FIELD_NAME by ensuring it's",
                "+        //   \"real\" scalar",
                "+        if (t.isScalarValue()) {",
                "+            String text = p.getValueAsString();",
                "+            if (text != null) {",
                "+                return text;",
                "+            }",
                "         }"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/std/StringDeserializer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1853": "ParameterNamesModule + JsonCreator + inheritance cause deserialization errors FasterXML/jackson-modules-java8#49 Error in deserialization of JSON mock-server/mockserver#451"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "jackson-databind-2.10.0",
                "jackson-databind-2.10.0.pr1",
                "jackson-databind-2.10.0.pr2",
                "jackson-databind-2.10.0.pr3",
                "jackson-databind-2.10.1",
                "jackson-databind-2.10.2",
                "jackson-databind-2.10.3",
                "jackson-databind-2.10.4",
                "jackson-databind-2.10.5",
                "jackson-databind-2.10.5.1",
                "jackson-databind-2.11.0",
                "jackson-databind-2.11.0.rc1",
                "jackson-databind-2.11.1",
                "jackson-databind-2.11.2",
                "jackson-databind-2.11.3",
                "jackson-databind-2.11.4",
                "jackson-databind-2.12.0",
                "jackson-databind-2.12.0-rc1",
                "jackson-databind-2.12.0-rc2",
                "jackson-databind-2.12.1",
                "jackson-databind-2.12.2",
                "jackson-databind-2.12.3",
                "jackson-databind-2.12.4",
                "jackson-databind-2.12.5",
                "jackson-databind-2.12.6",
                "jackson-databind-2.12.6.1",
                "jackson-databind-2.12.7",
                "jackson-databind-2.12.7.1",
                "jackson-databind-2.12.7.2",
                "jackson-databind-2.13.0",
                "jackson-databind-2.13.0-rc1",
                "jackson-databind-2.13.0-rc2",
                "jackson-databind-2.13.1",
                "jackson-databind-2.13.2",
                "jackson-databind-2.13.2.1",
                "jackson-databind-2.13.2.2",
                "jackson-databind-2.13.3",
                "jackson-databind-2.13.4",
                "jackson-databind-2.13.4.1",
                "jackson-databind-2.13.4.2",
                "jackson-databind-2.13.5",
                "jackson-databind-2.14.0",
                "jackson-databind-2.14.0-rc1",
                "jackson-databind-2.14.0-rc2",
                "jackson-databind-2.14.0-rc3",
                "jackson-databind-2.14.1",
                "jackson-databind-2.14.2",
                "jackson-databind-2.14.3",
                "jackson-databind-2.15.0",
                "jackson-databind-2.15.0-rc1",
                "jackson-databind-2.15.0-rc2",
                "jackson-databind-2.15.0-rc3",
                "jackson-databind-2.15.1",
                "jackson-databind-2.15.2",
                "jackson-databind-2.15.3",
                "jackson-databind-2.15.4",
                "jackson-databind-2.16.0",
                "jackson-databind-2.16.0-rc1",
                "jackson-databind-2.16.1",
                "jackson-databind-2.16.2",
                "jackson-databind-2.17.0",
                "jackson-databind-2.17.0-rc1",
                "jackson-databind-2.17.1",
                "jackson-databind-2.17.2",
                "jackson-databind-2.9.10",
                "jackson-databind-2.9.10.1",
                "jackson-databind-2.9.10.2",
                "jackson-databind-2.9.10.3",
                "jackson-databind-2.9.10.4",
                "jackson-databind-2.9.10.5",
                "jackson-databind-2.9.10.6",
                "jackson-databind-2.9.10.7",
                "jackson-databind-2.9.10.8",
                "jackson-databind-2.9.4",
                "jackson-databind-2.9.5",
                "jackson-databind-2.9.6",
                "jackson-databind-2.9.7",
                "jackson-databind-2.9.8",
                "jackson-databind-2.9.9",
                "jackson-databind-2.9.9.1",
                "jackson-databind-2.9.9.2",
                "jackson-databind-2.9.9.3"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java, src/main/java/com/fasterxml/jackson/databind/deser/std/StringDeserializer.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: fasterxml",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1853",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4e71662bbe0e3776dadd4ee76dfeb197be951291",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1516167794,
            "hunks": 4,
            "message": "Fix #1878",
            "diff": [
                "diff --git a/release-notes/VERSION-2.x b/release-notes/VERSION-2.x",
                "index aec9c251a..dbe5b2c22 100644",
                "--- a/release-notes/VERSION-2.x",
                "+++ b/release-notes/VERSION-2.x",
                "@@ -22,2 +22,4 @@ Project: jackson-databind",
                "   (requested by Ville K)",
                "+#1878: `@JsonBackReference` property is always ignored when deserializing since 2.9.0",
                "+ (reported by reda-alaoui@github)",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
                "index 2d62ce2c6..e4250770f 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
                "@@ -197,8 +197,11 @@ public class BeanDeserializerBuilder",
                "         _backRefProperties.put(referenceName, prop);",
                "-        // also: if we had property with same name, actually remove it",
                "+        // 16-Jan-2018, tatu: As per [databind#1878] we may want to leave it as is, to allow",
                "+        //    population for cases of \"wrong direction\", traversing parent first",
                "+        //   If this causes problems should probably instead include in \"ignored properties\" list",
                "+        //   Alternatively could also extend annotation to allow/disallow explicit value from input",
                "+        /*",
                "         if (_properties != null) {",
                "-            _properties.remove(referenceName);",
                "+            _properties.remove(prop.getName());",
                "         }",
                "-        // ??? 23-Jul-2012, tatu: Should it be included in list of all properties?",
                "-        //   For now, won't add, since it is inferred, not explicit...",
                "+        */",
                "     }"
            ],
            "changed_files": [
                "release-notes/VERSION-2.x",
                "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1878": "While deserializing, @JsonBackReference property is always ignored since 2.9.0 #1879"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "jackson-databind-2.10.0",
                "jackson-databind-2.10.0.pr1",
                "jackson-databind-2.10.0.pr2",
                "jackson-databind-2.10.0.pr3",
                "jackson-databind-2.10.1",
                "jackson-databind-2.10.2",
                "jackson-databind-2.10.3",
                "jackson-databind-2.10.4",
                "jackson-databind-2.10.5",
                "jackson-databind-2.10.5.1",
                "jackson-databind-2.11.0",
                "jackson-databind-2.11.0.rc1",
                "jackson-databind-2.11.1",
                "jackson-databind-2.11.2",
                "jackson-databind-2.11.3",
                "jackson-databind-2.11.4",
                "jackson-databind-2.12.0",
                "jackson-databind-2.12.0-rc1",
                "jackson-databind-2.12.0-rc2",
                "jackson-databind-2.12.1",
                "jackson-databind-2.12.2",
                "jackson-databind-2.12.3",
                "jackson-databind-2.12.4",
                "jackson-databind-2.12.5",
                "jackson-databind-2.12.6",
                "jackson-databind-2.12.6.1",
                "jackson-databind-2.12.7",
                "jackson-databind-2.12.7.1",
                "jackson-databind-2.12.7.2",
                "jackson-databind-2.13.0",
                "jackson-databind-2.13.0-rc1",
                "jackson-databind-2.13.0-rc2",
                "jackson-databind-2.13.1",
                "jackson-databind-2.13.2",
                "jackson-databind-2.13.2.1",
                "jackson-databind-2.13.2.2",
                "jackson-databind-2.13.3",
                "jackson-databind-2.13.4",
                "jackson-databind-2.13.4.1",
                "jackson-databind-2.13.4.2",
                "jackson-databind-2.13.5",
                "jackson-databind-2.14.0",
                "jackson-databind-2.14.0-rc1",
                "jackson-databind-2.14.0-rc2",
                "jackson-databind-2.14.0-rc3",
                "jackson-databind-2.14.1",
                "jackson-databind-2.14.2",
                "jackson-databind-2.14.3",
                "jackson-databind-2.15.0",
                "jackson-databind-2.15.0-rc1",
                "jackson-databind-2.15.0-rc2",
                "jackson-databind-2.15.0-rc3",
                "jackson-databind-2.15.1",
                "jackson-databind-2.15.2",
                "jackson-databind-2.15.3",
                "jackson-databind-2.15.4",
                "jackson-databind-2.16.0",
                "jackson-databind-2.16.0-rc1",
                "jackson-databind-2.16.1",
                "jackson-databind-2.16.2",
                "jackson-databind-2.17.0",
                "jackson-databind-2.17.0-rc1",
                "jackson-databind-2.17.1",
                "jackson-databind-2.17.2",
                "jackson-databind-2.9.10",
                "jackson-databind-2.9.10.1",
                "jackson-databind-2.9.10.2",
                "jackson-databind-2.9.10.3",
                "jackson-databind-2.9.10.4",
                "jackson-databind-2.9.10.5",
                "jackson-databind-2.9.10.6",
                "jackson-databind-2.9.10.7",
                "jackson-databind-2.9.10.8",
                "jackson-databind-2.9.4",
                "jackson-databind-2.9.5",
                "jackson-databind-2.9.6",
                "jackson-databind-2.9.7",
                "jackson-databind-2.9.8",
                "jackson-databind-2.9.9",
                "jackson-databind-2.9.9.1",
                "jackson-databind-2.9.9.2",
                "jackson-databind-2.9.9.3"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: fasterxml",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1878",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fb34f2fd2a727c8f1ba3a7af7da993e5ff936412",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1516600353,
            "hunks": 2,
            "message": "Cleaning up #1891, to backport; also see if we can avoid having to do extra lookup for each and every ctor property",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
                "index 0db44d0aa..0ef324d65 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
                "@@ -567,5 +567,8 @@ public class BeanDeserializer",
                "             }",
                "-            if(_ignorableProps != null && _ignorableProps.contains(propName)){",
                "+            // [databind#1891]: possible fix",
                "+            /*",
                "+            if (_ignorableProps != null && _ignorableProps.contains(propName)){",
                "                 continue;",
                "             }",
                "+            */"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1891": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: fasterxml",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1891",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8d3d3b7d04e0c7b079bb0927e1f04b345691bba7",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1515887766,
            "hunks": 127,
            "message": "Fix #1889",
            "diff": [
                "diff --git a/release-notes/VERSION b/release-notes/VERSION",
                "index e3321369e..12a556e3e 100644",
                "--- a/release-notes/VERSION",
                "+++ b/release-notes/VERSION",
                "@@ -22,2 +22,4 @@ Versions: 3.x (for earlier see VERSION-2.x)",
                "  into `JsonDeserializer`",
                "+#1889: Merge `ContextualSerializer` into `JsonSerializer`, `ContextualDeserializer`",
                "+ into `JsonDeserializer`",
                " - Remove `MappingJsonFactory`",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/BeanProperty.java b/src/main/java/com/fasterxml/jackson/databind/BeanProperty.java",
                "index 742948974..31dbdcd48 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/BeanProperty.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/BeanProperty.java",
                "@@ -27,6 +27,5 @@ import com.fasterxml.jackson.databind.util.FullyNamed;",
                "  * and deserializers, but rather only passed when context",
                "- * is known when",
                "- * {@link com.fasterxml.jackson.databind.ser.ContextualSerializer} and",
                "- * {@link com.fasterxml.jackson.databind.deser.ContextualDeserializer}",
                "- * resolution occurs (<code>createContextual(...)</code> method is called).",
                "+ * is known and",
                "+ * {@link JsonSerializer#createContextual} and",
                "+ * {@link JsonDeserializer#createContextual} are called.",
                "  * References may (need to) be retained by serializers and deserializers,",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java",
                "index d28ba60ca..df4857dc0 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java",
                "@@ -153,8 +153,7 @@ public abstract class DeserializationContext",
                "     /**",
                "-     * Type of {@link JsonDeserializer} (or, more specifically,",
                "-     *   {@link ContextualDeserializer}) that is being",
                "-     *   contextualized currently.",
                "+     * Type of {@link JsonDeserializer} on which {@link JsonDeserializer#createContextual}",
                "+     * is being called currently.",
                "      */",
                "     protected LinkedNode<JavaType> _currentType;",
                "-    ",
                "+",
                "     /*",
                "@@ -318,3 +317,3 @@ public abstract class DeserializationContext",
                "      * Accessor to {@link JavaType} of currently contextualized",
                "-     * {@link ContextualDeserializer}, if any.",
                "+     * {@link JsonDeserializer}, if any.",
                "      * This is sometimes useful for generic {@link JsonDeserializer}s that",
                "@@ -324,3 +323,3 @@ public abstract class DeserializationContext",
                "      *",
                "-     * @return Type of {@link ContextualDeserializer} being contextualized,",
                "+     * @return Type of {@link JsonDeserializer} being contextualized,",
                "      *   if process is on-going; null if not.",
                "@@ -757,8 +756,6 @@ public abstract class DeserializationContext",
                "      * directly created to deserialize values of a POJO property),",
                "-     * to handle details of resolving",
                "-     * {@link ContextualDeserializer} with given property context.",
                "+     * to handle details of calling",
                "+     * {@link JsonDeserializer#createContextual} with given property context.",
                "      * ",
                "      * @param prop Property for which the given primary deserializer is used; never null.",
                "-     * ",
                "-     * @since 2.5",
                "      */",
                "@@ -768,6 +765,6 @@ public abstract class DeserializationContext",
                "     {",
                "-        if (deser instanceof ContextualDeserializer) {",
                "+        if (deser != null) {",
                "             _currentType = new LinkedNode<JavaType>(type, _currentType);",
                "             try {",
                "-                deser = ((ContextualDeserializer) deser).createContextual(this, prop);",
                "+                deser = deser.createContextual(this, prop);",
                "             } finally {",
                "@@ -785,3 +782,3 @@ public abstract class DeserializationContext",
                "      * to handle details of resolving",
                "-     * {@link ContextualDeserializer} with given property context.",
                "+     * {@link JsonDeserializer#createContextual} with given property context.",
                "      * Given that these deserializers are not directly related to given property",
                "@@ -792,4 +789,2 @@ public abstract class DeserializationContext",
                "      *    when deserializing root values",
                "-     * ",
                "-     * @since 2.5",
                "      */",
                "@@ -799,6 +794,6 @@ public abstract class DeserializationContext",
                "     {",
                "-        if (deser instanceof ContextualDeserializer) {",
                "+        if (deser != null) {",
                "             _currentType = new LinkedNode<JavaType>(type, _currentType);",
                "             try {",
                "-                deser = ((ContextualDeserializer) deser).createContextual(this, prop);",
                "+                deser =deser.createContextual(this, prop);",
                "             } finally {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java",
                "index a99121887..e9df07eda 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java",
                "@@ -32,7 +32,5 @@ import com.fasterxml.jackson.databind.util.NameTransformer;",
                "  * of deserialization on per-property basis), deserializers may want",
                "- * to implement",
                "- * {@link com.fasterxml.jackson.databind.deser.ContextualDeserializer},",
                "- * which allows specialization of deserializers: call to",
                "- * {@link com.fasterxml.jackson.databind.deser.ContextualDeserializer#createContextual}",
                "- * is passed information on property, and can create a newly configured",
                "+ * to override",
                "+ * {@link #createContextual} which allows specialization of deserializers:",
                "+ * it is passed information on property, and can create a newly configured",
                "  * deserializer for handling that particular property.",
                "@@ -46,3 +44,4 @@ public abstract class JsonDeserializer<T>",
                "     /**********************************************************",
                "-    /* Initialization, with former `ResolvableDeserializer`",
                "+    /* Initialization, with former `ResolvableDeserializer`,",
                "+    /* `ContextualDeserializer`",
                "     /**********************************************************",
                "@@ -64,2 +63,28 @@ public abstract class JsonDeserializer<T>",
                "+    /**",
                "+     * Method called to see if a different (or differently configured) deserializer",
                "+     * is needed to deserialize values of specified property.",
                "+     * Note that instance that this method is called on is typically shared one and",
                "+     * as a result method should <b>NOT</b> modify this instance but rather construct",
                "+     * and return a new instance. This instance should only be returned as-is, in case",
                "+     * it is already suitable for use.",
                "+     * ",
                "+     * @param ctxt Deserialization context to access configuration, additional ",
                "+     *    deserializers that may be needed by this deserializer",
                "+     * @param property Method, field or constructor parameter that represents the property",
                "+     *   (and is used to assign deserialized value).",
                "+     *   Should be available; but there may be cases where caller cannot provide it and",
                "+     *   null is passed instead (in which case impls usually pass 'this' deserializer as is)",
                "+     * ",
                "+     * @return Deserializer to use for deserializing values of specified property;",
                "+     *   may be this instance or a new instance.",
                "+     * ",
                "+     * @throws JsonMappingException",
                "+     */",
                "+    public JsonDeserializer<?> createContextual(DeserializationContext ctxt,",
                "+            BeanProperty property) throws JsonMappingException {",
                "+        // default implementation returns instance unmodified",
                "+        return this;",
                "+    }",
                "+",
                "     /*",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/JsonSerializer.java b/src/main/java/com/fasterxml/jackson/databind/JsonSerializer.java",
                "index 488d21a5b..91f6045ed 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/JsonSerializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/JsonSerializer.java",
                "@@ -18,12 +18,5 @@ import com.fasterxml.jackson.databind.util.NameTransformer;",
                "  * arbitrary types into JSON, using provided {@link JsonGenerator}.",
                "- * {@link com.fasterxml.jackson.databind.ser.std.StdSerializer} instead",
                "- * of this class, since it will implement many of optional",
                "- * methods of this class.",
                "- *<p>",
                "- * NOTE: various <code>serialize</code> methods are never (to be) called",
                "- * with null values -- caller <b>must</b> handle null values, usually",
                "- * by calling {@link SerializerProvider#findNullValueSerializer} to obtain",
                "- * serializer to use.",
                "- * This also means that custom serializers cannot be directly used to change",
                "- * the output to produce when serializing null values.",
                "+ * Note that although API is defined here, custom serializer implementations",
                "+ * should almost always be based on {@link com.fasterxml.jackson.databind.ser.std.StdSerializer} ",
                "+ * since it will implement many of optional methods of this class.",
                "  *<p>",
                "@@ -37,12 +30,22 @@ import com.fasterxml.jackson.databind.util.NameTransformer;",
                "  *<p>",
                "- * In addition, to support per-property annotations (to configure aspects",
                "- * of serialization on per-property basis), serializers may want",
                "- * to implement ",
                "- * {@link com.fasterxml.jackson.databind.ser.ContextualSerializer},",
                "- * which allows specialization of serializers: call to",
                "- * {@link com.fasterxml.jackson.databind.ser.ContextualSerializer#createContextual}",
                "- * is passed information on property, and can create a newly configured",
                "- * serializer for handling that particular property.",
                "+ * Initialization of serializers is handled by two main methods:",
                "+ *<ol>",
                "+ *  <li>{@link #resolve}: called after instance is configured to be used for specific type,",
                "+ *     but without yet knowing property it will be used for (or, in case of root values, without property).",
                "+ *     Method needs to be implemented for serializers that may work on cyclic types, and specifically",
                "+ *     is implemented by standard POJO serializer ({@code BeanSerializer}). It is usually not needed for",
                "+ *     container types as their type definitions are not cyclic, unlike some POJO types.",
                "+ *  <li>{@link #createContextual}: called on resolved instance (whether newly created, or found via cache),",
                "+ *     when serializer is to be used for specific property, or as root value serializer (no referring property).",
                "+ *     It is used to apply annotations from property accessors (getter, field), and may also be used for resolving",
                "+ *     nested types for container serializers (such as ones for {@link java.util.Collection}s).",
                "+ * </ol>",
                "+ * Caching of serializers occurs after {@link #resolve} is called: cached instances are not contextual.",
                "  *<p>",
                "- * Resolution of serializers occurs before contextualization.",
                "+ * NOTE: various <code>serialize</code> methods are never (to be) called",
                "+ * with null values -- caller <b>must</b> handle null values, usually",
                "+ * by calling {@link SerializerProvider#findNullValueSerializer} to obtain",
                "+ * serializer to use.",
                "+ * This also means that custom serializers cannot be directly used to change",
                "+ * the output to produce when serializing null values.",
                "  */",
                "@@ -53,3 +56,4 @@ public abstract class JsonSerializer<T>",
                "     /**********************************************************",
                "-    /* Initialization, with former `ResolvableSerializer`",
                "+    /* Initialization, with former `ResolvableSerializer`,",
                "+    /* `ContextualSerializer`.",
                "     /**********************************************************",
                "@@ -73,2 +77,31 @@ public abstract class JsonSerializer<T>",
                "+    /**",
                "+     * Method called to see if a different (or differently configured) serializer",
                "+     * is needed to serialize values of specified property (or, for root values, in which",
                "+     * case `null` is passed).",
                "+     * Note that instance that this method is called on is typically shared one and",
                "+     * as a result method should <b>NOT</b> modify this instance but rather construct",
                "+     * and return a new instance. This instance should only be returned as-is, in case",
                "+     * it is already suitable for use.",
                "+     *<p>",
                "+     * Note that method is only called once per POJO property, and for the first usage as root",
                "+     * value serializer; it is not called for every serialization, as doing that would have",
                "+     * significant performance impact; most serializers cache contextual instances for future",
                "+     * use.",
                "+     * ",
                "+     * @param prov Serializer provider to use for accessing config, other serializers",
                "+     * @param property Property (defined by one or more accessors - field or method - used",
                "+     *     for accessing logical property value) for which serializer is used to be used;",
                "+     *     or, `null` for root value (or in cases where caller does not have this information,",
                "+     *     which is handled as root value case).",
                "+     * ",
                "+     * @return Serializer to use for serializing values of specified property;",
                "+     *   may be this instance or a new instance.",
                "+     */",
                "+    public JsonSerializer<?> createContextual(SerializerProvider prov,",
                "+            BeanProperty property) throws JsonMappingException {",
                "+        // default implementation returns instance unmodified",
                "+        return this;",
                "+    }",
                "+",
                "     /*",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java b/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
                "index 56122777e..3cf493abf 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
                "@@ -25,3 +25,2 @@ import com.fasterxml.jackson.databind.cfg.ContextAttributes;",
                " import com.fasterxml.jackson.databind.cfg.GeneratorSettings;",
                "-import com.fasterxml.jackson.databind.deser.ContextualDeserializer;",
                " import com.fasterxml.jackson.databind.exc.InvalidDefinitionException;",
                "@@ -1023,5 +1022,4 @@ public abstract class SerializerProvider",
                "      * or an uninitialized serializer instance.",
                "-     * Either way, serialize will be properly resolved",
                "-     * (via {@link com.fasterxml.jackson.databind.JsonSerializer#resolve}) and/or contextualized",
                "-     * (via {@link com.fasterxml.jackson.databind.ser.ContextualSerializer}) as necessary.",
                "+     * Either way, serializer will be properly resolved",
                "+     * (via {@link com.fasterxml.jackson.databind.JsonSerializer#resolve}).",
                "      * ",
                "@@ -1041,4 +1039,2 @@ public abstract class SerializerProvider",
                "      *    `null` if filter created via defaulting, global or per-type.",
                "-     *",
                "-     * @since 2.9",
                "      */",
                "@@ -1051,4 +1047,2 @@ public abstract class SerializerProvider",
                "      * to check handling of `null` values by the filter.",
                "-     *",
                "-     * @since 2.9",
                "      */",
                "@@ -1066,4 +1060,4 @@ public abstract class SerializerProvider",
                "      * directly created to serialize values of a POJO property),",
                "-     * to handle details of resolving",
                "-     * {@link ContextualSerializer} with given property context.",
                "+     * to handle details of contextualization, calling",
                "+     * {@link JsonSerializer#createContextual(SerializerProvider, BeanProperty)} with given property context.",
                "      * ",
                "@@ -1076,5 +1070,3 @@ public abstract class SerializerProvider",
                "         if (ser != null) {",
                "-            if (ser instanceof ContextualSerializer) {",
                "-                ser = ((ContextualSerializer) ser).createContextual(this, property);",
                "-            }",
                "+            ser = ser.createContextual(this, property);",
                "         }",
                "@@ -1088,4 +1080,4 @@ public abstract class SerializerProvider",
                "      * for structured types, or serializers for root values)",
                "-     * to handle details of resolving",
                "-     * {@link ContextualDeserializer} with given property context.",
                "+     * to handle details of contextualization, calling",
                "+     * {@link JsonSerializer#createContextual(SerializerProvider, BeanProperty)} with given property context.",
                "      * Given that these serializers are not directly related to given property",
                "@@ -1096,4 +1088,2 @@ public abstract class SerializerProvider",
                "      *    when deserializing root values",
                "-     * ",
                "-     * @since 2.3",
                "      */",
                "@@ -1104,5 +1094,3 @@ public abstract class SerializerProvider",
                "         if (ser != null) {",
                "-            if (ser instanceof ContextualSerializer) {",
                "-                ser = ((ContextualSerializer) ser).createContextual(this, property);",
                "-            }",
                "+            ser = ser.createContextual(this, property);",
                "         }",
                "@@ -1110,3 +1098,3 @@ public abstract class SerializerProvider",
                "     }",
                "-    ",
                "+",
                "     /*",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/AbstractDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/AbstractDeserializer.java",
                "index 4937cdfdc..00287f61d 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/AbstractDeserializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/AbstractDeserializer.java",
                "@@ -27,4 +27,3 @@ public class AbstractDeserializer",
                "     extends JsonDeserializer<Object>",
                "-    implements ContextualDeserializer, // since 2.9",
                "-        java.io.Serializable",
                "+    implements java.io.Serializable",
                " {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
                "index aa34f0d90..0d62e1e66 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
                "@@ -27,4 +27,3 @@ public abstract class BeanDeserializerBase",
                "     extends StdDeserializer<Object>",
                "-    implements ContextualDeserializer,",
                "-        ValueInstantiator.Gettable,",
                "+    implements ValueInstantiator.Gettable,",
                "         java.io.Serializable",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/ContextualDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/ContextualDeserializer.java",
                "index 39d0aef2e..f002c231a 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/ContextualDeserializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/ContextualDeserializer.java",
                "@@ -5,35 +5,7 @@ import com.fasterxml.jackson.databind.*;",
                " /**",
                "- * Add-on interface that {@link JsonDeserializer}s can implement to get a callback",
                "- * that can be used to create contextual (context-dependent) instances of",
                "- * deserializer to use for  handling properties of supported type.",
                "- * This can be useful",
                "- * for deserializers that can be configured by annotations, or should otherwise",
                "- * have differing behavior depending on what kind of property is being deserialized.",
                "- *<p>",
                "- * Note that in cases where deserializer needs both contextualization and",
                "- * resolution -- resolution occurs first, and contextual",
                "- * resolution (via this interface) later on.",
                "+ * @deprecated Since 3.0: method demoted to <code>JsonDeserializer</code>",
                "  */",
                "+@Deprecated",
                " public interface ContextualDeserializer",
                " {",
                "-    /**",
                "-     * Method called to see if a different (or differently configured) deserializer",
                "-     * is needed to deserialize values of specified property.",
                "-     * Note that instance that this method is called on is typically shared one and",
                "-     * as a result method should <b>NOT</b> modify this instance but rather construct",
                "-     * and return a new instance. This instance should only be returned as-is, in case",
                "-     * it is already suitable for use.",
                "-     * ",
                "-     * @param ctxt Deserialization context to access configuration, additional ",
                "-     *    deserializers that may be needed by this deserializer",
                "-     * @param property Method, field or constructor parameter that represents the property",
                "-     *   (and is used to assign deserialized value).",
                "-     *   Should be available; but there may be cases where caller cannot provide it and",
                "-     *   null is passed instead (in which case impls usually pass 'this' deserializer as is)",
                "-     * ",
                "-     * @return Deserializer to use for deserializing values of specified property;",
                "-     *   may be this instance or a new instance.",
                "-     * ",
                "-     * @throws JsonMappingException",
                "-     */",
                "     public JsonDeserializer<?> createContextual(DeserializationContext ctxt,",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java b/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
                "index be1569c89..217a85a37 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
                "@@ -123,3 +123,3 @@ public final class DeserializerCache",
                "      * (see {@link JsonDeserializer#resolve}), but",
                "-     * not contextualized (wrt {@link ContextualDeserializer}): caller",
                "+     * not contextualized (wrt {@link JsonDeserializer#createContextual}): caller",
                "      * has to handle latter if necessary.",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java",
                "index a3e23ac4d..bd72a243e 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java",
                "@@ -29,3 +29,2 @@ public class CollectionDeserializer",
                "     extends ContainerDeserializerBase<Collection<Object>>",
                "-    implements ContextualDeserializer",
                " {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/DateDeserializers.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/DateDeserializers.java",
                "index 14bddb3ba..33580df17 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/DateDeserializers.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/DateDeserializers.java",
                "@@ -15,3 +15,2 @@ import com.fasterxml.jackson.databind.*;",
                " import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;",
                "-import com.fasterxml.jackson.databind.deser.ContextualDeserializer;",
                " import com.fasterxml.jackson.databind.util.ClassUtil;",
                "@@ -70,3 +69,2 @@ public class DateDeserializers",
                "         extends StdScalarDeserializer<T>",
                "-        implements ContextualDeserializer",
                "     {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/DelegatingDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/DelegatingDeserializer.java",
                "index 92798e271..5367d455f 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/DelegatingDeserializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/DelegatingDeserializer.java",
                "@@ -20,3 +20,2 @@ public abstract class DelegatingDeserializer",
                "     extends StdDeserializer<Object>",
                "-    implements ContextualDeserializer",
                " {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java",
                "index 9d5ed53f4..c85415653 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java",
                "@@ -10,3 +10,2 @@ import com.fasterxml.jackson.databind.*;",
                " import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;",
                "-import com.fasterxml.jackson.databind.deser.ContextualDeserializer;",
                " import com.fasterxml.jackson.databind.deser.SettableBeanProperty;",
                "@@ -22,6 +21,5 @@ import com.fasterxml.jackson.databind.util.EnumResolver;",
                "  */",
                "-@JacksonStdImpl // was missing until 2.6",
                "+@JacksonStdImpl",
                " public class EnumDeserializer",
                "     extends StdScalarDeserializer<Object>",
                "-    implements ContextualDeserializer",
                " {",
                "@@ -85,4 +83,2 @@ public class EnumDeserializer",
                "      * @return Deserializer based on given no-args factory method",
                "-     *",
                "-     * @since 2.8",
                "      */",
                "@@ -98,5 +94,2 @@ public class EnumDeserializer",
                "-    /**",
                "-     * @since 2.9",
                "-     */",
                "     public EnumDeserializer withResolved(Boolean caseInsensitive) {",
                "@@ -108,3 +101,3 @@ public class EnumDeserializer",
                "-    @Override // since 2.9",
                "+    @Override",
                "     public JsonDeserializer<?> createContextual(DeserializationContext ctxt,",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumMapDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumMapDeserializer.java",
                "index a1732b156..66b0c78ce 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumMapDeserializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumMapDeserializer.java",
                "@@ -22,3 +22,2 @@ public class EnumMapDeserializer",
                "     extends ContainerDeserializerBase<EnumMap<?,?>>",
                "-    implements ContextualDeserializer",
                " {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumSetDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumSetDeserializer.java",
                "index 08ceee8c1..c5799de85 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumSetDeserializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumSetDeserializer.java",
                "@@ -8,3 +8,2 @@ import com.fasterxml.jackson.core.*;",
                " import com.fasterxml.jackson.databind.*;",
                "-import com.fasterxml.jackson.databind.deser.ContextualDeserializer;",
                " import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;",
                "@@ -20,3 +19,2 @@ public class EnumSetDeserializer",
                "     extends StdDeserializer<EnumSet<?>>",
                "-    implements ContextualDeserializer",
                " {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/FactoryBasedEnumDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/FactoryBasedEnumDeserializer.java",
                "index 96c6c8d6e..8b4f1ecfa 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/FactoryBasedEnumDeserializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/FactoryBasedEnumDeserializer.java",
                "@@ -9,3 +9,2 @@ import com.fasterxml.jackson.core.JsonToken;",
                " import com.fasterxml.jackson.databind.*;",
                "-import com.fasterxml.jackson.databind.deser.ContextualDeserializer;",
                " import com.fasterxml.jackson.databind.deser.SettableBeanProperty;",
                "@@ -21,4 +20,2 @@ import com.fasterxml.jackson.databind.util.ClassUtil;",
                "  * for locating Enum values by String id.",
                "- * ",
                "- * @since 2.8 (as stand-alone class; was static inner class of {@link EnumDeserializer}",
                "  */",
                "@@ -26,3 +23,2 @@ class FactoryBasedEnumDeserializer",
                "     extends StdDeserializer<Object>",
                "-    implements ContextualDeserializer",
                " {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java",
                "index fb5f5175b..62993b36b 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java",
                "@@ -31,3 +31,2 @@ public class MapDeserializer",
                "     extends ContainerDeserializerBase<Map<Object,Object>>",
                "-    implements ContextualDeserializer",
                " {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/MapEntryDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/MapEntryDeserializer.java",
                "index 6480416f0..4d4168b32 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/MapEntryDeserializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/MapEntryDeserializer.java",
                "@@ -23,3 +23,2 @@ public class MapEntryDeserializer",
                "     extends ContainerDeserializerBase<Map.Entry<Object,Object>>",
                "-    implements ContextualDeserializer",
                " {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/ObjectArrayDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/ObjectArrayDeserializer.java",
                "index dbfcf0579..797bab6e6 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/ObjectArrayDeserializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/ObjectArrayDeserializer.java",
                "@@ -11,3 +11,2 @@ import com.fasterxml.jackson.databind.*;",
                " import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;",
                "-import com.fasterxml.jackson.databind.deser.ContextualDeserializer;",
                " import com.fasterxml.jackson.databind.deser.NullValueProvider;",
                "@@ -23,3 +22,2 @@ public class ObjectArrayDeserializer",
                "     extends ContainerDeserializerBase<Object[]>",
                "-    implements ContextualDeserializer",
                " {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers.java",
                "index 13454ad8d..8e6795f57 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers.java",
                "@@ -11,3 +11,2 @@ import com.fasterxml.jackson.databind.*;",
                " import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;",
                "-import com.fasterxml.jackson.databind.deser.ContextualDeserializer;",
                " import com.fasterxml.jackson.databind.deser.NullValueProvider;",
                "@@ -25,4 +24,4 @@ import com.fasterxml.jackson.databind.util.ArrayBuilders;",
                " @SuppressWarnings(\"serial\")",
                "-public abstract class PrimitiveArrayDeserializers<T> extends StdDeserializer<T>",
                "-    implements ContextualDeserializer // since 2.7",
                "+public abstract class PrimitiveArrayDeserializers<T>",
                "+    extends StdDeserializer<T>",
                " {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/ReferenceTypeDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/ReferenceTypeDeserializer.java",
                "index 9819ee31d..bec3101bc 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/ReferenceTypeDeserializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/ReferenceTypeDeserializer.java",
                "@@ -8,3 +8,2 @@ import com.fasterxml.jackson.core.JsonToken;",
                " import com.fasterxml.jackson.databind.*;",
                "-import com.fasterxml.jackson.databind.deser.ContextualDeserializer;",
                " import com.fasterxml.jackson.databind.deser.ValueInstantiator;",
                "@@ -21,5 +20,4 @@ public abstract class ReferenceTypeDeserializer<T>",
                "     extends StdDeserializer<T>",
                "-    implements ContextualDeserializer",
                " {",
                "-    private static final long serialVersionUID = 2L; // 2.9",
                "+    private static final long serialVersionUID = 2L;",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDelegatingDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDelegatingDeserializer.java",
                "index 089311905..6727a4ed4 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDelegatingDeserializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDelegatingDeserializer.java",
                "@@ -7,3 +7,2 @@ import com.fasterxml.jackson.core.JsonParser;",
                " import com.fasterxml.jackson.databind.*;",
                "-import com.fasterxml.jackson.databind.deser.ContextualDeserializer;",
                " import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;",
                "@@ -33,3 +32,2 @@ public class StdDelegatingDeserializer<T>",
                "     extends StdDeserializer<T>",
                "-    implements ContextualDeserializer",
                " {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
                "index 509a943b2..6122ce226 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
                "@@ -69,3 +69,3 @@ public abstract class StdDeserializer<T>",
                "      * Copy-constructor for sub-classes to use, most often when creating",
                "-     * new instances for {@link com.fasterxml.jackson.databind.deser.ContextualDeserializer}.",
                "+     * new instances via {@link com.fasterxml.jackson.databind.JsonDeserializer#createContextual}.",
                "      */",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdNodeBasedDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdNodeBasedDeserializer.java",
                "index 2bd9d1f02..735820ddc 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdNodeBasedDeserializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdNodeBasedDeserializer.java",
                "@@ -39,3 +39,3 @@ public abstract class StdNodeBasedDeserializer<T>",
                "      * \"Copy-constructor\" used when creating a modified copies, most often",
                "-     * if sub-class implements {@link com.fasterxml.jackson.databind.deser.ContextualDeserializer}.",
                "+     * if sub-class overrides {@link com.fasterxml.jackson.databind.JsonDeserializer#createContextual}.",
                "      */",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java",
                "index df8fba83c..dcefad1e4 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java",
                "@@ -8,3 +8,2 @@ import com.fasterxml.jackson.databind.*;",
                " import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;",
                "-import com.fasterxml.jackson.databind.deser.ContextualDeserializer;",
                " import com.fasterxml.jackson.databind.deser.NullValueProvider;",
                "@@ -26,3 +25,2 @@ public final class StringArrayDeserializer",
                "     extends StdDeserializer<String[]>",
                "-    implements ContextualDeserializer",
                " {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java",
                "index 7e5095c9b..2c82ef8b6 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java",
                "@@ -9,3 +9,2 @@ import com.fasterxml.jackson.databind.*;",
                " import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;",
                "-import com.fasterxml.jackson.databind.deser.ContextualDeserializer;",
                " import com.fasterxml.jackson.databind.deser.NullValueProvider;",
                "@@ -23,3 +22,2 @@ public final class StringCollectionDeserializer",
                "     extends ContainerDeserializerBase<Collection<String>>",
                "-    implements ContextualDeserializer",
                " {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
                "index 0c7709d93..8b17c0f2c 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
                "@@ -8,3 +8,2 @@ import com.fasterxml.jackson.databind.*;",
                " import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;",
                "-import com.fasterxml.jackson.databind.deser.ContextualDeserializer;",
                " import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;",
                "@@ -27,3 +26,2 @@ public class UntypedObjectDeserializer",
                "     extends StdDeserializer<Object>",
                "-    implements ContextualDeserializer",
                " {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ext/XMLGregorianCalendarSerializer.java b/src/main/java/com/fasterxml/jackson/databind/ext/XMLGregorianCalendarSerializer.java",
                "index 145459340..9483d9872 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ext/XMLGregorianCalendarSerializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ext/XMLGregorianCalendarSerializer.java",
                "@@ -15,3 +15,2 @@ import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrappe",
                " import com.fasterxml.jackson.databind.jsontype.TypeSerializer;",
                "-import com.fasterxml.jackson.databind.ser.ContextualSerializer;",
                " import com.fasterxml.jackson.databind.ser.std.CalendarSerializer;",
                "@@ -22,3 +21,2 @@ public class XMLGregorianCalendarSerializer",
                "     extends StdSerializer<XMLGregorianCalendar>",
                "-    implements ContextualSerializer",
                " {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ext/jdk8/Jdk8StreamSerializer.java b/src/main/java/com/fasterxml/jackson/databind/ext/jdk8/Jdk8StreamSerializer.java",
                "index 7a06c3290..9646876cf 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ext/jdk8/Jdk8StreamSerializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ext/jdk8/Jdk8StreamSerializer.java",
                "@@ -4,3 +4,2 @@ import com.fasterxml.jackson.core.JsonGenerator;",
                " import com.fasterxml.jackson.databind.*;",
                "-import com.fasterxml.jackson.databind.ser.ContextualSerializer;",
                " import com.fasterxml.jackson.databind.ser.std.StdSerializer;",
                "@@ -15,3 +14,3 @@ import java.util.stream.Stream;",
                "  */",
                "-public class Jdk8StreamSerializer extends StdSerializer<Stream<?>> implements ContextualSerializer",
                "+public class Jdk8StreamSerializer extends StdSerializer<Stream<?>>",
                " {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/AnyGetterWriter.java b/src/main/java/com/fasterxml/jackson/databind/ser/AnyGetterWriter.java",
                "index 045adeaea..a586a5d92 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/AnyGetterWriter.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/AnyGetterWriter.java",
                "@@ -98,8 +98,6 @@ public class AnyGetterWriter",
                "         // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...",
                "-        if (_serializer instanceof ContextualSerializer) {",
                "-            JsonSerializer<?> ser = provider.handlePrimaryContextualization(_serializer, _property);",
                "-            _serializer = (JsonSerializer<Object>) ser;",
                "-            if (ser instanceof MapSerializer) {",
                "-                _mapSerializer = (MapSerializer) ser;",
                "-            }",
                "+        JsonSerializer<?> ser = provider.handlePrimaryContextualization(_serializer, _property);",
                "+        _serializer = (JsonSerializer<Object>) ser;",
                "+        if (ser instanceof MapSerializer) {",
                "+            _mapSerializer = (MapSerializer) ser;",
                "         }",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/ContextualSerializer.java b/src/main/java/com/fasterxml/jackson/databind/ser/ContextualSerializer.java",
                "index 2ace93b9e..0cd974f36 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/ContextualSerializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/ContextualSerializer.java",
                "@@ -5,33 +5,7 @@ import com.fasterxml.jackson.databind.*;",
                " /**",
                "- * Add-on interface that {@link JsonSerializer}s can implement to get a callback",
                "- * that can be used to create contextual instances of serializer to use for",
                "- * handling properties of supported type. This can be useful",
                "- * for serializers that can be configured by annotations, or should otherwise",
                "- * have differing behavior depending on what kind of property is being serialized.",
                "- *<p>",
                "- * Note that in cases where serializer needs both contextualization and",
                "- * resolution, resolution occurs first, and contextual",
                "- * resolution (via this interface) later on.",
                "+ * @deprecated Since 3.0: method demoted to <code>JsonSerializer</code>",
                "  */",
                "+@Deprecated",
                " public interface ContextualSerializer",
                " {",
                "-    /**",
                "-     * Method called to see if a different (or differently configured) serializer",
                "-     * is needed to serialize values of specified property.",
                "-     * Note that instance that this method is called on is typically shared one and",
                "-     * as a result method should <b>NOT</b> modify this instance but rather construct",
                "-     * and return a new instance. This instance should only be returned as-is, in case",
                "-     * it is already suitable for use.",
                "-     * ",
                "-     * @param prov Serializer provider to use for accessing config, other serializers",
                "-     * @param property Method or field that represents the property",
                "-     *   (and is used to access value to serialize).",
                "-     *   Should be available; but there may be cases where caller cannot provide it and",
                "-     *   null is passed instead (in which case impls usually pass 'this' serializer as is)",
                "-     * ",
                "-     * @return Serializer to use for serializing values of specified property;",
                "-     *   may be this instance or a new instance.",
                "-     * ",
                "-     * @throws JsonMappingException",
                "-     */",
                "     public JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property)",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/impl/MapEntrySerializer.java b/src/main/java/com/fasterxml/jackson/databind/ser/impl/MapEntrySerializer.java",
                "index 93b93812e..84270031d 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/MapEntrySerializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/MapEntrySerializer.java",
                "@@ -16,3 +16,2 @@ import com.fasterxml.jackson.databind.jsontype.TypeSerializer;",
                " import com.fasterxml.jackson.databind.ser.ContainerSerializer;",
                "-import com.fasterxml.jackson.databind.ser.ContextualSerializer;",
                " import com.fasterxml.jackson.databind.util.ArrayBuilders;",
                "@@ -20,5 +19,2 @@ import com.fasterxml.jackson.databind.util.BeanUtil;",
                "-/**",
                "- * @since 2.5",
                "- */",
                " @SuppressWarnings(\"serial\")",
                "@@ -27,3 +23,2 @@ public class MapEntrySerializer",
                "     extends ContainerSerializer<Map.Entry<?,?>>",
                "-    implements ContextualSerializer",
                " {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java b/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java",
                "index e528a5581..4901ab2ce 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java",
                "@@ -13,3 +13,2 @@ import com.fasterxml.jackson.databind.jsontype.TypeSerializer;",
                " import com.fasterxml.jackson.databind.ser.ContainerSerializer;",
                "-import com.fasterxml.jackson.databind.ser.ContextualSerializer;",
                " import com.fasterxml.jackson.databind.ser.std.ArraySerializerBase;",
                "@@ -24,3 +23,2 @@ public class StringArraySerializer",
                "     extends ArraySerializerBase<String[]>",
                "-    implements ContextualSerializer",
                " {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/impl/TypeWrappedSerializer.java b/src/main/java/com/fasterxml/jackson/databind/ser/impl/TypeWrappedSerializer.java",
                "index 62ad61d6c..1a0ae8741 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/TypeWrappedSerializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/TypeWrappedSerializer.java",
                "@@ -7,3 +7,2 @@ import com.fasterxml.jackson.databind.*;",
                " import com.fasterxml.jackson.databind.jsontype.TypeSerializer;",
                "-import com.fasterxml.jackson.databind.ser.ContextualSerializer;",
                "@@ -16,3 +15,2 @@ public final class TypeWrappedSerializer",
                "     extends JsonSerializer<Object>",
                "-    implements ContextualSerializer // since 2.9",
                " {",
                "@@ -58,3 +56,3 @@ public final class TypeWrappedSerializer",
                "         JsonSerializer<?> ser = _serializer;",
                "-        if (ser instanceof ContextualSerializer) {",
                "+        if (ser != null) {",
                "             ser = provider.handleSecondaryContextualization(ser, property);",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/ArraySerializerBase.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/ArraySerializerBase.java",
                "index 5ddada7d1..49d92900e 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/ArraySerializerBase.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/ArraySerializerBase.java",
                "@@ -20,3 +20,2 @@ public abstract class ArraySerializerBase<T>",
                "     extends ContainerSerializer<T>",
                "-    implements ContextualSerializer // for 'unwrapSingleElemArray'",
                " {",
                "@@ -74,23 +73,2 @@ public abstract class ArraySerializerBase<T>",
                "     }",
                "-    ",
                "-    /*",
                "-    // NOTE: as of 2.5, sub-classes SHOULD override (in 2.4 and before, was final),",
                "-    // at least if they can provide access to actual size of value and use `writeStartArray()`",
                "-    // variant that passes size of array to output, which is helpful with some data formats",
                "-    @Override",
                "-    public void serialize(T value, JsonGenerator gen, SerializerProvider provider) throws IOException",
                "-    {",
                "-        if (_shouldUnwrapSingle(provider)) {",
                "-            if (hasSingleElement(value)) {",
                "-                serializeContents(value, gen, provider);",
                "-                return;",
                "-            }",
                "-        }",
                "-        gen.setCurrentValue(value);",
                "-        gen.writeStartArray();",
                "-        // [databind#631]: Assign current value, to be accessible by custom serializers",
                "-        serializeContents(value, gen, provider);",
                "-        gen.writeEndArray();",
                "-    }",
                "-    */",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java",
                "index 3f1021a00..ce4868164 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java",
                "@@ -13,3 +13,2 @@ import com.fasterxml.jackson.databind.jsontype.TypeSerializer;",
                " import com.fasterxml.jackson.databind.ser.ContainerSerializer;",
                "-import com.fasterxml.jackson.databind.ser.ContextualSerializer;",
                " import com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;",
                "@@ -24,3 +23,2 @@ public abstract class AsArraySerializerBase<T>",
                "     extends ContainerSerializer<T>",
                "-    implements ContextualSerializer",
                " {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
                "index 3d6ac38b6..9151a08f3 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
                "@@ -13,3 +13,2 @@ import com.fasterxml.jackson.databind.introspect.AnnotatedMember;",
                " import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;",
                "-import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable;",
                " import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;",
                "@@ -34,4 +33,2 @@ public abstract class BeanSerializerBase",
                "     extends StdSerializer<Object>",
                "-    implements ContextualSerializer,",
                "-        JsonFormatVisitable",
                " {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java",
                "index 281ed93e2..2e1bfbd7c 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java",
                "@@ -15,3 +15,2 @@ import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrappe",
                " import com.fasterxml.jackson.databind.jsontype.TypeSerializer;",
                "-import com.fasterxml.jackson.databind.ser.ContextualSerializer;",
                "@@ -27,3 +26,2 @@ public final class BooleanSerializer",
                "     extends StdScalarSerializer<Object>",
                "-    implements ContextualSerializer",
                " {",
                "@@ -77,4 +75,2 @@ public final class BooleanSerializer",
                "      * as numbers <code>0</code> (false) or <code>1</code> (true).",
                "-     * ",
                "-     * @since 2.9",
                "      */",
                "@@ -82,3 +78,2 @@ public final class BooleanSerializer",
                "         extends StdScalarSerializer<Object>",
                "-        implements ContextualSerializer",
                "     {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java",
                "index 6402f1a39..463ad341f 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java",
                "@@ -17,3 +17,2 @@ import com.fasterxml.jackson.databind.*;",
                " import com.fasterxml.jackson.databind.jsonFormatVisitors.*;",
                "-import com.fasterxml.jackson.databind.ser.ContextualSerializer;",
                " import com.fasterxml.jackson.databind.util.StdDateFormat;",
                "@@ -23,3 +22,2 @@ public abstract class DateTimeSerializerBase<T>",
                "     extends StdScalarSerializer<T>",
                "-    implements ContextualSerializer",
                " {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java",
                "index 2f3ee73c5..4813edfef 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java",
                "@@ -14,3 +14,2 @@ import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrappe",
                " import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonStringFormatVisitor;",
                "-import com.fasterxml.jackson.databind.ser.ContextualSerializer;",
                " import com.fasterxml.jackson.databind.util.EnumValues;",
                "@@ -26,3 +25,2 @@ public class EnumSerializer",
                "     extends StdScalarSerializer<Enum<?>>",
                "-    implements ContextualSerializer",
                " {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/InetAddressSerializer.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/InetAddressSerializer.java",
                "index 2bc0e14c1..a7c39ca25 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/InetAddressSerializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/InetAddressSerializer.java",
                "@@ -13,3 +13,2 @@ import com.fasterxml.jackson.databind.SerializerProvider;",
                " import com.fasterxml.jackson.databind.jsontype.TypeSerializer;",
                "-import com.fasterxml.jackson.databind.ser.ContextualSerializer;",
                "@@ -27,3 +26,2 @@ public class InetAddressSerializer",
                "     extends StdScalarSerializer<InetAddress>",
                "-    implements ContextualSerializer",
                " {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java",
                "index f0808591a..40e21ef97 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java",
                "@@ -13,3 +13,2 @@ import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;",
                " import com.fasterxml.jackson.databind.introspect.AnnotatedMember;",
                "-import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable;",
                " import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;",
                "@@ -19,3 +18,2 @@ import com.fasterxml.jackson.databind.jsontype.TypeSerializer;",
                " import com.fasterxml.jackson.databind.ser.BeanSerializer;",
                "-import com.fasterxml.jackson.databind.ser.ContextualSerializer;",
                " import com.fasterxml.jackson.databind.util.ClassUtil;",
                "@@ -38,7 +36,3 @@ public class JsonValueSerializer",
                "     extends StdSerializer<Object>",
                "-    implements ContextualSerializer, JsonFormatVisitable",
                " {",
                "-    /**",
                "-     * @since 2.9",
                "-     */",
                "     protected final AnnotatedMember _accessor;",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java",
                "index 8521a5fc7..015fb0d44 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java",
                "@@ -19,3 +19,2 @@ import com.fasterxml.jackson.databind.jsontype.TypeSerializer;",
                " import com.fasterxml.jackson.databind.ser.ContainerSerializer;",
                "-import com.fasterxml.jackson.databind.ser.ContextualSerializer;",
                " import com.fasterxml.jackson.databind.ser.PropertyFilter;",
                "@@ -36,3 +35,2 @@ public class MapSerializer",
                "     extends ContainerSerializer<Map<?,?>>",
                "-    implements ContextualSerializer",
                " {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
                "index 3cca59b10..e05e17ede 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
                "@@ -13,3 +13,2 @@ import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrappe",
                " import com.fasterxml.jackson.databind.jsontype.TypeSerializer;",
                "-import com.fasterxml.jackson.databind.ser.ContextualSerializer;",
                "@@ -48,3 +47,3 @@ public class NumberSerializers {",
                "     protected abstract static class Base<T> extends StdScalarSerializer<T>",
                "-            implements ContextualSerializer {",
                "+    {",
                "         protected final JsonParser.NumberType _numberType;",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java",
                "index 1d0c2c47b..c4f628915 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java",
                "@@ -15,3 +15,2 @@ import com.fasterxml.jackson.databind.jsontype.TypeSerializer;",
                " import com.fasterxml.jackson.databind.ser.ContainerSerializer;",
                "-import com.fasterxml.jackson.databind.ser.ContextualSerializer;",
                " import com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;",
                "@@ -25,3 +24,2 @@ public class ObjectArraySerializer",
                "     extends ArraySerializerBase<Object[]>",
                "-    implements ContextualSerializer",
                " {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/ReferenceTypeSerializer.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/ReferenceTypeSerializer.java",
                "index 6fd17451b..eabf8fe73 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/ReferenceTypeSerializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/ReferenceTypeSerializer.java",
                "@@ -11,3 +11,2 @@ import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrappe",
                " import com.fasterxml.jackson.databind.jsontype.TypeSerializer;",
                "-import com.fasterxml.jackson.databind.ser.ContextualSerializer;",
                " import com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;",
                "@@ -25,3 +24,2 @@ public abstract class ReferenceTypeSerializer<T>",
                "     extends StdSerializer<T>",
                "-    implements ContextualSerializer",
                " {",
                "@@ -29,5 +27,2 @@ public abstract class ReferenceTypeSerializer<T>",
                "-    /**",
                "-     * @since 2.9",
                "-     */",
                "     public final static Object MARKER_FOR_EMPTY = JsonInclude.Include.NON_EMPTY;",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/StaticListSerializerBase.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/StaticListSerializerBase.java",
                "index eb9b3e8b2..db48211d2 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StaticListSerializerBase.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StaticListSerializerBase.java",
                "@@ -12,3 +12,2 @@ import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrappe",
                " import com.fasterxml.jackson.databind.jsontype.TypeSerializer;",
                "-import com.fasterxml.jackson.databind.ser.ContextualSerializer;",
                "@@ -21,3 +20,2 @@ public abstract class StaticListSerializerBase<T extends Collection<?>>",
                "     extends StdSerializer<T>",
                "-    implements ContextualSerializer",
                " {",
                "@@ -27,4 +25,2 @@ public abstract class StaticListSerializerBase<T extends Collection<?>>",
                "      * global configuration.",
                "-     *",
                "-     * @since 2.6",
                "      */",
                "@@ -37,5 +33,2 @@ public abstract class StaticListSerializerBase<T extends Collection<?>>",
                "-    /**",
                "-     * @since 2.9",
                "-     */",
                "     protected StaticListSerializerBase(StaticListSerializerBase<?> src,",
                "@@ -46,5 +39,2 @@ public abstract class StaticListSerializerBase<T extends Collection<?>>",
                "-    /**",
                "-     * @since 2.9",
                "-     */",
                "     public abstract JsonSerializer<?> _withResolved(BeanProperty prop,",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java",
                "index 53b76ec39..cc5a2fef5 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java",
                "@@ -7,6 +7,4 @@ import com.fasterxml.jackson.core.JsonGenerator;",
                " import com.fasterxml.jackson.databind.*;",
                "-import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable;",
                " import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;",
                " import com.fasterxml.jackson.databind.jsontype.TypeSerializer;",
                "-import com.fasterxml.jackson.databind.ser.ContextualSerializer;",
                " import com.fasterxml.jackson.databind.util.ClassUtil;",
                "@@ -25,4 +23,2 @@ public class StdDelegatingSerializer",
                "     extends StdSerializer<Object>",
                "-    implements ContextualSerializer,",
                "-        JsonFormatVisitable",
                " {",
                "@@ -117,3 +113,3 @@ public class StdDelegatingSerializer",
                "         }",
                "-        if (delSer instanceof ContextualSerializer) {",
                "+        if (delSer != null) {",
                "             delSer = provider.handleSecondaryContextualization(delSer, property);"
            ],
            "changed_files": [
                "release-notes/VERSION",
                "src/main/java/com/fasterxml/jackson/databind/BeanProperty.java",
                "src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java",
                "src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java",
                "src/main/java/com/fasterxml/jackson/databind/JsonSerializer.java",
                "src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/AbstractDeserializer.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/ContextualDeserializer.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/std/DateDeserializers.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/std/DelegatingDeserializer.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/std/EnumMapDeserializer.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/std/EnumSetDeserializer.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/std/FactoryBasedEnumDeserializer.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/std/MapEntryDeserializer.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/std/ObjectArrayDeserializer.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/std/ReferenceTypeDeserializer.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/std/StdDelegatingDeserializer.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/std/StdNodeBasedDeserializer.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
                "src/main/java/com/fasterxml/jackson/databind/ext/XMLGregorianCalendarSerializer.java",
                "src/main/java/com/fasterxml/jackson/databind/ext/jdk8/Jdk8StreamSerializer.java",
                "src/main/java/com/fasterxml/jackson/databind/ser/AnyGetterWriter.java",
                "src/main/java/com/fasterxml/jackson/databind/ser/ContextualSerializer.java",
                "src/main/java/com/fasterxml/jackson/databind/ser/impl/MapEntrySerializer.java",
                "src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java",
                "src/main/java/com/fasterxml/jackson/databind/ser/impl/TypeWrappedSerializer.java",
                "src/main/java/com/fasterxml/jackson/databind/ser/std/ArraySerializerBase.java",
                "src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java",
                "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
                "src/main/java/com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java",
                "src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java",
                "src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java",
                "src/main/java/com/fasterxml/jackson/databind/ser/std/InetAddressSerializer.java",
                "src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java",
                "src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java",
                "src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
                "src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java",
                "src/main/java/com/fasterxml/jackson/databind/ser/std/ReferenceTypeSerializer.java",
                "src/main/java/com/fasterxml/jackson/databind/ser/std/StaticListSerializerBase.java",
                "src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1889": "Embed createContextual in JsonSerializer, JsonDeserializer FasterXML/jackson3-dev#24"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/deser/std/FactoryBasedEnumDeserializer.java, src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java, src/main/java/com/fasterxml/jackson/databind/deser/std/EnumMapDeserializer.java, src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java, src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java, src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java, src/main/java/com/fasterxml/jackson/databind/ser/impl/TypeWrappedSerializer.java, src/main/java/com/fasterxml/jackson/databind/BeanProperty.java, src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java, src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java, src/main/java/com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java, src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java, src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers.java, src/main/java/com/fasterxml/jackson/databind/ext/XMLGregorianCalendarSerializer.java, src/main/java/com/fasterxml/jackson/databind/deser/ContextualDeserializer.java, src/main/java/com/fasterxml/jackson/databind/deser/std/ReferenceTypeDeserializer.java, src/main/java/com/fasterxml/jackson/databind/deser/std/ObjectArrayDeserializer.java, src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java, src/main/java/com/fasterxml/jackson/databind/ext/jdk8/Jdk8StreamSerializer.java, src/main/java/com/fasterxml/jackson/databind/ser/ContextualSerializer.java, src/main/java/com/fasterxml/jackson/databind/deser/std/EnumSetDeserializer.java, src/main/java/com/fasterxml/jackson/databind/ser/AnyGetterWriter.java, src/main/java/com/fasterxml/jackson/databind/JsonSerializer.java, src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java, src/main/java/com/fasterxml/jackson/databind/ser/std/ArraySerializerBase.java, src/main/java/com/fasterxml/jackson/databind/ser/std/InetAddressSerializer.java, src/main/java/com/fasterxml/jackson/databind/deser/std/StdDelegatingDeserializer.java, src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java, src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java, src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java, src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java, src/main/java/com/fasterxml/jackson/databind/ser/std/ReferenceTypeSerializer.java, src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java, src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java, src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java, src/main/java/com/fasterxml/jackson/databind/deser/AbstractDeserializer.java, src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java, src/main/java/com/fasterxml/jackson/databind/deser/std/StdNodeBasedDeserializer.java, src/main/java/com/fasterxml/jackson/databind/ser/impl/MapEntrySerializer.java, src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java, src/main/java/com/fasterxml/jackson/databind/deser/std/MapEntryDeserializer.java, src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java, src/main/java/com/fasterxml/jackson/databind/ser/std/StaticListSerializerBase.java, src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java, src/main/java/com/fasterxml/jackson/databind/deser/std/DateDeserializers.java, src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java, src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java, src/main/java/com/fasterxml/jackson/databind/deser/std/DelegatingDeserializer.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: deserialization, fasterxml",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1889",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8cfe3eeff0871dde07190a25b20389c8381fcc7f",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1516167411,
            "hunks": 1,
            "message": "Fixed (#1879)",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
                "index 92cc835c5..2d62ce2c6 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
                "@@ -199,3 +199,3 @@ public class BeanDeserializerBuilder",
                "         if (_properties != null) {",
                "-            _properties.remove(prop.getName());",
                "+            _properties.remove(referenceName);",
                "         }"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1879": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "jackson-databind-2.10.0",
                "jackson-databind-2.10.0.pr1",
                "jackson-databind-2.10.0.pr2",
                "jackson-databind-2.10.0.pr3",
                "jackson-databind-2.10.1",
                "jackson-databind-2.10.2",
                "jackson-databind-2.10.3",
                "jackson-databind-2.10.4",
                "jackson-databind-2.10.5",
                "jackson-databind-2.10.5.1",
                "jackson-databind-2.11.0",
                "jackson-databind-2.11.0.rc1",
                "jackson-databind-2.11.1",
                "jackson-databind-2.11.2",
                "jackson-databind-2.11.3",
                "jackson-databind-2.11.4",
                "jackson-databind-2.12.0",
                "jackson-databind-2.12.0-rc1",
                "jackson-databind-2.12.0-rc2",
                "jackson-databind-2.12.1",
                "jackson-databind-2.12.2",
                "jackson-databind-2.12.3",
                "jackson-databind-2.12.4",
                "jackson-databind-2.12.5",
                "jackson-databind-2.12.6",
                "jackson-databind-2.12.6.1",
                "jackson-databind-2.12.7",
                "jackson-databind-2.12.7.1",
                "jackson-databind-2.12.7.2",
                "jackson-databind-2.13.0",
                "jackson-databind-2.13.0-rc1",
                "jackson-databind-2.13.0-rc2",
                "jackson-databind-2.13.1",
                "jackson-databind-2.13.2",
                "jackson-databind-2.13.2.1",
                "jackson-databind-2.13.2.2",
                "jackson-databind-2.13.3",
                "jackson-databind-2.13.4",
                "jackson-databind-2.13.4.1",
                "jackson-databind-2.13.4.2",
                "jackson-databind-2.13.5",
                "jackson-databind-2.14.0",
                "jackson-databind-2.14.0-rc1",
                "jackson-databind-2.14.0-rc2",
                "jackson-databind-2.14.0-rc3",
                "jackson-databind-2.14.1",
                "jackson-databind-2.14.2",
                "jackson-databind-2.14.3",
                "jackson-databind-2.15.0",
                "jackson-databind-2.15.0-rc1",
                "jackson-databind-2.15.0-rc2",
                "jackson-databind-2.15.0-rc3",
                "jackson-databind-2.15.1",
                "jackson-databind-2.15.2",
                "jackson-databind-2.15.3",
                "jackson-databind-2.15.4",
                "jackson-databind-2.16.0",
                "jackson-databind-2.16.0-rc1",
                "jackson-databind-2.16.1",
                "jackson-databind-2.16.2",
                "jackson-databind-2.17.0",
                "jackson-databind-2.17.0-rc1",
                "jackson-databind-2.17.1",
                "jackson-databind-2.17.2",
                "jackson-databind-2.9.10",
                "jackson-databind-2.9.10.1",
                "jackson-databind-2.9.10.2",
                "jackson-databind-2.9.10.3",
                "jackson-databind-2.9.10.4",
                "jackson-databind-2.9.10.5",
                "jackson-databind-2.9.10.6",
                "jackson-databind-2.9.10.7",
                "jackson-databind-2.9.10.8",
                "jackson-databind-2.9.4",
                "jackson-databind-2.9.5",
                "jackson-databind-2.9.6",
                "jackson-databind-2.9.7",
                "jackson-databind-2.9.8",
                "jackson-databind-2.9.9",
                "jackson-databind-2.9.9.1",
                "jackson-databind-2.9.9.2",
                "jackson-databind-2.9.9.3"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: fasterxml",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1879",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7e51ede1bed079a1b628ccb670ea8a9748eaf233",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1515815525,
            "hunks": 21,
            "message": "First part of #1888: merge `ResolvableSerializer`",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/JsonSerializer.java b/src/main/java/com/fasterxml/jackson/databind/JsonSerializer.java",
                "index 012824ca8..a36895184 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/JsonSerializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/JsonSerializer.java",
                "@@ -31,4 +31,4 @@ import com.fasterxml.jackson.databind.util.NameTransformer;",
                "  * of its contents by using other serializer(s) -- it typically also needs",
                "- * to implement {@link com.fasterxml.jackson.databind.ser.ResolvableSerializer},",
                "- * which can locate secondary serializers needed. This is important to allow dynamic",
                "+ * to implement {@link #resolve} which can locate secondary serializers needed.",
                "+ * This is important to allow dynamic",
                "  * overrides of serializers; separate call interface is needed to separate",
                "@@ -46,7 +46,3 @@ import com.fasterxml.jackson.databind.util.NameTransformer;",
                "  *<p>",
                "- * If both",
                "- * {@link com.fasterxml.jackson.databind.ser.ResolvableSerializer} and",
                "- * {@link com.fasterxml.jackson.databind.ser.ContextualSerializer}",
                "- * are implemented, resolution of serializers occurs before",
                "- * contextualization.",
                "+ * Resolution of serializers occurs before contextualization.",
                "  */",
                "@@ -55,2 +51,25 @@ public abstract class JsonSerializer<T>",
                " {",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Initialization, with former `ResolvableSerializer",
                "+    /**********************************************************",
                "+     */",
                "+",
                "+    /**",
                "+     * Method called after {@link SerializerProvider} has registered",
                "+     * the serializer, but before it has returned it to the caller.",
                "+     * Called object can then resolve its dependencies to other types,",
                "+     * including self-references (direct or indirect).",
                "+     *<p>",
                "+     * Note that this method does NOT return serializer, since resolution",
                "+     * is not allowed to change actual serializer to use.",
                "+     *",
                "+     * @param provider Provider that has constructed serializer this method",
                "+     *   is called on.",
                "+     */",
                "+    public void resolve(SerializerProvider provider)",
                "+        throws JsonMappingException {",
                "+        // Default implementation does nothing",
                "+    }",
                "+",
                "     /*",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java b/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
                "index 7d2d34840..56122777e 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
                "@@ -1024,3 +1024,3 @@ public abstract class SerializerProvider",
                "      * Either way, serialize will be properly resolved",
                "-     * (via {@link com.fasterxml.jackson.databind.ser.ResolvableSerializer}) and/or contextualized",
                "+     * (via {@link com.fasterxml.jackson.databind.JsonSerializer#resolve}) and/or contextualized",
                "      * (via {@link com.fasterxml.jackson.databind.ser.ContextualSerializer}) as necessary.",
                "@@ -1457,5 +1457,3 @@ public abstract class SerializerProvider",
                "     {",
                "-        if (ser instanceof ResolvableSerializer) {",
                "-            ((ResolvableSerializer) ser).resolve(this);",
                "-        }",
                "+        ser.resolve(this);",
                "         return (JsonSerializer<Object>) handleSecondaryContextualization(ser, property);",
                "@@ -1467,5 +1465,3 @@ public abstract class SerializerProvider",
                "     {",
                "-        if (ser instanceof ResolvableSerializer) {",
                "-            ((ResolvableSerializer) ser).resolve(this);",
                "-        }",
                "+        ser.resolve(this);",
                "         return (JsonSerializer<Object>) ser;",
                "@@ -1484,6 +1480,5 @@ public abstract class SerializerProvider",
                "         }",
                "-        /* At this point, all timezone configuration should have occurred, with respect",
                "-         * to default dateformat configuration. But we still better clone",
                "-         * an instance as formatters are stateful, not thread-safe.",
                "-         */",
                "+        // At this point, all timezone configuration should have occurred, with respect",
                "+        // to default dateformat configuration. But we still better clone",
                "+        // an instance as formatters are stateful, not thread-safe.",
                "         DateFormat df = _config.getDateFormat();",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
                "index 004025630..ef30e1cb1 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
                "@@ -777,7 +777,7 @@ public class BeanSerializerFactory",
                "         // here will NOT be resolved or contextualized, unless done here, so:",
                "-        if (annotatedSerializer instanceof ResolvableSerializer) {",
                "-            ((ResolvableSerializer) annotatedSerializer).resolve(prov);",
                "+        if (annotatedSerializer != null) {",
                "+            annotatedSerializer.resolve(prov);",
                "+            // 05-Sep-2013, tatu: should be primary property serializer so:",
                "+            annotatedSerializer = prov.handlePrimaryContextualization(annotatedSerializer, property);",
                "         }",
                "-        // 05-Sep-2013, tatu: should be primary property serializer so:",
                "-        annotatedSerializer = prov.handlePrimaryContextualization(annotatedSerializer, property);",
                "         // And how about polymorphic typing? First special to cover JAXB per-field settings:",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/ContextualSerializer.java b/src/main/java/com/fasterxml/jackson/databind/ser/ContextualSerializer.java",
                "index b8be372fd..2ace93b9e 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/ContextualSerializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/ContextualSerializer.java",
                "@@ -12,4 +12,3 @@ import com.fasterxml.jackson.databind.*;",
                "  * Note that in cases where serializer needs both contextualization and",
                "- * resolution -- that is, implements both this interface and {@link ResolvableSerializer}",
                "- * -- resolution via {@link ResolvableSerializer} occurs first, and contextual",
                "+ * resolution, resolution occurs first, and contextual",
                "  * resolution (via this interface) later on.",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/ResolvableSerializer.java b/src/main/java/com/fasterxml/jackson/databind/ser/ResolvableSerializer.java",
                "index c86d0c1a2..407ceeb68 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/ResolvableSerializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/ResolvableSerializer.java",
                "@@ -10,8 +10,6 @@ import com.fasterxml.jackson.databind.*;",
                "  * to eagerly find serializers for contained field types.",
                "- *<p>",
                "- * Note that in cases where serializer needs both contextualization and",
                "- * resolution -- that is, implements both this interface and {@link ContextualSerializer}",
                "- * -- resolution via this interface occurs first, and contextual",
                "- * resolution (using {@link ContextualSerializer}) later on.",
                "+ *",
                "+ * @deprecated Since 3.0: method demoted to <code>JsonSerializer</code>",
                "  */",
                "+@Deprecated",
                " public interface ResolvableSerializer",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/SerializerCache.java b/src/main/java/com/fasterxml/jackson/databind/ser/SerializerCache.java",
                "index cfec20827..198592a13 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/SerializerCache.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/SerializerCache.java",
                "@@ -162,5 +162,3 @@ public final class SerializerCache",
                "              */",
                "-            if (ser instanceof ResolvableSerializer) {",
                "-                ((ResolvableSerializer) ser).resolve(provider);",
                "-            }",
                "+            ser.resolve(provider);",
                "         }",
                "@@ -181,5 +179,3 @@ public final class SerializerCache",
                "              */",
                "-            if (ser instanceof ResolvableSerializer) {",
                "-                ((ResolvableSerializer) ser).resolve(provider);",
                "-            }",
                "+            ser.resolve(provider);",
                "         }",
                "@@ -204,5 +200,3 @@ public final class SerializerCache",
                "             }",
                "-            if (ser instanceof ResolvableSerializer) {",
                "-                ((ResolvableSerializer) ser).resolve(provider);",
                "-            }",
                "+            ser.resolve(provider);",
                "         }",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
                "index bd9f236d8..3d6ac38b6 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
                "@@ -34,3 +34,3 @@ public abstract class BeanSerializerBase",
                "     extends StdSerializer<Object>",
                "-    implements ContextualSerializer, ResolvableSerializer,",
                "+    implements ContextualSerializer,",
                "         JsonFormatVisitable",
                "@@ -267,4 +267,4 @@ public abstract class BeanSerializerBase",
                "     /**",
                "-     * We need to implement {@link ResolvableSerializer} to be able to",
                "-     * properly handle cyclic type references.",
                "+     * We need to resolve dependant serializers here",
                "+     * to be able to properly handle cyclic type references.",
                "      */",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java",
                "index b5b2fa7db..53b76ec39 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java",
                "@@ -11,3 +11,2 @@ import com.fasterxml.jackson.databind.jsontype.TypeSerializer;",
                " import com.fasterxml.jackson.databind.ser.ContextualSerializer;",
                "-import com.fasterxml.jackson.databind.ser.ResolvableSerializer;",
                " import com.fasterxml.jackson.databind.util.ClassUtil;",
                "@@ -22,4 +21,2 @@ import com.fasterxml.jackson.databind.util.Converter;",
                "  * to do this will result in an exception.",
                "- *",
                "- * @since 2.1",
                "  */",
                "@@ -28,3 +25,3 @@ public class StdDelegatingSerializer",
                "     extends StdSerializer<Object>",
                "-    implements ContextualSerializer, ResolvableSerializer,",
                "+    implements ContextualSerializer,",
                "         JsonFormatVisitable",
                "@@ -97,5 +94,4 @@ public class StdDelegatingSerializer",
                "     {",
                "-        if ((_delegateSerializer != null)",
                "-                && (_delegateSerializer instanceof ResolvableSerializer)) {",
                "-            ((ResolvableSerializer) _delegateSerializer).resolve(provider);",
                "+        if (_delegateSerializer != null) {",
                "+            _delegateSerializer.resolve(provider);",
                "         }"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/JsonSerializer.java",
                "src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
                "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
                "src/main/java/com/fasterxml/jackson/databind/ser/ContextualSerializer.java",
                "src/main/java/com/fasterxml/jackson/databind/ser/ResolvableSerializer.java",
                "src/main/java/com/fasterxml/jackson/databind/ser/SerializerCache.java",
                "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
                "src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1888": "Merge ContextualSerializer into JsonSerializer, ContextualDeserializer into JsonDeserializer #1889 Embed ResolvableSerializer into JsonSerializer (and same for deserializer) FasterXML/jackson3-dev#23 [delete] #1915"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/JsonSerializer.java, src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java, src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java, src/main/java/com/fasterxml/jackson/databind/ser/ContextualSerializer.java, src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java, src/main/java/com/fasterxml/jackson/databind/ser/SerializerCache.java, src/main/java/com/fasterxml/jackson/databind/ser/ResolvableSerializer.java, src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: fasterxml",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1888",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "be45354cffcfcef7badf67c090b1790bbd2cceb1",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1517268771,
            "hunks": 3,
            "message": "Fix #1916",
            "diff": [
                "diff --git a/release-notes/VERSION b/release-notes/VERSION",
                "index 917ee5790..4bcb85761 100644",
                "--- a/release-notes/VERSION",
                "+++ b/release-notes/VERSION",
                "@@ -26,2 +26,3 @@ Versions: 3.x (for earlier see VERSION-2.x)",
                "  into `JsonDeserializer`",
                "+#1916: Change `MapperFeature.USE_GETTERS_AS_SETTERS)` default to `false`",
                " - Remove `MappingJsonFactory`",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/MapperFeature.java b/src/main/java/com/fasterxml/jackson/databind/MapperFeature.java",
                "index c997c94da..533f44788 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/MapperFeature.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/MapperFeature.java",
                "@@ -48,5 +48,5 @@ public enum MapperFeature implements ConfigFeature",
                "      *<p>",
                "-     * Feature is enabled by default.",
                "+     * Feature is disabled by default since 3.0 (with 2.x was enabled)",
                "      */",
                "-    USE_GETTERS_AS_SETTERS(true),",
                "+    USE_GETTERS_AS_SETTERS(false),"
            ],
            "changed_files": [
                "release-notes/VERSION",
                "src/main/java/com/fasterxml/jackson/databind/MapperFeature.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1916": "Change MapperFeature.USE_GETTERS_AS_SETTERS) default to false FasterXML/jackson3-dev#25"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/MapperFeature.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: fasterxml",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1916",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5939b1acd7c6aba736b2511a655ba8529a307adc",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1516235863,
            "hunks": 9,
            "message": "Fix #1853",
            "diff": [
                "diff --git a/release-notes/CREDITS b/release-notes/CREDITS",
                "index 2ebbba052..324c8d333 100644",
                "--- a/release-notes/CREDITS",
                "+++ b/release-notes/CREDITS",
                "@@ -735 +735,6 @@ Pier-Luc Whissell (pwhissell@github):",
                "    (2.9.4)",
                "+",
                "+Alexander Skvortcov (askvortcov@github)",
                "+  * Reported #1853: Deserialise from Object (using Creator methods) returns field name",
                "+    instead of value",
                "+   (2.9.4)",
                "diff --git a/release-notes/VERSION-2.x b/release-notes/VERSION-2.x",
                "index b588e2125..7c8e1d058 100644",
                "--- a/release-notes/VERSION-2.x",
                "+++ b/release-notes/VERSION-2.x",
                "@@ -12,2 +12,4 @@ Project: jackson-databind",
                "  (reported by Kevin G)",
                "+#1853: Deserialise from Object (using Creator methods) returns field name instead of value",
                "+ (reported by Alexander S)",
                " #1854: NPE deserializing collection with `@JsonCreator` and `ACCEPT_CASE_INSENSITIVE_PROPERTIES`",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
                "index 5c0f55ae2..affe06b2b 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
                "@@ -637,2 +637,14 @@ nonAnnotatedParamIndex, ctor);",
                "         }",
                "+        // 17-Jan-2018, tatu: as per [databind#1853] need to ensure we will distinguish",
                "+        //   \"well-known\" single-arg variants (String, int/long, boolean) from \"generic\" delegating...",
                "+        if (argCount == 1) {",
                "+            _handleSingleArgumentCreator(creators, candidate.creator(), true, true);",
                "+            // one more thing: sever link to creator property, to avoid possible later",
                "+            // problems with \"unresolved\" constructor property",
                "+            BeanPropertyDefinition paramDef = candidate.propertyDef(0);",
                "+            if (paramDef != null) {",
                "+                ((POJOPropertyBuilder) paramDef).removeConstructors();",
                "+            }",
                "+            return;",
                "+        }",
                "         creators.addDelegatingCreator(candidate.creator(), true, properties, ix);",
                "@@ -693,3 +705,3 @@ nonAnnotatedParamIndex, ctor);",
                "             // Ok: for delegates, we want one and exactly one parameter without",
                "-            // injection AND  without name",
                "+            // injection AND without name",
                "             int oneNotInjected = candidate.findOnlyParamWithoutInjection();",
                "@@ -947,3 +959,3 @@ nonAnnotatedParamIndex, ctor);",
                "                 } else if ((explicitNameCount == 0) && ((injectCount + 1) == argCount)) {",
                "-                    // [712] secondary: all but one injectable, one un-annotated (un-named)",
                "+                    // secondary: all but one injectable, one un-annotated (un-named)",
                "                     creators.addDelegatingCreator(factory, false, properties, 0);",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java b/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
                "index c51370626..905a50fb4 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
                "@@ -134,4 +134,3 @@ public class CreatorCollector {",
                "-    public void addStringCreator(AnnotatedWithParams creator,",
                "-            boolean explicit) {",
                "+    public void addStringCreator(AnnotatedWithParams creator, boolean explicit) {",
                "         verifyNonDup(creator, C_STRING, explicit);",
                "@@ -147,4 +146,3 @@ public class CreatorCollector {",
                "-    public void addDoubleCreator(AnnotatedWithParams creator,",
                "-            boolean explicit) {",
                "+    public void addDoubleCreator(AnnotatedWithParams creator, boolean explicit) {",
                "         verifyNonDup(creator, C_DOUBLE, explicit);",
                "@@ -152,4 +150,3 @@ public class CreatorCollector {",
                "-    public void addBooleanCreator(AnnotatedWithParams creator,",
                "-            boolean explicit) {",
                "+    public void addBooleanCreator(AnnotatedWithParams creator, boolean explicit) {",
                "         verifyNonDup(creator, C_BOOLEAN, explicit);",
                "@@ -173,3 +170,4 @@ public class CreatorCollector {",
                "     public void addPropertyCreator(AnnotatedWithParams creator,",
                "-            boolean explicit, SettableBeanProperty[] properties) {",
                "+            boolean explicit, SettableBeanProperty[] properties)",
                "+    {",
                "         if (verifyNonDup(creator, C_PROPS, explicit)) {"
            ],
            "changed_files": [
                "release-notes/CREDITS",
                "release-notes/VERSION-2.x",
                "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1853": "ParameterNamesModule + JsonCreator + inheritance cause deserialization errors FasterXML/jackson-modules-java8#49 Error in deserialization of JSON mock-server/mockserver#451"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "jackson-databind-2.10.0",
                "jackson-databind-2.10.0.pr1",
                "jackson-databind-2.10.0.pr2",
                "jackson-databind-2.10.0.pr3",
                "jackson-databind-2.10.1",
                "jackson-databind-2.10.2",
                "jackson-databind-2.10.3",
                "jackson-databind-2.10.4",
                "jackson-databind-2.10.5",
                "jackson-databind-2.10.5.1",
                "jackson-databind-2.11.0",
                "jackson-databind-2.11.0.rc1",
                "jackson-databind-2.11.1",
                "jackson-databind-2.11.2",
                "jackson-databind-2.11.3",
                "jackson-databind-2.11.4",
                "jackson-databind-2.12.0",
                "jackson-databind-2.12.0-rc1",
                "jackson-databind-2.12.0-rc2",
                "jackson-databind-2.12.1",
                "jackson-databind-2.12.2",
                "jackson-databind-2.12.3",
                "jackson-databind-2.12.4",
                "jackson-databind-2.12.5",
                "jackson-databind-2.12.6",
                "jackson-databind-2.12.6.1",
                "jackson-databind-2.12.7",
                "jackson-databind-2.12.7.1",
                "jackson-databind-2.12.7.2",
                "jackson-databind-2.13.0",
                "jackson-databind-2.13.0-rc1",
                "jackson-databind-2.13.0-rc2",
                "jackson-databind-2.13.1",
                "jackson-databind-2.13.2",
                "jackson-databind-2.13.2.1",
                "jackson-databind-2.13.2.2",
                "jackson-databind-2.13.3",
                "jackson-databind-2.13.4",
                "jackson-databind-2.13.4.1",
                "jackson-databind-2.13.4.2",
                "jackson-databind-2.13.5",
                "jackson-databind-2.14.0",
                "jackson-databind-2.14.0-rc1",
                "jackson-databind-2.14.0-rc2",
                "jackson-databind-2.14.0-rc3",
                "jackson-databind-2.14.1",
                "jackson-databind-2.14.2",
                "jackson-databind-2.14.3",
                "jackson-databind-2.15.0",
                "jackson-databind-2.15.0-rc1",
                "jackson-databind-2.15.0-rc2",
                "jackson-databind-2.15.0-rc3",
                "jackson-databind-2.15.1",
                "jackson-databind-2.15.2",
                "jackson-databind-2.15.3",
                "jackson-databind-2.15.4",
                "jackson-databind-2.16.0",
                "jackson-databind-2.16.0-rc1",
                "jackson-databind-2.16.1",
                "jackson-databind-2.16.2",
                "jackson-databind-2.17.0",
                "jackson-databind-2.17.0-rc1",
                "jackson-databind-2.17.1",
                "jackson-databind-2.17.2",
                "jackson-databind-2.9.10",
                "jackson-databind-2.9.10.1",
                "jackson-databind-2.9.10.2",
                "jackson-databind-2.9.10.3",
                "jackson-databind-2.9.10.4",
                "jackson-databind-2.9.10.5",
                "jackson-databind-2.9.10.6",
                "jackson-databind-2.9.10.7",
                "jackson-databind-2.9.10.8",
                "jackson-databind-2.9.4",
                "jackson-databind-2.9.5",
                "jackson-databind-2.9.6",
                "jackson-databind-2.9.7",
                "jackson-databind-2.9.8",
                "jackson-databind-2.9.9",
                "jackson-databind-2.9.9.1",
                "jackson-databind-2.9.9.2",
                "jackson-databind-2.9.9.3"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java, src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: fasterxml",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1853",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "234ea3808dc56d522f2c42f2e47f447fed87b77c",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1517362022,
            "hunks": 73,
            "message": "More refactoring",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java b/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java",
                "index d8946937f..fdcc865d2 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java",
                "@@ -87,3 +87,3 @@ public final class DeserializationConfig",
                "      */",
                "-    public DeserializationConfig(BaseSettings base,",
                "+    public DeserializationConfig(BaseSettings base, ClassIntrospector classIntrospector,",
                "             SubtypeResolver str, SimpleMixInResolver mixins, RootNameLookup rootNames,",
                "@@ -91,3 +91,3 @@ public final class DeserializationConfig",
                "     {",
                "-        super(base, str, mixins, rootNames, configOverrides);",
                "+        super(base, classIntrospector, str, mixins, rootNames, configOverrides);",
                "         _deserFeatures = collectFeatureDefaults(DeserializationFeature.class);",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java b/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "index c60511826..68cd071a1 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "@@ -3,3 +3,6 @@ package com.fasterxml.jackson.databind;",
                " import com.fasterxml.jackson.core.*;",
                "+import com.fasterxml.jackson.databind.cfg.BaseSettings;",
                " import com.fasterxml.jackson.databind.deser.*;",
                "+import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;",
                "+import com.fasterxml.jackson.databind.introspect.ClassIntrospector;",
                " import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;",
                "@@ -21,3 +24,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     /**********************************************************",
                "-    /* Simple feature bitmasks",
                "+    /* Basic settings",
                "     /**********************************************************",
                "@@ -25,6 +28,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "-    /**",
                "-     * Set of {@link MapperFeature}s enabled, as bitmask.",
                "-     */",
                "-    protected int _mapperFeatures;",
                "+    protected BaseSettings _baseSettings;",
                "@@ -41,4 +41,10 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "-    protected TypeFactory _typeFactory;",
                "-",
                "+    ",
                "+    /**",
                "+     * Introspector used to figure out Bean properties needed for bean serialization",
                "+     * and deserialization. Overridable so that it is possible to change low-level",
                "+     * details of introspection, like adding new annotation types.",
                "+     */",
                "+    protected ClassIntrospector _classIntrospector;",
                "+    ",
                "     protected SubtypeResolver _subtypeResolver;",
                "@@ -85,5 +91,6 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     {",
                "+        _baseSettings = BaseSettings.std();",
                "         _streamFactory = streamFactory;",
                "-        _typeFactory = TypeFactory.defaultInstance();",
                "+        _classIntrospector = null;",
                "         _subtypeResolver = null;",
                "@@ -101,5 +108,6 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     {",
                "+        _baseSettings = base._baseSettings;",
                "         _streamFactory = base._streamFactory;",
                "-        _typeFactory = base._typeFactory;",
                "+        _classIntrospector = base._classIntrospector;",
                "         _subtypeResolver = base._subtypeResolver;",
                "@@ -120,3 +128,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     /**********************************************************",
                "-    /* Accessors for framework factories",
                "+    /* Accessors",
                "     /**********************************************************",
                "@@ -124,2 +132,6 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    public BaseSettings baseSettings() {",
                "+        return _baseSettings;",
                "+    }",
                "+",
                "     public TokenStreamFactory streamFactory() {",
                "@@ -128,4 +140,11 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "-    public TypeFactory typeFactory() {",
                "-        return _typeFactory;",
                "+    public ClassIntrospector classIntrospector() {",
                "+        return (_classIntrospector != null) ? _classIntrospector : defaultClassIntrospector();",
                "+    }",
                "+",
                "+    /**",
                "+     * Overridable method for changing default {@link SubtypeResolver} instance to use",
                "+     */",
                "+    protected ClassIntrospector defaultClassIntrospector() {",
                "+        return new BasicClassIntrospector();",
                "     }",
                "@@ -186,3 +205,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     /**********************************************************",
                "-    /* Changing factories",
                "+    /* Changing factories, general",
                "     /**********************************************************",
                "@@ -191,3 +210,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     public B typeFactory(TypeFactory f) {",
                "-        _typeFactory = f;",
                "+        _baseSettings = _baseSettings.with(f);",
                "         return _this();",
                "@@ -200,2 +219,13 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    public B classIntrospector(ClassIntrospector ci) {",
                "+        _classIntrospector = ci;",
                "+        return _this();",
                "+    }",
                "+",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Changing factories, serialization",
                "+    /**********************************************************",
                "+     */",
                "+    ",
                "     public B serializerFactory(SerializerFactory f) {",
                "@@ -210,2 +240,8 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Changing factories, deserialization",
                "+    /**********************************************************",
                "+     */",
                "+",
                "     public B deserializerFactory(DeserializerFactory f) {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "index 6a3f68eb4..1635b24f1 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "@@ -32,3 +32,2 @@ import com.fasterxml.jackson.databind.util.ClassUtil;",
                " import com.fasterxml.jackson.databind.util.RootNameLookup;",
                "-import com.fasterxml.jackson.databind.util.StdDateFormat;",
                " import com.fasterxml.jackson.databind.util.TokenBuffer;",
                "@@ -208,20 +207,2 @@ public class ObjectMapper",
                "-    // 16-May-2009, tatu: Ditto ^^^",
                "-    protected final static AnnotationIntrospector DEFAULT_ANNOTATION_INTROSPECTOR = new JacksonAnnotationIntrospector();",
                "-",
                "-    /**",
                "-     * Base settings contain defaults used for all {@link ObjectMapper}",
                "-     * instances.",
                "-     */",
                "-    protected final static BaseSettings DEFAULT_BASE = new BaseSettings(",
                "-            null, // cannot share global ClassIntrospector any more (2.5+)",
                "-            DEFAULT_ANNOTATION_INTROSPECTOR,",
                "-             null, TypeFactory.defaultInstance(),",
                "-            null, StdDateFormat.instance, null,",
                "-            Locale.getDefault(),",
                "-            null, // to indicate \"use Jackson default TimeZone\" (UTC since Jackson 2.7)",
                "-            Base64Variants.getDefaultVariant(),",
                "-            JsonNodeFactory.instance",
                "-    );",
                "-",
                "     /*",
                "@@ -460,7 +441,8 @@ public class ObjectMapper",
                "         _mixIns = mixins;",
                "-        BaseSettings base = DEFAULT_BASE.with(defaultClassIntrospector());",
                "+        BaseSettings base = BaseSettings.std();",
                "         _configOverrides = new ConfigOverrides();",
                "-        _serializationConfig = new SerializationConfig(base,",
                "+        ClassIntrospector ci = defaultClassIntrospector();",
                "+        _serializationConfig = new SerializationConfig(base, ci,",
                "                     _subtypeResolver, mixins, rootNames, _configOverrides);",
                "-        _deserializationConfig = new DeserializationConfig(base,",
                "+        _deserializationConfig = new DeserializationConfig(base, ci,",
                "                     _subtypeResolver, mixins, rootNames, _configOverrides);",
                "@@ -484,4 +466,4 @@ public class ObjectMapper",
                "         _jsonFactory = builder.streamFactory();",
                "-        _typeFactory = builder.typeFactory();",
                "-",
                "+        BaseSettings base = builder.baseSettings();",
                "+        _typeFactory = base.getTypeFactory();",
                "         // Ser/deser framework factories",
                "@@ -496,10 +478,9 @@ public class ObjectMapper",
                "         _mixIns = mixins;",
                "-        BaseSettings base = DEFAULT_BASE.with(_typeFactory)",
                "-                .with(defaultClassIntrospector());",
                "         _configOverrides = new ConfigOverrides();",
                "         // 30-Jan-2018, tatu: Note that we need to weave in TypeFactory",
                "-        _serializationConfig = new SerializationConfig(base,",
                "+        ClassIntrospector ci = builder.classIntrospector();",
                "+        _serializationConfig = new SerializationConfig(base, ci,",
                "                 _subtypeResolver, mixins, rootNames, _configOverrides)",
                "                 .with(_typeFactory);",
                "-        _deserializationConfig = new DeserializationConfig(base,",
                "+        _deserializationConfig = new DeserializationConfig(base, ci,",
                "                 _subtypeResolver, mixins, rootNames, _configOverrides)",
                "@@ -747,4 +728,7 @@ public class ObjectMapper",
                "             public void setClassIntrospector(ClassIntrospector ci) {",
                "+                // !!! TODO",
                "+                /*",
                "                 _deserializationConfig = _deserializationConfig.with(ci);",
                "                 _serializationConfig = _serializationConfig.with(ci);",
                "+                */",
                "             }",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java b/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java",
                "index 52fa9ae16..9b5eb5cbb 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java",
                "@@ -9,2 +9,3 @@ import com.fasterxml.jackson.core.util.Instantiatable;",
                " import com.fasterxml.jackson.databind.cfg.*;",
                "+import com.fasterxml.jackson.databind.introspect.ClassIntrospector;",
                " import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;",
                "@@ -97,6 +98,7 @@ public final class SerializationConfig",
                "      */",
                "-    public SerializationConfig(BaseSettings base, SubtypeResolver str,",
                "+    public SerializationConfig(BaseSettings base, ClassIntrospector classIntrospector,",
                "+            SubtypeResolver str,",
                "             SimpleMixInResolver mixins, RootNameLookup rootNames, ConfigOverrides configOverrides)",
                "     {",
                "-        super(base, str, mixins, rootNames, configOverrides);",
                "+        super(base, classIntrospector, str, mixins, rootNames, configOverrides);",
                "         _serFeatures = collectFeatureDefaults(SerializationFeature.class);",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/cfg/BaseSettings.java b/src/main/java/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
                "index 534dd1192..8c9156719 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
                "@@ -7,5 +7,7 @@ import java.util.TimeZone;",
                " import com.fasterxml.jackson.core.Base64Variant;",
                "+import com.fasterxml.jackson.core.Base64Variants;",
                "+",
                " import com.fasterxml.jackson.databind.*;",
                " import com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair;",
                "-import com.fasterxml.jackson.databind.introspect.ClassIntrospector;",
                "+import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;",
                " import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;",
                "@@ -28,4 +30,20 @@ public final class BaseSettings",
                "      */",
                "-    private static final TimeZone DEFAULT_TIMEZONE = ",
                "-            TimeZone.getTimeZone(\"UTC\");",
                "+    private static final TimeZone DEFAULT_TIMEZONE = TimeZone.getTimeZone(\"UTC\");",
                "+",
                "+    // 16-May-2009, tatu: Ditto ^^^",
                "+    protected final static AnnotationIntrospector DEFAULT_ANNOTATION_INTROSPECTOR = new JacksonAnnotationIntrospector();",
                "+",
                "+    /**",
                "+     * Base settings contain defaults used for all {@link ObjectMapper}",
                "+     * instances.",
                "+     */",
                "+    protected final static BaseSettings DEFAULT_BASE = new BaseSettings(",
                "+            DEFAULT_ANNOTATION_INTROSPECTOR,",
                "+             null, TypeFactory.defaultInstance(),",
                "+            null, StdDateFormat.instance, null,",
                "+            Locale.getDefault(),",
                "+            null, // to indicate \"use Jackson default TimeZone\" (UTC since Jackson 2.7)",
                "+            Base64Variants.getDefaultVariant(),",
                "+            JsonNodeFactory.instance",
                "+    );",
                "@@ -36,9 +54,2 @@ public final class BaseSettings",
                "      */",
                "-    ",
                "-    /**",
                "-     * Introspector used to figure out Bean properties needed for bean serialization",
                "-     * and deserialization. Overridable so that it is possible to change low-level",
                "-     * details of introspection, like adding new annotation types.",
                "-     */",
                "-    protected final ClassIntrospector _classIntrospector;",
                "@@ -131,3 +142,3 @@ public final class BaseSettings",
                "-    public BaseSettings(ClassIntrospector ci, AnnotationIntrospector ai,",
                "+    public BaseSettings(AnnotationIntrospector ai,",
                "             PropertyNamingStrategy pns, TypeFactory tf,",
                "@@ -137,3 +148,2 @@ public final class BaseSettings",
                "     {",
                "-        _classIntrospector = ci;",
                "         _annotationIntrospector = ai;",
                "@@ -150,2 +160,9 @@ public final class BaseSettings",
                "+    /**",
                "+     * @since 3.0",
                "+     */",
                "+    public static BaseSettings std() {",
                "+        return DEFAULT_BASE;",
                "+    }",
                "+",
                "     /*",
                "@@ -155,12 +172,3 @@ public final class BaseSettings",
                "      */",
                "-    ",
                "-    public BaseSettings with(ClassIntrospector ci) {",
                "-        if (_classIntrospector == ci) {",
                "-            return this;",
                "-        }",
                "-        return new BaseSettings(ci, _annotationIntrospector, _propertyNamingStrategy, _typeFactory,",
                "-                _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale,",
                "-                _timeZone, _defaultBase64, _nodeFactory);",
                "-    }",
                "-    ",
                "+",
                "     public BaseSettings withAnnotationIntrospector(AnnotationIntrospector ai) {",
                "@@ -169,3 +177,3 @@ public final class BaseSettings",
                "         }",
                "-        return new BaseSettings(_classIntrospector, ai, _propertyNamingStrategy, _typeFactory,",
                "+        return new BaseSettings(ai, _propertyNamingStrategy, _typeFactory,",
                "                 _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale,",
                "@@ -186,3 +194,3 @@ public final class BaseSettings",
                "         }",
                "-        return new BaseSettings(_classIntrospector, _annotationIntrospector, pns, _typeFactory,",
                "+        return new BaseSettings(_annotationIntrospector, pns, _typeFactory,",
                "                 _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale,",
                "@@ -195,3 +203,3 @@ public final class BaseSettings",
                "         }",
                "-        return new BaseSettings(_classIntrospector, _annotationIntrospector, _propertyNamingStrategy, tf,",
                "+        return new BaseSettings(_annotationIntrospector, _propertyNamingStrategy, tf,",
                "                 _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale,",
                "@@ -204,3 +212,3 @@ public final class BaseSettings",
                "         }",
                "-        return new BaseSettings(_classIntrospector, _annotationIntrospector, _propertyNamingStrategy, _typeFactory,",
                "+        return new BaseSettings(_annotationIntrospector, _propertyNamingStrategy, _typeFactory,",
                "                 typer, _dateFormat, _handlerInstantiator, _locale,",
                "@@ -218,3 +226,3 @@ public final class BaseSettings",
                "         }",
                "-        return new BaseSettings(_classIntrospector, _annotationIntrospector, _propertyNamingStrategy, _typeFactory,",
                "+        return new BaseSettings(_annotationIntrospector, _propertyNamingStrategy, _typeFactory,",
                "                 _typeResolverBuilder, df, _handlerInstantiator, _locale,",
                "@@ -227,3 +235,3 @@ public final class BaseSettings",
                "         }",
                "-        return new BaseSettings(_classIntrospector, _annotationIntrospector, _propertyNamingStrategy, _typeFactory,",
                "+        return new BaseSettings(_annotationIntrospector, _propertyNamingStrategy, _typeFactory,",
                "                 _typeResolverBuilder, _dateFormat, hi, _locale,",
                "@@ -236,3 +244,3 @@ public final class BaseSettings",
                "         }",
                "-        return new BaseSettings(_classIntrospector, _annotationIntrospector, _propertyNamingStrategy, _typeFactory,",
                "+        return new BaseSettings(_annotationIntrospector, _propertyNamingStrategy, _typeFactory,",
                "                 _typeResolverBuilder, _dateFormat, _handlerInstantiator, l,",
                "@@ -256,3 +264,3 @@ public final class BaseSettings",
                "         DateFormat df = _force(_dateFormat, tz);",
                "-        return new BaseSettings(_classIntrospector, _annotationIntrospector,",
                "+        return new BaseSettings(_annotationIntrospector,",
                "                 _propertyNamingStrategy, _typeFactory,",
                "@@ -266,3 +274,3 @@ public final class BaseSettings",
                "         }",
                "-        return new BaseSettings(_classIntrospector, _annotationIntrospector,",
                "+        return new BaseSettings(_annotationIntrospector,",
                "                 _propertyNamingStrategy, _typeFactory,",
                "@@ -276,3 +284,3 @@ public final class BaseSettings",
                "         }",
                "-        return new BaseSettings(_classIntrospector, _annotationIntrospector,",
                "+        return new BaseSettings(_annotationIntrospector,",
                "                 _propertyNamingStrategy, _typeFactory,",
                "@@ -288,6 +296,2 @@ public final class BaseSettings",
                "-    public ClassIntrospector getClassIntrospector() {",
                "-        return _classIntrospector;",
                "-    }",
                "-    ",
                "     public AnnotationIntrospector getAnnotationIntrospector() {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfig.java b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfig.java",
                "index 149b4ee39..f331d859c 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfig.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfig.java",
                "@@ -211,6 +211,4 @@ public abstract class MapperConfig<T extends MapperConfig<T>>",
                "      */",
                "-    ",
                "-    public ClassIntrospector getClassIntrospector() {",
                "-        return _base.getClassIntrospector();",
                "-    }",
                "+",
                "+    public abstract ClassIntrospector getClassIntrospector();",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
                "index 32b45325d..0c66ddf85 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
                "@@ -36,2 +36,4 @@ public abstract class MapperConfigBase<CFG extends ConfigFeature,",
                "+    protected final ClassIntrospector _classIntrospector;",
                "+",
                "     /**",
                "@@ -96,3 +98,3 @@ public abstract class MapperConfigBase<CFG extends ConfigFeature,",
                "      */",
                "-    protected MapperConfigBase(BaseSettings base,",
                "+    protected MapperConfigBase(BaseSettings base, ClassIntrospector classIntrospector,",
                "             SubtypeResolver str, SimpleMixInResolver mixins, RootNameLookup rootNames,",
                "@@ -101,2 +103,3 @@ public abstract class MapperConfigBase<CFG extends ConfigFeature,",
                "         super(base, DEFAULT_MAPPER_FEATURES);",
                "+        _classIntrospector = classIntrospector;",
                "         _mixIns = mixins;",
                "@@ -116,2 +119,3 @@ public abstract class MapperConfigBase<CFG extends ConfigFeature,",
                "         super(src);",
                "+        _classIntrospector = src._classIntrospector;",
                "         _mixIns = mixins;",
                "@@ -132,2 +136,3 @@ public abstract class MapperConfigBase<CFG extends ConfigFeature,",
                "         super(src);",
                "+        _classIntrospector = src._classIntrospector;",
                "         _mixIns = src._mixIns;",
                "@@ -144,2 +149,3 @@ public abstract class MapperConfigBase<CFG extends ConfigFeature,",
                "         super(src, base);",
                "+        _classIntrospector = src._classIntrospector;",
                "         _mixIns = src._mixIns;",
                "@@ -156,2 +162,3 @@ public abstract class MapperConfigBase<CFG extends ConfigFeature,",
                "         super(src, mapperFeatures);",
                "+        _classIntrospector = src._classIntrospector;",
                "         _mixIns = src._mixIns;",
                "@@ -167,2 +174,3 @@ public abstract class MapperConfigBase<CFG extends ConfigFeature,",
                "         super(src);",
                "+        _classIntrospector = src._classIntrospector;",
                "         _mixIns = src._mixIns;",
                "@@ -178,2 +186,3 @@ public abstract class MapperConfigBase<CFG extends ConfigFeature,",
                "         super(src);",
                "+        _classIntrospector = src._classIntrospector;",
                "         _mixIns = src._mixIns;",
                "@@ -190,2 +199,3 @@ public abstract class MapperConfigBase<CFG extends ConfigFeature,",
                "         super(src);",
                "+        _classIntrospector = src._classIntrospector;",
                "         _mixIns = src._mixIns;",
                "@@ -202,2 +212,3 @@ public abstract class MapperConfigBase<CFG extends ConfigFeature,",
                "         super(src);",
                "+        _classIntrospector = src._classIntrospector;",
                "         _mixIns = mixins;",
                "@@ -214,2 +225,3 @@ public abstract class MapperConfigBase<CFG extends ConfigFeature,",
                "         super(src);",
                "+        _classIntrospector = src._classIntrospector;",
                "         _mixIns = src._mixIns;",
                "@@ -323,14 +335,2 @@ public abstract class MapperConfigBase<CFG extends ConfigFeature,",
                "     }",
                "-    ",
                "-    /**",
                "-     * Method for constructing and returning a new instance with different",
                "-     * {@link ClassIntrospector}",
                "-     * to use.",
                "-     *<p>",
                "-     * NOTE: make sure to register new instance with <code>ObjectMapper</code>",
                "-     * if directly calling this method.",
                "-     */",
                "-    public final T with(ClassIntrospector ci) {",
                "-        return _withBase(_base.with(ci));",
                "-    }",
                "@@ -481,4 +481,2 @@ public abstract class MapperConfigBase<CFG extends ConfigFeature,",
                "      *   otherwise defines root name to use.",
                "-     *   ",
                "-     * @since 2.6",
                "      */",
                "@@ -515,2 +513,7 @@ public abstract class MapperConfigBase<CFG extends ConfigFeature,",
                "+    @Override",
                "+    public ClassIntrospector getClassIntrospector() {",
                "+        return _classIntrospector;",
                "+    }",
                "+",
                "     /**",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java b/src/main/java/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
                "index 1ab386340..bb267d7fc 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
                "@@ -26,4 +26,2 @@ public class BasicClassIntrospector",
                "      * simplicity.",
                "-     *",
                "-     * @since 2.4",
                "      */",
                "@@ -59,4 +57,2 @@ public class BasicClassIntrospector",
                "      * should consider caching to avoid some of the lookups.",
                "-     * ",
                "-     * @since 2.5",
                "      */",
                "@@ -250,5 +246,4 @@ public class BasicClassIntrospector",
                "                     || pkgName.startsWith(\"java.util\")) {",
                "-                /* 23-Sep-2014, tatu: Should we be conservative here (minimal number",
                "-                 *    of matches), or ambitious? Let's do latter for now.",
                "-                 */",
                "+                // 23-Sep-2014, tatu: Should we be conservative here (minimal number",
                "+                //    of matches), or ambitious? Let's do latter for now.",
                "                 if (Collection.class.isAssignableFrom(raw)",
                "@@ -271,5 +266,2 @@ public class BasicClassIntrospector",
                "-    /**",
                "-     * @since 2.9",
                "-     */",
                "     protected AnnotatedClass _resolveAnnotatedClass(MapperConfig<?> config,",
                "@@ -279,5 +271,2 @@ public class BasicClassIntrospector",
                "-    /**",
                "-     * @since 2.9",
                "-     */",
                "     protected AnnotatedClass _resolveAnnotatedWithoutSuperTypes(MapperConfig<?> config,",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/introspect/ClassIntrospector.java b/src/main/java/com/fasterxml/jackson/databind/introspect/ClassIntrospector.java",
                "index c91a5bf00..f283a9caa 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/introspect/ClassIntrospector.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/ClassIntrospector.java",
                "@@ -41,4 +41,2 @@ public abstract class ClassIntrospector",
                "          * If resolver is immutable may simply return `this`.",
                "-         * ",
                "-         * @since 2.6",
                "          */"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java",
                "src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java",
                "src/main/java/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
                "src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfig.java",
                "src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
                "src/main/java/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
                "src/main/java/com/fasterxml/jackson/databind/introspect/ClassIntrospector.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java, src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java, src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfig.java, src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java, src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java, src/main/java/com/fasterxml/jackson/databind/cfg/BaseSettings.java, src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java, src/main/java/com/fasterxml/jackson/databind/introspect/ClassIntrospector.java, src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: deserialization, fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "347c8f5315e717c4017b035d08922f1449100516",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1517292560,
            "hunks": 20,
            "message": "Start slow buildup of ObjectMapper builder() functionality",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java b/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "index ffee42d28..9ae1ad1fc 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "@@ -3,2 +3,5 @@ package com.fasterxml.jackson.databind;",
                " import com.fasterxml.jackson.core.*;",
                "+import com.fasterxml.jackson.databind.deser.*;",
                "+import com.fasterxml.jackson.databind.ser.*;",
                "+import com.fasterxml.jackson.databind.type.TypeFactory;",
                "@@ -12,3 +15,3 @@ import com.fasterxml.jackson.core.*;",
                " public abstract class MapperBuilder<M extends ObjectMapper,",
                "-    T extends MapperBuilder<M,T>>",
                "+    B extends MapperBuilder<M,B>>",
                " {",
                "@@ -27,3 +30,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     /**********************************************************",
                "-    /* Various factories",
                "+    /* Factories for framework itself, general",
                "     /**********************************************************",
                "@@ -31,4 +34,35 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    /**",
                "+     * Underlying stream factory",
                "+     */",
                "     protected final TokenStreamFactory _streamFactory;",
                "+    protected TypeFactory _typeFactory;",
                "+",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Factories for framework itself, serialization",
                "+    /**********************************************************",
                "+     */",
                "+    ",
                "+    protected SerializerFactory _serializerFactory;",
                "+",
                "+    /**",
                "+     * Prototype {@link SerializerProvider} to use for creating per-operation providers.",
                "+     */",
                "+    protected DefaultSerializerProvider _serializerProvider;",
                "+",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Factories for framework itself, deserialization",
                "+    /**********************************************************",
                "+     */",
                "+",
                "+    protected DeserializerFactory _deserializerFactory;",
                "+    ",
                "+    /**",
                "+     * Prototype (about same as factory) to use for creating per-operation contexts.",
                "+     */",
                "+    protected DefaultDeserializationContext _deserializationContext;",
                "+",
                "     /*",
                "@@ -45,14 +79,24 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "-    protected MapperBuilder(TokenStreamFactory streamFactory) {",
                "+    protected MapperBuilder(TokenStreamFactory streamFactory)",
                "+    {",
                "         _streamFactory = streamFactory;",
                "-//        _mapperFeatures = MapperFeature;",
                "+        _typeFactory = TypeFactory.defaultInstance();",
                "+",
                "+        _serializerFactory = BeanSerializerFactory.instance;",
                "+        _deserializerFactory = BeanDeserializerFactory.instance;",
                "+",
                "+        //        _mapperFeatures = MapperFeature;",
                "     }",
                "-    /*",
                "-    protected ObjectMapperBuilder(TokenStreamFactory base)",
                "+    protected MapperBuilder(MapperBuilder<?,?> base)",
                "     {",
                "-        this(base._factoryFeatures,",
                "-                base.getParserFeatures(), base.getGeneratorFeatures());",
                "+        _streamFactory = base._streamFactory;",
                "+        _typeFactory = base._typeFactory;",
                "+",
                "+        _serializerFactory = base._serializerFactory;",
                "+        _serializerProvider = base._serializerProvider;",
                "+",
                "+        _deserializerFactory = base._deserializerFactory;",
                "+        _deserializationContext = base._deserializationContext;",
                "     }",
                "-*/",
                "@@ -65,3 +109,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     /**********************************************************",
                "-    /* Accessors",
                "+    /* Accessors for framework factories",
                "     /**********************************************************",
                "@@ -73,2 +117,41 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    public TypeFactory getTypeFactory() {",
                "+        return _typeFactory;",
                "+    }",
                "+",
                "+    public SerializerFactory serializerFactory() {",
                "+        return _serializerFactory;",
                "+    }",
                "+",
                "+    public DefaultSerializerProvider serializerProvider() {",
                "+        return (_serializerProvider != null) ? _serializerProvider",
                "+                : defaultSerializerProvider();",
                "+    }",
                "+",
                "+    /**",
                "+     * Overridable method for changing default {@link SerializerProvider} prototype",
                "+     * to use.",
                "+     */",
                "+    protected DefaultSerializerProvider defaultSerializerProvider() {",
                "+        return new DefaultSerializerProvider.Impl(_streamFactory);",
                "+    }",
                "+",
                "+    public DeserializerFactory deserializerFactory() {",
                "+        return _deserializerFactory;",
                "+    }",
                "+",
                "+    protected DefaultDeserializationContext deserializationContext() {",
                "+        return (_deserializationContext != null) ? _deserializationContext",
                "+                : defaultDeserializationContext();",
                "+    }",
                "+",
                "+    /**",
                "+     * Overridable method for changing default {@link SerializerProvider} prototype",
                "+     * to use.",
                "+     */",
                "+    protected DefaultDeserializationContext defaultDeserializationContext() {",
                "+        return new DefaultDeserializationContext.Impl(deserializerFactory(),",
                "+                _streamFactory);",
                "+    }",
                "+",
                "     /*",
                "@@ -79,2 +162,42 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Changing factories",
                "+    /**********************************************************",
                "+     */",
                "+",
                "+    public B typeFactory(TypeFactory f) {",
                "+        _typeFactory = f;",
                "+        return _this();",
                "+    }",
                "+",
                "+    public B serializerFactory(SerializerFactory f) {",
                "+        _serializerFactory = f;",
                "+        return _this();",
                "+    }",
                "+",
                "+    public B serializerProvider(DefaultSerializerProvider prov) {",
                "+        _serializerProvider = prov;",
                "+        return _this();",
                "+    }",
                "+",
                "+    public B deserializerFactory(DeserializerFactory f) {",
                "+        _deserializerFactory = f;",
                "+        return _this();",
                "+    }",
                "+",
                "+    protected B deserializationContext(DefaultDeserializationContext ctxt) {",
                "+        _deserializationContext = ctxt;",
                "+        return _this();",
                "+    }",
                "+",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Other helper methods",
                "+    /**********************************************************",
                "+     */",
                "+    ",
                "+    // silly convenience cast method we need",
                "+    @SuppressWarnings(\"unchecked\")",
                "+    protected final B _this() { return (B) this; }",
                " }",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "index 73def7684..e9939b9ea 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "@@ -393,3 +393,3 @@ public class ObjectMapper",
                "     public ObjectMapper() {",
                "-        this(null, null, null);",
                "+        this(new JsonFactory(), null, null);",
                "     }",
                "@@ -449,10 +449,5 @@ public class ObjectMapper",
                "      */",
                "-    public ObjectMapper(TokenStreamFactory jf,",
                "+    protected ObjectMapper(TokenStreamFactory jf,",
                "             DefaultSerializerProvider sp, DefaultDeserializationContext dc)",
                "     {",
                "-        // 06-OCt-2017, tatu: Should probably change dependency one of these days...",
                "-        //   but not today.",
                "-        if (jf == null) {",
                "-            jf = new JsonFactory();",
                "-        }",
                "         _jsonFactory = jf;",
                "@@ -487,7 +482,13 @@ public class ObjectMapper",
                "     {",
                "+        // General framework factories",
                "         _jsonFactory = builder.streamFactory();",
                "+        _typeFactory = builder.getTypeFactory();",
                "+",
                "+        // Ser/deser framework factories",
                "+        _serializerProvider = builder.serializerProvider();",
                "+        _deserializationContext = builder.deserializationContext();",
                "+        _serializerFactory = builder.serializerFactory();",
                "+        ",
                "         _subtypeResolver = new StdSubtypeResolver();",
                "         RootNameLookup rootNames = new RootNameLookup();",
                "-        // and default type factory is shared one",
                "-        _typeFactory = TypeFactory.defaultInstance();",
                "@@ -507,13 +508,2 @@ public class ObjectMapper",
                "         }",
                "-",
                "-        /*",
                "-        _serializerProvider = (sp == null) ? new DefaultSerializerProvider.Impl(_jsonFactory) : sp;",
                "-        _deserializationContext = (dc == null) ?",
                "-                new DefaultDeserializationContext.Impl(BeanDeserializerFactory.instance, _jsonFactory) : dc;",
                "-                */",
                "-        _serializerProvider = new DefaultSerializerProvider.Impl(_jsonFactory) ;",
                "-        _deserializationContext = new DefaultDeserializationContext.Impl(BeanDeserializerFactory.instance, _jsonFactory);",
                "-",
                "-        // Default serializer factory is stateless, can just assign",
                "-        _serializerFactory = BeanSerializerFactory.instance;",
                "     }"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java, src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "dbd7157d9e463e7659bf43e066e980b1e23c3ce5",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1517274236,
            "hunks": 3,
            "message": "start work on ObjectMapper.Builder",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java b/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "new file mode 100644",
                "index 000000000..ffee42d28",
                "--- /dev/null",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "@@ -0,0 +1,80 @@",
                "+package com.fasterxml.jackson.databind;",
                "+",
                "+import com.fasterxml.jackson.core.*;",
                "+",
                "+/**",
                "+ * Since {@link ObjectMapper} instances are immutable in  Jackson 3.x for full thread-safety,",
                "+ * we need means to construct configured instances. This is the shared base API for",
                "+ * builders for all types of mappers.",
                "+ *",
                "+ * @since 3.0",
                "+ */",
                "+public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    T extends MapperBuilder<M,T>>",
                "+{",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Simple feature bitmasks",
                "+    /**********************************************************",
                "+     */",
                "+",
                "+    /**",
                "+     * Set of {@link MapperFeature}s enabled, as bitmask.",
                "+     */",
                "+    protected int _mapperFeatures;",
                "+",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Various factories",
                "+    /**********************************************************",
                "+     */",
                "+",
                "+    protected final TokenStreamFactory _streamFactory;",
                "+",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Configuration settings, shared",
                "+    /**********************************************************",
                "+     */",
                "+    ",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Life-cycle",
                "+    /**********************************************************",
                "+     */",
                "+",
                "+    protected MapperBuilder(TokenStreamFactory streamFactory) {",
                "+        _streamFactory = streamFactory;",
                "+//        _mapperFeatures = MapperFeature;",
                "+    }",
                "+",
                "+    /*",
                "+    protected ObjectMapperBuilder(TokenStreamFactory base)",
                "+    {",
                "+        this(base._factoryFeatures,",
                "+                base.getParserFeatures(), base.getGeneratorFeatures());",
                "+    }",
                "+*/",
                "+",
                "+    /**",
                "+     * Method to call to create an initialize actual mapper instance",
                "+     */",
                "+    public abstract M build();",
                "+",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Accessors",
                "+    /**********************************************************",
                "+     */",
                "+",
                "+    public TokenStreamFactory streamFactory() {",
                "+        return _streamFactory;",
                "+    }",
                "+",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Changing simple features",
                "+    /**********************************************************",
                "+     */",
                "+",
                "+}",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "index 59cfc8457..73def7684 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "@@ -177,2 +177,20 @@ public class ObjectMapper",
                "+    /**",
                "+     * Base implementation for \"Vanilla\" {@link ObjectMapper}, used with JSON backend",
                "+     * as well as for some of simpler formats that do not require mapper level overrides.",
                "+     *",
                "+     * @since 3.0",
                "+     */",
                "+    public class Builder extends MapperBuilder<ObjectMapper, Builder>",
                "+    {",
                "+        public Builder(TokenStreamFactory tsf) {",
                "+            super(tsf);",
                "+        }",
                "+",
                "+        @Override",
                "+        public ObjectMapper build() {",
                "+            return new ObjectMapper();",
                "+        }",
                "+    }",
                "+",
                "     /*",
                "@@ -467,2 +485,53 @@ public class ObjectMapper",
                "+    public ObjectMapper(Builder builder)",
                "+    {",
                "+        _jsonFactory = builder.streamFactory();",
                "+        _subtypeResolver = new StdSubtypeResolver();",
                "+        RootNameLookup rootNames = new RootNameLookup();",
                "+        // and default type factory is shared one",
                "+        _typeFactory = TypeFactory.defaultInstance();",
                "+",
                "+        SimpleMixInResolver mixins = new SimpleMixInResolver(null);",
                "+        _mixIns = mixins;",
                "+        BaseSettings base = DEFAULT_BASE.withClassIntrospector(defaultClassIntrospector());",
                "+        _configOverrides = new ConfigOverrides();",
                "+        _serializationConfig = new SerializationConfig(base,",
                "+                    _subtypeResolver, mixins, rootNames, _configOverrides);",
                "+        _deserializationConfig = new DeserializationConfig(base,",
                "+                    _subtypeResolver, mixins, rootNames, _configOverrides);",
                "+",
                "+        // Some overrides we may need",
                "+        final boolean needOrder = _jsonFactory.requiresPropertyOrdering();",
                "+        if (needOrder ^ _serializationConfig.isEnabled(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY)) {",
                "+            configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, needOrder);",
                "+        }",
                "+",
                "+        /*",
                "+        _serializerProvider = (sp == null) ? new DefaultSerializerProvider.Impl(_jsonFactory) : sp;",
                "+        _deserializationContext = (dc == null) ?",
                "+                new DefaultDeserializationContext.Impl(BeanDeserializerFactory.instance, _jsonFactory) : dc;",
                "+                */",
                "+        _serializerProvider = new DefaultSerializerProvider.Impl(_jsonFactory) ;",
                "+        _deserializationContext = new DefaultDeserializationContext.Impl(BeanDeserializerFactory.instance, _jsonFactory);",
                "+",
                "+        // Default serializer factory is stateless, can just assign",
                "+        _serializerFactory = BeanSerializerFactory.instance;",
                "+    }",
                "+",
                "+    /**",
                "+     * Short-cut for:",
                "+     *<pre>",
                "+     *   return builder(new JsonFactory());",
                "+     *</pre>",
                "+     *",
                "+     * @since 3.0",
                "+     */",
                "+    public Builder builder() {",
                "+        return new Builder(new JsonFactory());",
                "+    }",
                "+",
                "+    public Builder builder(TokenStreamFactory streamFactory) {",
                "+        return new Builder(streamFactory);",
                "+    }",
                "+",
                "     /**"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java, src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "ae75527a5e99a0b48919b857e7aeaa3ae172ac69",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1516753526,
            "hunks": 13,
            "message": "Fix minor temporary regression wrt `ThrowableDeserializer`",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
                "index 16bf8d5ab..c105307eb 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
                "@@ -49,3 +49,3 @@ public class BeanDeserializerBuilder",
                "      */",
                "-    ",
                "+",
                "     /**",
                "@@ -55,3 +55,3 @@ public class BeanDeserializerBuilder",
                "         = new LinkedHashMap<String, SettableBeanProperty>();",
                "-    ",
                "+",
                "     /**",
                "@@ -60,3 +60,3 @@ public class BeanDeserializerBuilder",
                "     protected List<ValueInjector> _injectables;",
                "-    ",
                "+",
                "     /**",
                "@@ -71,3 +71,3 @@ public class BeanDeserializerBuilder",
                "     protected HashSet<String> _ignorableProps;",
                "-    ",
                "+",
                "     /**",
                "@@ -82,3 +82,3 @@ public class BeanDeserializerBuilder",
                "     protected ObjectIdReader _objectIdReader;",
                "-    ",
                "+",
                "     /**",
                "@@ -112,3 +112,3 @@ public class BeanDeserializerBuilder",
                "      */",
                "-    ",
                "+",
                "     public BeanDeserializerBuilder(BeanDescription beanDesc,",
                "@@ -139,6 +139,6 @@ public class BeanDeserializerBuilder",
                "         _objectIdReader = src._objectIdReader;",
                "-        ",
                "+",
                "         _anySetter = src._anySetter;",
                "         _ignoreAllUnknown = src._ignoreAllUnknown;",
                "-        ",
                "+",
                "         _buildMethod = src._buildMethod;",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
                "index 276acdbd7..1658f0953 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
                "@@ -373,5 +373,3 @@ public class BeanDeserializerFactory",
                "         // But then let's decorate things a bit",
                "-        /* To resolve [JACKSON-95], need to add \"initCause\" as setter",
                "-         * for exceptions (sub-classes of Throwable).",
                "-         */",
                "+        // Need to add \"initCause\" as setter for exceptions (sub-classes of Throwable).",
                "         AnnotatedMethod am = beanDesc.findMethod(\"initCause\", INIT_CAUSE_PARAMS);",
                "@@ -383,6 +381,4 @@ public class BeanDeserializerFactory",
                "             if (prop != null) {",
                "-                /* 21-Aug-2011, tatus: We may actually have found 'cause' property",
                "-                 *   to set... but let's replace it just in case,",
                "-                 *   otherwise can end up with odd errors.",
                "-                 */",
                "+                // 21-Aug-2011, tatus: We may actually have found 'cause' property",
                "+                //   to set... but let's replace it just in case, otherwise can end up with odd errors.",
                "                 builder.addOrReplaceProperty(prop, true);",
                "@@ -395,6 +391,6 @@ public class BeanDeserializerFactory",
                "         builder.addIgnorable(\"suppressed\");",
                "-        /* As well as \"message\": it will be passed via constructor,",
                "-         * as there's no 'setMessage()' method",
                "-         */",
                "-        builder.addIgnorable(\"message\");",
                "+        // As well as \"message\": it will be passed via constructor,",
                "+        // as there's no 'setMessage()' method",
                "+        // 23-Jan-2018, tatu: ... although there MAY be Creator Property... which is problematic",
                "+//        builder.addIgnorable(\"message\");",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/ThrowableDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/ThrowableDeserializer.java",
                "index 68ee9faf4..d2e8c6782 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/ThrowableDeserializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/ThrowableDeserializer.java",
                "@@ -107,3 +107,4 @@ public class ThrowableDeserializer",
                "             // Maybe it's \"message\"?",
                "-            if (PROP_NAME_MESSAGE.equals(propName)) {",
                "+            final boolean isMessage = PROP_NAME_MESSAGE.equals(propName);",
                "+            if (isMessage) {",
                "                 if (hasStringCreator) {",
                "@@ -130,2 +131,5 @@ public class ThrowableDeserializer",
                "             }",
                "+            // 23-Jan-2018, tatu: One concern would be `message`, but without any-setter or single-String-ctor",
                "+            //   (or explicit constructor). We could just ignore it but for now, let it fail",
                "+",
                "             // Unknown: let's call handler method"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
                "src/main/java/com/fasterxml/jackson/databind/deser/std/ThrowableDeserializer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "jackson-databind-2.10.0",
                "jackson-databind-2.10.0.pr1",
                "jackson-databind-2.10.0.pr2",
                "jackson-databind-2.10.0.pr3",
                "jackson-databind-2.10.1",
                "jackson-databind-2.10.2",
                "jackson-databind-2.10.3",
                "jackson-databind-2.10.4",
                "jackson-databind-2.10.5",
                "jackson-databind-2.10.5.1",
                "jackson-databind-2.11.0",
                "jackson-databind-2.11.0.rc1",
                "jackson-databind-2.11.1",
                "jackson-databind-2.11.2",
                "jackson-databind-2.11.3",
                "jackson-databind-2.11.4",
                "jackson-databind-2.12.0",
                "jackson-databind-2.12.0-rc1",
                "jackson-databind-2.12.0-rc2",
                "jackson-databind-2.12.1",
                "jackson-databind-2.12.2",
                "jackson-databind-2.12.3",
                "jackson-databind-2.12.4",
                "jackson-databind-2.12.5",
                "jackson-databind-2.12.6",
                "jackson-databind-2.12.6.1",
                "jackson-databind-2.12.7",
                "jackson-databind-2.12.7.1",
                "jackson-databind-2.12.7.2",
                "jackson-databind-2.13.0",
                "jackson-databind-2.13.0-rc1",
                "jackson-databind-2.13.0-rc2",
                "jackson-databind-2.13.1",
                "jackson-databind-2.13.2",
                "jackson-databind-2.13.2.1",
                "jackson-databind-2.13.2.2",
                "jackson-databind-2.13.3",
                "jackson-databind-2.13.4",
                "jackson-databind-2.13.4.1",
                "jackson-databind-2.13.4.2",
                "jackson-databind-2.13.5",
                "jackson-databind-2.14.0",
                "jackson-databind-2.14.0-rc1",
                "jackson-databind-2.14.0-rc2",
                "jackson-databind-2.14.0-rc3",
                "jackson-databind-2.14.1",
                "jackson-databind-2.14.2",
                "jackson-databind-2.14.3",
                "jackson-databind-2.15.0",
                "jackson-databind-2.15.0-rc1",
                "jackson-databind-2.15.0-rc2",
                "jackson-databind-2.15.0-rc3",
                "jackson-databind-2.15.1",
                "jackson-databind-2.15.2",
                "jackson-databind-2.15.3",
                "jackson-databind-2.15.4",
                "jackson-databind-2.16.0",
                "jackson-databind-2.16.0-rc1",
                "jackson-databind-2.16.1",
                "jackson-databind-2.16.2",
                "jackson-databind-2.17.0",
                "jackson-databind-2.17.0-rc1",
                "jackson-databind-2.17.1",
                "jackson-databind-2.17.2",
                "jackson-databind-2.9.10",
                "jackson-databind-2.9.10.1",
                "jackson-databind-2.9.10.2",
                "jackson-databind-2.9.10.3",
                "jackson-databind-2.9.10.4",
                "jackson-databind-2.9.10.5",
                "jackson-databind-2.9.10.6",
                "jackson-databind-2.9.10.7",
                "jackson-databind-2.9.10.8",
                "jackson-databind-2.9.4",
                "jackson-databind-2.9.5",
                "jackson-databind-2.9.6",
                "jackson-databind-2.9.7",
                "jackson-databind-2.9.8",
                "jackson-databind-2.9.9",
                "jackson-databind-2.9.9.1",
                "jackson-databind-2.9.9.2",
                "jackson-databind-2.9.9.3"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java, src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java, src/main/java/com/fasterxml/jackson/databind/deser/std/ThrowableDeserializer.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "a65606fd7f4e5d780e3c0a059e19fae7d65f4788",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1516917090,
            "hunks": 3,
            "message": "Minor cleanup wrt class constants",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
                "index affe06b2b..3f8f9481e 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
                "@@ -43,3 +43,3 @@ public abstract class BasicDeserializerFactory",
                "     private final static Class<?> CLASS_STRING = String.class;",
                "-    private final static Class<?> CLASS_CHAR_BUFFER = CharSequence.class;",
                "+    private final static Class<?> CLASS_CHAR_SEQUENCE = CharSequence.class;",
                "     private final static Class<?> CLASS_ITERABLE = Iterable.class;",
                "@@ -975,3 +975,3 @@ nonAnnotatedParamIndex, ctor);",
                "         Class<?> type = ctor.getRawParameterType(0);",
                "-        if (type == String.class || type == CharSequence.class) {",
                "+        if (type == String.class || type == CLASS_CHAR_SEQUENCE) {",
                "             if (isCreator || isVisible) {",
                "@@ -1772,3 +1772,3 @@ nonAnnotatedParamIndex, ctor);",
                "         }",
                "-        if (rawType == CLASS_STRING || rawType == CLASS_CHAR_BUFFER) {",
                "+        if (rawType == CLASS_STRING || rawType == CLASS_CHAR_SEQUENCE) {",
                "             return StringDeserializer.instance;"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "jackson-databind-2.10.0",
                "jackson-databind-2.10.0.pr1",
                "jackson-databind-2.10.0.pr2",
                "jackson-databind-2.10.0.pr3",
                "jackson-databind-2.10.1",
                "jackson-databind-2.10.2",
                "jackson-databind-2.10.3",
                "jackson-databind-2.10.4",
                "jackson-databind-2.10.5",
                "jackson-databind-2.10.5.1",
                "jackson-databind-2.11.0",
                "jackson-databind-2.11.0.rc1",
                "jackson-databind-2.11.1",
                "jackson-databind-2.11.2",
                "jackson-databind-2.11.3",
                "jackson-databind-2.11.4",
                "jackson-databind-2.12.0",
                "jackson-databind-2.12.0-rc1",
                "jackson-databind-2.12.0-rc2",
                "jackson-databind-2.12.1",
                "jackson-databind-2.12.2",
                "jackson-databind-2.12.3",
                "jackson-databind-2.12.4",
                "jackson-databind-2.12.5",
                "jackson-databind-2.12.6",
                "jackson-databind-2.12.6.1",
                "jackson-databind-2.12.7",
                "jackson-databind-2.12.7.1",
                "jackson-databind-2.12.7.2",
                "jackson-databind-2.13.0",
                "jackson-databind-2.13.0-rc1",
                "jackson-databind-2.13.0-rc2",
                "jackson-databind-2.13.1",
                "jackson-databind-2.13.2",
                "jackson-databind-2.13.2.1",
                "jackson-databind-2.13.2.2",
                "jackson-databind-2.13.3",
                "jackson-databind-2.13.4",
                "jackson-databind-2.13.4.1",
                "jackson-databind-2.13.4.2",
                "jackson-databind-2.13.5",
                "jackson-databind-2.14.0",
                "jackson-databind-2.14.0-rc1",
                "jackson-databind-2.14.0-rc2",
                "jackson-databind-2.14.0-rc3",
                "jackson-databind-2.14.1",
                "jackson-databind-2.14.2",
                "jackson-databind-2.14.3",
                "jackson-databind-2.15.0",
                "jackson-databind-2.15.0-rc1",
                "jackson-databind-2.15.0-rc2",
                "jackson-databind-2.15.0-rc3",
                "jackson-databind-2.15.1",
                "jackson-databind-2.15.2",
                "jackson-databind-2.15.3",
                "jackson-databind-2.15.4",
                "jackson-databind-2.16.0",
                "jackson-databind-2.16.0-rc1",
                "jackson-databind-2.16.1",
                "jackson-databind-2.16.2",
                "jackson-databind-2.17.0",
                "jackson-databind-2.17.0-rc1",
                "jackson-databind-2.17.1",
                "jackson-databind-2.17.2",
                "jackson-databind-2.9.10",
                "jackson-databind-2.9.10.1",
                "jackson-databind-2.9.10.2",
                "jackson-databind-2.9.10.3",
                "jackson-databind-2.9.10.4",
                "jackson-databind-2.9.10.5",
                "jackson-databind-2.9.10.6",
                "jackson-databind-2.9.10.7",
                "jackson-databind-2.9.10.8",
                "jackson-databind-2.9.5",
                "jackson-databind-2.9.6",
                "jackson-databind-2.9.7",
                "jackson-databind-2.9.8",
                "jackson-databind-2.9.9",
                "jackson-databind-2.9.9.1",
                "jackson-databind-2.9.9.2",
                "jackson-databind-2.9.9.3"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "6188e2d28655076bc3f85ae179a563eaf0f5927e",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1517011533,
            "hunks": 2,
            "message": "remove unnecessary `ContextualSerializer` (wrt 3.0)",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java",
                "index 38372bf43..b0426a6b9 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java",
                "@@ -12,3 +12,2 @@ import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;",
                " import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;",
                "-import com.fasterxml.jackson.databind.ser.ContextualSerializer;",
                "@@ -23,3 +22,2 @@ public class NumberSerializer",
                "     extends StdScalarSerializer<Number>",
                "-    implements ContextualSerializer",
                " {"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "8807a94567b38206087b3a3ae533fd797ea46c26",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1517358867,
            "hunks": 20,
            "message": "Change `setTypeFactory()` to (mostly) use builder",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java b/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "index 268cdbe28..c60511826 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "@@ -128,3 +128,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "-    public TypeFactory getTypeFactory() {",
                "+    public TypeFactory typeFactory() {",
                "         return _typeFactory;",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "index 2687b3939..6078465f3 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "@@ -243,3 +243,3 @@ public class ObjectMapper",
                "      */",
                "-    protected TypeFactory _typeFactory;",
                "+    protected /*final*/ TypeFactory _typeFactory;",
                "@@ -410,3 +410,3 @@ public class ObjectMapper",
                "     {",
                "-        _jsonFactory = src._jsonFactory.copy();",
                "+        _jsonFactory = src._jsonFactory; // stream factories now immutable",
                "         _subtypeResolver = src._subtypeResolver;",
                "@@ -484,3 +484,3 @@ public class ObjectMapper",
                "         _jsonFactory = builder.streamFactory();",
                "-        _typeFactory = builder.getTypeFactory();",
                "+        _typeFactory = builder.typeFactory();",
                "@@ -498,6 +498,9 @@ public class ObjectMapper",
                "         _configOverrides = new ConfigOverrides();",
                "+        // 30-Jan-2018, tatu: Note that we need to weave in TypeFactory",
                "         _serializationConfig = new SerializationConfig(base,",
                "-                    _subtypeResolver, mixins, rootNames, _configOverrides);",
                "+                _subtypeResolver, mixins, rootNames, _configOverrides)",
                "+                .with(_typeFactory);",
                "         _deserializationConfig = new DeserializationConfig(base,",
                "-                    _subtypeResolver, mixins, rootNames, _configOverrides);",
                "+                _subtypeResolver, mixins, rootNames, _configOverrides)",
                "+                .with(_typeFactory);",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java b/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java",
                "index 766cb6911..5aa753bc4 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java",
                "@@ -86,3 +86,2 @@ public final class TypeFactory",
                "-    // @since 2.7",
                "     protected final static SimpleType CORE_TYPE_OBJECT = new SimpleType(CLS_OBJECT);",
                "@@ -92,4 +91,2 @@ public final class TypeFactory",
                "      * resolve) and mostly useless (no special handling), better handle directly",
                "-     *",
                "-     * @since 2.7",
                "      */",
                "@@ -100,4 +97,2 @@ public final class TypeFactory",
                "      * resolve) and useless in itself (no special handling).",
                "-     *",
                "-     * @since 2.7",
                "      */",
                "@@ -108,4 +103,2 @@ public final class TypeFactory",
                "      * useful information.",
                "-     *",
                "-     * @since 2.7",
                "      */",
                "@@ -149,5 +142,2 @@ public final class TypeFactory",
                "-    /**",
                "-     * @since 2.8",
                "-     */",
                "     protected TypeFactory(SimpleLookupCache<Object,JavaType> typeCache) {",
                "@@ -200,4 +190,2 @@ public final class TypeFactory",
                "      * bigger maximum size.",
                "-     *",
                "-     * @since 2.8",
                "      */",
                "@@ -221,4 +209,2 @@ public final class TypeFactory",
                "      * of {@link Class} instances via {@link JavaType} reference.",
                "-     * ",
                "-     * @since 2.4.1",
                "      */",
                "@@ -270,4 +256,2 @@ public final class TypeFactory",
                "      * to allow for overriding of lookup functionality in environments like OSGi.",
                "-     *",
                "-     * @since 2.6",
                "      */",
                "@@ -496,6 +480,2 @@ public final class TypeFactory",
                "      * there may be need for some additional work-arounds.",
                "-     *",
                "-     * @param superClass",
                "-     *",
                "-     * @since 2.7",
                "      */",
                "@@ -1035,4 +1015,2 @@ s     */",
                "      * will simply call {@link #_newSimpleType}",
                "-     *",
                "-     * @since 2.7",
                "      */",
                "@@ -1054,4 +1032,2 @@ s     */",
                "      * constructor of {@link SimpleType}.",
                "-     *",
                "-     * @since 2.7",
                "      */",
                "@@ -1064,7 +1040,2 @@ s     */",
                "     protected JavaType _unknownType() {",
                "-        /* 15-Sep-2015, tatu: Prior to 2.7, we constructed new instance for each call.",
                "-         *    This may have been due to potential mutability of the instance; but that",
                "-         *    should not be issue any more, and creation is somewhat wasteful. So let's",
                "-         *    try reusing singleton/flyweight instance.",
                "-         */",
                "         return CORE_TYPE_OBJECT;",
                "@@ -1076,4 +1047,2 @@ s     */",
                "      * pre-constructed and do not need dynamic caching.",
                "-     *",
                "-     * @since 2.7",
                "      */"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java, src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java, src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "4cc9def462818bca4f85b1ec5f58e2c26e6ffa8d",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1517294368,
            "hunks": 18,
            "message": "ObjectMapper.builder work",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java b/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "index 9ae1ad1fc..268cdbe28 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "@@ -4,2 +4,4 @@ import com.fasterxml.jackson.core.*;",
                " import com.fasterxml.jackson.databind.deser.*;",
                "+import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;",
                "+import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;",
                " import com.fasterxml.jackson.databind.ser.*;",
                "@@ -41,2 +43,4 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    protected SubtypeResolver _subtypeResolver;",
                "+",
                "     /*",
                "@@ -82,6 +86,11 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "         _streamFactory = streamFactory;",
                "+",
                "         _typeFactory = TypeFactory.defaultInstance();",
                "+        _subtypeResolver = null;",
                "         _serializerFactory = BeanSerializerFactory.instance;",
                "+        _serializerProvider = null;",
                "+",
                "         _deserializerFactory = BeanDeserializerFactory.instance;",
                "+        _deserializationContext = null;",
                "@@ -93,3 +102,5 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "         _streamFactory = base._streamFactory;",
                "+",
                "         _typeFactory = base._typeFactory;",
                "+        _subtypeResolver = base._subtypeResolver;",
                "@@ -121,2 +132,14 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    public SubtypeResolver subtypeResolver() {",
                "+        return (_subtypeResolver != null) ? _subtypeResolver : defaultSubtypeResolver();",
                "+    }",
                "+",
                "+    /**",
                "+     * Overridable method for changing default {@link SubtypeResolver} prototype",
                "+     * to use.",
                "+     */",
                "+    protected SubtypeResolver defaultSubtypeResolver() {",
                "+        return new StdSubtypeResolver();",
                "+    }",
                "+",
                "     public SerializerFactory serializerFactory() {",
                "@@ -126,4 +149,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     public DefaultSerializerProvider serializerProvider() {",
                "-        return (_serializerProvider != null) ? _serializerProvider",
                "-                : defaultSerializerProvider();",
                "+        return (_serializerProvider != null) ? _serializerProvider : defaultSerializerProvider();",
                "     }",
                "@@ -173,2 +195,7 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    public B subtypeResolver(SubtypeResolver r) {",
                "+        _subtypeResolver = r;",
                "+        return _this();",
                "+    }",
                "+",
                "     public B serializerFactory(SerializerFactory f) {",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "index e9939b9ea..2687b3939 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "@@ -183,3 +183,3 @@ public class ObjectMapper",
                "      */",
                "-    public class Builder extends MapperBuilder<ObjectMapper, Builder>",
                "+    public static class Builder extends MapperBuilder<ObjectMapper, Builder>",
                "     {",
                "@@ -191,3 +191,3 @@ public class ObjectMapper",
                "         public ObjectMapper build() {",
                "-            return new ObjectMapper();",
                "+            return new ObjectMapper(this);",
                "         }",
                "@@ -303,3 +303,3 @@ public class ObjectMapper",
                "      */",
                "-    protected DefaultSerializerProvider _serializerProvider;",
                "+    protected final DefaultSerializerProvider _serializerProvider;",
                "@@ -490,3 +490,3 @@ public class ObjectMapper",
                "         _serializerFactory = builder.serializerFactory();",
                "-        ",
                "+",
                "         _subtypeResolver = new StdSubtypeResolver();",
                "@@ -518,3 +518,3 @@ public class ObjectMapper",
                "      */",
                "-    public Builder builder() {",
                "+    public static Builder builder() {",
                "         return new Builder(new JsonFactory());",
                "@@ -946,11 +946,2 @@ public class ObjectMapper",
                "      */",
                "-    ",
                "-    /**",
                "-     * Method for setting specific {@link SerializerFactory} to use",
                "-     * for constructing (bean) serializers.",
                "-     */",
                "-    public ObjectMapper setSerializerFactory(SerializerFactory f) {",
                "-        _serializerFactory = f;",
                "-        return this;",
                "-    }",
                "@@ -967,12 +958,2 @@ public class ObjectMapper",
                "-    /**",
                "-     * Method for setting \"blueprint\" {@link SerializerProvider} instance",
                "-     * to use as the base for actual provider instances to use for handling",
                "-     * caching of {@link JsonSerializer} instances.",
                "-     */",
                "-    public ObjectMapper setSerializerProvider(DefaultSerializerProvider p) {",
                "-        _serializerProvider = p;",
                "-        return this;",
                "-    }",
                "-",
                "     /**"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java, src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "f3ba50cfabd6e8cd3dfb317ece3baaf7b0e6d238",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1517268086,
            "hunks": 26,
            "message": "Bit of cleanup in preparation of work for ObjectMapper \"buildification\"",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java b/src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java",
                "index 5fd5ca48e..004ea436f 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java",
                "@@ -361,4 +361,2 @@ public enum DeserializationFeature implements ConfigFeature",
                "      * Feature is disabled by default.",
                "-     * ",
                "-     * @since 2.5",
                "      */",
                "@@ -375,4 +373,2 @@ public enum DeserializationFeature implements ConfigFeature",
                "      * Feature is enabled by default.",
                "-     * ",
                "-     * @since 2.6",
                "      */",
                "@@ -403,4 +399,2 @@ public enum DeserializationFeature implements ConfigFeature",
                "      * Feature is disabled by default.",
                "-     * ",
                "-     * @since 2.0",
                "      */",
                "@@ -415,4 +409,2 @@ public enum DeserializationFeature implements ConfigFeature",
                "      * Feature is disabled by default.",
                "-     *",
                "-     * @since 2.8",
                "      */",
                "@@ -432,4 +424,2 @@ public enum DeserializationFeature implements ConfigFeature",
                "      * Feature is enabled by default, to support most accurate time values possible.",
                "-     * ",
                "-     * @since 2.2",
                "      */",
                "@@ -456,4 +446,2 @@ public enum DeserializationFeature implements ConfigFeature",
                "      * Joda and Java 8 date/tyime datatypes.",
                "-     * ",
                "-     * @since 2.2",
                "      */",
                "@@ -478,4 +466,2 @@ public enum DeserializationFeature implements ConfigFeature",
                "      * Feature is enabled by default.",
                "-     * ",
                "-     * @since 2.1",
                "      */",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/MapperFeature.java b/src/main/java/com/fasterxml/jackson/databind/MapperFeature.java",
                "index ab64e26e2..c997c94da 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/MapperFeature.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/MapperFeature.java",
                "@@ -60,4 +60,2 @@ public enum MapperFeature implements ConfigFeature",
                "      * but just ignoring the use of field for access.",
                "-     *",
                "-     * @since 2.6",
                "      */",
                "@@ -85,4 +83,2 @@ public enum MapperFeature implements ConfigFeature",
                "      * Feature is enabled by default, for backwards compatibility reasons.",
                "-     *",
                "-     * @since 2.2",
                "      */",
                "@@ -103,4 +99,2 @@ public enum MapperFeature implements ConfigFeature",
                "      * Feature is enabled by default.",
                "-     *",
                "-     * @since 2.2",
                "      */",
                "@@ -122,4 +116,2 @@ public enum MapperFeature implements ConfigFeature",
                "      * Feature is enabled by default.",
                "-     *",
                "-     * @since 2.9",
                "      */",
                "@@ -172,4 +164,2 @@ public enum MapperFeature implements ConfigFeature",
                "      * until 2.6)",
                "-     *",
                "-     * @since 2.7",
                "      */",
                "@@ -264,4 +254,2 @@ public enum MapperFeature implements ConfigFeature",
                "      * Feature is disabled by default.",
                "-     * ",
                "-     * @since 2.5",
                "      */",
                "@@ -277,4 +265,2 @@ public enum MapperFeature implements ConfigFeature",
                "      * Feature is disabled by default.",
                "-     *",
                "-     * @since 2.9",
                "      */",
                "@@ -291,4 +277,2 @@ public enum MapperFeature implements ConfigFeature",
                "      * Feature is disabled by default.",
                "-     * ",
                "-     * @since 2.1",
                "      */",
                "@@ -302,4 +286,2 @@ public enum MapperFeature implements ConfigFeature",
                "      * Feature is disabled by default.",
                "-     *",
                "-     * @since 2.7",
                "      */",
                "@@ -330,4 +312,2 @@ public enum MapperFeature implements ConfigFeature",
                "      * default behavior)",
                "-     *",
                "-     * @since 2.9",
                "      */",
                "@@ -355,4 +335,2 @@ public enum MapperFeature implements ConfigFeature",
                "      * Feature is enabled by default.",
                "-     *",
                "-     * @since 2.5",
                "      */",
                "@@ -369,4 +347,2 @@ public enum MapperFeature implements ConfigFeature",
                "      * settings for such types should result in an exception.",
                "-     *",
                "-     * @since 2.9",
                "      */",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "index ac6bd638f..29437a959 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "@@ -26,4 +26,4 @@ import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrappe",
                " import com.fasterxml.jackson.databind.jsontype.*;",
                "+import com.fasterxml.jackson.databind.jsontype.impl.DefaultTypeResolverBuilder;",
                " import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;",
                "-import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;",
                " import com.fasterxml.jackson.databind.node.*;",
                "@@ -178,90 +178,2 @@ public class ObjectMapper",
                "-    /**",
                "-     * Customized {@link TypeResolverBuilder} that provides type resolver builders",
                "-     * used with so-called \"default typing\"",
                "-     * (see {@link ObjectMapper#enableDefaultTyping()} for details).",
                "-     *<p>",
                "-     * Type resolver construction is based on configuration: implementation takes care",
                "-     * of only providing builders in cases where type information should be applied.",
                "-     * This is important since build calls may be sent for any and all types, and",
                "-     * type information should NOT be applied to all of them.",
                "-     */",
                "-    public static class DefaultTypeResolverBuilder",
                "-        extends StdTypeResolverBuilder",
                "-        implements java.io.Serializable",
                "-    {",
                "-        private static final long serialVersionUID = 1L;",
                "-",
                "-        /**",
                "-         * Definition of what types is this default typer valid for.",
                "-         */",
                "-        protected final DefaultTyping _appliesFor;",
                "-",
                "-        public DefaultTypeResolverBuilder(DefaultTyping t) {",
                "-            _appliesFor = t;",
                "-        }",
                "-",
                "-        @Override",
                "-        public TypeDeserializer buildTypeDeserializer(DeserializationConfig config,",
                "-                JavaType baseType, Collection<NamedType> subtypes)",
                "-        {",
                "-            return useForType(baseType) ? super.buildTypeDeserializer(config, baseType, subtypes) : null;",
                "-        }",
                "-",
                "-        @Override",
                "-        public TypeSerializer buildTypeSerializer(SerializationConfig config,",
                "-                JavaType baseType, Collection<NamedType> subtypes)",
                "-        {",
                "-            return useForType(baseType) ? super.buildTypeSerializer(config, baseType, subtypes) : null;            ",
                "-        }",
                "-",
                "-        /**",
                "-         * Method called to check if the default type handler should be",
                "-         * used for given type.",
                "-         * Note: \"natural types\" (String, Boolean, Integer, Double) will never",
                "-         * use typing; that is both due to them being concrete and final,",
                "-         * and since actual serializers and deserializers will also ignore any",
                "-         * attempts to enforce typing.",
                "-         */",
                "-        public boolean useForType(JavaType t)",
                "-        {",
                "-            // 03-Oct-2016, tatu: As per [databind#1395], need to skip",
                "-            //  primitive types too, regardless",
                "-            if (t.isPrimitive()) {",
                "-                return false;",
                "-            }",
                "-",
                "-            switch (_appliesFor) {",
                "-            case NON_CONCRETE_AND_ARRAYS:",
                "-                while (t.isArrayType()) {",
                "-                    t = t.getContentType();",
                "-                }",
                "-                // fall through",
                "-            case OBJECT_AND_NON_CONCRETE:",
                "-                // 19-Apr-2016, tatu: ReferenceType like Optional also requires similar handling:",
                "-                while (t.isReferenceType()) {",
                "-                    t = t.getReferencedType();",
                "-                }",
                "-                return t.isJavaLangObject()",
                "-                        || (!t.isConcrete()",
                "-                                // [databind#88] Should not apply to JSON tree models:",
                "-                                && !TreeNode.class.isAssignableFrom(t.getRawClass()));",
                "-",
                "-            case NON_FINAL:",
                "-                while (t.isArrayType()) {",
                "-                    t = t.getContentType();",
                "-                }",
                "-                // 19-Apr-2016, tatu: ReferenceType like Optional also requires similar handling:",
                "-                while (t.isReferenceType()) {",
                "-                    t = t.getReferencedType();",
                "-                }",
                "-                // [databind#88] Should not apply to JSON tree models:",
                "-                return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass());",
                "-            default:",
                "-            //case JAVA_LANG_OBJECT:",
                "-                return t.isJavaLangObject();",
                "-            }",
                "-        }",
                "-    }",
                "-",
                "     /*",
                "@@ -438,3 +350,3 @@ public class ObjectMapper",
                "      *<p>",
                "-     * Since version 1.5, these may are either \"raw\" deserializers (when",
                "+     * These may are either \"raw\" deserializers (when",
                "      * no type information is needed for base type), or type-wrapped",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/cfg/BaseSettings.java b/src/main/java/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
                "index 49d80fe67..c6b1edc05 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
                "@@ -23,3 +23,2 @@ public final class BaseSettings",
                " {",
                "-    // for 2.6",
                "     private static final long serialVersionUID = 1L;",
                "@@ -30,6 +29,2 @@ public final class BaseSettings",
                "     private static final TimeZone DEFAULT_TIMEZONE = ",
                "-            //  TimeZone.getDefault()",
                "-            /* [databind#915] 05-Nov-2015, tatu: Changed to UTC, from earlier",
                "-             * baseline of GMT (up to 2.6)",
                "-             */",
                "             TimeZone.getTimeZone(\"UTC\");",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/DefaultTypeResolverBuilder.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/DefaultTypeResolverBuilder.java",
                "new file mode 100644",
                "index 000000000..b4847ad6c",
                "--- /dev/null",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/DefaultTypeResolverBuilder.java",
                "@@ -0,0 +1,102 @@",
                "+package com.fasterxml.jackson.databind.jsontype.impl;",
                "+",
                "+import java.util.Collection;",
                "+",
                "+import com.fasterxml.jackson.core.TreeNode;",
                "+import com.fasterxml.jackson.databind.DeserializationConfig;",
                "+import com.fasterxml.jackson.databind.JavaType;",
                "+import com.fasterxml.jackson.databind.ObjectMapper;",
                "+import com.fasterxml.jackson.databind.SerializationConfig;",
                "+import com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping;",
                "+import com.fasterxml.jackson.databind.jsontype.NamedType;",
                "+import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;",
                "+import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;",
                "+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;",
                "+",
                "+/**",
                "+ * Customized {@link TypeResolverBuilder} that provides type resolver builders",
                "+ * used with so-called \"default typing\"",
                "+ * (see {@link ObjectMapper#enableDefaultTyping()} for details).",
                "+ *<p>",
                "+ * Type resolver construction is based on configuration: implementation takes care",
                "+ * of only providing builders in cases where type information should be applied.",
                "+ * This is important since build calls may be sent for any and all types, and",
                "+ * type information should NOT be applied to all of them.",
                "+ */",
                "+public class DefaultTypeResolverBuilder",
                "+    extends StdTypeResolverBuilder",
                "+    implements java.io.Serializable",
                "+{",
                "+    private static final long serialVersionUID = 1L;",
                "+",
                "+    /**",
                "+     * Definition of what types is this default typer valid for.",
                "+     */",
                "+    protected final DefaultTyping _appliesFor;",
                "+",
                "+    public DefaultTypeResolverBuilder(DefaultTyping t) {",
                "+        _appliesFor = t;",
                "+    }",
                "+",
                "+    @Override",
                "+    public TypeDeserializer buildTypeDeserializer(DeserializationConfig config,",
                "+            JavaType baseType, Collection<NamedType> subtypes)",
                "+    {",
                "+        return useForType(baseType) ? super.buildTypeDeserializer(config, baseType, subtypes) : null;",
                "+    }",
                "+",
                "+    @Override",
                "+    public TypeSerializer buildTypeSerializer(SerializationConfig config,",
                "+            JavaType baseType, Collection<NamedType> subtypes)",
                "+    {",
                "+        return useForType(baseType) ? super.buildTypeSerializer(config, baseType, subtypes) : null;            ",
                "+    }",
                "+",
                "+    /**",
                "+     * Method called to check if the default type handler should be",
                "+     * used for given type.",
                "+     * Note: \"natural types\" (String, Boolean, Integer, Double) will never",
                "+     * use typing; that is both due to them being concrete and final,",
                "+     * and since actual serializers and deserializers will also ignore any",
                "+     * attempts to enforce typing.",
                "+     */",
                "+    public boolean useForType(JavaType t)",
                "+    {",
                "+        // 03-Oct-2016, tatu: As per [databind#1395], need to skip",
                "+        //  primitive types too, regardless",
                "+        if (t.isPrimitive()) {",
                "+            return false;",
                "+        }",
                "+",
                "+        switch (_appliesFor) {",
                "+        case NON_CONCRETE_AND_ARRAYS:",
                "+            while (t.isArrayType()) {",
                "+                t = t.getContentType();",
                "+            }",
                "+            // fall through",
                "+        case OBJECT_AND_NON_CONCRETE:",
                "+            // 19-Apr-2016, tatu: ReferenceType like Optional also requires similar handling:",
                "+            while (t.isReferenceType()) {",
                "+                t = t.getReferencedType();",
                "+            }",
                "+            return t.isJavaLangObject()",
                "+                    || (!t.isConcrete()",
                "+                            // [databind#88] Should not apply to JSON tree models:",
                "+                            && !TreeNode.class.isAssignableFrom(t.getRawClass()));",
                "+",
                "+        case NON_FINAL:",
                "+            while (t.isArrayType()) {",
                "+                t = t.getContentType();",
                "+            }",
                "+            // 19-Apr-2016, tatu: ReferenceType like Optional also requires similar handling:",
                "+            while (t.isReferenceType()) {",
                "+                t = t.getReferencedType();",
                "+            }",
                "+            // [databind#88] Should not apply to JSON tree models:",
                "+            return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass());",
                "+        default:",
                "+        //case JAVA_LANG_OBJECT:",
                "+            return t.isJavaLangObject();",
                "+        }",
                "+    }",
                "+}",
                "\\ No newline at end of file"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java",
                "src/main/java/com/fasterxml/jackson/databind/MapperFeature.java",
                "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "src/main/java/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
                "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/DefaultTypeResolverBuilder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java, src/main/java/com/fasterxml/jackson/databind/MapperFeature.java, src/main/java/com/fasterxml/jackson/databind/cfg/BaseSettings.java, src/main/java/com/fasterxml/jackson/databind/jsontype/impl/DefaultTypeResolverBuilder.java, src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: deserialization, fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "bd7d774ac1eca57a8f69683421e40bf37fbc4cb0",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1517369413,
            "hunks": 90,
            "message": "mapper/builder work",
            "diff": [
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java b/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "index 68cd071a1..226c92266 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "@@ -128,3 +128,3 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "     /**********************************************************",
                "-    /* Accessors",
                "+    /* Accessors, general",
                "     /**********************************************************",
                "@@ -140,2 +140,6 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    public TypeFactory typeFactory() {",
                "+        return _baseSettings.getTypeFactory();",
                "+    }",
                "+",
                "     public ClassIntrospector classIntrospector() {",
                "@@ -163,2 +167,8 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Accessors, serialization",
                "+    /**********************************************************",
                "+     */",
                "+",
                "     public SerializerFactory serializerFactory() {",
                "@@ -179,2 +189,8 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Accessors, deserialization",
                "+    /**********************************************************",
                "+     */",
                "+",
                "     public DeserializerFactory deserializerFactory() {",
                "@@ -197,8 +213,2 @@ public abstract class MapperBuilder<M extends ObjectMapper,",
                "-    /*",
                "-    /**********************************************************",
                "-    /* Changing simple features",
                "-    /**********************************************************",
                "-     */",
                "-",
                "     /*",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/Module.java b/src/main/java/com/fasterxml/jackson/databind/Module.java",
                "index 35c29401f..2667c80dd 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/Module.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/Module.java",
                "@@ -6,2 +6,3 @@ import com.fasterxml.jackson.core.*;",
                " import com.fasterxml.jackson.core.json.JsonFactory;",
                "+",
                " import com.fasterxml.jackson.databind.cfg.MutableConfigOverride;",
                "@@ -12,3 +13,2 @@ import com.fasterxml.jackson.databind.deser.KeyDeserializers;",
                " import com.fasterxml.jackson.databind.deser.ValueInstantiators;",
                "-import com.fasterxml.jackson.databind.introspect.ClassIntrospector;",
                " import com.fasterxml.jackson.databind.jsontype.NamedType;",
                "@@ -57,4 +57,2 @@ public abstract class Module",
                "      * Default implementation returns value of class name ({@link Class#getName}).",
                "-     *",
                "-     * @since 2.5",
                "      */",
                "@@ -166,4 +164,2 @@ public abstract class Module",
                "          * annotations)",
                "-         *",
                "-         * @since 2.8",
                "          */",
                "@@ -259,12 +255,2 @@ public abstract class Module",
                "-        /**",
                "-         * Method for replacing the default class introspector with a derived class that",
                "-         * overrides specific behavior.",
                "-         *",
                "-         * @param ci Derived class of ClassIntrospector with overriden behavior",
                "-         *",
                "-         * @since 2.2",
                "-         */",
                "-        public void setClassIntrospector(ClassIntrospector ci);",
                "-",
                "         /**",
                "@@ -302,4 +288,2 @@ public abstract class Module",
                "          * they have)",
                "-         *",
                "-         * @since 2.9",
                "          */",
                "@@ -337,4 +321,2 @@ public abstract class Module",
                "          * by {@link ObjectMapper}.",
                "-         * ",
                "-         * @since 2.3",
                "          */",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "index 1635b24f1..2acccb233 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "@@ -26,3 +26,2 @@ import com.fasterxml.jackson.databind.jsontype.*;",
                " import com.fasterxml.jackson.databind.jsontype.impl.DefaultTypeResolverBuilder;",
                "-import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;",
                " import com.fasterxml.jackson.databind.node.*;",
                "@@ -217,3 +216,3 @@ public class ObjectMapper",
                "      */",
                "-    protected final TokenStreamFactory _jsonFactory;",
                "+    protected final TokenStreamFactory _streamFactory;",
                "@@ -391,3 +390,3 @@ public class ObjectMapper",
                "     {",
                "-        _jsonFactory = src._jsonFactory; // stream factories now immutable",
                "+        _streamFactory = src._streamFactory; // stream factories now immutable",
                "         _subtypeResolver = src._subtypeResolver;",
                "@@ -424,3 +423,3 @@ public class ObjectMapper",
                "      * ",
                "-     * @param jf TokenStreamFactory to use: if null, a new {@link JsonFactory} will be constructed",
                "+     * @param streamFactory TokenStreamFactory to use: if null, a new {@link JsonFactory} will be constructed",
                "      * @param sp SerializerProvider to use: if null, a {@link SerializerProvider} will be constructed",
                "@@ -430,32 +429,9 @@ public class ObjectMapper",
                "      */",
                "-    protected ObjectMapper(TokenStreamFactory jf,",
                "+    protected ObjectMapper(TokenStreamFactory streamFactory,",
                "             DefaultSerializerProvider sp, DefaultDeserializationContext dc)",
                "     {",
                "-        _jsonFactory = jf;",
                "-        _subtypeResolver = new StdSubtypeResolver();",
                "-        RootNameLookup rootNames = new RootNameLookup();",
                "-        // and default type factory is shared one",
                "-        _typeFactory = TypeFactory.defaultInstance();",
                "-",
                "-        SimpleMixInResolver mixins = new SimpleMixInResolver(null);",
                "-        _mixIns = mixins;",
                "-        BaseSettings base = BaseSettings.std();",
                "-        _configOverrides = new ConfigOverrides();",
                "-        ClassIntrospector ci = defaultClassIntrospector();",
                "-        _serializationConfig = new SerializationConfig(base, ci,",
                "-                    _subtypeResolver, mixins, rootNames, _configOverrides);",
                "-        _deserializationConfig = new DeserializationConfig(base, ci,",
                "-                    _subtypeResolver, mixins, rootNames, _configOverrides);",
                "-",
                "-        // Some overrides we may need",
                "-        final boolean needOrder = _jsonFactory.requiresPropertyOrdering();",
                "-        if (needOrder ^ _serializationConfig.isEnabled(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY)) {",
                "-            configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, needOrder);",
                "-        }",
                "-        ",
                "-        _serializerProvider = (sp == null) ? new DefaultSerializerProvider.Impl(_jsonFactory) : sp;",
                "-        _deserializationContext = (dc == null) ?",
                "-                new DefaultDeserializationContext.Impl(BeanDeserializerFactory.instance, _jsonFactory) : dc;",
                "-        // Default serializer factory is stateless, can just assign",
                "-        _serializerFactory = BeanSerializerFactory.instance;",
                "+        this(new Builder(streamFactory),",
                "+                ((sp == null) ? new DefaultSerializerProvider.Impl(streamFactory) : sp),",
                "+                ((dc == null) ? new DefaultDeserializationContext.Impl(BeanDeserializerFactory.instance, streamFactory) : dc)",
                "+        );",
                "     }",
                "@@ -463,5 +439,11 @@ public class ObjectMapper",
                "     public ObjectMapper(Builder builder)",
                "+    {",
                "+        this(builder, builder.serializerProvider(), builder.deserializationContext());",
                "+    }",
                "+",
                "+    public ObjectMapper(Builder builder,",
                "+            DefaultSerializerProvider sp, DefaultDeserializationContext dc)            ",
                "     {",
                "         // General framework factories",
                "-        _jsonFactory = builder.streamFactory();",
                "+        _streamFactory = builder.streamFactory();",
                "         BaseSettings base = builder.baseSettings();",
                "@@ -469,4 +451,4 @@ public class ObjectMapper",
                "         // Ser/deser framework factories",
                "-        _serializerProvider = builder.serializerProvider();",
                "-        _deserializationContext = builder.deserializationContext();",
                "+        _serializerProvider = sp;",
                "+        _deserializationContext = dc;",
                "         _serializerFactory = builder.serializerFactory();",
                "@@ -489,3 +471,3 @@ public class ObjectMapper",
                "         // Some overrides we may need",
                "-        final boolean needOrder = _jsonFactory.requiresPropertyOrdering();",
                "+        final boolean needOrder = _streamFactory.requiresPropertyOrdering();",
                "         if (needOrder ^ _serializationConfig.isEnabled(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY)) {",
                "@@ -511,10 +493,2 @@ public class ObjectMapper",
                "-    /**",
                "-     * Overridable helper method used to construct default {@link ClassIntrospector}",
                "-     * to use.",
                "-     */",
                "-    protected ClassIntrospector defaultClassIntrospector() {",
                "-        return new BasicClassIntrospector();",
                "-    }",
                "-",
                "     /*",
                "@@ -726,11 +700,2 @@ public class ObjectMapper",
                "-            @Override",
                "-            public void setClassIntrospector(ClassIntrospector ci) {",
                "-                // !!! TODO",
                "-                /*",
                "-                _deserializationConfig = _deserializationConfig.with(ci);",
                "-                _serializationConfig = _serializationConfig.with(ci);",
                "-                */",
                "-            }",
                "-",
                "             @Override",
                "@@ -921,3 +886,3 @@ public class ObjectMapper",
                "      */",
                "-    public TokenStreamFactory tokenStreamFactory() { return _jsonFactory; }",
                "+    public TokenStreamFactory tokenStreamFactory() { return _streamFactory; }",
                "@@ -1493,19 +1458,2 @@ public class ObjectMapper",
                "-    /**",
                "-     * Method that allows overriding of the underlying {@link DeserializationConfig}",
                "-     * object.",
                "-     * It is added as a fallback method that may be used if no other configuration",
                "-     * modifier method works: it should not be used if there are alternatives,",
                "-     * and its use is generally discouraged.",
                "-     *<p>",
                "-     * <b>NOTE</b>: only use this method if you know what you are doing -- it allows",
                "-     * by-passing some of checks applied to other configuration methods.",
                "-     * Also keep in mind that as with all configuration of {@link ObjectMapper},",
                "-     * this is only thread-safe if done before calling any deserialization methods.",
                "-     */",
                "-    public ObjectMapper setConfig(DeserializationConfig config) {",
                "-        _deserializationConfig = config;",
                "-        return this;",
                "-    }",
                "-",
                "     /*",
                "@@ -1544,19 +1492,2 @@ public class ObjectMapper",
                "-    /**",
                "-     * Method that allows overriding of the underlying {@link SerializationConfig}",
                "-     * object, which contains serialization-specific configuration settings.",
                "-     * It is added as a fallback method that may be used if no other configuration",
                "-     * modifier method works: it should not be used if there are alternatives,",
                "-     * and its use is generally discouraged.",
                "-     *<p>",
                "-     * <b>NOTE</b>: only use this method if you know what you are doing -- it allows",
                "-     * by-passing some of checks applied to other configuration methods.",
                "-     * Also keep in mind that as with all configuration of {@link ObjectMapper},",
                "-     * this is only thread-safe if done before calling any serialization methods.",
                "-     */",
                "-    public ObjectMapper setConfig(SerializationConfig config) {",
                "-        _serializationConfig = config;",
                "-        return this;",
                "-    }",
                "-    ",
                "     /*",
                "@@ -1588,3 +1519,3 @@ public class ObjectMapper",
                "     }",
                "-    ",
                "+",
                "     /**",
                "@@ -1822,3 +1753,3 @@ public class ObjectMapper",
                "     public boolean isEnabled(JsonFactory.Feature f) {",
                "-        return _jsonFactory.isEnabled(f);",
                "+        return _streamFactory.isEnabled(f);",
                "     }",
                "@@ -1826,3 +1757,3 @@ public class ObjectMapper",
                "     public boolean isEnabled(JsonParser.Feature f) {",
                "-        return _deserializationConfig.isEnabled(f, _jsonFactory);",
                "+        return _deserializationConfig.isEnabled(f, _streamFactory);",
                "     }",
                "@@ -1830,3 +1761,3 @@ public class ObjectMapper",
                "     public boolean isEnabled(JsonGenerator.Feature f) {",
                "-        return _serializationConfig.isEnabled(f, _jsonFactory);",
                "+        return _serializationConfig.isEnabled(f, _streamFactory);",
                "     }",
                "@@ -1850,3 +1781,3 @@ public class ObjectMapper",
                "         DefaultDeserializationContext ctxt = createDeserializationContext();",
                "-        return ctxt.assignAndReturnParser(_jsonFactory.createParser(ctxt, src));",
                "+        return ctxt.assignAndReturnParser(_streamFactory.createParser(ctxt, src));",
                "     }",
                "@@ -1863,3 +1794,3 @@ public class ObjectMapper",
                "         DefaultDeserializationContext ctxt = createDeserializationContext();",
                "-        return ctxt.assignAndReturnParser(_jsonFactory.createParser(ctxt, src));",
                "+        return ctxt.assignAndReturnParser(_streamFactory.createParser(ctxt, src));",
                "     }",
                "@@ -1876,3 +1807,3 @@ public class ObjectMapper",
                "         DefaultDeserializationContext ctxt = createDeserializationContext();",
                "-        return ctxt.assignAndReturnParser(_jsonFactory.createParser(ctxt, in));",
                "+        return ctxt.assignAndReturnParser(_streamFactory.createParser(ctxt, in));",
                "     }",
                "@@ -1889,3 +1820,3 @@ public class ObjectMapper",
                "         DefaultDeserializationContext ctxt = createDeserializationContext();",
                "-        return ctxt.assignAndReturnParser(_jsonFactory.createParser(ctxt, r));",
                "+        return ctxt.assignAndReturnParser(_streamFactory.createParser(ctxt, r));",
                "     }",
                "@@ -1902,3 +1833,3 @@ public class ObjectMapper",
                "         DefaultDeserializationContext ctxt = createDeserializationContext();",
                "-        return ctxt.assignAndReturnParser(_jsonFactory.createParser(ctxt, data));",
                "+        return ctxt.assignAndReturnParser(_streamFactory.createParser(ctxt, data));",
                "     }",
                "@@ -1915,3 +1846,3 @@ public class ObjectMapper",
                "         DefaultDeserializationContext ctxt = createDeserializationContext();",
                "-        return ctxt.assignAndReturnParser(_jsonFactory.createParser(ctxt, data, offset, len));",
                "+        return ctxt.assignAndReturnParser(_streamFactory.createParser(ctxt, data, offset, len));",
                "     }",
                "@@ -1928,3 +1859,3 @@ public class ObjectMapper",
                "         DefaultDeserializationContext ctxt = createDeserializationContext();",
                "-        return ctxt.assignAndReturnParser(_jsonFactory.createParser(ctxt, content));",
                "+        return ctxt.assignAndReturnParser(_streamFactory.createParser(ctxt, content));",
                "     }",
                "@@ -1941,3 +1872,3 @@ public class ObjectMapper",
                "         DefaultDeserializationContext ctxt = createDeserializationContext();",
                "-        return ctxt.assignAndReturnParser(_jsonFactory.createParser(ctxt, content));",
                "+        return ctxt.assignAndReturnParser(_streamFactory.createParser(ctxt, content));",
                "     }",
                "@@ -1954,3 +1885,3 @@ public class ObjectMapper",
                "         DefaultDeserializationContext ctxt = createDeserializationContext();",
                "-        return ctxt.assignAndReturnParser(_jsonFactory.createParser(ctxt, content, offset, len));",
                "+        return ctxt.assignAndReturnParser(_streamFactory.createParser(ctxt, content, offset, len));",
                "     }",
                "@@ -1967,3 +1898,3 @@ public class ObjectMapper",
                "         DefaultDeserializationContext ctxt = createDeserializationContext();",
                "-        return ctxt.assignAndReturnParser(_jsonFactory.createParser(ctxt, content));",
                "+        return ctxt.assignAndReturnParser(_streamFactory.createParser(ctxt, content));",
                "     }",
                "@@ -1980,3 +1911,3 @@ public class ObjectMapper",
                "         DefaultDeserializationContext ctxt = createDeserializationContext();",
                "-        return ctxt.assignAndReturnParser(_jsonFactory.createNonBlockingByteArrayParser(ctxt));",
                "+        return ctxt.assignAndReturnParser(_streamFactory.createNonBlockingByteArrayParser(ctxt));",
                "     }",
                "@@ -1999,3 +1930,3 @@ public class ObjectMapper",
                "     public JsonGenerator createGenerator(OutputStream out) throws IOException {",
                "-        return _jsonFactory.createGenerator(_serializerProvider(), out);",
                "+        return _streamFactory.createGenerator(_serializerProvider(), out);",
                "     }",
                "@@ -2011,3 +1942,3 @@ public class ObjectMapper",
                "     public JsonGenerator createGenerator(OutputStream out, JsonEncoding enc) throws IOException {",
                "-        return _jsonFactory.createGenerator(_serializerProvider(), out, enc);",
                "+        return _streamFactory.createGenerator(_serializerProvider(), out, enc);",
                "     }",
                "@@ -2023,3 +1954,3 @@ public class ObjectMapper",
                "     public JsonGenerator createGenerator(Writer w) throws IOException {",
                "-        return _jsonFactory.createGenerator(_serializerProvider(), w);",
                "+        return _streamFactory.createGenerator(_serializerProvider(), w);",
                "     }",
                "@@ -2036,3 +1967,3 @@ public class ObjectMapper",
                "         throws IOException {",
                "-        return _jsonFactory.createGenerator(_serializerProvider(), f, enc);",
                "+        return _streamFactory.createGenerator(_serializerProvider(), f, enc);",
                "     }",
                "@@ -2048,3 +1979,3 @@ public class ObjectMapper",
                "     public JsonGenerator createGenerator(DataOutput out) throws IOException {",
                "-        return _jsonFactory.createGenerator(_serializerProvider(), out);",
                "+        return _streamFactory.createGenerator(_serializerProvider(), out);",
                "     }",
                "@@ -2276,3 +2207,3 @@ public class ObjectMapper",
                "         DeserializationContext ctxt = createDeserializationContext();",
                "-        return _readTreeAndClose(ctxt, _jsonFactory.createParser(ctxt, in));",
                "+        return _readTreeAndClose(ctxt, _streamFactory.createParser(ctxt, in));",
                "     }",
                "@@ -2304,3 +2235,3 @@ public class ObjectMapper",
                "         DeserializationContext ctxt = createDeserializationContext();",
                "-        return _readTreeAndClose(ctxt, _jsonFactory.createParser(ctxt, r));",
                "+        return _readTreeAndClose(ctxt, _streamFactory.createParser(ctxt, r));",
                "     }",
                "@@ -2332,3 +2263,3 @@ public class ObjectMapper",
                "         DeserializationContext ctxt = createDeserializationContext();",
                "-        return _readTreeAndClose(ctxt, _jsonFactory.createParser(ctxt, content));",
                "+        return _readTreeAndClose(ctxt, _streamFactory.createParser(ctxt, content));",
                "     }",
                "@@ -2353,3 +2284,3 @@ public class ObjectMapper",
                "         DeserializationContext ctxt = createDeserializationContext();",
                "-        return _readTreeAndClose(ctxt, _jsonFactory.createParser(ctxt, content));",
                "+        return _readTreeAndClose(ctxt, _streamFactory.createParser(ctxt, content));",
                "     }",
                "@@ -2380,3 +2311,3 @@ public class ObjectMapper",
                "         DeserializationContext ctxt = createDeserializationContext();",
                "-        return _readTreeAndClose(ctxt, _jsonFactory.createParser(ctxt, file));",
                "+        return _readTreeAndClose(ctxt, _streamFactory.createParser(ctxt, file));",
                "     }",
                "@@ -2405,3 +2336,3 @@ public class ObjectMapper",
                "         DeserializationContext ctxt = createDeserializationContext();",
                "-        return _readTreeAndClose(ctxt, _jsonFactory.createParser(ctxt, source));",
                "+        return _readTreeAndClose(ctxt, _streamFactory.createParser(ctxt, source));",
                "     }",
                "@@ -2615,3 +2546,3 @@ public class ObjectMapper",
                "         DefaultDeserializationContext ctxt = createDeserializationContext();",
                "-        return (T) _readMapAndClose(ctxt, _jsonFactory.createParser(ctxt, src),",
                "+        return (T) _readMapAndClose(ctxt, _streamFactory.createParser(ctxt, src),",
                "                 _typeFactory.constructType(valueType));",
                "@@ -2636,3 +2567,3 @@ public class ObjectMapper",
                "         DefaultDeserializationContext ctxt = createDeserializationContext();",
                "-        return (T) _readMapAndClose(ctxt, _jsonFactory.createParser(ctxt, src),",
                "+        return (T) _readMapAndClose(ctxt, _streamFactory.createParser(ctxt, src),",
                "                 _typeFactory.constructType(valueTypeRef));",
                "@@ -2657,3 +2588,3 @@ public class ObjectMapper",
                "         DefaultDeserializationContext ctxt = createDeserializationContext();",
                "-        return (T) _readMapAndClose(ctxt, _jsonFactory.createParser(ctxt, src), valueType);",
                "+        return (T) _readMapAndClose(ctxt, _streamFactory.createParser(ctxt, src), valueType);",
                "     }",
                "@@ -2678,3 +2609,3 @@ public class ObjectMapper",
                "         return (T) _readMapAndClose(ctxt,",
                "-                _jsonFactory.createParser(ctxt, src), _typeFactory.constructType(valueType));",
                "+                _streamFactory.createParser(ctxt, src), _typeFactory.constructType(valueType));",
                "     } ",
                "@@ -2699,3 +2630,3 @@ public class ObjectMapper",
                "         return (T) _readMapAndClose(ctxt,",
                "-                _jsonFactory.createParser(ctxt, src), _typeFactory.constructType(valueTypeRef));",
                "+                _streamFactory.createParser(ctxt, src), _typeFactory.constructType(valueTypeRef));",
                "     } ",
                "@@ -2708,3 +2639,3 @@ public class ObjectMapper",
                "         return (T) _readMapAndClose(ctxt,",
                "-                _jsonFactory.createParser(ctxt, src), valueType);",
                "+                _streamFactory.createParser(ctxt, src), valueType);",
                "     } ",
                "@@ -2729,3 +2660,3 @@ public class ObjectMapper",
                "         return (T) _readMapAndClose(ctxt,",
                "-                _jsonFactory.createParser(ctxt, content), _typeFactory.constructType(valueType));",
                "+                _streamFactory.createParser(ctxt, content), _typeFactory.constructType(valueType));",
                "     } ",
                "@@ -2750,3 +2681,3 @@ public class ObjectMapper",
                "         return (T) _readMapAndClose(ctxt,",
                "-                _jsonFactory.createParser(ctxt, content), _typeFactory.constructType(valueTypeRef));",
                "+                _streamFactory.createParser(ctxt, content), _typeFactory.constructType(valueTypeRef));",
                "     } ",
                "@@ -2771,3 +2702,3 @@ public class ObjectMapper",
                "         return (T) _readMapAndClose(ctxt,",
                "-                _jsonFactory.createParser(ctxt, content), valueType);",
                "+                _streamFactory.createParser(ctxt, content), valueType);",
                "     }",
                "@@ -2780,3 +2711,3 @@ public class ObjectMapper",
                "         return (T) _readMapAndClose(ctxt,",
                "-                _jsonFactory.createParser(ctxt, src), _typeFactory.constructType(valueType));",
                "+                _streamFactory.createParser(ctxt, src), _typeFactory.constructType(valueType));",
                "     }",
                "@@ -2789,3 +2720,3 @@ public class ObjectMapper",
                "         return (T) _readMapAndClose(ctxt,",
                "-                _jsonFactory.createParser(ctxt, src), _typeFactory.constructType(valueTypeRef));",
                "+                _streamFactory.createParser(ctxt, src), _typeFactory.constructType(valueTypeRef));",
                "     }",
                "@@ -2798,3 +2729,3 @@ public class ObjectMapper",
                "         return (T) _readMapAndClose(ctxt,",
                "-                _jsonFactory.createParser(ctxt, src), valueType);",
                "+                _streamFactory.createParser(ctxt, src), valueType);",
                "     }",
                "@@ -2807,3 +2738,3 @@ public class ObjectMapper",
                "         return (T) _readMapAndClose(ctxt,",
                "-                _jsonFactory.createParser(ctxt, src), _typeFactory.constructType(valueType));",
                "+                _streamFactory.createParser(ctxt, src), _typeFactory.constructType(valueType));",
                "     }",
                "@@ -2816,3 +2747,3 @@ public class ObjectMapper",
                "         return (T) _readMapAndClose(ctxt,",
                "-                _jsonFactory.createParser(ctxt, src), _typeFactory.constructType(valueTypeRef));",
                "+                _streamFactory.createParser(ctxt, src), _typeFactory.constructType(valueTypeRef));",
                "     }",
                "@@ -2825,3 +2756,3 @@ public class ObjectMapper",
                "         return (T) _readMapAndClose(ctxt,",
                "-                _jsonFactory.createParser(ctxt, src), valueType);",
                "+                _streamFactory.createParser(ctxt, src), valueType);",
                "     }",
                "@@ -2834,3 +2765,3 @@ public class ObjectMapper",
                "         return (T) _readMapAndClose(ctxt,",
                "-                _jsonFactory.createParser(ctxt, src), _typeFactory.constructType(valueType));",
                "+                _streamFactory.createParser(ctxt, src), _typeFactory.constructType(valueType));",
                "     }",
                "@@ -2844,3 +2775,3 @@ public class ObjectMapper",
                "         return (T) _readMapAndClose(ctxt,",
                "-                _jsonFactory.createParser(ctxt, src, offset, len), _typeFactory.constructType(valueType));",
                "+                _streamFactory.createParser(ctxt, src, offset, len), _typeFactory.constructType(valueType));",
                "     }",
                "@@ -2853,3 +2784,3 @@ public class ObjectMapper",
                "         return (T) _readMapAndClose(ctxt,",
                "-                _jsonFactory.createParser(ctxt, src), _typeFactory.constructType(valueTypeRef));",
                "+                _streamFactory.createParser(ctxt, src), _typeFactory.constructType(valueTypeRef));",
                "     }",
                "@@ -2863,3 +2794,3 @@ public class ObjectMapper",
                "         return (T) _readMapAndClose(ctxt,",
                "-                _jsonFactory.createParser(ctxt, src, offset, len), _typeFactory.constructType(valueTypeRef));",
                "+                _streamFactory.createParser(ctxt, src, offset, len), _typeFactory.constructType(valueTypeRef));",
                "     }",
                "@@ -2872,3 +2803,3 @@ public class ObjectMapper",
                "         return (T) _readMapAndClose(ctxt,",
                "-                _jsonFactory.createParser(ctxt, src), valueType);",
                "+                _streamFactory.createParser(ctxt, src), valueType);",
                "     }",
                "@@ -2882,3 +2813,3 @@ public class ObjectMapper",
                "         return (T) _readMapAndClose(ctxt,",
                "-                _jsonFactory.createParser(ctxt, src, offset, len), valueType);",
                "+                _streamFactory.createParser(ctxt, src, offset, len), valueType);",
                "     } ",
                "@@ -2890,3 +2821,3 @@ public class ObjectMapper",
                "         return (T) _readMapAndClose(ctxt,",
                "-                _jsonFactory.createParser(ctxt, src), _typeFactory.constructType(valueType));",
                "+                _streamFactory.createParser(ctxt, src), _typeFactory.constructType(valueType));",
                "     }",
                "@@ -2898,3 +2829,3 @@ public class ObjectMapper",
                "         return (T) _readMapAndClose(ctxt,",
                "-                _jsonFactory.createParser(ctxt, src), valueType);",
                "+                _streamFactory.createParser(ctxt, src), valueType);",
                "     }",
                "@@ -2917,3 +2848,3 @@ public class ObjectMapper",
                "         _configAndWriteValue(prov,",
                "-                _jsonFactory.createGenerator(prov, resultFile, JsonEncoding.UTF8), value);",
                "+                _streamFactory.createGenerator(prov, resultFile, JsonEncoding.UTF8), value);",
                "     }",
                "@@ -2936,3 +2867,3 @@ public class ObjectMapper",
                "         _configAndWriteValue(prov,",
                "-                _jsonFactory.createGenerator(prov, out, JsonEncoding.UTF8), value);",
                "+                _streamFactory.createGenerator(prov, out, JsonEncoding.UTF8), value);",
                "     }",
                "@@ -2944,3 +2875,3 @@ public class ObjectMapper",
                "         _configAndWriteValue(prov,",
                "-                _jsonFactory.createGenerator(prov, out), value);",
                "+                _streamFactory.createGenerator(prov, out), value);",
                "     }",
                "@@ -2961,3 +2892,3 @@ public class ObjectMapper",
                "         DefaultSerializerProvider prov = _serializerProvider();",
                "-        _configAndWriteValue(prov, _jsonFactory.createGenerator(prov, w), value);",
                "+        _configAndWriteValue(prov, _streamFactory.createGenerator(prov, w), value);",
                "     }",
                "@@ -2975,6 +2906,6 @@ public class ObjectMapper",
                "         // alas, we have to pull the recycler directly here...",
                "-        SegmentedStringWriter sw = new SegmentedStringWriter(_jsonFactory._getBufferRecycler());",
                "+        SegmentedStringWriter sw = new SegmentedStringWriter(_streamFactory._getBufferRecycler());",
                "         DefaultSerializerProvider prov = _serializerProvider();",
                "         try {",
                "-            _configAndWriteValue(prov, _jsonFactory.createGenerator(prov, sw), value);",
                "+            _configAndWriteValue(prov, _streamFactory.createGenerator(prov, sw), value);",
                "         } catch (JsonProcessingException e) {",
                "@@ -2999,6 +2930,6 @@ public class ObjectMapper",
                "         DefaultSerializerProvider prov = _serializerProvider();",
                "-        ByteArrayBuilder bb = new ByteArrayBuilder(_jsonFactory._getBufferRecycler());",
                "+        ByteArrayBuilder bb = new ByteArrayBuilder(_streamFactory._getBufferRecycler());",
                "         try {",
                "             _configAndWriteValue(prov,",
                "-                    _jsonFactory.createGenerator(prov, bb, JsonEncoding.UTF8), value);",
                "+                    _streamFactory.createGenerator(prov, bb, JsonEncoding.UTF8), value);",
                "         } catch (JsonProcessingException e) {",
                "@@ -3910,5 +3841,5 @@ public class ObjectMapper",
                "         if (schema != null) {",
                "-            if (!_jsonFactory.canUseSchema(schema)) {",
                "+            if (!_streamFactory.canUseSchema(schema)) {",
                "                     throw new IllegalArgumentException(\"Cannot use FormatSchema of type \"+schema.getClass().getName()",
                "-                            +\" for format \"+_jsonFactory.getFormatName());",
                "+                            +\" for format \"+_streamFactory.getFormatName());",
                "             }",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java b/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java",
                "index 6973138f8..27746e13f 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java",
                "@@ -164,3 +164,3 @@ public class ObjectReader",
                "         _rootDeserializers = mapper._rootDeserializers;",
                "-        _parserFactory = mapper._jsonFactory;",
                "+        _parserFactory = mapper._streamFactory;",
                "         _valueType = valueType;",
                "diff --git a/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java b/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java",
                "index a55059c4b..418c25381 100644",
                "--- a/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java",
                "@@ -92,3 +92,3 @@ public class ObjectWriter",
                "         _serializerFactory = mapper._serializerFactory;",
                "-        _generatorFactory = mapper._jsonFactory;",
                "+        _generatorFactory = mapper._streamFactory;",
                "         _generatorSettings = (pp == null) ? GeneratorSettings.empty",
                "@@ -113,3 +113,3 @@ public class ObjectWriter",
                "         _serializerFactory = mapper._serializerFactory;",
                "-        _generatorFactory = mapper._jsonFactory;",
                "+        _generatorFactory = mapper._streamFactory;",
                "@@ -129,3 +129,3 @@ public class ObjectWriter",
                "         _serializerFactory = mapper._serializerFactory;",
                "-        _generatorFactory = mapper._jsonFactory;",
                "+        _generatorFactory = mapper._streamFactory;"
            ],
            "changed_files": [
                "src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java",
                "src/main/java/com/fasterxml/jackson/databind/Module.java",
                "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
                "src/main/java/com/fasterxml/jackson/databind/ObjectReader.java",
                "src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/com/fasterxml/jackson/databind/MapperBuilder.java, src/main/java/com/fasterxml/jackson/databind/ObjectReader.java, src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java, src/main/java/com/fasterxml/jackson/databind/Module.java, src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "fd14aab77e7f9757ada8a4b3a81bf9707b278661",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1516766814,
            "hunks": 2,
            "message": "[maven-release-plugin] prepare for next development iteration",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index cb1072238..fa756d806 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -12,3 +12,3 @@",
                "   <artifactId>jackson-databind</artifactId>",
                "-  <version>2.9.4</version>",
                "+  <version>2.9.5-SNAPSHOT</version>",
                "   <name>jackson-databind</name>",
                "@@ -23,3 +23,3 @@",
                "     <url>http://github.com/FasterXML/jackson-databind</url>",
                "-    <tag>jackson-databind-2.9.4</tag>",
                "+    <tag>HEAD</tag>",
                "   </scm>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "jackson-databind-2.10.0",
                "jackson-databind-2.10.0.pr1",
                "jackson-databind-2.10.0.pr2",
                "jackson-databind-2.10.0.pr3",
                "jackson-databind-2.10.1",
                "jackson-databind-2.10.2",
                "jackson-databind-2.10.3",
                "jackson-databind-2.10.4",
                "jackson-databind-2.10.5",
                "jackson-databind-2.10.5.1",
                "jackson-databind-2.11.0",
                "jackson-databind-2.11.0.rc1",
                "jackson-databind-2.11.1",
                "jackson-databind-2.11.2",
                "jackson-databind-2.11.3",
                "jackson-databind-2.11.4",
                "jackson-databind-2.12.0",
                "jackson-databind-2.12.0-rc1",
                "jackson-databind-2.12.0-rc2",
                "jackson-databind-2.12.1",
                "jackson-databind-2.12.2",
                "jackson-databind-2.12.3",
                "jackson-databind-2.12.4",
                "jackson-databind-2.12.5",
                "jackson-databind-2.12.6",
                "jackson-databind-2.12.6.1",
                "jackson-databind-2.12.7",
                "jackson-databind-2.12.7.1",
                "jackson-databind-2.12.7.2",
                "jackson-databind-2.13.0",
                "jackson-databind-2.13.0-rc1",
                "jackson-databind-2.13.0-rc2",
                "jackson-databind-2.13.1",
                "jackson-databind-2.13.2",
                "jackson-databind-2.13.2.1",
                "jackson-databind-2.13.2.2",
                "jackson-databind-2.13.3",
                "jackson-databind-2.13.4",
                "jackson-databind-2.13.4.1",
                "jackson-databind-2.13.4.2",
                "jackson-databind-2.13.5",
                "jackson-databind-2.14.0",
                "jackson-databind-2.14.0-rc1",
                "jackson-databind-2.14.0-rc2",
                "jackson-databind-2.14.0-rc3",
                "jackson-databind-2.14.1",
                "jackson-databind-2.14.2",
                "jackson-databind-2.14.3",
                "jackson-databind-2.15.0",
                "jackson-databind-2.15.0-rc1",
                "jackson-databind-2.15.0-rc2",
                "jackson-databind-2.15.0-rc3",
                "jackson-databind-2.15.1",
                "jackson-databind-2.15.2",
                "jackson-databind-2.15.3",
                "jackson-databind-2.15.4",
                "jackson-databind-2.16.0",
                "jackson-databind-2.16.0-rc1",
                "jackson-databind-2.16.1",
                "jackson-databind-2.16.2",
                "jackson-databind-2.17.0",
                "jackson-databind-2.17.0-rc1",
                "jackson-databind-2.17.1",
                "jackson-databind-2.17.2",
                "jackson-databind-2.9.10",
                "jackson-databind-2.9.10.1",
                "jackson-databind-2.9.10.2",
                "jackson-databind-2.9.10.3",
                "jackson-databind-2.9.10.4",
                "jackson-databind-2.9.10.5",
                "jackson-databind-2.9.10.6",
                "jackson-databind-2.9.10.7",
                "jackson-databind-2.9.10.8",
                "jackson-databind-2.9.5",
                "jackson-databind-2.9.6",
                "jackson-databind-2.9.7",
                "jackson-databind-2.9.8",
                "jackson-databind-2.9.9",
                "jackson-databind-2.9.9.1",
                "jackson-databind-2.9.9.2",
                "jackson-databind-2.9.9.3"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: FasterXML",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "8b1b40f3a8ab910a065d216e71cd40e7f0828415",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1516766804,
            "hunks": 2,
            "message": "[maven-release-plugin] prepare release jackson-databind-2.9.4",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 6c161790b..cb1072238 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -12,3 +12,3 @@",
                "   <artifactId>jackson-databind</artifactId>",
                "-  <version>2.9.4-SNAPSHOT</version>",
                "+  <version>2.9.4</version>",
                "   <name>jackson-databind</name>",
                "@@ -23,3 +23,3 @@",
                "     <url>http://github.com/FasterXML/jackson-databind</url>",
                "-    <tag>HEAD</tag>",
                "+    <tag>jackson-databind-2.9.4</tag>",
                "   </scm>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "jackson-databind-2.10.0",
                "jackson-databind-2.10.0.pr1",
                "jackson-databind-2.10.0.pr2",
                "jackson-databind-2.10.0.pr3",
                "jackson-databind-2.10.1",
                "jackson-databind-2.10.2",
                "jackson-databind-2.10.3",
                "jackson-databind-2.10.4",
                "jackson-databind-2.10.5",
                "jackson-databind-2.10.5.1",
                "jackson-databind-2.11.0",
                "jackson-databind-2.11.0.rc1",
                "jackson-databind-2.11.1",
                "jackson-databind-2.11.2",
                "jackson-databind-2.11.3",
                "jackson-databind-2.11.4",
                "jackson-databind-2.12.0",
                "jackson-databind-2.12.0-rc1",
                "jackson-databind-2.12.0-rc2",
                "jackson-databind-2.12.1",
                "jackson-databind-2.12.2",
                "jackson-databind-2.12.3",
                "jackson-databind-2.12.4",
                "jackson-databind-2.12.5",
                "jackson-databind-2.12.6",
                "jackson-databind-2.12.6.1",
                "jackson-databind-2.12.7",
                "jackson-databind-2.12.7.1",
                "jackson-databind-2.12.7.2",
                "jackson-databind-2.13.0",
                "jackson-databind-2.13.0-rc1",
                "jackson-databind-2.13.0-rc2",
                "jackson-databind-2.13.1",
                "jackson-databind-2.13.2",
                "jackson-databind-2.13.2.1",
                "jackson-databind-2.13.2.2",
                "jackson-databind-2.13.3",
                "jackson-databind-2.13.4",
                "jackson-databind-2.13.4.1",
                "jackson-databind-2.13.4.2",
                "jackson-databind-2.13.5",
                "jackson-databind-2.14.0",
                "jackson-databind-2.14.0-rc1",
                "jackson-databind-2.14.0-rc2",
                "jackson-databind-2.14.0-rc3",
                "jackson-databind-2.14.1",
                "jackson-databind-2.14.2",
                "jackson-databind-2.14.3",
                "jackson-databind-2.15.0",
                "jackson-databind-2.15.0-rc1",
                "jackson-databind-2.15.0-rc2",
                "jackson-databind-2.15.0-rc3",
                "jackson-databind-2.15.1",
                "jackson-databind-2.15.2",
                "jackson-databind-2.15.3",
                "jackson-databind-2.15.4",
                "jackson-databind-2.16.0",
                "jackson-databind-2.16.0-rc1",
                "jackson-databind-2.16.1",
                "jackson-databind-2.16.2",
                "jackson-databind-2.17.0",
                "jackson-databind-2.17.0-rc1",
                "jackson-databind-2.17.1",
                "jackson-databind-2.17.2",
                "jackson-databind-2.9.10",
                "jackson-databind-2.9.10.1",
                "jackson-databind-2.9.10.2",
                "jackson-databind-2.9.10.3",
                "jackson-databind-2.9.10.4",
                "jackson-databind-2.9.10.5",
                "jackson-databind-2.9.10.6",
                "jackson-databind-2.9.10.7",
                "jackson-databind-2.9.10.8",
                "jackson-databind-2.9.4",
                "jackson-databind-2.9.5",
                "jackson-databind-2.9.6",
                "jackson-databind-2.9.7",
                "jackson-databind-2.9.8",
                "jackson-databind-2.9.9",
                "jackson-databind-2.9.9.1",
                "jackson-databind-2.9.9.2",
                "jackson-databind-2.9.9.3"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: FasterXML",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "b3c488bb11580baa90852ae58ceb225506f2de7b",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1517011306,
            "hunks": 0,
            "message": "Merge branch '2.9' of https://github.com/FasterXML/jackson-databind into 2.9",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "jackson-databind-2.10.0",
                "jackson-databind-2.10.0.pr1",
                "jackson-databind-2.10.0.pr2",
                "jackson-databind-2.10.0.pr3",
                "jackson-databind-2.10.1",
                "jackson-databind-2.10.2",
                "jackson-databind-2.10.3",
                "jackson-databind-2.10.4",
                "jackson-databind-2.10.5",
                "jackson-databind-2.10.5.1",
                "jackson-databind-2.11.0",
                "jackson-databind-2.11.0.rc1",
                "jackson-databind-2.11.1",
                "jackson-databind-2.11.2",
                "jackson-databind-2.11.3",
                "jackson-databind-2.11.4",
                "jackson-databind-2.12.0",
                "jackson-databind-2.12.0-rc1",
                "jackson-databind-2.12.0-rc2",
                "jackson-databind-2.12.1",
                "jackson-databind-2.12.2",
                "jackson-databind-2.12.3",
                "jackson-databind-2.12.4",
                "jackson-databind-2.12.5",
                "jackson-databind-2.12.6",
                "jackson-databind-2.12.6.1",
                "jackson-databind-2.12.7",
                "jackson-databind-2.12.7.1",
                "jackson-databind-2.12.7.2",
                "jackson-databind-2.13.0",
                "jackson-databind-2.13.0-rc1",
                "jackson-databind-2.13.0-rc2",
                "jackson-databind-2.13.1",
                "jackson-databind-2.13.2",
                "jackson-databind-2.13.2.1",
                "jackson-databind-2.13.2.2",
                "jackson-databind-2.13.3",
                "jackson-databind-2.13.4",
                "jackson-databind-2.13.4.1",
                "jackson-databind-2.13.4.2",
                "jackson-databind-2.13.5",
                "jackson-databind-2.14.0",
                "jackson-databind-2.14.0-rc1",
                "jackson-databind-2.14.0-rc2",
                "jackson-databind-2.14.0-rc3",
                "jackson-databind-2.14.1",
                "jackson-databind-2.14.2",
                "jackson-databind-2.14.3",
                "jackson-databind-2.15.0",
                "jackson-databind-2.15.0-rc1",
                "jackson-databind-2.15.0-rc2",
                "jackson-databind-2.15.0-rc3",
                "jackson-databind-2.15.1",
                "jackson-databind-2.15.2",
                "jackson-databind-2.15.3",
                "jackson-databind-2.15.4",
                "jackson-databind-2.16.0",
                "jackson-databind-2.16.0-rc1",
                "jackson-databind-2.16.1",
                "jackson-databind-2.16.2",
                "jackson-databind-2.17.0",
                "jackson-databind-2.17.0-rc1",
                "jackson-databind-2.17.1",
                "jackson-databind-2.17.2",
                "jackson-databind-2.9.10",
                "jackson-databind-2.9.10.1",
                "jackson-databind-2.9.10.2",
                "jackson-databind-2.9.10.3",
                "jackson-databind-2.9.10.4",
                "jackson-databind-2.9.10.5",
                "jackson-databind-2.9.10.6",
                "jackson-databind-2.9.10.7",
                "jackson-databind-2.9.10.8",
                "jackson-databind-2.9.5",
                "jackson-databind-2.9.6",
                "jackson-databind-2.9.7",
                "jackson-databind-2.9.8",
                "jackson-databind-2.9.9",
                "jackson-databind-2.9.9.1",
                "jackson-databind-2.9.9.2",
                "jackson-databind-2.9.9.3"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "1dc9596c8c17dadb33153ed571e668ac67314c7b",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1516674077,
            "hunks": 0,
            "message": "Merge branch 'master' of github.com:FasterXML/jackson-databind",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "20a1b6bc2d0ff719f2163097ae3a5e47bde3b42c",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1516752460,
            "hunks": 0,
            "message": "Merge branch '2.9' of https://github.com/FasterXML/jackson-databind into 2.9",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "jackson-databind-2.10.0",
                "jackson-databind-2.10.0.pr1",
                "jackson-databind-2.10.0.pr2",
                "jackson-databind-2.10.0.pr3",
                "jackson-databind-2.10.1",
                "jackson-databind-2.10.2",
                "jackson-databind-2.10.3",
                "jackson-databind-2.10.4",
                "jackson-databind-2.10.5",
                "jackson-databind-2.10.5.1",
                "jackson-databind-2.11.0",
                "jackson-databind-2.11.0.rc1",
                "jackson-databind-2.11.1",
                "jackson-databind-2.11.2",
                "jackson-databind-2.11.3",
                "jackson-databind-2.11.4",
                "jackson-databind-2.12.0",
                "jackson-databind-2.12.0-rc1",
                "jackson-databind-2.12.0-rc2",
                "jackson-databind-2.12.1",
                "jackson-databind-2.12.2",
                "jackson-databind-2.12.3",
                "jackson-databind-2.12.4",
                "jackson-databind-2.12.5",
                "jackson-databind-2.12.6",
                "jackson-databind-2.12.6.1",
                "jackson-databind-2.12.7",
                "jackson-databind-2.12.7.1",
                "jackson-databind-2.12.7.2",
                "jackson-databind-2.13.0",
                "jackson-databind-2.13.0-rc1",
                "jackson-databind-2.13.0-rc2",
                "jackson-databind-2.13.1",
                "jackson-databind-2.13.2",
                "jackson-databind-2.13.2.1",
                "jackson-databind-2.13.2.2",
                "jackson-databind-2.13.3",
                "jackson-databind-2.13.4",
                "jackson-databind-2.13.4.1",
                "jackson-databind-2.13.4.2",
                "jackson-databind-2.13.5",
                "jackson-databind-2.14.0",
                "jackson-databind-2.14.0-rc1",
                "jackson-databind-2.14.0-rc2",
                "jackson-databind-2.14.0-rc3",
                "jackson-databind-2.14.1",
                "jackson-databind-2.14.2",
                "jackson-databind-2.14.3",
                "jackson-databind-2.15.0",
                "jackson-databind-2.15.0-rc1",
                "jackson-databind-2.15.0-rc2",
                "jackson-databind-2.15.0-rc3",
                "jackson-databind-2.15.1",
                "jackson-databind-2.15.2",
                "jackson-databind-2.15.3",
                "jackson-databind-2.15.4",
                "jackson-databind-2.16.0",
                "jackson-databind-2.16.0-rc1",
                "jackson-databind-2.16.1",
                "jackson-databind-2.16.2",
                "jackson-databind-2.17.0",
                "jackson-databind-2.17.0-rc1",
                "jackson-databind-2.17.1",
                "jackson-databind-2.17.2",
                "jackson-databind-2.9.10",
                "jackson-databind-2.9.10.1",
                "jackson-databind-2.9.10.2",
                "jackson-databind-2.9.10.3",
                "jackson-databind-2.9.10.4",
                "jackson-databind-2.9.10.5",
                "jackson-databind-2.9.10.6",
                "jackson-databind-2.9.10.7",
                "jackson-databind-2.9.10.8",
                "jackson-databind-2.9.4",
                "jackson-databind-2.9.5",
                "jackson-databind-2.9.6",
                "jackson-databind-2.9.7",
                "jackson-databind-2.9.8",
                "jackson-databind-2.9.9",
                "jackson-databind-2.9.9.1",
                "jackson-databind-2.9.9.2",
                "jackson-databind-2.9.9.3"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: fasterxml",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "affd0c701e9f97bb7905f77b63ce99d2bce2d8f6",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1516763710,
            "hunks": 3,
            "message": "prepare for 2.9.4",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 9e47ff655..6c161790b 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -7,3 +7,3 @@",
                "     <artifactId>jackson-base</artifactId>",
                "-    <version>2.9.4-SNAPSHOT</version>",
                "+    <version>2.9.4</version>",
                "   </parent>",
                "diff --git a/release-notes/VERSION-2.x b/release-notes/VERSION-2.x",
                "index 1e12adc16..a4b9ca943 100644",
                "--- a/release-notes/VERSION-2.x",
                "+++ b/release-notes/VERSION-2.x",
                "@@ -1,8 +1,8 @@",
                "-------------------------------------------------------------------------",
                " Project: jackson-databind",
                "-------------------------------------------------------------------------",
                "+------------------------------------------------------------------------",
                " === Releases === ",
                "+------------------------------------------------------------------------",
                "-2.9.4 (not yet released)",
                "+2.9.4 (24-Jan-2018)"
            ],
            "changed_files": [
                "pom.xml",
                "release-notes/VERSION-2.x"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "jackson-databind-2.10.0",
                "jackson-databind-2.10.0.pr1",
                "jackson-databind-2.10.0.pr2",
                "jackson-databind-2.10.0.pr3",
                "jackson-databind-2.10.1",
                "jackson-databind-2.10.2",
                "jackson-databind-2.10.3",
                "jackson-databind-2.10.4",
                "jackson-databind-2.10.5",
                "jackson-databind-2.10.5.1",
                "jackson-databind-2.11.0",
                "jackson-databind-2.11.0.rc1",
                "jackson-databind-2.11.1",
                "jackson-databind-2.11.2",
                "jackson-databind-2.11.3",
                "jackson-databind-2.11.4",
                "jackson-databind-2.12.0",
                "jackson-databind-2.12.0-rc1",
                "jackson-databind-2.12.0-rc2",
                "jackson-databind-2.12.1",
                "jackson-databind-2.12.2",
                "jackson-databind-2.12.3",
                "jackson-databind-2.12.4",
                "jackson-databind-2.12.5",
                "jackson-databind-2.12.6",
                "jackson-databind-2.12.6.1",
                "jackson-databind-2.12.7",
                "jackson-databind-2.12.7.1",
                "jackson-databind-2.12.7.2",
                "jackson-databind-2.13.0",
                "jackson-databind-2.13.0-rc1",
                "jackson-databind-2.13.0-rc2",
                "jackson-databind-2.13.1",
                "jackson-databind-2.13.2",
                "jackson-databind-2.13.2.1",
                "jackson-databind-2.13.2.2",
                "jackson-databind-2.13.3",
                "jackson-databind-2.13.4",
                "jackson-databind-2.13.4.1",
                "jackson-databind-2.13.4.2",
                "jackson-databind-2.13.5",
                "jackson-databind-2.14.0",
                "jackson-databind-2.14.0-rc1",
                "jackson-databind-2.14.0-rc2",
                "jackson-databind-2.14.0-rc3",
                "jackson-databind-2.14.1",
                "jackson-databind-2.14.2",
                "jackson-databind-2.14.3",
                "jackson-databind-2.15.0",
                "jackson-databind-2.15.0-rc1",
                "jackson-databind-2.15.0-rc2",
                "jackson-databind-2.15.0-rc3",
                "jackson-databind-2.15.1",
                "jackson-databind-2.15.2",
                "jackson-databind-2.15.3",
                "jackson-databind-2.15.4",
                "jackson-databind-2.16.0",
                "jackson-databind-2.16.0-rc1",
                "jackson-databind-2.16.1",
                "jackson-databind-2.16.2",
                "jackson-databind-2.17.0",
                "jackson-databind-2.17.0-rc1",
                "jackson-databind-2.17.1",
                "jackson-databind-2.17.2",
                "jackson-databind-2.9.10",
                "jackson-databind-2.9.10.1",
                "jackson-databind-2.9.10.2",
                "jackson-databind-2.9.10.3",
                "jackson-databind-2.9.10.4",
                "jackson-databind-2.9.10.5",
                "jackson-databind-2.9.10.6",
                "jackson-databind-2.9.10.7",
                "jackson-databind-2.9.10.8",
                "jackson-databind-2.9.4",
                "jackson-databind-2.9.5",
                "jackson-databind-2.9.6",
                "jackson-databind-2.9.7",
                "jackson-databind-2.9.8",
                "jackson-databind-2.9.9",
                "jackson-databind-2.9.9.1",
                "jackson-databind-2.9.9.2",
                "jackson-databind-2.9.9.3"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "e756ce29a156a26eda93f32760304498b49ac874",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1516169721,
            "hunks": 0,
            "message": "Merge branch '2.9'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": []
        },
        {
            "commit_id": "bd5b411b023b72fbb5126649a65d848e011b2bdc",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1516171398,
            "hunks": 0,
            "message": "Merge branch '2.9'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": []
        },
        {
            "commit_id": "f42b0dcf247b3abeab77a785548a4e7e6500909b",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1516754335,
            "hunks": 5,
            "message": "Merge branch '2.9'",
            "diff": [
                "diff --cc src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
                "index f6b5cf72f,c105307eb..743ef9f02",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
                "@@@ -338,14 -348,4 +345,11 @@@ public class BeanDeserializerBuilde",
                "      {",
                "-         _fixAccess(_properties.values());",
                "-         Collection<SettableBeanProperty> props;",
                "+         Collection<SettableBeanProperty> props = _properties.values();",
                "+         _fixAccess(props);",
                " +        if (_objectIdReader != null) {",
                " +            // 18-Nov-2012, tatu: May or may not have annotations for id property;",
                " +            //   but no easy access. But hard to see id property being optional,",
                " +            //   so let's consider required at this point.",
                " +            props = _addIdProp(_properties,",
                " +                    new ObjectIdValueProperty(_objectIdReader, PropertyMetadata.STD_REQUIRED));",
                "-         } else {",
                "-             props = _properties.values();",
                " +        }",
                "- ",
                "          BeanPropertyMap propertyMap = BeanPropertyMap.construct(props,",
                "diff --cc src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.java",
                "index e2a06d7c4,566b54f00..660974ebd",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.java",
                "@@@ -82,4 -86,7 +85,7 @@@ public final class PropertyBasedCreato",
                "              SettableBeanProperty prop = creatorProps[i];",
                " -            _allProperties[i] = prop;",
                " +            _propertiesInOrder[i] = prop;",
                "-             _propertyLookup.put(prop.getName(), prop);",
                "+             // 22-Jan-2018, tatu: ignorable entries should be skipped",
                "+             if (!prop.isIgnorable()) {",
                "+                 _propertyLookup.put(prop.getName(), prop);",
                "+             }",
                "          }",
                "diff --cc src/main/java/com/fasterxml/jackson/databind/deser/std/ThrowableDeserializer.java",
                "index cc6fb27a4,d2e8c6782..f51f2b9b2",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/ThrowableDeserializer.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/ThrowableDeserializer.java",
                "@@@ -122,5 -107,4 +122,6 @@@ public class ThrowableDeserialize",
                "              // Maybe it's \"message\"?",
                " +            String propName = p.currentName();",
                " +            p.nextToken();",
                "-             if (PROP_NAME_MESSAGE.equals(propName)) {",
                "+             final boolean isMessage = PROP_NAME_MESSAGE.equals(propName);",
                "+             if (isMessage) {",
                "                  if (hasStringCreator) {"
            ],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": []
        },
        {
            "commit_id": "140db880c8389bab641fc9f8b53d7d642a392bcf",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1517011333,
            "hunks": 0,
            "message": "Merge branch '2.9'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": []
        },
        {
            "commit_id": "5adc27965a6caa60e2ad411bbf84a6bac0cb9b0a",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1516674205,
            "hunks": 0,
            "message": "Merge branch '2.9'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": []
        },
        {
            "commit_id": "0d2adc3ffc004936a4870a72e4c63f8a90c4acb6",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1516167848,
            "hunks": 0,
            "message": "Merge branch '2.9'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": []
        },
        {
            "commit_id": "3d0ee3641a78644ccb307be12fb7f8596aa513d0",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1516051356,
            "hunks": 2,
            "message": "Merge branch '2.9'",
            "diff": [
                "diff --cc release-notes/CREDITS",
                "index 1b7782754,2ebbba052..38bf108d7",
                "--- a/release-notes/CREDITS",
                "+++ b/release-notes/CREDITS",
                "@@@ -7,2 -7,729 +7,1 @@@ Version numbers in brackets indicate re",
                "  Tatu Saloranta, tatu.saloranta@iki.fi: author",
                " -",
                " -Pascal G\u00c2\u008elinas:",
                " -  * Contributed fixes to 'MappingIterator' handling (Pull#58 and Pull#59)",
                " -   (2.1.0)",
                " -  * Reported #220: ContainerNode missing 'createNumber(BigInteger)'",
                " -   (2.2.2)",
                " -",
                " -Joern Huxhorn: (huxi@github)",
                " -  * Suggested [JACKSON-636]: Add 'SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS' to allow",
                " -    forced sorting of Maps during serialization",
                " -   (2.0.0)",
                " -  * Reported #479: NPE on trying to deserialize a `String[]` that contains null",
                " -   (2.4.1)",
                " -  * Reported #1411: MapSerializer._orderEntries should check for null keys",
                " -   (2.7.9)",
                " -",
                " -James Roper:",
                " - * Requested [JACKSON-732]: Allow 'AnnotationIntrospector.findContentDeserializer()'",
                " -    (and similar) to return instance, not just Class<?> for instance",
                " -  (2.0.0)",
                " - * Suggested [JACKSON-800]: Adding a method for letting modules register",
                " -    DeserializationProblemHandlers",
                " -  (2.0.0)",
                " -",
                " -Casey Lucas:",
                " - * Reported [JACKSON-798]: Problem with external type id, creators",
                " -  (2.0.0)",
                " -",
                " -Tammo van Lessen:",
                " - * Reported [JACKSON-811]: Problems with @JsonIdentityInfo, abstract types",
                " -  (2.0.0)",
                " - * Reported [JACKSON-814]: Parsing RFC822/RFC1123 dates failes on non-US locales",
                " -  (2.0.0)",
                " -",
                " -Raymond Myers:",
                " - * Suggested [JACKSON-810]: Deserialization Feature: Allow unknown Enum values via",
                " -    'DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL'",
                " -  (2.0.0)",
                " -",
                " -Ryan Gardner:",
                " - * Contributed #5 -- Add support for maps with java.util.Locale keys",
                " -    to the set of StdKeyDeserializers",
                " -  (2.0.1)",
                " -",
                " -Razvan Dragut:",
                " - * Suggested [JACKSON-850]: Allow use of zero-arg factory methods as \"default creator\"",
                " -  (2.1.0)",
                " -",
                " -Duncan Atkinson:",
                " - * Reported [JACKSON-851]: State corruption with ObjectWriter, DefaultPrettyPrinter",
                " -  (2.1.0)",
                " -",
                " -Mark Wolfe:",
                " - * Suggested #45: Add `@JsonNaming()` for per-class naming strategy overrides",
                " -  (2.1.0)",
                " -",
                " -Dmitry Katsubo:",
                " - * Contributed patch for #65: Add getters to `ObjectMapper`, DeserializationContext,",
                " -   DeserializationFactory.",
                " -  (2.1.0)",
                " -",
                " -Francis Galiegue:",
                " - * Reported #93 (and suggested fix): bug in `ObjectMapper.setAll(...)'",
                " -  implementation",
                " -  (2.1.1)",
                " - * Reported #433: `ObjectMapper`'s `.valueToTree()` wraps `JsonSerializable` objects",
                " -  into a POJONode",
                " -  (2.3.3)",
                " - * Contributed #434: Ensure that DecimalNodes with mathematically equal values are equal",
                " -  (2.4.0)",
                " -",
                " -kelaneren@github:",
                " - * Reported #157, contributed unit test: NPE when registering same module twice.",
                " -  (2.1.4)",
                " -",
                " -Eric Tschetter (cheddar@github):",
                " -  * Reported issues #166, #167, #170 (regressions from 1.9.x to 2.x)",
                " -   (2.1.4)",
                " -",
                " -Thierry D (thierryd@github)",
                " -  * Reported #214: Problem with LICENSE, NOTICE, Android packaging",
                " -   (2.2.2)",
                " -",
                " -Luke G-H (lukegh@github)",
                " -  * Reported #223: Duplicated nulls with @JsonFormat(shape=Shape.ARRAY)",
                " -   (2.2.2)",
                " -",
                " -Karl Moore (karldmoore@github)",
                " -  * Reported #217: JsonProcessingExceptions not all wrapped as expected",
                " -   (2.2.2)",
                " -",
                " -David Phillips:",
                " -  * Requested #308: Improve serialization and deserialization speed of `java.util.UUID`",
                " -   (2.3.0)",
                " -",
                " -Seth Pellegrino (jivesoft):",
                " -  * Contributed #317: Fix `JsonNode` support for nulls bound to\t`ObjectNode`, `ArrayNode`",
                " -   (2.3.0)",
                " -",
                " -Florian Schoppmann (fschopp@github)",
                " -  * Reported #357: StackOverflowError with contentConverter that returns array type",
                " -   (2.7.0)",
                " -  * Reported #358: `IterableSerializer` ignoring\tannotated content serializer",
                " -   (2.3.1)",
                " -  * Reported #359: Converted object not using explicitly annotated serializer",
                " -   (2.4.0)",
                " -",
                " -Martin Traverso:",
                " -  * Reported #406: Cannot use external type id + @JsonTypeIdResolver",
                " -   (2.3.2)",
                " -",
                " -Matthew Morrissette:",
                " -  * Contributed #381: Allow inlining/unwrapping of value from single-component JSON array",
                " -   (2.4.0)",
                " -",
                " -Will Palmeri: (wpalmeri@github)",
                " -  * Contributed #407: Make array and Collection serializers use configured value null handler",
                " -   (2.4.0)",
                " -",
                " -Cemalettin Koc: (cemo@github)",
                " -  * Reported #353: Problems with polymorphic types, `JsonNode` (related to #88)",
                " -   (2.4.0)",
                " -",
                " -Ben Fagin: (UnquietCode@github)",
                " -  * Suggested #442: Make `@JsonUnwrapped` indicate property inclusion",
                " -   (2.4.0)",
                " -  * Contributed #81/#455: Allow use of @JsonUnwrapped with typed (@JsonTypeInfo) classes,",
                " -    provided that (new) feature `SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS`",
                " -    is disabled",
                " -   (2.4.0)",
                " -",
                " -Chris Cleveland:",
                " -  * Suggested #463: Add 'JsonNode.asText(String defaultValue)`",
                " -   (2.4.0)",
                " -",
                " -Benson Margulies:",
                " -  * Reported #467: Unwanted POJO's embedded in tree via serialization to tree",
                " -   (2.4.0)",
                " -  * Reported #601: ClassCastException for a custom serializer for enum key in `EnumMap`",
                " -   (2.4.4)",
                " -  * Contributed 944: Failure to use custom deserializer for key deserializer",
                " -   (2.6.3)",
                " -  * Reported #1120: String value omitted from weirdStringException",
                " -   (2.6.6)",
                " -  * Reported, fixed #1235: `java.nio.file.Path` support incomplete",
                " -   (2.8.0)",
                " -  * Reported #1270: Generic type returned from type id resolver seems to be ignored",
                " -   (2.8.0)",
                " -",
                " -Steve Sanbeg: (sanbeg@github)",
                " -  * Contributed #482: Make date parsing error behavior consistent with JDK",
                " -   (2.4.1)",
                " -",
                " -Ian Barfield: (tea-dragon@github)",
                " -  * Reported #580: delegate deserializers choke on a (single) abstract/polymorphic parameter",
                " -   (2.4.4)",
                " -  * Reported #844: Using JsonCreator still causes invalid path references in JsonMappingException",
                " -   (2.5.5)",
                " -",
                " -Eugene Lukash",
                " -  * Reported #592: Wrong `TokenBuffer` delegate deserialization using `@JsonCreator`",
                " -   (2.4.4)",
                " -",
                " -Fernando Otero (zeitos@github)",
                " -  * Contributed fix for #610: Problem with forward reference in hierarchies",
                " -   (2.4.4)",
                " -",
                " -Lovro Pand\u00c5\u00bei\u00c4\u0087 (lpandzic@github)",
                " -  * Reported #421: @JsonCreator not used in case of multiple creators with parameter names",
                " -   (2.5.0)",
                " -",
                " -Adam Stroud (adstro@github)",
                " -  * Contributed\t#576: Add fluent API for adding mixins",
                " -   (2.5.0)",
                " -",
                " -David Fleeman (fleebytes@github)",
                " -  * Contributed #528 implementation: Add support for `JsonType.As.EXISTING_PROPERTY`",
                " -   (2.5.0)",
                " -",
                " -Aur\u00c3\u00a9lien Leboulanger (herau@github)",
                " -  * Contributed improvement for #597: Improve error messaging for cases\twhere JSON Creator",
                " -    returns null (which is illegal)",
                " -   (2.5.0)",
                " -",
                " -Michael Spiegel (mspiegel@githib)",
                " -  * Contributed #636: `ClassNotFoundException` for classes not (yet) needed during serialization",
                " -   (2.5.0)",
                " -",
                " -Michael Ressler (mressler@github)",
                " -  * Contributed #566: Add support for case-insensitive deserialization",
                " -   (`MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES`)",
                " -   (2.5.0)",
                " -",
                " -Konstantin Labun (kulabun@github)",
                " -  * Reported #647: Deserialization fails when @JsonUnwrapped property contains an object with same property name",
                " -   (2.5.0)",
                " -",
                " -Christopher Smith (chrylis@github)",
                " -  * Reported #594: `@JsonValue` on enum not used when enum value is a Map key",
                " -   (2.5.0)",
                " -",
                " -Alexandre Santana Campelo (alexqi200@github):",
                " -  * Contributed #671: Adding `java.util.Currency` deserialization support for maps",
                " -   (2.5.1)",
                " -",
                " -Zoltan Farkas (zolyfarkas@github)",
                " -  * Reported #674: Spring CGLIB proxies not handled as intended",
                " -   (2.5.1)",
                " -",
                " -Ludevik@github:",
                " -  * Reported #682: Class<?>-valued Map keys not serialized properly",
                " -   (2.5.1)",
                " -",
                " -Antibrumm@github:",
                " -  * Reported #691: Jackson 2.5.0. NullSerializer for MapProperty failing",
                " -   (2.5.2)",
                " -  * Reported #984: JsonStreamContexts are not build the same way for write.. and convert methods",
                " -   (2.6.4)",
                " -",
                " -Shumpei Akai (flexfrank@github)",
                " -  * Reported #703: Multiple calls to ObjectMapper#canSerialize(Object.class) returns different values",
                " -   (2.5.2)",
                " -",
                " -Francisco A. Lozano (flozano@github)",
                " -  * Contributed fix for #703 (see above)",
                " -   (2.5.2)",
                " -",
                " -Dylan Scott (dylanscott@github)",
                " -  * Reported #738: #738: @JsonTypeInfo non-deterministically ignored in 2.5.1 (concurrency",
                " -    issue)",
                " -   (2.5.2)",
                " -",
                " -Alain Gilbert (agilbert314@github)",
                " -  * Reporter, contributed #766: Fix Infinite recursion (StackOverflowError) when",
                " -    serializing a SOAP object",
                " -   (2.5.3)",
                " -",
                " -Alexey Gavrilov (Alexey1Gavrilov@github)",
                " -  * Reported, contributed fix for #761: Builder deserializer: in-compatible type exception",
                " -    when return type is super type",
                " -   (2.5.3)",
                " -",
                " -Dmitry Spikhalskiy (Spikhalskiy@github)",
                " -  * Reported #731, suggested the way to fix it: XmlAdapter result marshaling error in",
                " -    case of ValueType=Object",
                " -   (2.5.3)",
                " -  * Reported #1456: `TypeFactory` type resolution broken in 2.7 for generic types",
                " -   when using `constructType` with context",
                " -   (2.7.9 / 2.8.6)",
                " -",
                " -John Meyer (jpmeyer@github)",
                " -  * Reported, contributed fix for #745: EnumDeserializer.deserializerForCreator() fails",
                " -    when used to deserialize a Map key",
                " -   (2.5.3)",
                " -",
                " -Andrew Duckett (andrewduckett@github)",
                " -  * Reported #771: Annotation bundles ignored when added to Mixin",
                " -   (2.5.4)",
                " -",
                " -Charles Allen:",
                " -  * Contributed #785: Add handlings for classes which are available in",
                " -    `Thread.currentThread().getContextClassLoader()`",
                " -   (2.5.4)",
                " -",
                " -Andrew Goodale (newyankeecodeshop@github)",
                " -  * Contributed #816: Allow date-only ISO strings to have no time zone",
                " -   (2.5.4)",
                " -",
                " -Kamil Benedykci\u00c5\u0084ski (Kamil-Benedykcinski@github)",
                " -  * Contributed #801: Using `@JsonCreator` cause generating invalid path reference",
                " -   in `JsonMappingException`",
                " -   (2.5.4)",
                " -",
                " -Chi Kim (chikim79@github)",
                " -  * Reported #878: serializeWithType on BeanSerializer does not setCurrentValue",
                " -   (2.5.5 / 2.6.1)",
                " -",
                " -Charles Allen (drcrallen@github):",
                " -  * Reported #696: Copy constructor does not preserve `_injectableValues`",
                " -   (2.6.0)",
                " -",
                " -Chris Pimlott (pimlottc@github):",
                " -  * Suggested #348: ObjectMapper.valueToTree does not work with @JsonRawValue",
                " -   (2.6.0)",
                " -",
                " -Laird Nelson (ljnelson@github)",
                " -  * Suggested #688: Provide a means for an ObjectMapper to discover mixin annotation",
                " -    classes on demand",
                " -   (2.6.0)",
                " -  * Reported #1088: NPE possibility in SimpleMixinResolver",
                " -   (2.6.6)",
                " -",
                " -Derk Norton (derknorton@github)",
                " -  * Suggested #689: Add `ObjectMapper.setDefaultPrettyPrinter(PrettyPrinter)`",
                " -   (2.6.0)",
                " -",
                " -Michal Letynski (mletynski@github)",
                " -  * Suggested #296: Serialization of transient fields with public getters (add",
                " -    MapperFeature.PROPAGATE_TRANSIENT_MARKER)",
                " -   (2.6.0)",
                " -",
                " -Jeff Schnitzer (stickfigure@github)",
                " -  * Suggested #504: Add `DeserializationFeature.USE_LONG_FOR_INTS`",
                " -   (2.6.0)",
                " -",
                " -Jerry Yang (islanderman@github)",
                " -  * Contributed #820: Add new method for `ObjectReader`, to bind from JSON Pointer position",
                " -   (2.6.0)",
                " -",
                " -Lars Pfannenschmidt (larsp@github)",
                " -  * Contributed #826: Replaced synchronized HashMap with ConcurrentHashMap in",
                " -   TypeDeserializerBase._findDeserializer",
                " -   (2.6.0)",
                " -",
                " -Stephen A. Goss (thezerobit@github)",
                " -  * Contributed #828: Respect DeserializationFeatures.WRAP_EXCEPTIONS in CollectionDeserializer",
                " -   (2.6.0)",
                " -",
                " -Andy Wilkinson (wilkinsona@github)",
                " -  * Reported #889: Configuring an ObjectMapper's DateFormat changes time zone",
                " -   (2.6.1)",
                " -",
                " -lufe66@github:",
                " -  * Reported 894: When using withFactory on ObjectMapper, the created Factory has a TypeParser",
                " -    which still has the original Factory",
                " -   (2.6.2)",
                " -",
                " -Daniel Walker (dsw2127@github)",
                " -  * Reported, contributed fix for #913: `ObjectMapper.copy()` does not preserve",
                " -   `MappingJsonFactory` features",
                " -   (2.6.2)",
                " -",
                " -Sadayuki Furuhashi (frsyuki@github)",
                " -  * Reported #941: Deserialization from \"{}\" to ObjectNode field causes",
                " -    \"out of END_OBJECT token\" error",
                " -   (2.6.3)",
                " -",
                " -David Haraburda (dharaburda@github)",
                " -  * Contributed #918: Add `MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING`",
                " -   (2.7.0)",
                " -",
                " -Sergio Mira (Sergio-Mira@github)",
                " -  * Contributed #940: Add missing `hashCode()` implementations for `JsonNode` types that did not have them",
                " -   (2.6.3)",
                " -",
                " -Andreas Pieber (anpieber@github)",
                " -  * Reported #939: Regression: DateConversionError in 2.6.x\t",
                " -   (2.6.3)",
                " -",
                " -Jesse Wilson (swankjesse@github)",
                " -  * Contributed #948: Support leap seconds, any number of millisecond digits for ISO-8601 Dates.",
                " -   (2.6.3)",
                " -  * Contributed #949: Report the offending substring when number parsing fails",
                " -   (2.6.3)",
                " -",
                " -Warren Bloomer (stormboy@github)",
                " -  * Reported #942: Handle null type id for polymorphic values that use external type id",
                " -   (2.6.3)",
                " -",
                " -Ievgen Pianov (pyanoveugen@github)",
                " -  * Reported #989: Deserialization from \"{}\" to java.lang.Object causes \"out of END_OBJECT token\" error",
                " -   (2.6.3)",
                " -",
                " -Jayson Minard (apatrida@github)",
                " -  * Reported #1005: Synthetic constructors confusing Jackson data binding",
                " -   (2.6.4)",
                " -  * Reported #1438: `ACCEPT_CASE_INSENSITIVE_PROPERTIES` is not respected for creator properties",
                " -   (2.8.5)",
                " -",
                " -David Bakin (david-bakin@github)",
                " -  * Reported #1013: `@JsonUnwrapped` is not treated as assuming `@JsonProperty(\"\")`",
                " -   (2.6.4)",
                " -  * Suggested #1011: Change ObjectWriter::withAttributes() to take a Map with some kind of wildcard types",
                " -   (2.7.0)",
                " -",
                " -Dmitry Romantsov (DmRomantsov@github)",
                " -  * Reported #1036: Problem with case-insensitive deserialization",
                " -   (2.6.4)",
                " -",
                " -Daniel Norberg (danielnorberg@github)",
                " -  * Contributed #1099: Fix custom comparator container node traversal",
                " -   (2.6.6)",
                " -",
                " -Miles Kaufmann (milesk-amzn@github)",
                " -  * Reported #432: `StdValueInstantiator` unwraps exceptions, losing context",
                " -   (2.7.0)",
                " -",
                " -Thomas Mortagne (tmortagne@github)",
                " -  * Suggested #857: Add support for java.beans.Transient",
                " -   (2.7.0)",
                " -",
                " -Jonas Konrad (yawkat@github)",
                " -  * Suggested #905: Add support for `@ConstructorProperties`",
                " -   (2.7.0)",
                " -",
                " -Jirka Kremser (Jiri-Kremser@github)",
                " -  * Suggested #924: SequenceWriter.writeAll() could accept Iterable",
                " -   (2.7.0)",
                " -",
                " -Daniel Mischler (danielmischler@github)",
                " -  * Requested #963: Add PropertyNameStrategy `KEBAB_CASE`",
                " -   (2.7.0)",
                " -",
                " -Shumpei Akai (flexfrank@github)",
                " -  * Reported #978: ObjectMapper#canSerialize(Object.class) returns false even though",
                " -   FAIL_ON_EMPTY_BEANS is disabled",
                " -   (2.7.0)",
                " -",
                " -Hugo Wood (hgwood@github)",
                " -  * Contributed #1010: Support for array delegator",
                " -   (2.7.0)",
                " -",
                " -Julian Hyde (julianhyde@github)",
                " -  * Reported #1083: Field in base class is not recognized, when using `@JsonType.defaultImpl`",
                " -   (2.7.1)",
                " -",
                " -Thibault Kruse (tkruse@github)",
                " -  * Reported #1102: Handling of deprecated `SimpleType.construct()` too minimalistic",
                " -   (2.7.1)",
                " -",
                " -Aleks Seovic (aseovic@github)",
                " -  * Reported #1109: @JsonFormat is ignored by the DateSerializer unless either a custom pattern",
                " -    or a timezone are specified",
                " -   (2.7.1)",
                " -",
                " -Timur Shakurov (saladinkzn@github)",
                " -  * Reported #1134: Jackson 2.7 doesn't work with jdk6 due to use of `Collections.emptyIterator()`",
                " -   (2.7.2)",
                " -",
                " -Jiri Mikulasek (pirkogdc@github)",
                " -  * Reported #1124: JsonAnyGetter ignores JsonSerialize(contentUsing=...)",
                " -   (2.7.2)",
                " -",
                " -Xavi Torrens (xavitorrens@github)",
                " -  * Reported #1150: Problem with Object id handling, explicit `null` token",
                " -   (2.7.3)",
                " -",
                " -Yoann Rodi\u00c3\u00a8re (fenrhil@github)",
                " -  * Reported #1154: @JsonFormat.pattern on dates is now ignored if shape is not",
                " -    explicitely provided",
                " -   (2.7.3)",
                " -",
                " -Mark Woon (markwoon@github)",
                " -  * Reported #1178: `@JsonSerialize(contentAs=superType)` behavior disallowed in 2.7",
                " -   (2.7.4)",
                " -  * Reported #1231: `@JsonSerialize(as=superType)` behavior disallowed in 2.7.4",
                " -   (2.7.5)",
                " -  * Suggested #507: Support for default `@JsonView` for a class",
                " -   (2.9.0)",
                " -",
                " -Tom Mack (tommack@github)",
                " -  * Reported #1208: treeToValue doesn't handle POJONodes that contain exactly",
                " -    the requested value type",
                " -   (2.7.4)",
                " -",
                " -William Headrick (headw01@github)",
                " -   * Reported#1223: `BasicClassIntrospector.forSerialization(...).findProperties` should",
                " -    respect MapperFeature.AUTO_DETECT_GETTERS/SETTERS?",
                " -   (2.7.5)",
                " -",
                " -Nick Babcock (nickbabcock)",
                " -  * Reported #1225: `JsonMappingException` should override getProcessor()",
                " -   (2.7.5)",
                " -  * Suggested #1356: Differentiate between input and code exceptions on deserialization",
                " -   (2.9.0)",
                " -",
                " -Andrew Joseph (apjoseph@github)",
                " -  * Reported #1248: `Annotated` returns raw type in place of Generic Type in 2.7.x",
                " -   (2.7.5)",
                " -",
                " -Erich Schubert (kno10@github)",
                " -  * Reported #1260: `NullPointerException` in `JsonNodeDeserializer`, provided fix",
                " -   (2.7.5)",
                " -",
                " -Brian Pontarelli (voidmain@github)",
                " -  * Reported #1301: Problem with `JavaType.toString()` for recursive (self-referential) types",
                " -   (2.7.6)",
                " -",
                " -Max Drobotov (fizmax@github)",
                " -  * Reported, contributed fix for #1332: `ArrayIndexOutOfBoundException` for enum by index deser",
                " -   (2.7.7)",
                " -",
                " -Stuart Douglas (stuartwdouglas@github)",
                " -  * Reported #1363: The static field ClassUtil.sCached can cause a class loader leak",
                " -   (2.7.8)",
                " -",
                " -Josh Caplan (jecaplan@github)",
                " -  * Reported, suggested fix for #1368: Problem serializing `JsonMappingException` due to addition",
                " -    of non-ignored `processor` property (added in 2.7)",
                " -   (2.7.8)",
                " -",
                " -Diego de Estrada (diegode@github)",
                " -  * Contributed fix for #1367: No Object Id found for an instance when using `@ConstructorProperties`",
                " -   (2.7.9)",
                " -",
                " -Kevin Hogeland (khogeland@github)",
                " -  * Reported #1501: `ArrayIndexOutOfBoundsException` on non-static inner class constructor",
                " -   (2.7.9)",
                " -",
                " -Artur Jonkisz (ajonkisz@github)",
                " -  * Reported #960: `@JsonCreator` not working on a factory with no arguments for ae enum type",
                " -   (2.8.0)",
                " -",
                " -Mikhail Kokho (mkokho@github)",
                " -  * Contributed impl for #990: Allow failing on `null` values for creator (add",
                " -  `DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES`)",
                " -   (2.8.0)",
                " -",
                " -Aleksandr Oksenenko (oleksandr-oksenenko@github)",
                " -  * Reported #999: External property is not deserialized",
                " -   (2.8.0)",
                " -",
                " -Lokesh Kumar (LokeshN@github)",
                " -  * Contributed impl for #1082: Can not use static Creator factory methods for `Enum`s,",
                " -    with JsonCreator.Mode.PROPERTIES",
                " -   (2.8.0)",
                " -  * Reported #1217: `@JsonIgnoreProperties` on Pojo fields not working for deserialization",
                " -   (2.8.0)",
                " -",
                " -Ross Goldberg",
                " -  * Reported #1165, provided fix for: `CoreXMLDeserializers` does not handle",
                " -    time-only `XMLGregorianCalendar`s",
                " -   (2.8.0)",
                " -",
                " -Maarten Billemont (lhunath@github)",
                " -  * Suggested #1184: Allow overriding of `transient` with explicit inclusion with `@JsonProperty`",
                " -   (2.8.0)",
                " -",
                " -Vladimir Kulev (lightoze@github)",
                " -  * Reported #1028: Ignore USE_BIG_DECIMAL_FOR_FLOATS for NaN/Infinity",
                " -   (2.8.0)",
                " -",
                " -Ari Fogel (arifogel@github)",
                " -  * Reported #1261, contributed fix for: `@JsonIdentityInfo` deserialization fails with",
                " -    combination of forward references, `@JsonCreator`",
                " -   (2.8.0)",
                " -",
                " -Andriy Plokhotnyuk (plokhotnyuk@github)",
                " -  * Requested #1277: Add caching of resolved generic types for `TypeFactory`",
                " -   (2.8.0)",
                " -",
                " -Arek Gabiga (arekgabiga@github)",
                " -  * Reported #1297: Deserialization of generic type with Map.class",
                " -   (2.8.1)",
                " -",
                " -Chris Jester-Young (cky@github)",
                " -  * Contributed #1335: Unconditionally call `TypeIdResolver.getDescForKnownTypeIds`",
                " -   (2.8.2)",
                " -",
                " -Andrew Snare (asnare@github)",
                " -  * Reported #1315: Binding numeric values can BigDecimal lose precision",
                " -   (2.8.2)",
                " -",
                " -Gili Tzabari (cowwoc@github)",
                " -  * Reported #1351: `@JsonInclude(NON_DEFAULT)` doesn't omit null fields",
                " -   (2.8.3)",
                " -",
                " -Oleg Zhukov (OlegZhukov@github)",
                " -  * Reported #1384: `@JsonDeserialize(keyUsing = ...)` does not work correctly",
                " -   together with `DefaultTyping.NON_FINAL`",
                " -   (2.8.4)",
                " -",
                " -Pavel Popov (tolkonepiu@github)",
                " -  * Contributed fix #1389: Problem with handling of multi-argument creator with Enums",
                " -   (2.8.4)",
                " -",
                " -Josh Gruenberg (joshng@github)",
                " -  * Reported #1403: Reference-chain hints use incorrect class-name for inner classes",
                " -   (2.8.4)",
                " -",
                " -Kevin Donnelly (kpdonn@github)",
                " -  * Reported #1432: Off by 1 bug in PropertyValueBuffer",
                " -   (2.8.5)",
                " -",
                " -Nathanial Ofiesh (ofiesh@github)",
                " -  * Reported #1441: Failure with custom Enum key deserializer, polymorphic types",
                " -   (2.8.5)",
                " -",
                " -Fr\u00c3\u00a9d\u00c3\u00a9ric Camblor (fcamblor@github)",
                " -  * Reported #1451: Type parameter not passed by `ObjectWriter` if serializer pre-fetch disabled",
                " -   (2.8.6)",
                " -",
                " -Stephan Schroevers (Stephan202@github)",
                " -  * Reported #1505: @JsonEnumDefaultValue should take precedence over FAIL_ON_NUMBERS_FOR_ENUMS",
                " -   (2.8.7)",
                " -",
                " -Alex Panchenko (panchenko@github)",
                " -  * Reported #1543: JsonFormat.Shape.NUMBER_INT does not work when defined on enum type in 2.8",
                " -   (2.8.8)",
                " -",
                " -Joshua Jones",
                " -  * Reported #1573, contributed fix: Missing properties when deserializing using a builder class",
                " -   with a non-default constructor and a mutator annotated with `@JsonUnwrapped`",
                " -   (2.8.8)",
                " -",
                " -Ivo Studens (istudens@redhat.com)",
                " -  * Contributed #1585: Invoke ServiceLoader.load() inside of a privileged block",
                " -    when loading modules using `ObjectMapper.findModules()`",
                " -   (2.8.9)",
                " -",
                " -Javy Luo (AnywnYu@github)",
                " -  * Reported #1595: `JsonIgnoreProperties.allowSetters` is not working in Jackson 2.8",
                " -   (2.8.9)",
                " -",
                " -Marco Catania (catanm@github.com)",
                " -  * Contributed #1597: Escape JSONP breaking characters",
                " -   (2.8.9)",
                " -",
                " -Andrew Joseph (apjoseph@github)",
                " -  * Reported #1629 `FromStringDeserializer` ignores registered `DeserializationProblemHandler`",
                " -    for `java.util.UUID`",
                " -   (2.8.9)",
                " -",
                " -Joe Littlejohn (joelittlejohn@github)",
                " -  * Contributed #1642: Support `READ_UNKNOWN_ENUM_VALUES_AS_NULL` with `@JsonCreator`",
                " -   (2.8.9)",
                " -",
                " -Slobodan Pejic (slobo-showbie@github)",
                " -  * Reported #1647, contributed fix: Missing properties from base class when recursive",
                " -    types are involved",
                " -   (2.8.9)",
                " -",
                " -Bertrand Renuart (brenuart@github)",
                " -  * Reported #1648: `DateTimeSerializerBase` ignores configured date format when creating contextual",
                " -   (2.8.9)",
                " -  * Reported #1651: `StdDateFormat` fails to parse 'zulu' date when TimeZone other than UTC",
                " -   (2.8.9)",
                " -  * Suggested #1745: StdDateFormat: accept and truncate millis larger than 3 digits",
                " -   (2.9.1)",
                " -  * Contributed #1749: StdDateFormat: performance improvement of '_format(..)' method",
                " -   (2.9.1)",
                " -  * Contributed #1759: Reuse `Calendar` instance during parsing by `StdDateFormat`",
                " -   (2.9.1)",
                " -",
                " -Kevin Gallardo (newkek@github)",
                " -  * Reported #1658: Infinite recursion when deserializing a class extending a Map,",
                " -    with a recursive value type",
                " -   (2.8.10)",
                " -  * Reported #1729: Integer bounds verification when calling `TokenBuffer.getIntValue()`",
                " -   (2.9.4)",
                " -",
                " -Lukas Euler",
                " -  * Reported #1735: Missing type checks when using polymorphic type ids",
                " -",
                " -Connor Kuhn (ckuhn@github)",
                " -  * Contributed #1341: FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY",
                " -   (2.9.0)",
                " -",
                " -Jan Lolling (jlolling@github)",
                " -  * Contributed #1319: Add `ObjectNode.put(String, BigInteger)`",
                " -   (2.9.0)",
                " -",
                " -Michael R Fairhurst (MichaelRFairhurst@github)",
                " -  * Reported #1035: `@JsonAnySetter` assumes key of `String`, does not consider declared type.",
                " -   (2.9.0)",
                " -",
                " -Fabrizio Cucci (fabriziocucci@github)",
                " -  * Reported #1406: `ObjectMapper.readTree()` methods do not return `null` on end-of-input",
                " -   (2.9.0)",
                " -",
                " -Emiliano Clari\u00c3\u00a1 (emilianogc@github)",
                " -  * Contributed #1434: Explicitly pass null on invoke calls with no arguments",
                " -   (2.9.0)",
                " -",
                " -Ana Eliza Barbosa (AnaEliza@github)",
                " -  * Contributed #1520: Case insensitive enum deserialization feature.",
                " -   (2.9.0)",
                " -",
                " -Lyor Goldstein (lgoldstein@github)",
                " -  * Reported #1544: `EnumMapDeserializer` assumes a pure `EnumMap` and does not support",
                " -    derived classes",
                " -   (2.9.0)",
                " -",
                " -Harleen Sahni (harleensahni@github)",
                " -  * Reported #403: Make FAIL_ON_NULL_FOR_PRIMITIVES apply to primitive arrays and other",
                " -    types that wrap primitives",
                " -   (2.9.0)",
                " -",
                " -Jared Jacobs (2is10@github)",
                " -  * Requested #1605: Allow serialization of `InetAddress` as simple numeric host address",
                " -   (2.9.0)",
                " -",
                " -Patrick Gunia (pgunia@github)",
                " -  * Reported #1440: Wrong `JsonStreamContext` in `DeserializationProblemHandler` when reading",
                " -  `TokenBuffer` content",
                " -   (2.9.0)",
                " -",
                " -Carsten Wickner (CarstenWickner@github)",
                " -  * Contributed #1522: Global `@JsonInclude(Include.NON_NULL)` for all properties with a specific type",
                " -   (2.9.0)",
                " -",
                " -Chris Plummer (strmer15@github)",
                " -  * Reported #1637: `ObjectReader.at()` with `JsonPointer` stops after first collection",
                " -   (2.9.0)",
                " -",
                " -Christian Basler (Dissem@github)",
                " -  * Reported #1688: Deserialization fails for `java.nio.file.Path` implementations when",
                " -    default typing enabled",
                " -   (2.9.0)",
                " -",
                " -Tim Bartley (tbartley@github)",
                " -  * Reported, suggested fix for #1705: Non-generic interface method hides type resolution info",
                " -    from generic base class",
                " -   (2.9.1)",
                " -",
                " -Lu\u00c3\u00ads Cleto (luiscleto@github)",
                " -  * Suggested 1768: Improve `TypeFactory.constructFromCanonical()` to work with",
                " -   `java.lang.reflect.Type.getTypeName()` format",
                " -   (2.9.2)",
                " -",
                " -Vincent Demay (vdemay@github)",
                " -  * Reported #1793: `java.lang.NullPointerException` in `ObjectArraySerializer.acceptJsonFormatVisitor()`",
                " -    for array value with `@JsonValue`",
                " -   (2.9.2)",
                " -",
                " -Peter Jurkovic (peterjurkovic@github)",
                " -  * Reported #1823: ClassNameIdResolver doesn't handle resolve Collections$SingletonMap,",
                " -    Collections$SingletonSet",
                " -   (2.9.3)",
                " -",
                " -alinakovalenko@github:",
                " -  * Reported #1844: Map \"deep\" merge only adds new items, but not override existing values",
                " -   (2.9.3)",
                "--",
                " -Pier-Luc Whissell (pwhissell@github):",
                " -  * Reported #1673: Serialising generic value classes via Reference Types (like Optional) fails",
                " -    to include type information",
                " -   (2.9.4)",
                "diff --cc release-notes/CREDITS-2.x",
                "index 879fa3512,000000000..dfd431139",
                "mode 100644,000000..100644",
                "--- a/release-notes/CREDITS-2.x",
                "+++ b/release-notes/CREDITS-2.x",
                "@@@ -1,713 -1,0 +1,737 @@@",
                " +Here are people who have contributed to the development of Jackson JSON processor",
                " +databind core component, version 2.x",
                " +(version numbers in brackets indicate release in which the problem was fixed)",
                " +",
                " +(note: for older credits, check out release notes for 1.x versions)",
                " +",
                " +Tatu Saloranta, tatu.saloranta@iki.fi: author",
                " +",
                " +Pascal G\u00c2\u008elinas:",
                " +  * Contributed fixes to 'MappingIterator' handling (Pull#58 and Pull#59)",
                " +   (2.1.0)",
                " +  * Reported #220: ContainerNode missing 'createNumber(BigInteger)'",
                " +   (2.2.2)",
                " +",
                " +Joern Huxhorn: (huxi@github)",
                " +  * Suggested [JACKSON-636]: Add 'SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS' to allow",
                " +    forced sorting of Maps during serialization",
                " +   (2.0.0)",
                " +  * Reported #479: NPE on trying to deserialize a `String[]` that contains null",
                " +   (2.4.1)",
                " +  * Reported #1411: MapSerializer._orderEntries should check for null keys",
                " +   (2.7.9)",
                " +",
                " +James Roper:",
                " + * Requested [JACKSON-732]: Allow 'AnnotationIntrospector.findContentDeserializer()'",
                " +    (and similar) to return instance, not just Class<?> for instance",
                " +  (2.0.0)",
                " + * Suggested [JACKSON-800]: Adding a method for letting modules register",
                " +    DeserializationProblemHandlers",
                " +  (2.0.0)",
                " +",
                " +Casey Lucas:",
                " + * Reported [JACKSON-798]: Problem with external type id, creators",
                " +  (2.0.0)",
                " +",
                " +Tammo van Lessen:",
                " + * Reported [JACKSON-811]: Problems with @JsonIdentityInfo, abstract types",
                " +  (2.0.0)",
                " + * Reported [JACKSON-814]: Parsing RFC822/RFC1123 dates failes on non-US locales",
                " +  (2.0.0)",
                " +",
                " +Raymond Myers:",
                " + * Suggested [JACKSON-810]: Deserialization Feature: Allow unknown Enum values via",
                " +    'DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL'",
                " +  (2.0.0)",
                " +",
                " +Ryan Gardner:",
                " + * Contributed #5 -- Add support for maps with java.util.Locale keys",
                " +    to the set of StdKeyDeserializers",
                " +  (2.0.1)",
                " +",
                " +Razvan Dragut:",
                " + * Suggested [JACKSON-850]: Allow use of zero-arg factory methods as \"default creator\"",
                " +  (2.1.0)",
                " +",
                " +Duncan Atkinson:",
                " + * Reported [JACKSON-851]: State corruption with ObjectWriter, DefaultPrettyPrinter",
                " +  (2.1.0)",
                " +",
                " +Mark Wolfe:",
                " + * Suggested #45: Add `@JsonNaming()` for per-class naming strategy overrides",
                " +  (2.1.0)",
                " +",
                " +Dmitry Katsubo:",
                " + * Contributed patch for #65: Add getters to `ObjectMapper`, DeserializationContext,",
                " +   DeserializationFactory.",
                " +  (2.1.0)",
                " +",
                " +Francis Galiegue:",
                " + * Reported #93 (and suggested fix): bug in `ObjectMapper.setAll(...)'",
                " +  implementation",
                " +  (2.1.1)",
                " + * Reported #433: `ObjectMapper`'s `.valueToTree()` wraps `JsonSerializable` objects",
                " +  into a POJONode",
                " +  (2.3.3)",
                " + * Contributed #434: Ensure that DecimalNodes with mathematically equal values are equal",
                " +  (2.4.0)",
                " +",
                " +kelaneren@github:",
                " + * Reported #157, contributed unit test: NPE when registering same module twice.",
                " +  (2.1.4)",
                " +",
                " +Eric Tschetter (cheddar@github):",
                " +  * Reported issues #166, #167, #170 (regressions from 1.9.x to 2.x)",
                " +   (2.1.4)",
                " +",
                " +Thierry D (thierryd@github)",
                " +  * Reported #214: Problem with LICENSE, NOTICE, Android packaging",
                " +   (2.2.2)",
                " +",
                " +Luke G-H (lukegh@github)",
                " +  * Reported #223: Duplicated nulls with @JsonFormat(shape=Shape.ARRAY)",
                " +   (2.2.2)",
                " +",
                " +Karl Moore (karldmoore@github)",
                " +  * Reported #217: JsonProcessingExceptions not all wrapped as expected",
                " +   (2.2.2)",
                " +",
                " +David Phillips:",
                " +  * Requested #308: Improve serialization and deserialization speed of `java.util.UUID`",
                " +   (2.3.0)",
                " +",
                " +Seth Pellegrino (jivesoft):",
                " +  * Contributed #317: Fix `JsonNode` support for nulls bound to\t`ObjectNode`, `ArrayNode`",
                " +   (2.3.0)",
                " +",
                " +Florian Schoppmann (fschopp@github)",
                " +  * Reported #357: StackOverflowError with contentConverter that returns array type",
                " +   (2.7.0)",
                " +  * Reported #358: `IterableSerializer` ignoring\tannotated content serializer",
                " +   (2.3.1)",
                " +  * Reported #359: Converted object not using explicitly annotated serializer",
                " +   (2.4.0)",
                " +",
                " +Martin Traverso:",
                " +  * Reported #406: Cannot use external type id + @JsonTypeIdResolver",
                " +   (2.3.2)",
                " +",
                " +Matthew Morrissette:",
                " +  * Contributed #381: Allow inlining/unwrapping of value from single-component JSON array",
                " +   (2.4.0)",
                " +",
                " +Will Palmeri: (wpalmeri@github)",
                " +  * Contributed #407: Make array and Collection serializers use configured value null handler",
                " +   (2.4.0)",
                " +",
                " +Cemalettin Koc: (cemo@github)",
                " +  * Reported #353: Problems with polymorphic types, `JsonNode` (related to #88)",
                " +   (2.4.0)",
                " +",
                " +Ben Fagin: (UnquietCode@github)",
                " +  * Suggested #442: Make `@JsonUnwrapped` indicate property inclusion",
                " +   (2.4.0)",
                " +  * Contributed #81/#455: Allow use of @JsonUnwrapped with typed (@JsonTypeInfo) classes,",
                " +    provided that (new) feature `SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS`",
                " +    is disabled",
                " +   (2.4.0)",
                " +",
                " +Chris Cleveland:",
                " +  * Suggested #463: Add 'JsonNode.asText(String defaultValue)`",
                " +   (2.4.0)",
                " +",
                " +Benson Margulies:",
                " +  * Reported #467: Unwanted POJO's embedded in tree via serialization to tree",
                " +   (2.4.0)",
                " +  * Reported #601: ClassCastException for a custom serializer for enum key in `EnumMap`",
                " +   (2.4.4)",
                " +  * Contributed 944: Failure to use custom deserializer for key deserializer",
                " +   (2.6.3)",
                " +  * Reported #1120: String value omitted from weirdStringException",
                " +   (2.6.6)",
                " +  * Reported, fixed #1235: `java.nio.file.Path` support incomplete",
                " +   (2.8.0)",
                " +  * Reported #1270: Generic type returned from type id resolver seems to be ignored",
                " +   (2.8.0)",
                " +",
                " +Steve Sanbeg: (sanbeg@github)",
                " +  * Contributed #482: Make date parsing error behavior consistent with JDK",
                " +   (2.4.1)",
                " +",
                " +Ian Barfield: (tea-dragon@github)",
                " +  * Reported #580: delegate deserializers choke on a (single) abstract/polymorphic parameter",
                " +   (2.4.4)",
                " +  * Reported #844: Using JsonCreator still causes invalid path references in JsonMappingException",
                " +   (2.5.5)",
                " +",
                " +Eugene Lukash",
                " +  * Reported #592: Wrong `TokenBuffer` delegate deserialization using `@JsonCreator`",
                " +   (2.4.4)",
                " +",
                " +Fernando Otero (zeitos@github)",
                " +  * Contributed fix for #610: Problem with forward reference in hierarchies",
                " +   (2.4.4)",
                " +",
                " +Lovro Pand\u00c5\u00bei\u00c4\u0087 (lpandzic@github)",
                " +  * Reported #421: @JsonCreator not used in case of multiple creators with parameter names",
                " +   (2.5.0)",
                " +",
                " +Adam Stroud (adstro@github)",
                " +  * Contributed\t#576: Add fluent API for adding mixins",
                " +   (2.5.0)",
                " +",
                " +David Fleeman (fleebytes@github)",
                " +  * Contributed #528 implementation: Add support for `JsonType.As.EXISTING_PROPERTY`",
                " +   (2.5.0)",
                " +",
                " +Aur\u00c3\u00a9lien Leboulanger (herau@github)",
                " +  * Contributed improvement for #597: Improve error messaging for cases\twhere JSON Creator",
                " +    returns null (which is illegal)",
                " +   (2.5.0)",
                " +",
                " +Michael Spiegel (mspiegel@githib)",
                " +  * Contributed #636: `ClassNotFoundException` for classes not (yet) needed during serialization",
                " +   (2.5.0)",
                " +",
                " +Michael Ressler (mressler@github)",
                " +  * Contributed #566: Add support for case-insensitive deserialization",
                " +   (`MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES`)",
                " +   (2.5.0)",
                " +",
                " +Konstantin Labun (kulabun@github)",
                " +  * Reported #647: Deserialization fails when @JsonUnwrapped property contains an object with same property name",
                " +   (2.5.0)",
                " +",
                " +Christopher Smith (chrylis@github)",
                " +  * Reported #594: `@JsonValue` on enum not used when enum value is a Map key",
                " +   (2.5.0)",
                " +",
                " +Alexandre Santana Campelo (alexqi200@github):",
                " +  * Contributed #671: Adding `java.util.Currency` deserialization support for maps",
                " +   (2.5.1)",
                " +",
                " +Zoltan Farkas (zolyfarkas@github)",
                " +  * Reported #674: Spring CGLIB proxies not handled as intended",
                " +   (2.5.1)",
                " +",
                " +Ludevik@github:",
                " +  * Reported #682: Class<?>-valued Map keys not serialized properly",
                " +   (2.5.1)",
                " +",
                " +Antibrumm@github:",
                " +  * Reported #691: Jackson 2.5.0. NullSerializer for MapProperty failing",
                " +   (2.5.2)",
                " +  * Reported #984: JsonStreamContexts are not build the same way for write.. and convert methods",
                " +   (2.6.4)",
                " +",
                " +Shumpei Akai (flexfrank@github)",
                " +  * Reported #703: Multiple calls to ObjectMapper#canSerialize(Object.class) returns different values",
                " +   (2.5.2)",
                " +",
                " +Francisco A. Lozano (flozano@github)",
                " +  * Contributed fix for #703 (see above)",
                " +   (2.5.2)",
                " +",
                " +Dylan Scott (dylanscott@github)",
                " +  * Reported #738: #738: @JsonTypeInfo non-deterministically ignored in 2.5.1 (concurrency",
                " +    issue)",
                " +   (2.5.2)",
                " +",
                " +Alain Gilbert (agilbert314@github)",
                " +  * Reporter, contributed #766: Fix Infinite recursion (StackOverflowError) when",
                " +    serializing a SOAP object",
                " +   (2.5.3)",
                " +",
                " +Alexey Gavrilov (Alexey1Gavrilov@github)",
                " +  * Reported, contributed fix for #761: Builder deserializer: in-compatible type exception",
                " +    when return type is super type",
                " +   (2.5.3)",
                " +",
                " +Dmitry Spikhalskiy (Spikhalskiy@github)",
                " +  * Reported #731, suggested the way to fix it: XmlAdapter result marshaling error in",
                " +    case of ValueType=Object",
                " +   (2.5.3)",
                " +  * Reported #1456: `TypeFactory` type resolution broken in 2.7 for generic types",
                " +   when using `constructType` with context",
                " +   (2.7.9 / 2.8.6)",
                " +",
                " +John Meyer (jpmeyer@github)",
                " +  * Reported, contributed fix for #745: EnumDeserializer.deserializerForCreator() fails",
                " +    when used to deserialize a Map key",
                " +   (2.5.3)",
                " +",
                " +Andrew Duckett (andrewduckett@github)",
                " +  * Reported #771: Annotation bundles ignored when added to Mixin",
                " +   (2.5.4)",
                " +",
                " +Charles Allen:",
                " +  * Contributed #785: Add handlings for classes which are available in",
                " +    `Thread.currentThread().getContextClassLoader()`",
                " +   (2.5.4)",
                " +",
                " +Andrew Goodale (newyankeecodeshop@github)",
                " +  * Contributed #816: Allow date-only ISO strings to have no time zone",
                " +   (2.5.4)",
                " +",
                " +Kamil Benedykci\u00c5\u0084ski (Kamil-Benedykcinski@github)",
                " +  * Contributed #801: Using `@JsonCreator` cause generating invalid path reference",
                " +   in `JsonMappingException`",
                " +   (2.5.4)",
                " +",
                " +Chi Kim (chikim79@github)",
                " +  * Reported #878: serializeWithType on BeanSerializer does not setCurrentValue",
                " +   (2.5.5 / 2.6.1)",
                " +",
                " +Charles Allen (drcrallen@github):",
                " +  * Reported #696: Copy constructor does not preserve `_injectableValues`",
                " +   (2.6.0)",
                " +",
                " +Chris Pimlott (pimlottc@github):",
                " +  * Suggested #348: ObjectMapper.valueToTree does not work with @JsonRawValue",
                " +   (2.6.0)",
                " +",
                " +Laird Nelson (ljnelson@github)",
                " +  * Suggested #688: Provide a means for an ObjectMapper to discover mixin annotation",
                " +    classes on demand",
                " +   (2.6.0)",
                " +  * Reported #1088: NPE possibility in SimpleMixinResolver",
                " +   (2.6.6)",
                " +",
                " +Derk Norton (derknorton@github)",
                " +  * Suggested #689: Add `ObjectMapper.setDefaultPrettyPrinter(PrettyPrinter)`",
                " +   (2.6.0)",
                " +",
                " +Michal Letynski (mletynski@github)",
                " +  * Suggested #296: Serialization of transient fields with public getters (add",
                " +    MapperFeature.PROPAGATE_TRANSIENT_MARKER)",
                " +   (2.6.0)",
                " +",
                " +Jeff Schnitzer (stickfigure@github)",
                " +  * Suggested #504: Add `DeserializationFeature.USE_LONG_FOR_INTS`",
                " +   (2.6.0)",
                " +",
                " +Jerry Yang (islanderman@github)",
                " +  * Contributed #820: Add new method for `ObjectReader`, to bind from JSON Pointer position",
                " +   (2.6.0)",
                " +",
                " +Lars Pfannenschmidt (larsp@github)",
                " +  * Contributed #826: Replaced synchronized HashMap with ConcurrentHashMap in",
                " +   TypeDeserializerBase._findDeserializer",
                " +   (2.6.0)",
                " +",
                " +Stephen A. Goss (thezerobit@github)",
                " +  * Contributed #828: Respect DeserializationFeatures.WRAP_EXCEPTIONS in CollectionDeserializer",
                " +   (2.6.0)",
                " +",
                " +Andy Wilkinson (wilkinsona@github)",
                " +  * Reported #889: Configuring an ObjectMapper's DateFormat changes time zone",
                " +   (2.6.1)",
                " +",
                " +lufe66@github:",
                " +  * Reported 894: When using withFactory on ObjectMapper, the created Factory has a TypeParser",
                " +    which still has the original Factory",
                " +   (2.6.2)",
                " +",
                " +Daniel Walker (dsw2127@github)",
                " +  * Reported, contributed fix for #913: `ObjectMapper.copy()` does not preserve",
                " +   `MappingJsonFactory` features",
                " +   (2.6.2)",
                " +",
                " +Sadayuki Furuhashi (frsyuki@github)",
                " +  * Reported #941: Deserialization from \"{}\" to ObjectNode field causes",
                " +    \"out of END_OBJECT token\" error",
                " +   (2.6.3)",
                " +",
                " +David Haraburda (dharaburda@github)",
                " +  * Contributed #918: Add `MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING`",
                " +   (2.7.0)",
                " +",
                " +Sergio Mira (Sergio-Mira@github)",
                " +  * Contributed #940: Add missing `hashCode()` implementations for `JsonNode` types that did not have them",
                " +   (2.6.3)",
                " +",
                " +Andreas Pieber (anpieber@github)",
                " +  * Reported #939: Regression: DateConversionError in 2.6.x\t",
                " +   (2.6.3)",
                " +",
                " +Jesse Wilson (swankjesse@github)",
                " +  * Contributed #948: Support leap seconds, any number of millisecond digits for ISO-8601 Dates.",
                " +   (2.6.3)",
                " +  * Contributed #949: Report the offending substring when number parsing fails",
                " +   (2.6.3)",
                " +",
                " +Warren Bloomer (stormboy@github)",
                " +  * Reported #942: Handle null type id for polymorphic values that use external type id",
                " +   (2.6.3)",
                " +",
                " +Ievgen Pianov (pyanoveugen@github)",
                " +  * Reported #989: Deserialization from \"{}\" to java.lang.Object causes \"out of END_OBJECT token\" error",
                " +   (2.6.3)",
                " +",
                " +Jayson Minard (apatrida@github)",
                " +  * Reported #1005: Synthetic constructors confusing Jackson data binding",
                " +   (2.6.4)",
                " +  * Reported #1438: `ACCEPT_CASE_INSENSITIVE_PROPERTIES` is not respected for creator properties",
                " +   (2.8.5)",
                " +",
                " +David Bakin (david-bakin@github)",
                " +  * Reported #1013: `@JsonUnwrapped` is not treated as assuming `@JsonProperty(\"\")`",
                " +   (2.6.4)",
                " +  * Suggested #1011: Change ObjectWriter::withAttributes() to take a Map with some kind of wildcard types",
                " +   (2.7.0)",
                " +",
                " +Dmitry Romantsov (DmRomantsov@github)",
                " +  * Reported #1036: Problem with case-insensitive deserialization",
                " +   (2.6.4)",
                " +",
                " +Daniel Norberg (danielnorberg@github)",
                " +  * Contributed #1099: Fix custom comparator container node traversal",
                " +   (2.6.6)",
                " +",
                " +Miles Kaufmann (milesk-amzn@github)",
                " +  * Reported #432: `StdValueInstantiator` unwraps exceptions, losing context",
                " +   (2.7.0)",
                " +",
                " +Thomas Mortagne (tmortagne@github)",
                " +  * Suggested #857: Add support for java.beans.Transient",
                " +   (2.7.0)",
                " +",
                " +Jonas Konrad (yawkat@github)",
                " +  * Suggested #905: Add support for `@ConstructorProperties`",
                " +   (2.7.0)",
                " +",
                " +Jirka Kremser (Jiri-Kremser@github)",
                " +  * Suggested #924: SequenceWriter.writeAll() could accept Iterable",
                " +   (2.7.0)",
                " +",
                " +Daniel Mischler (danielmischler@github)",
                " +  * Requested #963: Add PropertyNameStrategy `KEBAB_CASE`",
                " +   (2.7.0)",
                " +",
                " +Shumpei Akai (flexfrank@github)",
                " +  * Reported #978: ObjectMapper#canSerialize(Object.class) returns false even though",
                " +   FAIL_ON_EMPTY_BEANS is disabled",
                " +   (2.7.0)",
                " +",
                " +Hugo Wood (hgwood@github)",
                " +  * Contributed #1010: Support for array delegator",
                " +   (2.7.0)",
                " +",
                " +Julian Hyde (julianhyde@github)",
                " +  * Reported #1083: Field in base class is not recognized, when using `@JsonType.defaultImpl`",
                " +   (2.7.1)",
                " +",
                " +Thibault Kruse (tkruse@github)",
                " +  * Reported #1102: Handling of deprecated `SimpleType.construct()` too minimalistic",
                " +   (2.7.1)",
                " +",
                " +Aleks Seovic (aseovic@github)",
                " +  * Reported #1109: @JsonFormat is ignored by the DateSerializer unless either a custom pattern",
                " +    or a timezone are specified",
                " +   (2.7.1)",
                " +",
                " +Timur Shakurov (saladinkzn@github)",
                " +  * Reported #1134: Jackson 2.7 doesn't work with jdk6 due to use of `Collections.emptyIterator()`",
                " +   (2.7.2)",
                " +",
                " +Jiri Mikulasek (pirkogdc@github)",
                " +  * Reported #1124: JsonAnyGetter ignores JsonSerialize(contentUsing=...)",
                " +   (2.7.2)",
                " +",
                " +Xavi Torrens (xavitorrens@github)",
                " +  * Reported #1150: Problem with Object id handling, explicit `null` token",
                " +   (2.7.3)",
                " +",
                " +Yoann Rodi\u00c3\u00a8re (fenrhil@github)",
                " +  * Reported #1154: @JsonFormat.pattern on dates is now ignored if shape is not",
                " +    explicitely provided",
                " +   (2.7.3)",
                " +",
                " +Mark Woon (markwoon@github)",
                " +  * Reported #1178: `@JsonSerialize(contentAs=superType)` behavior disallowed in 2.7",
                " +   (2.7.4)",
                " +  * Reported #1231: `@JsonSerialize(as=superType)` behavior disallowed in 2.7.4",
                " +   (2.7.5)",
                " +  * Suggested #507: Support for default `@JsonView` for a class",
                " +   (2.9.0)",
                " +",
                " +Tom Mack (tommack@github)",
                " +  * Reported #1208: treeToValue doesn't handle POJONodes that contain exactly",
                " +    the requested value type",
                " +   (2.7.4)",
                " +",
                " +William Headrick (headw01@github)",
                " +   * Reported#1223: `BasicClassIntrospector.forSerialization(...).findProperties` should",
                " +    respect MapperFeature.AUTO_DETECT_GETTERS/SETTERS?",
                " +   (2.7.5)",
                " +",
                " +Nick Babcock (nickbabcock)",
                " +  * Reported #1225: `JsonMappingException` should override getProcessor()",
                " +   (2.7.5)",
                " +  * Suggested #1356: Differentiate between input and code exceptions on deserialization",
                " +   (2.9.0)",
                " +",
                " +Andrew Joseph (apjoseph@github)",
                " +  * Reported #1248: `Annotated` returns raw type in place of Generic Type in 2.7.x",
                " +   (2.7.5)",
                " +",
                " +Erich Schubert (kno10@github)",
                " +  * Reported #1260: `NullPointerException` in `JsonNodeDeserializer`, provided fix",
                " +   (2.7.5)",
                " +",
                " +Brian Pontarelli (voidmain@github)",
                " +  * Reported #1301: Problem with `JavaType.toString()` for recursive (self-referential) types",
                " +   (2.7.6)",
                " +",
                " +Max Drobotov (fizmax@github)",
                " +  * Reported, contributed fix for #1332: `ArrayIndexOutOfBoundException` for enum by index deser",
                " +   (2.7.7)",
                " +",
                " +Stuart Douglas (stuartwdouglas@github)",
                " +  * Reported #1363: The static field ClassUtil.sCached can cause a class loader leak",
                " +   (2.7.8)",
                " +",
                " +Josh Caplan (jecaplan@github)",
                " +  * Reported, suggested fix for #1368: Problem serializing `JsonMappingException` due to addition",
                " +    of non-ignored `processor` property (added in 2.7)",
                " +   (2.7.8)",
                " +",
                " +Diego de Estrada (diegode@github)",
                " +  * Contributed fix for #1367: No Object Id found for an instance when using `@ConstructorProperties`",
                " +   (2.7.9)",
                " +",
                " +Kevin Hogeland (khogeland@github)",
                " +  * Reported #1501: `ArrayIndexOutOfBoundsException` on non-static inner class constructor",
                " +   (2.7.9)",
                " +",
                " +Artur Jonkisz (ajonkisz@github)",
                " +  * Reported #960: `@JsonCreator` not working on a factory with no arguments for ae enum type",
                " +   (2.8.0)",
                " +",
                " +Mikhail Kokho (mkokho@github)",
                " +  * Contributed impl for #990: Allow failing on `null` values for creator (add",
                " +  `DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES`)",
                " +   (2.8.0)",
                " +",
                " +Aleksandr Oksenenko (oleksandr-oksenenko@github)",
                " +  * Reported #999: External property is not deserialized",
                " +   (2.8.0)",
                " +",
                " +Lokesh Kumar (LokeshN@github)",
                " +  * Contributed impl for #1082: Can not use static Creator factory methods for `Enum`s,",
                " +    with JsonCreator.Mode.PROPERTIES",
                " +   (2.8.0)",
                " +  * Reported #1217: `@JsonIgnoreProperties` on Pojo fields not working for deserialization",
                " +   (2.8.0)",
                " +",
                " +Ross Goldberg",
                " +  * Reported #1165, provided fix for: `CoreXMLDeserializers` does not handle",
                " +    time-only `XMLGregorianCalendar`s",
                " +   (2.8.0)",
                " +",
                " +Maarten Billemont (lhunath@github)",
                " +  * Suggested #1184: Allow overriding of `transient` with explicit inclusion with `@JsonProperty`",
                " +   (2.8.0)",
                " +",
                " +Vladimir Kulev (lightoze@github)",
                " +  * Reported #1028: Ignore USE_BIG_DECIMAL_FOR_FLOATS for NaN/Infinity",
                " +   (2.8.0)",
                " +",
                " +Ari Fogel (arifogel@github)",
                " +  * Reported #1261, contributed fix for: `@JsonIdentityInfo` deserialization fails with",
                " +    combination of forward references, `@JsonCreator`",
                " +   (2.8.0)",
                " +",
                " +Andriy Plokhotnyuk (plokhotnyuk@github)",
                " +  * Requested #1277: Add caching of resolved generic types for `TypeFactory`",
                " +   (2.8.0)",
                " +",
                " +Arek Gabiga (arekgabiga@github)",
                " +  * Reported #1297: Deserialization of generic type with Map.class",
                " +   (2.8.1)",
                " +",
                " +Chris Jester-Young (cky@github)",
                " +  * Contributed #1335: Unconditionally call `TypeIdResolver.getDescForKnownTypeIds`",
                " +   (2.8.2)",
                " +",
                " +Andrew Snare (asnare@github)",
                " +  * Reported #1315: Binding numeric values can BigDecimal lose precision",
                " +   (2.8.2)",
                " +",
                " +Gili Tzabari (cowwoc@github)",
                " +  * Reported #1351: `@JsonInclude(NON_DEFAULT)` doesn't omit null fields",
                " +   (2.8.3)",
                " +",
                " +Oleg Zhukov (OlegZhukov@github)",
                " +  * Reported #1384: `@JsonDeserialize(keyUsing = ...)` does not work correctly",
                " +   together with `DefaultTyping.NON_FINAL`",
                " +   (2.8.4)",
                " +",
                " +Pavel Popov (tolkonepiu@github)",
                " +  * Contributed fix #1389: Problem with handling of multi-argument creator with Enums",
                " +   (2.8.4)",
                " +",
                " +Josh Gruenberg (joshng@github)",
                " +  * Reported #1403: Reference-chain hints use incorrect class-name for inner classes",
                " +   (2.8.4)",
                " +",
                " +Kevin Donnelly (kpdonn@github)",
                " +  * Reported #1432: Off by 1 bug in PropertyValueBuffer",
                " +   (2.8.5)",
                " +",
                " +Nathanial Ofiesh (ofiesh@github)",
                " +  * Reported #1441: Failure with custom Enum key deserializer, polymorphic types",
                " +   (2.8.5)",
                " +",
                " +Fr\u00c3\u00a9d\u00c3\u00a9ric Camblor (fcamblor@github)",
                " +  * Reported #1451: Type parameter not passed by `ObjectWriter` if serializer pre-fetch disabled",
                " +   (2.8.6)",
                " +",
                " +Stephan Schroevers (Stephan202@github)",
                " +  * Reported #1505: @JsonEnumDefaultValue should take precedence over FAIL_ON_NUMBERS_FOR_ENUMS",
                " +   (2.8.7)",
                " +",
                " +Alex Panchenko (panchenko@github)",
                " +  * Reported #1543: JsonFormat.Shape.NUMBER_INT does not work when defined on enum type in 2.8",
                " +   (2.8.8)",
                " +",
                " +Joshua Jones",
                " +  * Reported #1573, contributed fix: Missing properties when deserializing using a builder class",
                " +   with a non-default constructor and a mutator annotated with `@JsonUnwrapped`",
                " +   (2.8.8)",
                " +",
                " +Ivo Studens (istudens@redhat.com)",
                " +  * Contributed #1585: Invoke ServiceLoader.load() inside of a privileged block",
                " +    when loading modules using `ObjectMapper.findModules()`",
                " +   (2.8.9)",
                " +",
                " +Javy Luo (AnywnYu@github)",
                " +  * Reported #1595: `JsonIgnoreProperties.allowSetters` is not working in Jackson 2.8",
                " +   (2.8.9)",
                " +",
                " +Marco Catania (catanm@github.com)",
                " +  * Contributed #1597: Escape JSONP breaking characters",
                " +   (2.8.9)",
                " +",
                " +Andrew Joseph (apjoseph@github)",
                " +  * Reported #1629 `FromStringDeserializer` ignores registered `DeserializationProblemHandler`",
                " +    for `java.util.UUID`",
                " +   (2.8.9)",
                " +",
                " +Joe Littlejohn (joelittlejohn@github)",
                " +  * Contributed #1642: Support `READ_UNKNOWN_ENUM_VALUES_AS_NULL` with `@JsonCreator`",
                " +   (2.8.9)",
                " +",
                " +Slobodan Pejic (slobo-showbie@github)",
                " +  * Reported #1647, contributed fix: Missing properties from base class when recursive",
                " +    types are involved",
                " +   (2.8.9)",
                " +",
                " +Bertrand Renuart (brenuart@github)",
                " +  * Reported #1648: `DateTimeSerializerBase` ignores configured date format when creating contextual",
                " +   (2.8.9)",
                " +  * Reported #1651: `StdDateFormat` fails to parse 'zulu' date when TimeZone other than UTC",
                " +   (2.8.9)",
                " +  * Suggested #1745: StdDateFormat: accept and truncate millis larger than 3 digits",
                " +   (2.9.1)",
                " +  * Contributed #1749: StdDateFormat: performance improvement of '_format(..)' method",
                " +   (2.9.1)",
                " +  * Contributed #1759: Reuse `Calendar` instance during parsing by `StdDateFormat`",
                " +   (2.9.1)",
                " +",
                " +Kevin Gallardo (newkek@github)",
                " +  * Reported #1658: Infinite recursion when deserializing a class extending a Map,",
                " +    with a recursive value type",
                " +   (2.8.10)",
                " +",
                " +Lukas Euler",
                " +  * Reported #1735: Missing type checks when using polymorphic type ids",
                " +",
                " +Connor Kuhn (ckuhn@github)",
                " +  * Contributed #1341: FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY",
                " +   (2.9.0)",
                " +",
                " +Jan Lolling (jlolling@github)",
                " +  * Contributed #1319: Add `ObjectNode.put(String, BigInteger)`",
                " +   (2.9.0)",
                " +",
                " +Michael R Fairhurst (MichaelRFairhurst@github)",
                " +  * Reported #1035: `@JsonAnySetter` assumes key of `String`, does not consider declared type.",
                " +   (2.9.0)",
                " +",
                " +Fabrizio Cucci (fabriziocucci@github)",
                " +  * Reported #1406: `ObjectMapper.readTree()` methods do not return `null` on end-of-input",
                " +   (2.9.0)",
                " +",
                " +Emiliano Clari\u00c3\u00a1 (emilianogc@github)",
                " +  * Contributed #1434: Explicitly pass null on invoke calls with no arguments",
                " +   (2.9.0)",
                " +",
                " +Ana Eliza Barbosa (AnaEliza@github)",
                " +  * Contributed #1520: Case insensitive enum deserialization feature.",
                " +   (2.9.0)",
                " +",
                " +Lyor Goldstein (lgoldstein@github)",
                " +  * Reported #1544: `EnumMapDeserializer` assumes a pure `EnumMap` and does not support",
                " +    derived classes",
                " +   (2.9.0)",
                " +",
                " +Harleen Sahni (harleensahni@github)",
                " +  * Reported #403: Make FAIL_ON_NULL_FOR_PRIMITIVES apply to primitive arrays and other",
                " +    types that wrap primitives",
                " +   (2.9.0)",
                " +",
                " +Jared Jacobs (2is10@github)",
                " +  * Requested #1605: Allow serialization of `InetAddress` as simple numeric host address",
                " +   (2.9.0)",
                " +",
                " +Patrick Gunia (pgunia@github)",
                " +  * Reported #1440: Wrong `JsonStreamContext` in `DeserializationProblemHandler` when reading",
                " +  `TokenBuffer` content",
                " +   (2.9.0)",
                " +",
                " +Carsten Wickner (CarstenWickner@github)",
                " +  * Contributed #1522: Global `@JsonInclude(Include.NON_NULL)` for all properties with a specific type",
                " +   (2.9.0)",
                " +",
                " +Chris Plummer (strmer15@github)",
                " +  * Reported #1637: `ObjectReader.at()` with `JsonPointer` stops after first collection",
                " +   (2.9.0)",
                " +",
                " +Christian Basler (Dissem@github)",
                " +  * Reported #1688: Deserialization fails for `java.nio.file.Path` implementations when",
                " +    default typing enabled",
                " +   (2.9.0)",
                " +",
                " +Tim Bartley (tbartley@github)",
                " +  * Reported, suggested fix for #1705: Non-generic interface method hides type resolution info",
                " +    from generic base class",
                " +   (2.9.1)",
                " +",
                "++Lu\u00c3\u00ads Cleto (luiscleto@github)",
                "++  * Suggested 1768: Improve `TypeFactory.constructFromCanonical()` to work with",
                "++   `java.lang.reflect.Type.getTypeName()` format",
                "++   (2.9.2)",
                "++",
                "++Vincent Demay (vdemay@github)",
                "++  * Reported #1793: `java.lang.NullPointerException` in `ObjectArraySerializer.acceptJsonFormatVisitor()`",
                "++    for array value with `@JsonValue`",
                "++   (2.9.2)",
                "++",
                "++Peter Jurkovic (peterjurkovic@github)",
                "++  * Reported #1823: ClassNameIdResolver doesn't handle resolve Collections$SingletonMap,",
                "++    Collections$SingletonSet",
                "++   (2.9.3)",
                "++",
                "++alinakovalenko@github:",
                "++  * Reported #1844: Map \"deep\" merge only adds new items, but not override existing values",
                "++   (2.9.3)",
                "++",
                "++Pier-Luc Whissell (pwhissell@github):",
                "++  * Reported #1673: Serialising generic value classes via Reference Types (like Optional) fails",
                "++    to include type information",
                "++   (2.9.4)",
                "++",
                " +Rob Winch (rwinch@github)",
                " +  * Reported #1868: Class name handling for JDK unmodifiable Collection types changed",
                " +   (2.9.4)"
            ],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": []
        },
        {
            "commit_id": "7e048702899522bc8c95ed664af454fd4a42515a",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1516679279,
            "hunks": 0,
            "message": "Merge branch '2.9'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": []
        },
        {
            "commit_id": "03ea0bec6293d4330b5ad19d1d62aca0e3cb6381",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1516597287,
            "hunks": 0,
            "message": "Merge branch '2.8' into 2.9",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "jackson-databind-2.10.0",
                "jackson-databind-2.10.0.pr1",
                "jackson-databind-2.10.0.pr2",
                "jackson-databind-2.10.0.pr3",
                "jackson-databind-2.10.1",
                "jackson-databind-2.10.2",
                "jackson-databind-2.10.3",
                "jackson-databind-2.10.4",
                "jackson-databind-2.10.5",
                "jackson-databind-2.10.5.1",
                "jackson-databind-2.11.0",
                "jackson-databind-2.11.0.rc1",
                "jackson-databind-2.11.1",
                "jackson-databind-2.11.2",
                "jackson-databind-2.11.3",
                "jackson-databind-2.11.4",
                "jackson-databind-2.12.0",
                "jackson-databind-2.12.0-rc1",
                "jackson-databind-2.12.0-rc2",
                "jackson-databind-2.12.1",
                "jackson-databind-2.12.2",
                "jackson-databind-2.12.3",
                "jackson-databind-2.12.4",
                "jackson-databind-2.12.5",
                "jackson-databind-2.12.6",
                "jackson-databind-2.12.6.1",
                "jackson-databind-2.12.7",
                "jackson-databind-2.12.7.1",
                "jackson-databind-2.12.7.2",
                "jackson-databind-2.13.0",
                "jackson-databind-2.13.0-rc1",
                "jackson-databind-2.13.0-rc2",
                "jackson-databind-2.13.1",
                "jackson-databind-2.13.2",
                "jackson-databind-2.13.2.1",
                "jackson-databind-2.13.2.2",
                "jackson-databind-2.13.3",
                "jackson-databind-2.13.4",
                "jackson-databind-2.13.4.1",
                "jackson-databind-2.13.4.2",
                "jackson-databind-2.13.5",
                "jackson-databind-2.14.0",
                "jackson-databind-2.14.0-rc1",
                "jackson-databind-2.14.0-rc2",
                "jackson-databind-2.14.0-rc3",
                "jackson-databind-2.14.1",
                "jackson-databind-2.14.2",
                "jackson-databind-2.14.3",
                "jackson-databind-2.15.0",
                "jackson-databind-2.15.0-rc1",
                "jackson-databind-2.15.0-rc2",
                "jackson-databind-2.15.0-rc3",
                "jackson-databind-2.15.1",
                "jackson-databind-2.15.2",
                "jackson-databind-2.15.3",
                "jackson-databind-2.15.4",
                "jackson-databind-2.16.0",
                "jackson-databind-2.16.0-rc1",
                "jackson-databind-2.16.1",
                "jackson-databind-2.16.2",
                "jackson-databind-2.17.0",
                "jackson-databind-2.17.0-rc1",
                "jackson-databind-2.17.1",
                "jackson-databind-2.17.2",
                "jackson-databind-2.9.10",
                "jackson-databind-2.9.10.1",
                "jackson-databind-2.9.10.2",
                "jackson-databind-2.9.10.3",
                "jackson-databind-2.9.10.4",
                "jackson-databind-2.9.10.5",
                "jackson-databind-2.9.10.6",
                "jackson-databind-2.9.10.7",
                "jackson-databind-2.9.10.8",
                "jackson-databind-2.9.4",
                "jackson-databind-2.9.5",
                "jackson-databind-2.9.6",
                "jackson-databind-2.9.7",
                "jackson-databind-2.9.8",
                "jackson-databind-2.9.9",
                "jackson-databind-2.9.9.1",
                "jackson-databind-2.9.9.2",
                "jackson-databind-2.9.9.3"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "c4f4e3d83f4e95282e1efd79463e1df30db54d8a",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1516597464,
            "hunks": 0,
            "message": "Merge branch '2.9'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": []
        },
        {
            "commit_id": "ab3fd1f99486dd1b5e0ecb0d7462e2598b3dbc20",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1516236248,
            "hunks": 2,
            "message": "Merge branch '2.9'",
            "diff": [
                "diff --cc release-notes/CREDITS-2.x",
                "index dfd431139,000000000..fd57c69e4",
                "mode 100644,000000..100644",
                "--- a/release-notes/CREDITS-2.x",
                "+++ b/release-notes/CREDITS-2.x",
                "@@@ -1,737 -1,0 +1,742 @@@",
                " +Here are people who have contributed to the development of Jackson JSON processor",
                " +databind core component, version 2.x",
                " +(version numbers in brackets indicate release in which the problem was fixed)",
                " +",
                " +(note: for older credits, check out release notes for 1.x versions)",
                " +",
                " +Tatu Saloranta, tatu.saloranta@iki.fi: author",
                " +",
                " +Pascal G\u00c2\u008elinas:",
                " +  * Contributed fixes to 'MappingIterator' handling (Pull#58 and Pull#59)",
                " +   (2.1.0)",
                " +  * Reported #220: ContainerNode missing 'createNumber(BigInteger)'",
                " +   (2.2.2)",
                " +",
                " +Joern Huxhorn: (huxi@github)",
                " +  * Suggested [JACKSON-636]: Add 'SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS' to allow",
                " +    forced sorting of Maps during serialization",
                " +   (2.0.0)",
                " +  * Reported #479: NPE on trying to deserialize a `String[]` that contains null",
                " +   (2.4.1)",
                " +  * Reported #1411: MapSerializer._orderEntries should check for null keys",
                " +   (2.7.9)",
                " +",
                " +James Roper:",
                " + * Requested [JACKSON-732]: Allow 'AnnotationIntrospector.findContentDeserializer()'",
                " +    (and similar) to return instance, not just Class<?> for instance",
                " +  (2.0.0)",
                " + * Suggested [JACKSON-800]: Adding a method for letting modules register",
                " +    DeserializationProblemHandlers",
                " +  (2.0.0)",
                " +",
                " +Casey Lucas:",
                " + * Reported [JACKSON-798]: Problem with external type id, creators",
                " +  (2.0.0)",
                " +",
                " +Tammo van Lessen:",
                " + * Reported [JACKSON-811]: Problems with @JsonIdentityInfo, abstract types",
                " +  (2.0.0)",
                " + * Reported [JACKSON-814]: Parsing RFC822/RFC1123 dates failes on non-US locales",
                " +  (2.0.0)",
                " +",
                " +Raymond Myers:",
                " + * Suggested [JACKSON-810]: Deserialization Feature: Allow unknown Enum values via",
                " +    'DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL'",
                " +  (2.0.0)",
                " +",
                " +Ryan Gardner:",
                " + * Contributed #5 -- Add support for maps with java.util.Locale keys",
                " +    to the set of StdKeyDeserializers",
                " +  (2.0.1)",
                " +",
                " +Razvan Dragut:",
                " + * Suggested [JACKSON-850]: Allow use of zero-arg factory methods as \"default creator\"",
                " +  (2.1.0)",
                " +",
                " +Duncan Atkinson:",
                " + * Reported [JACKSON-851]: State corruption with ObjectWriter, DefaultPrettyPrinter",
                " +  (2.1.0)",
                " +",
                " +Mark Wolfe:",
                " + * Suggested #45: Add `@JsonNaming()` for per-class naming strategy overrides",
                " +  (2.1.0)",
                " +",
                " +Dmitry Katsubo:",
                " + * Contributed patch for #65: Add getters to `ObjectMapper`, DeserializationContext,",
                " +   DeserializationFactory.",
                " +  (2.1.0)",
                " +",
                " +Francis Galiegue:",
                " + * Reported #93 (and suggested fix): bug in `ObjectMapper.setAll(...)'",
                " +  implementation",
                " +  (2.1.1)",
                " + * Reported #433: `ObjectMapper`'s `.valueToTree()` wraps `JsonSerializable` objects",
                " +  into a POJONode",
                " +  (2.3.3)",
                " + * Contributed #434: Ensure that DecimalNodes with mathematically equal values are equal",
                " +  (2.4.0)",
                " +",
                " +kelaneren@github:",
                " + * Reported #157, contributed unit test: NPE when registering same module twice.",
                " +  (2.1.4)",
                " +",
                " +Eric Tschetter (cheddar@github):",
                " +  * Reported issues #166, #167, #170 (regressions from 1.9.x to 2.x)",
                " +   (2.1.4)",
                " +",
                " +Thierry D (thierryd@github)",
                " +  * Reported #214: Problem with LICENSE, NOTICE, Android packaging",
                " +   (2.2.2)",
                " +",
                " +Luke G-H (lukegh@github)",
                " +  * Reported #223: Duplicated nulls with @JsonFormat(shape=Shape.ARRAY)",
                " +   (2.2.2)",
                " +",
                " +Karl Moore (karldmoore@github)",
                " +  * Reported #217: JsonProcessingExceptions not all wrapped as expected",
                " +   (2.2.2)",
                " +",
                " +David Phillips:",
                " +  * Requested #308: Improve serialization and deserialization speed of `java.util.UUID`",
                " +   (2.3.0)",
                " +",
                " +Seth Pellegrino (jivesoft):",
                " +  * Contributed #317: Fix `JsonNode` support for nulls bound to\t`ObjectNode`, `ArrayNode`",
                " +   (2.3.0)",
                " +",
                " +Florian Schoppmann (fschopp@github)",
                " +  * Reported #357: StackOverflowError with contentConverter that returns array type",
                " +   (2.7.0)",
                " +  * Reported #358: `IterableSerializer` ignoring\tannotated content serializer",
                " +   (2.3.1)",
                " +  * Reported #359: Converted object not using explicitly annotated serializer",
                " +   (2.4.0)",
                " +",
                " +Martin Traverso:",
                " +  * Reported #406: Cannot use external type id + @JsonTypeIdResolver",
                " +   (2.3.2)",
                " +",
                " +Matthew Morrissette:",
                " +  * Contributed #381: Allow inlining/unwrapping of value from single-component JSON array",
                " +   (2.4.0)",
                " +",
                " +Will Palmeri: (wpalmeri@github)",
                " +  * Contributed #407: Make array and Collection serializers use configured value null handler",
                " +   (2.4.0)",
                " +",
                " +Cemalettin Koc: (cemo@github)",
                " +  * Reported #353: Problems with polymorphic types, `JsonNode` (related to #88)",
                " +   (2.4.0)",
                " +",
                " +Ben Fagin: (UnquietCode@github)",
                " +  * Suggested #442: Make `@JsonUnwrapped` indicate property inclusion",
                " +   (2.4.0)",
                " +  * Contributed #81/#455: Allow use of @JsonUnwrapped with typed (@JsonTypeInfo) classes,",
                " +    provided that (new) feature `SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS`",
                " +    is disabled",
                " +   (2.4.0)",
                " +",
                " +Chris Cleveland:",
                " +  * Suggested #463: Add 'JsonNode.asText(String defaultValue)`",
                " +   (2.4.0)",
                " +",
                " +Benson Margulies:",
                " +  * Reported #467: Unwanted POJO's embedded in tree via serialization to tree",
                " +   (2.4.0)",
                " +  * Reported #601: ClassCastException for a custom serializer for enum key in `EnumMap`",
                " +   (2.4.4)",
                " +  * Contributed 944: Failure to use custom deserializer for key deserializer",
                " +   (2.6.3)",
                " +  * Reported #1120: String value omitted from weirdStringException",
                " +   (2.6.6)",
                " +  * Reported, fixed #1235: `java.nio.file.Path` support incomplete",
                " +   (2.8.0)",
                " +  * Reported #1270: Generic type returned from type id resolver seems to be ignored",
                " +   (2.8.0)",
                " +",
                " +Steve Sanbeg: (sanbeg@github)",
                " +  * Contributed #482: Make date parsing error behavior consistent with JDK",
                " +   (2.4.1)",
                " +",
                " +Ian Barfield: (tea-dragon@github)",
                " +  * Reported #580: delegate deserializers choke on a (single) abstract/polymorphic parameter",
                " +   (2.4.4)",
                " +  * Reported #844: Using JsonCreator still causes invalid path references in JsonMappingException",
                " +   (2.5.5)",
                " +",
                " +Eugene Lukash",
                " +  * Reported #592: Wrong `TokenBuffer` delegate deserialization using `@JsonCreator`",
                " +   (2.4.4)",
                " +",
                " +Fernando Otero (zeitos@github)",
                " +  * Contributed fix for #610: Problem with forward reference in hierarchies",
                " +   (2.4.4)",
                " +",
                " +Lovro Pand\u00c5\u00bei\u00c4\u0087 (lpandzic@github)",
                " +  * Reported #421: @JsonCreator not used in case of multiple creators with parameter names",
                " +   (2.5.0)",
                " +",
                " +Adam Stroud (adstro@github)",
                " +  * Contributed\t#576: Add fluent API for adding mixins",
                " +   (2.5.0)",
                " +",
                " +David Fleeman (fleebytes@github)",
                " +  * Contributed #528 implementation: Add support for `JsonType.As.EXISTING_PROPERTY`",
                " +   (2.5.0)",
                " +",
                " +Aur\u00c3\u00a9lien Leboulanger (herau@github)",
                " +  * Contributed improvement for #597: Improve error messaging for cases\twhere JSON Creator",
                " +    returns null (which is illegal)",
                " +   (2.5.0)",
                " +",
                " +Michael Spiegel (mspiegel@githib)",
                " +  * Contributed #636: `ClassNotFoundException` for classes not (yet) needed during serialization",
                " +   (2.5.0)",
                " +",
                " +Michael Ressler (mressler@github)",
                " +  * Contributed #566: Add support for case-insensitive deserialization",
                " +   (`MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES`)",
                " +   (2.5.0)",
                " +",
                " +Konstantin Labun (kulabun@github)",
                " +  * Reported #647: Deserialization fails when @JsonUnwrapped property contains an object with same property name",
                " +   (2.5.0)",
                " +",
                " +Christopher Smith (chrylis@github)",
                " +  * Reported #594: `@JsonValue` on enum not used when enum value is a Map key",
                " +   (2.5.0)",
                " +",
                " +Alexandre Santana Campelo (alexqi200@github):",
                " +  * Contributed #671: Adding `java.util.Currency` deserialization support for maps",
                " +   (2.5.1)",
                " +",
                " +Zoltan Farkas (zolyfarkas@github)",
                " +  * Reported #674: Spring CGLIB proxies not handled as intended",
                " +   (2.5.1)",
                " +",
                " +Ludevik@github:",
                " +  * Reported #682: Class<?>-valued Map keys not serialized properly",
                " +   (2.5.1)",
                " +",
                " +Antibrumm@github:",
                " +  * Reported #691: Jackson 2.5.0. NullSerializer for MapProperty failing",
                " +   (2.5.2)",
                " +  * Reported #984: JsonStreamContexts are not build the same way for write.. and convert methods",
                " +   (2.6.4)",
                " +",
                " +Shumpei Akai (flexfrank@github)",
                " +  * Reported #703: Multiple calls to ObjectMapper#canSerialize(Object.class) returns different values",
                " +   (2.5.2)",
                " +",
                " +Francisco A. Lozano (flozano@github)",
                " +  * Contributed fix for #703 (see above)",
                " +   (2.5.2)",
                " +",
                " +Dylan Scott (dylanscott@github)",
                " +  * Reported #738: #738: @JsonTypeInfo non-deterministically ignored in 2.5.1 (concurrency",
                " +    issue)",
                " +   (2.5.2)",
                " +",
                " +Alain Gilbert (agilbert314@github)",
                " +  * Reporter, contributed #766: Fix Infinite recursion (StackOverflowError) when",
                " +    serializing a SOAP object",
                " +   (2.5.3)",
                " +",
                " +Alexey Gavrilov (Alexey1Gavrilov@github)",
                " +  * Reported, contributed fix for #761: Builder deserializer: in-compatible type exception",
                " +    when return type is super type",
                " +   (2.5.3)",
                " +",
                " +Dmitry Spikhalskiy (Spikhalskiy@github)",
                " +  * Reported #731, suggested the way to fix it: XmlAdapter result marshaling error in",
                " +    case of ValueType=Object",
                " +   (2.5.3)",
                " +  * Reported #1456: `TypeFactory` type resolution broken in 2.7 for generic types",
                " +   when using `constructType` with context",
                " +   (2.7.9 / 2.8.6)",
                " +",
                " +John Meyer (jpmeyer@github)",
                " +  * Reported, contributed fix for #745: EnumDeserializer.deserializerForCreator() fails",
                " +    when used to deserialize a Map key",
                " +   (2.5.3)",
                " +",
                " +Andrew Duckett (andrewduckett@github)",
                " +  * Reported #771: Annotation bundles ignored when added to Mixin",
                " +   (2.5.4)",
                " +",
                " +Charles Allen:",
                " +  * Contributed #785: Add handlings for classes which are available in",
                " +    `Thread.currentThread().getContextClassLoader()`",
                " +   (2.5.4)",
                " +",
                " +Andrew Goodale (newyankeecodeshop@github)",
                " +  * Contributed #816: Allow date-only ISO strings to have no time zone",
                " +   (2.5.4)",
                " +",
                " +Kamil Benedykci\u00c5\u0084ski (Kamil-Benedykcinski@github)",
                " +  * Contributed #801: Using `@JsonCreator` cause generating invalid path reference",
                " +   in `JsonMappingException`",
                " +   (2.5.4)",
                " +",
                " +Chi Kim (chikim79@github)",
                " +  * Reported #878: serializeWithType on BeanSerializer does not setCurrentValue",
                " +   (2.5.5 / 2.6.1)",
                " +",
                " +Charles Allen (drcrallen@github):",
                " +  * Reported #696: Copy constructor does not preserve `_injectableValues`",
                " +   (2.6.0)",
                " +",
                " +Chris Pimlott (pimlottc@github):",
                " +  * Suggested #348: ObjectMapper.valueToTree does not work with @JsonRawValue",
                " +   (2.6.0)",
                " +",
                " +Laird Nelson (ljnelson@github)",
                " +  * Suggested #688: Provide a means for an ObjectMapper to discover mixin annotation",
                " +    classes on demand",
                " +   (2.6.0)",
                " +  * Reported #1088: NPE possibility in SimpleMixinResolver",
                " +   (2.6.6)",
                " +",
                " +Derk Norton (derknorton@github)",
                " +  * Suggested #689: Add `ObjectMapper.setDefaultPrettyPrinter(PrettyPrinter)`",
                " +   (2.6.0)",
                " +",
                " +Michal Letynski (mletynski@github)",
                " +  * Suggested #296: Serialization of transient fields with public getters (add",
                " +    MapperFeature.PROPAGATE_TRANSIENT_MARKER)",
                " +   (2.6.0)",
                " +",
                " +Jeff Schnitzer (stickfigure@github)",
                " +  * Suggested #504: Add `DeserializationFeature.USE_LONG_FOR_INTS`",
                " +   (2.6.0)",
                " +",
                " +Jerry Yang (islanderman@github)",
                " +  * Contributed #820: Add new method for `ObjectReader`, to bind from JSON Pointer position",
                " +   (2.6.0)",
                " +",
                " +Lars Pfannenschmidt (larsp@github)",
                " +  * Contributed #826: Replaced synchronized HashMap with ConcurrentHashMap in",
                " +   TypeDeserializerBase._findDeserializer",
                " +   (2.6.0)",
                " +",
                " +Stephen A. Goss (thezerobit@github)",
                " +  * Contributed #828: Respect DeserializationFeatures.WRAP_EXCEPTIONS in CollectionDeserializer",
                " +   (2.6.0)",
                " +",
                " +Andy Wilkinson (wilkinsona@github)",
                " +  * Reported #889: Configuring an ObjectMapper's DateFormat changes time zone",
                " +   (2.6.1)",
                " +",
                " +lufe66@github:",
                " +  * Reported 894: When using withFactory on ObjectMapper, the created Factory has a TypeParser",
                " +    which still has the original Factory",
                " +   (2.6.2)",
                " +",
                " +Daniel Walker (dsw2127@github)",
                " +  * Reported, contributed fix for #913: `ObjectMapper.copy()` does not preserve",
                " +   `MappingJsonFactory` features",
                " +   (2.6.2)",
                " +",
                " +Sadayuki Furuhashi (frsyuki@github)",
                " +  * Reported #941: Deserialization from \"{}\" to ObjectNode field causes",
                " +    \"out of END_OBJECT token\" error",
                " +   (2.6.3)",
                " +",
                " +David Haraburda (dharaburda@github)",
                " +  * Contributed #918: Add `MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING`",
                " +   (2.7.0)",
                " +",
                " +Sergio Mira (Sergio-Mira@github)",
                " +  * Contributed #940: Add missing `hashCode()` implementations for `JsonNode` types that did not have them",
                " +   (2.6.3)",
                " +",
                " +Andreas Pieber (anpieber@github)",
                " +  * Reported #939: Regression: DateConversionError in 2.6.x\t",
                " +   (2.6.3)",
                " +",
                " +Jesse Wilson (swankjesse@github)",
                " +  * Contributed #948: Support leap seconds, any number of millisecond digits for ISO-8601 Dates.",
                " +   (2.6.3)",
                " +  * Contributed #949: Report the offending substring when number parsing fails",
                " +   (2.6.3)",
                " +",
                " +Warren Bloomer (stormboy@github)",
                " +  * Reported #942: Handle null type id for polymorphic values that use external type id",
                " +   (2.6.3)",
                " +",
                " +Ievgen Pianov (pyanoveugen@github)",
                " +  * Reported #989: Deserialization from \"{}\" to java.lang.Object causes \"out of END_OBJECT token\" error",
                " +   (2.6.3)",
                " +",
                " +Jayson Minard (apatrida@github)",
                " +  * Reported #1005: Synthetic constructors confusing Jackson data binding",
                " +   (2.6.4)",
                " +  * Reported #1438: `ACCEPT_CASE_INSENSITIVE_PROPERTIES` is not respected for creator properties",
                " +   (2.8.5)",
                " +",
                " +David Bakin (david-bakin@github)",
                " +  * Reported #1013: `@JsonUnwrapped` is not treated as assuming `@JsonProperty(\"\")`",
                " +   (2.6.4)",
                " +  * Suggested #1011: Change ObjectWriter::withAttributes() to take a Map with some kind of wildcard types",
                " +   (2.7.0)",
                " +",
                " +Dmitry Romantsov (DmRomantsov@github)",
                " +  * Reported #1036: Problem with case-insensitive deserialization",
                " +   (2.6.4)",
                " +",
                " +Daniel Norberg (danielnorberg@github)",
                " +  * Contributed #1099: Fix custom comparator container node traversal",
                " +   (2.6.6)",
                " +",
                " +Miles Kaufmann (milesk-amzn@github)",
                " +  * Reported #432: `StdValueInstantiator` unwraps exceptions, losing context",
                " +   (2.7.0)",
                " +",
                " +Thomas Mortagne (tmortagne@github)",
                " +  * Suggested #857: Add support for java.beans.Transient",
                " +   (2.7.0)",
                " +",
                " +Jonas Konrad (yawkat@github)",
                " +  * Suggested #905: Add support for `@ConstructorProperties`",
                " +   (2.7.0)",
                " +",
                " +Jirka Kremser (Jiri-Kremser@github)",
                " +  * Suggested #924: SequenceWriter.writeAll() could accept Iterable",
                " +   (2.7.0)",
                " +",
                " +Daniel Mischler (danielmischler@github)",
                " +  * Requested #963: Add PropertyNameStrategy `KEBAB_CASE`",
                " +   (2.7.0)",
                " +",
                " +Shumpei Akai (flexfrank@github)",
                " +  * Reported #978: ObjectMapper#canSerialize(Object.class) returns false even though",
                " +   FAIL_ON_EMPTY_BEANS is disabled",
                " +   (2.7.0)",
                " +",
                " +Hugo Wood (hgwood@github)",
                " +  * Contributed #1010: Support for array delegator",
                " +   (2.7.0)",
                " +",
                " +Julian Hyde (julianhyde@github)",
                " +  * Reported #1083: Field in base class is not recognized, when using `@JsonType.defaultImpl`",
                " +   (2.7.1)",
                " +",
                " +Thibault Kruse (tkruse@github)",
                " +  * Reported #1102: Handling of deprecated `SimpleType.construct()` too minimalistic",
                " +   (2.7.1)",
                " +",
                " +Aleks Seovic (aseovic@github)",
                " +  * Reported #1109: @JsonFormat is ignored by the DateSerializer unless either a custom pattern",
                " +    or a timezone are specified",
                " +   (2.7.1)",
                " +",
                " +Timur Shakurov (saladinkzn@github)",
                " +  * Reported #1134: Jackson 2.7 doesn't work with jdk6 due to use of `Collections.emptyIterator()`",
                " +   (2.7.2)",
                " +",
                " +Jiri Mikulasek (pirkogdc@github)",
                " +  * Reported #1124: JsonAnyGetter ignores JsonSerialize(contentUsing=...)",
                " +   (2.7.2)",
                " +",
                " +Xavi Torrens (xavitorrens@github)",
                " +  * Reported #1150: Problem with Object id handling, explicit `null` token",
                " +   (2.7.3)",
                " +",
                " +Yoann Rodi\u00c3\u00a8re (fenrhil@github)",
                " +  * Reported #1154: @JsonFormat.pattern on dates is now ignored if shape is not",
                " +    explicitely provided",
                " +   (2.7.3)",
                " +",
                " +Mark Woon (markwoon@github)",
                " +  * Reported #1178: `@JsonSerialize(contentAs=superType)` behavior disallowed in 2.7",
                " +   (2.7.4)",
                " +  * Reported #1231: `@JsonSerialize(as=superType)` behavior disallowed in 2.7.4",
                " +   (2.7.5)",
                " +  * Suggested #507: Support for default `@JsonView` for a class",
                " +   (2.9.0)",
                " +",
                " +Tom Mack (tommack@github)",
                " +  * Reported #1208: treeToValue doesn't handle POJONodes that contain exactly",
                " +    the requested value type",
                " +   (2.7.4)",
                " +",
                " +William Headrick (headw01@github)",
                " +   * Reported#1223: `BasicClassIntrospector.forSerialization(...).findProperties` should",
                " +    respect MapperFeature.AUTO_DETECT_GETTERS/SETTERS?",
                " +   (2.7.5)",
                " +",
                " +Nick Babcock (nickbabcock)",
                " +  * Reported #1225: `JsonMappingException` should override getProcessor()",
                " +   (2.7.5)",
                " +  * Suggested #1356: Differentiate between input and code exceptions on deserialization",
                " +   (2.9.0)",
                " +",
                " +Andrew Joseph (apjoseph@github)",
                " +  * Reported #1248: `Annotated` returns raw type in place of Generic Type in 2.7.x",
                " +   (2.7.5)",
                " +",
                " +Erich Schubert (kno10@github)",
                " +  * Reported #1260: `NullPointerException` in `JsonNodeDeserializer`, provided fix",
                " +   (2.7.5)",
                " +",
                " +Brian Pontarelli (voidmain@github)",
                " +  * Reported #1301: Problem with `JavaType.toString()` for recursive (self-referential) types",
                " +   (2.7.6)",
                " +",
                " +Max Drobotov (fizmax@github)",
                " +  * Reported, contributed fix for #1332: `ArrayIndexOutOfBoundException` for enum by index deser",
                " +   (2.7.7)",
                " +",
                " +Stuart Douglas (stuartwdouglas@github)",
                " +  * Reported #1363: The static field ClassUtil.sCached can cause a class loader leak",
                " +   (2.7.8)",
                " +",
                " +Josh Caplan (jecaplan@github)",
                " +  * Reported, suggested fix for #1368: Problem serializing `JsonMappingException` due to addition",
                " +    of non-ignored `processor` property (added in 2.7)",
                " +   (2.7.8)",
                " +",
                " +Diego de Estrada (diegode@github)",
                " +  * Contributed fix for #1367: No Object Id found for an instance when using `@ConstructorProperties`",
                " +   (2.7.9)",
                " +",
                " +Kevin Hogeland (khogeland@github)",
                " +  * Reported #1501: `ArrayIndexOutOfBoundsException` on non-static inner class constructor",
                " +   (2.7.9)",
                " +",
                " +Artur Jonkisz (ajonkisz@github)",
                " +  * Reported #960: `@JsonCreator` not working on a factory with no arguments for ae enum type",
                " +   (2.8.0)",
                " +",
                " +Mikhail Kokho (mkokho@github)",
                " +  * Contributed impl for #990: Allow failing on `null` values for creator (add",
                " +  `DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES`)",
                " +   (2.8.0)",
                " +",
                " +Aleksandr Oksenenko (oleksandr-oksenenko@github)",
                " +  * Reported #999: External property is not deserialized",
                " +   (2.8.0)",
                " +",
                " +Lokesh Kumar (LokeshN@github)",
                " +  * Contributed impl for #1082: Can not use static Creator factory methods for `Enum`s,",
                " +    with JsonCreator.Mode.PROPERTIES",
                " +   (2.8.0)",
                " +  * Reported #1217: `@JsonIgnoreProperties` on Pojo fields not working for deserialization",
                " +   (2.8.0)",
                " +",
                " +Ross Goldberg",
                " +  * Reported #1165, provided fix for: `CoreXMLDeserializers` does not handle",
                " +    time-only `XMLGregorianCalendar`s",
                " +   (2.8.0)",
                " +",
                " +Maarten Billemont (lhunath@github)",
                " +  * Suggested #1184: Allow overriding of `transient` with explicit inclusion with `@JsonProperty`",
                " +   (2.8.0)",
                " +",
                " +Vladimir Kulev (lightoze@github)",
                " +  * Reported #1028: Ignore USE_BIG_DECIMAL_FOR_FLOATS for NaN/Infinity",
                " +   (2.8.0)",
                " +",
                " +Ari Fogel (arifogel@github)",
                " +  * Reported #1261, contributed fix for: `@JsonIdentityInfo` deserialization fails with",
                " +    combination of forward references, `@JsonCreator`",
                " +   (2.8.0)",
                " +",
                " +Andriy Plokhotnyuk (plokhotnyuk@github)",
                " +  * Requested #1277: Add caching of resolved generic types for `TypeFactory`",
                " +   (2.8.0)",
                " +",
                " +Arek Gabiga (arekgabiga@github)",
                " +  * Reported #1297: Deserialization of generic type with Map.class",
                " +   (2.8.1)",
                " +",
                " +Chris Jester-Young (cky@github)",
                " +  * Contributed #1335: Unconditionally call `TypeIdResolver.getDescForKnownTypeIds`",
                " +   (2.8.2)",
                " +",
                " +Andrew Snare (asnare@github)",
                " +  * Reported #1315: Binding numeric values can BigDecimal lose precision",
                " +   (2.8.2)",
                " +",
                " +Gili Tzabari (cowwoc@github)",
                " +  * Reported #1351: `@JsonInclude(NON_DEFAULT)` doesn't omit null fields",
                " +   (2.8.3)",
                " +",
                " +Oleg Zhukov (OlegZhukov@github)",
                " +  * Reported #1384: `@JsonDeserialize(keyUsing = ...)` does not work correctly",
                " +   together with `DefaultTyping.NON_FINAL`",
                " +   (2.8.4)",
                " +",
                " +Pavel Popov (tolkonepiu@github)",
                " +  * Contributed fix #1389: Problem with handling of multi-argument creator with Enums",
                " +   (2.8.4)",
                " +",
                " +Josh Gruenberg (joshng@github)",
                " +  * Reported #1403: Reference-chain hints use incorrect class-name for inner classes",
                " +   (2.8.4)",
                " +",
                " +Kevin Donnelly (kpdonn@github)",
                " +  * Reported #1432: Off by 1 bug in PropertyValueBuffer",
                " +   (2.8.5)",
                " +",
                " +Nathanial Ofiesh (ofiesh@github)",
                " +  * Reported #1441: Failure with custom Enum key deserializer, polymorphic types",
                " +   (2.8.5)",
                " +",
                " +Fr\u00c3\u00a9d\u00c3\u00a9ric Camblor (fcamblor@github)",
                " +  * Reported #1451: Type parameter not passed by `ObjectWriter` if serializer pre-fetch disabled",
                " +   (2.8.6)",
                " +",
                " +Stephan Schroevers (Stephan202@github)",
                " +  * Reported #1505: @JsonEnumDefaultValue should take precedence over FAIL_ON_NUMBERS_FOR_ENUMS",
                " +   (2.8.7)",
                " +",
                " +Alex Panchenko (panchenko@github)",
                " +  * Reported #1543: JsonFormat.Shape.NUMBER_INT does not work when defined on enum type in 2.8",
                " +   (2.8.8)",
                " +",
                " +Joshua Jones",
                " +  * Reported #1573, contributed fix: Missing properties when deserializing using a builder class",
                " +   with a non-default constructor and a mutator annotated with `@JsonUnwrapped`",
                " +   (2.8.8)",
                " +",
                " +Ivo Studens (istudens@redhat.com)",
                " +  * Contributed #1585: Invoke ServiceLoader.load() inside of a privileged block",
                " +    when loading modules using `ObjectMapper.findModules()`",
                " +   (2.8.9)",
                " +",
                " +Javy Luo (AnywnYu@github)",
                " +  * Reported #1595: `JsonIgnoreProperties.allowSetters` is not working in Jackson 2.8",
                " +   (2.8.9)",
                " +",
                " +Marco Catania (catanm@github.com)",
                " +  * Contributed #1597: Escape JSONP breaking characters",
                " +   (2.8.9)",
                " +",
                " +Andrew Joseph (apjoseph@github)",
                " +  * Reported #1629 `FromStringDeserializer` ignores registered `DeserializationProblemHandler`",
                " +    for `java.util.UUID`",
                " +   (2.8.9)",
                " +",
                " +Joe Littlejohn (joelittlejohn@github)",
                " +  * Contributed #1642: Support `READ_UNKNOWN_ENUM_VALUES_AS_NULL` with `@JsonCreator`",
                " +   (2.8.9)",
                " +",
                " +Slobodan Pejic (slobo-showbie@github)",
                " +  * Reported #1647, contributed fix: Missing properties from base class when recursive",
                " +    types are involved",
                " +   (2.8.9)",
                " +",
                " +Bertrand Renuart (brenuart@github)",
                " +  * Reported #1648: `DateTimeSerializerBase` ignores configured date format when creating contextual",
                " +   (2.8.9)",
                " +  * Reported #1651: `StdDateFormat` fails to parse 'zulu' date when TimeZone other than UTC",
                " +   (2.8.9)",
                " +  * Suggested #1745: StdDateFormat: accept and truncate millis larger than 3 digits",
                " +   (2.9.1)",
                " +  * Contributed #1749: StdDateFormat: performance improvement of '_format(..)' method",
                " +   (2.9.1)",
                " +  * Contributed #1759: Reuse `Calendar` instance during parsing by `StdDateFormat`",
                " +   (2.9.1)",
                " +",
                " +Kevin Gallardo (newkek@github)",
                " +  * Reported #1658: Infinite recursion when deserializing a class extending a Map,",
                " +    with a recursive value type",
                " +   (2.8.10)",
                " +",
                " +Lukas Euler",
                " +  * Reported #1735: Missing type checks when using polymorphic type ids",
                " +",
                " +Connor Kuhn (ckuhn@github)",
                " +  * Contributed #1341: FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY",
                " +   (2.9.0)",
                " +",
                " +Jan Lolling (jlolling@github)",
                " +  * Contributed #1319: Add `ObjectNode.put(String, BigInteger)`",
                " +   (2.9.0)",
                " +",
                " +Michael R Fairhurst (MichaelRFairhurst@github)",
                " +  * Reported #1035: `@JsonAnySetter` assumes key of `String`, does not consider declared type.",
                " +   (2.9.0)",
                " +",
                " +Fabrizio Cucci (fabriziocucci@github)",
                " +  * Reported #1406: `ObjectMapper.readTree()` methods do not return `null` on end-of-input",
                " +   (2.9.0)",
                " +",
                " +Emiliano Clari\u00c3\u00a1 (emilianogc@github)",
                " +  * Contributed #1434: Explicitly pass null on invoke calls with no arguments",
                " +   (2.9.0)",
                " +",
                " +Ana Eliza Barbosa (AnaEliza@github)",
                " +  * Contributed #1520: Case insensitive enum deserialization feature.",
                " +   (2.9.0)",
                " +",
                " +Lyor Goldstein (lgoldstein@github)",
                " +  * Reported #1544: `EnumMapDeserializer` assumes a pure `EnumMap` and does not support",
                " +    derived classes",
                " +   (2.9.0)",
                " +",
                " +Harleen Sahni (harleensahni@github)",
                " +  * Reported #403: Make FAIL_ON_NULL_FOR_PRIMITIVES apply to primitive arrays and other",
                " +    types that wrap primitives",
                " +   (2.9.0)",
                " +",
                " +Jared Jacobs (2is10@github)",
                " +  * Requested #1605: Allow serialization of `InetAddress` as simple numeric host address",
                " +   (2.9.0)",
                " +",
                " +Patrick Gunia (pgunia@github)",
                " +  * Reported #1440: Wrong `JsonStreamContext` in `DeserializationProblemHandler` when reading",
                " +  `TokenBuffer` content",
                " +   (2.9.0)",
                " +",
                " +Carsten Wickner (CarstenWickner@github)",
                " +  * Contributed #1522: Global `@JsonInclude(Include.NON_NULL)` for all properties with a specific type",
                " +   (2.9.0)",
                " +",
                " +Chris Plummer (strmer15@github)",
                " +  * Reported #1637: `ObjectReader.at()` with `JsonPointer` stops after first collection",
                " +   (2.9.0)",
                " +",
                " +Christian Basler (Dissem@github)",
                " +  * Reported #1688: Deserialization fails for `java.nio.file.Path` implementations when",
                " +    default typing enabled",
                " +   (2.9.0)",
                " +",
                " +Tim Bartley (tbartley@github)",
                " +  * Reported, suggested fix for #1705: Non-generic interface method hides type resolution info",
                " +    from generic base class",
                " +   (2.9.1)",
                " +",
                " +Lu\u00c3\u00ads Cleto (luiscleto@github)",
                " +  * Suggested 1768: Improve `TypeFactory.constructFromCanonical()` to work with",
                " +   `java.lang.reflect.Type.getTypeName()` format",
                " +   (2.9.2)",
                " +",
                " +Vincent Demay (vdemay@github)",
                " +  * Reported #1793: `java.lang.NullPointerException` in `ObjectArraySerializer.acceptJsonFormatVisitor()`",
                " +    for array value with `@JsonValue`",
                " +   (2.9.2)",
                " +",
                " +Peter Jurkovic (peterjurkovic@github)",
                " +  * Reported #1823: ClassNameIdResolver doesn't handle resolve Collections$SingletonMap,",
                " +    Collections$SingletonSet",
                " +   (2.9.3)",
                " +",
                " +alinakovalenko@github:",
                " +  * Reported #1844: Map \"deep\" merge only adds new items, but not override existing values",
                " +   (2.9.3)",
                " +",
                " +Pier-Luc Whissell (pwhissell@github):",
                " +  * Reported #1673: Serialising generic value classes via Reference Types (like Optional) fails",
                " +    to include type information",
                " +   (2.9.4)",
                " +",
                "++Alexander Skvortcov (askvortcov@github)",
                "++  * Reported #1853: Deserialise from Object (using Creator methods) returns field name",
                "++    instead of value",
                "++   (2.9.4)",
                "++",
                " +Rob Winch (rwinch@github)",
                " +  * Reported #1868: Class name handling for JDK unmodifiable Collection types changed",
                " +   (2.9.4)",
                "diff --cc src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
                "index ac04e2883,affe06b2b..6e4630e34",
                "--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
                "+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
                "@@@ -963,3 -822,150 +975,2 @@@ nonAnnotatedParamIndex, ctor)",
                " -    protected void _addDeserializerFactoryMethods",
                " -        (DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker,",
                " -         AnnotationIntrospector intr, CreatorCollector creators,",
                " -         Map<AnnotatedWithParams,BeanPropertyDefinition[]> creatorParams)",
                " -        throws JsonMappingException",
                " -    {",
                " -        List<CreatorCandidate> nonAnnotated = new LinkedList<>();",
                " -        int explCount = 0;",
                " -",
                " -        // 21-Sep-2017, tatu: First let's handle explicitly annotated ones",
                " -        for (AnnotatedMethod factory : beanDesc.getFactoryMethods()) {",
                " -            JsonCreator.Mode creatorMode = intr.findCreatorAnnotation(ctxt.getConfig(), factory);",
                " -            final int argCount = factory.getParameterCount();",
                " -            if (creatorMode == null) {",
                " -                // Only potentially accept 1-argument factory methods",
                " -                if ((argCount == 1) && vchecker.isCreatorVisible(factory)) {",
                " -                    nonAnnotated.add(CreatorCandidate.construct(intr, factory, null));",
                " -                }",
                " -                continue;",
                " -            }",
                " -            if (creatorMode == Mode.DISABLED) {",
                " -                continue;",
                " -            }",
                " -            ",
                " -            // zero-arg method factory methods fine, as long as explicit",
                " -            if (argCount == 0) {",
                " -                creators.setDefaultCreator(factory);",
                " -                continue;",
                " -            }",
                " -",
                " -            switch (creatorMode) {",
                " -            case DELEGATING:",
                " -                _addExplicitDelegatingCreator(ctxt, beanDesc, creators,",
                " -                        CreatorCandidate.construct(intr, factory, null));",
                " -                break;",
                " -            case PROPERTIES:",
                " -                _addExplicitPropertyCreator(ctxt, beanDesc, creators,",
                " -                        CreatorCandidate.construct(intr, factory, creatorParams.get(factory)));",
                " -                break;",
                " -            case DEFAULT:",
                " -            default:",
                " -                _addExplicitAnyCreator(ctxt, beanDesc, creators,",
                " -                        CreatorCandidate.construct(intr, factory, creatorParams.get(factory)));",
                " -                break;",
                " -            }",
                " -            ++explCount;",
                " -        }",
                " -        // And only if and when those handled, consider potentially visible ones",
                " -        if (explCount > 0) { // TODO: split method into two since we could have expl factories",
                " -            return;",
                " -        }",
                " -        // And then implicitly found",
                " -        for (CreatorCandidate candidate : nonAnnotated) {",
                " -            final int argCount = candidate.paramCount();",
                " -            AnnotatedWithParams factory = candidate.creator();",
                " -            final BeanPropertyDefinition[] propDefs = creatorParams.get(factory);",
                " -            // some single-arg factory methods (String, number) are auto-detected",
                " -            if (argCount != 1) {",
                " -                continue; // 2 and more args? Must be explicit, handled earlier",
                " -            }",
                " -            BeanPropertyDefinition argDef = candidate.propertyDef(0);",
                " -            boolean useProps = _checkIfCreatorPropertyBased(intr, factory, argDef);",
                " -            if (!useProps) { // not property based but delegating",
                " -                /*boolean added=*/ _handleSingleArgumentCreator(creators,",
                " -                        factory, false, vchecker.isCreatorVisible(factory));",
                " -                // 23-Sep-2016, tatu: [databind#1383]: Need to also sever link to avoid possible",
                " -                //    later problems with \"unresolved\" constructor property",
                " -                if (argDef != null) {",
                " -                    ((POJOPropertyBuilder) argDef).removeConstructors();",
                " -                }",
                " -                continue;",
                " -            }",
                " -            AnnotatedParameter nonAnnotatedParam = null;            ",
                " -            SettableBeanProperty[] properties = new SettableBeanProperty[argCount];",
                " -            int implicitNameCount = 0;",
                " -            int explicitNameCount = 0;",
                " -            int injectCount = 0;",
                " -            ",
                " -            for (int i = 0; i < argCount; ++i) {",
                " -                final AnnotatedParameter param = factory.getParameter(i);",
                " -                BeanPropertyDefinition propDef = (propDefs == null) ? null : propDefs[i];",
                " -                JacksonInject.Value injectable = intr.findInjectableValue(param);",
                " -                final PropertyName name = (propDef == null) ? null : propDef.getFullName();",
                " -",
                " -                if (propDef != null && propDef.isExplicitlyNamed()) {",
                " -                    ++explicitNameCount;",
                " -                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectable);",
                " -                    continue;",
                " -                }",
                " -                if (injectable != null) {",
                " -                    ++injectCount;",
                " -                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectable);",
                " -                    continue;",
                " -                }",
                " -                NameTransformer unwrapper = intr.findUnwrappingNameTransformer(param);",
                " -                if (unwrapper != null) {",
                " -                    _reportUnwrappedCreatorProperty(ctxt, beanDesc, param);",
                " -                    /*",
                " -                    properties[i] = constructCreatorProperty(ctxt, beanDesc, UNWRAPPED_CREATOR_PARAM_NAME, i, param, null);",
                " -                    ++implicitNameCount;",
                " -                    */",
                " -                    continue;",
                " -                }",
                " -                // One more thing: implicit names are ok iff ctor has creator annotation",
                " -                /*",
                " -                if (isCreator) {",
                " -                    if (name != null && !name.isEmpty()) {",
                " -                        ++implicitNameCount;",
                " -                        properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectable);",
                " -                        continue;",
                " -                    }",
                " -                }",
                " -                */",
                " -                /* 25-Sep-2014, tatu: Actually, we may end up \"losing\" naming due to higher-priority constructor",
                " -                 *  (see TestCreators#testConstructorCreator() test). And just to avoid running into that problem,",
                " -                 *  let's add one more work around",
                " -                 */",
                " -                /*",
                " -                PropertyName name2 = _findExplicitParamName(param, intr);",
                " -                if (name2 != null && !name2.isEmpty()) {",
                " -                    // Hmmh. Ok, fine. So what are we to do with it... ?",
                " -                    // For now... skip. May need to revisit this, should this become problematic",
                " -                    continue main_loop;",
                " -                }",
                " -                */",
                " -                if (nonAnnotatedParam == null) {",
                " -                    nonAnnotatedParam = param;",
                " -                }",
                " -            }",
                " -            final int namedCount = explicitNameCount + implicitNameCount;",
                " -            ",
                " -            // Ok: if named or injectable, we have more work to do",
                " -            if (explicitNameCount > 0 || injectCount > 0) {",
                " -                // simple case; everything covered:",
                " -                if ((namedCount + injectCount) == argCount) {",
                " -                    creators.addPropertyCreator(factory, false, properties);",
                " -                } else if ((explicitNameCount == 0) && ((injectCount + 1) == argCount)) {",
                " -                    // secondary: all but one injectable, one un-annotated (un-named)",
                " -                    creators.addDelegatingCreator(factory, false, properties, 0);",
                " -                } else { // otherwise, epic fail",
                " -                    ctxt.reportBadTypeDefinition(beanDesc,",
                " -\"Argument #%d of factory method %s has no property name annotation; must have name when multiple-parameter constructor annotated as Creator\",",
                " -                    nonAnnotatedParam.getIndex(), factory);",
                " -                }",
                " -            }",
                " -        }",
                " -    }",
                "--",
                "      protected boolean _handleSingleArgumentCreator(CreatorCollector creators,"
            ],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": []
        },
        {
            "commit_id": "5b1fec8963c2828ea2ab93c06c693bd01ec43c36",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1516602805,
            "hunks": 0,
            "message": "Merge branch '2.9'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": []
        },
        {
            "commit_id": "276c13027823a497830d507ed9d8db7ed492a281",
            "repository": "https://github.com/FasterXML/jackson-databind",
            "timestamp": 1516917111,
            "hunks": 0,
            "message": "Merge branch '2.9'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": []
        }
    ]
}
