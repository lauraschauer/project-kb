{
    "advisory_record": {
        "cve_id": "CVE-2018-5382",
        "description": "The default BKS keystore use an HMAC that is only 16 bits long, which can allow an attacker to compromise the integrity of a BKS keystore. Bouncy Castle release 1.47 changes the BKS format to a format which uses a 160 bit HMAC instead. This applies to any BKS keystore generated prior to BC 1.47. For situations where people need to create the files for legacy reasons a specific keystore type \"BKS-V1\" was introduced in 1.49. It should be noted that the use of \"BKS-V1\" is discouraged by the library authors and should only be used where it is otherwise safe to do so, as in where the use of a 16 bit checksum for the file integrity check is not going to cause a security issue in itself.",
        "reserved_timestamp": 1515715200,
        "published_timestamp": 1332201600,
        "updated_timestamp": 1617389548,
        "repository_url": null,
        "references": {
            "": 105,
            "https://access.redhat.com/support/": 16,
            "https://access.redhat.com/downloads/": 13,
            "https://access.redhat.com/labs/": 10,
            "https://access.redhat.com/errata/": 9,
            "https://access.redhat.com/security/security-updates/#/cve": 7,
            "https://www.kb.cert.org/vuls/id/306792": 6,
            "https://access.redhat.com/management/": 6,
            "https://access.redhat.com/": 6,
            "https://access.redhat.com/documentation": 6,
            "https://access.redhat.com/product-life-cycles/": 6,
            "https://access.redhat.com/security": 6,
            "https://access.redhat.com/security/security-updates/#/security-advisories": 6,
            "https://access.redhat.com/support/contact/": 6,
            "https://status.redhat.com": 6,
            "https://access.redhat.com/errata/RHSA-2018:2927": 4,
            "https://www.bouncycastle.org/releasenotes.html": 4,
            "https://insights.sei.cmu.edu/cert/2018/03/the-curious-case-of-the-bouncy-castle-bks-passwords.html": 4,
            "https://access.redhat.com/products/red-hat-enterprise-linux/": 4,
            "https://access.redhat.com/products/red-hat-openshift-container-platform": 4,
            "https://access.redhat.com/products/red-hat-ansible-automation-platform/": 4,
            "https://access.redhat.com/products/": 4,
            "https://access.redhat.com/downloads/content/package-browser": 3,
            "https://catalog.redhat.com/software/containers/explore/": 3,
            "https://access.redhat.com/articles/1202803": 3,
            "https://access.redhat.com/search/?q=*&p=1&rows=10&documentKind=Solution": 3,
            "https://access.redhat.com/search/?q=*&p=1&rows=10&documentKind=Article": 3,
            "https://access.redhat.com/documentation/en/red_hat_enterprise_linux": 3,
            "https://access.redhat.com/documentation/en/openshift_container_platform": 3,
            "https://access.redhat.com/documentation/en/red_hat_ansible_automation_platform": 3,
            "https://access.redhat.com/documentation/": 3,
            "https://access.redhat.com/security/": 3,
            "https://access.redhat.com/security/vulnerabilities": 3,
            "https://access.redhat.com/security/data": 3,
            "https://access.redhat.com/security/security-updates/#/security-labs": 3,
            "https://access.redhat.com/security/updates/backporting/": 3,
            "https://access.redhat.com/support/cases/": 3,
            "https://access.redhat.com/support/cases/#/troubleshoot": 3,
            "https://access.redhat.com/community": 3,
            "https://access.redhat.com/community/": 3,
            "https://access.redhat.com/discussions/": 3,
            "https://access.redhat.com/announcements/": 3,
            "https://access.redhat.com/accelerators/": 3,
            "https://access.redhat.com/jbossnetwork/restricted/listSoftware.html": 3,
            "https://cloud.redhat.com/insights": 3,
            "https://access.redhat.com/changeLanguage?language=en": 3,
            "https://access.redhat.com/changeLanguage?language=ko": 3,
            "https://access.redhat.com/changeLanguage?language=ja": 3,
            "https://access.redhat.com/changeLanguage?language=zh_CN": 3,
            "https://redhat.com/en": 3,
            "https://twitter.com/RedHat": 3,
            "https://access.redhat.com/management": 3,
            "https://access.redhat.com/support": 3,
            "https://access.redhat.com/support/customer-service": 3,
            "https://access.redhat.com/articles/33844": 3,
            "https://access.redhat.com/help/login_assistance": 3,
            "https://www.redhat.com/en/trust": 3,
            "https://www.redhat.com/en/about/browser-support": 3,
            "https://www.redhat.com/en/about/digital-accessibility": 3,
            "https://access.redhat.com/recognition/": 3,
            "https://access.redhat.com/help/colophon/": 3,
            "https://www.redhat.com/": 3,
            "http://developers.redhat.com/": 3,
            "https://connect.redhat.com/": 3,
            "https://cloud.redhat.com/": 3,
            "https://access.redhat.com/subscription-value": 3,
            "https://www.redhat.com/about/": 3,
            "http://jobs.redhat.com": 3,
            "https://redhat.com/en/about/company": 3,
            "https://redhat.com/en/jobs": 3,
            "https://redhat.com/en/events": 3,
            "https://redhat.com/en/about/office-locations": 3,
            "https://redhat.com/en/contact": 3,
            "https://redhat.com/en/blog": 3,
            "https://redhat.com/en/about/our-culture/diversity-equity-inclusion": 3,
            "https://coolstuff.redhat.com/": 3,
            "https://www.redhat.com/en/summit": 3,
            "https://redhat.com/en/about/privacy-policy": 3,
            "https://redhat.com/en/about/terms-use": 3,
            "https://redhat.com/en/about/all-policies-guidelines": 3,
            "https://redhat.com/en/about/digital-accessibility": 3,
            "http://www.securityfocus.com/bid/103453": 2,
            "https://www.oracle.com/security-alerts/cpuoct2020.html": 2,
            "https://access.redhat.com/security/updates/classification/": 2,
            "https://access.redhat.com/support/policy/updates/jboss_notes": 2,
            "https://access.redhat.com/support/policy/updates/red_hat_build_of_quarkus_notes": 2,
            "https://access.redhat.com/articles/7060671": 2,
            "https://access.redhat.com/changeLanguage?language=fr": 1,
            "https://access.redhat.com/products/red-hat-satellite/": 1,
            "https://access.redhat.com/products/red-hat-subscription-management/": 1,
            "https://access.redhat.com/products/red-hat-insights/": 1,
            "https://access.redhat.com/products/red-hat-openstack-platform/": 1,
            "https://access.redhat.com/products/red-hat-openshift-container-platform/": 1,
            "https://access.redhat.com/products/red-hat-openshift-ai/": 1,
            "https://access.redhat.com/products/openshift-dedicated-red-hat/": 1,
            "https://access.redhat.com/products/red-hat-advanced-cluster-security-for-kubernetes/": 1,
            "https://access.redhat.com/products/red-hat-advanced-cluster-management-for-kubernetes/": 1,
            "https://access.redhat.com/products/red-hat-quay/": 1,
            "https://access.redhat.com/products/red-hat-openshift-dev-spaces": 1,
            "https://access.redhat.com/products/red-hat-openshift-service-aws": 1,
            "https://access.redhat.com/products/red-hat-storage/": 1,
            "https://access.redhat.com/products/red-hat-hyperconverged-infrastructure/": 1,
            "https://access.redhat.com/products/red-hat-ceph-storage/": 1,
            "https://access.redhat.com/products/red-hat-openshift-data-foundation": 1,
            "https://access.redhat.com/products/red-hat-runtimes/": 1,
            "https://access.redhat.com/products/red-hat-jboss-enterprise-application-platform/": 1,
            "https://access.redhat.com/products/red-hat-data-grid/": 1,
            "https://access.redhat.com/products/red-hat-jboss-web-server/": 1,
            "https://access.redhat.com/products/red-hat-build-of-keycloak/": 1,
            "https://access.redhat.com/products/spring-boot/": 1,
            "https://access.redhat.com/products/nodejs/": 1,
            "https://access.redhat.com/products/quarkus/": 1,
            "https://access.redhat.com/products/red-hat-application-foundations/": 1,
            "https://access.redhat.com/products/red-hat-fuse/": 1,
            "https://access.redhat.com/products/red-hat-amq/": 1,
            "https://access.redhat.com/products/red-hat-3scale/": 1,
            "https://console.redhat.com/insights/patch/advisories/RHSA-2018:2927": 1,
            "https://access.redhat.com/documentation/en-us/red_hat_satellite/6.4/html/upgrading_and_updating_red_hat_satellite/": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1052713": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1060745": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1155817": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1177766": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1197650": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1225252": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1260733": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1265533": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1291730": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1295741": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1312098": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1328707": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1349150": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1356517": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1357256": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1372468": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1372731": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1379291": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1382069": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1386283": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1386908": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1389820": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1400058": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1409485": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1410264": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1410746": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1412596": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1416106": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1417015": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1417130": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1419060": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1425609": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1426739": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1428541": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1430022": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1430742": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1432858": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1435973": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1437234": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1439353": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1443505": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1443804": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1444015": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1449011": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1452772": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1455006": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1455132": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1458383": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1458573": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1458754": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1464219": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1464512": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1465573": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1468354": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1468359": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1470014": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1470761": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1474348": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1475121": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1478849": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1482540": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1483033": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1485805": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1486297": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1486782": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1487710": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1488291": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1489377": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1498588": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1498976": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1500593": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1506612": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1508551": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1515888": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1516623": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1527896": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1536487": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1538448": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1538479": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1539076": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1542850": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1545314": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1549777": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1549779": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1552632": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1553869": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1553994": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1555310": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1557067": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1560035": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1561061": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1561723": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1563749": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1564577": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1566764": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1570808": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1572290": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1572297": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1572305": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1573391": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1579384": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1588313": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1588314": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1588323": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1588327": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1588330": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1588688": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1588695": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1588708": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1588715": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1588721": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1595777": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1608447": 1,
            "https://www.redhat.com/security/data/cve/CVE-2015-3208.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2015-6644.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2016-1000338.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2016-1000339.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2016-1000340.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2016-1000341.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2016-1000342.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2016-1000343.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2016-1000344.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2016-1000345.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2016-1000346.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2016-1000352.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2017-5929.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2017-7233.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2017-7536.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2017-10689.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2017-10690.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2017-12175.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2017-15095.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2017-15100.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-1090.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-1096.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-1097.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-5382.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-6188.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-7536.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-7537.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-10237.html": 1,
            "https://access.redhat.com/security/updates/classification/#important": 1,
            "https://access.redhat.com/documentation/en-us/red_hat_satellite/6.4/html/release_notes/": 1,
            "https://access.redhat.com/security/team/contact/": 1,
            "https://www.first.org/cvss/user-guide": 1,
            "https://access.redhat.com/security/cve/CVE-2019-9213": 1,
            "https://access.redhat.com/security/cve/CVE-2019-18634": 1,
            "https://access.redhat.com/security/cve/CVE-2020-11023": 1,
            "https://access.redhat.com/security/cve/CVE-2019-15031": 1,
            "https://access.redhat.com/security/cve/CVE-2018-1125": 1,
            "https://access.redhat.com/security/cve/CVE-2020-14060": 1,
            "https://nvd.nist.gov/vuln-metrics/cvss": 1,
            "https://access.redhat.com/site/security/team/contact/": 1,
            "https://access.redhat.com/product-life-cycles": 1,
            "https://access.redhat.com/articles/7019023": 1,
            "https://access.redhat.com/articles/6200982": 1,
            "https://access.redhat.com/search/#/knowledgebase": 1,
            "https://access.redhat.com/search/#/discussions": 1,
            "https://access.redhat.com/support/policy/updates/jboss_eap_xp_notes": 1,
            "https://access.redhat.com/articles/7037218": 1,
            "https://github.com/nodejs/Release": 1,
            "https://access.redhat.com/articles/4544981": 1,
            "https://access.redhat.com/support/policy/updates/jboss_notes#p_rhbocamel": 1,
            "https://access.redhat.com/solutions/6342381": 1,
            "https://access.redhat.com/solutions/5941551": 1,
            "https://access.redhat.com/support/policy/updates/service-interconnect": 1,
            "https://access.redhat.com/articles/6975608": 1,
            "https://access.redhat.com/articles/6999674": 1,
            "https://access.redhat.com/articles/6371801": 1
        },
        "affected_products": [
            "BKS",
            "HMAC",
            "Castle",
            "Bouncy Castle"
        ],
        "versions": {
            "lessThan": "1.47",
            "status": "affected",
            "version": "all",
            "versionType": "custom"
        },
        "files": [
            "BKS",
            "BKS-V1",
            "HMAC"
        ],
        "keywords": [
            "cause",
            "situation",
            "legacy",
            "default",
            "library",
            "people",
            "release",
            "need",
            "issue",
            "security",
            "apply",
            "note",
            "checksum",
            "allow",
            "attacker",
            "format",
            "file",
            "author",
            "compromise",
            "integrity",
            "create",
            "change",
            "discourage",
            "type",
            "introduce",
            "hmac",
            "reason",
            "keystore",
            "check",
            "generate",
            "castle",
            "bouncy"
        ],
        "files_extension": [],
        "has_fixing_commit": false
    },
    "commits": [
        {
            "commit_id": "6f319e55de4a0b459666851fd9315c130650aa2a",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1514329879,
            "hunks": 9,
            "message": "github #274: improved exception for bogus DH group parameters Java 1.4 compatibility changes and updates.",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/params/DHParameters.java b/core/src/main/java/org/bouncycastle/crypto/params/DHParameters.java",
                "index fec6dfdc4..5bdb10a19 100644",
                "--- a/core/src/main/java/org/bouncycastle/crypto/params/DHParameters.java",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/params/DHParameters.java",
                "@@ -96,2 +96,7 @@ public class DHParameters",
                "+        if (m > p.bitLength())",
                "+        {",
                "+            throw new IllegalArgumentException(\"unsafe p value so small specific l required\");",
                "+        }",
                "+",
                "         this.g = g;",
                "diff --git a/core/src/main/java/org/bouncycastle/util/Arrays.java b/core/src/main/java/org/bouncycastle/util/Arrays.java",
                "index 61cbf1567..ca342069c 100644",
                "--- a/core/src/main/java/org/bouncycastle/util/Arrays.java",
                "+++ b/core/src/main/java/org/bouncycastle/util/Arrays.java",
                "@@ -1257,14 +1257,16 @@ public final class Arrays",
                "     /**",
                "-     * fill input array by zeros",
                "+     * Fill input array by zeros",
                "+     *",
                "      * @param array input array",
                "      */",
                "-    public static void clear(byte[] array) {",
                "-        if(array != null)",
                "+    public static void clear(byte[] array)",
                "+    {",
                "+        if (array != null)",
                "         {",
                "             for (int i = 0; i < array.length; i++)",
                "+            {",
                "                 array[i] = 0;",
                "+            }",
                "         }",
                "     }",
                "-",
                "-",
                " }",
                "diff --git a/core/src/main/jdk1.4/org/bouncycastle/util/Arrays.java b/core/src/main/jdk1.4/org/bouncycastle/util/Arrays.java",
                "index 11a4b1e9a..93169b4d1 100644",
                "--- a/core/src/main/jdk1.4/org/bouncycastle/util/Arrays.java",
                "+++ b/core/src/main/jdk1.4/org/bouncycastle/util/Arrays.java",
                "@@ -1057,2 +1057,18 @@ public final class Arrays",
                "+    /**",
                "+     * Fill input array by zeros",
                "+     *",
                "+     * @param array input array",
                "+     */",
                "+    public static void clear(byte[] array)",
                "+    {",
                "+        if (array != null)",
                "+        {",
                "+            for (int i = 0; i < array.length; i++)",
                "+            {",
                "+                array[i] = 0;",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "     /**",
                "diff --git a/prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/dh/KeyPairGeneratorSpi.java b/prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/dh/KeyPairGeneratorSpi.java",
                "index 864bf56ff..34b28df1f 100644",
                "--- a/prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/dh/KeyPairGeneratorSpi.java",
                "+++ b/prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/dh/KeyPairGeneratorSpi.java",
                "@@ -58,4 +58,11 @@ public class KeyPairGeneratorSpi",
                "-        param = new DHKeyGenerationParameters(random, new DHParameters(dhParams.getP(), dhParams.getG(), null, dhParams.getL()));",
                "-",
                "+        try",
                "+        {",
                "+            param = new DHKeyGenerationParameters(random, new DHParameters(dhParams.getP(), dhParams.getG(), null, dhParams.getL()));",
                "+        }",
                "+        catch (IllegalArgumentException e)",
                "+        {",
                "+            throw new InvalidAlgorithmParameterException(e.getMessage(), e);",
                "+        }",
                "+        ",
                "         engine.init(param);",
                "diff --git a/prov/src/main/jdk1.4/org/bouncycastle/jcajce/provider/keystore/bcfks/BcFKSKeyStoreSpi.java b/prov/src/main/jdk1.4/org/bouncycastle/jcajce/provider/keystore/bcfks/BcFKSKeyStoreSpi.java",
                "new file mode 100644",
                "index 000000000..2d0c432ed",
                "--- /dev/null",
                "+++ b/prov/src/main/jdk1.4/org/bouncycastle/jcajce/provider/keystore/bcfks/BcFKSKeyStoreSpi.java",
                "@@ -0,0 +1,1080 @@",
                "+package org.bouncycastle.jcajce.provider.keystore.bcfks;",
                "+",
                "+import java.io.ByteArrayInputStream;",
                "+import java.io.IOException;",
                "+import java.io.InputStream;",
                "+import java.io.OutputStream;",
                "+import java.math.BigInteger;",
                "+import java.security.AlgorithmParameters;",
                "+import java.security.InvalidKeyException;",
                "+import java.security.Key;",
                "+import java.security.KeyFactory;",
                "+import java.security.KeyStore;",
                "+import java.security.KeyStoreException;",
                "+import java.security.KeyStoreSpi;",
                "+import java.security.NoSuchAlgorithmException;",
                "+import java.security.PrivateKey;",
                "+import java.security.SecureRandom;",
                "+import java.security.UnrecoverableKeyException;",
                "+import java.security.cert.Certificate;",
                "+import java.security.cert.CertificateEncodingException;",
                "+import java.security.cert.CertificateException;",
                "+import java.security.cert.CertificateFactory;",
                "+import java.security.cert.X509Certificate;",
                "+import java.security.spec.PKCS8EncodedKeySpec;",
                "+import java.text.ParseException;",
                "+import java.util.Date;",
                "+import java.util.Enumeration;",
                "+import java.util.HashMap;",
                "+import java.util.HashSet;",
                "+import java.util.Iterator;",
                "+import java.util.Map;",
                "+",
                "+import javax.crypto.BadPaddingException;",
                "+import javax.crypto.Cipher;",
                "+import javax.crypto.IllegalBlockSizeException;",
                "+import javax.crypto.Mac;",
                "+import javax.crypto.NoSuchPaddingException;",
                "+import javax.crypto.SecretKey;",
                "+import javax.crypto.SecretKeyFactory;",
                "+import javax.crypto.spec.SecretKeySpec;",
                "+import javax.security.auth.callback.Callback;",
                "+import javax.security.auth.callback.CallbackHandler;",
                "+import javax.security.auth.callback.PasswordCallback;",
                "+import javax.security.auth.callback.UnsupportedCallbackException;",
                "+",
                "+import org.bouncycastle.asn1.ASN1Encodable;",
                "+import org.bouncycastle.asn1.ASN1InputStream;",
                "+import org.bouncycastle.asn1.ASN1ObjectIdentifier;",
                "+import org.bouncycastle.asn1.DERNull;",
                "+import org.bouncycastle.asn1.bc.EncryptedObjectStoreData;",
                "+import org.bouncycastle.asn1.bc.EncryptedPrivateKeyData;",
                "+import org.bouncycastle.asn1.bc.EncryptedSecretKeyData;",
                "+import org.bouncycastle.asn1.bc.ObjectData;",
                "+import org.bouncycastle.asn1.bc.ObjectDataSequence;",
                "+import org.bouncycastle.asn1.bc.ObjectStore;",
                "+import org.bouncycastle.asn1.bc.ObjectStoreData;",
                "+import org.bouncycastle.asn1.bc.ObjectStoreIntegrityCheck;",
                "+import org.bouncycastle.asn1.bc.PbkdMacIntegrityCheck;",
                "+import org.bouncycastle.asn1.bc.SecretKeyData;",
                "+import org.bouncycastle.asn1.cms.CCMParameters;",
                "+import org.bouncycastle.asn1.misc.MiscObjectIdentifiers;",
                "+import org.bouncycastle.asn1.misc.ScryptParams;",
                "+import org.bouncycastle.asn1.nist.NISTObjectIdentifiers;",
                "+import org.bouncycastle.asn1.oiw.OIWObjectIdentifiers;",
                "+import org.bouncycastle.asn1.pkcs.EncryptedPrivateKeyInfo;",
                "+import org.bouncycastle.asn1.pkcs.EncryptionScheme;",
                "+import org.bouncycastle.asn1.pkcs.KeyDerivationFunc;",
                "+import org.bouncycastle.asn1.pkcs.PBES2Parameters;",
                "+import org.bouncycastle.asn1.pkcs.PBKDF2Params;",
                "+import org.bouncycastle.asn1.pkcs.PKCSObjectIdentifiers;",
                "+import org.bouncycastle.asn1.pkcs.PrivateKeyInfo;",
                "+import org.bouncycastle.asn1.x509.AlgorithmIdentifier;",
                "+import org.bouncycastle.asn1.x9.X9ObjectIdentifiers;",
                "+import org.bouncycastle.crypto.PBEParametersGenerator;",
                "+import org.bouncycastle.crypto.digests.SHA3Digest;",
                "+import org.bouncycastle.crypto.digests.SHA512Digest;",
                "+import org.bouncycastle.crypto.generators.PKCS5S2ParametersGenerator;",
                "+import org.bouncycastle.crypto.generators.SCrypt;",
                "+import org.bouncycastle.crypto.params.KeyParameter;",
                "+import org.bouncycastle.crypto.util.PBKDF2Config;",
                "+import org.bouncycastle.crypto.util.PBKDFConfig;",
                "+import org.bouncycastle.crypto.util.ScryptConfig;",
                "+import org.bouncycastle.jce.provider.BouncyCastleProvider;",
                "+import org.bouncycastle.util.Arrays;",
                "+import org.bouncycastle.util.Strings;",
                "+",
                "+class BcFKSKeyStoreSpi",
                "+    extends KeyStoreSpi",
                "+{",
                "+    private static final Map<String, ASN1ObjectIdentifier> oidMap = new HashMap<String, ASN1ObjectIdentifier>();",
                "+    private static final Map<ASN1ObjectIdentifier, String> publicAlgMap = new HashMap<ASN1ObjectIdentifier, String>();",
                "+",
                "+    static",
                "+    {",
                "+        // Note: AES handled inline",
                "+        oidMap.put(\"DESEDE\", OIWObjectIdentifiers.desEDE);",
                "+        oidMap.put(\"TRIPLEDES\", OIWObjectIdentifiers.desEDE);",
                "+        oidMap.put(\"TDEA\", OIWObjectIdentifiers.desEDE);",
                "+        oidMap.put(\"HMACSHA1\", PKCSObjectIdentifiers.id_hmacWithSHA1);",
                "+        oidMap.put(\"HMACSHA224\", PKCSObjectIdentifiers.id_hmacWithSHA224);",
                "+        oidMap.put(\"HMACSHA256\", PKCSObjectIdentifiers.id_hmacWithSHA256);",
                "+        oidMap.put(\"HMACSHA384\", PKCSObjectIdentifiers.id_hmacWithSHA384);",
                "+        oidMap.put(\"HMACSHA512\", PKCSObjectIdentifiers.id_hmacWithSHA512);",
                "+",
                "+        publicAlgMap.put(PKCSObjectIdentifiers.rsaEncryption, \"RSA\");",
                "+        publicAlgMap.put(X9ObjectIdentifiers.id_ecPublicKey, \"EC\");",
                "+        publicAlgMap.put(OIWObjectIdentifiers.elGamalAlgorithm, \"DH\");",
                "+        publicAlgMap.put(PKCSObjectIdentifiers.dhKeyAgreement, \"DH\");",
                "+        publicAlgMap.put(X9ObjectIdentifiers.id_dsa, \"DSA\");",
                "+    }",
                "+",
                "+    private static String getPublicKeyAlg(ASN1ObjectIdentifier oid)",
                "+    {",
                "+        String algName = (String)publicAlgMap.get(oid);",
                "+",
                "+        if (algName != null)",
                "+        {",
                "+            return algName;",
                "+        }",
                "+",
                "+        return oid.getId();",
                "+    }",
                "+",
                "+    private final static BigInteger CERTIFICATE = BigInteger.valueOf(0);",
                "+    private final static BigInteger PRIVATE_KEY = BigInteger.valueOf(1);",
                "+    private final static BigInteger SECRET_KEY = BigInteger.valueOf(2);",
                "+    private final static BigInteger PROTECTED_PRIVATE_KEY = BigInteger.valueOf(3);",
                "+    private final static BigInteger PROTECTED_SECRET_KEY = BigInteger.valueOf(4);",
                "+",
                "+    private final BouncyCastleProvider provider;",
                "+    private final Map<String, ObjectData> entries = new HashMap<String, ObjectData>();",
                "+    private final Map<String, PrivateKey> privateKeyCache = new HashMap<String, PrivateKey>();",
                "+",
                "+    private AlgorithmIdentifier hmacAlgorithm;",
                "+    private KeyDerivationFunc hmacPkbdAlgorithm;",
                "+    private Date creationDate;",
                "+    private Date lastModifiedDate;",
                "+",
                "+    BcFKSKeyStoreSpi(BouncyCastleProvider provider)",
                "+    {",
                "+        this.provider = provider;",
                "+    }",
                "+",
                "+    public Key engineGetKey(String alias, char[] password)",
                "+        throws NoSuchAlgorithmException, UnrecoverableKeyException",
                "+    {",
                "+        ObjectData ent = (ObjectData)entries.get(alias);",
                "+",
                "+        if (ent != null)",
                "+        {",
                "+            if (ent.getType().equals(PRIVATE_KEY) || ent.getType().equals(PROTECTED_PRIVATE_KEY))",
                "+            {",
                "+                PrivateKey cachedKey = (PrivateKey)privateKeyCache.get(alias);",
                "+                if (cachedKey != null)",
                "+                {",
                "+                    return cachedKey;",
                "+                }",
                "+",
                "+                EncryptedPrivateKeyData encPrivData = EncryptedPrivateKeyData.getInstance(ent.getData());",
                "+                EncryptedPrivateKeyInfo encInfo = EncryptedPrivateKeyInfo.getInstance(encPrivData.getEncryptedPrivateKeyInfo());",
                "+",
                "+                try",
                "+                {",
                "+                    PrivateKeyInfo pInfo = PrivateKeyInfo.getInstance(decryptData(\"PRIVATE_KEY_ENCRYPTION\", encInfo.getEncryptionAlgorithm(), password, encInfo.getEncryptedData()));",
                "+",
                "+                    KeyFactory kFact;",
                "+                    if (provider != null)",
                "+                    {",
                "+                        kFact = KeyFactory.getInstance(pInfo.getPrivateKeyAlgorithm().getAlgorithm().getId(), provider);",
                "+                    }",
                "+                    else",
                "+                    {",
                "+                        kFact = KeyFactory.getInstance(getPublicKeyAlg(pInfo.getPrivateKeyAlgorithm().getAlgorithm()));",
                "+                    }",
                "+",
                "+                    PrivateKey privateKey = kFact.generatePrivate(new PKCS8EncodedKeySpec(pInfo.getEncoded()));",
                "+",
                "+                    // check that the key pair and the certificate public key are consistent",
                "+                    // TODO: new ConsistentKeyPair(engineGetCertificate(alias).getPublicKey(), privateKey);",
                "+",
                "+                    privateKeyCache.put(alias, privateKey);",
                "+",
                "+                    return privateKey;",
                "+                }",
                "+                catch (Exception e)",
                "+                {",
                "+                    throw new UnrecoverableKeyException(\"BCFKS KeyStore unable to recover private key (\" + alias + \"): \" + e.getMessage());",
                "+                }",
                "+            }",
                "+            else if (ent.getType().equals(SECRET_KEY) || ent.getType().equals(PROTECTED_SECRET_KEY))",
                "+            {",
                "+                EncryptedSecretKeyData encKeyData = EncryptedSecretKeyData.getInstance(ent.getData());",
                "+",
                "+                try",
                "+                {",
                "+                    SecretKeyData keyData = SecretKeyData.getInstance(decryptData(\"SECRET_KEY_ENCRYPTION\", encKeyData.getKeyEncryptionAlgorithm(), password, encKeyData.getEncryptedKeyData()));",
                "+                    SecretKeyFactory kFact;",
                "+                    if (provider != null)",
                "+                    {",
                "+                        kFact = SecretKeyFactory.getInstance(keyData.getKeyAlgorithm().getId(), provider);",
                "+                    }",
                "+                    else",
                "+                    {",
                "+                        kFact = SecretKeyFactory.getInstance(keyData.getKeyAlgorithm().getId());",
                "+                    }",
                "+",
                "+                    return kFact.generateSecret(new SecretKeySpec(keyData.getKeyBytes(), keyData.getKeyAlgorithm().getId()));",
                "+                }",
                "+                catch (Exception e)",
                "+                {",
                "+                    throw new UnrecoverableKeyException(\"BCFKS KeyStore unable to recover secret key (\" + alias + \"): \" + e.getMessage());",
                "+                }",
                "+            }",
                "+            else",
                "+            {",
                "+                throw new UnrecoverableKeyException(\"BCFKS KeyStore unable to recover secret key (\" + alias + \"): type not recognized\");",
                "+            }",
                "+        }",
                "+",
                "+        return null;",
                "+    }",
                "+",
                "+    public Certificate[] engineGetCertificateChain(String alias)",
                "+    {",
                "+        ObjectData ent = (ObjectData)entries.get(alias);",
                "+",
                "+        if (ent != null)",
                "+        {",
                "+            if (ent.getType().equals(PRIVATE_KEY) || ent.getType().equals(PROTECTED_PRIVATE_KEY))",
                "+            {",
                "+                EncryptedPrivateKeyData encPrivData = EncryptedPrivateKeyData.getInstance(ent.getData());",
                "+                org.bouncycastle.asn1.x509.Certificate[] certificates = encPrivData.getCertificateChain();",
                "+                Certificate[] chain = new X509Certificate[certificates.length];",
                "+",
                "+                for (int i = 0; i != chain.length; i++)",
                "+                {",
                "+                    chain[i] = decodeCertificate(certificates[i]);",
                "+                }",
                "+",
                "+                return chain;",
                "+            }",
                "+        }",
                "+",
                "+        return null;",
                "+    }",
                "+",
                "+    public Certificate engineGetCertificate(String s)",
                "+    {",
                "+        ObjectData ent = (ObjectData)entries.get(s);",
                "+",
                "+        if (ent != null)",
                "+        {",
                "+            if (ent.getType().equals(PRIVATE_KEY) || ent.getType().equals(PROTECTED_PRIVATE_KEY))",
                "+            {",
                "+                EncryptedPrivateKeyData encPrivData = EncryptedPrivateKeyData.getInstance(ent.getData());",
                "+                org.bouncycastle.asn1.x509.Certificate[] certificates = encPrivData.getCertificateChain();",
                "+",
                "+                return decodeCertificate(certificates[0]);",
                "+            }",
                "+            else if (ent.getType().equals(CERTIFICATE))",
                "+            {",
                "+                return decodeCertificate(ent.getData());",
                "+            }",
                "+        }",
                "+",
                "+        return null;",
                "+    }",
                "+",
                "+    private Certificate decodeCertificate(Object cert)",
                "+    {",
                "+        if (provider != null)",
                "+        {",
                "+            try",
                "+            {",
                "+                CertificateFactory certFact = CertificateFactory.getInstance(\"X.509\", provider);",
                "+",
                "+                return certFact.generateCertificate(new ByteArrayInputStream(org.bouncycastle.asn1.x509.Certificate.getInstance(cert).getEncoded()));",
                "+            }",
                "+            catch (Exception e)",
                "+            {",
                "+                return null;",
                "+            }",
                "+        }",
                "+        else",
                "+        {",
                "+            try",
                "+            {",
                "+                CertificateFactory certFact = CertificateFactory.getInstance(\"X.509\");",
                "+",
                "+                return certFact.generateCertificate(new ByteArrayInputStream(org.bouncycastle.asn1.x509.Certificate.getInstance(cert).getEncoded()));",
                "+            }",
                "+            catch (Exception e)",
                "+            {",
                "+                return null;",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+    public Date engineGetCreationDate(String s)",
                "+    {",
                "+        ObjectData ent = (ObjectData)entries.get(s);",
                "+",
                "+        if (ent != null)",
                "+        {",
                "+            try",
                "+            {",
                "+                // we return last modified as it represents date current state of entry was created",
                "+                return ent.getLastModifiedDate().getDate();",
                "+            }",
                "+            catch (ParseException e)",
                "+            {",
                "+                return new Date();     // it's here, but...",
                "+            }",
                "+        }",
                "+",
                "+        return null;",
                "+    }",
                "+",
                "+    public void engineSetKeyEntry(String alias, Key key, char[] password, Certificate[] chain)",
                "+        throws KeyStoreException",
                "+    {",
                "+        Date creationDate = new Date();",
                "+        Date lastEditDate = creationDate;",
                "+",
                "+        ObjectData entry = (ObjectData)entries.get(alias);",
                "+        if (entry != null)",
                "+        {",
                "+            creationDate = extractCreationDate(entry, creationDate);",
                "+        }",
                "+",
                "+        privateKeyCache.remove(alias);",
                "+",
                "+        if (key instanceof PrivateKey)",
                "+        {",
                "+            if (chain == null)",
                "+            {",
                "+                throw new KeyStoreException(\"BCFKS KeyStore requires a certificate chain for private key storage.\");",
                "+            }",
                "+",
                "+            try",
                "+            {",
                "+                // check that the key pair and the certificate public are consistent",
                "+                // TODO: new ConsistentKeyPair(chain[0].getPublicKey(), (PrivateKey)key);",
                "+",
                "+                byte[] encodedKey = key.getEncoded();",
                "+",
                "+                KeyDerivationFunc pbkdAlgId = generatePkbdAlgorithmIdentifier(PKCSObjectIdentifiers.id_PBKDF2, 256 / 8);",
                "+                byte[] keyBytes = generateKey(pbkdAlgId, \"PRIVATE_KEY_ENCRYPTION\", ((password != null) ? password : new char[0]));",
                "+",
                "+                Cipher c;",
                "+                if (provider == null)",
                "+                {",
                "+                    c = Cipher.getInstance(\"AES/CCM/NoPadding\");",
                "+                }",
                "+                else",
                "+                {",
                "+                    c = Cipher.getInstance(\"AES/CCM/NoPadding\", provider);",
                "+                }",
                "+",
                "+                c.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(keyBytes, \"AES\"));",
                "+",
                "+                byte[] encryptedKey = c.doFinal(encodedKey);",
                "+",
                "+                AlgorithmParameters algParams = c.getParameters();",
                "+",
                "+                PBES2Parameters pbeParams = new PBES2Parameters(pbkdAlgId, new EncryptionScheme(NISTObjectIdentifiers.id_aes256_CCM, CCMParameters.getInstance(algParams.getEncoded())));",
                "+",
                "+                EncryptedPrivateKeyInfo keyInfo = new EncryptedPrivateKeyInfo(new AlgorithmIdentifier(PKCSObjectIdentifiers.id_PBES2, pbeParams), encryptedKey);",
                "+",
                "+                EncryptedPrivateKeyData keySeq = createPrivateKeySequence(keyInfo, chain);",
                "+",
                "+                entries.put(alias, new ObjectData(PRIVATE_KEY, alias, creationDate, lastEditDate, keySeq.getEncoded(), null));",
                "+            }",
                "+            catch (Exception e)",
                "+            {",
                "+                throw new ExtKeyStoreException(\"BCFKS KeyStore exception storing private key: \" + e.toString(), e);",
                "+            }",
                "+        }",
                "+        else if (key instanceof SecretKey)",
                "+        {",
                "+            if (chain != null)",
                "+            {",
                "+                throw new KeyStoreException(\"BCFKS KeyStore cannot store certificate chain with secret key.\");",
                "+            }",
                "+",
                "+            try",
                "+            {",
                "+                byte[] encodedKey = key.getEncoded();",
                "+",
                "+                KeyDerivationFunc pbkdAlgId = generatePkbdAlgorithmIdentifier(PKCSObjectIdentifiers.id_PBKDF2, 256 / 8);",
                "+                byte[] keyBytes = generateKey(pbkdAlgId, \"SECRET_KEY_ENCRYPTION\", ((password != null) ? password : new char[0]));",
                "+",
                "+                Cipher c;",
                "+                if (provider == null)",
                "+                {",
                "+                    c = Cipher.getInstance(\"AES/CCM/NoPadding\");",
                "+                }",
                "+                else",
                "+                {",
                "+                    c = Cipher.getInstance(\"AES/CCM/NoPadding\", provider);",
                "+                }",
                "+",
                "+                c.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(keyBytes, \"AES\"));",
                "+",
                "+",
                "+                String keyAlg = Strings.toUpperCase(key.getAlgorithm());",
                "+                byte[] encryptedKey;",
                "+",
                "+                if (keyAlg.indexOf(\"AES\") > -1)",
                "+                {",
                "+                    encryptedKey = c.doFinal(new SecretKeyData(NISTObjectIdentifiers.aes, encodedKey).getEncoded());",
                "+                }",
                "+                else",
                "+                {",
                "+                    ASN1ObjectIdentifier algOid = (ASN1ObjectIdentifier)oidMap.get(keyAlg);",
                "+                    if (algOid != null)",
                "+                    {",
                "+                        encryptedKey = c.doFinal(new SecretKeyData(algOid, encodedKey).getEncoded());",
                "+                    }",
                "+                    else",
                "+                    {",
                "+                        throw new KeyStoreException(\"BCFKS KeyStore cannot recognize secret key (\" + keyAlg + \") for storage.\");",
                "+                    }",
                "+                }",
                "+",
                "+",
                "+                AlgorithmParameters algParams = c.getParameters();",
                "+",
                "+                PBES2Parameters pbeParams = new PBES2Parameters(pbkdAlgId, new EncryptionScheme(NISTObjectIdentifiers.id_aes256_CCM, CCMParameters.getInstance(algParams.getEncoded())));",
                "+",
                "+                EncryptedSecretKeyData keyData = new EncryptedSecretKeyData(new AlgorithmIdentifier(PKCSObjectIdentifiers.id_PBES2, pbeParams), encryptedKey);",
                "+",
                "+                entries.put(alias, new ObjectData(SECRET_KEY, alias, creationDate, lastEditDate, keyData.getEncoded(), null));",
                "+            }",
                "+            catch (Exception e)",
                "+            {",
                "+                throw new ExtKeyStoreException(\"BCFKS KeyStore exception storing private key: \" + e.toString(), e);",
                "+            }",
                "+        }",
                "+        else",
                "+        {",
                "+            throw new KeyStoreException(\"BCFKS KeyStore unable to recognize key.\");",
                "+        }",
                "+",
                "+        lastModifiedDate = lastEditDate;",
                "+    }",
                "+",
                "+    private SecureRandom getDefaultSecureRandom()",
                "+    {",
                "+        return new SecureRandom();",
                "+    }",
                "+",
                "+    private EncryptedPrivateKeyData createPrivateKeySequence(EncryptedPrivateKeyInfo encryptedPrivateKeyInfo, Certificate[] chain)",
                "+        throws CertificateEncodingException",
                "+    {",
                "+        org.bouncycastle.asn1.x509.Certificate[] certChain = new org.bouncycastle.asn1.x509.Certificate[chain.length];",
                "+        for (int i = 0; i != chain.length; i++)",
                "+        {",
                "+            certChain[i] = org.bouncycastle.asn1.x509.Certificate.getInstance(chain[i].getEncoded());",
                "+        }",
                "+",
                "+        return new EncryptedPrivateKeyData(encryptedPrivateKeyInfo, certChain);",
                "+    }",
                "+",
                "+    public void engineSetKeyEntry(String alias, byte[] keyBytes, Certificate[] chain)",
                "+        throws KeyStoreException",
                "+    {",
                "+        Date creationDate = new Date();",
                "+        Date lastEditDate = creationDate;",
                "+",
                "+        ObjectData entry = (ObjectData)entries.get(alias);",
                "+        if (entry != null)",
                "+        {",
                "+            creationDate = extractCreationDate(entry, creationDate);",
                "+        }",
                "+",
                "+        if (chain != null)",
                "+        {",
                "+            EncryptedPrivateKeyInfo encInfo;",
                "+",
                "+            try",
                "+            {",
                "+                encInfo = EncryptedPrivateKeyInfo.getInstance(keyBytes);",
                "+            }",
                "+            catch (Exception e)",
                "+            {",
                "+                throw new ExtKeyStoreException(\"BCFKS KeyStore private key encoding must be an EncryptedPrivateKeyInfo.\", e);",
                "+            }",
                "+",
                "+            try",
                "+            {",
                "+                privateKeyCache.remove(alias);",
                "+                entries.put(alias, new ObjectData(PROTECTED_PRIVATE_KEY, alias, creationDate, lastEditDate, createPrivateKeySequence(encInfo, chain).getEncoded(), null));",
                "+            }",
                "+            catch (Exception e)",
                "+            {",
                "+                throw new ExtKeyStoreException(\"BCFKS KeyStore exception storing protected private key: \" + e.toString(), e);",
                "+            }",
                "+        }",
                "+        else",
                "+        {",
                "+            try",
                "+            {",
                "+                entries.put(alias, new ObjectData(PROTECTED_SECRET_KEY, alias, creationDate, lastEditDate, keyBytes, null));",
                "+            }",
                "+            catch (Exception e)",
                "+            {",
                "+                throw new ExtKeyStoreException(\"BCFKS KeyStore exception storing protected private key: \" + e.toString(), e);",
                "+            }",
                "+        }",
                "+",
                "+        lastModifiedDate = lastEditDate;",
                "+    }",
                "+",
                "+    public void engineSetCertificateEntry(String alias, Certificate certificate)",
                "+        throws KeyStoreException",
                "+    {",
                "+        ObjectData entry = (ObjectData)entries.get(alias);",
                "+        Date creationDate = new Date();",
                "+        Date lastEditDate = creationDate;",
                "+",
                "+        if (entry != null)",
                "+        {",
                "+            if (!entry.getType().equals(CERTIFICATE))",
                "+            {",
                "+                throw new KeyStoreException(\"BCFKS KeyStore already has a key entry with alias \" + alias);",
                "+            }",
                "+",
                "+            creationDate = extractCreationDate(entry, creationDate);",
                "+        }",
                "+",
                "+        try",
                "+        {",
                "+            entries.put(alias, new ObjectData(CERTIFICATE, alias, creationDate, lastEditDate, certificate.getEncoded(), null));",
                "+        }",
                "+        catch (CertificateEncodingException e)",
                "+        {",
                "+            throw new ExtKeyStoreException(\"BCFKS KeyStore unable to handle certificate: \" + e.getMessage(), e);",
                "+        }",
                "+",
                "+        lastModifiedDate = lastEditDate;",
                "+    }",
                "+",
                "+    private Date extractCreationDate(ObjectData entry, Date creationDate)",
                "+    {",
                "+        try",
                "+        {",
                "+            creationDate = entry.getCreationDate().getDate();",
                "+        }",
                "+        catch (ParseException e)",
                "+        {",
                "+            // this should never happen, if it does we'll leave creation date unmodified and hope for the best.",
                "+        }",
                "+        return creationDate;",
                "+    }",
                "+",
                "+    public void engineDeleteEntry(String alias)",
                "+        throws KeyStoreException",
                "+    {",
                "+        ObjectData entry = (ObjectData)entries.get(alias);",
                "+",
                "+        if (entry == null)",
                "+        {",
                "+            return;",
                "+        }",
                "+",
                "+        privateKeyCache.remove(alias);",
                "+        entries.remove(alias);",
                "+",
                "+        lastModifiedDate = new Date();",
                "+    }",
                "+",
                "+    public Enumeration<String> engineAliases()",
                "+    {",
                "+        final Iterator<String> it = new HashSet(entries.keySet()).iterator();",
                "+",
                "+        return new Enumeration()",
                "+        {",
                "+            public boolean hasMoreElements()",
                "+            {",
                "+                return it.hasNext();",
                "+            }",
                "+",
                "+            public Object nextElement()",
                "+            {",
                "+                return it.next();",
                "+            }",
                "+        };",
                "+    }",
                "+",
                "+    public boolean engineContainsAlias(String alias)",
                "+    {",
                "+        if (alias == null)",
                "+        {",
                "+            throw new NullPointerException(\"alias value is null\");",
                "+        }",
                "+",
                "+        return entries.containsKey(alias);",
                "+    }",
                "+",
                "+    public int engineSize()",
                "+    {",
                "+        return entries.size();",
                "+    }",
                "+",
                "+    public boolean engineIsKeyEntry(String alias)",
                "+    {",
                "+        ObjectData ent = (ObjectData)entries.get(alias);",
                "+",
                "+        if (ent != null)",
                "+        {",
                "+            BigInteger entryType = ent.getType();",
                "+            return entryType.equals(PRIVATE_KEY) || entryType.equals(SECRET_KEY)",
                "+                || entryType.equals(PROTECTED_PRIVATE_KEY) || entryType.equals(PROTECTED_SECRET_KEY);",
                "+        }",
                "+",
                "+        return false;",
                "+    }",
                "+",
                "+    public boolean engineIsCertificateEntry(String alias)",
                "+    {",
                "+        ObjectData ent = (ObjectData)entries.get(alias);",
                "+",
                "+        if (ent != null)",
                "+        {",
                "+            return ent.getType().equals(CERTIFICATE);",
                "+        }",
                "+",
                "+        return false;",
                "+    }",
                "+",
                "+    public String engineGetCertificateAlias(Certificate certificate)",
                "+    {",
                "+        if (certificate == null)",
                "+        {",
                "+            return null;",
                "+        }",
                "+",
                "+        byte[] encodedCert;",
                "+        try",
                "+        {",
                "+            encodedCert = certificate.getEncoded();",
                "+        }",
                "+        catch (CertificateEncodingException e)",
                "+        {",
                "+            return null;",
                "+        }",
                "+",
                "+        for (Iterator<String> it = entries.keySet().iterator(); it.hasNext(); )",
                "+        {",
                "+            String alias = (String)it.next();",
                "+            ObjectData ent = (ObjectData)entries.get(alias);",
                "+",
                "+            if (ent.getType().equals(CERTIFICATE))",
                "+            {",
                "+                if (Arrays.areEqual(ent.getData(), encodedCert))",
                "+                {",
                "+                    return alias;",
                "+                }",
                "+            }",
                "+            else if (ent.getType().equals(PRIVATE_KEY) || ent.getType().equals(PROTECTED_PRIVATE_KEY))",
                "+            {",
                "+                try",
                "+                {",
                "+                    EncryptedPrivateKeyData encPrivData = EncryptedPrivateKeyData.getInstance(ent.getData());",
                "+                    if (Arrays.areEqual(encPrivData.getCertificateChain()[0].toASN1Primitive().getEncoded(), encodedCert))",
                "+                    {",
                "+                        return alias;",
                "+                    }",
                "+                }",
                "+                catch (IOException e)",
                "+                {",
                "+                    // ignore - this should never happen",
                "+                }",
                "+            }",
                "+        }",
                "+",
                "+        return null;",
                "+    }",
                "+",
                "+    private byte[] generateKey(KeyDerivationFunc pbkdAlgorithm, String purpose, char[] password)",
                "+        throws IOException",
                "+    {",
                "+        byte[] encPassword = PBEParametersGenerator.PKCS12PasswordToBytes(password);",
                "+        byte[] differentiator = PBEParametersGenerator.PKCS12PasswordToBytes(purpose.toCharArray());",
                "+",
                "+        int keySizeInBytes;",
                "+",
                "+        if (MiscObjectIdentifiers.id_scrypt.equals(pbkdAlgorithm.getAlgorithm()))",
                "+        {",
                "+            ScryptParams params = ScryptParams.getInstance(pbkdAlgorithm.getParameters());",
                "+",
                "+            return SCrypt.generate(Arrays.concatenate(encPassword, differentiator), params.getSalt(),",
                "+                params.getCostParameter().intValue(), params.getBlockSize().intValue(),",
                "+                params.getBlockSize().intValue(), params.getKeyLength().intValue());",
                "+        }",
                "+        else if (pbkdAlgorithm.getAlgorithm().equals(PKCSObjectIdentifiers.id_PBKDF2))",
                "+        {",
                "+            PBKDF2Params pbkdf2Params = PBKDF2Params.getInstance(pbkdAlgorithm.getParameters());",
                "+",
                "+            if (pbkdf2Params.getPrf().getAlgorithm().equals(PKCSObjectIdentifiers.id_hmacWithSHA512))",
                "+            {",
                "+                PKCS5S2ParametersGenerator pGen = new PKCS5S2ParametersGenerator(new SHA512Digest());",
                "+",
                "+                pGen.init(Arrays.concatenate(encPassword, differentiator), pbkdf2Params.getSalt(), pbkdf2Params.getIterationCount().intValue());",
                "+",
                "+                keySizeInBytes = pbkdf2Params.getKeyLength().intValue();",
                "+",
                "+                return ((KeyParameter)pGen.generateDerivedParameters(keySizeInBytes * 8)).getKey();",
                "+            }",
                "+            else if (pbkdf2Params.getPrf().getAlgorithm().equals(NISTObjectIdentifiers.id_hmacWithSHA3_512))",
                "+            {",
                "+                PKCS5S2ParametersGenerator pGen = new PKCS5S2ParametersGenerator(new SHA3Digest(512));",
                "+",
                "+                pGen.init(Arrays.concatenate(encPassword, differentiator), pbkdf2Params.getSalt(), pbkdf2Params.getIterationCount().intValue());",
                "+",
                "+                keySizeInBytes = pbkdf2Params.getKeyLength().intValue();",
                "+",
                "+                return ((KeyParameter)pGen.generateDerivedParameters(keySizeInBytes * 8)).getKey();",
                "+            }",
                "+            else",
                "+            {",
                "+                throw new IOException(\"BCFKS KeyStore: unrecognized MAC PBKD PRF: \" + pbkdf2Params.getPrf().getAlgorithm());",
                "+            }",
                "+        }",
                "+        else",
                "+        {",
                "+            throw new IOException(\"BCFKS KeyStore: unrecognized MAC PBKD.\");",
                "+        }",
                "+    }",
                "+",
                "+    private void verifyMac(byte[] content, PbkdMacIntegrityCheck integrityCheck, char[] password)",
                "+        throws NoSuchAlgorithmException, IOException",
                "+    {",
                "+        byte[] check = calculateMac(content, integrityCheck.getMacAlgorithm(), integrityCheck.getPbkdAlgorithm(), password);",
                "+",
                "+        if (!Arrays.constantTimeAreEqual(check, integrityCheck.getMac()))",
                "+        {",
                "+            throw new IOException(\"BCFKS KeyStore corrupted: MAC calculation failed.\");",
                "+        }",
                "+    }",
                "+",
                "+    private byte[] calculateMac(byte[] content, AlgorithmIdentifier algorithm, KeyDerivationFunc pbkdAlgorithm, char[] password)",
                "+        throws NoSuchAlgorithmException, IOException",
                "+    {",
                "+        String algorithmId = algorithm.getAlgorithm().getId();",
                "+",
                "+        Mac mac;",
                "+        if (provider != null)",
                "+        {",
                "+            mac = Mac.getInstance(algorithmId, provider);",
                "+        }",
                "+        else",
                "+        {",
                "+            mac = Mac.getInstance(algorithmId);",
                "+        }",
                "+",
                "+        try",
                "+        {",
                "+            mac.init(new SecretKeySpec(generateKey(pbkdAlgorithm, \"INTEGRITY_CHECK\", ((password != null) ? password : new char[0])), algorithmId));",
                "+        }",
                "+        catch (InvalidKeyException e)",
                "+        {",
                "+            throw new IOException(\"Cannot set up MAC calculation: \" + e.getMessage());",
                "+        }",
                "+",
                "+        return mac.doFinal(content);",
                "+    }",
                "+",
                "+    public void engineStore(OutputStream outputStream, char[] password)",
                "+        throws IOException, NoSuchAlgorithmException, CertificateException",
                "+    {",
                "+        ObjectData[] dataArray = (ObjectData[])entries.values().toArray(new ObjectData[entries.size()]);",
                "+",
                "+        KeyDerivationFunc pbkdAlgId = generatePkbdAlgorithmIdentifier(hmacPkbdAlgorithm, 256 / 8);",
                "+        byte[] keyBytes = generateKey(pbkdAlgId, \"STORE_ENCRYPTION\", ((password != null) ? password : new char[0]));",
                "+",
                "+        ObjectStoreData storeData = new ObjectStoreData(hmacAlgorithm, creationDate, lastModifiedDate, new ObjectDataSequence(dataArray), null);",
                "+        EncryptedObjectStoreData encStoreData;",
                "+",
                "+        try",
                "+        {",
                "+            Cipher c;",
                "+            if (provider == null)",
                "+            {",
                "+                c = Cipher.getInstance(\"AES/CCM/NoPadding\");",
                "+            }",
                "+            else",
                "+            {",
                "+                c = Cipher.getInstance(\"AES/CCM/NoPadding\", provider);",
                "+            }",
                "+",
                "+            c.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(keyBytes, \"AES\"));",
                "+",
                "+            byte[] encOut = c.doFinal(storeData.getEncoded());",
                "+",
                "+            AlgorithmParameters algorithmParameters = c.getParameters();",
                "+",
                "+            PBES2Parameters pbeParams = new PBES2Parameters(pbkdAlgId, new EncryptionScheme(NISTObjectIdentifiers.id_aes256_CCM, CCMParameters.getInstance(algorithmParameters.getEncoded())));",
                "+",
                "+            encStoreData = new EncryptedObjectStoreData(new AlgorithmIdentifier(PKCSObjectIdentifiers.id_PBES2, pbeParams), encOut);",
                "+        }",
                "+        catch (NoSuchPaddingException e)",
                "+        {",
                "+            throw new NoSuchAlgorithmException(e.toString());",
                "+        }",
                "+        catch (BadPaddingException e)",
                "+        {",
                "+            throw new IOException(e.toString());",
                "+        }",
                "+        catch (IllegalBlockSizeException e)",
                "+        {",
                "+            throw new IOException(e.toString());",
                "+        }",
                "+        catch (InvalidKeyException e)",
                "+        {",
                "+            throw new IOException(e.toString());",
                "+        }",
                "+",
                "+        // update the salt",
                "+        if (MiscObjectIdentifiers.id_scrypt.equals(hmacPkbdAlgorithm.getAlgorithm()))",
                "+        {",
                "+            ScryptParams sParams = ScryptParams.getInstance(hmacPkbdAlgorithm.getParameters());",
                "+",
                "+            hmacPkbdAlgorithm = generatePkbdAlgorithmIdentifier(hmacPkbdAlgorithm, sParams.getKeyLength().intValue());",
                "+        }",
                "+        else",
                "+        {",
                "+            PBKDF2Params pbkdf2Params = PBKDF2Params.getInstance(hmacPkbdAlgorithm.getParameters());",
                "+",
                "+            hmacPkbdAlgorithm = generatePkbdAlgorithmIdentifier(hmacPkbdAlgorithm, pbkdf2Params.getKeyLength().intValue());",
                "+        }",
                "+        byte[] mac = calculateMac(encStoreData.getEncoded(), hmacAlgorithm, hmacPkbdAlgorithm, password);",
                "+",
                "+        ObjectStore store = new ObjectStore(encStoreData, new ObjectStoreIntegrityCheck(new PbkdMacIntegrityCheck(hmacAlgorithm, hmacPkbdAlgorithm, mac)));",
                "+",
                "+        outputStream.write(store.getEncoded());",
                "+",
                "+        outputStream.flush();",
                "+    }",
                "+",
                "+    public void engineLoad(InputStream inputStream, char[] password)",
                "+        throws IOException, NoSuchAlgorithmException, CertificateException",
                "+    {",
                "+        // reset any current values",
                "+        entries.clear();",
                "+        privateKeyCache.clear();",
                "+",
                "+        lastModifiedDate = creationDate = null;",
                "+        hmacAlgorithm = null;",
                "+",
                "+        if (inputStream == null)",
                "+        {",
                "+            // initialise defaults",
                "+            lastModifiedDate = creationDate = new Date();",
                "+",
                "+            // basic initialisation",
                "+            hmacAlgorithm = new AlgorithmIdentifier(PKCSObjectIdentifiers.id_hmacWithSHA512, DERNull.INSTANCE);",
                "+            hmacPkbdAlgorithm = generatePkbdAlgorithmIdentifier(PKCSObjectIdentifiers.id_PBKDF2, 512 / 8);",
                "+",
                "+            return;",
                "+        }",
                "+",
                "+        ASN1InputStream aIn = new ASN1InputStream(inputStream);",
                "+",
                "+        ObjectStore store;",
                "+",
                "+        try",
                "+        {",
                "+            store = ObjectStore.getInstance(aIn.readObject());",
                "+        }",
                "+        catch (Exception e)",
                "+        {",
                "+            throw new IOException(e.getMessage());",
                "+        }",
                "+",
                "+        ObjectStoreIntegrityCheck integrityCheck = store.getIntegrityCheck();",
                "+        if (integrityCheck.getType() == ObjectStoreIntegrityCheck.PBKD_MAC_CHECK)",
                "+        {",
                "+            PbkdMacIntegrityCheck pbkdMacIntegrityCheck = PbkdMacIntegrityCheck.getInstance(integrityCheck.getIntegrityCheck());",
                "+",
                "+            hmacAlgorithm = pbkdMacIntegrityCheck.getMacAlgorithm();",
                "+            hmacPkbdAlgorithm = pbkdMacIntegrityCheck.getPbkdAlgorithm();",
                "+",
                "+            verifyMac(store.getStoreData().toASN1Primitive().getEncoded(), pbkdMacIntegrityCheck, password);",
                "+        }",
                "+        else",
                "+        {",
                "+            throw new IOException(\"BCFKS KeyStore unable to recognize integrity check.\");",
                "+        }",
                "+",
                "+        ASN1Encodable sData = store.getStoreData();",
                "+",
                "+        ObjectStoreData storeData;",
                "+        if (sData instanceof EncryptedObjectStoreData)",
                "+        {",
                "+            EncryptedObjectStoreData encryptedStoreData = (EncryptedObjectStoreData)sData;",
                "+            AlgorithmIdentifier protectAlgId = encryptedStoreData.getEncryptionAlgorithm();",
                "+",
                "+            storeData = ObjectStoreData.getInstance(decryptData(\"STORE_ENCRYPTION\", protectAlgId, password, encryptedStoreData.getEncryptedContent().getOctets()));",
                "+        }",
                "+        else",
                "+        {",
                "+            storeData = ObjectStoreData.getInstance(sData);",
                "+        }",
                "+",
                "+        try",
                "+        {",
                "+            creationDate = storeData.getCreationDate().getDate();",
                "+            lastModifiedDate = storeData.getLastModifiedDate().getDate();",
                "+        }",
                "+        catch (ParseException e)",
                "+        {",
                "+            throw new IOException(\"BCFKS KeyStore unable to parse store data information.\");",
                "+        }",
                "+",
                "+        if (!storeData.getIntegrityAlgorithm().equals(hmacAlgorithm))",
                "+        {",
                "+            throw new IOException(\"BCFKS KeyStore storeData integrity algorithm does not match store integrity algorithm.\");",
                "+        }",
                "+",
                "+        for (Iterator it = storeData.getObjectDataSequence().iterator(); it.hasNext(); )",
                "+        {",
                "+            ObjectData objData = ObjectData.getInstance(it.next());",
                "+",
                "+            entries.put(objData.getIdentifier(), objData);",
                "+        }",
                "+    }",
                "+",
                "+    private byte[] decryptData(String purpose, AlgorithmIdentifier protectAlgId, char[] password, byte[] encryptedData)",
                "+        throws IOException",
                "+    {",
                "+        if (!protectAlgId.getAlgorithm().equals(PKCSObjectIdentifiers.id_PBES2))",
                "+        {",
                "+            throw new IOException(\"BCFKS KeyStore cannot recognize protection algorithm.\");",
                "+        }",
                "+",
                "+        PBES2Parameters pbes2Parameters = PBES2Parameters.getInstance(protectAlgId.getParameters());",
                "+        EncryptionScheme algId = pbes2Parameters.getEncryptionScheme();",
                "+",
                "+        if (!algId.getAlgorithm().equals(NISTObjectIdentifiers.id_aes256_CCM))",
                "+        {",
                "+            throw new IOException(\"BCFKS KeyStore cannot recognize protection encryption algorithm.\");",
                "+        }",
                "+",
                "+        try",
                "+        {",
                "+            CCMParameters ccmParameters = CCMParameters.getInstance(algId.getParameters());",
                "+            Cipher c;",
                "+            AlgorithmParameters algParams;",
                "+            if (provider == null)",
                "+            {",
                "+                c = Cipher.getInstance(\"AES/CCM/NoPadding\");",
                "+                algParams = AlgorithmParameters.getInstance(\"CCM\");",
                "+            }",
                "+            else",
                "+            {",
                "+                c = Cipher.getInstance(\"AES/CCM/NoPadding\", provider);",
                "+                algParams = AlgorithmParameters.getInstance(\"CCM\", provider);",
                "+            }",
                "+",
                "+            algParams.init(ccmParameters.getEncoded());",
                "+",
                "+            byte[] keyBytes = generateKey(pbes2Parameters.getKeyDerivationFunc(), purpose, ((password != null) ? password : new char[0]));",
                "+",
                "+            c.init(Cipher.DECRYPT_MODE, new SecretKeySpec(keyBytes, \"AES\"), algParams);",
                "+",
                "+            byte[] rv = c.doFinal(encryptedData);",
                "+            return rv;",
                "+        }",
                "+        catch (Exception e)",
                "+        {",
                "+            throw new IOException(e.toString());",
                "+        }",
                "+    }",
                "+",
                "+    private KeyDerivationFunc generatePkbdAlgorithmIdentifier(PBKDFConfig pbkdfConfig, int keySizeInBytes)",
                "+    {",
                "+        if (MiscObjectIdentifiers.id_scrypt.equals(pbkdfConfig.getAlgorithm()))",
                "+        {",
                "+            ScryptConfig scryptConfig = (ScryptConfig)pbkdfConfig;",
                "+",
                "+            byte[] pbkdSalt = new byte[scryptConfig.getSaltLength()];",
                "+            getDefaultSecureRandom().nextBytes(pbkdSalt);",
                "+",
                "+            ScryptParams params = new ScryptParams(",
                "+                pbkdSalt,",
                "+                scryptConfig.getCostParameter(), scryptConfig.getBlockSize(), scryptConfig.getParallelizationParameter(), keySizeInBytes);",
                "+",
                "+            return new KeyDerivationFunc(MiscObjectIdentifiers.id_scrypt, params);",
                "+        }",
                "+        else",
                "+        {",
                "+            PBKDF2Config pbkdf2Config = (PBKDF2Config)pbkdfConfig;",
                "+",
                "+            byte[] pbkdSalt = new byte[pbkdf2Config.getSaltLength()];",
                "+            getDefaultSecureRandom().nextBytes(pbkdSalt);",
                "+",
                "+            return new KeyDerivationFunc(PKCSObjectIdentifiers.id_PBKDF2, new PBKDF2Params(pbkdSalt, pbkdf2Config.getIterationCount(), keySizeInBytes, pbkdf2Config.getPRF()));",
                "+        }",
                "+    }",
                "+",
                "+    private KeyDerivationFunc generatePkbdAlgorithmIdentifier(KeyDerivationFunc baseAlg, int keySizeInBytes)",
                "+    {",
                "+        if (MiscObjectIdentifiers.id_scrypt.equals(baseAlg.getAlgorithm()))",
                "+        {",
                "+            ScryptParams oldParams = ScryptParams.getInstance(baseAlg.getParameters());",
                "+",
                "+            byte[] pbkdSalt = new byte[oldParams.getSalt().length];",
                "+            getDefaultSecureRandom().nextBytes(pbkdSalt);",
                "+",
                "+            ScryptParams params = new ScryptParams(",
                "+                pbkdSalt,",
                "+                oldParams.getCostParameter(), oldParams.getBlockSize(), oldParams.getParallelizationParameter(), BigInteger.valueOf(keySizeInBytes));",
                "+",
                "+            return new KeyDerivationFunc(MiscObjectIdentifiers.id_scrypt, params);",
                "+        }",
                "+        else",
                "+        {",
                "+            PBKDF2Params oldParams = PBKDF2Params.getInstance(baseAlg.getParameters());",
                "+  ",
                "+            byte[] pbkdSalt = new byte[oldParams.getSalt().length];",
                "+            getDefaultSecureRandom().nextBytes(pbkdSalt);",
                "+",
                "+            PBKDF2Params params = new PBKDF2Params(pbkdSalt,",
                "+                oldParams.getIterationCount().intValue(), keySizeInBytes, oldParams.getPrf());",
                "+            return new KeyDerivationFunc(PKCSObjectIdentifiers.id_PBKDF2, params);",
                "+        }",
                "+    }",
                "+",
                "+    private KeyDerivationFunc generatePkbdAlgorithmIdentifier(ASN1ObjectIdentifier derivationAlgorithm, int keySizeInBytes)",
                "+    {",
                "+        byte[] pbkdSalt = new byte[512 / 8];",
                "+        getDefaultSecureRandom().nextBytes(pbkdSalt);",
                "+",
                "+        if (PKCSObjectIdentifiers.id_PBKDF2.equals(derivationAlgorithm))",
                "+        {",
                "+            return new KeyDerivationFunc(PKCSObjectIdentifiers.id_PBKDF2, new PBKDF2Params(pbkdSalt, 50 * 1024, keySizeInBytes, new AlgorithmIdentifier(PKCSObjectIdentifiers.id_hmacWithSHA512, DERNull.INSTANCE)));",
                "+        }",
                "+        else",
                "+        {",
                "+            throw new IllegalStateException(\"unknown derivation algorithm: \" + derivationAlgorithm);",
                "+        }",
                "+    }",
                "+",
                "+    public static class Std",
                "+        extends BcFKSKeyStoreSpi",
                "+    {",
                "+        public Std()",
                "+        {",
                "+            super(new BouncyCastleProvider());",
                "+        }",
                "+    }",
                "+",
                "+    public static class Def",
                "+        extends BcFKSKeyStoreSpi",
                "+    {",
                "+        public Def()",
                "+        {",
                "+            super(null);",
                "+        }",
                "+    }",
                "+",
                "+    private static class ExtKeyStoreException",
                "+        extends KeyStoreException",
                "+    {",
                "+        private final Throwable cause;",
                "+",
                "+        ExtKeyStoreException(String msg, Throwable cause)",
                "+        {",
                "+            super(msg);",
                "+            this.cause = cause;",
                "+        }",
                "+",
                "+        public Throwable getCause()",
                "+        {",
                "+            return cause;",
                "+        }",
                "+    }",
                "+}"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/crypto/params/DHParameters.java",
                "core/src/main/java/org/bouncycastle/util/Arrays.java",
                "core/src/main/jdk1.4/org/bouncycastle/util/Arrays.java",
                "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/dh/KeyPairGeneratorSpi.java",
                "prov/src/main/jdk1.4/org/bouncycastle/jcajce/provider/keystore/bcfks/BcFKSKeyStoreSpi.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "274": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "dc65408e73c4a3d43aaf2de88cb6bafb8a105766"
                ],
                [
                    "no-tag",
                    "562978c85a4ad5178022b91a529512868d356e08"
                ]
            ],
            "tags": [
                "r1rv59",
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: HMAC",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: change",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, keystore, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 274",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6b82ed6f3f319ef5297770c1d27053a821845ffd",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1513203636,
            "hunks": 6,
            "message": "Performance optimization of SHA3 digest #266 https://github.com/bcgit/bc-java/issues/266",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/digests/KeccakDigest.java b/core/src/main/java/org/bouncycastle/crypto/digests/KeccakDigest.java",
                "index 00fe18a60..8c9b8ab42 100644",
                "--- a/core/src/main/java/org/bouncycastle/crypto/digests/KeccakDigest.java",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/digests/KeccakDigest.java",
                "@@ -14,66 +14,30 @@ public class KeccakDigest",
                " {",
                "-    private static long[] KeccakRoundConstants = keccakInitializeRoundConstants();",
                "-",
                "-    private static int[] KeccakRhoOffsets = keccakInitializeRhoOffsets();",
                "-",
                "-    private static long[] keccakInitializeRoundConstants()",
                "-    {",
                "-        long[] keccakRoundConstants = new long[24];",
                "-        byte[] LFSRstate = new byte[1];",
                "-",
                "-        LFSRstate[0] = 0x01;",
                "-        int i, j, bitPosition;",
                "-",
                "-        for (i = 0; i < 24; i++)",
                "-        {",
                "-            keccakRoundConstants[i] = 0;",
                "-            for (j = 0; j < 7; j++)",
                "-            {",
                "-                bitPosition = (1 << j) - 1;",
                "-                if (LFSR86540(LFSRstate))",
                "-                {",
                "-                    keccakRoundConstants[i] ^= 1L << bitPosition;",
                "-                }",
                "-            }",
                "-        }",
                "-",
                "-        return keccakRoundConstants;",
                "-    }",
                "-",
                "-    private static boolean LFSR86540(byte[] LFSR)",
                "-    {",
                "-        boolean result = (((LFSR[0]) & 0x01) != 0);",
                "-        if (((LFSR[0]) & 0x80) != 0)",
                "-        {",
                "-            LFSR[0] = (byte)(((LFSR[0]) << 1) ^ 0x71);",
                "-        }",
                "-        else",
                "-        {",
                "-            LFSR[0] <<= 1;",
                "-        }",
                "-",
                "-        return result;",
                "-    }",
                "-",
                "-    private static int[] keccakInitializeRhoOffsets()",
                "-    {",
                "-        int[] keccakRhoOffsets = new int[25];",
                "-        int x, y, t, newX, newY;",
                "-",
                "-        keccakRhoOffsets[(((0) % 5) + 5 * ((0) % 5))] = 0;",
                "-        x = 1;",
                "-        y = 0;",
                "-        for (t = 0; t < 24; t++)",
                "-        {",
                "-            keccakRhoOffsets[(((x) % 5) + 5 * ((y) % 5))] = ((t + 1) * (t + 2) / 2) % 64;",
                "-            newX = (0 * x + 1 * y) % 5;",
                "-            newY = (2 * x + 3 * y) % 5;",
                "-            x = newX;",
                "-            y = newY;",
                "-        }",
                "-        return keccakRhoOffsets;",
                "-    }",
                "-",
                "-    protected long[] state = new long[(1600 / 64)];",
                "-    protected byte[] dataQueue = new byte[(1536 / 8)];",
                "+    private static long[] KeccakRoundConstants = new long[]{",
                "+            0x0000000000000001L,",
                "+            0x0000000000008082L,",
                "+            0x800000000000808aL,",
                "+            0x8000000080008000L,",
                "+            0x000000000000808bL,",
                "+            0x0000000080000001L,",
                "+            0x8000000080008081L,",
                "+            0x8000000000008009L,",
                "+            0x000000000000008aL,",
                "+            0x0000000000000088L,",
                "+            0x0000000080008009L,",
                "+            0x000000008000000aL,",
                "+            0x000000008000808bL,",
                "+            0x800000000000008bL,",
                "+            0x8000000000008089L,",
                "+            0x8000000000008003L,",
                "+            0x8000000000008002L,",
                "+            0x8000000000000080L,",
                "+            0x000000000000800aL,",
                "+            0x800000008000000aL,",
                "+            0x8000000080008081L,",
                "+            0x8000000000008080L,",
                "+            0x0000000080000001L,",
                "+            0x8000000080008008L};",
                "+",
                "+    protected long[] state = new long[25];",
                "+    protected byte[] dataQueue = new byte[192];",
                "     protected int rate;",
                "@@ -367,3 +331,4 @@ public class KeccakDigest",
                "-            iota(state, i);",
                "+            state[0] ^= KeccakRoundConstants[i];",
                "+//            iota(state, i);",
                " //            displayIntermediateValues.displayStateAs64bitWords(3, \"After iota\", state);",
                "@@ -386,3 +351,3 @@ public class KeccakDigest",
                "         long dX = leftRotate(C1, 1) ^ C4;",
                "-                       ",
                "+",
                "         A[0] ^= dX;",
                "@@ -428,7 +393,26 @@ public class KeccakDigest",
                "     {",
                "-        // KeccakRhoOffsets[0] == 0",
                "-        for (int x = 1; x < 25; x++)",
                "-        {",
                "-            A[x] = leftRotate(A[x], KeccakRhoOffsets[x]);",
                "-        }",
                "+        A[1]  = A[ 1] <<  1 | A[ 1] >>> 63;",
                "+        A[2]  = A[ 2] << 62 | A[ 2] >>>  2;",
                "+        A[3]  = A[ 3] << 28 | A[ 3] >>> 36;",
                "+        A[4]  = A[ 4] << 27 | A[ 4] >>> 37;",
                "+        A[5]  = A[ 5] << 36 | A[ 5] >>> 28;",
                "+        A[6]  = A[ 6] << 44 | A[ 6] >>> 20;",
                "+        A[7]  = A[ 7] <<  6 | A[ 7] >>> 58;",
                "+        A[8]  = A[ 8] << 55 | A[ 8] >>>  9;",
                "+        A[9]  = A[ 9] << 20 | A[ 9] >>> 44;",
                "+        A[10] = A[10] <<  3 | A[10] >>> 61;",
                "+        A[11] = A[11] << 10 | A[11] >>> 54;",
                "+        A[12] = A[12] << 43 | A[12] >>> 21;",
                "+        A[13] = A[13] << 25 | A[13] >>> 39;",
                "+        A[14] = A[14] << 39 | A[14] >>> 25;",
                "+        A[15] = A[15] << 41 | A[15] >>> 23;",
                "+        A[16] = A[16] << 45 | A[16] >>> 19;",
                "+        A[17] = A[17] << 15 | A[17] >>> 49;",
                "+        A[18] = A[18] << 21 | A[18] >>> 43;",
                "+        A[19] = A[19] <<  8 | A[19] >>> 56;",
                "+        A[20] = A[20] << 18 | A[20] >>> 46;",
                "+        A[21] = A[21] <<  2 | A[21] >>> 62;",
                "+        A[22] = A[22] << 61 | A[22] >>>  3;",
                "+        A[23] = A[23] << 56 | A[23] >>>  8;",
                "+        A[24] = A[24] << 14 | A[24] >>> 50;",
                "     }",
                "@@ -466,24 +450,45 @@ public class KeccakDigest",
                "     {",
                "-        long chiC0, chiC1, chiC2, chiC3, chiC4;",
                "-",
                "-        for (int yBy5 = 0; yBy5 < 25; yBy5 += 5)",
                "-        {",
                "-            chiC0 = A[0 + yBy5] ^ ((~A[(((0 + 1) % 5) + yBy5)]) & A[(((0 + 2) % 5) + yBy5)]);",
                "-            chiC1 = A[1 + yBy5] ^ ((~A[(((1 + 1) % 5) + yBy5)]) & A[(((1 + 2) % 5) + yBy5)]);",
                "-            chiC2 = A[2 + yBy5] ^ ((~A[(((2 + 1) % 5) + yBy5)]) & A[(((2 + 2) % 5) + yBy5)]);",
                "-            chiC3 = A[3 + yBy5] ^ ((~A[(((3 + 1) % 5) + yBy5)]) & A[(((3 + 2) % 5) + yBy5)]);",
                "-            chiC4 = A[4 + yBy5] ^ ((~A[(((4 + 1) % 5) + yBy5)]) & A[(((4 + 2) % 5) + yBy5)]);",
                "-",
                "-            A[0 + yBy5] = chiC0;",
                "-            A[1 + yBy5] = chiC1;",
                "-            A[2 + yBy5] = chiC2;",
                "-            A[3 + yBy5] = chiC3;",
                "-            A[4 + yBy5] = chiC4;",
                "-        }",
                "+        long chiC0, chiC1;",
                "+",
                "+        chiC0 = A[0] ^ ((~A[1]) & A[2]);",
                "+        chiC1 = A[1] ^ ((~A[2]) & A[3]);",
                "+        A[2] ^= ((~A[3]) & A[4]);",
                "+        A[3] ^= ((~A[4]) & A[0]);",
                "+        A[4] ^= ((~A[0]) & A[1]);",
                "+        A[0] = chiC0;",
                "+        A[1] = chiC1;",
                "+",
                "+        chiC0 = A[5] ^ ((~A[6]) & A[7]);",
                "+        chiC1 = A[6] ^ ((~A[7]) & A[8]);",
                "+        A[7] ^= ((~A[8]) & A[9]);",
                "+        A[8] ^= ((~A[9]) & A[5]);",
                "+        A[9] ^= ((~A[5]) & A[6]);",
                "+        A[5] = chiC0;",
                "+        A[6] = chiC1;",
                "+",
                "+        chiC0 = A[10] ^ ((~A[11]) & A[12]);",
                "+        chiC1 = A[11] ^ ((~A[12]) & A[13]);",
                "+        A[12] ^= ((~A[13]) & A[14]);",
                "+        A[13] ^= ((~A[14]) & A[10]);",
                "+        A[14] ^= ((~A[10]) & A[11]);",
                "+        A[10] = chiC0;",
                "+        A[11] = chiC1;",
                "+",
                "+        chiC0 = A[15] ^ ((~A[16]) & A[17]);",
                "+        chiC1 = A[16] ^ ((~A[17]) & A[18]);",
                "+        A[17] ^= ((~A[18]) & A[19]);",
                "+        A[18] ^= ((~A[19]) & A[15]);",
                "+        A[19] ^= ((~A[15]) & A[16]);",
                "+        A[15] = chiC0;",
                "+        A[16] = chiC1;",
                "+",
                "+        chiC0 = A[20] ^ ((~A[21]) & A[22]);",
                "+        chiC1 = A[21] ^ ((~A[22]) & A[23]);",
                "+        A[22] ^= ((~A[23]) & A[24]);",
                "+        A[23] ^= ((~A[24]) & A[20]);",
                "+        A[24] ^= ((~A[20]) & A[21]);",
                "+        A[20] = chiC0;",
                "+        A[21] = chiC1;",
                "     }",
                "-    private static void iota(long[] A, int indexRound)",
                "-    {",
                "-        A[0] ^= KeccakRoundConstants[indexRound];",
                "-    }",
                " }"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/crypto/digests/KeccakDigest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "266": "Performance optimization of SHA3 digest #267"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "824b26942ccabbca350121dd154c40785f65e221"
                ],
                [
                    "no-tag",
                    "fa1c030429e74bc2da703f62722ba06a75ef08c3"
                ]
            ],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: issue",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 266",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ea9172fe8437daa6223b928bfd85b18a6fa93caf",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1513763123,
            "hunks": 4,
            "message": "github #263: allowed for spaces inside tail of base64 data",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/util/encoders/Base64Encoder.java b/core/src/main/java/org/bouncycastle/util/encoders/Base64Encoder.java",
                "index 4216674aa..a0869fb0e 100644",
                "--- a/core/src/main/java/org/bouncycastle/util/encoders/Base64Encoder.java",
                "+++ b/core/src/main/java/org/bouncycastle/util/encoders/Base64Encoder.java",
                "@@ -152,6 +152,16 @@ public class Base64Encoder",
                "-        int  i = off;",
                "-        int  finish = end - 4;",
                "-        ",
                "-        i = nextI(data, i, finish);",
                "+        int  i = 0;",
                "+        int  finish = end;",
                "+",
                "+        while (finish > off && i != 4)",
                "+        {",
                "+            if (!ignore((char)data[finish - 1]))",
                "+            {",
                "+                i++;",
                "+            }",
                "+",
                "+            finish--;",
                "+        }",
                "+",
                "+        i = nextI(data, off, finish);",
                "@@ -187,4 +197,9 @@ public class Base64Encoder",
                "-        outLen += decodeLastBlock(out, (char)data[end - 4], (char)data[end - 3], (char)data[end - 2], (char)data[end - 1]);",
                "-        ",
                "+        int e0 = nextI(data, i, end);",
                "+        int e1 = nextI(data, e0 + 1, end);",
                "+        int e2 = nextI(data, e1 + 1, end);",
                "+        int e3 = nextI(data, e2 + 1, end);",
                "+",
                "+        outLen += decodeLastBlock(out, (char)data[e0], (char)data[e1], (char)data[e2], (char)data[e3]);",
                "+",
                "         return outLen;",
                "@@ -228,5 +243,15 @@ public class Base64Encoder",
                "         int  i = 0;",
                "-        int  finish = end - 4;",
                "+        int  finish = end;",
                "+",
                "+        while (finish > 0 && i != 4)",
                "+        {",
                "+            if (!ignore(data.charAt(finish - 1)))",
                "+            {",
                "+                i++;",
                "+            }",
                "+",
                "+            finish--;",
                "+        }",
                "-        i = nextI(data, i, finish);",
                "+        i = nextI(data, 0, finish);",
                "@@ -262,4 +287,9 @@ public class Base64Encoder",
                "-        length += decodeLastBlock(out, data.charAt(end - 4), data.charAt(end - 3), data.charAt(end - 2), data.charAt(end - 1));",
                "+        int e0 = nextI(data, i, end);",
                "+        int e1 = nextI(data, e0 + 1, end);",
                "+        int e2 = nextI(data, e1 + 1, end);",
                "+        int e3 = nextI(data, e2 + 1, end);",
                "+        length += decodeLastBlock(out, data.charAt(e0), data.charAt(e1), data.charAt(e2), data.charAt(e3));",
                "+        ",
                "         return length;"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/util/encoders/Base64Encoder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "263": "CryptoProvider.base64Decode implementations should ignore all whitespace OPCFoundation/UA-Java-Legacy#107"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "2e6aca130753fa1a9c5cc14d3f42a28e4e839a48"
                ],
                [
                    "no-tag",
                    "f916e105f46b193052188bd4dc0c46c93dfc3bbc"
                ]
            ],
            "tags": [
                "r1v60"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: allow",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 263",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "97a98fca0466dfe977a5164fb7d3089e7e7dac4f",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1517130721,
            "hunks": 47,
            "message": "TLS: Support for InterruptedIOException on blocking reads - Allow IIOE to propagate to caller without failing the connection.   (not relevant for non-blocking I/O usage). - Always enabled for application data reads. - Optional (default=false) during handshake via property setter:   'TlsProtocol#setResumableHandshake' - If enabled, handshake can be resumed after IIOE via:   'TlsProtocol#resumeHandshake' - Added TlsProtocol.isHandshaking method",
            "diff": [
                "diff --git a/tls/src/main/java/org/bouncycastle/tls/ByteQueueInputStream.java b/tls/src/main/java/org/bouncycastle/tls/ByteQueueInputStream.java",
                "index fe71d122b..3424c5be5 100644",
                "--- a/tls/src/main/java/org/bouncycastle/tls/ByteQueueInputStream.java",
                "+++ b/tls/src/main/java/org/bouncycastle/tls/ByteQueueInputStream.java",
                "@@ -17,5 +17,10 @@ public class ByteQueueInputStream",
                "-    public void addBytes(byte[] bytes)",
                "+    public void addBytes(byte[] buf)",
                "     {",
                "-        buffer.addData(bytes, 0, bytes.length);",
                "+        buffer.addData(buf, 0, buf.length);",
                "+    }",
                "+",
                "+    public void addBytes(byte[] buf, int bufOff, int bufLen)",
                "+    {",
                "+        buffer.addData(buf, bufOff, bufLen);",
                "     }",
                "diff --git a/tls/src/main/java/org/bouncycastle/tls/RecordStream.java b/tls/src/main/java/org/bouncycastle/tls/RecordStream.java",
                "index 5c7e2cbda..afee589b1 100644",
                "--- a/tls/src/main/java/org/bouncycastle/tls/RecordStream.java",
                "+++ b/tls/src/main/java/org/bouncycastle/tls/RecordStream.java",
                "@@ -3,4 +3,6 @@ package org.bouncycastle.tls;",
                " import java.io.ByteArrayOutputStream;",
                "+import java.io.EOFException;",
                " import java.io.IOException;",
                " import java.io.InputStream;",
                "+import java.io.InterruptedIOException;",
                " import java.io.OutputStream;",
                "@@ -17,2 +19,4 @@ class RecordStream",
                "+    private final Record inputRecord = new Record();",
                "+",
                "     private TlsProtocol handler;",
                "@@ -209,6 +213,6 @@ class RecordStream",
                "-    boolean readFullRecord(byte[] record)",
                "+    boolean readFullRecord(byte[] input, int inputOff, int inputLen)",
                "         throws IOException",
                "     {",
                "-        if (record.length < RecordFormat.FRAGMENT_OFFSET)",
                "+        if (inputLen < RecordFormat.FRAGMENT_OFFSET)",
                "         {",
                "@@ -217,4 +221,4 @@ class RecordStream",
                "-        int length = TlsUtils.readUint16(record, RecordFormat.LENGTH_OFFSET);",
                "-        if (record.length != (RecordFormat.FRAGMENT_OFFSET + length))",
                "+        int length = TlsUtils.readUint16(input, inputOff + RecordFormat.LENGTH_OFFSET);",
                "+        if (inputLen != (RecordFormat.FRAGMENT_OFFSET + length))",
                "         {",
                "@@ -223,3 +227,3 @@ class RecordStream",
                "-        short type = TlsUtils.readUint8(record, RecordFormat.TYPE_OFFSET);",
                "+        short type = TlsUtils.readUint8(input, inputOff + RecordFormat.TYPE_OFFSET);",
                "@@ -233,3 +237,3 @@ class RecordStream",
                "         {",
                "-            int version = TlsUtils.readVersionRaw(record, RecordFormat.VERSION_OFFSET);",
                "+            int version = TlsUtils.readVersionRaw(input, inputOff + RecordFormat.VERSION_OFFSET);",
                "             if ((version & 0xffffff00) != 0x0300)",
                "@@ -241,3 +245,3 @@ class RecordStream",
                "         {",
                "-            ProtocolVersion version = TlsUtils.readVersion(record, RecordFormat.VERSION_OFFSET);",
                "+            ProtocolVersion version = TlsUtils.readVersion(input, inputOff + RecordFormat.VERSION_OFFSET);",
                "             if (readVersion == null)",
                "@@ -254,3 +258,3 @@ class RecordStream",
                "-        byte[] plaintext = decodeAndVerify(type, record, RecordFormat.FRAGMENT_OFFSET, length);",
                "+        byte[] plaintext = decodeAndVerify(type, input, inputOff + RecordFormat.FRAGMENT_OFFSET, length);",
                "         handler.processRecord(type, plaintext, 0, plaintext.length);",
                "@@ -262,4 +266,3 @@ class RecordStream",
                "     {",
                "-        byte[] recordHeader = TlsUtils.readAllOrNothing(RecordFormat.FRAGMENT_OFFSET, input);",
                "-        if (recordHeader == null)",
                "+        if (!inputRecord.readHeader(input))",
                "         {",
                "@@ -268,3 +271,3 @@ class RecordStream",
                "-        short type = TlsUtils.readUint8(recordHeader, RecordFormat.TYPE_OFFSET);",
                "+        short type = TlsUtils.readUint8(inputRecord.buf, RecordFormat.TYPE_OFFSET);",
                "@@ -278,3 +281,3 @@ class RecordStream",
                "         {",
                "-            int version = TlsUtils.readVersionRaw(recordHeader, RecordFormat.VERSION_OFFSET);",
                "+            int version = TlsUtils.readVersionRaw(inputRecord.buf, RecordFormat.VERSION_OFFSET);",
                "             if ((version & 0xffffff00) != 0x0300)",
                "@@ -286,3 +289,3 @@ class RecordStream",
                "         {",
                "-            ProtocolVersion version = TlsUtils.readVersion(recordHeader, RecordFormat.VERSION_OFFSET);",
                "+            ProtocolVersion version = TlsUtils.readVersion(inputRecord.buf, RecordFormat.VERSION_OFFSET);",
                "             if (readVersion == null)",
                "@@ -297,3 +300,3 @@ class RecordStream",
                "-        int length = TlsUtils.readUint16(recordHeader, RecordFormat.LENGTH_OFFSET);",
                "+        int length = TlsUtils.readUint16(inputRecord.buf, RecordFormat.LENGTH_OFFSET);",
                "@@ -301,4 +304,14 @@ class RecordStream",
                "-        byte[] ciphertext = TlsUtils.readFully(length, input);",
                "-        byte[] plaintext = decodeAndVerify(type, ciphertext, 0, length);",
                "+        inputRecord.readFragment(input, length);",
                "+",
                "+        byte[] plaintext;",
                "+        try",
                "+        {",
                "+            plaintext = decodeAndVerify(type, inputRecord.buf, RecordFormat.FRAGMENT_OFFSET, length);",
                "+        }",
                "+        finally",
                "+        {",
                "+            inputRecord.reset();",
                "+        }",
                "+",
                "         handler.processRecord(type, plaintext, 0, plaintext.length);",
                "@@ -437,2 +450,4 @@ class RecordStream",
                "     {",
                "+        inputRecord.reset();",
                "+",
                "         IOException io = null;",
                "@@ -508,2 +523,92 @@ class RecordStream",
                "+    private static class Record",
                "+    {",
                "+        private final byte[] header = new byte[RecordFormat.FRAGMENT_OFFSET];",
                "+",
                "+        volatile byte[] buf = header;",
                "+        volatile int pos = 0;",
                "+",
                "+        void fillTo(InputStream input, int length) throws IOException",
                "+        {",
                "+            while (pos < length)",
                "+            {",
                "+                /*",
                "+                 * TODO[tls] It might be necessary to catch/rethrow InterruptedIOException here if",
                "+                 * there were any instance of that class where bytesTransferred != 0 .",
                "+                 * ",
                "+                 * Unfortunately, this would be complicated because rethrowing our own exception",
                "+                 * type would break at least some client code, e.g. in Apache's",
                "+                 * httpcomponents-core-4.4.9, BHttpConnectionBase.isStale depends on the exception",
                "+                 * type being SocketTimeoutException (or a subclass).",
                "+                 */",
                "+                try",
                "+                {",
                "+                    int numRead = input.read(buf, pos, length - pos);",
                "+                    if (numRead < 0)",
                "+                    {",
                "+                        break;",
                "+                    }",
                "+                    pos += numRead;",
                "+                }",
                "+                catch (InterruptedIOException e)",
                "+                {",
                "+                    /*",
                "+                     * Although modifying the bytesTransferred doesn't seem ideal, it's the simplest",
                "+                     * way to make sure we don't break client code that depends on the exact type,",
                "+                     * e.g. in Apache's httpcomponents-core-4.4.9, BHttpConnectionBase.isStale",
                "+                     * depends on the exception type being SocketTimeoutException (or a subclass).",
                "+                     *",
                "+                     * We can set to 0 here because the only relevant callstack (via",
                "+                     * TlsProtocol.readApplicationData) only ever processes one non-empty record (so",
                "+                     * interruption after partial output cannot occur).",
                "+                     */",
                "+                    pos += e.bytesTransferred;",
                "+                    e.bytesTransferred = 0;",
                "+                    throw e;",
                "+                }",
                "+            }",
                "+        }",
                "+",
                "+        void readFragment(InputStream input, int fragmentLength) throws IOException",
                "+        {",
                "+            int recordLength = RecordFormat.FRAGMENT_OFFSET + fragmentLength;",
                "+            resize(recordLength);",
                "+            fillTo(input, recordLength);",
                "+            if (pos < recordLength)",
                "+            {",
                "+                throw new EOFException();",
                "+            }",
                "+        }",
                "+",
                "+        boolean readHeader(InputStream input) throws IOException",
                "+        {",
                "+            fillTo(input, RecordFormat.FRAGMENT_OFFSET);",
                "+            if (pos == 0)",
                "+            {",
                "+                return false;",
                "+            }",
                "+            if (pos < RecordFormat.FRAGMENT_OFFSET)",
                "+            {",
                "+                throw new EOFException();",
                "+            }",
                "+            return true;",
                "+        }",
                "+",
                "+        void reset()",
                "+        {",
                "+            buf = header;",
                "+            pos = 0;",
                "+        }",
                "+",
                "+        private void resize(int length)",
                "+        {",
                "+            if (buf.length < length)",
                "+            {",
                "+                byte[] tmp = new byte[length];",
                "+                System.arraycopy(buf, 0, tmp, 0, pos);",
                "+                buf = tmp;",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "     private static class SequenceNumber",
                "diff --git a/tls/src/main/java/org/bouncycastle/tls/TlsClientProtocol.java b/tls/src/main/java/org/bouncycastle/tls/TlsClientProtocol.java",
                "index d1f5c4f89..fc3dad752 100644",
                "--- a/tls/src/main/java/org/bouncycastle/tls/TlsClientProtocol.java",
                "+++ b/tls/src/main/java/org/bouncycastle/tls/TlsClientProtocol.java",
                "@@ -101,3 +101,6 @@ public class TlsClientProtocol",
                "-        blockForHandshake();",
                "+        if (blocking)",
                "+        {",
                "+            blockForHandshake();",
                "+        }",
                "     }",
                "diff --git a/tls/src/main/java/org/bouncycastle/tls/TlsProtocol.java b/tls/src/main/java/org/bouncycastle/tls/TlsProtocol.java",
                "index e39a57a98..02c3db9f7 100644",
                "--- a/tls/src/main/java/org/bouncycastle/tls/TlsProtocol.java",
                "+++ b/tls/src/main/java/org/bouncycastle/tls/TlsProtocol.java",
                "@@ -7,2 +7,3 @@ import java.io.IOException;",
                " import java.io.InputStream;",
                "+import java.io.InterruptedIOException;",
                " import java.io.OutputStream;",
                "@@ -69,3 +70,5 @@ public abstract class TlsProtocol",
                "     private volatile boolean appDataSplitEnabled = true;",
                "+    private volatile boolean resumableHandshake = false;",
                "     private volatile int appDataSplitMode = ADS_MODE_1_Nsub1;",
                "+",
                "     // TODO[tls-ops] Investigate whether we can handle (expected/actual) verify data using TlsSecret",
                "@@ -109,2 +112,16 @@ public abstract class TlsProtocol",
                "+    public void resumeHandshake() throws IOException",
                "+    {",
                "+        if (!blocking)",
                "+        {",
                "+            throw new IllegalStateException(\"Cannot use resumeHandshake() in non-blocking mode!\");",
                "+        }",
                "+        if (!isHandshaking())",
                "+        {",
                "+            throw new IllegalStateException(\"No handshake in progress\");",
                "+        }",
                "+",
                "+        blockForHandshake();",
                "+    }",
                "+",
                "     protected void closeConnection() throws IOException",
                "@@ -181,8 +198,13 @@ public abstract class TlsProtocol",
                "-    protected void handleException(short alertDescription, String message, Throwable cause)",
                "+    protected void handleException(short alertDescription, String message, Throwable e)",
                "         throws IOException",
                "     {",
                "+        if ((appDataReady || isResumableHandshake()) && (e instanceof InterruptedIOException))",
                "+        {",
                "+            return;",
                "+        }",
                "+",
                "         if (!closed)",
                "         {",
                "-            raiseAlertFatal(alertDescription, message, cause);",
                "+            raiseAlertFatal(alertDescription, message, e);",
                "@@ -240,2 +262,16 @@ public abstract class TlsProtocol",
                "+    protected void blockForHandshake() throws IOException",
                "+    {",
                "+        while (this.connection_state != CS_END)",
                "+        {",
                "+            if (isClosed())",
                "+            {",
                "+                // NOTE: Any close during the handshake should have raised an exception.",
                "+                throw new TlsFatalAlert(AlertDescription.internal_error);",
                "+            }",
                "+",
                "+            safeReadRecord();",
                "+        }",
                "+    }",
                "+",
                "     protected void cleanupHandshake()",
                "@@ -265,19 +301,2 @@ public abstract class TlsProtocol",
                "     }",
                "-    ",
                "-    protected void blockForHandshake() throws IOException",
                "-    {",
                "-        if (blocking)",
                "-        {",
                "-            while (this.connection_state != CS_END)",
                "-            {",
                "-                if (this.closed)",
                "-                {",
                "-                    // NOTE: Any close during the handshake should have raised an exception.",
                "-                    throw new TlsFatalAlert(AlertDescription.internal_error);",
                "-                }",
                "-",
                "-                safeReadRecord();",
                "-            }",
                "-        }",
                "-    }",
                "@@ -560,2 +579,6 @@ public abstract class TlsProtocol",
                "+            /*",
                "+             * NOTE: Only called more than once when empty records are received, so no special",
                "+             * InterruptedIOException handling is necessary.",
                "+             */",
                "             safeReadRecord();",
                "@@ -633,3 +656,3 @@ public abstract class TlsProtocol",
                "-    protected boolean safeReadFullRecord(byte[] record)",
                "+    protected boolean safeReadFullRecord(byte[] input, int inputOff, int inputLen)",
                "         throws IOException",
                "@@ -638,3 +661,3 @@ public abstract class TlsProtocol",
                "         {",
                "-            return recordStream.readFullRecord(record);",
                "+            return recordStream.readFullRecord(input, inputOff, inputLen);",
                "         }",
                "@@ -731,3 +754,4 @@ public abstract class TlsProtocol",
                "                  */",
                "-                switch (appDataSplitMode) {",
                "+                switch (getAppDataSplitMode())",
                "+                {",
                "                     case ADS_MODE_0_N_FIRSTONLY:",
                "@@ -758,3 +782,9 @@ public abstract class TlsProtocol",
                "-    protected void setAppDataSplitMode(int appDataSplitMode) {",
                "+    public int getAppDataSplitMode()",
                "+    {",
                "+        return appDataSplitMode;",
                "+    }",
                "+",
                "+    public void setAppDataSplitMode(int appDataSplitMode)",
                "+    {",
                "         if (appDataSplitMode < ADS_MODE_1_Nsub1 ||",
                "@@ -767,2 +797,12 @@ public abstract class TlsProtocol",
                "+    public boolean isResumableHandshake()",
                "+    {",
                "+        return resumableHandshake;",
                "+    }",
                "+",
                "+    public void setResumableHandshake(boolean resumableHandshake)",
                "+    {",
                "+        this.resumableHandshake = resumableHandshake;",
                "+    }",
                "+",
                "     protected void writeHandshakeMessage(byte[] buf, int off, int len) throws IOException",
                "@@ -885,3 +925,3 @@ public abstract class TlsProtocol",
                "         {",
                "-            switch (appDataSplitMode)",
                "+            switch (getAppDataSplitMode())",
                "             {",
                "@@ -913,2 +953,13 @@ public abstract class TlsProtocol",
                "+    /**",
                "+     * Equivalent to <code>offerInput(input, 0, input.length)</code>",
                "+     * @see TlsProtocol#offerInput(byte[], int, int)",
                "+     * @param input The input buffer to offer",
                "+     * @throws IOException If an error occurs while decrypting or processing a record",
                "+     */",
                "+    public void offerInput(byte[] input) throws IOException",
                "+    {",
                "+        offerInput(input, 0, input.length);",
                "+    }",
                "+",
                "     /**",
                "@@ -929,5 +980,7 @@ public abstract class TlsProtocol",
                "      * @param input The input buffer to offer",
                "+     * @param inputOff The offset within the input buffer that input begins",
                "+     * @param inputLen The number of bytes of input being offered",
                "      * @throws IOException If an error occurs while decrypting or processing a record",
                "      */",
                "-    public void offerInput(byte[] input) throws IOException",
                "+    public void offerInput(byte[] input, int inputOff, int inputLen) throws IOException",
                "     {",
                "@@ -937,3 +990,2 @@ public abstract class TlsProtocol",
                "         }",
                "-        ",
                "         if (closed)",
                "@@ -944,3 +996,3 @@ public abstract class TlsProtocol",
                "         // Fast path if the input is arriving one record at a time",
                "-        if (inputBuffers.available() == 0 && safeReadFullRecord(input))",
                "+        if (inputBuffers.available() == 0 && safeReadFullRecord(input, inputOff, inputLen))",
                "         {",
                "@@ -957,3 +1009,3 @@ public abstract class TlsProtocol",
                "-        inputBuffers.addBytes(input);",
                "+        inputBuffers.addBytes(input, inputOff, inputLen);",
                "@@ -963,3 +1015,6 @@ public abstract class TlsProtocol",
                "             byte[] recordHeader = new byte[RecordFormat.FRAGMENT_OFFSET];",
                "-            inputBuffers.peek(recordHeader);",
                "+            if (RecordFormat.FRAGMENT_OFFSET != inputBuffers.peek(recordHeader))",
                "+            {",
                "+                throw new TlsFatalAlert(AlertDescription.internal_error);",
                "+            }",
                "@@ -972,2 +1027,3 @@ public abstract class TlsProtocol",
                "+            // NOTE: This is actually reading from inputBuffers, so InterruptedIOException shouldn't be possible",
                "             safeReadRecord();",
                "@@ -1237,2 +1293,7 @@ public abstract class TlsProtocol",
                "+    public boolean isHandshaking()",
                "+    {",
                "+        return securityParameters != null && this.connection_state != CS_END && !isClosed();",
                "+    }",
                "+",
                "     protected short processMaxFragmentLengthExtension(Hashtable clientExtensions, Hashtable serverExtensions,",
                "diff --git a/tls/src/main/java/org/bouncycastle/tls/TlsServerProtocol.java b/tls/src/main/java/org/bouncycastle/tls/TlsServerProtocol.java",
                "index 4b81055f0..55eae562f 100644",
                "--- a/tls/src/main/java/org/bouncycastle/tls/TlsServerProtocol.java",
                "+++ b/tls/src/main/java/org/bouncycastle/tls/TlsServerProtocol.java",
                "@@ -85,3 +85,6 @@ public class TlsServerProtocol",
                "-        blockForHandshake();",
                "+        if (blocking)",
                "+        {",
                "+            blockForHandshake();",
                "+        }",
                "     }"
            ],
            "changed_files": [
                "tls/src/main/java/org/bouncycastle/tls/ByteQueueInputStream.java",
                "tls/src/main/java/org/bouncycastle/tls/RecordStream.java",
                "tls/src/main/java/org/bouncycastle/tls/TlsClientProtocol.java",
                "tls/src/main/java/org/bouncycastle/tls/TlsProtocol.java",
                "tls/src/main/java/org/bouncycastle/tls/TlsServerProtocol.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "635c2b61f634b5d7581a689e3d29e9f359036653"
                ],
                [
                    "no-tag",
                    "0a1d59c973d24fc42e679cdccd93907ce2f4a610"
                ]
            ],
            "tags": [
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: allow, default",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "85dc53b89417357576fa3522faafcb2785dd782c",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1520395187,
            "hunks": 2,
            "message": "added stub provider to prevent issues with -Djava.security.debug",
            "diff": [
                "diff --git a/prov/src/main/java/org/bouncycastle/jcajce/provider/drbg/DRBG.java b/prov/src/main/java/org/bouncycastle/jcajce/provider/drbg/DRBG.java",
                "index 3bd795164..9af401653 100644",
                "--- a/prov/src/main/java/org/bouncycastle/jcajce/provider/drbg/DRBG.java",
                "+++ b/prov/src/main/java/org/bouncycastle/jcajce/provider/drbg/DRBG.java",
                "@@ -254,2 +254,11 @@ public class DRBG",
                "+    private static class HybridRandomProvider",
                "+        extends Provider",
                "+    {",
                "+        protected HybridRandomProvider()",
                "+        {",
                "+            super(\"BCHEP\", 1.0, \"Bouncy Castle Hybrid Entropy Provider\");",
                "+        }",
                "+    }",
                "+",
                "     private static class HybridSecureRandom",
                "@@ -265,3 +274,3 @@ public class DRBG",
                "         {",
                "-            super(null, null);",
                "+            super(null, new HybridRandomProvider());",
                "             drbg = new SP800SecureRandomBuilder(new EntropySourceProvider()"
            ],
            "changed_files": [
                "prov/src/main/java/org/bouncycastle/jcajce/provider/drbg/DRBG.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "cef02c6911af804fe3de737816e74caf15a0bdac"
                ],
                [
                    "no-tag",
                    "cc24914c7e69b3737507d23be855bd58dc7938b5"
                ]
            ],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: issue, security",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "1c3e644933b9e3b394bc7d89ff93badee448652c",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1515815707,
            "hunks": 6,
            "message": "Changed List constructors to be public.",
            "diff": [
                "diff --git a/pg/src/main/java/org/bouncycastle/openpgp/PGPPublicKeyRing.java b/pg/src/main/java/org/bouncycastle/openpgp/PGPPublicKeyRing.java",
                "index 154b5bd05..414237beb 100644",
                "--- a/pg/src/main/java/org/bouncycastle/openpgp/PGPPublicKeyRing.java",
                "+++ b/pg/src/main/java/org/bouncycastle/openpgp/PGPPublicKeyRing.java",
                "@@ -40,9 +40,40 @@ public class PGPPublicKeyRing",
                "+    private static List checkKeys(List keys)",
                "+    {",
                "+        List rv = new ArrayList(keys.size());",
                "+",
                "+        for (int i = 0; i != keys.size(); i++)",
                "+        {",
                "+            PGPPublicKey k = (PGPPublicKey)keys.get(i);",
                "+",
                "+            if (i == 0)",
                "+            {",
                "+                if (!k.isMasterKey())",
                "+                {",
                "+                    throw new IllegalArgumentException(\"key 0 must be a master key\");",
                "+                }",
                "+            }",
                "+            else",
                "+            {",
                "+                if (k.isMasterKey())",
                "+                {",
                "+                    throw new IllegalArgumentException(\"key 0 can be only master key\");",
                "+                }",
                "+            }",
                "+            rv.add(k);",
                "+        }",
                "+",
                "+        return rv;",
                "+    }",
                "+",
                "     /**",
                "-     * @param pubKeys",
                "+     * Base constructor from a list of keys representing a public key ring (a master key and its",
                "+     * associated sub-keys).",
                "+     *",
                "+     * @param pubKeys the list of keys making up the ring.",
                "      */",
                "-    PGPPublicKeyRing(",
                "+    public PGPPublicKeyRing(",
                "         List pubKeys)",
                "     {",
                "-        this.keys = pubKeys;",
                "+        this.keys = checkKeys(pubKeys);",
                "     }",
                "diff --git a/pg/src/main/java/org/bouncycastle/openpgp/PGPSecretKeyRing.java b/pg/src/main/java/org/bouncycastle/openpgp/PGPSecretKeyRing.java",
                "index 9e3d36e17..bf7b5f754 100644",
                "--- a/pg/src/main/java/org/bouncycastle/openpgp/PGPSecretKeyRing.java",
                "+++ b/pg/src/main/java/org/bouncycastle/openpgp/PGPSecretKeyRing.java",
                "@@ -37,5 +37,39 @@ public class PGPSecretKeyRing",
                "-    PGPSecretKeyRing(List keys)",
                "+    private static List checkKeys(List keys)",
                "     {",
                "-        this(keys, new ArrayList());",
                "+        List rv = new ArrayList(keys.size());",
                "+",
                "+        for (int i = 0; i != keys.size(); i++)",
                "+        {",
                "+            PGPSecretKey k = (PGPSecretKey)keys.get(i);",
                "+",
                "+            if (i == 0)",
                "+            {",
                "+                if (!k.isMasterKey())",
                "+                {",
                "+                    throw new IllegalArgumentException(\"key 0 must be a master key\");",
                "+                }",
                "+            }",
                "+            else",
                "+            {",
                "+                if (k.isMasterKey())",
                "+                {",
                "+                    throw new IllegalArgumentException(\"key 0 can be only master key\");",
                "+                }",
                "+            }",
                "+            rv.add(k);",
                "+        }",
                "+",
                "+        return rv;",
                "+    }",
                "+",
                "+    /**",
                "+     * Base constructor from a list of keys representing a secret key ring (a master key and its",
                "+     * associated sub-keys).",
                "+     *",
                "+     * @param secKeys the list of keys making up the ring.",
                "+     */",
                "+    public PGPSecretKeyRing(List secKeys)",
                "+    {",
                "+        this(checkKeys(secKeys), new ArrayList());",
                "     }"
            ],
            "changed_files": [
                "pg/src/main/java/org/bouncycastle/openpgp/PGPPublicKeyRing.java",
                "pg/src/main/java/org/bouncycastle/openpgp/PGPSecretKeyRing.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "5f8fed6c264686798a08eb5484ec77834f0b9573"
                ],
                [
                    "no-tag",
                    "50095ff9b2f34d51ff6ad21f576251e8b7be8ee9"
                ]
            ],
            "tags": [
                "r1v60"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: change",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "bacbd0205eff2d45235b984bb21146128e9f3a4a",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1510883892,
            "hunks": 3,
            "message": "minor changes to bring NewHope in line with reference implementation",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/pqc/crypto/newhope/NewHope.java b/core/src/main/java/org/bouncycastle/pqc/crypto/newhope/NewHope.java",
                "index 7ba75d5bd..8853aee2a 100644",
                "--- a/core/src/main/java/org/bouncycastle/pqc/crypto/newhope/NewHope.java",
                "+++ b/core/src/main/java/org/bouncycastle/pqc/crypto/newhope/NewHope.java",
                "@@ -22,2 +22,4 @@ class NewHope",
                "         rand.nextBytes(seed);",
                "+        ",
                "+        sha3(seed);     // don't expose RNG output",
                "diff --git a/core/src/main/java/org/bouncycastle/pqc/crypto/newhope/Params.java b/core/src/main/java/org/bouncycastle/pqc/crypto/newhope/Params.java",
                "index 1f13d97ac..8552f4676 100644",
                "--- a/core/src/main/java/org/bouncycastle/pqc/crypto/newhope/Params.java",
                "+++ b/core/src/main/java/org/bouncycastle/pqc/crypto/newhope/Params.java",
                "@@ -10,3 +10,3 @@ class Params",
                "     static final int REC_BYTES = 256;",
                "-    static final int SEED_BYTES = 32;",
                "+    static final int SEED_BYTES = 32;     // care changing this one - connected to digest size used.",
                " }",
                "diff --git a/core/src/main/java/org/bouncycastle/pqc/crypto/newhope/Poly.java b/core/src/main/java/org/bouncycastle/pqc/crypto/newhope/Poly.java",
                "index e7228bab9..a1986ecdf 100644",
                "--- a/core/src/main/java/org/bouncycastle/pqc/crypto/newhope/Poly.java",
                "+++ b/core/src/main/java/org/bouncycastle/pqc/crypto/newhope/Poly.java",
                "@@ -115,4 +115,3 @@ class Poly",
                "                 int val = (output[i] & 0xFF) | ((output[i + 1] & 0xFF) << 8);",
                "-                val &= 0x3FFF;",
                "-                if (val < Params.Q)",
                "+                if (val < 5 * Params.Q)",
                "                 {"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/pqc/crypto/newhope/NewHope.java",
                "core/src/main/java/org/bouncycastle/pqc/crypto/newhope/Params.java",
                "core/src/main/java/org/bouncycastle/pqc/crypto/newhope/Poly.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "9212b65354dfd2bce02a33a5c329a2f2821e713d"
                ],
                [
                    "no-tag",
                    "29363228a3f61ec1525333d2981a6ac4bbb973e9"
                ]
            ],
            "tags": [
                "r1rv59",
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: change",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5d6527c6d436be155475bff8b2380287e71b16e7",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1511146709,
            "hunks": 7,
            "message": "upgraded default iteration counts.",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/agreement/CombinedAgreement.java b/core/src/main/java/org/bouncycastle/crypto/agreement/CombinedAgreement.java",
                "new file mode 100644",
                "index 000000000..20d64cca9",
                "--- /dev/null",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/agreement/CombinedAgreement.java",
                "@@ -0,0 +1,48 @@",
                "+package org.bouncycastle.crypto.agreement;",
                "+",
                "+import java.math.BigInteger;",
                "+",
                "+import org.bouncycastle.crypto.CipherParameters;",
                "+import org.bouncycastle.crypto.params.CombinedPrivateParameters;",
                "+import org.bouncycastle.crypto.params.CombinedPublicParameters;",
                "+import org.bouncycastle.util.Arrays;",
                "+import org.bouncycastle.util.BigIntegers;",
                "+",
                "+/**",
                "+ * FFC static/ephemeral agreement as described in NIST SP 800-56A.",
                "+ */",
                "+public class CombinedAgreement",
                "+{",
                "+    private CombinedPrivateParameters privParams;",
                "+",
                "+    public void init(",
                "+        CipherParameters key)",
                "+    {",
                "+        this.privParams = (CombinedPrivateParameters)key;",
                "+    }",
                "+",
                "+    public int getFieldSize()",
                "+    {",
                "+        return (privParams.getStaticPrivateKey().getParameters().getP().bitLength() + 7) / 8;",
                "+    }",
                "+",
                "+    public byte[] calculateAgreement(CipherParameters pubKey)",
                "+    {",
                "+        CombinedPublicParameters pubParams = (CombinedPublicParameters)pubKey;",
                "+",
                "+        DHBasicAgreement sAgree = new DHBasicAgreement();",
                "+        DHBasicAgreement eAgree = new DHBasicAgreement();",
                "+",
                "+        sAgree.init(privParams.getStaticPrivateKey());",
                "+",
                "+        BigInteger sComp = sAgree.calculateAgreement(pubParams.getStaticPublicKey());",
                "+",
                "+        eAgree.init(privParams.getEphemeralPrivateKey());",
                "+",
                "+        BigInteger eComp = eAgree.calculateAgreement(pubParams.getEphemeralPublicKey());",
                "+",
                "+        return Arrays.concatenate(",
                "+            BigIntegers.asUnsignedByteArray(this.getFieldSize(), eComp),",
                "+            BigIntegers.asUnsignedByteArray(this.getFieldSize(), sComp));",
                "+    }",
                "+}",
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/agreement/ECCombinedAgreement.java b/core/src/main/java/org/bouncycastle/crypto/agreement/ECCombinedAgreement.java",
                "new file mode 100644",
                "index 000000000..18d4f6aa0",
                "--- /dev/null",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/agreement/ECCombinedAgreement.java",
                "@@ -0,0 +1,48 @@",
                "+package org.bouncycastle.crypto.agreement;",
                "+",
                "+import java.math.BigInteger;",
                "+",
                "+import org.bouncycastle.crypto.CipherParameters;",
                "+import org.bouncycastle.crypto.params.ECCombinedPrivateParameters;",
                "+import org.bouncycastle.crypto.params.ECCombinedPublicParameters;",
                "+import org.bouncycastle.util.Arrays;",
                "+import org.bouncycastle.util.BigIntegers;",
                "+",
                "+/**",
                "+ * EC static/ephemeral agreement as described in NIST SP 800-56A.",
                "+ */",
                "+public class ECCombinedAgreement",
                "+{",
                "+    private ECCombinedPrivateParameters privParams;",
                "+",
                "+    public void init(",
                "+        CipherParameters key)",
                "+    {",
                "+        this.privParams = (ECCombinedPrivateParameters)key;",
                "+    }",
                "+",
                "+    public int getFieldSize()",
                "+    {",
                "+        return (privParams.getStaticPrivateKey().getParameters().getCurve().getFieldSize() + 7) / 8;",
                "+    }",
                "+",
                "+    public byte[] calculateAgreement(CipherParameters pubKey)",
                "+    {",
                "+        ECCombinedPublicParameters pubParams = (ECCombinedPublicParameters)pubKey;",
                "+",
                "+        ECDHCBasicAgreement sAgree = new ECDHCBasicAgreement();",
                "+        ECDHCBasicAgreement eAgree = new ECDHCBasicAgreement();",
                "+",
                "+        sAgree.init(privParams.getStaticPrivateKey());",
                "+",
                "+        BigInteger sComp = sAgree.calculateAgreement(pubParams.getStaticPublicKey());",
                "+",
                "+        eAgree.init(privParams.getEphemeralPrivateKey());",
                "+",
                "+        BigInteger eComp = eAgree.calculateAgreement(pubParams.getEphemeralPublicKey());",
                "+",
                "+        return Arrays.concatenate(",
                "+            BigIntegers.asUnsignedByteArray(this.getFieldSize(), eComp),",
                "+            BigIntegers.asUnsignedByteArray(this.getFieldSize(), sComp));",
                "+    }",
                "+}",
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/params/CombinedPrivateParameters.java b/core/src/main/java/org/bouncycastle/crypto/params/CombinedPrivateParameters.java",
                "new file mode 100644",
                "index 000000000..6e04ccd71",
                "--- /dev/null",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/params/CombinedPrivateParameters.java",
                "@@ -0,0 +1,72 @@",
                "+package org.bouncycastle.crypto.params;",
                "+",
                "+import org.bouncycastle.crypto.CipherParameters;",
                "+",
                "+/**",
                "+ * Parameters holder for private unified static/ephemeral agreement as described in NIST SP 800-56A.",
                "+ */",
                "+public class CombinedPrivateParameters",
                "+    implements CipherParameters",
                "+{",
                "+    private DHPrivateKeyParameters staticPrivateKey;",
                "+    private DHPrivateKeyParameters ephemeralPrivateKey;",
                "+    private DHPublicKeyParameters ephemeralPublicKey;",
                "+",
                "+    public CombinedPrivateParameters(",
                "+        DHPrivateKeyParameters  staticPrivateKey,",
                "+        DHPrivateKeyParameters  ephemeralPrivateKey)",
                "+    {",
                "+        this(staticPrivateKey, ephemeralPrivateKey, null);",
                "+    }",
                "+",
                "+    public CombinedPrivateParameters(",
                "+        DHPrivateKeyParameters  staticPrivateKey,",
                "+        DHPrivateKeyParameters  ephemeralPrivateKey,",
                "+        DHPublicKeyParameters   ephemeralPublicKey)",
                "+    {",
                "+        if (staticPrivateKey == null)",
                "+        {",
                "+            throw new NullPointerException(\"staticPrivateKey cannot be null\");",
                "+        }",
                "+        if (ephemeralPrivateKey == null)",
                "+        {",
                "+            throw new NullPointerException(\"ephemeralPrivateKey cannot be null\");",
                "+        }",
                "+",
                "+        DHParameters parameters = staticPrivateKey.getParameters();",
                "+        if (!parameters.equals(ephemeralPrivateKey.getParameters()))",
                "+        {",
                "+            throw new IllegalArgumentException(\"static and ephemeral private keys have different domain parameters\");",
                "+        }",
                "+",
                "+        if (ephemeralPublicKey == null)",
                "+        {",
                "+            ephemeralPublicKey = new DHPublicKeyParameters(",
                "+                parameters.getG().modPow(ephemeralPrivateKey.getX(), parameters.getP()),",
                "+                parameters);",
                "+        }",
                "+        else if (!parameters.equals(ephemeralPublicKey.getParameters()))",
                "+        {",
                "+            throw new IllegalArgumentException(\"ephemeral public key has different domain parameters\");",
                "+        }",
                "+",
                "+        this.staticPrivateKey = staticPrivateKey;",
                "+        this.ephemeralPrivateKey = ephemeralPrivateKey;",
                "+        this.ephemeralPublicKey = ephemeralPublicKey;",
                "+    }",
                "+",
                "+    public DHPrivateKeyParameters getStaticPrivateKey()",
                "+    {",
                "+        return staticPrivateKey;",
                "+    }",
                "+",
                "+    public DHPrivateKeyParameters getEphemeralPrivateKey()",
                "+    {",
                "+        return ephemeralPrivateKey;",
                "+    }",
                "+",
                "+    public DHPublicKeyParameters getEphemeralPublicKey()",
                "+    {",
                "+        return ephemeralPublicKey;",
                "+    }",
                "+}",
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/params/CombinedPublicParameters.java b/core/src/main/java/org/bouncycastle/crypto/params/CombinedPublicParameters.java",
                "new file mode 100644",
                "index 000000000..e3ef1ec38",
                "--- /dev/null",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/params/CombinedPublicParameters.java",
                "@@ -0,0 +1,44 @@",
                "+package org.bouncycastle.crypto.params;",
                "+",
                "+import org.bouncycastle.crypto.CipherParameters;",
                "+",
                "+/**",
                "+ * Parameters holder for public unified static/ephemeral agreement as described in NIST SP 800-56A.",
                "+ */",
                "+public class CombinedPublicParameters",
                "+    implements CipherParameters",
                "+{",
                "+    private DHPublicKeyParameters staticPublicKey;",
                "+    private DHPublicKeyParameters ephemeralPublicKey;",
                "+",
                "+    public CombinedPublicParameters(",
                "+        DHPublicKeyParameters   staticPublicKey,",
                "+        DHPublicKeyParameters   ephemeralPublicKey)",
                "+    {",
                "+        if (staticPublicKey == null)",
                "+        {",
                "+            throw new NullPointerException(\"staticPublicKey cannot be null\");",
                "+        }",
                "+        if (ephemeralPublicKey == null)",
                "+        {",
                "+            throw new NullPointerException(\"ephemeralPublicKey cannot be null\");",
                "+        }",
                "+        if (!staticPublicKey.getParameters().equals(ephemeralPublicKey.getParameters()))",
                "+        {",
                "+            throw new IllegalArgumentException(\"Static and ephemeral public keys have different domain parameters\");",
                "+        }",
                "+",
                "+        this.staticPublicKey = staticPublicKey;",
                "+        this.ephemeralPublicKey = ephemeralPublicKey;",
                "+    }",
                "+",
                "+    public DHPublicKeyParameters getStaticPublicKey()",
                "+    {",
                "+        return staticPublicKey;",
                "+    }",
                "+",
                "+    public DHPublicKeyParameters getEphemeralPublicKey()",
                "+    {",
                "+        return ephemeralPublicKey;",
                "+    }",
                "+}",
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/params/ECCombinedPrivateParameters.java b/core/src/main/java/org/bouncycastle/crypto/params/ECCombinedPrivateParameters.java",
                "new file mode 100644",
                "index 000000000..e5e971381",
                "--- /dev/null",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/params/ECCombinedPrivateParameters.java",
                "@@ -0,0 +1,72 @@",
                "+package org.bouncycastle.crypto.params;",
                "+",
                "+import org.bouncycastle.crypto.CipherParameters;",
                "+",
                "+/**",
                "+ * Parameters holder for private unified static/ephemeral agreement as described in NIST SP 800-56A.",
                "+ */",
                "+public class ECCombinedPrivateParameters",
                "+    implements CipherParameters",
                "+{",
                "+    private ECPrivateKeyParameters staticPrivateKey;",
                "+    private ECPrivateKeyParameters ephemeralPrivateKey;",
                "+    private ECPublicKeyParameters ephemeralPublicKey;",
                "+",
                "+    public ECCombinedPrivateParameters(",
                "+        ECPrivateKeyParameters  staticPrivateKey,",
                "+        ECPrivateKeyParameters  ephemeralPrivateKey)",
                "+    {",
                "+        this(staticPrivateKey, ephemeralPrivateKey, null);",
                "+    }",
                "+",
                "+    public ECCombinedPrivateParameters(",
                "+        ECPrivateKeyParameters  staticPrivateKey,",
                "+        ECPrivateKeyParameters  ephemeralPrivateKey,",
                "+        ECPublicKeyParameters   ephemeralPublicKey)",
                "+    {",
                "+        if (staticPrivateKey == null)",
                "+        {",
                "+            throw new NullPointerException(\"staticPrivateKey cannot be null\");",
                "+        }",
                "+        if (ephemeralPrivateKey == null)",
                "+        {",
                "+            throw new NullPointerException(\"ephemeralPrivateKey cannot be null\");",
                "+        }",
                "+",
                "+        ECDomainParameters parameters = staticPrivateKey.getParameters();",
                "+        if (!parameters.equals(ephemeralPrivateKey.getParameters()))",
                "+        {",
                "+            throw new IllegalArgumentException(\"static and ephemeral private keys have different domain parameters\");",
                "+        }",
                "+",
                "+        if (ephemeralPublicKey == null)",
                "+        {",
                "+            ephemeralPublicKey = new ECPublicKeyParameters(",
                "+                parameters.getG().multiply(ephemeralPrivateKey.getD()),",
                "+                parameters);",
                "+        }",
                "+        else if (!parameters.equals(ephemeralPublicKey.getParameters()))",
                "+        {",
                "+            throw new IllegalArgumentException(\"ephemeral public key has different domain parameters\");",
                "+        }",
                "+",
                "+        this.staticPrivateKey = staticPrivateKey;",
                "+        this.ephemeralPrivateKey = ephemeralPrivateKey;",
                "+        this.ephemeralPublicKey = ephemeralPublicKey;",
                "+    }",
                "+",
                "+    public ECPrivateKeyParameters getStaticPrivateKey()",
                "+    {",
                "+        return staticPrivateKey;",
                "+    }",
                "+",
                "+    public ECPrivateKeyParameters getEphemeralPrivateKey()",
                "+    {",
                "+        return ephemeralPrivateKey;",
                "+    }",
                "+",
                "+    public ECPublicKeyParameters getEphemeralPublicKey()",
                "+    {",
                "+        return ephemeralPublicKey;",
                "+    }",
                "+}",
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/params/ECCombinedPublicParameters.java b/core/src/main/java/org/bouncycastle/crypto/params/ECCombinedPublicParameters.java",
                "new file mode 100644",
                "index 000000000..d76fccce5",
                "--- /dev/null",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/params/ECCombinedPublicParameters.java",
                "@@ -0,0 +1,44 @@",
                "+package org.bouncycastle.crypto.params;",
                "+",
                "+import org.bouncycastle.crypto.CipherParameters;",
                "+",
                "+/**",
                "+ * Parameters holder for public unified static/ephemeral agreement as described in NIST SP 800-56A.",
                "+ */",
                "+public class ECCombinedPublicParameters",
                "+    implements CipherParameters",
                "+{",
                "+    private ECPublicKeyParameters staticPublicKey;",
                "+    private ECPublicKeyParameters ephemeralPublicKey;",
                "+",
                "+    public ECCombinedPublicParameters(",
                "+        ECPublicKeyParameters   staticPublicKey,",
                "+        ECPublicKeyParameters   ephemeralPublicKey)",
                "+    {",
                "+        if (staticPublicKey == null)",
                "+        {",
                "+            throw new NullPointerException(\"staticPublicKey cannot be null\");",
                "+        }",
                "+        if (ephemeralPublicKey == null)",
                "+        {",
                "+            throw new NullPointerException(\"ephemeralPublicKey cannot be null\");",
                "+        }",
                "+        if (!staticPublicKey.getParameters().equals(ephemeralPublicKey.getParameters()))",
                "+        {",
                "+            throw new IllegalArgumentException(\"Static and ephemeral public keys have different domain parameters\");",
                "+        }",
                "+",
                "+        this.staticPublicKey = staticPublicKey;",
                "+        this.ephemeralPublicKey = ephemeralPublicKey;",
                "+    }",
                "+",
                "+    public ECPublicKeyParameters getStaticPublicKey()",
                "+    {",
                "+        return staticPublicKey;",
                "+    }",
                "+",
                "+    public ECPublicKeyParameters getEphemeralPublicKey()",
                "+    {",
                "+        return ephemeralPublicKey;",
                "+    }",
                "+}",
                "diff --git a/prov/src/main/java/org/bouncycastle/jcajce/spec/MQVParameterSpec.java b/prov/src/main/java/org/bouncycastle/jcajce/spec/MQVParameterSpec.java",
                "index 907abfb4e..76ae8d61f 100644",
                "--- a/prov/src/main/java/org/bouncycastle/jcajce/spec/MQVParameterSpec.java",
                "+++ b/prov/src/main/java/org/bouncycastle/jcajce/spec/MQVParameterSpec.java",
                "@@ -9,2 +9,5 @@ import org.bouncycastle.util.Arrays;",
                "+/**",
                "+ * Parameter spec to provide MQV ephemeral keys and user keying material.",
                "+ */",
                " public class MQVParameterSpec"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/crypto/agreement/CombinedAgreement.java",
                "core/src/main/java/org/bouncycastle/crypto/agreement/ECCombinedAgreement.java",
                "core/src/main/java/org/bouncycastle/crypto/params/CombinedPrivateParameters.java",
                "core/src/main/java/org/bouncycastle/crypto/params/CombinedPublicParameters.java",
                "core/src/main/java/org/bouncycastle/crypto/params/ECCombinedPrivateParameters.java",
                "core/src/main/java/org/bouncycastle/crypto/params/ECCombinedPublicParameters.java",
                "prov/src/main/java/org/bouncycastle/jcajce/spec/MQVParameterSpec.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "3d986f836ccb785a7817bcd337eb944900939f3f"
                ],
                [
                    "no-tag",
                    "88c85f5b213ff3280964ea439b49f236601ea608"
                ],
                [
                    "no-tag",
                    "2a876299b417ec2ffe267c5ebc120c9dc64003ce"
                ],
                [
                    "no-tag",
                    "c08a585285802a11a97e4c1da78ea8504c5cdb0a"
                ],
                [
                    "no-tag",
                    "c49fb711b9958079063ad67d0393bfbddfcfa96e"
                ]
            ],
            "tags": [
                "r1rv59",
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: default",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e7808d57b2b5ea3d34c8b20aa32611291cf8b053",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1514332051,
            "hunks": 4,
            "message": "added Blake2s digest to JCE provider. fixed issue with Blake2s digest reset after longer messages.",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/asn1/misc/MiscObjectIdentifiers.java b/core/src/main/java/org/bouncycastle/asn1/misc/MiscObjectIdentifiers.java",
                "index 2cbc0126b..79a72c6ed 100644",
                "--- a/core/src/main/java/org/bouncycastle/asn1/misc/MiscObjectIdentifiers.java",
                "+++ b/core/src/main/java/org/bouncycastle/asn1/misc/MiscObjectIdentifiers.java",
                "@@ -95,2 +95,7 @@ public interface MiscObjectIdentifiers",
                "+    ASN1ObjectIdentifier id_blake2s128 = blake2.branch(\"2.4\");",
                "+    ASN1ObjectIdentifier id_blake2s160 = blake2.branch(\"2.5\");",
                "+    ASN1ObjectIdentifier id_blake2s224 = blake2.branch(\"2.7\");",
                "+    ASN1ObjectIdentifier id_blake2s256 = blake2.branch(\"2.8\");",
                "+",
                "     //",
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/digests/Blake2sDigest.java b/core/src/main/java/org/bouncycastle/crypto/digests/Blake2sDigest.java",
                "index 273276451..0ce31fc54 100644",
                "--- a/core/src/main/java/org/bouncycastle/crypto/digests/Blake2sDigest.java",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/digests/Blake2sDigest.java",
                "@@ -460,2 +460,3 @@ public class Blake2sDigest",
                "         }",
                "+        Arrays.fill(buffer, (byte)0);",
                "         init();",
                "diff --git a/prov/src/main/java/org/bouncycastle/jcajce/provider/digest/Blake2s.java b/prov/src/main/java/org/bouncycastle/jcajce/provider/digest/Blake2s.java",
                "new file mode 100644",
                "index 000000000..a79fbe974",
                "--- /dev/null",
                "+++ b/prov/src/main/java/org/bouncycastle/jcajce/provider/digest/Blake2s.java",
                "@@ -0,0 +1,114 @@",
                "+package org.bouncycastle.jcajce.provider.digest;",
                "+",
                "+import org.bouncycastle.asn1.misc.MiscObjectIdentifiers;",
                "+import org.bouncycastle.crypto.digests.Blake2sDigest;",
                "+import org.bouncycastle.jcajce.provider.config.ConfigurableProvider;",
                "+",
                "+public class Blake2s",
                "+{",
                "+    private Blake2s()",
                "+    {",
                "+",
                "+    }",
                "+",
                "+    static public class Blake2s256",
                "+        extends BCMessageDigest",
                "+        implements Cloneable",
                "+    {",
                "+        public Blake2s256()",
                "+        {",
                "+            super(new Blake2sDigest(256));",
                "+        }",
                "+",
                "+        public Object clone()",
                "+            throws CloneNotSupportedException",
                "+        {",
                "+            Blake2s256 d = (Blake2s256)super.clone();",
                "+            d.digest = new Blake2sDigest((Blake2sDigest)digest);",
                "+",
                "+            return d;",
                "+        }",
                "+    }",
                "+",
                "+    static public class Blake2s224",
                "+        extends BCMessageDigest",
                "+        implements Cloneable",
                "+    {",
                "+        public Blake2s224()",
                "+        {",
                "+            super(new Blake2sDigest(224));",
                "+        }",
                "+",
                "+        public Object clone()",
                "+            throws CloneNotSupportedException",
                "+        {",
                "+            Blake2s224 d = (Blake2s224)super.clone();",
                "+            d.digest = new Blake2sDigest((Blake2sDigest)digest);",
                "+",
                "+            return d;",
                "+        }",
                "+    }",
                "+",
                "+    static public class Blake2s160",
                "+        extends BCMessageDigest",
                "+        implements Cloneable",
                "+    {",
                "+        public Blake2s160()",
                "+        {",
                "+            super(new Blake2sDigest(160));",
                "+        }",
                "+",
                "+        public Object clone()",
                "+            throws CloneNotSupportedException",
                "+        {",
                "+            Blake2s160 d = (Blake2s160)super.clone();",
                "+            d.digest = new Blake2sDigest((Blake2sDigest)digest);",
                "+",
                "+            return d;",
                "+        }",
                "+    }",
                "+",
                "+    static public class Blake2s128",
                "+        extends BCMessageDigest",
                "+        implements Cloneable",
                "+    {",
                "+        public Blake2s128()",
                "+        {",
                "+            super(new Blake2sDigest(128));",
                "+        }",
                "+",
                "+        public Object clone()",
                "+            throws CloneNotSupportedException",
                "+        {",
                "+            Blake2s128 d = (Blake2s128)super.clone();",
                "+            d.digest = new Blake2sDigest((Blake2sDigest)digest);",
                "+",
                "+            return d;",
                "+        }",
                "+    }",
                "+",
                "+    public static class Mappings",
                "+        extends DigestAlgorithmProvider",
                "+    {",
                "+        private static final String PREFIX = Blake2s.class.getName();",
                "+",
                "+        public Mappings()",
                "+        {",
                "+        }",
                "+",
                "+        public void configure(ConfigurableProvider provider)",
                "+        {",
                "+            provider.addAlgorithm(\"MessageDigest.BLAKE2S-256\", PREFIX + \"$Blake2s256\");",
                "+            provider.addAlgorithm(\"Alg.Alias.MessageDigest.\" + MiscObjectIdentifiers.id_blake2s256, \"BLAKE2S-256\");",
                "+",
                "+            provider.addAlgorithm(\"MessageDigest.BLAKE2S-224\", PREFIX + \"$Blake2s224\");",
                "+            provider.addAlgorithm(\"Alg.Alias.MessageDigest.\" + MiscObjectIdentifiers.id_blake2s224, \"BLAKE2S-224\");",
                "+",
                "+            provider.addAlgorithm(\"MessageDigest.BLAKE2S-160\", PREFIX + \"$Blake2s160\");",
                "+            provider.addAlgorithm(\"Alg.Alias.MessageDigest.\" + MiscObjectIdentifiers.id_blake2s160, \"BLAKE2S-160\");",
                "+",
                "+            provider.addAlgorithm(\"MessageDigest.BLAKE2S-128\", PREFIX + \"$Blake2s128\");",
                "+            provider.addAlgorithm(\"Alg.Alias.MessageDigest.\" + MiscObjectIdentifiers.id_blake2s128, \"BLAKE2S-128\");",
                "+        }",
                "+    }",
                "+}",
                "diff --git a/prov/src/main/java/org/bouncycastle/jce/provider/BouncyCastleProvider.java b/prov/src/main/java/org/bouncycastle/jce/provider/BouncyCastleProvider.java",
                "index b3fe97a99..e23c526c3 100644",
                "--- a/prov/src/main/java/org/bouncycastle/jce/provider/BouncyCastleProvider.java",
                "+++ b/prov/src/main/java/org/bouncycastle/jce/provider/BouncyCastleProvider.java",
                "@@ -111,3 +111,3 @@ public final class BouncyCastleProvider extends Provider",
                "         \"GOST3411\", \"Keccak\", \"MD2\", \"MD4\", \"MD5\", \"SHA1\", \"RIPEMD128\", \"RIPEMD160\", \"RIPEMD256\", \"RIPEMD320\", \"SHA224\",",
                "-        \"SHA256\", \"SHA384\", \"SHA512\", \"SHA3\", \"Skein\", \"SM3\", \"Tiger\", \"Whirlpool\", \"Blake2b\", \"DSTU7564\"",
                "+        \"SHA256\", \"SHA384\", \"SHA512\", \"SHA3\", \"Skein\", \"SM3\", \"Tiger\", \"Whirlpool\", \"Blake2b\", \"Blake2s\", \"DSTU7564\"",
                "     };"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/asn1/misc/MiscObjectIdentifiers.java",
                "core/src/main/java/org/bouncycastle/crypto/digests/Blake2sDigest.java",
                "prov/src/main/java/org/bouncycastle/jcajce/provider/digest/Blake2s.java",
                "prov/src/main/java/org/bouncycastle/jce/provider/BouncyCastleProvider.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "f39fcfe51453bd665de46be783629d042366ae27"
                ],
                [
                    "no-tag",
                    "3b6ef3da6fb9570edfb9e1d2ec50dd14408d377c"
                ]
            ],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: issue",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "52dc47058fe4c1d1841ca02b5e279a2912580981",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1518739122,
            "hunks": 2,
            "message": "Added check for zero length strings.",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/util/encoders/Base64Encoder.java b/core/src/main/java/org/bouncycastle/util/encoders/Base64Encoder.java",
                "index a0869fb0e..645b151ce 100644",
                "--- a/core/src/main/java/org/bouncycastle/util/encoders/Base64Encoder.java",
                "+++ b/core/src/main/java/org/bouncycastle/util/encoders/Base64Encoder.java",
                "@@ -151,2 +151,8 @@ public class Base64Encoder",
                "         }",
                "+",
                "+        // empty data!",
                "+        if (end == 0)",
                "+        {",
                "+            return 0;",
                "+        }",
                "@@ -241,2 +247,8 @@ public class Base64Encoder",
                "         }",
                "+",
                "+        // empty data!",
                "+        if (end == 0)",
                "+        {",
                "+            return 0;",
                "+        }"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/util/encoders/Base64Encoder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "692e345046884663d2231cbae81deb1140b6669b"
                ],
                [
                    "no-tag",
                    "f81bd984e1ecf0de1afde3741982fb1bef85a5dc"
                ]
            ],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: check",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "72f56e7124c30ce8056b8e3313bfdc67450eda66",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1511366367,
            "hunks": 1,
            "message": "Override getMaximumVersion so that fallback checks work correctly",
            "diff": [
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvTlsServer.java b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvTlsServer.java",
                "index 4aef108d2..7905809c3 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvTlsServer.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvTlsServer.java",
                "@@ -93,2 +93,8 @@ class ProvTlsServer",
                "+    @Override",
                "+    protected ProtocolVersion getMaximumVersion()",
                "+    {",
                "+        return manager.getContext().getMaximumVersion(sslParameters.getProtocols());",
                "+    }",
                "+",
                "     @Override"
            ],
            "changed_files": [
                "tls/src/main/java/org/bouncycastle/jsse/provider/ProvTlsServer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "1be6acd1ffff47338f760bfeedee2d5cb4b0efa3"
                ],
                [
                    "no-tag",
                    "55ade5e2d8f7fb47a9608bd9425e0ef9214fbc12"
                ]
            ],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: check",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b38c8c371cbee58766f18368573bc2215be312c9",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1520046394,
            "hunks": 28,
            "message": "added additional checking to XMSS BDS tree parsing. Failures now mostly cause IOException",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/pqc/crypto/gmss/GMSSKeyPairGenerator.java b/core/src/main/java/org/bouncycastle/pqc/crypto/gmss/GMSSKeyPairGenerator.java",
                "index 013441ec5..3b7d8a6ae 100644",
                "--- a/core/src/main/java/org/bouncycastle/pqc/crypto/gmss/GMSSKeyPairGenerator.java",
                "+++ b/core/src/main/java/org/bouncycastle/pqc/crypto/gmss/GMSSKeyPairGenerator.java",
                "@@ -180,22 +180,15 @@ public class GMSSKeyPairGenerator",
                "         {",
                "-            GMSSRootCalc tree = new GMSSRootCalc(this.heightOfTrees[h], this.K[h], digestProvider);",
                "-            try",
                "-            {",
                "-                // on lowest layer no lower root is available, so just call",
                "-                // the method with null as first parameter",
                "-                if (h == numLayer - 1)",
                "-                {",
                "-                    tree = this.generateCurrentAuthpathAndRoot(null, currentStack[h], seeds[h], h);",
                "-                }",
                "-                else",
                "-                // otherwise call the method with the former computed root",
                "-                // value",
                "-                {",
                "-                    tree = this.generateCurrentAuthpathAndRoot(currentRoots[h + 1], currentStack[h], seeds[h], h);",
                "-                }",
                "+            GMSSRootCalc tree;",
                "+            // on lowest layer no lower root is available, so just call",
                "+            // the method with null as first parameter",
                "+            if (h == numLayer - 1)",
                "+            {",
                "+                tree = this.generateCurrentAuthpathAndRoot(null, currentStack[h], seeds[h], h);",
                "             }",
                "-            catch (Exception e1)",
                "+            else",
                "+            // otherwise call the method with the former computed root",
                "+            // value",
                "             {",
                "-                e1.printStackTrace();",
                "+                tree = this.generateCurrentAuthpathAndRoot(currentRoots[h + 1], currentStack[h], seeds[h], h);",
                "             }",
                "diff --git a/core/src/main/java/org/bouncycastle/pqc/crypto/rainbow/RainbowParameters.java b/core/src/main/java/org/bouncycastle/pqc/crypto/rainbow/RainbowParameters.java",
                "index 147c55e93..926f1ba4b 100644",
                "--- a/core/src/main/java/org/bouncycastle/pqc/crypto/rainbow/RainbowParameters.java",
                "+++ b/core/src/main/java/org/bouncycastle/pqc/crypto/rainbow/RainbowParameters.java",
                "@@ -46,10 +46,4 @@ public class RainbowParameters",
                "         this.vi = vi;",
                "-        try",
                "-        {",
                "-            checkParams();",
                "-        }",
                "-        catch (Exception e)",
                "-        {",
                "-            e.printStackTrace();",
                "-        }",
                "+",
                "+        checkParams();",
                "     }",
                "@@ -57,3 +51,2 @@ public class RainbowParameters",
                "     private void checkParams()",
                "-        throws Exception",
                "     {",
                "@@ -61,3 +54,3 @@ public class RainbowParameters",
                "         {",
                "-            throw new Exception(\"no layers defined.\");",
                "+            throw new IllegalArgumentException(\"no layers defined.\");",
                "         }",
                "@@ -69,3 +62,3 @@ public class RainbowParameters",
                "                 {",
                "-                    throw new Exception(",
                "+                    throw new IllegalArgumentException(",
                "                         \"v[i] has to be smaller than v[i+1]\");",
                "@@ -76,3 +69,3 @@ public class RainbowParameters",
                "         {",
                "-            throw new Exception(",
                "+            throw new IllegalArgumentException(",
                "                 \"Rainbow needs at least 1 layer, such that v1 < v2.\");",
                "diff --git a/core/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSMTPrivateKeyParameters.java b/core/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSMTPrivateKeyParameters.java",
                "index e0d6bb701..d9c221664 100644",
                "--- a/core/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSMTPrivateKeyParameters.java",
                "+++ b/core/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSMTPrivateKeyParameters.java",
                "@@ -70,6 +70,8 @@ public final class XMSSMTPrivateKeyParameters",
                "-            BDSStateMap bdsImport = null;",
                "             try",
                "             {",
                "-                bdsImport = (BDSStateMap)XMSSUtil.deserialize(bdsStateBinary);",
                "+                BDSStateMap bdsImport = (BDSStateMap)XMSSUtil.deserialize(bdsStateBinary, BDSStateMap.class);",
                "+",
                "+                bdsImport.setXMSS(builder.xmss);",
                "+                bdsState = bdsImport;",
                "             }",
                "@@ -77,3 +79,3 @@ public final class XMSSMTPrivateKeyParameters",
                "             {",
                "-                e.printStackTrace();",
                "+                throw new IllegalArgumentException(e.getMessage(), e);",
                "             }",
                "@@ -81,6 +83,4 @@ public final class XMSSMTPrivateKeyParameters",
                "             {",
                "-                e.printStackTrace();",
                "+                throw new IllegalArgumentException(e.getMessage(), e);",
                "             }",
                "-            bdsImport.setXMSS(builder.xmss);",
                "-            bdsState = bdsImport;",
                "         }",
                "@@ -262,6 +262,5 @@ public final class XMSSMTPrivateKeyParameters",
                " \t\t/* concatenate bdsState */",
                "-        byte[] bdsStateOut = null;",
                "         try",
                "         {",
                "-            bdsStateOut = XMSSUtil.serialize(bdsState);",
                "+            return Arrays.concatenate(out, XMSSUtil.serialize(bdsState));",
                "         }",
                "@@ -269,6 +268,4 @@ public final class XMSSMTPrivateKeyParameters",
                "         {",
                "-            e.printStackTrace();",
                "-            throw new RuntimeException(\"error serializing bds state\");",
                "+            throw new IllegalStateException(\"error serializing bds state: \" + e.getMessage(), e);",
                "         }",
                "-        return Arrays.concatenate(out, bdsStateOut);",
                "     }",
                "diff --git a/core/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSPrivateKeyParameters.java b/core/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSPrivateKeyParameters.java",
                "index 3d62ca21e..85622af52 100644",
                "--- a/core/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSPrivateKeyParameters.java",
                "+++ b/core/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSPrivateKeyParameters.java",
                "@@ -88,6 +88,12 @@ public final class XMSSPrivateKeyParameters",
                "             byte[] bdsStateBinary = XMSSUtil.extractBytesAtOffset(privateKey, position, privateKey.length - position);",
                "-            BDS bdsImport = null;",
                "             try",
                "             {",
                "-                bdsImport = (BDS)XMSSUtil.deserialize(bdsStateBinary);",
                "+                BDS bdsImport = (BDS)XMSSUtil.deserialize(bdsStateBinary, BDS.class);",
                "+                bdsImport.setXMSS(builder.xmss);",
                "+                bdsImport.validate();",
                "+                if (bdsImport.getIndex() != index)",
                "+                {",
                "+                    throw new IllegalStateException(\"serialized BDS has wrong index\");",
                "+                }",
                "+                bdsState = bdsImport;",
                "             }",
                "@@ -95,3 +101,3 @@ public final class XMSSPrivateKeyParameters",
                "             {",
                "-                e.printStackTrace();",
                "+                throw new IllegalArgumentException(e.getMessage(), e);",
                "             }",
                "@@ -99,11 +105,4 @@ public final class XMSSPrivateKeyParameters",
                "             {",
                "-                e.printStackTrace();",
                "-            }",
                "-            bdsImport.setXMSS(builder.xmss);",
                "-            bdsImport.validate();",
                "-            if (bdsImport.getIndex() != index)",
                "-            {",
                "-                throw new IllegalStateException(\"serialized BDS has wrong index\");",
                "+                throw new IllegalArgumentException(e.getMessage(), e);",
                "             }",
                "-            bdsState = bdsImport;",
                "         }",
                "diff --git a/core/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSUtil.java b/core/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSUtil.java",
                "index 4eaee74a4..3a707f455 100644",
                "--- a/core/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSUtil.java",
                "+++ b/core/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSUtil.java",
                "@@ -323,3 +323,3 @@ public class XMSSUtil",
                "-    public static Object deserialize(byte[] data)",
                "+    public static Object deserialize(byte[] data, Class clazz)",
                "         throws IOException, ClassNotFoundException",
                "@@ -328,3 +328,16 @@ public class XMSSUtil",
                "         ObjectInputStream is = new ObjectInputStream(in);",
                "-        return is.readObject();",
                "+        Object obj = is.readObject();",
                "+",
                "+        if (is.available() != 0)",
                "+        {",
                "+            throw new IOException(\"unexpected data found at end of ObjectInputStream\");",
                "+        }",
                "+        if (clazz.isInstance(obj))",
                "+        {",
                "+            return obj;",
                "+        }",
                "+        else",
                "+        {",
                "+            throw new IOException(\"unexpected class found in ObjectInputStream\");",
                "+        }",
                "     }",
                "diff --git a/core/src/main/java/org/bouncycastle/pqc/math/linearalgebra/GF2nField.java b/core/src/main/java/org/bouncycastle/pqc/math/linearalgebra/GF2nField.java",
                "index 22e299f01..091a20031 100644",
                "--- a/core/src/main/java/org/bouncycastle/pqc/math/linearalgebra/GF2nField.java",
                "+++ b/core/src/main/java/org/bouncycastle/pqc/math/linearalgebra/GF2nField.java",
                "@@ -157,12 +157,5 @@ public abstract class GF2nField",
                "         {",
                "-            try",
                "-            {",
                "-                a[i] = new GF2Polynomial(matrix[i]);",
                "-                inv[i] = new GF2Polynomial(mDegree);",
                "-                inv[i].setBit(mDegree - 1 - i);",
                "-            }",
                "-            catch (RuntimeException BDNEExc)",
                "-            {",
                "-                BDNEExc.printStackTrace();",
                "-            }",
                "+            a[i] = new GF2Polynomial(matrix[i]);",
                "+            inv[i] = new GF2Polynomial(mDegree);",
                "+            inv[i].setBit(mDegree - 1 - i);",
                "         }",
                "diff --git a/docs/releasenotes.html b/docs/releasenotes.html",
                "index 823b2f807..004bd8c22 100644",
                "--- a/docs/releasenotes.html",
                "+++ b/docs/releasenotes.html",
                "@@ -30,2 +30,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2018",
                " <li>Base64/UrlBase64 would throw an exception on a zero length string. This has been fixed.</li>",
                "+<li>XMSS applies further validation to deserialisation of the BDS tree so that failure occurs as soon as tampering is detected.</li>",
                " </ul>",
                "diff --git a/prov/src/main/java/org/bouncycastle/pqc/jcajce/provider/xmss/BCXMSSMTPrivateKey.java b/prov/src/main/java/org/bouncycastle/pqc/jcajce/provider/xmss/BCXMSSMTPrivateKey.java",
                "index be83bc4b0..49e4dcf09 100644",
                "--- a/prov/src/main/java/org/bouncycastle/pqc/jcajce/provider/xmss/BCXMSSMTPrivateKey.java",
                "+++ b/prov/src/main/java/org/bouncycastle/pqc/jcajce/provider/xmss/BCXMSSMTPrivateKey.java",
                "@@ -54,3 +54,3 @@ public class BCXMSSMTPrivateKey",
                "             {",
                "-                keyBuilder.withBDSState((BDSStateMap)XMSSUtil.deserialize(xmssMtPrivateKey.getBdsState()));",
                "+                keyBuilder.withBDSState((BDSStateMap)XMSSUtil.deserialize(xmssMtPrivateKey.getBdsState(), BDSStateMap.class));",
                "             }",
                "diff --git a/prov/src/main/java/org/bouncycastle/pqc/jcajce/provider/xmss/BCXMSSPrivateKey.java b/prov/src/main/java/org/bouncycastle/pqc/jcajce/provider/xmss/BCXMSSPrivateKey.java",
                "index 461c4cbbb..4f792f22c 100644",
                "--- a/prov/src/main/java/org/bouncycastle/pqc/jcajce/provider/xmss/BCXMSSPrivateKey.java",
                "+++ b/prov/src/main/java/org/bouncycastle/pqc/jcajce/provider/xmss/BCXMSSPrivateKey.java",
                "@@ -53,3 +53,3 @@ public class BCXMSSPrivateKey",
                "             {",
                "-                keyBuilder.withBDSState((BDS)XMSSUtil.deserialize(xmssPrivateKey.getBdsState()));",
                "+                keyBuilder.withBDSState((BDS)XMSSUtil.deserialize(xmssPrivateKey.getBdsState(), BDS.class));",
                "             }"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/pqc/crypto/gmss/GMSSKeyPairGenerator.java",
                "core/src/main/java/org/bouncycastle/pqc/crypto/rainbow/RainbowParameters.java",
                "core/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSMTPrivateKeyParameters.java",
                "core/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSPrivateKeyParameters.java",
                "core/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSUtil.java",
                "core/src/main/java/org/bouncycastle/pqc/math/linearalgebra/GF2nField.java",
                "docs/releasenotes.html",
                "prov/src/main/java/org/bouncycastle/pqc/jcajce/provider/xmss/BCXMSSMTPrivateKey.java",
                "prov/src/main/java/org/bouncycastle/pqc/jcajce/provider/xmss/BCXMSSPrivateKey.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "4092ede58da51af9a21e4825fbad0d9a3ef5a223"
                ],
                [
                    "no-tag",
                    "540a427e811247979b7be75c4c9cee94c78db69b"
                ]
            ],
            "tags": [
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: check, cause",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, release, bouncy, note",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9303ffecb81e3eba4bd23b12791dac38c0015294",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1511932133,
            "hunks": 14,
            "message": "BCJSSE: add system property \"org.bouncycastle.jsse.ec.disableChar2\" - boolean property, defaults to 'false' - if 'true', disables use of characteristic-2 curves",
            "diff": [
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/SupportedGroups.java b/tls/src/main/java/org/bouncycastle/jsse/provider/SupportedGroups.java",
                "index e11e5db8c..e0c8faa2a 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/provider/SupportedGroups.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/SupportedGroups.java",
                "@@ -18,3 +18,8 @@ abstract class SupportedGroups",
                "-    private static final int[] provJdkTlsNamedGroups = getJdkTlsNamedGroups();",
                "+    private static final boolean provDisableChar2 = PropertyUtils.getBooleanSystemProperty(\"org.bouncycastle.jsse.ec.disableChar2\", false);",
                "+    private static final int[] provJdkTlsNamedGroups = getJdkTlsNamedGroups(provDisableChar2);",
                "+",
                "+    /*",
                "+     * IMPORTANT: This list is currently assumed by the code to not contain any char-2 curves.",
                "+     */",
                "     private static final int[] defaultClientNamedGroups = new int[]{",
                "@@ -33,3 +38,3 @@ abstract class SupportedGroups",
                "             :  minimumCurveBits <= 521 ? NamedGroup.secp521r1",
                "-            :  minimumCurveBits <= 571 ? NamedGroup.sect571r1",
                "+            :  (!provDisableChar2 && minimumCurveBits <= 571) ? NamedGroup.sect571r1",
                "             :  -1;",
                "@@ -54,5 +59,5 @@ abstract class SupportedGroups",
                "-    private static int[] getJdkTlsNamedGroups()",
                "+    private static int[] getJdkTlsNamedGroups(boolean provDisableChar2)",
                "     {",
                "-        String prop = PropertyUtils.getStringSystemProperty(PROPERTY_NAME);",
                "+        String prop = PropertyUtils.getStringSystemProperty(\"jdk.tls.namedGroups\");",
                "         if (prop == null)",
                "@@ -76,2 +81,6 @@ abstract class SupportedGroups",
                "             }",
                "+            else if (provDisableChar2 && NamedGroup.isChar2Curve(namedGroup))",
                "+            {",
                "+                LOG.warning(\"'\" + PROPERTY_NAME + \"' contains disabled characteristic-2 curve: \" + name);",
                "+            }",
                "             else",
                "@@ -87,3 +96,3 @@ abstract class SupportedGroups",
                "         {",
                "-            LOG.severe(\"'\" + PROPERTY_NAME + \"' contains no recognised NamedGroup values\");",
                "+            LOG.severe(\"'\" + PROPERTY_NAME + \"' contained no usable NamedGroup values\");",
                "         }",
                "@@ -114,3 +123,4 @@ abstract class SupportedGroups",
                "         /*",
                "-         * If supported groups wasn't explicitly configured, servers support all available curves.",
                "+         * If supported groups wasn't explicitly configured, servers support all available curves",
                "+         * (modulo 'provDisableF2m').",
                "          */",
                "@@ -176,3 +186,4 @@ abstract class SupportedGroups",
                "         /*",
                "-         * If supported groups wasn't explicitly configured, servers support all available curves.",
                "+         * If supported groups wasn't explicitly configured, servers support all available curves",
                "+         * (modulo 'provDisableF2m').",
                "          */",
                "@@ -189,5 +200,5 @@ abstract class SupportedGroups",
                "                  */",
                "-                return isFips",
                "-                    ?  FipsUtils.getFipsMaximumCurveBits()",
                "-                    :  NamedGroup.getMaximumCurveBits();",
                "+                return isFips           ?   FipsUtils.getFipsMaximumCurveBits()",
                "+                    :  provDisableChar2 ?   NamedGroup.getMaximumPrimeCurveBits()",
                "+                    :                       NamedGroup.getMaximumCurveBits();",
                "             }",
                "@@ -213,2 +224,7 @@ abstract class SupportedGroups",
                "+                if (provDisableChar2 && NamedGroup.isChar2Curve(namedGroup))",
                "+                {",
                "+                    continue;",
                "+                }",
                "+",
                "                 if (serverSupportedGroups == null || Arrays.contains(serverSupportedGroups, namedGroup))",
                "@@ -275,3 +291,4 @@ abstract class SupportedGroups",
                "         /*",
                "-         * If supported groups wasn't explicitly configured, servers support all available curves.",
                "+         * If supported groups wasn't explicitly configured, servers support all available curves",
                "+         * (modulo 'provDisableF2m').",
                "          */",
                "@@ -283,2 +300,7 @@ abstract class SupportedGroups",
                "+            if (provDisableChar2 && NamedGroup.isChar2Curve(namedGroup))",
                "+            {",
                "+                continue;",
                "+            }",
                "+",
                "             if (serverSupportedGroups == null || Arrays.contains(serverSupportedGroups, namedGroup))",
                "diff --git a/tls/src/main/java/org/bouncycastle/tls/NamedGroup.java b/tls/src/main/java/org/bouncycastle/tls/NamedGroup.java",
                "index 69758b163..b512c7a66 100644",
                "--- a/tls/src/main/java/org/bouncycastle/tls/NamedGroup.java",
                "+++ b/tls/src/main/java/org/bouncycastle/tls/NamedGroup.java",
                "@@ -185,2 +185,7 @@ public class NamedGroup",
                "+    public static int getMaximumChar2CurveBits()",
                "+    {",
                "+        return 571;",
                "+    }",
                "+",
                "     public static int getMaximumCurveBits()",
                "@@ -195,2 +200,7 @@ public class NamedGroup",
                "+    public static int getMaximumPrimeCurveBits()",
                "+    {",
                "+        return 521;",
                "+    }",
                "+",
                "     public static String getName(int namedGroup)"
            ],
            "changed_files": [
                "tls/src/main/java/org/bouncycastle/jsse/provider/SupportedGroups.java",
                "tls/src/main/java/org/bouncycastle/tls/NamedGroup.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "8ed589d753a41c6d4da918321657a1b40e0ec5fd"
                ],
                [
                    "no-tag",
                    "3c10374f051276a69d344a3dd4f56e05719fd52e"
                ]
            ],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: castle, bouncy, default",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a906b6dc0556e4ab6042a223f8036a283dbb0ae2",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1513828071,
            "hunks": 1,
            "message": "Remove ineffective/unnecessary bitmask - https://github.com/bcgit/bc-java/issues/272",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/digests/SHA1Digest.java b/core/src/main/java/org/bouncycastle/crypto/digests/SHA1Digest.java",
                "index b81e7c0a7..4290d200f 100644",
                "--- a/core/src/main/java/org/bouncycastle/crypto/digests/SHA1Digest.java",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/digests/SHA1Digest.java",
                "@@ -112,3 +112,3 @@ public class SHA1Digest",
                "         X[14] = (int)(bitLength >>> 32);",
                "-        X[15] = (int)(bitLength & 0xffffffff);",
                "+        X[15] = (int)bitLength;",
                "     }"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/crypto/digests/SHA1Digest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "44c1a82bf09a0529a396886067c68d03a96885e3"
                ],
                [
                    "no-tag",
                    "2025508e00e26ad67bd0b1b04b9bfa8fdc7550b3"
                ]
            ],
            "tags": [
                "r1rv59",
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: issue",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b14b3f9993481b951ecbeb776fb6ecdf14ba0be9",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1516535307,
            "hunks": 6,
            "message": "Relax private key checks for compatibility with JcaTlsCrypto",
            "diff": [
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/JsseUtils.java b/tls/src/main/java/org/bouncycastle/jsse/provider/JsseUtils.java",
                "index 806d50bb5..8b807a3cc 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/provider/JsseUtils.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/JsseUtils.java",
                "@@ -246,2 +246,8 @@ abstract class JsseUtils",
                "     {",
                "+        if (privateKey == null)",
                "+        {",
                "+            return false;",
                "+        }",
                "+",
                "+        String algorithm = privateKey.getAlgorithm();",
                "         switch (keyExchangeAlgorithm)",
                "@@ -252,3 +258,3 @@ abstract class JsseUtils",
                "         case KeyExchangeAlgorithm.DH_RSA_EXPORT:",
                "-            return privateKey instanceof DHPrivateKey;",
                "+            return privateKey instanceof DHPrivateKey || \"DH\".equals(algorithm);",
                "@@ -256,4 +262,6 @@ abstract class JsseUtils",
                "         case KeyExchangeAlgorithm.ECDH_RSA:",
                "+            return privateKey instanceof ECPrivateKey || \"ECDH\".equals(algorithm);",
                "+",
                "         case KeyExchangeAlgorithm.ECDHE_ECDSA:",
                "-            return privateKey instanceof ECPrivateKey;",
                "+            return privateKey instanceof ECPrivateKey || \"EC\".equals(algorithm);",
                "@@ -262,3 +270,3 @@ abstract class JsseUtils",
                "         case KeyExchangeAlgorithm.SRP_DSS:",
                "-            return privateKey instanceof DSAPrivateKey;",
                "+            return privateKey instanceof DSAPrivateKey || \"DSA\".equals(algorithm);",
                "@@ -270,3 +278,3 @@ abstract class JsseUtils",
                "         case KeyExchangeAlgorithm.SRP_RSA:",
                "-            return privateKey instanceof RSAPrivateKey;",
                "+            return privateKey instanceof RSAPrivateKey || \"RSA\".equals(algorithm);"
            ],
            "changed_files": [
                "tls/src/main/java/org/bouncycastle/jsse/provider/JsseUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "324d6262442640ec0592ad8f51b48a25d4a01818"
                ],
                [
                    "no-tag",
                    "d4ca438e0fbc64d567d56e7732c7c8feb6782f93"
                ]
            ],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: check",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7e5ded96d1456e9be909e2c5dd0bb66aa6d71471",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1517724002,
            "hunks": 1,
            "message": "Update release notes for recent TLS/BCJSSE work",
            "diff": [
                "diff --git a/docs/releasenotes.html b/docs/releasenotes.html",
                "index eb47467a4..898fc10a1 100644",
                "--- a/docs/releasenotes.html",
                "+++ b/docs/releasenotes.html",
                "@@ -32,2 +32,9 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2018",
                " <ul>",
                "+<li>TLS: Extended CBC padding is now optional (and disabled by default).</li>",
                "+<li>TLS: Now supports channel binding 'tls-server-end-point'.</li>",
                "+<li>TLS: InterruptedIOException (e.g. socket timeout) during app-data reads no longer fails connection; handshake is optionally resumable after IIOE using 'TlsProtocol.setResumableHandshake()'.</li>",
                "+<li>BCJSSE: Now supports system property 'jdk.tls.client.protocols'</li>",
                "+<li>BCJSSE: Now supports SSLParameters.setSNIMatchers.</li>",
                "+<li>BCJSSE: SNI can now be used in earlier JDKs via BC extensions.</li>",
                "+<li>BCJSSE: Session context now holds sessions via soft references.</li>",
                " </ul>"
            ],
            "changed_files": [
                "docs/releasenotes.html"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "dcce1be5b36f94f3564cb8782bbb3254b7ce7984"
                ],
                [
                    "no-tag",
                    "185dd29c8373ed4e30c511b5ae0cdedc2e2e3fff"
                ]
            ],
            "tags": [
                "r1v60"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: release, note",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: release, note",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fd80d43c23a6e3f51e936d8ec77fc69281dec191",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1520236366,
            "hunks": 7,
            "message": "added methods for extract Issuer Alternate and Subject Alternate Names.",
            "diff": [
                "diff --git a/pkix/src/main/java/org/bouncycastle/cert/jcajce/JcaX509ExtensionUtils.java b/pkix/src/main/java/org/bouncycastle/cert/jcajce/JcaX509ExtensionUtils.java",
                "index 0838f0895..63c5d57fb 100644",
                "--- a/pkix/src/main/java/org/bouncycastle/cert/jcajce/JcaX509ExtensionUtils.java",
                "+++ b/pkix/src/main/java/org/bouncycastle/cert/jcajce/JcaX509ExtensionUtils.java",
                "@@ -10,3 +10,9 @@ import java.security.PublicKey;",
                " import java.security.cert.CertificateEncodingException;",
                "+import java.security.cert.CertificateParsingException;",
                " import java.security.cert.X509Certificate;",
                "+import java.util.ArrayList;",
                "+import java.util.Collection;",
                "+import java.util.Collections;",
                "+import java.util.Enumeration;",
                "+import java.util.List;",
                "@@ -14,4 +20,8 @@ import javax.security.auth.x500.X500Principal;",
                "+import org.bouncycastle.asn1.ASN1ObjectIdentifier;",
                " import org.bouncycastle.asn1.ASN1OctetString;",
                " import org.bouncycastle.asn1.ASN1Primitive;",
                "+import org.bouncycastle.asn1.ASN1String;",
                "+import org.bouncycastle.asn1.DEROctetString;",
                "+import org.bouncycastle.asn1.DERSequence;",
                " import org.bouncycastle.asn1.oiw.OIWObjectIdentifiers;",
                "@@ -20,2 +30,3 @@ import org.bouncycastle.asn1.x509.AlgorithmIdentifier;",
                " import org.bouncycastle.asn1.x509.AuthorityKeyIdentifier;",
                "+import org.bouncycastle.asn1.x509.Extension;",
                " import org.bouncycastle.asn1.x509.GeneralName;",
                "@@ -26,2 +37,3 @@ import org.bouncycastle.cert.X509ExtensionUtils;",
                " import org.bouncycastle.operator.DigestCalculator;",
                "+import org.bouncycastle.util.Integers;",
                "@@ -114,2 +126,69 @@ public class JcaX509ExtensionUtils",
                "+    public static Collection getIssuerAlternativeNames(X509Certificate cert)",
                "+            throws CertificateParsingException",
                "+    {",
                "+        byte[] extVal = cert.getExtensionValue(Extension.issuerAlternativeName.getId());",
                "+",
                "+        return getAlternativeNames(extVal);",
                "+    }",
                "+",
                "+    public static Collection getSubjectAlternativeNames(X509Certificate cert)",
                "+            throws CertificateParsingException",
                "+    {",
                "+        byte[] extVal = cert.getExtensionValue(Extension.subjectAlternativeName.getId());",
                "+",
                "+        return getAlternativeNames(extVal);",
                "+    }",
                "+",
                "+    private static Collection getAlternativeNames(byte[] extVal)",
                "+        throws CertificateParsingException",
                "+    {",
                "+        if (extVal == null)",
                "+        {",
                "+            return Collections.EMPTY_LIST;",
                "+        }",
                "+        try",
                "+        {",
                "+            Collection temp = new ArrayList();",
                "+            Enumeration it = DERSequence.getInstance(parseExtensionValue(extVal)).getObjects();",
                "+            while (it.hasMoreElements())",
                "+            {",
                "+                GeneralName genName = GeneralName.getInstance(it.nextElement());",
                "+                List list = new ArrayList();",
                "+                list.add(Integers.valueOf(genName.getTagNo()));",
                "+                switch (genName.getTagNo())",
                "+                {",
                "+                case GeneralName.ediPartyName:",
                "+                case GeneralName.x400Address:",
                "+                case GeneralName.otherName:",
                "+                    list.add(genName.getName().toASN1Primitive());",
                "+                    break;",
                "+                case GeneralName.directoryName:",
                "+                    list.add(X500Name.getInstance(genName.getName()).toString());",
                "+                    break;",
                "+                case GeneralName.dNSName:",
                "+                case GeneralName.rfc822Name:",
                "+                case GeneralName.uniformResourceIdentifier:",
                "+                    list.add(((ASN1String)genName.getName()).getString());",
                "+                    break;",
                "+                case GeneralName.registeredID:",
                "+                    list.add(ASN1ObjectIdentifier.getInstance(genName.getName()).getId());",
                "+                    break;",
                "+                case GeneralName.iPAddress:",
                "+                    list.add(DEROctetString.getInstance(genName.getName()).getOctets());",
                "+                    break;",
                "+                default:",
                "+                    throw new IOException(\"Bad tag number: \" + genName.getTagNo());",
                "+                }",
                "+",
                "+                temp.add(list);",
                "+            }",
                "+            return Collections.unmodifiableCollection(temp);",
                "+        }",
                "+        catch (Exception e)",
                "+        {",
                "+            throw new CertificateParsingException(e.getMessage());",
                "+        }",
                "+    }",
                "+",
                "     private static class SHA1DigestCalculator"
            ],
            "changed_files": [
                "pkix/src/main/java/org/bouncycastle/cert/jcajce/JcaX509ExtensionUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "57d48151d50aad462ea3e89974329507325df52e"
                ],
                [
                    "no-tag",
                    "22906c6c75685ed2ccffeae3fec114409ceba66f"
                ]
            ],
            "tags": [
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: issue",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f3d79e4ce611a37d670c159198329ccd24fc953f",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1514901161,
            "hunks": 11,
            "message": "TLS: Disable extended CBC padding by default - added TlsPeer.shouldUseExtendedPadding method to control",
            "diff": [
                "diff --git a/tls/src/main/java/org/bouncycastle/tls/AbstractTlsPeer.java b/tls/src/main/java/org/bouncycastle/tls/AbstractTlsPeer.java",
                "index 9a7b891e3..b4512d7d3 100644",
                "--- a/tls/src/main/java/org/bouncycastle/tls/AbstractTlsPeer.java",
                "+++ b/tls/src/main/java/org/bouncycastle/tls/AbstractTlsPeer.java",
                "@@ -24,2 +24,7 @@ public abstract class AbstractTlsPeer",
                "+    public boolean shouldUseExtendedPadding()",
                "+    {",
                "+        return false;",
                "+    }",
                "+",
                "     public boolean shouldUseGMTUnixTime()",
                "diff --git a/tls/src/main/java/org/bouncycastle/tls/DTLSClientProtocol.java b/tls/src/main/java/org/bouncycastle/tls/DTLSClientProtocol.java",
                "index 6102a5ec1..c73685343 100644",
                "--- a/tls/src/main/java/org/bouncycastle/tls/DTLSClientProtocol.java",
                "+++ b/tls/src/main/java/org/bouncycastle/tls/DTLSClientProtocol.java",
                "@@ -40,2 +40,3 @@ public class DTLSClientProtocol",
                "         securityParameters.clientRandom = TlsProtocol.createRandomBlock(client.shouldUseGMTUnixTime(), state.clientContext);",
                "+        securityParameters.extendedPadding = client.shouldUseExtendedPadding();",
                "diff --git a/tls/src/main/java/org/bouncycastle/tls/DTLSServerProtocol.java b/tls/src/main/java/org/bouncycastle/tls/DTLSServerProtocol.java",
                "index 898acf67c..39dba35d8 100644",
                "--- a/tls/src/main/java/org/bouncycastle/tls/DTLSServerProtocol.java",
                "+++ b/tls/src/main/java/org/bouncycastle/tls/DTLSServerProtocol.java",
                "@@ -50,2 +50,3 @@ public class DTLSServerProtocol",
                "         securityParameters.serverRandom = TlsProtocol.createRandomBlock(server.shouldUseGMTUnixTime(), state.serverContext);",
                "+        securityParameters.extendedPadding = server.shouldUseExtendedPadding();",
                "diff --git a/tls/src/main/java/org/bouncycastle/tls/SecurityParameters.java b/tls/src/main/java/org/bouncycastle/tls/SecurityParameters.java",
                "index e5e524419..3e7f0204c 100644",
                "--- a/tls/src/main/java/org/bouncycastle/tls/SecurityParameters.java",
                "+++ b/tls/src/main/java/org/bouncycastle/tls/SecurityParameters.java",
                "@@ -21,2 +21,3 @@ public class SecurityParameters",
                "     boolean extendedMasterSecret = false;",
                "+    boolean extendedPadding = false;",
                "     boolean truncatedHMac = false;",
                "@@ -130,2 +131,7 @@ public class SecurityParameters",
                "+    public boolean isExtendedPadding()",
                "+    {",
                "+        return extendedPadding;",
                "+    }",
                "+",
                "     public boolean isTruncatedHMac()",
                "diff --git a/tls/src/main/java/org/bouncycastle/tls/TlsClientProtocol.java b/tls/src/main/java/org/bouncycastle/tls/TlsClientProtocol.java",
                "index 8fcd7e603..7844091d4 100644",
                "--- a/tls/src/main/java/org/bouncycastle/tls/TlsClientProtocol.java",
                "+++ b/tls/src/main/java/org/bouncycastle/tls/TlsClientProtocol.java",
                "@@ -81,2 +81,3 @@ public class TlsClientProtocol",
                "         this.securityParameters.clientRandom = createRandomBlock(tlsClient.shouldUseGMTUnixTime(), tlsClientContext);",
                "+        this.securityParameters.extendedPadding = tlsClient.shouldUseExtendedPadding();",
                "diff --git a/tls/src/main/java/org/bouncycastle/tls/TlsPeer.java b/tls/src/main/java/org/bouncycastle/tls/TlsPeer.java",
                "index 6bb36167f..e17a2344c 100644",
                "--- a/tls/src/main/java/org/bouncycastle/tls/TlsPeer.java",
                "+++ b/tls/src/main/java/org/bouncycastle/tls/TlsPeer.java",
                "@@ -14,2 +14,14 @@ public interface TlsPeer",
                "+    /**",
                "+     * See RFC 5246 6.2.3.2. Controls whether block cipher encryption may randomly add extra padding",
                "+     * beyond the minimum. Note that in configurations where this is known to be potential security",
                "+     * risk this setting will be ignored (and extended padding disabled). Extra padding is always",
                "+     * supported when decrypting received records.",
                "+     * ",
                "+     * @return <code>true</code> if random extra padding should be added during block cipher",
                "+     *         encryption, or <code>false</code> to always use the minimum amount of required",
                "+     *         padding.",
                "+     */",
                "+    boolean shouldUseExtendedPadding();",
                "+",
                "     /**",
                "diff --git a/tls/src/main/java/org/bouncycastle/tls/TlsServerProtocol.java b/tls/src/main/java/org/bouncycastle/tls/TlsServerProtocol.java",
                "index ab62bcb03..8d10b0422 100644",
                "--- a/tls/src/main/java/org/bouncycastle/tls/TlsServerProtocol.java",
                "+++ b/tls/src/main/java/org/bouncycastle/tls/TlsServerProtocol.java",
                "@@ -77,2 +77,3 @@ public class TlsServerProtocol",
                "         this.securityParameters.serverRandom = createRandomBlock(tlsServer.shouldUseGMTUnixTime(), tlsServerContext);",
                "+        this.securityParameters.extendedPadding = tlsServer.shouldUseExtendedPadding();",
                "diff --git a/tls/src/main/java/org/bouncycastle/tls/crypto/impl/TlsBlockCipher.java b/tls/src/main/java/org/bouncycastle/tls/crypto/impl/TlsBlockCipher.java",
                "index 9c9dbb6c1..f6257ac7d 100644",
                "--- a/tls/src/main/java/org/bouncycastle/tls/crypto/impl/TlsBlockCipher.java",
                "+++ b/tls/src/main/java/org/bouncycastle/tls/crypto/impl/TlsBlockCipher.java",
                "@@ -6,2 +6,3 @@ import java.security.SecureRandom;",
                " import org.bouncycastle.tls.AlertDescription;",
                "+import org.bouncycastle.tls.SecurityParameters;",
                " import org.bouncycastle.tls.TlsFatalAlert;",
                "@@ -39,2 +40,4 @@ public class TlsBlockCipher",
                "+        SecurityParameters securityParameters = cryptoParams.getSecurityParameters();",
                "+",
                "         /*",
                "@@ -47,4 +50,5 @@ public class TlsBlockCipher",
                "          */",
                "-        this.useExtraPadding = !cryptoParams.getServerVersion().isDTLS()",
                "-            && (encryptThenMAC || !cryptoParams.getSecurityParameters().isTruncatedHMac());",
                "+        this.useExtraPadding = securityParameters.isExtendedPadding()",
                "+            && !cryptoParams.getServerVersion().isDTLS()",
                "+            && (encryptThenMAC || !securityParameters.isTruncatedHMac());"
            ],
            "changed_files": [
                "tls/src/main/java/org/bouncycastle/tls/AbstractTlsPeer.java",
                "tls/src/main/java/org/bouncycastle/tls/DTLSClientProtocol.java",
                "tls/src/main/java/org/bouncycastle/tls/DTLSServerProtocol.java",
                "tls/src/main/java/org/bouncycastle/tls/SecurityParameters.java",
                "tls/src/main/java/org/bouncycastle/tls/TlsClientProtocol.java",
                "tls/src/main/java/org/bouncycastle/tls/TlsPeer.java",
                "tls/src/main/java/org/bouncycastle/tls/TlsServerProtocol.java",
                "tls/src/main/java/org/bouncycastle/tls/crypto/impl/TlsBlockCipher.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "bbc1dab0de9ddcb2b55357b236ccef7710b42708"
                ],
                [
                    "no-tag",
                    "1d83268df0969e4721a2a35f15ac277fa2f91ffc"
                ]
            ],
            "tags": [
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: default",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, security, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "55acd84b3e0bd2f4244ceadb1871a9065b236d3a",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1518565733,
            "hunks": 1,
            "message": "Fix exception that is created and never thrown",
            "diff": [
                "diff --git a/prov/src/main/java/org/bouncycastle/jce/provider/BrokenKDF2BytesGenerator.java b/prov/src/main/java/org/bouncycastle/jce/provider/BrokenKDF2BytesGenerator.java",
                "index f4643c09d..0f328f607 100644",
                "--- a/prov/src/main/java/org/bouncycastle/jce/provider/BrokenKDF2BytesGenerator.java",
                "+++ b/prov/src/main/java/org/bouncycastle/jce/provider/BrokenKDF2BytesGenerator.java",
                "@@ -90,3 +90,3 @@ public class BrokenKDF2BytesGenerator",
                "         {",
                "-            new IllegalArgumentException(\"Output length to large\");",
                "+            throw new IllegalArgumentException(\"Output length too large\");",
                "         }"
            ],
            "changed_files": [
                "prov/src/main/java/org/bouncycastle/jce/provider/BrokenKDF2BytesGenerator.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "654e8fcf5073bd0b243ba04443903c452ac552d4"
                ],
                [
                    "no-tag",
                    "cf973009fa6bdd7518fdb3c7c09c914ffeff671a"
                ]
            ],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: create",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4990fcdea1027f93694cd6144bb984986e9d2555",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1513320262,
            "hunks": 3,
            "message": "BCJSSE-related release note updates",
            "diff": [
                "diff --git a/docs/releasenotes.html b/docs/releasenotes.html",
                "index 5df2fb92e..22640f61d 100644",
                "--- a/docs/releasenotes.html",
                "+++ b/docs/releasenotes.html",
                "@@ -29,2 +29,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;",
                " <ul>",
                "+<li>Fixed CVE-2017-13098 (\"ROBOT\"), a Bleichenbacher oracle in TLS when RSA key exchange is negotiated. This potentially affected BCJSSE servers and any other TLS servers configured to use JCE for the underlying crypto.</li>",
                " <li>Issues with using PQC based keys with the provided BC KeyStores have now been fixed.</li>",
                "@@ -35,3 +36,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;",
                " <li>The ISO Trailer for SHA512/256 used in X9.31 and ISO9796-2 signatures was incorrect. This has beem fixed.</li>",
                "-<li>The BCJSSE SSLEngine implementation now correctly unwraps only whole records.</li>",
                "+<li>The BCJSSE SSLEngine implementation now correctly wraps/unwraps application data only in whole records.</li>",
                " <li>The curve parameters for tc26_gost_3410_12_256_paramSetA were incorrect. These have been fixed.</li>",
                "@@ -45,2 +46,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;",
                " <li>The BCJSSE provider now supports the jdk.tls.namedGroups system property.</li>",
                "+<li>The BCJSSE provider now supports the org.bouncycastle.jsse.ec.disableChar2 system property, which optionally disables the use of characteristic-2 elliptic curves.</li>",
                " <li>EC key generation and signing now use cache-timing resistant table lookups.</li>"
            ],
            "changed_files": [
                "docs/releasenotes.html"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "36d11734e4c63f8dd36827d652c966ab92f0a96c"
                ],
                [
                    "no-tag",
                    "defcba998b4a1c01234430e5490ab3f89c75b520"
                ]
            ],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: release, note",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: release, note",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "acc19358c37393cab9a87983048507fe6ed0dcf4",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1518166277,
            "hunks": 1,
            "message": "making unwrapSessionKey() protected instead of private extending JceKeyAgreeEnvelopedRecipient (which extends JceKeyAgreeRecipient) and overriding extractSecretKey(), which already was protected to use some hardware-based key, I would like to reuse JceKeyAgreeRecipient's implementation of unwrapSessionKey(), but I can not, because it is private. Changing this to protected allow effective reusing of that implementation, instead of having to copy the functionality and even re-implementing it more complicated, as it uses other package-private methods, my code does not have access to.",
            "diff": [
                "diff --git a/pkix/src/main/java/org/bouncycastle/cms/jcajce/JceKeyAgreeRecipient.java b/pkix/src/main/java/org/bouncycastle/cms/jcajce/JceKeyAgreeRecipient.java",
                "index f46f05d8d..6167019eb 100644",
                "--- a/pkix/src/main/java/org/bouncycastle/cms/jcajce/JceKeyAgreeRecipient.java",
                "+++ b/pkix/src/main/java/org/bouncycastle/cms/jcajce/JceKeyAgreeRecipient.java",
                "@@ -199,3 +199,3 @@ public abstract class JceKeyAgreeRecipient",
                "-    private Key unwrapSessionKey(ASN1ObjectIdentifier wrapAlg, SecretKey agreedKey, ASN1ObjectIdentifier contentEncryptionAlgorithm, byte[] encryptedContentEncryptionKey)",
                "+    protected Key unwrapSessionKey(ASN1ObjectIdentifier wrapAlg, SecretKey agreedKey, ASN1ObjectIdentifier contentEncryptionAlgorithm, byte[] encryptedContentEncryptionKey)",
                "         throws CMSException, InvalidKeyException, NoSuchAlgorithmException"
            ],
            "changed_files": [
                "pkix/src/main/java/org/bouncycastle/cms/jcajce/JceKeyAgreeRecipient.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "fd612a0a1a1ea018e0ff207df4c8b93fe3a36eef"
                ]
            ],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: allow, cause",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "aee560febbf722a16d6635e5ea0cd6ca03b1a1e6",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1513992220,
            "hunks": 19,
            "message": "github #264: added failure details for evaluate on CertPath.",
            "diff": [
                "diff --git a/pkix/src/main/java/org/bouncycastle/cert/path/CertPath.java b/pkix/src/main/java/org/bouncycastle/cert/path/CertPath.java",
                "index f91b3a81d..1c1d93a78 100644",
                "--- a/pkix/src/main/java/org/bouncycastle/cert/path/CertPath.java",
                "+++ b/pkix/src/main/java/org/bouncycastle/cert/path/CertPath.java",
                "@@ -45,3 +45,3 @@ public class CertPath",
                "-        CertPathValidationResultBuilder builder = new CertPathValidationResultBuilder();",
                "+        CertPathValidationResultBuilder builder = new CertPathValidationResultBuilder(context);",
                "@@ -58,3 +58,3 @@ public class CertPath",
                "                 {",
                "-                   builder.addException(e);",
                "+                   builder.addException(j, i, e);",
                "                 }",
                "diff --git a/pkix/src/main/java/org/bouncycastle/cert/path/CertPathValidationResult.java b/pkix/src/main/java/org/bouncycastle/cert/path/CertPathValidationResult.java",
                "index facefb451..0a4e6184b 100644",
                "--- a/pkix/src/main/java/org/bouncycastle/cert/path/CertPathValidationResult.java",
                "+++ b/pkix/src/main/java/org/bouncycastle/cert/path/CertPathValidationResult.java",
                "@@ -5,2 +5,4 @@ import java.util.Set;",
                "+import org.bouncycastle.util.Arrays;",
                "+",
                " public class CertPathValidationResult",
                "@@ -10,4 +12,8 @@ public class CertPathValidationResult",
                "     private final Set unhandledCriticalExtensionOIDs;",
                "+    private final int certIndex;",
                "+    private final int ruleIndex;",
                "+    private CertPathValidationException[] causes;",
                "     private int[] certIndexes;",
                "+    private int[] ruleIndexes;",
                "@@ -17,2 +23,4 @@ public class CertPathValidationResult",
                "         this.isValid = this.unhandledCriticalExtensionOIDs.isEmpty();",
                "+        this.certIndex = -1;",
                "+        this.ruleIndex = -1;",
                "         cause = null;",
                "@@ -24,2 +32,4 @@ public class CertPathValidationResult",
                "         this.isValid = false;",
                "+        this.certIndex = certIndex;",
                "+        this.ruleIndex = ruleIndex;",
                "         this.cause = cause;",
                "@@ -27,9 +37,12 @@ public class CertPathValidationResult",
                "-    public CertPathValidationResult(CertPathValidationContext context, int[] certIndexes, int[] ruleIndexes, CertPathValidationException[] cause)",
                "+    public CertPathValidationResult(CertPathValidationContext context, int[] certIndexes, int[] ruleIndexes, CertPathValidationException[] causes)",
                "     {",
                "-        // TODO",
                "         this.unhandledCriticalExtensionOIDs = Collections.unmodifiableSet(context.getUnhandledCriticalExtensionOIDs());",
                "         this.isValid = false;",
                "-        this.cause = cause[0];",
                "+        this.cause = causes[0];",
                "+        this.certIndex = certIndexes[0];",
                "+        this.ruleIndex = ruleIndexes[0];",
                "+        this.causes = causes;",
                "         this.certIndexes = certIndexes;",
                "+        this.ruleIndexes = ruleIndexes;",
                "     }",
                "@@ -41,3 +54,3 @@ public class CertPathValidationResult",
                "-    public Exception getCause()",
                "+    public CertPathValidationException getCause()",
                "     {",
                "@@ -56,2 +69,12 @@ public class CertPathValidationResult",
                "+    public int getFailingCertIndex()",
                "+    {",
                "+        return certIndex;",
                "+    }",
                "+",
                "+    public int getFailingRuleIndex()",
                "+    {",
                "+        return ruleIndex;",
                "+    }",
                "+",
                "     public Set getUnhandledCriticalExtensionOIDs()",
                "@@ -65,2 +88,32 @@ public class CertPathValidationResult",
                "     }",
                "+",
                "+    public CertPathValidationException[] getCauses()",
                "+    {",
                "+        if (causes != null)",
                "+        {",
                "+            CertPathValidationException[] rv = new CertPathValidationException[causes.length];",
                "+",
                "+            System.arraycopy(causes, 0, rv, 0, causes.length);",
                "+",
                "+            return rv;",
                "+        }",
                "+",
                "+        if (!unhandledCriticalExtensionOIDs.isEmpty())",
                "+        {",
                "+            return new CertPathValidationException[]",
                "+                { new CertPathValidationException(\"Unhandled Critical Extensions\") };",
                "+        }",
                "+",
                "+        return null;",
                "+    }",
                "+",
                "+    public int[] getFailingCertIndexes()",
                "+    {",
                "+        return Arrays.clone(certIndexes);",
                "+    }",
                "+",
                "+    public int[] getFailingRuleIndexes()",
                "+    {",
                "+        return Arrays.clone(ruleIndexes);",
                "+    }",
                " }",
                "diff --git a/pkix/src/main/java/org/bouncycastle/cert/path/CertPathValidationResultBuilder.java b/pkix/src/main/java/org/bouncycastle/cert/path/CertPathValidationResultBuilder.java",
                "index 9e813396c..1ace0c042 100644",
                "--- a/pkix/src/main/java/org/bouncycastle/cert/path/CertPathValidationResultBuilder.java",
                "+++ b/pkix/src/main/java/org/bouncycastle/cert/path/CertPathValidationResultBuilder.java",
                "@@ -2,12 +2,47 @@ package org.bouncycastle.cert.path;",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+",
                " class CertPathValidationResultBuilder",
                " {",
                "+    private final CertPathValidationContext context;",
                "+    private final List<Integer> certIndexes = new ArrayList<Integer>();",
                "+    private final List<Integer> ruleIndexes = new ArrayList<Integer>();",
                "+    private final List<CertPathValidationException> exceptions = new ArrayList<CertPathValidationException>();",
                "+",
                "+    CertPathValidationResultBuilder(CertPathValidationContext context)",
                "+    {",
                "+        this.context = context;",
                "+    }",
                "+",
                "     public CertPathValidationResult build()",
                "     {",
                "-        return new CertPathValidationResult(null, 0, 0, null);",
                "+        if (exceptions.isEmpty())",
                "+        {",
                "+            return new CertPathValidationResult(context);",
                "+        }",
                "+        else",
                "+        {",
                "+            return new CertPathValidationResult(context,",
                "+                toInts(certIndexes), toInts(ruleIndexes), exceptions.toArray(new CertPathValidationException[exceptions.size()]));",
                "+        }",
                "     }",
                "-    public void addException(CertPathValidationException exception)",
                "+    public void addException(int certIndex, int ruleIndex, CertPathValidationException exception)",
                "     {",
                "-        //To change body of created methods use File | Settings | File Templates.",
                "+        this.certIndexes.add(certIndex);",
                "+        this.ruleIndexes.add(ruleIndex);",
                "+        this.exceptions.add(exception);",
                "+    }",
                "+",
                "+    private int[] toInts(List<Integer> values)",
                "+    {",
                "+        int[] rv = new int[values.size()];",
                "+",
                "+        for (int i = 0; i != rv.length; i++)",
                "+        {",
                "+            rv[i] = values.get(i).intValue();",
                "+        }",
                "+",
                "+        return rv;",
                "     }"
            ],
            "changed_files": [
                "pkix/src/main/java/org/bouncycastle/cert/path/CertPath.java",
                "pkix/src/main/java/org/bouncycastle/cert/path/CertPathValidationResult.java",
                "pkix/src/main/java/org/bouncycastle/cert/path/CertPathValidationResultBuilder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "264": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "febfa7d258a349a90cc364cb9981269fa3929d4d"
                ],
                [
                    "no-tag",
                    "15ef956d01eb6d5645e726d5cc715b781ca4de97"
                ]
            ],
            "tags": [
                "r1v60"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 264",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9f2d478e75a900fa58fd17d4a99237f151b6f6da",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1513985901,
            "hunks": 2,
            "message": "github #273: reset fix for SM2Signer",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/signers/SM2Signer.java b/core/src/main/java/org/bouncycastle/crypto/signers/SM2Signer.java",
                "index bcc15483c..bfb58619b 100644",
                "--- a/core/src/main/java/org/bouncycastle/crypto/signers/SM2Signer.java",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/signers/SM2Signer.java",
                "@@ -133,3 +133,2 @@ public class SM2Signer",
                "         byte[] eHash = digestDoFinal();",
                "-        reset();",
                "@@ -227,2 +226,5 @@ public class SM2Signer",
                "         digest.doFinal(result, 0);",
                "+",
                "+        reset();",
                "+        ",
                "         return result;"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/crypto/signers/SM2Signer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "273": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "9130fa588c2ac03c39b3abba6d348557fe3ad06d"
                ],
                [
                    "no-tag",
                    "2abfdbf94b427f7a3b96bed776c9d73855e80419"
                ]
            ],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 273",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "87f3aaa87fd6a62c9c555f327b46b50278e619ea",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1513988460,
            "hunks": 4,
            "message": "github #273: further reset fix for SM2Signer tweak to SCRYPT test",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/signers/SM2Signer.java b/core/src/main/java/org/bouncycastle/crypto/signers/SM2Signer.java",
                "index bfb58619b..53454d7ee 100644",
                "--- a/core/src/main/java/org/bouncycastle/crypto/signers/SM2Signer.java",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/signers/SM2Signer.java",
                "@@ -87,4 +87,4 @@ public class SM2Signer",
                "-        digest.reset();",
                "         z = getZ(userID);",
                "+        ",
                "         digest.update(z, 0, z.length);",
                "@@ -234,2 +234,4 @@ public class SM2Signer",
                "     {",
                "+        digest.reset();",
                "+",
                "         addUserID(digest, userID);",
                "@@ -243,3 +245,7 @@ public class SM2Signer",
                "-        return digestDoFinal();",
                "+        byte[] result = new byte[digest.getDigestSize()];",
                "+",
                "+        digest.doFinal(result, 0);",
                "+",
                "+        return result;",
                "     }"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/crypto/signers/SM2Signer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "273": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "7e274b59552c2af9da9ea7cde669a9dbc4a74a9f"
                ],
                [
                    "no-tag",
                    "ac6ef8fa6fa9ce2ff63831da9b049f5666257c6c"
                ]
            ],
            "tags": [
                "r1v60"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 273",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "55fbcadc2536ceb4e4f738a404ff33f2845a5df4",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1513750647,
            "hunks": 3,
            "message": "github #265, added X9ObjectIdentifiers.id_dsa_with_sha1 to key OID list.",
            "diff": [
                "diff --git a/prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/DSA.java b/prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/DSA.java",
                "index 2164cb6e3..08949facf 100644",
                "--- a/prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/DSA.java",
                "+++ b/prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/DSA.java",
                "@@ -72,4 +72,2 @@ public class DSA",
                "-            provider.addAlgorithm(\"Alg.Alias.Signature.1.2.840.10040.4.3\", \"DSA\");",
                "-",
                "             AsymmetricKeyInfoConverter keyFact = new KeyFactorySpi();",
                "diff --git a/prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/dsa/DSAUtil.java b/prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/dsa/DSAUtil.java",
                "index a9c546f65..f7ebf959e 100644",
                "--- a/prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/dsa/DSAUtil.java",
                "+++ b/prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/dsa/DSAUtil.java",
                "@@ -29,5 +29,12 @@ public class DSAUtil",
                "         X9ObjectIdentifiers.id_dsa,",
                "-        OIWObjectIdentifiers.dsaWithSHA1",
                "+        OIWObjectIdentifiers.dsaWithSHA1,",
                "+        X9ObjectIdentifiers.id_dsa_with_sha1",
                "     };",
                "+    /**",
                "+     * Return true if the passed in OID could be associated with a DSA key.",
                "+     *",
                "+     * @param algOid algorithm OID from a key.",
                "+     * @return true if it's for a DSA key, false otherwise.",
                "+     */",
                "     public static boolean isDsaOid("
            ],
            "changed_files": [
                "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/DSA.java",
                "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/dsa/DSAUtil.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "265": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "17fdaaa2701767db2451d408f64a8b68cf5dddad"
                ],
                [
                    "no-tag",
                    "a850382f07cfb7603f27fbec960f3d361666ec76"
                ]
            ],
            "tags": [
                "r1rv59",
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 265",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "87318e37e2612cc00ff5eb24cc130d0da253ffe8",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1513995588,
            "hunks": 6,
            "message": "minor cleanups BJA-691 escaping exceptions for PKCS#12 and BCFKS opening.",
            "diff": [
                "diff --git a/prov/src/main/java/org/bouncycastle/jcajce/provider/keystore/bc/BcKeyStoreSpi.java b/prov/src/main/java/org/bouncycastle/jcajce/provider/keystore/bc/BcKeyStoreSpi.java",
                "index 27468a7fe..b062d60ab 100644",
                "--- a/prov/src/main/java/org/bouncycastle/jcajce/provider/keystore/bc/BcKeyStoreSpi.java",
                "+++ b/prov/src/main/java/org/bouncycastle/jcajce/provider/keystore/bc/BcKeyStoreSpi.java",
                "@@ -731,3 +731,3 @@ public class BcKeyStoreSpi",
                "             default:",
                "-                    throw new RuntimeException(\"Unknown object type in store.\");",
                "+                    throw new IOException(\"Unknown object type in store.\");",
                "             }",
                "@@ -783,3 +783,3 @@ public class BcKeyStoreSpi",
                "             default:",
                "-                    throw new RuntimeException(\"Unknown object type in store.\");",
                "+                    throw new IOException(\"Unknown object type in store.\");",
                "             }",
                "diff --git a/prov/src/main/java/org/bouncycastle/jcajce/provider/keystore/bcfks/BcFKSKeyStoreSpi.java b/prov/src/main/java/org/bouncycastle/jcajce/provider/keystore/bcfks/BcFKSKeyStoreSpi.java",
                "index bf37003f9..eb028843e 100644",
                "--- a/prov/src/main/java/org/bouncycastle/jcajce/provider/keystore/bcfks/BcFKSKeyStoreSpi.java",
                "+++ b/prov/src/main/java/org/bouncycastle/jcajce/provider/keystore/bcfks/BcFKSKeyStoreSpi.java",
                "@@ -927,3 +927,12 @@ class BcFKSKeyStoreSpi",
                "-        ObjectStore store = ObjectStore.getInstance(aIn.readObject());",
                "+        ObjectStore store;",
                "+",
                "+        try",
                "+        {",
                "+            store = ObjectStore.getInstance(aIn.readObject());",
                "+        }",
                "+        catch (Exception e)",
                "+        {",
                "+            throw new IOException(e.getMessage(), e.getCause());",
                "+        }",
                "diff --git a/prov/src/main/java/org/bouncycastle/jcajce/provider/keystore/pkcs12/PKCS12KeyStoreSpi.java b/prov/src/main/java/org/bouncycastle/jcajce/provider/keystore/pkcs12/PKCS12KeyStoreSpi.java",
                "index 7872a052d..79b153d99 100644",
                "--- a/prov/src/main/java/org/bouncycastle/jcajce/provider/keystore/pkcs12/PKCS12KeyStoreSpi.java",
                "+++ b/prov/src/main/java/org/bouncycastle/jcajce/provider/keystore/pkcs12/PKCS12KeyStoreSpi.java",
                "@@ -639,3 +639,3 @@ public class PKCS12KeyStoreSpi",
                "                 Cipher cipher = createCipher(Cipher.UNWRAP_MODE, password, algId);",
                "-                   System.err.println(\"here\");",
                "+",
                "                 // we pass \"\" as the key algorithm type as it is unknown at this point",
                "@@ -719,3 +719,3 @@ public class PKCS12KeyStoreSpi",
                "                 Cipher cipher = createCipher(mode, password, algId);",
                "-                     System.err.println(\"and here\");",
                "+",
                "                 return cipher.doFinal(data);",
                "@@ -798,4 +798,13 @@ public class PKCS12KeyStoreSpi",
                "         ASN1InputStream bIn = new ASN1InputStream(bufIn);",
                "-        ASN1Sequence obj = (ASN1Sequence)bIn.readObject();",
                "-        Pfx bag = Pfx.getInstance(obj);",
                "+        ",
                "+        Pfx bag;",
                "+        try",
                "+        {",
                "+            bag = Pfx.getInstance(bIn.readObject());",
                "+        }",
                "+        catch (Exception e)",
                "+        {",
                "+            throw new IOException(e.getMessage(), e);",
                "+        }",
                "+",
                "         ContentInfo info = bag.getAuthSafe();"
            ],
            "changed_files": [
                "prov/src/main/java/org/bouncycastle/jcajce/provider/keystore/bc/BcKeyStoreSpi.java",
                "prov/src/main/java/org/bouncycastle/jcajce/provider/keystore/bcfks/BcFKSKeyStoreSpi.java",
                "prov/src/main/java/org/bouncycastle/jcajce/provider/keystore/pkcs12/PKCS12KeyStoreSpi.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "12": "CFRG support in JCE Provider etc? #193"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "daf1ff3add1e712eed1b0d24eb6ebc8b4ce050f5"
                ],
                [
                    "no-tag",
                    "6c1f35f67e4b1bf480a6b416d1a7b642c4792475"
                ]
            ],
            "tags": [
                "r1v60"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, keystore, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 12",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ff1f16eb59dbb6cef7c6b4ff0189d08559ed8dc1",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1513996229,
            "hunks": 3,
            "message": "BJA-691 escaping exceptions for PKCS#12 and BCFKS opening. update",
            "diff": [
                "diff --git a/CONTRIBUTORS.html b/CONTRIBUTORS.html",
                "index face618f3..c607942c7 100644",
                "--- a/CONTRIBUTORS.html",
                "+++ b/CONTRIBUTORS.html",
                "@@ -462,2 +462,4 @@ CertPath support for implicit DSA parameters and a range of NameConstraints. Add",
                " <li>Scott Woodward &lt;scott&#064bit3consulting.com&gt; performance fix for CTRSP800DRBG.</li>",
                "+<li>Lijun Liao &lt;https://github.com/xipki&gt; reset fix for SM2 signatures.</li>",
                "+<li>David Strawn &lt;https://github.com/isomarcte&gt; fix for off by one error in SCRYPT bounds checking</li>",
                " </ul>",
                "diff --git a/core/src/main/java/org/bouncycastle/asn1/bc/ObjectStore.java b/core/src/main/java/org/bouncycastle/asn1/bc/ObjectStore.java",
                "index ef2e773e0..0d84cb459 100644",
                "--- a/core/src/main/java/org/bouncycastle/asn1/bc/ObjectStore.java",
                "+++ b/core/src/main/java/org/bouncycastle/asn1/bc/ObjectStore.java",
                "@@ -41,2 +41,7 @@ public class ObjectStore",
                "     {",
                "+        if (seq.size() != 2)",
                "+        {",
                "+            throw new IllegalArgumentException(\"malformed sequence\");",
                "+        }",
                "+        ",
                "         ASN1Encodable sData = seq.getObjectAt(0);",
                "diff --git a/core/src/main/java/org/bouncycastle/asn1/pkcs/Pfx.java b/core/src/main/java/org/bouncycastle/asn1/pkcs/Pfx.java",
                "index 7885a7958..ce7e07589 100644",
                "--- a/core/src/main/java/org/bouncycastle/asn1/pkcs/Pfx.java",
                "+++ b/core/src/main/java/org/bouncycastle/asn1/pkcs/Pfx.java",
                "@@ -24,3 +24,3 @@ public class Pfx",
                "     {",
                "-        BigInteger  version = ((ASN1Integer)seq.getObjectAt(0)).getValue();",
                "+        BigInteger  version = ASN1Integer.getInstance(seq.getObjectAt(0)).getValue();",
                "         if (version.intValue() != 3)"
            ],
            "changed_files": [
                "CONTRIBUTORS.html",
                "core/src/main/java/org/bouncycastle/asn1/bc/ObjectStore.java",
                "core/src/main/java/org/bouncycastle/asn1/pkcs/Pfx.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "12": "CFRG support in JCE Provider etc? #193"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "b855a80971256cb15b94095af2c231cd220cb9f7"
                ],
                [
                    "no-tag",
                    "04a8d768fb6c0a8b63a271fec50b0faabe314976"
                ]
            ],
            "tags": [
                "r1v60"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 12",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "08df9b1ecba9018f64b7700bd7f5f71f6743f9e5",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1513989955,
            "hunks": 1,
            "message": "github #163: use recovered point definition for ECDH.",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/agreement/ECDHBasicAgreement.java b/core/src/main/java/org/bouncycastle/crypto/agreement/ECDHBasicAgreement.java",
                "index 8e2d1202e..66c206dd4 100644",
                "--- a/core/src/main/java/org/bouncycastle/crypto/agreement/ECDHBasicAgreement.java",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/agreement/ECDHBasicAgreement.java",
                "@@ -49,3 +49,10 @@ public class ECDHBasicAgreement",
                "-        ECPoint P = pub.getQ().multiply(key.getD()).normalize();",
                "+        // Always perform calculations on the exact curve specified by our private key's parameters",
                "+        ECPoint pubPoint = key.getParameters().getCurve().decodePoint(pub.getQ().getEncoded(false));",
                "+        if (pubPoint.isInfinity())",
                "+        {",
                "+            throw new IllegalStateException(\"Infinity is not a valid public key for ECDH\");",
                "+        }",
                "+",
                "+        ECPoint P = pubPoint.multiply(key.getD()).normalize();"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/crypto/agreement/ECDHBasicAgreement.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "163": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "e46b7b68304e35369a066616e0e21cc31a0162a4"
                ],
                [
                    "no-tag",
                    "d3c9edf9297f3047dcd79e9c7cf76dfd5821d0a1"
                ]
            ],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 163",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "90ddb27a20a42723efec411ef99db024fb848358",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1511311862,
            "hunks": 1,
            "message": "github #255 fixed exception string.",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/engines/GOST3412_2015Engine.java b/core/src/main/java/org/bouncycastle/crypto/engines/GOST3412_2015Engine.java",
                "index 7bdd4fc73..3df685b11 100644",
                "--- a/core/src/main/java/org/bouncycastle/crypto/engines/GOST3412_2015Engine.java",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/engines/GOST3412_2015Engine.java",
                "@@ -127,3 +127,3 @@ public class GOST3412_2015Engine",
                "         {",
                "-            throw new IllegalArgumentException(\"Key length invalid. Key needs to be 64 byte - 512 bit!!!\");",
                "+            throw new IllegalArgumentException(\"Key length invalid. Key needs to be 32 byte - 256 bit!!!\");",
                "         }"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/crypto/engines/GOST3412_2015Engine.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "255": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "7743c2497a94147b24493a612cf986bc50d5b6a3"
                ],
                [
                    "no-tag",
                    "f05f8b031550126cbfe1e10f9bc2b786f1be3ece"
                ]
            ],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 255",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "82f03e5f671bf8c215e868549279f04ed47ca0b6",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1511325861,
            "hunks": 7,
            "message": "github 258 - provider creation in PKCS#12 minor cleanup.",
            "diff": [
                "diff --git a/prov/src/main/java/org/bouncycastle/jcajce/provider/keystore/bc/BcKeyStoreSpi.java b/prov/src/main/java/org/bouncycastle/jcajce/provider/keystore/bc/BcKeyStoreSpi.java",
                "index d25427822..27468a7fe 100644",
                "--- a/prov/src/main/java/org/bouncycastle/jcajce/provider/keystore/bc/BcKeyStoreSpi.java",
                "+++ b/prov/src/main/java/org/bouncycastle/jcajce/provider/keystore/bc/BcKeyStoreSpi.java",
                "@@ -15,6 +15,4 @@ import java.security.NoSuchProviderException;",
                " import java.security.PrivateKey;",
                "-import java.security.Provider;",
                " import java.security.PublicKey;",
                " import java.security.SecureRandom;",
                "-import java.security.Security;",
                " import java.security.UnrecoverableKeyException;",
                "@@ -1050,14 +1048,2 @@ public class BcKeyStoreSpi",
                "-    static Provider getBouncyCastleProvider()",
                "-    {",
                "-        if (Security.getProvider(\"BC\") != null)",
                "-        {",
                "-            return Security.getProvider(\"BC\");",
                "-        }",
                "-        else",
                "-        {",
                "-            return new BouncyCastleProvider();",
                "-        }",
                "-    }",
                "-",
                "     public static class Std",
                "diff --git a/prov/src/main/java/org/bouncycastle/jcajce/provider/keystore/pkcs12/PKCS12KeyStoreSpi.java b/prov/src/main/java/org/bouncycastle/jcajce/provider/keystore/pkcs12/PKCS12KeyStoreSpi.java",
                "index 0332dcf77..7872a052d 100644",
                "--- a/prov/src/main/java/org/bouncycastle/jcajce/provider/keystore/pkcs12/PKCS12KeyStoreSpi.java",
                "+++ b/prov/src/main/java/org/bouncycastle/jcajce/provider/keystore/pkcs12/PKCS12KeyStoreSpi.java",
                "@@ -5,3 +5,2 @@ import java.io.ByteArrayInputStream;",
                " import java.io.ByteArrayOutputStream;",
                "-import java.io.FileInputStream;",
                " import java.io.IOException;",
                "@@ -1738,3 +1737,3 @@ public class PKCS12KeyStoreSpi",
                "         {",
                "-            super(new BouncyCastleProvider(), pbeWithSHAAnd3_KeyTripleDES_CBC, pbeWithSHAAnd40BitRC2_CBC);",
                "+            super(PKCS12KeyStoreSpi.getBouncyCastleProvider(), pbeWithSHAAnd3_KeyTripleDES_CBC, pbeWithSHAAnd40BitRC2_CBC);",
                "         }",
                "@@ -1747,3 +1746,3 @@ public class PKCS12KeyStoreSpi",
                "         {",
                "-            super(new BouncyCastleProvider(), pbeWithSHAAnd3_KeyTripleDES_CBC, pbeWithSHAAnd3_KeyTripleDES_CBC);",
                "+            super(PKCS12KeyStoreSpi.getBouncyCastleProvider(), pbeWithSHAAnd3_KeyTripleDES_CBC, pbeWithSHAAnd3_KeyTripleDES_CBC);",
                "         }",
                "@@ -1859,10 +1858,16 @@ public class PKCS12KeyStoreSpi",
                "-    public static void main(String[] args)",
                "-        throws Exception",
                "-    {",
                "-        Security.addProvider(new BouncyCastleProvider());",
                "+    private static Provider provider = null;",
                "-        KeyStore kS = KeyStore.getInstance(\"PKCS12\", \"BC\");",
                "+    private static synchronized Provider getBouncyCastleProvider()",
                "+    {",
                "+        if (Security.getProvider(\"BC\") != null)",
                "+        {",
                "+            return Security.getProvider(\"BC\");",
                "+        }",
                "+        else if (provider == null)",
                "+        {",
                "+            provider = new BouncyCastleProvider();",
                "+        }",
                "-        kS.load(new FileInputStream(\"/tmp/id.p12\"), \"fred\".toCharArray());",
                "+        return provider;",
                "     }"
            ],
            "changed_files": [
                "prov/src/main/java/org/bouncycastle/jcajce/provider/keystore/bc/BcKeyStoreSpi.java",
                "prov/src/main/java/org/bouncycastle/jcajce/provider/keystore/pkcs12/PKCS12KeyStoreSpi.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "12": "CFRG support in JCE Provider etc? #193"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "0988f155eb02728250b3a11c5c20641586a082a7"
                ],
                [
                    "no-tag",
                    "0241c0a59985f0f4101162d668c168af0914d57d"
                ]
            ],
            "tags": [
                "r1rv59",
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, keystore, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 12",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ed8b24bd1a2e4d0d6287060ccc7bd48dd6a8f508",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1513985121,
            "hunks": 1,
            "message": "added other info generator for NewHope to use with SP 800-56A",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/pqc/crypto/newhope/NHOtherInfoGenerator.java b/core/src/main/java/org/bouncycastle/pqc/crypto/newhope/NHOtherInfoGenerator.java",
                "new file mode 100644",
                "index 000000000..ad44e70f7",
                "--- /dev/null",
                "+++ b/core/src/main/java/org/bouncycastle/pqc/crypto/newhope/NHOtherInfoGenerator.java",
                "@@ -0,0 +1,148 @@",
                "+package org.bouncycastle.pqc.crypto.newhope;",
                "+",
                "+import java.io.IOException;",
                "+import java.security.SecureRandom;",
                "+",
                "+import org.bouncycastle.asn1.x509.AlgorithmIdentifier;",
                "+import org.bouncycastle.asn1.x509.SubjectPublicKeyInfo;",
                "+import org.bouncycastle.crypto.AsymmetricCipherKeyPair;",
                "+import org.bouncycastle.crypto.KeyGenerationParameters;",
                "+import org.bouncycastle.crypto.util.DEROtherInfo;",
                "+import org.bouncycastle.pqc.asn1.PQCObjectIdentifiers;",
                "+import org.bouncycastle.pqc.crypto.ExchangePair;",
                "+",
                "+/**",
                "+ * OtherInfo Generator for which can be used for populating the SuppPrivInfo field used to provide shared",
                "+ * secret data used with NIST SP 800-56A agreement algorithms.",
                "+ */",
                "+public class NHOtherInfoGenerator",
                "+{",
                "+    protected final DEROtherInfo.Builder otherInfoBuilder;",
                "+    protected final SecureRandom random;",
                "+",
                "+    /**",
                "+     * Create a basic builder with just the compulsory fields.",
                "+     *",
                "+     * @param algorithmID the algorithm associated with this invocation of the KDF.",
                "+     * @param partyUInfo  sender party info.",
                "+     * @param partyVInfo  receiver party info.",
                "+     * @param random a source of randomness.",
                "+     */",
                "+    public NHOtherInfoGenerator(AlgorithmIdentifier algorithmID, byte[] partyUInfo, byte[] partyVInfo, SecureRandom random)",
                "+    {",
                "+        this.otherInfoBuilder = new DEROtherInfo.Builder(algorithmID, partyUInfo, partyVInfo);",
                "+        this.random = random;",
                "+    }",
                "+",
                "+    /**",
                "+     * Party U (initiator) generation.",
                "+     */",
                "+    public static class PartyU",
                "+        extends NHOtherInfoGenerator",
                "+    {",
                "+        private AsymmetricCipherKeyPair aKp;",
                "+        private NHAgreement agreement = new NHAgreement();",
                "+",
                "+        public PartyU(AlgorithmIdentifier algorithmID, byte[] partyUInfo, byte[] partyVInfo, java.security.SecureRandom random)",
                "+        {",
                "+            super(algorithmID, partyUInfo, partyVInfo, random);",
                "+",
                "+            NHKeyPairGenerator kpGen = new NHKeyPairGenerator();",
                "+",
                "+            kpGen.init(new KeyGenerationParameters(random, 2048));",
                "+",
                "+            aKp = kpGen.generateKeyPair();",
                "+",
                "+            agreement.init(aKp.getPrivate());",
                "+        }",
                "+",
                "+        /**",
                "+         * Add optional supplementary public info (DER tagged, implicit, 0).",
                "+         *",
                "+         * @param suppPubInfo supplementary public info.",
                "+         * @return the current builder instance.",
                "+         */",
                "+        public NHOtherInfoGenerator withSuppPubInfo(byte[] suppPubInfo)",
                "+        {",
                "+            this.otherInfoBuilder.withSuppPubInfo(suppPubInfo);",
                "+",
                "+            return this;",
                "+        }",
                "+",
                "+        public byte[] getSuppPrivInfoPartA()",
                "+        {",
                "+            return getEncoded((NHPublicKeyParameters)aKp.getPublic());",
                "+        }",
                "+",
                "+        public DEROtherInfo generate(byte[] suppPrivInfoPartB)",
                "+        {",
                "+            this.otherInfoBuilder.withSuppPrivInfo(agreement.calculateAgreement(NHOtherInfoGenerator.getPublicKey(suppPrivInfoPartB)));",
                "+",
                "+            return otherInfoBuilder.build();",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * Party V (responder) generation.",
                "+     */",
                "+    public static class PartyV",
                "+        extends NHOtherInfoGenerator",
                "+    {",
                "+        public PartyV(AlgorithmIdentifier algorithmID, byte[] partyUInfo, byte[] partyVInfo, SecureRandom random)",
                "+        {",
                "+            super(algorithmID, partyUInfo, partyVInfo, random);",
                "+        }",
                "+",
                "+        /**",
                "+         * Add optional supplementary public info (DER tagged, implicit, 0).",
                "+         *",
                "+         * @param suppPubInfo supplementary public info.",
                "+         * @return the current builder instance.",
                "+         */",
                "+        public NHOtherInfoGenerator withSuppPubInfo(byte[] suppPubInfo)",
                "+        {",
                "+            this.otherInfoBuilder.withSuppPubInfo(suppPubInfo);",
                "+",
                "+            return this;",
                "+        }",
                "+",
                "+        public byte[] getSuppPrivInfoPartB(byte[] suppPrivInfoPartA)",
                "+        {",
                "+            NHExchangePairGenerator exchGen = new NHExchangePairGenerator(random);",
                "+",
                "+            ExchangePair bEp = exchGen.generateExchange(getPublicKey(suppPrivInfoPartA));",
                "+",
                "+            this.otherInfoBuilder.withSuppPrivInfo(bEp.getSharedValue());",
                "+",
                "+            return getEncoded((NHPublicKeyParameters)bEp.getPublicKey());",
                "+        }",
                "+",
                "+        public DEROtherInfo generate()",
                "+        {",
                "+            return otherInfoBuilder.build();",
                "+        }",
                "+    }",
                "+",
                "+    private static byte[] getEncoded(NHPublicKeyParameters pubKey)",
                "+    {",
                "+        SubjectPublicKeyInfo pki;",
                "+        try",
                "+        {",
                "+            AlgorithmIdentifier algorithmIdentifier = new AlgorithmIdentifier(PQCObjectIdentifiers.newHope);",
                "+            pki = new SubjectPublicKeyInfo(algorithmIdentifier, pubKey.getPubData());",
                "+",
                "+            return pki.getEncoded();",
                "+        }",
                "+        catch (IOException e)",
                "+        {",
                "+            return null;",
                "+        }",
                "+    }",
                "+",
                "+    private static NHPublicKeyParameters getPublicKey(byte[] enc)",
                "+    {",
                "+        SubjectPublicKeyInfo pki = SubjectPublicKeyInfo.getInstance(enc);",
                "+",
                "+        return new NHPublicKeyParameters(pki.getPublicKeyData().getOctets());",
                "+    }",
                "+}"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/pqc/crypto/newhope/NHOtherInfoGenerator.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "a4f9f15ffc0a7f97ce52b353d41e599f809cb3bd"
                ],
                [
                    "no-tag",
                    "3058bd1ff26ba5423069d6ee31d771bc02e1e586"
                ]
            ],
            "tags": [
                "r1v60"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ebfe68b018cce7327b54e1b6dce990be91089543",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1518845926,
            "hunks": 4,
            "message": "added deprecation comments.",
            "diff": [
                "diff --git a/prov/src/main/java/org/bouncycastle/x509/extension/X509ExtensionUtil.java b/prov/src/main/java/org/bouncycastle/x509/extension/X509ExtensionUtil.java",
                "index 8c5bb9041..0779d1aaf 100644",
                "--- a/prov/src/main/java/org/bouncycastle/x509/extension/X509ExtensionUtil.java",
                "+++ b/prov/src/main/java/org/bouncycastle/x509/extension/X509ExtensionUtil.java",
                "@@ -23,4 +23,10 @@ import org.bouncycastle.util.Integers;",
                "+/**",
                "+ * @deprecated use org.bouncycastle.cert.jcajce.JcaX509ExtensionUtils",
                "+ */",
                " public class X509ExtensionUtil",
                " {",
                "+    /**",
                "+     * @deprecated use org.bouncycastle.cert.jcajce.JcaX509ExtensionUtils.parseExtensionValue()",
                "+     */",
                "     public static ASN1Primitive fromExtensionValue(",
                "@@ -34,2 +40,5 @@ public class X509ExtensionUtil",
                "+    /**",
                "+     * @deprecated use org.bouncycastle.cert.jcajce.JcaX509ExtensionUtils.getIssuerAlternativeNames()",
                "+     */",
                "     public static Collection getIssuerAlternativeNames(X509Certificate cert)",
                "@@ -42,2 +51,5 @@ public class X509ExtensionUtil",
                "+    /**",
                "+     * @deprecated use org.bouncycastle.cert.jcajce.JcaX509ExtensionUtils.getSubjectAlternativeNames()",
                "+     */",
                "     public static Collection getSubjectAlternativeNames(X509Certificate cert)"
            ],
            "changed_files": [
                "prov/src/main/java/org/bouncycastle/x509/extension/X509ExtensionUtil.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "21f51f542378cae291a225d8df1bb60240f68e0e"
                ],
                [
                    "no-tag",
                    "0a702f116d8b670e03fa48afdf057f7c81b97f9f"
                ]
            ],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "eafe16c272d4e8caab2c0a4634426cf76699ae37",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1515615122,
            "hunks": 3,
            "message": "Remove annotations",
            "diff": [
                "diff --git a/tls/src/main/java/org/bouncycastle/tls/crypto/impl/jcajce/JcaTlsCryptoProvider.java b/tls/src/main/java/org/bouncycastle/tls/crypto/impl/jcajce/JcaTlsCryptoProvider.java",
                "index 99c7dfc29..c0d403c3c 100644",
                "--- a/tls/src/main/java/org/bouncycastle/tls/crypto/impl/jcajce/JcaTlsCryptoProvider.java",
                "+++ b/tls/src/main/java/org/bouncycastle/tls/crypto/impl/jcajce/JcaTlsCryptoProvider.java",
                "@@ -140,3 +140,2 @@ public class JcaTlsCryptoProvider",
                "-            @Override",
                "             protected void engineSetSeed(byte[] bytes)",
                "@@ -149,3 +148,2 @@ public class JcaTlsCryptoProvider",
                "-            @Override",
                "             protected void engineNextBytes(byte[] bytes)",
                "@@ -169,3 +167,2 @@ public class JcaTlsCryptoProvider",
                "-            @Override",
                "             protected byte[] engineGenerateSeed(int seedLen)"
            ],
            "changed_files": [
                "tls/src/main/java/org/bouncycastle/tls/crypto/impl/jcajce/JcaTlsCryptoProvider.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "074a0ad165352872d9b678976ca89b2086417c21"
                ],
                [
                    "no-tag",
                    "1abd75eaa953350feee2f270bfb147ef6ce250a7"
                ]
            ],
            "tags": [
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fd9e8fe8ede89c59c7a50be307232d0e3d0e7149",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1511671652,
            "hunks": 6,
            "message": "renaming.",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/agreement/DHEphemeralAgreement.java b/core/src/main/java/org/bouncycastle/crypto/agreement/DHEphemeralAgreement.java",
                "new file mode 100644",
                "index 000000000..1e69bfed7",
                "--- /dev/null",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/agreement/DHEphemeralAgreement.java",
                "@@ -0,0 +1,48 @@",
                "+package org.bouncycastle.crypto.agreement;",
                "+",
                "+import java.math.BigInteger;",
                "+",
                "+import org.bouncycastle.crypto.CipherParameters;",
                "+import org.bouncycastle.crypto.params.DHEPrivateParameters;",
                "+import org.bouncycastle.crypto.params.DHEPublicParameters;",
                "+import org.bouncycastle.util.Arrays;",
                "+import org.bouncycastle.util.BigIntegers;",
                "+",
                "+/**",
                "+ * FFC static/ephemeral agreement as described in NIST SP 800-56A.",
                "+ */",
                "+public class DHEphemeralAgreement",
                "+{",
                "+    private DHEPrivateParameters privParams;",
                "+",
                "+    public void init(",
                "+        CipherParameters key)",
                "+    {",
                "+        this.privParams = (DHEPrivateParameters)key;",
                "+    }",
                "+",
                "+    public int getFieldSize()",
                "+    {",
                "+        return (privParams.getStaticPrivateKey().getParameters().getP().bitLength() + 7) / 8;",
                "+    }",
                "+",
                "+    public byte[] calculateAgreement(CipherParameters pubKey)",
                "+    {",
                "+        DHEPublicParameters pubParams = (DHEPublicParameters)pubKey;",
                "+",
                "+        DHBasicAgreement sAgree = new DHBasicAgreement();",
                "+        DHBasicAgreement eAgree = new DHBasicAgreement();",
                "+",
                "+        sAgree.init(privParams.getStaticPrivateKey());",
                "+",
                "+        BigInteger sComp = sAgree.calculateAgreement(pubParams.getStaticPublicKey());",
                "+",
                "+        eAgree.init(privParams.getEphemeralPrivateKey());",
                "+",
                "+        BigInteger eComp = eAgree.calculateAgreement(pubParams.getEphemeralPublicKey());",
                "+",
                "+        return Arrays.concatenate(",
                "+            BigIntegers.asUnsignedByteArray(this.getFieldSize(), eComp),",
                "+            BigIntegers.asUnsignedByteArray(this.getFieldSize(), sComp));",
                "+    }",
                "+}",
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/agreement/ECDHCEphemeralAgreement.java b/core/src/main/java/org/bouncycastle/crypto/agreement/ECDHCEphemeralAgreement.java",
                "new file mode 100644",
                "index 000000000..9ba8cbfd2",
                "--- /dev/null",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/agreement/ECDHCEphemeralAgreement.java",
                "@@ -0,0 +1,48 @@",
                "+package org.bouncycastle.crypto.agreement;",
                "+",
                "+import java.math.BigInteger;",
                "+",
                "+import org.bouncycastle.crypto.CipherParameters;",
                "+import org.bouncycastle.crypto.params.ECDHEPrivateParameters;",
                "+import org.bouncycastle.crypto.params.ECDHEPublicParameters;",
                "+import org.bouncycastle.util.Arrays;",
                "+import org.bouncycastle.util.BigIntegers;",
                "+",
                "+/**",
                "+ * EC static/ephemeral agreement as described in NIST SP 800-56A using EC co-factor Diffie-Hellman.",
                "+ */",
                "+public class ECDHCEphemeralAgreement",
                "+{",
                "+    private ECDHEPrivateParameters privParams;",
                "+",
                "+    public void init(",
                "+        CipherParameters key)",
                "+    {",
                "+        this.privParams = (ECDHEPrivateParameters)key;",
                "+    }",
                "+",
                "+    public int getFieldSize()",
                "+    {",
                "+        return (privParams.getStaticPrivateKey().getParameters().getCurve().getFieldSize() + 7) / 8;",
                "+    }",
                "+",
                "+    public byte[] calculateAgreement(CipherParameters pubKey)",
                "+    {",
                "+        ECDHEPublicParameters pubParams = (ECDHEPublicParameters)pubKey;",
                "+",
                "+        ECDHCBasicAgreement sAgree = new ECDHCBasicAgreement();",
                "+        ECDHCBasicAgreement eAgree = new ECDHCBasicAgreement();",
                "+",
                "+        sAgree.init(privParams.getStaticPrivateKey());",
                "+",
                "+        BigInteger sComp = sAgree.calculateAgreement(pubParams.getStaticPublicKey());",
                "+",
                "+        eAgree.init(privParams.getEphemeralPrivateKey());",
                "+",
                "+        BigInteger eComp = eAgree.calculateAgreement(pubParams.getEphemeralPublicKey());",
                "+",
                "+        return Arrays.concatenate(",
                "+            BigIntegers.asUnsignedByteArray(this.getFieldSize(), eComp),",
                "+            BigIntegers.asUnsignedByteArray(this.getFieldSize(), sComp));",
                "+    }",
                "+}",
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/params/DHEPrivateParameters.java b/core/src/main/java/org/bouncycastle/crypto/params/DHEPrivateParameters.java",
                "new file mode 100644",
                "index 000000000..dd2d87cec",
                "--- /dev/null",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/params/DHEPrivateParameters.java",
                "@@ -0,0 +1,72 @@",
                "+package org.bouncycastle.crypto.params;",
                "+",
                "+import org.bouncycastle.crypto.CipherParameters;",
                "+",
                "+/**",
                "+ * Parameters holder for private unified static/ephemeral agreement as described in NIST SP 800-56A.",
                "+ */",
                "+public class DHEPrivateParameters",
                "+    implements CipherParameters",
                "+{",
                "+    private DHPrivateKeyParameters staticPrivateKey;",
                "+    private DHPrivateKeyParameters ephemeralPrivateKey;",
                "+    private DHPublicKeyParameters ephemeralPublicKey;",
                "+",
                "+    public DHEPrivateParameters(",
                "+        DHPrivateKeyParameters  staticPrivateKey,",
                "+        DHPrivateKeyParameters  ephemeralPrivateKey)",
                "+    {",
                "+        this(staticPrivateKey, ephemeralPrivateKey, null);",
                "+    }",
                "+",
                "+    public DHEPrivateParameters(",
                "+        DHPrivateKeyParameters  staticPrivateKey,",
                "+        DHPrivateKeyParameters  ephemeralPrivateKey,",
                "+        DHPublicKeyParameters   ephemeralPublicKey)",
                "+    {",
                "+        if (staticPrivateKey == null)",
                "+        {",
                "+            throw new NullPointerException(\"staticPrivateKey cannot be null\");",
                "+        }",
                "+        if (ephemeralPrivateKey == null)",
                "+        {",
                "+            throw new NullPointerException(\"ephemeralPrivateKey cannot be null\");",
                "+        }",
                "+",
                "+        DHParameters parameters = staticPrivateKey.getParameters();",
                "+        if (!parameters.equals(ephemeralPrivateKey.getParameters()))",
                "+        {",
                "+            throw new IllegalArgumentException(\"static and ephemeral private keys have different domain parameters\");",
                "+        }",
                "+",
                "+        if (ephemeralPublicKey == null)",
                "+        {",
                "+            ephemeralPublicKey = new DHPublicKeyParameters(",
                "+                parameters.getG().modPow(ephemeralPrivateKey.getX(), parameters.getP()),",
                "+                parameters);",
                "+        }",
                "+        else if (!parameters.equals(ephemeralPublicKey.getParameters()))",
                "+        {",
                "+            throw new IllegalArgumentException(\"ephemeral public key has different domain parameters\");",
                "+        }",
                "+",
                "+        this.staticPrivateKey = staticPrivateKey;",
                "+        this.ephemeralPrivateKey = ephemeralPrivateKey;",
                "+        this.ephemeralPublicKey = ephemeralPublicKey;",
                "+    }",
                "+",
                "+    public DHPrivateKeyParameters getStaticPrivateKey()",
                "+    {",
                "+        return staticPrivateKey;",
                "+    }",
                "+",
                "+    public DHPrivateKeyParameters getEphemeralPrivateKey()",
                "+    {",
                "+        return ephemeralPrivateKey;",
                "+    }",
                "+",
                "+    public DHPublicKeyParameters getEphemeralPublicKey()",
                "+    {",
                "+        return ephemeralPublicKey;",
                "+    }",
                "+}",
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/params/DHEPublicParameters.java b/core/src/main/java/org/bouncycastle/crypto/params/DHEPublicParameters.java",
                "new file mode 100644",
                "index 000000000..ee7212fba",
                "--- /dev/null",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/params/DHEPublicParameters.java",
                "@@ -0,0 +1,44 @@",
                "+package org.bouncycastle.crypto.params;",
                "+",
                "+import org.bouncycastle.crypto.CipherParameters;",
                "+",
                "+/**",
                "+ * Parameters holder for static/ephemeral agreement as described in NIST SP 800-56A.",
                "+ */",
                "+public class DHEPublicParameters",
                "+    implements CipherParameters",
                "+{",
                "+    private DHPublicKeyParameters staticPublicKey;",
                "+    private DHPublicKeyParameters ephemeralPublicKey;",
                "+",
                "+    public DHEPublicParameters(",
                "+        DHPublicKeyParameters   staticPublicKey,",
                "+        DHPublicKeyParameters   ephemeralPublicKey)",
                "+    {",
                "+        if (staticPublicKey == null)",
                "+        {",
                "+            throw new NullPointerException(\"staticPublicKey cannot be null\");",
                "+        }",
                "+        if (ephemeralPublicKey == null)",
                "+        {",
                "+            throw new NullPointerException(\"ephemeralPublicKey cannot be null\");",
                "+        }",
                "+        if (!staticPublicKey.getParameters().equals(ephemeralPublicKey.getParameters()))",
                "+        {",
                "+            throw new IllegalArgumentException(\"Static and ephemeral public keys have different domain parameters\");",
                "+        }",
                "+",
                "+        this.staticPublicKey = staticPublicKey;",
                "+        this.ephemeralPublicKey = ephemeralPublicKey;",
                "+    }",
                "+",
                "+    public DHPublicKeyParameters getStaticPublicKey()",
                "+    {",
                "+        return staticPublicKey;",
                "+    }",
                "+",
                "+    public DHPublicKeyParameters getEphemeralPublicKey()",
                "+    {",
                "+        return ephemeralPublicKey;",
                "+    }",
                "+}",
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/params/ECDHEPrivateParameters.java b/core/src/main/java/org/bouncycastle/crypto/params/ECDHEPrivateParameters.java",
                "new file mode 100644",
                "index 000000000..8817f7547",
                "--- /dev/null",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/params/ECDHEPrivateParameters.java",
                "@@ -0,0 +1,72 @@",
                "+package org.bouncycastle.crypto.params;",
                "+",
                "+import org.bouncycastle.crypto.CipherParameters;",
                "+",
                "+/**",
                "+ * Parameters holder for private unified static/ephemeral agreement as described in NIST SP 800-56A.",
                "+ */",
                "+public class ECDHEPrivateParameters",
                "+    implements CipherParameters",
                "+{",
                "+    private ECPrivateKeyParameters staticPrivateKey;",
                "+    private ECPrivateKeyParameters ephemeralPrivateKey;",
                "+    private ECPublicKeyParameters ephemeralPublicKey;",
                "+",
                "+    public ECDHEPrivateParameters(",
                "+        ECPrivateKeyParameters  staticPrivateKey,",
                "+        ECPrivateKeyParameters  ephemeralPrivateKey)",
                "+    {",
                "+        this(staticPrivateKey, ephemeralPrivateKey, null);",
                "+    }",
                "+",
                "+    public ECDHEPrivateParameters(",
                "+        ECPrivateKeyParameters  staticPrivateKey,",
                "+        ECPrivateKeyParameters  ephemeralPrivateKey,",
                "+        ECPublicKeyParameters   ephemeralPublicKey)",
                "+    {",
                "+        if (staticPrivateKey == null)",
                "+        {",
                "+            throw new NullPointerException(\"staticPrivateKey cannot be null\");",
                "+        }",
                "+        if (ephemeralPrivateKey == null)",
                "+        {",
                "+            throw new NullPointerException(\"ephemeralPrivateKey cannot be null\");",
                "+        }",
                "+",
                "+        ECDomainParameters parameters = staticPrivateKey.getParameters();",
                "+        if (!parameters.equals(ephemeralPrivateKey.getParameters()))",
                "+        {",
                "+            throw new IllegalArgumentException(\"static and ephemeral private keys have different domain parameters\");",
                "+        }",
                "+",
                "+        if (ephemeralPublicKey == null)",
                "+        {",
                "+            ephemeralPublicKey = new ECPublicKeyParameters(",
                "+                parameters.getG().multiply(ephemeralPrivateKey.getD()),",
                "+                parameters);",
                "+        }",
                "+        else if (!parameters.equals(ephemeralPublicKey.getParameters()))",
                "+        {",
                "+            throw new IllegalArgumentException(\"ephemeral public key has different domain parameters\");",
                "+        }",
                "+",
                "+        this.staticPrivateKey = staticPrivateKey;",
                "+        this.ephemeralPrivateKey = ephemeralPrivateKey;",
                "+        this.ephemeralPublicKey = ephemeralPublicKey;",
                "+    }",
                "+",
                "+    public ECPrivateKeyParameters getStaticPrivateKey()",
                "+    {",
                "+        return staticPrivateKey;",
                "+    }",
                "+",
                "+    public ECPrivateKeyParameters getEphemeralPrivateKey()",
                "+    {",
                "+        return ephemeralPrivateKey;",
                "+    }",
                "+",
                "+    public ECPublicKeyParameters getEphemeralPublicKey()",
                "+    {",
                "+        return ephemeralPublicKey;",
                "+    }",
                "+}",
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/params/ECDHEPublicParameters.java b/core/src/main/java/org/bouncycastle/crypto/params/ECDHEPublicParameters.java",
                "new file mode 100644",
                "index 000000000..473622322",
                "--- /dev/null",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/params/ECDHEPublicParameters.java",
                "@@ -0,0 +1,44 @@",
                "+package org.bouncycastle.crypto.params;",
                "+",
                "+import org.bouncycastle.crypto.CipherParameters;",
                "+",
                "+/**",
                "+ * Parameters holder for public unified static/ephemeral agreement as described in NIST SP 800-56A using EC DH/CDH.",
                "+ */",
                "+public class ECDHEPublicParameters",
                "+    implements CipherParameters",
                "+{",
                "+    private ECPublicKeyParameters staticPublicKey;",
                "+    private ECPublicKeyParameters ephemeralPublicKey;",
                "+",
                "+    public ECDHEPublicParameters(",
                "+        ECPublicKeyParameters   staticPublicKey,",
                "+        ECPublicKeyParameters   ephemeralPublicKey)",
                "+    {",
                "+        if (staticPublicKey == null)",
                "+        {",
                "+            throw new NullPointerException(\"staticPublicKey cannot be null\");",
                "+        }",
                "+        if (ephemeralPublicKey == null)",
                "+        {",
                "+            throw new NullPointerException(\"ephemeralPublicKey cannot be null\");",
                "+        }",
                "+        if (!staticPublicKey.getParameters().equals(ephemeralPublicKey.getParameters()))",
                "+        {",
                "+            throw new IllegalArgumentException(\"static and ephemeral public keys have different domain parameters\");",
                "+        }",
                "+",
                "+        this.staticPublicKey = staticPublicKey;",
                "+        this.ephemeralPublicKey = ephemeralPublicKey;",
                "+    }",
                "+",
                "+    public ECPublicKeyParameters getStaticPublicKey()",
                "+    {",
                "+        return staticPublicKey;",
                "+    }",
                "+",
                "+    public ECPublicKeyParameters getEphemeralPublicKey()",
                "+    {",
                "+        return ephemeralPublicKey;",
                "+    }",
                "+}"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/crypto/agreement/DHEphemeralAgreement.java",
                "core/src/main/java/org/bouncycastle/crypto/agreement/ECDHCEphemeralAgreement.java",
                "core/src/main/java/org/bouncycastle/crypto/params/DHEPrivateParameters.java",
                "core/src/main/java/org/bouncycastle/crypto/params/DHEPublicParameters.java",
                "core/src/main/java/org/bouncycastle/crypto/params/ECDHEPrivateParameters.java",
                "core/src/main/java/org/bouncycastle/crypto/params/ECDHEPublicParameters.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "1a4b1a1876bc82ecbca868374e0b8cca5cb33eb8"
                ],
                [
                    "no-tag",
                    "567146ba9942f92376c7f381ead07ffc0466d911"
                ]
            ],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "404ba9d0c77ff40e6dd888a0224830e4aac08fed",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1514517852,
            "hunks": 2,
            "message": "fixed typos",
            "diff": [
                "diff --git a/docs/releasenotes.html b/docs/releasenotes.html",
                "index ade6ea467..7bbaec517 100644",
                "--- a/docs/releasenotes.html",
                "+++ b/docs/releasenotes.html",
                "@@ -34,3 +34,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2017, December 28",
                " <li>An edge condition in Blake2b for hashes on data with a length in the range of 2**64 - 127 to 2**64 has been identifed and fixed.</li>",
                "-<li>The ISO Trailer for SHA512/256 used in X9.31 and ISO9796-2 signatures was incorrect. This has beem fixed.</li>",
                "+<li>The ISO Trailer for SHA512/256 used in X9.31 and ISO9796-2 signatures was incorrect. This has been fixed.</li>",
                " <li>The BCJSSE SSLEngine implementation now correctly wraps/unwraps application data only in whole records.</li>",
                "@@ -38,3 +38,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2017, December 28",
                " <li>Further work has been done to try and prevent escaping exceptions on opening random files as BCFKS files or PKCS#12 files.</li>",
                "-<li>An off-by-one error for the max N check for SCRYPT has been fixed. SCRYPT should now be compliant with RFC 7914.<li>",
                "+<li>An off-by-one error for the max N check for SCRYPT has been fixed. SCRYPT should now be compliant with RFC 7914.</li>",
                " <li>ASN1GeneralizedTime will now accept a broader range of input strings.</li>"
            ],
            "changed_files": [
                "docs/releasenotes.html"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "6de1c17dda8ffdb19431ffcadbce1836867a27a9"
                ],
                [
                    "no-tag",
                    "c552224f7c27c24ff90899aa6eb9c0d33f02ebe8"
                ]
            ],
            "tags": [
                "r1rv59",
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: release, note",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ef20ace42e3f05517501ae865513253e85df7b76",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1515422743,
            "hunks": 110,
            "message": "BCJSSE: Respect system property jdk.tls.client.protocols - also many improvements in handling of SSLParameters",
            "diff": [
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/BouncyCastleJsseProvider.java b/tls/src/main/java/org/bouncycastle/jsse/provider/BouncyCastleJsseProvider.java",
                "index 8043316ce..c885aa58d 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/provider/BouncyCastleJsseProvider.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/BouncyCastleJsseProvider.java",
                "@@ -163,3 +163,3 @@ public class BouncyCastleJsseProvider",
                "                 {",
                "-                    return new ProvSSLContextSpi(fipsMode, baseCryptoProvider, new String[]{ \"TLSv1.2\" });",
                "+                    return new ProvSSLContextSpi(fipsMode, baseCryptoProvider, null);",
                "                 }",
                "@@ -197,3 +197,3 @@ public class BouncyCastleJsseProvider",
                "                     {",
                "-                        ProvSSLContextSpi defaultSSLContextSpi = new ProvSSLContextSpi(fipsMode, baseCryptoProvider, new String[]{ \"TLSv1.2\" });",
                "+                        ProvSSLContextSpi defaultSSLContextSpi = new ProvSSLContextSpi(fipsMode, baseCryptoProvider, null);",
                "                         defaultSSLContextSpi.engineInit(null, null, null);",
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/JsseUtils.java b/tls/src/main/java/org/bouncycastle/jsse/provider/JsseUtils.java",
                "index a39ac1f5f..6409dd5d4 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/provider/JsseUtils.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/JsseUtils.java",
                "@@ -61,2 +61,9 @@ abstract class JsseUtils",
                "+    public static String[] copyOf(String[] data, int newLength)",
                "+    {",
                "+        String[] tmp = new String[newLength];",
                "+        System.arraycopy(data, 0, tmp, 0, Math.min(data.length, newLength));",
                "+        return tmp;",
                "+    }",
                "+",
                "     public static String getAuthTypeClient(short clientCertificateType) throws IOException",
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLContextSpi.java b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLContextSpi.java",
                "index b94efca22..cc115e865 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLContextSpi.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLContextSpi.java",
                "@@ -12,2 +12,3 @@ import java.util.Map;",
                " import java.util.Set;",
                "+import java.util.logging.Logger;",
                "@@ -35,2 +36,6 @@ class ProvSSLContextSpi",
                " {",
                "+    private static Logger LOG = Logger.getLogger(ProvSSLContextSpi.class.getName());",
                "+",
                "+    private static final String PROPERTY_CLIENT_PROTOCOLS = \"jdk.tls.client.protocols\";",
                "+",
                "     private static final Map<String, Integer> SUPPORTED_CIPHERSUITE_MAP = createSupportedCipherSuiteMap();",
                "@@ -43,2 +48,4 @@ class ProvSSLContextSpi",
                "+    private static final String[] DEFAULT_PROTOCOLS = new String[]{ \"TLSv1.2\" };",
                "+",
                "     private static List<String> createDefaultCipherSuiteList(Set<String> supportedCipherSuiteSet)",
                "@@ -173,8 +180,73 @@ class ProvSSLContextSpi",
                "+    private static String[] getDefaultProtocolsClient(String[] specifiedProtocols)",
                "+    {",
                "+        if (specifiedProtocols != null)",
                "+        {",
                "+            return specifiedProtocols;",
                "+        }",
                "+",
                "+        String[] clientProtocols = getJdkTlsClientProtocols();",
                "+        if (clientProtocols != null)",
                "+        {",
                "+            return clientProtocols;",
                "+        }",
                "+",
                "+        return DEFAULT_PROTOCOLS;",
                "+    }",
                "+",
                "+    private static String[] getDefaultProtocolsServer(String[] specifiedProtocols)",
                "+    {",
                "+        if (specifiedProtocols != null)",
                "+        {",
                "+            return specifiedProtocols;",
                "+        }",
                "+",
                "+        return DEFAULT_PROTOCOLS;",
                "+    }",
                "+",
                "+    private static String[] getJdkTlsClientProtocols()",
                "+    {",
                "+        String prop = PropertyUtils.getStringSystemProperty(PROPERTY_CLIENT_PROTOCOLS);",
                "+        if (prop == null)",
                "+        {",
                "+            return null;",
                "+        }",
                "+",
                "+        String[] entries = JsseUtils.stripQuotes(prop.trim()).split(\",\");",
                "+        String[] result = new String[entries.length];",
                "+        int count = 0;",
                "+        for (String entry : entries)",
                "+        {",
                "+            String protocol = entry.trim();",
                "+            if (protocol.length() < 1)",
                "+                continue;",
                "+",
                "+            if (!supportedProtocols.containsKey(protocol))",
                "+            {",
                "+                LOG.warning(\"'\" + PROPERTY_CLIENT_PROTOCOLS + \"' contains unsupported protocol: \" + protocol);",
                "+            }",
                "+            else if (!JsseUtils.contains(result, protocol))",
                "+            {",
                "+                result[count++] = protocol;",
                "+            }",
                "+        }",
                "+        if (count < 1)",
                "+        {",
                "+            LOG.severe(\"'\" + PROPERTY_CLIENT_PROTOCOLS + \"' contained no usable protocol values (ignoring)\");",
                "+            return null;",
                "+        }",
                "+        if (count < result.length)",
                "+        {",
                "+            result = JsseUtils.copyOf(result, count);",
                "+        }",
                "+        return result;",
                "+    }",
                "+",
                "     protected final boolean isInFipsMode;",
                "     protected final TlsCryptoProvider cryptoProvider;",
                "-    protected final String[] defaultProtocols;",
                "+    protected final String[] defaultProtocolsClient;",
                "+    protected final String[] defaultProtocolsServer;",
                "     protected final Map<String, Integer> supportedCipherSuites;",
                "-    protected final List<String> defaultCipherSuites;",
                "+    protected final String[] defaultCipherSuites;",
                "@@ -188,3 +260,3 @@ class ProvSSLContextSpi",
                "-    ProvSSLContextSpi(boolean isInFipsMode, TlsCryptoProvider cryptoProvider, String[] defaultProtocols)",
                "+    ProvSSLContextSpi(boolean isInFipsMode, TlsCryptoProvider cryptoProvider, String[] specifiedProtocols)",
                "     {",
                "@@ -192,6 +264,9 @@ class ProvSSLContextSpi",
                "         this.cryptoProvider = cryptoProvider;",
                "-        this.defaultProtocols = defaultProtocols;",
                "+        this.defaultProtocolsClient = getDefaultProtocolsClient(specifiedProtocols);",
                "+        this.defaultProtocolsServer = getDefaultProtocolsServer(specifiedProtocols);",
                "         this.supportedCipherSuites = isInFipsMode ? SUPPORTED_CIPHERSUITE_MAP_FIPS : SUPPORTED_CIPHERSUITE_MAP;",
                "-        this.defaultCipherSuites = isInFipsMode ? DEFAULT_CIPHERSUITE_LIST_FIPS : DEFAULT_CIPHERSUITE_LIST;",
                "+",
                "+        List<String> defaultCipherSuiteList = isInFipsMode ? DEFAULT_CIPHERSUITE_LIST_FIPS : DEFAULT_CIPHERSUITE_LIST;",
                "+        this.defaultCipherSuites = defaultCipherSuiteList.toArray(new String[defaultCipherSuiteList.size()]);",
                "     }",
                "@@ -230,8 +305,23 @@ class ProvSSLContextSpi",
                "     {",
                "-        return defaultCipherSuites.toArray(new String[defaultCipherSuites.size()]);",
                "+        return defaultCipherSuites.clone();",
                "+    }",
                "+",
                "+    ProvSSLParameters getDefaultParameters(boolean isServer)",
                "+    {",
                "+        return new ProvSSLParameters(defaultCipherSuites, getDefaultProtocols(isServer));",
                "+    }",
                "+",
                "+    String[] getDefaultProtocols(boolean isServer)",
                "+    {",
                "+        return isServer ? getDefaultProtocolsServer() : getDefaultProtocolsClient();",
                "     }",
                "-    String[] getDefaultProtocols()",
                "+    String[] getDefaultProtocolsClient()",
                "     {",
                "-        return defaultProtocols;",
                "+        return defaultProtocolsClient;",
                "+    }",
                "+",
                "+    String[] getDefaultProtocolsServer()",
                "+    {",
                "+        return defaultProtocolsServer;",
                "     }",
                "@@ -293,2 +383,8 @@ class ProvSSLContextSpi",
                "+    boolean isDefaultProtocols(String[] protocols)",
                "+    {",
                "+        return protocols == getDefaultProtocolsClient()",
                "+            || protocols == getDefaultProtocolsServer();",
                "+    }",
                "+",
                "     String[] getSupportedCipherSuites()",
                "@@ -340,2 +436,10 @@ class ProvSSLContextSpi",
                "+    void updateDefaultProtocols(ProvSSLParameters sslParameters, boolean isServer)",
                "+    {",
                "+        if (isDefaultProtocols(sslParameters.getProtocolsArray()))",
                "+        {",
                "+            sslParameters.setProtocolsArray(getDefaultProtocols(isServer));",
                "+        }",
                "+    }",
                "+",
                "     void validateNegotiatedCipherSuite(int cipherSuite)",
                "@@ -383,7 +487,3 @@ class ProvSSLContextSpi",
                "     {",
                "-        // TODO[jsse] Review initial values",
                "-        SSLParameters r = new SSLParameters();",
                "-        r.setCipherSuites(getDefaultCipherSuites());",
                "-        r.setProtocols(getDefaultProtocols());",
                "-        return r;",
                "+        return super.engineGetDefaultSSLParameters();",
                "     }",
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLEngine.java b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLEngine.java",
                "index d52416e87..06ea2a45a 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLEngine.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLEngine.java",
                "@@ -38,6 +38,6 @@ class ProvSSLEngine",
                "     protected final ContextData contextData;",
                "+    protected final ProvSSLParameters sslParameters;",
                "-    protected ProvSSLParameters sslParameters;",
                "     protected boolean enableSessionCreation = true;",
                "-    protected boolean useClientMode = true;",
                "+    protected boolean useClientMode = false;",
                "@@ -58,3 +58,3 @@ class ProvSSLEngine",
                "         this.contextData = contextData;",
                "-        this.sslParameters = ProvSSLParameters.extractDefaultParameters(context);",
                "+        this.sslParameters = context.getDefaultParameters(!useClientMode);",
                "     }",
                "@@ -67,3 +67,3 @@ class ProvSSLEngine",
                "         this.contextData = contextData;",
                "-        this.sslParameters = ProvSSLParameters.extractDefaultParameters(context);;",
                "+        this.sslParameters = context.getDefaultParameters(!useClientMode);",
                "     }",
                "@@ -101,3 +101,3 @@ class ProvSSLEngine",
                "-                ProvTlsClient client = new ProvTlsClient(this);",
                "+                ProvTlsClient client = new ProvTlsClient(this, sslParameters.copy());",
                "                 this.protocolPeer = client;",
                "@@ -112,3 +112,3 @@ class ProvSSLEngine",
                "-                ProvTlsServer server = new ProvTlsServer(this);",
                "+                ProvTlsServer server = new ProvTlsServer(this, sslParameters.copy());",
                "                 this.protocolPeer = server;",
                "@@ -216,8 +216,3 @@ class ProvSSLEngine",
                "     {",
                "-        return SSLParametersUtil.toSSLParameters(sslParameters);",
                "-    }",
                "-",
                "-    public synchronized ProvSSLParameters getProvSSLParameters()",
                "-    {",
                "-        return sslParameters;",
                "+        return SSLParametersUtil.getSSLParameters(sslParameters);",
                "     }",
                "@@ -297,3 +292,3 @@ class ProvSSLEngine",
                "     {",
                "-        this.sslParameters = SSLParametersUtil.toProvSSLParameters(sslParameters);",
                "+        SSLParametersUtil.setSSLParameters(this.sslParameters, sslParameters);",
                "     }",
                "@@ -303,3 +298,8 @@ class ProvSSLEngine",
                "     {",
                "-        if (initialHandshakeBegun && mode != this.useClientMode)",
                "+        if (this.useClientMode == mode)",
                "+        {",
                "+            return;",
                "+        }",
                "+",
                "+        if (initialHandshakeBegun)",
                "         {",
                "@@ -309,2 +309,4 @@ class ProvSSLEngine",
                "         this.useClientMode = mode;",
                "+",
                "+        context.updateDefaultProtocols(sslParameters, !useClientMode);",
                "     }",
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLParameters.java b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLParameters.java",
                "index c1101e055..c30223bc4 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLParameters.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLParameters.java",
                "@@ -44,4 +44,4 @@ class ProvSSLParameters",
                "     private String[] protocols;",
                "-    private boolean needClientAuth;",
                "-    private boolean wantClientAuth;",
                "+    private boolean needClientAuth = false;",
                "+    private boolean wantClientAuth = false;",
                "     private Object algorithmConstraints;      // object not introduced till 1.6",
                "@@ -52,5 +52,24 @@ class ProvSSLParameters",
                "-    public void setCipherSuites(String[] cipherSuites)",
                "+    ProvSSLParameters(String[] cipherSuites, String[] protocols)",
                "     {",
                "         this.cipherSuites = cipherSuites;",
                "+        this.protocols = protocols;",
                "+    }",
                "+",
                "+    ProvSSLParameters copy()",
                "+    {",
                "+        ProvSSLParameters p = new ProvSSLParameters(cipherSuites, protocols);",
                "+        p.needClientAuth = needClientAuth;",
                "+        p.wantClientAuth = wantClientAuth;",
                "+        p.algorithmConstraints = algorithmConstraints;",
                "+        p.endpointIdentificationAlgorithm = endpointIdentificationAlgorithm;",
                "+        p.useCipherSuitesOrder = useCipherSuitesOrder;",
                "+        p.sniMatchers = sniMatchers;",
                "+        p.sniServerNames = sniServerNames;",
                "+        return p;",
                "+    }",
                "+",
                "+    public void setCipherSuites(String[] cipherSuites)",
                "+    {",
                "+        this.cipherSuites = cipherSuites.clone();",
                "     }",
                "@@ -59,2 +78,8 @@ class ProvSSLParameters",
                "     {",
                "+        this.protocols = protocols.clone();",
                "+    }",
                "+",
                "+    void setProtocolsArray(String[] protocols)",
                "+    {",
                "+        // NOTE: The mechanism of ProvSSLContextSpi.updateDefaultProtocols depends on this not making a copy",
                "         this.protocols = protocols;",
                "@@ -65,2 +90,3 @@ class ProvSSLParameters",
                "         this.needClientAuth = needClientAuth;",
                "+        this.wantClientAuth = false;",
                "     }",
                "@@ -69,2 +95,3 @@ class ProvSSLParameters",
                "     {",
                "+        this.needClientAuth = false;",
                "         this.wantClientAuth = wantClientAuth;",
                "@@ -82,2 +109,8 @@ class ProvSSLParameters",
                "+    String[] getProtocolsArray()",
                "+    {",
                "+        // NOTE: The mechanism of ProvSSLContextSpi.updateDefaultProtocols depends on this not making a copy",
                "+        return protocols;",
                "+    }",
                "+",
                "     public boolean getNeedClientAuth()",
                "@@ -92,3 +125,2 @@ class ProvSSLParameters",
                "-",
                "     public Object getAlgorithmConstraints()",
                "@@ -142,30 +174,2 @@ class ProvSSLParameters",
                "     }",
                "-",
                "-    static ProvSSLParameters extractDefaultParameters(ProvSSLContextSpi context)",
                "-    {",
                "-        if (hasSslParameters)",
                "-        {",
                "-            return SSLParametersUtil.toProvSSLParameters(context.engineGetDefaultSSLParameters());",
                "-        }",
                "-        else",
                "-        {",
                "-            ProvSSLParameters params = new ProvSSLParameters();",
                "-",
                "-            String[] cipherSuites = context.getDefaultCipherSuites();",
                "-            if (cipherSuites != null)",
                "-            {",
                "-                params.setCipherSuites(cipherSuites);",
                "-            }",
                "-            String[] protocols = context.getDefaultProtocols();",
                "-            if (protocols != null)",
                "-            {",
                "-                params.setProtocols(protocols);",
                "-            }",
                "-",
                "-            params.setNeedClientAuth(false);",
                "-            params.setWantClientAuth(false);",
                "-",
                "-            return params;",
                "-        }",
                "-    }",
                " }",
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLServerSocket.java b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLServerSocket.java",
                "index 1c47e332f..b0237ee86 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLServerSocket.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLServerSocket.java",
                "@@ -9,3 +9,2 @@ import javax.net.ssl.SSLParameters;",
                " import javax.net.ssl.SSLServerSocket;",
                "-import javax.net.ssl.SSLSocket;",
                "@@ -14,7 +13,6 @@ class ProvSSLServerSocket",
                " {",
                "-",
                "     protected final ProvSSLContextSpi context;",
                "     protected final ContextData contextData;",
                "+    protected final ProvSSLParameters sslParameters;",
                "-    protected ProvSSLParameters sslParameters;",
                "     protected boolean enableSessionCreation = true;",
                "@@ -29,3 +27,3 @@ class ProvSSLServerSocket",
                "         this.contextData = contextData;",
                "-        this.sslParameters = ProvSSLParameters.extractDefaultParameters(context);",
                "+        this.sslParameters = context.getDefaultParameters(!useClientMode);",
                "     }",
                "@@ -39,3 +37,3 @@ class ProvSSLServerSocket",
                "         this.contextData = contextData;",
                "-        this.sslParameters = ProvSSLParameters.extractDefaultParameters(context);",
                "+        this.sslParameters = context.getDefaultParameters(!useClientMode);",
                "     }",
                "@@ -49,3 +47,3 @@ class ProvSSLServerSocket",
                "         this.contextData = contextData;",
                "-        this.sslParameters = ProvSSLParameters.extractDefaultParameters(context);",
                "+        this.sslParameters = context.getDefaultParameters(!useClientMode);",
                "     }",
                "@@ -59,3 +57,3 @@ class ProvSSLServerSocket",
                "         this.contextData = contextData;",
                "-        this.sslParameters = ProvSSLParameters.extractDefaultParameters(context);",
                "+        this.sslParameters = context.getDefaultParameters(!useClientMode);",
                "     }",
                "@@ -65,5 +63,4 @@ class ProvSSLServerSocket",
                "     {",
                "-//        SSLEngine engine = context.engineCreateSSLEngine(getInetAddress().getHostName(), getLocalPort());",
                "-//        SSLSocket socket = new ProvSSLSocket(engine);",
                "-        SSLSocket socket = new ProvSSLSocketDirect(context, contextData);",
                "+        ProvSSLSocketDirect socket = new ProvSSLSocketDirect(context, contextData, enableSessionCreation,",
                "+            useClientMode, sslParameters.copy());",
                "@@ -71,36 +68,2 @@ class ProvSSLServerSocket",
                "-        if (ProvSSLParameters.hasSslParameters)",
                "-        {",
                "-            socket.setSSLParameters(SSLParametersUtil.toSSLParameters(sslParameters));",
                "-        }",
                "-        else",
                "-        {",
                "-            String[] cipherSuites = sslParameters.getCipherSuites();",
                "-            if (cipherSuites != null)",
                "-            {",
                "-                socket.setEnabledCipherSuites(cipherSuites);",
                "-            }",
                "-            String[] protocols = sslParameters.getProtocols();",
                "-            if (protocols != null)",
                "-            {",
                "-                socket.setEnabledProtocols(protocols);",
                "-            }",
                "-",
                "-            if (sslParameters.getNeedClientAuth())",
                "-            {",
                "-                socket.setNeedClientAuth(true);",
                "-            }",
                "-            else if (sslParameters.getWantClientAuth())",
                "-            {",
                "-                socket.setWantClientAuth(true);",
                "-            }",
                "-            else",
                "-            {",
                "-                socket.setWantClientAuth(false);",
                "-            }",
                "-        }",
                "-",
                "-        socket.setEnableSessionCreation(enableSessionCreation);",
                "-        socket.setUseClientMode(useClientMode);",
                "-",
                "         return socket;",
                "@@ -111,3 +74,2 @@ class ProvSSLServerSocket",
                "     {",
                "-//        return super.getChannel();",
                "         throw new UnsupportedOperationException();",
                "@@ -142,3 +104,3 @@ class ProvSSLServerSocket",
                "     {",
                "-        return SSLParametersUtil.toSSLParameters(sslParameters);",
                "+        return SSLParametersUtil.getSSLParameters(sslParameters);",
                "     }",
                "@@ -206,3 +168,3 @@ class ProvSSLServerSocket",
                "     {",
                "-        this.sslParameters = SSLParametersUtil.toProvSSLParameters(sslParameters);",
                "+        SSLParametersUtil.setSSLParameters(this.sslParameters, sslParameters);",
                "     }",
                "@@ -213,2 +175,4 @@ class ProvSSLServerSocket",
                "         this.useClientMode = mode;",
                "+",
                "+        context.updateDefaultProtocols(sslParameters, !useClientMode);",
                "     }",
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketDirect.java b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketDirect.java",
                "index f7cbb2f2d..e04082f66 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketDirect.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketDirect.java",
                "@@ -28,4 +28,4 @@ class ProvSSLSocketDirect",
                "     protected final ContextData contextData;",
                "+    protected final ProvSSLParameters sslParameters;",
                "-    protected ProvSSLParameters sslParameters;",
                "     protected boolean enableSessionCreation = true;",
                "@@ -39,2 +39,15 @@ class ProvSSLSocketDirect",
                "+    /** This constructor is the one used (only) by ProvSSLServerSocket */",
                "+    ProvSSLSocketDirect(ProvSSLContextSpi context, ContextData contextData, boolean enableSessionCreation,",
                "+        boolean useClientMode, ProvSSLParameters sslParameters)",
                "+    {",
                "+        super();",
                "+",
                "+        this.context = context;",
                "+        this.contextData = contextData;",
                "+        this.enableSessionCreation = enableSessionCreation;",
                "+        this.useClientMode = useClientMode;",
                "+        this.sslParameters = sslParameters;",
                "+    }",
                "+",
                "     protected ProvSSLSocketDirect(ProvSSLContextSpi context, ContextData contextData)",
                "@@ -45,3 +58,3 @@ class ProvSSLSocketDirect",
                "         this.contextData = contextData;",
                "-        this.sslParameters = ProvSSLParameters.extractDefaultParameters(context);",
                "+        this.sslParameters = context.getDefaultParameters(!useClientMode);",
                "     }",
                "@@ -55,3 +68,3 @@ class ProvSSLSocketDirect",
                "         this.contextData = contextData;",
                "-        this.sslParameters = ProvSSLParameters.extractDefaultParameters(context);",
                "+        this.sslParameters = context.getDefaultParameters(!useClientMode);",
                "     }",
                "@@ -64,3 +77,3 @@ class ProvSSLSocketDirect",
                "         this.contextData = contextData;",
                "-        this.sslParameters = ProvSSLParameters.extractDefaultParameters(context);",
                "+        this.sslParameters = context.getDefaultParameters(!useClientMode);",
                "     }",
                "@@ -74,3 +87,3 @@ class ProvSSLSocketDirect",
                "         this.contextData = contextData;",
                "-        this.sslParameters = ProvSSLParameters.extractDefaultParameters(context);",
                "+        this.sslParameters = context.getDefaultParameters(!useClientMode);",
                "     }",
                "@@ -83,3 +96,3 @@ class ProvSSLSocketDirect",
                "         this.contextData = contextData;",
                "-        this.sslParameters = ProvSSLParameters.extractDefaultParameters(context);",
                "+        this.sslParameters = context.getDefaultParameters(!useClientMode);",
                "     }",
                "@@ -173,8 +186,3 @@ class ProvSSLSocketDirect",
                "     {",
                "-        return SSLParametersUtil.toSSLParameters(sslParameters);",
                "-    }",
                "-",
                "-    public synchronized ProvSSLParameters getProvSSLParameters()",
                "-    {",
                "-        return sslParameters;",
                "+        return SSLParametersUtil.getSSLParameters(sslParameters);",
                "     }",
                "@@ -242,3 +250,3 @@ class ProvSSLSocketDirect",
                "     {",
                "-        this.sslParameters = SSLParametersUtil.toProvSSLParameters(sslParameters);",
                "+        SSLParametersUtil.setSSLParameters(this.sslParameters, sslParameters);",
                "     }",
                "@@ -248,3 +256,8 @@ class ProvSSLSocketDirect",
                "     {",
                "-        if (initialHandshakeBegun && mode != this.useClientMode)",
                "+        if (this.useClientMode == mode)",
                "+        {",
                "+            return;",
                "+        }",
                "+",
                "+        if (initialHandshakeBegun)",
                "         {",
                "@@ -254,2 +267,4 @@ class ProvSSLSocketDirect",
                "         this.useClientMode = mode;",
                "+",
                "+        context.updateDefaultProtocols(sslParameters, !useClientMode);",
                "     }",
                "@@ -282,3 +297,3 @@ class ProvSSLSocketDirect",
                "-                ProvTlsClient client = new ProvTlsClient(this);",
                "+                ProvTlsClient client = new ProvTlsClient(this, sslParameters.copy());",
                "                 this.protocolPeer = client;",
                "@@ -292,3 +307,3 @@ class ProvSSLSocketDirect",
                "-                ProvTlsServer server = new ProvTlsServer(this);",
                "+                ProvTlsServer server = new ProvTlsServer(this, sslParameters.copy());",
                "                 this.protocolPeer = server;",
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketWrap.java b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketWrap.java",
                "index 219727621..0f6c73cb8 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketWrap.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketWrap.java",
                "@@ -31,3 +31,2 @@ class ProvSSLSocketWrap",
                "     protected final ContextData contextData;",
                "-",
                "     protected final Socket wrapSocket;",
                "@@ -36,4 +35,4 @@ class ProvSSLSocketWrap",
                "     protected final boolean wrapAutoClose;",
                "+    protected final ProvSSLParameters sslParameters;",
                "-    protected ProvSSLParameters sslParameters;",
                "     protected boolean enableSessionCreation = true;",
                "@@ -57,3 +56,3 @@ class ProvSSLSocketWrap",
                "         this.wrapAutoClose = autoClose;",
                "-        this.sslParameters = ProvSSLParameters.extractDefaultParameters(context);",
                "+        this.sslParameters = context.getDefaultParameters(!useClientMode);",
                "     }",
                "@@ -241,8 +240,3 @@ class ProvSSLSocketWrap",
                "     {",
                "-        return SSLParametersUtil.toSSLParameters(sslParameters);",
                "-    }",
                "-",
                "-    public synchronized ProvSSLParameters getProvSSLParameters()",
                "-    {",
                "-        return sslParameters;",
                "+        return SSLParametersUtil.getSSLParameters(sslParameters);",
                "     }",
                "@@ -382,3 +376,3 @@ class ProvSSLSocketWrap",
                "     {",
                "-        this.sslParameters = SSLParametersUtil.toProvSSLParameters(sslParameters);",
                "+        SSLParametersUtil.setSSLParameters(this.sslParameters, sslParameters);",
                "     }",
                "@@ -412,3 +406,8 @@ class ProvSSLSocketWrap",
                "     {",
                "-        if (initialHandshakeBegun && mode != this.useClientMode)",
                "+        if (this.useClientMode == mode)",
                "+        {",
                "+            return;",
                "+        }",
                "+",
                "+        if (initialHandshakeBegun)",
                "         {",
                "@@ -418,2 +417,4 @@ class ProvSSLSocketWrap",
                "         this.useClientMode = mode;",
                "+",
                "+        context.updateDefaultProtocols(sslParameters, !useClientMode);",
                "     }",
                "@@ -446,3 +447,3 @@ class ProvSSLSocketWrap",
                "-                ProvTlsClient client = new ProvTlsClient(this);",
                "+                ProvTlsClient client = new ProvTlsClient(this, sslParameters.copy());",
                "                 this.protocolPeer = client;",
                "@@ -456,3 +457,3 @@ class ProvSSLSocketWrap",
                "-                ProvTlsServer server = new ProvTlsServer(this);",
                "+                ProvTlsServer server = new ProvTlsServer(this, sslParameters.copy());",
                "                 this.protocolPeer = server;",
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvTlsClient.java b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvTlsClient.java",
                "index 9699db5ad..a282e751a 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvTlsClient.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvTlsClient.java",
                "@@ -8,3 +8,2 @@ import java.security.PrivateKey;",
                " import java.security.cert.X509Certificate;",
                "-import java.util.Hashtable;",
                " import java.util.List;",
                "@@ -32,3 +31,2 @@ import org.bouncycastle.tls.ProtocolVersion;",
                " import org.bouncycastle.tls.ServerName;",
                "-import org.bouncycastle.tls.ServerNameList;",
                " import org.bouncycastle.tls.SignatureAndHashAlgorithm;",
                "@@ -36,3 +34,2 @@ import org.bouncycastle.tls.TlsAuthentication;",
                " import org.bouncycastle.tls.TlsCredentials;",
                "-import org.bouncycastle.tls.TlsExtensionsUtils;",
                " import org.bouncycastle.tls.TlsFatalAlert;",
                "@@ -64,3 +61,3 @@ class ProvTlsClient",
                "-    ProvTlsClient(ProvTlsManager manager)",
                "+    ProvTlsClient(ProvTlsManager manager, ProvSSLParameters sslParameters)",
                "     {",
                "@@ -69,3 +66,3 @@ class ProvTlsClient",
                "         this.manager = manager;",
                "-        this.sslParameters = manager.getProvSSLParameters();",
                "+        this.sslParameters = sslParameters;",
                "     }",
                "@@ -89,3 +86,3 @@ class ProvTlsClient",
                "         {",
                "-            List<BCSNIServerName> sniServerNames = manager.getProvSSLParameters().getServerNames();",
                "+            List<BCSNIServerName> sniServerNames = sslParameters.getServerNames();",
                "             if (sniServerNames == null)",
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvTlsManager.java b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvTlsManager.java",
                "index 35e83370c..10cbddef8 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvTlsManager.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvTlsManager.java",
                "@@ -10,4 +10,2 @@ interface ProvTlsManager",
                "-    ProvSSLParameters getProvSSLParameters();",
                "-",
                "     ContextData getContextData();",
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvTlsServer.java b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvTlsServer.java",
                "index 7905809c3..3ecc9f9bb 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvTlsServer.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvTlsServer.java",
                "@@ -64,3 +64,3 @@ class ProvTlsServer",
                "-    ProvTlsServer(ProvTlsManager manager) throws SSLException",
                "+    ProvTlsServer(ProvTlsManager manager, ProvSSLParameters sslParameters) throws SSLException",
                "     {",
                "@@ -69,3 +69,3 @@ class ProvTlsServer",
                "         this.manager = manager;",
                "-        this.sslParameters = manager.getProvSSLParameters();",
                "+        this.sslParameters = sslParameters;",
                "@@ -406,3 +406,3 @@ class ProvTlsServer",
                "              */",
                "-            Collection<BCSNIMatcher> sniMatchers = manager.getProvSSLParameters().getSNIMatchers();",
                "+            Collection<BCSNIMatcher> sniMatchers = sslParameters.getSNIMatchers();",
                "             if (sniMatchers != null && !sniMatchers.isEmpty())",
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/SSLParametersUtil.java b/tls/src/main/java/org/bouncycastle/jsse/provider/SSLParametersUtil.java",
                "index d83343a75..76784b4fb 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/provider/SSLParametersUtil.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/SSLParametersUtil.java",
                "@@ -135,7 +135,7 @@ abstract class SSLParametersUtil",
                "-    static SSLParameters toSSLParameters(final ProvSSLParameters provSslParameters)",
                "+    static SSLParameters getSSLParameters(ProvSSLParameters prov)",
                "     {",
                "-        final SSLParameters r = new SSLParameters();",
                "-        r.setCipherSuites(provSslParameters.getCipherSuites());",
                "-        r.setProtocols(provSslParameters.getProtocols());",
                "+        SSLParameters ssl = new SSLParameters();",
                "+        ssl.setCipherSuites(prov.getCipherSuites());",
                "+        ssl.setProtocols(prov.getProtocols());",
                "         // From JDK 1.7",
                "@@ -143,3 +143,3 @@ abstract class SSLParametersUtil",
                "         {",
                "-            invokeSetterPrivileged(r, setAlgorithmConstraints, provSslParameters.getAlgorithmConstraints());",
                "+            invokeSetterPrivileged(ssl, setAlgorithmConstraints, prov.getAlgorithmConstraints());",
                "         }",
                "@@ -147,3 +147,3 @@ abstract class SSLParametersUtil",
                "         {",
                "-            invokeSetterPrivileged(r, setEndpointIdentificationAlgorithm, provSslParameters.getEndpointIdentificationAlgorithm());",
                "+            invokeSetterPrivileged(ssl, setEndpointIdentificationAlgorithm, prov.getEndpointIdentificationAlgorithm());",
                "         }",
                "@@ -152,3 +152,3 @@ abstract class SSLParametersUtil",
                "         {",
                "-            invokeSetterPrivileged(r, setServerNames, JsseUtils_8.exportSNIServerNames(provSslParameters.getServerNames()));",
                "+            invokeSetterPrivileged(ssl, setServerNames, JsseUtils_8.exportSNIServerNames(prov.getServerNames()));",
                "         }",
                "@@ -158,3 +158,3 @@ abstract class SSLParametersUtil",
                "         {",
                "-            invokeSetterPrivileged(r, setUseCipherSuitesOrder, provSslParameters.getUseCipherSuitesOrder());",
                "+            invokeSetterPrivileged(ssl, setUseCipherSuitesOrder, prov.getUseCipherSuitesOrder());",
                "         }",
                "@@ -162,9 +162,9 @@ abstract class SSLParametersUtil",
                "         // NOTE: The client-auth setters each clear the other client-auth property, so only one can be set",
                "-        if (provSslParameters.getNeedClientAuth())",
                "+        if (prov.getNeedClientAuth())",
                "         {",
                "-            r.setNeedClientAuth(true);",
                "+            ssl.setNeedClientAuth(true);",
                "         }",
                "-        else if (provSslParameters.getWantClientAuth())",
                "+        else if (prov.getWantClientAuth())",
                "         {",
                "-            r.setWantClientAuth(true);",
                "+            ssl.setWantClientAuth(true);",
                "         }",
                "@@ -172,47 +172,72 @@ abstract class SSLParametersUtil",
                "         {",
                "-            r.setWantClientAuth(false);",
                "+            ssl.setWantClientAuth(false);",
                "         }",
                "-        return r;",
                "+        return ssl;",
                "     }",
                "-    static ProvSSLParameters toProvSSLParameters(final SSLParameters sslParameters)",
                "+    static void setSSLParameters(ProvSSLParameters prov, SSLParameters ssl)",
                "     {",
                "-        final ProvSSLParameters r = new ProvSSLParameters();",
                "-        r.setCipherSuites(sslParameters.getCipherSuites());",
                "-        r.setProtocols(sslParameters.getProtocols());",
                "-        // From JDK 1.7",
                "-        if (getAlgorithmConstraints != null)",
                "+        String[] cipherSuites = ssl.getCipherSuites();",
                "+        if (cipherSuites != null)",
                "         {",
                "-            r.setAlgorithmConstraints(invokeGetterPrivileged(sslParameters, getAlgorithmConstraints));",
                "+            prov.setCipherSuites(cipherSuites);",
                "         }",
                "-        if (getEndpointIdentificationAlgorithm != null)",
                "+",
                "+        String[] protocols = ssl.getProtocols();",
                "+        if (protocols != null)",
                "         {",
                "-            r.setEndpointIdentificationAlgorithm((String)invokeGetterPrivileged(sslParameters, getEndpointIdentificationAlgorithm));",
                "+            prov.setProtocols(protocols);",
                "         }",
                "-        // From JDK 1.8",
                "-        if (getServerNames != null)",
                "+",
                "+        // NOTE: The client-auth setters each clear the other client-auth property, so only one can be set",
                "+        if (ssl.getNeedClientAuth())",
                "         {",
                "-            r.setServerNames(JsseUtils_8.importSNIServerNames(invokeGetterPrivileged(sslParameters, getServerNames)));",
                "+            prov.setNeedClientAuth(true);",
                "         }",
                "-        // TODO[jsse] From JDK 1.8",
                "-//        r.setSNIMatchers(p.getSNIMatchers());",
                "-        if (getUseCipherSuitesOrder != null)",
                "+        else if (ssl.getWantClientAuth())",
                "+        {",
                "+            prov.setWantClientAuth(true);",
                "+        }",
                "+        else",
                "         {",
                "-            r.setUseCipherSuitesOrder((Boolean)invokeGetterPrivileged(sslParameters, getUseCipherSuitesOrder));",
                "+            prov.setWantClientAuth(false);",
                "         }",
                "-        // NOTE: The client-auth setters each clear the other client-auth property, so only one can be set",
                "-        if (sslParameters.getNeedClientAuth())",
                "+        // From JDK 1.7",
                "+",
                "+        if (getAlgorithmConstraints != null)",
                "         {",
                "-            r.setNeedClientAuth(true);",
                "+            prov.setAlgorithmConstraints(invokeGetterPrivileged(ssl, getAlgorithmConstraints));",
                "         }",
                "-        else if (sslParameters.getWantClientAuth())",
                "+",
                "+        if (getEndpointIdentificationAlgorithm != null)",
                "         {",
                "-            r.setWantClientAuth(true);",
                "+            prov.setEndpointIdentificationAlgorithm((String)invokeGetterPrivileged(ssl, getEndpointIdentificationAlgorithm));",
                "         }",
                "-        else",
                "+",
                "+        // From JDK 1.8",
                "+",
                "+        if (getUseCipherSuitesOrder != null)",
                "+        {",
                "+            prov.setUseCipherSuitesOrder((Boolean)invokeGetterPrivileged(ssl, getUseCipherSuitesOrder));",
                "+        }",
                "+",
                "+        if (getServerNames != null)",
                "         {",
                "-            r.setWantClientAuth(false);",
                "+            Object serverNames = invokeGetterPrivileged(ssl, getServerNames);",
                "+            if (serverNames != null)",
                "+            {",
                "+                prov.setServerNames(JsseUtils_8.importSNIServerNames(serverNames));",
                "+            }",
                "         }",
                "-        return r;",
                "+",
                "+        // TODO[jsse]",
                "+//        if (getSNIMatchers != null)",
                "+//        {",
                "+//            Object sniMatchers = invokerGetterPrivileged(ssl, getSNIMatchers);",
                "+//            if (sniMatchers != null)",
                "+//            {",
                "+//                prov.setSNIMatchers(JsseUtils_8.importSNIMatchers(sniMatchers));",
                "+//            }",
                "+//        }",
                "     }"
            ],
            "changed_files": [
                "tls/src/main/java/org/bouncycastle/jsse/provider/BouncyCastleJsseProvider.java",
                "tls/src/main/java/org/bouncycastle/jsse/provider/JsseUtils.java",
                "tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLContextSpi.java",
                "tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLEngine.java",
                "tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLParameters.java",
                "tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLServerSocket.java",
                "tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketDirect.java",
                "tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketWrap.java",
                "tls/src/main/java/org/bouncycastle/jsse/provider/ProvTlsClient.java",
                "tls/src/main/java/org/bouncycastle/jsse/provider/ProvTlsManager.java",
                "tls/src/main/java/org/bouncycastle/jsse/provider/ProvTlsServer.java",
                "tls/src/main/java/org/bouncycastle/jsse/provider/SSLParametersUtil.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "1acb7ec3194a95cc734327f291a58e2bc35b319a"
                ],
                [
                    "no-tag",
                    "1776fd7132f723ebaeb73cbf59de396f03be91a1"
                ]
            ],
            "tags": [
                "r1v60"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7297bb1d06f60a6c2bfbf49b7001ad9b06cae823",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1515423461,
            "hunks": 1,
            "message": "Remove unnecessary override",
            "diff": [
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLContextSpi.java b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLContextSpi.java",
                "index cc115e865..545efbc72 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLContextSpi.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLContextSpi.java",
                "@@ -484,8 +484,2 @@ class ProvSSLContextSpi",
                "-    @Override",
                "-    protected SSLParameters engineGetDefaultSSLParameters()",
                "-    {",
                "-        return super.engineGetDefaultSSLParameters();",
                "-    }",
                "-",
                "     @Override"
            ],
            "changed_files": [
                "tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLContextSpi.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "563bc5ae93abab547fdabed1fed933847b4ac9f6"
                ],
                [
                    "no-tag",
                    "d159eb2f1d10a8884d356afa5630b6874624f092"
                ]
            ],
            "tags": [
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "443bfb6b503e02394afb09eb3599635011053d9a",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1517445518,
            "hunks": 200,
            "message": "Updated version",
            "diff": [
                "diff --git a/docs/releasenotes.html b/docs/releasenotes.html",
                "index 7bbaec517..eb47467a4 100644",
                "--- a/docs/releasenotes.html",
                "+++ b/docs/releasenotes.html",
                "@@ -25,5 +25,14 @@ to conform the algorithms to the JCE framework.",
                " <h3>2.1.1 Version</h3>",
                "+Release: 1.60<br/>",
                "+Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2018",
                "+<h3>2.1.2 Defects Fixed</h3>",
                "+<ul>",
                "+</ul>",
                "+<h3>2.1.3 Additional Features and Functionality</h3>",
                "+<ul>",
                "+</ul>",
                "+<h3>2.2.1 Version</h3>",
                " Release: 1.59 <br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2017, December 28",
                "-<h3>2.1.2 Defects Fixed</h3>",
                "+<h3>2.2.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -41,3 +50,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2017, December 28",
                " </ul>",
                "-<h3>2.1.3 Additional Features and Functionality</h3>",
                "+<h3>2.2.3 Additional Features and Functionality</h3>",
                " <ul>",
                "@@ -59,3 +68,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2017, December 28",
                " </ul>",
                "-<h3>2.1.4 Security Related Changes and CVE's Addressed by this Release</h3>",
                "+<h3>2.2.4 Security Related Changes and CVE's Addressed by this Release</h3>",
                " <ul>",
                "@@ -64,6 +73,6 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2017, December 28",
                "-<h3>2.2.1 Version</h3>",
                "+<h3>2.3.1 Version</h3>",
                " Release: 1.58 <br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2017, August 18",
                "-<h3>2.2.2 Defects Fixed</h3>",
                "+<h3>2.3.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -80,3 +89,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2017, August 18",
                " </ul>",
                "-<h3>2.2.3 Additional Features and Functionality</h3>",
                "+<h3>2.3.3 Additional Features and Functionality</h3>",
                " <ul>",
                "@@ -100,3 +109,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2017, August 18",
                " </ul>",
                "-<h3>2.2.4 Removed Features and Functionality</h3>",
                "+<h3>2.3.4 Removed Features and Functionality</h3>",
                " <ul>",
                "@@ -106,6 +115,6 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2017, August 18",
                "-<h3>2.3.1 Version</h3>",
                "+<h3>2.4.1 Version</h3>",
                " Release: 1.57 <br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2017, May 11",
                "-<h3>2.3.2 Defects Fixed</h3>",
                "+<h3>2.4.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -126,3 +135,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2017, May 11",
                " </ul>",
                "-<h3>2.3.3 Additional Features and Functionality</h3>",
                "+<h3>2.4.3 Additional Features and Functionality</h3>",
                " <ul>",
                "@@ -136,3 +145,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2017, May 11",
                " </ul>",
                "-<h3>2.3.4 Security Related Changes</h3>",
                "+<h3>2.4.4 Security Related Changes</h3>",
                " <ul>",
                "@@ -142,6 +151,6 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2017, May 11",
                "-<h3>2.4.1 Version</h3>",
                "+<h3>2.5.1 Version</h3>",
                " Release: 1.56 <br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2016, December 23",
                "-<h3>2.4.2 Defects Fixed</h3>",
                "+<h3>2.5.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -152,3 +161,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2016, December 23",
                " </ul>",
                "-<h3>2.4.3 Additional Features and Functionality</h3>",
                "+<h3>2.5.3 Additional Features and Functionality</h3>",
                " <ul>",
                "@@ -168,3 +177,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2016, December 23",
                " </ul>",
                "-<h3>2.4.4 Security Related Changes and CVE's Addressed by this Release</h3>",
                "+<h3>2.5.4 Security Related Changes and CVE's Addressed by this Release</h3>",
                " <ul>",
                "@@ -188,3 +197,3 @@ Carry propagation bugs in the implementation of squaring for several raw math cl",
                " </ul>",
                "-<h3>2.4.5 Security Advisory</h3>",
                "+<h3>2.5.5 Security Advisory</h3>",
                " <ul>",
                "@@ -193,6 +202,6 @@ Carry propagation bugs in the implementation of squaring for several raw math cl",
                "-<h3>2.5.1 Version</h3>",
                "+<h3>2.6.1 Version</h3>",
                " Release: 1.55 <br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2016, August 18",
                "-<h3>2.5.2 Defects Fixed</h3>",
                "+<h3>2.6.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -217,3 +226,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2016, August 18",
                " </ul>",
                "-<h3>2.5.3 Additional Features and Functionality</h3>",
                "+<h3>2.6.3 Additional Features and Functionality</h3>",
                " <ul>",
                "@@ -235,6 +244,6 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2016, August 18",
                "-<h3>2.6.1 Version</h3>",
                "+<h3>2.7.1 Version</h3>",
                " Release: 1.54 <br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2015, December 29",
                "-<h3>2.6.2 Defects Fixed</h3>",
                "+<h3>2.7.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -247,3 +256,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2015, December 29",
                " </ul>",
                "-<h3>2.6.3 Additional Features and Functionality</h3>",
                "+<h3>2.7.3 Additional Features and Functionality</h3>",
                " <ul>",
                "@@ -257,3 +266,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2015, December 29",
                " </ul>",
                "-<h3>2.6.4 Security Advisory</h3>",
                "+<h3>2.7.4 Security Advisory</h3>",
                " <ul>",
                "@@ -261,3 +270,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2015, December 29",
                " </ul>",
                "-<h3>2.6.5 Notes</h3>",
                "+<h3>2.7.5 Notes</h3>",
                " <p>",
                "@@ -266,6 +275,6 @@ If you have been using Serpent, you will need to either change to Tnepres, or ta",
                "-<h3>2.7.1 Version</h3>",
                "+<h3>2.8.1 Version</h3>",
                " Release: 1.53 <br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2015, October 10",
                "-<h3>2.7.2 Defects Fixed</h3>",
                "+<h3>2.8.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -294,3 +303,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2015, October 10",
                " </ul>",
                "-<h3>2.7.3 Additional Features and Functionality</h3>",
                "+<h3>2.8.3 Additional Features and Functionality</h3>",
                " <ul>",
                "@@ -310,3 +319,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2015, October 10",
                " </ul>",
                "-<h3>2.7.4 Notes</h3>",
                "+<h3>2.8.4 Notes</h3>",
                " <p>",
                "@@ -315,6 +324,6 @@ It turns out there was a similar, but different, issue in Crypto++ to the BC iss",
                "-<h3>2.8.1 Version</h3>",
                "+<h3>2.9.1 Version</h3>",
                " Release: 1.52<br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2015, March 2",
                "-<h3>2.8.2 Defects Fixed</h3>",
                "+<h3>2.9.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -335,3 +344,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2015, March 2",
                " </ul>",
                "-<h3>2.8.3 Additional Features and Functionality</h3>",
                "+<h3>2.9.3 Additional Features and Functionality</h3>",
                " <ul>",
                "@@ -362,3 +371,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2015, March 2",
                " </ul>",
                "-<h3>2.8.4 Security Advisory</h3>",
                "+<h3>2.9.4 Security Advisory</h3>",
                " <ul>",
                "@@ -367,6 +376,6 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2015, March 2",
                "-<h3>2.9.1 Version</h3>",
                "+<h3>2.10.1 Version</h3>",
                " Release: 1.51<br />",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2014, July 28",
                "-<h3>2.9.2 Defects Fixed</h3>",
                "+<h3>2.10.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -385,3 +394,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2014, July 28",
                " </ul>",
                "-<h3>2.9.3 Additional Features and Functionality</h3>",
                "+<h3>2.10.3 Additional Features and Functionality</h3>",
                " <ul>",
                "@@ -412,3 +421,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2014, July 28",
                " </ul>",
                "-<h3>2.9.4 Notes</h3>",
                "+<h3>2.10.4 Notes</h3>",
                " <ul>",
                "@@ -418,6 +427,6 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2014, July 28",
                " </ul>",
                "-<h3>2.10.1 Version</h3>",
                "+<h3>2.11.1 Version</h3>",
                " Release: 1.50<br />",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2013, December 3",
                "-<h3>2.10.2 Defects Fixed</h3>",
                "+<h3>2.11.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -435,3 +444,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2013, December 3",
                " </ul>",
                "-<h3>2.10.3 Additional Features and Functionality</h3>",
                "+<h3>2.11.3 Additional Features and Functionality</h3>",
                " <ul>",
                "@@ -455,3 +464,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2013, December 3",
                " </ul>",
                "-<h3>2.10.4 Notes</h3>",
                "+<h3>2.11.4 Notes</h3>",
                " <ul>",
                "@@ -465,6 +474,6 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2013, December 3",
                "-<h3>2.11.1 Version</h3>",
                "+<h3>2.12.1 Version</h3>",
                " Release: 1.49<br />",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2013, May 31",
                "-<h3>2.11.2 Defects Fixed</h3>",
                "+<h3>2.12.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -479,3 +488,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2013, May 31",
                " </ul>",
                "-<h3>2.11.3 Additional Features and Functionality</h3>",
                "+<h3>2.12.3 Additional Features and Functionality</h3>",
                " <ul>",
                "@@ -508,3 +517,3 @@ class NonMemoableDigest has been added which hides the Memoable interface where",
                " </ul>",
                "-<h3>2.11.4 Notes</h3>",
                "+<h3>2.12.4 Notes</h3>",
                " <ul>",
                "@@ -514,6 +523,6 @@ class NonMemoableDigest has been added which hides the Memoable interface where",
                "-<h3>2.12.1 Version</h3>",
                "+<h3>2.13.1 Version</h3>",
                " Release: 1.48<br />",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2013, February 10",
                "-<h3>2.12.2 Defects Fixed</h3>",
                "+<h3>2.13.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -529,3 +538,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2013, February 10",
                "-<h3>2.12.3 Additional Features and Functionality</h3>",
                "+<h3>2.13.3 Additional Features and Functionality</h3>",
                " <ul>",
                "@@ -544,6 +553,6 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2013, February 10",
                "-<h3>2.13.1 Version</h3>",
                "+<h3>2.14.1 Version</h3>",
                " Release: 1.47<br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2012, March 30",
                "-<h3>2.13.2 Defects Fixed</h3>",
                "+<h3>2.14.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -564,3 +573,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2012, March 30",
                "-<h3>2.13.3 Additional Features and Functionality</h3>",
                "+<h3>2.14.3 Additional Features and Functionality</h3>",
                " <ul>",
                "@@ -584,3 +593,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2012, March 30",
                "-<h3>2.13.4 Other notes</h3>",
                "+<h3>2.14.4 Other notes</h3>",
                " <p>",
                "@@ -589,6 +598,6 @@ Okay, so we have had to do another release. The issue we have run into is that w",
                "-<h3>2.14.1 Version</h3>",
                "+<h3>2.15.1 Version</h3>",
                " Release: 1.46</br>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2011, February 23",
                "-<h3>2.14.2 Defects Fixed</h3>",
                "+<h3>2.15.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -601,3 +610,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2011, February 23",
                " </ul>",
                "-<h3>2.14.3 Additional Features and Functionality</h3>",
                "+<h3>2.15.3 Additional Features and Functionality</h3>",
                " <ul>",
                "@@ -618,3 +627,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2011, February 23",
                " </ul>",
                "-<h3>2.14.4 Other notes</h3>",
                "+<h3>2.15.4 Other notes</h3>",
                " <p>",
                "@@ -636,6 +645,6 @@ So there are four things useful to know about this release:",
                " </p>",
                "-<h3>2.15.1 Version</h3>",
                "+<h3>2.16.1 Version</h3>",
                " Release: 1.45<br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2010, January 12",
                "-<h3>2.15.2 Defects Fixed</h3>",
                "+<h3>2.16.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -646,3 +655,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2010, January 12",
                " </ul>",
                "-<h3>2.15.3 Additional Features and Functionality</h3>",
                "+<h3>2.16.3 Additional Features and Functionality</h3>",
                " <ul>",
                "@@ -650,3 +659,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2010, January 12",
                " </ul>",
                "-<h3>2.15.4 Security Advisory</h3>",
                "+<h3>2.16.4 Security Advisory</h3>",
                " <ul>",
                "@@ -655,6 +664,6 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2010, January 12",
                "-<h3>2.16.1 Version</h3>",
                "+<h3>2.17.1 Version</h3>",
                " Release: 1.44<br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2009, October 9",
                "-<h3>2.16.2 Defects Fixed</h3>",
                "+<h3>2.17.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -674,3 +683,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2009, October 9",
                " </ul>",
                "-<h3>2.16.3 Additional Features and Functionality</h3>",
                "+<h3>2.17.3 Additional Features and Functionality</h3>",
                " <ul>",
                "@@ -690,6 +699,6 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2009, October 9",
                "-<h3>2.17.1 Version</h3>",
                "+<h3>2.18.1 Version</h3>",
                " Release: 1.43<br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2009, April 13",
                "-<h3>2.17.2 Defects Fixed</h3>",
                "+<h3>2.18.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -699,3 +708,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2009, April 13",
                " </ul>",
                "-<h3>2.17.3 Security Advisory</h3>",
                "+<h3>2.18.3 Security Advisory</h3>",
                " <ul>",
                "@@ -704,6 +713,6 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2009, April 13",
                "-<h3>2.18.1 Version</h3>",
                "+<h3>2.19.1 Version</h3>",
                " Release: 1.42<br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2009, March 16",
                "-<h3>2.18.2 Defects Fixed</h3>",
                "+<h3>2.19.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -720,3 +729,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2009, March 16",
                " </ul>",
                "-<h3>2.18.3 Additional Features and Functionality</h3>",
                "+<h3>2.19.3 Additional Features and Functionality</h3>",
                " <ul>",
                "@@ -731,6 +740,6 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2009, March 16",
                "-<h3>2.19.1 Version</h3>",
                "+<h3>2.20.1 Version</h3>",
                " Release: 1.41<br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2008, October 1",
                "-<h3>2.19.2 Defects Fixed</h3>",
                "+<h3>2.20.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -745,3 +754,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2008, October 1",
                " </ul>",
                "-<h3>2.19.3 Additional Features and Functionality</h3>",
                "+<h3>2.20.3 Additional Features and Functionality</h3>",
                " <ul>",
                "@@ -756,6 +765,6 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2008, October 1",
                "-<h3>2.20.1 Version</h3>",
                "+<h3>2.21.1 Version</h3>",
                " Release: 1.40<br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2008, July 12",
                "-<h3>2.20.2 Defects Fixed</h3>",
                "+<h3>2.21.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -775,3 +784,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2008, July 12",
                " </ul>",
                "-<h3>2.20.3 Additional Features and Functionality</h3>",
                "+<h3>2.21.3 Additional Features and Functionality</h3>",
                " <ul>",
                "@@ -783,3 +792,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2008, July 12",
                " </ul>",
                "-<h3>2.20.4 Additional Notes</h3>",
                "+<h3>2.21.4 Additional Notes</h3>",
                " <ul>",
                "@@ -788,6 +797,6 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2008, July 12",
                "-<h3>2.21.1 Version</h3>",
                "+<h3>2.22.1 Version</h3>",
                " Release: 1.39<br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2008, March 29",
                "-<h3>2.21.2 Defects Fixed</h3>",
                "+<h3>2.22.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -805,3 +814,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2008, March 29",
                " </ul>",
                "-<h3>2.21.3 Additional Features and Functionality</h3>",
                "+<h3>2.22.3 Additional Features and Functionality</h3>",
                " <ul>",
                "@@ -819,6 +828,6 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2008, March 29",
                " </ul>",
                "-<h3>2.22.1 Version</h3>",
                "+<h3>2.23.1 Version</h3>",
                " Release: 1.38<br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2007, November 7",
                "-<h3>2.22.2 Defects Fixed</h3>",
                "+<h3>2.23.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -836,3 +845,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2007, November 7",
                " </ul>",
                "-<h3>2.22.3 Additional Features and Functionality</h3>",
                "+<h3>2.23.3 Additional Features and Functionality</h3>",
                " <ul>",
                "@@ -847,6 +856,6 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2007, November 7",
                " </ul>",
                "-<h3>2.23.1 Version</h3>",
                "+<h3>2.24.1 Version</h3>",
                " Release: 1.37<br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2007, June 15",
                "-<h3>2.23.2 Defects Fixed</h3>",
                "+<h3>2.24.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -864,3 +873,3 @@ the file to be signed. This has been fixed.</li>",
                " </ul>",
                "-<h3>2.23.3 Additional Features and Functionality</h3>",
                "+<h3>2.24.3 Additional Features and Functionality</h3>",
                " <ul>",
                "@@ -883,6 +892,6 @@ the file to be signed. This has been fixed.</li>",
                "-<h3>2.24.1 Version</h3>",
                "+<h3>2.25.1 Version</h3>",
                " Release: 1.36<br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2007, March 16",
                "-<h3>2.24.2 Defects Fixed</h3>",
                "+<h3>2.25.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -900,3 +909,3 @@ regression for processing some messages with embedded multiparts that contained",
                " </ul>",
                "-<h3>2.24.3 Additional Features and Functionality</h3>",
                "+<h3>2.25.3 Additional Features and Functionality</h3>",
                " <ul>",
                "@@ -916,6 +925,6 @@ regression for processing some messages with embedded multiparts that contained",
                "-<h3>2.25.1 Version</h3>",
                "+<h3>2.26.1 Version</h3>",
                " Release: 1.35<br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2006, December 16",
                "-<h3>2.25.2 Defects Fixed</h3>",
                "+<h3>2.26.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -934,3 +943,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2006, December 16",
                " </ul>",
                "-<h3>2.25.3 Additional Features and Functionality</h3>",
                "+<h3>2.26.3 Additional Features and Functionality</h3>",
                " <ul>",
                "@@ -955,6 +964,6 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2006, December 16",
                " </ul>",
                "-<h3>2.26.1 Version</h3>",
                "+<h3>2.27.1 Version</h3>",
                " Release: 1.34<br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2006, October 2",
                "-<h3>2.26.2 Defects Fixed</h3>",
                "+<h3>2.27.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -970,3 +979,3 @@ Bleichenbacher's RSA signature forgery attack. This has been fixed.",
                " </ul>",
                "-<h3>2.26.3 Additional Features and Functionality</h3>",
                "+<h3>2.27.3 Additional Features and Functionality</h3>",
                " <ul>",
                "@@ -990,3 +999,3 @@ The build scripts now run this target by default.",
                " </ul>",
                "-<h3>2.26.4 Security Advisory</h3>",
                "+<h3>2.27.4 Security Advisory</h3>",
                " <ul>",
                "@@ -995,6 +1004,6 @@ will be possible for attackers to exploit some of Bleichenbacher's RSA signature",
                " </ul>",
                "-<h3>2.27.1 Version</h3>",
                "+<h3>2.28.1 Version</h3>",
                " Release: 1.33<br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2006, May 3",
                "-<h3>2.27.2 Defects Fixed</h3>",
                "+<h3>2.28.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -1007,3 +1016,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2006, May 3",
                " </ul>",
                "-<h3>2.27.3 Additional Features and Functionality</h3>",
                "+<h3>2.28.3 Additional Features and Functionality</h3>",
                " <ul>",
                "@@ -1015,6 +1024,6 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2006, May 3",
                "-<h3>2.28.1 Version</h3>",
                "+<h3>2.29.1 Version</h3>",
                " Release: 1.32<br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2006, March 27",
                "-<h3>2.28.2 Defects Fixed</h3>",
                "+<h3>2.29.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -1035,3 +1044,3 @@ which has a dispose method on it which should allow removal of the file backing",
                "-<h3>2.28.3 Additional Features and Functionality</h3>",
                "+<h3>2.29.3 Additional Features and Functionality</h3>",
                " <ul>",
                "@@ -1044,3 +1053,3 @@ which has a dispose method on it which should allow removal of the file backing",
                " </ul>",
                "-<h3>2.28.4 Possible compatibility issue</h3>",
                "+<h3>2.29.4 Possible compatibility issue</h3>",
                " <ul>",
                "@@ -1050,6 +1059,6 @@ Owing to patent issues in some jurisdictions, they are now generated with point",
                "-<h3>2.29.1 Version</h3>",
                "+<h3>2.30.1 Version</h3>",
                " Release: 1.31<br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2005, December 29",
                "-<h3>2.29.2 Defects Fixed</h3>",
                "+<h3>2.30.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -1066,3 +1075,3 @@ This has been fixed.",
                " </ul>",
                "-<h3>2.29.3 Additional Features and Functionality</h3>",
                "+<h3>2.30.3 Additional Features and Functionality</h3>",
                " <ul>",
                "@@ -1075,6 +1084,6 @@ This has been fixed.",
                "-<h3>2.30.1 Version</h3>",
                "+<h3>2.31.1 Version</h3>",
                " Release: 1.30<br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2005, September 18",
                "-<h3>2.30.2 Defects Fixed</h3>",
                "+<h3>2.31.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -1090,3 +1099,3 @@ ASN.1 encoding. This has been fixed.",
                " </ul>",
                "-<h3>2.30.3 Additional Features and Functionality</h3>",
                "+<h3>2.31.3 Additional Features and Functionality</h3>",
                " <ul>",
                "@@ -1101,6 +1110,6 @@ ASN.1 encoding. This has been fixed.",
                "-<h3>2.31.1 Version</h3>",
                "+<h3>2.32.1 Version</h3>",
                " Release: 1.29<br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2005, June 27",
                "-<h3>2.31.2 Defects Fixed</h3>",
                "+<h3>2.32.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -1115,3 +1124,3 @@ version 3 key valid days field.",
                " </ul>",
                "-<h3>2.31.3 Additional Features and Functionality</h3>",
                "+<h3>2.32.3 Additional Features and Functionality</h3>",
                " <ul>",
                "@@ -1123,3 +1132,3 @@ HMac-SHA512.",
                " </ul>",
                "-<h3>2.31.4 Notes</h3>",
                "+<h3>2.32.4 Notes</h3>",
                " <ul>",
                "@@ -1128,6 +1137,6 @@ lightweight API.",
                " </ul> ",
                "-<h3>2.32.1 Version</h3>",
                "+<h3>2.33.1 Version</h3>",
                " Release: 1.28<br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2005, April 20",
                "-<h3>2.32.2 Defects Fixed</h3>",
                "+<h3>2.33.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -1145,3 +1154,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2005, April 20",
                " </ul>",
                "-<h3>2.32.3 Additional Features and Functionality</h3>",
                "+<h3>2.33.3 Additional Features and Functionality</h3>",
                " <ul>",
                "@@ -1156,3 +1165,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2005, April 20",
                " </ul>",
                "-<h3>2.32.4 Notes</h3>",
                "+<h3>2.33.4 Notes</h3>",
                " <ul>",
                "@@ -1163,6 +1172,6 @@ as some S/MIME 3.1 recommendations have also been introduced for header creation",
                " </ul>",
                "-<h3>2.33.1 Version</h3>",
                "+<h3>2.34.1 Version</h3>",
                " Release: 1.27<br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2005, February 20",
                "-<h3>2.33.2 Defects Fixed</h3>",
                "+<h3>2.34.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -1180,3 +1189,3 @@ to generateCertificate(s)() changed, This has been fixed.",
                " </ul>",
                "-<h3>2.33.3 Additional Features and Functionality</h3>",
                "+<h3>2.34.3 Additional Features and Functionality</h3>",
                " <ul>",
                "@@ -1191,3 +1200,3 @@ prevent applications being vunerable to oracle attacks.",
                " </ul>",
                "-<h3>2.33.4 Changes that may affect compatibility</h3>",
                "+<h3>2.34.4 Changes that may affect compatibility</h3>",
                " <ul>",
                "@@ -1200,6 +1209,6 @@ were using these previously you should use SHA256WithRSAAndMGF1, SHA384WithRSAAn",
                " </ul>",
                "-<h3>2.34.1 Version</h3>",
                "+<h3>2.35.1 Version</h3>",
                " Release: 1.26<br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2005, January 15",
                "-<h3>2.34.2 Defects Fixed</h3>",
                "+<h3>2.35.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -1212,3 +1221,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2005, January 15",
                " </ul>",
                "-<h3>2.34.3 Additional Features and Functionality</h3>",
                "+<h3>2.35.3 Additional Features and Functionality</h3>",
                " <ul>",
                "@@ -1222,3 +1231,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2005, January 15",
                " </ul>",
                "-<h3>2.34.4 JDK 1.5 Changes</h3>",
                "+<h3>2.35.4 JDK 1.5 Changes</h3>",
                " <ul>",
                "@@ -1227,6 +1236,6 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2005, January 15",
                "-<h3>2.35.1 Version</h3>",
                "+<h3>2.36.1 Version</h3>",
                " Release: 1.25<br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2004, October 1",
                "-<h3>2.35.2 Defects Fixed</h3>",
                "+<h3>2.36.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -1252,3 +1261,3 @@ stores them as BMP strings.",
                " </ul>",
                "-<h3>2.35.3 Additional Features and Functionality</h3>",
                "+<h3>2.36.3 Additional Features and Functionality</h3>",
                " <ul>",
                "@@ -1271,6 +1280,6 @@ having to convert the original object down to its base ASN.1 equivalents.",
                " </ul>",
                "-<h3>2.36.1 Version</h3>",
                "+<h3>2.37.1 Version</h3>",
                " Release: 1.24<br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2004, June 12",
                "-<h3>2.36.2 Defects Fixed</h3>",
                "+<h3>2.37.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -1291,3 +1300,3 @@ KeyUsage extension has been fixed.",
                " </ul>",
                "-<h3>2.36.3 Additional Features and Functionality</h3>",
                "+<h3>2.37.3 Additional Features and Functionality</h3>",
                " <ul>",
                "@@ -1297,6 +1306,6 @@ KeyUsage extension has been fixed.",
                " </ul>",
                "-<h3>2.37.1 Version</h3>",
                "+<h3>2.38.1 Version</h3>",
                " Release: 1.23<br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2004, April 10",
                "-<h3>2.37.2 Defects Fixed</h3>",
                "+<h3>2.38.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -1315,3 +1324,3 @@ it to occasionally generate the wrong key has been fixed.",
                " </ul>",
                "-<h3>2.37.3 Additional Features and Functionality</h3>",
                "+<h3>2.38.3 Additional Features and Functionality</h3>",
                " <ul>",
                "@@ -1334,6 +1343,6 @@ certifications has been added.",
                "-<h3>2.38.1 Version</h3>",
                "+<h3>2.39.1 Version</h3>",
                " Release: 1.22<br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2004, February 7",
                "-<h3>2.38.2 Defects Fixed</h3>",
                "+<h3>2.39.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -1347,3 +1356,3 @@ a non-null reason, rather than a null one. This has been fixed.",
                " </ul>",
                "-<h3>2.38.3 Additional Features and Functionality</h3>",
                "+<h3>2.39.3 Additional Features and Functionality</h3>",
                " <ul>",
                "@@ -1355,6 +1364,6 @@ a non-null reason, rather than a null one. This has been fixed.",
                "-<h3>2.39.1 Version</h3>",
                "+<h3>2.40.1 Version</h3>",
                " Release: 1.21<br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2003, December 6",
                "-<h3>2.39.2 Defects Fixed</h3>",
                "+<h3>2.40.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -1366,3 +1375,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2003, December 6",
                " </ul>",
                "-<h3>2.39.3 Additional Features and Functionality</h3>",
                "+<h3>2.40.3 Additional Features and Functionality</h3>",
                " <ul>",
                "@@ -1373,6 +1382,6 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2003, December 6",
                "-<h3>2.40.1 Version</h3>",
                "+<h3>2.41.1 Version</h3>",
                " Release: 1.20<br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2003, October 8",
                "-<h3>2.40.2 Defects Fixed</h3>",
                "+<h3>2.41.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -1386,3 +1395,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2003, October 8",
                " </ul>",
                "-<h3>2.40.3 Additional Features and Functionality</h3>",
                "+<h3>2.41.3 Additional Features and Functionality</h3>",
                " <ul>",
                "@@ -1394,6 +1403,6 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2003, October 8",
                "-<h3>2.41.1 Version</h3>",
                "+<h3>2.42.1 Version</h3>",
                " Release: 1.19<br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2003, June 7",
                "-<h3>2.41.2 Defects Fixed</h3>",
                "+<h3>2.42.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -1405,3 +1414,3 @@ sequence. This has been fixed.",
                " </ul>",
                "-<h3>2.41.3 Additional Features and Functionality</h3>",
                "+<h3>2.42.3 Additional Features and Functionality</h3>",
                " <ul>",
                "@@ -1417,6 +1426,6 @@ in order to find algorithms.",
                "-<h3>2.42.1 Version</h3>",
                "+<h3>2.43.1 Version</h3>",
                " Release: 1.18<br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2003, February 8",
                "-<h3>2.42.2 Defects Fixed</h3>",
                "+<h3>2.43.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -1431,3 +1440,3 @@ only used 4 bytes of the seed value. This has been fixed.",
                " </ul>",
                "-<h3>2.42.3 Additional Features and Functionality</h3>",
                "+<h3>2.43.3 Additional Features and Functionality</h3>",
                " <ul>",
                "@@ -1442,6 +1451,6 @@ Sun BigInteger library.",
                " </ul>",
                "-<h3>2.43.1 Version</h3>",
                "+<h3>2.44.1 Version</h3>",
                " Release: 1.17<br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2003, January 8",
                "-<h3>2.43.2 Defects Fixed</h3>",
                "+<h3>2.44.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -1456,3 +1465,3 @@ the id field as null. This has been fixed.",
                " </ul>",
                "-<h3>2.43.3 Additional Functionality and Features</h3>",
                "+<h3>2.44.3 Additional Functionality and Features</h3>",
                " <ul>",
                "@@ -1476,6 +1485,6 @@ string to OID conversion.",
                "-<h3>2.44.1 Version</h3>",
                "+<h3>2.45.1 Version</h3>",
                " Release: 1.16<br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2002, November 30",
                "-<h3>2.44.2 Defects Fixed</h3>",
                "+<h3>2.45.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -1493,3 +1502,3 @@ to throw a NullPointerException at the wrong time.",
                " </ul>",
                "-<h3>2.44.3 Additional Functionality and Features</h3>",
                "+<h3>2.45.3 Additional Functionality and Features</h3>",
                " <ul>",
                "@@ -1510,6 +1519,6 @@ and to support multiple recipients/signers.",
                " </ul>",
                "-<h3>2.45.1 Version</h3>",
                "+<h3>2.46.1 Version</h3>",
                " Release: 1.15<br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2002, September 6",
                "-<h3>2.45.2 Defects Fixed</h3>",
                "+<h3>2.46.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -1536,3 +1545,3 @@ The local name now takes precedence.",
                " </ul>",
                "-<h3>2.45.3 Additional Functionality and Features</h3>",
                "+<h3>2.46.3 Additional Functionality and Features</h3>",
                " <ul>",
                "@@ -1544,6 +1553,6 @@ The local name now takes precedence.",
                " </ul>",
                "-<h3>2.46.1 Version</h3>",
                "+<h3>2.47.1 Version</h3>",
                " Release: 1.14<br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2002, June 17",
                "-<h3>2.46.2 Defects Fixed</h3>",
                "+<h3>2.47.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -1568,3 +1577,3 @@ on construction. This has been fixed.",
                " </ul>",
                "-<h3>2.46.3 Additional Functionality and Features</h3>",
                "+<h3>2.47.3 Additional Functionality and Features</h3>",
                " <ul>",
                "@@ -1581,6 +1590,6 @@ object identifiers.",
                " </ul>",
                "-<h3>2.47.1 Version</h3>",
                "+<h3>2.48.1 Version</h3>",
                " Release: 1.13<br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2002, April 19",
                "-<h3>2.47.2 Defects Fixed</h3>",
                "+<h3>2.48.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -1594,3 +1603,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2002, April 19",
                "-<h3>2.47.3 Additional Functionality and Features</h3>",
                "+<h3>2.48.3 Additional Functionality and Features</h3>",
                " <ul>",
                "@@ -1609,6 +1618,6 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2002, April 19",
                "-<h3>2.48.1 Version</h3>",
                "+<h3>2.49.1 Version</h3>",
                " Release: 1.12<br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2002, February 8",
                "-<h3>2.48.2 Defects Fixed</h3>",
                "+<h3>2.49.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -1631,3 +1640,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2002, February 8",
                " </ul>",
                "-<h3>2.48.3 Additional Functionality and Features</h3>",
                "+<h3>2.49.3 Additional Functionality and Features</h3>",
                " <ul>",
                "@@ -1644,6 +1653,6 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2002, February 8",
                " </ul>",
                "-<h3>2.49.1 Version</h3>",
                "+<h3>2.50.1 Version</h3>",
                " Release: 1.11<br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2001, December 10",
                "-<h3>2.49.2 Defects Fixed</h3>",
                "+<h3>2.50.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -1673,3 +1682,3 @@ extensions. This has been fixed.",
                " </ul>",
                "-<h3>2.49.3 Additional Functionality and Features</h3>",
                "+<h3>2.50.3 Additional Functionality and Features</h3>",
                " <ul>",
                "@@ -1687,3 +1696,3 @@ compressed ones.",
                " </ul>",
                "-<h3>2.49.4 Other changes</h3>",
                "+<h3>2.50.4 Other changes</h3>",
                " <ul>",
                "@@ -1694,6 +1703,6 @@ throws an IOException if there is a problem.",
                " </ul>",
                "-<h3>2.50.1 Version</h3>",
                "+<h3>2.51.1 Version</h3>",
                " Release: 1.10<br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2001, October 20",
                "-<h3>2.50.2 Defects Fixed</h3>",
                "+<h3>2.51.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -1705,3 +1714,3 @@ has been fixed.",
                " </ul>",
                "-<h3>2.50.3 Additional Functionality and Features</h3>",
                "+<h3>2.51.3 Additional Functionality and Features</h3>",
                " <ul>",
                "@@ -1714,6 +1723,6 @@ be kept long term as it may be adjusted.",
                " </ul>",
                "-<h3>2.51.1 Version</h3>",
                "+<h3>2.52.1 Version</h3>",
                " Release: 1.09<br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2001, October 6",
                "-<h3>2.51.2 Defects Fixed</h3>",
                "+<h3>2.52.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -1730,3 +1739,3 @@ This has been fixed.",
                " </ul>",
                "-<h3>2.51.3 Additional Functionality and Features</h3>",
                "+<h3>2.52.3 Additional Functionality and Features</h3>",
                " <ul>",
                "@@ -1754,6 +1763,6 @@ resource hungry and faster - whether it's fast enough remains to be seen!",
                "-<h3>2.52.1 Version</h3>",
                "+<h3>2.53.1 Version</h3>",
                " Release: 1.08<br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2001, September 9",
                "-<h3>2.52.2 Defects Fixed</h3>",
                "+<h3>2.53.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -1768,3 +1777,3 @@ has been fixed.",
                " </ul>",
                "-<h3>2.52.3 Additional Functionality and Features</h3>",
                "+<h3>2.53.3 Additional Functionality and Features</h3>",
                " <ul>",
                "@@ -1781,6 +1790,6 @@ this is fixed.",
                " </ul>",
                "-<h3>2.53.1 Version</h3>",
                "+<h3>2.54.1 Version</h3>",
                " Release: 1.07<br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2001, July 9",
                "-<h3>2.53.2 Defects Fixed</h3>",
                "+<h3>2.54.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -1794,6 +1803,6 @@ have a look in org.bouncycastle.jce.provider.JDKKeyStore lines 201-291.",
                " </ul>",
                "-<h3>2.54.1 Version</h3>",
                "+<h3>2.55.1 Version</h3>",
                " Release: 1.06<br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2001, July 2",
                "-<h3>2.54.2 Defects Fixed</h3>",
                "+<h3>2.55.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -1820,3 +1829,3 @@ caused a NullPointer exception. This has been fixed.",
                "-<h3>2.54.3 Additional Functionality</h3>",
                "+<h3>2.55.3 Additional Functionality</h3>",
                " <ul>",
                "@@ -1827,6 +1836,6 @@ as well.",
                "-<h3>2.55.1 Version</h3>",
                "+<h3>2.56.1 Version</h3>",
                " Release: 1.05<br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2001, April 17",
                "-<h3>2.55.2 Defects Fixed</h3>",
                "+<h3>2.56.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -1841,3 +1850,3 @@ This has been fixed.",
                " </ul>",
                "-<h3>2.55.3 Additional Functionality</h3>",
                "+<h3>2.56.3 Additional Functionality</h3>",
                " <ul>",
                "@@ -1846,3 +1855,3 @@ a class in for dealing with Netscape Certificate Request objects.",
                " </ul>",
                "-<h3>2.55.4 Additional Notes</h3>",
                "+<h3>2.56.4 Additional Notes</h3>",
                " <p>",
                "@@ -1853,6 +1862,6 @@ and we will help you get it sorted out.",
                "-<h3>2.56.1 Version</h3>",
                "+<h3>2.57.1 Version</h3>",
                " Release: 1.04<br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2001, March 11",
                "-<h3>2.56.2 Defects Fixed</h3>",
                "+<h3>2.57.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -1885,3 +1894,3 @@ hash table when the hash table constructor was called. This has been fixed.",
                "-<h3>2.56.3 Additional Functionality</h3>",
                "+<h3>2.57.3 Additional Functionality</h3>",
                " <ul>",
                "@@ -1897,6 +1906,6 @@ to lightweight library.",
                "-<h3>2.57.1 Version</h3>",
                "+<h3>2.58.1 Version</h3>",
                " Release: 1.03<br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2001, January 7",
                "-<h3>2.57.2 Defects Fixed</h3>",
                "+<h3>2.58.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -1910,6 +1919,6 @@ length as the plain text.",
                "-<h3>2.58.1 Version</h3>",
                "+<h3>2.59.1 Version</h3>",
                " Release: 1.02<br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2000, November 7",
                "-<h3>2.58.2 Defects Fixed</h3>",
                "+<h3>2.59.2 Defects Fixed</h3>",
                " <ul>",
                "@@ -1919,6 +1928,6 @@ requested size. This is now fixed.",
                "-<h3>2.59.1 Version</h3>",
                "+<h3>2.60.1 Version</h3>",
                " Release: 1.01<br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2000, October 15",
                "-<h3>2.59.2 Defects Fixed</h3>",
                "+<h3>2.60.2 Defects Fixed</h3>",
                "@@ -1929,6 +1938,6 @@ on a doFinal. This has been fixed.",
                "-<h3>2.60.1 Version</h3>",
                "+<h3>2.61.1 Version</h3>",
                " Release: 1.00<br/>",
                " Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2000, October 13",
                "-<h3>2.60.2 Defects Fixed</h3>",
                "+<h3>2.61.2 Defects Fixed</h3>",
                " <p>",
                "@@ -1947,3 +1956,3 @@ by the RSA key factory. This is now fixed.",
                "-<h3>2.60.3 Additional functionality</h3>",
                "+<h3>2.61.3 Additional functionality</h3>",
                " <p>"
            ],
            "changed_files": [
                "docs/releasenotes.html"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "d6d3167c7d02e675f1323056f0f400470e789c0c"
                ],
                [
                    "no-tag",
                    "c690d3a072251b8d7020c0d3d30f9cf1d1c9d228"
                ],
                [
                    "no-tag",
                    "a1dd297709101e01e8e30bc276c0b6b9d2eec613"
                ],
                [
                    "no-tag",
                    "66c6ba56a9bba8b396e3eba22e754024fa34293c"
                ],
                [
                    "no-tag",
                    "d8159c88eeaf67b9a7e9a203e5e189ce424805f2"
                ]
            ],
            "tags": [
                "r1v60"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: release, note",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "bfc0db7d13e86acc01508552c07418fdd8def62e",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1520053085,
            "hunks": 1,
            "message": "fixed use of <>",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSUtil.java b/core/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSUtil.java",
                "index 79c63ac80..78e4eae5e 100644",
                "--- a/core/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSUtil.java",
                "+++ b/core/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSUtil.java",
                "@@ -386,3 +386,3 @@ public class XMSSUtil",
                "     {",
                "-        private static final Set<String> components = new HashSet<>();",
                "+        private static final Set components = new HashSet();"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSUtil.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "8ba9db9fd6b726c8a780a8132c7bbf887465e5d0"
                ],
                [
                    "no-tag",
                    "5e80add6ff70e531401bfe367190bf0b0333aef7"
                ]
            ],
            "tags": [
                "r1v60"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8d890916339514070019bf4d8ae8ea215ae74b5d",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1518824172,
            "hunks": 10,
            "message": "removed use of deprecated classes.",
            "diff": [
                "diff --git a/prov/src/main/java/org/bouncycastle/x509/X509AttributeCertStoreSelector.java b/prov/src/main/java/org/bouncycastle/x509/X509AttributeCertStoreSelector.java",
                "index 714c2f9e7..437bde77b 100644",
                "--- a/prov/src/main/java/org/bouncycastle/x509/X509AttributeCertStoreSelector.java",
                "+++ b/prov/src/main/java/org/bouncycastle/x509/X509AttributeCertStoreSelector.java",
                "@@ -16,2 +16,3 @@ import org.bouncycastle.asn1.ASN1Primitive;",
                " import org.bouncycastle.asn1.DEROctetString;",
                "+import org.bouncycastle.asn1.x509.Extension;",
                " import org.bouncycastle.asn1.x509.GeneralName;",
                "@@ -20,3 +21,2 @@ import org.bouncycastle.asn1.x509.TargetInformation;",
                " import org.bouncycastle.asn1.x509.Targets;",
                "-import org.bouncycastle.asn1.x509.X509Extensions;",
                " import org.bouncycastle.util.Selector;",
                "@@ -120,3 +120,3 @@ public class X509AttributeCertStoreSelector",
                "             byte[] targetInfoExt = attrCert",
                "-                .getExtensionValue(X509Extensions.TargetInformation.getId());",
                "+                .getExtensionValue(Extension.targetInformation.getId());",
                "             if (targetInfoExt != null)",
                "diff --git a/prov/src/main/java/org/bouncycastle/x509/X509CRLStoreSelector.java b/prov/src/main/java/org/bouncycastle/x509/X509CRLStoreSelector.java",
                "index 2486d2086..63ed8ab01 100644",
                "--- a/prov/src/main/java/org/bouncycastle/x509/X509CRLStoreSelector.java",
                "+++ b/prov/src/main/java/org/bouncycastle/x509/X509CRLStoreSelector.java",
                "@@ -9,3 +9,3 @@ import java.security.cert.X509CRLSelector;",
                " import org.bouncycastle.asn1.ASN1Integer;",
                "-import org.bouncycastle.asn1.x509.X509Extensions;",
                "+import org.bouncycastle.asn1.x509.Extension;",
                " import org.bouncycastle.util.Arrays;",
                "@@ -102,3 +102,3 @@ public class X509CRLStoreSelector",
                "             byte[] bytes = crl",
                "-                .getExtensionValue(X509Extensions.DeltaCRLIndicator.getId());",
                "+                .getExtensionValue(Extension.deltaCRLIndicator.getId());",
                "             if (bytes != null)",
                "@@ -141,3 +141,3 @@ public class X509CRLStoreSelector",
                "             byte[] idp = crl",
                "-                .getExtensionValue(X509Extensions.IssuingDistributionPoint",
                "+                .getExtensionValue(Extension.issuingDistributionPoint",
                "                     .getId());",
                "diff --git a/prov/src/main/java/org/bouncycastle/x509/extension/X509ExtensionUtil.java b/prov/src/main/java/org/bouncycastle/x509/extension/X509ExtensionUtil.java",
                "index 2e4d14d39..8c5bb9041 100644",
                "--- a/prov/src/main/java/org/bouncycastle/x509/extension/X509ExtensionUtil.java",
                "+++ b/prov/src/main/java/org/bouncycastle/x509/extension/X509ExtensionUtil.java",
                "@@ -18,4 +18,4 @@ import org.bouncycastle.asn1.DERSequence;",
                " import org.bouncycastle.asn1.x500.X500Name;",
                "+import org.bouncycastle.asn1.x509.Extension;",
                " import org.bouncycastle.asn1.x509.GeneralName;",
                "-import org.bouncycastle.asn1.x509.X509Extension;",
                " import org.bouncycastle.util.Integers;",
                "@@ -37,3 +37,3 @@ public class X509ExtensionUtil",
                "     {",
                "-        byte[] extVal = cert.getExtensionValue(X509Extension.issuerAlternativeName.getId());",
                "+        byte[] extVal = cert.getExtensionValue(Extension.issuerAlternativeName.getId());",
                "@@ -45,3 +45,3 @@ public class X509ExtensionUtil",
                "     {        ",
                "-        byte[] extVal = cert.getExtensionValue(X509Extension.subjectAlternativeName.getId());",
                "+        byte[] extVal = cert.getExtensionValue(Extension.subjectAlternativeName.getId());"
            ],
            "changed_files": [
                "prov/src/main/java/org/bouncycastle/x509/X509AttributeCertStoreSelector.java",
                "prov/src/main/java/org/bouncycastle/x509/X509CRLStoreSelector.java",
                "prov/src/main/java/org/bouncycastle/x509/extension/X509ExtensionUtil.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "0d208ed94a2a9b0cb897db3c4fc6611f899d72da"
                ],
                [
                    "no-tag",
                    "72dcc2093ba8f168da82a69fdfe83e64593bada9"
                ]
            ],
            "tags": [
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b9a6406281da9fd85d3f132d86870fe06556fdd1",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1513977542,
            "hunks": 1,
            "message": "SM2Signer-based signature cannot be reused after Signature.sign() without reinitialization.",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/signers/SM2Signer.java b/core/src/main/java/org/bouncycastle/crypto/signers/SM2Signer.java",
                "index 6d1b8a6f1..bcc15483c 100644",
                "--- a/core/src/main/java/org/bouncycastle/crypto/signers/SM2Signer.java",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/signers/SM2Signer.java",
                "@@ -133,2 +133,3 @@ public class SM2Signer",
                "         byte[] eHash = digestDoFinal();",
                "+        reset();"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/crypto/signers/SM2Signer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "24183d738387fdeb97336c049c9745c021a74d36"
                ],
                [
                    "no-tag",
                    "910fbb68980dc288dd98e1eee9dc25bb36fd545b"
                ]
            ],
            "tags": [
                "r1v60"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9b4f97043294360bb13706f2dad67bee28fc9442",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1515811330,
            "hunks": 1,
            "message": "Fixed extra large array allocation.",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/prng/drbg/CTRSP800DRBG.java b/core/src/main/java/org/bouncycastle/crypto/prng/drbg/CTRSP800DRBG.java",
                "index 94319a983..db0cffded 100644",
                "--- a/core/src/main/java/org/bouncycastle/crypto/prng/drbg/CTRSP800DRBG.java",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/prng/drbg/CTRSP800DRBG.java",
                "@@ -382,3 +382,3 @@ public class CTRSP800DRBG",
                "         {",
                "-            additionalInput = new byte[_seedLength];",
                "+            additionalInput = new byte[_seedLength / 8];",
                "         }"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/crypto/prng/drbg/CTRSP800DRBG.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "6d19090bb3fd0956bbf5afc6b701f9992bc8391b"
                ],
                [
                    "no-tag",
                    "50444144a5cb630d1b85b9369657f607118171ed"
                ]
            ],
            "tags": [
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8b0d4dce65f6bb478289cfbeb07707746ef74f67",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1515747321,
            "hunks": 29,
            "message": "BCJSSE: Support SSLParameters.setSNIMatchers",
            "diff": [
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/JsseUtils_8.java b/tls/src/main/java/org/bouncycastle/jsse/provider/JsseUtils_8.java",
                "index 17a1fb338..b3494fac8 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/provider/JsseUtils_8.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/JsseUtils_8.java",
                "@@ -3,2 +3,3 @@ package org.bouncycastle.jsse.provider;",
                " import java.util.ArrayList;",
                "+import java.util.Collection;",
                " import java.util.Collections;",
                "@@ -7,2 +8,3 @@ import java.util.List;",
                " import javax.net.ssl.SNIHostName;",
                "+import javax.net.ssl.SNIMatcher;",
                " import javax.net.ssl.SNIServerName;",
                "@@ -10,2 +12,3 @@ import javax.net.ssl.SNIServerName;",
                " import org.bouncycastle.jsse.BCSNIHostName;",
                "+import org.bouncycastle.jsse.BCSNIMatcher;",
                " import org.bouncycastle.jsse.BCSNIServerName;",
                "@@ -16,2 +19,91 @@ abstract class JsseUtils_8",
                " {",
                "+    static class ExportSNIMatcher extends SNIMatcher",
                "+    {",
                "+        private final BCSNIMatcher matcher;",
                "+",
                "+        ExportSNIMatcher(BCSNIMatcher matcher)",
                "+        {",
                "+            super(matcher.getType());",
                "+",
                "+            this.matcher = matcher;",
                "+        }",
                "+",
                "+        @Override",
                "+        public boolean matches(SNIServerName serverName)",
                "+        {",
                "+            return matcher.matches(importSNIServerName(serverName));",
                "+        }",
                "+",
                "+        BCSNIMatcher unwrap()",
                "+        {",
                "+            return matcher;",
                "+        }",
                "+    }",
                "+",
                "+    static class ImportSNIMatcher extends BCSNIMatcher",
                "+    {",
                "+        private final SNIMatcher matcher;",
                "+",
                "+        ImportSNIMatcher(SNIMatcher matcher)",
                "+        {",
                "+            super(matcher.getType());",
                "+",
                "+            this.matcher = matcher;",
                "+        }",
                "+",
                "+        @Override",
                "+        public boolean matches(BCSNIServerName serverName)",
                "+        {",
                "+            return matcher.matches(exportSNIServerName(serverName));",
                "+        }",
                "+",
                "+        SNIMatcher unwrap()",
                "+        {",
                "+            return matcher;",
                "+        }",
                "+    }",
                "+",
                "+    static SNIMatcher exportSNIMatcher(BCSNIMatcher matcher)",
                "+    {",
                "+        if (matcher == null)",
                "+        {",
                "+            return null;",
                "+        }",
                "+",
                "+        if (matcher instanceof ImportSNIMatcher)",
                "+        {",
                "+            return ((ImportSNIMatcher)matcher).unwrap();",
                "+        }",
                "+",
                "+        return new ExportSNIMatcher(matcher);",
                "+    }",
                "+",
                "+    /*",
                "+     * NOTE: Currently return type is Object to isolate callers from JDK8 type",
                "+     */",
                "+    static Object exportSNIMatchers(Collection<BCSNIMatcher> matchers)",
                "+    {",
                "+        if (matchers == null)",
                "+        {",
                "+            return null;",
                "+        }",
                "+",
                "+        ArrayList<SNIMatcher> result = new ArrayList<SNIMatcher>(matchers.size());",
                "+        for (BCSNIMatcher matcher : matchers)",
                "+        {",
                "+            SNIMatcher exported = exportSNIMatcher(matcher);",
                "+            if (exported != null)",
                "+            {",
                "+                result.add(exported);",
                "+            }",
                "+        }",
                "+",
                "+        if (!result.isEmpty())",
                "+        {",
                "+            return Collections.unmodifiableList(result);",
                "+        }",
                "+",
                "+        return Collections.<SNIMatcher>emptyList();",
                "+    }",
                "+",
                "     static SNIHostName exportSNIServerName(BCSNIServerName serverName)",
                "@@ -29,3 +121,3 @@ abstract class JsseUtils_8",
                "      */",
                "-    static Object exportSNIServerNames(List<BCSNIServerName> serverNames)",
                "+    static Object exportSNIServerNames(Collection<BCSNIServerName> serverNames)",
                "     {",
                "@@ -39,3 +131,3 @@ abstract class JsseUtils_8",
                "         {",
                "-            SNIHostName exported = JsseUtils_8.exportSNIServerName(serverName);",
                "+            SNIHostName exported = exportSNIServerName(serverName);",
                "             if (exported != null)",
                "@@ -45,2 +137,3 @@ abstract class JsseUtils_8",
                "         }",
                "+",
                "         if (!result.isEmpty())",
                "@@ -49,2 +142,3 @@ abstract class JsseUtils_8",
                "         }",
                "+",
                "         return Collections.<SNIServerName>emptyList();",
                "@@ -52,2 +146,44 @@ abstract class JsseUtils_8",
                "+    static BCSNIMatcher importSNIMatcher(SNIMatcher matcher)",
                "+    {",
                "+        if (matcher == null)",
                "+        {",
                "+            return null;",
                "+        }",
                "+",
                "+        if (matcher instanceof ExportSNIMatcher)",
                "+        {",
                "+            return ((ExportSNIMatcher)matcher).unwrap();",
                "+        }",
                "+",
                "+        return new ImportSNIMatcher(matcher);",
                "+    }",
                "+",
                "+    static List<BCSNIMatcher> importSNIMatchers(Object getSNIMatchersResult)",
                "+    {",
                "+        if (getSNIMatchersResult == null)",
                "+        {",
                "+            return null;",
                "+        }",
                "+",
                "+        Collection<SNIMatcher> matchers = (Collection<SNIMatcher>)getSNIMatchersResult;",
                "+",
                "+        ArrayList<BCSNIMatcher> result = new ArrayList<BCSNIMatcher>(matchers.size());",
                "+        for (SNIMatcher matcher : matchers)",
                "+        {",
                "+            BCSNIMatcher imported = importSNIMatcher(matcher);",
                "+            if (imported != null)",
                "+            {",
                "+                result.add(imported);",
                "+            }",
                "+        }",
                "+",
                "+        if (!result.isEmpty())",
                "+        {",
                "+            return Collections.unmodifiableList(result);",
                "+        }",
                "+",
                "+        return Collections.<BCSNIMatcher>emptyList();",
                "+    }",
                "+",
                "     static BCSNIHostName importSNIServerName(SNIServerName serverName)",
                "@@ -72,3 +208,3 @@ abstract class JsseUtils_8",
                "-        List<SNIServerName> serverNames = (List<SNIServerName>)getServerNamesResult;",
                "+        Collection<SNIServerName> serverNames = (Collection<SNIServerName>)getServerNamesResult;",
                "@@ -83,2 +219,3 @@ abstract class JsseUtils_8",
                "         }",
                "+",
                "         if (!result.isEmpty())",
                "@@ -87,2 +224,3 @@ abstract class JsseUtils_8",
                "         }",
                "+",
                "         return Collections.<BCSNIServerName>emptyList();",
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLParameters.java b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLParameters.java",
                "index c30223bc4..78107ee57 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLParameters.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLParameters.java",
                "@@ -14,3 +14,3 @@ class ProvSSLParameters",
                "-    private static <T> List<T> copyList(List<T> list)",
                "+    private static <T> List<T> copyList(Collection<T> list)",
                "     {",
                "@@ -172,3 +172,3 @@ class ProvSSLParameters",
                "     {",
                "-        throw new UnsupportedOperationException();",
                "+        this.sniMatchers = copyList(matchers);",
                "     }",
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/SSLParametersUtil.java b/tls/src/main/java/org/bouncycastle/jsse/provider/SSLParametersUtil.java",
                "index 76784b4fb..eb8e8cd01 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/provider/SSLParametersUtil.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/SSLParametersUtil.java",
                "@@ -16,2 +16,4 @@ abstract class SSLParametersUtil",
                "     private static final Method setServerNames;",
                "+    private static final Method getSNIMatchers;",
                "+    private static final Method setSNIMatchers;",
                "     private static final Method getUseCipherSuitesOrder;",
                "@@ -122,5 +124,5 @@ abstract class SSLParametersUtil",
                "         Class<?> sslParametersClazz = getClassPrivileged(\"javax.net.ssl.SSLParameters\");",
                "-        ",
                "+",
                "         Method[] methods = getMethodsPrivileged(sslParametersClazz);",
                "-        ",
                "+",
                "         getAlgorithmConstraints = findMethod(methods, \"getAlgorithmConstraints\");",
                "@@ -131,2 +133,4 @@ abstract class SSLParametersUtil",
                "         setServerNames = findMethod(methods, \"setServerNames\");",
                "+        getSNIMatchers = findMethod(methods, \"getSNIMatchers\");",
                "+        setSNIMatchers = findMethod(methods, \"setSNIMatchers\");",
                "         getUseCipherSuitesOrder = findMethod(methods, \"getUseCipherSuitesOrder\");",
                "@@ -137,6 +141,20 @@ abstract class SSLParametersUtil",
                "     {",
                "-        SSLParameters ssl = new SSLParameters();",
                "-        ssl.setCipherSuites(prov.getCipherSuites());",
                "-        ssl.setProtocols(prov.getProtocols());",
                "+        SSLParameters ssl = new SSLParameters(prov.getCipherSuites(), prov.getProtocols());",
                "+",
                "+        // NOTE: The client-auth setters each clear the other client-auth property, so only one can be set",
                "+        if (prov.getNeedClientAuth())",
                "+        {",
                "+            ssl.setNeedClientAuth(true);",
                "+        }",
                "+        else if (prov.getWantClientAuth())",
                "+        {",
                "+            ssl.setWantClientAuth(true);",
                "+        }",
                "+        else",
                "+        {",
                "+            ssl.setWantClientAuth(false);",
                "+        }",
                "+",
                "         // From JDK 1.7",
                "+",
                "         if (setAlgorithmConstraints != null)",
                "@@ -145,2 +163,3 @@ abstract class SSLParametersUtil",
                "         }",
                "+",
                "         if (setEndpointIdentificationAlgorithm != null)",
                "@@ -149,9 +168,5 @@ abstract class SSLParametersUtil",
                "         }",
                "+",
                "         // From JDK 1.8",
                "-        if (setServerNames != null)",
                "-        {",
                "-            invokeSetterPrivileged(ssl, setServerNames, JsseUtils_8.exportSNIServerNames(prov.getServerNames()));",
                "-        }",
                "-        // TODO[jsse] From JDK 1.8",
                "-//        r.setSNIMatchers(p.getSNIMatchers());",
                "+",
                "         if (setUseCipherSuitesOrder != null)",
                "@@ -161,15 +176,12 @@ abstract class SSLParametersUtil",
                "-        // NOTE: The client-auth setters each clear the other client-auth property, so only one can be set",
                "-        if (prov.getNeedClientAuth())",
                "-        {",
                "-            ssl.setNeedClientAuth(true);",
                "-        }",
                "-        else if (prov.getWantClientAuth())",
                "+        if (setServerNames != null)",
                "         {",
                "-            ssl.setWantClientAuth(true);",
                "+            invokeSetterPrivileged(ssl, setServerNames, JsseUtils_8.exportSNIServerNames(prov.getServerNames()));",
                "         }",
                "-        else",
                "+",
                "+        if (setSNIMatchers != null)",
                "         {",
                "-            ssl.setWantClientAuth(false);",
                "+            invokeSetterPrivileged(ssl, setSNIMatchers, JsseUtils_8.exportSNIMatchers(prov.getSNIMatchers()));",
                "         }",
                "+",
                "         return ssl;",
                "@@ -233,11 +245,10 @@ abstract class SSLParametersUtil",
                "-        // TODO[jsse]",
                "-//        if (getSNIMatchers != null)",
                "-//        {",
                "-//            Object sniMatchers = invokerGetterPrivileged(ssl, getSNIMatchers);",
                "-//            if (sniMatchers != null)",
                "-//            {",
                "-//                prov.setSNIMatchers(JsseUtils_8.importSNIMatchers(sniMatchers));",
                "-//            }",
                "-//        }",
                "+        if (getSNIMatchers != null)",
                "+        {",
                "+            Object sniMatchers = invokeGetterPrivileged(ssl, getSNIMatchers);",
                "+            if (sniMatchers != null)",
                "+            {",
                "+                prov.setSNIMatchers(JsseUtils_8.importSNIMatchers(sniMatchers));",
                "+            }",
                "+        }",
                "     }"
            ],
            "changed_files": [
                "tls/src/main/java/org/bouncycastle/jsse/provider/JsseUtils_8.java",
                "tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLParameters.java",
                "tls/src/main/java/org/bouncycastle/jsse/provider/SSLParametersUtil.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "a37053ff752116ada772cf9d43ba13f33b98f951"
                ],
                [
                    "no-tag",
                    "76292314ee526a2cdca34fd5e28907ce307e7b2f"
                ]
            ],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ac3de277e8f071118e918488823b59e2cbc4fbf4",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1515816724,
            "hunks": 2,
            "message": "moved to 1.60b",
            "diff": [
                "diff --git a/prov/src/main/java/org/bouncycastle/jce/provider/BouncyCastleProvider.java b/prov/src/main/java/org/bouncycastle/jce/provider/BouncyCastleProvider.java",
                "index e23c526c3..d3155e73e 100644",
                "--- a/prov/src/main/java/org/bouncycastle/jce/provider/BouncyCastleProvider.java",
                "+++ b/prov/src/main/java/org/bouncycastle/jce/provider/BouncyCastleProvider.java",
                "@@ -56,3 +56,3 @@ public final class BouncyCastleProvider extends Provider",
                " {",
                "-    private static String info = \"BouncyCastle Security Provider v1.59\";",
                "+    private static String info = \"BouncyCastle Security Provider v1.60b\";",
                "@@ -139,3 +139,3 @@ public final class BouncyCastleProvider extends Provider",
                "     {",
                "-        super(PROVIDER_NAME, 1.59, info);",
                "+        super(PROVIDER_NAME, 1.595, info);"
            ],
            "changed_files": [
                "prov/src/main/java/org/bouncycastle/jce/provider/BouncyCastleProvider.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "fdde7501100e8460cf39c80567273e78c18ffaa9"
                ],
                [
                    "no-tag",
                    "70e52e9647ef05e4b91f9f585705d7479c0f2f47"
                ]
            ],
            "tags": [
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "126451b6ed6f44ea7ca1f5c801f3905f54ed0dc3",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1516088576,
            "hunks": 15,
            "message": "BCJSSE: Support for layered socket with consumed input",
            "diff": [
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketFactory.java b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketFactory.java",
                "index c2fadbe8d..ecb304a8e 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketFactory.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketFactory.java",
                "@@ -66,8 +66,3 @@ class ProvSSLSocketFactory",
                "     {",
                "-        /*",
                "-         * TODO[jsse] \"Creates a server mode Socket layered over an existing connected socket,",
                "-         * and is able to read data which has already been consumed/removed from the Socket's",
                "-         * underlying InputStream.\"",
                "-         */",
                "-        throw new UnsupportedOperationException();",
                "+        return new ProvSSLSocketWrap(context, context.createContextData(), s, consumed, autoClose);",
                "     }",
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketWrap.java b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketWrap.java",
                "index 640a836d8..52907d0e9 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketWrap.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketWrap.java",
                "@@ -5,2 +5,3 @@ import java.io.InputStream;",
                " import java.io.OutputStream;",
                "+import java.io.SequenceInputStream;",
                " import java.net.InetAddress;",
                "@@ -27,2 +28,15 @@ class ProvSSLSocketWrap",
                " {",
                "+    private static Socket checkSocket(Socket s) throws SocketException",
                "+    {",
                "+        if (s == null)",
                "+        {",
                "+            throw new NullPointerException(\"'s' cannot be null\");",
                "+        }",
                "+        if (!s.isConnected())",
                "+        {",
                "+            throw new SocketException(\"'s' is not a connected socket\");",
                "+        }",
                "+        return s;",
                "+    }",
                "+",
                "     protected final AppDataInput appDataIn = new AppDataInput();",
                "@@ -33,5 +47,5 @@ class ProvSSLSocketWrap",
                "     protected final Socket wrapSocket;",
                "-    protected final String wrapHost;",
                "-    protected final int wrapPort;",
                "-    protected final boolean wrapAutoClose;",
                "+    protected final InputStream consumed;",
                "+    protected final String host;",
                "+    protected final boolean autoClose;",
                "     protected final ProvSSLParameters sslParameters;",
                "@@ -39,3 +53,3 @@ class ProvSSLSocketWrap",
                "     protected boolean enableSessionCreation = true;",
                "-    protected boolean useClientMode = true;",
                "+    protected boolean useClientMode;",
                "@@ -47,3 +61,19 @@ class ProvSSLSocketWrap",
                "+    protected ProvSSLSocketWrap(ProvSSLContextSpi context, ContextData contextData, Socket s, InputStream consumed, boolean autoClose)",
                "+        throws IOException",
                "+    {",
                "+        super();",
                "+",
                "+        this.context = context;",
                "+        this.contextData = contextData;",
                "+        this.wrapSocket = checkSocket(s);",
                "+        this.consumed = consumed;",
                "+        this.host = null;",
                "+        this.autoClose = autoClose;",
                "+        this.useClientMode = false;",
                "+        this.sslParameters = context.getDefaultParameters(!useClientMode);",
                "+    }",
                "+",
                "     protected ProvSSLSocketWrap(ProvSSLContextSpi context, ContextData contextData, Socket s, String host, int port, boolean autoClose)",
                "+        throws IOException",
                "     {",
                "@@ -53,6 +83,7 @@ class ProvSSLSocketWrap",
                "         this.contextData = contextData;",
                "-        this.wrapSocket = s;",
                "-        this.wrapHost = host;",
                "-        this.wrapPort = port;",
                "-        this.wrapAutoClose = autoClose;",
                "+        this.wrapSocket = checkSocket(s);",
                "+        this.consumed = null;",
                "+        this.host = host;",
                "+        this.autoClose = autoClose;",
                "+        this.useClientMode = true;",
                "         this.sslParameters = context.getDefaultParameters(!useClientMode);",
                "@@ -93,3 +124,3 @@ class ProvSSLSocketWrap",
                "     {",
                "-        if (wrapAutoClose)",
                "+        if (autoClose)",
                "         {",
                "@@ -458,4 +489,9 @@ class ProvSSLSocketWrap",
                "             // TODO[jsse] Allocate this.handshakeSession and update it during handshake",
                "-    ",
                "+",
                "             InputStream input = wrapSocket.getInputStream();",
                "+            if (consumed != null)",
                "+            {",
                "+                input = new SequenceInputStream(consumed, input);",
                "+            }",
                "+",
                "             OutputStream output = wrapSocket.getOutputStream();",
                "@@ -469,3 +505,3 @@ class ProvSSLSocketWrap",
                "                 this.protocolPeer = client;",
                "-    ",
                "+",
                "                 clientProtocol.connect(client);",
                "@@ -476,6 +512,6 @@ class ProvSSLSocketWrap",
                "                 this.protocol = serverProtocol;",
                "-    ",
                "+",
                "                 ProvTlsServer server = new ProvTlsServer(this, sslParameters.copy());",
                "                 this.protocolPeer = server;",
                "-    ",
                "+",
                "                 serverProtocol.accept(server);",
                "@@ -498,3 +534,5 @@ class ProvSSLSocketWrap",
                "     {",
                "-        return wrapHost;",
                "+        // TODO[jsse] See SunJSSE for some attempt at implicit host name determination",
                "+",
                "+        return host;",
                "     }"
            ],
            "changed_files": [
                "tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketFactory.java",
                "tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketWrap.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "f2dd5d37ca57bb84a581006bc5e72e0eca679fed"
                ],
                [
                    "no-tag",
                    "69a07fb6aa951cc3824c5eab62975d8dd13e4145"
                ]
            ],
            "tags": [
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b79d81ae92dfc031d72e04552a3898e6323344eb",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1514336067,
            "hunks": 22,
            "message": "J2ME update",
            "diff": [
                "diff --git a/buildj2me b/buildj2me",
                "index ce1e4ef4b..52754c702 100644",
                "--- a/buildj2me",
                "+++ b/buildj2me",
                "@@ -70,2 +70,3 @@ then",
                "         rm src/org/bouncycastle/asn1/test/RevokeRequestTest.java",
                "+        rm -rf src/org/bouncycastle/math/ec/rfc7748/test",
                "         rm -rf src/org/bouncycastle/math/raw/test",
                "diff --git a/core/src/main/j2me/org/bouncycastle/math/ec/LongArray.java b/core/src/main/j2me/org/bouncycastle/math/ec/LongArray.java",
                "index b8522c16e..b5ab0b901 100644",
                "--- a/core/src/main/j2me/org/bouncycastle/math/ec/LongArray.java",
                "+++ b/core/src/main/j2me/org/bouncycastle/math/ec/LongArray.java",
                "@@ -855,2 +855,7 @@ class LongArray",
                "+    void copyTo(long[] z, int zOff)",
                "+    {",
                "+        System.arraycopy(m_ints, 0, z, zOff, m_ints.length);",
                "+    }",
                "+    ",
                "     public LongArray modMultiplyLD(LongArray other, int m, int[] ks)",
                "diff --git a/core/src/main/j2me/org/bouncycastle/util/Arrays.java b/core/src/main/j2me/org/bouncycastle/util/Arrays.java",
                "index 5c237e857..043e13bcc 100644",
                "--- a/core/src/main/j2me/org/bouncycastle/util/Arrays.java",
                "+++ b/core/src/main/j2me/org/bouncycastle/util/Arrays.java",
                "@@ -10,3 +10,3 @@ public final class Arrays",
                " {",
                "-    private Arrays() ",
                "+    private Arrays()",
                "     {",
                "@@ -16,4 +16,4 @@ public final class Arrays",
                "     public static boolean areEqual(",
                "-        boolean[]  a,",
                "-        boolean[]  b)",
                "+        boolean[] a,",
                "+        boolean[] b)",
                "     {",
                "@@ -46,4 +46,4 @@ public final class Arrays",
                "     public static boolean areEqual(",
                "-        char[]  a,",
                "-        char[]  b)",
                "+        char[] a,",
                "+        char[] b)",
                "     {",
                "@@ -76,4 +76,4 @@ public final class Arrays",
                "     public static boolean areEqual(",
                "-        byte[]  a,",
                "-        byte[]  b)",
                "+        byte[] a,",
                "+        byte[] b)",
                "     {",
                "@@ -114,4 +114,4 @@ public final class Arrays",
                "     public static boolean constantTimeAreEqual(",
                "-        byte[]  a,",
                "-        byte[]  b)",
                "+        byte[] a,",
                "+        byte[] b)",
                "     {",
                "@@ -143,4 +143,4 @@ public final class Arrays",
                "     public static boolean areEqual(",
                "-        int[]  a,",
                "-        int[]  b)",
                "+        int[] a,",
                "+        int[] b)",
                "     {",
                "@@ -173,4 +173,4 @@ public final class Arrays",
                "     public static boolean areEqual(",
                "-        long[]  a,",
                "-        long[]  b)",
                "+        long[] a,",
                "+        long[] b)",
                "     {",
                "@@ -289,3 +289,3 @@ public final class Arrays",
                "     public static void fill(",
                "-        short[] array, ",
                "+        short[] array,",
                "         short value)",
                "@@ -307,3 +307,3 @@ public final class Arrays",
                "     }",
                "-    ",
                "+",
                "     public static int hashCode(byte[] data)",
                "@@ -615,5 +615,5 @@ public final class Arrays",
                "         long[] copy = new long[data.length];",
                "-        ",
                "+",
                "         System.arraycopy(data, 0, copy, 0, data.length);",
                "-        ",
                "+",
                "         return copy;",
                "@@ -748,4 +748,3 @@ public final class Arrays",
                "      * @param from the start index at which the copying should take place.",
                "-     * @param to the final index of the range (exclusive).",
                "-     *",
                "+     * @param to   the final index of the range (exclusive).",
                "      * @return a new byte array containing the range given.",
                "@@ -840,3 +839,3 @@ public final class Arrays",
                "         {",
                "-            return new byte[]{ b };",
                "+            return new byte[]{b};",
                "         }",
                "@@ -854,3 +853,3 @@ public final class Arrays",
                "         {",
                "-            return new short[]{ b };",
                "+            return new short[]{b};",
                "         }",
                "@@ -868,3 +867,3 @@ public final class Arrays",
                "         {",
                "-            return new int[]{ b };",
                "+            return new int[]{b};",
                "         }",
                "@@ -973,3 +972,3 @@ public final class Arrays",
                "         {",
                "-            return new byte[]{ b };",
                "+            return new byte[]{b};",
                "         }",
                "@@ -987,3 +986,3 @@ public final class Arrays",
                "         {",
                "-            return new short[]{ b };",
                "+            return new short[]{b};",
                "         }",
                "@@ -1001,3 +1000,3 @@ public final class Arrays",
                "         {",
                "-            return new int[]{ b };",
                "+            return new int[]{b};",
                "         }",
                "@@ -1020,3 +1019,3 @@ public final class Arrays",
                "         byte[] result = new byte[p2];",
                "-        ",
                "+",
                "         while (--p2 >= 0)",
                "@@ -1066,3 +1065,19 @@ public final class Arrays",
                "     }",
                "-    ",
                "+",
                "+    /**",
                "+     * Fill input array by zeros",
                "+     *",
                "+     * @param array input array",
                "+     */",
                "+    public static void clear(byte[] array)",
                "+    {",
                "+        if (array != null)",
                "+        {",
                "+            for (int i = 0; i < array.length; i++)",
                "+            {",
                "+                array[i] = 0;",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "     /**"
            ],
            "changed_files": [
                "buildj2me",
                "core/src/main/j2me/org/bouncycastle/math/ec/LongArray.java",
                "core/src/main/j2me/org/bouncycastle/util/Arrays.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "12123b4c90e899914936c4438a1dbf1e978b3bf8"
                ],
                [
                    "no-tag",
                    "db71ed5239898c5aa8f5c5133bd7c4c2390d1993"
                ]
            ],
            "tags": [
                "r1rv59",
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "703f7f0f6f86180d6004c40f8bff0b96c0afe1d6",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1511679090,
            "hunks": 26,
            "message": "added support for DHE as described in SP 800-56A",
            "diff": [
                "diff --git a/prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/EC.java b/prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/EC.java",
                "index 518332876..e0e92ef16 100644",
                "--- a/prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/EC.java",
                "+++ b/prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/EC.java",
                "@@ -46,2 +46,5 @@ public class EC",
                "+            provider.addAttributes(\"KeyAgreement.ECCDHE\", generalEcAttributes);",
                "+            provider.addAlgorithm(\"KeyAgreement.ECCDHE\", PREFIX + \"KeyAgreementSpi$DHCE\");",
                "+",
                "             provider.addAlgorithm(\"KeyAgreement.ECDHWITHSHA1KDF\", PREFIX + \"KeyAgreementSpi$DHwithSHA1KDFAndSharedInfo\");",
                "@@ -81,2 +84,8 @@ public class EC",
                "+            provider.addAlgorithm(\"KeyAgreement.ECCDHEWITHSHA1CKDF\", PREFIX + \"KeyAgreementSpi$DHEwithSHA1CKDF\");",
                "+            provider.addAlgorithm(\"KeyAgreement.ECCDHEWITHSHA224CKDF\", PREFIX + \"KeyAgreementSpi$DHEwithSHA224CKDF\");",
                "+            provider.addAlgorithm(\"KeyAgreement.ECCDHEWITHSHA256CKDF\", PREFIX + \"KeyAgreementSpi$DHEwithSHA256CKDF\");",
                "+            provider.addAlgorithm(\"KeyAgreement.ECCDHEWITHSHA384CKDF\", PREFIX + \"KeyAgreementSpi$DHEwithSHA384CKDF\");",
                "+            provider.addAlgorithm(\"KeyAgreement.ECCDHEWITHSHA512CKDF\", PREFIX + \"KeyAgreementSpi$DHEwithSHA512CKDF\");",
                "+",
                "             registerOid(provider, X9ObjectIdentifiers.id_ecPublicKey, \"EC\", new KeyFactorySpi.EC());",
                "diff --git a/prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/ec/KeyAgreementSpi.java b/prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/ec/KeyAgreementSpi.java",
                "index 29d227c69..66b5fb01a 100644",
                "--- a/prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/ec/KeyAgreementSpi.java",
                "+++ b/prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/ec/KeyAgreementSpi.java",
                "@@ -17,2 +17,3 @@ import org.bouncycastle.crypto.agreement.ECDHBasicAgreement;",
                " import org.bouncycastle.crypto.agreement.ECDHCBasicAgreement;",
                "+import org.bouncycastle.crypto.agreement.ECDHCEphemeralAgreement;",
                " import org.bouncycastle.crypto.agreement.ECMQVBasicAgreement;",
                "@@ -20,2 +21,4 @@ import org.bouncycastle.crypto.agreement.kdf.ConcatenationKDFGenerator;",
                " import org.bouncycastle.crypto.generators.KDF2BytesGenerator;",
                "+import org.bouncycastle.crypto.params.ECDHEPrivateParameters;",
                "+import org.bouncycastle.crypto.params.ECDHEPublicParameters;",
                " import org.bouncycastle.crypto.params.ECDomainParameters;",
                "@@ -28,2 +31,3 @@ import org.bouncycastle.jcajce.provider.asymmetric.util.BaseAgreementSpi;",
                " import org.bouncycastle.jcajce.provider.asymmetric.util.ECUtil;",
                "+import org.bouncycastle.jcajce.spec.DHEParameterSpec;",
                " import org.bouncycastle.jcajce.spec.MQVParameterSpec;",
                "@@ -34,2 +38,3 @@ import org.bouncycastle.jce.interfaces.MQVPrivateKey;",
                " import org.bouncycastle.jce.interfaces.MQVPublicKey;",
                "+import org.bouncycastle.util.Arrays;",
                "@@ -38,3 +43,3 @@ import org.bouncycastle.jce.interfaces.MQVPublicKey;",
                "  * both the simple one, and the simple one with cofactors are supported.",
                "- *",
                "+ * <p>",
                "  * Also, MQV key agreement per SEC-1",
                "@@ -46,9 +51,10 @@ public class KeyAgreementSpi",
                "-    private String                 kaAlgorithm;",
                "+    private String kaAlgorithm;",
                "-    private ECDomainParameters     parameters;",
                "-    private BasicAgreement         agreement;",
                "+    private ECDomainParameters parameters;",
                "+    private Object agreement;",
                "-    private MQVParameterSpec       mqvParameters;",
                "-    private BigInteger             result;",
                "+    private MQVParameterSpec mqvParameters;",
                "+    private DHEParameterSpec dheParameters;",
                "+    private byte[] result;",
                "@@ -65,4 +71,15 @@ public class KeyAgreementSpi",
                "+    protected KeyAgreementSpi(",
                "+        String kaAlgorithm,",
                "+        ECDHCEphemeralAgreement agreement,",
                "+        DerivationFunction kdf)",
                "+    {",
                "+        super(kaAlgorithm, kdf);",
                "+",
                "+        this.kaAlgorithm = kaAlgorithm;",
                "+        this.agreement = agreement;",
                "+    }",
                "+",
                "     protected byte[] bigIntToBytes(",
                "-        BigInteger    r)",
                "+        BigInteger r)",
                "     {",
                "@@ -72,4 +89,4 @@ public class KeyAgreementSpi",
                "     protected Key engineDoPhase(",
                "-        Key     key,",
                "-        boolean lastPhase) ",
                "+        Key key,",
                "+        boolean lastPhase)",
                "         throws InvalidKeyException, IllegalStateException",
                "@@ -86,3 +103,3 @@ public class KeyAgreementSpi",
                "-        CipherParameters pubKey;        ",
                "+        CipherParameters pubKey;",
                "         if (agreement instanceof ECMQVBasicAgreement)",
                "@@ -109,2 +126,11 @@ public class KeyAgreementSpi",
                "         }",
                "+        else if (agreement instanceof ECDHCEphemeralAgreement)",
                "+        {",
                "+            ECPublicKeyParameters staticKey = (ECPublicKeyParameters)",
                "+                ECUtils.generatePublicKeyParameter((PublicKey)key);",
                "+            ECPublicKeyParameters ephemKey = (ECPublicKeyParameters)",
                "+                ECUtils.generatePublicKeyParameter(dheParameters.getOtherPartyEphemeralKey());",
                "+",
                "+            pubKey = new ECDHEPublicParameters(staticKey, ephemKey);",
                "+        }",
                "         else",
                "@@ -122,3 +148,10 @@ public class KeyAgreementSpi",
                "         {",
                "-            result = agreement.calculateAgreement(pubKey);",
                "+            if (agreement instanceof BasicAgreement)",
                "+            {",
                "+                result = bigIntToBytes(((BasicAgreement)agreement).calculateAgreement(pubKey));",
                "+            }",
                "+            else",
                "+            {",
                "+                result = ((ECDHCEphemeralAgreement)agreement).calculateAgreement(pubKey);",
                "+            }",
                "         }",
                "@@ -129,5 +162,5 @@ public class KeyAgreementSpi",
                "                 public Throwable getCause()",
                "-                            {",
                "-                                return e;",
                "-                            }",
                "+                {",
                "+                    return e;",
                "+                }",
                "             };",
                "@@ -139,8 +172,9 @@ public class KeyAgreementSpi",
                "     protected void engineInit(",
                "-        Key                     key,",
                "-        AlgorithmParameterSpec  params,",
                "-        SecureRandom            random) ",
                "+        Key key,",
                "+        AlgorithmParameterSpec params,",
                "+        SecureRandom random)",
                "         throws InvalidKeyException, InvalidAlgorithmParameterException",
                "     {",
                "-        if (params != null && !(params instanceof MQVParameterSpec || params instanceof UserKeyingMaterialSpec))",
                "+        if (params != null &&",
                "+            !(params instanceof MQVParameterSpec || params instanceof UserKeyingMaterialSpec || params instanceof DHEParameterSpec))",
                "         {",
                "@@ -153,4 +187,4 @@ public class KeyAgreementSpi",
                "     protected void engineInit(",
                "-        Key             key,",
                "-        SecureRandom    random) ",
                "+        Key key,",
                "+        SecureRandom random)",
                "         throws InvalidKeyException",
                "@@ -214,3 +248,34 @@ public class KeyAgreementSpi",
                "-            agreement.init(localParams);",
                "+            ((ECMQVBasicAgreement)agreement).init(localParams);",
                "+        }",
                "+        else if (parameterSpec instanceof DHEParameterSpec)",
                "+        {",
                "+            if (!(agreement instanceof ECDHCEphemeralAgreement))",
                "+            {",
                "+                throw new InvalidKeyException(kaAlgorithm + \" key agreement cannot be used with \"",
                "+                    + getSimpleName(DHEParameterSpec.class));",
                "+            }",
                "+            DHEParameterSpec dheParameterSpec = (DHEParameterSpec)parameterSpec;",
                "+            ECPrivateKeyParameters staticPrivKey;",
                "+            ECPrivateKeyParameters ephemPrivKey;",
                "+            ECPublicKeyParameters ephemPubKey;",
                "+",
                "+            staticPrivKey = (ECPrivateKeyParameters)",
                "+                ECUtil.generatePrivateKeyParameter((PrivateKey)key);",
                "+            ephemPrivKey = (ECPrivateKeyParameters)",
                "+                ECUtil.generatePrivateKeyParameter(dheParameterSpec.getEphemeralPrivateKey());",
                "+",
                "+            ephemPubKey = null;",
                "+            if (dheParameterSpec.getEphemeralPublicKey() != null)",
                "+            {",
                "+                ephemPubKey = (ECPublicKeyParameters)",
                "+                    ECUtils.generatePublicKeyParameter(dheParameterSpec.getEphemeralPublicKey());",
                "+            }",
                "+            dheParameters = dheParameterSpec;",
                "+            ukmParameters = dheParameterSpec.getUserKeyingMaterial();",
                "+",
                "+            ECDHEPrivateParameters localParams = new ECDHEPrivateParameters(staticPrivKey, ephemPrivKey, ephemPubKey);",
                "+            this.parameters = staticPrivKey.getParameters();",
                "+",
                "+            ((ECDHCEphemeralAgreement)agreement).init(localParams);",
                "         }",
                "@@ -227,3 +292,3 @@ public class KeyAgreementSpi",
                "             ukmParameters = (parameterSpec instanceof UserKeyingMaterialSpec) ? ((UserKeyingMaterialSpec)parameterSpec).getUserKeyingMaterial() : null;",
                "-            agreement.init(privKey);",
                "+            ((BasicAgreement)agreement).init(privKey);",
                "         }",
                "@@ -237,7 +302,6 @@ public class KeyAgreementSpi",
                "     }",
                "-",
                "-",
                "+    ",
                "     protected byte[] calcSecret()",
                "     {",
                "-        return bigIntToBytes(result);",
                "+        return Arrays.clone(result);",
                "     }",
                "@@ -271,2 +335,11 @@ public class KeyAgreementSpi",
                "+    public static class DHCE",
                "+        extends KeyAgreementSpi",
                "+    {",
                "+        public DHCE()",
                "+        {",
                "+            super(\"ECCDHE\", new ECDHCEphemeralAgreement(), null);",
                "+        }",
                "+    }",
                "+",
                "     public static class DHwithSHA1KDF",
                "@@ -353,18 +426,18 @@ public class KeyAgreementSpi",
                "     public static class DHwithSHA512KDFAndSharedInfo",
                "-         extends KeyAgreementSpi",
                "-     {",
                "-         public DHwithSHA512KDFAndSharedInfo()",
                "-         {",
                "-             super(\"ECDHwithSHA512KDF\", new ECDHBasicAgreement(), new KDF2BytesGenerator(DigestFactory.createSHA512()));",
                "-         }",
                "-     }",
                "-",
                "-     public static class CDHwithSHA512KDFAndSharedInfo",
                "-         extends KeyAgreementSpi",
                "-     {",
                "-         public CDHwithSHA512KDFAndSharedInfo()",
                "-         {",
                "-             super(\"ECCDHwithSHA512KDF\", new ECDHCBasicAgreement(), new KDF2BytesGenerator(DigestFactory.createSHA512()));",
                "-         }",
                "-     }",
                "+        extends KeyAgreementSpi",
                "+    {",
                "+        public DHwithSHA512KDFAndSharedInfo()",
                "+        {",
                "+            super(\"ECDHwithSHA512KDF\", new ECDHBasicAgreement(), new KDF2BytesGenerator(DigestFactory.createSHA512()));",
                "+        }",
                "+    }",
                "+",
                "+    public static class CDHwithSHA512KDFAndSharedInfo",
                "+        extends KeyAgreementSpi",
                "+    {",
                "+        public CDHwithSHA512KDFAndSharedInfo()",
                "+        {",
                "+            super(\"ECCDHwithSHA512KDF\", new ECDHCBasicAgreement(), new KDF2BytesGenerator(DigestFactory.createSHA512()));",
                "+        }",
                "+    }",
                "@@ -492,3 +565,48 @@ public class KeyAgreementSpi",
                "         {",
                "-            super(\"ECMQVwithSHA512CKDF\", new ECMQVBasicAgreement(), new ConcatenationKDFGenerator(DigestFactory.createSHA512()));",
                "+            super(\"ECDHEwithSHA512CKDF\", new ECMQVBasicAgreement(), new ConcatenationKDFGenerator(DigestFactory.createSHA512()));",
                "+        }",
                "+    }",
                "+",
                "+    public static class DHEwithSHA1CKDF",
                "+        extends KeyAgreementSpi",
                "+    {",
                "+        public DHEwithSHA1CKDF()",
                "+        {",
                "+            super(\"ECCDHEwithSHA1CKDF\", new ECDHCEphemeralAgreement(), new ConcatenationKDFGenerator(DigestFactory.createSHA1()));",
                "+        }",
                "+    }",
                "+",
                "+    public static class DHEwithSHA224CKDF",
                "+        extends KeyAgreementSpi",
                "+    {",
                "+        public DHEwithSHA224CKDF()",
                "+        {",
                "+            super(\"ECCDHEwithSHA224CKDF\", new ECDHCEphemeralAgreement(), new ConcatenationKDFGenerator(DigestFactory.createSHA224()));",
                "+        }",
                "+    }",
                "+",
                "+    public static class DHEwithSHA256CKDF",
                "+        extends KeyAgreementSpi",
                "+    {",
                "+        public DHEwithSHA256CKDF()",
                "+        {",
                "+            super(\"ECCDHEwithSHA256CKDF\", new ECDHCEphemeralAgreement(), new ConcatenationKDFGenerator(DigestFactory.createSHA256()));",
                "+        }",
                "+    }",
                "+",
                "+    public static class DHEwithSHA384CKDF",
                "+        extends KeyAgreementSpi",
                "+    {",
                "+        public DHEwithSHA384CKDF()",
                "+        {",
                "+            super(\"ECCDHEwithSHA384CKDF\", new ECDHCEphemeralAgreement(), new ConcatenationKDFGenerator(DigestFactory.createSHA384()));",
                "+        }",
                "+    }",
                "+",
                "+    public static class DHEwithSHA512CKDF",
                "+        extends KeyAgreementSpi",
                "+    {",
                "+        public DHEwithSHA512CKDF()",
                "+        {",
                "+            super(\"ECCDHEwithSHA512CKDF\", new ECDHCEphemeralAgreement(), new ConcatenationKDFGenerator(DigestFactory.createSHA512()));",
                "         }",
                "diff --git a/prov/src/main/java/org/bouncycastle/jcajce/spec/DHEParameterSpec.java b/prov/src/main/java/org/bouncycastle/jcajce/spec/DHEParameterSpec.java",
                "new file mode 100644",
                "index 000000000..9c1f9fa58",
                "--- /dev/null",
                "+++ b/prov/src/main/java/org/bouncycastle/jcajce/spec/DHEParameterSpec.java",
                "@@ -0,0 +1,73 @@",
                "+package org.bouncycastle.jcajce.spec;",
                "+",
                "+import java.security.KeyPair;",
                "+import java.security.PrivateKey;",
                "+import java.security.PublicKey;",
                "+import java.security.spec.AlgorithmParameterSpec;",
                "+",
                "+import org.bouncycastle.util.Arrays;",
                "+",
                "+/**",
                "+ * Parameter spec to provide Diffie-Hellman ephemeral keys and user keying material.",
                "+ */",
                "+public class DHEParameterSpec",
                "+    implements AlgorithmParameterSpec",
                "+{",
                "+    private final PublicKey ephemeralPublicKey;",
                "+    private final PrivateKey ephemeralPrivateKey;",
                "+    private final PublicKey otherPartyEphemeralKey;",
                "+    private final byte[] userKeyingMaterial;",
                "+",
                "+    public DHEParameterSpec(PublicKey ephemeralPublicKey, PrivateKey ephemeralPrivateKey, PublicKey otherPartyEphemeralKey, byte[] userKeyingMaterial)",
                "+    {",
                "+        this.ephemeralPublicKey = ephemeralPublicKey;",
                "+        this.ephemeralPrivateKey = ephemeralPrivateKey;",
                "+        this.otherPartyEphemeralKey = otherPartyEphemeralKey;",
                "+        this.userKeyingMaterial = Arrays.clone(userKeyingMaterial);",
                "+    }",
                "+",
                "+    public DHEParameterSpec(PublicKey ephemeralPublicKey, PrivateKey ephemeralPrivateKey, PublicKey otherPartyEphemeralKey)",
                "+    {",
                "+        this(ephemeralPublicKey, ephemeralPrivateKey, otherPartyEphemeralKey, null);",
                "+    }",
                "+",
                "+    public DHEParameterSpec(KeyPair ephemeralKeyPair, PublicKey otherPartyEphemeralKey, byte[] userKeyingMaterial)",
                "+    {",
                "+        this(ephemeralKeyPair.getPublic(), ephemeralKeyPair.getPrivate(), otherPartyEphemeralKey, userKeyingMaterial);",
                "+    }",
                "+",
                "+    public DHEParameterSpec(PrivateKey ephemeralPrivateKey, PublicKey otherPartyEphemeralKey, byte[] userKeyingMaterial)",
                "+    {",
                "+        this(null, ephemeralPrivateKey, otherPartyEphemeralKey, userKeyingMaterial);",
                "+    }",
                "+",
                "+    public DHEParameterSpec(KeyPair ephemeralKeyPair, PublicKey otherPartyEphemeralKey)",
                "+    {",
                "+        this(ephemeralKeyPair.getPublic(), ephemeralKeyPair.getPrivate(), otherPartyEphemeralKey, null);",
                "+    }",
                "+",
                "+    public DHEParameterSpec(PrivateKey ephemeralPrivateKey, PublicKey otherPartyEphemeralKey)",
                "+    {",
                "+        this(null, ephemeralPrivateKey, otherPartyEphemeralKey, null);",
                "+    }",
                "+",
                "+    public PrivateKey getEphemeralPrivateKey()",
                "+    {",
                "+        return ephemeralPrivateKey;",
                "+    }",
                "+",
                "+    public PublicKey getEphemeralPublicKey()",
                "+    {",
                "+        return ephemeralPublicKey;",
                "+    }",
                "+",
                "+    public PublicKey getOtherPartyEphemeralKey()",
                "+    {",
                "+        return otherPartyEphemeralKey;",
                "+    }",
                "+",
                "+    public byte[] getUserKeyingMaterial()",
                "+    {",
                "+        return Arrays.clone(userKeyingMaterial);",
                "+    }",
                "+}"
            ],
            "changed_files": [
                "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/EC.java",
                "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/ec/KeyAgreementSpi.java",
                "prov/src/main/java/org/bouncycastle/jcajce/spec/DHEParameterSpec.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "d48c8ca218dfc17b1b06c86ef4a0072ff1ac1f32"
                ],
                [
                    "no-tag",
                    "8f18fb610bf3ea873e2737002d7adb797afc77d1"
                ]
            ],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9b06cf86cb4be0ca41c9f4d10ff85da74422bfeb",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1511366496,
            "hunks": 5,
            "message": "Add TlsCipher.getCiphertextLimit method",
            "diff": [
                "diff --git a/tls/src/main/java/org/bouncycastle/tls/crypto/TlsCipher.java b/tls/src/main/java/org/bouncycastle/tls/crypto/TlsCipher.java",
                "index 17b816972..e894e3de1 100644",
                "--- a/tls/src/main/java/org/bouncycastle/tls/crypto/TlsCipher.java",
                "+++ b/tls/src/main/java/org/bouncycastle/tls/crypto/TlsCipher.java",
                "@@ -9,2 +9,9 @@ public interface TlsCipher",
                " {",
                "+    /**",
                "+     * Return the maximum size for the ciphertext given plaintextlimit bytes of plaintext.",
                "+     * @param plaintextLimit the maximum number of bytes of plaintext.",
                "+     * @return the maximum size of the ciphertext for plaintextlimit bytes of input.",
                "+     */",
                "+    int getCiphertextLimit(int plaintextLimit);",
                "+",
                "     /**",
                "diff --git a/tls/src/main/java/org/bouncycastle/tls/crypto/TlsNullNullCipher.java b/tls/src/main/java/org/bouncycastle/tls/crypto/TlsNullNullCipher.java",
                "index 58a006ba6..7996654ea 100644",
                "--- a/tls/src/main/java/org/bouncycastle/tls/crypto/TlsNullNullCipher.java",
                "+++ b/tls/src/main/java/org/bouncycastle/tls/crypto/TlsNullNullCipher.java",
                "@@ -12,2 +12,7 @@ public class TlsNullNullCipher",
                " {",
                "+    public int getCiphertextLimit(int plaintextLimit)",
                "+    {",
                "+        return plaintextLimit;",
                "+    }",
                "+",
                "     public int getPlaintextLimit(int ciphertextLimit)",
                "diff --git a/tls/src/main/java/org/bouncycastle/tls/crypto/impl/TlsAEADCipher.java b/tls/src/main/java/org/bouncycastle/tls/crypto/impl/TlsAEADCipher.java",
                "index 752695224..9c2d5b6f8 100644",
                "--- a/tls/src/main/java/org/bouncycastle/tls/crypto/impl/TlsAEADCipher.java",
                "+++ b/tls/src/main/java/org/bouncycastle/tls/crypto/impl/TlsAEADCipher.java",
                "@@ -122,2 +122,7 @@ public class TlsAEADCipher",
                "+    public int getCiphertextLimit(int plaintextLimit)",
                "+    {",
                "+        return plaintextLimit + macSize + record_iv_length;",
                "+    }",
                "+",
                "     public int getPlaintextLimit(int ciphertextLimit)",
                "diff --git a/tls/src/main/java/org/bouncycastle/tls/crypto/impl/TlsBlockCipher.java b/tls/src/main/java/org/bouncycastle/tls/crypto/impl/TlsBlockCipher.java",
                "index 184673780..b91cc060a 100644",
                "--- a/tls/src/main/java/org/bouncycastle/tls/crypto/impl/TlsBlockCipher.java",
                "+++ b/tls/src/main/java/org/bouncycastle/tls/crypto/impl/TlsBlockCipher.java",
                "@@ -112,2 +112,31 @@ public class TlsBlockCipher",
                "+    public int getCiphertextLimit(int plaintextLimit)",
                "+    {",
                "+        int blockSize = encryptCipher.getBlockSize();",
                "+        int macSize = writeMac.getSize();",
                "+",
                "+        int ciphertextLimit = plaintextLimit;",
                "+",
                "+        // An explicit IV consumes 1 block",
                "+        if (useExplicitIV)",
                "+        {",
                "+            ciphertextLimit += blockSize;",
                "+        }",
                "+",
                "+        // Leave room for the MAC, and require block-alignment",
                "+        // Minimum 1 byte of padding",
                "+        if (encryptThenMAC)",
                "+        {",
                "+            ciphertextLimit += blockSize - (ciphertextLimit % blockSize);",
                "+            ciphertextLimit += macSize;",
                "+        }",
                "+        else",
                "+        {",
                "+            ciphertextLimit += macSize;",
                "+            ciphertextLimit += blockSize - (ciphertextLimit % blockSize);",
                "+        }",
                "+",
                "+        return ciphertextLimit;",
                "+    }",
                "+",
                "     public int getPlaintextLimit(int ciphertextLimit)",
                "diff --git a/tls/src/main/java/org/bouncycastle/tls/crypto/impl/TlsNullCipher.java b/tls/src/main/java/org/bouncycastle/tls/crypto/impl/TlsNullCipher.java",
                "index 7a6c7f3f8..bd719ce2b 100644",
                "--- a/tls/src/main/java/org/bouncycastle/tls/crypto/impl/TlsNullCipher.java",
                "+++ b/tls/src/main/java/org/bouncycastle/tls/crypto/impl/TlsNullCipher.java",
                "@@ -52,2 +52,7 @@ public class TlsNullCipher",
                "+    public int getCiphertextLimit(int plaintextLimit)",
                "+    {",
                "+        return plaintextLimit + writeMac.getSize();",
                "+    }",
                "+",
                "     public int getPlaintextLimit(int ciphertextLimit)"
            ],
            "changed_files": [
                "tls/src/main/java/org/bouncycastle/tls/crypto/TlsCipher.java",
                "tls/src/main/java/org/bouncycastle/tls/crypto/TlsNullNullCipher.java",
                "tls/src/main/java/org/bouncycastle/tls/crypto/impl/TlsAEADCipher.java",
                "tls/src/main/java/org/bouncycastle/tls/crypto/impl/TlsBlockCipher.java",
                "tls/src/main/java/org/bouncycastle/tls/crypto/impl/TlsNullCipher.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "f3fd8cf2e0cd66b6c84be70f462d6822c850e3d9"
                ],
                [
                    "no-tag",
                    "9b93b32474a2046f5063e3b74de393d5b8dc8cd9"
                ]
            ],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a971ddc77950050b0855b1e086acab8ebe4dea31",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1514348010,
            "hunks": 3,
            "message": "final fix for reset in Blake2s",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/digests/Blake2sDigest.java b/core/src/main/java/org/bouncycastle/crypto/digests/Blake2sDigest.java",
                "index 0ce31fc54..9287e6ab5 100644",
                "--- a/core/src/main/java/org/bouncycastle/crypto/digests/Blake2sDigest.java",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/digests/Blake2sDigest.java",
                "@@ -454,5 +454,5 @@ public class Blake2sDigest",
                "         chainValue = null;",
                "+        Arrays.fill(buffer, (byte)0);",
                "         if (key != null)",
                "         {",
                "-            Arrays.fill(buffer, (byte)0);",
                "             System.arraycopy(key, 0, buffer, 0, key.length);",
                "@@ -460,3 +460,2 @@ public class Blake2sDigest",
                "         }",
                "-        Arrays.fill(buffer, (byte)0);",
                "         init();"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/crypto/digests/Blake2sDigest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "87f761ea258553551a2b5b9b9ac92a7571e7a3d6"
                ],
                [
                    "no-tag",
                    "a50a37ed5800f44e61a206186bf72a07ba6c3fa2"
                ]
            ],
            "tags": [
                "r1rv59",
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "1cd11126337f46f59739682b61ba437967341de7",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1513913573,
            "hunks": 1,
            "message": "fixed incorrect divisor of bitLength on line 263",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/prng/drbg/CTRSP800DRBG.java b/core/src/main/java/org/bouncycastle/crypto/prng/drbg/CTRSP800DRBG.java",
                "index f30dbfecf..94319a983 100644",
                "--- a/core/src/main/java/org/bouncycastle/crypto/prng/drbg/CTRSP800DRBG.java",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/prng/drbg/CTRSP800DRBG.java",
                "@@ -262,3 +262,3 @@ public class CTRSP800DRBG",
                "-        temp = new byte[bitLength / 2];",
                "+        temp = new byte[bitLength / 8];"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/crypto/prng/drbg/CTRSP800DRBG.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "eb82e78e6f82857de96073246ca676f0a1a66eb2"
                ],
                [
                    "no-tag",
                    "b11d284fe8dd00e4a90252954854fd6f85c245d7"
                ]
            ],
            "tags": [
                "r1v60"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4a5804920d2e6a10ff925759867955ffd4834ff8",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1519308589,
            "hunks": 7,
            "message": "Added new Curves and KeyAgreements",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/asn1/bsi/BSIObjectIdentifiers.java b/core/src/main/java/org/bouncycastle/asn1/bsi/BSIObjectIdentifiers.java",
                "index 315f6c481..a2ddd701f 100644",
                "--- a/core/src/main/java/org/bouncycastle/asn1/bsi/BSIObjectIdentifiers.java",
                "+++ b/core/src/main/java/org/bouncycastle/asn1/bsi/BSIObjectIdentifiers.java",
                "@@ -34,2 +34,44 @@ public interface BSIObjectIdentifiers",
                "     static final ASN1ObjectIdentifier ecdsa_plain_RIPEMD160 = ecdsa_plain_signatures.branch(\"6\");",
                "+",
                "+\t/** 0.4.0.127.0.7.1 */",
                "+\tstatic final ASN1ObjectIdentifier algorithm = bsi_de.branch(\"1\");",
                "+",
                "+\t/** ElGamal Elliptic Curve Key Agreement and Key Derivation according to X963 OID: 0.4.0.127.0.7.1.1.5.1.1 */",
                "+\tstatic final ASN1ObjectIdentifier ecka_eg_X963kdf = id_ecc.branch(\"5.1.1\");",
                "+",
                "+\t/** ElGamal Elliptic Curve Key Agreement and Key Derivation according to X963",
                "+\t * with hash function SHA256",
                "+\t * OID: 0.4.0.127.0.7.1.1.5.1.1.3 */",
                "+\tstatic final ASN1ObjectIdentifier ecka_eg_X963kdf_SHA256 = ecka_eg_X963kdf.branch(\"3\");",
                "+",
                "+\t/** ElGamal Elliptic Curve Key Agreement and Key Derivation according to X963",
                "+\t * with hash function SHA384",
                "+\t * OID: 0.4.0.127.0.7.1.1.5.1.1.4 */",
                "+\tstatic final ASN1ObjectIdentifier ecka_eg_X963kdf_SHA384 = ecka_eg_X963kdf.branch(\"4\");",
                "+",
                "+\t/** ElGamal Elliptic Curve Key Agreement and Key Derivation according to X963",
                "+\t * with hash function SHA512",
                "+\t * OID: 0.4.0.127.0.7.1.1.5.1.1.5 */",
                "+\tstatic final ASN1ObjectIdentifier ecka_eg_X963kdf_SHA512 = ecka_eg_X963kdf.branch(\"5\");",
                "+",
                "+\t/** AES encryption (CBC) and authentication (CMAC)",
                "+\t * OID: 0.4.0.127.0.7.1.x */",
                "+\t//FIXME replace \"1\" with correct OID",
                "+\tstatic final ASN1ObjectIdentifier aes_cbc_cmac = algorithm.branch(\"1\");",
                "+",
                "+\t/** AES encryption (CBC) and authentication (CMAC) with 128 bit",
                "+\t * OID: 0.4.0.127.0.7.1.x.y1 */",
                "+\t//FIXME replace \"1\" with correct OID",
                "+\tstatic final ASN1ObjectIdentifier id_aes128_CBC_CMAC = aes_cbc_cmac.branch(\"1\");",
                "+",
                "+",
                "+\t/** AES encryption (CBC) and authentication (CMAC) with 192 bit",
                "+\t * OID: 0.4.0.127.0.7.1.x.y2 */",
                "+\t//FIXME replace \"1\" with correct OID",
                "+\tstatic final ASN1ObjectIdentifier id_aes192_CBC_CMAC = aes_cbc_cmac.branch(\"1\");",
                "+",
                "+\t/** AES encryption (CBC) and authentication (CMAC) with 256 bit",
                "+\t * OID: 0.4.0.127.0.7.1.x.y3 */",
                "+\t//FIXME replace \"1\" with correct OID",
                "+\tstatic final ASN1ObjectIdentifier id_aes256_CBC_CMAC = aes_cbc_cmac.branch(\"1\");",
                " }",
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/agreement/kdf/ECKaEgKEKGenerator.java b/core/src/main/java/org/bouncycastle/crypto/agreement/kdf/ECKaEgKEKGenerator.java",
                "new file mode 100644",
                "index 000000000..3faeb3245",
                "--- /dev/null",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/agreement/kdf/ECKaEgKEKGenerator.java",
                "@@ -0,0 +1,89 @@",
                "+package org.bouncycastle.crypto.agreement.kdf;",
                "+",
                "+import java.io.IOException;",
                "+",
                "+import org.bouncycastle.asn1.ASN1EncodableVector;",
                "+import org.bouncycastle.asn1.ASN1Encoding;",
                "+import org.bouncycastle.asn1.ASN1ObjectIdentifier;",
                "+import org.bouncycastle.asn1.DERNull;",
                "+import org.bouncycastle.asn1.DEROctetString;",
                "+import org.bouncycastle.asn1.DERSequence;",
                "+import org.bouncycastle.asn1.DERTaggedObject;",
                "+import org.bouncycastle.asn1.x509.AlgorithmIdentifier;",
                "+import org.bouncycastle.crypto.DataLengthException;",
                "+import org.bouncycastle.crypto.DerivationParameters;",
                "+import org.bouncycastle.crypto.Digest;",
                "+import org.bouncycastle.crypto.DigestDerivationFunction;",
                "+import org.bouncycastle.crypto.generators.KDF2BytesGenerator;",
                "+import org.bouncycastle.crypto.params.KDFParameters;",
                "+import org.bouncycastle.util.Pack;",
                "+",
                "+/**",
                "+ * X9.63 based key derivation function for ECDH CMS.",
                "+ *",
                "+ * @author rainer.schubert",
                "+ *",
                "+ */",
                "+public class ECKaEgKEKGenerator extends DHKEKGenerator {",
                "+\tprivate DigestDerivationFunction kdf;",
                "+",
                "+\tprivate ASN1ObjectIdentifier algorithm;",
                "+\tprivate int keySize;",
                "+\tprivate byte[] z;",
                "+\tprivate boolean addSharedInfo;",
                "+",
                "+\tpublic static boolean USE_SHARED_INFO = true;",
                "+\tpublic static boolean DONTUSE_SHARED_INFO = false;",
                "+",
                "+\tpublic ECKaEgKEKGenerator(Digest digest, boolean addSharedInfo) {",
                "+\t\tsuper(digest);",
                "+\t\tthis.kdf = new KDF2BytesGenerator(digest);",
                "+\t\tthis.addSharedInfo = addSharedInfo;",
                "+\t}",
                "+",
                "+\tpublic ECKaEgKEKGenerator(Digest digest) {",
                "+\t\tsuper(digest);",
                "+\t\tthis.kdf = new KDF2BytesGenerator(digest);",
                "+\t\tthis.addSharedInfo = true;",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tpublic void init(DerivationParameters param) {",
                "+\t\tDHKDFParameters params = (DHKDFParameters) param;",
                "+",
                "+\t\tthis.algorithm = params.getAlgorithm();",
                "+\t\tthis.keySize = params.getKeySize();",
                "+\t\tthis.z = params.getZ();",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tpublic Digest getDigest() {",
                "+\t\treturn kdf.getDigest();",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tpublic int generateBytes(byte[] out, int outOff, int len)",
                "+\t\t\tthrows DataLengthException, IllegalArgumentException",
                "+\t{",
                "+\t\tbyte[] sharedInfo = null;",
                "+",
                "+\t\tif (addSharedInfo) {",
                "+\t\t\t// TODO Create an ASN.1 class for this (RFC3278)",
                "+\t\t\t// ECC-CMS-SharedInfo",
                "+\t\t\tASN1EncodableVector v = new ASN1EncodableVector();",
                "+",
                "+\t\t\tv.add(new AlgorithmIdentifier(algorithm, DERNull.INSTANCE));",
                "+\t\t\tv.add(new DERTaggedObject(true, 2, new DEROctetString(Pack.intToBigEndian(keySize))));",
                "+",
                "+\t\t\ttry {",
                "+\t\t\t\tsharedInfo = new DERSequence(v).getEncoded(ASN1Encoding.DER);",
                "+\t\t\t} catch (IOException e) {",
                "+\t\t\t\tthrow new IllegalArgumentException(\"unable to initialise kdf: \" + e.getMessage());",
                "+\t\t\t}",
                "+\t\t}",
                "+",
                "+\t\tkdf.init(new KDFParameters(z, sharedInfo));",
                "+",
                "+\t\treturn kdf.generateBytes(out, outOff, len);",
                "+\t}",
                "+}",
                "diff --git a/pkix/src/main/java/org/bouncycastle/cms/CMSAlgorithm.java b/pkix/src/main/java/org/bouncycastle/cms/CMSAlgorithm.java",
                "index 3e48eef1d..d8fa40116 100644",
                "--- a/pkix/src/main/java/org/bouncycastle/cms/CMSAlgorithm.java",
                "+++ b/pkix/src/main/java/org/bouncycastle/cms/CMSAlgorithm.java",
                "@@ -3,2 +3,3 @@ package org.bouncycastle.cms;",
                " import org.bouncycastle.asn1.ASN1ObjectIdentifier;",
                "+import org.bouncycastle.asn1.bsi.BSIObjectIdentifiers;",
                " import org.bouncycastle.asn1.cryptopro.CryptoProObjectIdentifiers;",
                "@@ -32,2 +33,6 @@ public class CMSAlgorithm",
                "+\tpublic static final ASN1ObjectIdentifier  AES128_CBC_CMAC      = BSIObjectIdentifiers.id_aes128_CBC_CMAC;",
                "+\tpublic static final ASN1ObjectIdentifier  AES192_CBC_CMAC      = BSIObjectIdentifiers.id_aes192_CBC_CMAC;",
                "+\tpublic static final ASN1ObjectIdentifier  AES256_CBC_CMAC      = BSIObjectIdentifiers.id_aes256_CBC_CMAC;",
                "+",
                "     public static final ASN1ObjectIdentifier  CAMELLIA128_CBC = NTTObjectIdentifiers.id_camellia128_cbc.intern();",
                "@@ -74,2 +79,7 @@ public class CMSAlgorithm",
                "+\tpublic static final ASN1ObjectIdentifier  ECKA_EG_X963KDF  = BSIObjectIdentifiers.ecka_eg_X963kdf;",
                "+\tpublic static final ASN1ObjectIdentifier  ECKA_EG_X963KDF_SHA256  = BSIObjectIdentifiers.ecka_eg_X963kdf_SHA256;",
                "+\tpublic static final ASN1ObjectIdentifier  ECKA_EG_X963KDF_SHA384  = BSIObjectIdentifiers.ecka_eg_X963kdf_SHA384;",
                "+\tpublic static final ASN1ObjectIdentifier  ECKA_EG_X963KDF_SHA512  = BSIObjectIdentifiers.ecka_eg_X963kdf_SHA512;",
                "+",
                "     public static final ASN1ObjectIdentifier  SHA1 = OIWObjectIdentifiers.idSHA1.intern();",
                "diff --git a/prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/ec/KeyAgreementSpi.java b/prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/ec/KeyAgreementSpi.java",
                "index 038379b2c..89590a9b8 100644",
                "--- a/prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/ec/KeyAgreementSpi.java",
                "+++ b/prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/ec/KeyAgreementSpi.java",
                "@@ -20,2 +20,6 @@ import org.bouncycastle.crypto.agreement.ECMQVBasicAgreement;",
                " import org.bouncycastle.crypto.agreement.kdf.ConcatenationKDFGenerator;",
                "+import org.bouncycastle.crypto.agreement.kdf.ECKaEgKEKGenerator;",
                "+import org.bouncycastle.crypto.digests.SHA256Digest;",
                "+import org.bouncycastle.crypto.digests.SHA384Digest;",
                "+import org.bouncycastle.crypto.digests.SHA512Digest;",
                " import org.bouncycastle.crypto.generators.KDF2BytesGenerator;",
                "@@ -613,2 +617,50 @@ public class KeyAgreementSpi",
                "     }",
                "+",
                "+\t/**",
                "+\t * KeyAgreement according to BSI TR-03111 chapter 4.3.1",
                "+\t * TODO check optional SharedInfo",
                "+\t * TODO SHAxxxDigest according to FIPS180-2 but should be FIPS180-3 - check conformity",
                "+\t * @author rainer.schubert",
                "+\t */",
                "+\tpublic static class ECKAEGwithSHA256KDF",
                "+\t\t\textends KeyAgreementSpi",
                "+\t{",
                "+\t\tpublic ECKAEGwithSHA256KDF()",
                "+\t\t{",
                "+\t\t\tsuper(\"ECKAEGwithSHA256KDF\", new ECDHBasicAgreement(), new ECKaEgKEKGenerator(new SHA256Digest(),",
                "+\t\t\t\t\tECKaEgKEKGenerator.DONTUSE_SHARED_INFO));",
                "+\t\t}",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * KeyAgreement according to BSI TR-03111 chapter 4.3.1",
                "+\t * TODO check optional SharedInfo",
                "+\t * TODO SHAxxxDigest according to FIPS180-2 but should be FIPS180-3 - check conformity",
                "+\t * @author rainer.schubert",
                "+\t */",
                "+\tpublic static class ECKAEGwithSHA384KDF",
                "+\t\t\textends KeyAgreementSpi",
                "+\t{",
                "+\t\tpublic ECKAEGwithSHA384KDF()",
                "+\t\t{",
                "+\t\t\tsuper(\"ECKAEGwithSHA384KDF\", new ECDHBasicAgreement(), new ECKaEgKEKGenerator(new SHA384Digest(),",
                "+\t\t\t\t\tECKaEgKEKGenerator.DONTUSE_SHARED_INFO));",
                "+\t\t}",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * KeyAgreement according to BSI TR-03111 chapter 4.3.1",
                "+\t * TODO check optional SharedInfo",
                "+\t * TODO SHAxxxDigest according to FIPS180-2 but should be FIPS180-3 - check conformity",
                "+\t * @author rainer.schubert",
                "+\t */",
                "+\tpublic static class ECKAEGwithSHA512KDF",
                "+\t\t\textends KeyAgreementSpi",
                "+\t{",
                "+\t\tpublic ECKAEGwithSHA512KDF()",
                "+\t\t{",
                "+\t\t\tsuper(\"ECKAEGwithSHA512KDF\", new ECDHBasicAgreement(), new ECKaEgKEKGenerator(new SHA512Digest(),",
                "+\t\t\t\t\tECKaEgKEKGenerator.DONTUSE_SHARED_INFO));",
                "+\t\t}",
                "+\t}",
                " }"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/asn1/bsi/BSIObjectIdentifiers.java",
                "core/src/main/java/org/bouncycastle/crypto/agreement/kdf/ECKaEgKEKGenerator.java",
                "pkix/src/main/java/org/bouncycastle/cms/CMSAlgorithm.java",
                "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/ec/KeyAgreementSpi.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "96fd9aa50b693137dbf36a94a4b94139e3cff0a7"
                ],
                [
                    "no-tag",
                    "561aeb49d0b25198fecfb05b9958c4b13abae452"
                ]
            ],
            "tags": [
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "44aff1b27cb7507800aa6fd0be37436bfc3101af",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1518329659,
            "hunks": 1,
            "message": "JavaDoc",
            "diff": [
                "diff --git a/pkix/src/main/java/org/bouncycastle/operator/DigestCalculatorProvider.java b/pkix/src/main/java/org/bouncycastle/operator/DigestCalculatorProvider.java",
                "index 23652703a..d912f00ff 100644",
                "--- a/pkix/src/main/java/org/bouncycastle/operator/DigestCalculatorProvider.java",
                "+++ b/pkix/src/main/java/org/bouncycastle/operator/DigestCalculatorProvider.java",
                "@@ -4,2 +4,5 @@ import org.bouncycastle.asn1.x509.AlgorithmIdentifier;",
                "+/**",
                "+ * The base interface for a provider of DigestCalculator implementations.",
                "+ */",
                " public interface DigestCalculatorProvider"
            ],
            "changed_files": [
                "pkix/src/main/java/org/bouncycastle/operator/DigestCalculatorProvider.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "cfec0e70726f8f4f9aab7a712f37e4ec84ac0cdc"
                ],
                [
                    "no-tag",
                    "0741851d9dcc0ecfa7324c0f091f3b023ad644fb"
                ],
                [
                    "no-tag",
                    "4f4bdada9ffedc3c8f9fdef8f510d0cf36bd4a06"
                ],
                [
                    "no-tag",
                    "ef0bd5d1a9c9ccd55df6eaf0289f9f349c0b184b"
                ],
                [
                    "no-tag",
                    "69ca6e1e04b775a707f44c3fdd2ccae8c2e0649f"
                ]
            ],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "cd15aa9e1fc75fa564e5f2798d44e3b7c1da1d19",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1516418734,
            "hunks": 1,
            "message": "added CTS/CS3 padding support.",
            "diff": [
                "diff --git a/prov/src/main/java/org/bouncycastle/jcajce/provider/symmetric/util/BaseBlockCipher.java b/prov/src/main/java/org/bouncycastle/jcajce/provider/symmetric/util/BaseBlockCipher.java",
                "index 2c89012b4..008c736c2 100644",
                "--- a/prov/src/main/java/org/bouncycastle/jcajce/provider/symmetric/util/BaseBlockCipher.java",
                "+++ b/prov/src/main/java/org/bouncycastle/jcajce/provider/symmetric/util/BaseBlockCipher.java",
                "@@ -451,3 +451,3 @@ public class BaseBlockCipher",
                "         }",
                "-        else if (paddingName.equals(\"WITHCTS\"))",
                "+        else if (paddingName.equals(\"WITHCTS\") || paddingName.equals(\"CTSPADDING\") || paddingName.equals(\"CS3PADDING\"))",
                "         {"
            ],
            "changed_files": [
                "prov/src/main/java/org/bouncycastle/jcajce/provider/symmetric/util/BaseBlockCipher.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "7a72f0cfb502f96d9da9935c07a6d17c67451063"
                ],
                [
                    "no-tag",
                    "2d457b954a1fc6e5ed2dd8cd98aa7a17bb052b5f"
                ]
            ],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "277349aa56884fe1ea650808833696dc3944889b",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1511859359,
            "hunks": 3,
            "message": "Account for possible extra padding in getCiphertextLimit",
            "diff": [
                "diff --git a/tls/src/main/java/org/bouncycastle/tls/crypto/impl/TlsBlockCipher.java b/tls/src/main/java/org/bouncycastle/tls/crypto/impl/TlsBlockCipher.java",
                "index b91cc060a..9c9dbb6c1 100644",
                "--- a/tls/src/main/java/org/bouncycastle/tls/crypto/impl/TlsBlockCipher.java",
                "+++ b/tls/src/main/java/org/bouncycastle/tls/crypto/impl/TlsBlockCipher.java",
                "@@ -125,7 +125,9 @@ public class TlsBlockCipher",
                "-        // Leave room for the MAC, and require block-alignment",
                "-        // Minimum 1 byte of padding",
                "+        int maxPadding = useExtraPadding ? 255 : blockSize;",
                "+",
                "+        // Leave room for the MAC and (block-aligning) padding",
                "         if (encryptThenMAC)",
                "         {",
                "-            ciphertextLimit += blockSize - (ciphertextLimit % blockSize);",
                "+            ciphertextLimit += maxPadding;",
                "+            ciphertextLimit -= (ciphertextLimit % blockSize);",
                "             ciphertextLimit += macSize;",
                "@@ -135,3 +137,4 @@ public class TlsBlockCipher",
                "             ciphertextLimit += macSize;",
                "-            ciphertextLimit += blockSize - (ciphertextLimit % blockSize);",
                "+            ciphertextLimit += maxPadding;",
                "+            ciphertextLimit -= (ciphertextLimit % blockSize);",
                "         }"
            ],
            "changed_files": [
                "tls/src/main/java/org/bouncycastle/tls/crypto/impl/TlsBlockCipher.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "990598f5db534c6fdd4199f19374c29914061662"
                ],
                [
                    "no-tag",
                    "2d51d76cc02bd346cd339cd6e9fd1b64220f932d"
                ]
            ],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3fbfa66c5caa9ee1a5e345067597500c3e04e1b6",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1514335090,
            "hunks": 16,
            "message": "Java 1.4 updates, doc updates.",
            "diff": [
                "diff --git a/CONTRIBUTORS.html b/CONTRIBUTORS.html",
                "index c607942c7..1549c171b 100644",
                "--- a/CONTRIBUTORS.html",
                "+++ b/CONTRIBUTORS.html",
                "@@ -8,2 +8,7 @@ Donors",
                " <p>",
                "+The following people donated financially to help with the release of 1.59:",
                "+<br />",
                "+Brian Reid.",
                "+</p>",
                "+<p>",
                " The following people and organisations donated financially to help with the release of 1.57:",
                "@@ -462,4 +467,4 @@ CertPath support for implicit DSA parameters and a range of NameConstraints. Add",
                " <li>Scott Woodward &lt;scott&#064bit3consulting.com&gt; performance fix for CTRSP800DRBG.</li>",
                "-<li>Lijun Liao &lt;https://github.com/xipki&gt; reset fix for SM2 signatures.</li>",
                "-<li>David Strawn &lt;https://github.com/isomarcte&gt; fix for off by one error in SCRYPT bounds checking</li>",
                "+<li>Lijun Liao &lt;https://github.com/xipki&gt; reset fix for SM2 signatures, performance improvements for SHA-3.</li>",
                "+<li>David Strawn &lt;https://github.com/isomarcte&gt; fix for off by one error in SCRYPT bounds checking.</li>",
                " </ul>",
                "diff --git a/ant/jdk14.xml b/ant/jdk14.xml",
                "index ef93ba144..f0452c39b 100644",
                "--- a/ant/jdk14.xml",
                "+++ b/ant/jdk14.xml",
                "@@ -36,2 +36,3 @@",
                "             <fileset dir=\"prov/src/main/java\">",
                "+                <exclude name=\"**/BCFKSStoreParameter.java\" />",
                "                 <exclude name=\"**/ECPointUtil.java\" />",
                "diff --git a/bc-build.properties b/bc-build.properties",
                "index 6f6620647..d5a831f43 100644",
                "--- a/bc-build.properties",
                "+++ b/bc-build.properties",
                "@@ -1,6 +1,6 @@",
                "-release.suffix: 159b07",
                "-release.name: 1.59.0.7",
                "-release.version: 1.59.0.7",
                "-release.debug: true",
                "+release.suffix: 159",
                "+release.name: 1.59",
                "+release.version: 1.59",
                "+release.debug: false",
                "diff --git a/docs/releasenotes.html b/docs/releasenotes.html",
                "index 22640f61d..ade6ea467 100644",
                "--- a/docs/releasenotes.html",
                "+++ b/docs/releasenotes.html",
                "@@ -26,6 +26,5 @@ to conform the algorithms to the JCE framework.",
                " Release: 1.59 <br/>",
                "-Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ",
                "+Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2017, December 28",
                " <h3>2.1.2 Defects Fixed</h3>",
                " <ul>",
                "-<li>Fixed CVE-2017-13098 (\"ROBOT\"), a Bleichenbacher oracle in TLS when RSA key exchange is negotiated. This potentially affected BCJSSE servers and any other TLS servers configured to use JCE for the underlying crypto.</li>",
                " <li>Issues with using PQC based keys with the provided BC KeyStores have now been fixed.</li>",
                "@@ -38,4 +37,7 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;",
                " <li>The curve parameters for tc26_gost_3410_12_256_paramSetA were incorrect. These have been fixed.</li>",
                "+<li>Further work has been done to try and prevent escaping exceptions on opening random files as BCFKS files or PKCS#12 files.</li>",
                "+<li>An off-by-one error for the max N check for SCRYPT has been fixed. SCRYPT should now be compliant with RFC 7914.<li>",
                "+<li>ASN1GeneralizedTime will now accept a broader range of input strings.</li>",
                " </ul>",
                "-<h3>2.2.3 Additional Features and Functionality</h3>",
                "+<h3>2.1.3 Additional Features and Functionality</h3>",
                " <ul>",
                "@@ -50,2 +52,12 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;",
                " <li>Support has been added for generating certificates and signatures in the PKIX API using SHA-3 based digests.</li>",
                "+<li>Further work has been done on improving SHA-3 performance.</li>",
                "+<li>The organizationIdentifier (2.5.4.97) attribute has been added to BCStyle.</li>",
                "+<li>GOST3412-2015 has been added to the JCE provider and the lightweight API.</li>",
                "+<li>The Blake2s message digest has been added to the provider and the lightweight API.</li>",
                "+<li>Unified Cofactor Diffie-Hellman (ECCDHU) is now supported for EC in the JCE and the lightweight API.</li>",
                "+<li>A DEROtherInfo generator for key agreement using NewHope as the source of the shared private info has been added that can be used in conjunction with regular key agreement algorithms.</li>",
                "+</ul>",
                "+<h3>2.1.4 Security Related Changes and CVE's Addressed by this Release</h3>",
                "+<ul>",
                "+<li>CVE-2017-13098 (\"ROBOT\"), a Bleichenbacher oracle in TLS when RSA key exchange is negotiated. This potentially affected BCJSSE servers and any other TLS servers configured to use JCE for the underlying crypto - note the two TLS implementations using the BC lightweight APIs are not affected by this.</li>",
                " </ul>",
                "diff --git a/docs/specifications.html b/docs/specifications.html",
                "index 3ae5d10b0..c5a7214e5 100644",
                "--- a/docs/specifications.html",
                "+++ b/docs/specifications.html",
                "@@ -221,2 +221,3 @@ used with the above modes.",
                " <tr><td><b>GOST28147Engine</b></td><td>256</td><td>64 bit</td><td>Has a range of S-boxes</td></tr>",
                "+<tr><td><b>GOST3412_2015Engine</b></td><td>256</td><td>128 bit</td><td>&nbsp;</td></tr>",
                " <tr><td><b>IDEAEngine</b></td><td>128</td><td>64 bit</td><td>&nbsp;</td></tr>",
                "@@ -311,2 +312,4 @@ implementations",
                " <tr><th>Name</th><th>Output (in bits)</th><th>Notes</th></tr>",
                "+<tr><td><b>Blake2sDigest</b></td><td>128, 160, 224, 256</td><td></td></tr>",
                "+<tr><td><b>Blake2bDigest</b></td><td>224, 256, 384, 512</td><td></td></tr>",
                " <tr><td><b>DSTU7564Digest</b></td><td>256, 384, 512</td><td></td></tr>",
                "@@ -700,3 +703,3 @@ as;",
                " Diffie-Hellman key agreement is supported using the \"DH\", \"ECDH\",",
                "-\"ECCDH\" (EC cofactor DH) and \"ECMQV\" key agreement instances and their variations. Key exchange, which also uses the KeyAgreement API is supported by \"NH\" (the NewHope algorithm (BCPQC)). SM2 key exchange is currently supported in the lightweight API.",
                "+\"ECCDH\" (EC Cofactor DH), \"ECMQV\" and \"ECCDHU\" (EC Cofactor DH Unified) key agreement instances and their variations. Key exchange, which also uses the KeyAgreement API is supported by \"NH\" (the NewHope algorithm (BCPQC)). SM2 key exchange is currently supported in the lightweight API.",
                " </p>",
                "diff --git a/pkix/src/main/java/org/bouncycastle/cert/path/CertPathValidationResultBuilder.java b/pkix/src/main/java/org/bouncycastle/cert/path/CertPathValidationResultBuilder.java",
                "index 1ace0c042..c00d5f77f 100644",
                "--- a/pkix/src/main/java/org/bouncycastle/cert/path/CertPathValidationResultBuilder.java",
                "+++ b/pkix/src/main/java/org/bouncycastle/cert/path/CertPathValidationResultBuilder.java",
                "@@ -5,2 +5,4 @@ import java.util.List;",
                "+import org.bouncycastle.util.Integers;",
                "+",
                " class CertPathValidationResultBuilder",
                "@@ -26,3 +28,3 @@ class CertPathValidationResultBuilder",
                "             return new CertPathValidationResult(context,",
                "-                toInts(certIndexes), toInts(ruleIndexes), exceptions.toArray(new CertPathValidationException[exceptions.size()]));",
                "+                toInts(certIndexes), toInts(ruleIndexes), (CertPathValidationException[])exceptions.toArray(new CertPathValidationException[exceptions.size()]));",
                "         }",
                "@@ -32,4 +34,4 @@ class CertPathValidationResultBuilder",
                "     {",
                "-        this.certIndexes.add(certIndex);",
                "-        this.ruleIndexes.add(ruleIndex);",
                "+        this.certIndexes.add(Integers.valueOf(certIndex));",
                "+        this.ruleIndexes.add(Integers.valueOf(ruleIndex));",
                "         this.exceptions.add(exception);",
                "@@ -43,3 +45,3 @@ class CertPathValidationResultBuilder",
                "         {",
                "-            rv[i] = values.get(i).intValue();",
                "+            rv[i] = ((Integer)values.get(i)).intValue();",
                "         }"
            ],
            "changed_files": [
                "CONTRIBUTORS.html",
                "ant/jdk14.xml",
                "bc-build.properties",
                "docs/releasenotes.html",
                "docs/specifications.html",
                "pkix/src/main/java/org/bouncycastle/cert/path/CertPathValidationResultBuilder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "16d6002b3cf029a4f7c26123a04e5ce0ae44e1c1"
                ],
                [
                    "no-tag",
                    "6eee0a708c4bf56b06538f844be74f3abfaaa5cb"
                ]
            ],
            "tags": [
                "r1v60"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, release, bouncy, note",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6f50f3cf771047b11ce21a041dff657d6014632f",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1514335452,
            "hunks": 2,
            "message": "JavaDoc, Java 1.4 update",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/math/ec/FixedPointUtil.java b/core/src/main/java/org/bouncycastle/math/ec/FixedPointUtil.java",
                "index afd2413db..6f9edd21b 100644",
                "--- a/core/src/main/java/org/bouncycastle/math/ec/FixedPointUtil.java",
                "+++ b/core/src/main/java/org/bouncycastle/math/ec/FixedPointUtil.java",
                "@@ -25,3 +25,3 @@ public class FixedPointUtil",
                "     /**",
                "-     * @deprecated Use {@link #precompute(ECPoint) instead, as minWidth parameter is now ignored.",
                "+     * @deprecated Use {@link #precompute(ECPoint)} instead, as minWidth parameter is now ignored.",
                "      */",
                "diff --git a/prov/src/main/jdk1.4/org/bouncycastle/jcajce/provider/asymmetric/dh/KeyPairGeneratorSpi.java b/prov/src/main/jdk1.4/org/bouncycastle/jcajce/provider/asymmetric/dh/KeyPairGeneratorSpi.java",
                "new file mode 100644",
                "index 000000000..9f2b05391",
                "--- /dev/null",
                "+++ b/prov/src/main/jdk1.4/org/bouncycastle/jcajce/provider/asymmetric/dh/KeyPairGeneratorSpi.java",
                "@@ -0,0 +1,126 @@",
                "+package org.bouncycastle.jcajce.provider.asymmetric.dh;",
                "+",
                "+import java.security.InvalidAlgorithmParameterException;",
                "+import java.security.KeyPair;",
                "+import java.security.SecureRandom;",
                "+import java.security.spec.AlgorithmParameterSpec;",
                "+import java.util.Hashtable;",
                "+",
                "+import javax.crypto.spec.DHParameterSpec;",
                "+",
                "+import org.bouncycastle.crypto.AsymmetricCipherKeyPair;",
                "+import org.bouncycastle.crypto.generators.DHBasicKeyPairGenerator;",
                "+import org.bouncycastle.crypto.generators.DHParametersGenerator;",
                "+import org.bouncycastle.crypto.params.DHKeyGenerationParameters;",
                "+import org.bouncycastle.crypto.params.DHParameters;",
                "+import org.bouncycastle.crypto.params.DHPrivateKeyParameters;",
                "+import org.bouncycastle.crypto.params.DHPublicKeyParameters;",
                "+import org.bouncycastle.jcajce.provider.asymmetric.util.PrimeCertaintyCalculator;",
                "+import org.bouncycastle.jce.provider.BouncyCastleProvider;",
                "+import org.bouncycastle.util.Integers;",
                "+",
                "+public class KeyPairGeneratorSpi",
                "+    extends java.security.KeyPairGenerator",
                "+{",
                "+    private static Hashtable params = new Hashtable();",
                "+    private static Object    lock = new Object();",
                "+",
                "+    DHKeyGenerationParameters param;",
                "+    DHBasicKeyPairGenerator engine = new DHBasicKeyPairGenerator();",
                "+    int strength = 2048;",
                "+    SecureRandom random = new SecureRandom();",
                "+    boolean initialised = false;",
                "+",
                "+    public KeyPairGeneratorSpi()",
                "+    {",
                "+        super(\"DH\");",
                "+    }",
                "+",
                "+    public void initialize(",
                "+        int strength,",
                "+        SecureRandom random)",
                "+    {",
                "+        this.strength = strength;",
                "+        this.random = random;",
                "+        this.initialised = false;",
                "+    }",
                "+",
                "+    public void initialize(",
                "+        AlgorithmParameterSpec params,",
                "+        SecureRandom random)",
                "+        throws InvalidAlgorithmParameterException",
                "+    {",
                "+        if (!(params instanceof DHParameterSpec))",
                "+        {",
                "+            throw new InvalidAlgorithmParameterException(\"parameter object not a DHParameterSpec\");",
                "+        }",
                "+        DHParameterSpec dhParams = (DHParameterSpec)params;",
                "+",
                "+        try",
                "+        {",
                "+            param = new DHKeyGenerationParameters(random, new DHParameters(dhParams.getP(), dhParams.getG(), null, dhParams.getL()));",
                "+        }",
                "+        catch (IllegalArgumentException e)",
                "+        {",
                "+            throw new InvalidAlgorithmParameterException(e.getMessage());",
                "+        }",
                "+        ",
                "+        engine.init(param);",
                "+        initialised = true;",
                "+    }",
                "+",
                "+    public KeyPair generateKeyPair()",
                "+    {",
                "+        if (!initialised)",
                "+        {",
                "+            Integer paramStrength = Integers.valueOf(strength);",
                "+",
                "+            if (params.containsKey(paramStrength))",
                "+            {",
                "+                param = (DHKeyGenerationParameters)params.get(paramStrength);",
                "+            }",
                "+            else",
                "+            {",
                "+                DHParameterSpec dhParams = BouncyCastleProvider.CONFIGURATION.getDHDefaultParameters(strength);",
                "+",
                "+                if (dhParams != null)",
                "+                {",
                "+                    param = new DHKeyGenerationParameters(random, new DHParameters(dhParams.getP(), dhParams.getG(), null, dhParams.getL()));",
                "+                }",
                "+                else",
                "+                {",
                "+                    synchronized (lock)",
                "+                    {",
                "+                        // we do the check again in case we were blocked by a generator for",
                "+                        // our key size.",
                "+                        if (params.containsKey(paramStrength))",
                "+                        {",
                "+                            param = (DHKeyGenerationParameters)params.get(paramStrength);",
                "+                        }",
                "+                        else",
                "+                        {",
                "+",
                "+                            DHParametersGenerator pGen = new DHParametersGenerator();",
                "+",
                "+                            pGen.init(strength, PrimeCertaintyCalculator.getDefaultCertainty(strength), random);",
                "+",
                "+                            param = new DHKeyGenerationParameters(random, pGen.generateParameters());",
                "+",
                "+                            params.put(paramStrength, param);",
                "+                        }",
                "+                    }",
                "+                }",
                "+            }",
                "+",
                "+            engine.init(param);",
                "+",
                "+            initialised = true;",
                "+        }",
                "+",
                "+        AsymmetricCipherKeyPair pair = engine.generateKeyPair();",
                "+        DHPublicKeyParameters pub = (DHPublicKeyParameters)pair.getPublic();",
                "+        DHPrivateKeyParameters priv = (DHPrivateKeyParameters)pair.getPrivate();",
                "+",
                "+        return new KeyPair(new BCDHPublicKey(pub), new BCDHPrivateKey(priv));",
                "+    }",
                "+}"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/math/ec/FixedPointUtil.java",
                "prov/src/main/jdk1.4/org/bouncycastle/jcajce/provider/asymmetric/dh/KeyPairGeneratorSpi.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "725b9ebf3f4d5626f4b90216371e166148b587b1"
                ],
                [
                    "no-tag",
                    "4da8d27aeff193cff4cbfbc9164d0b525a9d957c"
                ]
            ],
            "tags": [
                "r1v60"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7dc09d7b06bc0a987026f1042c6073bd7de69987",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1514342608,
            "hunks": 2,
            "message": "compatibility update",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/asn1/DERGeneralizedTime.java b/core/src/main/java/org/bouncycastle/asn1/DERGeneralizedTime.java",
                "index ee75d9629..1270e85cc 100644",
                "--- a/core/src/main/java/org/bouncycastle/asn1/DERGeneralizedTime.java",
                "+++ b/core/src/main/java/org/bouncycastle/asn1/DERGeneralizedTime.java",
                "@@ -77,3 +77,3 @@ public class DERGeneralizedTime",
                "                     System.arraycopy(time, 0, derTime, 0, ind);",
                "-                    derTime[ind] = 'Z';",
                "+                    derTime[ind] = (byte)'Z';",
                "@@ -86,3 +86,3 @@ public class DERGeneralizedTime",
                "                     System.arraycopy(time, 0, derTime, 0, ind + 1);",
                "-                    derTime[ind + 1] = 'Z';",
                "+                    derTime[ind + 1] = (byte)'Z';"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/asn1/DERGeneralizedTime.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "ba3cf5474276fd94d6fef46da0c590a3a25e4946"
                ],
                [
                    "no-tag",
                    "85563a95d60a863571c80d4f53adb1731eab7731"
                ]
            ],
            "tags": [
                "r1rv59",
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "65d26a381b8b575ed5ff11a65dc43dc827e742be",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1515471500,
            "hunks": 26,
            "message": "BCJSSE: Close sockets instead of their streams",
            "diff": [
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketBase.java b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketBase.java",
                "index aa76c8a0c..35c4c7ae6 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketBase.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketBase.java",
                "@@ -2,2 +2,3 @@ package org.bouncycastle.jsse.provider;",
                "+import java.io.Closeable;",
                " import java.io.IOException;",
                "@@ -20,2 +21,10 @@ abstract class ProvSSLSocketBase",
                " {",
                "+    protected final Closeable socketCloser = new Closeable()",
                "+    {",
                "+        public void close() throws IOException",
                "+        {",
                "+            closeSocket();",
                "+        }",
                "+    };",
                "+",
                "     protected final Set<HandshakeCompletedListenerAdapter> listeners = Collections.synchronizedSet(",
                "@@ -61,2 +70,7 @@ abstract class ProvSSLSocketBase",
                "+    protected void closeSocket() throws IOException",
                "+    {",
                "+        super.close();",
                "+    }",
                "+",
                "     @Override",
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketDirect.java b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketDirect.java",
                "index e04082f66..5a5f64ab0 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketDirect.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketDirect.java",
                "@@ -112,3 +112,7 @@ class ProvSSLSocketDirect",
                "     {",
                "-        if (protocol != null)",
                "+        if (protocol == null)",
                "+        {",
                "+            closeSocket();",
                "+        }",
                "+        else",
                "         {",
                "@@ -116,3 +120,2 @@ class ProvSSLSocketDirect",
                "         }",
                "-        super.close();",
                "     }",
                "@@ -292,5 +295,8 @@ class ProvSSLSocketDirect",
                "+            InputStream input = super.getInputStream();",
                "+            OutputStream output = super.getOutputStream();",
                "+",
                "             if (this.useClientMode)",
                "             {",
                "-                TlsClientProtocol clientProtocol = new TlsClientProtocol(super.getInputStream(), super.getOutputStream());",
                "+                TlsClientProtocol clientProtocol = new ProvTlsClientProtocol(input, output, socketCloser);",
                "                 this.protocol = clientProtocol;",
                "@@ -304,3 +310,3 @@ class ProvSSLSocketDirect",
                "             {",
                "-                TlsServerProtocol serverProtocol = new TlsServerProtocol(super.getInputStream(), super.getOutputStream());",
                "+                TlsServerProtocol serverProtocol = new ProvTlsServerProtocol(input, output, socketCloser);",
                "                 this.protocol = serverProtocol;",
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketWrap.java b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketWrap.java",
                "index 0f6c73cb8..0a10b04a6 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketWrap.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketWrap.java",
                "@@ -79,3 +79,7 @@ class ProvSSLSocketWrap",
                "     {",
                "-        if (protocol != null)",
                "+        if (protocol == null)",
                "+        {",
                "+            closeSocket();",
                "+        }",
                "+        else",
                "         {",
                "@@ -83,2 +87,7 @@ class ProvSSLSocketWrap",
                "         }",
                "+    }",
                "+",
                "+    @Override",
                "+    protected void closeSocket() throws IOException",
                "+    {",
                "         if (wrapAutoClose)",
                "@@ -87,2 +96,9 @@ class ProvSSLSocketWrap",
                "         }",
                "+        else if (protocol != null)",
                "+        {",
                "+            /*",
                "+             * TODO[jsse] If we initiated the close, we need to wait for the close_notify from the",
                "+             * peer to arrive so that the underlying socket can be used after we detach.",
                "+             */",
                "+        }",
                "     }",
                "@@ -442,5 +458,8 @@ class ProvSSLSocketWrap",
                "+            InputStream input = wrapSocket.getInputStream();",
                "+            OutputStream output = wrapSocket.getOutputStream();",
                "+",
                "             if (this.useClientMode)",
                "             {",
                "-                TlsClientProtocol clientProtocol = new TlsClientProtocol(wrapSocket.getInputStream(), wrapSocket.getOutputStream());",
                "+                TlsClientProtocol clientProtocol = new ProvTlsClientProtocol(input, output, socketCloser);",
                "                 this.protocol = clientProtocol;",
                "@@ -454,3 +473,3 @@ class ProvSSLSocketWrap",
                "             {",
                "-                TlsServerProtocol serverProtocol = new TlsServerProtocol(wrapSocket.getInputStream(), wrapSocket.getOutputStream());",
                "+                TlsServerProtocol serverProtocol = new ProvTlsServerProtocol(input, output, socketCloser);",
                "                 this.protocol = serverProtocol;",
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvTlsClientProtocol.java b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvTlsClientProtocol.java",
                "new file mode 100644",
                "index 000000000..289300171",
                "--- /dev/null",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvTlsClientProtocol.java",
                "@@ -0,0 +1,26 @@",
                "+package org.bouncycastle.jsse.provider;",
                "+",
                "+import java.io.Closeable;",
                "+import java.io.IOException;",
                "+import java.io.InputStream;",
                "+import java.io.OutputStream;",
                "+",
                "+import org.bouncycastle.tls.TlsClientProtocol;",
                "+",
                "+class ProvTlsClientProtocol extends TlsClientProtocol",
                "+{",
                "+    private final Closeable closeable;",
                "+",
                "+    ProvTlsClientProtocol(InputStream input, OutputStream output, Closeable closeable)",
                "+    {",
                "+        super(input, output);",
                "+",
                "+        this.closeable = closeable;",
                "+    }",
                "+",
                "+    @Override",
                "+    protected void closeConnection() throws IOException",
                "+    {",
                "+        closeable.close();",
                "+    }",
                "+}",
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvTlsServerProtocol.java b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvTlsServerProtocol.java",
                "new file mode 100644",
                "index 000000000..d1b9d3a5b",
                "--- /dev/null",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvTlsServerProtocol.java",
                "@@ -0,0 +1,26 @@",
                "+package org.bouncycastle.jsse.provider;",
                "+",
                "+import java.io.Closeable;",
                "+import java.io.IOException;",
                "+import java.io.InputStream;",
                "+import java.io.OutputStream;",
                "+",
                "+import org.bouncycastle.tls.TlsServerProtocol;",
                "+",
                "+class ProvTlsServerProtocol extends TlsServerProtocol",
                "+{",
                "+    private final Closeable closeable;",
                "+",
                "+    ProvTlsServerProtocol(InputStream input, OutputStream output, Closeable closeable)",
                "+    {",
                "+        super(input, output);",
                "+",
                "+        this.closeable = closeable;",
                "+    }",
                "+",
                "+    @Override",
                "+    protected void closeConnection() throws IOException",
                "+    {",
                "+        closeable.close();",
                "+    }",
                "+}",
                "diff --git a/tls/src/main/java/org/bouncycastle/tls/RecordStream.java b/tls/src/main/java/org/bouncycastle/tls/RecordStream.java",
                "index f30795919..ec953ef08 100644",
                "--- a/tls/src/main/java/org/bouncycastle/tls/RecordStream.java",
                "+++ b/tls/src/main/java/org/bouncycastle/tls/RecordStream.java",
                "@@ -435,4 +435,5 @@ class RecordStream",
                "-    void safeClose()",
                "+    void close() throws IOException",
                "     {",
                "+        IOException io = null;",
                "         try",
                "@@ -443,2 +444,3 @@ class RecordStream",
                "         {",
                "+            io = e;",
                "         }",
                "@@ -451,2 +453,11 @@ class RecordStream",
                "         {",
                "+            if (io == null)",
                "+            {",
                "+                io = e;",
                "+            }",
                "+            else",
                "+            {",
                "+                // TODO[tls] Available from JDK 7",
                "+//                io.addSuppressed(e);",
                "+            }",
                "         }",
                "diff --git a/tls/src/main/java/org/bouncycastle/tls/TlsProtocol.java b/tls/src/main/java/org/bouncycastle/tls/TlsProtocol.java",
                "index 6ce5aa37d..6d2133bd2 100644",
                "--- a/tls/src/main/java/org/bouncycastle/tls/TlsProtocol.java",
                "+++ b/tls/src/main/java/org/bouncycastle/tls/TlsProtocol.java",
                "@@ -109,2 +109,7 @@ public abstract class TlsProtocol",
                "+    protected void closeConnection() throws IOException",
                "+    {",
                "+        recordStream.close();",
                "+    }",
                "+",
                "     protected abstract TlsContext getContext();",
                "@@ -167,4 +172,2 @@ public abstract class TlsProtocol",
                "-            recordStream.safeClose();",
                "-",
                "             if (!appDataReady)",
                "@@ -173,2 +176,4 @@ public abstract class TlsProtocol",
                "             }",
                "+",
                "+            closeConnection();",
                "         }",
                "@@ -187,3 +192,3 @@ public abstract class TlsProtocol",
                "-    protected void handleFailure()",
                "+    protected void handleFailure() throws IOException",
                "     {",
                "@@ -199,4 +204,2 @@ public abstract class TlsProtocol",
                "-        recordStream.safeClose();",
                "-",
                "         if (!appDataReady)",
                "@@ -205,2 +208,4 @@ public abstract class TlsProtocol",
                "         }",
                "+",
                "+        closeConnection();",
                "     }"
            ],
            "changed_files": [
                "tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketBase.java",
                "tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketDirect.java",
                "tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketWrap.java",
                "tls/src/main/java/org/bouncycastle/jsse/provider/ProvTlsClientProtocol.java",
                "tls/src/main/java/org/bouncycastle/jsse/provider/ProvTlsServerProtocol.java",
                "tls/src/main/java/org/bouncycastle/tls/RecordStream.java",
                "tls/src/main/java/org/bouncycastle/tls/TlsProtocol.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "0977c8968018c72fc4ffd96dacf6360ee3ad0a6f"
                ],
                [
                    "no-tag",
                    "a666dd7138dd73e5a902518c7c50ad6a284ecb14"
                ]
            ],
            "tags": [
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "43e81b07a1b85543612f08dd85af4599b3763c34",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1516002832,
            "hunks": 33,
            "message": "BCJSSE: Support SNI in earlier JDKs via BC extensions",
            "diff": [
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/BCSNIHostName.java b/tls/src/main/java/org/bouncycastle/jsse/BCSNIHostName.java",
                "index d4a41d3ca..b06d905d9 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/BCSNIHostName.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/BCSNIHostName.java",
                "@@ -6,4 +6,2 @@ import java.util.regex.Pattern;",
                "-import org.bouncycastle.tls.NameType;",
                "-",
                " public final class BCSNIHostName extends BCSNIServerName",
                "@@ -48,3 +46,3 @@ public final class BCSNIHostName extends BCSNIServerName",
                "     {",
                "-        super(NameType.host_name, toAscii(hostName));",
                "+        super(BCStandardConstants.SNI_HOST_NAME, toAscii(hostName));",
                "@@ -55,3 +53,3 @@ public final class BCSNIHostName extends BCSNIServerName",
                "     {",
                "-        super(NameType.host_name, asciiEncoding);",
                "+        super(BCStandardConstants.SNI_HOST_NAME, asciiEncoding);",
                "@@ -91,3 +89,3 @@ public final class BCSNIHostName extends BCSNIServerName",
                "         {",
                "-            super(NameType.host_name);",
                "+            super(BCStandardConstants.SNI_HOST_NAME);",
                "@@ -98,3 +96,3 @@ public final class BCSNIHostName extends BCSNIServerName",
                "         {",
                "-            if (serverName == null || serverName.getType() != NameType.host_name)",
                "+            if (serverName == null || serverName.getType() != BCStandardConstants.SNI_HOST_NAME)",
                "             {",
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/BCSSLEngine.java b/tls/src/main/java/org/bouncycastle/jsse/BCSSLEngine.java",
                "index ae120a389..ff502301b 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/BCSSLEngine.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/BCSSLEngine.java",
                "@@ -16,2 +16,22 @@ public interface BCSSLEngine",
                "     BCSSLConnection getConnection();",
                "+",
                "+    /**",
                "+     * Returns a {@link BCSSLParameters} with properties reflecting the current configuration.",
                "+     * @return the current {@link BCSSLParameters parameters}",
                "+     */",
                "+    BCSSLParameters getParameters();",
                "+",
                "+    /**",
                "+     * Sets parameters according to the properties in a {@link BCSSLParameters}.",
                "+     * <p>",
                "+     * Note that any properties set to null will be ignored, which will leave the corresponding",
                "+     * settings unchanged.",
                "+     * </p>",
                "+     *",
                "+     * @param parameters",
                "+     *            the {@link BCSSLParameters parameters} to set",
                "+     * @throws IllegalArgumentException",
                "+     *             if the cipherSuites or protocols properties contain unsupported values",
                "+     */",
                "+    void setParameters(BCSSLParameters parameters);",
                " }",
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/BCSSLParameters.java b/tls/src/main/java/org/bouncycastle/jsse/BCSSLParameters.java",
                "new file mode 100644",
                "index 000000000..2d42cd60b",
                "--- /dev/null",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/BCSSLParameters.java",
                "@@ -0,0 +1,154 @@",
                "+package org.bouncycastle.jsse;",
                "+",
                "+import java.util.ArrayList;",
                "+import java.util.Collection;",
                "+import java.util.Collections;",
                "+import java.util.HashSet;",
                "+import java.util.List;",
                "+import java.util.Set;",
                "+",
                "+/**",
                "+ * A BCJSSE-specific interface providing access to extended SSL parameters in earlier JDKs.",
                "+ */",
                "+public final class BCSSLParameters",
                "+{",
                "+    private static String[] clone(String[] a)",
                "+    {",
                "+        return a == null ? null : (String[])a.clone();",
                "+    }",
                "+",
                "+    private static <T> List<T> copyList(Collection<T> list)",
                "+    {",
                "+        if (list == null)",
                "+        {",
                "+            return null;",
                "+        }",
                "+        if (list.isEmpty())",
                "+        {",
                "+            return Collections.emptyList();",
                "+        }",
                "+        return Collections.unmodifiableList(new ArrayList<T>(list));",
                "+    }",
                "+",
                "+    private String[] cipherSuites;",
                "+    private String[] protocols;",
                "+    private boolean wantClientAuth;",
                "+    private boolean needClientAuth;",
                "+    private List<BCSNIServerName> serverNames;",
                "+    private List<BCSNIMatcher> sniMatchers;",
                "+",
                "+    public BCSSLParameters()",
                "+    {",
                "+    }",
                "+",
                "+    public BCSSLParameters(String[] cipherSuites)",
                "+    {",
                "+        setCipherSuites(cipherSuites);",
                "+    }",
                "+",
                "+    public BCSSLParameters(String[] cipherSuites, String[] protocols)",
                "+    {",
                "+        setCipherSuites(cipherSuites);",
                "+        setProtocols(protocols);",
                "+    }",
                "+",
                "+    public String[] getCipherSuites()",
                "+    {",
                "+        return clone(cipherSuites);",
                "+    }",
                "+",
                "+    public void setCipherSuites(String[] cipherSuites)",
                "+    {",
                "+        this.cipherSuites = clone(cipherSuites);",
                "+    }",
                "+",
                "+    public String[] getProtocols()",
                "+    {",
                "+        return clone(protocols);",
                "+    }",
                "+",
                "+    public void setProtocols(String[] protocols)",
                "+    {",
                "+        this.protocols = clone(protocols);",
                "+    }",
                "+",
                "+    public boolean getWantClientAuth()",
                "+    {",
                "+        return wantClientAuth;",
                "+    }",
                "+",
                "+    public void setWantClientAuth(boolean wantClientAuth)",
                "+    {",
                "+        this.wantClientAuth = wantClientAuth;",
                "+        this.needClientAuth = false;",
                "+    }",
                "+",
                "+    public boolean getNeedClientAuth()",
                "+    {",
                "+        return needClientAuth;",
                "+    }",
                "+",
                "+    public void setNeedClientAuth(boolean needClientAuth)",
                "+    {",
                "+        this.needClientAuth = needClientAuth;",
                "+        this.wantClientAuth = false;",
                "+    }",
                "+",
                "+    public void setServerNames(List<BCSNIServerName> serverNames)",
                "+    {",
                "+        if (serverNames == null)",
                "+        {",
                "+            this.serverNames = null;",
                "+        }",
                "+        else",
                "+        {",
                "+            List<BCSNIServerName> copy = copyList(serverNames);",
                "+",
                "+            Set<Integer> types = new HashSet<Integer>();",
                "+            for (BCSNIServerName serverName : copy)",
                "+            {",
                "+                int type = serverName.getType();",
                "+                if (!types.add(type))",
                "+                {",
                "+                    throw new IllegalArgumentException(\"Found duplicate SNI server name entry of type \" + type);",
                "+                }",
                "+            }",
                "+",
                "+            this.serverNames = copy;",
                "+        }",
                "+    }",
                "+",
                "+    public List<BCSNIServerName> getServerNames()",
                "+    {",
                "+        return copyList(this.serverNames);",
                "+    }",
                "+",
                "+    public void setSNIMatchers(Collection<BCSNIMatcher> sniMatchers)",
                "+    {",
                "+        if (sniMatchers == null)",
                "+        {",
                "+            this.sniMatchers = null;",
                "+        }",
                "+        else",
                "+        {",
                "+            List<BCSNIMatcher> copy = copyList(sniMatchers);",
                "+",
                "+            Set<Integer> types = new HashSet<Integer>();",
                "+            for (BCSNIMatcher sniMatcher : copy)",
                "+            {",
                "+                int type = sniMatcher.getType();",
                "+                if (!types.add(type))",
                "+                {",
                "+                    throw new IllegalArgumentException(\"Found duplicate SNI matcher entry of type \" + type);",
                "+                }",
                "+            }",
                "+",
                "+            this.sniMatchers = copy;",
                "+        }",
                "+    }",
                "+",
                "+    public Collection<BCSNIMatcher> getSNIMatchers()",
                "+    {",
                "+        return copyList(this.sniMatchers);",
                "+    }",
                "+}",
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/BCSSLSocket.java b/tls/src/main/java/org/bouncycastle/jsse/BCSSLSocket.java",
                "index 22f033979..edcf504e3 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/BCSSLSocket.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/BCSSLSocket.java",
                "@@ -16,2 +16,22 @@ public interface BCSSLSocket",
                "     BCSSLConnection getConnection();",
                "+",
                "+    /**",
                "+     * Returns a {@link BCSSLParameters} with properties reflecting the current configuration.",
                "+     * @return the current {@link BCSSLParameters parameters}",
                "+     */",
                "+    BCSSLParameters getParameters();",
                "+",
                "+    /**",
                "+     * Sets parameters according to the properties in a {@link BCSSLParameters}.",
                "+     * <p>",
                "+     * Note that any properties set to null will be ignored, which will leave the corresponding",
                "+     * settings unchanged.",
                "+     * </p>",
                "+     *",
                "+     * @param parameters",
                "+     *            the {@link BCSSLParameters parameters} to set",
                "+     * @throws IllegalArgumentException",
                "+     *             if the cipherSuites or protocols properties contain unsupported values",
                "+     */",
                "+    void setParameters(BCSSLParameters parameters);",
                " }",
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/BCStandardConstants.java b/tls/src/main/java/org/bouncycastle/jsse/BCStandardConstants.java",
                "new file mode 100644",
                "index 000000000..79a1867da",
                "--- /dev/null",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/BCStandardConstants.java",
                "@@ -0,0 +1,8 @@",
                "+package org.bouncycastle.jsse;",
                "+",
                "+import org.bouncycastle.tls.NameType;",
                "+",
                "+public final class BCStandardConstants",
                "+{",
                "+    public static final int SNI_HOST_NAME = NameType.host_name;",
                "+}",
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/JsseUtils.java b/tls/src/main/java/org/bouncycastle/jsse/provider/JsseUtils.java",
                "index 6409dd5d4..806d50bb5 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/provider/JsseUtils.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/JsseUtils.java",
                "@@ -28,2 +28,3 @@ import org.bouncycastle.jsse.BCSNIMatcher;",
                " import org.bouncycastle.jsse.BCSNIServerName;",
                "+import org.bouncycastle.jsse.BCStandardConstants;",
                " import org.bouncycastle.tls.AlertDescription;",
                "@@ -34,3 +35,2 @@ import org.bouncycastle.tls.HashAlgorithm;",
                " import org.bouncycastle.tls.KeyExchangeAlgorithm;",
                "-import org.bouncycastle.tls.NameType;",
                " import org.bouncycastle.tls.ServerName;",
                "@@ -405,3 +405,3 @@ abstract class JsseUtils",
                "         {",
                "-        case NameType.host_name:",
                "+        case BCStandardConstants.SNI_HOST_NAME:",
                "             return new BCSNIHostName(serverName.getHostName());",
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/JsseUtils_8.java b/tls/src/main/java/org/bouncycastle/jsse/provider/JsseUtils_8.java",
                "index b3494fac8..7b71743d0 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/provider/JsseUtils_8.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/JsseUtils_8.java",
                "@@ -14,3 +14,3 @@ import org.bouncycastle.jsse.BCSNIMatcher;",
                " import org.bouncycastle.jsse.BCSNIServerName;",
                "-import org.bouncycastle.tls.NameType;",
                "+import org.bouncycastle.jsse.BCStandardConstants;",
                "@@ -110,3 +110,3 @@ abstract class JsseUtils_8",
                "     {",
                "-        if (serverName == null || serverName.getType() != NameType.host_name)",
                "+        if (serverName == null || serverName.getType() != BCStandardConstants.SNI_HOST_NAME)",
                "         {",
                "@@ -190,3 +190,3 @@ abstract class JsseUtils_8",
                "     {",
                "-        if (serverName == null || serverName.getType() != NameType.host_name)",
                "+        if (serverName == null || serverName.getType() != BCStandardConstants.SNI_HOST_NAME)",
                "         {",
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLEngine.java b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLEngine.java",
                "index fceabd633..daf229213 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLEngine.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLEngine.java",
                "@@ -18,2 +18,3 @@ import org.bouncycastle.jsse.BCSSLConnection;",
                " import org.bouncycastle.jsse.BCSSLEngine;",
                "+import org.bouncycastle.jsse.BCSSLParameters;",
                " import org.bouncycastle.tls.AlertDescription;",
                "@@ -207,2 +208,7 @@ class ProvSSLEngine",
                "+    public synchronized BCSSLParameters getParameters()",
                "+    {",
                "+        return SSLParametersUtil.getParameters(sslParameters);",
                "+    }",
                "+",
                "     @Override",
                "@@ -279,2 +285,7 @@ class ProvSSLEngine",
                "+    public synchronized void setParameters(BCSSLParameters parameters)",
                "+    {",
                "+        SSLParametersUtil.setParameters(this.sslParameters, parameters);",
                "+    }",
                "+",
                "     @Override",
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocket.java b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocket.java",
                "index 3057b3be7..1970427f6 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocket.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocket.java",
                "@@ -12,2 +12,3 @@ import javax.net.ssl.SSLSession;",
                " import org.bouncycastle.jsse.BCSSLConnection;",
                "+import org.bouncycastle.jsse.BCSSLParameters;",
                "@@ -120,2 +121,7 @@ class ProvSSLSocket",
                "+    public BCSSLParameters getParameters()",
                "+    {",
                "+        return engine.getParameters();",
                "+    }",
                "+",
                "     @Override",
                "@@ -180,2 +186,7 @@ class ProvSSLSocket",
                "+    public void setParameters(BCSSLParameters parameters)",
                "+    {",
                "+        engine.setParameters(parameters);",
                "+    }",
                "+",
                "     @Override",
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketDirect.java b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketDirect.java",
                "index 4b2eebcca..a5c2c8908 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketDirect.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketDirect.java",
                "@@ -15,2 +15,3 @@ import javax.net.ssl.X509TrustManager;",
                " import org.bouncycastle.jsse.BCSSLConnection;",
                "+import org.bouncycastle.jsse.BCSSLParameters;",
                " import org.bouncycastle.tls.TlsClientProtocol;",
                "@@ -178,2 +179,7 @@ class ProvSSLSocketDirect",
                "+    public synchronized BCSSLParameters getParameters()",
                "+    {",
                "+        return SSLParametersUtil.getParameters(sslParameters);",
                "+    }",
                "+",
                "     @Override",
                "@@ -240,2 +246,7 @@ class ProvSSLSocketDirect",
                "+    public synchronized void setParameters(BCSSLParameters parameters)",
                "+    {",
                "+        SSLParametersUtil.setParameters(this.sslParameters, parameters);",
                "+    }",
                "+",
                "     @Override",
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketWrap.java b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketWrap.java",
                "index ac15c951e..640a836d8 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketWrap.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketWrap.java",
                "@@ -18,2 +18,3 @@ import javax.net.ssl.X509TrustManager;",
                " import org.bouncycastle.jsse.BCSSLConnection;",
                "+import org.bouncycastle.jsse.BCSSLParameters;",
                " import org.bouncycastle.tls.TlsClientProtocol;",
                "@@ -253,2 +254,7 @@ class ProvSSLSocketWrap",
                "+    public synchronized BCSSLParameters getParameters()",
                "+    {",
                "+        return SSLParametersUtil.getParameters(sslParameters);",
                "+    }",
                "+",
                "     @Override",
                "@@ -355,2 +361,7 @@ class ProvSSLSocketWrap",
                "+    public synchronized void setParameters(BCSSLParameters parameters)",
                "+    {",
                "+        SSLParametersUtil.setParameters(this.sslParameters, parameters);",
                "+    }",
                "+",
                "     @Override",
                "@@ -379,8 +390,2 @@ class ProvSSLSocketWrap",
                "-    @Override",
                "-    public synchronized void setSSLParameters(SSLParameters sslParameters)",
                "-    {",
                "-        SSLParametersUtil.setSSLParameters(this.sslParameters, sslParameters);",
                "-    }",
                "-",
                "     @Override",
                "@@ -397,2 +402,8 @@ class ProvSSLSocketWrap",
                "+    @Override",
                "+    public synchronized void setSSLParameters(SSLParameters sslParameters)",
                "+    {",
                "+        SSLParametersUtil.setSSLParameters(this.sslParameters, sslParameters);",
                "+    }",
                "+",
                "     @Override",
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/SSLParametersUtil.java b/tls/src/main/java/org/bouncycastle/jsse/provider/SSLParametersUtil.java",
                "index eb8e8cd01..b3e080ae3 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/provider/SSLParametersUtil.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/SSLParametersUtil.java",
                "@@ -5,2 +5,4 @@ import java.security.AccessController;",
                " import java.security.PrivilegedAction;",
                "+import java.util.Collection;",
                "+import java.util.List;",
                "@@ -8,2 +10,6 @@ import javax.net.ssl.SSLParameters;",
                "+import org.bouncycastle.jsse.BCSNIMatcher;",
                "+import org.bouncycastle.jsse.BCSNIServerName;",
                "+import org.bouncycastle.jsse.BCSSLParameters;",
                "+",
                " abstract class SSLParametersUtil",
                "@@ -139,2 +145,26 @@ abstract class SSLParametersUtil",
                "+    static BCSSLParameters getParameters(ProvSSLParameters prov)",
                "+    {",
                "+        BCSSLParameters ssl = new BCSSLParameters(prov.getCipherSuites(), prov.getProtocols());",
                "+",
                "+        // NOTE: The client-auth setters each clear the other client-auth property, so only one can be set",
                "+        if (prov.getNeedClientAuth())",
                "+        {",
                "+            ssl.setNeedClientAuth(true);",
                "+        }",
                "+        else if (prov.getWantClientAuth())",
                "+        {",
                "+            ssl.setWantClientAuth(true);",
                "+        }",
                "+        else",
                "+        {",
                "+            ssl.setWantClientAuth(false);",
                "+        }",
                "+",
                "+        ssl.setServerNames(prov.getServerNames());",
                "+        ssl.setSNIMatchers(prov.getSNIMatchers());",
                "+",
                "+        return ssl;",
                "+    }",
                "+",
                "     static SSLParameters getSSLParameters(ProvSSLParameters prov)",
                "@@ -189,2 +219,43 @@ abstract class SSLParametersUtil",
                "+    static void setParameters(ProvSSLParameters prov, BCSSLParameters ssl)",
                "+    {",
                "+        String[] cipherSuites = ssl.getCipherSuites();",
                "+        if (cipherSuites != null)",
                "+        {",
                "+            prov.setCipherSuites(cipherSuites);",
                "+        }",
                "+",
                "+        String[] protocols = ssl.getProtocols();",
                "+        if (protocols != null)",
                "+        {",
                "+            prov.setProtocols(protocols);",
                "+        }",
                "+",
                "+        // NOTE: The client-auth setters each clear the other client-auth property, so only one can be set",
                "+        if (ssl.getNeedClientAuth())",
                "+        {",
                "+            prov.setNeedClientAuth(true);",
                "+        }",
                "+        else if (ssl.getWantClientAuth())",
                "+        {",
                "+            prov.setWantClientAuth(true);",
                "+        }",
                "+        else",
                "+        {",
                "+            prov.setWantClientAuth(false);",
                "+        }",
                "+",
                "+        List<BCSNIServerName> serverNames = ssl.getServerNames();",
                "+        if (serverNames != null)",
                "+        {",
                "+            prov.setServerNames(serverNames);",
                "+        }",
                "+",
                "+        Collection<BCSNIMatcher> sniMatchers = ssl.getSNIMatchers();",
                "+        if (sniMatchers != null)",
                "+        {",
                "+            prov.setSNIMatchers(sniMatchers);",
                "+        }",
                "+    }",
                "+",
                "     static void setSSLParameters(ProvSSLParameters prov, SSLParameters ssl)"
            ],
            "changed_files": [
                "tls/src/main/java/org/bouncycastle/jsse/BCSNIHostName.java",
                "tls/src/main/java/org/bouncycastle/jsse/BCSSLEngine.java",
                "tls/src/main/java/org/bouncycastle/jsse/BCSSLParameters.java",
                "tls/src/main/java/org/bouncycastle/jsse/BCSSLSocket.java",
                "tls/src/main/java/org/bouncycastle/jsse/BCStandardConstants.java",
                "tls/src/main/java/org/bouncycastle/jsse/provider/JsseUtils.java",
                "tls/src/main/java/org/bouncycastle/jsse/provider/JsseUtils_8.java",
                "tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLEngine.java",
                "tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocket.java",
                "tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketDirect.java",
                "tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketWrap.java",
                "tls/src/main/java/org/bouncycastle/jsse/provider/SSLParametersUtil.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "f9d5634e094e2edd89d4f1c4d5b8538a0ffda45c"
                ],
                [
                    "no-tag",
                    "f1f830e7fa6e093f2cc5f227a6d209e62a20657a"
                ]
            ],
            "tags": [
                "r1v60"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "49d670add27706d2fe5e1d6d29aae74b85fbd32f",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1516119181,
            "hunks": 50,
            "message": "(D)TLS: Add support for tls-server-end-point channel binding",
            "diff": [
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/BCSSLConnection.java b/tls/src/main/java/org/bouncycastle/jsse/BCSSLConnection.java",
                "index c54562681..962fb0a40 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/BCSSLConnection.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/BCSSLConnection.java",
                "@@ -14,4 +14,6 @@ public interface BCSSLConnection",
                "      * @param channelBinding",
                "-     *            An IANA-registered \"Channel-binding unique prefix\" valid for TLS e.g. \"tls-unique\".",
                "-     * @return A copy of the channel binding data as a {@link byte[]}.",
                "+     *            An IANA-registered \"Channel-binding unique prefix\" valid for TLS e.g.",
                "+     *            \"tls-unique\" or \"tls-server-end-point\".",
                "+     * @return A copy of the channel binding data as a {@link byte[]}, or null if the binding is",
                "+     *         unavailable for this connection.",
                "      */",
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLConnection.java b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLConnection.java",
                "index 8830998ff..e611e1586 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLConnection.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLConnection.java",
                "@@ -27,2 +27,7 @@ class ProvSSLConnection",
                "     {",
                "+        if (channelBinding.equals(\"tls-server-end-point\"))",
                "+        {",
                "+            return tlsContext.exportChannelBinding(ChannelBinding.tls_server_end_point);",
                "+        }",
                "+",
                "         if (channelBinding.equals(\"tls-unique\"))",
                "diff --git a/tls/src/main/java/org/bouncycastle/tls/AbstractTlsContext.java b/tls/src/main/java/org/bouncycastle/tls/AbstractTlsContext.java",
                "index 2a7d562ea..17bf47f91 100644",
                "--- a/tls/src/main/java/org/bouncycastle/tls/AbstractTlsContext.java",
                "+++ b/tls/src/main/java/org/bouncycastle/tls/AbstractTlsContext.java",
                "@@ -113,2 +113,16 @@ abstract class AbstractTlsContext",
                "         {",
                "+        case ChannelBinding.tls_server_end_point:",
                "+        {",
                "+            byte[] tlsServerEndPoint = getSecurityParameters().getTLSServerEndPoint();",
                "+            if (tlsServerEndPoint == null)",
                "+            {",
                "+                throw new IllegalStateException(\"'tls-server-end-point' channel binding unavailable before handshake completion\");",
                "+            }",
                "+            if (tlsServerEndPoint.length < 1)",
                "+            {",
                "+                return null;",
                "+            }",
                "+            return Arrays.clone(tlsServerEndPoint);",
                "+        }",
                "+",
                "         case ChannelBinding.tls_unique:",
                "@@ -123,3 +137,2 @@ abstract class AbstractTlsContext",
                "-        case ChannelBinding.tls_server_end_point:",
                "         case ChannelBinding.tls_unique_for_telnet:",
                "diff --git a/tls/src/main/java/org/bouncycastle/tls/Certificate.java b/tls/src/main/java/org/bouncycastle/tls/Certificate.java",
                "index d579fe57e..fde072f43 100644",
                "--- a/tls/src/main/java/org/bouncycastle/tls/Certificate.java",
                "+++ b/tls/src/main/java/org/bouncycastle/tls/Certificate.java",
                "@@ -71,2 +71,3 @@ public class Certificate",
                "      * @throws IOException",
                "+     * @deprecated",
                "      */",
                "@@ -74,2 +75,16 @@ public class Certificate",
                "         throws IOException",
                "+    {",
                "+        encode(null, output, null);",
                "+    }",
                "+",
                "+    /**",
                "+     * Encode this {@link Certificate} to an {@link OutputStream}, and optionally calculate the",
                "+     * \"end point hash\" (per RFC 5929's tls-server-end-point binding).",
                "+     *",
                "+     * @param messageOutput the {@link OutputStream} to encode to.",
                "+     * @param endPointHashOutput the {@link OutputStream} to write the \"end point hash\" (or null).",
                "+     * @throws IOException",
                "+     */",
                "+    public void encode(TlsContext context, OutputStream messageOutput, OutputStream endPointHashOutput)",
                "+        throws IOException",
                "     {",
                "@@ -80,3 +95,10 @@ public class Certificate",
                "         {",
                "-            byte[] derEncoding = certificateList[i].getEncoded();",
                "+            TlsCertificate cert = certificateList[i];",
                "+            byte[] derEncoding = cert.getEncoded();",
                "+",
                "+            if (i == 0 && endPointHashOutput != null)",
                "+            {",
                "+                calculateEndPointHash(context, cert, derEncoding, endPointHashOutput);",
                "+            }",
                "+",
                "             derEncodings.addElement(derEncoding);",
                "@@ -86,3 +108,3 @@ public class Certificate",
                "         TlsUtils.checkUint24(totalLength);",
                "-        TlsUtils.writeUint24(totalLength, output);",
                "+        TlsUtils.writeUint24(totalLength, messageOutput);",
                "@@ -91,3 +113,3 @@ public class Certificate",
                "             byte[] derEncoding = (byte[])derEncodings.elementAt(i);",
                "-            TlsUtils.writeOpaque24(derEncoding, output);",
                "+            TlsUtils.writeOpaque24(derEncoding, messageOutput);",
                "         }",
                "@@ -104,2 +126,3 @@ public class Certificate",
                "      * @throws IOException",
                "+     * @deprecated",
                "      */",
                "@@ -108,3 +131,20 @@ public class Certificate",
                "     {",
                "-        int totalLength = TlsUtils.readUint24(input);",
                "+        return parse(context, input, null);",
                "+    }",
                "+",
                "+    /**",
                "+     * Parse a {@link Certificate} from an {@link InputStream}.",
                "+     *",
                "+     * @param context",
                "+     *            the {@link TlsContext} of the current connection.",
                "+     * @param messageInput",
                "+     *            the {@link InputStream} to parse from.",
                "+     * @param endPointHashOutput the {@link OutputStream} to write the \"end point hash\" (or null).",
                "+     * @return a {@link Certificate} object.",
                "+     * @throws IOException",
                "+     */",
                "+    public static Certificate parse(TlsContext context, InputStream messageInput, OutputStream endPointHashOutput)",
                "+        throws IOException",
                "+    {",
                "+        int totalLength = TlsUtils.readUint24(messageInput);",
                "         if (totalLength == 0)",
                "@@ -114,3 +154,3 @@ public class Certificate",
                "-        byte[] certListData = TlsUtils.readFully(totalLength, input);",
                "+        byte[] certListData = TlsUtils.readFully(totalLength, messageInput);",
                "@@ -122,3 +162,10 @@ public class Certificate",
                "             byte[] derEncoding = TlsUtils.readOpaque24(buf);",
                "-            certificate_list.addElement(context.getCrypto().createCertificate(derEncoding));",
                "+            TlsCertificate cert = context.getCrypto().createCertificate(derEncoding);",
                "+            ",
                "+            if (certificate_list.isEmpty() && endPointHashOutput != null)",
                "+            {",
                "+                calculateEndPointHash(context, cert, derEncoding, endPointHashOutput);",
                "+            }",
                "+",
                "+            certificate_list.addElement(cert);",
                "         }",
                "@@ -133,2 +180,12 @@ public class Certificate",
                "+    protected static void calculateEndPointHash(TlsContext context, TlsCertificate cert, byte[] encoding, OutputStream output)",
                "+        throws IOException",
                "+    {",
                "+        byte[] endPointHash = TlsUtils.calculateEndPointHash(context, cert.getSigAlgOID(), encoding);",
                "+        if (endPointHash != null && endPointHash.length > 0)",
                "+        {",
                "+            output.write(endPointHash);",
                "+        }",
                "+    }",
                "+",
                "     protected TlsCertificate[] cloneCertificateList()",
                "diff --git a/tls/src/main/java/org/bouncycastle/tls/DTLSClientProtocol.java b/tls/src/main/java/org/bouncycastle/tls/DTLSClientProtocol.java",
                "index c73685343..90965c410 100644",
                "--- a/tls/src/main/java/org/bouncycastle/tls/DTLSClientProtocol.java",
                "+++ b/tls/src/main/java/org/bouncycastle/tls/DTLSClientProtocol.java",
                "@@ -222,2 +222,3 @@ public class DTLSClientProtocol",
                "             // There was no server certificate message; check it's OK",
                "+            state.clientContext.getSecurityParameters().tlsServerEndPoint = TlsUtils.EMPTY_BYTES;",
                "             state.keyExchange.skipServerCredentials();",
                "@@ -300,3 +301,3 @@ public class DTLSClientProtocol",
                "-            byte[] certificateBody = generateCertificate(clientCertificate);",
                "+            byte[] certificateBody = generateCertificate(state.clientContext, clientCertificate, null);",
                "             handshake.sendMessage(HandshakeType.certificate, certificateBody);",
                "@@ -599,4 +600,5 @@ public class DTLSClientProtocol",
                "         ByteArrayInputStream buf = new ByteArrayInputStream(body);",
                "+        ByteArrayOutputStream endPointHash = new ByteArrayOutputStream();",
                "-        Certificate serverCertificate = Certificate.parse(state.clientContext, buf);",
                "+        Certificate serverCertificate = Certificate.parse(state.clientContext, buf, endPointHash);",
                "@@ -604,2 +606,4 @@ public class DTLSClientProtocol",
                "+        state.clientContext.getSecurityParameters().tlsServerEndPoint = endPointHash.toByteArray();",
                "+",
                "         state.authentication = state.client.getAuthentication();",
                "diff --git a/tls/src/main/java/org/bouncycastle/tls/DTLSProtocol.java b/tls/src/main/java/org/bouncycastle/tls/DTLSProtocol.java",
                "index 47f085cfc..7ed6d16d7 100644",
                "--- a/tls/src/main/java/org/bouncycastle/tls/DTLSProtocol.java",
                "+++ b/tls/src/main/java/org/bouncycastle/tls/DTLSProtocol.java",
                "@@ -5,2 +5,3 @@ import java.io.ByteArrayOutputStream;",
                " import java.io.IOException;",
                "+import java.io.OutputStream;",
                " import java.util.Hashtable;",
                "@@ -62,2 +63,3 @@ public abstract class DTLSProtocol",
                "+    /** @deprecated */",
                "     protected static byte[] generateCertificate(Certificate certificate)",
                "@@ -70,2 +72,10 @@ public abstract class DTLSProtocol",
                "+    protected static byte[] generateCertificate(TlsContext context, Certificate certificate, OutputStream endPointHash)",
                "+        throws IOException",
                "+    {",
                "+        ByteArrayOutputStream buf = new ByteArrayOutputStream();",
                "+        certificate.encode(context, buf, endPointHash);",
                "+        return buf.toByteArray();",
                "+    }",
                "+",
                "     protected static byte[] generateSupplementalData(Vector supplementalData)",
                "diff --git a/tls/src/main/java/org/bouncycastle/tls/DTLSServerProtocol.java b/tls/src/main/java/org/bouncycastle/tls/DTLSServerProtocol.java",
                "index 39dba35d8..197cbbd33 100644",
                "--- a/tls/src/main/java/org/bouncycastle/tls/DTLSServerProtocol.java",
                "+++ b/tls/src/main/java/org/bouncycastle/tls/DTLSServerProtocol.java",
                "@@ -149,2 +149,3 @@ public class DTLSServerProtocol",
                "+        ByteArrayOutputStream endPointHash = new ByteArrayOutputStream();",
                "         if (state.serverCredentials == null)",
                "@@ -158,5 +159,6 @@ public class DTLSServerProtocol",
                "             serverCertificate = state.serverCredentials.getCertificate();",
                "-            byte[] certificateBody = generateCertificate(serverCertificate);",
                "+            byte[] certificateBody = generateCertificate(state.serverContext, serverCertificate, endPointHash);",
                "             handshake.sendMessage(HandshakeType.certificate, certificateBody);",
                "         }",
                "+        securityParameters.tlsServerEndPoint = endPointHash.toByteArray();",
                "@@ -532,3 +534,3 @@ public class DTLSServerProtocol",
                "-        Certificate clientCertificate = Certificate.parse(state.serverContext, buf);",
                "+        Certificate clientCertificate = Certificate.parse(state.serverContext, buf, null);",
                "diff --git a/tls/src/main/java/org/bouncycastle/tls/SecurityParameters.java b/tls/src/main/java/org/bouncycastle/tls/SecurityParameters.java",
                "index 3e7f0204c..8b3cf03b2 100644",
                "--- a/tls/src/main/java/org/bouncycastle/tls/SecurityParameters.java",
                "+++ b/tls/src/main/java/org/bouncycastle/tls/SecurityParameters.java",
                "@@ -18,2 +18,3 @@ public class SecurityParameters",
                "     byte[] srpIdentity = null;",
                "+    byte[] tlsServerEndPoint = null;",
                "     byte[] tlsUnique = null;",
                "@@ -116,2 +117,7 @@ public class SecurityParameters",
                "+    public byte[] getTLSServerEndPoint()",
                "+    {",
                "+        return tlsServerEndPoint;",
                "+    }",
                "+",
                "     public byte[] getTLSUnique()",
                "diff --git a/tls/src/main/java/org/bouncycastle/tls/TlsClientProtocol.java b/tls/src/main/java/org/bouncycastle/tls/TlsClientProtocol.java",
                "index 7844091d4..d1f5c4f89 100644",
                "--- a/tls/src/main/java/org/bouncycastle/tls/TlsClientProtocol.java",
                "+++ b/tls/src/main/java/org/bouncycastle/tls/TlsClientProtocol.java",
                "@@ -3,2 +3,3 @@ package org.bouncycastle.tls;",
                " import java.io.ByteArrayInputStream;",
                "+import java.io.ByteArrayOutputStream;",
                " import java.io.IOException;",
                "@@ -165,3 +166,5 @@ public class TlsClientProtocol",
                "-                this.peerCertificate = Certificate.parse(getContext(), buf);",
                "+                ByteArrayOutputStream endPointHash = new ByteArrayOutputStream();",
                "+",
                "+                this.peerCertificate = Certificate.parse(getContext(), buf, endPointHash);",
                "@@ -169,2 +172,4 @@ public class TlsClientProtocol",
                "+                securityParameters.tlsServerEndPoint = endPointHash.toByteArray();",
                "+",
                "                 // TODO[RFC 3546] Check whether empty certificates is possible, allowed, or excludes CertificateStatus",
                "@@ -356,3 +361,3 @@ public class TlsClientProtocol",
                "                          */",
                "-                        sendCertificateMessage(Certificate.EMPTY_CHAIN);",
                "+                        sendCertificateMessage(Certificate.EMPTY_CHAIN, null);",
                "                     }",
                "@@ -362,3 +367,3 @@ public class TlsClientProtocol",
                "-                        sendCertificateMessage(clientCredentials.getCertificate());",
                "+                        sendCertificateMessage(clientCredentials.getCertificate(), null);",
                "@@ -551,2 +556,3 @@ public class TlsClientProtocol",
                "             // There was no server certificate message; check it's OK",
                "+            securityParameters.tlsServerEndPoint = TlsUtils.EMPTY_BYTES;",
                "             this.keyExchange.skipServerCredentials();",
                "diff --git a/tls/src/main/java/org/bouncycastle/tls/TlsContext.java b/tls/src/main/java/org/bouncycastle/tls/TlsContext.java",
                "index 9e0f08f4c..74876e4fc 100644",
                "--- a/tls/src/main/java/org/bouncycastle/tls/TlsContext.java",
                "+++ b/tls/src/main/java/org/bouncycastle/tls/TlsContext.java",
                "@@ -55,4 +55,6 @@ public interface TlsContext",
                "      * ",
                "-     * @param channelBinding A {@link ChannelBinding} constant specifying the channel binding to export.",
                "-     * @return A copy of the channel binding data as a {@link byte[]}.",
                "+     * @param channelBinding",
                "+     *            A {@link ChannelBinding} constant specifying the channel binding to export.",
                "+     * @return A copy of the channel binding data as a {@link byte[]}, or null if the binding could",
                "+     *         not be determined.",
                "      */",
                "diff --git a/tls/src/main/java/org/bouncycastle/tls/TlsProtocol.java b/tls/src/main/java/org/bouncycastle/tls/TlsProtocol.java",
                "index 6d2133bd2..e39a57a98 100644",
                "--- a/tls/src/main/java/org/bouncycastle/tls/TlsProtocol.java",
                "+++ b/tls/src/main/java/org/bouncycastle/tls/TlsProtocol.java",
                "@@ -1151,4 +1151,11 @@ public abstract class TlsProtocol",
                "+    /** @deprecated */",
                "     protected void sendCertificateMessage(Certificate certificate)",
                "         throws IOException",
                "+    {",
                "+        sendCertificateMessage(certificate, null);",
                "+    }",
                "+",
                "+    protected void sendCertificateMessage(Certificate certificate, OutputStream endPointHash)",
                "+        throws IOException",
                "     {",
                "@@ -1161,3 +1168,3 @@ public abstract class TlsProtocol",
                "-        certificate.encode(message);",
                "+        certificate.encode(getContext(), message, endPointHash);",
                "diff --git a/tls/src/main/java/org/bouncycastle/tls/TlsServerProtocol.java b/tls/src/main/java/org/bouncycastle/tls/TlsServerProtocol.java",
                "index 8d10b0422..4b81055f0 100644",
                "--- a/tls/src/main/java/org/bouncycastle/tls/TlsServerProtocol.java",
                "+++ b/tls/src/main/java/org/bouncycastle/tls/TlsServerProtocol.java",
                "@@ -3,2 +3,3 @@ package org.bouncycastle.tls;",
                " import java.io.ByteArrayInputStream;",
                "+import java.io.ByteArrayOutputStream;",
                " import java.io.IOException;",
                "@@ -153,2 +154,3 @@ public class TlsServerProtocol",
                "+                ByteArrayOutputStream endPointHash = new ByteArrayOutputStream();",
                "                 if (this.serverCredentials == null)",
                "@@ -162,4 +164,5 @@ public class TlsServerProtocol",
                "                     serverCertificate = this.serverCredentials.getCertificate();",
                "-                    sendCertificateMessage(serverCertificate);",
                "+                    sendCertificateMessage(serverCertificate, endPointHash);",
                "                 }",
                "+                securityParameters.tlsServerEndPoint = endPointHash.toByteArray();",
                "                 this.connection_state = CS_SERVER_CERTIFICATE;",
                "@@ -444,3 +447,3 @@ public class TlsServerProtocol",
                "     {",
                "-        Certificate clientCertificate = Certificate.parse(getContext(), buf);",
                "+        Certificate clientCertificate = Certificate.parse(getContext(), buf, null);",
                "diff --git a/tls/src/main/java/org/bouncycastle/tls/TlsUtils.java b/tls/src/main/java/org/bouncycastle/tls/TlsUtils.java",
                "index f850757e0..a892e5d40 100644",
                "--- a/tls/src/main/java/org/bouncycastle/tls/TlsUtils.java",
                "+++ b/tls/src/main/java/org/bouncycastle/tls/TlsUtils.java",
                "@@ -21,5 +21,9 @@ import org.bouncycastle.asn1.ASN1Primitive;",
                " import org.bouncycastle.asn1.ASN1Sequence;",
                "+import org.bouncycastle.asn1.bsi.BSIObjectIdentifiers;",
                "+import org.bouncycastle.asn1.eac.EACObjectIdentifiers;",
                " import org.bouncycastle.asn1.nist.NISTObjectIdentifiers;",
                "+import org.bouncycastle.asn1.oiw.OIWObjectIdentifiers;",
                " import org.bouncycastle.asn1.pkcs.PKCSObjectIdentifiers;",
                " import org.bouncycastle.asn1.x509.X509ObjectIdentifiers;",
                "+import org.bouncycastle.asn1.x9.X9ObjectIdentifiers;",
                " import org.bouncycastle.tls.crypto.TlsCrypto;",
                "@@ -39,2 +43,56 @@ public class TlsUtils",
                " {",
                "+    // Map OID strings to HashAlgorithm values",
                "+    private static final Hashtable sigHashAlgs = createSigHashAlgs();",
                "+",
                "+    private static void addSigHashAlg(Hashtable h, ASN1ObjectIdentifier oid, short hashAlg)",
                "+    {",
                "+        h.put(oid.getId(), hashAlg);",
                "+    }",
                "+",
                "+    private static Hashtable createSigHashAlgs()",
                "+    {",
                "+        Hashtable h = new Hashtable();",
                "+",
                "+        addSigHashAlg(h, NISTObjectIdentifiers.dsa_with_sha224, HashAlgorithm.sha224);",
                "+        addSigHashAlg(h, NISTObjectIdentifiers.dsa_with_sha256, HashAlgorithm.sha256);",
                "+        addSigHashAlg(h, NISTObjectIdentifiers.dsa_with_sha384, HashAlgorithm.sha384);",
                "+        addSigHashAlg(h, NISTObjectIdentifiers.dsa_with_sha512, HashAlgorithm.sha512);",
                "+",
                "+        addSigHashAlg(h, OIWObjectIdentifiers.dsaWithSHA1, HashAlgorithm.sha1);",
                "+        addSigHashAlg(h, OIWObjectIdentifiers.md5WithRSA, HashAlgorithm.md5);",
                "+        addSigHashAlg(h, OIWObjectIdentifiers.sha1WithRSA, HashAlgorithm.sha1);",
                "+",
                "+        addSigHashAlg(h, PKCSObjectIdentifiers.md5WithRSAEncryption, HashAlgorithm.md5);",
                "+        addSigHashAlg(h, PKCSObjectIdentifiers.sha1WithRSAEncryption, HashAlgorithm.sha1);",
                "+        addSigHashAlg(h, PKCSObjectIdentifiers.sha224WithRSAEncryption, HashAlgorithm.sha224);",
                "+        addSigHashAlg(h, PKCSObjectIdentifiers.sha256WithRSAEncryption, HashAlgorithm.sha256);",
                "+        addSigHashAlg(h, PKCSObjectIdentifiers.sha384WithRSAEncryption, HashAlgorithm.sha384);",
                "+        addSigHashAlg(h, PKCSObjectIdentifiers.sha512WithRSAEncryption, HashAlgorithm.sha512);",
                "+",
                "+        addSigHashAlg(h, X9ObjectIdentifiers.ecdsa_with_SHA1, HashAlgorithm.sha1);",
                "+        addSigHashAlg(h, X9ObjectIdentifiers.ecdsa_with_SHA224, HashAlgorithm.sha224);",
                "+        addSigHashAlg(h, X9ObjectIdentifiers.ecdsa_with_SHA256, HashAlgorithm.sha256);",
                "+        addSigHashAlg(h, X9ObjectIdentifiers.ecdsa_with_SHA384, HashAlgorithm.sha384);",
                "+        addSigHashAlg(h, X9ObjectIdentifiers.ecdsa_with_SHA512, HashAlgorithm.sha512);",
                "+        addSigHashAlg(h, X9ObjectIdentifiers.id_dsa_with_sha1, HashAlgorithm.sha1);",
                "+",
                "+        addSigHashAlg(h, EACObjectIdentifiers.id_TA_ECDSA_SHA_1, HashAlgorithm.sha1);",
                "+        addSigHashAlg(h, EACObjectIdentifiers.id_TA_ECDSA_SHA_224, HashAlgorithm.sha224);",
                "+        addSigHashAlg(h, EACObjectIdentifiers.id_TA_ECDSA_SHA_256, HashAlgorithm.sha256);",
                "+        addSigHashAlg(h, EACObjectIdentifiers.id_TA_ECDSA_SHA_384, HashAlgorithm.sha384);",
                "+        addSigHashAlg(h, EACObjectIdentifiers.id_TA_ECDSA_SHA_512, HashAlgorithm.sha512);",
                "+        addSigHashAlg(h, EACObjectIdentifiers.id_TA_RSA_v1_5_SHA_1, HashAlgorithm.sha1);",
                "+        addSigHashAlg(h, EACObjectIdentifiers.id_TA_RSA_v1_5_SHA_256, HashAlgorithm.sha256);",
                "+        addSigHashAlg(h, EACObjectIdentifiers.id_TA_RSA_PSS_SHA_1, HashAlgorithm.sha1);",
                "+        addSigHashAlg(h, EACObjectIdentifiers.id_TA_RSA_PSS_SHA_256, HashAlgorithm.sha256);",
                "+",
                "+        addSigHashAlg(h, BSIObjectIdentifiers.ecdsa_plain_SHA1, HashAlgorithm.sha1);",
                "+        addSigHashAlg(h, BSIObjectIdentifiers.ecdsa_plain_SHA224, HashAlgorithm.sha224);",
                "+        addSigHashAlg(h, BSIObjectIdentifiers.ecdsa_plain_SHA256, HashAlgorithm.sha256);",
                "+        addSigHashAlg(h, BSIObjectIdentifiers.ecdsa_plain_SHA384, HashAlgorithm.sha384);",
                "+        addSigHashAlg(h, BSIObjectIdentifiers.ecdsa_plain_SHA512, HashAlgorithm.sha512);",
                "+",
                "+        return h;",
                "+    }",
                "+",
                "     public static final byte[] EMPTY_BYTES = new byte[0];",
                "@@ -1078,2 +1136,34 @@ public class TlsUtils",
                "+    static byte[] calculateEndPointHash(TlsContext context, String sigAlgOID, byte[] enc)",
                "+    {",
                "+        return calculateEndPointHash(context, sigAlgOID, enc, 0, enc.length);",
                "+    }",
                "+",
                "+    static byte[] calculateEndPointHash(TlsContext context, String sigAlgOID, byte[] enc, int encOff, int encLen)",
                "+    {",
                "+        if (sigAlgOID != null)",
                "+        {",
                "+            Short hashAlgObj = (Short)sigHashAlgs.get(sigAlgOID);",
                "+            if (hashAlgObj != null)",
                "+            {",
                "+                short hashAlg = hashAlgObj.shortValue();",
                "+                switch (hashAlg)",
                "+                {",
                "+                case HashAlgorithm.md5:",
                "+                case HashAlgorithm.sha1:",
                "+                    hashAlg = HashAlgorithm.sha256;",
                "+                    break;",
                "+                }",
                "+",
                "+                TlsHash hash = context.getCrypto().createHash(hashAlg);",
                "+                if (hash != null)",
                "+                {                ",
                "+                    hash.update(enc, encOff, encLen);",
                "+                    return hash.calculateHash();",
                "+                }",
                "+            }",
                "+        }",
                "+        return EMPTY_BYTES;",
                "+    }",
                "+",
                "     static TlsSecret calculateMasterSecret(TlsContext context, TlsSecret preMasterSecret)",
                "diff --git a/tls/src/main/java/org/bouncycastle/tls/crypto/TlsCertificate.java b/tls/src/main/java/org/bouncycastle/tls/crypto/TlsCertificate.java",
                "index 3a0cb2041..5a55415ba 100644",
                "--- a/tls/src/main/java/org/bouncycastle/tls/crypto/TlsCertificate.java",
                "+++ b/tls/src/main/java/org/bouncycastle/tls/crypto/TlsCertificate.java",
                "@@ -33,2 +33,7 @@ public interface TlsCertificate",
                "+    /**",
                "+     * @return the OID of this certificate's 'signatureAlgorithm', as a String.",
                "+     */",
                "+    String getSigAlgOID();",
                "+",
                "     /**",
                "diff --git a/tls/src/main/java/org/bouncycastle/tls/crypto/impl/bc/BcTlsCertificate.java b/tls/src/main/java/org/bouncycastle/tls/crypto/impl/bc/BcTlsCertificate.java",
                "index 7fde6170a..8bda2acf6 100644",
                "--- a/tls/src/main/java/org/bouncycastle/tls/crypto/impl/bc/BcTlsCertificate.java",
                "+++ b/tls/src/main/java/org/bouncycastle/tls/crypto/impl/bc/BcTlsCertificate.java",
                "@@ -189,2 +189,7 @@ public class BcTlsCertificate",
                "+    public String getSigAlgOID()",
                "+    {",
                "+        return certificate.getSignatureAlgorithm().getAlgorithm().getId();",
                "+    }",
                "+",
                "     protected DHPublicKeyParameters getPubKeyDH() throws IOException",
                "diff --git a/tls/src/main/java/org/bouncycastle/tls/crypto/impl/jcajce/JcaTlsCertificate.java b/tls/src/main/java/org/bouncycastle/tls/crypto/impl/jcajce/JcaTlsCertificate.java",
                "index be5c3bc45..65bb4626e 100644",
                "--- a/tls/src/main/java/org/bouncycastle/tls/crypto/impl/jcajce/JcaTlsCertificate.java",
                "+++ b/tls/src/main/java/org/bouncycastle/tls/crypto/impl/jcajce/JcaTlsCertificate.java",
                "@@ -204,2 +204,7 @@ public class JcaTlsCertificate",
                "+    public String getSigAlgOID()",
                "+    {",
                "+        return certificate.getSigAlgOID();",
                "+    }",
                "+",
                "     DHPublicKey getPubKeyDH() throws IOException"
            ],
            "changed_files": [
                "tls/src/main/java/org/bouncycastle/jsse/BCSSLConnection.java",
                "tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLConnection.java",
                "tls/src/main/java/org/bouncycastle/tls/AbstractTlsContext.java",
                "tls/src/main/java/org/bouncycastle/tls/Certificate.java",
                "tls/src/main/java/org/bouncycastle/tls/DTLSClientProtocol.java",
                "tls/src/main/java/org/bouncycastle/tls/DTLSProtocol.java",
                "tls/src/main/java/org/bouncycastle/tls/DTLSServerProtocol.java",
                "tls/src/main/java/org/bouncycastle/tls/SecurityParameters.java",
                "tls/src/main/java/org/bouncycastle/tls/TlsClientProtocol.java",
                "tls/src/main/java/org/bouncycastle/tls/TlsContext.java",
                "tls/src/main/java/org/bouncycastle/tls/TlsProtocol.java",
                "tls/src/main/java/org/bouncycastle/tls/TlsServerProtocol.java",
                "tls/src/main/java/org/bouncycastle/tls/TlsUtils.java",
                "tls/src/main/java/org/bouncycastle/tls/crypto/TlsCertificate.java",
                "tls/src/main/java/org/bouncycastle/tls/crypto/impl/bc/BcTlsCertificate.java",
                "tls/src/main/java/org/bouncycastle/tls/crypto/impl/jcajce/JcaTlsCertificate.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "b5ecce19f07515e1b6a4d5582ed87ea922e837cd"
                ],
                [
                    "no-tag",
                    "189266346faa51b1040d80481bcbbecd9f116a3f"
                ]
            ],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, security, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "db8fc8d6932d5f6467c25fed922b17555ed2cc31",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1517223141,
            "hunks": 45,
            "message": "JSSE: Use soft references in session context",
            "diff": [
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSessionContext.java b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSessionContext.java",
                "index cb60c5482..a00c94eaa 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSessionContext.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSessionContext.java",
                "@@ -2,2 +2,4 @@ package org.bouncycastle.jsse.provider;",
                "+import java.lang.ref.ReferenceQueue;",
                "+import java.lang.ref.SoftReference;",
                " import java.util.ArrayList;",
                "@@ -10,2 +12,3 @@ import java.util.Locale;",
                " import java.util.Map;",
                "+import java.util.logging.Logger;",
                "@@ -21,2 +24,4 @@ class ProvSSLSessionContext",
                " {",
                "+    private static Logger LOG = Logger.getLogger(ProvSSLSessionContext.class.getName());",
                "+",
                "     private static final int provSessionCacheSize = PropertyUtils",
                "@@ -25,5 +30,6 @@ class ProvSSLSessionContext",
                "     // NOTE: This is configured as a simple LRU cache using the \"access order\" constructor",
                "-    protected final Map<SessionID, ProvSSLSessionImpl> sessionsByID = new LinkedHashMap<SessionID, ProvSSLSessionImpl>(16, 0.75f, true)",
                "+    @SuppressWarnings(\"serial\")",
                "+    protected final Map<SessionID, SessionEntry> sessionsByID = new LinkedHashMap<SessionID, SessionEntry>(16, 0.75f, true)",
                "     {",
                "-        protected boolean removeEldestEntry(Map.Entry<SessionID, ProvSSLSessionImpl> eldest)",
                "+        protected boolean removeEldestEntry(Map.Entry<SessionID, SessionEntry> eldest)",
                "         {",
                "@@ -37,3 +43,4 @@ class ProvSSLSessionContext",
                "     };",
                "-    protected final Map<String, ProvSSLSessionImpl> sessionsByPeer = new HashMap<String, ProvSSLSessionImpl>();",
                "+    protected final Map<String, SessionEntry> sessionsByPeer = new HashMap<String, SessionEntry>();",
                "+    protected final ReferenceQueue<ProvSSLSessionImpl> sessionsQueue = new ReferenceQueue<ProvSSLSessionImpl>();",
                "@@ -63,8 +70,5 @@ class ProvSSLSessionContext",
                "     {",
                "-        if (sessionID == null || sessionID.length < 1)",
                "-        {",
                "-            return null;",
                "-        }",
                "+        processQueue();",
                "-        return checkSession(sessionsByID.get(new SessionID(sessionID)));",
                "+        return accessSession(mapGet(sessionsByID, makeSessionID(sessionID)));",
                "     }",
                "@@ -73,14 +77,12 @@ class ProvSSLSessionContext",
                "     {",
                "-        if (hostName == null || port < 0)",
                "-        {",
                "-            return null;",
                "-        }",
                "+        processQueue();",
                "-        ProvSSLSessionImpl sslSession = checkSession(sessionsByPeer.get(makePeerKey(hostName, port)));",
                "-        if (sslSession != null)",
                "+        SessionEntry sessionEntry = mapGet(sessionsByPeer, makePeerKey(hostName, port));",
                "+        ProvSSLSessionImpl session = accessSession(sessionEntry);",
                "+        if (session != null)",
                "         {",
                "             // NOTE: For the current simple cache implementation, need to 'access' the sessionByIDs entry",
                "-            sessionsByID.get(new SessionID(sslSession.getId()));",
                "+            sessionsByID.get(sessionEntry.getSessionID());",
                "         }",
                "-        return sslSession;",
                "+        return session;",
                "     }",
                "@@ -89,14 +91,18 @@ class ProvSSLSessionContext",
                "     {",
                "+        processQueue();",
                "+",
                "         SessionID sessionID = new SessionID(tlsSession.getSessionID());",
                "+        SessionEntry sessionEntry = sessionsByID.get(sessionID);",
                "+        ProvSSLSessionImpl session = sessionEntry == null ? null : sessionEntry.get();",
                "-        ProvSSLSessionImpl sslSession = sessionsByID.get(sessionID);",
                "-        if (sslSession == null || sslSession.getTlsSession() != tlsSession)",
                "+        if (session == null || session.getTlsSession() != tlsSession)",
                "         {",
                "-            sslSession = new ProvSSLSessionImpl(this, tlsSession, peerHost, peerPort);",
                "-            sessionsByID.put(sessionID, sslSession);",
                "+            session = new ProvSSLSessionImpl(this, tlsSession, peerHost, peerPort);",
                "+            sessionEntry = new SessionEntry(sessionID, session, sessionsQueue);",
                "+            sessionsByID.put(sessionID, sessionEntry);",
                "         }",
                "-        addSessionByPeer(sslSession);",
                "+        mapAdd(sessionsByPeer, sessionEntry.getPeerKey(), sessionEntry);",
                "-        return sslSession;",
                "+        return session;",
                "     }",
                "@@ -108,10 +114,6 @@ class ProvSSLSessionContext",
                "         ArrayList<byte[]> ids = new ArrayList<byte[]>(sessionsByID.size());",
                "-",
                "-        Iterator<SessionID> iter = sessionsByID.keySet().iterator();",
                "-        while (iter.hasNext())",
                "+        for (SessionID sessionID : sessionsByID.keySet())",
                "         {",
                "-            SessionID sessionID = iter.next();",
                "             ids.add(sessionID.getBytes());",
                "         }",
                "-",
                "         return Collections.enumeration(ids);",
                "@@ -153,2 +155,4 @@ class ProvSSLSessionContext",
                "+        removeAllExpiredSessions();",
                "+",
                "         // Immediately remove LRU sessions in excess of the new limit",
                "@@ -159,8 +163,8 @@ class ProvSSLSessionContext",
                "             {",
                "-                Iterator<ProvSSLSessionImpl> iter = sessionsByID.values().iterator();",
                "+                Iterator<SessionEntry> iter = sessionsByID.values().iterator();",
                "                 while (iter.hasNext() && currentSize > sessionCacheSize)",
                "                 {",
                "-                    ProvSSLSessionImpl sslSession = iter.next();",
                "+                    SessionEntry sessionEntry = iter.next();",
                "                     iter.remove();",
                "-                    removeSessionByPeer(sslSession);",
                "+                    removeSessionByPeer(sessionEntry);",
                "                     --currentSize;",
                "@@ -188,26 +192,18 @@ class ProvSSLSessionContext",
                "-    private void addSessionByPeer(ProvSSLSessionImpl sslSession)",
                "-    {",
                "-        if (sslSession != null && sslSession.getPeerHost() != null && sslSession.getPeerPort() >= 0)",
                "-        {",
                "-            String peerKey = makePeerKey(sslSession.getPeerHost(), sslSession.getPeerPort());",
                "-            sessionsByPeer.put(peerKey, sslSession);",
                "-        }",
                "-    }",
                "-",
                "-    private ProvSSLSessionImpl checkSession(ProvSSLSessionImpl sslSession)",
                "+    private ProvSSLSessionImpl accessSession(SessionEntry sessionEntry)",
                "     {",
                "-        if (sslSession != null)",
                "+        if (sessionEntry != null)",
                "         {",
                "-            long currentTimeMillis = System.currentTimeMillis();",
                "-            invalidateIfExpiredBefore(sslSession, currentTimeMillis);",
                "-",
                "-            if (sslSession.isValid())",
                "+            ProvSSLSessionImpl session = sessionEntry.get();",
                "+            if (session != null)",
                "             {",
                "-                sslSession.accessedAt(currentTimeMillis);",
                "-                return sslSession;",
                "+                long currentTimeMillis = System.currentTimeMillis();",
                "+                if (!invalidateIfCreatedBefore(sessionEntry, getCreationTimeLimit(currentTimeMillis)))",
                "+                {",
                "+                    session.accessedAt(currentTimeMillis);",
                "+                    return session;",
                "+                }",
                "             }",
                "-            removeSessionByID(sslSession);",
                "-            removeSessionByPeer(sslSession);",
                "+            removeSession(sessionEntry);",
                "         }",
                "@@ -216,16 +212,35 @@ class ProvSSLSessionContext",
                "-    private void invalidateIfCreatedBefore(ProvSSLSessionImpl sslSession, long creationTimeLimit)",
                "+    private long getCreationTimeLimit(long expiryTimeMillis)",
                "     {",
                "-        if (sslSession.getCreationTime() < creationTimeLimit)",
                "+        return sessionTimeoutSeconds < 1 ? Long.MIN_VALUE : (expiryTimeMillis - 1000L * sessionTimeoutSeconds);",
                "+    }",
                "+",
                "+    private boolean invalidateIfCreatedBefore(SessionEntry sessionEntry, long creationTimeLimit)",
                "+    {",
                "+        ProvSSLSessionImpl session = sessionEntry.get();",
                "+        if (session == null)",
                "         {",
                "-            sslSession.invalidate();",
                "+            return true;",
                "         }",
                "+        if (session.getCreationTime() < creationTimeLimit)",
                "+        {",
                "+            session.invalidate();",
                "+        }",
                "+        return !session.isValid();",
                "     }",
                "-    private void invalidateIfExpiredBefore(ProvSSLSessionImpl sslSession, long expiryTimeMillis)",
                "+    private void processQueue()",
                "     {",
                "-        if (sessionTimeoutSeconds > 0)",
                "+        int count = 0;",
                "+",
                "+        SessionEntry sessionEntry;",
                "+        while ((sessionEntry = (SessionEntry)sessionsQueue.poll()) != null)",
                "         {",
                "-            long creationTimeLimit = expiryTimeMillis - 1000L * sessionTimeoutSeconds;",
                "-            invalidateIfCreatedBefore(sslSession, creationTimeLimit);",
                "+            removeSession(sessionEntry);",
                "+            ++count;",
                "+        }",
                "+",
                "+        if (count > 0)",
                "+        {",
                "+            LOG.fine(\"Processed \" + count + \" session entries (soft references) from the reference queue\");",
                "         }",
                "@@ -235,19 +250,14 @@ class ProvSSLSessionContext",
                "     {",
                "-        if (sessionTimeoutSeconds == 0)",
                "-        {",
                "-            return; ",
                "-        }",
                "+        processQueue();",
                "-        long creationTimeLimit = System.currentTimeMillis() - 1000L * sessionTimeoutSeconds;",
                "+        long creationTimeLimit = getCreationTimeLimit(System.currentTimeMillis());",
                "-        Iterator<ProvSSLSessionImpl> iter = sessionsByID.values().iterator();",
                "+        Iterator<SessionEntry> iter = sessionsByID.values().iterator();",
                "         while (iter.hasNext())",
                "         {",
                "-            ProvSSLSessionImpl sslSession = iter.next();",
                "-            invalidateIfCreatedBefore(sslSession, creationTimeLimit);",
                "-",
                "-            if (!sslSession.isValid())",
                "+            SessionEntry sessionEntry = iter.next();",
                "+            if (invalidateIfCreatedBefore(sessionEntry, creationTimeLimit))",
                "             {",
                "                 iter.remove();",
                "-                removeSessionByPeer(sslSession);",
                "+                removeSessionByPeer(sessionEntry);",
                "             }",
                "@@ -256,21 +266,68 @@ class ProvSSLSessionContext",
                "-    private boolean removeSessionByID(ProvSSLSessionImpl sslSession)",
                "+    private void removeSession(SessionEntry sessionEntry)",
                "+    {",
                "+        mapRemove(sessionsByID, sessionEntry.getSessionID(), sessionEntry);",
                "+",
                "+        removeSessionByPeer(sessionEntry);",
                "+    }",
                "+",
                "+    private boolean removeSessionByPeer(SessionEntry sessionEntry)",
                "+    {",
                "+        return mapRemove(sessionsByPeer, sessionEntry.getPeerKey(), sessionEntry);",
                "+    }",
                "+",
                "+    private static String makePeerKey(ProvSSLSessionImpl session)",
                "+    {",
                "+        return session == null ? null : makePeerKey(session.getPeerHost(), session.getPeerPort());",
                "+    }",
                "+",
                "+    private static String makePeerKey(String hostName, int port)",
                "+    {",
                "+        return (hostName == null || port < 0) ? null : (hostName + ':' + Integer.toString(port)).toLowerCase(Locale.ENGLISH);",
                "+    }",
                "+",
                "+    private static SessionID makeSessionID(byte[] sessionID)",
                "+    {",
                "+        return (sessionID == null || sessionID.length < 1) ? null : new SessionID(sessionID);",
                "+    }",
                "+",
                "+    private static <K, V> void mapAdd(Map<K, V> map, K key, V value)",
                "+    {",
                "+        if (map == null || value == null)",
                "+        {",
                "+            throw new NullPointerException();",
                "+        }",
                "+        if (key != null)",
                "+        {",
                "+            map.put(key, value);",
                "+        }",
                "+    }",
                "+",
                "+    private static <K, V> V mapGet(Map<K, V> map, K key)",
                "     {",
                "-        if (sslSession != null)",
                "+        if (map == null)",
                "         {",
                "-            byte[] sessionID = sslSession.getId();",
                "-            if (sessionID != null & sessionID.length > 0)",
                "-            {",
                "-                return null != sessionsByID.remove(new SessionID(sessionID));",
                "-            }",
                "+            throw new NullPointerException();",
                "         }",
                "-        return false;",
                "+        return key == null ? null : map.get(key);",
                "     }",
                "-    private boolean removeSessionByPeer(ProvSSLSessionImpl sslSession)",
                "+    private static <K, V> boolean mapRemove(Map<K, V> map, K key, V value)",
                "     {",
                "-        if (sslSession != null && sslSession.getPeerHost() != null && sslSession.getPeerPort() >= 0)",
                "+        if (map == null || value == null)",
                "         {",
                "-            String peerKey = makePeerKey(sslSession.getPeerHost(), sslSession.getPeerPort());",
                "-            return null != sessionsByPeer.remove(peerKey);",
                "+            throw new NullPointerException();",
                "+        }",
                "+        if (key != null)",
                "+        {",
                "+            // TODO[jsse] From 1.8 there is a 2-argument remove method to accomplish this ",
                "+            V removed = map.remove(key);",
                "+            if (removed == value)",
                "+            {",
                "+                return true;",
                "+            }",
                "+            if (removed != null)",
                "+            {",
                "+                map.put(key, removed);",
                "+            }",
                "         }",
                "@@ -279,5 +336,30 @@ class ProvSSLSessionContext",
                "-    private static String makePeerKey(String hostName, int port)",
                "+    private static final class SessionEntry",
                "+        extends SoftReference<ProvSSLSessionImpl>",
                "     {",
                "-        return (hostName + ':' + Integer.toString(port)).toLowerCase(Locale.ENGLISH);",
                "+        private final SessionID sessionID;",
                "+        private final String peerKey;",
                "+",
                "+        SessionEntry(SessionID sessionID, ProvSSLSessionImpl session, ReferenceQueue<ProvSSLSessionImpl> queue)",
                "+        {",
                "+            super(session, queue);",
                "+",
                "+            if (sessionID == null || session == null || queue == null)",
                "+            {",
                "+                throw new NullPointerException();",
                "+            }",
                "+",
                "+            this.sessionID = sessionID;",
                "+            this.peerKey = makePeerKey(session);",
                "+        }",
                "+",
                "+        public String getPeerKey()",
                "+        {",
                "+            return peerKey;",
                "+        }",
                "+",
                "+        public SessionID getSessionID()",
                "+        {",
                "+            return sessionID;",
                "+        }",
                "     }"
            ],
            "changed_files": [
                "tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSessionContext.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "a2a90a895966bbadad38920301b187d3054e1508"
                ],
                [
                    "no-tag",
                    "2b675575a1537562716e55e65e2e280b2449b792"
                ]
            ],
            "tags": [
                "r1v60"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "75eda2d3184f28bffb8b80b1f8b49a6b85508564",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1510725420,
            "hunks": 14,
            "message": "Make NonceEntropySource thread-safe",
            "diff": [
                "diff --git a/tls/src/main/java/org/bouncycastle/tls/crypto/impl/jcajce/JcaTlsCryptoProvider.java b/tls/src/main/java/org/bouncycastle/tls/crypto/impl/jcajce/JcaTlsCryptoProvider.java",
                "index 89c60a622..99c7dfc29 100644",
                "--- a/tls/src/main/java/org/bouncycastle/tls/crypto/impl/jcajce/JcaTlsCryptoProvider.java",
                "+++ b/tls/src/main/java/org/bouncycastle/tls/crypto/impl/jcajce/JcaTlsCryptoProvider.java",
                "@@ -67,6 +67,5 @@ public class JcaTlsCryptoProvider",
                "             {",
                "-                SecureRandom keyRandom;",
                "                 if (helper instanceof DefaultJcaJceHelper)",
                "                 {",
                "-                    keyRandom = SecureRandom.getInstance(\"DEFAULT\");",
                "+                    random = SecureRandom.getInstance(\"DEFAULT\");",
                "                 }",
                "@@ -74,6 +73,4 @@ public class JcaTlsCryptoProvider",
                "                 {",
                "-                    keyRandom = SecureRandom.getInstance(\"DEFAULT\", helper.createDigest(\"SHA-512\").getProvider());",
                "+                    random = SecureRandom.getInstance(\"DEFAULT\", helper.createDigest(\"SHA-512\").getProvider());",
                "                 }",
                "-",
                "-                return create(keyRandom, new NonceEntropySource(helper, keyRandom));",
                "             }",
                "@@ -134,3 +131,3 @@ public class JcaTlsCryptoProvider",
                "-            public NonceEntropySourceSpi(SecureRandom source, MessageDigest digest)",
                "+            NonceEntropySourceSpi(SecureRandom source, MessageDigest digest)",
                "             {",
                "@@ -146,12 +143,5 @@ public class JcaTlsCryptoProvider",
                "             {",
                "-                digest.update(seed, 0, seed.length);",
                "-                digest.update(bytes, 0, bytes.length);",
                "-",
                "-                try",
                "-                {",
                "-                    digest.digest(seed, 0, seed.length);",
                "-                }",
                "-                catch (DigestException e)",
                "+                synchronized (digest)",
                "                 {",
                "-                    throw new IllegalStateException(\"unable to generate nonce data: \" + e.getMessage(), e);",
                "+                    runDigest(seed, bytes, seed);",
                "                 }",
                "@@ -162,14 +152,16 @@ public class JcaTlsCryptoProvider",
                "             {",
                "-                int stateOff = 0;",
                "-",
                "-                generateState();",
                "-",
                "-                for (int i = 0; i != bytes.length; i++)",
                "+                synchronized (digest)",
                "                 {",
                "-                    if (stateOff == state.length)",
                "+                    int stateOff = state.length;",
                "+    ",
                "+                    for (int i = 0; i != bytes.length; i++)",
                "                     {",
                "-                        generateState();",
                "-                        stateOff = 0;",
                "+                        if (stateOff == state.length)",
                "+                        {",
                "+                            source.nextBytes(state);",
                "+                            runDigest(seed, state, state);",
                "+                            stateOff = 0;",
                "+                        }",
                "+                        bytes[i] = state[stateOff++];",
                "                     }",
                "-                    bytes[i] = state[stateOff++];",
                "                 }",
                "@@ -183,8 +175,6 @@ public class JcaTlsCryptoProvider",
                "-            private void generateState()",
                "+            private void runDigest(byte[] x, byte[] y, byte[] z)",
                "             {",
                "-                source.nextBytes(state);",
                "-",
                "-                digest.update(seed);",
                "-                digest.update(state);",
                "+                digest.update(x);",
                "+                digest.update(y);",
                "@@ -192,3 +182,3 @@ public class JcaTlsCryptoProvider",
                "                 {",
                "-                    digest.digest(state, 0, state.length);",
                "+                    digest.digest(z, 0, z.length);",
                "                 }"
            ],
            "changed_files": [
                "tls/src/main/java/org/bouncycastle/tls/crypto/impl/jcajce/JcaTlsCryptoProvider.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "621738cc2106f05207389e2eee7a05ade08f5a95"
                ],
                [
                    "no-tag",
                    "3c39076c7d29422963c878124c44c15e69649c2d"
                ]
            ],
            "tags": [
                "r1v60"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a038b277cf4cb2462d8d00f7beec6d982cb4a387",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1515474511,
            "hunks": 1,
            "message": "Add missing throw",
            "diff": [
                "diff --git a/tls/src/main/java/org/bouncycastle/tls/RecordStream.java b/tls/src/main/java/org/bouncycastle/tls/RecordStream.java",
                "index ec953ef08..5c7e2cbda 100644",
                "--- a/tls/src/main/java/org/bouncycastle/tls/RecordStream.java",
                "+++ b/tls/src/main/java/org/bouncycastle/tls/RecordStream.java",
                "@@ -463,2 +463,7 @@ class RecordStream",
                "         }",
                "+",
                "+        if (io != null)",
                "+        {",
                "+            throw io;",
                "+        }",
                "     }"
            ],
            "changed_files": [
                "tls/src/main/java/org/bouncycastle/tls/RecordStream.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "cbcb2399baeef15e45e8832700a2b3c08c29b790"
                ],
                [
                    "no-tag",
                    "25ada2657473f7f54a41012a07437f70593d9320"
                ]
            ],
            "tags": [
                "r1v60"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "43bab497036fbe0a7746f0a49bccfb9b034721e0",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1516076380,
            "hunks": 1,
            "message": "added sample EC private key encoding lacking public key.",
            "diff": [
                "diff --git a/pkix/src/main/java/org/bouncycastle/openssl/PEMParser.java b/pkix/src/main/java/org/bouncycastle/openssl/PEMParser.java",
                "index e1f9c351a..0189a9853 100644",
                "--- a/pkix/src/main/java/org/bouncycastle/openssl/PEMParser.java",
                "+++ b/pkix/src/main/java/org/bouncycastle/openssl/PEMParser.java",
                "@@ -231,5 +231,13 @@ public class PEMParser",
                "                 PrivateKeyInfo privInfo = new PrivateKeyInfo(algId, pKey);",
                "-                SubjectPublicKeyInfo pubInfo = new SubjectPublicKeyInfo(algId, pKey.getPublicKey().getBytes());",
                "-                return new PEMKeyPair(pubInfo, privInfo);",
                "+                if (pKey.getPublicKey() != null)",
                "+                {",
                "+                    SubjectPublicKeyInfo pubInfo = new SubjectPublicKeyInfo(algId, pKey.getPublicKey().getBytes());",
                "+",
                "+                    return new PEMKeyPair(pubInfo, privInfo);",
                "+                }",
                "+                else",
                "+                {",
                "+                    return new PEMKeyPair(null, privInfo);",
                "+                }",
                "             }"
            ],
            "changed_files": [
                "pkix/src/main/java/org/bouncycastle/openssl/PEMParser.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "16035eaac5da36d4233e5e5328c84ebada95df1e"
                ],
                [
                    "no-tag",
                    "34a0a6b11ddc286750dcce41e2d3ff92ad8616b9"
                ]
            ],
            "tags": [
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "79c09d14c6cf4f41666a489f12072218bf1bb37a",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1513996429,
            "hunks": 8,
            "message": "moved provider to 1.59",
            "diff": [
                "diff --git a/prov/src/main/java/org/bouncycastle/jce/provider/BouncyCastleProvider.java b/prov/src/main/java/org/bouncycastle/jce/provider/BouncyCastleProvider.java",
                "index aa4214f7a..b3fe97a99 100644",
                "--- a/prov/src/main/java/org/bouncycastle/jce/provider/BouncyCastleProvider.java",
                "+++ b/prov/src/main/java/org/bouncycastle/jce/provider/BouncyCastleProvider.java",
                "@@ -56,3 +56,3 @@ public final class BouncyCastleProvider extends Provider",
                " {",
                "-    private static String info = \"BouncyCastle Security Provider v1.59b\";",
                "+    private static String info = \"BouncyCastle Security Provider v1.59\";",
                "@@ -139,3 +139,3 @@ public final class BouncyCastleProvider extends Provider",
                "     {",
                "-        super(PROVIDER_NAME, 1.585, info);",
                "+        super(PROVIDER_NAME, 1.59, info);",
                "diff --git a/prov/src/main/java/org/bouncycastle/pqc/jcajce/provider/BouncyCastlePQCProvider.java b/prov/src/main/java/org/bouncycastle/pqc/jcajce/provider/BouncyCastlePQCProvider.java",
                "index 24c6ee15b..82d04ff10 100644",
                "--- a/prov/src/main/java/org/bouncycastle/pqc/jcajce/provider/BouncyCastlePQCProvider.java",
                "+++ b/prov/src/main/java/org/bouncycastle/pqc/jcajce/provider/BouncyCastlePQCProvider.java",
                "@@ -24,3 +24,3 @@ public class BouncyCastlePQCProvider",
                " {",
                "-    private static String info = \"BouncyCastle Post-Quantum Security Provider v1.58\";",
                "+    private static String info = \"BouncyCastle Post-Quantum Security Provider v1.59\";",
                "@@ -49,3 +49,3 @@ public class BouncyCastlePQCProvider",
                "     {",
                "-        super(PROVIDER_NAME, 1.58, info);",
                "+        super(PROVIDER_NAME, 1.59, info);",
                "diff --git a/prov/src/main/jdk1.1/org/bouncycastle/jce/provider/BouncyCastleProvider.java b/prov/src/main/jdk1.1/org/bouncycastle/jce/provider/BouncyCastleProvider.java",
                "index 63dbf126a..df413b75c 100644",
                "--- a/prov/src/main/jdk1.1/org/bouncycastle/jce/provider/BouncyCastleProvider.java",
                "+++ b/prov/src/main/jdk1.1/org/bouncycastle/jce/provider/BouncyCastleProvider.java",
                "@@ -45,3 +45,3 @@ public final class BouncyCastleProvider extends Provider",
                " {",
                "-    private static String info = \"BouncyCastle Security Provider v1.58\";",
                "+    private static String info = \"BouncyCastle Security Provider v1.59\";",
                "@@ -119,3 +119,3 @@ public final class BouncyCastleProvider extends Provider",
                "     {",
                "-        super(PROVIDER_NAME, 1.58, info);",
                "+        super(PROVIDER_NAME, 1.59, info);",
                "diff --git a/prov/src/main/jdk1.4/org/bouncycastle/jce/provider/BouncyCastleProvider.java b/prov/src/main/jdk1.4/org/bouncycastle/jce/provider/BouncyCastleProvider.java",
                "index 6321421fc..fa93b73f0 100644",
                "--- a/prov/src/main/jdk1.4/org/bouncycastle/jce/provider/BouncyCastleProvider.java",
                "+++ b/prov/src/main/jdk1.4/org/bouncycastle/jce/provider/BouncyCastleProvider.java",
                "@@ -51,3 +51,3 @@ public final class BouncyCastleProvider extends Provider",
                " {",
                "-    private static String info = \"BouncyCastle Security Provider v1.58\";",
                "+    private static String info = \"BouncyCastle Security Provider v1.59\";",
                "@@ -134,3 +134,3 @@ public final class BouncyCastleProvider extends Provider",
                "     {",
                "-        super(PROVIDER_NAME, 1.58, info);",
                "+        super(PROVIDER_NAME, 1.59, info);"
            ],
            "changed_files": [
                "prov/src/main/java/org/bouncycastle/jce/provider/BouncyCastleProvider.java",
                "prov/src/main/java/org/bouncycastle/pqc/jcajce/provider/BouncyCastlePQCProvider.java",
                "prov/src/main/jdk1.1/org/bouncycastle/jce/provider/BouncyCastleProvider.java",
                "prov/src/main/jdk1.4/org/bouncycastle/jce/provider/BouncyCastleProvider.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "102b814a07886bf9e67ca7fc7141e7dc22bf984f"
                ],
                [
                    "no-tag",
                    "0bc75861728a33cbc11e6009d9d8af974136fe43"
                ]
            ],
            "tags": [
                "r1v60"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "426064d440dcbf915677cdefde5c15707b8b628f",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1514433741,
            "hunks": 1,
            "message": "update",
            "diff": [
                "diff --git a/prov/src/main/jdk1.1/org/bouncycastle/jcajce/provider/asymmetric/ec/GMSignatureSpi.java b/prov/src/main/jdk1.1/org/bouncycastle/jcajce/provider/asymmetric/ec/GMSignatureSpi.java",
                "new file mode 100644",
                "index 000000000..de4b6c6b0",
                "--- /dev/null",
                "+++ b/prov/src/main/jdk1.1/org/bouncycastle/jcajce/provider/asymmetric/ec/GMSignatureSpi.java",
                "@@ -0,0 +1,161 @@",
                "+package org.bouncycastle.jcajce.provider.asymmetric.ec;",
                "+",
                "+import java.security.AlgorithmParameters;",
                "+import java.security.InvalidAlgorithmParameterException;",
                "+import java.security.InvalidKeyException;",
                "+import java.security.PrivateKey;",
                "+import java.security.PublicKey;",
                "+import java.security.SecureRandom;",
                "+import java.security.SignatureException;",
                "+import java.security.spec.AlgorithmParameterSpec;",
                "+",
                "+import org.bouncycastle.crypto.CipherParameters;",
                "+import org.bouncycastle.crypto.CryptoException;",
                "+import org.bouncycastle.crypto.params.ParametersWithID;",
                "+import org.bouncycastle.crypto.params.ParametersWithRandom;",
                "+import org.bouncycastle.crypto.signers.SM2Signer;",
                "+import org.bouncycastle.jcajce.provider.asymmetric.util.ECUtil;",
                "+import org.bouncycastle.jcajce.spec.SM2ParameterSpec;",
                "+import org.bouncycastle.jcajce.util.BCJcaJceHelper;",
                "+import org.bouncycastle.jcajce.util.JcaJceHelper;",
                "+",
                "+public class GMSignatureSpi",
                "+    extends java.security.Signature",
                "+{",
                "+    private final JcaJceHelper helper = new BCJcaJceHelper();",
                "+",
                "+    private AlgorithmParameters engineParams;",
                "+    private SM2ParameterSpec paramSpec;",
                "+",
                "+    private SecureRandom              appRandom;",
                "+",
                "+    private SM2Signer signer;",
                "+",
                "+    GMSignatureSpi(SM2Signer signer)",
                "+    {",
                "+        super(\"SM3withSM2\");",
                "+        this.signer = signer;",
                "+    }",
                "+",
                "+    protected void engineInitVerify(PublicKey publicKey)",
                "+        throws InvalidKeyException",
                "+    {",
                "+        CipherParameters param = ECUtils.generatePublicKeyParameter(publicKey);",
                "+",
                "+        if (paramSpec != null)",
                "+        {",
                "+            param = new ParametersWithID(param, paramSpec.getID());",
                "+        }",
                "+",
                "+        signer.init(false, param);",
                "+    }",
                "+",
                "+    protected void engineInitSign(",
                "+        PrivateKey privateKey)",
                "+        throws InvalidKeyException",
                "+    {",
                "+        CipherParameters param = ECUtil.generatePrivateKeyParameter(privateKey);",
                "+",
                "+        if (appRandom != null)",
                "+        {",
                "+            param = new ParametersWithRandom(param, appRandom);",
                "+        }",
                "+",
                "+        if (paramSpec != null)",
                "+        {",
                "+            signer.init(true, new ParametersWithID(param, paramSpec.getID()));",
                "+        }",
                "+        else",
                "+        {",
                "+            signer.init(true, param);",
                "+        }",
                "+    }",
                "+",
                "+    protected void engineUpdate(byte b)",
                "+        throws SignatureException",
                "+    {",
                "+        signer.update(b);",
                "+    }",
                "+",
                "+    protected void engineUpdate(byte[] bytes, int off, int length)",
                "+        throws SignatureException",
                "+    {",
                "+        signer.update(bytes, off, length);",
                "+    }",
                "+",
                "+    protected byte[] engineSign()",
                "+        throws SignatureException",
                "+    {",
                "+        try",
                "+        {",
                "+            return signer.generateSignature();",
                "+        }",
                "+        catch (CryptoException e)",
                "+        {",
                "+            throw new SignatureException(\"unable to create signature: \" + e.getMessage());",
                "+        }",
                "+    }",
                "+",
                "+    protected boolean engineVerify(byte[] bytes)",
                "+        throws SignatureException",
                "+    {",
                "+        return signer.verifySignature(bytes);",
                "+    }",
                "+",
                "+    protected void engineSetParameter(",
                "+        AlgorithmParameterSpec params)",
                "+        throws InvalidAlgorithmParameterException",
                "+    {",
                "+        if (params instanceof SM2ParameterSpec)",
                "+        {",
                "+            paramSpec = (SM2ParameterSpec)params;",
                "+        }",
                "+        else",
                "+        {",
                "+            throw new InvalidAlgorithmParameterException(\"only SM2ParameterSpec supported\");",
                "+        }",
                "+    }",
                "+",
                "+    protected AlgorithmParameters engineGetParameters()",
                "+    {",
                "+        if (engineParams == null)",
                "+        {",
                "+            if (paramSpec != null)",
                "+            {",
                "+                try",
                "+                {",
                "+                    engineParams = helper.createAlgorithmParameters(\"PSS\");",
                "+                    engineParams.init(paramSpec);",
                "+                }",
                "+                catch (Exception e)",
                "+                {",
                "+                    throw new RuntimeException(e.toString());",
                "+                }",
                "+            }",
                "+        }",
                "+",
                "+        return engineParams;",
                "+    }",
                "+",
                "+    protected void engineSetParameter(",
                "+        String param,",
                "+        Object value)",
                "+    {",
                "+        throw new UnsupportedOperationException(\"engineSetParameter unsupported\");",
                "+    }",
                "+",
                "+    protected Object engineGetParameter(",
                "+        String param)",
                "+    {",
                "+        throw new UnsupportedOperationException(\"engineGetParameter unsupported\");",
                "+    }",
                "+",
                "+    static public class sm3WithSM2",
                "+        extends GMSignatureSpi",
                "+    {",
                "+        public sm3WithSM2()",
                "+        {",
                "+            super(new SM2Signer());",
                "+        }",
                "+    }",
                "+}"
            ],
            "changed_files": [
                "prov/src/main/jdk1.1/org/bouncycastle/jcajce/provider/asymmetric/ec/GMSignatureSpi.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "3c17d92038102027230ae906c5a704d44b775747"
                ],
                [
                    "no-tag",
                    "ce2d10ea5e4ae57bb74f4618153447a668ae6383"
                ],
                [
                    "no-tag",
                    "b14d22bc93c72cbd281faec6ade489abad45b017"
                ],
                [
                    "no-tag",
                    "8e4af4a414121669a3496d66dcc36bd160fffba1"
                ],
                [
                    "no-tag",
                    "ae20ca5538395751f2e1ca5390edd05e8735bf82"
                ],
                [
                    "no-tag",
                    "7305ed158e3c6f5c9409862059532ea11ab2d826"
                ],
                [
                    "no-tag",
                    "7ff448f1dc19c37ef660fde325d1b15a31f6f81d"
                ],
                [
                    "no-tag",
                    "b63d98a80d949b7832d8e672d83d0a9fc188bdf9"
                ],
                [
                    "no-tag",
                    "472e5164d7c43322de48794d20bb5df1a6a7bbff"
                ],
                [
                    "no-tag",
                    "cf288d55ed9cab9e5f8707c4427bb6bee01aea8c"
                ],
                [
                    "no-tag",
                    "f65220c5031d280ec296ec87a578184a869a1805"
                ],
                [
                    "no-tag",
                    "c7480141c1f3ac81556606ff5dca26064a75f734"
                ],
                [
                    "no-tag",
                    "5801251ede1f136d003850317db59d1ff1449cae"
                ],
                [
                    "no-tag",
                    "65e0b904d9937b95e9c53d44e24944c842d072a0"
                ]
            ],
            "tags": [
                "r1rv59",
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ec07e8566242722c0f65ef3f90b23d031c939cb9",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1512103258,
            "hunks": 13,
            "message": "added support for additional time strings to DER encoded version of GeneralizedTime.",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/asn1/ASN1GeneralizedTime.java b/core/src/main/java/org/bouncycastle/asn1/ASN1GeneralizedTime.java",
                "index cd69ed8ec..6c22b42cb 100644",
                "--- a/core/src/main/java/org/bouncycastle/asn1/ASN1GeneralizedTime.java",
                "+++ b/core/src/main/java/org/bouncycastle/asn1/ASN1GeneralizedTime.java",
                "@@ -46,3 +46,3 @@ public class ASN1GeneralizedTime",
                " {",
                "-    private byte[] time;",
                "+    protected byte[] time;",
                "@@ -372,3 +372,3 @@ public class ASN1GeneralizedTime",
                "-    private boolean hasFractionalSeconds()",
                "+    protected boolean hasFractionalSeconds()",
                "     {",
                "@@ -387,10 +387,15 @@ public class ASN1GeneralizedTime",
                "-    private boolean hasSeconds()",
                "+    protected boolean hasSeconds()",
                "     {",
                "-        return time.length >= 14 && time[12] >= '0' && time[12] <= '9' && time[13] >= '0' && time[13] <= '9';",
                "+        return isDigit(12) && isDigit(13);",
                "     }",
                "-    private boolean hasMinutes()",
                "+    protected boolean hasMinutes()",
                "     {",
                "-        return time.length >= 12 && time[10] >= '0' && time[10] <= '9' && time[11] >= '0' && time[11] <= '9';",
                "+        return isDigit(10) && isDigit(11);",
                "+    }",
                "+",
                "+    private boolean isDigit(int pos)",
                "+    {",
                "+        return time.length > pos && time[pos] >= '0' && time[pos] <= '9';",
                "     }",
                "@@ -416,2 +421,7 @@ public class ASN1GeneralizedTime",
                "+    ASN1Primitive toDERObject()",
                "+    {",
                "+        return new DERGeneralizedTime(time);",
                "+    }",
                "+",
                "     boolean asn1Equals(",
                "diff --git a/core/src/main/java/org/bouncycastle/asn1/DERGeneralizedTime.java b/core/src/main/java/org/bouncycastle/asn1/DERGeneralizedTime.java",
                "index adee74ecb..ee75d9629 100644",
                "--- a/core/src/main/java/org/bouncycastle/asn1/DERGeneralizedTime.java",
                "+++ b/core/src/main/java/org/bouncycastle/asn1/DERGeneralizedTime.java",
                "@@ -2,6 +2,23 @@ package org.bouncycastle.asn1;",
                "+import java.io.IOException;",
                " import java.util.Date;",
                "+import org.bouncycastle.util.Strings;",
                "+",
                " /**",
                "  * DER Generalized time object.",
                "+ * <h3>11: Restrictions on BER employed by both CER and DER</h3>",
                "+ * <h4>11.7 GeneralizedTime </h4>",
                "+ * <p>",
                "+ * <b>11.7.1</b> The encoding shall terminate with a \"Z\",",
                "+ * as described in the ITU-T Rec. X.680 | ISO/IEC 8824-1 clause on",
                "+ * GeneralizedTime.",
                "+ * </p><p>",
                "+ * <b>11.7.2</b> The seconds element shall always be present.",
                "+ * </p>",
                "+ * <p>",
                "+ * <b>11.7.3</b> The fractional-seconds elements, if present,",
                "+ * shall omit all trailing zeros; if the elements correspond to 0,",
                "+ * they shall be wholly omitted, and the decimal point element also",
                "+ * shall be omitted.",
                "  */",
                "@@ -10,6 +27,5 @@ public class DERGeneralizedTime",
                " {",
                "-",
                "-    DERGeneralizedTime(byte[] bytes)",
                "+    public DERGeneralizedTime(byte[] time)",
                "     {",
                "-        super(bytes);",
                "+        super(time);",
                "     }",
                "@@ -26,3 +42,75 @@ public class DERGeneralizedTime",
                "-    // TODO: create proper DER encoding.",
                "+    private byte[] getDERTime()",
                "+    {",
                "+        if (time[time.length - 1] == 'Z')",
                "+        {",
                "+            if (!hasMinutes())",
                "+            {",
                "+                byte[] derTime = new byte[time.length + 4];",
                "+",
                "+                System.arraycopy(time, 0, derTime, 0, time.length - 1);",
                "+                System.arraycopy(Strings.toByteArray(\"0000Z\"), 0, derTime, time.length - 1, 5);",
                "+",
                "+                return derTime;",
                "+            }",
                "+            else if (!hasSeconds())",
                "+            {",
                "+                byte[] derTime = new byte[time.length + 2];",
                "+",
                "+                System.arraycopy(time, 0, derTime, 0, time.length - 1);",
                "+                System.arraycopy(Strings.toByteArray(\"00Z\"), 0, derTime, time.length - 1, 3);",
                "+",
                "+                return derTime;",
                "+            }",
                "+            else if (hasFractionalSeconds())",
                "+            {",
                "+                int ind = time.length - 2;",
                "+                while (ind > 0 && time[ind] == '0')",
                "+                {",
                "+                    ind--;",
                "+                }",
                "+",
                "+                if (time[ind] == '.')",
                "+                {",
                "+                    byte[] derTime = new byte[ind + 1];",
                "+",
                "+                    System.arraycopy(time, 0, derTime, 0, ind);",
                "+                    derTime[ind] = 'Z';",
                "+",
                "+                    return derTime;",
                "+                }",
                "+                else",
                "+                {",
                "+                    byte[] derTime = new byte[ind + 2];",
                "+",
                "+                    System.arraycopy(time, 0, derTime, 0, ind + 1);",
                "+                    derTime[ind + 1] = 'Z';",
                "+",
                "+                    return derTime;",
                "+                }",
                "+            }",
                "+            else",
                "+            {",
                "+                return time;",
                "+            }",
                "+        }",
                "+        else",
                "+        {",
                "+            return time; // TODO: is there a better way?",
                "+        }",
                "+    }",
                "+",
                "+    int encodedLength()",
                "+    {",
                "+        int length = getDERTime().length;",
                "+",
                "+        return 1 + StreamUtil.calculateBodyLength(length) + length;",
                "+    }",
                "+",
                "+    void encode(",
                "+        ASN1OutputStream out)",
                "+        throws IOException",
                "+    {",
                "+        out.writeEncoded(BERTags.GENERALIZED_TIME, getDERTime());",
                "+    }",
                " }"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/asn1/ASN1GeneralizedTime.java",
                "core/src/main/java/org/bouncycastle/asn1/DERGeneralizedTime.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "199be1bdc892dcb3360af1b5a887a7e133d2cdac"
                ],
                [
                    "no-tag",
                    "aa364f5be62c8b947d7dce3caa3f5704e35af8f2"
                ]
            ],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3b1c1d5e639f2785d566e9baac1bfcf9468bb23f",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1515994619,
            "hunks": 20,
            "message": "BCJSSE: Ensure cipherSuites/protocols are always vetted",
            "diff": [
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLContextSpi.java b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLContextSpi.java",
                "index 545efbc72..2c1d2f7a3 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLContextSpi.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLContextSpi.java",
                "@@ -7,2 +7,3 @@ import java.security.SecureRandom;",
                " import java.util.ArrayList;",
                "+import java.util.Collection;",
                " import java.util.Collections;",
                "@@ -244,2 +245,12 @@ class ProvSSLContextSpi",
                "+    private static String[] getArray(Collection<String> c)",
                "+    {",
                "+        return c.toArray(new String[c.size()]);",
                "+    }",
                "+",
                "+    private static String[] getKeysArray(Map<String, ?> m)",
                "+    {",
                "+        return getArray(m.keySet());",
                "+    }",
                "+",
                "     protected final boolean isInFipsMode;",
                "@@ -270,3 +281,3 @@ class ProvSSLContextSpi",
                "         List<String> defaultCipherSuiteList = isInFipsMode ? DEFAULT_CIPHERSUITE_LIST_FIPS : DEFAULT_CIPHERSUITE_LIST;",
                "-        this.defaultCipherSuites = defaultCipherSuiteList.toArray(new String[defaultCipherSuiteList.size()]);",
                "+        this.defaultCipherSuites = getArray(defaultCipherSuiteList);",
                "     }",
                "@@ -310,3 +321,3 @@ class ProvSSLContextSpi",
                "     {",
                "-        return new ProvSSLParameters(defaultCipherSuites, getDefaultProtocols(isServer));",
                "+        return new ProvSSLParameters(this, defaultCipherSuites, getDefaultProtocols(isServer));",
                "     }",
                "@@ -391,3 +402,3 @@ class ProvSSLContextSpi",
                "     {",
                "-        return supportedCipherSuites.keySet().toArray(new String[supportedCipherSuites.size()]);",
                "+        return getKeysArray(supportedCipherSuites);",
                "     }",
                "@@ -396,3 +407,3 @@ class ProvSSLContextSpi",
                "     {",
                "-        return supportedProtocols.keySet().toArray(new String[supportedProtocols.size()]);",
                "+        return getKeysArray(supportedProtocols);",
                "     }",
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLEngine.java b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLEngine.java",
                "index 06ea2a45a..fceabd633 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLEngine.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLEngine.java",
                "@@ -258,7 +258,2 @@ class ProvSSLEngine",
                "     {",
                "-        if (!context.isSupportedCipherSuites(suites))",
                "-        {",
                "-            throw new IllegalArgumentException(\"'suites' cannot be null, or contain unsupported cipher suites\");",
                "-        }",
                "-",
                "         sslParameters.setCipherSuites(suites);",
                "@@ -269,7 +264,2 @@ class ProvSSLEngine",
                "     {",
                "-        if (!context.isSupportedProtocols(protocols))",
                "-        {",
                "-            throw new IllegalArgumentException(\"'protocols' cannot be null, or contain unsupported protocols\");",
                "-        }",
                "-",
                "         sslParameters.setProtocols(protocols);",
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLParameters.java b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLParameters.java",
                "index 41156e324..032dfab6f 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLParameters.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLParameters.java",
                "@@ -25,2 +25,4 @@ class ProvSSLParameters",
                "+    private final ProvSSLContextSpi context;",
                "+",
                "     private String[] cipherSuites;",
                "@@ -35,4 +37,6 @@ class ProvSSLParameters",
                "-    ProvSSLParameters(String[] cipherSuites, String[] protocols)",
                "+    ProvSSLParameters(ProvSSLContextSpi context, String[] cipherSuites, String[] protocols)",
                "     {",
                "+        this.context = context;",
                "+",
                "         this.cipherSuites = cipherSuites;",
                "@@ -43,3 +47,3 @@ class ProvSSLParameters",
                "     {",
                "-        ProvSSLParameters p = new ProvSSLParameters(cipherSuites, protocols);",
                "+        ProvSSLParameters p = new ProvSSLParameters(context, cipherSuites, protocols);",
                "         p.needClientAuth = needClientAuth;",
                "@@ -56,2 +60,7 @@ class ProvSSLParameters",
                "     {",
                "+        if (!context.isSupportedCipherSuites(cipherSuites))",
                "+        {",
                "+            throw new IllegalArgumentException(\"'cipherSuites' cannot be null, or contain unsupported cipher suites\");",
                "+        }",
                "+",
                "         this.cipherSuites = cipherSuites.clone();",
                "@@ -61,2 +70,7 @@ class ProvSSLParameters",
                "     {",
                "+        if (!context.isSupportedProtocols(protocols))",
                "+        {",
                "+            throw new IllegalArgumentException(\"'protocols' cannot be null, or contain unsupported protocols\");",
                "+        }",
                "+",
                "         this.protocols = protocols.clone();",
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLServerSocket.java b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLServerSocket.java",
                "index b0237ee86..d699521bb 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLServerSocket.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLServerSocket.java",
                "@@ -140,7 +140,2 @@ class ProvSSLServerSocket",
                "     {",
                "-        if (!context.isSupportedCipherSuites(suites))",
                "-        {",
                "-            throw new IllegalArgumentException(\"'suites' cannot be null, or contain unsupported cipher suites\");",
                "-        }",
                "-",
                "         sslParameters.setCipherSuites(suites);",
                "@@ -151,7 +146,2 @@ class ProvSSLServerSocket",
                "     {",
                "-        if (!context.isSupportedProtocols(protocols))",
                "-        {",
                "-            throw new IllegalArgumentException(\"'protocols' cannot be null, or contain unsupported protocols\");",
                "-        }",
                "-",
                "         sslParameters.setProtocols(protocols);",
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketDirect.java b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketDirect.java",
                "index 5a5f64ab0..4b2eebcca 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketDirect.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketDirect.java",
                "@@ -219,7 +219,2 @@ class ProvSSLSocketDirect",
                "     {",
                "-        if (!context.isSupportedCipherSuites(suites))",
                "-        {",
                "-            throw new IllegalArgumentException(\"'suites' cannot be null, or contain unsupported cipher suites\");",
                "-        }",
                "-",
                "         sslParameters.setCipherSuites(suites);",
                "@@ -230,7 +225,2 @@ class ProvSSLSocketDirect",
                "     {",
                "-        if (!context.isSupportedProtocols(protocols))",
                "-        {",
                "-            throw new IllegalArgumentException(\"'protocols' cannot be null, or contain unsupported protocols\");",
                "-        }",
                "-",
                "         sslParameters.setProtocols(protocols);",
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketWrap.java b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketWrap.java",
                "index 0a10b04a6..ac15c951e 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketWrap.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketWrap.java",
                "@@ -328,7 +328,2 @@ class ProvSSLSocketWrap",
                "     {",
                "-        if (!context.isSupportedCipherSuites(suites))",
                "-        {",
                "-            throw new IllegalArgumentException(\"'suites' cannot be null, or contain unsupported cipher suites\");",
                "-        }",
                "-",
                "         sslParameters.setCipherSuites(suites);",
                "@@ -339,7 +334,2 @@ class ProvSSLSocketWrap",
                "     {",
                "-        if (!context.isSupportedProtocols(protocols))",
                "-        {",
                "-            throw new IllegalArgumentException(\"'protocols' cannot be null, or contain unsupported protocols\");",
                "-        }",
                "-",
                "         sslParameters.setProtocols(protocols);"
            ],
            "changed_files": [
                "tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLContextSpi.java",
                "tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLEngine.java",
                "tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLParameters.java",
                "tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLServerSocket.java",
                "tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketDirect.java",
                "tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketWrap.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "1724081c47338a2a6034a6d49b579bb1ce67112a"
                ],
                [
                    "no-tag",
                    "0c0085e214f1774f2af2914b765309e47a917a1b"
                ]
            ],
            "tags": [
                "r1v60"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "18b6cb29bd8bda026a8e14980d3343523210591d",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1511761177,
            "hunks": 43,
            "message": "further naming tweaks... added one pass unified test.",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/agreement/DHUnifiedAgreement.java b/core/src/main/java/org/bouncycastle/crypto/agreement/DHUnifiedAgreement.java",
                "new file mode 100644",
                "index 000000000..97172f6e1",
                "--- /dev/null",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/agreement/DHUnifiedAgreement.java",
                "@@ -0,0 +1,48 @@",
                "+package org.bouncycastle.crypto.agreement;",
                "+",
                "+import java.math.BigInteger;",
                "+",
                "+import org.bouncycastle.crypto.CipherParameters;",
                "+import org.bouncycastle.crypto.params.DHUPrivateParameters;",
                "+import org.bouncycastle.crypto.params.DHUPublicParameters;",
                "+import org.bouncycastle.util.Arrays;",
                "+import org.bouncycastle.util.BigIntegers;",
                "+",
                "+/**",
                "+ * FFC Unified static/ephemeral agreement as described in NIST SP 800-56A.",
                "+ */",
                "+public class DHUnifiedAgreement",
                "+{",
                "+    private DHUPrivateParameters privParams;",
                "+",
                "+    public void init(",
                "+        CipherParameters key)",
                "+    {",
                "+        this.privParams = (DHUPrivateParameters)key;",
                "+    }",
                "+",
                "+    public int getFieldSize()",
                "+    {",
                "+        return (privParams.getStaticPrivateKey().getParameters().getP().bitLength() + 7) / 8;",
                "+    }",
                "+",
                "+    public byte[] calculateAgreement(CipherParameters pubKey)",
                "+    {",
                "+        DHUPublicParameters pubParams = (DHUPublicParameters)pubKey;",
                "+",
                "+        DHBasicAgreement sAgree = new DHBasicAgreement();",
                "+        DHBasicAgreement eAgree = new DHBasicAgreement();",
                "+",
                "+        sAgree.init(privParams.getStaticPrivateKey());",
                "+",
                "+        BigInteger sComp = sAgree.calculateAgreement(pubParams.getStaticPublicKey());",
                "+",
                "+        eAgree.init(privParams.getEphemeralPrivateKey());",
                "+",
                "+        BigInteger eComp = eAgree.calculateAgreement(pubParams.getEphemeralPublicKey());",
                "+",
                "+        return Arrays.concatenate(",
                "+            BigIntegers.asUnsignedByteArray(this.getFieldSize(), eComp),",
                "+            BigIntegers.asUnsignedByteArray(this.getFieldSize(), sComp));",
                "+    }",
                "+}",
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/agreement/ECDHCUnifiedAgreement.java b/core/src/main/java/org/bouncycastle/crypto/agreement/ECDHCUnifiedAgreement.java",
                "new file mode 100644",
                "index 000000000..463c9a424",
                "--- /dev/null",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/agreement/ECDHCUnifiedAgreement.java",
                "@@ -0,0 +1,48 @@",
                "+package org.bouncycastle.crypto.agreement;",
                "+",
                "+import java.math.BigInteger;",
                "+",
                "+import org.bouncycastle.crypto.CipherParameters;",
                "+import org.bouncycastle.crypto.params.ECDHUPrivateParameters;",
                "+import org.bouncycastle.crypto.params.ECDHUPublicParameters;",
                "+import org.bouncycastle.util.Arrays;",
                "+import org.bouncycastle.util.BigIntegers;",
                "+",
                "+/**",
                "+ * EC Unified static/ephemeral agreement as described in NIST SP 800-56A using EC co-factor Diffie-Hellman.",
                "+ */",
                "+public class ECDHCUnifiedAgreement",
                "+{",
                "+    private ECDHUPrivateParameters privParams;",
                "+",
                "+    public void init(",
                "+        CipherParameters key)",
                "+    {",
                "+        this.privParams = (ECDHUPrivateParameters)key;",
                "+    }",
                "+",
                "+    public int getFieldSize()",
                "+    {",
                "+        return (privParams.getStaticPrivateKey().getParameters().getCurve().getFieldSize() + 7) / 8;",
                "+    }",
                "+",
                "+    public byte[] calculateAgreement(CipherParameters pubKey)",
                "+    {",
                "+        ECDHUPublicParameters pubParams = (ECDHUPublicParameters)pubKey;",
                "+",
                "+        ECDHCBasicAgreement sAgree = new ECDHCBasicAgreement();",
                "+        ECDHCBasicAgreement eAgree = new ECDHCBasicAgreement();",
                "+",
                "+        sAgree.init(privParams.getStaticPrivateKey());",
                "+",
                "+        BigInteger sComp = sAgree.calculateAgreement(pubParams.getStaticPublicKey());",
                "+",
                "+        eAgree.init(privParams.getEphemeralPrivateKey());",
                "+",
                "+        BigInteger eComp = eAgree.calculateAgreement(pubParams.getEphemeralPublicKey());",
                "+",
                "+        return Arrays.concatenate(",
                "+            BigIntegers.asUnsignedByteArray(this.getFieldSize(), eComp),",
                "+            BigIntegers.asUnsignedByteArray(this.getFieldSize(), sComp));",
                "+    }",
                "+}",
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/params/DHUPrivateParameters.java b/core/src/main/java/org/bouncycastle/crypto/params/DHUPrivateParameters.java",
                "new file mode 100644",
                "index 000000000..31836ce9e",
                "--- /dev/null",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/params/DHUPrivateParameters.java",
                "@@ -0,0 +1,72 @@",
                "+package org.bouncycastle.crypto.params;",
                "+",
                "+import org.bouncycastle.crypto.CipherParameters;",
                "+",
                "+/**",
                "+ * Parameters holder for private unified static/ephemeral agreement as described in NIST SP 800-56A.",
                "+ */",
                "+public class DHUPrivateParameters",
                "+    implements CipherParameters",
                "+{",
                "+    private DHPrivateKeyParameters staticPrivateKey;",
                "+    private DHPrivateKeyParameters ephemeralPrivateKey;",
                "+    private DHPublicKeyParameters ephemeralPublicKey;",
                "+",
                "+    public DHUPrivateParameters(",
                "+        DHPrivateKeyParameters  staticPrivateKey,",
                "+        DHPrivateKeyParameters  ephemeralPrivateKey)",
                "+    {",
                "+        this(staticPrivateKey, ephemeralPrivateKey, null);",
                "+    }",
                "+",
                "+    public DHUPrivateParameters(",
                "+        DHPrivateKeyParameters  staticPrivateKey,",
                "+        DHPrivateKeyParameters  ephemeralPrivateKey,",
                "+        DHPublicKeyParameters   ephemeralPublicKey)",
                "+    {",
                "+        if (staticPrivateKey == null)",
                "+        {",
                "+            throw new NullPointerException(\"staticPrivateKey cannot be null\");",
                "+        }",
                "+        if (ephemeralPrivateKey == null)",
                "+        {",
                "+            throw new NullPointerException(\"ephemeralPrivateKey cannot be null\");",
                "+        }",
                "+",
                "+        DHParameters parameters = staticPrivateKey.getParameters();",
                "+        if (!parameters.equals(ephemeralPrivateKey.getParameters()))",
                "+        {",
                "+            throw new IllegalArgumentException(\"static and ephemeral private keys have different domain parameters\");",
                "+        }",
                "+",
                "+        if (ephemeralPublicKey == null)",
                "+        {",
                "+            ephemeralPublicKey = new DHPublicKeyParameters(",
                "+                parameters.getG().modPow(ephemeralPrivateKey.getX(), parameters.getP()),",
                "+                parameters);",
                "+        }",
                "+        else if (!parameters.equals(ephemeralPublicKey.getParameters()))",
                "+        {",
                "+            throw new IllegalArgumentException(\"ephemeral public key has different domain parameters\");",
                "+        }",
                "+",
                "+        this.staticPrivateKey = staticPrivateKey;",
                "+        this.ephemeralPrivateKey = ephemeralPrivateKey;",
                "+        this.ephemeralPublicKey = ephemeralPublicKey;",
                "+    }",
                "+",
                "+    public DHPrivateKeyParameters getStaticPrivateKey()",
                "+    {",
                "+        return staticPrivateKey;",
                "+    }",
                "+",
                "+    public DHPrivateKeyParameters getEphemeralPrivateKey()",
                "+    {",
                "+        return ephemeralPrivateKey;",
                "+    }",
                "+",
                "+    public DHPublicKeyParameters getEphemeralPublicKey()",
                "+    {",
                "+        return ephemeralPublicKey;",
                "+    }",
                "+}",
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/params/DHUPublicParameters.java b/core/src/main/java/org/bouncycastle/crypto/params/DHUPublicParameters.java",
                "new file mode 100644",
                "index 000000000..7b2a14df6",
                "--- /dev/null",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/params/DHUPublicParameters.java",
                "@@ -0,0 +1,44 @@",
                "+package org.bouncycastle.crypto.params;",
                "+",
                "+import org.bouncycastle.crypto.CipherParameters;",
                "+",
                "+/**",
                "+ * Parameters holder for static/ephemeral agreement as described in NIST SP 800-56A.",
                "+ */",
                "+public class DHUPublicParameters",
                "+    implements CipherParameters",
                "+{",
                "+    private DHPublicKeyParameters staticPublicKey;",
                "+    private DHPublicKeyParameters ephemeralPublicKey;",
                "+",
                "+    public DHUPublicParameters(",
                "+        DHPublicKeyParameters   staticPublicKey,",
                "+        DHPublicKeyParameters   ephemeralPublicKey)",
                "+    {",
                "+        if (staticPublicKey == null)",
                "+        {",
                "+            throw new NullPointerException(\"staticPublicKey cannot be null\");",
                "+        }",
                "+        if (ephemeralPublicKey == null)",
                "+        {",
                "+            throw new NullPointerException(\"ephemeralPublicKey cannot be null\");",
                "+        }",
                "+        if (!staticPublicKey.getParameters().equals(ephemeralPublicKey.getParameters()))",
                "+        {",
                "+            throw new IllegalArgumentException(\"Static and ephemeral public keys have different domain parameters\");",
                "+        }",
                "+",
                "+        this.staticPublicKey = staticPublicKey;",
                "+        this.ephemeralPublicKey = ephemeralPublicKey;",
                "+    }",
                "+",
                "+    public DHPublicKeyParameters getStaticPublicKey()",
                "+    {",
                "+        return staticPublicKey;",
                "+    }",
                "+",
                "+    public DHPublicKeyParameters getEphemeralPublicKey()",
                "+    {",
                "+        return ephemeralPublicKey;",
                "+    }",
                "+}",
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/params/ECDHUPrivateParameters.java b/core/src/main/java/org/bouncycastle/crypto/params/ECDHUPrivateParameters.java",
                "new file mode 100644",
                "index 000000000..ca9deaf59",
                "--- /dev/null",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/params/ECDHUPrivateParameters.java",
                "@@ -0,0 +1,72 @@",
                "+package org.bouncycastle.crypto.params;",
                "+",
                "+import org.bouncycastle.crypto.CipherParameters;",
                "+",
                "+/**",
                "+ * Parameters holder for private unified static/ephemeral agreement as described in NIST SP 800-56A.",
                "+ */",
                "+public class ECDHUPrivateParameters",
                "+    implements CipherParameters",
                "+{",
                "+    private ECPrivateKeyParameters staticPrivateKey;",
                "+    private ECPrivateKeyParameters ephemeralPrivateKey;",
                "+    private ECPublicKeyParameters ephemeralPublicKey;",
                "+",
                "+    public ECDHUPrivateParameters(",
                "+        ECPrivateKeyParameters  staticPrivateKey,",
                "+        ECPrivateKeyParameters  ephemeralPrivateKey)",
                "+    {",
                "+        this(staticPrivateKey, ephemeralPrivateKey, null);",
                "+    }",
                "+",
                "+    public ECDHUPrivateParameters(",
                "+        ECPrivateKeyParameters  staticPrivateKey,",
                "+        ECPrivateKeyParameters  ephemeralPrivateKey,",
                "+        ECPublicKeyParameters   ephemeralPublicKey)",
                "+    {",
                "+        if (staticPrivateKey == null)",
                "+        {",
                "+            throw new NullPointerException(\"staticPrivateKey cannot be null\");",
                "+        }",
                "+        if (ephemeralPrivateKey == null)",
                "+        {",
                "+            throw new NullPointerException(\"ephemeralPrivateKey cannot be null\");",
                "+        }",
                "+",
                "+        ECDomainParameters parameters = staticPrivateKey.getParameters();",
                "+        if (!parameters.equals(ephemeralPrivateKey.getParameters()))",
                "+        {",
                "+            throw new IllegalArgumentException(\"static and ephemeral private keys have different domain parameters\");",
                "+        }",
                "+",
                "+        if (ephemeralPublicKey == null)",
                "+        {",
                "+            ephemeralPublicKey = new ECPublicKeyParameters(",
                "+                parameters.getG().multiply(ephemeralPrivateKey.getD()),",
                "+                parameters);",
                "+        }",
                "+        else if (!parameters.equals(ephemeralPublicKey.getParameters()))",
                "+        {",
                "+            throw new IllegalArgumentException(\"ephemeral public key has different domain parameters\");",
                "+        }",
                "+",
                "+        this.staticPrivateKey = staticPrivateKey;",
                "+        this.ephemeralPrivateKey = ephemeralPrivateKey;",
                "+        this.ephemeralPublicKey = ephemeralPublicKey;",
                "+    }",
                "+",
                "+    public ECPrivateKeyParameters getStaticPrivateKey()",
                "+    {",
                "+        return staticPrivateKey;",
                "+    }",
                "+",
                "+    public ECPrivateKeyParameters getEphemeralPrivateKey()",
                "+    {",
                "+        return ephemeralPrivateKey;",
                "+    }",
                "+",
                "+    public ECPublicKeyParameters getEphemeralPublicKey()",
                "+    {",
                "+        return ephemeralPublicKey;",
                "+    }",
                "+}",
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/params/ECDHUPublicParameters.java b/core/src/main/java/org/bouncycastle/crypto/params/ECDHUPublicParameters.java",
                "new file mode 100644",
                "index 000000000..f7754e122",
                "--- /dev/null",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/params/ECDHUPublicParameters.java",
                "@@ -0,0 +1,44 @@",
                "+package org.bouncycastle.crypto.params;",
                "+",
                "+import org.bouncycastle.crypto.CipherParameters;",
                "+",
                "+/**",
                "+ * Parameters holder for public unified static/ephemeral agreement as described in NIST SP 800-56A using EC DH/CDH.",
                "+ */",
                "+public class ECDHUPublicParameters",
                "+    implements CipherParameters",
                "+{",
                "+    private ECPublicKeyParameters staticPublicKey;",
                "+    private ECPublicKeyParameters ephemeralPublicKey;",
                "+",
                "+    public ECDHUPublicParameters(",
                "+        ECPublicKeyParameters   staticPublicKey,",
                "+        ECPublicKeyParameters   ephemeralPublicKey)",
                "+    {",
                "+        if (staticPublicKey == null)",
                "+        {",
                "+            throw new NullPointerException(\"staticPublicKey cannot be null\");",
                "+        }",
                "+        if (ephemeralPublicKey == null)",
                "+        {",
                "+            throw new NullPointerException(\"ephemeralPublicKey cannot be null\");",
                "+        }",
                "+        if (!staticPublicKey.getParameters().equals(ephemeralPublicKey.getParameters()))",
                "+        {",
                "+            throw new IllegalArgumentException(\"static and ephemeral public keys have different domain parameters\");",
                "+        }",
                "+",
                "+        this.staticPublicKey = staticPublicKey;",
                "+        this.ephemeralPublicKey = ephemeralPublicKey;",
                "+    }",
                "+",
                "+    public ECPublicKeyParameters getStaticPublicKey()",
                "+    {",
                "+        return staticPublicKey;",
                "+    }",
                "+",
                "+    public ECPublicKeyParameters getEphemeralPublicKey()",
                "+    {",
                "+        return ephemeralPublicKey;",
                "+    }",
                "+}",
                "diff --git a/prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/EC.java b/prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/EC.java",
                "index e0e92ef16..43bb3d8c1 100644",
                "--- a/prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/EC.java",
                "+++ b/prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/EC.java",
                "@@ -46,4 +46,4 @@ public class EC",
                "-            provider.addAttributes(\"KeyAgreement.ECCDHE\", generalEcAttributes);",
                "-            provider.addAlgorithm(\"KeyAgreement.ECCDHE\", PREFIX + \"KeyAgreementSpi$DHCE\");",
                "+            provider.addAttributes(\"KeyAgreement.ECCDHU\", generalEcAttributes);",
                "+            provider.addAlgorithm(\"KeyAgreement.ECCDHU\", PREFIX + \"KeyAgreementSpi$DHUC\");",
                "@@ -84,7 +84,7 @@ public class EC",
                "-            provider.addAlgorithm(\"KeyAgreement.ECCDHEWITHSHA1CKDF\", PREFIX + \"KeyAgreementSpi$DHEwithSHA1CKDF\");",
                "-            provider.addAlgorithm(\"KeyAgreement.ECCDHEWITHSHA224CKDF\", PREFIX + \"KeyAgreementSpi$DHEwithSHA224CKDF\");",
                "-            provider.addAlgorithm(\"KeyAgreement.ECCDHEWITHSHA256CKDF\", PREFIX + \"KeyAgreementSpi$DHEwithSHA256CKDF\");",
                "-            provider.addAlgorithm(\"KeyAgreement.ECCDHEWITHSHA384CKDF\", PREFIX + \"KeyAgreementSpi$DHEwithSHA384CKDF\");",
                "-            provider.addAlgorithm(\"KeyAgreement.ECCDHEWITHSHA512CKDF\", PREFIX + \"KeyAgreementSpi$DHEwithSHA512CKDF\");",
                "+            provider.addAlgorithm(\"KeyAgreement.ECCDHUWITHSHA1CKDF\", PREFIX + \"KeyAgreementSpi$DHUwithSHA1CKDF\");",
                "+            provider.addAlgorithm(\"KeyAgreement.ECCDHUWITHSHA224CKDF\", PREFIX + \"KeyAgreementSpi$DHUwithSHA224CKDF\");",
                "+            provider.addAlgorithm(\"KeyAgreement.ECCDHUWITHSHA256CKDF\", PREFIX + \"KeyAgreementSpi$DHUwithSHA256CKDF\");",
                "+            provider.addAlgorithm(\"KeyAgreement.ECCDHUWITHSHA384CKDF\", PREFIX + \"KeyAgreementSpi$DHUwithSHA384CKDF\");",
                "+            provider.addAlgorithm(\"KeyAgreement.ECCDHUWITHSHA512CKDF\", PREFIX + \"KeyAgreementSpi$DHUwithSHA512CKDF\");",
                "diff --git a/prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/ec/KeyAgreementSpi.java b/prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/ec/KeyAgreementSpi.java",
                "index 66b5fb01a..038379b2c 100644",
                "--- a/prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/ec/KeyAgreementSpi.java",
                "+++ b/prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/ec/KeyAgreementSpi.java",
                "@@ -17,3 +17,3 @@ import org.bouncycastle.crypto.agreement.ECDHBasicAgreement;",
                " import org.bouncycastle.crypto.agreement.ECDHCBasicAgreement;",
                "-import org.bouncycastle.crypto.agreement.ECDHCEphemeralAgreement;",
                "+import org.bouncycastle.crypto.agreement.ECDHCUnifiedAgreement;",
                " import org.bouncycastle.crypto.agreement.ECMQVBasicAgreement;",
                "@@ -21,4 +21,4 @@ import org.bouncycastle.crypto.agreement.kdf.ConcatenationKDFGenerator;",
                " import org.bouncycastle.crypto.generators.KDF2BytesGenerator;",
                "-import org.bouncycastle.crypto.params.ECDHEPrivateParameters;",
                "-import org.bouncycastle.crypto.params.ECDHEPublicParameters;",
                "+import org.bouncycastle.crypto.params.ECDHUPrivateParameters;",
                "+import org.bouncycastle.crypto.params.ECDHUPublicParameters;",
                " import org.bouncycastle.crypto.params.ECDomainParameters;",
                "@@ -31,3 +31,3 @@ import org.bouncycastle.jcajce.provider.asymmetric.util.BaseAgreementSpi;",
                " import org.bouncycastle.jcajce.provider.asymmetric.util.ECUtil;",
                "-import org.bouncycastle.jcajce.spec.DHEParameterSpec;",
                "+import org.bouncycastle.jcajce.spec.DHUParameterSpec;",
                " import org.bouncycastle.jcajce.spec.MQVParameterSpec;",
                "@@ -57,3 +57,3 @@ public class KeyAgreementSpi",
                "     private MQVParameterSpec mqvParameters;",
                "-    private DHEParameterSpec dheParameters;",
                "+    private DHUParameterSpec dheParameters;",
                "     private byte[] result;",
                "@@ -73,3 +73,3 @@ public class KeyAgreementSpi",
                "         String kaAlgorithm,",
                "-        ECDHCEphemeralAgreement agreement,",
                "+        ECDHCUnifiedAgreement agreement,",
                "         DerivationFunction kdf)",
                "@@ -126,3 +126,3 @@ public class KeyAgreementSpi",
                "         }",
                "-        else if (agreement instanceof ECDHCEphemeralAgreement)",
                "+        else if (agreement instanceof ECDHCUnifiedAgreement)",
                "         {",
                "@@ -133,3 +133,3 @@ public class KeyAgreementSpi",
                "-            pubKey = new ECDHEPublicParameters(staticKey, ephemKey);",
                "+            pubKey = new ECDHUPublicParameters(staticKey, ephemKey);",
                "         }",
                "@@ -154,3 +154,3 @@ public class KeyAgreementSpi",
                "             {",
                "-                result = ((ECDHCEphemeralAgreement)agreement).calculateAgreement(pubKey);",
                "+                result = ((ECDHCUnifiedAgreement)agreement).calculateAgreement(pubKey);",
                "             }",
                "@@ -178,3 +178,3 @@ public class KeyAgreementSpi",
                "         if (params != null &&",
                "-            !(params instanceof MQVParameterSpec || params instanceof UserKeyingMaterialSpec || params instanceof DHEParameterSpec))",
                "+            !(params instanceof MQVParameterSpec || params instanceof UserKeyingMaterialSpec || params instanceof DHUParameterSpec))",
                "         {",
                "@@ -250,10 +250,10 @@ public class KeyAgreementSpi",
                "         }",
                "-        else if (parameterSpec instanceof DHEParameterSpec)",
                "+        else if (parameterSpec instanceof DHUParameterSpec)",
                "         {",
                "-            if (!(agreement instanceof ECDHCEphemeralAgreement))",
                "+            if (!(agreement instanceof ECDHCUnifiedAgreement))",
                "             {",
                "                 throw new InvalidKeyException(kaAlgorithm + \" key agreement cannot be used with \"",
                "-                    + getSimpleName(DHEParameterSpec.class));",
                "+                    + getSimpleName(DHUParameterSpec.class));",
                "             }",
                "-            DHEParameterSpec dheParameterSpec = (DHEParameterSpec)parameterSpec;",
                "+            DHUParameterSpec dheParameterSpec = (DHUParameterSpec)parameterSpec;",
                "             ECPrivateKeyParameters staticPrivKey;",
                "@@ -276,6 +276,6 @@ public class KeyAgreementSpi",
                "-            ECDHEPrivateParameters localParams = new ECDHEPrivateParameters(staticPrivKey, ephemPrivKey, ephemPubKey);",
                "+            ECDHUPrivateParameters localParams = new ECDHUPrivateParameters(staticPrivKey, ephemPrivKey, ephemPubKey);",
                "             this.parameters = staticPrivKey.getParameters();",
                "-            ((ECDHCEphemeralAgreement)agreement).init(localParams);",
                "+            ((ECDHCUnifiedAgreement)agreement).init(localParams);",
                "         }",
                "@@ -335,8 +335,8 @@ public class KeyAgreementSpi",
                "-    public static class DHCE",
                "+    public static class DHUC",
                "         extends KeyAgreementSpi",
                "     {",
                "-        public DHCE()",
                "+        public DHUC()",
                "         {",
                "-            super(\"ECCDHE\", new ECDHCEphemeralAgreement(), null);",
                "+            super(\"ECCDHU\", new ECDHCUnifiedAgreement(), null);",
                "         }",
                "@@ -565,3 +565,3 @@ public class KeyAgreementSpi",
                "         {",
                "-            super(\"ECDHEwithSHA512CKDF\", new ECMQVBasicAgreement(), new ConcatenationKDFGenerator(DigestFactory.createSHA512()));",
                "+            super(\"ECDHUwithSHA512CKDF\", new ECMQVBasicAgreement(), new ConcatenationKDFGenerator(DigestFactory.createSHA512()));",
                "         }",
                "@@ -569,8 +569,8 @@ public class KeyAgreementSpi",
                "-    public static class DHEwithSHA1CKDF",
                "+    public static class DHUwithSHA1CKDF",
                "         extends KeyAgreementSpi",
                "     {",
                "-        public DHEwithSHA1CKDF()",
                "+        public DHUwithSHA1CKDF()",
                "         {",
                "-            super(\"ECCDHEwithSHA1CKDF\", new ECDHCEphemeralAgreement(), new ConcatenationKDFGenerator(DigestFactory.createSHA1()));",
                "+            super(\"ECCDHUwithSHA1CKDF\", new ECDHCUnifiedAgreement(), new ConcatenationKDFGenerator(DigestFactory.createSHA1()));",
                "         }",
                "@@ -578,8 +578,8 @@ public class KeyAgreementSpi",
                "-    public static class DHEwithSHA224CKDF",
                "+    public static class DHUwithSHA224CKDF",
                "         extends KeyAgreementSpi",
                "     {",
                "-        public DHEwithSHA224CKDF()",
                "+        public DHUwithSHA224CKDF()",
                "         {",
                "-            super(\"ECCDHEwithSHA224CKDF\", new ECDHCEphemeralAgreement(), new ConcatenationKDFGenerator(DigestFactory.createSHA224()));",
                "+            super(\"ECCDHUwithSHA224CKDF\", new ECDHCUnifiedAgreement(), new ConcatenationKDFGenerator(DigestFactory.createSHA224()));",
                "         }",
                "@@ -587,8 +587,8 @@ public class KeyAgreementSpi",
                "-    public static class DHEwithSHA256CKDF",
                "+    public static class DHUwithSHA256CKDF",
                "         extends KeyAgreementSpi",
                "     {",
                "-        public DHEwithSHA256CKDF()",
                "+        public DHUwithSHA256CKDF()",
                "         {",
                "-            super(\"ECCDHEwithSHA256CKDF\", new ECDHCEphemeralAgreement(), new ConcatenationKDFGenerator(DigestFactory.createSHA256()));",
                "+            super(\"ECCDHUwithSHA256CKDF\", new ECDHCUnifiedAgreement(), new ConcatenationKDFGenerator(DigestFactory.createSHA256()));",
                "         }",
                "@@ -596,8 +596,8 @@ public class KeyAgreementSpi",
                "-    public static class DHEwithSHA384CKDF",
                "+    public static class DHUwithSHA384CKDF",
                "         extends KeyAgreementSpi",
                "     {",
                "-        public DHEwithSHA384CKDF()",
                "+        public DHUwithSHA384CKDF()",
                "         {",
                "-            super(\"ECCDHEwithSHA384CKDF\", new ECDHCEphemeralAgreement(), new ConcatenationKDFGenerator(DigestFactory.createSHA384()));",
                "+            super(\"ECCDHUwithSHA384CKDF\", new ECDHCUnifiedAgreement(), new ConcatenationKDFGenerator(DigestFactory.createSHA384()));",
                "         }",
                "@@ -605,8 +605,8 @@ public class KeyAgreementSpi",
                "-    public static class DHEwithSHA512CKDF",
                "+    public static class DHUwithSHA512CKDF",
                "         extends KeyAgreementSpi",
                "     {",
                "-        public DHEwithSHA512CKDF()",
                "+        public DHUwithSHA512CKDF()",
                "         {",
                "-            super(\"ECCDHEwithSHA512CKDF\", new ECDHCEphemeralAgreement(), new ConcatenationKDFGenerator(DigestFactory.createSHA512()));",
                "+            super(\"ECCDHUwithSHA512CKDF\", new ECDHCUnifiedAgreement(), new ConcatenationKDFGenerator(DigestFactory.createSHA512()));",
                "         }",
                "diff --git a/prov/src/main/java/org/bouncycastle/jcajce/spec/DHUParameterSpec.java b/prov/src/main/java/org/bouncycastle/jcajce/spec/DHUParameterSpec.java",
                "new file mode 100644",
                "index 000000000..fcdc23b68",
                "--- /dev/null",
                "+++ b/prov/src/main/java/org/bouncycastle/jcajce/spec/DHUParameterSpec.java",
                "@@ -0,0 +1,73 @@",
                "+package org.bouncycastle.jcajce.spec;",
                "+",
                "+import java.security.KeyPair;",
                "+import java.security.PrivateKey;",
                "+import java.security.PublicKey;",
                "+import java.security.spec.AlgorithmParameterSpec;",
                "+",
                "+import org.bouncycastle.util.Arrays;",
                "+",
                "+/**",
                "+ * Parameter spec to provide Diffie-Hellman Unified model keys and user keying material.",
                "+ */",
                "+public class DHUParameterSpec",
                "+    implements AlgorithmParameterSpec",
                "+{",
                "+    private final PublicKey ephemeralPublicKey;",
                "+    private final PrivateKey ephemeralPrivateKey;",
                "+    private final PublicKey otherPartyEphemeralKey;",
                "+    private final byte[] userKeyingMaterial;",
                "+",
                "+    public DHUParameterSpec(PublicKey ephemeralPublicKey, PrivateKey ephemeralPrivateKey, PublicKey otherPartyEphemeralKey, byte[] userKeyingMaterial)",
                "+    {",
                "+        this.ephemeralPublicKey = ephemeralPublicKey;",
                "+        this.ephemeralPrivateKey = ephemeralPrivateKey;",
                "+        this.otherPartyEphemeralKey = otherPartyEphemeralKey;",
                "+        this.userKeyingMaterial = Arrays.clone(userKeyingMaterial);",
                "+    }",
                "+",
                "+    public DHUParameterSpec(PublicKey ephemeralPublicKey, PrivateKey ephemeralPrivateKey, PublicKey otherPartyEphemeralKey)",
                "+    {",
                "+        this(ephemeralPublicKey, ephemeralPrivateKey, otherPartyEphemeralKey, null);",
                "+    }",
                "+",
                "+    public DHUParameterSpec(KeyPair ephemeralKeyPair, PublicKey otherPartyEphemeralKey, byte[] userKeyingMaterial)",
                "+    {",
                "+        this(ephemeralKeyPair.getPublic(), ephemeralKeyPair.getPrivate(), otherPartyEphemeralKey, userKeyingMaterial);",
                "+    }",
                "+",
                "+    public DHUParameterSpec(PrivateKey ephemeralPrivateKey, PublicKey otherPartyEphemeralKey, byte[] userKeyingMaterial)",
                "+    {",
                "+        this(null, ephemeralPrivateKey, otherPartyEphemeralKey, userKeyingMaterial);",
                "+    }",
                "+",
                "+    public DHUParameterSpec(KeyPair ephemeralKeyPair, PublicKey otherPartyEphemeralKey)",
                "+    {",
                "+        this(ephemeralKeyPair.getPublic(), ephemeralKeyPair.getPrivate(), otherPartyEphemeralKey, null);",
                "+    }",
                "+",
                "+    public DHUParameterSpec(PrivateKey ephemeralPrivateKey, PublicKey otherPartyEphemeralKey)",
                "+    {",
                "+        this(null, ephemeralPrivateKey, otherPartyEphemeralKey, null);",
                "+    }",
                "+",
                "+    public PrivateKey getEphemeralPrivateKey()",
                "+    {",
                "+        return ephemeralPrivateKey;",
                "+    }",
                "+",
                "+    public PublicKey getEphemeralPublicKey()",
                "+    {",
                "+        return ephemeralPublicKey;",
                "+    }",
                "+",
                "+    public PublicKey getOtherPartyEphemeralKey()",
                "+    {",
                "+        return otherPartyEphemeralKey;",
                "+    }",
                "+",
                "+    public byte[] getUserKeyingMaterial()",
                "+    {",
                "+        return Arrays.clone(userKeyingMaterial);",
                "+    }",
                "+}"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/crypto/agreement/DHUnifiedAgreement.java",
                "core/src/main/java/org/bouncycastle/crypto/agreement/ECDHCUnifiedAgreement.java",
                "core/src/main/java/org/bouncycastle/crypto/params/DHUPrivateParameters.java",
                "core/src/main/java/org/bouncycastle/crypto/params/DHUPublicParameters.java",
                "core/src/main/java/org/bouncycastle/crypto/params/ECDHUPrivateParameters.java",
                "core/src/main/java/org/bouncycastle/crypto/params/ECDHUPublicParameters.java",
                "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/EC.java",
                "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/ec/KeyAgreementSpi.java",
                "prov/src/main/java/org/bouncycastle/jcajce/spec/DHUParameterSpec.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "eb809f610a6fbbf710a614c5287851ac83512f04"
                ],
                [
                    "no-tag",
                    "75061724925c1de0014302aba2d31f55317ba22d"
                ]
            ],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "27d54c4177ab4ceb8c8aeb625712f0e957ada191",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1513318987,
            "hunks": 3,
            "message": "Restore Brainpool curve names to match RFC 5639 - lookup remains case-insensitive  - https://github.com/bcgit/bc-java/pull/268",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/asn1/teletrust/TeleTrusTNamedCurves.java b/core/src/main/java/org/bouncycastle/asn1/teletrust/TeleTrusTNamedCurves.java",
                "index 121cc2f22..360fab42d 100644",
                "--- a/core/src/main/java/org/bouncycastle/asn1/teletrust/TeleTrusTNamedCurves.java",
                "+++ b/core/src/main/java/org/bouncycastle/asn1/teletrust/TeleTrusTNamedCurves.java",
                "@@ -309,3 +309,3 @@ public class TeleTrusTNamedCurves",
                "     {",
                "-        objIds.put(name, oid);",
                "+        objIds.put(Strings.toLowerCase(name), oid);",
                "         names.put(oid, name);",
                "@@ -316,16 +316,16 @@ public class TeleTrusTNamedCurves",
                "     {",
                "-        defineCurve(\"brainpoolp160r1\", TeleTrusTObjectIdentifiers.brainpoolP160r1, brainpoolP160r1);",
                "-        defineCurve(\"brainpoolp160t1\", TeleTrusTObjectIdentifiers.brainpoolP160t1, brainpoolP160t1);",
                "-        defineCurve(\"brainpoolp192r1\", TeleTrusTObjectIdentifiers.brainpoolP192r1, brainpoolP192r1);",
                "-        defineCurve(\"brainpoolp192t1\", TeleTrusTObjectIdentifiers.brainpoolP192t1, brainpoolP192t1);",
                "-        defineCurve(\"brainpoolp224r1\", TeleTrusTObjectIdentifiers.brainpoolP224r1, brainpoolP224r1);",
                "-        defineCurve(\"brainpoolp224t1\", TeleTrusTObjectIdentifiers.brainpoolP224t1, brainpoolP224t1);",
                "-        defineCurve(\"brainpoolp256r1\", TeleTrusTObjectIdentifiers.brainpoolP256r1, brainpoolP256r1);",
                "-        defineCurve(\"brainpoolp256t1\", TeleTrusTObjectIdentifiers.brainpoolP256t1, brainpoolP256t1);",
                "-        defineCurve(\"brainpoolp320r1\", TeleTrusTObjectIdentifiers.brainpoolP320r1, brainpoolP320r1);",
                "-        defineCurve(\"brainpoolp320t1\", TeleTrusTObjectIdentifiers.brainpoolP320t1, brainpoolP320t1);",
                "-        defineCurve(\"brainpoolp384r1\", TeleTrusTObjectIdentifiers.brainpoolP384r1, brainpoolP384r1);",
                "-        defineCurve(\"brainpoolp384t1\", TeleTrusTObjectIdentifiers.brainpoolP384t1, brainpoolP384t1);",
                "-        defineCurve(\"brainpoolp512r1\", TeleTrusTObjectIdentifiers.brainpoolP512r1, brainpoolP512r1);",
                "-        defineCurve(\"brainpoolp512t1\", TeleTrusTObjectIdentifiers.brainpoolP512t1, brainpoolP512t1);",
                "+        defineCurve(\"brainpoolP160r1\", TeleTrusTObjectIdentifiers.brainpoolP160r1, brainpoolP160r1);",
                "+        defineCurve(\"brainpoolP160t1\", TeleTrusTObjectIdentifiers.brainpoolP160t1, brainpoolP160t1);",
                "+        defineCurve(\"brainpoolP192r1\", TeleTrusTObjectIdentifiers.brainpoolP192r1, brainpoolP192r1);",
                "+        defineCurve(\"brainpoolP192t1\", TeleTrusTObjectIdentifiers.brainpoolP192t1, brainpoolP192t1);",
                "+        defineCurve(\"brainpoolP224r1\", TeleTrusTObjectIdentifiers.brainpoolP224r1, brainpoolP224r1);",
                "+        defineCurve(\"brainpoolP224t1\", TeleTrusTObjectIdentifiers.brainpoolP224t1, brainpoolP224t1);",
                "+        defineCurve(\"brainpoolP256r1\", TeleTrusTObjectIdentifiers.brainpoolP256r1, brainpoolP256r1);",
                "+        defineCurve(\"brainpoolP256t1\", TeleTrusTObjectIdentifiers.brainpoolP256t1, brainpoolP256t1);",
                "+        defineCurve(\"brainpoolP320r1\", TeleTrusTObjectIdentifiers.brainpoolP320r1, brainpoolP320r1);",
                "+        defineCurve(\"brainpoolP320t1\", TeleTrusTObjectIdentifiers.brainpoolP320t1, brainpoolP320t1);",
                "+        defineCurve(\"brainpoolP384r1\", TeleTrusTObjectIdentifiers.brainpoolP384r1, brainpoolP384r1);",
                "+        defineCurve(\"brainpoolP384t1\", TeleTrusTObjectIdentifiers.brainpoolP384t1, brainpoolP384t1);",
                "+        defineCurve(\"brainpoolP512r1\", TeleTrusTObjectIdentifiers.brainpoolP512r1, brainpoolP512r1);",
                "+        defineCurve(\"brainpoolP512t1\", TeleTrusTObjectIdentifiers.brainpoolP512t1, brainpoolP512t1);",
                "     }",
                "@@ -391,3 +391,3 @@ public class TeleTrusTNamedCurves",
                "     {",
                "-        return objIds.keys();",
                "+        return names.elements();",
                "     }"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/asn1/teletrust/TeleTrusTNamedCurves.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "7b80878e290bf7ecfa7289098df283b78166facd"
                ],
                [
                    "no-tag",
                    "a2f0b7d35e7ae8afe5a97bf613ba31293733e7af"
                ]
            ],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "19e741c6d78804e733d109a78270f38f788b283d",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1517960038,
            "hunks": 2,
            "message": "Tweaked exception message",
            "diff": [
                "diff --git a/prov/src/main/java/org/bouncycastle/jce/provider/RFC3280CertPathUtilities.java b/prov/src/main/java/org/bouncycastle/jce/provider/RFC3280CertPathUtilities.java",
                "index d67a77ee3..efa8855c0 100644",
                "--- a/prov/src/main/java/org/bouncycastle/jce/provider/RFC3280CertPathUtilities.java",
                "+++ b/prov/src/main/java/org/bouncycastle/jce/provider/RFC3280CertPathUtilities.java",
                "@@ -61,3 +61,2 @@ import org.bouncycastle.jcajce.PKIXExtendedParameters;",
                " import org.bouncycastle.jcajce.util.JcaJceHelper;",
                "-import org.bouncycastle.jce.PrincipalUtil;",
                " import org.bouncycastle.jce.exception.ExtCertPathValidatorException;",
                "@@ -2423,4 +2422,3 @@ class RFC3280CertPathUtilities",
                "             {",
                "-                throw new ExtCertPathValidatorException(\"Additional certificate path checker failed.\", e, certPath,",
                "-                    index);",
                "+                throw new ExtCertPathValidatorException(e.getMessage(), e, certPath, index);",
                "             }"
            ],
            "changed_files": [
                "prov/src/main/java/org/bouncycastle/jce/provider/RFC3280CertPathUtilities.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "5e4a5f177295819f837ed353eb9cc07e07b40fa7"
                ],
                [
                    "no-tag",
                    "b3dd527e13201a257bad440bea03288a85d75f96"
                ]
            ],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ed9c5fc65f06cda907238cab61dea9414c477193",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1515398897,
            "hunks": 4,
            "message": "Remove unused getSetting* methods",
            "diff": [
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/PropertyUtils.java b/tls/src/main/java/org/bouncycastle/jsse/provider/PropertyUtils.java",
                "index cff57308e..c26d0487b 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/provider/PropertyUtils.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/PropertyUtils.java",
                "@@ -8,4 +8,2 @@ import java.util.logging.Logger;",
                "-import org.bouncycastle.util.Strings;",
                "-",
                " /**",
                "@@ -18,3 +16,3 @@ class PropertyUtils",
                "-    static String getSetting(final String propertyName)",
                "+    static String getSecurityProperty(final String propertyName)",
                "     {",
                "@@ -24,9 +22,3 @@ class PropertyUtils",
                "             {",
                "-                String value = Security.getProperty(propertyName);",
                "-                if (value != null)",
                "-                {",
                "-                    return value;",
                "-                }",
                "-",
                "-                return System.getProperty(propertyName);",
                "+                return Security.getProperty(propertyName);",
                "             }",
                "@@ -35,36 +27,2 @@ class PropertyUtils",
                "-    static String getSetting(final String propertyName, final String unsetValue)",
                "-    {",
                "-        String value = getSetting(propertyName);",
                "-",
                "-        if (value == null)",
                "-        {",
                "-            return unsetValue;",
                "-        }",
                "-",
                "-        return value;",
                "-    }",
                "-",
                "-    static String getSettingLowerCase(final String propertyName)",
                "-    {",
                "-        String value = getSetting(propertyName);",
                "-        if (value != null)",
                "-        {",
                "-            return Strings.toLowerCase(value);",
                "-        }",
                "-",
                "-        return null;",
                "-    }",
                "-",
                "-    static String getSettingLowerCase(final String propertyName, String unsetValue)",
                "-    {",
                "-        String value = getSetting(propertyName, unsetValue);",
                "-        if (value != null)",
                "-        {",
                "-            return Strings.toLowerCase(value);",
                "-        }",
                "-",
                "-        return null;",
                "-    }",
                "-",
                "     static String getSystemProperty(final String propertyName)"
            ],
            "changed_files": [
                "tls/src/main/java/org/bouncycastle/jsse/provider/PropertyUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "5deb50989ed968324d0323e6587d86bf1fe0964f"
                ],
                [
                    "no-tag",
                    "cfe5c29b4f0522bafe88d14985fd65f321fd7e08"
                ]
            ],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e04641bb0fcc27b0b2841282d92fd2642802bf22",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1517147096,
            "hunks": 42,
            "message": "JSSE: Support resumable handshakes for blocking sockets",
            "diff": [
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketDirect.java b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketDirect.java",
                "index a5c2c8908..9b24118b0 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketDirect.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketDirect.java",
                "@@ -9,2 +9,4 @@ import java.security.cert.CertificateException;",
                " import java.security.cert.X509Certificate;",
                "+import java.util.logging.Level;",
                "+import java.util.logging.Logger;",
                "@@ -24,2 +26,4 @@ class ProvSSLSocketDirect",
                " {",
                "+    private static Logger LOG = Logger.getLogger(ProvSSLSocketDirect.class.getName());",
                "+",
                "     protected final AppDataInput appDataIn = new AppDataInput();",
                "@@ -34,3 +38,2 @@ class ProvSSLSocketDirect",
                "-    protected boolean initialHandshakeBegun = false;",
                "     protected TlsProtocol protocol = null;",
                "@@ -127,7 +130,7 @@ class ProvSSLSocketDirect",
                "         {",
                "-            handshakeIfNecessary();",
                "+            handshakeIfNecessary(false);",
                "         }",
                "-        catch (Exception e)",
                "+        catch (IOException e)",
                "         {",
                "-            // TODO[jsse] Logging?",
                "+            LOG.log(Level.FINE, \"Failed to establish connection\", e);",
                "         }",
                "@@ -265,3 +268,3 @@ class ProvSSLSocketDirect",
                "-        if (initialHandshakeBegun)",
                "+        if (protocol != null)",
                "         {",
                "@@ -284,10 +287,8 @@ class ProvSSLSocketDirect",
                "     {",
                "-        if (initialHandshakeBegun)",
                "-        {",
                "-            throw new UnsupportedOperationException(\"Renegotiation not supported\");",
                "-        }",
                "-",
                "-        this.initialHandshakeBegun = true;",
                "+        startHandshake(true);",
                "+    }",
                "-        try",
                "+    protected void startHandshake(boolean resumable) throws IOException",
                "+    {",
                "+        if (protocol == null)",
                "         {",
                "@@ -295,3 +296,3 @@ class ProvSSLSocketDirect",
                "             // TODO[jsse] Allocate this.handshakeSession and update it during handshake",
                "-    ",
                "+",
                "             InputStream input = super.getInputStream();",
                "@@ -302,7 +303,8 @@ class ProvSSLSocketDirect",
                "                 TlsClientProtocol clientProtocol = new ProvTlsClientProtocol(input, output, socketCloser);",
                "+                clientProtocol.setResumableHandshake(resumable);",
                "                 this.protocol = clientProtocol;",
                "-    ",
                "+",
                "                 ProvTlsClient client = new ProvTlsClient(this, sslParameters.copy());",
                "                 this.protocolPeer = client;",
                "-    ",
                "+",
                "                 clientProtocol.connect(client);",
                "@@ -312,7 +314,8 @@ class ProvSSLSocketDirect",
                "                 TlsServerProtocol serverProtocol = new ProvTlsServerProtocol(input, output, socketCloser);",
                "+                serverProtocol.setResumableHandshake(resumable);",
                "                 this.protocol = serverProtocol;",
                "-    ",
                "+",
                "                 ProvTlsServer server = new ProvTlsServer(this, sslParameters.copy());",
                "                 this.protocolPeer = server;",
                "-    ",
                "+",
                "                 serverProtocol.accept(server);",
                "@@ -320,5 +323,10 @@ class ProvSSLSocketDirect",
                "         }",
                "-        finally",
                "+        else if (protocol.isHandshaking())",
                "         {",
                "-            this.handshakeSession = null;",
                "+            protocol.setResumableHandshake(resumable);",
                "+            protocol.resumeHandshake();",
                "+        }",
                "+        else",
                "+        {",
                "+            throw new UnsupportedOperationException(\"Renegotiation not supported\");",
                "         }",
                "@@ -389,7 +397,7 @@ class ProvSSLSocketDirect",
                "-    synchronized void handshakeIfNecessary() throws IOException",
                "+    synchronized void handshakeIfNecessary(boolean resumable) throws IOException",
                "     {",
                "-        if (!initialHandshakeBegun)",
                "+        if (protocol == null || protocol.isHandshaking())",
                "         {",
                "-            startHandshake();",
                "+            startHandshake(resumable);",
                "         }",
                "@@ -419,3 +427,3 @@ class ProvSSLSocketDirect",
                "         {",
                "-            handshakeIfNecessary();",
                "+            handshakeIfNecessary(true);",
                "@@ -434,3 +442,3 @@ class ProvSSLSocketDirect",
                "-            handshakeIfNecessary();",
                "+            handshakeIfNecessary(true);",
                "             return protocol.readApplicationData(b, off, len);",
                "@@ -462,3 +470,3 @@ class ProvSSLSocketDirect",
                "         {",
                "-            handshakeIfNecessary();",
                "+            handshakeIfNecessary(true);",
                "@@ -473,3 +481,3 @@ class ProvSSLSocketDirect",
                "             {",
                "-                handshakeIfNecessary();",
                "+                handshakeIfNecessary(true);",
                "                 protocol.writeApplicationData(b, off, len);",
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketWrap.java b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketWrap.java",
                "index 52907d0e9..32722ba6d 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketWrap.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketWrap.java",
                "@@ -13,2 +13,4 @@ import java.security.cert.CertificateException;",
                " import java.security.cert.X509Certificate;",
                "+import java.util.logging.Level;",
                "+import java.util.logging.Logger;",
                "@@ -28,2 +30,4 @@ class ProvSSLSocketWrap",
                " {",
                "+    private static Logger LOG = Logger.getLogger(ProvSSLSocketWrap.class.getName());",
                "+",
                "     private static Socket checkSocket(Socket s) throws SocketException",
                "@@ -55,3 +59,2 @@ class ProvSSLSocketWrap",
                "-    protected boolean initialHandshakeBegun = false;",
                "     protected TlsProtocol protocol = null;",
                "@@ -153,3 +156,3 @@ class ProvSSLSocketWrap",
                "         {",
                "-            handshakeIfNecessary();",
                "+            handshakeIfNecessary(false);",
                "         }",
                "@@ -157,3 +160,3 @@ class ProvSSLSocketWrap",
                "         {",
                "-            // TODO[jsse] Logging?",
                "+            LOG.log(Level.FINE, \"Failed to establish connection\", e);",
                "         }",
                "@@ -459,3 +462,3 @@ class ProvSSLSocketWrap",
                "-        if (initialHandshakeBegun)",
                "+        if (protocol != null)",
                "         {",
                "@@ -478,10 +481,8 @@ class ProvSSLSocketWrap",
                "     {",
                "-        if (initialHandshakeBegun)",
                "-        {",
                "-            throw new UnsupportedOperationException(\"Renegotiation not supported\");",
                "-        }",
                "-",
                "-        this.initialHandshakeBegun = true;",
                "+        startHandshake(true);",
                "+    }",
                "-        try",
                "+    protected void startHandshake(boolean resumable) throws IOException",
                "+    {",
                "+        if (protocol == null)",
                "         {",
                "@@ -501,2 +502,3 @@ class ProvSSLSocketWrap",
                "                 TlsClientProtocol clientProtocol = new ProvTlsClientProtocol(input, output, socketCloser);",
                "+                clientProtocol.setResumableHandshake(resumable);",
                "                 this.protocol = clientProtocol;",
                "@@ -511,2 +513,3 @@ class ProvSSLSocketWrap",
                "                 TlsServerProtocol serverProtocol = new ProvTlsServerProtocol(input, output, socketCloser);",
                "+                serverProtocol.setResumableHandshake(resumable);",
                "                 this.protocol = serverProtocol;",
                "@@ -519,5 +522,10 @@ class ProvSSLSocketWrap",
                "         }",
                "-        finally",
                "+        else if (protocol.isHandshaking())",
                "+        {",
                "+            protocol.setResumableHandshake(resumable);",
                "+            protocol.resumeHandshake();",
                "+        }",
                "+        else",
                "         {",
                "-            this.handshakeSession = null;",
                "+            throw new UnsupportedOperationException(\"Renegotiation not supported\");",
                "         }",
                "@@ -587,7 +595,7 @@ class ProvSSLSocketWrap",
                "-    synchronized void handshakeIfNecessary() throws IOException",
                "+    synchronized void handshakeIfNecessary(boolean resumable) throws IOException",
                "     {",
                "-        if (!initialHandshakeBegun)",
                "+        if (protocol == null || protocol.isHandshaking())",
                "         {",
                "-            startHandshake();",
                "+            startHandshake(resumable);",
                "         }",
                "@@ -617,3 +625,3 @@ class ProvSSLSocketWrap",
                "         {",
                "-            handshakeIfNecessary();",
                "+            handshakeIfNecessary(true);",
                "@@ -632,3 +640,3 @@ class ProvSSLSocketWrap",
                "-            handshakeIfNecessary();",
                "+            handshakeIfNecessary(true);",
                "             return protocol.readApplicationData(b, off, len);",
                "@@ -660,3 +668,3 @@ class ProvSSLSocketWrap",
                "         {",
                "-            handshakeIfNecessary();",
                "+            handshakeIfNecessary(true);",
                "@@ -671,3 +679,3 @@ class ProvSSLSocketWrap",
                "             {",
                "-                handshakeIfNecessary();",
                "+                handshakeIfNecessary(true);",
                "                 protocol.writeApplicationData(b, off, len);"
            ],
            "changed_files": [
                "tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketDirect.java",
                "tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSocketWrap.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "5660e9d2bbb0b41977898e4ebf97fbabe513054d"
                ],
                [
                    "no-tag",
                    "4d18fdd11420d76c2b1aa2937038e1c5add71b15"
                ]
            ],
            "tags": [
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9454b852430b13d5df79a83495d486d0e1fe9e55",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1511367351,
            "hunks": 23,
            "message": "Rewrite ProvSSLEngine.wrap to be record-aligned for app data - avoids any internal buffering of app data b/w calls - never produce any output when returning BUFFER_OVERFLOW",
            "diff": [
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLEngine.java b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLEngine.java",
                "index b637b1327..d52416e87 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLEngine.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLEngine.java",
                "@@ -344,3 +344,3 @@ class ProvSSLEngine",
                "                 }",
                "-                else if (getTotalRemaining(dsts) < (long)preview.getApplicationDataLimit())",
                "+                else if (hasInsufficientSpace(dsts, offset, length, preview.getApplicationDataLimit()))",
                "                 {",
                "@@ -359,3 +359,3 @@ class ProvSSLEngine",
                "                     {",
                "-                        ByteBuffer dst = dsts[dstIndex];",
                "+                        ByteBuffer dst = dsts[offset + dstIndex];",
                "                         int count = Math.min(dst.remaining(), appDataAvailable);",
                "@@ -471,32 +471,52 @@ class ProvSSLEngine",
                "             }",
                "-            else",
                "+            else if (protocol.getAvailableOutputBytes() > 0)",
                "             {",
                "                 /*",
                "-                 * Limit the app data that we will process in one call",
                "+                 * Handle any buffered handshake data fully before sending application data.",
                "                  */",
                "-                int srcLimit = ProvSSLSessionImpl.NULL_SESSION.getApplicationBufferSize();",
                "-",
                "-                for (int srcIndex = 0; srcIndex < length && srcLimit > 0; ++srcIndex)",
                "+            }",
                "+            else",
                "+            {",
                "+                try",
                "                 {",
                "-                    ByteBuffer src = srcs[srcIndex];",
                "-                    int count = Math.min(src.remaining(), srcLimit);",
                "-                    if (count > 0)",
                "+                    /*",
                "+                     * Generate at most one maximum-sized application data record per call.",
                "+                     */",
                "+                    int srcRemaining = getTotalRemaining(srcs, offset, length, protocol.getApplicationDataLimit());",
                "+                    if (srcRemaining > 0)",
                "                     {",
                "-                        byte[] input = new byte[count];",
                "-                        src.get(input);",
                "-        ",
                "-                        try",
                "+                        RecordPreview preview = protocol.previewOutputRecord(srcRemaining);",
                "+",
                "+                        int srcLimit = preview.getApplicationDataLimit();",
                "+                        int dstLimit = preview.getRecordSize();",
                "+",
                "+                        if (dst.remaining() < dstLimit)",
                "                         {",
                "-                            protocol.writeApplicationData(input, 0, count);",
                "+                            resultStatus = Status.BUFFER_OVERFLOW;",
                "                         }",
                "-                        catch (IOException e)",
                "+                        else",
                "                         {",
                "-                            // TODO[jsse] Throw a subclass of SSLException?",
                "-                            throw new SSLException(e);",
                "+                            for (int srcIndex = 0; srcIndex < length && srcLimit > 0; ++srcIndex)",
                "+                            {",
                "+                                ByteBuffer src = srcs[offset + srcIndex];",
                "+                                int count = Math.min(src.remaining(), srcLimit);",
                "+                                if (count > 0)",
                "+                                {",
                "+                                    byte[] input = new byte[count];",
                "+                                    src.get(input);",
                "+    ",
                "+                                    protocol.writeApplicationData(input, 0, count);",
                "+    ",
                "+                                    bytesConsumed += count;",
                "+                                    srcLimit -= count;",
                "+                                }",
                "+                            }",
                "                         }",
                "-",
                "-                        bytesConsumed += count;",
                "-                        srcLimit -= count;",
                "                     }",
                "                 }",
                "+                catch (IOException e)",
                "+                {",
                "+                    // TODO[jsse] Throw a subclass of SSLException?",
                "+                    throw new SSLException(e);",
                "+                }",
                "             }",
                "@@ -522,4 +542,3 @@ class ProvSSLEngine",
                "             }",
                "-",
                "-            if (outputAvailable > 0)",
                "+            else",
                "             {",
                "@@ -630,8 +649,14 @@ class ProvSSLEngine",
                "-    private long getTotalRemaining(ByteBuffer[] buffers)",
                "+    private int getTotalRemaining(ByteBuffer[] bufs, int off, int len, int limit)",
                "     {",
                "-        long result = 0;",
                "-        for (ByteBuffer buffer : buffers)",
                "+        int result = 0;",
                "+        for (int i = 0; i < len; ++i)",
                "         {",
                "-            result += buffer.remaining();",
                "+            ByteBuffer buf = bufs[off + i];",
                "+            int next = buf.remaining();",
                "+            if (next >= (limit - result))",
                "+            {",
                "+                return limit;",
                "+            }",
                "+            result += next;",
                "         }",
                "@@ -639,2 +664,7 @@ class ProvSSLEngine",
                "     }",
                "+",
                "+    private boolean hasInsufficientSpace(ByteBuffer[] dsts, int off, int len, int amount)",
                "+    {",
                "+        return getTotalRemaining(dsts, off, len, amount) < amount;",
                "+    }",
                " }",
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSessionImpl.java b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSessionImpl.java",
                "index 2c85ce218..151e9c87b 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSessionImpl.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSessionImpl.java",
                "@@ -181,3 +181,8 @@ class ProvSSLSessionImpl",
                "         // Header size + Fragment length limit + Compression expansion + Cipher expansion",
                "-        return RecordFormat.FRAGMENT_OFFSET + (1 << 14) + 1024 + 1024; ",
                "+//        return RecordFormat.FRAGMENT_OFFSET + (1 << 14) + 1024 + 1024;",
                "+",
                "+        /*",
                "+         * Worst case accounts for possible application data splitting (before TLS 1.1)",
                "+         */",
                "+        return (1 << 14) + 1 + 2 * (RecordFormat.FRAGMENT_OFFSET + 1024 + 1024);",
                "     }",
                "diff --git a/tls/src/main/java/org/bouncycastle/tls/RecordPreview.java b/tls/src/main/java/org/bouncycastle/tls/RecordPreview.java",
                "index e1cb742e2..33e6a12c4 100644",
                "--- a/tls/src/main/java/org/bouncycastle/tls/RecordPreview.java",
                "+++ b/tls/src/main/java/org/bouncycastle/tls/RecordPreview.java",
                "@@ -7,2 +7,9 @@ public final class RecordPreview",
                "+    static RecordPreview combine(RecordPreview a, RecordPreview b)",
                "+    {",
                "+        return new RecordPreview(",
                "+            a.getRecordSize() + b.getRecordSize(),",
                "+            a.getApplicationDataLimit() + b.getApplicationDataLimit());",
                "+    }",
                "+",
                "     RecordPreview(int recordSize, int applicationDataLimit)",
                "diff --git a/tls/src/main/java/org/bouncycastle/tls/RecordStream.java b/tls/src/main/java/org/bouncycastle/tls/RecordStream.java",
                "index 11102d49f..f30795919 100644",
                "--- a/tls/src/main/java/org/bouncycastle/tls/RecordStream.java",
                "+++ b/tls/src/main/java/org/bouncycastle/tls/RecordStream.java",
                "@@ -194,2 +194,17 @@ class RecordStream",
                "+    RecordPreview previewOutputRecord(int applicationDataSize)",
                "+    {",
                "+        int applicationDataLimit = Math.max(0, Math.min(getPlaintextLimit(), applicationDataSize));",
                "+",
                "+        int recordSize = applicationDataLimit;",
                "+        if (writeCompression.getClass() != TlsNullCompression.class)",
                "+        {",
                "+            recordSize += 1024;",
                "+        }",
                "+",
                "+        recordSize = writeCipher.getCiphertextLimit(recordSize) + RecordFormat.FRAGMENT_OFFSET;",
                "+",
                "+        return new RecordPreview(recordSize, applicationDataLimit);",
                "+    }",
                "+",
                "     boolean readFullRecord(byte[] record)",
                "diff --git a/tls/src/main/java/org/bouncycastle/tls/TlsProtocol.java b/tls/src/main/java/org/bouncycastle/tls/TlsProtocol.java",
                "index 9b37f0c27..6ce5aa37d 100644",
                "--- a/tls/src/main/java/org/bouncycastle/tls/TlsProtocol.java",
                "+++ b/tls/src/main/java/org/bouncycastle/tls/TlsProtocol.java",
                "@@ -842,3 +842,3 @@ public abstract class TlsProtocol",
                "         {",
                "-            throw new IllegalStateException(\"Cannot use previewInputRecord() in blocking mode! Use getInputStream() instead.\");",
                "+            throw new IllegalStateException(\"Cannot use previewInputRecord() in blocking mode!\");",
                "         }",
                "@@ -857,2 +857,53 @@ public abstract class TlsProtocol",
                "+    public RecordPreview previewOutputRecord(int applicationDataSize) throws IOException",
                "+    {",
                "+        if (blocking)",
                "+        {",
                "+            throw new IllegalStateException(\"Cannot use previewOutputRecord() in blocking mode!\");",
                "+        }",
                "+        if (outputBuffer.getBuffer().available() != 0)",
                "+        {",
                "+            throw new IllegalStateException(\"Can only use previewOutputRecord() for record-aligned output.\");",
                "+        }",
                "+",
                "+        if (closed)",
                "+        {",
                "+            throw new IOException(\"Connection is closed, cannot produce any more output\");",
                "+        }",
                "+",
                "+        if (applicationDataSize < 1)",
                "+        {",
                "+            return new RecordPreview(0, 0);",
                "+        }",
                "+",
                "+        if (this.appDataSplitEnabled)",
                "+        {",
                "+            switch (appDataSplitMode)",
                "+            {",
                "+                case ADS_MODE_0_N_FIRSTONLY:",
                "+                case ADS_MODE_0_N:",
                "+                {",
                "+                    RecordPreview a = recordStream.previewOutputRecord(0);",
                "+                    RecordPreview b = recordStream.previewOutputRecord(applicationDataSize);",
                "+                    return RecordPreview.combine(a, b);",
                "+                }",
                "+                case ADS_MODE_1_Nsub1:",
                "+                default:",
                "+                {",
                "+                    RecordPreview a = recordStream.previewOutputRecord(1);",
                "+                    if (applicationDataSize > 1)",
                "+                    {",
                "+                        RecordPreview b = recordStream.previewOutputRecord(applicationDataSize - 1);",
                "+                        a = RecordPreview.combine(a, b);",
                "+                    }",
                "+                    return a;",
                "+                }",
                "+            }",
                "+        }",
                "+        else",
                "+        {",
                "+            return recordStream.previewOutputRecord(applicationDataSize);",
                "+        }",
                "+    }",
                "+",
                "     /**",
                "@@ -930,2 +981,7 @@ public abstract class TlsProtocol",
                "+    public int getApplicationDataLimit()",
                "+    {",
                "+        return recordStream.getPlaintextLimit();",
                "+    }",
                "+",
                "     /**"
            ],
            "changed_files": [
                "tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLEngine.java",
                "tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSessionImpl.java",
                "tls/src/main/java/org/bouncycastle/tls/RecordPreview.java",
                "tls/src/main/java/org/bouncycastle/tls/RecordStream.java",
                "tls/src/main/java/org/bouncycastle/tls/TlsProtocol.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "9741147d65308b5b46eb208732eb2c6902b76314"
                ],
                [
                    "no-tag",
                    "615ab75e13b19c08bcd6dedda32efefd4ea7fb7f"
                ]
            ],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "714d7897ed3d65fd33df369f4a02ce1e5de31c74",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1517130890,
            "hunks": 1,
            "message": "Remove obsolete comment",
            "diff": [
                "diff --git a/tls/src/main/java/org/bouncycastle/tls/RecordStream.java b/tls/src/main/java/org/bouncycastle/tls/RecordStream.java",
                "index afee589b1..05dcc9d7b 100644",
                "--- a/tls/src/main/java/org/bouncycastle/tls/RecordStream.java",
                "+++ b/tls/src/main/java/org/bouncycastle/tls/RecordStream.java",
                "@@ -534,11 +534,2 @@ class RecordStream",
                "             {",
                "-                /*",
                "-                 * TODO[tls] It might be necessary to catch/rethrow InterruptedIOException here if",
                "-                 * there were any instance of that class where bytesTransferred != 0 .",
                "-                 * ",
                "-                 * Unfortunately, this would be complicated because rethrowing our own exception",
                "-                 * type would break at least some client code, e.g. in Apache's",
                "-                 * httpcomponents-core-4.4.9, BHttpConnectionBase.isStale depends on the exception",
                "-                 * type being SocketTimeoutException (or a subclass).",
                "-                 */",
                "                 try"
            ],
            "changed_files": [
                "tls/src/main/java/org/bouncycastle/tls/RecordStream.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "75a6635023102197d9bb281ab90cdf2000774c54"
                ],
                [
                    "no-tag",
                    "22bc5fa409d55cb4890460e398019dba0da32f0f"
                ]
            ],
            "tags": [
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "155c7950d5dab44120f0175342243fd3ca5cb021",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1515398655,
            "hunks": 5,
            "message": "Refactoring in DESEngine",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/engines/DESEngine.java b/core/src/main/java/org/bouncycastle/crypto/engines/DESEngine.java",
                "index 6980fd085..58ea618ba 100644",
                "--- a/core/src/main/java/org/bouncycastle/crypto/engines/DESEngine.java",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/engines/DESEngine.java",
                "@@ -7,2 +7,3 @@ import org.bouncycastle.crypto.OutputLengthException;",
                " import org.bouncycastle.crypto.params.KeyParameter;",
                "+import org.bouncycastle.util.Pack;",
                "@@ -409,11 +410,4 @@ public class DESEngine",
                "-        left     = (in[inOff + 0] & 0xff) << 24;",
                "-        left    |= (in[inOff + 1] & 0xff) << 16;",
                "-        left    |= (in[inOff + 2] & 0xff) << 8;",
                "-        left    |= (in[inOff + 3] & 0xff);",
                "-",
                "-        right     = (in[inOff + 4] & 0xff) << 24;",
                "-        right    |= (in[inOff + 5] & 0xff) << 16;",
                "-        right    |= (in[inOff + 6] & 0xff) << 8;",
                "-        right    |= (in[inOff + 7] & 0xff);",
                "+        left = Pack.bigEndianToInt(in, inOff);",
                "+        right = Pack.bigEndianToInt(in, inOff + 4);",
                "@@ -431,3 +425,3 @@ public class DESEngine",
                "         right ^= (work << 8);",
                "-        right = ((right << 1) | ((right >>> 31) & 1)) & 0xffffffff;",
                "+        right = (right << 1) | (right >>> 31);",
                "         work = (left ^ right) & 0xaaaaaaaa;",
                "@@ -435,3 +429,3 @@ public class DESEngine",
                "         right ^= work;",
                "-        left = ((left << 1) | ((left >>> 31) & 1)) & 0xffffffff;",
                "+        left = (left << 1) | (left >>> 31);",
                "@@ -485,10 +479,4 @@ public class DESEngine",
                "-        out[outOff + 0] = (byte)((right >>> 24) & 0xff);",
                "-        out[outOff + 1] = (byte)((right >>> 16) & 0xff);",
                "-        out[outOff + 2] = (byte)((right >>>  8) & 0xff);",
                "-        out[outOff + 3] = (byte)(right         & 0xff);",
                "-        out[outOff + 4] = (byte)((left >>> 24) & 0xff);",
                "-        out[outOff + 5] = (byte)((left >>> 16) & 0xff);",
                "-        out[outOff + 6] = (byte)((left >>>  8) & 0xff);",
                "-        out[outOff + 7] = (byte)(left         & 0xff);",
                "+        Pack.intToBigEndian(right, out, outOff);",
                "+        Pack.intToBigEndian(left, out, outOff + 4);",
                "     }"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/crypto/engines/DESEngine.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "19940470746f78b48f216f5f12b76945bccd159c"
                ],
                [
                    "no-tag",
                    "c219c10888951687af0922a997896fbb01bb8fb7"
                ]
            ],
            "tags": [
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b4d7279129231dc6fd9a3c0ee841033a4ebe70d1",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1515992340,
            "hunks": 2,
            "message": "Remove unused field",
            "diff": [
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLParameters.java b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLParameters.java",
                "index 78107ee57..41156e324 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLParameters.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLParameters.java",
                "@@ -12,4 +12,2 @@ class ProvSSLParameters",
                " {",
                "-    static final boolean hasSslParameters;",
                "-",
                "     private static <T> List<T> copyList(Collection<T> list)",
                "@@ -27,17 +25,2 @@ class ProvSSLParameters",
                "-    static",
                "-    {",
                "-        Class<?> clazz = null;",
                "-        try",
                "-        {",
                "-            clazz = JsseUtils.loadClass(ProvSSLParameters.class,\"javax.net.ssl.SSLParameters\");",
                "-        }",
                "-        catch (Exception e)",
                "-        {",
                "-            clazz = null;",
                "-        }",
                "-",
                "-        hasSslParameters = (clazz != null);",
                "-    }",
                "-",
                "     private String[] cipherSuites;"
            ],
            "changed_files": [
                "tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLParameters.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "310cc6544e1335f5725f279b23b5bd3f1d403350"
                ],
                [
                    "no-tag",
                    "8cf7d94e87acf0f084de0de45ccc6307e171b181"
                ]
            ],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a6bfdf05b7011cdce28bd1e80d872a252575d8a1",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1520050133,
            "hunks": 6,
            "message": "added main on outer wrapper in deserialisation.",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSUtil.java b/core/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSUtil.java",
                "index 3a707f455..ea8fa64aa 100644",
                "--- a/core/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSUtil.java",
                "+++ b/core/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSUtil.java",
                "@@ -5,4 +5,7 @@ import java.io.ByteArrayOutputStream;",
                " import java.io.IOException;",
                "+import java.io.InputStream;",
                "+import java.io.InvalidClassException;",
                " import java.io.ObjectInputStream;",
                " import java.io.ObjectOutputStream;",
                "+import java.io.ObjectStreamClass;",
                "@@ -323,3 +326,3 @@ public class XMSSUtil",
                "-    public static Object deserialize(byte[] data, Class clazz)",
                "+    public static Object deserialize(byte[] data, final Class clazz)",
                "         throws IOException, ClassNotFoundException",
                "@@ -327,3 +330,4 @@ public class XMSSUtil",
                "         ByteArrayInputStream in = new ByteArrayInputStream(data);",
                "-        ObjectInputStream is = new ObjectInputStream(in);",
                "+        ObjectInputStream is = new CheckingStream(clazz, in);",
                "+",
                "         Object obj = is.readObject();",
                "@@ -334,2 +338,3 @@ public class XMSSUtil",
                "         }",
                "+        // you'd hope this would always succeed!",
                "         if (clazz.isInstance(obj))",
                "@@ -375,2 +380,36 @@ public class XMSSUtil",
                "     }",
                "+",
                "+    private static class CheckingStream",
                "+       extends ObjectInputStream",
                "+    {",
                "+        private final Class mainClass;",
                "+        private boolean found = false;",
                "+",
                "+        CheckingStream(Class mainClass, InputStream in)",
                "+            throws IOException",
                "+        {",
                "+            super(in);",
                "+",
                "+            this.mainClass = mainClass;",
                "+        }",
                "+",
                "+        protected Class<?> resolveClass(ObjectStreamClass desc)",
                "+            throws IOException,",
                "+            ClassNotFoundException",
                "+        {",
                "+            if (!found)",
                "+            {",
                "+                if (!desc.getName().equals(mainClass.getName()))",
                "+                {",
                "+                    throw new InvalidClassException(",
                "+                        \"unexpected class: \", desc.getName());",
                "+                }",
                "+                else",
                "+                {",
                "+                    found = true;",
                "+                }",
                "+            }",
                "+            return super.resolveClass(desc);",
                "+        }",
                "+    }",
                " }"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSUtil.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "cb1e7101d36cccae2d4b8a012f6bdcbca1dca8dc"
                ],
                [
                    "no-tag",
                    "d4517b68775bd1b388e2e7a091d37126c312d106"
                ]
            ],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "73967f52916d148910e585dfaa0c23c901b4396d",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1514432750,
            "hunks": 22,
            "message": "1.1/1.2/1.3 updates",
            "diff": [
                "diff --git a/ant/jdk13.xml b/ant/jdk13.xml",
                "index 6ec73508c..a21330678 100644",
                "--- a/ant/jdk13.xml",
                "+++ b/ant/jdk13.xml",
                "@@ -57,2 +57,3 @@",
                "             <fileset dir=\"prov/src/main/java\">",
                "+                <exclude name=\"**/BCFKSStoreParameter.java\" />",
                "                 <exclude name=\"**/ec/ECUtils.java\" />",
                "diff --git a/build1-1 b/build1-1",
                "index 386e8bdd3..26246a38a 100644",
                "--- a/build1-1",
                "+++ b/build1-1",
                "@@ -90,2 +90,3 @@ find $jdk11src -name \"*.java\" -exec scripts/useseccert.sh \\{\\} \\;",
                "     rm -rf org/bouncycastle/jcajce/provider/test",
                "+    rm org/bouncycastle/jcajce/BCFKSStoreParameter.java",
                "     rm -rf org/bouncycastle/jce/provider/test/ECDSA5Test.java",
                "@@ -180,2 +181,3 @@ find $jdk11src -name \"*.java\" -exec scripts/useseccert.sh \\{\\} \\;",
                "     rm -rf org/bouncycastle/asn1/test/CMCStatusTest.java",
                "+    rm -rf org/bouncycastle/jce/provider/test/SM2SignatureTest.java",
                "@@ -269,3 +271,6 @@ javac -d ../../../classes -classpath ../../../classes:../../../src:$JDK11PATH/li",
                " javac -d ../../../classes -classpath ../../../classes:../../../src:$JDK11PATH/lib/classes.zip */d*/*.java ",
                "-javac -d ../../../classes -classpath ../../../classes:../../../src:$JDK11PATH/lib/classes.zip */e*/*.java ",
                "+javac -d ../../../classes -classpath ../../../classes:../../../src:$JDK11PATH/lib/classes.zip a*/e*/*.java ",
                "+javac -d ../../../classes -classpath ../../../classes:../../../src:$JDK11PATH/lib/classes.zip c*/e*/*.java ",
                "+javac -d ../../../classes -classpath ../../../classes:../../../src:$JDK11PATH/lib/classes.zip m*/e*/*.java ",
                "+javac -d ../../../classes -classpath ../../../classes:../../../src:$JDK11PATH/lib/classes.zip u*/e*/*.java ",
                " javac -d ../../../classes -classpath ../../../classes:../../../src:$JDK11PATH/lib/classes.zip */g*/*.java ",
                "diff --git a/build1-2 b/build1-2",
                "index e6b5d8f93..50a4a7f97 100644",
                "--- a/build1-2",
                "+++ b/build1-2",
                "@@ -90,2 +90,4 @@ find $jdk12src -name \"*.java\" -exec scripts/usejcecert.sh \\{\\} \\;",
                "     rm -rf org/bouncycastle/jcajce/provider/test",
                "+    rm -rf org/bouncycastle/math/ec/rfc7748/test",
                "+    rm org/bouncycastle/jcajce/BCFKSStoreParameter.java",
                "     rm -rf org/bouncycastle/jce/provider/asymmetric/ec/EC5*.java",
                "@@ -354,3 +356,2 @@ then",
                "     (cd src/org/bouncycastle/jcajce/provider; javac -d ../../../../../classes -classpath ../../../../../classes:../../../../../src a*/*.java )",
                "-    (cd src/org/bouncycastle/jcajce/provider; javac -d ../../../../../classes -classpath ../../../../../classes:../../../../../src b*/*.java )",
                "     (cd src/org/bouncycastle/jcajce/provider; javac -d ../../../../../classes -classpath ../../../../../classes:../../../../../src [cis]*/*.java )",
                "@@ -358,5 +359,8 @@ then",
                "     (cd src/org/bouncycastle; javac -d ../../../classes -classpath ../../../classes:../../../src *.java a*/*.java a*/*/*.java a*/*/*/*.java )",
                "-    (cd src/org/bouncycastle; javac -d ../../../classes -classpath ../../../classes:../../../src *.java [bci]*/*.java [bci]*/*/*.java [bci]*/*/*/*.java )",
                "-    (cd src/org/bouncycastle; javac -d ../../../classes -classpath ../../../classes:../../../src [jmop]*/*.java [jmop]*/*/*.java [jmop]*/*/*/*.java [jmop]*/*/*/*/*.java)",
                "-    (cd src/org/bouncycastle; javac -d ../../../classes -classpath ../../../classes:../../../src [tuvx]*/*.java [tuvx]*/*/*.java [tuvx]*/*/*/*.java)",
                "+    (cd src/org/bouncycastle; javac -d ../../../classes -classpath ../../../classes:../../../src [bc]*/*.java [bc]*/*/*.java [bc]*/*/*/*.java )",
                "+    (cd src/org/bouncycastle; javac -d ../../../classes -classpath ../../../classes:../../../src [j]*/*.java [j]*/*/*.java [j]*/*/*/*.java [j]*/*/*/*/*.java)",
                "+    (cd src/org/bouncycastle; javac -d ../../../classes -classpath ../../../classes:../../../src [mop]*/*.java [mop]*/*/*.java [mop]*/*/*/*.java [mop]*/*/*/*/*.java)",
                "+    (cd src/org/bouncycastle; javac -d ../../../classes -classpath ../../../classes:../../../src [tu]*/*.java [tu]*/*/*.java [tu]*/*/*/*.java)",
                "+    (cd src/org/bouncycastle; javac -d ../../../classes -classpath ../../../classes:../../../src [x]*/*/*.java)",
                "+    (cd src/org/bouncycastle; javac -d ../../../classes -classpath ../../../classes:../../../src [x]*/*.java)",
                "diff --git a/prov/src/main/jdk1.1/org/bouncycastle/jce/provider/BouncyCastleProvider.java b/prov/src/main/jdk1.1/org/bouncycastle/jce/provider/BouncyCastleProvider.java",
                "index df413b75c..b1241c48a 100644",
                "--- a/prov/src/main/jdk1.1/org/bouncycastle/jce/provider/BouncyCastleProvider.java",
                "+++ b/prov/src/main/jdk1.1/org/bouncycastle/jce/provider/BouncyCastleProvider.java",
                "@@ -60,3 +60,3 @@ public final class BouncyCastleProvider extends Provider",
                "     {",
                "-        \"PBEPBKDF2\", \"PBEPKCS12\"",
                "+        \"PBEPBKDF1\", \"PBEPBKDF2\", \"PBEPKCS12\", \"TLSKDF\", \"SCRYPT\"",
                "     };",
                "@@ -65,3 +65,3 @@ public final class BouncyCastleProvider extends Provider",
                "     {",
                "-        \"SipHash\"",
                "+        \"SipHash\", \"Poly1305\"",
                "     };",
                "@@ -70,6 +70,6 @@ public final class BouncyCastleProvider extends Provider",
                "     {",
                "-        \"AES\", \"ARC4\", \"Blowfish\", \"Camellia\", \"CAST5\", \"CAST6\", \"ChaCha\", \"DES\", \"DESede\",",
                "+        \"AES\", \"ARC4\", \"ARIA\", \"Blowfish\", \"Camellia\", \"CAST5\", \"CAST6\", \"ChaCha\", \"DES\", \"DESede\",",
                "         \"GOST28147\", \"Grainv1\", \"Grain128\", \"HC128\", \"HC256\", \"IDEA\", \"Noekeon\", \"RC2\", \"RC5\",",
                "         \"RC6\", \"Rijndael\", \"Salsa20\", \"SEED\", \"Serpent\", \"Shacal2\", \"Skipjack\", \"SM4\", \"TEA\", \"Twofish\", \"Threefish\",",
                "-        \"VMPC\", \"VMPCKSA3\", \"XTEA\", \"XSalsa20\", \"OpenSSLPBKDF\", \"DSTU7624\"",
                "+        \"VMPC\", \"VMPCKSA3\", \"XTEA\", \"XSalsa20\", \"OpenSSLPBKDF\", \"DSTU7624\", \"GOST3412_2015\"",
                "     };",
                "@@ -100,3 +100,3 @@ public final class BouncyCastleProvider extends Provider",
                "         \"GOST3411\", \"Keccak\", \"MD2\", \"MD4\", \"MD5\", \"SHA1\", \"RIPEMD128\", \"RIPEMD160\", \"RIPEMD256\", \"RIPEMD320\", \"SHA224\",",
                "-        \"SHA256\", \"SHA384\", \"SHA512\", \"SHA3\", \"Skein\", \"SM3\", \"Tiger\", \"Whirlpool\", \"Blake2b\", \"DSTU7564\"",
                "+        \"SHA256\", \"SHA384\", \"SHA512\", \"SHA3\", \"Skein\", \"SM3\", \"Tiger\", \"Whirlpool\", \"Blake2b\", \"Blake2s\", \"DSTU7564\"",
                "     };",
                "diff --git a/prov/src/main/jdk1.3/org/bouncycastle/jcajce/provider/symmetric/util/BaseBlockCipher.java b/prov/src/main/jdk1.3/org/bouncycastle/jcajce/provider/symmetric/util/BaseBlockCipher.java",
                "index 5dfa5f1b2..d838998c0 100644",
                "--- a/prov/src/main/jdk1.3/org/bouncycastle/jcajce/provider/symmetric/util/BaseBlockCipher.java",
                "+++ b/prov/src/main/jdk1.3/org/bouncycastle/jcajce/provider/symmetric/util/BaseBlockCipher.java",
                "@@ -167,2 +167,10 @@ public class BaseBlockCipher",
                "         int ivLength)",
                "+    {",
                "+        this(engine, true, ivLength);",
                "+    }",
                "+",
                "+    protected BaseBlockCipher(",
                "+        org.bouncycastle.crypto.BlockCipher engine,",
                "+        boolean fixedIv,",
                "+        int ivLength)",
                "     {",
                "@@ -170,2 +178,3 @@ public class BaseBlockCipher",
                "+        this.fixedIv = fixedIv;",
                "         this.cipher = new BufferedGenericBlockCipher(engine);",
                "@@ -177,2 +186,10 @@ public class BaseBlockCipher",
                "         int ivLength)",
                "+    {",
                "+        this(engine, true, ivLength);",
                "+    }",
                "+",
                "+    protected BaseBlockCipher(",
                "+        BufferedBlockCipher engine,",
                "+        boolean fixedIv,",
                "+        int ivLength)",
                "     {",
                "@@ -181,2 +198,3 @@ public class BaseBlockCipher",
                "         this.cipher = new BufferedGenericBlockCipher(engine);",
                "+        this.fixedIv = fixedIv;",
                "         this.ivLength = ivLength / 8;",
                "@@ -371,3 +389,3 @@ public class BaseBlockCipher",
                "         {",
                "-            ivLength = 13; // CCM nonce 7..13 bytes",
                "+            ivLength = 12; // CCM nonce 7..13 bytes",
                "             if (baseEngine instanceof DSTU7624Engine)",
                "diff --git a/prov/src/main/jdk1.4/org/bouncycastle/jce/provider/BouncyCastleProvider.java b/prov/src/main/jdk1.4/org/bouncycastle/jce/provider/BouncyCastleProvider.java",
                "index fa93b73f0..b56ab1954 100644",
                "--- a/prov/src/main/jdk1.4/org/bouncycastle/jce/provider/BouncyCastleProvider.java",
                "+++ b/prov/src/main/jdk1.4/org/bouncycastle/jce/provider/BouncyCastleProvider.java",
                "@@ -66,3 +66,3 @@ public final class BouncyCastleProvider extends Provider",
                "     {",
                "-        \"PBEPBKDF1\", \"PBEPBKDF2\", \"PBEPKCS12\", \"TLSKDF\"",
                "+        \"PBEPBKDF1\", \"PBEPBKDF2\", \"PBEPKCS12\", \"TLSKDF\", \"SCRYPT\"",
                "     };",
                "@@ -79,3 +79,3 @@ public final class BouncyCastleProvider extends Provider",
                "         \"RC6\", \"Rijndael\", \"Salsa20\", \"SEED\", \"Serpent\", \"Shacal2\", \"Skipjack\", \"SM4\", \"TEA\", \"Twofish\", \"Threefish\",",
                "-        \"VMPC\", \"VMPCKSA3\", \"XTEA\", \"XSalsa20\", \"OpenSSLPBKDF\", \"DSTU7624\"",
                "+        \"VMPC\", \"VMPCKSA3\", \"XTEA\", \"XSalsa20\", \"OpenSSLPBKDF\", \"DSTU7624\", \"GOST3412_2015\"",
                "     };",
                "@@ -106,3 +106,3 @@ public final class BouncyCastleProvider extends Provider",
                "         \"GOST3411\", \"Keccak\", \"MD2\", \"MD4\", \"MD5\", \"SHA1\", \"RIPEMD128\", \"RIPEMD160\", \"RIPEMD256\", \"RIPEMD320\", \"SHA224\",",
                "-        \"SHA256\", \"SHA384\", \"SHA512\", \"SHA3\", \"Skein\", \"SM3\", \"Tiger\", \"Whirlpool\", \"Blake2b\", \"DSTU7564\"",
                "+        \"SHA256\", \"SHA384\", \"SHA512\", \"SHA3\", \"Skein\", \"SM3\", \"Tiger\", \"Whirlpool\", \"Blake2b\", \"Blake2s\", \"DSTU7564\"",
                "     };",
                "diff --git a/scripts/jdk1.1ed.sh b/scripts/jdk1.1ed.sh",
                "index c830b14e6..4d120e5f4 100644",
                "--- a/scripts/jdk1.1ed.sh",
                "+++ b/scripts/jdk1.1ed.sh",
                "@@ -246 +246,31 @@ q",
                " %",
                "+",
                "+ed org/bouncycastle/asn1/misc/ScryptParams.java <<%",
                "+g/private.*final.*;/s/final//",
                "+w",
                "+q",
                "+%",
                "+",
                "+ed org/bouncycastle/crypto/modes/G3413CFBBlockCipher.java <<%",
                "+g/private.*final.*;/s/final//",
                "+w",
                "+q",
                "+%",
                "+",
                "+ed org/bouncycastle/crypto/modes/G3413CTRBlockCipher.java <<%",
                "+g/private.*final.*;/s/final//",
                "+w",
                "+q",
                "+%",
                "+",
                "+ed org/bouncycastle/crypto/modes/KGCMBlockCipher.java <<%",
                "+g/private.*final.*;/s/final//",
                "+w",
                "+q",
                "+%",
                "+",
                "+ed org/bouncycastle/jcajce/spec/DHUParameterSpec.java <<%",
                "+g/private.*final.*;/s/final//",
                "+w",
                "+q",
                "+%",
                "diff --git a/scripts/jdk1.2ed.sh b/scripts/jdk1.2ed.sh",
                "index 2a4b16462..c91591e02 100644",
                "--- a/scripts/jdk1.2ed.sh",
                "+++ b/scripts/jdk1.2ed.sh",
                "@@ -38 +38,23 @@ q",
                " %",
                "+",
                "+ed org/bouncycastle/crypto/util/PBKDF2Config.java <<%",
                "+g/private final/s/final//",
                "+w",
                "+q",
                "+%",
                "+",
                "+ed org/bouncycastle/crypto/util/ScryptConfig.java <<%",
                "+g/private final/s/final//",
                "+w",
                "+q",
                "+%",
                "+",
                "+ed org/bouncycastle/pqc/crypto/newhope/NHOtherInfoGenerator.java <<%",
                "+g/private final/s/final//",
                "+g/protected final/s/final//",
                "+g/(getPublicKey(/s//(NHOtherInfoGenerator.getPublicKey(/",
                "+g/return getEncod/s//return NHOtherInfoGenerator.getEncod/",
                "+w",
                "+q",
                "+%",
                "+"
            ],
            "changed_files": [
                "ant/jdk13.xml",
                "build1-1",
                "build1-2",
                "prov/src/main/jdk1.1/org/bouncycastle/jce/provider/BouncyCastleProvider.java",
                "prov/src/main/jdk1.3/org/bouncycastle/jcajce/provider/symmetric/util/BaseBlockCipher.java",
                "prov/src/main/jdk1.4/org/bouncycastle/jce/provider/BouncyCastleProvider.java",
                "scripts/jdk1.1ed.sh",
                "scripts/jdk1.2ed.sh"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "7dba676762ed91c979ad7ad6bd56ac4f1203f16c"
                ],
                [
                    "no-tag",
                    "6f63fefc74b4e8720a6c3e5943aa3b1334d983ad"
                ]
            ],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a296efb39cc428845a32ea9295c64d6fe4419124",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1517144216,
            "hunks": 1,
            "message": "TLS: Fail connection on InterruptedIOException for blocking writes",
            "diff": [
                "diff --git a/tls/src/main/java/org/bouncycastle/tls/RecordStream.java b/tls/src/main/java/org/bouncycastle/tls/RecordStream.java",
                "index 05dcc9d7b..c1670e621 100644",
                "--- a/tls/src/main/java/org/bouncycastle/tls/RecordStream.java",
                "+++ b/tls/src/main/java/org/bouncycastle/tls/RecordStream.java",
                "@@ -422,3 +422,12 @@ class RecordStream",
                "         System.arraycopy(ciphertext, 0, record, RecordFormat.FRAGMENT_OFFSET, ciphertext.length);",
                "-        output.write(record);",
                "+",
                "+        try",
                "+        {",
                "+            output.write(record);",
                "+        }",
                "+        catch (InterruptedIOException e)",
                "+        {",
                "+            throw new TlsFatalAlert(AlertDescription.internal_error, e);",
                "+        }",
                "+",
                "         output.flush();"
            ],
            "changed_files": [
                "tls/src/main/java/org/bouncycastle/tls/RecordStream.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "8e58b0884d935f08dbc7936ce6a7e10c0eb0a203"
                ],
                [
                    "no-tag",
                    "fdec36963b38a232653ce0d1bab508d99908fa81"
                ]
            ],
            "tags": [
                "r1v60"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6524e335639d8f7a674778768e59d2449f26f014",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1514438533,
            "hunks": 2,
            "message": "removed nested exception usage, later...",
            "diff": [
                "diff --git a/prov/src/main/java/org/bouncycastle/jcajce/provider/keystore/bcfks/BcFKSKeyStoreSpi.java b/prov/src/main/java/org/bouncycastle/jcajce/provider/keystore/bcfks/BcFKSKeyStoreSpi.java",
                "index eb028843e..ca6679450 100644",
                "--- a/prov/src/main/java/org/bouncycastle/jcajce/provider/keystore/bcfks/BcFKSKeyStoreSpi.java",
                "+++ b/prov/src/main/java/org/bouncycastle/jcajce/provider/keystore/bcfks/BcFKSKeyStoreSpi.java",
                "@@ -935,3 +935,3 @@ class BcFKSKeyStoreSpi",
                "         {",
                "-            throw new IOException(e.getMessage(), e.getCause());",
                "+            throw new IOException(e.getMessage());",
                "         }",
                "diff --git a/prov/src/main/java/org/bouncycastle/jcajce/provider/keystore/pkcs12/PKCS12KeyStoreSpi.java b/prov/src/main/java/org/bouncycastle/jcajce/provider/keystore/pkcs12/PKCS12KeyStoreSpi.java",
                "index 79b153d99..f40f97243 100644",
                "--- a/prov/src/main/java/org/bouncycastle/jcajce/provider/keystore/pkcs12/PKCS12KeyStoreSpi.java",
                "+++ b/prov/src/main/java/org/bouncycastle/jcajce/provider/keystore/pkcs12/PKCS12KeyStoreSpi.java",
                "@@ -806,3 +806,3 @@ public class PKCS12KeyStoreSpi",
                "         {",
                "-            throw new IOException(e.getMessage(), e);",
                "+            throw new IOException(e.getMessage());",
                "         }"
            ],
            "changed_files": [
                "prov/src/main/java/org/bouncycastle/jcajce/provider/keystore/bcfks/BcFKSKeyStoreSpi.java",
                "prov/src/main/java/org/bouncycastle/jcajce/provider/keystore/pkcs12/PKCS12KeyStoreSpi.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "b6329a75c7808e72b7936c8816bd94f73f8a026d"
                ],
                [
                    "no-tag",
                    "8db26ec40a333b41de414bcaf9f8f813fc1db6ac"
                ]
            ],
            "tags": [
                "r1v60"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, keystore, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d08c247437590da6d414e65589f3b03dbf53a5a6",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1515400033,
            "hunks": 1,
            "message": "Remove redundant trim()",
            "diff": [
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/SupportedGroups.java b/tls/src/main/java/org/bouncycastle/jsse/provider/SupportedGroups.java",
                "index 6bd919a57..ff6fcc390 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/provider/SupportedGroups.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/SupportedGroups.java",
                "@@ -76,3 +76,3 @@ abstract class SupportedGroups",
                "-            int namedGroup = NamedGroup.getByName(name.trim());",
                "+            int namedGroup = NamedGroup.getByName(name);",
                "             if (namedGroup < 0)"
            ],
            "changed_files": [
                "tls/src/main/java/org/bouncycastle/jsse/provider/SupportedGroups.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "094707e4b205e5301e431b4443405a9f24d2a25e"
                ],
                [
                    "no-tag",
                    "efad5260d37b532e0d96ec9c627212b12c1eea12"
                ]
            ],
            "tags": [
                "r1v60"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "1fd166c65cb5547f5537ecf63e202c66e86eac4e",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1513317328,
            "hunks": 8,
            "message": "Perf. opts. in KeccakDigest - fully inline KeccakPermutation",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/digests/KeccakDigest.java b/core/src/main/java/org/bouncycastle/crypto/digests/KeccakDigest.java",
                "index 8c9b8ab42..e14c5c408 100644",
                "--- a/core/src/main/java/org/bouncycastle/crypto/digests/KeccakDigest.java",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/digests/KeccakDigest.java",
                "@@ -14,27 +14,8 @@ public class KeccakDigest",
                " {",
                "-    private static long[] KeccakRoundConstants = new long[]{",
                "-            0x0000000000000001L,",
                "-            0x0000000000008082L,",
                "-            0x800000000000808aL,",
                "-            0x8000000080008000L,",
                "-            0x000000000000808bL,",
                "-            0x0000000080000001L,",
                "-            0x8000000080008081L,",
                "-            0x8000000000008009L,",
                "-            0x000000000000008aL,",
                "-            0x0000000000000088L,",
                "-            0x0000000080008009L,",
                "-            0x000000008000000aL,",
                "-            0x000000008000808bL,",
                "-            0x800000000000008bL,",
                "-            0x8000000000008089L,",
                "-            0x8000000000008003L,",
                "-            0x8000000000008002L,",
                "-            0x8000000000000080L,",
                "-            0x000000000000800aL,",
                "-            0x800000008000000aL,",
                "-            0x8000000080008081L,",
                "-            0x8000000000008080L,",
                "-            0x0000000080000001L,",
                "-            0x8000000080008008L};",
                "+    private static long[] KeccakRoundConstants = new long[]{ 0x0000000000000001L, 0x0000000000008082L,",
                "+        0x800000000000808aL, 0x8000000080008000L, 0x000000000000808bL, 0x0000000080000001L, 0x8000000080008081L,",
                "+        0x8000000000008009L, 0x000000000000008aL, 0x0000000000000088L, 0x0000000080008009L, 0x000000008000000aL,",
                "+        0x000000008000808bL, 0x800000000000008bL, 0x8000000000008089L, 0x8000000000008003L, 0x8000000000008002L,",
                "+        0x8000000000000080L, 0x000000000000800aL, 0x800000008000000aL, 0x8000000080008081L, 0x8000000000008080L,",
                "+        0x0000000080000001L, 0x8000000080008008L };",
                "@@ -258,3 +239,2 @@ public class KeccakDigest",
                "-//        displayIntermediateValues.displayText(1, \"--- Switching to squeezing phase ---\");",
                "         KeccakExtract();",
                "@@ -262,3 +242,2 @@ public class KeccakDigest",
                "-//        displayIntermediateValues.displayBytes(1, \"Block available for squeezing\", dataQueue, bitsInQueue / 8);",
                "         squeezing = true;",
                "@@ -285,3 +264,2 @@ public class KeccakDigest",
                "                 bitsInQueue = rate;",
                "-//                displayIntermediateValues.displayBytes(1, \"Block available for squeezing\", dataQueue, bitsAvailableForSqueezing / 8);",
                "             }",
                "@@ -313,3 +291,9 @@ public class KeccakDigest",
                "     {",
                "-//        displayIntermediateValues.displayStateAs64bitWords(3, \"Same, with lanes as 64-bit words\", state);",
                "+        long[] A = state;",
                "+",
                "+        long a00 = A[ 0], a01 = A[ 1], a02 = A[ 2], a03 = A[ 3], a04 = A[ 4];",
                "+        long a05 = A[ 5], a06 = A[ 6], a07 = A[ 7], a08 = A[ 8], a09 = A[ 9];",
                "+        long a10 = A[10], a11 = A[11], a12 = A[12], a13 = A[13], a14 = A[14];",
                "+        long a15 = A[15], a16 = A[16], a17 = A[17], a18 = A[18], a19 = A[19];",
                "+        long a20 = A[20], a21 = A[21], a22 = A[22], a23 = A[23], a24 = A[24];",
                "@@ -317,178 +301,99 @@ public class KeccakDigest",
                "         {",
                "-//            displayIntermediateValues.displayRoundNumber(3, i);",
                "-",
                "-            theta(state);",
                "-//            displayIntermediateValues.displayStateAs64bitWords(3, \"After theta\", state);",
                "-",
                "-            rho(state);",
                "-//            displayIntermediateValues.displayStateAs64bitWords(3, \"After rho\", state);",
                "-",
                "-            pi(state);",
                "-//            displayIntermediateValues.displayStateAs64bitWords(3, \"After pi\", state);",
                "-",
                "-            chi(state);",
                "-//            displayIntermediateValues.displayStateAs64bitWords(3, \"After chi\", state);",
                "-",
                "-            state[0] ^= KeccakRoundConstants[i];",
                "-//            iota(state, i);",
                "-//            displayIntermediateValues.displayStateAs64bitWords(3, \"After iota\", state);",
                "+            // theta",
                "+            long c0 = a00 ^ a05 ^ a10 ^ a15 ^ a20;",
                "+            long c1 = a01 ^ a06 ^ a11 ^ a16 ^ a21;",
                "+            long c2 = a02 ^ a07 ^ a12 ^ a17 ^ a22;",
                "+            long c3 = a03 ^ a08 ^ a13 ^ a18 ^ a23;",
                "+            long c4 = a04 ^ a09 ^ a14 ^ a19 ^ a24;",
                "+",
                "+            long d1 = (c1 << 1 | c1 >>> -1) ^ c4;",
                "+            long d2 = (c2 << 1 | c2 >>> -1) ^ c0;",
                "+            long d3 = (c3 << 1 | c3 >>> -1) ^ c1;",
                "+            long d4 = (c4 << 1 | c4 >>> -1) ^ c2;",
                "+            long d0 = (c0 << 1 | c0 >>> -1) ^ c3;",
                "+",
                "+            a00 ^= d1; a05 ^= d1; a10 ^= d1; a15 ^= d1; a20 ^= d1;",
                "+            a01 ^= d2; a06 ^= d2; a11 ^= d2; a16 ^= d2; a21 ^= d2;",
                "+            a02 ^= d3; a07 ^= d3; a12 ^= d3; a17 ^= d3; a22 ^= d3;",
                "+            a03 ^= d4; a08 ^= d4; a13 ^= d4; a18 ^= d4; a23 ^= d4;",
                "+            a04 ^= d0; a09 ^= d0; a14 ^= d0; a19 ^= d0; a24 ^= d0;",
                "+",
                "+            // rho/pi",
                "+            c1  = a01 <<  1 | a01 >>> 63;",
                "+            a01 = a06 << 44 | a06 >>> 20;",
                "+            a06 = a09 << 20 | a09 >>> 44;",
                "+            a09 = a22 << 61 | a22 >>>  3;",
                "+            a22 = a14 << 39 | a14 >>> 25;",
                "+            a14 = a20 << 18 | a20 >>> 46;",
                "+            a20 = a02 << 62 | a02 >>>  2;",
                "+            a02 = a12 << 43 | a12 >>> 21;",
                "+            a12 = a13 << 25 | a13 >>> 39;",
                "+            a13 = a19 <<  8 | a19 >>> 56;",
                "+            a19 = a23 << 56 | a23 >>>  8;",
                "+            a23 = a15 << 41 | a15 >>> 23;",
                "+            a15 = a04 << 27 | a04 >>> 37;",
                "+            a04 = a24 << 14 | a24 >>> 50;",
                "+            a24 = a21 <<  2 | a21 >>> 62;",
                "+            a21 = a08 << 55 | a08 >>>  9;",
                "+            a08 = a16 << 45 | a16 >>> 19;",
                "+            a16 = a05 << 36 | a05 >>> 28;",
                "+            a05 = a03 << 28 | a03 >>> 36;",
                "+            a03 = a18 << 21 | a18 >>> 43;",
                "+            a18 = a17 << 15 | a17 >>> 49;",
                "+            a17 = a11 << 10 | a11 >>> 54;",
                "+            a11 = a07 <<  6 | a07 >>> 58;",
                "+            a07 = a10 <<  3 | a10 >>> 61;",
                "+            a10 = c1;",
                "+",
                "+            // chi",
                "+            c0 = a00 ^ (~a01 & a02);",
                "+            c1 = a01 ^ (~a02 & a03);",
                "+            a02 ^= ~a03 & a04;",
                "+            a03 ^= ~a04 & a00;",
                "+            a04 ^= ~a00 & a01;",
                "+            a00 = c0;",
                "+            a01 = c1;",
                "+",
                "+            c0 = a05 ^ (~a06 & a07);",
                "+            c1 = a06 ^ (~a07 & a08);",
                "+            a07 ^= ~a08 & a09;",
                "+            a08 ^= ~a09 & a05;",
                "+            a09 ^= ~a05 & a06;",
                "+            a05 = c0;",
                "+            a06 = c1;",
                "+",
                "+            c0 = a10 ^ (~a11 & a12);",
                "+            c1 = a11 ^ (~a12 & a13);",
                "+            a12 ^= ~a13 & a14;",
                "+            a13 ^= ~a14 & a10;",
                "+            a14 ^= ~a10 & a11;",
                "+            a10 = c0;",
                "+            a11 = c1;",
                "+",
                "+            c0 = a15 ^ (~a16 & a17);",
                "+            c1 = a16 ^ (~a17 & a18);",
                "+            a17 ^= ~a18 & a19;",
                "+            a18 ^= ~a19 & a15;",
                "+            a19 ^= ~a15 & a16;",
                "+            a15 = c0;",
                "+            a16 = c1;",
                "+",
                "+            c0 = a20 ^ (~a21 & a22);",
                "+            c1 = a21 ^ (~a22 & a23);",
                "+            a22 ^= ~a23 & a24;",
                "+            a23 ^= ~a24 & a20;",
                "+            a24 ^= ~a20 & a21;",
                "+            a20 = c0;",
                "+            a21 = c1;",
                "+",
                "+            // iota",
                "+            a00 ^= KeccakRoundConstants[i];",
                "         }",
                "+        ",
                "+        A[ 0] = a00; A[ 1] = a01; A[ 2] = a02; A[ 3] = a03; A[ 4] = a04;",
                "+        A[ 5] = a05; A[ 6] = a06; A[ 7] = a07; A[ 8] = a08; A[ 9] = a09;",
                "+        A[10] = a10; A[11] = a11; A[12] = a12; A[13] = a13; A[14] = a14;",
                "+        A[15] = a15; A[16] = a16; A[17] = a17; A[18] = a18; A[19] = a19;",
                "+        A[20] = a20; A[21] = a21; A[22] = a22; A[23] = a23; A[24] = a24;",
                "     }",
                "-",
                "-    private static long leftRotate(long v, int r)",
                "-    {",
                "-        return (v << r) | (v >>> -r);",
                "-    }",
                "-",
                "-    private static void theta(long[] A)",
                "-    {",
                "-        long C0 = A[0 + 0] ^ A[0 + 5] ^ A[0 + 10] ^ A[0 + 15] ^ A[0 + 20];",
                "-        long C1 = A[1 + 0] ^ A[1 + 5] ^ A[1 + 10] ^ A[1 + 15] ^ A[1 + 20];",
                "-        long C2 = A[2 + 0] ^ A[2 + 5] ^ A[2 + 10] ^ A[2 + 15] ^ A[2 + 20];",
                "-        long C3 = A[3 + 0] ^ A[3 + 5] ^ A[3 + 10] ^ A[3 + 15] ^ A[3 + 20];",
                "-        long C4 = A[4 + 0] ^ A[4 + 5] ^ A[4 + 10] ^ A[4 + 15] ^ A[4 + 20];",
                "-",
                "-        long dX = leftRotate(C1, 1) ^ C4;",
                "-",
                "-        A[0] ^= dX;",
                "-        A[5] ^= dX;",
                "-        A[10] ^= dX;",
                "-        A[15] ^= dX;",
                "-        A[20] ^= dX;",
                "-",
                "-        dX = leftRotate(C2, 1) ^ C0;",
                "-",
                "-        A[1] ^= dX;",
                "-        A[6] ^= dX;",
                "-        A[11] ^= dX;",
                "-        A[16] ^= dX;",
                "-        A[21] ^= dX;",
                "-",
                "-        dX = leftRotate(C3, 1) ^ C1;",
                "-",
                "-        A[2] ^= dX;",
                "-        A[7] ^= dX;",
                "-        A[12] ^= dX;",
                "-        A[17] ^= dX;",
                "-        A[22] ^= dX;",
                "-",
                "-        dX = leftRotate(C4, 1) ^ C2;",
                "-",
                "-        A[3] ^= dX;",
                "-        A[8] ^= dX;",
                "-        A[13] ^= dX;",
                "-        A[18] ^= dX;",
                "-        A[23] ^= dX;",
                "-",
                "-        dX = leftRotate(C0, 1) ^ C3;",
                "-",
                "-        A[4] ^= dX;",
                "-        A[9] ^= dX;",
                "-        A[14] ^= dX;",
                "-        A[19] ^= dX;",
                "-        A[24] ^= dX;",
                "-    }",
                "-",
                "-    private static void rho(long[] A)",
                "-    {",
                "-        A[1]  = A[ 1] <<  1 | A[ 1] >>> 63;",
                "-        A[2]  = A[ 2] << 62 | A[ 2] >>>  2;",
                "-        A[3]  = A[ 3] << 28 | A[ 3] >>> 36;",
                "-        A[4]  = A[ 4] << 27 | A[ 4] >>> 37;",
                "-        A[5]  = A[ 5] << 36 | A[ 5] >>> 28;",
                "-        A[6]  = A[ 6] << 44 | A[ 6] >>> 20;",
                "-        A[7]  = A[ 7] <<  6 | A[ 7] >>> 58;",
                "-        A[8]  = A[ 8] << 55 | A[ 8] >>>  9;",
                "-        A[9]  = A[ 9] << 20 | A[ 9] >>> 44;",
                "-        A[10] = A[10] <<  3 | A[10] >>> 61;",
                "-        A[11] = A[11] << 10 | A[11] >>> 54;",
                "-        A[12] = A[12] << 43 | A[12] >>> 21;",
                "-        A[13] = A[13] << 25 | A[13] >>> 39;",
                "-        A[14] = A[14] << 39 | A[14] >>> 25;",
                "-        A[15] = A[15] << 41 | A[15] >>> 23;",
                "-        A[16] = A[16] << 45 | A[16] >>> 19;",
                "-        A[17] = A[17] << 15 | A[17] >>> 49;",
                "-        A[18] = A[18] << 21 | A[18] >>> 43;",
                "-        A[19] = A[19] <<  8 | A[19] >>> 56;",
                "-        A[20] = A[20] << 18 | A[20] >>> 46;",
                "-        A[21] = A[21] <<  2 | A[21] >>> 62;",
                "-        A[22] = A[22] << 61 | A[22] >>>  3;",
                "-        A[23] = A[23] << 56 | A[23] >>>  8;",
                "-        A[24] = A[24] << 14 | A[24] >>> 50;",
                "-    }",
                "-",
                "-    private static void pi(long[] A)",
                "-    {",
                "-        long a1 = A[1];",
                "-        A[1] = A[6];",
                "-        A[6] = A[9];",
                "-        A[9] = A[22];",
                "-        A[22] = A[14];",
                "-        A[14] = A[20];",
                "-        A[20] = A[2];",
                "-        A[2] = A[12];",
                "-        A[12] = A[13];",
                "-        A[13] = A[19];",
                "-        A[19] = A[23];",
                "-        A[23] = A[15];",
                "-        A[15] = A[4];",
                "-        A[4] = A[24];",
                "-        A[24] = A[21];",
                "-        A[21] = A[8];",
                "-        A[8] = A[16];",
                "-        A[16] = A[5];",
                "-        A[5] = A[3];",
                "-        A[3] = A[18];",
                "-        A[18] = A[17];",
                "-        A[17] = A[11];",
                "-        A[11] = A[7];",
                "-        A[7] = A[10];",
                "-        A[10] = a1;",
                "-    }",
                "-",
                "-    private static void chi(long[] A)",
                "-    {",
                "-        long chiC0, chiC1;",
                "-",
                "-        chiC0 = A[0] ^ ((~A[1]) & A[2]);",
                "-        chiC1 = A[1] ^ ((~A[2]) & A[3]);",
                "-        A[2] ^= ((~A[3]) & A[4]);",
                "-        A[3] ^= ((~A[4]) & A[0]);",
                "-        A[4] ^= ((~A[0]) & A[1]);",
                "-        A[0] = chiC0;",
                "-        A[1] = chiC1;",
                "-",
                "-        chiC0 = A[5] ^ ((~A[6]) & A[7]);",
                "-        chiC1 = A[6] ^ ((~A[7]) & A[8]);",
                "-        A[7] ^= ((~A[8]) & A[9]);",
                "-        A[8] ^= ((~A[9]) & A[5]);",
                "-        A[9] ^= ((~A[5]) & A[6]);",
                "-        A[5] = chiC0;",
                "-        A[6] = chiC1;",
                "-",
                "-        chiC0 = A[10] ^ ((~A[11]) & A[12]);",
                "-        chiC1 = A[11] ^ ((~A[12]) & A[13]);",
                "-        A[12] ^= ((~A[13]) & A[14]);",
                "-        A[13] ^= ((~A[14]) & A[10]);",
                "-        A[14] ^= ((~A[10]) & A[11]);",
                "-        A[10] = chiC0;",
                "-        A[11] = chiC1;",
                "-",
                "-        chiC0 = A[15] ^ ((~A[16]) & A[17]);",
                "-        chiC1 = A[16] ^ ((~A[17]) & A[18]);",
                "-        A[17] ^= ((~A[18]) & A[19]);",
                "-        A[18] ^= ((~A[19]) & A[15]);",
                "-        A[19] ^= ((~A[15]) & A[16]);",
                "-        A[15] = chiC0;",
                "-        A[16] = chiC1;",
                "-",
                "-        chiC0 = A[20] ^ ((~A[21]) & A[22]);",
                "-        chiC1 = A[21] ^ ((~A[22]) & A[23]);",
                "-        A[22] ^= ((~A[23]) & A[24]);",
                "-        A[23] ^= ((~A[24]) & A[20]);",
                "-        A[24] ^= ((~A[20]) & A[21]);",
                "-        A[20] = chiC0;",
                "-        A[21] = chiC1;",
                "-    }",
                "-",
                " }"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/crypto/digests/KeccakDigest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "a7b39695705e973f531d5ef3a352b03a6e2a4cd8"
                ],
                [
                    "no-tag",
                    "d21c2fe83133a7a7f62b3ede0260a8934a31a1ec"
                ]
            ],
            "tags": [
                "r1v60"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "19b4a9e46bf1fe7a2b34f8db27a5192d56b470f9",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1515228905,
            "hunks": 5,
            "message": "Rename named constant and use for all instances",
            "diff": [
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/SupportedGroups.java b/tls/src/main/java/org/bouncycastle/jsse/provider/SupportedGroups.java",
                "index e0c8faa2a..6bd919a57 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/provider/SupportedGroups.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/SupportedGroups.java",
                "@@ -16,3 +16,3 @@ abstract class SupportedGroups",
                "-    private static final String PROPERTY_NAME = \"jdk.tls.namedGroups\";",
                "+    private static final String PROPERTY_NAMEDGROUPS = \"jdk.tls.namedGroups\";",
                "@@ -61,3 +61,3 @@ abstract class SupportedGroups",
                "     {",
                "-        String prop = PropertyUtils.getStringSystemProperty(\"jdk.tls.namedGroups\");",
                "+        String prop = PropertyUtils.getStringSystemProperty(PROPERTY_NAMEDGROUPS);",
                "         if (prop == null)",
                "@@ -79,3 +79,3 @@ abstract class SupportedGroups",
                "             {",
                "-                LOG.warning(\"'\" + PROPERTY_NAME + \"' contains unrecognised NamedGroup: \" + name);",
                "+                LOG.warning(\"'\" + PROPERTY_NAMEDGROUPS + \"' contains unrecognised NamedGroup: \" + name);",
                "             }",
                "@@ -83,3 +83,3 @@ abstract class SupportedGroups",
                "             {",
                "-                LOG.warning(\"'\" + PROPERTY_NAME + \"' contains disabled characteristic-2 curve: \" + name);",
                "+                LOG.warning(\"'\" + PROPERTY_NAMEDGROUPS + \"' contains disabled characteristic-2 curve: \" + name);",
                "             }",
                "@@ -96,3 +96,3 @@ abstract class SupportedGroups",
                "         {",
                "-            LOG.severe(\"'\" + PROPERTY_NAME + \"' contained no usable NamedGroup values\");",
                "+            LOG.severe(\"'\" + PROPERTY_NAMEDGROUPS + \"' contained no usable NamedGroup values\");",
                "         }"
            ],
            "changed_files": [
                "tls/src/main/java/org/bouncycastle/jsse/provider/SupportedGroups.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "db54ec4f31f112ca488aa5c9088fa0b4baae6651"
                ],
                [
                    "no-tag",
                    "913adb4ad2dd6f5cd96b1cb2a53dd114c7d4bdd5"
                ]
            ],
            "tags": [
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6b2d39821c2e27664847f4f9d7acfa850ad58e5c",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1520070426,
            "hunks": 3,
            "message": "Return empty byte array instead of null, for the null session ID",
            "diff": [
                "diff --git a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSessionImpl.java b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSessionImpl.java",
                "index 151e9c87b..7c5f1f324 100644",
                "--- a/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSessionImpl.java",
                "+++ b/tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSessionImpl.java",
                "@@ -22,2 +22,3 @@ import org.bouncycastle.tls.SessionParameters;",
                " import org.bouncycastle.tls.TlsSession;",
                "+import org.bouncycastle.tls.TlsUtils;",
                " import org.bouncycastle.util.Arrays;",
                "@@ -137,5 +138,6 @@ class ProvSSLSessionImpl",
                "     {",
                "-        return tlsSession == null",
                "+        byte[] id = tlsSession == null",
                "             ?   null",
                "             :   Arrays.clone(tlsSession.getSessionID());",
                "+        return id == null ? TlsUtils.EMPTY_BYTES : id;",
                "     }"
            ],
            "changed_files": [
                "tls/src/main/java/org/bouncycastle/jsse/provider/ProvSSLSessionImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "7d1d2804d55d45aa1992db8aa60571dcedc613fe"
                ],
                [
                    "no-tag",
                    "dd47a032f8064ff58f0355b0fcda42f5c5d1384e"
                ]
            ],
            "tags": [
                "r1v60"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a00b684465b38d722ca9a3543b8af8568e6bad5c",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1513042903,
            "hunks": 1,
            "message": "Confirm size of decrypted PMS before using",
            "diff": [
                "diff --git a/tls/src/main/java/org/bouncycastle/tls/crypto/impl/jcajce/JceDefaultTlsCredentialedDecryptor.java b/tls/src/main/java/org/bouncycastle/tls/crypto/impl/jcajce/JceDefaultTlsCredentialedDecryptor.java",
                "index c4ab53206..cea1df8b9 100644",
                "--- a/tls/src/main/java/org/bouncycastle/tls/crypto/impl/jcajce/JceDefaultTlsCredentialedDecryptor.java",
                "+++ b/tls/src/main/java/org/bouncycastle/tls/crypto/impl/jcajce/JceDefaultTlsCredentialedDecryptor.java",
                "@@ -99,3 +99,7 @@ public class JceDefaultTlsCredentialedDecryptor",
                "             c.init(Cipher.DECRYPT_MODE, rsaServerPrivateKey);",
                "-            M = c.doFinal(encryptedPreMasterSecret);",
                "+            byte[] m = c.doFinal(encryptedPreMasterSecret);",
                "+            if (m != null && m.length == 48)",
                "+            {",
                "+                M = m;",
                "+            }",
                "         }"
            ],
            "changed_files": [
                "tls/src/main/java/org/bouncycastle/tls/crypto/impl/jcajce/JceDefaultTlsCredentialedDecryptor.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "ef0ddfa3e3e641bda4ebe8d89de82079ef19d6db"
                ],
                [
                    "no-tag",
                    "d0f24a5252d35691b8d36bfea244609c34a7aaed"
                ]
            ],
            "tags": [
                "r1v60"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, default, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5f8d43ab01df50a83e6b5cf6c400d8537fd938c6",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1520052854,
            "hunks": 3,
            "message": "added full filtering for BDS data.",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSUtil.java b/core/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSUtil.java",
                "index ea8fa64aa..79c63ac80 100644",
                "--- a/core/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSUtil.java",
                "+++ b/core/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSUtil.java",
                "@@ -10,2 +10,4 @@ import java.io.ObjectOutputStream;",
                " import java.io.ObjectStreamClass;",
                "+import java.util.HashSet;",
                "+import java.util.Set;",
                "@@ -384,2 +386,20 @@ public class XMSSUtil",
                "     {",
                "+        private static final Set<String> components = new HashSet<>();",
                "+",
                "+        static",
                "+        {",
                "+            components.add(\"java.util.TreeMap\");",
                "+            components.add(\"java.lang.Integer\");",
                "+            components.add(\"java.lang.Number\");",
                "+            components.add(\"org.bouncycastle.pqc.crypto.xmss.BDS\");",
                "+            components.add(\"java.util.ArrayList\");",
                "+            components.add(\"org.bouncycastle.pqc.crypto.xmss.XMSSNode\");",
                "+            components.add(\"[B\");",
                "+            components.add(\"java.util.LinkedList\");",
                "+            components.add(\"java.util.Stack\");",
                "+            components.add(\"java.util.Vector\");",
                "+            components.add(\"[Ljava.lang.Object;\");",
                "+            components.add(\"org.bouncycastle.pqc.crypto.xmss.BDSTreeHash\");",
                "+        }",
                "+",
                "         private final Class mainClass;",
                "@@ -411,2 +431,10 @@ public class XMSSUtil",
                "             }",
                "+            else",
                "+            {",
                "+                if (!components.contains(desc.getName()))",
                "+                {",
                "+                    throw new InvalidClassException(",
                "+                          \"unexpected class: \", desc.getName());",
                "+                }",
                "+            }",
                "             return super.resolveClass(desc);"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSUtil.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "8e9f4a16c923b8793eb053533fe5be46ce1ca695"
                ],
                [
                    "no-tag",
                    "cd98322b171b15b3f88c5ec871175147893c31e6"
                ]
            ],
            "tags": [
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4b3b9f232778669f29c717ed851f3316e975a925",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1515812927,
            "hunks": 1,
            "message": "added toArray() method.",
            "diff": [
                "diff --git a/pg/src/main/java/org/bouncycastle/openpgp/PGPSignatureSubpacketVector.java b/pg/src/main/java/org/bouncycastle/openpgp/PGPSignatureSubpacketVector.java",
                "index a9bd83048..242d61930 100644",
                "--- a/pg/src/main/java/org/bouncycastle/openpgp/PGPSignatureSubpacketVector.java",
                "+++ b/pg/src/main/java/org/bouncycastle/openpgp/PGPSignatureSubpacketVector.java",
                "@@ -320,2 +320,16 @@ public class PGPSignatureSubpacketVector",
                "     }",
                "+",
                "+    /**",
                "+     * Return a copy of the subpackets in this vector.",
                "+     *",
                "+     * @return an array containing the vector subpackets in order.",
                "+     */",
                "+    public SignatureSubpacket[] toArray()",
                "+    {",
                "+        SignatureSubpacket[] rv = new SignatureSubpacket[packets.length];",
                "+",
                "+        System.arraycopy(packets, 0, rv, 0, rv.length);",
                "+",
                "+        return rv;",
                "+    }",
                " }"
            ],
            "changed_files": [
                "pg/src/main/java/org/bouncycastle/openpgp/PGPSignatureSubpacketVector.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "2d3984259348c9a1bfd52d7332dfef7e309907ab"
                ],
                [
                    "no-tag",
                    "639555bb2ced40e066f0558ab97302b30ceb4bba"
                ]
            ],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4932e7195e8de4d2418750e4829b68d9dcc47ff6",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1514432985,
            "hunks": 1,
            "message": "moved version to 1.59",
            "diff": [
                "diff --git a/build.gradle b/build.gradle",
                "index 30b2b4c18..55f4bb04f 100644",
                "--- a/build.gradle",
                "+++ b/build.gradle",
                "@@ -51,3 +51,3 @@ subprojects {",
                "     targetCompatibility = 1.5",
                "-    version = '1.59-SNAPSHOT'",
                "+    version = '1.59'"
            ],
            "changed_files": [
                "build.gradle"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "903cbbbe881b0dec14e54bbdb32fbb34585e7702"
                ],
                [
                    "no-tag",
                    "5ae3e3d7fabf8613425fc1e47e752bf57a143030"
                ]
            ],
            "tags": [
                "r1rv59",
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "1da25221418f8631bb0ab554b121f29150986262",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1510591723,
            "hunks": 1,
            "message": "remove junit from prov build.gradle",
            "diff": [
                "diff --git a/prov/build.gradle b/prov/build.gradle",
                "index 5be41cb35..9739beb67 100644",
                "--- a/prov/build.gradle",
                "+++ b/prov/build.gradle",
                "@@ -2,3 +2,2 @@ dependencies {",
                "     compile project(':core')",
                "-  compile 'junit:junit:4.12'",
                " }"
            ],
            "changed_files": [
                "prov/build.gradle"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "915beb4945f17ec547a1da1cf745093cb089e408"
                ],
                [
                    "no-tag",
                    "9f7320cd0d4e459ce20ec4c7dd77929149abeed7"
                ]
            ],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e3385b8eed21bb2926b498e20bf7b12a24a7cffe",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1518166871,
            "hunks": 0,
            "message": "Merge pull request #1 from bcgit/master keeping fork up to date",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1": "Google fails endpointID Validation in bc161? #460 OpenPGP: decryption of session key with RSA fails with custom cipher provider if the first byte is 0 #1003 Wrong OIDs in JavaDoc for NISTObjectIdentifiers #1176 bcprov-jdk15on-1.69.jar not works with JDK 8 -- 8u331 #1252 Degraded performance loading BCFKS key stores with Corretto 1.8 JDK configured with bc-fips-1.0.2.3.jar #1273"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "98804934bec9a88dce3fa0425fd1eb4908551703",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1518166871,
            "hunks": 0,
            "message": "Merge pull request #1 from bcgit/master keeping fork up to date",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1": "Google fails endpointID Validation in bc161? #460 OpenPGP: decryption of session key with RSA fails with custom cipher provider if the first byte is 0 #1003 Wrong OIDs in JavaDoc for NISTObjectIdentifiers #1176 bcprov-jdk15on-1.69.jar not works with JDK 8 -- 8u331 #1252 Degraded performance loading BCFKS key stores with Corretto 1.8 JDK configured with bc-fips-1.0.2.3.jar #1273"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "783d0c9f09a8ac50190f2ee60d7ab0e2742cb672",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1515474787,
            "hunks": 0,
            "message": "Merge remote-tracking branch 'origin/master'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "8588c4282c0258ba8f36aa9053415361c6490e51",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1513317489,
            "hunks": 0,
            "message": "Merge branch 'xipki-master'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1rv59",
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "1d142dbec248c5548a9959ecd75f9f4594d6a9a5",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1511762793,
            "hunks": 0,
            "message": "Merge branch 'mashintsev-master2'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1v60"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "1b807e2490ba3f45df1eca3739e833c09aa03e73",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1513986208,
            "hunks": 0,
            "message": "Merge branch 'scryptOffByOne' of https://github.com/isomarcte/bc-java into isomarcte-scryptOffByOne",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1v60"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "5827d2c62dff75a854123fd53aa13404dd31cfc2",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1513985199,
            "hunks": 0,
            "message": "Merge branch 'master' of https://github.com/xipki/bc-java into xipki-master",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "1bafd1300b7daa04bd08933d48a6df18ca27c4e6",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1518750548,
            "hunks": 0,
            "message": "Merge branch 'kdf2' of https://github.com/brandonweeks/bc-java into brandonweeks-kdf2",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "2e523514c516a8078deabf16bad799ec9116276f",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1511762793,
            "hunks": 0,
            "message": "Merge branch 'mashintsev-master2'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1rv59",
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "4c912e990c4fd571a8556013e060f6b7a46acb8c",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1511957897,
            "hunks": 0,
            "message": "Merge remote-tracking branch 'origin/master'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1v60"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "cfaf5c8cde8673a070995c23d19ba6a1b9015e95",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1513988588,
            "hunks": 0,
            "message": "Merge branch 'zoonooz-gradle-remove-junit'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1v60"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "5e9f495292606f6f2deb54bac93ee94b61f99f5c",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1511762793,
            "hunks": 0,
            "message": "Merge branch 'mashintsev-master2'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "5f4ff26ac605efe36e5a74084e2e4712c835a92f",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1513985218,
            "hunks": 0,
            "message": "Merge branch 'xipki-master'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "6d0f69ec9b295268524c8cad11bb4ea2c18f2b84",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1515474091,
            "hunks": 0,
            "message": "Merge remote-tracking branch 'origin/master'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "437509189daf709d0af4533f30028fecaa563d0c",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1513988578,
            "hunks": 0,
            "message": "Merge branch 'gradle-remove-junit' of https://github.com/zoonooz/bc-java into zoonooz-gradle-remove-junit",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "961abac82324fd14fd7ef50f4d4f4d96e093a820",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1513986208,
            "hunks": 0,
            "message": "Merge branch 'scryptOffByOne' of https://github.com/isomarcte/bc-java into isomarcte-scryptOffByOne",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "9c326a7badac5543323cf69f94876cda5903f36b",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1516079336,
            "hunks": 0,
            "message": "Merge remote-tracking branch 'origin/master'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1v60"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "5fff1fbee10a63d993770b26af10a423c1db297d",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1518750548,
            "hunks": 0,
            "message": "Merge branch 'kdf2' of https://github.com/brandonweeks/bc-java into brandonweeks-kdf2",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1v60"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "48327de9f6bb8ea5a2bd69fa796c5bfd2fcf1a6d",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1515806403,
            "hunks": 0,
            "message": "Merge remote-tracking branch 'origin/master'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1v60"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "b796516835c3c6836abce27d7ea195c825bb0d16",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1515474787,
            "hunks": 0,
            "message": "Merge remote-tracking branch 'origin/master'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "885260dd3154a5e1751d281b8ef2653c24d3f1f7",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1515474091,
            "hunks": 0,
            "message": "Merge remote-tracking branch 'origin/master'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1v60"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "cb045001027bcb6597a14ec8eb97e8dce919a6ff",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1511762771,
            "hunks": 0,
            "message": "Merge branch 'master2' of https://github.com/mashintsev/bc-java into mashintsev-master2",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1v60"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "e38777fe9c05b1948a3168954f189fb358917d11",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1513317489,
            "hunks": 0,
            "message": "Merge branch 'xipki-master'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1v60"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "d4a2422b6cb83fef66972044d492443be8af257b",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1513985199,
            "hunks": 0,
            "message": "Merge branch 'master' of https://github.com/xipki/bc-java into xipki-master",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1rv59",
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "2e47a489b1b02b1f057584fe51dca94e938ea80e",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1513985218,
            "hunks": 0,
            "message": "Merge branch 'xipki-master'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1v60"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "053ac7735f252ce71a44082a860002742b810971",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1511957897,
            "hunks": 0,
            "message": "Merge remote-tracking branch 'origin/master'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1rv59",
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "3777ffe6b6a9052a448a21574c01c61aaae66f9b",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1515474091,
            "hunks": 0,
            "message": "Merge remote-tracking branch 'origin/master'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "ae5d03f0124438286c85f8a96343688ee308056c",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1516235191,
            "hunks": 0,
            "message": "Merge remote-tracking branch 'origin/master'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1v60"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "f967e7d012f9edfe5e6c7c8c18dd5f1467dbe382",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1516079336,
            "hunks": 0,
            "message": "Merge remote-tracking branch 'origin/master'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "cc012af3fa8a00f3a3aed7f563b156004e076827",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1513986215,
            "hunks": 0,
            "message": "Merge branch 'isomarcte-scryptOffByOne'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1rv59",
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "6fa911ea96fa258a925af0a587a45b60596cdb53",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1513985218,
            "hunks": 0,
            "message": "Merge branch 'xipki-master'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1rv59",
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "63ab3dd7a8a593efa295408c1727ca92c305205a",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1518750567,
            "hunks": 0,
            "message": "Merge branch 'brandonweeks-kdf2'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1v60"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "8311884ec8832817ddb4b5a3b765edd02c50e75a",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1513986215,
            "hunks": 0,
            "message": "Merge branch 'isomarcte-scryptOffByOne'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "d81b9a33c31f4e7b43093a7d76a797f2553a7a80",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1513985199,
            "hunks": 0,
            "message": "Merge branch 'master' of https://github.com/xipki/bc-java into xipki-master",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1v60"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "0b73ba83c98dfba417532a5f7e16de106b272c27",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1513988578,
            "hunks": 0,
            "message": "Merge branch 'gradle-remove-junit' of https://github.com/zoonooz/bc-java into zoonooz-gradle-remove-junit",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1rv59",
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "85a5982b58b4abb5ad5ba0646edbb664a9222eda",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1511762771,
            "hunks": 0,
            "message": "Merge branch 'master2' of https://github.com/mashintsev/bc-java into mashintsev-master2",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "f0757664881b68d3dc0b561027eb9bb1edbad1cf",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1518750548,
            "hunks": 0,
            "message": "Merge branch 'kdf2' of https://github.com/brandonweeks/bc-java into brandonweeks-kdf2",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "c900d77b9898caed573e095daa50e80b92cba7e4",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1515806403,
            "hunks": 0,
            "message": "Merge remote-tracking branch 'origin/master'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "60bb0445eed925a0f3db7b13bda7351caf1dcb01",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1513986215,
            "hunks": 0,
            "message": "Merge branch 'isomarcte-scryptOffByOne'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1v60"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "a89f5eeca1faaf336531ecbda9de2073b38c57f7",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1513317489,
            "hunks": 0,
            "message": "Merge branch 'xipki-master'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "6fa810b64c85522c2dd5f4aa6a306b07151b5638",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1515806403,
            "hunks": 0,
            "message": "Merge remote-tracking branch 'origin/master'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "2ccbaf19c392f5721cbf0cfac7b379accd6b58a4",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1518750567,
            "hunks": 0,
            "message": "Merge branch 'brandonweeks-kdf2'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "9abd007108fba2a7d33f8d43cd0babfe88034b33",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1516079336,
            "hunks": 0,
            "message": "Merge remote-tracking branch 'origin/master'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "f8c1f45ec23837c6d756e54a202978e2b4c4702f",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1511957897,
            "hunks": 0,
            "message": "Merge remote-tracking branch 'origin/master'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "aea2e249e312999d5de2960ca581082ebb0a3b37",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1511762771,
            "hunks": 0,
            "message": "Merge branch 'master2' of https://github.com/mashintsev/bc-java into mashintsev-master2",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1rv59",
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "e5ee6bc50cd10ddd65a7fddea7a1bba8a93e7821",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1513988588,
            "hunks": 0,
            "message": "Merge branch 'zoonooz-gradle-remove-junit'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "fc3f229519e9faee92d651df9720a8745ca8afce",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1518750567,
            "hunks": 0,
            "message": "Merge branch 'brandonweeks-kdf2'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "5e01ccfdff6bc2c35b8fd595971f78219bd792e0",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1513986208,
            "hunks": 0,
            "message": "Merge branch 'scryptOffByOne' of https://github.com/isomarcte/bc-java into isomarcte-scryptOffByOne",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1rv59",
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "6af4662fbe36988cadb31a8157693f4928fffee3",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1515474787,
            "hunks": 0,
            "message": "Merge remote-tracking branch 'origin/master'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1v60"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "642f6a7d1b001faf55a1ab76041ef58114f80a10",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1516235191,
            "hunks": 0,
            "message": "Merge remote-tracking branch 'origin/master'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "7e43cbbafb87335d2c5dbe9d298effe40ff90a5c",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1513988588,
            "hunks": 0,
            "message": "Merge branch 'zoonooz-gradle-remove-junit'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1rv59",
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "613dd31e3eec7fdaf1cbcfa01ba22fdaec3fcadc",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1513988578,
            "hunks": 0,
            "message": "Merge branch 'gradle-remove-junit' of https://github.com/zoonooz/bc-java into zoonooz-gradle-remove-junit",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1v60"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "44114fb1280e9a2f5b5d2786857fd5c17933dc81",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1516235191,
            "hunks": 0,
            "message": "Merge remote-tracking branch 'origin/master'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": []
        }
    ]
}
