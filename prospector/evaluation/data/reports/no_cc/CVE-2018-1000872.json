{
    "advisory_record": {
        "cve_id": "CVE-2018-1000872",
        "description": "OpenKMIP PyKMIP version All versions before 0.8.0 contains a CWE 399: Resource Management Errors (similar issue to CVE-2015-5262) vulnerability in PyKMIP server that can result in DOS: the server can be made unavailable by one or more clients opening all of the available sockets. This attack appear to be exploitable via A client or clients open sockets with the server and then never close them. This vulnerability appears to have been fixed in 0.8.0.",
        "reserved_timestamp": 1541980800,
        "published_timestamp": 1664814119,
        "updated_timestamp": 1664814119,
        "repository_url": null,
        "references": {
            "": 285,
            "https://en.wikipedia.org/wiki/SHA-2": 8,
            "https://github.com/OpenKMIP/PyKMIP/issues/430": 7,
            "commit::3a7b880bdf70d295ed8af3a5880bab65fa6b3932": 6,
            "https://access.redhat.com/support/": 5,
            "https://access.redhat.com/downloads/": 4,
            "https://docs.python.org/dev/library/ssl.html#socket-creation": 4,
            "https://access.redhat.com/errata/": 3,
            "https://access.redhat.com/labs/": 3,
            "https://access.redhat.com/security/cve/CVE-2015-5262": 2,
            "https://pykmip.readthedocs.io/en/latest/server.html": 2,
            "https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax": 2,
            "https://github.com/OpenKMIP/PyKMIP/pull/432": 2,
            "https://github.com/stevebriskin": 2,
            "https://access.redhat.com/management/": 2,
            "https://access.redhat.com/": 2,
            "https://access.redhat.com/products/red-hat-enterprise-linux/": 2,
            "https://access.redhat.com/products/red-hat-openshift-container-platform": 2,
            "https://access.redhat.com/products/red-hat-ansible-automation-platform/": 2,
            "https://access.redhat.com/products/": 2,
            "https://access.redhat.com/documentation": 2,
            "https://access.redhat.com/product-life-cycles/": 2,
            "https://access.redhat.com/security": 2,
            "https://access.redhat.com/security/security-updates/#/security-advisories": 2,
            "https://access.redhat.com/security/security-updates/#/cve": 2,
            "https://access.redhat.com/support/contact/": 2,
            "https://status.redhat.com": 2,
            "https://en.wikipedia.org/wiki/Triple_DES": 2,
            "https://en.wikipedia.org/wiki/Advanced_Encryption_Standard": 2,
            "https://en.wikipedia.org/wiki/Blowfish_%28cipher%29": 2,
            "https://en.wikipedia.org/wiki/Camellia_%28cipher%29": 2,
            "https://en.wikipedia.org/wiki/CAST-128": 2,
            "https://en.wikipedia.org/wiki/International_Data_Encryption_Algorithm": 2,
            "https://en.wikipedia.org/wiki/RC4": 2,
            "https://en.wikipedia.org/wiki/RSA_%28cryptosystem%29": 2,
            "https://en.wikipedia.org/wiki/MD5": 2,
            "https://en.wikipedia.org/wiki/SHA-1": 2,
            "https://github.com/features/actions": 1,
            "https://github.com/features/packages": 1,
            "https://github.com/features/security": 1,
            "https://github.com/features/codespaces": 1,
            "https://github.com/features/copilot": 1,
            "https://github.com/features/code-review": 1,
            "https://github.com/features/issues": 1,
            "https://github.com/features/discussions": 1,
            "https://github.com/features": 1,
            "https://docs.github.com": 1,
            "https://skills.github.com": 1,
            "https://github.blog": 1,
            "https://github.com/enterprise": 1,
            "https://github.com/team": 1,
            "https://github.com/enterprise/startups": 1,
            "https://github.com/solutions/industries/healthcare": 1,
            "https://github.com/solutions/industries/financial-services": 1,
            "https://github.com/solutions/industries/manufacturing": 1,
            "https://github.com/solutions/ci-cd": 1,
            "https://github.com/solutions/devops": 1,
            "https://github.com/solutions/devsecops": 1,
            "https://resources.github.com/learn/pathways": 1,
            "https://resources.github.com": 1,
            "https://github.com/customer-stories": 1,
            "https://partner.github.com": 1,
            "https://github.com/readme": 1,
            "https://github.com/topics": 1,
            "https://github.com/trending": 1,
            "https://github.com/collections": 1,
            "https://github.com/enterprise/advanced-security": 1,
            "https://github.com/pricing": 1,
            "https://docs.github.com/terms": 1,
            "https://docs.github.com/privacy": 1,
            "https://github.com/PeterHamilton": 1,
            "https://github.com": 1,
            "https://docs.github.com/site-policy/github-terms/github-terms-of-service": 1,
            "https://docs.github.com/site-policy/privacy-policies/github-privacy-statement": 1,
            "https://github.com/security": 1,
            "https://www.githubstatus.com/": 1,
            "https://docs.github.com/": 1,
            "https://support.github.com?tags=dotcom-footer": 1,
            "https://access.redhat.com/downloads/content/package-browser": 1,
            "https://catalog.redhat.com/software/containers/explore/": 1,
            "https://access.redhat.com/articles/1202803": 1,
            "https://access.redhat.com/search/?q=*&p=1&rows=10&documentKind=Solution": 1,
            "https://access.redhat.com/search/?q=*&p=1&rows=10&documentKind=Article": 1,
            "https://access.redhat.com/documentation/en/red_hat_enterprise_linux": 1,
            "https://access.redhat.com/documentation/en/openshift_container_platform": 1,
            "https://access.redhat.com/documentation/en/red_hat_ansible_automation_platform": 1,
            "https://access.redhat.com/documentation/": 1,
            "https://access.redhat.com/security/": 1,
            "https://access.redhat.com/security/vulnerabilities": 1,
            "https://access.redhat.com/security/data": 1,
            "https://access.redhat.com/security/security-updates/#/security-labs": 1,
            "https://access.redhat.com/security/updates/backporting/": 1,
            "https://access.redhat.com/support/cases/": 1,
            "https://access.redhat.com/support/cases/#/troubleshoot": 1,
            "https://access.redhat.com/community": 1,
            "https://access.redhat.com/community/": 1,
            "https://access.redhat.com/discussions/": 1,
            "https://access.redhat.com/announcements/": 1,
            "https://access.redhat.com/accelerators/": 1,
            "https://access.redhat.com/jbossnetwork/restricted/listSoftware.html": 1,
            "https://cloud.redhat.com/insights": 1,
            "https://access.redhat.com/changeLanguage?language=en": 1,
            "https://access.redhat.com/changeLanguage?language=fr": 1,
            "https://access.redhat.com/changeLanguage?language=ko": 1,
            "https://access.redhat.com/changeLanguage?language=ja": 1,
            "https://access.redhat.com/changeLanguage?language=zh_CN": 1,
            "https://access.redhat.com/products/red-hat-satellite/": 1,
            "https://access.redhat.com/products/red-hat-subscription-management/": 1,
            "https://access.redhat.com/products/red-hat-insights/": 1,
            "https://access.redhat.com/products/red-hat-openstack-platform/": 1,
            "https://access.redhat.com/products/red-hat-openshift-container-platform/": 1,
            "https://access.redhat.com/products/red-hat-openshift-ai/": 1,
            "https://access.redhat.com/products/openshift-dedicated-red-hat/": 1,
            "https://access.redhat.com/products/red-hat-advanced-cluster-security-for-kubernetes/": 1,
            "https://access.redhat.com/products/red-hat-advanced-cluster-management-for-kubernetes/": 1,
            "https://access.redhat.com/products/red-hat-quay/": 1,
            "https://access.redhat.com/products/red-hat-openshift-dev-spaces": 1,
            "https://access.redhat.com/products/red-hat-openshift-service-aws": 1,
            "https://access.redhat.com/products/red-hat-storage/": 1,
            "https://access.redhat.com/products/red-hat-hyperconverged-infrastructure/": 1,
            "https://access.redhat.com/products/red-hat-ceph-storage/": 1,
            "https://access.redhat.com/products/red-hat-openshift-data-foundation": 1,
            "https://access.redhat.com/products/red-hat-runtimes/": 1,
            "https://access.redhat.com/products/red-hat-jboss-enterprise-application-platform/": 1,
            "https://access.redhat.com/products/red-hat-data-grid/": 1,
            "https://access.redhat.com/products/red-hat-jboss-web-server/": 1,
            "https://access.redhat.com/products/red-hat-build-of-keycloak/": 1,
            "https://access.redhat.com/products/spring-boot/": 1,
            "https://access.redhat.com/products/nodejs/": 1,
            "https://access.redhat.com/products/quarkus/": 1,
            "https://access.redhat.com/products/red-hat-application-foundations/": 1,
            "https://access.redhat.com/products/red-hat-fuse/": 1,
            "https://access.redhat.com/products/red-hat-amq/": 1,
            "https://access.redhat.com/products/red-hat-3scale/": 1,
            "https://redhat.com/en": 1,
            "https://twitter.com/RedHat": 1,
            "https://access.redhat.com/management": 1,
            "https://access.redhat.com/support": 1,
            "https://access.redhat.com/support/customer-service": 1,
            "https://access.redhat.com/articles/33844": 1,
            "https://access.redhat.com/help/login_assistance": 1,
            "https://www.redhat.com/en/trust": 1,
            "https://www.redhat.com/en/about/browser-support": 1,
            "https://www.redhat.com/en/about/digital-accessibility": 1,
            "https://access.redhat.com/recognition/": 1,
            "https://access.redhat.com/help/colophon/": 1,
            "https://www.redhat.com/": 1,
            "http://developers.redhat.com/": 1,
            "https://connect.redhat.com/": 1,
            "https://cloud.redhat.com/": 1,
            "https://access.redhat.com/subscription-value": 1,
            "https://www.redhat.com/about/": 1,
            "http://jobs.redhat.com": 1,
            "https://redhat.com/en/about/company": 1,
            "https://redhat.com/en/jobs": 1,
            "https://redhat.com/en/events": 1,
            "https://redhat.com/en/about/office-locations": 1,
            "https://redhat.com/en/contact": 1,
            "https://redhat.com/en/blog": 1,
            "https://redhat.com/en/about/our-culture/diversity-equity-inclusion": 1,
            "https://coolstuff.redhat.com/": 1,
            "https://www.redhat.com/en/summit": 1,
            "https://redhat.com/en/about/privacy-policy": 1,
            "https://redhat.com/en/about/terms-use": 1,
            "https://redhat.com/en/about/all-policies-guidelines": 1,
            "https://redhat.com/en/about/digital-accessibility": 1,
            "https://github.com/OpenKMIP/PyKMIP/blob/master/docs/source/server.rst": 1,
            "https://www.sqlalchemy.org/": 1,
            "http://docs.sqlalchemy.org/en/latest/dialects/sqlite.html": 1,
            "https://www.ietf.org/rfc/rfc5280.txt": 1,
            "https://github.com/OpenKMIP/SLUGS": 1,
            "https://cryptography.io/en/latest/": 1,
            "https://www.openssl.org/": 1,
            "https://en.wikipedia.org/wiki/Hash-based_message_authentication_code": 1,
            "https://en.wikipedia.org/wiki/One-key_MAC": 1,
            "http://sphinx-doc.org/": 1,
            "https://github.com/rtfd/sphinx_rtd_theme": 1,
            "https://readthedocs.org": 1,
            "http://www.readthedocs.org": 1
        },
        "affected_products": [
            "Errors",
            "PyKMIP",
            "OpenKMIP",
            "CWE",
            "Management",
            "DOS",
            "Resource",
            "n/a"
        ],
        "versions": {
            "status": "affected",
            "version": "n/a"
        },
        "files": [
            "CVE-2015-5262",
            "OpenKMIP",
            "DOS",
            "PyKMIP",
            "CWE"
        ],
        "keywords": [
            "issue",
            "result",
            "attack",
            "make",
            "close",
            "vulnerability",
            "openkmip",
            "appear",
            "resource",
            "contain",
            "management",
            "client",
            "socket",
            "server",
            "pykmip",
            "errors",
            "version",
            "open"
        ],
        "files_extension": [],
        "has_fixing_commit": true
    },
    "commits": [
        {
            "commit_id": "3a7b880bdf70d295ed8af3a5880bab65fa6b3932",
            "repository": "https://github.com/OpenKMIP/PyKMIP",
            "timestamp": 1524621440,
            "hunks": 3,
            "message": "Fix a denial-of-service bug by setting the server socket timeout This change fixes a potential denial-of-service bug with the server, setting a default timeout for all server sockets. This allows the server to drop hung connections without blocking forever. The interrupt triggered during accept calls is expected and is now handled appropriately. Server unit tests have been updated to reflect this change. Closes #430",
            "diff": [
                "diff --git a/kmip/services/server/server.py b/kmip/services/server/server.py",
                "index 6c0622e..eaa33fd 100644",
                "--- a/kmip/services/server/server.py",
                "+++ b/kmip/services/server/server.py",
                "@@ -269,2 +269,3 @@ class KmipServer(object):",
                "         # Create a TCP stream socket and configure it for immediate reuse.",
                "+        socket.setdefaulttimeout(10)",
                "         self._socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)",
                "@@ -409,2 +410,7 @@ class KmipServer(object):",
                "                 connection, address = self._socket.accept()",
                "+            except socket.timeout:",
                "+                # Setting the default socket timeout to break hung connections",
                "+                # will cause accept to periodically raise socket.timeout. This",
                "+                # is expected behavior, so ignore it and retry accept.",
                "+                pass",
                "             except socket.error as e:",
                "diff --git a/kmip/tests/unit/services/server/test_server.py b/kmip/tests/unit/services/server/test_server.py",
                "index d450e09..e228747 100644",
                "--- a/kmip/tests/unit/services/server/test_server.py",
                "+++ b/kmip/tests/unit/services/server/test_server.py",
                "@@ -487,3 +487,7 @@ class TestKmipServer(testtools.TestCase):",
                "         s._socket.accept = mock.MagicMock(",
                "-            side_effect=[('connection', 'address'), expected_error]",
                "+            side_effect=[",
                "+                ('connection', 'address'),",
                "+                socket.timeout,",
                "+                expected_error",
                "+            ]",
                "         )"
            ],
            "changed_files": [
                "kmip/services/server/server.py",
                "kmip/tests/unit/services/server/test_server.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "430": "Fix a denial-of-service bug by setting the server socket timeout #432"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.8.0",
                "v0.9.0",
                "v0.9.1"
            ],
            "matched_rules": [
                {
                    "id": "XREF_GH",
                    "message": "The commit and the advisory (including referenced pages) mention the same github issue: 430",
                    "relevance": 32
                },
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 6 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "SEC_KEYWORDS_IN_LINKED_GH",
                    "message": "The github issue 430 contains some security-related terms: denial-of-service",
                    "relevance": 4
                },
                {
                    "id": "SEC_KEYWORDS_IN_MESSAGE",
                    "message": "The commit message contains some security-related keywords: denial-of-service",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: socket, close, server",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: server",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 430",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "06c960236bcaf6717fc5cf66cf8b5179804c5a05",
            "repository": "https://github.com/OpenKMIP/PyKMIP",
            "timestamp": 1524625812,
            "hunks": 0,
            "message": "Merge pull request #432 from OpenKMIP/bug/fix-server-timeout Fix a denial-of-service bug by setting the server socket timeout",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "432": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.8.0",
                "v0.9.0",
                "v0.9.1"
            ],
            "matched_rules": [
                {
                    "id": "XREF_GH",
                    "message": "The commit and the advisory (including referenced pages) mention the same github issue: 432",
                    "relevance": 32
                },
                {
                    "id": "SEC_KEYWORDS_IN_MESSAGE",
                    "message": "The commit message contains some security-related keywords: denial-of-service",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: socket, openkmip, server, open",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 432",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5b5607a8c72bbf438eaa3722cef9955cafac6df2",
            "repository": "https://github.com/OpenKMIP/PyKMIP",
            "timestamp": 1523849173,
            "hunks": 2,
            "message": "Add Rekey support to the ProxyKmipClient This change adds Rekey operation support to the ProxyKmipClient. The client unit test suite has been updated to cover the new code. Closes #405",
            "diff": [
                "diff --git a/kmip/pie/client.py b/kmip/pie/client.py",
                "index 898998b..f9fbd7a 100644",
                "--- a/kmip/pie/client.py",
                "+++ b/kmip/pie/client.py",
                "@@ -391,2 +391,90 @@ class ProxyKmipClient(object):",
                "+    @is_connected",
                "+    def rekey(self,",
                "+              uid=None,",
                "+              offset=None,",
                "+              **kwargs):",
                "+        \"\"\"",
                "+        Rekey an existing key.",
                "+",
                "+        Args:",
                "+            uid (string): The unique ID of the symmetric key to rekey.",
                "+                Optional, defaults to None.",
                "+            offset (int): The time delta, in seconds, between the new key's",
                "+                initialization date and activation date. Optional, defaults",
                "+                to None.",
                "+            **kwargs (various): A placeholder for object attributes that",
                "+                should be set on the newly rekeyed key. Currently",
                "+                supported attributes include:",
                "+                    activation_date (int)",
                "+                    process_start_date (int)",
                "+                    protect_stop_date (int)",
                "+                    deactivation_date (int)",
                "+",
                "+        Returns:",
                "+            string: The unique ID of the newly rekeyed key.",
                "+",
                "+        Raises:",
                "+            ClientConnectionNotOpen: if the client connection is unusable",
                "+            KmipOperationFailure: if the operation result is a failure",
                "+            TypeError: if the input arguments are invalid",
                "+        \"\"\"",
                "+        if uid is not None:",
                "+            if not isinstance(uid, six.string_types):",
                "+                raise TypeError(\"The unique identifier must be a string.\")",
                "+        if offset is not None:",
                "+            if not isinstance(offset, six.integer_types):",
                "+                raise TypeError(\"The offset must be an integer.\")",
                "+",
                "+        # TODO (peter-hamilton) Unify attribute handling across operations",
                "+        attributes = []",
                "+        if kwargs.get('activation_date'):",
                "+            attributes.append(",
                "+                self.attribute_factory.create_attribute(",
                "+                    enums.AttributeType.ACTIVATION_DATE,",
                "+                    kwargs.get('activation_date')",
                "+                )",
                "+            )",
                "+        if kwargs.get('process_start_date'):",
                "+            attributes.append(",
                "+                self.attribute_factory.create_attribute(",
                "+                    enums.AttributeType.PROCESS_START_DATE,",
                "+                    kwargs.get('process_start_date')",
                "+                )",
                "+            )",
                "+        if kwargs.get('protect_stop_date'):",
                "+            attributes.append(",
                "+                self.attribute_factory.create_attribute(",
                "+                    enums.AttributeType.PROTECT_STOP_DATE,",
                "+                    kwargs.get('protect_stop_date')",
                "+                )",
                "+            )",
                "+        if kwargs.get('deactivation_date'):",
                "+            attributes.append(",
                "+                self.attribute_factory.create_attribute(",
                "+                    enums.AttributeType.DEACTIVATION_DATE,",
                "+                    kwargs.get('deactivation_date')",
                "+                )",
                "+            )",
                "+        template_attribute = cobjects.TemplateAttribute(",
                "+            attributes=attributes",
                "+        )",
                "+",
                "+        # Derive the new key/data and handle the results",
                "+        result = self.proxy.rekey(",
                "+            uuid=uid,",
                "+            offset=offset,",
                "+            template_attribute=template_attribute",
                "+        )",
                "+",
                "+        status = result.get('result_status')",
                "+        if status == enums.ResultStatus.SUCCESS:",
                "+            return result.get('unique_identifier')",
                "+        else:",
                "+            raise exceptions.KmipOperationFailure(",
                "+                status,",
                "+                result.get('result_reason'),",
                "+                result.get('result_message')",
                "+            )",
                "+",
                "     @is_connected",
                "diff --git a/kmip/tests/unit/pie/test_client.py b/kmip/tests/unit/pie/test_client.py",
                "index 06626db..3fc3b72 100644",
                "--- a/kmip/tests/unit/pie/test_client.py",
                "+++ b/kmip/tests/unit/pie/test_client.py",
                "@@ -704,2 +704,114 @@ class TestProxyKmipClient(testtools.TestCase):",
                "+    @mock.patch(",
                "+        'kmip.pie.client.KMIPProxy', mock.MagicMock(spec_set=KMIPProxy)",
                "+    )",
                "+    def test_rekey(self):",
                "+        \"\"\"",
                "+        Test that the client can rekey an object.",
                "+        \"\"\"",
                "+        result = {",
                "+            'unique_identifier': '2',",
                "+            'result_status': enums.ResultStatus.SUCCESS",
                "+        }",
                "+",
                "+        client = ProxyKmipClient()",
                "+        client.open()",
                "+        client.proxy.rekey.return_value = result",
                "+",
                "+        checked_id = client.rekey(",
                "+            uid='1',",
                "+            offset=0,",
                "+            activation_date=1000000,",
                "+            process_start_date=1000001,",
                "+            protect_stop_date=1000002,",
                "+            deactivation_date=1000003",
                "+        )",
                "+",
                "+        self.assertEqual('2', checked_id)",
                "+",
                "+    @mock.patch('kmip.pie.client.KMIPProxy',",
                "+                mock.MagicMock(spec_set=KMIPProxy))",
                "+    def test_rekey_on_invalid_unique_identifier(self):",
                "+        \"\"\"",
                "+        Test that a TypeError exception is raised when trying to rekey an",
                "+        object with an invalid unique identifier.",
                "+        \"\"\"",
                "+        kwargs = {'uid': 0}",
                "+        with ProxyKmipClient() as client:",
                "+            self.assertRaisesRegexp(",
                "+                TypeError,",
                "+                \"The unique identifier must be a string.\",",
                "+                client.rekey,",
                "+                **kwargs",
                "+            )",
                "+",
                "+    @mock.patch('kmip.pie.client.KMIPProxy',",
                "+                mock.MagicMock(spec_set=KMIPProxy))",
                "+    def test_rekey_on_invalid_offset(self):",
                "+        \"\"\"",
                "+        Test that a TypeError exception is raised when trying to rekey an",
                "+        object with an invalid offset.",
                "+        \"\"\"",
                "+        kwargs = {'offset': 'invalid'}",
                "+        with ProxyKmipClient() as client:",
                "+            self.assertRaisesRegexp(",
                "+                TypeError,",
                "+                \"The offset must be an integer.\",",
                "+                client.rekey,",
                "+                **kwargs",
                "+            )",
                "+",
                "+    @mock.patch('kmip.pie.client.KMIPProxy',",
                "+                mock.MagicMock(spec_set=KMIPProxy))",
                "+    def test_rekey_on_closed(self):",
                "+        \"\"\"",
                "+        Test that a ClientConnectionNotOpen exception is raised when trying",
                "+        to rekey an object on an unopened client connection.",
                "+        \"\"\"",
                "+        client = ProxyKmipClient()",
                "+        kwargs = {",
                "+            'uid': '1',",
                "+            'offset': 10",
                "+        }",
                "+",
                "+        self.assertRaises(",
                "+            ClientConnectionNotOpen,",
                "+            client.rekey,",
                "+            **kwargs",
                "+        )",
                "+",
                "+    @mock.patch('kmip.pie.client.KMIPProxy',",
                "+                mock.MagicMock(spec_set=KMIPProxy))",
                "+    def test_rekey_on_operation_failure(self):",
                "+        \"\"\"",
                "+        Test that a KmipOperationFailure exception is raised when the",
                "+        backend fails to rekey a key.",
                "+        \"\"\"",
                "+        status = enums.ResultStatus.OPERATION_FAILED",
                "+        reason = enums.ResultReason.GENERAL_FAILURE",
                "+        message = \"Test failure message\"",
                "+",
                "+        result = {",
                "+            'result_status': status,",
                "+            'result_reason': reason,",
                "+            'result_message': message",
                "+        }",
                "+        error_message = str(KmipOperationFailure(status, reason, message))",
                "+",
                "+        client = ProxyKmipClient()",
                "+        client.open()",
                "+        client.proxy.rekey.return_value = result",
                "+        kwargs = {",
                "+            'uid': '1',",
                "+            'offset': 1,",
                "+            'deactivation_date': 10000",
                "+        }",
                "+",
                "+        self.assertRaisesRegexp(",
                "+            KmipOperationFailure,",
                "+            error_message,",
                "+            client.rekey,",
                "+            **kwargs",
                "+        )",
                "+",
                "     @mock.patch("
            ],
            "changed_files": [
                "kmip/pie/client.py",
                "kmip/tests/unit/pie/test_client.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "405": "Add Check support to the KMIPProxy client #413 Add Check support to the ProxyKmipClient #414 Add the request and response payloads for the Rekey operation #420 Add Rekey support to the KMIPProxy client #421 Add Rekey support to the ProxyKmipClient #422"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.8.0",
                "v0.9.0",
                "v0.9.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: close, client",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: client",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 405",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "66929198c389ebc230097f575a99d7754d629751",
            "repository": "https://github.com/OpenKMIP/PyKMIP",
            "timestamp": 1523825153,
            "hunks": 4,
            "message": "Add Rekey support to the KMIPProxy client This change adds Rekey operation support to the KMIPProxy client. The client unit test suite has been updated to cover the new additions. Partially addresses #405",
            "diff": [
                "diff --git a/kmip/services/kmip_client.py b/kmip/services/kmip_client.py",
                "index 73f5a25..f4e861a 100644",
                "--- a/kmip/services/kmip_client.py",
                "+++ b/kmip/services/kmip_client.py",
                "@@ -285,2 +285,79 @@ class KMIPProxy:",
                "+    def rekey(self,",
                "+              uuid=None,",
                "+              offset=None,",
                "+              template_attribute=None,",
                "+              credential=None):",
                "+        \"\"\"",
                "+        Check object usage according to specific constraints.",
                "+",
                "+        Args:",
                "+            uuid (string): The unique identifier of a managed cryptographic",
                "+                object that should be checked. Optional, defaults to None.",
                "+            offset (int): An integer specifying, in seconds, the difference",
                "+                between the rekeyed objects initialization date and activation",
                "+                date. Optional, defaults to None.",
                "+            template_attribute (TemplateAttribute): A TemplateAttribute struct",
                "+                containing the attributes to set on the newly rekeyed object.",
                "+                Optional, defaults to None.",
                "+            credential (Credential): A Credential struct containing a set of",
                "+                authorization parameters for the operation. Optional, defaults",
                "+                to None.",
                "+",
                "+        Returns:",
                "+            dict: The results of the check operation, containing the following",
                "+                key/value pairs:",
                "+",
                "+                Key                        | Value",
                "+                ---------------------------|-----------------------------------",
                "+                'unique_identifier'        | (string) The unique ID of the",
                "+                                           | checked cryptographic object.",
                "+                'template_attribute'       | (TemplateAttribute) A struct",
                "+                                           | containing attribute set by the",
                "+                                           | server. Optional.",
                "+                'result_status'            | (ResultStatus) An enumeration",
                "+                                           | indicating the status of the",
                "+                                           | operation result.",
                "+                'result_reason'            | (ResultReason) An enumeration",
                "+                                           | providing context for the result",
                "+                                           | status.",
                "+                'result_message'           | (string) A message providing",
                "+                                           | additional context for the",
                "+                                           | operation result.",
                "+        \"\"\"",
                "+        operation = Operation(OperationEnum.REKEY)",
                "+        request_payload = payloads.RekeyRequestPayload(",
                "+            unique_identifier=uuid,",
                "+            offset=offset,",
                "+            template_attribute=template_attribute",
                "+        )",
                "+        batch_item = messages.RequestBatchItem(",
                "+            operation=operation,",
                "+            request_payload=request_payload",
                "+        )",
                "+",
                "+        request = self._build_request_message(credential, [batch_item])",
                "+        response = self._send_and_receive_message(request)",
                "+        batch_item = response.batch_items[0]",
                "+        payload = batch_item.response_payload",
                "+",
                "+        result = {}",
                "+",
                "+        if payload:",
                "+            result['unique_identifier'] = payload.unique_identifier",
                "+        if payload.template_attribute is not None:",
                "+            result['template_attribute'] = payload.template_attribute",
                "+",
                "+        result['result_status'] = batch_item.result_status.value",
                "+        try:",
                "+            result['result_reason'] = batch_item.result_reason.value",
                "+        except Exception:",
                "+            result['result_reason'] = batch_item.result_reason",
                "+        try:",
                "+            result['result_message'] = batch_item.result_message.value",
                "+        except Exception:",
                "+            result['result_message'] = batch_item.result_message",
                "+",
                "+        return result",
                "+",
                "     def derive_key(self,",
                "diff --git a/kmip/tests/unit/services/test_kmip_client.py b/kmip/tests/unit/services/test_kmip_client.py",
                "index fb9cbab..a4c8b17 100644",
                "--- a/kmip/tests/unit/services/test_kmip_client.py",
                "+++ b/kmip/tests/unit/services/test_kmip_client.py",
                "@@ -51,2 +51,3 @@ from kmip.core.misc import VendorIdentification",
                "+from kmip.core import objects",
                " from kmip.core.objects import TemplateAttribute",
                "@@ -55,2 +56,3 @@ from kmip.core.objects import PrivateKeyTemplateAttribute",
                " from kmip.core.objects import PublicKeyTemplateAttribute",
                "+from kmip.core import primitives",
                "@@ -763,2 +765,101 @@ class TestKMIPClient(TestCase):",
                "+    @mock.patch(",
                "+        'kmip.services.kmip_client.KMIPProxy._build_request_message'",
                "+    )",
                "+    @mock.patch(",
                "+        'kmip.services.kmip_client.KMIPProxy._send_and_receive_message'",
                "+    )",
                "+    def test_rekey(self, send_mock, build_mock):",
                "+        \"\"\"",
                "+        Test that the client can correctly build, send, and process a Rekey",
                "+        request.",
                "+        \"\"\"",
                "+        payload = payloads.RekeyResponsePayload(",
                "+            unique_identifier='1',",
                "+            template_attribute=objects.TemplateAttribute(",
                "+                attributes=[",
                "+                    objects.Attribute(",
                "+                        attribute_name=objects.Attribute.AttributeName(",
                "+                            'Cryptographic Algorithm'",
                "+                        ),",
                "+                        attribute_value=primitives.Enumeration(",
                "+                            enums.CryptographicAlgorithm,",
                "+                            value=enums.CryptographicAlgorithm.AES,",
                "+                            tag=enums.Tags.CRYPTOGRAPHIC_ALGORITHM",
                "+                        )",
                "+                    ),",
                "+                    objects.Attribute(",
                "+                        attribute_name=objects.Attribute.AttributeName(",
                "+                            'Cryptographic Length'",
                "+                        ),",
                "+                        attribute_value=primitives.Integer(",
                "+                            value=128,",
                "+                            tag=enums.Tags.CRYPTOGRAPHIC_LENGTH",
                "+                        )",
                "+                    )",
                "+                ]",
                "+            )",
                "+        )",
                "+        batch_item = ResponseBatchItem(",
                "+            operation=Operation(OperationEnum.REKEY),",
                "+            result_status=ResultStatus(ResultStatusEnum.SUCCESS),",
                "+            response_payload=payload",
                "+        )",
                "+        response = ResponseMessage(batch_items=[batch_item])",
                "+",
                "+        build_mock.return_value = None",
                "+        send_mock.return_value = response",
                "+",
                "+        result = self.client.rekey(",
                "+            uuid='1',",
                "+            offset=0,",
                "+            template_attribute=objects.TemplateAttribute(",
                "+                attributes=[",
                "+                    objects.Attribute(",
                "+                        attribute_name=objects.Attribute.AttributeName(",
                "+                            'Activation Date'",
                "+                        ),",
                "+                        attribute_value=primitives.DateTime(",
                "+                            value=1136113200,",
                "+                            tag=enums.Tags.ACTIVATION_DATE",
                "+                        )",
                "+                    )",
                "+                ]",
                "+            )",
                "+        )",
                "+",
                "+        self.assertEqual('1', result.get('unique_identifier'))",
                "+        self.assertEqual(",
                "+            objects.TemplateAttribute(",
                "+                attributes=[",
                "+                    objects.Attribute(",
                "+                        attribute_name=objects.Attribute.AttributeName(",
                "+                            'Cryptographic Algorithm'",
                "+                        ),",
                "+                        attribute_value=primitives.Enumeration(",
                "+                            enums.CryptographicAlgorithm,",
                "+                            value=enums.CryptographicAlgorithm.AES,",
                "+                            tag=enums.Tags.CRYPTOGRAPHIC_ALGORITHM",
                "+                        )",
                "+                    ),",
                "+                    objects.Attribute(",
                "+                        attribute_name=objects.Attribute.AttributeName(",
                "+                            'Cryptographic Length'",
                "+                        ),",
                "+                        attribute_value=primitives.Integer(",
                "+                            value=128,",
                "+                            tag=enums.Tags.CRYPTOGRAPHIC_LENGTH",
                "+                        )",
                "+                    )",
                "+                ]",
                "+            ),",
                "+            result.get('template_attribute')",
                "+        )",
                "+        self.assertEqual(",
                "+            ResultStatusEnum.SUCCESS,",
                "+            result.get('result_status')",
                "+        )",
                "+        self.assertEqual(None, result.get('result_reason'))",
                "+        self.assertEqual(None, result.get('result_message'))",
                "+",
                "     @mock.patch("
            ],
            "changed_files": [
                "kmip/services/kmip_client.py",
                "kmip/tests/unit/services/test_kmip_client.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "405": "Add Check support to the KMIPProxy client #413 Add Check support to the ProxyKmipClient #414 Add the request and response payloads for the Rekey operation #420 Add Rekey support to the KMIPProxy client #421 Add Rekey support to the ProxyKmipClient #422"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.8.0",
                "v0.9.0",
                "v0.9.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: client",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: client",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 405",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f9e32552f80d639897257f1078e34fe8bd3f9496",
            "repository": "https://github.com/OpenKMIP/PyKMIP",
            "timestamp": 1523990464,
            "hunks": 42,
            "message": "Add client support for custom configuration file paths This change adds client support for setting custom configuration file paths, allowing users and developers to place their settings file wherever they want. All client demo scripts have been updated to support a '-s' flag that can be used to set the configuration file for the demo. Client unit tests have also been updated to include this change.",
            "diff": [
                "diff --git a/kmip/core/config_helper.py b/kmip/core/config_helper.py",
                "index 6621623..38754cc 100644",
                "--- a/kmip/core/config_helper.py",
                "+++ b/kmip/core/config_helper.py",
                "@@ -47,3 +47,3 @@ class ConfigHelper(object):",
                "-    def __init__(self):",
                "+    def __init__(self, path=None):",
                "         self.logger = logging.getLogger(__name__)",
                "@@ -51,7 +51,12 @@ class ConfigHelper(object):",
                "         self.conf = SafeConfigParser()",
                "-        if self.conf.read(CONFIG_FILE):",
                "-            self.logger.debug(\"Using config file at {0}\".format(CONFIG_FILE))",
                "+",
                "+        filenames = path",
                "+        if not path:",
                "+            filenames = CONFIG_FILE",
                "+",
                "+        if self.conf.read(filenames):",
                "+            self.logger.debug(\"Using config file at {0}\".format(filenames))",
                "         else:",
                "             self.logger.warning(",
                "-                \"Config file {0} not found\".format(CONFIG_FILE))",
                "+                \"Config file {0} not found\".format(filenames))",
                "diff --git a/kmip/demos/pie/create.py b/kmip/demos/pie/create.py",
                "index 70a219f..fdaea59 100644",
                "--- a/kmip/demos/pie/create.py",
                "+++ b/kmip/demos/pie/create.py",
                "@@ -46,3 +46,6 @@ if __name__ == '__main__':",
                "     # Build the client and connect to the server",
                "-    with client.ProxyKmipClient(config=config) as client:",
                "+    with client.ProxyKmipClient(",
                "+            config=config,",
                "+            config_file=opts.config_file",
                "+    ) as client:",
                "         try:",
                "diff --git a/kmip/demos/pie/create_key_pair.py b/kmip/demos/pie/create_key_pair.py",
                "index e82eae5..018e838 100644",
                "--- a/kmip/demos/pie/create_key_pair.py",
                "+++ b/kmip/demos/pie/create_key_pair.py",
                "@@ -45,3 +45,6 @@ if __name__ == '__main__':",
                "     # Build the client and connect to the server",
                "-    with client.ProxyKmipClient(config=config) as client:",
                "+    with client.ProxyKmipClient(",
                "+            config=config,",
                "+            config_file=opts.config_file",
                "+    ) as client:",
                "         try:",
                "diff --git a/kmip/demos/pie/decrypt.py b/kmip/demos/pie/decrypt.py",
                "index 1b10aa6..f1764e8 100644",
                "--- a/kmip/demos/pie/decrypt.py",
                "+++ b/kmip/demos/pie/decrypt.py",
                "@@ -56,3 +56,6 @@ if __name__ == '__main__':",
                "     # Build the client and connect to the server",
                "-    with client.ProxyKmipClient(config=config) as client:",
                "+    with client.ProxyKmipClient(",
                "+            config=config,",
                "+            config_file=opts.config_file",
                "+    ) as client:",
                "         # Decrypt the cipher text with the encryption key.",
                "diff --git a/kmip/demos/pie/derive_key.py b/kmip/demos/pie/derive_key.py",
                "index 122799b..f66e7e9 100644",
                "--- a/kmip/demos/pie/derive_key.py",
                "+++ b/kmip/demos/pie/derive_key.py",
                "@@ -32,3 +32,6 @@ if __name__ == '__main__':",
                "     # Build the client and connect to the server",
                "-    with client.ProxyKmipClient(config=config) as client:",
                "+    with client.ProxyKmipClient(",
                "+            config=config,",
                "+            config_file=opts.config_file",
                "+    ) as client:",
                "         # Create keys to use for derivation",
                "diff --git a/kmip/demos/pie/destroy.py b/kmip/demos/pie/destroy.py",
                "index 7e7dc33..0302282 100644",
                "--- a/kmip/demos/pie/destroy.py",
                "+++ b/kmip/demos/pie/destroy.py",
                "@@ -39,3 +39,6 @@ if __name__ == '__main__':",
                "     # Build the client and connect to the server",
                "-    with client.ProxyKmipClient(config=config) as client:",
                "+    with client.ProxyKmipClient(",
                "+            config=config,",
                "+            config_file=opts.config_file",
                "+    ) as client:",
                "         try:",
                "diff --git a/kmip/demos/pie/encrypt.py b/kmip/demos/pie/encrypt.py",
                "index 1946eeb..4a84ffe 100644",
                "--- a/kmip/demos/pie/encrypt.py",
                "+++ b/kmip/demos/pie/encrypt.py",
                "@@ -52,3 +52,6 @@ if __name__ == '__main__':",
                "     # Build the client and connect to the server",
                "-    with client.ProxyKmipClient(config=config) as client:",
                "+    with client.ProxyKmipClient(",
                "+            config=config,",
                "+            config_file=opts.config_file",
                "+    ) as client:",
                "         # Create an encryption key.",
                "diff --git a/kmip/demos/pie/get.py b/kmip/demos/pie/get.py",
                "index 90fc434..aaa8962 100644",
                "--- a/kmip/demos/pie/get.py",
                "+++ b/kmip/demos/pie/get.py",
                "@@ -39,3 +39,6 @@ if __name__ == '__main__':",
                "     # Build the client and connect to the server",
                "-    with client.ProxyKmipClient(config=config) as client:",
                "+    with client.ProxyKmipClient(",
                "+            config=config,",
                "+            config_file=opts.config_file",
                "+    ) as client:",
                "         try:",
                "diff --git a/kmip/demos/pie/get_attribute_list.py b/kmip/demos/pie/get_attribute_list.py",
                "index 27b3dad..2c25c1b 100644",
                "--- a/kmip/demos/pie/get_attribute_list.py",
                "+++ b/kmip/demos/pie/get_attribute_list.py",
                "@@ -39,3 +39,6 @@ if __name__ == '__main__':",
                "     # Build the client and connect to the server",
                "-    with client.ProxyKmipClient(config=config) as client:",
                "+    with client.ProxyKmipClient(",
                "+            config=config,",
                "+            config_file=opts.config_file",
                "+    ) as client:",
                "         try:",
                "diff --git a/kmip/demos/pie/locate.py b/kmip/demos/pie/locate.py",
                "index 2c10880..bbd1336 100644",
                "--- a/kmip/demos/pie/locate.py",
                "+++ b/kmip/demos/pie/locate.py",
                "@@ -55,3 +55,6 @@ if __name__ == '__main__':",
                "     # Build the client and connect to the server",
                "-    with client.ProxyKmipClient(config=config) as client:",
                "+    with client.ProxyKmipClient(",
                "+            config=config,",
                "+            config_file=opts.config_file",
                "+    ) as client:",
                "         try:",
                "diff --git a/kmip/demos/pie/mac.py b/kmip/demos/pie/mac.py",
                "index d30a34d..b5288ed 100644",
                "--- a/kmip/demos/pie/mac.py",
                "+++ b/kmip/demos/pie/mac.py",
                "@@ -50,3 +50,6 @@ if __name__ == '__main__':",
                "     # Build the client and connect to the server",
                "-    with client.ProxyKmipClient(config=config) as client:",
                "+    with client.ProxyKmipClient(",
                "+            config=config,",
                "+            config_file=opts.config_file",
                "+    ) as client:",
                "         try:",
                "diff --git a/kmip/demos/pie/register_certificate.py b/kmip/demos/pie/register_certificate.py",
                "index f5eeae6..ffaa38a 100644",
                "--- a/kmip/demos/pie/register_certificate.py",
                "+++ b/kmip/demos/pie/register_certificate.py",
                "@@ -93,3 +93,6 @@ if __name__ == '__main__':",
                "     # Build the client and connect to the server",
                "-    with client.ProxyKmipClient(config=config) as client:",
                "+    with client.ProxyKmipClient(",
                "+            config=config,",
                "+            config_file=opts.config_file",
                "+    ) as client:",
                "         try:",
                "diff --git a/kmip/demos/pie/register_opaque_object.py b/kmip/demos/pie/register_opaque_object.py",
                "index 043a77c..e0523c8 100644",
                "--- a/kmip/demos/pie/register_opaque_object.py",
                "+++ b/kmip/demos/pie/register_opaque_object.py",
                "@@ -41,3 +41,6 @@ if __name__ == '__main__':",
                "     # Build the client and connect to the server",
                "-    with client.ProxyKmipClient(config=config) as client:",
                "+    with client.ProxyKmipClient(",
                "+            config=config,",
                "+            config_file=opts.config_file",
                "+    ) as client:",
                "         try:",
                "diff --git a/kmip/demos/pie/register_private_key.py b/kmip/demos/pie/register_private_key.py",
                "index 7807f8f..ee27ffb 100644",
                "--- a/kmip/demos/pie/register_private_key.py",
                "+++ b/kmip/demos/pie/register_private_key.py",
                "@@ -120,3 +120,6 @@ if __name__ == '__main__':",
                "     # Build the client and connect to the server",
                "-    with client.ProxyKmipClient(config=config) as client:",
                "+    with client.ProxyKmipClient(",
                "+            config=config,",
                "+            config_file=opts.config_file",
                "+    ) as client:",
                "         try:",
                "diff --git a/kmip/demos/pie/register_public_key.py b/kmip/demos/pie/register_public_key.py",
                "index b76728e..bc867dd 100644",
                "--- a/kmip/demos/pie/register_public_key.py",
                "+++ b/kmip/demos/pie/register_public_key.py",
                "@@ -62,3 +62,6 @@ if __name__ == '__main__':",
                "     # Build the client and connect to the server",
                "-    with client.ProxyKmipClient(config=config) as client:",
                "+    with client.ProxyKmipClient(",
                "+            config=config,",
                "+            config_file=opts.config_file",
                "+    ) as client:",
                "         try:",
                "diff --git a/kmip/demos/pie/register_secret_data.py b/kmip/demos/pie/register_secret_data.py",
                "index b4e3628..2ac7072 100644",
                "--- a/kmip/demos/pie/register_secret_data.py",
                "+++ b/kmip/demos/pie/register_secret_data.py",
                "@@ -43,3 +43,6 @@ if __name__ == '__main__':",
                "     # Build the client and connect to the server",
                "-    with client.ProxyKmipClient(config=config) as client:",
                "+    with client.ProxyKmipClient(",
                "+            config=config,",
                "+            config_file=opts.config_file",
                "+    ) as client:",
                "         try:",
                "diff --git a/kmip/demos/pie/register_symmetric_key.py b/kmip/demos/pie/register_symmetric_key.py",
                "index 65c3b5e..38a0689 100644",
                "--- a/kmip/demos/pie/register_symmetric_key.py",
                "+++ b/kmip/demos/pie/register_symmetric_key.py",
                "@@ -46,3 +46,6 @@ if __name__ == '__main__':",
                "     # Build the client and connect to the server",
                "-    with client.ProxyKmipClient(config=config) as client:",
                "+    with client.ProxyKmipClient(",
                "+            config=config,",
                "+            config_file=opts.config_file",
                "+    ) as client:",
                "         try:",
                "diff --git a/kmip/demos/pie/sign.py b/kmip/demos/pie/sign.py",
                "index 286319b..291de5f 100644",
                "--- a/kmip/demos/pie/sign.py",
                "+++ b/kmip/demos/pie/sign.py",
                "@@ -33,3 +33,6 @@ if __name__ == '__main__':",
                "     # Build the client and connect to the server",
                "-    with client.ProxyKmipClient(config=config) as client:",
                "+    with client.ProxyKmipClient(",
                "+            config=config,",
                "+            config_file=opts.config_file",
                "+    ) as client:",
                "         # Create keys to use for derivation",
                "diff --git a/kmip/demos/pie/signature_verify.py b/kmip/demos/pie/signature_verify.py",
                "index b3dba5c..18010e7 100644",
                "--- a/kmip/demos/pie/signature_verify.py",
                "+++ b/kmip/demos/pie/signature_verify.py",
                "@@ -33,3 +33,6 @@ if __name__ == '__main__':",
                "     # Build the client and connect to the server",
                "-    with client.ProxyKmipClient(config=config) as client:",
                "+    with client.ProxyKmipClient(",
                "+            config=config,",
                "+            config_file=opts.config_file",
                "+    ) as client:",
                "         # Create keys to use for derivation",
                "diff --git a/kmip/demos/units/activate.py b/kmip/demos/units/activate.py",
                "index 24c8f2e..27796e7 100644",
                "--- a/kmip/demos/units/activate.py",
                "+++ b/kmip/demos/units/activate.py",
                "@@ -42,3 +42,3 @@ if __name__ == '__main__':",
                "     # Build the client and connect to the server",
                "-    client = KMIPProxy(config=config)",
                "+    client = KMIPProxy(config=config, config_file=opts.config_file)",
                "     client.open()",
                "diff --git a/kmip/demos/units/create.py b/kmip/demos/units/create.py",
                "index b41ff00..60179ef 100644",
                "--- a/kmip/demos/units/create.py",
                "+++ b/kmip/demos/units/create.py",
                "@@ -76,3 +76,3 @@ if __name__ == '__main__':",
                "     # Build the client and connect to the server",
                "-    client = KMIPProxy(config=config)",
                "+    client = KMIPProxy(config=config, config_file=opts.config_file)",
                "     client.open()",
                "diff --git a/kmip/demos/units/create_key_pair.py b/kmip/demos/units/create_key_pair.py",
                "index 86e8d71..c0e4dac 100644",
                "--- a/kmip/demos/units/create_key_pair.py",
                "+++ b/kmip/demos/units/create_key_pair.py",
                "@@ -89,3 +89,3 @@ if __name__ == '__main__':",
                "     # Build the client and connect to the server",
                "-    client = KMIPProxy(config=config)",
                "+    client = KMIPProxy(config=config, config_file=opts.config_file)",
                "     client.open()",
                "diff --git a/kmip/demos/units/destroy.py b/kmip/demos/units/destroy.py",
                "index cb27336..bedaa00 100644",
                "--- a/kmip/demos/units/destroy.py",
                "+++ b/kmip/demos/units/destroy.py",
                "@@ -61,3 +61,3 @@ if __name__ == '__main__':",
                "     # Build the client and connect to the server",
                "-    client = KMIPProxy(config=config)",
                "+    client = KMIPProxy(config=config, config_file=opts.config_file)",
                "     client.open()",
                "diff --git a/kmip/demos/units/discover_versions.py b/kmip/demos/units/discover_versions.py",
                "index ad9a662..4d18087 100644",
                "--- a/kmip/demos/units/discover_versions.py",
                "+++ b/kmip/demos/units/discover_versions.py",
                "@@ -47,3 +47,3 @@ if __name__ == '__main__':",
                "     # Build the client and connect to the server",
                "-    client = KMIPProxy(config=config)",
                "+    client = KMIPProxy(config=config, config_file=opts.config_file)",
                "     client.open()",
                "diff --git a/kmip/demos/units/get.py b/kmip/demos/units/get.py",
                "index db1cc0f..8db8c83 100644",
                "--- a/kmip/demos/units/get.py",
                "+++ b/kmip/demos/units/get.py",
                "@@ -79,3 +79,3 @@ if __name__ == '__main__':",
                "     # Build the client and connect to the server",
                "-    client = KMIPProxy(config=config)",
                "+    client = KMIPProxy(config=config, config_file=opts.config_file)",
                "     client.open()",
                "diff --git a/kmip/demos/units/locate.py b/kmip/demos/units/locate.py",
                "index 1e882ac..7eb6057 100644",
                "--- a/kmip/demos/units/locate.py",
                "+++ b/kmip/demos/units/locate.py",
                "@@ -66,3 +66,3 @@ if __name__ == '__main__':",
                "     # Build the client and connect to the server",
                "-    client = KMIPProxy(config=config)",
                "+    client = KMIPProxy(config=config, config_file=opts.config_file)",
                "     client.open()",
                "diff --git a/kmip/demos/units/query.py b/kmip/demos/units/query.py",
                "index 144d86d..298c003 100644",
                "--- a/kmip/demos/units/query.py",
                "+++ b/kmip/demos/units/query.py",
                "@@ -58,3 +58,3 @@ if __name__ == '__main__':",
                "     # Build the client and connect to the server",
                "-    client = KMIPProxy(config=config)",
                "+    client = KMIPProxy(config=config, config_file=opts.config_file)",
                "     client.open()",
                "diff --git a/kmip/demos/units/register.py b/kmip/demos/units/register.py",
                "index 6f177f7..05d4f1a 100644",
                "--- a/kmip/demos/units/register.py",
                "+++ b/kmip/demos/units/register.py",
                "@@ -74,3 +74,3 @@ if __name__ == '__main__':",
                "     # disconnect from the server",
                "-    client = KMIPProxy(config=config)",
                "+    client = KMIPProxy(config=config, config_file=opts.config_file)",
                "diff --git a/kmip/demos/units/revoke.py b/kmip/demos/units/revoke.py",
                "index 800918b..b569b98 100644",
                "--- a/kmip/demos/units/revoke.py",
                "+++ b/kmip/demos/units/revoke.py",
                "@@ -43,3 +43,3 @@ if __name__ == '__main__':",
                "     # Build the client and connect to the server",
                "-    client = KMIPProxy(config=config)",
                "+    client = KMIPProxy(config=config, config_file=opts.config_file)",
                "     client.open()",
                "diff --git a/kmip/demos/utils.py b/kmip/demos/utils.py",
                "index 7d8c686..7401162 100644",
                "--- a/kmip/demos/utils.py",
                "+++ b/kmip/demos/utils.py",
                "@@ -88,2 +88,11 @@ def build_cli_parser(operation=None):",
                "         help=\"Client configuration group to load from configuration file\")",
                "+    parser.add_option(",
                "+        \"-s\",",
                "+        \"--config-file\",",
                "+        action=\"store\",",
                "+        type=\"str\",",
                "+        default=None,",
                "+        dest=\"config_file\",",
                "+        help=\"Path to the client configuration file.\"",
                "+    )",
                "diff --git a/kmip/pie/client.py b/kmip/pie/client.py",
                "index f9fbd7a..95c6c08 100644",
                "--- a/kmip/pie/client.py",
                "+++ b/kmip/pie/client.py",
                "@@ -63,3 +63,4 @@ class ProxyKmipClient(object):",
                "                  password=None,",
                "-                 config='client'):",
                "+                 config='client',",
                "+                 config_file=None):",
                "         \"\"\"",
                "@@ -90,2 +91,5 @@ class ProxyKmipClient(object):",
                "                 Optional, defaults to the default client section, 'client'.",
                "+            config_file (string): The path to the client's configuration file.",
                "+                Optional, defaults to None.",
                "+",
                "         \"\"\"",
                "@@ -106,3 +110,5 @@ class ProxyKmipClient(object):",
                "             password=password,",
                "-            config=config)",
                "+            config=config,",
                "+            config_file=config_file",
                "+        )",
                "diff --git a/kmip/services/kmip_client.py b/kmip/services/kmip_client.py",
                "index f4e861a..547190e 100644",
                "--- a/kmip/services/kmip_client.py",
                "+++ b/kmip/services/kmip_client.py",
                "@@ -61,2 +61,3 @@ import logging.config",
                " import os",
                "+import six",
                " import socket",
                "@@ -75,3 +76,4 @@ class KMIPProxy:",
                "                  suppress_ragged_eofs=None,",
                "-                 username=None, password=None, timeout=30, config='client'):",
                "+                 username=None, password=None, timeout=30, config='client',",
                "+                 config_file=None):",
                "         self.logger = logging.getLogger(__name__)",
                "@@ -80,2 +82,13 @@ class KMIPProxy:",
                "+        if config_file:",
                "+            if not isinstance(config_file, six.string_types):",
                "+                raise ValueError(",
                "+                    \"The client configuration file argument must be a string.\"",
                "+                )",
                "+            if not os.path.exists(config_file):",
                "+                raise ValueError(",
                "+                    \"The client configuration file '{}' does not \"",
                "+                    \"exist.\".format(config_file)",
                "+                )",
                "+",
                "         self._set_variables(host, port, keyfile, certfile,",
                "@@ -83,3 +96,3 @@ class KMIPProxy:",
                "                             do_handshake_on_connect, suppress_ragged_eofs,",
                "-                            username, password, timeout)",
                "+                            username, password, timeout, config_file)",
                "         self.batch_items = []",
                "@@ -1555,4 +1568,4 @@ class KMIPProxy:",
                "                        do_handshake_on_connect, suppress_ragged_eofs,",
                "-                       username, password, timeout):",
                "-        conf = ConfigHelper()",
                "+                       username, password, timeout, config_file):",
                "+        conf = ConfigHelper(config_file)",
                "diff --git a/kmip/tests/unit/services/test_kmip_client.py b/kmip/tests/unit/services/test_kmip_client.py",
                "index a4c8b17..c9c7c95 100644",
                "--- a/kmip/tests/unit/services/test_kmip_client.py",
                "+++ b/kmip/tests/unit/services/test_kmip_client.py",
                "@@ -98,2 +98,28 @@ class TestKMIPClient(TestCase):",
                "+    def test_init_with_invalid_config_file_value(self):",
                "+        \"\"\"",
                "+        Test that the right error is raised when an invalid configuration file",
                "+        value is provided to the client.",
                "+        \"\"\"",
                "+        kwargs = {'config_file': 1}",
                "+        self.assertRaisesRegexp(",
                "+            ValueError,",
                "+            \"The client configuration file argument must be a string.\",",
                "+            KMIPProxy,",
                "+            **kwargs",
                "+        )",
                "+",
                "+    def test_init_with_invalid_config_file_path(self):",
                "+        \"\"\"",
                "+        Test that the right error is raised when an invalid configuration file",
                "+        path is provided to the client.",
                "+        \"\"\"",
                "+        kwargs = {'config_file': 'invalid'}",
                "+        self.assertRaisesRegexp(",
                "+            ValueError,",
                "+            \"The client configuration file 'invalid' does not exist.\",",
                "+            KMIPProxy,",
                "+            **kwargs",
                "+        )",
                "+",
                "     def test_close(self):",
                "@@ -648,9 +674,17 @@ class TestKMIPClient(TestCase):",
                "-        self.client._set_variables(host=host_list_string,",
                "-                                   port=None, keyfile=None, certfile=None,",
                "-                                   cert_reqs=None, ssl_version=None,",
                "-                                   ca_certs=None,",
                "-                                   do_handshake_on_connect=False,",
                "-                                   suppress_ragged_eofs=None, username=None,",
                "-                                   password=None, timeout=None)",
                "+        self.client._set_variables(",
                "+            host=host_list_string,",
                "+            port=None,",
                "+            keyfile=None,",
                "+            certfile=None,",
                "+            cert_reqs=None,",
                "+            ssl_version=None,",
                "+            ca_certs=None,",
                "+            do_handshake_on_connect=False,",
                "+            suppress_ragged_eofs=None,",
                "+            username=None,",
                "+            password=None,",
                "+            timeout=None,",
                "+            config_file=None",
                "+        )",
                "         self.assertEqual(host_list_expected, self.client.host_list)"
            ],
            "changed_files": [
                "kmip/core/config_helper.py",
                "kmip/demos/pie/create.py",
                "kmip/demos/pie/create_key_pair.py",
                "kmip/demos/pie/decrypt.py",
                "kmip/demos/pie/derive_key.py",
                "kmip/demos/pie/destroy.py",
                "kmip/demos/pie/encrypt.py",
                "kmip/demos/pie/get.py",
                "kmip/demos/pie/get_attribute_list.py",
                "kmip/demos/pie/locate.py",
                "kmip/demos/pie/mac.py",
                "kmip/demos/pie/register_certificate.py",
                "kmip/demos/pie/register_opaque_object.py",
                "kmip/demos/pie/register_private_key.py",
                "kmip/demos/pie/register_public_key.py",
                "kmip/demos/pie/register_secret_data.py",
                "kmip/demos/pie/register_symmetric_key.py",
                "kmip/demos/pie/sign.py",
                "kmip/demos/pie/signature_verify.py",
                "kmip/demos/units/activate.py",
                "kmip/demos/units/create.py",
                "kmip/demos/units/create_key_pair.py",
                "kmip/demos/units/destroy.py",
                "kmip/demos/units/discover_versions.py",
                "kmip/demos/units/get.py",
                "kmip/demos/units/locate.py",
                "kmip/demos/units/query.py",
                "kmip/demos/units/register.py",
                "kmip/demos/units/revoke.py",
                "kmip/demos/utils.py",
                "kmip/pie/client.py",
                "kmip/services/kmip_client.py",
                "kmip/tests/unit/services/test_kmip_client.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.8.0",
                "v0.9.0",
                "v0.9.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: client",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: client, version",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "2e6384a067929a185fed50fdcb7768f4aff4832b",
            "repository": "https://github.com/OpenKMIP/PyKMIP",
            "timestamp": 1523891012,
            "hunks": 26,
            "message": "Add server support for customizing the backend storage file This change updates the server, adding in support for customizing the backend storage file used to store all server data. The server currently uses a simple SQLite database for storage. Prior versions of the server kept this database file in /tmp, to emphasize the testing focus of the server. This change loosens that restriction, now allowing users to customize where the database file lives. A new configuration option, 'database_path', has been added that will override the default /tmp location for the database file. This value can also be passed in if invoking the server via script using the '-d' flag.",
            "diff": [
                "diff --git a/kmip/services/server/config.py b/kmip/services/server/config.py",
                "index 383378f..ea29a1d 100644",
                "--- a/kmip/services/server/config.py",
                "+++ b/kmip/services/server/config.py",
                "@@ -53,3 +53,4 @@ class KmipServerConfig(object):",
                "             'tls_cipher_suites',",
                "-            'logging_level'",
                "+            'logging_level',",
                "+            'database_path'",
                "         ]",
                "@@ -95,4 +96,6 @@ class KmipServerConfig(object):",
                "             self._set_tls_cipher_suites(value)",
                "-        else:",
                "+        elif setting == 'logging_level':",
                "             self._set_logging_level(value)",
                "+        else:",
                "+            self._set_database_path(value)",
                "@@ -181,2 +184,4 @@ class KmipServerConfig(object):",
                "             )",
                "+        if parser.has_option('server', 'database_path'):",
                "+            self._set_database_path(parser.get('server', 'database_path'))",
                "@@ -336 +341,12 @@ class KmipServerConfig(object):",
                "             )",
                "+",
                "+    def _set_database_path(self, value):",
                "+        if not value:",
                "+            self.settings['database_path'] = None",
                "+        elif isinstance(value, six.string_types):",
                "+            self.settings['database_path'] = value",
                "+        else:",
                "+            raise exceptions.ConfigurationError(",
                "+                \"The database path, if specified, must be a valid path to a \"",
                "+                \"SQLite database file.\"",
                "+            )",
                "diff --git a/kmip/services/server/engine.py b/kmip/services/server/engine.py",
                "index fcda637..8c1e306 100644",
                "--- a/kmip/services/server/engine.py",
                "+++ b/kmip/services/server/engine.py",
                "@@ -76,3 +76,3 @@ class KmipEngine(object):",
                "-    def __init__(self, policies=None):",
                "+    def __init__(self, policies=None, database_path=None):",
                "         \"\"\"",
                "@@ -84,2 +84,5 @@ class KmipEngine(object):",
                "                 Optional, defaults to None.",
                "+            database_path (string): The path to the SQLite database file",
                "+                used to store all server data. Optional, defaults to None.",
                "+                If none, database path defaults to '/tmp/pykmip.database'.",
                "         \"\"\"",
                "@@ -89,4 +92,8 @@ class KmipEngine(object):",
                "+        self.database_path = 'sqlite:///{}'.format(database_path)",
                "+        if not database_path:",
                "+            self.database_path = 'sqlite:////tmp/pykmip.database'",
                "+",
                "         self._data_store = sqlalchemy.create_engine(",
                "-            'sqlite:////tmp/pykmip.database',",
                "+            self.database_path,",
                "             echo=False,",
                "diff --git a/kmip/services/server/server.py b/kmip/services/server/server.py",
                "index c99572a..6c0622e 100644",
                "--- a/kmip/services/server/server.py",
                "+++ b/kmip/services/server/server.py",
                "@@ -47,2 +47,3 @@ class KmipServer(object):",
                "+    # TODO (peter-hamilton) Move to using **kwargs for all server parameters.",
                "     def __init__(",
                "@@ -61,3 +62,4 @@ class KmipServer(object):",
                "             logging_level=None,",
                "-            live_policies=False",
                "+            live_policies=False,",
                "+            database_path=None",
                "     ):",
                "@@ -125,2 +127,4 @@ class KmipServer(object):",
                "                 to False.",
                "+            database_path (string): The path to the server's SQLite database",
                "+                file. Optional, defaults to None.",
                "         \"\"\"",
                "@@ -141,3 +145,4 @@ class KmipServer(object):",
                "             tls_cipher_suites,",
                "-            logging_level",
                "+            logging_level,",
                "+            database_path",
                "         )",
                "@@ -190,3 +195,4 @@ class KmipServer(object):",
                "             tls_cipher_suites=None,",
                "-            logging_level=None",
                "+            logging_level=None,",
                "+            database_path=None",
                "     ):",
                "@@ -221,2 +227,4 @@ class KmipServer(object):",
                "             self.config.set_setting('logging_level', logging_level)",
                "+        if database_path:",
                "+            self.config.set_setting('database_path', database_path)",
                "@@ -254,3 +262,4 @@ class KmipServer(object):",
                "         self._engine = engine.KmipEngine(",
                "-            policies=self.policies",
                "+            policies=self.policies,",
                "+            database_path=self.config.settings.get('database_path')",
                "         )",
                "@@ -606,2 +615,14 @@ def build_argument_parser():",
                "     )",
                "+    parser.add_option(",
                "+        \"-d\",",
                "+        \"--database_path\",",
                "+        action=\"store\",",
                "+        type=\"str\",",
                "+        default=None,",
                "+        dest=\"database_path\",",
                "+        help=(",
                "+            \"A string representing a path to the server's SQLite database \"",
                "+            \"file. Optional, defaults to None.\"",
                "+        ),",
                "+    )",
                "@@ -638,2 +659,4 @@ def main(args=None):",
                "         kwargs['logging_level'] = opts.logging_level",
                "+    if opts.database_path:",
                "+        kwargs['database_path'] = opts.database_path",
                "diff --git a/kmip/tests/unit/services/server/test_config.py b/kmip/tests/unit/services/server/test_config.py",
                "index fe9ea5d..0a5d804 100644",
                "--- a/kmip/tests/unit/services/server/test_config.py",
                "+++ b/kmip/tests/unit/services/server/test_config.py",
                "@@ -70,2 +70,3 @@ class TestKmipServerConfig(testtools.TestCase):",
                "         c._set_logging_level = mock.MagicMock()",
                "+        c._set_database_path = mock.MagicMock()",
                "@@ -117,2 +118,5 @@ class TestKmipServerConfig(testtools.TestCase):",
                "+        c.set_setting('database_path', '/var/pykmip/pykmip.db')",
                "+        c._set_database_path.assert_called_once_with('/var/pykmip/pykmip.db')",
                "+",
                "     def test_load_settings(self):",
                "@@ -234,2 +238,3 @@ class TestKmipServerConfig(testtools.TestCase):",
                "         c._set_logging_level = mock.MagicMock()",
                "+        c._set_database_path = mock.MagicMock()",
                "@@ -252,2 +257,3 @@ class TestKmipServerConfig(testtools.TestCase):",
                "         parser.set('server', 'logging_level', 'ERROR')",
                "+        parser.set('server', 'database_path', '/var/pykmip/pykmip.db')",
                "@@ -269,2 +275,3 @@ class TestKmipServerConfig(testtools.TestCase):",
                "         c._set_logging_level.assert_called_once_with('ERROR')",
                "+        c._set_database_path.assert_called_once_with('/var/pykmip/pykmip.db')",
                "@@ -821 +828,53 @@ class TestKmipServerConfig(testtools.TestCase):",
                "         )",
                "+",
                "+    def test_set_database_path(self):",
                "+        \"\"\"",
                "+        Test that the database_path configuration property can be set",
                "+        correctly.",
                "+        \"\"\"",
                "+        c = config.KmipServerConfig()",
                "+        c._logger = mock.MagicMock()",
                "+",
                "+        self.assertNotIn('database_path', c.settings.keys())",
                "+",
                "+        with mock.patch('os.path.exists') as os_mock:",
                "+            os_mock.return_value = True",
                "+            c._set_database_path('/test/path/database.db')",
                "+",
                "+        self.assertIn('database_path', c.settings.keys())",
                "+        self.assertEqual(",
                "+            '/test/path/database.db',",
                "+            c.settings.get('database_path')",
                "+        )",
                "+",
                "+    def test_set_database_path_default(self):",
                "+        \"\"\"",
                "+        Test that the database_path configuration property can be set correctly",
                "+        without specifying a value.",
                "+        \"\"\"",
                "+        c = config.KmipServerConfig()",
                "+        c._logger = mock.MagicMock()",
                "+",
                "+        self.assertNotIn('database_path', c.settings.keys())",
                "+",
                "+        c._set_database_path(None)",
                "+        self.assertIn('database_path', c.settings.keys())",
                "+        self.assertEqual(None, c.settings.get('database_path'))",
                "+",
                "+    def test_set_database_path_invalid_value(self):",
                "+        \"\"\"",
                "+        Test that the right error is raised when an invalid value is used to",
                "+        set the database_path configuration property.",
                "+        \"\"\"",
                "+        c = config.KmipServerConfig()",
                "+        c._logger = mock.MagicMock()",
                "+",
                "+        self.assertNotIn('database_path', c.settings.keys())",
                "+",
                "+        args = (1, )",
                "+        self.assertRaises(",
                "+            exceptions.ConfigurationError,",
                "+            c._set_database_path,",
                "+            *args",
                "+        )",
                "+        self.assertNotEqual(1, c.settings.get('database_path'))",
                "diff --git a/kmip/tests/unit/services/server/test_server.py b/kmip/tests/unit/services/server/test_server.py",
                "index e576d06..d450e09 100644",
                "--- a/kmip/tests/unit/services/server/test_server.py",
                "+++ b/kmip/tests/unit/services/server/test_server.py",
                "@@ -123,3 +123,4 @@ class TestKmipServer(testtools.TestCase):",
                "             'TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA',",
                "-            'DEBUG'",
                "+            'DEBUG',",
                "+            '/var/pykmip/pykmip.db'",
                "         )",
                "@@ -158,2 +159,6 @@ class TestKmipServer(testtools.TestCase):",
                "         s.config.set_setting.assert_any_call('logging_level', 'DEBUG')",
                "+        s.config.set_setting.assert_any_call(",
                "+            'database_path',",
                "+            '/var/pykmip/pykmip.db'",
                "+        )"
            ],
            "changed_files": [
                "kmip/services/server/config.py",
                "kmip/services/server/engine.py",
                "kmip/services/server/server.py",
                "kmip/tests/unit/services/server/test_config.py",
                "kmip/tests/unit/services/server/test_server.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.8.0",
                "v0.9.0",
                "v0.9.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: server, version",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: server",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "be436ba519a266626a31c658445730d9198a2b9f",
            "repository": "https://github.com/OpenKMIP/PyKMIP",
            "timestamp": 1523846491,
            "hunks": 0,
            "message": "Merge pull request #421 from OpenKMIP/feat/add-rekey-client Add Rekey support to the KMIPProxy client",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "421": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.8.0",
                "v0.9.0",
                "v0.9.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: client, openkmip, open",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 421",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ea7da73b4fb18a001e91c9509164532482aad055",
            "repository": "https://github.com/OpenKMIP/PyKMIP",
            "timestamp": 1523905123,
            "hunks": 0,
            "message": "Merge pull request #423 from OpenKMIP/feat/add-db-file-config Add server support for customizing the backend storage file",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "423": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.8.0",
                "v0.9.0",
                "v0.9.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: openkmip, server, open",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 423",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f1ccdf9c5a6a068dc25aae0936e68e9d21aa0a09",
            "repository": "https://github.com/OpenKMIP/PyKMIP",
            "timestamp": 1523899970,
            "hunks": 0,
            "message": "Merge pull request #422 from OpenKMIP/feat/add-rekey-pie Add Rekey support to the ProxyKmipClient",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "422": "Crash in client after rekey operation #424"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.8.0",
                "v0.9.0",
                "v0.9.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: client, openkmip, open",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 422",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "583559195f7e983356d938908261dd7137ee6f05",
            "repository": "https://github.com/OpenKMIP/PyKMIP",
            "timestamp": 1523970344,
            "hunks": 0,
            "message": "Merge pull request #426 from OpenKMIP/feat/add-check-to-factory Add Check support to the payload factories",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "426": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.8.0",
                "v0.9.0",
                "v0.9.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: openkmip, open",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 426",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "72280f8ddce018947c504354382522ccfd066624",
            "repository": "https://github.com/OpenKMIP/PyKMIP",
            "timestamp": 1523939135,
            "hunks": 0,
            "message": "Merge pull request #425 from OpenKMIP/feat/add-rekey-to-factory Add Rekey support to the payload factories",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "425": "Crash in client after rekey operation #424"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.8.0",
                "v0.9.0",
                "v0.9.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: openkmip, open",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 425",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2dacdf7bd4229114ec247228dcef8a2dd05eb055",
            "repository": "https://github.com/OpenKMIP/PyKMIP",
            "timestamp": 1524625833,
            "hunks": 0,
            "message": "Merge pull request #431 from OpenKMIP/bug/fix-cert-script Fix bug with writing bytes in the certificate script",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "431": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.8.0",
                "v0.9.0",
                "v0.9.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: openkmip, open",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 431",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "1f172ee08daaf8711555b9f651bf76642e57ca4b",
            "repository": "https://github.com/OpenKMIP/PyKMIP",
            "timestamp": 1523995400,
            "hunks": 0,
            "message": "Merge pull request #427 from OpenKMIP/feat/add-client-config-file Add client support for custom configuration file paths",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "427": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.8.0",
                "v0.9.0",
                "v0.9.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: client, openkmip, open",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 427",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "cf0ec6c42907c7242142b5668e6def15c5b4a924",
            "repository": "https://github.com/OpenKMIP/PyKMIP",
            "timestamp": 1523849917,
            "hunks": 4,
            "message": "Add Rekey support to the payload factories This change adds Rekey payload support to the payload factories. Payload factory unit tests have been updated to account for the change. Fixes #424",
            "diff": [
                "diff --git a/kmip/core/factories/payloads/request.py b/kmip/core/factories/payloads/request.py",
                "index 4b4a8f8..e2b18b2 100644",
                "--- a/kmip/core/factories/payloads/request.py",
                "+++ b/kmip/core/factories/payloads/request.py",
                "@@ -33,2 +33,5 @@ class RequestPayloadFactory(PayloadFactory):",
                "+    def _create_rekey_payload(self):",
                "+        return payloads.RekeyRequestPayload()",
                "+",
                "     def _create_rekey_key_pair_payload(self):",
                "diff --git a/kmip/core/factories/payloads/response.py b/kmip/core/factories/payloads/response.py",
                "index 245711b..3b20df5 100644",
                "--- a/kmip/core/factories/payloads/response.py",
                "+++ b/kmip/core/factories/payloads/response.py",
                "@@ -33,2 +33,5 @@ class ResponsePayloadFactory(PayloadFactory):",
                "+    def _create_rekey_payload(self):",
                "+        return payloads.RekeyResponsePayload()",
                "+",
                "     def _create_rekey_key_pair_payload(self):",
                "diff --git a/kmip/tests/unit/core/factories/payloads/test_request.py b/kmip/tests/unit/core/factories/payloads/test_request.py",
                "index 344a584..2ef763c 100644",
                "--- a/kmip/tests/unit/core/factories/payloads/test_request.py",
                "+++ b/kmip/tests/unit/core/factories/payloads/test_request.py",
                "@@ -55,3 +55,4 @@ class TestRequestPayloadFactory(testtools.TestCase):",
                "     def test_create_rekey_payload(self):",
                "-        self._test_not_implemented(self.factory.create, enums.Operation.REKEY)",
                "+        payload = self.factory.create(enums.Operation.REKEY)",
                "+        self._test_payload_type(payload, payloads.RekeyRequestPayload)",
                "diff --git a/kmip/tests/unit/core/factories/payloads/test_response.py b/kmip/tests/unit/core/factories/payloads/test_response.py",
                "index f808547..071b509 100644",
                "--- a/kmip/tests/unit/core/factories/payloads/test_response.py",
                "+++ b/kmip/tests/unit/core/factories/payloads/test_response.py",
                "@@ -55,3 +55,4 @@ class TestResponsePayloadFactory(testtools.TestCase):",
                "     def test_create_rekey_payload(self):",
                "-        self._test_not_implemented(self.factory.create, enums.Operation.REKEY)",
                "+        payload = self.factory.create(enums.Operation.REKEY)",
                "+        self._test_payload_type(payload, payloads.RekeyResponsePayload)"
            ],
            "changed_files": [
                "kmip/core/factories/payloads/request.py",
                "kmip/core/factories/payloads/response.py",
                "kmip/tests/unit/core/factories/payloads/test_request.py",
                "kmip/tests/unit/core/factories/payloads/test_response.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "424": "Add Rekey support to the payload factories #425"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.8.0",
                "v0.9.0",
                "v0.9.1"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 424",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "641f6867f89f5c58dd7c0318324afa54ac4c6bc2",
            "repository": "https://github.com/OpenKMIP/PyKMIP",
            "timestamp": 1524620019,
            "hunks": 12,
            "message": "Fix bug with writing bytes in the certificate script This change fixes a bug in the bin/create_certificates script, enabling binary writing when creating the certificate and key files.",
            "diff": [
                "diff --git a/bin/create_certificates.py b/bin/create_certificates.py",
                "index ae943ab..852033d 100755",
                "--- a/bin/create_certificates.py",
                "+++ b/bin/create_certificates.py",
                "@@ -127,3 +127,3 @@ def main():",
                "-    with open(\"root_key.pem\", \"w\") as f:",
                "+    with open(\"root_key.pem\", \"wb\") as f:",
                "         f.write(root_key.private_bytes(",
                "@@ -133,3 +133,3 @@ def main():",
                "         ))",
                "-    with open(\"root_certificate.pem\", \"w\") as f:",
                "+    with open(\"root_certificate.pem\", \"wb\") as f:",
                "         f.write(",
                "@@ -139,3 +139,3 @@ def main():",
                "         )",
                "-    with open(\"server_key.pem\", \"w\") as f:",
                "+    with open(\"server_key.pem\", \"wb\") as f:",
                "         f.write(server_key.private_bytes(",
                "@@ -145,3 +145,3 @@ def main():",
                "         ))",
                "-    with open(\"server_certificate.pem\", \"w\") as f:",
                "+    with open(\"server_certificate.pem\", \"wb\") as f:",
                "         f.write(",
                "@@ -151,3 +151,3 @@ def main():",
                "         )",
                "-    with open(\"client_key_john_doe.pem\", \"w\") as f:",
                "+    with open(\"client_key_john_doe.pem\", \"wb\") as f:",
                "         f.write(john_doe_client_key.private_bytes(",
                "@@ -157,3 +157,3 @@ def main():",
                "         ))",
                "-    with open(\"client_certificate_john_doe.pem\", \"w\") as f:",
                "+    with open(\"client_certificate_john_doe.pem\", \"wb\") as f:",
                "         f.write(",
                "@@ -163,3 +163,3 @@ def main():",
                "         )",
                "-    with open(\"client_key_jane_doe.pem\", \"w\") as f:",
                "+    with open(\"client_key_jane_doe.pem\", \"wb\") as f:",
                "         f.write(jane_doe_client_key.private_bytes(",
                "@@ -169,3 +169,3 @@ def main():",
                "         ))",
                "-    with open(\"client_certificate_jane_doe.pem\", \"w\") as f:",
                "+    with open(\"client_certificate_jane_doe.pem\", \"wb\") as f:",
                "         f.write(",
                "@@ -175,3 +175,3 @@ def main():",
                "         )",
                "-    with open(\"client_key_john_smith.pem\", \"w\") as f:",
                "+    with open(\"client_key_john_smith.pem\", \"wb\") as f:",
                "         f.write(john_smith_client_key.private_bytes(",
                "@@ -181,3 +181,3 @@ def main():",
                "         ))",
                "-    with open(\"client_certificate_john_smith.pem\", \"w\") as f:",
                "+    with open(\"client_certificate_john_smith.pem\", \"wb\") as f:",
                "         f.write(",
                "@@ -187,3 +187,3 @@ def main():",
                "         )",
                "-    with open(\"client_key_jane_smith.pem\", \"w\") as f:",
                "+    with open(\"client_key_jane_smith.pem\", \"wb\") as f:",
                "         f.write(jane_smith_client_key.private_bytes(",
                "@@ -193,3 +193,3 @@ def main():",
                "         ))",
                "-    with open(\"client_certificate_jane_smith.pem\", \"w\") as f:",
                "+    with open(\"client_certificate_jane_smith.pem\", \"wb\") as f:",
                "         f.write("
            ],
            "changed_files": [
                "bin/create_certificates.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.8.0",
                "v0.9.0",
                "v0.9.1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "664c9964c8ca147bfa4841f2055442ce6f4b490f",
            "repository": "https://github.com/OpenKMIP/PyKMIP",
            "timestamp": 1523939540,
            "hunks": 4,
            "message": "Add Check support to the payload factories This change adds Check payload support to the payload factories. Payload factory unit tests have been updated to account for the change.",
            "diff": [
                "diff --git a/kmip/core/factories/payloads/request.py b/kmip/core/factories/payloads/request.py",
                "index e2b18b2..4d0c9f4 100644",
                "--- a/kmip/core/factories/payloads/request.py",
                "+++ b/kmip/core/factories/payloads/request.py",
                "@@ -42,2 +42,5 @@ class RequestPayloadFactory(PayloadFactory):",
                "+    def _create_check_payload(self):",
                "+        return payloads.CheckRequestPayload()",
                "+",
                "     def _create_get_payload(self):",
                "diff --git a/kmip/core/factories/payloads/response.py b/kmip/core/factories/payloads/response.py",
                "index 3b20df5..3b9c5a5 100644",
                "--- a/kmip/core/factories/payloads/response.py",
                "+++ b/kmip/core/factories/payloads/response.py",
                "@@ -42,2 +42,5 @@ class ResponsePayloadFactory(PayloadFactory):",
                "+    def _create_check_payload(self):",
                "+        return payloads.CheckResponsePayload()",
                "+",
                "     def _create_get_payload(self):",
                "diff --git a/kmip/tests/unit/core/factories/payloads/test_request.py b/kmip/tests/unit/core/factories/payloads/test_request.py",
                "index 2ef763c..035d204 100644",
                "--- a/kmip/tests/unit/core/factories/payloads/test_request.py",
                "+++ b/kmip/tests/unit/core/factories/payloads/test_request.py",
                "@@ -79,3 +79,4 @@ class TestRequestPayloadFactory(testtools.TestCase):",
                "     def test_create_check_payload(self):",
                "-        self._test_not_implemented(self.factory.create, enums.Operation.CHECK)",
                "+        payload = self.factory.create(enums.Operation.CHECK)",
                "+        self._test_payload_type(payload, payloads.CheckRequestPayload)",
                "diff --git a/kmip/tests/unit/core/factories/payloads/test_response.py b/kmip/tests/unit/core/factories/payloads/test_response.py",
                "index 071b509..46af787 100644",
                "--- a/kmip/tests/unit/core/factories/payloads/test_response.py",
                "+++ b/kmip/tests/unit/core/factories/payloads/test_response.py",
                "@@ -79,3 +79,4 @@ class TestResponsePayloadFactory(testtools.TestCase):",
                "     def test_create_check_payload(self):",
                "-        self._test_not_implemented(self.factory.create, enums.Operation.CHECK)",
                "+        payload = self.factory.create(enums.Operation.CHECK)",
                "+        self._test_payload_type(payload, payloads.CheckResponsePayload)"
            ],
            "changed_files": [
                "kmip/core/factories/payloads/request.py",
                "kmip/core/factories/payloads/response.py",
                "kmip/tests/unit/core/factories/payloads/test_request.py",
                "kmip/tests/unit/core/factories/payloads/test_response.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.8.0",
                "v0.9.0",
                "v0.9.1"
            ],
            "matched_rules": []
        }
    ]
}
