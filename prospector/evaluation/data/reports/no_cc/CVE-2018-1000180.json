{
    "advisory_record": {
        "cve_id": "CVE-2018-1000180",
        "description": "Bouncy Castle BC 1.54 - 1.59, BC-FJA 1.0.0, BC-FJA 1.0.1 and earlier have a flaw in the Low-level interface to RSA key pair generator, specifically RSA Key Pairs generated in low-level API with added certainty may have less M-R tests than expected. This appears to be fixed in versions BC 1.60 beta 4 and later, BC-FJA 1.0.2 and later.",
        "reserved_timestamp": 1525046400,
        "published_timestamp": 1528203600,
        "updated_timestamp": 1623691203,
        "repository_url": null,
        "references": {
            "": 275,
            "https://access.redhat.com/support/": 46,
            "https://access.redhat.com/downloads/": 37,
            "https://access.redhat.com/labs/": 28,
            "https://access.redhat.com/errata/": 27,
            "https://access.redhat.com/security/security-updates/#/cve": 19,
            "https://access.redhat.com/management/": 18,
            "https://access.redhat.com/": 18,
            "https://access.redhat.com/documentation": 18,
            "https://access.redhat.com/product-life-cycles/": 18,
            "https://access.redhat.com/security": 18,
            "https://access.redhat.com/security/security-updates/#/security-advisories": 18,
            "https://access.redhat.com/support/contact/": 18,
            "https://status.redhat.com": 18,
            "https://access.redhat.com/products/red-hat-enterprise-linux/": 16,
            "https://access.redhat.com/products/red-hat-openshift-container-platform": 16,
            "https://access.redhat.com/products/red-hat-ansible-automation-platform/": 16,
            "https://access.redhat.com/products/": 16,
            "https://access.redhat.com/downloads/content/package-browser": 9,
            "https://catalog.redhat.com/software/containers/explore/": 9,
            "https://access.redhat.com/articles/1202803": 9,
            "https://access.redhat.com/search/?q=*&p=1&rows=10&documentKind=Solution": 9,
            "https://access.redhat.com/search/?q=*&p=1&rows=10&documentKind=Article": 9,
            "https://access.redhat.com/documentation/en/red_hat_enterprise_linux": 9,
            "https://access.redhat.com/documentation/en/openshift_container_platform": 9,
            "https://access.redhat.com/documentation/en/red_hat_ansible_automation_platform": 9,
            "https://access.redhat.com/documentation/": 9,
            "https://access.redhat.com/security/": 9,
            "https://access.redhat.com/security/vulnerabilities": 9,
            "https://access.redhat.com/security/data": 9,
            "https://access.redhat.com/security/security-updates/#/security-labs": 9,
            "https://access.redhat.com/security/updates/backporting/": 9,
            "https://access.redhat.com/support/cases/": 9,
            "https://access.redhat.com/support/cases/#/troubleshoot": 9,
            "https://access.redhat.com/community": 9,
            "https://access.redhat.com/community/": 9,
            "https://access.redhat.com/discussions/": 9,
            "https://access.redhat.com/announcements/": 9,
            "https://access.redhat.com/accelerators/": 9,
            "https://access.redhat.com/jbossnetwork/restricted/listSoftware.html": 9,
            "https://cloud.redhat.com/insights": 9,
            "https://access.redhat.com/changeLanguage?language=en": 9,
            "https://access.redhat.com/changeLanguage?language=ko": 9,
            "https://access.redhat.com/changeLanguage?language=ja": 9,
            "https://access.redhat.com/changeLanguage?language=zh_CN": 9,
            "https://redhat.com/en": 9,
            "https://twitter.com/RedHat": 9,
            "https://access.redhat.com/management": 9,
            "https://access.redhat.com/support": 9,
            "https://access.redhat.com/support/customer-service": 9,
            "https://access.redhat.com/articles/33844": 9,
            "https://access.redhat.com/help/login_assistance": 9,
            "https://www.redhat.com/en/trust": 9,
            "https://www.redhat.com/en/about/browser-support": 9,
            "https://www.redhat.com/en/about/digital-accessibility": 9,
            "https://access.redhat.com/recognition/": 9,
            "https://access.redhat.com/help/colophon/": 9,
            "https://www.redhat.com/": 9,
            "http://developers.redhat.com/": 9,
            "https://connect.redhat.com/": 9,
            "https://cloud.redhat.com/": 9,
            "https://access.redhat.com/subscription-value": 9,
            "https://www.redhat.com/about/": 9,
            "http://jobs.redhat.com": 9,
            "https://redhat.com/en/about/company": 9,
            "https://redhat.com/en/jobs": 9,
            "https://redhat.com/en/events": 9,
            "https://redhat.com/en/about/office-locations": 9,
            "https://redhat.com/en/contact": 9,
            "https://redhat.com/en/blog": 9,
            "https://redhat.com/en/about/our-culture/diversity-equity-inclusion": 9,
            "https://coolstuff.redhat.com/": 9,
            "https://www.redhat.com/en/summit": 9,
            "https://redhat.com/en/about/privacy-policy": 9,
            "https://redhat.com/en/about/terms-use": 9,
            "https://redhat.com/en/about/all-policies-guidelines": 9,
            "https://redhat.com/en/about/digital-accessibility": 9,
            "https://access.redhat.com/changeLanguage?language=fr": 7,
            "https://access.redhat.com/products/red-hat-satellite/": 7,
            "https://access.redhat.com/products/red-hat-subscription-management/": 7,
            "https://access.redhat.com/products/red-hat-insights/": 7,
            "https://access.redhat.com/products/red-hat-openstack-platform/": 7,
            "https://access.redhat.com/products/red-hat-openshift-container-platform/": 7,
            "https://access.redhat.com/products/red-hat-openshift-ai/": 7,
            "https://access.redhat.com/products/openshift-dedicated-red-hat/": 7,
            "https://access.redhat.com/products/red-hat-advanced-cluster-security-for-kubernetes/": 7,
            "https://access.redhat.com/products/red-hat-advanced-cluster-management-for-kubernetes/": 7,
            "https://access.redhat.com/products/red-hat-quay/": 7,
            "https://access.redhat.com/products/red-hat-openshift-dev-spaces": 7,
            "https://access.redhat.com/products/red-hat-openshift-service-aws": 7,
            "https://access.redhat.com/products/red-hat-storage/": 7,
            "https://access.redhat.com/products/red-hat-hyperconverged-infrastructure/": 7,
            "https://access.redhat.com/products/red-hat-ceph-storage/": 7,
            "https://access.redhat.com/products/red-hat-openshift-data-foundation": 7,
            "https://access.redhat.com/products/red-hat-runtimes/": 7,
            "https://access.redhat.com/products/red-hat-jboss-enterprise-application-platform/": 7,
            "https://access.redhat.com/products/red-hat-data-grid/": 7,
            "https://access.redhat.com/products/red-hat-jboss-web-server/": 7,
            "https://access.redhat.com/products/red-hat-build-of-keycloak/": 7,
            "https://access.redhat.com/products/spring-boot/": 7,
            "https://access.redhat.com/products/nodejs/": 7,
            "https://access.redhat.com/products/quarkus/": 7,
            "https://access.redhat.com/products/red-hat-application-foundations/": 7,
            "https://access.redhat.com/products/red-hat-fuse/": 7,
            "https://access.redhat.com/products/red-hat-amq/": 7,
            "https://access.redhat.com/products/red-hat-3scale/": 7,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1588306": 7,
            "https://www.redhat.com/security/data/cve/CVE-2018-1000180.html": 7,
            "https://access.redhat.com/security/updates/classification/#important": 7,
            "https://access.redhat.com/security/team/contact/": 7,
            "commit::22467b6e8fe19717ecdf201c0cf91bacf04a55ad": 6,
            "commit::73780ac522b7795fc165630aba8d5f5729acc839": 6,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1593527": 6,
            "https://www.redhat.com/security/data/cve/CVE-2018-10862.html": 6,
            "https://www.bouncycastle.org/jira/browse/BJA-694": 5,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1573391": 5,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1595332": 5,
            "https://www.redhat.com/security/data/cve/CVE-2018-8039.html": 5,
            "https://www.redhat.com/security/data/cve/CVE-2018-10237.html": 5,
            "https://access.redhat.com/errata/RHSA-2018:2428": 4,
            "https://access.redhat.com/errata/RHSA-2018:2669": 4,
            "https://access.redhat.com/errata/RHSA-2018:2643": 4,
            "https://access.redhat.com/errata/RHSA-2018:2424": 4,
            "https://access.redhat.com/errata/RHSA-2018:2423": 4,
            "https://access.redhat.com/errata/RHSA-2018:2425": 4,
            "https://access.redhat.com/errata/RHSA-2019:0877": 4,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1515976": 4,
            "https://www.redhat.com/security/data/cve/CVE-2017-12624.html": 4,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1573045": 3,
            "https://www.redhat.com/security/data/cve/CVE-2018-1114.html": 3,
            "https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/?version=7.1": 3,
            "https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.1/html-single/installation_guide/": 3,
            "https://www.debian.org/security/2018/dsa-4233": 2,
            "https://lists.apache.org/thread.html/708d94141126eac03011144a971a6411fcac16d9c248d1d535a39451%40%3Csolr-user.lucene.apache.org%3E": 2,
            "http://www.securityfocus.com/bid/106567": 2,
            "https://www.oracle.com/security-alerts/cpuapr2020.html": 2,
            "https://www.oracle.com/technetwork/security-advisory/cpujan2019-5072801.html": 2,
            "https://www.oracle.com/technetwork/security-advisory/cpuapr2019-5072813.html": 2,
            "https://www.oracle.com/technetwork/security-advisory/cpujul2019-5072835.html": 2,
            "https://www.oracle.com/security-alerts/cpuoct2020.html": 2,
            "https://www.bountysource.com/issues/58293083-rsa-key-generation-computation-of-iterations-for-mr-primality-test": 2,
            "https://security.netapp.com/advisory/ntap-20190204-0003/": 2,
            "https://github.com/bcgit/bc-java/wiki/CVE-2018-1000180": 2,
            "https://www.oracle.com/security-alerts/cpuApr2021.html": 2,
            "commit::a47c9eff26101f2969bb2a9627ca721b135c9d47": 2,
            "https://access.redhat.com/security/updates/classification/": 2,
            "https://access.redhat.com/support/policy/updates/jboss_notes": 2,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1607624": 2,
            "https://www.redhat.com/security/data/cve/CVE-2018-10912.html": 2,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1550671": 2,
            "https://www.redhat.com/security/data/cve/CVE-2018-1067.html": 2,
            "https://access.redhat.com/articles/11258": 2,
            "https://security.netapp.com/en": 2,
            "https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax": 2,
            "https://access.redhat.com/support/policy/updates/red_hat_build_of_quarkus_notes": 2,
            "https://access.redhat.com/articles/7060671": 2,
            "https://issues.redhat.com/browse/RHSSO-1429": 1,
            "https://access.redhat.com/jbossnetwork/restricted/listSoftware.html?downloadType=securityPatches&product=core.service.rhsso&version=7.2": 1,
            "https://access.redhat.com/documentation/en-us/red_hat_single_sign_on/?version=7.2": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1091938": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1487563": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1544620": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1548909": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1559316": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1559317": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1564408": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1571050": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1572421": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1572424": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1588313": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1588314": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1588323": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1588327": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1588330": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1588688": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1588695": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1588708": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1588715": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1588721": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1597490": 1,
            "https://www.redhat.com/security/data/cve/CVE-2014-0114.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2016-5397.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2016-1000338.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2016-1000339.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2016-1000340.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2016-1000341.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2016-1000342.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2016-1000343.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2016-1000344.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2016-1000345.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2016-1000346.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2016-1000352.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2017-14063.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-1271.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-1272.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-1338.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-1339.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-8036.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-8088.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-1000129.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-1000130.html": 1,
            "https://access.redhat.com/jbossnetwork/restricted/listSoftware.html?product=jboss.fuse&downloadType=distributions&version=7.1.0": 1,
            "https://access.redhat.com/documentation/en-us/red_hat_fuse/7.1/": 1,
            "https://access.redhat.com/articles/2939351": 1,
            "https://console.redhat.com/insights/patch/advisories/RHSA-2018:2643": 1,
            "https://access.redhat.com/articles/2974891": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1609891": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1616249": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-10915.html": 1,
            "https://console.redhat.com/insights/patch/advisories/RHSA-2018:2424": 1,
            "https://console.redhat.com/insights/patch/advisories/RHSA-2018:2423": 1,
            "https://access.redhat.com/jbossnetwork/restricted/listSoftware.html?product=appplatform&downloadType=securityPatches&version=7.1": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1599434": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1666415": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1666418": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1666482": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1666484": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1666489": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1671096": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1671097": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1677341": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-10894.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-11307.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-12022.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-12023.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-14718.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-14719.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-19360.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-19361.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-19362.html": 1,
            "https://access.redhat.com/jbossnetwork/restricted/listSoftware.html?downloadType=distributions&product=catRhoar.thorntail&version=2.4.0": 1,
            "https://access.redhat.com/documentation/en-us/red_hat_openshift_application_runtimes/1/html-single/rhoar_thorntail_release_notes/": 1,
            "https://www.netapp.com/": 1,
            "https://mysupport.netapp.com": 1,
            "https://community.netapp.com": 1,
            "https://www.netapp.com/company/contact-us/": 1,
            "https://security.netapp.com": 1,
            "https://security.netapp.com/advisory/": 1,
            "https://security.netapp.com/bulletins/": 1,
            "https://security.netapp.com/contact/": 1,
            "https://security.netapp.com/policy/": 1,
            "https://security.netapp.com/resources/": 1,
            "https://security.netapp.com/certs/": 1,
            "https://security.netapp.com/advisory": 1,
            "https://security.netapp.com/advisory/ntap-20190204-0003": 1,
            "https://www.netapp.com/company/legal/privacy-policy/": 1,
            "https://nvd.nist.gov/vuln/detail/CVE-2018-1000180": 1,
            "https://nvd.nist.gov/vuln/detail/CVE-2018-1000613": 1,
            "https://www.bouncycastle.org/latest_releases.html": 1,
            "https://mysupport.netapp.com/products/ocwfa/5.0/": 1,
            "https://mysupport.netapp.com/site/downloads/": 1,
            "http://mysupport.netapp.com": 1,
            "https://security.netapp.com/advisory/NTAP-20190204-0003": 1,
            "https://www.netapp.com/forms/site-feedback/": 1,
            "https://github.com/features/actions": 1,
            "https://github.com/features/packages": 1,
            "https://github.com/features/security": 1,
            "https://github.com/features/codespaces": 1,
            "https://github.com/features/copilot": 1,
            "https://github.com/features/code-review": 1,
            "https://github.com/features/issues": 1,
            "https://github.com/features/discussions": 1,
            "https://github.com/features": 1,
            "https://docs.github.com": 1,
            "https://skills.github.com": 1,
            "https://github.blog": 1,
            "https://github.com/enterprise": 1,
            "https://github.com/team": 1,
            "https://github.com/enterprise/startups": 1,
            "https://github.com/solutions/industries/healthcare": 1,
            "https://github.com/solutions/industries/financial-services": 1,
            "https://github.com/solutions/industries/manufacturing": 1,
            "https://github.com/solutions/ci-cd": 1,
            "https://github.com/solutions/devops": 1,
            "https://github.com/solutions/devsecops": 1,
            "https://resources.github.com/learn/pathways": 1,
            "https://resources.github.com": 1,
            "https://github.com/customer-stories": 1,
            "https://partner.github.com": 1,
            "https://github.com/readme": 1,
            "https://github.com/topics": 1,
            "https://github.com/trending": 1,
            "https://github.com/collections": 1,
            "https://github.com/enterprise/advanced-security": 1,
            "https://github.com/pricing": 1,
            "https://www.bouncycastle.org/repositories/bc-java": 1,
            "https://github.com": 1,
            "https://docs.github.com/site-policy/github-terms/github-terms-of-service": 1,
            "https://docs.github.com/site-policy/privacy-policies/github-privacy-statement": 1,
            "https://github.com/security": 1,
            "https://www.githubstatus.com/": 1,
            "https://docs.github.com/": 1,
            "https://support.github.com?tags=dotcom-footer": 1,
            "https://www.first.org/cvss/user-guide": 1,
            "https://access.redhat.com/security/cve/CVE-2019-9213": 1,
            "https://access.redhat.com/security/cve/CVE-2019-18634": 1,
            "https://access.redhat.com/security/cve/CVE-2020-11023": 1,
            "https://access.redhat.com/security/cve/CVE-2019-15031": 1,
            "https://access.redhat.com/security/cve/CVE-2018-1125": 1,
            "https://access.redhat.com/security/cve/CVE-2020-14060": 1,
            "https://nvd.nist.gov/vuln-metrics/cvss": 1,
            "https://access.redhat.com/site/security/team/contact/": 1,
            "https://access.redhat.com/product-life-cycles": 1,
            "https://access.redhat.com/articles/7019023": 1,
            "https://access.redhat.com/articles/6200982": 1,
            "https://access.redhat.com/search/#/knowledgebase": 1,
            "https://access.redhat.com/search/#/discussions": 1,
            "https://access.redhat.com/support/policy/updates/jboss_eap_xp_notes": 1,
            "https://access.redhat.com/articles/7037218": 1,
            "https://github.com/nodejs/Release": 1,
            "https://access.redhat.com/articles/4544981": 1,
            "https://access.redhat.com/support/policy/updates/jboss_notes#p_rhbocamel": 1,
            "https://access.redhat.com/solutions/6342381": 1,
            "https://access.redhat.com/solutions/5941551": 1,
            "https://access.redhat.com/support/policy/updates/service-interconnect": 1,
            "https://access.redhat.com/articles/6975608": 1,
            "https://access.redhat.com/articles/6999674": 1,
            "https://access.redhat.com/articles/6371801": 1
        },
        "affected_products": [
            "Castle",
            "Bouncy",
            "Key",
            "FJA",
            "n/a",
            "RSA",
            "Pairs"
        ],
        "versions": {
            "status": "affected",
            "version": "n/a"
        },
        "files": [
            "API",
            "RSA",
            "low-level",
            "Low-level",
            "BC-FJA"
        ],
        "keywords": [
            "pair",
            "beta",
            "appear",
            "expect",
            "have",
            "pairs",
            "version",
            "flaw",
            "certainty",
            "interface",
            "generator",
            "generate",
            "castle",
            "test",
            "level",
            "bouncy"
        ],
        "files_extension": [],
        "has_fixing_commit": true
    },
    "commits": [
        {
            "commit_id": "a47c9eff26101f2969bb2a9627ca721b135c9d47",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1450220283,
            "hunks": 19,
            "message": "Further work on PKCS#7 any upgraded RSA key pair generator.",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/generators/RSAKeyPairGenerator.java b/core/src/main/java/org/bouncycastle/crypto/generators/RSAKeyPairGenerator.java",
                "index 55c2ed8f5..f23f654b8 100644",
                "--- a/core/src/main/java/org/bouncycastle/crypto/generators/RSAKeyPairGenerator.java",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/generators/RSAKeyPairGenerator.java",
                "@@ -10,2 +10,3 @@ import org.bouncycastle.crypto.params.RSAKeyParameters;",
                " import org.bouncycastle.crypto.params.RSAPrivateCrtKeyParameters;",
                "+import org.bouncycastle.math.Primes;",
                " import org.bouncycastle.math.ec.WNafUtil;",
                "@@ -21,2 +22,3 @@ public class RSAKeyPairGenerator",
                "     private RSAKeyGenerationParameters param;",
                "+    private int iterations;",
                "@@ -25,2 +27,3 @@ public class RSAKeyPairGenerator",
                "         this.param = (RSAKeyGenerationParameters)param;",
                "+        this.iterations = getNumberOfIterations(this.param.getStrength(), this.param.getCertainty());",
                "     }",
                "@@ -38,3 +41,9 @@ public class RSAKeyPairGenerator",
                "         int qbitlength = strength - pbitlength;",
                "-        int mindiffbits = strength / 3;",
                "+        int mindiffbits = (strength / 2) - 100;",
                "+",
                "+        if (mindiffbits < strength / 3)",
                "+        {",
                "+            mindiffbits = strength / 3;",
                "+        }",
                "+",
                "         int minWeight = strength >> 2;",
                "@@ -43,2 +52,6 @@ public class RSAKeyPairGenerator",
                "         BigInteger dLowerBound = BigInteger.valueOf(2).pow(strength / 2);",
                "+        // squared bound (sqrt(2)*2^(nlen/2-1))^2",
                "+        BigInteger squaredBound = ONE.shiftLeft(strength - 1);",
                "+        // 2^(nlen/2 - 100)",
                "+        BigInteger minDiff = ONE.shiftLeft(mindiffbits);",
                "@@ -50,6 +63,3 @@ public class RSAKeyPairGenerator",
                "-            // TODO Consider generating safe primes for p, q (see DHParametersHelper.generateSafePrimes)",
                "-            // (then p-1 and q-1 will not consist of only small factors - see \"Pollard's algorithm\")",
                "-",
                "-            p = chooseRandomPrime(pbitlength, e);",
                "+            p = chooseRandomPrime(pbitlength, e, squaredBound);",
                "@@ -60,3 +70,3 @@ public class RSAKeyPairGenerator",
                "             {",
                "-                q = chooseRandomPrime(qbitlength, e);",
                "+                q = chooseRandomPrime(qbitlength, e, squaredBound);",
                "@@ -64,3 +74,3 @@ public class RSAKeyPairGenerator",
                "                 BigInteger diff = q.subtract(p).abs();",
                "-                if (diff.bitLength() < mindiffbits)",
                "+                if (diff.bitLength() < mindiffbits || diff.compareTo(minDiff) <= 0)",
                "                 {",
                "@@ -92,3 +102,3 @@ public class RSAKeyPairGenerator",
                "                 {",
                "-                    p = chooseRandomPrime(pbitlength, e);",
                "+                    p = chooseRandomPrime(pbitlength, e, squaredBound);",
                "                     continue;",
                "@@ -144,13 +154,13 @@ public class RSAKeyPairGenerator",
                "      * Choose a random prime value for use with RSA",
                "-     * ",
                "+     *",
                "      * @param bitlength the bit-length of the returned prime",
                "-     * @param e the RSA public exponent",
                "-     * @return a prime p, with (p-1) relatively prime to e",
                "+     * @param e         the RSA public exponent",
                "+     * @return A prime p, with (p-1) relatively prime to e",
                "      */",
                "-    protected BigInteger chooseRandomPrime(int bitlength, BigInteger e)",
                "+    protected BigInteger chooseRandomPrime(int bitlength, BigInteger e, BigInteger sqrdBound)",
                "     {",
                "-        for (;;)",
                "+        for (int i = 0; i != 5 * bitlength; i++)",
                "         {",
                "             BigInteger p = new BigInteger(bitlength, 1, param.getRandom());",
                "-            ",
                "+",
                "             if (p.mod(e).equals(ONE))",
                "@@ -159,4 +169,9 @@ public class RSAKeyPairGenerator",
                "             }",
                "-            ",
                "-            if (!p.isProbablePrime(param.getCertainty()))",
                "+",
                "+            if (p.multiply(p).compareTo(sqrdBound) < 0)",
                "+            {",
                "+                continue;",
                "+            }",
                "+",
                "+            if (!isProbablePrime(p))",
                "             {",
                "@@ -165,3 +180,3 @@ public class RSAKeyPairGenerator",
                "-            if (!e.gcd(p.subtract(ONE)).equals(ONE)) ",
                "+            if (!e.gcd(p.subtract(ONE)).equals(ONE))",
                "             {",
                "@@ -169,5 +184,47 @@ public class RSAKeyPairGenerator",
                "             }",
                "-            ",
                "+",
                "             return p;",
                "         }",
                "+",
                "+        throw new IllegalStateException(\"unable to generate prime number for RSA key\");",
                "+    }",
                "+",
                "+    protected boolean isProbablePrime(BigInteger x)",
                "+    {",
                "+        /*",
                "+         * Primes class for FIPS 186-4 C.3 primality checking",
                "+         */",
                "+        return !Primes.hasAnySmallFactors(x) && Primes.isMRProbablePrime(x, param.getRandom(), iterations);",
                "+    }",
                "+",
                "+    private static int getNumberOfIterations(int bits, int certainty)",
                "+    {",
                "+        /*",
                "+         * NOTE: We enforce a minimum 'certainty' of 100 for bits >= 1024 (else 80). Where the",
                "+         * certainty is higher than the FIPS 186-4 tables (C.2/C.3) cater to, extra iterations",
                "+         * are added at the \"worst case rate\" for the excess.",
                "+         */",
                "+        if (bits >= 1536)",
                "+        {",
                "+            return  certainty <= 100 ? 3",
                "+                :   certainty <= 128 ? 4",
                "+                :   4 + (certainty - 128 + 1) / 2;",
                "+        }",
                "+        else if (bits >= 1024)",
                "+        {",
                "+            return  certainty <= 100 ? 4",
                "+                :   certainty <= 112 ? 5",
                "+                :   5 + (certainty - 112 + 1) / 2;",
                "+        }",
                "+        else if (bits >= 512)",
                "+        {",
                "+            return  certainty <= 80  ? 5",
                "+                :   certainty <= 100 ? 7",
                "+                :   7 + (certainty - 100 + 1) / 2;",
                "+        }",
                "+        else",
                "+        {",
                "+            return  certainty <= 80  ? 40",
                "+                :   40 + (certainty - 80 + 1) / 2;",
                "+        }",
                "     }",
                "diff --git a/pkix/src/main/java/org/bouncycastle/cms/CMSSignedDataParser.java b/pkix/src/main/java/org/bouncycastle/cms/CMSSignedDataParser.java",
                "index 2625ea796..2cf40d0d5 100644",
                "--- a/pkix/src/main/java/org/bouncycastle/cms/CMSSignedDataParser.java",
                "+++ b/pkix/src/main/java/org/bouncycastle/cms/CMSSignedDataParser.java",
                "@@ -205,3 +205,3 @@ public class CMSSignedDataParser",
                "             }",
                "-            else",
                "+            else if (contentParser != null)",
                "             {"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/crypto/generators/RSAKeyPairGenerator.java",
                "pkix/src/main/java/org/bouncycastle/cms/CMSSignedDataParser.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "7": "PBEWITHSHA-256AND128BITAES-CBC-BC encryption yields different results between v1.52 and v1.53 onwards #230"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "fe2febcfb4cf24cd8d9ca518fd334d5d8a5dad61"
                ]
            ],
            "tags": [
                "r1v60"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 2 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: RSA",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: RSA",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: pair, generator",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy, pair, generator",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 7",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "73780ac522b7795fc165630aba8d5f5729acc839",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1524127201,
            "hunks": 5,
            "message": "BJA-694 cleaned up primality test",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/generators/RSAKeyPairGenerator.java b/core/src/main/java/org/bouncycastle/crypto/generators/RSAKeyPairGenerator.java",
                "index f23f654b8..3dafea948 100644",
                "--- a/core/src/main/java/org/bouncycastle/crypto/generators/RSAKeyPairGenerator.java",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/generators/RSAKeyPairGenerator.java",
                "@@ -22,3 +22,2 @@ public class RSAKeyPairGenerator",
                "     private RSAKeyGenerationParameters param;",
                "-    private int iterations;",
                "@@ -27,3 +26,2 @@ public class RSAKeyPairGenerator",
                "         this.param = (RSAKeyGenerationParameters)param;",
                "-        this.iterations = getNumberOfIterations(this.param.getStrength(), this.param.getCertainty());",
                "     }",
                "@@ -161,2 +159,4 @@ public class RSAKeyPairGenerator",
                "     {",
                "+        int iterations = getNumberOfIterations(bitlength, param.getCertainty());",
                "+",
                "         for (int i = 0; i != 5 * bitlength; i++)",
                "@@ -175,3 +175,3 @@ public class RSAKeyPairGenerator",
                "-            if (!isProbablePrime(p))",
                "+            if (!isProbablePrime(p, iterations))",
                "             {",
                "@@ -191,3 +191,3 @@ public class RSAKeyPairGenerator",
                "-    protected boolean isProbablePrime(BigInteger x)",
                "+    protected boolean isProbablePrime(BigInteger x, int iterations)",
                "     {"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/crypto/generators/RSAKeyPairGenerator.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "3dfd325d84a4d09b69bd2ec10340a569838d462d"
                ],
                [
                    "no-tag",
                    "7016cd8cbabbf41246c7734081eeef2f60756c22"
                ]
            ],
            "tags": [
                "r1v60"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 6 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: RSA",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: test",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy, pair, generator",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "22467b6e8fe19717ecdf201c0cf91bacf04a55ad",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1524435264,
            "hunks": 4,
            "message": "BJA-694 minor tweak to avoid method signature change",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/generators/RSAKeyPairGenerator.java b/core/src/main/java/org/bouncycastle/crypto/generators/RSAKeyPairGenerator.java",
                "index 3dafea948..beb1aee2e 100644",
                "--- a/core/src/main/java/org/bouncycastle/crypto/generators/RSAKeyPairGenerator.java",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/generators/RSAKeyPairGenerator.java",
                "@@ -159,4 +159,2 @@ public class RSAKeyPairGenerator",
                "     {",
                "-        int iterations = getNumberOfIterations(bitlength, param.getCertainty());",
                "-",
                "         for (int i = 0; i != 5 * bitlength; i++)",
                "@@ -175,3 +173,3 @@ public class RSAKeyPairGenerator",
                "-            if (!isProbablePrime(p, iterations))",
                "+            if (!isProbablePrime(p))",
                "             {",
                "@@ -191,4 +189,6 @@ public class RSAKeyPairGenerator",
                "-    protected boolean isProbablePrime(BigInteger x, int iterations)",
                "+    protected boolean isProbablePrime(BigInteger x)",
                "     {",
                "+        int iterations = getNumberOfIterations(x.bitLength(), param.getCertainty());",
                "+",
                "         /*"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/crypto/generators/RSAKeyPairGenerator.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "b59695e8415981a3d286f26ae82df30fd232c804"
                ],
                [
                    "no-tag",
                    "737440015680767fc4c130a3b2a440c1af15af8a"
                ]
            ],
            "tags": [
                "r1v60"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 6 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: RSA",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy, pair, generator",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "15b91d6e88441348d3d0b387528e470be46e759f",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1525140106,
            "hunks": 41,
            "message": "updates from FIPS API added ref to CVE-2018-5382 in releasenotes.",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/asn1/x509/DigestInfo.java b/core/src/main/java/org/bouncycastle/asn1/x509/DigestInfo.java",
                "index fd17f1b58..4b040a721 100644",
                "--- a/core/src/main/java/org/bouncycastle/asn1/x509/DigestInfo.java",
                "+++ b/core/src/main/java/org/bouncycastle/asn1/x509/DigestInfo.java",
                "@@ -12,2 +12,3 @@ import org.bouncycastle.asn1.DEROctetString;",
                " import org.bouncycastle.asn1.DERSequence;",
                "+import org.bouncycastle.util.Arrays;",
                "@@ -53,3 +54,3 @@ public class DigestInfo",
                "     {",
                "-        this.digest = digest;",
                "+        this.digest = Arrays.clone(digest);",
                "         this.algId = algId;",
                "@@ -73,3 +74,3 @@ public class DigestInfo",
                "     {",
                "-        return digest;",
                "+        return Arrays.clone(digest);",
                "     }",
                "diff --git a/core/src/main/java/org/bouncycastle/asn1/x509/OtherName.java b/core/src/main/java/org/bouncycastle/asn1/x509/OtherName.java",
                "new file mode 100644",
                "index 000000000..eb652f7f1",
                "--- /dev/null",
                "+++ b/core/src/main/java/org/bouncycastle/asn1/x509/OtherName.java",
                "@@ -0,0 +1,92 @@",
                "+package org.bouncycastle.asn1.x509;",
                "+",
                "+import org.bouncycastle.asn1.ASN1Encodable;",
                "+import org.bouncycastle.asn1.ASN1EncodableVector;",
                "+import org.bouncycastle.asn1.ASN1Object;",
                "+import org.bouncycastle.asn1.ASN1ObjectIdentifier;",
                "+import org.bouncycastle.asn1.ASN1Primitive;",
                "+import org.bouncycastle.asn1.ASN1Sequence;",
                "+import org.bouncycastle.asn1.ASN1TaggedObject;",
                "+import org.bouncycastle.asn1.DERSequence;",
                "+import org.bouncycastle.asn1.DERTaggedObject;",
                "+",
                "+/**",
                "+ * The OtherName object.",
                "+ * <pre>",
                "+ * OtherName ::= SEQUENCE {",
                "+ *      type-id    OBJECT IDENTIFIER,",
                "+ *      value      [0] EXPLICIT ANY DEFINED BY type-id }",
                "+ * </pre>",
                "+ */",
                "+public class OtherName",
                "+    extends ASN1Object",
                "+{",
                "+    private final ASN1ObjectIdentifier typeID;",
                "+    private final ASN1Encodable value;",
                "+",
                "+    /**",
                "+     * OtherName factory method.",
                "+     * @param obj the object used to construct an instance of <code>",
                "+     * OtherName</code>. It must be an instance of <code>OtherName",
                "+     * </code> or <code>ASN1Sequence</code>.",
                "+     * @return the instance of <code>OtherName</code> built from the",
                "+     * supplied object.",
                "+     * @throws java.lang.IllegalArgumentException if the object passed",
                "+     * to the factory is not an instance of <code>OtherName</code> or something that",
                "+     * can be converted into an appropriate <code>ASN1Sequence</code>.",
                "+     */",
                "+    public static OtherName getInstance(",
                "+        Object obj)",
                "+    {",
                "+",
                "+        if (obj instanceof OtherName)",
                "+        {",
                "+            return (OtherName)obj;",
                "+        }",
                "+        else if (obj != null)",
                "+        {",
                "+            return new OtherName(ASN1Sequence.getInstance(obj));",
                "+        }",
                "+",
                "+        return null;",
                "+    }",
                "+",
                "+    /**",
                "+     * Base constructor.",
                "+     * @param typeID the type of the other name.",
                "+     * @param value the ANY object that represents the value.",
                "+     */",
                "+    public OtherName(",
                "+        ASN1ObjectIdentifier typeID,",
                "+        ASN1Encodable value)",
                "+    {",
                "+        this.typeID = typeID;",
                "+        this.value  = value;",
                "+    }",
                "+",
                "+    private OtherName(ASN1Sequence seq)",
                "+    {",
                "+        this.typeID = ASN1ObjectIdentifier.getInstance(seq.getObjectAt(0));",
                "+        this.value = ASN1TaggedObject.getInstance(seq.getObjectAt(1)).getObject(); // explicitly tagged",
                "+    }",
                "+",
                "+    public ASN1ObjectIdentifier getTypeID()",
                "+    {",
                "+        return typeID;",
                "+    }",
                "+",
                "+    public ASN1Encodable getValue()",
                "+    {",
                "+        return value;",
                "+    }",
                "+",
                "+    public ASN1Primitive toASN1Primitive()",
                "+    {",
                "+        ASN1EncodableVector v = new ASN1EncodableVector();",
                "+",
                "+        v.add(typeID);",
                "+        v.add(new DERTaggedObject(true, 0, value));",
                "+",
                "+        return new DERSequence(v);",
                "+    }",
                "+}",
                "diff --git a/core/src/main/java/org/bouncycastle/asn1/x509/PKIXNameConstraintValidator.java b/core/src/main/java/org/bouncycastle/asn1/x509/PKIXNameConstraintValidator.java",
                "index 0f15dae15..d360609e3 100644",
                "--- a/core/src/main/java/org/bouncycastle/asn1/x509/PKIXNameConstraintValidator.java",
                "+++ b/core/src/main/java/org/bouncycastle/asn1/x509/PKIXNameConstraintValidator.java",
                "@@ -2,2 +2,3 @@ package org.bouncycastle.asn1.x509;",
                "+import java.io.IOException;",
                " import java.util.Collection;",
                "@@ -17,2 +18,3 @@ import org.bouncycastle.util.Integers;",
                " import org.bouncycastle.util.Strings;",
                "+import org.bouncycastle.util.encoders.Hex;",
                "@@ -31,2 +33,4 @@ public class PKIXNameConstraintValidator",
                "+    private Set excludedSubtreesOtherName = new HashSet();",
                "+",
                "     private Set permittedSubtreesDN;",
                "@@ -41,2 +45,4 @@ public class PKIXNameConstraintValidator",
                "+    private Set permittedSubtreesOtherName;",
                "+",
                "     public PKIXNameConstraintValidator()",
                "@@ -56,2 +62,5 @@ public class PKIXNameConstraintValidator",
                "         {",
                "+        case GeneralName.otherName:",
                "+            checkPermittedOtherName(permittedSubtreesOtherName, OtherName.getInstance(name.getName()));",
                "+            break;",
                "         case GeneralName.rfc822Name:",
                "@@ -75,2 +84,5 @@ public class PKIXNameConstraintValidator",
                "             checkPermittedIP(permittedSubtreesIP, ip);",
                "+            break;",
                "+        default:",
                "+            throw new IllegalStateException(\"Unknown tag encountered: \" + name.getTagNo());",
                "         }",
                "@@ -90,2 +102,5 @@ public class PKIXNameConstraintValidator",
                "         {",
                "+        case GeneralName.otherName:",
                "+            checkExcludedOtherName(excludedSubtreesOtherName, OtherName.getInstance(name.getName()));",
                "+            break;",
                "         case GeneralName.rfc822Name:",
                "@@ -108,2 +123,5 @@ public class PKIXNameConstraintValidator",
                "             checkExcludedIP(excludedSubtreesIP, ip);",
                "+            break;",
                "+        default:",
                "+            throw new IllegalStateException(\"Unknown tag encountered: \" + name.getTagNo());",
                "         }",
                "@@ -143,4 +161,9 @@ public class PKIXNameConstraintValidator",
                "             // go through all subtree groups",
                "-            switch (((Integer)entry.getKey()).intValue())",
                "+            int nameType = ((Integer)entry.getKey()).intValue();",
                "+            switch (nameType)",
                "             {",
                "+            case GeneralName.otherName:",
                "+                permittedSubtreesOtherName = intersectOtherName(permittedSubtreesOtherName,",
                "+                    (Set)entry.getValue());",
                "+                break;",
                "             case GeneralName.rfc822Name:",
                "@@ -164,2 +187,5 @@ public class PKIXNameConstraintValidator",
                "                     (Set)entry.getValue());",
                "+                break;",
                "+            default:",
                "+                throw new IllegalStateException(\"Unknown tag encountered: \" + nameType);",
                "             }",
                "@@ -172,2 +198,5 @@ public class PKIXNameConstraintValidator",
                "         {",
                "+        case GeneralName.otherName:",
                "+            permittedSubtreesOtherName = new HashSet();",
                "+            break;",
                "         case GeneralName.rfc822Name:",
                "@@ -186,2 +215,5 @@ public class PKIXNameConstraintValidator",
                "             permittedSubtreesIP = new HashSet();",
                "+            break;",
                "+        default:",
                "+            throw new IllegalStateException(\"Unknown tag encountered: \" + nameType);",
                "         }",
                "@@ -200,2 +232,6 @@ public class PKIXNameConstraintValidator",
                "         {",
                "+        case GeneralName.otherName:",
                "+            excludedSubtreesOtherName = unionOtherName(excludedSubtreesOtherName,",
                "+                OtherName.getInstance(base.getName()));",
                "+            break;",
                "         case GeneralName.rfc822Name:",
                "@@ -220,2 +256,4 @@ public class PKIXNameConstraintValidator",
                "             break;",
                "+        default:",
                "+            throw new IllegalStateException(\"Unknown tag encountered: \" + base.getTagNo());",
                "         }",
                "@@ -230,2 +268,3 @@ public class PKIXNameConstraintValidator",
                "             + hashCollection(excludedSubtreesURI)",
                "+            + hashCollection(excludedSubtreesOtherName)",
                "             + hashCollection(permittedSubtreesDN)",
                "@@ -234,3 +273,4 @@ public class PKIXNameConstraintValidator",
                "             + hashCollection(permittedSubtreesIP)",
                "-            + hashCollection(permittedSubtreesURI);",
                "+            + hashCollection(permittedSubtreesURI)",
                "+            + hashCollection(permittedSubtreesOtherName);",
                "     }",
                "@@ -249,2 +289,3 @@ public class PKIXNameConstraintValidator",
                "             && collectionsAreEqual(constraintValidator.excludedSubtreesURI, excludedSubtreesURI)",
                "+            && collectionsAreEqual(constraintValidator.excludedSubtreesOtherName, excludedSubtreesOtherName)",
                "             && collectionsAreEqual(constraintValidator.permittedSubtreesDN, permittedSubtreesDN)",
                "@@ -253,3 +294,4 @@ public class PKIXNameConstraintValidator",
                "             && collectionsAreEqual(constraintValidator.permittedSubtreesIP, permittedSubtreesIP)",
                "-            && collectionsAreEqual(constraintValidator.permittedSubtreesURI, permittedSubtreesURI);",
                "+            && collectionsAreEqual(constraintValidator.permittedSubtreesURI, permittedSubtreesURI)",
                "+            && collectionsAreEqual(constraintValidator.permittedSubtreesOtherName, permittedSubtreesOtherName);",
                "     }",
                "@@ -285,2 +327,7 @@ public class PKIXNameConstraintValidator",
                "         }",
                "+        if (permittedSubtreesOtherName != null)",
                "+        {",
                "+            temp += \"OtherName:\\n\";",
                "+            temp += stringifyOtherNameCollection(permittedSubtreesOtherName) + \"\\n\";",
                "+        }",
                "         temp += \"excluded:\\n\";",
                "@@ -311,2 +358,7 @@ public class PKIXNameConstraintValidator",
                "         }",
                "+        if (!excludedSubtreesOtherName.isEmpty())",
                "+        {",
                "+            temp += \"OtherName:\\n\";",
                "+            temp += stringifyOtherNameCollection(excludedSubtreesOtherName) + \"\\n\";",
                "+        }",
                "         return temp;",
                "@@ -476,2 +528,21 @@ public class PKIXNameConstraintValidator",
                "+    private Set intersectOtherName(Set permitted, Set otherNames)",
                "+    {",
                "+        Set intersect = new HashSet(permitted);",
                "+",
                "+        intersect.retainAll(otherNames);",
                "+",
                "+        return intersect;",
                "+    }",
                "+",
                "+",
                "+    private Set unionOtherName(Set permitted, OtherName otherName)",
                "+    {",
                "+        Set union = new HashSet(permitted);",
                "+",
                "+        union.add(otherName);",
                "+",
                "+        return union;",
                "+    }",
                "+",
                "     private Set intersectEmail(Set permitted, Set emails)",
                "@@ -776,2 +847,48 @@ public class PKIXNameConstraintValidator",
                "+    private void checkPermittedOtherName(Set permitted, OtherName name)",
                "+        throws NameConstraintValidatorException",
                "+    {",
                "+        if (permitted == null)",
                "+        {",
                "+            return;",
                "+        }",
                "+",
                "+        Iterator it = permitted.iterator();",
                "+",
                "+        while (it.hasNext())",
                "+        {",
                "+            OtherName str = ((OtherName)it.next());",
                "+",
                "+            if (otherNameIsConstrained(name, str))",
                "+            {",
                "+                return;",
                "+            }",
                "+        }",
                "+",
                "+        throw new NameConstraintValidatorException(",
                "+            \"Subject OtherName is not from a permitted subtree.\");",
                "+    }",
                "+",
                "+    private void checkExcludedOtherName(Set excluded, OtherName name)",
                "+        throws NameConstraintValidatorException",
                "+    {",
                "+        if (excluded.isEmpty())",
                "+        {",
                "+            return;",
                "+        }",
                "+",
                "+        Iterator it = excluded.iterator();",
                "+",
                "+        while (it.hasNext())",
                "+        {",
                "+            OtherName str = OtherName.getInstance(it.next());",
                "+",
                "+            if (otherNameIsConstrained(name, str))",
                "+            {",
                "+                throw new NameConstraintValidatorException(",
                "+                    \"OtherName is from an excluded subtree.\");",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "     private void checkExcludedEmail(Set excluded, String email)",
                "@@ -901,2 +1018,12 @@ public class PKIXNameConstraintValidator",
                "+    private boolean otherNameIsConstrained(OtherName name, OtherName constraint)",
                "+    {",
                "+        if (constraint.equals(name))",
                "+        {",
                "+            return true;",
                "+        }",
                "+",
                "+        return false;",
                "+    }",
                "+",
                "     private boolean emailIsConstrained(String email, String constraint)",
                "@@ -1889,15 +2016,28 @@ public class PKIXNameConstraintValidator",
                "     {",
                "-        String temp = \"\";",
                "+        StringBuilder temp = new StringBuilder();",
                "         for (int i = 0; i < ip.length / 2; i++)",
                "         {",
                "-            temp += Integer.toString(ip[i] & 0x00FF) + \".\";",
                "+            if (temp.length() > 0)",
                "+            {",
                "+                temp.append(\".\");",
                "+            }",
                "+            temp.append(Integer.toString(ip[i] & 0x00FF));",
                "         }",
                "-        temp = temp.substring(0, temp.length() - 1);",
                "-        temp += \"/\";",
                "+",
                "+        temp.append(\"/\");",
                "+        boolean first = true;",
                "         for (int i = ip.length / 2; i < ip.length; i++)",
                "         {",
                "-            temp += Integer.toString(ip[i] & 0x00FF) + \".\";",
                "+            if (first)",
                "+            {",
                "+                first = false;",
                "+            }",
                "+            else",
                "+            {",
                "+                temp.append(\".\");",
                "+            }",
                "+            temp.append(Integer.toString(ip[i] & 0x00FF));",
                "         }",
                "-        temp = temp.substring(0, temp.length() - 1);",
                "-        return temp;",
                "+",
                "+        return temp.toString();",
                "     }",
                "@@ -1906,14 +2046,40 @@ public class PKIXNameConstraintValidator",
                "     {",
                "-        String temp = \"\";",
                "-        temp += \"[\";",
                "+        StringBuilder temp = new StringBuilder();",
                "+        temp.append(\"[\");",
                "         for (Iterator it = ips.iterator(); it.hasNext(); )",
                "         {",
                "-            temp += stringifyIP((byte[])it.next()) + \",\";",
                "+            if (temp.length() > 1)",
                "+            {",
                "+                temp.append(\",\");",
                "+            }",
                "+            temp.append(stringifyIP((byte[])it.next()));",
                "         }",
                "-        if (temp.length() > 1)",
                "+        temp.append(\"]\");",
                "+        return temp.toString();",
                "+    }",
                "+",
                "+    private String stringifyOtherNameCollection(Set otherNames)",
                "+    {",
                "+        StringBuilder temp = new StringBuilder();",
                "+        temp.append(\"[\");",
                "+        for (Iterator it = otherNames.iterator(); it.hasNext(); )",
                "         {",
                "-            temp = temp.substring(0, temp.length() - 1);",
                "+            if (temp.length() > 1)",
                "+            {",
                "+                temp.append(\",\");",
                "+            }",
                "+            OtherName name = OtherName.getInstance(it.next());",
                "+            temp.append(name.getTypeID().getId());",
                "+            temp.append(\":\");",
                "+            try",
                "+            {",
                "+                temp.append(Hex.toHexString(name.getValue().toASN1Primitive().getEncoded()));",
                "+            }",
                "+            catch (IOException e)",
                "+            {",
                "+                temp.append(e.toString());",
                "+            }",
                "         }",
                "-        temp += \"]\";",
                "-        return temp;",
                "+        temp.append(\"]\");",
                "+        return temp.toString();",
                "     }",
                "diff --git a/core/src/main/java/org/bouncycastle/asn1/x509/UserNotice.java b/core/src/main/java/org/bouncycastle/asn1/x509/UserNotice.java",
                "index 029a66aee..f6523c50d 100644",
                "--- a/core/src/main/java/org/bouncycastle/asn1/x509/UserNotice.java",
                "+++ b/core/src/main/java/org/bouncycastle/asn1/x509/UserNotice.java",
                "@@ -81,4 +81,4 @@ public class UserNotice",
                "            {",
                "-               noticeRef = null;",
                "                explicitText = DisplayText.getInstance(as.getObjectAt(0));",
                "+               noticeRef = null;",
                "            }",
                "diff --git a/docs/releasenotes.html b/docs/releasenotes.html",
                "index 2296b371c..6dc9a6dc4 100644",
                "--- a/docs/releasenotes.html",
                "+++ b/docs/releasenotes.html",
                "@@ -577,3 +577,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2012, March 30",
                " <li>PEMReader would choke on a private key with an empty password. This has been fixed.</li>",
                "-<li>The default MAC for a BKS key store was 2 bytes, this has been upgraded to 20 bytes.</li>",
                "+<li>The default MAC for a BKS key store was 2 bytes, this has been upgraded to 20 bytes. This fix is now also referred to in CVE-2018-5382.</li>",
                " <li>BKS key store loading no longer freezes on negative iteration counts.</li>"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/asn1/x509/DigestInfo.java",
                "core/src/main/java/org/bouncycastle/asn1/x509/OtherName.java",
                "core/src/main/java/org/bouncycastle/asn1/x509/PKIXNameConstraintValidator.java",
                "core/src/main/java/org/bouncycastle/asn1/x509/UserNotice.java",
                "docs/releasenotes.html"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [
                "CVE-2018-5382"
            ],
            "twins": [
                [
                    "no-tag",
                    "4534f41ab3ce581d1bb69d64276ab60d0df49a7e"
                ],
                [
                    "no-tag",
                    "c014f78b148685527c5646b1204cd7f595005afa"
                ]
            ],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: API",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b19b37e8a3a46de2e775709c710972bd51f16aa7",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1449814285,
            "hunks": 18,
            "message": "Improvements to the endomorphism discovery tool - Print \"GLV Type B\" parameters for both possible beta/lambda pairs - Add a static method operating on X9ECParameters - Better error-handling in extended GLV generator search - Print out the \"d\" (denominator) value - Add a few explanatory comments",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/math/ec/tools/DiscoverEndomorphisms.java b/core/src/main/java/org/bouncycastle/math/ec/tools/DiscoverEndomorphisms.java",
                "index 4ee2de609..ca32d266b 100644",
                "--- a/core/src/main/java/org/bouncycastle/math/ec/tools/DiscoverEndomorphisms.java",
                "+++ b/core/src/main/java/org/bouncycastle/math/ec/tools/DiscoverEndomorphisms.java",
                "@@ -28,3 +28,3 @@ public class DiscoverEndomorphisms",
                "         {",
                "-            discoverEndomorphism(args[i]);",
                "+            discoverEndomorphisms(args[i]);",
                "         }",
                "@@ -32,3 +32,23 @@ public class DiscoverEndomorphisms",
                "-    private static void discoverEndomorphism(String curveName)",
                "+    public static void discoverEndomorphisms(X9ECParameters x9)",
                "+    {",
                "+        if (x9 == null)",
                "+        {",
                "+            throw new NullPointerException(\"x9\");",
                "+        }",
                "+",
                "+        ECCurve c = x9.getCurve();",
                "+        if (ECAlgorithms.isFpCurve(c))",
                "+        {",
                "+            BigInteger characteristic = c.getField().getCharacteristic();",
                "+",
                "+            if (c.getA().isZero() && characteristic.mod(ECConstants.THREE).equals(ECConstants.ONE))",
                "+            {",
                "+                System.out.println(\"Curve has a 'GLV Type B' endomorphism with these parameters:\");",
                "+                printGLVTypeBParameters(x9);",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+    private static void discoverEndomorphisms(String curveName)",
                "     {",
                "@@ -48,3 +68,3 @@ public class DiscoverEndomorphisms",
                "             {",
                "-                System.out.println(\"Curve '\" + curveName + \"' has a 'GLV Type B' endomorphism with these parameters: \");",
                "+                System.out.println(\"Curve '\" + curveName + \"' has a 'GLV Type B' endomorphism with these parameters:\");",
                "                 printGLVTypeBParameters(x9);",
                "@@ -56,2 +76,45 @@ public class DiscoverEndomorphisms",
                "     {",
                "+        // x^2 + x + 1 = 0 mod n",
                "+        BigInteger[] lambdas = solveQuadraticEquation(x9.getN(), ECConstants.ONE, ECConstants.ONE);",
                "+",
                "+        /*",
                "+         * The 'Beta' values are field elements of order 3. There are only two such values besides 1, each corresponding",
                "+         * to one choice for 'Lambda'.",
                "+         */",
                "+        ECFieldElement[] betas = findBetaValues(x9.getCurve());",
                "+",
                "+        printGLVTypeBParameters(x9, lambdas[0], betas);",
                "+        System.out.println(\"OR\");",
                "+        printGLVTypeBParameters(x9, lambdas[1], betas);",
                "+    }",
                "+",
                "+    private static void printGLVTypeBParameters(X9ECParameters x9, BigInteger lambda, ECFieldElement[] betas)",
                "+    {",
                "+        /*",
                "+         * Check the basic premise of the endomorphism: that multiplying a point by lambda preserves the y-coordinate",
                "+         */",
                "+        ECPoint G = x9.getG().normalize();",
                "+        ECPoint mapG = G.multiply(lambda).normalize();",
                "+        if (!G.getYCoord().equals(mapG.getYCoord()))",
                "+        {",
                "+            throw new IllegalStateException(\"Derivation of GLV Type B parameters failed unexpectedly\");",
                "+        }",
                "+",
                "+        /*",
                "+         * Determine which of the beta values corresponds with this choice of lambda, by checking that it scales",
                "+         * the x-coordinate the same way a point-multiplication by lambda does.",
                "+         */",
                "+        ECFieldElement beta = betas[0];",
                "+        if (!G.getXCoord().multiply(beta).equals(mapG.getXCoord()))",
                "+        {",
                "+            beta = betas[1];",
                "+            if (!G.getXCoord().multiply(beta).equals(mapG.getXCoord()))",
                "+            {",
                "+                throw new IllegalStateException(\"Derivation of GLV Type B parameters failed unexpectedly\");",
                "+            }",
                "+        }",
                "+",
                "+        /*",
                "+         * Now search for parameters to allow efficient decomposition of full-length scalars",
                "+         */",
                "         BigInteger n = x9.getN();",
                "@@ -60,5 +123,2 @@ public class DiscoverEndomorphisms",
                "-        // x^2 + x + 1 = 0 mod n",
                "-        BigInteger lambda = solveQuadraticEquation(n, ECConstants.ONE, ECConstants.ONE);",
                "-",
                "         BigInteger[] rt = extEuclidGLV(n, lambda);",
                "@@ -78,80 +138,46 @@ public class DiscoverEndomorphisms",
                "             BigInteger[] vw = extEuclidBezout(new BigInteger[]{ s.abs(), t.abs() });",
                "-            BigInteger v = vw[0], w = vw[1];",
                "-",
                "-            if (s.signum() < 0)",
                "-            {",
                "-                v = v.negate();",
                "-            }",
                "-            if (t.signum() > 0)",
                "-            {",
                "-                w = w.negate();",
                "-            }",
                "-",
                "-            BigInteger check = s.multiply(v).subtract(t.multiply(w));",
                "-            if (!check.equals(ECConstants.ONE))",
                "-            {",
                "-                throw new IllegalStateException();",
                "-            }",
                "-",
                "-            BigInteger x = w.multiply(n).subtract(v.multiply(lambda));",
                "-",
                "-            BigInteger base1 = v.negate();",
                "-            BigInteger base2 = x.negate();",
                "-",
                "-            /*",
                "-             * We calculate the range(s) conservatively large to avoid messy rounding issues, so",
                "-             * there may be spurious candidate generators, but we won't miss any.",
                "-             */",
                "-            BigInteger sqrtN = isqrt(n.subtract(ECConstants.ONE)).add(ECConstants.ONE);",
                "-",
                "-            BigInteger[] I1 = calculateRange(base1, sqrtN, t);",
                "-            BigInteger[] I2 = calculateRange(base2, sqrtN, r);",
                "-",
                "-            BigInteger[] range = intersect(I1, I2);",
                "-            if (range != null)",
                "+            if (vw != null)",
                "             {",
                "-                for (BigInteger alpha = range[0]; alpha.compareTo(range[1]) <= 0; alpha = alpha.add(ECConstants.ONE))",
                "+                BigInteger v = vw[0], w = vw[1];",
                "+    ",
                "+                if (s.signum() < 0)",
                "                 {",
                "-                    BigInteger[] candidate = new BigInteger[]{ x.add(alpha.multiply(r)), v.add(alpha.multiply(t)) };",
                "-                    if (isShorter(candidate, v2))",
                "-                    {",
                "-                        v2 = candidate;",
                "-                    }",
                "+                    v = v.negate();",
                "+                }",
                "+                if (t.signum() > 0)",
                "+                {",
                "+                    w = w.negate();",
                "                 }",
                "-            }",
                "-        }",
                "-",
                "-        /*",
                "-         * 'Beta' is a field element of order 3. There are only two such values besides 1; determine which of them",
                "-         * corresponds to our choice for 'Lambda'.",
                "-         */",
                "-        ECFieldElement beta;",
                "-        {",
                "-            ECPoint G = x9.getG().normalize();",
                "-            ECPoint mapG = G.multiply(lambda).normalize();",
                "-            if (!G.getYCoord().equals(mapG.getYCoord()))",
                "-            {",
                "-                throw new IllegalStateException(\"Derivation of GLV Type B parameters failed unexpectedly\");",
                "-            }",
                "-            BigInteger q = x9.getCurve().getField().getCharacteristic();",
                "-            BigInteger e = q.divide(ECConstants.THREE);",
                "-",
                "-            SecureRandom random = new SecureRandom();",
                "-            BigInteger b;",
                "-            do",
                "-            {",
                "-                BigInteger r = BigIntegers.createRandomInRange(ECConstants.TWO, q.subtract(ECConstants.TWO), random);",
                "-                b = r.modPow(e, q);",
                "-            }",
                "-            while (b.equals(ECConstants.ONE));",
                "-",
                "-            beta = x9.getCurve().fromBigInteger(ECConstants.TWO.modPow(e, q));",
                "-",
                "-            if (!G.getXCoord().multiply(beta).equals(mapG.getXCoord()))",
                "-            {",
                "-                beta = beta.square();",
                "-                if (!G.getXCoord().multiply(beta).equals(mapG.getXCoord()))",
                "+                BigInteger check = s.multiply(v).subtract(t.multiply(w));",
                "+                if (!check.equals(ECConstants.ONE))",
                "                 {",
                "-                    throw new IllegalStateException(\"Derivation of GLV Type B parameters failed unexpectedly\");",
                "+                    throw new IllegalStateException();",
                "+                }",
                "+    ",
                "+                BigInteger x = w.multiply(n).subtract(v.multiply(lambda));",
                "+    ",
                "+                BigInteger base1 = v.negate();",
                "+                BigInteger base2 = x.negate();",
                "+    ",
                "+                /*",
                "+                 * We calculate the range(s) conservatively large to avoid messy rounding issues, so",
                "+                 * there may be spurious candidate generators, but we won't miss any.",
                "+                 */",
                "+                BigInteger sqrtN = isqrt(n.subtract(ECConstants.ONE)).add(ECConstants.ONE);",
                "+    ",
                "+                BigInteger[] I1 = calculateRange(base1, sqrtN, t);",
                "+                BigInteger[] I2 = calculateRange(base2, sqrtN, r);",
                "+    ",
                "+                BigInteger[] range = intersect(I1, I2);",
                "+                if (range != null)",
                "+                {",
                "+                    for (BigInteger alpha = range[0]; alpha.compareTo(range[1]) <= 0; alpha = alpha.add(ECConstants.ONE))",
                "+                    {",
                "+                        BigInteger[] candidate = new BigInteger[]{ x.add(alpha.multiply(r)), v.add(alpha.multiply(t)) };",
                "+                        if (isShorter(candidate, v2))",
                "+                        {",
                "+                            v2 = candidate;",
                "+                        }",
                "+                    }",
                "                 }",
                "@@ -160,8 +186,10 @@ public class DiscoverEndomorphisms",
                "-        /*",
                "-         * These parameters are used to avoid division when decomposing the scalar in a GLV point multiplication",
                "-         */",
                "         BigInteger d = (v1[0].multiply(v2[1])).subtract(v1[1].multiply(v2[0]));",
                "-        int bits = n.bitLength() + 16 - (n.bitLength() & 7);",
                "+        /*",
                "+         * These parameters are used to avoid division when decomposing the scalar in a GLV point multiplication.",
                "+         * The precision is determined by 'bits', even 2 bits is enough, but we try to get more whilst keeping it",
                "+         * 8-bit aligned and limiting the possible growth of product sizes on a 32-bit machine.",
                "+         */",
                "+        int bits = n.bitLength() + 16 - (n.bitLength() & 7); ",
                "         BigInteger g1 = roundQuotient(v2[1].shiftLeft(bits), d);",
                "@@ -173,2 +201,3 @@ public class DiscoverEndomorphisms",
                "         printProperty(\"v2\", \"{ \" + v2[0].toString(radix) + \", \" + v2[1].toString(radix) + \" }\");",
                "+        printProperty(\"d\", d.toString(radix));",
                "         printProperty(\"(OPT) g1\", g1.toString(radix));",
                "@@ -233,3 +262,6 @@ public class DiscoverEndomorphisms",
                "         {",
                "-            throw new IllegalStateException();",
                "+            /*",
                "+             * NOTE: This case occurred while testing on curves over tiny fields; probably due to a 0 input.",
                "+             */",
                "+            return null;",
                "         }",
                "@@ -339,3 +371,3 @@ public class DiscoverEndomorphisms",
                "-    private static BigInteger solveQuadraticEquation(BigInteger n, BigInteger r, BigInteger s)",
                "+    private static BigInteger[] solveQuadraticEquation(BigInteger n, BigInteger r, BigInteger s)",
                "     {",
                "@@ -343,9 +375,37 @@ public class DiscoverEndomorphisms",
                "-        BigInteger root = new ECFieldElement.Fp(n, det).sqrt().toBigInteger();",
                "-        if (!root.testBit(0))",
                "+        BigInteger root1 = new ECFieldElement.Fp(n, det).sqrt().toBigInteger(), root2 = n.subtract(root1);",
                "+        if (root1.testBit(0))",
                "+        {",
                "+            root2 = root2.add(n);",
                "+        }",
                "+        else",
                "         {",
                "-            root = n.subtract(root);",
                "+            root1 = root1.add(n);",
                "         }",
                "-        return root.shiftRight(1); // NOTE: implicit -1 of the low-bit",
                "+//        assert root1.testBit(0);",
                "+//        assert root2.testBit(0);",
                "+",
                "+        // NOTE: implicit -1 of the low-bits",
                "+        return new BigInteger[]{ root1.shiftRight(1), root2.shiftRight(1) };",
                "+    }",
                "+",
                "+    private static ECFieldElement[] findBetaValues(ECCurve c)",
                "+    {",
                "+        BigInteger q = c.getField().getCharacteristic();",
                "+        BigInteger e = q.divide(ECConstants.THREE);",
                "+",
                "+        // Search for a random value that generates a non-trival cube root of 1",
                "+        SecureRandom random = new SecureRandom();",
                "+        BigInteger b;",
                "+        do",
                "+        {",
                "+            BigInteger r = BigIntegers.createRandomInRange(ECConstants.TWO, q.subtract(ECConstants.TWO), random);",
                "+            b = r.modPow(e, q);",
                "+        }",
                "+        while (b.equals(ECConstants.ONE));",
                "+",
                "+        ECFieldElement beta = c.fromBigInteger(b);",
                "+",
                "+        return new ECFieldElement[]{ beta, beta.square() }; ",
                "     }"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/math/ec/tools/DiscoverEndomorphisms.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "d142e4ce3cb02cc08f968134acc50372badb16c6"
                ]
            ],
            "tags": [
                "r1rv54",
                "r1rv55",
                "r1rv56",
                "r1rv57",
                "r1rv58",
                "r1rv59",
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: beta, pairs, pair, generator",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f03e2a472f971c209af40d16ec0e69496ee2227f",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1450256163,
            "hunks": 20,
            "message": "Validate CertificateVerify signature algorithm (TLS 1.2+) - check the algorithm is in the CertificateRequest list - add (D)TLS test scenarios for various failure modes",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/tls/DTLSServerProtocol.java b/core/src/main/java/org/bouncycastle/crypto/tls/DTLSServerProtocol.java",
                "index 333f7cb64..49ccb8279 100644",
                "--- a/core/src/main/java/org/bouncycastle/crypto/tls/DTLSServerProtocol.java",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/tls/DTLSServerProtocol.java",
                "@@ -489,2 +489,7 @@ public class DTLSServerProtocol",
                "     {",
                "+        if (state.certificateRequest == null)",
                "+        {",
                "+            throw new IllegalStateException();",
                "+        }",
                "+",
                "         ByteArrayInputStream buf = new ByteArrayInputStream(body);",
                "@@ -497,5 +502,6 @@ public class DTLSServerProtocol",
                "         // Verify the CertificateVerify message contains a correct signature.",
                "-        boolean verified = false;",
                "         try",
                "         {",
                "+            SignatureAndHashAlgorithm signatureAlgorithm = clientCertificateVerify.getAlgorithm();",
                "+",
                "             byte[] hash;",
                "@@ -503,3 +509,4 @@ public class DTLSServerProtocol",
                "             {",
                "-                hash = prepareFinishHash.getFinalHash(clientCertificateVerify.getAlgorithm().getHash());",
                "+                TlsUtils.verifySupportedSignatureAlgorithm(state.certificateRequest.getSupportedSignatureAlgorithms(), signatureAlgorithm);",
                "+                hash = prepareFinishHash.getFinalHash(signatureAlgorithm.getHash());",
                "             }",
                "@@ -516,12 +523,14 @@ public class DTLSServerProtocol",
                "             tlsSigner.init(context);",
                "-            verified = tlsSigner.verifyRawSignature(clientCertificateVerify.getAlgorithm(),",
                "-                clientCertificateVerify.getSignature(), publicKey, hash);",
                "+            if (!tlsSigner.verifyRawSignature(signatureAlgorithm, clientCertificateVerify.getSignature(), publicKey, hash))",
                "+            {",
                "+                throw new TlsFatalAlert(AlertDescription.decrypt_error);",
                "+            }",
                "         }",
                "-        catch (Exception e)",
                "+        catch (TlsFatalAlert e)",
                "         {",
                "+            throw e;",
                "         }",
                "-",
                "-        if (!verified)",
                "+        catch (Exception e)",
                "         {",
                "-            throw new TlsFatalAlert(AlertDescription.decrypt_error);",
                "+            throw new TlsFatalAlert(AlertDescription.decrypt_error, e);",
                "         }",
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/tls/DeferredHash.java b/core/src/main/java/org/bouncycastle/crypto/tls/DeferredHash.java",
                "index 274e69a31..2193e0b06 100644",
                "--- a/core/src/main/java/org/bouncycastle/crypto/tls/DeferredHash.java",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/tls/DeferredHash.java",
                "@@ -106,3 +106,3 @@ class DeferredHash",
                "         {",
                "-            throw new IllegalStateException(\"HashAlgorithm \" + hashAlgorithm + \" is not being tracked\");",
                "+            throw new IllegalStateException(\"HashAlgorithm.\" + HashAlgorithm.getText(hashAlgorithm) + \" is not being tracked\");",
                "         }",
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/tls/HashAlgorithm.java b/core/src/main/java/org/bouncycastle/crypto/tls/HashAlgorithm.java",
                "index dc7482b88..2806e4b2d 100644",
                "--- a/core/src/main/java/org/bouncycastle/crypto/tls/HashAlgorithm.java",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/tls/HashAlgorithm.java",
                "@@ -14,2 +14,30 @@ public class HashAlgorithm",
                "     public static final short sha512 = 6;",
                "+",
                "+    public static String getName(short hashAlgorithm)",
                "+    {",
                "+        switch (hashAlgorithm)",
                "+        {",
                "+        case none:",
                "+            return \"none\";",
                "+        case md5:",
                "+            return \"md5\";",
                "+        case sha1:",
                "+            return \"sha1\";",
                "+        case sha224:",
                "+            return \"sha224\";",
                "+        case sha256:",
                "+            return \"sha256\";",
                "+        case sha384:",
                "+            return \"sha384\";",
                "+        case sha512:",
                "+            return \"sha512\";",
                "+        default:",
                "+            return \"UNKNOWN\";",
                "+        }",
                "+    }",
                "+",
                "+    public static String getText(short hashAlgorithm)",
                "+    {",
                "+        return getName(hashAlgorithm) + \"(\" + hashAlgorithm + \")\";",
                "+    }",
                " }",
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/tls/TlsServerProtocol.java b/core/src/main/java/org/bouncycastle/crypto/tls/TlsServerProtocol.java",
                "index edbe3b4a3..636e7f060 100644",
                "--- a/core/src/main/java/org/bouncycastle/crypto/tls/TlsServerProtocol.java",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/tls/TlsServerProtocol.java",
                "@@ -475,2 +475,7 @@ public class TlsServerProtocol",
                "     {",
                "+        if (certificateRequest == null)",
                "+        {",
                "+            throw new IllegalStateException();",
                "+        }",
                "+",
                "         DigitallySigned clientCertificateVerify = DigitallySigned.parse(getContext(), buf);",
                "@@ -482,2 +487,4 @@ public class TlsServerProtocol",
                "         {",
                "+            SignatureAndHashAlgorithm signatureAlgorithm = clientCertificateVerify.getAlgorithm();",
                "+",
                "             byte[] hash;",
                "@@ -485,3 +492,4 @@ public class TlsServerProtocol",
                "             {",
                "-                hash = prepareFinishHash.getFinalHash(clientCertificateVerify.getAlgorithm().getHash());",
                "+                TlsUtils.verifySupportedSignatureAlgorithm(certificateRequest.getSupportedSignatureAlgorithms(), signatureAlgorithm);",
                "+                hash = prepareFinishHash.getFinalHash(signatureAlgorithm.getHash());",
                "             }",
                "@@ -498,4 +506,3 @@ public class TlsServerProtocol",
                "             tlsSigner.init(getContext());",
                "-            if (!tlsSigner.verifyRawSignature(clientCertificateVerify.getAlgorithm(),",
                "-                clientCertificateVerify.getSignature(), publicKey, hash))",
                "+            if (!tlsSigner.verifyRawSignature(signatureAlgorithm, clientCertificateVerify.getSignature(), publicKey, hash))",
                "             {",
                "@@ -504,2 +511,6 @@ public class TlsServerProtocol",
                "         }",
                "+        catch (TlsFatalAlert e)",
                "+        {",
                "+            throw e;",
                "+        }",
                "         catch (Exception e)",
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/tls/TlsUtils.java b/core/src/main/java/org/bouncycastle/crypto/tls/TlsUtils.java",
                "index 0d95db8bb..e4671d897 100644",
                "--- a/core/src/main/java/org/bouncycastle/crypto/tls/TlsUtils.java",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/tls/TlsUtils.java",
                "@@ -187,5 +187,15 @@ public class TlsUtils",
                "+    public static boolean isTLSv11(ProtocolVersion version)",
                "+    {",
                "+        return ProtocolVersion.TLSv11.isEqualOrEarlierVersionOf(version.getEquivalentTLSVersion());",
                "+    }",
                "+",
                "     public static boolean isTLSv11(TlsContext context)",
                "     {",
                "-        return ProtocolVersion.TLSv11.isEqualOrEarlierVersionOf(context.getServerVersion().getEquivalentTLSVersion());",
                "+        return isTLSv11(context.getServerVersion());",
                "+    }",
                "+",
                "+    public static boolean isTLSv12(ProtocolVersion version)",
                "+    {",
                "+        return ProtocolVersion.TLSv12.isEqualOrEarlierVersionOf(version.getEquivalentTLSVersion());",
                "     }",
                "@@ -194,3 +204,3 @@ public class TlsUtils",
                "     {",
                "-        return ProtocolVersion.TLSv12.isEqualOrEarlierVersionOf(context.getServerVersion().getEquivalentTLSVersion());",
                "+        return isTLSv12(context.getServerVersion());",
                "     }",
                "@@ -904,2 +914,31 @@ public class TlsUtils",
                "+    public static void verifySupportedSignatureAlgorithm(Vector supportedSignatureAlgorithms, SignatureAndHashAlgorithm signatureAlgorithm)",
                "+        throws IOException",
                "+    {",
                "+        if (supportedSignatureAlgorithms == null || supportedSignatureAlgorithms.size() < 1",
                "+            || supportedSignatureAlgorithms.size() >= (1 << 15))",
                "+        {",
                "+            throw new IllegalArgumentException(",
                "+                \"'supportedSignatureAlgorithms' must have length from 1 to (2^15 - 1)\");",
                "+        }",
                "+        if (signatureAlgorithm == null)",
                "+        {",
                "+            throw new IllegalArgumentException(\"'signatureAlgorithm' cannot be null\");",
                "+        }",
                "+",
                "+        if (signatureAlgorithm.getSignature() != SignatureAlgorithm.anonymous)",
                "+        {",
                "+            for (int i = 0; i < supportedSignatureAlgorithms.size(); ++i)",
                "+            {",
                "+                SignatureAndHashAlgorithm entry = (SignatureAndHashAlgorithm)supportedSignatureAlgorithms.elementAt(i);",
                "+                if (entry.getHash() == signatureAlgorithm.getHash() && entry.getSignature() == signatureAlgorithm.getSignature())",
                "+                {",
                "+                    return;",
                "+                }",
                "+            }",
                "+        }",
                "+",
                "+        throw new TlsFatalAlert(AlertDescription.illegal_parameter);",
                "+    }",
                "+",
                "     public static byte[] PRF(TlsContext context, byte[] secret, String asciiLabel, byte[] seed, int size)"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/crypto/tls/DTLSServerProtocol.java",
                "core/src/main/java/org/bouncycastle/crypto/tls/DeferredHash.java",
                "core/src/main/java/org/bouncycastle/crypto/tls/HashAlgorithm.java",
                "core/src/main/java/org/bouncycastle/crypto/tls/TlsServerProtocol.java",
                "core/src/main/java/org/bouncycastle/crypto/tls/TlsUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "c79791b3439e2fe1679ef7cc036bf487efb8199a"
                ]
            ],
            "tags": [
                "r1rv54",
                "r1rv55",
                "r1rv56",
                "r1rv57",
                "r1rv58",
                "r1rv59",
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: test",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "79c6c57405ad5ac78680af8aeb5f92c45b4c3ca1",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1523937064,
            "hunks": 1,
            "message": "Add belated entry for RFC 7748 to 1.59 notes",
            "diff": [
                "diff --git a/docs/releasenotes.html b/docs/releasenotes.html",
                "index 004bd8c22..6e1445fcc 100644",
                "--- a/docs/releasenotes.html",
                "+++ b/docs/releasenotes.html",
                "@@ -76,2 +76,3 @@ Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2017, December 28",
                " <li>A DEROtherInfo generator for key agreement using NewHope as the source of the shared private info has been added that can be used in conjunction with regular key agreement algorithms.</li>",
                "+<li>RFC 7748: Added low-level implementations of X25519 and X448.</li>",
                " </ul>"
            ],
            "changed_files": [
                "docs/releasenotes.html"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "a4c3c16f886f0daa68c27ef7b178367d666d8b7a"
                ],
                [
                    "no-tag",
                    "67b359b410908fef605744c7ec4f3bc8f3ea7b1f"
                ]
            ],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: low-level",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b6173938f353459f254f6ae84483744c3a8fbd5d",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1450529906,
            "hunks": 2,
            "message": "Javadoc for TlsClient.getClientHelloRecordLayerVersion",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/tls/AbstractTlsClient.java b/core/src/main/java/org/bouncycastle/crypto/tls/AbstractTlsClient.java",
                "index d3f0ce5d7..57c46f8b0 100644",
                "--- a/core/src/main/java/org/bouncycastle/crypto/tls/AbstractTlsClient.java",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/tls/AbstractTlsClient.java",
                "@@ -69,9 +69,2 @@ public abstract class AbstractTlsClient",
                "-    /**",
                "-     * RFC 5246 E.1. \"TLS clients that wish to negotiate with older servers MAY send any value",
                "-     * {03,XX} as the record layer version number. Typical values would be {03,00}, the lowest",
                "-     * version number supported by the client, and the value of ClientHello.client_version. No",
                "-     * single value will guarantee interoperability with all old servers, but this is a complex",
                "-     * topic beyond the scope of this document.\"",
                "-     */",
                "     public ProtocolVersion getClientHelloRecordLayerVersion()",
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/tls/TlsClient.java b/core/src/main/java/org/bouncycastle/crypto/tls/TlsClient.java",
                "index da688b047..00f246b40 100644",
                "--- a/core/src/main/java/org/bouncycastle/crypto/tls/TlsClient.java",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/tls/TlsClient.java",
                "@@ -21,2 +21,16 @@ public interface TlsClient",
                "+    /**",
                "+     * Return the {@link ProtocolVersion} to use for the <c>TLSPlaintext.version</c> field prior to",
                "+     * receiving the server version. NOTE: This method is <b>not</b> called for DTLS.",
                "+     *",
                "+     * <p>",
                "+     * See RFC 5246 E.1.: \"TLS clients that wish to negotiate with older servers MAY send any value",
                "+     * {03,XX} as the record layer version number. Typical values would be {03,00}, the lowest",
                "+     * version number supported by the client, and the value of ClientHello.client_version. No",
                "+     * single value will guarantee interoperability with all old servers, but this is a complex",
                "+     * topic beyond the scope of this document.\"",
                "+     * </p>",
                "+     *",
                "+     * @return The {@link ProtocolVersion} to use.",
                "+     */",
                "     ProtocolVersion getClientHelloRecordLayerVersion();"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/crypto/tls/AbstractTlsClient.java",
                "core/src/main/java/org/bouncycastle/crypto/tls/TlsClient.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "6a241b7d6e9b29934fe95852102a7f7f40bfc938"
                ]
            ],
            "tags": [
                "r1v60"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: version",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fd53f6bb8ca2c82b2f2c8972f146c30dffd96727",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1450260409,
            "hunks": 5,
            "message": "Validate ServerKeyExchange signature algorithm (TLS 1.2+) - check the algorithm is in signature_algorithms (or the implicit defaults if that extension was not sent) - add (D)TLS test scenarios to cover these checks",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/tls/AbstractTlsKeyExchange.java b/core/src/main/java/org/bouncycastle/crypto/tls/AbstractTlsKeyExchange.java",
                "index 43e80e64b..d684aba01 100644",
                "--- a/core/src/main/java/org/bouncycastle/crypto/tls/AbstractTlsKeyExchange.java",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/tls/AbstractTlsKeyExchange.java",
                "@@ -20,2 +20,13 @@ public abstract class AbstractTlsKeyExchange",
                "+    protected DigitallySigned parseSignature(InputStream input) throws IOException",
                "+    {",
                "+        DigitallySigned signature = DigitallySigned.parse(context, input);",
                "+        SignatureAndHashAlgorithm signatureAlgorithm = signature.getAlgorithm();",
                "+        if (signatureAlgorithm != null)",
                "+        {",
                "+            TlsUtils.verifySupportedSignatureAlgorithm(supportedSignatureAlgorithms, signatureAlgorithm);",
                "+        }",
                "+        return signature;",
                "+    }",
                "+",
                "     public void init(TlsContext context)",
                "@@ -82,3 +93,2 @@ public abstract class AbstractTlsKeyExchange",
                "             }",
                "-",
                "         }",
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/tls/TlsDHEKeyExchange.java b/core/src/main/java/org/bouncycastle/crypto/tls/TlsDHEKeyExchange.java",
                "index b182bd683..f4312306d 100644",
                "--- a/core/src/main/java/org/bouncycastle/crypto/tls/TlsDHEKeyExchange.java",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/tls/TlsDHEKeyExchange.java",
                "@@ -81,3 +81,3 @@ public class TlsDHEKeyExchange",
                "-        DigitallySigned signed_params = DigitallySigned.parse(context, input);",
                "+        DigitallySigned signed_params = parseSignature(input);",
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/tls/TlsECDHEKeyExchange.java b/core/src/main/java/org/bouncycastle/crypto/tls/TlsECDHEKeyExchange.java",
                "index 017b36e36..3a9a5f3cc 100644",
                "--- a/core/src/main/java/org/bouncycastle/crypto/tls/TlsECDHEKeyExchange.java",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/tls/TlsECDHEKeyExchange.java",
                "@@ -82,3 +82,3 @@ public class TlsECDHEKeyExchange",
                "-        DigitallySigned signed_params = DigitallySigned.parse(context, input);",
                "+        DigitallySigned signed_params = parseSignature(input);",
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/tls/TlsSRPKeyExchange.java b/core/src/main/java/org/bouncycastle/crypto/tls/TlsSRPKeyExchange.java",
                "index 1ec6ee2eb..a026132fd 100644",
                "--- a/core/src/main/java/org/bouncycastle/crypto/tls/TlsSRPKeyExchange.java",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/tls/TlsSRPKeyExchange.java",
                "@@ -216,3 +216,3 @@ public class TlsSRPKeyExchange extends AbstractTlsKeyExchange",
                "         {",
                "-            DigitallySigned signed_params = DigitallySigned.parse(context, input);",
                "+            DigitallySigned signed_params = parseSignature(input);"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/crypto/tls/AbstractTlsKeyExchange.java",
                "core/src/main/java/org/bouncycastle/crypto/tls/TlsDHEKeyExchange.java",
                "core/src/main/java/org/bouncycastle/crypto/tls/TlsECDHEKeyExchange.java",
                "core/src/main/java/org/bouncycastle/crypto/tls/TlsSRPKeyExchange.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "db215efa17eec049743d1c87cac51dccd270fe39"
                ]
            ],
            "tags": [
                "r1rv54",
                "r1rv55",
                "r1rv56",
                "r1rv57",
                "r1rv58",
                "r1rv59",
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: test",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2f8a06c0dc9421d8870241d23ff80e58b35894ae",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1525261016,
            "hunks": 1,
            "message": "update",
            "diff": [
                "diff --git a/CONTRIBUTORS.html b/CONTRIBUTORS.html",
                "index d4e4fa358..38e23fdcb 100644",
                "--- a/CONTRIBUTORS.html",
                "+++ b/CONTRIBUTORS.html",
                "@@ -471,2 +471,4 @@ CertPath support for implicit DSA parameters and a range of NameConstraints. Add",
                " <li>ZZMarquis &lt;https://github.com/ZZMarquis&gt; offset patch for SM2 decrypt.</li>",
                "+<li>Andreas Kretschmer &lt;https://github.com/Akretsch&gt; NPE fix for CertTemplate.getVersion()</li>",
                "+<li>Armin Lunkeit, Michael Tautenhahn &lt;&gt; identification of M-R test issue on higher certainty values in RSA key pair generation.</li> ",
                " </ul>"
            ],
            "changed_files": [
                "CONTRIBUTORS.html"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "31e18ea0d6cd8a88d41c55cf6b5b885155daedf9"
                ],
                [
                    "no-tag",
                    "d6550463d89974d4f82b1f8c45c54b6be374b1a6"
                ],
                [
                    "no-tag",
                    "6d2aaf7169f6343742c069f39dcbc3bd4bd2e005"
                ],
                [
                    "no-tag",
                    "a2a0a344c35cfebdeb8e6686fb96d358bce08d69"
                ],
                [
                    "no-tag",
                    "2f4956380578899572542ddb91a2bad3e0f4a4ff"
                ]
            ],
            "tags": [
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: RSA",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2798870e5f416f0a346adde0b0a8cde6a4ea93a2",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1450699442,
            "hunks": 16,
            "message": "BJA-584 Fix DTLS record-layer version handling - Also https://github.com/bcgit/bc-java/pull/111",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/tls/DTLSClientProtocol.java b/core/src/main/java/org/bouncycastle/crypto/tls/DTLSClientProtocol.java",
                "index a31dd9318..bcbf2166a 100644",
                "--- a/core/src/main/java/org/bouncycastle/crypto/tls/DTLSClientProtocol.java",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/tls/DTLSClientProtocol.java",
                "@@ -85,2 +85,5 @@ public class DTLSClientProtocol",
                "         byte[] clientHelloBody = generateClientHello(state, state.client);",
                "+",
                "+        recordLayer.setWriteVersion(ProtocolVersion.DTLSv10);",
                "+",
                "         handshake.sendMessage(HandshakeType.client_hello, clientHelloBody);",
                "@@ -91,3 +94,3 @@ public class DTLSClientProtocol",
                "         {",
                "-            ProtocolVersion recordLayerVersion = recordLayer.resetDiscoveredPeerVersion();",
                "+            ProtocolVersion recordLayerVersion = recordLayer.getReadVersion();",
                "             ProtocolVersion client_version = state.clientContext.getClientVersion();",
                "@@ -105,2 +108,4 @@ public class DTLSClientProtocol",
                "+            recordLayer.setReadVersion(null);",
                "+",
                "             byte[] cookie = processHelloVerifyRequest(state, serverMessage.getBody());",
                "@@ -116,3 +121,5 @@ public class DTLSClientProtocol",
                "         {",
                "-            reportServerVersion(state, recordLayer.getDiscoveredPeerVersion());",
                "+            ProtocolVersion recordLayerVersion = recordLayer.getReadVersion();",
                "+            reportServerVersion(state, recordLayerVersion);",
                "+            recordLayer.setWriteVersion(recordLayerVersion);",
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/tls/DTLSRecordLayer.java b/core/src/main/java/org/bouncycastle/crypto/tls/DTLSRecordLayer.java",
                "index 5abd86ecf..81c1f41a0 100644",
                "--- a/core/src/main/java/org/bouncycastle/crypto/tls/DTLSRecordLayer.java",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/tls/DTLSRecordLayer.java",
                "@@ -20,3 +20,3 @@ class DTLSRecordLayer",
                "     private volatile boolean failed = false;",
                "-    private volatile ProtocolVersion discoveredPeerVersion = null;",
                "+    private volatile ProtocolVersion readVersion = null, writeVersion = null;",
                "     private volatile boolean inHandshake;",
                "@@ -51,12 +51,15 @@ class DTLSRecordLayer",
                "-    ProtocolVersion getDiscoveredPeerVersion()",
                "+    ProtocolVersion getReadVersion()",
                "     {",
                "-        return discoveredPeerVersion;",
                "+        return readVersion;",
                "     }",
                "-    ProtocolVersion resetDiscoveredPeerVersion()",
                "+    void setReadVersion(ProtocolVersion readVersion)",
                "     {",
                "-        ProtocolVersion result = discoveredPeerVersion; ",
                "-        discoveredPeerVersion = null;",
                "-        return result;",
                "+        this.readVersion = readVersion;",
                "+    }",
                "+",
                "+    void setWriteVersion(ProtocolVersion writeVersion)",
                "+    {",
                "+        this.writeVersion = writeVersion;",
                "     }",
                "@@ -203,3 +206,8 @@ class DTLSRecordLayer",
                "                 ProtocolVersion version = TlsUtils.readVersion(record, 1);",
                "-                if (discoveredPeerVersion != null && !discoveredPeerVersion.equals(version))",
                "+                if (!version.isDTLS())",
                "+                {",
                "+                    continue;",
                "+                }",
                "+",
                "+                if (readVersion != null && !readVersion.equals(version))",
                "                 {",
                "@@ -219,5 +227,5 @@ class DTLSRecordLayer",
                "-                if (discoveredPeerVersion == null)",
                "+                if (readVersion == null)",
                "                 {",
                "-                    discoveredPeerVersion = version;",
                "+                    readVersion = version;",
                "                 }",
                "@@ -477,2 +485,8 @@ class DTLSRecordLayer",
                "     {",
                "+        // Never send anything until a valid ClientHello has been received",
                "+        if (writeVersion == null)",
                "+        {",
                "+            return;",
                "+        }",
                "+",
                "         if (len > this.plaintextLimit)",
                "@@ -501,4 +515,3 @@ class DTLSRecordLayer",
                "         TlsUtils.writeUint8(contentType, record, 0);",
                "-        ProtocolVersion version = discoveredPeerVersion != null ? discoveredPeerVersion : context.getClientVersion();",
                "-        TlsUtils.writeVersion(version, record, 1);",
                "+        TlsUtils.writeVersion(writeVersion, record, 1);",
                "         TlsUtils.writeUint16(recordEpoch, record, 3);",
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/tls/DTLSServerProtocol.java b/core/src/main/java/org/bouncycastle/crypto/tls/DTLSServerProtocol.java",
                "index 17ec2fba9..e909f57b5 100644",
                "--- a/core/src/main/java/org/bouncycastle/crypto/tls/DTLSServerProtocol.java",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/tls/DTLSServerProtocol.java",
                "@@ -91,8 +91,4 @@ public class DTLSServerProtocol",
                "-        {",
                "-            // NOTE: After receiving a record from the client, we discover the record layer version",
                "-            ProtocolVersion client_version = recordLayer.getDiscoveredPeerVersion();",
                "-            // TODO Read RFCs for guidance on the expected record layer version number",
                "-            state.serverContext.setClientVersion(client_version);",
                "-        }",
                "+        // NOTE: DTLSRecordLayer requires any DTLS version, we don't otherwise constrain this",
                "+//        ProtocolVersion recordLayerVersion = recordLayer.getReadVersion();",
                "@@ -111,3 +107,7 @@ public class DTLSServerProtocol",
                "             applyMaxFragmentLengthExtension(recordLayer, securityParameters.maxFragmentLength);",
                "-    ",
                "+",
                "+            ProtocolVersion recordLayerVersion = state.serverContext.getServerVersion();",
                "+            recordLayer.setReadVersion(recordLayerVersion);",
                "+            recordLayer.setWriteVersion(recordLayerVersion);",
                "+",
                "             handshake.sendMessage(HandshakeType.server_hello, serverHelloBody);"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/crypto/tls/DTLSClientProtocol.java",
                "core/src/main/java/org/bouncycastle/crypto/tls/DTLSRecordLayer.java",
                "core/src/main/java/org/bouncycastle/crypto/tls/DTLSServerProtocol.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "b6be49786b13314b4c29501fb17df098e728a7fe"
                ]
            ],
            "tags": [
                "r1rv54",
                "r1rv55",
                "r1rv56",
                "r1rv57",
                "r1rv58",
                "r1rv59",
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: version",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7f6b7781749ce3aebc1090bc53b5abf41d682827",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1450210783,
            "hunks": 11,
            "message": "Added support for PKCS#7 ANY to non streaming CMS, added verification support for PKCS#7 ANY to streaming CMS.",
            "diff": [
                "diff --git a/pkix/src/main/java/org/bouncycastle/cms/CMSSignedData.java b/pkix/src/main/java/org/bouncycastle/cms/CMSSignedData.java",
                "index 981d15a42..84b5edca3 100644",
                "--- a/pkix/src/main/java/org/bouncycastle/cms/CMSSignedData.java",
                "+++ b/pkix/src/main/java/org/bouncycastle/cms/CMSSignedData.java",
                "@@ -15,2 +15,3 @@ import java.util.Set;",
                "+import org.bouncycastle.asn1.ASN1Encodable;",
                " import org.bouncycastle.asn1.ASN1EncodableVector;",
                "@@ -189,7 +190,14 @@ public class CMSSignedData",
                "         //",
                "-        if (signedData.getEncapContentInfo().getContent() != null)",
                "+        ASN1Encodable content = signedData.getEncapContentInfo().getContent();",
                "+        if (content != null)",
                "         {",
                "-            this.signedContent = new CMSProcessableByteArray(signedData.getEncapContentInfo().getContentType(),",
                "-                    ((ASN1OctetString)(signedData.getEncapContentInfo()",
                "-                                                .getContent())).getOctets());",
                "+            if (content instanceof ASN1OctetString)",
                "+            {",
                "+                this.signedContent = new CMSProcessableByteArray(signedData.getEncapContentInfo().getContentType(),",
                "+                    ((ASN1OctetString)content).getOctets());",
                "+            }",
                "+            else",
                "+            {",
                "+                this.signedContent = new PKCS7ProcessableObject(signedData.getEncapContentInfo().getContentType(), content);",
                "+            }",
                "         }",
                "diff --git a/pkix/src/main/java/org/bouncycastle/cms/CMSSignedDataParser.java b/pkix/src/main/java/org/bouncycastle/cms/CMSSignedDataParser.java",
                "index faa0945c2..2625ea796 100644",
                "--- a/pkix/src/main/java/org/bouncycastle/cms/CMSSignedDataParser.java",
                "+++ b/pkix/src/main/java/org/bouncycastle/cms/CMSSignedDataParser.java",
                "@@ -181,9 +181,29 @@ public class CMSSignedDataParser",
                "             ContentInfoParser     cont = _signedData.getEncapContentInfo();",
                "-            ASN1OctetStringParser octs = (ASN1OctetStringParser)",
                "-                cont.getContent(BERTags.OCTET_STRING);",
                "+            ASN1Encodable contentParser = cont.getContent(BERTags.OCTET_STRING);",
                "-            if (octs != null)",
                "+            if (contentParser instanceof ASN1OctetStringParser)",
                "             {",
                "-                CMSTypedStream ctStr = new CMSTypedStream(",
                "-                    cont.getContentType().getId(), octs.getOctetStream());",
                "+                ASN1OctetStringParser octs = (ASN1OctetStringParser)contentParser;",
                "+",
                "+                if (octs != null)",
                "+                {",
                "+                    CMSTypedStream ctStr = new CMSTypedStream(",
                "+                        cont.getContentType(), octs.getOctetStream());",
                "+",
                "+                    if (_signedContent == null)",
                "+                    {",
                "+                        _signedContent = ctStr;",
                "+                    }",
                "+                    else",
                "+                    {",
                "+                        //",
                "+                        // content passed in, need to read past empty encapsulated content info object if present",
                "+                        //",
                "+                        ctStr.drain();",
                "+                    }",
                "+                }",
                "+            }",
                "+            else",
                "+            {",
                "+                PKCS7TypedStream pkcs7Stream = new PKCS7TypedStream(cont.getContentType(), contentParser);",
                "@@ -191,3 +211,3 @@ public class CMSSignedDataParser",
                "                 {",
                "-                    _signedContent = ctStr; ",
                "+                    _signedContent = pkcs7Stream;",
                "                 }",
                "@@ -198,3 +218,3 @@ public class CMSSignedDataParser",
                "                     //",
                "-                    ctStr.drain();",
                "+                    pkcs7Stream.drain();",
                "                 }",
                "diff --git a/pkix/src/main/java/org/bouncycastle/cms/CMSTypedStream.java b/pkix/src/main/java/org/bouncycastle/cms/CMSTypedStream.java",
                "index eda3bde32..78379a50b 100644",
                "--- a/pkix/src/main/java/org/bouncycastle/cms/CMSTypedStream.java",
                "+++ b/pkix/src/main/java/org/bouncycastle/cms/CMSTypedStream.java",
                "@@ -16,3 +16,4 @@ public class CMSTypedStream",
                "     private final ASN1ObjectIdentifier      _oid;",
                "-    private final InputStream _in;",
                "+",
                "+    protected InputStream _in;",
                "@@ -55,2 +56,8 @@ public class CMSTypedStream",
                "+    protected CMSTypedStream(",
                "+         ASN1ObjectIdentifier oid)",
                "+    {",
                "+        _oid = oid;",
                "+    }",
                "+",
                "     public ASN1ObjectIdentifier getContentType()",
                "diff --git a/pkix/src/main/java/org/bouncycastle/cms/PKCS7ProcessableObject.java b/pkix/src/main/java/org/bouncycastle/cms/PKCS7ProcessableObject.java",
                "new file mode 100644",
                "index 000000000..077b2dc64",
                "--- /dev/null",
                "+++ b/pkix/src/main/java/org/bouncycastle/cms/PKCS7ProcessableObject.java",
                "@@ -0,0 +1,65 @@",
                "+package org.bouncycastle.cms;",
                "+",
                "+import java.io.IOException;",
                "+import java.io.OutputStream;",
                "+import java.util.Iterator;",
                "+",
                "+import org.bouncycastle.asn1.ASN1Encodable;",
                "+import org.bouncycastle.asn1.ASN1Encoding;",
                "+import org.bouncycastle.asn1.ASN1ObjectIdentifier;",
                "+import org.bouncycastle.asn1.ASN1Sequence;",
                "+",
                "+public class PKCS7ProcessableObject",
                "+    implements CMSTypedData",
                "+{",
                "+    private final ASN1ObjectIdentifier type;",
                "+    private final ASN1Encodable structure;",
                "+",
                "+    public PKCS7ProcessableObject(",
                "+        ASN1ObjectIdentifier type,",
                "+        ASN1Encodable structure)",
                "+    {",
                "+        this.type = type;",
                "+        this.structure = structure;",
                "+    }",
                "+",
                "+    public ASN1ObjectIdentifier getContentType()",
                "+    {",
                "+        return type;",
                "+    }",
                "+",
                "+    public void write(OutputStream cOut)",
                "+        throws IOException, CMSException",
                "+    {",
                "+        if (structure instanceof ASN1Sequence)",
                "+        {",
                "+            ASN1Sequence s = ASN1Sequence.getInstance(structure);",
                "+",
                "+            for (Iterator it = s.iterator(); it.hasNext();)",
                "+            {",
                "+                ASN1Encodable enc = (ASN1Encodable)it.next();",
                "+",
                "+                cOut.write(enc.toASN1Primitive().getEncoded(ASN1Encoding.DER));",
                "+            }",
                "+        }",
                "+        else",
                "+        {",
                "+            byte[] encoded = structure.toASN1Primitive().getEncoded(ASN1Encoding.DER);",
                "+            int index = 1;",
                "+",
                "+            while ((encoded[index] & 0xff) > 127)",
                "+            {",
                "+                index++;",
                "+            }",
                "+",
                "+            index++;",
                "+",
                "+            cOut.write(encoded, index, encoded.length - index);",
                "+        }",
                "+    }",
                "+",
                "+    public Object getContent()",
                "+    {",
                "+        return structure;",
                "+    }",
                "+}",
                "diff --git a/pkix/src/main/java/org/bouncycastle/cms/PKCS7TypedStream.java b/pkix/src/main/java/org/bouncycastle/cms/PKCS7TypedStream.java",
                "new file mode 100644",
                "index 000000000..d32ce32ef",
                "--- /dev/null",
                "+++ b/pkix/src/main/java/org/bouncycastle/cms/PKCS7TypedStream.java",
                "@@ -0,0 +1,62 @@",
                "+package org.bouncycastle.cms;",
                "+",
                "+import java.io.ByteArrayInputStream;",
                "+import java.io.IOException;",
                "+import java.io.InputStream;",
                "+",
                "+import org.bouncycastle.asn1.ASN1Encodable;",
                "+import org.bouncycastle.asn1.ASN1Encoding;",
                "+import org.bouncycastle.asn1.ASN1ObjectIdentifier;",
                "+",
                "+public class PKCS7TypedStream",
                "+    extends CMSTypedStream",
                "+{",
                "+    private final ASN1Encodable content;",
                "+",
                "+    public PKCS7TypedStream(ASN1ObjectIdentifier oid, ASN1Encodable encodable)",
                "+        throws IOException",
                "+    {",
                "+        super(oid);",
                "+",
                "+        content = encodable;",
                "+    }",
                "+",
                "+    public ASN1Encodable getContent()",
                "+    {",
                "+        return content;",
                "+    }",
                "+",
                "+    public InputStream getContentStream()",
                "+    {",
                "+        try",
                "+        {",
                "+            return getContentStream(content);",
                "+        }",
                "+        catch (IOException e)",
                "+        {",
                "+            throw new IllegalStateException(\"unable to convert content to stream: \" + e.getMessage(), e);",
                "+        }",
                "+    }",
                "+",
                "+    public void drain()",
                "+        throws IOException",
                "+    {",
                "+        getContentStream(content); // this will parse in the data",
                "+    }",
                "+",
                "+    private InputStream getContentStream(ASN1Encodable encodable)",
                "+        throws IOException",
                "+    {",
                "+        byte[] encoded = encodable.toASN1Primitive().getEncoded(ASN1Encoding.DER);",
                "+        int index = 1;",
                "+",
                "+        while ((encoded[index] & 0xff) > 127)",
                "+        {",
                "+            index++;",
                "+        }",
                "+",
                "+        index++;",
                "+",
                "+        return new ByteArrayInputStream(encoded, index, encoded.length - index);",
                "+    }",
                "+}"
            ],
            "changed_files": [
                "pkix/src/main/java/org/bouncycastle/cms/CMSSignedData.java",
                "pkix/src/main/java/org/bouncycastle/cms/CMSSignedDataParser.java",
                "pkix/src/main/java/org/bouncycastle/cms/CMSTypedStream.java",
                "pkix/src/main/java/org/bouncycastle/cms/PKCS7ProcessableObject.java",
                "pkix/src/main/java/org/bouncycastle/cms/PKCS7TypedStream.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "7": "PBEWITHSHA-256AND128BITAES-CBC-BC encryption yields different results between v1.52 and v1.53 onwards #230"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "0daa18f6401d4f720e594bc7a32c29394ed41c93"
                ]
            ],
            "tags": [
                "r1rv54",
                "r1rv55",
                "r1rv56",
                "r1rv57",
                "r1rv58",
                "r1rv59",
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 7",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "dd88195164fa00721ef4ca2b01ce7fd15c8181ed",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1450483429,
            "hunks": 6,
            "message": "Added fixed salt use.",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/signers/ISO9796d2PSSSigner.java b/core/src/main/java/org/bouncycastle/crypto/signers/ISO9796d2PSSSigner.java",
                "index eecc5a8c7..cc2ed0f4a 100644",
                "--- a/core/src/main/java/org/bouncycastle/crypto/signers/ISO9796d2PSSSigner.java",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/signers/ISO9796d2PSSSigner.java",
                "@@ -523,3 +523,10 @@ public class ISO9796d2PSSSigner",
                "         // Update for the salt",
                "-        digest.update(block, mStart + recoveredMessage.length, saltLength);",
                "+        if (standardSalt != null)",
                "+        {",
                "+            digest.update(standardSalt, 0, standardSalt.length);",
                "+        }",
                "+        else",
                "+        {",
                "+            digest.update(block, mStart + recoveredMessage.length, saltLength);",
                "+        }",
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/signers/PSSSigner.java b/core/src/main/java/org/bouncycastle/crypto/signers/PSSSigner.java",
                "index 200b094c9..7b6d69ac7 100644",
                "--- a/core/src/main/java/org/bouncycastle/crypto/signers/PSSSigner.java",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/signers/PSSSigner.java",
                "@@ -32,2 +32,3 @@ public class PSSSigner",
                "     private int                         mgfhLen;",
                "+    private boolean                     sSet;",
                "     private int                         sLen;",
                "@@ -84,2 +85,3 @@ public class PSSSigner",
                "         this.mgfhLen = mgfDigest.getDigestSize();",
                "+        this.sSet = false;",
                "         this.sLen = sLen;",
                "@@ -90,2 +92,38 @@ public class PSSSigner",
                "+    public PSSSigner(",
                "+        AsymmetricBlockCipher   cipher,",
                "+        Digest                  digest,",
                "+        byte[]                  salt)",
                "+    {",
                "+        this(cipher, digest, digest, salt, TRAILER_IMPLICIT);",
                "+    }",
                "+",
                "+    public PSSSigner(",
                "+        AsymmetricBlockCipher   cipher,",
                "+        Digest                  contentDigest,",
                "+        Digest                  mgfDigest,",
                "+        byte[]                  salt)",
                "+    {",
                "+        this(cipher, contentDigest, mgfDigest, salt, TRAILER_IMPLICIT);",
                "+    }",
                "+",
                "+    public PSSSigner(",
                "+        AsymmetricBlockCipher   cipher,",
                "+        Digest                  contentDigest,",
                "+        Digest                  mgfDigest,",
                "+        byte[]                  salt,",
                "+        byte                    trailer)",
                "+    {",
                "+        this.cipher = cipher;",
                "+        this.contentDigest = contentDigest;",
                "+        this.mgfDigest = mgfDigest;",
                "+        this.hLen = contentDigest.getDigestSize();",
                "+        this.mgfhLen = mgfDigest.getDigestSize();",
                "+        this.sSet = true;",
                "+        this.sLen = salt.length;",
                "+        this.salt = salt;",
                "+        this.mDash = new byte[8 + sLen + hLen];",
                "+        this.trailer = trailer;",
                "+    }",
                "+",
                "     public void init(",
                "@@ -190,3 +228,6 @@ public class PSSSigner",
                "         {",
                "-            random.nextBytes(salt);",
                "+            if (!sSet)",
                "+            {",
                "+                random.nextBytes(salt);",
                "+            }",
                "@@ -272,3 +313,10 @@ public class PSSSigner",
                "-        System.arraycopy(block, block.length - sLen - hLen - 1, mDash, mDash.length - sLen, sLen);",
                "+        if (sSet)",
                "+        {",
                "+            System.arraycopy(salt, 0, mDash, mDash.length - sLen, sLen);",
                "+        }",
                "+        else",
                "+        {",
                "+            System.arraycopy(block, block.length - sLen - hLen - 1, mDash, mDash.length - sLen, sLen);",
                "+        }"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/crypto/signers/ISO9796d2PSSSigner.java",
                "core/src/main/java/org/bouncycastle/crypto/signers/PSSSigner.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "5391cd536cbc828b56d6991703984eac6cce9d34"
                ]
            ],
            "tags": [
                "r1rv54",
                "r1rv55",
                "r1rv56",
                "r1rv57",
                "r1rv58",
                "r1rv59",
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7eeeed988a692e36553b82ba98043689236dcde0",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1450294529,
            "hunks": 2,
            "message": "fixed casting of ASN.1 DERApplicationSpecific",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/asn1/util/ASN1Dump.java b/core/src/main/java/org/bouncycastle/asn1/util/ASN1Dump.java",
                "index 540891167..b239365eb 100644",
                "--- a/core/src/main/java/org/bouncycastle/asn1/util/ASN1Dump.java",
                "+++ b/core/src/main/java/org/bouncycastle/asn1/util/ASN1Dump.java",
                "@@ -5,2 +5,3 @@ import java.util.Enumeration;",
                "+import org.bouncycastle.asn1.ASN1ApplicationSpecific;",
                " import org.bouncycastle.asn1.ASN1Boolean;",
                "@@ -289,3 +290,3 @@ public class ASN1Dump",
                "     {",
                "-        DERApplicationSpecific app = (DERApplicationSpecific)obj;",
                "+        ASN1ApplicationSpecific app = ASN1ApplicationSpecific.getInstance(obj);",
                "         StringBuffer buf = new StringBuffer();"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/asn1/util/ASN1Dump.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "1f7b70ee8662368b0b8cbd018911288162e1ceef"
                ]
            ],
            "tags": [
                "r1rv54",
                "r1rv55",
                "r1rv56",
                "r1rv57",
                "r1rv58",
                "r1rv59",
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8adbe84e5fb7061b81553dd5415b2a92c3eeff24",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1525140159,
            "hunks": 3,
            "message": "deprecated class removal.",
            "diff": [
                "diff --git a/mail/src/main/java/org/bouncycastle/mail/smime/examples/ValidateSignedMail.java b/mail/src/main/java/org/bouncycastle/mail/smime/examples/ValidateSignedMail.java",
                "index 39509604a..996540927 100644",
                "--- a/mail/src/main/java/org/bouncycastle/mail/smime/examples/ValidateSignedMail.java",
                "+++ b/mail/src/main/java/org/bouncycastle/mail/smime/examples/ValidateSignedMail.java",
                "@@ -31,2 +31,3 @@ import org.bouncycastle.asn1.ASN1Encoding;",
                " import org.bouncycastle.asn1.x509.Extension;",
                "+import org.bouncycastle.cert.jcajce.JcaX509ExtensionUtils;",
                " import org.bouncycastle.cms.SignerInformation;",
                "@@ -36,3 +37,2 @@ import org.bouncycastle.mail.smime.validator.SignedMailValidator;",
                " import org.bouncycastle.x509.PKIXCertPathReviewer;",
                "-import org.bouncycastle.x509.extension.X509ExtensionUtil;",
                "@@ -293,4 +293,4 @@ public class ValidateSignedMail",
                "             {",
                "-                ASN1Encodable extValue = X509ExtensionUtil",
                "-                        .fromExtensionValue(ncBytes);",
                "+                ASN1Encodable extValue = JcaX509ExtensionUtils",
                "+                        .parseExtensionValue(ncBytes);",
                "                 return new TrustAnchor(cert, extValue.toASN1Primitive().getEncoded(ASN1Encoding.DER));"
            ],
            "changed_files": [
                "mail/src/main/java/org/bouncycastle/mail/smime/examples/ValidateSignedMail.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "885aeda3ec45e78bbd72126534eeacc43a15fc5d"
                ],
                [
                    "no-tag",
                    "7fc22bb857d10ea667b05b9b03fdb29054454e64"
                ]
            ],
            "tags": [
                "r1v60"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "959c64c70e227ff2353eddacf45490027e74926e",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1450923156,
            "hunks": 2,
            "message": "BJA-579 Removed unnecessary try/catch block",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/asn1/dvcs/DVCSCertInfo.java b/core/src/main/java/org/bouncycastle/asn1/dvcs/DVCSCertInfo.java",
                "index b64b31c4e..cc95571f2 100644",
                "--- a/core/src/main/java/org/bouncycastle/asn1/dvcs/DVCSCertInfo.java",
                "+++ b/core/src/main/java/org/bouncycastle/asn1/dvcs/DVCSCertInfo.java",
                "@@ -72,3 +72,3 @@ public class DVCSCertInfo",
                "         ASN1Encodable x = seq.getObjectAt(i++);",
                "-        try",
                "+        if (x instanceof ASN1Integer)",
                "         {",
                "@@ -78,5 +78,2 @@ public class DVCSCertInfo",
                "         }",
                "-        catch (IllegalArgumentException e)",
                "-        {",
                "-        }"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/asn1/dvcs/DVCSCertInfo.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "34f7606010e2df722d17ef1b7eeaa3af8fe8a0e1"
                ]
            ],
            "tags": [
                "r1v60"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "57d216a4488542b07c5c450a9af6a681000c791f",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1450293409,
            "hunks": 2,
            "message": "JavaDoc",
            "diff": [
                "diff --git a/pkix/src/main/java/org/bouncycastle/openssl/PEMDecryptor.java b/pkix/src/main/java/org/bouncycastle/openssl/PEMDecryptor.java",
                "index 09cef5b74..0f12cd10f 100644",
                "--- a/pkix/src/main/java/org/bouncycastle/openssl/PEMDecryptor.java",
                "+++ b/pkix/src/main/java/org/bouncycastle/openssl/PEMDecryptor.java",
                "@@ -2,5 +2,16 @@ package org.bouncycastle.openssl;",
                "+/**",
                "+ * Base interface for decryption operations.",
                "+ */",
                " public interface PEMDecryptor",
                " {",
                "-    byte[] decrypt(byte[] keyBytes, byte[] iv)",
                "+    /**",
                "+     * Decrypt the passed in data using the associated IV and the decryptor's key state.",
                "+     *",
                "+     * @param data the encrypted data",
                "+     * @param iv the initialisation vector associated with the decryption.",
                "+     * @return the decrypted data.",
                "+     * @throws PEMException in the event of an issue.",
                "+     */",
                "+    byte[] decrypt(byte[] data, byte[] iv)",
                "         throws PEMException;"
            ],
            "changed_files": [
                "pkix/src/main/java/org/bouncycastle/openssl/PEMDecryptor.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "dddc76e05a722e580c4152f5e292a20c65903b84"
                ]
            ],
            "tags": [
                "r1rv54",
                "r1rv55",
                "r1rv56",
                "r1rv57",
                "r1rv58",
                "r1rv59",
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5825993bd5ad42b9e20fd17d142f02744fb91117",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1524552511,
            "hunks": 2,
            "message": "minor clean up.",
            "diff": [
                "diff --git a/pkix/src/main/java/org/bouncycastle/openssl/jcajce/JceOpenSSLPKCS8DecryptorProviderBuilder.java b/pkix/src/main/java/org/bouncycastle/openssl/jcajce/JceOpenSSLPKCS8DecryptorProviderBuilder.java",
                "index cccd26e65..762719df5 100644",
                "--- a/pkix/src/main/java/org/bouncycastle/openssl/jcajce/JceOpenSSLPKCS8DecryptorProviderBuilder.java",
                "+++ b/pkix/src/main/java/org/bouncycastle/openssl/jcajce/JceOpenSSLPKCS8DecryptorProviderBuilder.java",
                "@@ -32,5 +32,8 @@ import org.bouncycastle.util.Strings;",
                "+/**",
                "+ * DecryptorProviderBuilder for producing DecryptorProvider for use with PKCS8EncryptedPrivateKeyInfo.",
                "+ */",
                " public class JceOpenSSLPKCS8DecryptorProviderBuilder",
                " {",
                "-    private JcaJceHelper helper = new DefaultJcaJceHelper();",
                "+    private JcaJceHelper helper;"
            ],
            "changed_files": [
                "pkix/src/main/java/org/bouncycastle/openssl/jcajce/JceOpenSSLPKCS8DecryptorProviderBuilder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "79432b369669d64a05499f8ce0af9d17634566f6"
                ],
                [
                    "no-tag",
                    "0c9a55dcfa00fe9bd00445f1cf61796de7974bf8"
                ]
            ],
            "tags": [
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "cd86ee14ec46b650809fc8e2b50f19b75fd29ff2",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1450977705,
            "hunks": 1,
            "message": "Fix VMPCMac to actually use offset in update() - https://github.com/bcgit/bc-java/issues/127",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/macs/VMPCMac.java b/core/src/main/java/org/bouncycastle/crypto/macs/VMPCMac.java",
                "index 58d06d08d..b859b74af 100644",
                "--- a/core/src/main/java/org/bouncycastle/crypto/macs/VMPCMac.java",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/macs/VMPCMac.java",
                "@@ -182,3 +182,3 @@ public class VMPCMac implements Mac",
                "         {",
                "-            update(in[i]);",
                "+            update(in[inOff + i]);",
                "         }"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/crypto/macs/VMPCMac.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "cc2ff49199b6b64058cceb0bb089357d57f034bb"
                ]
            ],
            "tags": [
                "r1v60"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9e682d07edfc81974d71ad6c7a9f8ad1cbb92994",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1450924417,
            "hunks": 21,
            "message": "BJA-578 added use of SecureRandom",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/pqc/math/linearalgebra/GF2nField.java b/core/src/main/java/org/bouncycastle/pqc/math/linearalgebra/GF2nField.java",
                "index 907afd76b..48bbeccd0 100644",
                "--- a/core/src/main/java/org/bouncycastle/pqc/math/linearalgebra/GF2nField.java",
                "+++ b/core/src/main/java/org/bouncycastle/pqc/math/linearalgebra/GF2nField.java",
                "@@ -3,2 +3,3 @@ package org.bouncycastle.pqc.math.linearalgebra;",
                "+import java.security.SecureRandom;",
                " import java.util.Vector;",
                "@@ -18,2 +19,4 @@ public abstract class GF2nField",
                "+    protected final SecureRandom random;",
                "+",
                "     /**",
                "@@ -39,2 +42,7 @@ public abstract class GF2nField",
                "+    protected GF2nField(SecureRandom random)",
                "+    {",
                "+        this.random = random;",
                "+    }",
                "+",
                "     /**",
                "diff --git a/core/src/main/java/org/bouncycastle/pqc/math/linearalgebra/GF2nONBElement.java b/core/src/main/java/org/bouncycastle/pqc/math/linearalgebra/GF2nONBElement.java",
                "index 384d05ef0..95236e7f3 100644",
                "--- a/core/src/main/java/org/bouncycastle/pqc/math/linearalgebra/GF2nONBElement.java",
                "+++ b/core/src/main/java/org/bouncycastle/pqc/math/linearalgebra/GF2nONBElement.java",
                "@@ -4,3 +4,3 @@ package org.bouncycastle.pqc.math.linearalgebra;",
                " import java.math.BigInteger;",
                "-import java.util.Random;",
                "+import java.security.SecureRandom;",
                "@@ -128,3 +128,3 @@ public class GF2nONBElement",
                "      */",
                "-    public GF2nONBElement(GF2nONBField gf2n, Random rand)",
                "+    public GF2nONBElement(GF2nONBField gf2n, SecureRandom rand)",
                "     {",
                "diff --git a/core/src/main/java/org/bouncycastle/pqc/math/linearalgebra/GF2nONBField.java b/core/src/main/java/org/bouncycastle/pqc/math/linearalgebra/GF2nONBField.java",
                "index 59b24310c..f91b94aea 100644",
                "--- a/core/src/main/java/org/bouncycastle/pqc/math/linearalgebra/GF2nONBField.java",
                "+++ b/core/src/main/java/org/bouncycastle/pqc/math/linearalgebra/GF2nONBField.java",
                "@@ -3,2 +3,3 @@ package org.bouncycastle.pqc.math.linearalgebra;",
                "+import java.security.SecureRandom;",
                " import java.util.Random;",
                "@@ -103,6 +104,9 @@ public class GF2nONBField",
                "      * @param deg -the extention degree of this field",
                "+     * @param random - a source of randomness for generating polynomials on the field.",
                "      */",
                "-    public GF2nONBField(int deg)",
                "+    public GF2nONBField(int deg, SecureRandom random)",
                "         throws RuntimeException",
                "     {",
                "+        super(random);",
                "+",
                "         if (deg < 3)",
                "@@ -192,3 +196,3 @@ public class GF2nONBField",
                "                 // 2.1 choose random u (element of) GF(2^m)",
                "-                u = new GF2nONBElement(this, new Random());",
                "+                u = new GF2nONBElement(this, random);",
                "                 ut = new GF2nPolynomial(2, GF2nONBElement.ZERO(this));",
                "diff --git a/core/src/main/java/org/bouncycastle/pqc/math/linearalgebra/GF2nPolynomialField.java b/core/src/main/java/org/bouncycastle/pqc/math/linearalgebra/GF2nPolynomialField.java",
                "index 768cf38c8..6ed15f6e3 100644",
                "--- a/core/src/main/java/org/bouncycastle/pqc/math/linearalgebra/GF2nPolynomialField.java",
                "+++ b/core/src/main/java/org/bouncycastle/pqc/math/linearalgebra/GF2nPolynomialField.java",
                "@@ -3,3 +3,3 @@ package org.bouncycastle.pqc.math.linearalgebra;",
                "-import java.util.Random;",
                "+import java.security.SecureRandom;",
                " import java.util.Vector;",
                "@@ -42,5 +42,8 @@ public class GF2nPolynomialField",
                "      * @param deg the extention degree of this field",
                "+     * @param random     source of randomness for generating new polynomials.",
                "      */",
                "-    public GF2nPolynomialField(int deg)",
                "+    public GF2nPolynomialField(int deg, SecureRandom random)",
                "     {",
                "+        super(random);",
                "+",
                "         if (deg < 3)",
                "@@ -61,2 +64,3 @@ public class GF2nPolynomialField",
                "      * @param deg  the degree of this field",
                "+     * @param random     source of randomness for generating new polynomials.",
                "      * @param file true if you want to read the field polynomial from the",
                "@@ -65,4 +69,6 @@ public class GF2nPolynomialField",
                "      */",
                "-    public GF2nPolynomialField(int deg, boolean file)",
                "+    public GF2nPolynomialField(int deg, SecureRandom random, boolean file)",
                "     {",
                "+        super(random);",
                "+",
                "         if (deg < 3)",
                "@@ -91,7 +97,10 @@ public class GF2nPolynomialField",
                "      * @param deg        degree of the GF2nField",
                "+     * @param random     source of randomness for generating new polynomials.",
                "      * @param polynomial the field polynomial to use",
                "      */",
                "-    public GF2nPolynomialField(int deg, GF2Polynomial polynomial)",
                "+    public GF2nPolynomialField(int deg, SecureRandom random, GF2Polynomial polynomial)",
                "         throws RuntimeException",
                "     {",
                "+        super(random);",
                "+",
                "         if (deg < 3)",
                "@@ -233,3 +242,3 @@ public class GF2nPolynomialField",
                "                 // 2.1 choose random u (element of) GF(2^m)",
                "-                u = new GF2nPolynomialElement(this, new Random());",
                "+                u = new GF2nPolynomialElement(this, random);",
                "                 ut = new GF2nPolynomial(2, GF2nPolynomialElement.ZERO(this));"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/pqc/math/linearalgebra/GF2nField.java",
                "core/src/main/java/org/bouncycastle/pqc/math/linearalgebra/GF2nONBElement.java",
                "core/src/main/java/org/bouncycastle/pqc/math/linearalgebra/GF2nONBField.java",
                "core/src/main/java/org/bouncycastle/pqc/math/linearalgebra/GF2nPolynomialField.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "b493159f12c4c511c11c5794282001ea1bfc4d7d"
                ]
            ],
            "tags": [
                "r1v60"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5341eb11630c74d662e3bfadce1d41b208d8b7c9",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1449717614,
            "hunks": 3,
            "message": "added missing ASN.1 string primitives.",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/asn1/ASN1InputStream.java b/core/src/main/java/org/bouncycastle/asn1/ASN1InputStream.java",
                "index d6260a1e8..0c63a1a62 100644",
                "--- a/core/src/main/java/org/bouncycastle/asn1/ASN1InputStream.java",
                "+++ b/core/src/main/java/org/bouncycastle/asn1/ASN1InputStream.java",
                "@@ -467,2 +467,6 @@ public class ASN1InputStream",
                "                 return new DERVisibleString(defIn.toByteArray());",
                "+            case GRAPHIC_STRING:",
                "+                return new DERGraphicString(defIn.toByteArray());",
                "+            case VIDEOTEX_STRING:",
                "+                return new DERVideotexString(defIn.toByteArray());",
                "             default:",
                "diff --git a/core/src/main/java/org/bouncycastle/asn1/DERGraphicString.java b/core/src/main/java/org/bouncycastle/asn1/DERGraphicString.java",
                "new file mode 100644",
                "index 000000000..652a86e55",
                "--- /dev/null",
                "+++ b/core/src/main/java/org/bouncycastle/asn1/DERGraphicString.java",
                "@@ -0,0 +1,117 @@",
                "+package org.bouncycastle.asn1;",
                "+",
                "+import java.io.IOException;",
                "+",
                "+import org.bouncycastle.util.Arrays;",
                "+",
                "+public class DERGraphicString",
                "+    extends ASN1Primitive",
                "+{",
                "+    private final byte[] string;",
                "+    ",
                "+    /**",
                "+     * return a Graphic String from the passed in object",
                "+     *",
                "+     * @param obj a DERGraphicString or an object that can be converted into one.",
                "+     * @exception IllegalArgumentException if the object cannot be converted.",
                "+     * @return a DERGraphicString instance, or null.",
                "+     */",
                "+    public static DERGraphicString getInstance(",
                "+        Object  obj)",
                "+    {",
                "+        if (obj == null || obj instanceof DERGraphicString)",
                "+        {",
                "+            return (DERGraphicString)obj;",
                "+        }",
                "+",
                "+        if (obj instanceof byte[])",
                "+        {",
                "+            try",
                "+            {",
                "+                return (DERGraphicString)fromByteArray((byte[])obj);",
                "+            }",
                "+            catch (Exception e)",
                "+            {",
                "+                throw new IllegalArgumentException(\"encoding error in getInstance: \" + e.toString());",
                "+            }",
                "+        }",
                "+",
                "+        throw new IllegalArgumentException(\"illegal object in getInstance: \" + obj.getClass().getName());",
                "+    }",
                "+",
                "+    /**",
                "+     * return a Graphic String from a tagged object.",
                "+     *",
                "+     * @param obj the tagged object holding the object we want",
                "+     * @param explicit true if the object is meant to be explicitly",
                "+     *              tagged false otherwise.",
                "+     * @exception IllegalArgumentException if the tagged object cannot",
                "+     *               be converted.",
                "+     * @return a DERGraphicString instance, or null.",
                "+     */",
                "+    public static DERGraphicString getInstance(",
                "+        ASN1TaggedObject obj,",
                "+        boolean          explicit)",
                "+    {",
                "+        ASN1Primitive o = obj.getObject();",
                "+",
                "+        if (explicit || o instanceof DERGraphicString)",
                "+        {",
                "+            return getInstance(o);",
                "+        }",
                "+        else",
                "+        {",
                "+            return new DERGraphicString(((ASN1OctetString)o).getOctets());",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * basic constructor - with bytes.",
                "+     * @param string the byte encoding of the characters making up the string.",
                "+     */",
                "+    public DERGraphicString(",
                "+        byte[]   string)",
                "+    {",
                "+        this.string = Arrays.clone(string);",
                "+    }",
                "+    ",
                "+    public byte[] getOctets()",
                "+    {",
                "+        return Arrays.clone(string);",
                "+    }",
                "+",
                "+    boolean isConstructed()",
                "+    {",
                "+        return false;",
                "+    }",
                "+",
                "+    int encodedLength()",
                "+    {",
                "+        return 1 + StreamUtil.calculateBodyLength(string.length) + string.length;",
                "+    }",
                "+",
                "+    void encode(",
                "+        ASN1OutputStream out)",
                "+        throws IOException",
                "+    {",
                "+        out.writeEncoded(BERTags.GRAPHIC_STRING, string);",
                "+    }",
                "+",
                "+    public int hashCode()",
                "+    {",
                "+        return Arrays.hashCode(string);",
                "+    }",
                "+",
                "+    boolean asn1Equals(",
                "+        ASN1Primitive o)",
                "+    {",
                "+        if (!(o instanceof DERGraphicString))",
                "+        {",
                "+            return false;",
                "+        }",
                "+",
                "+        DERGraphicString  s = (DERGraphicString)o;",
                "+",
                "+        return Arrays.areEqual(string, s.string);",
                "+    }",
                "+}",
                "diff --git a/core/src/main/java/org/bouncycastle/asn1/DERVideotexString.java b/core/src/main/java/org/bouncycastle/asn1/DERVideotexString.java",
                "new file mode 100644",
                "index 000000000..19df88326",
                "--- /dev/null",
                "+++ b/core/src/main/java/org/bouncycastle/asn1/DERVideotexString.java",
                "@@ -0,0 +1,117 @@",
                "+package org.bouncycastle.asn1;",
                "+",
                "+import java.io.IOException;",
                "+",
                "+import org.bouncycastle.util.Arrays;",
                "+",
                "+public class DERVideotexString",
                "+    extends ASN1Primitive",
                "+{",
                "+    private final byte[] string;",
                "+    ",
                "+    /**",
                "+     * return a Videotex String from the passed in object",
                "+     *",
                "+     * @param obj a DERVideotexString or an object that can be converted into one.",
                "+     * @exception IllegalArgumentException if the object cannot be converted.",
                "+     * @return a DERVideotexString instance, or null.",
                "+     */",
                "+    public static DERVideotexString getInstance(",
                "+        Object  obj)",
                "+    {",
                "+        if (obj == null || obj instanceof DERVideotexString)",
                "+        {",
                "+            return (DERVideotexString)obj;",
                "+        }",
                "+",
                "+        if (obj instanceof byte[])",
                "+        {",
                "+            try",
                "+            {",
                "+                return (DERVideotexString)fromByteArray((byte[])obj);",
                "+            }",
                "+            catch (Exception e)",
                "+            {",
                "+                throw new IllegalArgumentException(\"encoding error in getInstance: \" + e.toString());",
                "+            }",
                "+        }",
                "+",
                "+        throw new IllegalArgumentException(\"illegal object in getInstance: \" + obj.getClass().getName());",
                "+    }",
                "+",
                "+    /**",
                "+     * return a Videotex String from a tagged object.",
                "+     *",
                "+     * @param obj the tagged object holding the object we want",
                "+     * @param explicit true if the object is meant to be explicitly",
                "+     *              tagged false otherwise.",
                "+     * @exception IllegalArgumentException if the tagged object cannot",
                "+     *               be converted.",
                "+     * @return a DERVideotexString instance, or null.",
                "+     */",
                "+    public static DERVideotexString getInstance(",
                "+        ASN1TaggedObject obj,",
                "+        boolean          explicit)",
                "+    {",
                "+        ASN1Primitive o = obj.getObject();",
                "+",
                "+        if (explicit || o instanceof DERVideotexString)",
                "+        {",
                "+            return getInstance(o);",
                "+        }",
                "+        else",
                "+        {",
                "+            return new DERVideotexString(((ASN1OctetString)o).getOctets());",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * basic constructor - with bytes.",
                "+     * @param string the byte encoding of the characters making up the string.",
                "+     */",
                "+    public DERVideotexString(",
                "+        byte[]   string)",
                "+    {",
                "+        this.string = Arrays.clone(string);",
                "+    }",
                "+    ",
                "+    public byte[] getOctets()",
                "+    {",
                "+        return Arrays.clone(string);",
                "+    }",
                "+",
                "+    boolean isConstructed()",
                "+    {",
                "+        return false;",
                "+    }",
                "+",
                "+    int encodedLength()",
                "+    {",
                "+        return 1 + StreamUtil.calculateBodyLength(string.length) + string.length;",
                "+    }",
                "+",
                "+    void encode(",
                "+        ASN1OutputStream out)",
                "+        throws IOException",
                "+    {",
                "+        out.writeEncoded(BERTags.VIDEOTEX_STRING, string);",
                "+    }",
                "+",
                "+    public int hashCode()",
                "+    {",
                "+        return Arrays.hashCode(string);",
                "+    }",
                "+",
                "+    boolean asn1Equals(",
                "+        ASN1Primitive o)",
                "+    {",
                "+        if (!(o instanceof DERVideotexString))",
                "+        {",
                "+            return false;",
                "+        }",
                "+",
                "+        DERVideotexString  s = (DERVideotexString)o;",
                "+",
                "+        return Arrays.areEqual(string, s.string);",
                "+    }",
                "+}"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/asn1/ASN1InputStream.java",
                "core/src/main/java/org/bouncycastle/asn1/DERGraphicString.java",
                "core/src/main/java/org/bouncycastle/asn1/DERVideotexString.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "8b18582b0cb2a9839421957341d1e17bdd02d4e9"
                ]
            ],
            "tags": [
                "r1v60"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a7a1f9531dc95c3a6cc5bf3c64818a7cf1dde5be",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1450424208,
            "hunks": 2,
            "message": "Check CertificateRequest syntax server-side",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/tls/DTLSServerProtocol.java b/core/src/main/java/org/bouncycastle/crypto/tls/DTLSServerProtocol.java",
                "index 49ccb8279..17ec2fba9 100644",
                "--- a/core/src/main/java/org/bouncycastle/crypto/tls/DTLSServerProtocol.java",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/tls/DTLSServerProtocol.java",
                "@@ -171,2 +171,7 @@ public class DTLSServerProtocol",
                "             {",
                "+                if (TlsUtils.isTLSv12(state.serverContext) != (state.certificateRequest.getSupportedSignatureAlgorithms() != null))",
                "+                {",
                "+                    throw new TlsFatalAlert(AlertDescription.internal_error);",
                "+                }",
                "+",
                "                 state.keyExchange.validateCertificateRequest(state.certificateRequest);",
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/tls/TlsServerProtocol.java b/core/src/main/java/org/bouncycastle/crypto/tls/TlsServerProtocol.java",
                "index 636e7f060..512204cbb 100644",
                "--- a/core/src/main/java/org/bouncycastle/crypto/tls/TlsServerProtocol.java",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/tls/TlsServerProtocol.java",
                "@@ -200,2 +200,7 @@ public class TlsServerProtocol",
                "                     {",
                "+                        if (TlsUtils.isTLSv12(getContext()) != (certificateRequest.getSupportedSignatureAlgorithms() != null))",
                "+                        {",
                "+                            throw new TlsFatalAlert(AlertDescription.internal_error);",
                "+                        }",
                "+",
                "                         this.keyExchange.validateCertificateRequest(certificateRequest);"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/crypto/tls/DTLSServerProtocol.java",
                "core/src/main/java/org/bouncycastle/crypto/tls/TlsServerProtocol.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "98b44381bbf46353d03733a79abec675a744d218"
                ]
            ],
            "tags": [
                "r1rv54",
                "r1rv55",
                "r1rv56",
                "r1rv57",
                "r1rv58",
                "r1rv59",
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4514d8a4984af7925d2bc4792acfa4520f21b342",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1450305467,
            "hunks": 9,
            "message": "Added ASN1String to Graphic and Videotex String Added Graphic and Videotex String to ASN1Dump.",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/asn1/DERGraphicString.java b/core/src/main/java/org/bouncycastle/asn1/DERGraphicString.java",
                "index 652a86e55..01baf0f99 100644",
                "--- a/core/src/main/java/org/bouncycastle/asn1/DERGraphicString.java",
                "+++ b/core/src/main/java/org/bouncycastle/asn1/DERGraphicString.java",
                "@@ -5,2 +5,3 @@ import java.io.IOException;",
                " import org.bouncycastle.util.Arrays;",
                "+import org.bouncycastle.util.Strings;",
                "@@ -8,2 +9,3 @@ public class DERGraphicString",
                "     extends ASN1Primitive",
                "+    implements ASN1String",
                " {",
                "@@ -116,2 +118,7 @@ public class DERGraphicString",
                "     }",
                "+",
                "+    public String getString()",
                "+    {",
                "+        return Strings.fromByteArray(string);",
                "+    }",
                " }",
                "diff --git a/core/src/main/java/org/bouncycastle/asn1/DERVideotexString.java b/core/src/main/java/org/bouncycastle/asn1/DERVideotexString.java",
                "index 19df88326..da231e150 100644",
                "--- a/core/src/main/java/org/bouncycastle/asn1/DERVideotexString.java",
                "+++ b/core/src/main/java/org/bouncycastle/asn1/DERVideotexString.java",
                "@@ -5,2 +5,3 @@ import java.io.IOException;",
                " import org.bouncycastle.util.Arrays;",
                "+import org.bouncycastle.util.Strings;",
                "@@ -8,2 +9,3 @@ public class DERVideotexString",
                "     extends ASN1Primitive",
                "+    implements ASN1String",
                " {",
                "@@ -116,2 +118,7 @@ public class DERVideotexString",
                "     }",
                "+",
                "+    public String getString()",
                "+    {",
                "+        return Strings.fromByteArray(string);",
                "+    }",
                " }",
                "diff --git a/core/src/main/java/org/bouncycastle/asn1/util/ASN1Dump.java b/core/src/main/java/org/bouncycastle/asn1/util/ASN1Dump.java",
                "index b239365eb..1330d2561 100644",
                "--- a/core/src/main/java/org/bouncycastle/asn1/util/ASN1Dump.java",
                "+++ b/core/src/main/java/org/bouncycastle/asn1/util/ASN1Dump.java",
                "@@ -28,2 +28,3 @@ import org.bouncycastle.asn1.DERBitString;",
                " import org.bouncycastle.asn1.DERExternal;",
                "+import org.bouncycastle.asn1.DERGraphicString;",
                " import org.bouncycastle.asn1.DERIA5String;",
                "@@ -34,2 +35,3 @@ import org.bouncycastle.asn1.DERT61String;",
                " import org.bouncycastle.asn1.DERUTF8String;",
                "+import org.bouncycastle.asn1.DERVideotexString;",
                " import org.bouncycastle.asn1.DERVisibleString;",
                "@@ -241,2 +243,10 @@ public class ASN1Dump",
                "         }",
                "+        else if (obj instanceof DERGraphicString)",
                "+        {",
                "+            buf.append(indent + \"GraphicString(\" + ((DERGraphicString)obj).getString() + \") \" + nl);",
                "+        }",
                "+        else if (obj instanceof DERVideotexString)",
                "+        {",
                "+            buf.append(indent + \"VideotexString(\" + ((DERVideotexString)obj).getString() + \") \" + nl);",
                "+        }",
                "         else if (obj instanceof ASN1UTCTime)"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/asn1/DERGraphicString.java",
                "core/src/main/java/org/bouncycastle/asn1/DERVideotexString.java",
                "core/src/main/java/org/bouncycastle/asn1/util/ASN1Dump.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "fc5e34470cdabc83d7afcf5fe73d9b9227bbd5dd"
                ]
            ],
            "tags": [
                "r1rv54",
                "r1rv55",
                "r1rv56",
                "r1rv57",
                "r1rv58",
                "r1rv59",
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2705dab9e6858bd1fa855f802fc578c8ac93d0e2",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1524551886,
            "hunks": 2,
            "message": "JavaDoc update",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/util/io/pem/PemReader.java b/core/src/main/java/org/bouncycastle/util/io/pem/PemReader.java",
                "index 3045b4d0b..be9090d98 100644",
                "--- a/core/src/main/java/org/bouncycastle/util/io/pem/PemReader.java",
                "+++ b/core/src/main/java/org/bouncycastle/util/io/pem/PemReader.java",
                "@@ -24,2 +24,8 @@ public class PemReader",
                "+    /**",
                "+     * Read the next PEM object as a blob of raw data with header information.",
                "+     *",
                "+     * @return the next object in the stream, null if no objects left.",
                "+     * @throws IOException in case of a parse error.",
                "+     */",
                "     public PemObject readPemObject()",
                "diff --git a/pkix/src/main/java/org/bouncycastle/openssl/PEMParser.java b/pkix/src/main/java/org/bouncycastle/openssl/PEMParser.java",
                "index 0189a9853..c0c867d9f 100644",
                "--- a/pkix/src/main/java/org/bouncycastle/openssl/PEMParser.java",
                "+++ b/pkix/src/main/java/org/bouncycastle/openssl/PEMParser.java",
                "@@ -81,2 +81,9 @@ public class PEMParser",
                "+    /**",
                "+     * Read the next PEM object attempting to interpret the header and",
                "+     * create a higher level object from the content.",
                "+     *",
                "+     * @return the next object in the stream, null if no objects left.",
                "+     * @throws IOException in case of a parse error.",
                "+     */",
                "     public Object readObject()"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/util/io/pem/PemReader.java",
                "pkix/src/main/java/org/bouncycastle/openssl/PEMParser.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "169662d9ebbacacb7e0854dff01babefa6a637d4"
                ],
                [
                    "no-tag",
                    "db25c60ecd2ae234c4b0e259ff8366b2b755433a"
                ]
            ],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8bb80cceb26e79e283d5f8d94ed2e4f9b055908b",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1525155755,
            "hunks": 2,
            "message": "fixed possible NPE in CertTemplate.",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/asn1/crmf/CertTemplate.java b/core/src/main/java/org/bouncycastle/asn1/crmf/CertTemplate.java",
                "index 73412e9a8..2d77aad24 100644",
                "--- a/core/src/main/java/org/bouncycastle/asn1/crmf/CertTemplate.java",
                "+++ b/core/src/main/java/org/bouncycastle/asn1/crmf/CertTemplate.java",
                "@@ -92,5 +92,15 @@ public class CertTemplate",
                "+    /**",
                "+     * Return Version - -1 if not set.",
                "+     *",
                "+     * @return Version value.",
                "+     */",
                "     public int getVersion()",
                "     {",
                "-        return version.getValue().intValue();",
                "+        if (version != null)",
                "+        {",
                "+            return version.getValue().intValue();",
                "+        }",
                "+",
                "+        return -1;",
                "     }"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/asn1/crmf/CertTemplate.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "090bc12c39fa55d9dfc3615f5df39c843be6ef4f"
                ],
                [
                    "no-tag",
                    "aba3567fc9ec73b8581619941f73192cda9baa11"
                ]
            ],
            "tags": [
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ea1cae6a91343762d5d0fa4f1d4e35048e4d4ccf",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1450100585,
            "hunks": 3,
            "message": "Fix for DERExternal wrapping indefinite length data",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/asn1/DERExternal.java b/core/src/main/java/org/bouncycastle/asn1/DERExternal.java",
                "index aed1d27f2..f6c45d311 100644",
                "--- a/core/src/main/java/org/bouncycastle/asn1/DERExternal.java",
                "+++ b/core/src/main/java/org/bouncycastle/asn1/DERExternal.java",
                "@@ -34,3 +34,3 @@ public class DERExternal",
                "         }",
                "-        if (!(enc instanceof DERTaggedObject))",
                "+        if (!(enc instanceof ASN1TaggedObject))",
                "         {",
                "@@ -46,3 +46,3 @@ public class DERExternal",
                "-        if (!(enc instanceof DERTaggedObject))",
                "+        if (!(enc instanceof ASN1TaggedObject))",
                "         {",
                "@@ -50,3 +50,3 @@ public class DERExternal",
                "         }",
                "-        DERTaggedObject obj = (DERTaggedObject)enc;",
                "+        ASN1TaggedObject obj = (ASN1TaggedObject)enc;",
                "         setEncoding(obj.getTagNo());"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/asn1/DERExternal.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "1af776ab61bfda89ae9540d883b30a2b7d88e0f1"
                ]
            ],
            "tags": [
                "r1rv54",
                "r1rv55",
                "r1rv56",
                "r1rv57",
                "r1rv58",
                "r1rv59",
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9fa5048262b1b08a031602d127dbd799a244b08b",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1449812405,
            "hunks": 2,
            "message": "Remove unused imports",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/crypto/tls/TlsECDHEKeyExchange.java b/core/src/main/java/org/bouncycastle/crypto/tls/TlsECDHEKeyExchange.java",
                "index c78408010..017b36e36 100644",
                "--- a/core/src/main/java/org/bouncycastle/crypto/tls/TlsECDHEKeyExchange.java",
                "+++ b/core/src/main/java/org/bouncycastle/crypto/tls/TlsECDHEKeyExchange.java",
                "@@ -6,3 +6,2 @@ import java.util.Vector;",
                "-import org.bouncycastle.crypto.AsymmetricCipherKeyPair;",
                " import org.bouncycastle.crypto.Digest;",
                "@@ -10,5 +9,2 @@ import org.bouncycastle.crypto.Signer;",
                " import org.bouncycastle.crypto.params.ECDomainParameters;",
                "-import org.bouncycastle.crypto.params.ECPrivateKeyParameters;",
                "-import org.bouncycastle.crypto.params.ECPublicKeyParameters;",
                "-import org.bouncycastle.util.Arrays;",
                " import org.bouncycastle.util.io.TeeInputStream;"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/crypto/tls/TlsECDHEKeyExchange.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "0dfc0392310cc230364e7191ddb2dec9f40bd104"
                ]
            ],
            "tags": [
                "r1rv54",
                "r1rv55",
                "r1rv56",
                "r1rv57",
                "r1rv58",
                "r1rv59",
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ed49f36a672d27ac1941ba5c115e923e4090eb0f",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1524886270,
            "hunks": 1,
            "message": "fixed text of exception",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/asn1/DERUniversalString.java b/core/src/main/java/org/bouncycastle/asn1/DERUniversalString.java",
                "index afaff9836..487f86d9e 100644",
                "--- a/core/src/main/java/org/bouncycastle/asn1/DERUniversalString.java",
                "+++ b/core/src/main/java/org/bouncycastle/asn1/DERUniversalString.java",
                "@@ -97,3 +97,3 @@ public class DERUniversalString",
                "         {",
                "-           throw new ASN1ParsingException(\"internal error encoding BitString\");",
                "+           throw new ASN1ParsingException(\"internal error encoding UniversalString\");",
                "         }"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/asn1/DERUniversalString.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "29f54b38b661468ba8b42fb7b8c2090469886bd8"
                ],
                [
                    "no-tag",
                    "08ebea80885065f39729c0dd6d56ecc134a98bdd"
                ]
            ],
            "tags": [
                "r1v60"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "247bb8ee6c65d74f040d915674984ebed97b0bc7",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1450133155,
            "hunks": 1,
            "message": "Added toString() method.",
            "diff": [
                "diff --git a/core/src/main/java/org/bouncycastle/asn1/x509/KeyPurposeId.java b/core/src/main/java/org/bouncycastle/asn1/x509/KeyPurposeId.java",
                "index 839a868e9..01c9aa2ad 100644",
                "--- a/core/src/main/java/org/bouncycastle/asn1/x509/KeyPurposeId.java",
                "+++ b/core/src/main/java/org/bouncycastle/asn1/x509/KeyPurposeId.java",
                "@@ -161,2 +161,7 @@ public class KeyPurposeId",
                "     }",
                "+",
                "+    public String toString()",
                "+    {",
                "+        return id.toString();",
                "+    }",
                " }"
            ],
            "changed_files": [
                "core/src/main/java/org/bouncycastle/asn1/x509/KeyPurposeId.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "4d19a10884d37bef878aafe237ff6356fefbd910"
                ]
            ],
            "tags": [
                "r1v60"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "552203942abbee03f2ffbcdfa91c5abe9ada4092",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1450309880,
            "hunks": 2,
            "message": "Made exception message clearer.",
            "diff": [
                "diff --git a/pkix/src/main/java/org/bouncycastle/openssl/bc/PEMUtilities.java b/pkix/src/main/java/org/bouncycastle/openssl/bc/PEMUtilities.java",
                "index ee3347e0c..e58290115 100644",
                "--- a/pkix/src/main/java/org/bouncycastle/openssl/bc/PEMUtilities.java",
                "+++ b/pkix/src/main/java/org/bouncycastle/openssl/bc/PEMUtilities.java",
                "@@ -193,3 +193,3 @@ class PEMUtilities",
                "             {",
                "-                throw new EncryptionException(\"unknown AES encryption with private key\");",
                "+                throw new EncryptionException(\"unknown AES encryption with private key: \" + dekAlgName);",
                "             }",
                "@@ -200,3 +200,3 @@ class PEMUtilities",
                "         {",
                "-            throw new EncryptionException(\"unknown encryption with private key\");",
                "+            throw new EncryptionException(\"unknown encryption with private key: \" + dekAlgName);",
                "         }"
            ],
            "changed_files": [
                "pkix/src/main/java/org/bouncycastle/openssl/bc/PEMUtilities.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "5a2bc14bb3251ac751a41d9c598e48f73ddfd5f5"
                ]
            ],
            "tags": [
                "r1rv54",
                "r1rv55",
                "r1rv56",
                "r1rv57",
                "r1rv58",
                "r1rv59",
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: castle, bouncy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f56a4c7ac9938f2ef045741af09a84b04cd54d38",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1450293731,
            "hunks": 0,
            "message": "Merge remote-tracking branch 'origin/master'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1v60"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "4d64f49948b10a2595b15614cb6f1d77a29eca1d",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1450483454,
            "hunks": 0,
            "message": "Merge remote-tracking branch 'origin/master'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1rv54",
                "r1rv55",
                "r1rv56",
                "r1rv57",
                "r1rv58",
                "r1rv59",
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "7d3c2de884e39711891121a5e9c58aaf0b562af6",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1524116794,
            "hunks": 0,
            "message": "Merge remote-tracking branch 'origin/master'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "49883825258f8111cfa8fe980223e52996604fa5",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1524116794,
            "hunks": 0,
            "message": "Merge remote-tracking branch 'origin/master'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1v60"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "a542d998ef89893c8448d8d2b4c5cfeaf0b5af53",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1450293731,
            "hunks": 0,
            "message": "Merge remote-tracking branch 'origin/master'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1rv54",
                "r1rv55",
                "r1rv56",
                "r1rv57",
                "r1rv58",
                "r1rv59",
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "a7dae3d7eb88c2f592ffeddc52ae5069b85cb5fa",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1524116794,
            "hunks": 0,
            "message": "Merge remote-tracking branch 'origin/master'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1rv60",
                "r1rv61",
                "r1rv62",
                "r1rv63",
                "r1rv64",
                "r1rv65",
                "r1rv66",
                "r1rv67",
                "r1rv68",
                "r1rv69",
                "r1rv70",
                "r1rv71",
                "r1rv72",
                "r1rv72v2",
                "r1rv73",
                "r1rv74",
                "r1rv75",
                "r1rv76",
                "r1rv77",
                "r1rv78",
                "r1rv78v1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "fa5892d57c8cf25d03fb32c7dd03eccd5bab27bc",
            "repository": "https://github.com/bcgit/bc-java",
            "timestamp": 1450483454,
            "hunks": 0,
            "message": "Merge remote-tracking branch 'origin/master'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "r1v60"
            ],
            "matched_rules": []
        }
    ]
}
