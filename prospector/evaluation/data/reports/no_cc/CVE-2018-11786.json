{
    "advisory_record": {
        "cve_id": "CVE-2018-11786",
        "description": "In Apache Karaf prior to 4.2.0 release, if the sshd service in Karaf is left on so an administrator can manage the running instance, any user with rights to the Karaf console can pivot and read/write any file on the file system to which the Karaf process user has access. This can be locked down a bit by using chroot to change the root directory to protect files outside of the Karaf install directory; it can be further locked down by defining a security manager policy that limits file system access to those directories beneath the Karaf home that are necessary for the system to run. However, this still allows anyone with ssh access to the Karaf process to read and write a large number of files as the Karaf process user.",
        "reserved_timestamp": 1528156800,
        "published_timestamp": 1537228800,
        "updated_timestamp": 1537279022,
        "repository_url": null,
        "references": {
            "": 197,
            "https://issues.apache.org/jira/browse/KARAF-5427": 6,
            "https://access.redhat.com/support/": 6,
            "https://access.redhat.com/downloads/": 5,
            "http://karaf.apache.org/security/cve-2018-11786.txt": 4,
            "https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax": 4,
            "https://github.co/hiddenchars": 4,
            "https://access.redhat.com/labs/": 4,
            "https://access.redhat.com/errata/": 3,
            "https://lists.apache.org/thread.html/5b7ac762c6bbe77ac5d9389f093fc6dbf196c36d788e3d7629e6c1d9%40%3Cdev.karaf.apache.org%3E": 2,
            "https://gitbox.apache.org/repos/asf?p=karaf.git;h=24fb477": 2,
            "https://gitbox.apache.org/repos/asf?p=karaf.git;h=7ad0da3": 2,
            "https://access.redhat.com/support/policy/updates/jboss_notes": 2,
            "https://docs.atlassian.com/jira/jcore-docs-0820/": 2,
            "http://www.atlassian.com/software/jira": 2,
            "https://github.com/features/actions": 2,
            "https://github.com/features/packages": 2,
            "https://github.com/features/security": 2,
            "https://github.com/features/codespaces": 2,
            "https://github.com/features/copilot": 2,
            "https://github.com/features/code-review": 2,
            "https://github.com/features/issues": 2,
            "https://github.com/features/discussions": 2,
            "https://github.com/features": 2,
            "https://docs.github.com": 2,
            "https://skills.github.com": 2,
            "https://github.blog": 2,
            "https://github.com/enterprise": 2,
            "https://github.com/team": 2,
            "https://github.com/enterprise/startups": 2,
            "https://github.com/solutions/industries/healthcare": 2,
            "https://github.com/solutions/industries/financial-services": 2,
            "https://github.com/solutions/industries/manufacturing": 2,
            "https://github.com/solutions/ci-cd": 2,
            "https://github.com/solutions/devops": 2,
            "https://github.com/solutions/devsecops": 2,
            "https://resources.github.com/learn/pathways": 2,
            "https://resources.github.com": 2,
            "https://github.com/customer-stories": 2,
            "https://partner.github.com": 2,
            "https://github.com/readme": 2,
            "https://github.com/topics": 2,
            "https://github.com/trending": 2,
            "https://github.com/collections": 2,
            "https://github.com/enterprise/advanced-security": 2,
            "https://github.com/pricing": 2,
            "https://github.com": 2,
            "https://docs.github.com/site-policy/github-terms/github-terms-of-service": 2,
            "https://docs.github.com/site-policy/privacy-policies/github-privacy-statement": 2,
            "https://github.com/security": 2,
            "https://www.githubstatus.com/": 2,
            "https://docs.github.com/": 2,
            "https://support.github.com?tags=dotcom-footer": 2,
            "https://access.redhat.com/management/": 2,
            "https://access.redhat.com/": 2,
            "https://access.redhat.com/documentation": 2,
            "https://access.redhat.com/product-life-cycles/": 2,
            "https://access.redhat.com/security": 2,
            "https://access.redhat.com/security/security-updates/#/security-advisories": 2,
            "https://access.redhat.com/security/security-updates/#/cve": 2,
            "https://access.redhat.com/support/contact/": 2,
            "https://access.redhat.com/support/policy/updates/red_hat_build_of_quarkus_notes": 2,
            "https://access.redhat.com/articles/7060671": 2,
            "https://status.redhat.com": 2,
            "https://issues.apache.org/jira/secure/MyJiraHome.jspa": 1,
            "https://selfserve.apache.org/jira-account.html": 1,
            "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-11786": 1,
            "https://www.atlassian.com/software/jira": 1,
            "http://www.atlassian.com/": 1,
            "commit::24fb477ea886e8f294dedbad98d2a2c4cb2a44f9": 1,
            "commit::540adc3e5fca1f22a05791366f52fe3308d20a35": 1,
            "commit::7ad0da3c149d20408ddff0fb8c16bbbdb13164d2": 1,
            "commit::ef1595dd00d179ece94715ec3d3a2ccf33091f24": 1,
            "https://access.redhat.com/products/red-hat-enterprise-linux/": 1,
            "https://access.redhat.com/products/red-hat-openshift-container-platform": 1,
            "https://access.redhat.com/products/red-hat-ansible-automation-platform/": 1,
            "https://access.redhat.com/products/": 1,
            "https://access.redhat.com/downloads/content/package-browser": 1,
            "https://catalog.redhat.com/software/containers/explore/": 1,
            "https://access.redhat.com/articles/1202803": 1,
            "https://access.redhat.com/search/?q=*&p=1&rows=10&documentKind=Solution": 1,
            "https://access.redhat.com/search/?q=*&p=1&rows=10&documentKind=Article": 1,
            "https://access.redhat.com/documentation/en/red_hat_enterprise_linux": 1,
            "https://access.redhat.com/documentation/en/openshift_container_platform": 1,
            "https://access.redhat.com/documentation/en/red_hat_ansible_automation_platform": 1,
            "https://access.redhat.com/documentation/": 1,
            "https://access.redhat.com/security/": 1,
            "https://access.redhat.com/security/vulnerabilities": 1,
            "https://access.redhat.com/security/data": 1,
            "https://access.redhat.com/security/security-updates/#/security-labs": 1,
            "https://access.redhat.com/security/updates/backporting/": 1,
            "https://access.redhat.com/support/cases/": 1,
            "https://access.redhat.com/support/cases/#/troubleshoot": 1,
            "https://access.redhat.com/community": 1,
            "https://access.redhat.com/community/": 1,
            "https://access.redhat.com/discussions/": 1,
            "https://access.redhat.com/announcements/": 1,
            "https://access.redhat.com/accelerators/": 1,
            "https://access.redhat.com/jbossnetwork/restricted/listSoftware.html": 1,
            "https://cloud.redhat.com/insights": 1,
            "https://access.redhat.com/changeLanguage?language=en": 1,
            "https://access.redhat.com/changeLanguage?language=ko": 1,
            "https://access.redhat.com/changeLanguage?language=ja": 1,
            "https://access.redhat.com/changeLanguage?language=zh_CN": 1,
            "https://access.redhat.com/product-life-cycles": 1,
            "https://access.redhat.com/articles/7019023": 1,
            "https://access.redhat.com/articles/6200982": 1,
            "https://access.redhat.com/search/#/knowledgebase": 1,
            "https://access.redhat.com/search/#/discussions": 1,
            "https://access.redhat.com/support/policy/updates/jboss_eap_xp_notes": 1,
            "https://access.redhat.com/articles/7037218": 1,
            "https://github.com/nodejs/Release": 1,
            "https://access.redhat.com/articles/4544981": 1,
            "https://access.redhat.com/support/policy/updates/jboss_notes#p_rhbocamel": 1,
            "https://access.redhat.com/solutions/6342381": 1,
            "https://access.redhat.com/solutions/5941551": 1,
            "https://access.redhat.com/support/policy/updates/service-interconnect": 1,
            "https://access.redhat.com/articles/6975608": 1,
            "https://access.redhat.com/articles/6999674": 1,
            "https://access.redhat.com/articles/6371801": 1,
            "https://redhat.com/en": 1,
            "https://twitter.com/RedHat": 1,
            "https://access.redhat.com/management": 1,
            "https://access.redhat.com/support": 1,
            "https://access.redhat.com/support/customer-service": 1,
            "https://access.redhat.com/articles/33844": 1,
            "https://access.redhat.com/help/login_assistance": 1,
            "https://www.redhat.com/en/trust": 1,
            "https://www.redhat.com/en/about/browser-support": 1,
            "https://www.redhat.com/en/about/digital-accessibility": 1,
            "https://access.redhat.com/recognition/": 1,
            "https://access.redhat.com/help/colophon/": 1,
            "https://www.redhat.com/": 1,
            "http://developers.redhat.com/": 1,
            "https://connect.redhat.com/": 1,
            "https://cloud.redhat.com/": 1,
            "https://access.redhat.com/subscription-value": 1,
            "https://www.redhat.com/about/": 1,
            "http://jobs.redhat.com": 1,
            "https://redhat.com/en/about/company": 1,
            "https://redhat.com/en/jobs": 1,
            "https://redhat.com/en/events": 1,
            "https://redhat.com/en/about/office-locations": 1,
            "https://redhat.com/en/contact": 1,
            "https://redhat.com/en/blog": 1,
            "https://redhat.com/en/about/our-culture/diversity-equity-inclusion": 1,
            "https://coolstuff.redhat.com/": 1,
            "https://www.redhat.com/en/summit": 1,
            "https://redhat.com/en/about/privacy-policy": 1,
            "https://redhat.com/en/about/terms-use": 1,
            "https://redhat.com/en/about/all-policies-guidelines": 1,
            "https://redhat.com/en/about/digital-accessibility": 1
        },
        "affected_products": [
            "Apache Karaf",
            "Karaf",
            "Apache"
        ],
        "versions": {
            "status": "affected",
            "version": "prior to 4.2.0 release"
        },
        "files": [],
        "keywords": [
            "limit",
            "directory",
            "service",
            "have",
            "policy",
            "console",
            "release",
            "chroot",
            "instance",
            "write",
            "define",
            "install",
            "manage",
            "pivot",
            "manager",
            "administrator",
            "lock",
            "allow",
            "apache",
            "right",
            "security",
            "file",
            "home",
            "leave",
            "karaf",
            "user",
            "system",
            "protect",
            "root",
            "process",
            "change",
            "number",
            "read",
            "access"
        ],
        "files_extension": [],
        "has_fixing_commit": true
    },
    "commits": [
        {
            "commit_id": "24fb477ea886e8f294dedbad98d2a2c4cb2a44f9",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1508870287,
            "hunks": 17,
            "message": "[KARAF-5427] Add RBAC support for reflection invocation and redirections in the console",
            "diff": [
                "diff --git a/shell/core/src/main/java/org/apache/karaf/shell/impl/console/SessionFactoryImpl.java b/shell/core/src/main/java/org/apache/karaf/shell/impl/console/SessionFactoryImpl.java",
                "index d3517535ce..13e27ac188 100644",
                "--- a/shell/core/src/main/java/org/apache/karaf/shell/impl/console/SessionFactoryImpl.java",
                "+++ b/shell/core/src/main/java/org/apache/karaf/shell/impl/console/SessionFactoryImpl.java",
                "@@ -22,2 +22,3 @@ import java.io.InputStream;",
                " import java.io.PrintStream;",
                "+import java.nio.file.Path;",
                " import java.util.HashMap;",
                "@@ -31,2 +32,3 @@ import org.apache.felix.gogo.jline.Procedural;",
                " import org.apache.felix.gogo.runtime.CommandProcessorImpl;",
                "+import org.apache.felix.gogo.runtime.CommandSessionImpl;",
                " import org.apache.felix.gogo.runtime.Reflective;",
                "@@ -56,3 +58,13 @@ public class SessionFactoryImpl extends RegistryImpl implements SessionFactory,",
                "         this.threadIO = threadIO;",
                "-        commandProcessor = new CommandProcessorImpl(threadIO);",
                "+        commandProcessor = new CommandProcessorImpl(threadIO) {",
                "+            @Override",
                "+            public Object invoke(CommandSessionImpl session, Object target, String name, List<Object> args) throws Exception {",
                "+                return SessionFactoryImpl.this.invoke(session, target, name, args);",
                "+            }",
                "+",
                "+            @Override",
                "+            public Path redirect(CommandSessionImpl session, Path path, int mode) {",
                "+                return SessionFactoryImpl.this.redirect(session, path, mode);",
                "+            }",
                "+        };",
                "         register(new ExitCommand());",
                "@@ -79,2 +91,10 @@ public class SessionFactoryImpl extends RegistryImpl implements SessionFactory,",
                "+    protected Object invoke(CommandSessionImpl session, Object target, String name, List<Object> args) throws Exception {",
                "+        return Reflective.invoke(session, target, name, args);",
                "+    }",
                "+",
                "+    protected Path redirect(CommandSessionImpl session, Path path, int mode) {",
                "+        return session.currentDir().resolve(path);",
                "+    }",
                "+",
                "     public CommandProcessorImpl getCommandProcessor() {",
                "diff --git a/shell/core/src/main/java/org/apache/karaf/shell/impl/console/osgi/secured/SecuredCommand.java b/shell/core/src/main/java/org/apache/karaf/shell/impl/console/osgi/secured/SecuredCommand.java",
                "index e6e8ef779b..2df6e097fd 100644",
                "--- a/shell/core/src/main/java/org/apache/karaf/shell/impl/console/osgi/secured/SecuredCommand.java",
                "+++ b/shell/core/src/main/java/org/apache/karaf/shell/impl/console/osgi/secured/SecuredCommand.java",
                "@@ -66,3 +66,3 @@ public class SecuredCommand implements Command, Function {",
                "     public Object execute(Session session, List<Object> arguments) throws Exception {",
                "-        factory.checkSecurity(this, session, arguments);",
                "+        factory.checkSecurity(getScope(), getName(), arguments);",
                "         return command.execute(session, arguments);",
                "diff --git a/shell/core/src/main/java/org/apache/karaf/shell/impl/console/osgi/secured/SecuredSessionFactoryImpl.java b/shell/core/src/main/java/org/apache/karaf/shell/impl/console/osgi/secured/SecuredSessionFactoryImpl.java",
                "index cf12f18738..7fe015cdfa 100644",
                "--- a/shell/core/src/main/java/org/apache/karaf/shell/impl/console/osgi/secured/SecuredSessionFactoryImpl.java",
                "+++ b/shell/core/src/main/java/org/apache/karaf/shell/impl/console/osgi/secured/SecuredSessionFactoryImpl.java",
                "@@ -20,2 +20,3 @@ package org.apache.karaf.shell.impl.console.osgi.secured;",
                "+import java.nio.file.Path;",
                " import java.security.AccessControlContext;",
                "@@ -24,2 +25,3 @@ import java.security.Principal;",
                " import java.util.ArrayList;",
                "+import java.util.Arrays;",
                " import java.util.Dictionary;",
                "@@ -32,2 +34,3 @@ import javax.security.auth.Subject;",
                " import org.apache.felix.gogo.runtime.CommandNotFoundException;",
                "+import org.apache.felix.gogo.runtime.CommandSessionImpl;",
                " import org.apache.felix.service.command.Function;",
                "@@ -37,3 +40,2 @@ import org.apache.karaf.service.guard.tools.ACLConfigurationParser;",
                " import org.apache.karaf.shell.api.console.Command;",
                "-import org.apache.karaf.shell.api.console.Session;",
                " import org.apache.karaf.shell.impl.console.SessionFactoryImpl;",
                "@@ -54,4 +56,7 @@ public class SecuredSessionFactoryImpl extends SessionFactoryImpl implements Con",
                "     private static final String PROXY_COMMAND_ACL_PID_PREFIX = \"org.apache.karaf.command.acl.\";",
                "-    private static final String CONFIGURATION_FILTER =",
                "-            \"(\" + Constants.SERVICE_PID + \"=\" + PROXY_COMMAND_ACL_PID_PREFIX + \"*)\";",
                "+    private static final String CONFIGURATION_FILTER = \"(\" + Constants.SERVICE_PID + \"=\" + PROXY_COMMAND_ACL_PID_PREFIX + \"*)\";",
                "+",
                "+    private static final String SHELL_SCOPE = \"shell\";",
                "+    private static final String SHELL_INVOKE = \".invoke\";",
                "+    private static final String SHELL_REDIRECT = \".redirect\";",
                "@@ -78,2 +83,14 @@ public class SecuredSessionFactoryImpl extends SessionFactoryImpl implements Con",
                "+    @Override",
                "+    protected Object invoke(CommandSessionImpl session, Object target, String name, List<Object> args) throws Exception {",
                "+        checkSecurity(SHELL_SCOPE, SHELL_INVOKE, Arrays.asList(target, name, args));",
                "+        return super.invoke(session, target, name, args);",
                "+    }",
                "+",
                "+    @Override",
                "+    protected Path redirect(CommandSessionImpl session, Path path, int mode) {",
                "+        checkSecurity(SHELL_SCOPE, SHELL_REDIRECT, Arrays.asList(path, mode));",
                "+        return super.redirect(session, path, mode);",
                "+    }",
                "+",
                "     @Override",
                "@@ -86,3 +103,4 @@ public class SecuredSessionFactoryImpl extends SessionFactoryImpl implements Con",
                "         if (service instanceof Command) {",
                "-            return isVisible((Command) service);",
                "+            Command cmd = (Command) service;",
                "+            return isVisible(cmd.getScope(), cmd.getName());",
                "         } else {",
                "@@ -92,7 +110,7 @@ public class SecuredSessionFactoryImpl extends SessionFactoryImpl implements Con",
                "-    protected boolean isVisible(Command command) {",
                "-        Dictionary<String, Object> config = getScopeConfig(command.getScope());",
                "+    protected boolean isVisible(String scope, String name) {",
                "+        Dictionary<String, Object> config = getScopeConfig(scope);",
                "         if (config != null) {",
                "             List<String> roles = new ArrayList<>();",
                "-            ACLConfigurationParser.getRolesForInvocation(command.getName(), null, null, config, roles);",
                "+            ACLConfigurationParser.getRolesForInvocation(name, null, null, config, roles);",
                "             if (roles.isEmpty()) {",
                "@@ -111,10 +129,10 @@ public class SecuredSessionFactoryImpl extends SessionFactoryImpl implements Con",
                "-    void checkSecurity(SecuredCommand command, Session session, List<Object> arguments) {",
                "-        Dictionary<String, Object> config = getScopeConfig(command.getScope());",
                "+    void checkSecurity(String scope, String name, List<Object> arguments) {",
                "+        Dictionary<String, Object> config = getScopeConfig(scope);",
                "         if (config != null) {",
                "-            if (!isVisible(command)) {",
                "-                throw new CommandNotFoundException(command.getScope() + \":\" + command.getName());",
                "+            if (!isVisible(scope, name)) {",
                "+                throw new CommandNotFoundException(scope + \":\" + name);",
                "             }",
                "             List<String> roles = new ArrayList<>();",
                "-            ACLConfigurationParser.Specificity s = ACLConfigurationParser.getRolesForInvocation(command.getName(), new Object[] { arguments.toString() }, null, config, roles);",
                "+            ACLConfigurationParser.Specificity s = ACLConfigurationParser.getRolesForInvocation(name, new Object[] { arguments.toString() }, null, config, roles);",
                "             if (s == ACLConfigurationParser.Specificity.NO_MATCH) {"
            ],
            "changed_files": [
                "shell/core/src/main/java/org/apache/karaf/shell/impl/console/SessionFactoryImpl.java",
                "shell/core/src/main/java/org/apache/karaf/shell/impl/console/osgi/secured/SecuredCommand.java",
                "shell/core/src/main/java/org/apache/karaf/shell/impl/console/osgi/secured/SecuredSessionFactoryImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5427": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "103f33105a58c899706a0687bb334678e2fa1ee7"
                ]
            ],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "XREF_BUG",
                    "message": "The commit and the advisory (including referenced pages) mention the same bug tracking ticket: KARAF-5427",
                    "relevance": 32
                },
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 1 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: console",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: console",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5427",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "540adc3e5fca1f22a05791366f52fe3308d20a35",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1508162385,
            "hunks": 1,
            "message": "[KARAF-5431] Upgrade to Felix Gogo Runtime / JLine 1.0.10",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 2e7778b1cb..eb65e547e0 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -194,4 +194,4 @@",
                "         <felix.framework.security.version>2.6.0</felix.framework.security.version>",
                "-        <felix.gogo.runtime.version>1.0.8</felix.gogo.runtime.version>",
                "-        <felix.gogo.jline.version>1.0.8</felix.gogo.jline.version>",
                "+        <felix.gogo.runtime.version>1.0.10</felix.gogo.runtime.version>",
                "+        <felix.gogo.jline.version>1.0.10</felix.gogo.jline.version>",
                "         <felix.httplite.version>0.1.6</felix.httplite.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5431": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 1 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5431",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ef1595dd00d179ece94715ec3d3a2ccf33091f24",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1510756211,
            "hunks": 2,
            "message": "Fix bin/inc to work with any shell",
            "diff": [
                "diff --git a/assemblies/features/base/src/main/filtered-resources/resources/bin/inc b/assemblies/features/base/src/main/filtered-resources/resources/bin/inc",
                "index 6f2dc6c3f6..14a42e6fb0 100644",
                "--- a/assemblies/features/base/src/main/filtered-resources/resources/bin/inc",
                "+++ b/assemblies/features/base/src/main/filtered-resources/resources/bin/inc",
                "@@ -216,4 +216,5 @@ checkJvmVersion() {",
                "     MAJOR_VERSION=$(\"${JAVA}\" -version 2>&1 \\",
                "-        |awk -F '\"' '/version/ {print $2}')",
                "-    if [ \"${MAJOR_VERSION:0:1}\" -ge \"9\" ]; then",
                "+        |awk -F '\"' '/version/ {print $2}' \\",
                "+        |cut -b 1)",
                "+    if [ \"${MAJOR_VERSION}\" -ge \"9\" ]; then",
                "        VERSION=90",
                "@@ -267,4 +268,4 @@ setupDefaults() {",
                "         MAJOR_VERSION=$(\"${JAVA}\" -version 2>&1 \\",
                "-            |awk -F '\"' '/version/ {print $2}')",
                "-        if [ \"${MAJOR_VERSION:0:1}\" -ge \"9\" ]; then",
                "+            |awk -F '\"' '/version/ {print $2}'|cut -b 1)",
                "+        if [ \"${MAJOR_VERSION}\" -ge \"9\" ]; then",
                "            VERSION=90"
            ],
            "changed_files": [
                "assemblies/features/base/src/main/filtered-resources/resources/bin/inc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 1 times in the references.",
                    "relevance": 64
                }
            ]
        },
        {
            "commit_id": "d6b9ee8040d317ca67e7e47941ab2c0290ef79a0",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1508870321,
            "hunks": 0,
            "message": "Merge branch 'KARAF-5427'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5427": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "XREF_BUG",
                    "message": "The commit and the advisory (including referenced pages) mention the same bug tracking ticket: KARAF-5427",
                    "relevance": 32
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5427",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "14612fdc126376d9cb6e71562ef1f043b8c1a6a4",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1507736026,
            "hunks": 3,
            "message": "[KARAF-5352] Use system separator in the FilesStream",
            "diff": [
                "diff --git a/assemblies/features/base/src/main/resources/resources/etc/system.properties b/assemblies/features/base/src/main/resources/resources/etc/system.properties",
                "index fb08abefcc..6c4525c64a 100644",
                "--- a/assemblies/features/base/src/main/resources/resources/etc/system.properties",
                "+++ b/assemblies/features/base/src/main/resources/resources/etc/system.properties",
                "@@ -48,3 +48,2 @@ karaf.default.repository = system",
                " # additional commands.",
                "-# Do not use absolute paths to avoid problems on windows.",
                " #",
                "diff --git a/util/src/main/java/org/apache/karaf/util/filesstream/FilesStream.java b/util/src/main/java/org/apache/karaf/util/filesstream/FilesStream.java",
                "index 49d32a8b8e..b21cc38387 100644",
                "--- a/util/src/main/java/org/apache/karaf/util/filesstream/FilesStream.java",
                "+++ b/util/src/main/java/org/apache/karaf/util/filesstream/FilesStream.java",
                "@@ -23,2 +23,3 @@ import org.slf4j.LoggerFactory;",
                "+import java.io.File;",
                " import java.io.IOException;",
                "@@ -99,3 +100,3 @@ public final class FilesStream {",
                "         String rem;",
                "-        int idx = glob.lastIndexOf('/');",
                "+        int idx = glob.lastIndexOf(File.separatorChar);",
                "         if (idx >= 0) {"
            ],
            "changed_files": [
                "assemblies/features/base/src/main/resources/resources/etc/system.properties",
                "util/src/main/java/org/apache/karaf/util/filesstream/FilesStream.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5352": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "183763959c41928b6390c06a859742775a38057a"
                ]
            ],
            "tags": [
                "karaf-4.1.3",
                "karaf-4.1.4",
                "karaf-4.1.5",
                "karaf-4.1.6",
                "karaf-4.1.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: file, system",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: file, system",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5352",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b6e8248e001c11e912eb826a6ef0b7ab4e20ace6",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1510891124,
            "hunks": 6,
            "message": "[KARAF-5487]SshRole restriction not enforced when using username/password",
            "diff": [
                "diff --git a/assemblies/features/base/src/main/resources/resources/etc/users.properties b/assemblies/features/base/src/main/resources/resources/etc/users.properties",
                "index 0657308c0a..ace22826cc 100644",
                "--- a/assemblies/features/base/src/main/resources/resources/etc/users.properties",
                "+++ b/assemblies/features/base/src/main/resources/resources/etc/users.properties",
                "@@ -32,2 +32,2 @@",
                " karaf = karaf,_g_:admingroup",
                "-_g_\\:admingroup = group,admin,manager,viewer,systembundles",
                "+_g_\\:admingroup = group,admin,manager,viewer,systembundles,ssh",
                "diff --git a/assemblies/features/standard/src/main/feature/feature.xml b/assemblies/features/standard/src/main/feature/feature.xml",
                "index c40215121b..d7c582f727 100644",
                "--- a/assemblies/features/standard/src/main/feature/feature.xml",
                "+++ b/assemblies/features/standard/src/main/feature/feature.xml",
                "@@ -179,6 +179,5 @@",
                "             #",
                "-            # Role name used for SSH access authorization",
                "-            # If not set, this defaults to the ${karaf.admin.role} configured in etc/system.properties",
                "+            # shRole defines the role required to access the console through ssh",
                "             #",
                "-            # sshRole = admin",
                "+            sshRole = ssh",
                "diff --git a/shell/ssh/src/main/java/org/apache/karaf/shell/ssh/KarafJaasAuthenticator.java b/shell/ssh/src/main/java/org/apache/karaf/shell/ssh/KarafJaasAuthenticator.java",
                "index ad9a33a571..83c421b519 100644",
                "--- a/shell/ssh/src/main/java/org/apache/karaf/shell/ssh/KarafJaasAuthenticator.java",
                "+++ b/shell/ssh/src/main/java/org/apache/karaf/shell/ssh/KarafJaasAuthenticator.java",
                "@@ -84,2 +84,3 @@ public class KarafJaasAuthenticator implements PasswordAuthenticator, PublickeyA",
                "+            boolean hasCorrectRole = role == null || role.isEmpty();",
                "             int roleCount = 0;",
                "@@ -87,2 +88,5 @@ public class KarafJaasAuthenticator implements PasswordAuthenticator, PublickeyA",
                "                 if (principal instanceof RolePrincipal) {",
                "+                    if (!hasCorrectRole) {",
                "+                        hasCorrectRole = role.equals(principal.getName());",
                "+                    }",
                "                     roleCount++;",
                "@@ -94,2 +98,6 @@ public class KarafJaasAuthenticator implements PasswordAuthenticator, PublickeyA",
                "             }",
                "+            ",
                "+            if (!hasCorrectRole) {",
                "+                throw new FailedLoginException(\"User doesn't have the required role \" + role);",
                "+            }"
            ],
            "changed_files": [
                "assemblies/features/base/src/main/resources/resources/etc/users.properties",
                "assemblies/features/standard/src/main/feature/feature.xml",
                "shell/ssh/src/main/java/org/apache/karaf/shell/ssh/KarafJaasAuthenticator.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5487": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "d9763bdcd8361c2f453de2bc72525ccf5a03f83b"
                ]
            ],
            "tags": [
                "karaf-4.1.4",
                "karaf-4.1.5",
                "karaf-4.1.6",
                "karaf-4.1.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: user",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: user",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5487",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "45fed936553e464a0575e61d94fe67128c089a31",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1508507563,
            "hunks": 11,
            "message": "[KARAF-5435] BundleException when installing a bundle by API when the FeatureService install a feature",
            "diff": [
                "diff --git a/features/core/src/main/java/org/apache/karaf/features/internal/osgi/Activator.java b/features/core/src/main/java/org/apache/karaf/features/internal/osgi/Activator.java",
                "index 1ac72b634f..6881d4753f 100644",
                "--- a/features/core/src/main/java/org/apache/karaf/features/internal/osgi/Activator.java",
                "+++ b/features/core/src/main/java/org/apache/karaf/features/internal/osgi/Activator.java",
                "@@ -323,2 +323,3 @@ public class Activator extends BaseActivator {",
                "         if (installSupport != null) {",
                "+            installSupport.unregister();",
                "             installSupport.saveDigraph();",
                "diff --git a/features/core/src/main/java/org/apache/karaf/features/internal/service/BundleInstallSupport.java b/features/core/src/main/java/org/apache/karaf/features/internal/service/BundleInstallSupport.java",
                "index 8b0ffc4d2b..5865592a7a 100644",
                "--- a/features/core/src/main/java/org/apache/karaf/features/internal/service/BundleInstallSupport.java",
                "+++ b/features/core/src/main/java/org/apache/karaf/features/internal/service/BundleInstallSupport.java",
                "@@ -71,2 +71,4 @@ public interface BundleInstallSupport {",
                "     FrameworkInfo getInfo();",
                "+",
                "+    void unregister();",
                "diff --git a/features/core/src/main/java/org/apache/karaf/features/internal/service/BundleInstallSupportImpl.java b/features/core/src/main/java/org/apache/karaf/features/internal/service/BundleInstallSupportImpl.java",
                "index 4463465381..232c57bc65 100644",
                "--- a/features/core/src/main/java/org/apache/karaf/features/internal/service/BundleInstallSupportImpl.java",
                "+++ b/features/core/src/main/java/org/apache/karaf/features/internal/service/BundleInstallSupportImpl.java",
                "@@ -29,2 +29,3 @@ import java.util.Map;",
                " import java.util.Set;",
                "+import java.util.concurrent.ConcurrentHashMap;",
                " import java.util.concurrent.CountDownLatch;",
                "@@ -75,3 +76,6 @@ public class BundleInstallSupportImpl implements BundleInstallSupport {",
                "     private final BundleContext systemBundleContext;",
                "-    ",
                "+",
                "+    private Map<Thread, ResolverHook> hooks = new ConcurrentHashMap<>();",
                "+    private ServiceRegistration<ResolverHookFactory> hookRegistration;",
                "+",
                "     public BundleInstallSupportImpl(Bundle ourBundle,",
                "@@ -86,2 +90,13 @@ public class BundleInstallSupportImpl implements BundleInstallSupport {",
                "         this.digraph = digraph;",
                "+        if (systemBundleContext != null) {",
                "+            hookRegistration = systemBundleContext.registerService(ResolverHookFactory.class,",
                "+                    triggers -> hooks.get(Thread.currentThread()), null);",
                "+        }",
                "+",
                "+    }",
                "+",
                "+    public void unregister() {",
                "+        if (hookRegistration != null) {",
                "+            hookRegistration.unregister();",
                "+        }",
                "     }",
                "@@ -178,2 +193,8 @@ public class BundleInstallSupportImpl implements BundleInstallSupport {",
                "                     Resource sourceResource = bndToRes.get(sourceBundle);",
                "+                    List<Wire> wires = wiring.get(sourceResource);",
                "+                    if (sourceBundle == null || wires == null) {",
                "+                        // This could be a bundle external to this resolution which",
                "+                        // is being resolve at the same time, so do not interfere",
                "+                        return;",
                "+                    }",
                "                     Set<Resource> wired = new HashSet<>();",
                "@@ -181,3 +202,3 @@ public class BundleInstallSupportImpl implements BundleInstallSupport {",
                "                     wired.add(sourceResource);",
                "-                    for (Wire wire : wiring.get(sourceResource)) {",
                "+                    for (Wire wire : wires) {",
                "                         wired.add(wire.getProvider());",
                "@@ -207,4 +228,3 @@ public class BundleInstallSupportImpl implements BundleInstallSupport {",
                "         };",
                "-        ResolverHookFactory factory = triggers -> hook;",
                "-        ServiceRegistration<ResolverHookFactory> registration = systemBundleContext.registerService(ResolverHookFactory.class, factory, null);",
                "+        hooks.put(Thread.currentThread(), hook);",
                "         try {",
                "@@ -213,3 +233,3 @@ public class BundleInstallSupportImpl implements BundleInstallSupport {",
                "         } finally {",
                "-            registration.unregister();",
                "+            hooks.remove(Thread.currentThread());",
                "         }",
                "diff --git a/features/core/src/main/java/org/apache/karaf/features/internal/service/FeaturesServiceImpl.java b/features/core/src/main/java/org/apache/karaf/features/internal/service/FeaturesServiceImpl.java",
                "index cf01a8f191..430144804f 100644",
                "--- a/features/core/src/main/java/org/apache/karaf/features/internal/service/FeaturesServiceImpl.java",
                "+++ b/features/core/src/main/java/org/apache/karaf/features/internal/service/FeaturesServiceImpl.java",
                "@@ -157,3 +157,3 @@ public class FeaturesServiceImpl implements FeaturesService, Deployer.DeployCall",
                "     public void stop() {",
                "-      this.executor.shutdown();",
                "+        this.executor.shutdown();",
                "     }",
                "diff --git a/features/core/src/main/java/org/apache/karaf/features/internal/service/StaticInstallSupport.java b/features/core/src/main/java/org/apache/karaf/features/internal/service/StaticInstallSupport.java",
                "index eaecccb9d1..30471a40af 100644",
                "--- a/features/core/src/main/java/org/apache/karaf/features/internal/service/StaticInstallSupport.java",
                "+++ b/features/core/src/main/java/org/apache/karaf/features/internal/service/StaticInstallSupport.java",
                "@@ -94,2 +94,6 @@ public abstract class StaticInstallSupport implements BundleInstallSupport {",
                "+    @Override",
                "+    public void unregister() {",
                "+    }",
                "+",
                " }"
            ],
            "changed_files": [
                "features/core/src/main/java/org/apache/karaf/features/internal/osgi/Activator.java",
                "features/core/src/main/java/org/apache/karaf/features/internal/service/BundleInstallSupport.java",
                "features/core/src/main/java/org/apache/karaf/features/internal/service/BundleInstallSupportImpl.java",
                "features/core/src/main/java/org/apache/karaf/features/internal/service/FeaturesServiceImpl.java",
                "features/core/src/main/java/org/apache/karaf/features/internal/service/StaticInstallSupport.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5435": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "67e2e6c2498aa44fd2270414424c048734727250"
                ]
            ],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: service, install",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: service, install",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5435",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4c7e81304779e9b59208992f059e64655ec53ef4",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1508744650,
            "hunks": 6,
            "message": "[KARAF-5440] Allow for overrides to values in system.properties.",
            "diff": [
                "diff --git a/assemblies/features/base/src/main/resources/resources/etc/system.properties b/assemblies/features/base/src/main/resources/resources/etc/system.properties",
                "index be76d42678..77c316d3aa 100644",
                "--- a/assemblies/features/base/src/main/resources/resources/etc/system.properties",
                "+++ b/assemblies/features/base/src/main/resources/resources/etc/system.properties",
                "@@ -24,2 +24,5 @@",
                "+# Properties file inclusions (as a space separated list of relative paths)",
                "+# Included files will override the values specified in this file",
                "+${optionals} = custom.system.properties",
                "diff --git a/assemblies/features/static/src/main/resources/resources/etc/system.properties b/assemblies/features/static/src/main/resources/resources/etc/system.properties",
                "index c5f8b4b407..a696c0fbf2 100644",
                "--- a/assemblies/features/static/src/main/resources/resources/etc/system.properties",
                "+++ b/assemblies/features/static/src/main/resources/resources/etc/system.properties",
                "@@ -24,2 +24,5 @@",
                "+# Properties file inclusions (as a space separated list of relative paths)",
                "+# Included files will override the values specified in this file",
                "+${optionals} = custom.system.properties",
                "diff --git a/instance/src/main/resources/org/apache/karaf/instance/resources/etc/system.properties b/instance/src/main/resources/org/apache/karaf/instance/resources/etc/system.properties",
                "index 0835bbbb1c..43014007be 100644",
                "--- a/instance/src/main/resources/org/apache/karaf/instance/resources/etc/system.properties",
                "+++ b/instance/src/main/resources/org/apache/karaf/instance/resources/etc/system.properties",
                "@@ -24,2 +24,5 @@",
                "+# Properties file inclusions (as a space separated list of relative paths)",
                "+# Included files will override the values specified in this file",
                "+${optionals} = custom.system.properties",
                "diff --git a/util/src/main/java/org/apache/karaf/util/config/PropertiesLoader.java b/util/src/main/java/org/apache/karaf/util/config/PropertiesLoader.java",
                "index cf9a201ca4..a24990afcd 100644",
                "--- a/util/src/main/java/org/apache/karaf/util/config/PropertiesLoader.java",
                "+++ b/util/src/main/java/org/apache/karaf/util/config/PropertiesLoader.java",
                "@@ -103,11 +103,11 @@ public class PropertiesLoader {",
                "     public static void loadSystemProperties(File file) throws IOException {",
                "-        Properties props = new Properties(false);",
                "+        Properties props = null;",
                "         try {",
                "-            InputStream is = new FileInputStream(file);",
                "-            props.load(is);",
                "-            is.close();",
                "-        } catch (Exception e1) {",
                "-            // Ignore",
                "+        \tURL configPropURL = file.toURI().toURL();",
                "+        \tprops = loadPropertiesFile(configPropURL, true);",
                "+        } catch (Exception ex) {",
                "+        \t// Ignore",
                "+        \treturn;",
                "         }",
                "-",
                "+        ",
                "         for (Enumeration<?> e = props.propertyNames(); e.hasMoreElements();) {"
            ],
            "changed_files": [
                "assemblies/features/base/src/main/resources/resources/etc/system.properties",
                "assemblies/features/static/src/main/resources/resources/etc/system.properties",
                "instance/src/main/resources/org/apache/karaf/instance/resources/etc/system.properties",
                "util/src/main/java/org/apache/karaf/util/config/PropertiesLoader.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5440": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "7fb0a652b27ad15f2106d985681cba0e76b5f75b"
                ]
            ],
            "tags": [
                "karaf-4.1.3",
                "karaf-4.1.4",
                "karaf-4.1.5",
                "karaf-4.1.6",
                "karaf-4.1.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: allow, system",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: instance, system",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5440",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fc70bda293ce49f12cc8c04922567875eb86eacf",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1509958782,
            "hunks": 6,
            "message": "[KARAF-5456]introduce a property karaf.shell.history.file.maxSize to configure the history file size on disk",
            "diff": [
                "diff --git a/assemblies/features/base/src/main/resources/resources/etc/system.properties b/assemblies/features/base/src/main/resources/resources/etc/system.properties",
                "index 77c316d3aa..6056eb69d1 100644",
                "--- a/assemblies/features/base/src/main/resources/resources/etc/system.properties",
                "+++ b/assemblies/features/base/src/main/resources/resources/etc/system.properties",
                "@@ -62,2 +62,8 @@ karaf.shell.init.script = shell.init.script,scripts/*.script",
                "+#",
                "+# Sets the maximum size of the local shell command history file. If not set,",
                "+# defaults to 10000 entries.",
                "+#",
                "+# karaf.shell.history.file.maxSize = 10000",
                "+",
                " #",
                "@@ -147,2 +153,2 @@ karaf.secured.services = (&(osgi.command.scope=*)(osgi.command.function=*))",
                " # the karaf.lock.slave.block property (false by default):",
                "-# karaf.lock.slave.block=true",
                "\\ No newline at end of file",
                "+# karaf.lock.slave.block=true",
                "diff --git a/assemblies/features/static/src/main/resources/resources/etc/system.properties b/assemblies/features/static/src/main/resources/resources/etc/system.properties",
                "index a696c0fbf2..9ac615526f 100644",
                "--- a/assemblies/features/static/src/main/resources/resources/etc/system.properties",
                "+++ b/assemblies/features/static/src/main/resources/resources/etc/system.properties",
                "@@ -62,2 +62,8 @@ karaf.shell.init.script = shell.init.script,scripts/*.script",
                "+#",
                "+# Sets the maximum size of the local shell command history file. If not set,",
                "+# defaults to 10000 entries.",
                "+#",
                "+# karaf.shell.history.file.maxSize = 10000",
                "+",
                " #",
                "diff --git a/shell/core/src/main/java/org/apache/karaf/shell/impl/console/ConsoleSessionImpl.java b/shell/core/src/main/java/org/apache/karaf/shell/impl/console/ConsoleSessionImpl.java",
                "index d4fd7ba2bc..e641f8f700 100644",
                "--- a/shell/core/src/main/java/org/apache/karaf/shell/impl/console/ConsoleSessionImpl.java",
                "+++ b/shell/core/src/main/java/org/apache/karaf/shell/impl/console/ConsoleSessionImpl.java",
                "@@ -88,2 +88,3 @@ public class ConsoleSessionImpl implements Session {",
                "     public static final String SHELL_HISTORY_MAXSIZE = \"karaf.shell.history.maxSize\";",
                "+    public static final String SHELL_HISTORY_FILE_MAXSIZE = \"karaf.shell.history.file.maxSize\";",
                "     public static final String PROMPT = \"PROMPT\";",
                "@@ -188,2 +189,6 @@ public class ConsoleSessionImpl implements Session {",
                "         }",
                "+        String maxFileSizeStr = System.getProperty(SHELL_HISTORY_FILE_MAXSIZE);",
                "+        if (maxFileSizeStr != null) {",
                "+            reader.setVariable(LineReader.HISTORY_FILE_SIZE, Integer.parseInt(maxFileSizeStr));",
                "+        }",
                "         history = new HistoryWrapper(reader.getHistory());"
            ],
            "changed_files": [
                "assemblies/features/base/src/main/resources/resources/etc/system.properties",
                "assemblies/features/static/src/main/resources/resources/etc/system.properties",
                "shell/core/src/main/java/org/apache/karaf/shell/impl/console/ConsoleSessionImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5456": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: file",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: console, system",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5456",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "435982bfcd648523b9705c966335d31e9fafc7e9",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1507806390,
            "hunks": 5,
            "message": "[KARAF-5420] Bad console behavior when dealing with the input stream for piped commands",
            "diff": [
                "diff --git a/shell/commands/pom.xml b/shell/commands/pom.xml",
                "index 590fcabbc1..a491760a35 100644",
                "--- a/shell/commands/pom.xml",
                "+++ b/shell/commands/pom.xml",
                "@@ -44,2 +44,6 @@",
                "         </dependency>",
                "+        <dependency>",
                "+            <groupId>org.apache.felix</groupId>",
                "+            <artifactId>org.apache.felix.gogo.runtime</artifactId>",
                "+        </dependency>",
                "         <dependency>",
                "diff --git a/shell/commands/src/main/java/org/apache/karaf/shell/commands/impl/ExecuteAction.java b/shell/commands/src/main/java/org/apache/karaf/shell/commands/impl/ExecuteAction.java",
                "index 1c7ed6acc6..f059e7ad4f 100644",
                "--- a/shell/commands/src/main/java/org/apache/karaf/shell/commands/impl/ExecuteAction.java",
                "+++ b/shell/commands/src/main/java/org/apache/karaf/shell/commands/impl/ExecuteAction.java",
                "@@ -50,5 +50,8 @@ public class ExecuteAction implements Action {",
                "-        PumpStreamHandler handler = new PumpStreamHandler(System.in, System.out, System.err, \"Command\" + args.toString());",
                "+        org.apache.felix.service.command.Process cp = org.apache.felix.service.command.Process.Utils.current();",
                "-        log.debug(\"Executing: {}\", builder.command());",
                "+        String cmd = String.join(\" \", args);",
                "+        PumpStreamHandler handler = new PumpStreamHandler(cp.in(), cp.out(), cp.err(), \"Command '\" + cmd + \"'\");",
                "+",
                "+        log.debug(\"Executing: {}\", cmd);",
                "         Process p = builder.start();",
                "diff --git a/util/src/main/java/org/apache/karaf/util/process/PumpStreamHandler.java b/util/src/main/java/org/apache/karaf/util/process/PumpStreamHandler.java",
                "index 6e2eeb2642..0d3c83d817 100644",
                "--- a/util/src/main/java/org/apache/karaf/util/process/PumpStreamHandler.java",
                "+++ b/util/src/main/java/org/apache/karaf/util/process/PumpStreamHandler.java",
                "@@ -268,3 +268,3 @@ public class PumpStreamHandler {",
                "         StreamPumper pumper = new StreamPumper(in, out, closeWhenExhausted);",
                "-        pumper.setNonBlocking(true);",
                "+//        pumper.setNonBlocking(true);",
                "         pumper.setAutoflush(true);",
                "diff --git a/util/src/main/java/org/apache/karaf/util/process/StreamPumper.java b/util/src/main/java/org/apache/karaf/util/process/StreamPumper.java",
                "index 9068fba2b7..45ece7b18d 100644",
                "--- a/util/src/main/java/org/apache/karaf/util/process/StreamPumper.java",
                "+++ b/util/src/main/java/org/apache/karaf/util/process/StreamPumper.java",
                "@@ -116,3 +116,3 @@ public class StreamPumper implements Runnable {",
                "-        int length;",
                "+        int length = 0;",
                "         try {",
                "@@ -145,3 +145,3 @@ public class StreamPumper implements Runnable {",
                "                 synchronized (this) {",
                "-                    finish = this.finish;",
                "+                    finish = this.finish || length < 0;",
                "                 }"
            ],
            "changed_files": [
                "shell/commands/pom.xml",
                "shell/commands/src/main/java/org/apache/karaf/shell/commands/impl/ExecuteAction.java",
                "util/src/main/java/org/apache/karaf/util/process/PumpStreamHandler.java",
                "util/src/main/java/org/apache/karaf/util/process/StreamPumper.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5420": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: console",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: process",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5420",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "180942b503dfaa0ea2818e3cce0046082de19a70",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1508490781,
            "hunks": 11,
            "message": "[KARAF-5437] Use named thread pools to help identifying threads",
            "diff": [
                "diff --git a/features/core/src/main/java/org/apache/karaf/features/internal/osgi/Activator.java b/features/core/src/main/java/org/apache/karaf/features/internal/osgi/Activator.java",
                "index 044ab684d6..1ac72b634f 100644",
                "--- a/features/core/src/main/java/org/apache/karaf/features/internal/osgi/Activator.java",
                "+++ b/features/core/src/main/java/org/apache/karaf/features/internal/osgi/Activator.java",
                "@@ -30,2 +30,8 @@ import java.util.List;",
                " import java.util.Map;",
                "+import java.util.concurrent.Executor;",
                "+import java.util.concurrent.ExecutorService;",
                "+import java.util.concurrent.Executors;",
                "+import java.util.concurrent.LinkedBlockingQueue;",
                "+import java.util.concurrent.ThreadPoolExecutor;",
                "+import java.util.concurrent.TimeUnit;",
                "@@ -51,2 +57,3 @@ import org.apache.karaf.features.internal.service.BundleInstallSupportImpl;",
                " import org.apache.karaf.features.internal.service.StateStorage;",
                "+import org.apache.karaf.util.ThreadUtils;",
                " import org.apache.karaf.util.tracker.BaseActivator;",
                "@@ -95,2 +102,3 @@ public class Activator extends BaseActivator {",
                "     private BundleInstallSupport installSupport;",
                "+    private ExecutorService executorService;",
                "@@ -126,3 +134,7 @@ public class Activator extends BaseActivator {",
                "         int resolverThreads = getInt(\"resolverThreads\", Runtime.getRuntime().availableProcessors());",
                "-        Resolver resolver = new ResolverImpl(new Slf4jResolverLog(LoggerFactory.getLogger(ResolverImpl.class)), resolverThreads);",
                "+        executorService = new ThreadPoolExecutor(0, resolverThreads,",
                "+                1L, TimeUnit.SECONDS,",
                "+                new LinkedBlockingQueue<>(),",
                "+                ThreadUtils.namedThreadFactory(\"resolver\"));",
                "+        Resolver resolver = new ResolverImpl(new Slf4jResolverLog(LoggerFactory.getLogger(ResolverImpl.class)), executorService);",
                "         URLStreamHandlerService mvnUrlHandler = getTrackedService(URLStreamHandlerService.class);",
                "diff --git a/features/core/src/main/java/org/apache/karaf/features/internal/service/FeaturesServiceImpl.java b/features/core/src/main/java/org/apache/karaf/features/internal/service/FeaturesServiceImpl.java",
                "index 3e38a6d5a1..cf01a8f191 100644",
                "--- a/features/core/src/main/java/org/apache/karaf/features/internal/service/FeaturesServiceImpl.java",
                "+++ b/features/core/src/main/java/org/apache/karaf/features/internal/service/FeaturesServiceImpl.java",
                "@@ -1005,3 +1005,3 @@ public class FeaturesServiceImpl implements FeaturesService, Deployer.DeployCall",
                "         MavenResolver resolver = MavenResolvers.createMavenResolver(props, \"org.ops4j.pax.url.mvn\");",
                "-        ScheduledThreadPoolExecutor executor = new ScheduledThreadPoolExecutor(cfg.downloadThreads);",
                "+        ScheduledThreadPoolExecutor executor = new ScheduledThreadPoolExecutor(cfg.downloadThreads, ThreadUtils.namedThreadFactory(\"downloader\"));",
                "         executor.setMaximumPoolSize(cfg.downloadThreads);",
                "diff --git a/util/src/main/java/org/apache/karaf/util/tracker/BaseActivator.java b/util/src/main/java/org/apache/karaf/util/tracker/BaseActivator.java",
                "index a314abafd3..63b2622b41 100644",
                "--- a/util/src/main/java/org/apache/karaf/util/tracker/BaseActivator.java",
                "+++ b/util/src/main/java/org/apache/karaf/util/tracker/BaseActivator.java",
                "@@ -31,2 +31,3 @@ import java.util.concurrent.ExecutorService;",
                " import java.util.concurrent.LinkedBlockingQueue;",
                "+import java.util.concurrent.ThreadFactory;",
                " import java.util.concurrent.ThreadPoolExecutor;",
                "@@ -34,2 +35,3 @@ import java.util.concurrent.TimeUnit;",
                " import java.util.concurrent.atomic.AtomicBoolean;",
                "+import java.util.concurrent.atomic.AtomicInteger;",
                " import java.util.stream.Stream;",
                "@@ -45,3 +47,3 @@ import org.slf4j.LoggerFactory;",
                "-public class BaseActivator implements BundleActivator, Runnable {",
                "+public class BaseActivator implements BundleActivator, Runnable, ThreadFactory {",
                "@@ -51,3 +53,3 @@ public class BaseActivator implements BundleActivator, Runnable {",
                "     protected ExecutorService executor = new ThreadPoolExecutor(0, 1, 0L, TimeUnit.MILLISECONDS,",
                "-            new LinkedBlockingQueue<>());",
                "+            new LinkedBlockingQueue<>(), this);",
                "     private AtomicBoolean scheduled = new AtomicBoolean();",
                "@@ -61,2 +63,13 @@ public class BaseActivator implements BundleActivator, Runnable {",
                "+    private static final AtomicInteger poolNumber = new AtomicInteger(1);",
                "+    private final ThreadGroup group;",
                "+    private final AtomicInteger threadNumber = new AtomicInteger(1);",
                "+    private final String namePrefix;",
                "+",
                "+    public BaseActivator() {",
                "+        SecurityManager s = System.getSecurityManager();",
                "+        group = (s != null) ? s.getThreadGroup() : Thread.currentThread().getThreadGroup();",
                "+        namePrefix = \"activator-\" + poolNumber.getAndIncrement() + \"-thread-\";",
                "+    }",
                "+",
                "     public long getSchedulerStopTimeout() {",
                "@@ -417,2 +430,12 @@ public class BaseActivator implements BundleActivator, Runnable {",
                "+    @Override",
                "+    public Thread newThread(Runnable r) {",
                "+        Thread t = new Thread(group, r, namePrefix + threadNumber.getAndIncrement(), 0);",
                "+        if (t.isDaemon())",
                "+            t.setDaemon(false);",
                "+        if (t.getPriority() != Thread.NORM_PRIORITY)",
                "+            t.setPriority(Thread.NORM_PRIORITY);",
                "+        return t;",
                "+    }",
                "+",
                " }"
            ],
            "changed_files": [
                "features/core/src/main/java/org/apache/karaf/features/internal/osgi/Activator.java",
                "features/core/src/main/java/org/apache/karaf/features/internal/service/FeaturesServiceImpl.java",
                "util/src/main/java/org/apache/karaf/util/tracker/BaseActivator.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5437": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: read",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: service",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5437",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6ff0873b2129eb2db09bf53875dc64fb3d26de85",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1510247540,
            "hunks": 32,
            "message": "[KARAF-5475] Create an audit bundle that logs to file / tcp / udp / jul",
            "diff": [
                "diff --git a/assemblies/features/base/src/main/resources/resources/etc/org.ops4j.pax.logging.cfg b/assemblies/features/base/src/main/resources/resources/etc/org.ops4j.pax.logging.cfg",
                "index 42d6c805a5..6cd8240fa6 100644",
                "--- a/assemblies/features/base/src/main/resources/resources/etc/org.ops4j.pax.logging.cfg",
                "+++ b/assemblies/features/base/src/main/resources/resources/etc/org.ops4j.pax.logging.cfg",
                "@@ -50,4 +50,4 @@ log4j2.logger.spifly.level = WARN",
                " # Security audit logger",
                "-log4j2.logger.audit.name = org.apache.karaf.jaas.modules.audit",
                "-log4j2.logger.audit.level = INFO",
                "+log4j2.logger.audit.name = audit",
                "+log4j2.logger.audit.level = TRACE",
                " log4j2.logger.audit.additivity = false",
                "@@ -80,7 +80,7 @@ log4j2.appender.audit.type = RollingRandomAccessFile",
                " log4j2.appender.audit.name = AuditRollingFile",
                "-log4j2.appender.audit.fileName = ${karaf.data}/security/audit.log",
                "-log4j2.appender.audit.filePattern = ${karaf.data}/security/audit.log.%i",
                "+log4j2.appender.audit.fileName = ${karaf.data}/log/security.log",
                "+log4j2.appender.audit.filePattern = ${karaf.data}/log/security-%i.log",
                " log4j2.appender.audit.append = true",
                " log4j2.appender.audit.layout.type = PatternLayout",
                "-log4j2.appender.audit.layout.pattern = ${log4j2.pattern}",
                "+log4j2.appender.audit.layout.pattern = %m%n",
                " log4j2.appender.audit.policies.type = Policies",
                "diff --git a/assemblies/features/standard/src/main/feature/feature.xml b/assemblies/features/standard/src/main/feature/feature.xml",
                "index c6b770a846..d18fc56f48 100644",
                "--- a/assemblies/features/standard/src/main/feature/feature.xml",
                "+++ b/assemblies/features/standard/src/main/feature/feature.xml",
                "@@ -1020,2 +1020,53 @@",
                "+    <feature name=\"audit-log\" description=\"Security audit logging\" version=\"${project.version}\">",
                "+        <feature>eventadmin</feature>",
                "+        <bundle start-level=\"20\">mvn:org.apache.karaf.audit/org.apache.karaf.audit.core/${project.version}</bundle>",
                "+        <config name=\"org.apache.karaf.audit\">",
                "+            # Security audit configuration",
                "+            # Only the above 4 loggers are supported",
                "+            # Supported layouts include: simple, gelf, rfc3164, rfc5424",
                "+",
                "+            # Queue type",
                "+            queue.class = java.util.concurrent.ArrayBlockingQueue",
                "+            # Queue size",
                "+            queue.size = 256",
                "+            # Idle timeout",
                "+            runner.idle-timeout = 60000",
                "+            # Flush timeout",
                "+            runner.flush-timeout = 100",
                "+            # Event filter",
                "+            # filter = (!(type=log))",
                "+",
                "+            # File logger",
                "+            file.enabled = true",
                "+            file.target = ${karaf.data}/log/audit.txt",
                "+            file.encoding = UTF-8",
                "+            file.layout.type = simple",
                "+            # rotating policy: can be 'daily', 'size([0-9]+(kb|mb|gb)?\\)'",
                "+            file.policy = daily",
                "+            file.files = 32",
                "+            file.compress = false",
                "+",
                "+            # Tcp logger",
                "+            # tcp.enabled = true",
                "+            # tcp.host = localhost",
                "+            # tcp.port = 8125",
                "+            # tcp.encoding = UTF-8",
                "+            # tcp.layout.type = gelf",
                "+",
                "+            # Udp logger",
                "+            # udp.enabled = true",
                "+            # udp.host = localhost",
                "+            # udp.port = 514",
                "+            # udp.encoding = UTF-8",
                "+            # udp.layout.type = rfc3164",
                "+",
                "+            # JUL logger",
                "+            jul.enabled = false",
                "+            jul.logger = audit",
                "+            jul.level = info",
                "+            jul.layout.type = simple",
                "+        </config>",
                "+    </feature>",
                "+",
                "     <feature name=\"standard\" description=\"Wrap feature describing all features part of a standard distribution\" version=\"${project.version}\">",
                "diff --git a/audit/pom.xml b/audit/pom.xml",
                "new file mode 100644",
                "index 0000000000..5581e0635b",
                "--- /dev/null",
                "+++ b/audit/pom.xml",
                "@@ -0,0 +1,118 @@",
                "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">",
                "+",
                "+    <!--",
                "+",
                "+        Licensed to the Apache Software Foundation (ASF) under one or more",
                "+        contributor license agreements.  See the NOTICE file distributed with",
                "+        this work for additional information regarding copyright ownership.",
                "+        The ASF licenses this file to You under the Apache License, Version 2.0",
                "+        (the \"License\"); you may not use this file except in compliance with",
                "+        the License.  You may obtain a copy of the License at",
                "+",
                "+           http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+        Unless required by applicable law or agreed to in writing, software",
                "+        distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+        See the License for the specific language governing permissions and",
                "+        limitations under the License.",
                "+    -->",
                "+",
                "+    <modelVersion>4.0.0</modelVersion>",
                "+",
                "+    <parent>",
                "+        <groupId>org.apache.karaf</groupId>",
                "+        <artifactId>karaf</artifactId>",
                "+        <version>4.2.0-SNAPSHOT</version>",
                "+        <relativePath>../pom.xml</relativePath>",
                "+    </parent>",
                "+",
                "+    <groupId>org.apache.karaf.audit</groupId>",
                "+    <artifactId>org.apache.karaf.audit.core</artifactId>",
                "+    <packaging>bundle</packaging>",
                "+    <name>Apache Karaf :: Audit :: Core</name>",
                "+    <description>This bundle provides Audit support for Karaf</description>",
                "+",
                "+    <properties>",
                "+        <appendedResourcesDirectory>${basedir}/../etc/appended-resources</appendedResourcesDirectory>",
                "+    </properties>",
                "+",
                "+    <dependencies>",
                "+        <dependency>",
                "+            <groupId>org.osgi</groupId>",
                "+            <artifactId>org.osgi.core</artifactId>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.osgi</groupId>",
                "+            <artifactId>org.osgi.compendium</artifactId>",
                "+            <scope>provided</scope>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.karaf.services</groupId>",
                "+            <artifactId>org.apache.karaf.services.eventadmin</artifactId>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.karaf</groupId>",
                "+            <artifactId>org.apache.karaf.util</artifactId>",
                "+            <scope>provided</scope>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>com.conversantmedia</groupId>",
                "+            <artifactId>disruptor</artifactId>",
                "+            <version>1.2.11</version>",
                "+            <optional>true</optional>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.slf4j</groupId>",
                "+            <artifactId>slf4j-jdk14</artifactId>",
                "+            <scope>test</scope>",
                "+        </dependency>",
                "+    </dependencies>",
                "+",
                "+    <build>",
                "+        <resources>",
                "+            <resource>",
                "+                <directory>${project.basedir}/src/main/resources</directory>",
                "+                <includes>",
                "+                    <include>**/*</include>",
                "+                </includes>",
                "+            </resource>",
                "+            <resource>",
                "+                <directory>${project.basedir}/src/main/resources</directory>",
                "+                <filtering>true</filtering>",
                "+                <includes>",
                "+                    <include>**/*.info</include>",
                "+                </includes>",
                "+            </resource>",
                "+        </resources>",
                "+        <plugins>",
                "+            <plugin>",
                "+                <groupId>org.apache.karaf.tooling</groupId>",
                "+                <artifactId>karaf-services-maven-plugin</artifactId>",
                "+            </plugin>",
                "+            <plugin>",
                "+                <groupId>org.apache.felix</groupId>",
                "+                <artifactId>maven-bundle-plugin</artifactId>",
                "+                <configuration>",
                "+                    <instructions>",
                "+                        <Export-Package>",
                "+                        </Export-Package>",
                "+                        <Import-Package>",
                "+                            *",
                "+                        </Import-Package>",
                "+                        <Private-Package>",
                "+                            org.apache.karaf.audit*",
                "+                        </Private-Package>",
                "+                    </instructions>",
                "+                </configuration>",
                "+            </plugin>",
                "+        </plugins>",
                "+    </build>",
                "+",
                "+</project>",
                "diff --git a/audit/src/main/java/org/apache/karaf/audit/Activator.java b/audit/src/main/java/org/apache/karaf/audit/Activator.java",
                "new file mode 100644",
                "index 0000000000..1066aed3a1",
                "--- /dev/null",
                "+++ b/audit/src/main/java/org/apache/karaf/audit/Activator.java",
                "@@ -0,0 +1,489 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.karaf.audit;",
                "+",
                "+import com.conversantmedia.util.concurrent.DisruptorBlockingQueue;",
                "+import org.apache.karaf.audit.layout.GelfLayout;",
                "+import org.apache.karaf.audit.layout.Rfc3164Layout;",
                "+import org.apache.karaf.audit.layout.Rfc5424Layout;",
                "+import org.apache.karaf.audit.layout.SimpleLayout;",
                "+import org.apache.karaf.audit.logger.FileEventLogger;",
                "+import org.apache.karaf.audit.logger.JulEventLogger;",
                "+import org.apache.karaf.audit.logger.UdpEventLogger;",
                "+import org.apache.karaf.util.tracker.BaseActivator;",
                "+import org.apache.karaf.util.tracker.annotation.Managed;",
                "+import org.apache.karaf.util.tracker.annotation.RequireService;",
                "+import org.apache.karaf.util.tracker.annotation.Services;",
                "+import org.osgi.framework.Filter;",
                "+import org.osgi.framework.FrameworkUtil;",
                "+import org.osgi.framework.InvalidSyntaxException;",
                "+import org.osgi.service.cm.ManagedService;",
                "+import org.osgi.service.event.Event;",
                "+import org.osgi.service.event.EventAdmin;",
                "+import org.osgi.service.event.EventConstants;",
                "+import org.osgi.service.event.EventHandler;",
                "+",
                "+import javax.security.auth.Subject;",
                "+import java.io.IOException;",
                "+import java.util.AbstractMap;",
                "+import java.util.ArrayList;",
                "+import java.util.Arrays;",
                "+import java.util.Collections;",
                "+import java.util.Dictionary;",
                "+import java.util.Hashtable;",
                "+import java.util.Iterator;",
                "+import java.util.List;",
                "+import java.util.Locale;",
                "+import java.util.Map;",
                "+import java.util.NoSuchElementException;",
                "+import java.util.Set;",
                "+import java.util.concurrent.ArrayBlockingQueue;",
                "+import java.util.concurrent.BlockingQueue;",
                "+import java.util.concurrent.TimeUnit;",
                "+",
                "+@Services(requires = @RequireService(EventAdmin.class))",
                "+@Managed(\"org.apache.karaf.audit\")",
                "+public class Activator extends BaseActivator implements ManagedService {",
                "+",
                "+    public static final String FILTER = \"filter\";",
                "+    public static final String QUEUE_TYPE = \"queue.type\";",
                "+    public static final String QUEUE_SIZE = \"queue.size\";",
                "+    public static final String RUNNER_IDLE_TIMEOUT = \"runner.idle-timeout\";",
                "+    public static final String RUNNER_FLUSH_TIMEOUT = \"runner.flush-timeout\";",
                "+    public static final String FILE_PREFIX = \"file.\";",
                "+    public static final String FILE_LAYOUT = FILE_PREFIX + \"layout\";",
                "+    public static final String FILE_ENABLED = FILE_PREFIX + \"enabled\";",
                "+    public static final String FILE_TARGET = FILE_PREFIX + \"target\";",
                "+    public static final String FILE_ENCODING = FILE_PREFIX + \"encoding\";",
                "+    public static final String FILE_POLICY = FILE_PREFIX + \"policy\";",
                "+    public static final String FILE_FILES = FILE_PREFIX + \"files\";",
                "+    public static final String FILE_COMPRESS = FILE_PREFIX + \"compress\";",
                "+    public static final String UDP_PREFIX = \"udp.\";",
                "+    public static final String UDP_LAYOUT = UDP_PREFIX + \"layout\";",
                "+    public static final String UDP_ENABLED = UDP_PREFIX + \"enabled\";",
                "+    public static final String UDP_HOST = UDP_PREFIX + \"host\";",
                "+    public static final String UDP_PORT = UDP_PREFIX + \"port\";",
                "+    public static final String UDP_ENCODING = UDP_PREFIX + \"encoding\";",
                "+    public static final String TCP_PREFIX = \"tcp.\";",
                "+    public static final String TCP_LAYOUT = TCP_PREFIX + \"layout\";",
                "+    public static final String TCP_ENABLED = TCP_PREFIX + \"enabled\";",
                "+    public static final String TCP_HOST = TCP_PREFIX + \"host\";",
                "+    public static final String TCP_PORT = TCP_PREFIX + \"port\";",
                "+    public static final String TCP_ENCODING = TCP_PREFIX + \"encoding\";",
                "+    public static final String JUL_PREFIX = \"jul.\";",
                "+    public static final String JUL_LAYOUT = JUL_PREFIX + \"layout\";",
                "+    public static final String JUL_ENABLED = JUL_PREFIX + \"enabled\";",
                "+    public static final String JUL_LOGGER = JUL_PREFIX + \"logger\";",
                "+    public static final String JUL_LEVEL = JUL_PREFIX + \"level\";",
                "+    public static final String TOPICS = \"topics\";",
                "+",
                "+    private static final EventImpl STOP_EVENT = new EventImpl(new Event(\"stop\", Collections.emptyMap()));",
                "+",
                "+",
                "+    private BlockingQueue<EventImpl> queue;",
                "+    private volatile Thread runner;",
                "+    private List<EventLogger> eventLoggers;",
                "+    private Filter filter;",
                "+",
                "+    @Override",
                "+    protected void doStart() throws Exception {",
                "+        super.doStart();",
                "+        queue = createQueue();",
                "+        eventLoggers = createLoggers();",
                "+        filter = createFilter();",
                "+        final Dictionary<String, Object> props = new Hashtable<>();",
                "+        props.put(EventConstants.EVENT_TOPIC, getTopics());",
                "+        register(EventHandler.class, this::handleEvent, props);",
                "+        if (!queue.isEmpty()) {",
                "+            startRunner();",
                "+        }",
                "+    }",
                "+",
                "+    private String[] getTopics() {",
                "+        return getString(TOPICS, \"*\").split(\"\\\\s*,\\\\s*\");",
                "+    }",
                "+",
                "+    private Filter createFilter() throws InvalidSyntaxException {",
                "+        String str = getString(FILTER, null);",
                "+        return str != null ? FrameworkUtil.createFilter(str) : null;",
                "+    }",
                "+",
                "+    @SuppressWarnings(\"unchecked\")",
                "+    private BlockingQueue<EventImpl> createQueue() throws Exception {",
                "+        String type = getString(QUEUE_TYPE, null);",
                "+        int size = getInt(QUEUE_SIZE, 1024);",
                "+        if (\"ArrayBlockingQueue\".equals(type)) {",
                "+            return new ArrayBlockingQueue<>(size);",
                "+        } else if (\"DisruptorBlockingQueue\".equals(type)) {",
                "+            return new DisruptorBlockingQueue(size);",
                "+        } else if (type != null) {",
                "+            logger.warn(\"Unknown queue type: \" + type + \"\");",
                "+        }",
                "+        try {",
                "+            return new DisruptorBlockingQueue(size);",
                "+        } catch (NoClassDefFoundError t) {",
                "+            return new ArrayBlockingQueue<>(size);",
                "+        }",
                "+    }",
                "+",
                "+    private List<EventLogger> createLoggers() throws Exception {",
                "+        try {",
                "+            List<EventLogger> loggers = new ArrayList<>();",
                "+            if (getBoolean(FILE_ENABLED, true)) {",
                "+                String path = getString(FILE_TARGET, System.getProperty(\"karaf.data\") + \"/log/audit.txt\");",
                "+                String encoding = getString(FILE_ENCODING, \"UTF-8\");",
                "+                String policy = getString(FILE_POLICY, \"size(8mb)\");",
                "+                int files = getInt(FILE_FILES, 32);",
                "+                boolean compress = getBoolean(FILE_COMPRESS, true);",
                "+                EventLayout layout = createLayout(getString(FILE_LAYOUT, FILE_LAYOUT));",
                "+                loggers.add(new FileEventLogger(path, encoding, policy, files, compress, this, layout));",
                "+            }",
                "+            if (getBoolean(UDP_ENABLED, false)) {",
                "+                String host = getString(UDP_HOST, \"localhost\");",
                "+                int port = getInt(UDP_PORT, 514);",
                "+                String encoding = getString(UDP_ENCODING, \"UTF-8\");",
                "+                EventLayout layout = createLayout(getString(UDP_LAYOUT, UDP_LAYOUT));",
                "+                loggers.add(new UdpEventLogger(host, port, encoding, layout));",
                "+            }",
                "+            if (getBoolean(TCP_ENABLED, false)) {",
                "+                String host = getString(TCP_HOST, \"localhost\");",
                "+                int port = getInt(TCP_PORT, 0);",
                "+                String encoding = getString(TCP_ENCODING, \"UTF-8\");",
                "+                EventLayout layout = createLayout(getString(TCP_LAYOUT, TCP_LAYOUT));",
                "+                loggers.add(new UdpEventLogger(host, port, encoding, layout));",
                "+            }",
                "+            if (getBoolean(JUL_ENABLED, false)) {",
                "+                String logger = getString(Activator.JUL_LOGGER, \"audit\");",
                "+                String level = getString(Activator.JUL_LEVEL, \"info\");",
                "+                EventLayout layout = createLayout(getString(JUL_LAYOUT, JUL_LAYOUT));",
                "+                loggers.add(new JulEventLogger(logger, level, layout));",
                "+            }",
                "+            return loggers;",
                "+        } catch (IOException e) {",
                "+            throw new Exception(\"Error creating audit logger\", e);",
                "+        }",
                "+    }",
                "+",
                "+    private EventLayout createLayout(String prefix) {",
                "+        String type = getString(prefix + \".type\", \"simple\");",
                "+        switch (type) {",
                "+            case \"simple\":",
                "+                return new SimpleLayout();",
                "+            case \"rfc3164\":",
                "+                return new Rfc3164Layout(getInt(prefix + \".facility\", 16),",
                "+                        getInt(prefix + \".priority\", 5),",
                "+                        getInt(prefix + \".enterprise\", Rfc5424Layout.DEFAULT_ENTERPRISE_NUMBER));",
                "+            case \"rfc5424\":",
                "+                return new Rfc5424Layout(getInt(prefix + \".facility\", 16),",
                "+                                         getInt(prefix + \".priority\", 5),",
                "+                                         getInt(prefix + \".enterprise\", Rfc5424Layout.DEFAULT_ENTERPRISE_NUMBER));",
                "+            case \"gelf\":",
                "+                return new GelfLayout();",
                "+            default:",
                "+                logger.warn(\"Unknown layout: \" + type + \". Using a simple layout.\");",
                "+                return new SimpleLayout();",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    protected void doStop() {",
                "+        Thread runner = this.runner;",
                "+        if (runner != null && runner.isAlive()) {",
                "+            try {",
                "+                queue.add(STOP_EVENT);",
                "+                runner.join(5000);",
                "+                if (runner.isAlive()) {",
                "+                    runner.interrupt();",
                "+                }",
                "+            } catch (InterruptedException e) {",
                "+                logger.debug(\"Error waiting for audit runner buffer stop\");",
                "+            }",
                "+        }",
                "+        List<EventLogger> eventLoggers = this.eventLoggers;",
                "+        if (eventLoggers != null) {",
                "+            for (EventLogger eventLogger : eventLoggers) {",
                "+                try {",
                "+                    eventLogger.close();",
                "+                } catch (IOException e) {",
                "+                    logger.debug(\"Error closing audit logger\", e);",
                "+                }",
                "+            }",
                "+            this.eventLoggers = null;",
                "+        }",
                "+        super.doStop();",
                "+    }",
                "+",
                "+    private void handleEvent(Event event) {",
                "+        try {",
                "+            EventImpl ev = new EventImpl(event);",
                "+            if (filter == null || filter.matches(ev.getFilterMap())) {",
                "+                queue.put(new EventImpl(event));",
                "+                startRunner();",
                "+            }",
                "+        } catch (InterruptedException e) {",
                "+            logger.debug(\"Interrupted while putting event in queue\", e);",
                "+        }",
                "+    }",
                "+",
                "+    private void startRunner() {",
                "+        if (eventLoggers != null && !eventLoggers.isEmpty() && runner == null) {",
                "+            synchronized (this) {",
                "+                if (runner == null) {",
                "+                    runner = new Thread(this::consume, \"audit-logger\");",
                "+                    runner.start();",
                "+                }",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+    private void consume() {",
                "+        long maxIdle = getLong(RUNNER_IDLE_TIMEOUT, TimeUnit.MINUTES.toMillis(1));",
                "+        long flushDelay = getLong(RUNNER_FLUSH_TIMEOUT, TimeUnit.MILLISECONDS.toMillis(100));",
                "+        try {",
                "+            List<EventLogger> eventLoggers = this.eventLoggers;",
                "+            BlockingQueue<EventImpl> queue = this.queue;",
                "+            EventImpl event;",
                "+            while ((event = queue.poll(maxIdle, TimeUnit.MILLISECONDS)) != null) {",
                "+                if (event == STOP_EVENT) {",
                "+                    return;",
                "+                }",
                "+                for (EventLogger eventLogger : eventLoggers) {",
                "+                    eventLogger.write(event);",
                "+                }",
                "+                if (flushDelay > 0) {",
                "+                    while ((event = queue.poll(flushDelay, TimeUnit.MILLISECONDS)) != null) {",
                "+                        if (event == STOP_EVENT) {",
                "+                            return;",
                "+                        }",
                "+                        for (EventLogger eventLogger : eventLoggers) {",
                "+                            eventLogger.write(event);",
                "+                        }",
                "+                    }",
                "+                }",
                "+                for (EventLogger eventLogger : eventLoggers) {",
                "+                    eventLogger.flush();",
                "+                }",
                "+            }",
                "+        } catch (Throwable e) {",
                "+            logger.warn(\"Error writing audit log\", e);",
                "+        } finally {",
                "+            runner = null;",
                "+        }",
                "+    }",
                "+",
                "+    static class EventImpl implements org.apache.karaf.audit.Event {",
                "+        private final Event event;",
                "+        private final long timestamp;",
                "+        private final String type;",
                "+        private final String subtype;",
                "+",
                "+        EventImpl(Event event) {",
                "+            this.event = event;",
                "+            this.timestamp = _timestamp();",
                "+            this.type = _type();",
                "+            this.subtype = _subtype();",
                "+        }",
                "+",
                "+        @Override",
                "+        public long timestamp() {",
                "+            return timestamp;",
                "+        }",
                "+",
                "+        private long _timestamp() {",
                "+            Long l = (Long) event.getProperty(\"timestamp\");",
                "+            return l != null ? l : System.currentTimeMillis();",
                "+        }",
                "+",
                "+        @Override",
                "+        public Subject subject() {",
                "+            return (Subject) event.getProperty(\"subject\");",
                "+        }",
                "+",
                "+        @Override",
                "+        public String type() {",
                "+            return type;",
                "+        }",
                "+",
                "+        private String _type() {",
                "+            switch (event.getTopic()) {",
                "+                case \"org/apache/karaf/shell/console/EXECUTED\":",
                "+                    return TYPE_SHELL;",
                "+                case \"org/osgi/service/log/LogEntry/LOG_ERROR\":",
                "+                case \"org/osgi/service/log/LogEntry/LOG_WARNING\":",
                "+                case \"org/osgi/service/log/LogEntry/LOG_INFO\":",
                "+                case \"org/osgi/service/log/LogEntry/LOG_DEBUG\":",
                "+                case \"org/osgi/service/log/LogEntry/LOG_OTHER\":",
                "+                    return TYPE_LOG;",
                "+                case \"org/osgi/framework/ServiceEvent/REGISTERED\":",
                "+                case \"org/osgi/framework/ServiceEvent/MODIFIED\":",
                "+                case \"org/osgi/framework/ServiceEvent/UNREGISTERING\":",
                "+                    return TYPE_SERVICE;",
                "+                case \"org/osgi/framework/BundleEvent/INSTALLED\":",
                "+                case \"org/osgi/framework/BundleEvent/STARTED\":",
                "+                case \"org/osgi/framework/BundleEvent/STOPPED\":",
                "+                case \"org/osgi/framework/BundleEvent/UPDATED\":",
                "+                case \"org/osgi/framework/BundleEvent/UNINSTALLED\":",
                "+                case \"org/osgi/framework/BundleEvent/RESOLVED\":",
                "+                case \"org/osgi/framework/BundleEvent/UNRESOLVED\":",
                "+                case \"org/osgi/framework/BundleEvent/STARTING\":",
                "+                case \"org/osgi/framework/BundleEvent/STOPPING\":",
                "+                    return TYPE_BUNDLE;",
                "+                case \"org/apache/karaf/login/ATTEMPT\":",
                "+                case \"org/apache/karaf/login/SUCCESS\":",
                "+                case \"org/apache/karaf/login/FAILURE\":",
                "+                case \"org/apache/karaf/login/LOGOUT\":",
                "+                    return TYPE_LOGIN;",
                "+                case \"javax/management/MBeanServer/CREATEMBEAN\":",
                "+                case \"javax/management/MBeanServer/REGISTERMBEAN\":",
                "+                case \"javax/management/MBeanServer/UNREGISTERMBEAN\":",
                "+                case \"javax/management/MBeanServer/GETOBJECTINSTANCE\":",
                "+                case \"javax/management/MBeanServer/QUERYMBEANS\":",
                "+                case \"javax/management/MBeanServer/ISREGISTERED\":",
                "+                case \"javax/management/MBeanServer/GETMBEANCOUNT\":",
                "+                case \"javax/management/MBeanServer/GETATTRIBUTE\":",
                "+                case \"javax/management/MBeanServer/GETATTRIBUTES\":",
                "+                case \"javax/management/MBeanServer/SETATTRIBUTE\":",
                "+                case \"javax/management/MBeanServer/SETATTRIBUTES\":",
                "+                case \"javax/management/MBeanServer/INVOKE\":",
                "+                case \"javax/management/MBeanServer/GETDEFAULTDOMAIN\":",
                "+                case \"javax/management/MBeanServer/GETDOMAINS\":",
                "+                case \"javax/management/MBeanServer/ADDNOTIFICATIONLISTENER\":",
                "+                case \"javax/management/MBeanServer/GETMBEANINFO\":",
                "+                case \"javax/management/MBeanServer/ISINSTANCEOF\":",
                "+                case \"javax/management/MBeanServer/INSTANTIATE\":",
                "+                case \"javax/management/MBeanServer/DESERIALIZE\":",
                "+                case \"javax/management/MBeanServer/GETCLASSLOADERFOR\":",
                "+                case \"javax/management/MBeanServer/GETCLASSLOADER\":",
                "+                    return TYPE_JMX;",
                "+                case \"org/osgi/framework/FrameworkEvent/STARTED\":",
                "+                case \"org/osgi/framework/FrameworkEvent/ERROR\":",
                "+                case \"org/osgi/framework/FrameworkEvent/PACKAGES_REFRESHED\":",
                "+                case \"org/osgi/framework/FrameworkEvent/STARTLEVEL_CHANGED\":",
                "+                case \"org/osgi/framework/FrameworkEvent/WARNING\":",
                "+                case \"org/osgi/framework/FrameworkEvent/INFO\":",
                "+                case \"org/osgi/framework/FrameworkEvent/STOPPED\":",
                "+                case \"org/osgi/framework/FrameworkEvent/STOPPED_UPDATE\":",
                "+                case \"org/osgi/framework/FrameworkEvent/STOPPED_BOOTCLASSPATH_MODIFIED\":",
                "+                case \"org/osgi/framework/FrameworkEvent/WAIT_TIMEDOUT\":",
                "+                    return TYPE_FRAMEWORK;",
                "+                case \"org/osgi/service/web/DEPLOYING\":",
                "+                case \"org/osgi/service/web/DEPLOYED\":",
                "+                case \"org/osgi/service/web/UNDEPLOYING\":",
                "+                case \"org/osgi/service/web/UNDEPLOYED\":",
                "+                    return TYPE_WEB;",
                "+                case \"org/apache/karaf/features/repositories/ADDED\":",
                "+                case \"org/apache/karaf/features/repositories/REMOVED\":",
                "+                    return TYPE_REPOSITORIES;",
                "+                case \"org/apache/karaf/features/features/INSTALLED\":",
                "+                case \"org/apache/karaf/features/features/UNINSTALLED\":",
                "+                    return TYPE_FEATURES;",
                "+                case \"org/osgi/service/blueprint/container/CREATING\":",
                "+                case \"org/osgi/service/blueprint/container/CREATED\":",
                "+                case \"org/osgi/service/blueprint/container/DESTROYING\":",
                "+                case \"org/osgi/service/blueprint/container/DESTROYED\":",
                "+                case \"org/osgi/service/blueprint/container/FAILURE\":",
                "+                case \"org/osgi/service/blueprint/container/GRACE_PERIOD\":",
                "+                case \"org/osgi/service/blueprint/container/WAITING\":",
                "+                    return TYPE_BLUEPRINT;",
                "+                default:",
                "+                    return TYPE_UNKNOWN;",
                "+            }",
                "+        }",
                "+",
                "+        @Override",
                "+        public String subtype() {",
                "+            return subtype;",
                "+        }",
                "+",
                "+        private String _subtype() {",
                "+            String topic = event.getTopic();",
                "+            return topic.substring(topic.lastIndexOf('/') + 1).toLowerCase(Locale.ENGLISH);",
                "+        }",
                "+",
                "+        @Override",
                "+        public Iterable<String> keys() {",
                "+            String[] keys = event.getPropertyNames();",
                "+            Arrays.sort(keys);",
                "+            return () -> new Iterator<String>() {",
                "+                String next;",
                "+                int index = -1;",
                "+                @Override",
                "+                public boolean hasNext() {",
                "+                    if (next != null) {",
                "+                        return true;",
                "+                    }",
                "+                    while (++index < keys.length) {",
                "+                        switch (keys[index]) {",
                "+                            case \"timestamp\":",
                "+                            case \"event.topics\":",
                "+                            case \"subject\":",
                "+                            case \"type\":",
                "+                            case \"subtype\":",
                "+                                break;",
                "+                            default:",
                "+                                next = keys[index];",
                "+                                return true;",
                "+                        }",
                "+                    }",
                "+                    return false;",
                "+                }",
                "+                @Override",
                "+                public String next() {",
                "+                    if (!hasNext()) {",
                "+                        throw new NoSuchElementException();",
                "+                    }",
                "+                    String str = next;",
                "+                    next = null;",
                "+                    return str;",
                "+                }",
                "+            };",
                "+        }",
                "+",
                "+        @Override",
                "+        public Object getProperty(String key) {",
                "+            return event.getProperty(key);",
                "+        }",
                "+",
                "+        Map<String, Object> getFilterMap() {",
                "+            return new AbstractMap<String, Object>() {",
                "+                @Override",
                "+                public Set<Entry<String, Object>> entrySet() {",
                "+                    throw new UnsupportedOperationException();",
                "+                }",
                "+",
                "+                @Override",
                "+                public Object get(Object key) {",
                "+                    String s = key.toString();",
                "+                    switch (s) {",
                "+                        case \"timestamp\":",
                "+                            return timestamp();",
                "+                        case \"type\":",
                "+                            return type();",
                "+                        case \"subtype\":",
                "+                            return subtype();",
                "+                        case \"subject\":",
                "+                            return subject();",
                "+                        default:",
                "+                            return event.getProperty(s);",
                "+                    }",
                "+                }",
                "+            };",
                "+        }",
                "+",
                "+    }",
                "+",
                "+}",
                "diff --git a/audit/src/main/java/org/apache/karaf/audit/Event.java b/audit/src/main/java/org/apache/karaf/audit/Event.java",
                "new file mode 100644",
                "index 0000000000..d49d083493",
                "--- /dev/null",
                "+++ b/audit/src/main/java/org/apache/karaf/audit/Event.java",
                "@@ -0,0 +1,48 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.karaf.audit;",
                "+",
                "+import javax.security.auth.Subject;",
                "+",
                "+public interface Event {",
                "+    ",
                "+    String TYPE_SHELL = \"shell\";",
                "+    String TYPE_LOG = \"log\";",
                "+    String TYPE_SERVICE = \"service\";",
                "+    String TYPE_BUNDLE = \"bundle\";",
                "+    String TYPE_LOGIN = \"login\";",
                "+    String TYPE_JMX = \"jmx\";",
                "+    String TYPE_FRAMEWORK= \"framework\";",
                "+    String TYPE_WEB = \"web\";",
                "+    String TYPE_REPOSITORIES = \"repositories\";",
                "+    String TYPE_FEATURES = \"features\";",
                "+    String TYPE_BLUEPRINT = \"blueprint\";",
                "+    String TYPE_UNKNOWN = \"unknown\";",
                "+    ",
                "+    long timestamp();",
                "+    ",
                "+    Subject subject();",
                "+    ",
                "+    String type();",
                "+    ",
                "+    String subtype();",
                "+    ",
                "+    Iterable<String> keys();",
                "+    ",
                "+    Object getProperty(String key);",
                "+",
                "+}",
                "diff --git a/audit/src/main/java/org/apache/karaf/audit/EventLayout.java b/audit/src/main/java/org/apache/karaf/audit/EventLayout.java",
                "new file mode 100644",
                "index 0000000000..e2d5ea554e",
                "--- /dev/null",
                "+++ b/audit/src/main/java/org/apache/karaf/audit/EventLayout.java",
                "@@ -0,0 +1,35 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.karaf.audit;",
                "+",
                "+import java.io.IOException;",
                "+import java.nio.CharBuffer;",
                "+",
                "+public interface EventLayout {",
                "+",
                "+    /**",
                "+     * Format the log event directly into the given <code>Appendable</code>.",
                "+     */",
                "+    void format(Event event, Appendable to) throws IOException;",
                "+",
                "+    /**",
                "+     * Format the log event and return a CharBuffer.  The buffer is only valid",
                "+     * until the next call to {@link #format(Event)} or {@link #format(Event, Appendable)}.",
                "+     */",
                "+    CharBuffer format(Event event) throws IOException;",
                "+",
                "+}",
                "diff --git a/audit/src/main/java/org/apache/karaf/audit/EventLogger.java b/audit/src/main/java/org/apache/karaf/audit/EventLogger.java",
                "new file mode 100644",
                "index 0000000000..159cc7e080",
                "--- /dev/null",
                "+++ b/audit/src/main/java/org/apache/karaf/audit/EventLogger.java",
                "@@ -0,0 +1,30 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.karaf.audit;",
                "+",
                "+import java.io.Closeable;",
                "+import java.io.Flushable;",
                "+import java.io.IOException;",
                "+",
                "+public interface EventLogger extends Flushable, Closeable {",
                "+",
                "+    /**",
                "+     * Write the event.",
                "+     */",
                "+    void write(Event event) throws IOException;",
                "+",
                "+}",
                "diff --git a/audit/src/main/java/org/apache/karaf/audit/layout/AbstractLayout.java b/audit/src/main/java/org/apache/karaf/audit/layout/AbstractLayout.java",
                "new file mode 100644",
                "index 0000000000..990408c1d8",
                "--- /dev/null",
                "+++ b/audit/src/main/java/org/apache/karaf/audit/layout/AbstractLayout.java",
                "@@ -0,0 +1,198 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.karaf.audit.layout;",
                "+",
                "+import org.apache.karaf.audit.Event;",
                "+import org.apache.karaf.audit.EventLayout;",
                "+import org.apache.karaf.audit.util.Buffer;",
                "+import org.osgi.framework.Bundle;",
                "+import org.osgi.framework.Constants;",
                "+import org.osgi.framework.ServiceEvent;",
                "+",
                "+import java.io.File;",
                "+import java.io.IOException;",
                "+import java.lang.management.ManagementFactory;",
                "+import java.net.InetAddress;",
                "+import java.net.NetworkInterface;",
                "+import java.net.SocketException;",
                "+import java.net.UnknownHostException;",
                "+import java.nio.CharBuffer;",
                "+import java.util.Enumeration;",
                "+",
                "+public abstract class AbstractLayout implements EventLayout {",
                "+",
                "+    protected final String hostName;",
                "+    protected final String appName;",
                "+    protected final String procId;",
                "+    ",
                "+    protected final Buffer buffer;",
                "+",
                "+    public AbstractLayout(Buffer buffer) {",
                "+        this.hostName = hostname();",
                "+        this.appName = System.getProperty(\"karaf.name\", \"-\");",
                "+        this.procId = procId();",
                "+        this.buffer = buffer;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void format(Event event, Appendable to) throws IOException {",
                "+        doFormat(event);",
                "+        buffer.writeTo(to);",
                "+    }",
                "+",
                "+    @Override",
                "+    public CharBuffer format(Event event) throws IOException {",
                "+        doFormat(event);",
                "+        return CharBuffer.wrap(buffer.buffer(), 0, buffer.position());",
                "+    }",
                "+",
                "+    private void doFormat(Event event) throws IOException {",
                "+        buffer.clear();",
                "+        header(event);",
                "+        message(event);",
                "+        footer(event);",
                "+    }",
                "+",
                "+    protected abstract void header(Event event) throws IOException;",
                "+",
                "+    protected abstract void footer(Event event) throws IOException;",
                "+",
                "+    protected void message(Event event) throws IOException {",
                "+        append(\"subject\", event.subject());",
                "+        append(\"type\", event.type());",
                "+        append(\"subtype\", event.subtype());",
                "+        String message = null;",
                "+        switch (event.type()) {",
                "+            case Event.TYPE_SHELL: {",
                "+                append(event, \"script\");",
                "+                append(event, \"command\");",
                "+                append(event, \"exception\");",
                "+                break;",
                "+            }",
                "+            case Event.TYPE_LOGIN: {",
                "+                append(event, \"username\");",
                "+                break;",
                "+            }",
                "+            case Event.TYPE_JMX: {",
                "+                append(event, \"method\");",
                "+                append(event, \"signature\");",
                "+                append(event, \"params\");",
                "+                append(event, \"result\");",
                "+                append(event, \"exception\");",
                "+                break;",
                "+            }",
                "+            case Event.TYPE_LOG: {",
                "+                Bundle bundle = (Bundle) event.getProperty(\"bundle\");",
                "+                if (bundle != null) {",
                "+                    append(\"bundle.id\", bundle.getBundleId());",
                "+                    append(\"bundle.symbolicname\", bundle.getSymbolicName());",
                "+                    append(\"bundle.version\", bundle.getVersion());",
                "+                }",
                "+                append(event, \"message\");",
                "+                append(event, \"exception\");",
                "+                break;",
                "+            }",
                "+            case Event.TYPE_BUNDLE: {",
                "+                Bundle bundle = (Bundle) event.getProperty(\"bundle\");",
                "+                append(\"bundle.id\", bundle.getBundleId());",
                "+                append(\"bundle.symbolicname\", bundle.getSymbolicName());",
                "+                append(\"bundle.version\", bundle.getVersion());",
                "+                break;",
                "+            }",
                "+            case Event.TYPE_SERVICE: {",
                "+                ServiceEvent se = (ServiceEvent) event.getProperty(\"event\");",
                "+                append(\"service.bundleid\", se.getServiceReference().getProperty(Constants.SERVICE_BUNDLEID));",
                "+                append(\"service.id\", se.getServiceReference().getProperty(Constants.SERVICE_ID));",
                "+                append(\"objectClass\", se.getServiceReference().getProperty(Constants.OBJECTCLASS));",
                "+                break;",
                "+            }",
                "+            case Event.TYPE_WEB: {",
                "+                append(event, \"servlet.servlet\");",
                "+                append(event, \"servlet.alias\");",
                "+                break;",
                "+            }",
                "+            case Event.TYPE_REPOSITORIES: {",
                "+                append(event, \"uri\");",
                "+                break;",
                "+            }",
                "+            case Event.TYPE_FEATURES: {",
                "+                append(event, \"name\");",
                "+                append(event, \"version\");",
                "+                break;",
                "+            }",
                "+            case Event.TYPE_BLUEPRINT: {",
                "+                append(event, \"bundle.id\");",
                "+                append(event, \"bundle.symbolicname\");",
                "+                append(event, \"bundle.version\");",
                "+                break;",
                "+            }",
                "+            default: {",
                "+                for (String key : event.keys()) {",
                "+                    append(event, key);",
                "+                }",
                "+                break;",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+    private void append(Event event, String key) throws IOException {",
                "+        append(key, event.getProperty(key));",
                "+    }",
                "+",
                "+    protected abstract void append(String key, Object val) throws IOException;",
                "+",
                "+    private static String hostname() {",
                "+        try {",
                "+            final InetAddress addr = InetAddress.getLocalHost();",
                "+            return addr.getHostName();",
                "+        } catch (final UnknownHostException uhe) {",
                "+            try {",
                "+                final Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();",
                "+                while (interfaces.hasMoreElements()) {",
                "+                    final NetworkInterface nic = interfaces.nextElement();",
                "+                    final Enumeration<InetAddress> addresses = nic.getInetAddresses();",
                "+                    while (addresses.hasMoreElements()) {",
                "+                        final InetAddress address = addresses.nextElement();",
                "+                        if (!address.isLoopbackAddress()) {",
                "+                            final String hostname = address.getHostName();",
                "+                            if (hostname != null) {",
                "+                                return hostname;",
                "+                            }",
                "+                        }",
                "+                    }",
                "+                }",
                "+            } catch (final SocketException se) {",
                "+                // Ignore exception.",
                "+            }",
                "+            return \"-\";",
                "+        }",
                "+    }",
                "+",
                "+    private static String procId() {",
                "+        try {",
                "+            return ManagementFactory.getRuntimeMXBean().getName().split(\"@\")[0]; // likely works on most platforms",
                "+        } catch (final Exception ex) {",
                "+            try {",
                "+                return new File(\"/proc/self\").getCanonicalFile().getName(); // try a Linux-specific way",
                "+            } catch (final IOException ignoredUseDefault) {",
                "+                // Ignore exception.",
                "+            }",
                "+        }",
                "+        return \"-\";",
                "+    }",
                "+",
                "+}",
                "diff --git a/audit/src/main/java/org/apache/karaf/audit/layout/GelfLayout.java b/audit/src/main/java/org/apache/karaf/audit/layout/GelfLayout.java",
                "new file mode 100644",
                "index 0000000000..bb760e552b",
                "--- /dev/null",
                "+++ b/audit/src/main/java/org/apache/karaf/audit/layout/GelfLayout.java",
                "@@ -0,0 +1,89 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.karaf.audit.layout;",
                "+",
                "+import org.apache.karaf.audit.Event;",
                "+import org.apache.karaf.audit.util.Buffer;",
                "+",
                "+import java.io.IOException;",
                "+",
                "+public class GelfLayout extends AbstractLayout {",
                "+",
                "+    public GelfLayout() {",
                "+        super(new Buffer(Buffer.Format.Json));",
                "+    }",
                "+",
                "+    @Override",
                "+    protected void header(Event event) throws IOException {",
                "+        buffer.append('{');",
                "+        append(\"version\", \"1.1\", false);",
                "+        append(\"host\", hostName, false);",
                "+        datetime(event.timestamp());",
                "+        append(\"short_message\", event.type() + \".\" + event.subtype(), false);",
                "+    }",
                "+",
                "+    private void datetime(long timestamp) throws IOException {",
                "+        buffer.append(\" timestamp=\");",
                "+        long secs = timestamp / 1000;",
                "+        int ms = (int)(timestamp - secs * 1000);",
                "+        buffer.format(secs);",
                "+        buffer.append('.');",
                "+        int temp = ms / 100;",
                "+        buffer.append((char) (temp + '0'));",
                "+        ms -= 100 * temp;",
                "+        temp = ms / 10;",
                "+        buffer.append((char) (temp + '0'));",
                "+        ms -= 10 * temp;",
                "+        buffer.append((char) (ms + '0'));",
                "+    }",
                "+",
                "+    @Override",
                "+    protected void footer(Event event) throws IOException {",
                "+        buffer.append(' ');",
                "+        buffer.append('}');",
                "+    }",
                "+",
                "+    @Override",
                "+    protected void append(String key, Object val) throws IOException {",
                "+        append(key, val, true);",
                "+    }",
                "+",
                "+    protected void append(String key, Object val, boolean custom) throws IOException {",
                "+        if (val != null) {",
                "+            buffer.append(' ');",
                "+            if (custom) {",
                "+                buffer.append('_');",
                "+            }",
                "+            buffer.append(key);",
                "+            buffer.append('=');",
                "+            if (val instanceof Number) {",
                "+                if (val instanceof Long) {",
                "+                    buffer.format(((Long) val).longValue());",
                "+                } else if (val instanceof Integer) {",
                "+                    buffer.format(((Integer) val).intValue());",
                "+                } else {",
                "+                    buffer.append(val.toString());",
                "+                }",
                "+            } else {",
                "+                buffer.append('\"');",
                "+                buffer.format(val);",
                "+                buffer.append('\"');",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+}",
                "diff --git a/audit/src/main/java/org/apache/karaf/audit/layout/Rfc3164Layout.java b/audit/src/main/java/org/apache/karaf/audit/layout/Rfc3164Layout.java",
                "new file mode 100644",
                "index 0000000000..0f77985a15",
                "--- /dev/null",
                "+++ b/audit/src/main/java/org/apache/karaf/audit/layout/Rfc3164Layout.java",
                "@@ -0,0 +1,85 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.karaf.audit.layout;",
                "+",
                "+import org.apache.karaf.audit.Event;",
                "+import org.apache.karaf.audit.util.Buffer;",
                "+import org.apache.karaf.audit.util.FastDateFormat;",
                "+",
                "+import java.io.IOException;",
                "+",
                "+public class Rfc3164Layout extends AbstractLayout {",
                "+",
                "+    public static final int DEFAULT_ENTERPRISE_NUMBER = 18060;",
                "+",
                "+    protected final int facility;",
                "+    protected final int priority;",
                "+    protected final int enterpriseNumber;",
                "+",
                "+    protected String hdr1;",
                "+    protected String hdr2;",
                "+    protected String hdr3;",
                "+",
                "+    protected FastDateFormat fastDateFormat = new FastDateFormat();",
                "+",
                "+    public Rfc3164Layout(int facility, int priority, int enterpriseNumber) {",
                "+        super(new Buffer(Buffer.Format.Syslog));",
                "+        this.facility = facility;",
                "+        this.priority = priority;",
                "+        this.enterpriseNumber = enterpriseNumber;",
                "+",
                "+        hdr1 = \"<\" + ((facility << 3) + priority) + \">\";",
                "+        hdr2 = \" \" + hostName + \" \" + appName + \" \" + procId + \" \";",
                "+        hdr3 = enterpriseNumber > 0 ? \"@\" + enterpriseNumber : \"\";",
                "+    }",
                "+",
                "+    @Override",
                "+    protected void header(Event event) throws IOException {",
                "+        buffer.append(hdr1);",
                "+        datetime(event.timestamp());",
                "+        buffer.append(hdr2);",
                "+        buffer.append(event.type());",
                "+        buffer.append(' ');",
                "+        buffer.append('[');",
                "+        buffer.append(event.type());",
                "+        buffer.append(hdr3);",
                "+    }",
                "+",
                "+    @Override",
                "+    protected void footer(Event event) throws IOException {",
                "+        buffer.append(']');",
                "+    }",
                "+",
                "+    @Override",
                "+    protected void append(String key, Object val) throws IOException {",
                "+        if (val != null) {",
                "+            buffer.append(' ')",
                "+                    .append(key)",
                "+                    .append('=')",
                "+                    .append('\"')",
                "+                    .format(val)",
                "+                    .append('\"');",
                "+        }",
                "+    }",
                "+",
                "+    protected void datetime(long millis) throws IOException {",
                "+        buffer.append(fastDateFormat.getDate(millis, FastDateFormat.MMM_D2));",
                "+        buffer.append(' ');",
                "+        fastDateFormat.writeTime(millis, false, buffer);",
                "+    }",
                "+",
                "+}",
                "diff --git a/audit/src/main/java/org/apache/karaf/audit/layout/Rfc5424Layout.java b/audit/src/main/java/org/apache/karaf/audit/layout/Rfc5424Layout.java",
                "new file mode 100644",
                "index 0000000000..5bd314ba32",
                "--- /dev/null",
                "+++ b/audit/src/main/java/org/apache/karaf/audit/layout/Rfc5424Layout.java",
                "@@ -0,0 +1,86 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.karaf.audit.layout;",
                "+",
                "+import org.apache.karaf.audit.Event;",
                "+import org.apache.karaf.audit.util.Buffer;",
                "+import org.apache.karaf.audit.util.FastDateFormat;",
                "+",
                "+import java.io.IOException;",
                "+",
                "+public class Rfc5424Layout extends AbstractLayout {",
                "+",
                "+    public static final int DEFAULT_ENTERPRISE_NUMBER = 18060;",
                "+",
                "+    protected final int facility;",
                "+    protected final int priority;",
                "+    protected final int enterpriseNumber;",
                "+",
                "+    protected String hdr1;",
                "+    protected String hdr2;",
                "+    protected String hdr3;",
                "+",
                "+    protected FastDateFormat fastDateFormat = new FastDateFormat();",
                "+",
                "+    public Rfc5424Layout(int facility, int priority, int enterpriseNumber) {",
                "+        super(new Buffer(Buffer.Format.Syslog));",
                "+        this.facility = facility;",
                "+        this.priority = priority;",
                "+        this.enterpriseNumber = enterpriseNumber;",
                "+",
                "+        hdr1 = \"<\" + ((facility << 3) + priority) + \">1 \";",
                "+        hdr2 = \" \" + hostName + \" \" + appName + \" \" + procId + \" \";",
                "+        hdr3 = enterpriseNumber > 0 ? \"@\" + enterpriseNumber : \"\";",
                "+    }",
                "+",
                "+    @Override",
                "+    protected void header(Event event) throws IOException {",
                "+        buffer.append(hdr1);",
                "+        datetime(event.timestamp());",
                "+        buffer.append(hdr2);",
                "+        buffer.append(event.type());",
                "+        buffer.append(' ');",
                "+        buffer.append('[');",
                "+        buffer.append(event.type());",
                "+        buffer.append(hdr3);",
                "+    }",
                "+",
                "+    @Override",
                "+    protected void footer(Event event) throws IOException {",
                "+        buffer.append(']');",
                "+    }",
                "+",
                "+    @Override",
                "+    protected void append(String key, Object val) throws IOException {",
                "+        if (val != null) {",
                "+            buffer.append(' ')",
                "+                    .append(key)",
                "+                    .append('=')",
                "+                    .append('\"')",
                "+                    .format(val)",
                "+                    .append('\"');",
                "+        }",
                "+    }",
                "+",
                "+    protected void datetime(long millis) throws IOException {",
                "+        buffer.append(fastDateFormat.getDate(millis, FastDateFormat.YYYY_MM_DD));",
                "+        buffer.append('T');",
                "+        fastDateFormat.writeTime(millis, true, buffer);",
                "+        buffer.append(fastDateFormat.getDate(millis, FastDateFormat.XXX));",
                "+    }",
                "+",
                "+}",
                "diff --git a/audit/src/main/java/org/apache/karaf/audit/layout/SimpleLayout.java b/audit/src/main/java/org/apache/karaf/audit/layout/SimpleLayout.java",
                "new file mode 100644",
                "index 0000000000..deb95d4d85",
                "--- /dev/null",
                "+++ b/audit/src/main/java/org/apache/karaf/audit/layout/SimpleLayout.java",
                "@@ -0,0 +1,69 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.karaf.audit.layout;",
                "+",
                "+import org.apache.karaf.audit.Event;",
                "+import org.apache.karaf.audit.util.Buffer;",
                "+import org.apache.karaf.audit.util.FastDateFormat;",
                "+",
                "+import java.io.IOException;",
                "+",
                "+public class SimpleLayout extends AbstractLayout {",
                "+",
                "+    protected String hdr;",
                "+",
                "+    protected FastDateFormat fastDateFormat = new FastDateFormat();",
                "+",
                "+    public SimpleLayout() {",
                "+        super(new Buffer(Buffer.Format.Json));",
                "+        hdr = \" \" + hostName + \" \" + appName + \" \" + procId + \" \";",
                "+    }",
                "+",
                "+    @Override",
                "+    protected void header(Event event) throws IOException {",
                "+        datetime(event.timestamp());",
                "+        buffer.append(hdr);",
                "+    }",
                "+",
                "+    @Override",
                "+    protected void footer(Event event) throws IOException {",
                "+    }",
                "+",
                "+    @Override",
                "+    protected void append(String key, Object val) throws IOException {",
                "+        if (val != null) {",
                "+            switch (key) {",
                "+                case \"subject\":",
                "+                case \"type\":",
                "+                case \"subtype\":",
                "+                    buffer.append(' ').format(val);",
                "+                    break;",
                "+                default:",
                "+                    buffer.append(' ').append(key).append('=').append('\"').format(val).append('\"');",
                "+                    break;",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+    protected void datetime(long millis) throws IOException {",
                "+        buffer.append(fastDateFormat.getDate(millis, FastDateFormat.YYYY_MM_DD));",
                "+        buffer.append('T');",
                "+        fastDateFormat.writeTime(millis, true, buffer);",
                "+        buffer.append(fastDateFormat.getDate(millis, FastDateFormat.XXX));",
                "+    }",
                "+",
                "+}",
                "diff --git a/audit/src/main/java/org/apache/karaf/audit/logger/FileEventLogger.java b/audit/src/main/java/org/apache/karaf/audit/logger/FileEventLogger.java",
                "new file mode 100644",
                "index 0000000000..dfe3ee3104",
                "--- /dev/null",
                "+++ b/audit/src/main/java/org/apache/karaf/audit/logger/FileEventLogger.java",
                "@@ -0,0 +1,291 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.karaf.audit.logger;",
                "+",
                "+import org.apache.karaf.audit.Event;",
                "+import org.apache.karaf.audit.EventLayout;",
                "+import org.apache.karaf.audit.EventLogger;",
                "+import org.apache.karaf.audit.util.FastDateFormat;",
                "+",
                "+import java.io.BufferedWriter;",
                "+import java.io.Closeable;",
                "+import java.io.Flushable;",
                "+import java.io.IOException;",
                "+import java.io.OutputStream;",
                "+import java.nio.charset.Charset;",
                "+import java.nio.file.Files;",
                "+import java.nio.file.Path;",
                "+import java.nio.file.Paths;",
                "+import java.nio.file.StandardCopyOption;",
                "+import java.nio.file.StandardOpenOption;",
                "+import java.util.Collections;",
                "+import java.util.List;",
                "+import java.util.Locale;",
                "+import java.util.concurrent.Executor;",
                "+import java.util.concurrent.Executors;",
                "+import java.util.concurrent.ThreadFactory;",
                "+import java.util.stream.Collectors;",
                "+import java.util.zip.GZIPOutputStream;",
                "+",
                "+public class FileEventLogger implements EventLogger {",
                "+",
                "+    private final Charset encoding;",
                "+    private final String policy;",
                "+    private final int files;",
                "+    private final boolean compress;",
                "+    private final Executor executor;",
                "+    private final EventLayout layout;",
                "+    private boolean daily;",
                "+    private long maxSize;",
                "+    private long size;",
                "+    private Path path;",
                "+    private Writer writer;",
                "+    private FastDateFormat fastDateFormat = new FastDateFormat();",
                "+",
                "+    public FileEventLogger(String path, String encoding, String policy, int files, boolean compress, ThreadFactory factory, EventLayout layout) throws IOException {",
                "+        this.path = Paths.get(path);",
                "+        this.encoding = Charset.forName(encoding);",
                "+        this.policy = policy;",
                "+        this.files = files;",
                "+        this.compress = compress;",
                "+        this.executor = Executors.newSingleThreadExecutor(factory);",
                "+        this.layout = layout;",
                "+        Files.createDirectories(this.path.getParent());",
                "+",
                "+        for (String pol : policy.toLowerCase(Locale.ENGLISH).split(\"\\\\s+\")) {",
                "+            if (\"daily\".equals(pol)) {",
                "+                daily = true;",
                "+            } else if (pol.matches(\"size\\\\([0-9]+(kb|mb|gb)?\\\\)\")) {",
                "+                String str = pol.substring(5, pol.length() - 1);",
                "+                long mult;",
                "+                if (str.endsWith(\"kb\")) {",
                "+                    mult = 1024;",
                "+                    str = str.substring(0, str.length() - 2);",
                "+                } else if (str.endsWith(\"mb\")) {",
                "+                    mult = 1024 * 1024;",
                "+                    str = str.substring(0, str.length() - 2);",
                "+                } else if (str.endsWith(\"gb\")) {",
                "+                    mult = 1024 * 1024 * 1024;",
                "+                    str = str.substring(0, str.length() - 2);",
                "+                } else {",
                "+                    mult = 1;",
                "+                }",
                "+                try {",
                "+                    maxSize = Long.parseLong(str) * mult;",
                "+                } catch (NumberFormatException t) {",
                "+                    // ignore",
                "+                }",
                "+                if (maxSize <= 0) {",
                "+                    throw new IllegalArgumentException(\"Unsupported policy: \" + pol);",
                "+                }",
                "+            } else {",
                "+                throw new IllegalArgumentException(\"Unsupported policy: \" + pol);",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public void write(Event event) throws IOException {",
                "+        long timestamp = event.timestamp();",
                "+        if (writer == null) {",
                "+            init();",
                "+        } else {",
                "+            check(timestamp);",
                "+        }",
                "+        layout.format(event, writer);",
                "+        writer.append(\"\\n\");",
                "+    }",
                "+",
                "+    private void init() throws IOException {",
                "+        long timestamp = System.currentTimeMillis();",
                "+        if (Files.isRegularFile(path)) {",
                "+            size = Files.size(path);",
                "+            fastDateFormat.sameDay(Files.getLastModifiedTime(path).toMillis());",
                "+            if (trigger(timestamp)) {",
                "+                Path temp = Files.createTempFile(path.getParent(), path.getFileName().toString(), \".tmp\");",
                "+                Files.move(path, temp);",
                "+                executor.execute(() -> rotate(temp, timestamp));",
                "+            }",
                "+        }",
                "+        fastDateFormat.sameDay(timestamp);",
                "+        writer = new Writer(Files.newBufferedWriter(path, encoding, StandardOpenOption.CREATE, StandardOpenOption.APPEND));",
                "+        size = 0;",
                "+    }",
                "+",
                "+",
                "+    private void check(long timestamp) throws IOException {",
                "+        if (trigger(timestamp)) {",
                "+            if (writer != null) {",
                "+                writer.flush();",
                "+                if (Files.size(path) == 0) {",
                "+                    return;",
                "+                }",
                "+                writer.close();",
                "+            }",
                "+            Path temp = Files.createTempFile(path.getParent(), path.getFileName().toString() + \".\", \".tmp\");",
                "+            Files.delete(temp);",
                "+            Files.move(path, temp, StandardCopyOption.ATOMIC_MOVE);",
                "+            executor.execute(() -> rotate(temp, timestamp));",
                "+            writer = new Writer(Files.newBufferedWriter(path, encoding, StandardOpenOption.CREATE, StandardOpenOption.APPEND));",
                "+            size = 0;",
                "+        }",
                "+    }",
                "+",
                "+    private boolean trigger(long timestamp) {",
                "+        return maxSize > 0 && size > maxSize",
                "+                || daily && !fastDateFormat.sameDay(timestamp);",
                "+    }",
                "+",
                "+    private void rotate(Path path, long timestamp) {",
                "+        try {",
                "+            // Compute final name",
                "+            String[] fix = getFileNameFix();",
                "+            List<String> paths = Files.list(path.getParent())",
                "+                    .filter(p -> !p.equals(this.path))",
                "+                    .map(Path::getFileName)",
                "+                    .map(Path::toString)",
                "+                    .filter(p -> p.startsWith(fix[0]))",
                "+                    .filter(p -> !p.endsWith(\".tmp\"))",
                "+                    .collect(Collectors.toList());",
                "+            String date = new FastDateFormat().getDate(timestamp, FastDateFormat.YYYY_MM_DD);",
                "+            List<String> sameDate = paths.stream()",
                "+                    .filter(p -> p.matches(\"\\\\Q\" + fix[0] + \"-\" + date + \"\\\\E(-[0-9]+)?\\\\Q\" + fix[1] + \"\\\\E\"))",
                "+                    .collect(Collectors.toList());",
                "+            String name = fix[0] + \"-\" + date + fix[1];",
                "+            int idx = 0;",
                "+            while (sameDate.contains(name)) {",
                "+                name = fix[0] + \"-\" + date + \"-\" + Integer.toString(++idx) + fix[1];",
                "+            }",
                "+            paths.add(name);",
                "+            Path finalPath = path.resolveSibling(name);",
                "+            // Compress or move the file",
                "+            if (compress) {",
                "+                try (OutputStream out = Files.newOutputStream(finalPath, StandardOpenOption.WRITE, StandardOpenOption.CREATE_NEW);",
                "+                     GZIPOutputStream zip = new GZIPOutputStream(out)) {",
                "+                    Files.copy(path, zip);",
                "+                }",
                "+                Files.delete(path);",
                "+            } else {",
                "+                Files.move(path, finalPath);",
                "+            }",
                "+            // Check number of files",
                "+            if (files > 0 && paths.size() > files) {",
                "+                Collections.sort(paths);",
                "+                paths.subList(paths.size() - files, paths.size()).clear();",
                "+                for (String p : paths) {",
                "+                    Files.delete(path.resolveSibling(p));",
                "+                }",
                "+            }",
                "+        } catch (IOException e) {",
                "+            // ignore",
                "+        }",
                "+    }",
                "+",
                "+    private String[] getFileNameFix() {",
                "+        String str = path.getFileName().toString();",
                "+        String sfx = compress ? \".gz\": \"\";",
                "+        int idx = str.lastIndexOf('.');",
                "+        if (idx > 0) {",
                "+            return new String[] { str.substring(0, idx), str.substring(idx) + sfx };",
                "+        } else {",
                "+            return new String[] { str, sfx };",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public void flush() throws IOException {",
                "+        if (writer != null) {",
                "+            writer.flush();",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public void close() throws IOException {",
                "+        if (writer != null) {",
                "+            writer.close();",
                "+        }",
                "+    }",
                "+",
                "+    class Writer extends java.io.Writer implements Appendable, Closeable, Flushable {",
                "+        private final BufferedWriter writer;",
                "+",
                "+        public Writer(BufferedWriter writer) {",
                "+            this.writer = writer;",
                "+        }",
                "+",
                "+        @Override",
                "+        public void flush() throws IOException {",
                "+            writer.flush();",
                "+        }",
                "+",
                "+        @Override",
                "+        public void close() throws IOException {",
                "+            writer.close();",
                "+        }",
                "+",
                "+        @Override",
                "+        public void write(int c) throws IOException {",
                "+            size += 1;",
                "+            writer.write(c);",
                "+        }",
                "+",
                "+        @Override",
                "+        public void write(char[] cbuf, int off, int len) throws IOException {",
                "+            size += len;",
                "+            writer.write(cbuf, off, len);",
                "+        }",
                "+",
                "+        @Override",
                "+        public void write(String s, int off, int len) throws IOException {",
                "+            size += len;",
                "+            writer.write(s, off, len);",
                "+        }",
                "+",
                "+        @Override",
                "+        public void write(char[] cbuf) throws IOException {",
                "+            size += cbuf.length;",
                "+            writer.write(cbuf);",
                "+        }",
                "+",
                "+        @Override",
                "+        public void write(String str) throws IOException {",
                "+            size += str.length();",
                "+            writer.write(str);",
                "+        }",
                "+",
                "+        @Override",
                "+        public java.io.Writer append(CharSequence csq) throws IOException {",
                "+            size += csq.length();",
                "+            writer.append(csq);",
                "+            return this;",
                "+        }",
                "+",
                "+        @Override",
                "+        public java.io.Writer append(CharSequence csq, int start, int end) throws IOException {",
                "+            size += end - start;",
                "+            writer.append(csq, start, end);",
                "+            return this;",
                "+        }",
                "+",
                "+        @Override",
                "+        public java.io.Writer append(char c) throws IOException {",
                "+            size += 1;",
                "+            writer.append(c);",
                "+            return this;",
                "+        }",
                "+    }",
                "+}",
                "diff --git a/audit/src/main/java/org/apache/karaf/audit/logger/JulEventLogger.java b/audit/src/main/java/org/apache/karaf/audit/logger/JulEventLogger.java",
                "new file mode 100644",
                "index 0000000000..9b6fe5537b",
                "--- /dev/null",
                "+++ b/audit/src/main/java/org/apache/karaf/audit/logger/JulEventLogger.java",
                "@@ -0,0 +1,61 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.karaf.audit.logger;",
                "+",
                "+import org.apache.karaf.audit.Event;",
                "+import org.apache.karaf.audit.EventLayout;",
                "+import org.apache.karaf.audit.EventLogger;",
                "+",
                "+import java.io.IOException;",
                "+import java.util.Locale;",
                "+import java.util.logging.Level;",
                "+import java.util.logging.Logger;",
                "+",
                "+public class JulEventLogger implements EventLogger {",
                "+",
                "+    private final String logger;",
                "+    private final Level level;",
                "+    private final EventLayout layout;",
                "+",
                "+    public JulEventLogger(String logger, String level, EventLayout layout) {",
                "+        this.logger = logger;",
                "+        this.level = Level.parse(level.toUpperCase(Locale.ENGLISH));",
                "+        this.layout = layout;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void write(Event event) throws IOException {",
                "+        getLogger(event.type() + \".\" + event.subtype())",
                "+                .log(getLevel(event), layout.format(event).toString());",
                "+    }",
                "+",
                "+    protected Level getLevel(Event event) {",
                "+        return level;",
                "+    }",
                "+",
                "+    protected Logger getLogger(String t) {",
                "+        return Logger.getLogger(this.logger + \".\" + t);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void flush() throws IOException {",
                "+    }",
                "+",
                "+    @Override",
                "+    public void close() throws IOException {",
                "+    }",
                "+}",
                "diff --git a/audit/src/main/java/org/apache/karaf/audit/logger/TcpEventLogger.java b/audit/src/main/java/org/apache/karaf/audit/logger/TcpEventLogger.java",
                "new file mode 100644",
                "index 0000000000..b5fbef883a",
                "--- /dev/null",
                "+++ b/audit/src/main/java/org/apache/karaf/audit/logger/TcpEventLogger.java",
                "@@ -0,0 +1,67 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.karaf.audit.logger;",
                "+",
                "+import org.apache.karaf.audit.Event;",
                "+import org.apache.karaf.audit.EventLayout;",
                "+import org.apache.karaf.audit.EventLogger;",
                "+",
                "+import java.io.BufferedWriter;",
                "+import java.io.IOException;",
                "+import java.io.OutputStreamWriter;",
                "+import java.net.Socket;",
                "+import java.nio.charset.Charset;",
                "+",
                "+public class TcpEventLogger implements EventLogger {",
                "+",
                "+    private final String host;",
                "+    private final int port;",
                "+    private final Charset encoding;",
                "+    private final EventLayout layout;",
                "+    private BufferedWriter writer;",
                "+",
                "+    public TcpEventLogger(String host, int port, String encoding, EventLayout layout) throws IOException {",
                "+        this.host = host;",
                "+        this.port = port;",
                "+        this.encoding = Charset.forName(encoding);",
                "+        this.layout = layout;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void write(Event event) throws IOException {",
                "+        if (writer == null) {",
                "+            Socket socket = new Socket(host, port);",
                "+            this.writer = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream(), encoding));",
                "+        }",
                "+        layout.format(event, writer);",
                "+        writer.append(\"\\n\");",
                "+    }",
                "+",
                "+    @Override",
                "+    public void close() throws IOException {",
                "+        if (writer != null) {",
                "+            writer.close();",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public void flush() throws IOException {",
                "+        if (writer != null) {",
                "+            writer.flush();",
                "+        }",
                "+    }",
                "+}",
                "diff --git a/audit/src/main/java/org/apache/karaf/audit/logger/UdpEventLogger.java b/audit/src/main/java/org/apache/karaf/audit/logger/UdpEventLogger.java",
                "new file mode 100644",
                "index 0000000000..c4e8a3a243",
                "--- /dev/null",
                "+++ b/audit/src/main/java/org/apache/karaf/audit/logger/UdpEventLogger.java",
                "@@ -0,0 +1,84 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.karaf.audit.logger;",
                "+",
                "+import org.apache.karaf.audit.Event;",
                "+import org.apache.karaf.audit.EventLayout;",
                "+import org.apache.karaf.audit.EventLogger;",
                "+",
                "+import java.io.IOException;",
                "+import java.net.DatagramPacket;",
                "+import java.net.DatagramSocket;",
                "+import java.net.InetAddress;",
                "+import java.net.SocketException;",
                "+import java.net.UnknownHostException;",
                "+import java.nio.ByteBuffer;",
                "+import java.nio.CharBuffer;",
                "+import java.nio.charset.Charset;",
                "+import java.nio.charset.CharsetEncoder;",
                "+",
                "+public class UdpEventLogger implements EventLogger {",
                "+",
                "+    private final InetAddress host;",
                "+    private final int port;",
                "+    private final CharsetEncoder encoder;",
                "+    private final EventLayout layout;",
                "+    private final DatagramSocket dgram;",
                "+",
                "+    private ByteBuffer bb = ByteBuffer.allocate(1024);",
                "+",
                "+    public UdpEventLogger(String host, int port, String encoding, EventLayout layout) throws SocketException, UnknownHostException {",
                "+        this.layout = layout;",
                "+        this.host = InetAddress.getByName(host);",
                "+        this.port = port;",
                "+        this.encoder = Charset.forName(encoding).newEncoder();",
                "+        this.dgram = new DatagramSocket();",
                "+    }",
                "+",
                "+    @Override",
                "+    public void write(Event event) throws IOException {",
                "+        CharBuffer cb = layout.format(event);",
                "+        int cap = (int) (cb.remaining() * encoder.averageBytesPerChar());",
                "+        ByteBuffer bb;",
                "+        if (this.bb.capacity() > cap) {",
                "+            bb = this.bb;",
                "+        } else {",
                "+            bb = ByteBuffer.allocate(cap);",
                "+        }",
                "+        encoder.reset();",
                "+        encoder.encode(cb, bb, true);",
                "+        if (cb.remaining() > 0) {",
                "+            bb = ByteBuffer.allocate(bb.capacity() * 2);",
                "+            cb.position(0);",
                "+            encoder.reset();",
                "+            encoder.encode(cb, bb, true);",
                "+        }",
                "+",
                "+        dgram.send(new DatagramPacket(bb.array(), 0, bb.position(), host, port));",
                "+        bb.position(0);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void flush() throws IOException {",
                "+    }",
                "+",
                "+    @Override",
                "+    public void close() throws IOException {",
                "+        dgram.close();",
                "+    }",
                "+",
                "+}",
                "diff --git a/audit/src/main/java/org/apache/karaf/audit/util/Buffer.java b/audit/src/main/java/org/apache/karaf/audit/util/Buffer.java",
                "new file mode 100644",
                "index 0000000000..87793570f6",
                "--- /dev/null",
                "+++ b/audit/src/main/java/org/apache/karaf/audit/util/Buffer.java",
                "@@ -0,0 +1,306 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.karaf.audit.util;",
                "+",
                "+import org.apache.karaf.jaas.boot.principal.ClientPrincipal;",
                "+import org.apache.karaf.jaas.boot.principal.UserPrincipal;",
                "+",
                "+import javax.security.auth.Subject;",
                "+import java.io.IOException;",
                "+import java.io.Writer;",
                "+import java.security.Principal;",
                "+",
                "+public final class Buffer implements Appendable, CharSequence {",
                "+",
                "+    public enum Format {",
                "+        Json, Syslog",
                "+    }",
                "+",
                "+    private static final char[] HEX_DIGITS = { '0', '1', '2', '3', '4', '5', '6', '7',",
                "+                                       '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };",
                "+",
                "+    protected final Format format;",
                "+    protected final int capacity;",
                "+    protected char[] buffer;",
                "+    protected int position = 0;",
                "+",
                "+    public Buffer(Format format) {",
                "+        this(format, 1024);",
                "+    }",
                "+",
                "+    public Buffer(Format format, int size) {",
                "+        this.format = format;",
                "+        this.capacity = size;",
                "+        this.buffer = new char[size];",
                "+    }",
                "+",
                "+    public char[] buffer() {",
                "+        return buffer;",
                "+    }",
                "+",
                "+    public int position() {",
                "+        return position;",
                "+    }",
                "+",
                "+    public void clear() {",
                "+        position = 0;",
                "+        if (this.buffer.length > capacity) {",
                "+            this.buffer = new char[capacity];",
                "+        }",
                "+    }",
                "+",
                "+    public String toString() {",
                "+        return new String(buffer, 0, position);",
                "+    }",
                "+",
                "+    public void writeTo(Appendable out) throws IOException {",
                "+        if (out instanceof Writer) {",
                "+            ((Writer) out).write(buffer, 0, position);",
                "+        } else if (out instanceof StringBuilder) {",
                "+            ((StringBuilder) out).append(buffer, 0, position);",
                "+        } else {",
                "+            out.append(this);",
                "+        }",
                "+    }",
                "+",
                "+    private final void require(int nb) {",
                "+        if (position + nb >= buffer.length) {",
                "+            char[] b = new char[buffer.length * 2];",
                "+            System.arraycopy(buffer, 0, b, 0, position);",
                "+            buffer = b;",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public Buffer append(CharSequence csq) throws IOException {",
                "+        return append(csq, 0, csq.length());",
                "+    }",
                "+",
                "+    @Override",
                "+    public Buffer append(CharSequence csq, int start, int end) throws IOException {",
                "+        if (csq instanceof String) {",
                "+            return append((String) csq, start, end);",
                "+        } else {",
                "+            require(end - start);",
                "+            for (int i = start; i < end; i++) {",
                "+                buffer[position++] = csq.charAt(i);",
                "+            }",
                "+            return this;",
                "+        }",
                "+    }",
                "+",
                "+    public Buffer append(String str) throws IOException {",
                "+        return append(str, 0, str.length());",
                "+    }",
                "+",
                "+    public Buffer append(String str, int start, int end) throws IOException {",
                "+        int nb = end - start;",
                "+        require(nb);",
                "+        str.getChars(start, end, buffer, position);",
                "+        position += nb;",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public Buffer append(char c) throws IOException {",
                "+        require(1);",
                "+        buffer[position++] = c;",
                "+        return this;",
                "+    }",
                "+",
                "+    @Override",
                "+    public int length() {",
                "+        return position;",
                "+    }",
                "+",
                "+    @Override",
                "+    public char charAt(int index) {",
                "+        return buffer[index];",
                "+    }",
                "+",
                "+    @Override",
                "+    public CharSequence subSequence(int start, int end) {",
                "+        return new String(buffer, start, end);",
                "+    }",
                "+",
                "+    public Buffer format(Object object) throws IOException {",
                "+        if (object == null) {",
                "+            require(4);",
                "+            buffer[position++] = 'n';",
                "+            buffer[position++] = 'u';",
                "+            buffer[position++] = 'l';",
                "+            buffer[position++] = 'l';",
                "+            return this;",
                "+        } else if (object.getClass().isArray()) {",
                "+            return format((Object[]) object);",
                "+        } else if (object instanceof Subject) {",
                "+            return format((Subject) object);",
                "+        } else {",
                "+            return format(object.toString());",
                "+        }",
                "+    }",
                "+",
                "+    public Buffer format(Object[] array) throws IOException {",
                "+        require(array.length * 10);",
                "+        buffer[position++] = '[';",
                "+        for (int i = 0; i < array.length; i++) {",
                "+            if (i > 0) {",
                "+                buffer[position++] = ',';",
                "+                buffer[position++] = ' ';",
                "+            }",
                "+            format(array[i]);",
                "+        }",
                "+        if (format == Format.Syslog) {",
                "+            buffer[position++] = '\\\\';",
                "+        }",
                "+        buffer[position++] = ']';",
                "+        return this;",
                "+    }",
                "+",
                "+    public Buffer format(Subject subject) throws IOException {",
                "+        String up = null;",
                "+        String cp = null;",
                "+        for (Principal p : subject.getPrincipals()) {",
                "+            if (p instanceof UserPrincipal) {",
                "+                up = p.getName();",
                "+            } else if (p instanceof ClientPrincipal) {",
                "+                cp = p.getName();",
                "+            }",
                "+        }",
                "+        if (up != null) {",
                "+            append(up);",
                "+        } else {",
                "+            append('?');",
                "+        }",
                "+        if (cp != null) {",
                "+            append('@');",
                "+            append(cp);",
                "+        }",
                "+        return this;",
                "+    }",
                "+",
                "+    public Buffer format(String cs) throws IOException {",
                "+        switch (format) {",
                "+            case Json:",
                "+                formatJson(cs);",
                "+                break;",
                "+            case Syslog:",
                "+                formatSyslog(cs);",
                "+                break;",
                "+        }",
                "+        return this;",
                "+    }",
                "+",
                "+    public Buffer format(int i) throws IOException {",
                "+        require(11);",
                "+        position = NumberOutput.outputInt(i, buffer, position);",
                "+        return this;",
                "+    }",
                "+",
                "+    public Buffer format(long i) throws IOException {",
                "+        require(20);",
                "+        position = NumberOutput.outputLong(i, buffer, position);",
                "+        return this;",
                "+    }",
                "+",
                "+    private void formatJson(String value) throws IOException {",
                "+        int len = value.length();",
                "+        require(len * 4);",
                "+        position = transferJson(position, buffer, value, 0, len);",
                "+    }",
                "+",
                "+    private void formatSyslog(String value) throws IOException {",
                "+        int end = value.length();",
                "+        int max = Math.min(end, 255);",
                "+        require(max * 4);",
                "+        position = transferSyslog(position, buffer, value, 0, max);",
                "+        if (end > max) {",
                "+            require(3);",
                "+            buffer[position++] = '.';",
                "+            buffer[position++] = '.';",
                "+            buffer[position++] = '.';",
                "+        }",
                "+    }",
                "+",
                "+    private int transferJson(int position, char[] d, String s, int start, int end) {",
                "+        for (int i = start; i < end; i++) {",
                "+            char c = s.charAt(i);",
                "+            switch (c) {",
                "+                case '\\\"':",
                "+                    d[position++] = '\\\\';",
                "+                    d[position++] = '\"';",
                "+                    break;",
                "+                case '\\\\':",
                "+                    d[position++] = '\\\\';",
                "+                    d[position++] = '\\\\';",
                "+                    break;",
                "+                case '\\b':",
                "+                    d[position++] = '\\\\';",
                "+                    d[position++] = 'b';",
                "+                    break;",
                "+                case '\\f':",
                "+                    d[position++] = '\\\\';",
                "+                    d[position++] = 'f';",
                "+                    break;",
                "+                case '\\n':",
                "+                    d[position++] = '\\\\';",
                "+                    d[position++] = 'n';",
                "+                    break;",
                "+                case '\\r':",
                "+                    d[position++] = '\\\\';",
                "+                    d[position++] = 'r';",
                "+                    break;",
                "+                case '\\t':",
                "+                    d[position++] = '\\\\';",
                "+                    d[position++] = 't';",
                "+                    break;",
                "+                default:",
                "+                    if (c < ' ' || (c >= '\\u0080' && c < '\\u00a0') || (c >= '\\u2000' && c < '\\u2100')) {",
                "+                        d[position++] = '\\\\';",
                "+                        d[position++] = 'u';",
                "+                        d[position++] = HEX_DIGITS[c >> 12];",
                "+                        d[position++] = HEX_DIGITS[(c >> 8) & 0x0F];",
                "+                        d[position++] = HEX_DIGITS[(c >> 4) & 0x0F];",
                "+                        d[position++] = HEX_DIGITS[c & 0x0F];",
                "+                    } else {",
                "+                        d[position++] = c;",
                "+                    }",
                "+                    break;",
                "+            }",
                "+        }",
                "+        return position;",
                "+    }",
                "+",
                "+    private int transferSyslog(int position, char[] d, String s, int start, int end) {",
                "+        for (int i = start; i < end; i++) {",
                "+            char c = s.charAt(i);",
                "+            switch (c) {",
                "+                case '\"':",
                "+                case '\\\\':",
                "+                case ']':",
                "+                    d[position++] = '\\\\';",
                "+                    d[position++] = c;",
                "+                    break;",
                "+                default:",
                "+                    d[position++] = c;",
                "+                    break;",
                "+            }",
                "+        }",
                "+        return position;",
                "+    }",
                "+",
                "+}",
                "diff --git a/audit/src/main/java/org/apache/karaf/audit/util/FastDateFormat.java b/audit/src/main/java/org/apache/karaf/audit/util/FastDateFormat.java",
                "new file mode 100644",
                "index 0000000000..968e4a77a2",
                "--- /dev/null",
                "+++ b/audit/src/main/java/org/apache/karaf/audit/util/FastDateFormat.java",
                "@@ -0,0 +1,175 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.karaf.audit.util;",
                "+",
                "+import java.io.IOException;",
                "+import java.text.DateFormat;",
                "+import java.text.FieldPosition;",
                "+import java.text.SimpleDateFormat;",
                "+import java.util.Arrays;",
                "+import java.util.Calendar;",
                "+import java.util.Date;",
                "+import java.util.HashMap;",
                "+import java.util.Locale;",
                "+import java.util.Map;",
                "+import java.util.TimeZone;",
                "+import java.util.concurrent.TimeUnit;",
                "+",
                "+public class FastDateFormat {",
                "+",
                "+    public static final String YYYY_MM_DD = \"yyyy-MM-dd\";",
                "+    public static final String MMM_D2 = \"MMM d2\";",
                "+    public static final String XXX = \"XXX\";",
                "+",
                "+    private final TimeZone timeZone;",
                "+    private final Locale locale;",
                "+    private long midnightTomorrow;",
                "+    private long midnightToday;",
                "+    private final int[] dstOffsets = new int[25];",
                "+",
                "+    private Map<String, String> cache = new HashMap<>();",
                "+",
                "+    public FastDateFormat() {",
                "+        this(TimeZone.getDefault(), Locale.ENGLISH);",
                "+    }",
                "+",
                "+    public FastDateFormat(TimeZone timeZone, Locale locale) {",
                "+        this.timeZone = timeZone;",
                "+        this.locale = locale;",
                "+    }",
                "+",
                "+    /**",
                "+     * Check whether the given instant if in the same day as the previous one.",
                "+     */",
                "+    public boolean sameDay(long now) {",
                "+        if (now >= midnightTomorrow || now < midnightToday) {",
                "+            updateMidnightMillis(now);",
                "+            updateDaylightSavingTime();",
                "+            cache.clear();",
                "+            return false;",
                "+        } else {",
                "+            return true;",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * Get the date formatted with the given pattern.",
                "+     */",
                "+    public String getDate(long now, String pattern) {",
                "+        sameDay(now);",
                "+        String date = cache.get(pattern);",
                "+        if (date == null) {",
                "+            if (MMM_D2.equals(pattern)) {",
                "+                StringBuffer sb = new StringBuffer();",
                "+                FieldPosition fp = new FieldPosition(DateFormat.Field.DAY_OF_MONTH);",
                "+                new SimpleDateFormat(\"MMM dd\", locale).format(new Date(now), sb, fp);",
                "+                if (sb.charAt(fp.getBeginIndex()) == '0') {",
                "+                    sb.setCharAt(fp.getBeginIndex(), ' ');",
                "+                }",
                "+                date = sb.toString();",
                "+            } else {",
                "+                date = new SimpleDateFormat(pattern, locale).format(new Date(now));",
                "+            }",
                "+            cache.put(pattern, date);",
                "+        }",
                "+        return date;",
                "+    }",
                "+",
                "+    /**",
                "+     * Write the time in the HH:MM:SS[.sss] format to the given <code>Appendable</code>.",
                "+     */",
                "+    public void writeTime(long now, boolean writeMillis, Appendable buffer) throws IOException {",
                "+        int ms = millisSinceMidnight(now);",
                "+",
                "+        final int hourOfDay = ms / 3600000;",
                "+        final int hours = hourOfDay + daylightSavingTime(hourOfDay) / 3600000;",
                "+        ms -= 3600000 * hourOfDay;",
                "+",
                "+        final int minutes = ms / 60000;",
                "+        ms -= 60000 * minutes;",
                "+",
                "+        final int seconds = ms / 1000;",
                "+        ms -= 1000 * seconds;",
                "+",
                "+        // Hour",
                "+        int temp = hours / 10;",
                "+        buffer.append((char) (temp + '0'));",
                "+        buffer.append ((char) (hours - 10 * temp + '0'));",
                "+        buffer.append(':');",
                "+",
                "+        // Minute",
                "+        temp = minutes / 10;",
                "+        buffer.append((char) (temp + '0'));",
                "+        buffer.append((char) (minutes - 10 * temp + '0'));",
                "+        buffer.append(':');",
                "+",
                "+        // Second",
                "+        temp = seconds / 10;",
                "+        buffer.append((char) (temp + '0'));",
                "+        buffer.append((char) (seconds - 10 * temp + '0'));",
                "+",
                "+        // Millisecond",
                "+        if (writeMillis) {",
                "+            buffer.append('.');",
                "+            temp = ms / 100;",
                "+            buffer.append((char) (temp + '0'));",
                "+            ms -= 100 * temp;",
                "+            temp = ms / 10;",
                "+            buffer.append((char) (temp + '0'));",
                "+            ms -= 10 * temp;",
                "+            buffer.append((char) (ms + '0'));",
                "+        }",
                "+    }",
                "+",
                "+    private int millisSinceMidnight(final long now) {",
                "+        sameDay(now);",
                "+        return (int) (now - midnightToday);",
                "+    }",
                "+",
                "+    private int daylightSavingTime(final int hourOfDay) {",
                "+        return hourOfDay > 23 ? dstOffsets[23] : dstOffsets[hourOfDay];",
                "+    }",
                "+",
                "+    private void updateMidnightMillis(final long now) {",
                "+        final Calendar cal = Calendar.getInstance(timeZone);",
                "+        cal.setTimeInMillis(now);",
                "+        cal.set(Calendar.HOUR_OF_DAY, 0);",
                "+        cal.set(Calendar.MINUTE, 0);",
                "+        cal.set(Calendar.SECOND, 0);",
                "+        cal.set(Calendar.MILLISECOND, 0);",
                "+        midnightToday = cal.getTimeInMillis();",
                "+        cal.add(Calendar.DATE, 1);",
                "+        midnightTomorrow = cal.getTimeInMillis();",
                "+    }",
                "+",
                "+    private void updateDaylightSavingTime() {",
                "+        Arrays.fill(dstOffsets, 0);",
                "+        final int ONE_HOUR = (int) TimeUnit.HOURS.toMillis(1);",
                "+        if (timeZone.getOffset(midnightToday) != timeZone.getOffset(midnightToday + 23 * ONE_HOUR)) {",
                "+            for (int i = 0; i < dstOffsets.length; i++) {",
                "+                final long time = midnightToday + i * ONE_HOUR;",
                "+                dstOffsets[i] = timeZone.getOffset(time) - timeZone.getRawOffset();",
                "+            }",
                "+            if (dstOffsets[0] > dstOffsets[23]) { // clock is moved backwards.",
                "+                // we obtain midnightTonight with Calendar.getInstance(TimeZone), so it already includes raw offset",
                "+                for (int i = dstOffsets.length - 1; i >= 0; i--) {",
                "+                    dstOffsets[i] -= dstOffsets[0]; //",
                "+                }",
                "+            }",
                "+        }",
                "+    }",
                "+}",
                "diff --git a/audit/src/main/java/org/apache/karaf/audit/util/NumberOutput.java b/audit/src/main/java/org/apache/karaf/audit/util/NumberOutput.java",
                "new file mode 100644",
                "index 0000000000..28e5fb7238",
                "--- /dev/null",
                "+++ b/audit/src/main/java/org/apache/karaf/audit/util/NumberOutput.java",
                "@@ -0,0 +1,516 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.karaf.audit.util;",
                "+",
                "+/**",
                "+ * Code copied from org.codehaus.jackson.io.NumberOutput",
                "+ */",
                "+public final class NumberOutput",
                "+{",
                "+    private static int MILLION = 1000000;",
                "+    private static int BILLION = 1000000000;",
                "+    private static long BILLION_L = 1000000000L;",
                "+",
                "+    private static long MIN_INT_AS_LONG = (long) Integer.MIN_VALUE;",
                "+    private static long MAX_INT_AS_LONG = (long) Integer.MAX_VALUE;",
                "+",
                "+    final static String SMALLEST_INT = String.valueOf(Integer.MIN_VALUE);",
                "+    final static String SMALLEST_LONG = String.valueOf(Long.MIN_VALUE);",
                "+",
                "+    /**",
                "+     * Encoded representations of 3-decimal-digit indexed values, where",
                "+     * 3 LSB are ascii characters",
                "+     *",
                "+     * @since 2.8.2",
                "+     */",
                "+    private final static int[] TRIPLET_TO_CHARS = new int[1000];",
                "+",
                "+    static {",
                "+        /* Let's fill it with NULLs for ignorable leading digits,",
                "+         * and digit chars for others",
                "+         */",
                "+        int fullIx = 0;",
                "+        for (int i1 = 0; i1 < 10; ++i1) {",
                "+            for (int i2 = 0; i2 < 10; ++i2) {",
                "+                for (int i3 = 0; i3 < 10; ++i3) {",
                "+                    int enc = ((i1 + '0') << 16)",
                "+                            | ((i2 + '0') << 8)",
                "+                            | (i3 + '0');",
                "+                    TRIPLET_TO_CHARS[fullIx++] = enc;",
                "+                }",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+    private final static String[] sSmallIntStrs = new String[] {",
                "+            \"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\"",
                "+    };",
                "+    private final static String[] sSmallIntStrs2 = new String[] {",
                "+            \"-1\",\"-2\",\"-3\",\"-4\",\"-5\",\"-6\",\"-7\",\"-8\",\"-9\",\"-10\"",
                "+    };",
                "+",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Efficient serialization methods using raw buffers",
                "+    /**********************************************************",
                "+     */",
                "+",
                "+    /**",
                "+     * @return Offset within buffer after outputting int",
                "+     */",
                "+    public static int outputInt(int v, char[] b, int off)",
                "+    {",
                "+        if (v < 0) {",
                "+            if (v == Integer.MIN_VALUE) {",
                "+                // Special case: no matching positive value within range;",
                "+                // let's then \"upgrade\" to long and output as such.",
                "+                return _outputSmallestI(b, off);",
                "+            }",
                "+            b[off++] = '-';",
                "+            v = -v;",
                "+        }",
                "+",
                "+        if (v < MILLION) { // at most 2 triplets...",
                "+            if (v < 1000) {",
                "+                if (v < 10) {",
                "+                    b[off] = (char) ('0' + v);",
                "+                    return off+1;",
                "+                }",
                "+                return _leading3(v, b, off);",
                "+            }",
                "+            int thousands = v / 1000;",
                "+            v -= (thousands * 1000); // == value % 1000",
                "+            off = _leading3(thousands, b, off);",
                "+            off = _full3(v, b, off);",
                "+            return off;",
                "+        }",
                "+",
                "+        // ok, all 3 triplets included",
                "+        /* Let's first hand possible billions separately before",
                "+         * handling 3 triplets. This is possible since we know we",
                "+         * can have at most '2' as billion count.",
                "+         */",
                "+        if (v >= BILLION) {",
                "+            v -= BILLION;",
                "+            if (v >= BILLION) {",
                "+                v -= BILLION;",
                "+                b[off++] = '2';",
                "+            } else {",
                "+                b[off++] = '1';",
                "+            }",
                "+            return _outputFullBillion(v, b, off);",
                "+        }",
                "+        int newValue = v / 1000;",
                "+        int ones = (v - (newValue * 1000)); // == value % 1000",
                "+        v = newValue;",
                "+        newValue /= 1000;",
                "+        int thousands = (v - (newValue * 1000));",
                "+",
                "+        off = _leading3(newValue, b, off);",
                "+        off = _full3(thousands, b, off);",
                "+        return _full3(ones, b, off);",
                "+    }",
                "+",
                "+    public static int outputInt(int v, byte[] b, int off)",
                "+    {",
                "+        if (v < 0) {",
                "+            if (v == Integer.MIN_VALUE) {",
                "+                return _outputSmallestI(b, off);",
                "+            }",
                "+            b[off++] = '-';",
                "+            v = -v;",
                "+        }",
                "+",
                "+        if (v < MILLION) { // at most 2 triplets...",
                "+            if (v < 1000) {",
                "+                if (v < 10) {",
                "+                    b[off++] = (byte) ('0' + v);",
                "+                } else {",
                "+                    off = _leading3(v, b, off);",
                "+                }",
                "+            } else {",
                "+                int thousands = v / 1000;",
                "+                v -= (thousands * 1000); // == value % 1000",
                "+                off = _leading3(thousands, b, off);",
                "+                off = _full3(v, b, off);",
                "+            }",
                "+            return off;",
                "+        }",
                "+        if (v >= BILLION) {",
                "+            v -= BILLION;",
                "+            if (v >= BILLION) {",
                "+                v -= BILLION;",
                "+                b[off++] = '2';",
                "+            } else {",
                "+                b[off++] = '1';",
                "+            }",
                "+            return _outputFullBillion(v, b, off);",
                "+        }",
                "+        int newValue = v / 1000;",
                "+        int ones = (v - (newValue * 1000)); // == value % 1000",
                "+        v = newValue;",
                "+        newValue /= 1000;",
                "+        int thousands = (v - (newValue * 1000));",
                "+        off = _leading3(newValue, b, off);",
                "+        off = _full3(thousands, b, off);",
                "+        return _full3(ones, b, off);",
                "+    }",
                "+",
                "+    /**",
                "+     * @return Offset within buffer after outputting int",
                "+     */",
                "+    public static int outputLong(long v, char[] b, int off)",
                "+    {",
                "+        // First: does it actually fit in an int?",
                "+        if (v < 0L) {",
                "+            if (v > MIN_INT_AS_LONG) {",
                "+                return outputInt((int) v, b, off);",
                "+            }",
                "+            if (v == Long.MIN_VALUE) {",
                "+                return _outputSmallestL(b, off);",
                "+            }",
                "+            b[off++] = '-';",
                "+            v = -v;",
                "+        } else {",
                "+            if (v <= MAX_INT_AS_LONG) {",
                "+                return outputInt((int) v, b, off);",
                "+            }",
                "+        }",
                "+",
                "+        // Ok, let's separate last 9 digits (3 x full sets of 3)",
                "+        long upper = v / BILLION_L;",
                "+        v -= (upper * BILLION_L);",
                "+",
                "+        // two integers?",
                "+        if (upper < BILLION_L) {",
                "+            off = _outputUptoBillion((int) upper, b, off);",
                "+        } else {",
                "+            // no, two ints and bits; hi may be about 16 or so",
                "+            long hi = upper / BILLION_L;",
                "+            upper -= (hi * BILLION_L);",
                "+            off = _leading3((int) hi, b, off);",
                "+            off = _outputFullBillion((int) upper, b, off);",
                "+        }",
                "+        return _outputFullBillion((int) v, b, off);",
                "+    }",
                "+",
                "+    public static int outputLong(long v, byte[] b, int off)",
                "+    {",
                "+        if (v < 0L) {",
                "+            if (v > MIN_INT_AS_LONG) {",
                "+                return outputInt((int) v, b, off);",
                "+            }",
                "+            if (v == Long.MIN_VALUE) {",
                "+                return _outputSmallestL(b, off);",
                "+            }",
                "+            b[off++] = '-';",
                "+            v = -v;",
                "+        } else {",
                "+            if (v <= MAX_INT_AS_LONG) {",
                "+                return outputInt((int) v, b, off);",
                "+            }",
                "+        }",
                "+",
                "+        // Ok, let's separate last 9 digits (3 x full sets of 3)",
                "+        long upper = v / BILLION_L;",
                "+        v -= (upper * BILLION_L);",
                "+",
                "+        // two integers?",
                "+        if (upper < BILLION_L) {",
                "+            off = _outputUptoBillion((int) upper, b, off);",
                "+        } else {",
                "+            // no, two ints and bits; hi may be about 16 or so",
                "+            long hi = upper / BILLION_L;",
                "+            upper -= (hi * BILLION_L);",
                "+            off = _leading3((int) hi, b, off);",
                "+            off = _outputFullBillion((int) upper, b, off);",
                "+        }",
                "+        return _outputFullBillion((int) v, b, off);",
                "+    }",
                "+",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Convenience serialization methods",
                "+    /**********************************************************",
                "+     */",
                "+",
                "+    /* !!! 05-Aug-2008, tatus: Any ways to further optimize",
                "+     *   these? (or need: only called by diagnostics methods?)",
                "+     */",
                "+    public static String toString(int v)",
                "+    {",
                "+        // Lookup table for small values",
                "+        if (v < sSmallIntStrs.length) {",
                "+            if (v >= 0) {",
                "+                return sSmallIntStrs[v];",
                "+            }",
                "+            int v2 = -v - 1;",
                "+            if (v2 < sSmallIntStrs2.length) {",
                "+                return sSmallIntStrs2[v2];",
                "+            }",
                "+        }",
                "+        return Integer.toString(v);",
                "+    }",
                "+",
                "+    public static String toString(long v) {",
                "+        if (v <= Integer.MAX_VALUE && v >= Integer.MIN_VALUE) {",
                "+            return toString((int) v);",
                "+        }",
                "+        return Long.toString(v);",
                "+    }",
                "+",
                "+    public static String toString(double v) {",
                "+        return Double.toString(v);",
                "+    }",
                "+",
                "+    /**",
                "+     * @since 2.6.0",
                "+     */",
                "+    public static String toString(float v) {",
                "+        return Float.toString(v);",
                "+    }",
                "+",
                "+    /*",
                "+    /**********************************************************",
                "+    /* Internal helper methods",
                "+    /**********************************************************",
                "+     */",
                "+",
                "+    private static int _outputUptoBillion(int v, char[] b, int off)",
                "+    {",
                "+        if (v < MILLION) { // at most 2 triplets...",
                "+            if (v < 1000) {",
                "+                return _leading3(v, b, off);",
                "+            }",
                "+            int thousands = v / 1000;",
                "+            int ones = v - (thousands * 1000); // == value % 1000",
                "+            return _outputUptoMillion(b, off, thousands, ones);",
                "+        }",
                "+        int thousands = v / 1000;",
                "+        int ones = (v - (thousands * 1000)); // == value % 1000",
                "+        int millions = thousands / 1000;",
                "+        thousands -= (millions * 1000);",
                "+",
                "+        off = _leading3(millions, b, off);",
                "+",
                "+        int enc = TRIPLET_TO_CHARS[thousands];",
                "+        b[off++] = (char) (enc >> 16);",
                "+        b[off++] = (char) ((enc >> 8) & 0x7F);",
                "+        b[off++] = (char) (enc & 0x7F);",
                "+",
                "+        enc = TRIPLET_TO_CHARS[ones];",
                "+        b[off++] = (char) (enc >> 16);",
                "+        b[off++] = (char) ((enc >> 8) & 0x7F);",
                "+        b[off++] = (char) (enc & 0x7F);",
                "+",
                "+        return off;",
                "+    }",
                "+",
                "+    private static int _outputFullBillion(int v, char[] b, int off)",
                "+    {",
                "+        int thousands = v / 1000;",
                "+        int ones = (v - (thousands * 1000)); // == value % 1000",
                "+        int millions = thousands / 1000;",
                "+",
                "+        int enc = TRIPLET_TO_CHARS[millions];",
                "+        b[off++] = (char) (enc >> 16);",
                "+        b[off++] = (char) ((enc >> 8) & 0x7F);",
                "+        b[off++] = (char) (enc & 0x7F);",
                "+",
                "+        thousands -= (millions * 1000);",
                "+        enc = TRIPLET_TO_CHARS[thousands];",
                "+        b[off++] = (char) (enc >> 16);",
                "+        b[off++] = (char) ((enc >> 8) & 0x7F);",
                "+        b[off++] = (char) (enc & 0x7F);",
                "+",
                "+        enc = TRIPLET_TO_CHARS[ones];",
                "+        b[off++] = (char) (enc >> 16);",
                "+        b[off++] = (char) ((enc >> 8) & 0x7F);",
                "+        b[off++] = (char) (enc & 0x7F);",
                "+",
                "+        return off;",
                "+    }",
                "+",
                "+    private static int _outputUptoBillion(int v, byte[] b, int off)",
                "+    {",
                "+        if (v < MILLION) { // at most 2 triplets...",
                "+            if (v < 1000) {",
                "+                return _leading3(v, b, off);",
                "+            }",
                "+            int thousands = v / 1000;",
                "+            int ones = v - (thousands * 1000); // == value % 1000",
                "+            return _outputUptoMillion(b, off, thousands, ones);",
                "+        }",
                "+        int thousands = v / 1000;",
                "+        int ones = (v - (thousands * 1000)); // == value % 1000",
                "+        int millions = thousands / 1000;",
                "+        thousands -= (millions * 1000);",
                "+",
                "+        off = _leading3(millions, b, off);",
                "+",
                "+        int enc = TRIPLET_TO_CHARS[thousands];",
                "+        b[off++] = (byte) (enc >> 16);",
                "+        b[off++] = (byte) (enc >> 8);",
                "+        b[off++] = (byte) enc;",
                "+",
                "+        enc = TRIPLET_TO_CHARS[ones];",
                "+        b[off++] = (byte) (enc >> 16);",
                "+        b[off++] = (byte) (enc >> 8);",
                "+        b[off++] = (byte) enc;",
                "+",
                "+        return off;",
                "+    }",
                "+",
                "+    private static int _outputFullBillion(int v, byte[] b, int off)",
                "+    {",
                "+        int thousands = v / 1000;",
                "+        int ones = (v - (thousands * 1000)); // == value % 1000",
                "+        int millions = thousands / 1000;",
                "+        thousands -= (millions * 1000);",
                "+",
                "+        int enc = TRIPLET_TO_CHARS[millions];",
                "+        b[off++] = (byte) (enc >> 16);",
                "+        b[off++] = (byte) (enc >> 8);",
                "+        b[off++] = (byte) enc;",
                "+",
                "+        enc = TRIPLET_TO_CHARS[thousands];",
                "+        b[off++] = (byte) (enc >> 16);",
                "+        b[off++] = (byte) (enc >> 8);",
                "+        b[off++] = (byte) enc;",
                "+",
                "+        enc = TRIPLET_TO_CHARS[ones];",
                "+        b[off++] = (byte) (enc >> 16);",
                "+        b[off++] = (byte) (enc >> 8);",
                "+        b[off++] = (byte) enc;",
                "+",
                "+        return off;",
                "+    }",
                "+",
                "+    private static int _outputUptoMillion(char[] b, int off, int thousands, int ones)",
                "+    {",
                "+        int enc = TRIPLET_TO_CHARS[thousands];",
                "+        if (thousands > 9) {",
                "+            if (thousands > 99) {",
                "+                b[off++] = (char) (enc >> 16);",
                "+            }",
                "+            b[off++] = (char) ((enc >> 8) & 0x7F);",
                "+        }",
                "+        b[off++] = (char) (enc & 0x7F);",
                "+        // and then full",
                "+        enc = TRIPLET_TO_CHARS[ones];",
                "+        b[off++] = (char) (enc >> 16);",
                "+        b[off++] = (char) ((enc >> 8) & 0x7F);",
                "+        b[off++] = (char) (enc & 0x7F);",
                "+        return off;",
                "+    }",
                "+",
                "+    private static int _outputUptoMillion(byte[] b, int off, int thousands, int ones)",
                "+    {",
                "+        int enc = TRIPLET_TO_CHARS[thousands];",
                "+        if (thousands > 9) {",
                "+            if (thousands > 99) {",
                "+                b[off++] = (byte) (enc >> 16);",
                "+            }",
                "+            b[off++] = (byte) (enc >> 8);",
                "+        }",
                "+        b[off++] = (byte) enc;",
                "+        // and then full",
                "+        enc = TRIPLET_TO_CHARS[ones];",
                "+        b[off++] = (byte) (enc >> 16);",
                "+        b[off++] = (byte) (enc >> 8);",
                "+        b[off++] = (byte) enc;",
                "+        return off;",
                "+    }",
                "+",
                "+    private static int _leading3(int t, char[] b, int off)",
                "+    {",
                "+        int enc = TRIPLET_TO_CHARS[t];",
                "+        if (t > 9) {",
                "+            if (t > 99) {",
                "+                b[off++] = (char) (enc >> 16);",
                "+            }",
                "+            b[off++] = (char) ((enc >> 8) & 0x7F);",
                "+        }",
                "+        b[off++] = (char) (enc & 0x7F);",
                "+        return off;",
                "+    }",
                "+",
                "+    private static int _leading3(int t, byte[] b, int off)",
                "+    {",
                "+        int enc = TRIPLET_TO_CHARS[t];",
                "+        if (t > 9) {",
                "+            if (t > 99) {",
                "+                b[off++] = (byte) (enc >> 16);",
                "+            }",
                "+            b[off++] = (byte) (enc >> 8);",
                "+        }",
                "+        b[off++] = (byte) enc;",
                "+        return off;",
                "+    }",
                "+",
                "+    private static int _full3(int t, char[] b, int off)",
                "+    {",
                "+        int enc = TRIPLET_TO_CHARS[t];",
                "+        b[off++] = (char) (enc >> 16);",
                "+        b[off++] = (char) ((enc >> 8) & 0x7F);",
                "+        b[off++] = (char) (enc & 0x7F);",
                "+        return off;",
                "+    }",
                "+",
                "+    private static int _full3(int t, byte[] b, int off)",
                "+    {",
                "+        int enc = TRIPLET_TO_CHARS[t];",
                "+        b[off++] = (byte) (enc >> 16);",
                "+        b[off++] = (byte) (enc >> 8);",
                "+        b[off++] = (byte) enc;",
                "+        return off;",
                "+    }",
                "+",
                "+    // // // Special cases for where we can not flip the sign bit",
                "+",
                "+    private static int _outputSmallestL(char[] b, int off)",
                "+    {",
                "+        int len = SMALLEST_LONG.length();",
                "+        SMALLEST_LONG.getChars(0, len, b, off);",
                "+        return (off + len);",
                "+    }",
                "+",
                "+    private static int _outputSmallestL(byte[] b, int off)",
                "+    {",
                "+        int len = SMALLEST_LONG.length();",
                "+        for (int i = 0; i < len; ++i) {",
                "+            b[off++] = (byte) SMALLEST_LONG.charAt(i);",
                "+        }",
                "+        return off;",
                "+    }",
                "+",
                "+    private static int _outputSmallestI(char[] b, int off)",
                "+    {",
                "+        int len = SMALLEST_INT.length();",
                "+        SMALLEST_INT.getChars(0, len, b, off);",
                "+        return (off + len);",
                "+    }",
                "+",
                "+    private static int _outputSmallestI(byte[] b, int off)",
                "+    {",
                "+        int len = SMALLEST_INT.length();",
                "+        for (int i = 0; i < len; ++i) {",
                "+            b[off++] = (byte) SMALLEST_INT.charAt(i);",
                "+        }",
                "+        return off;",
                "+    }",
                "+}",
                "diff --git a/pom.xml b/pom.xml",
                "index 215eb1109b..f09198e9d0 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -68,2 +68,3 @@",
                "         <module>services</module>",
                "+        <module>audit</module>",
                "         <module>subsystem</module>",
                "diff --git a/services/eventadmin/src/main/java/org/apache/felix/eventadmin/impl/Configuration.java b/services/eventadmin/src/main/java/org/apache/felix/eventadmin/impl/Configuration.java",
                "index 86631dd3d7..2bf1d6ae62 100644",
                "--- a/services/eventadmin/src/main/java/org/apache/felix/eventadmin/impl/Configuration.java",
                "+++ b/services/eventadmin/src/main/java/org/apache/felix/eventadmin/impl/Configuration.java",
                "@@ -453,3 +453,3 @@ public class Configuration",
                "     {",
                "-        m_adapters = new AbstractAdapter[4];",
                "+        m_adapters = new AbstractAdapter[3];",
                "         m_adapters[0] = new FrameworkEventAdapter(m_bundleContext, admin);",
                "@@ -457,3 +457,4 @@ public class Configuration",
                "         m_adapters[2] = new ServiceEventAdapter(m_bundleContext, admin);",
                "-        m_adapters[3] = new LogEventAdapter(m_bundleContext, admin);",
                "+        // KARAF: disable log events as they are published by PaxLogging",
                "+        //m_adapters[3] = new LogEventAdapter(m_bundleContext, admin);",
                "     }",
                "diff --git a/shell/core/src/main/java/org/apache/karaf/shell/impl/console/ConsoleSessionImpl.java b/shell/core/src/main/java/org/apache/karaf/shell/impl/console/ConsoleSessionImpl.java",
                "index e641f8f700..713b3ca01e 100644",
                "--- a/shell/core/src/main/java/org/apache/karaf/shell/impl/console/ConsoleSessionImpl.java",
                "+++ b/shell/core/src/main/java/org/apache/karaf/shell/impl/console/ConsoleSessionImpl.java",
                "@@ -78,2 +78,3 @@ import org.jline.terminal.Terminal.Signal;",
                " import org.jline.terminal.impl.DumbTerminal;",
                "+import org.osgi.service.event.EventAdmin;",
                " import org.slf4j.Logger;",
                "@@ -557,2 +558,3 @@ public class ConsoleSessionImpl implements Session {",
                "     private void doExecuteScript(Path scriptFileName) {",
                "+        Object oldScript = session.put(\"script\", Paths.get(System.getProperty(\"karaf.home\")).relativize(scriptFileName));",
                "         try {",
                "@@ -564,2 +566,4 @@ public class ConsoleSessionImpl implements Session {",
                "             System.err.println(\"Error in initialization script: \" + scriptFileName + \": \" + e.getMessage());",
                "+        } finally {",
                "+            session.put(\"script\", oldScript);",
                "         }",
                "diff --git a/shell/core/src/main/java/org/apache/karaf/shell/impl/console/osgi/EventAdminListener.java b/shell/core/src/main/java/org/apache/karaf/shell/impl/console/osgi/EventAdminListener.java",
                "index ec249a2d49..0e7fd06f9a 100644",
                "--- a/shell/core/src/main/java/org/apache/karaf/shell/impl/console/osgi/EventAdminListener.java",
                "+++ b/shell/core/src/main/java/org/apache/karaf/shell/impl/console/osgi/EventAdminListener.java",
                "@@ -50,3 +50,3 @@ public class EventAdminListener implements CommandSessionListener, Closeable",
                "     public void afterExecute(CommandSession session, CharSequence command, Exception exception) {",
                "-        sendEvent(command, null, exception);",
                "+        sendEvent(session, command, null, exception);",
                "     }",
                "@@ -54,20 +54,23 @@ public class EventAdminListener implements CommandSessionListener, Closeable",
                "     public void afterExecute(CommandSession session, CharSequence command, Object result) {",
                "-        sendEvent(command, result, null);",
                "+        sendEvent(session, command, result, null);",
                "     }",
                "-    private void sendEvent(CharSequence command, Object result, Exception exception) {",
                "-        if (command.toString().trim().length() > 0) {",
                "-            EventAdmin admin = tracker.getService();",
                "-            if (admin != null) {",
                "-                Map<String, Object> props = new HashMap<>();",
                "+    private void sendEvent(CommandSession session, CharSequence command, Object result, Exception exception) {",
                "+        EventAdmin admin = tracker.getService();",
                "+        if (admin != null) {",
                "+            Map<String, Object> props = new HashMap<>();",
                "+            Object script = session.get(\"script\");",
                "+            if (script != null) {",
                "+                props.put(\"script\", script.toString());",
                "+            } else if (command.toString().trim().length() > 0) {",
                "                 props.put(\"command\", command.toString());",
                "-                if (result != null) {",
                "-                    props.put(\"result\", result);",
                "-                }",
                "-                if (exception != null) {",
                "-                    props.put(\"exception\", exception);",
                "-                }",
                "-                Event event = new Event(\"org/apache/karaf/shell/console/EXECUTED\", props);",
                "-                admin.postEvent(event);",
                "             }",
                "+            if (result != null) {",
                "+                props.put(\"result\", result);",
                "+            }",
                "+            if (exception != null) {",
                "+                props.put(\"exception\", exception);",
                "+            }",
                "+            Event event = new Event(\"org/apache/karaf/shell/console/EXECUTED\", props);",
                "+            admin.postEvent(event);",
                "         }"
            ],
            "changed_files": [
                "assemblies/features/base/src/main/resources/resources/etc/org.ops4j.pax.logging.cfg",
                "assemblies/features/standard/src/main/feature/feature.xml",
                "audit/pom.xml",
                "audit/src/main/java/org/apache/karaf/audit/Activator.java",
                "audit/src/main/java/org/apache/karaf/audit/Event.java",
                "audit/src/main/java/org/apache/karaf/audit/EventLayout.java",
                "audit/src/main/java/org/apache/karaf/audit/EventLogger.java",
                "audit/src/main/java/org/apache/karaf/audit/layout/AbstractLayout.java",
                "audit/src/main/java/org/apache/karaf/audit/layout/GelfLayout.java",
                "audit/src/main/java/org/apache/karaf/audit/layout/Rfc3164Layout.java",
                "audit/src/main/java/org/apache/karaf/audit/layout/Rfc5424Layout.java",
                "audit/src/main/java/org/apache/karaf/audit/layout/SimpleLayout.java",
                "audit/src/main/java/org/apache/karaf/audit/logger/FileEventLogger.java",
                "audit/src/main/java/org/apache/karaf/audit/logger/JulEventLogger.java",
                "audit/src/main/java/org/apache/karaf/audit/logger/TcpEventLogger.java",
                "audit/src/main/java/org/apache/karaf/audit/logger/UdpEventLogger.java",
                "audit/src/main/java/org/apache/karaf/audit/util/Buffer.java",
                "audit/src/main/java/org/apache/karaf/audit/util/FastDateFormat.java",
                "audit/src/main/java/org/apache/karaf/audit/util/NumberOutput.java",
                "pom.xml",
                "services/eventadmin/src/main/java/org/apache/felix/eventadmin/impl/Configuration.java",
                "shell/core/src/main/java/org/apache/karaf/shell/impl/console/ConsoleSessionImpl.java",
                "shell/core/src/main/java/org/apache/karaf/shell/impl/console/osgi/EventAdminListener.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5475": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: file",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: service, file, console, number",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5475",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e21ba2b0a5a48b94d16aa15f7aabbafc12829a72",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1510247999,
            "hunks": 5,
            "message": "[KARAF-5476] Reduce number of logins when using the webconsole",
            "diff": [
                "diff --git a/webconsole/console/src/main/java/org/apache/felix/webconsole/internal/servlet/JaasSecurityProvider.java b/webconsole/console/src/main/java/org/apache/felix/webconsole/internal/servlet/JaasSecurityProvider.java",
                "index e7ea339ba2..fd2cc9db35 100644",
                "--- a/webconsole/console/src/main/java/org/apache/felix/webconsole/internal/servlet/JaasSecurityProvider.java",
                "+++ b/webconsole/console/src/main/java/org/apache/felix/webconsole/internal/servlet/JaasSecurityProvider.java",
                "@@ -35,2 +35,3 @@ import javax.servlet.http.HttpServletRequest;",
                " import javax.servlet.http.HttpServletResponse;",
                "+import javax.servlet.http.HttpSession;",
                "@@ -54,2 +55,3 @@ public class JaasSecurityProvider implements WebConsoleSecurityProvider2, Manage",
                "     private String role;",
                "+    private int sessionTimeout;",
                "@@ -87,2 +89,3 @@ public class JaasSecurityProvider implements WebConsoleSecurityProvider2, Manage",
                "         role = getString(properties, \"role\", System.getProperty(\"karaf.admin.role\", \"admin\"));",
                "+        sessionTimeout = Integer.parseInt(getString(properties, \"sessionTimeout\", \"0\"));",
                "     }",
                "@@ -179,3 +182,19 @@ public class JaasSecurityProvider implements WebConsoleSecurityProvider2, Manage",
                "                         // authenticate",
                "-                        Subject subject = doAuthenticate( username, password );",
                "+                        Subject subject = null;",
                "+                        try",
                "+                        {",
                "+                            HttpSession session = request.getSession(false);",
                "+                            if ( session != null )",
                "+                            {",
                "+                                subject = (Subject) session.getAttribute( KarafOsgiManager.SUBJECT_RUN_AS );",
                "+                            }",
                "+                        }",
                "+                        catch ( Throwable t )",
                "+                        {",
                "+                            // ignore",
                "+                        }",
                "+                        if ( subject == null )",
                "+                        {",
                "+                            subject = doAuthenticate(username, password);",
                "+                        }",
                "                         if ( subject != null )",
                "@@ -192,2 +211,17 @@ public class JaasSecurityProvider implements WebConsoleSecurityProvider2, Manage",
                "+                            // create a session and store the information",
                "+                            try",
                "+                            {",
                "+                                HttpSession session = request.getSession(true);",
                "+                                if (sessionTimeout != 0)",
                "+                                {",
                "+                                    session.setMaxInactiveInterval(sessionTimeout);",
                "+                                }",
                "+                                session.setAttribute( KarafOsgiManager.SUBJECT_RUN_AS, subject );",
                "+                            }",
                "+                            catch ( Throwable t )",
                "+                            {",
                "+                                // ignore",
                "+                            }",
                "+",
                "                             // succeed"
            ],
            "changed_files": [
                "webconsole/console/src/main/java/org/apache/felix/webconsole/internal/servlet/JaasSecurityProvider.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5476": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: console, number",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: console, security",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5476",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c77fe2caeec94e151922f196d2e21febe0c1e5b8",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1507735857,
            "hunks": 3,
            "message": "[KARAF-5396] Fix instance starting on java 9",
            "diff": [
                "diff --git a/instance/src/main/java/org/apache/karaf/instance/core/internal/InstanceServiceImpl.java b/instance/src/main/java/org/apache/karaf/instance/core/internal/InstanceServiceImpl.java",
                "index ba299d524a..e3865957ec 100644",
                "--- a/instance/src/main/java/org/apache/karaf/instance/core/internal/InstanceServiceImpl.java",
                "+++ b/instance/src/main/java/org/apache/karaf/instance/core/internal/InstanceServiceImpl.java",
                "@@ -490,2 +490,19 @@ public class InstanceServiceImpl implements InstanceService {",
                "+        String jdkOpts;",
                "+        if (!System.getProperty(\"java.version\").startsWith(\"1.\")) {",
                "+            jdkOpts = \" --add-opens java.base/java.security=ALL-UNNAMED\" +",
                "+                      \" --add-opens java.base/java.net=ALL-UNNAMED\" +",
                "+                      \" --add-opens java.base/java.lang=ALL-UNNAMED\" +",
                "+                      \" --add-opens java.base/java.util=ALL-UNNAMED\" +",
                "+                      \" --add-exports=java.base/sun.net.www.protocol.http=ALL-UNNAMED\" +",
                "+                      \" --add-exports=java.base/sun.net.www.protocol.https=ALL-UNNAMED\" +",
                "+                      \" --add-exports=java.base/sun.net.www.protocol.jar=ALL-UNNAMED\" +",
                "+                      \" --add-exports=java.xml.bind/com.sun.xml.internal.bind.v2.runtime=ALL-UNNAMED\" +",
                "+                      \" --add-exports=jdk.xml.dom/org.w3c.dom.html=ALL-UNNAMED\" +",
                "+                      \" --add-exports=jdk.naming.rmi/com.sun.jndi.url.rmi=ALL-UNNAMED\" +",
                "+                      \" --add-modules java.xml.ws.annotation,java.corba,java.transaction,java.xml.bind,java.xml.ws\";",
                "+        } else {",
                "+            jdkOpts = \" -Djava.endorsed.dirs=\\\"\" + new File(new File(new File(System.getProperty(\"java.home\"), \"jre\"), \"lib\"), \"endorsed\") + System.getProperty(\"path.separator\") + new File(new File(System.getProperty(\"java.home\"), \"lib\"), \"endorsed\") + System.getProperty(\"path.separator\") + new File(libDir, \"endorsed\").getCanonicalPath() + \"\\\"\"",
                "+                    + \" -Djava.ext.dirs=\\\"\" + new File(new File(new File(System.getProperty(\"java.home\"), \"jre\"), \"lib\"), \"ext\") + System.getProperty(\"path.separator\") + new File(new File(System.getProperty(\"java.home\"), \"lib\"), \"ext\") + System.getProperty(\"path.separator\") + new File(libDir, \"ext\").getCanonicalPath() + \"\\\"\";",
                "+        }",
                "         String command = \"\\\"\"",
                "@@ -494,5 +511,4 @@ public class InstanceServiceImpl implements InstanceService {",
                "                 + \" \" + karafOpts",
                "+                + \" \" + jdkOpts",
                "                 + \" -Djava.util.logging.config.file=\\\"\" + new File(location, \"etc/java.util.logging.properties\").getCanonicalPath() + \"\\\"\"",
                "-                + \" -Djava.endorsed.dirs=\\\"\" + new File(new File(new File(System.getProperty(\"java.home\"), \"jre\"), \"lib\"), \"endorsed\") + System.getProperty(\"path.separator\") + new File(new File(System.getProperty(\"java.home\"), \"lib\"), \"endorsed\") + System.getProperty(\"path.separator\") + new File(libDir, \"endorsed\").getCanonicalPath() + \"\\\"\"",
                "-                + \" -Djava.ext.dirs=\\\"\" + new File(new File(new File(System.getProperty(\"java.home\"), \"jre\"), \"lib\"), \"ext\") + System.getProperty(\"path.separator\") + new File(new File(System.getProperty(\"java.home\"), \"lib\"), \"ext\") + System.getProperty(\"path.separator\") + new File(libDir, \"ext\").getCanonicalPath() + \"\\\"\"",
                "                 + \" -Dkaraf.home=\\\"\" + System.getProperty(\"karaf.home\") + \"\\\"\""
            ],
            "changed_files": [
                "instance/src/main/java/org/apache/karaf/instance/core/internal/InstanceServiceImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5396": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: instance",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: instance, service",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5396",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "04dfa30afcecc9177b2822714736c1d4be2b4fd2",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1508134218,
            "hunks": 4,
            "message": "[KARAF-5352] Implicitly use ${karaf.etc} for shell init scripts",
            "diff": [
                "diff --git a/assemblies/features/base/src/main/resources/resources/etc/system.properties b/assemblies/features/base/src/main/resources/resources/etc/system.properties",
                "index 6c4525c64a..be76d42678 100644",
                "--- a/assemblies/features/base/src/main/resources/resources/etc/system.properties",
                "+++ b/assemblies/features/base/src/main/resources/resources/etc/system.properties",
                "@@ -49,3 +49,5 @@ karaf.default.repository = system",
                " #",
                "-karaf.shell.init.script = ${karaf.etc}/shell.init.script,${karaf.etc}/scripts/*.script",
                "+# NB: ${karaf.etc} is implicitly added to the path, don't use absolute path here",
                "+#",
                "+karaf.shell.init.script = shell.init.script,scripts/*.script",
                "diff --git a/assemblies/features/static/src/main/resources/resources/etc/system.properties b/assemblies/features/static/src/main/resources/resources/etc/system.properties",
                "index 6cfaca8706..c5f8b4b407 100644",
                "--- a/assemblies/features/static/src/main/resources/resources/etc/system.properties",
                "+++ b/assemblies/features/static/src/main/resources/resources/etc/system.properties",
                "@@ -49,3 +49,5 @@ karaf.default.repository = system",
                " #",
                "-karaf.shell.init.script = ${karaf.etc}/shell.init.script,${karaf.etc}/scripts/*.script",
                "+# NB: ${karaf.etc} is implicitly added to the path, don't use absolute path here",
                "+#",
                "+karaf.shell.init.script = shell.init.script,scripts/*.script",
                "diff --git a/instance/src/main/resources/org/apache/karaf/instance/resources/etc/system.properties b/instance/src/main/resources/org/apache/karaf/instance/resources/etc/system.properties",
                "index 567b47e56b..0835bbbb1c 100644",
                "--- a/instance/src/main/resources/org/apache/karaf/instance/resources/etc/system.properties",
                "+++ b/instance/src/main/resources/org/apache/karaf/instance/resources/etc/system.properties",
                "@@ -49,3 +49,5 @@ karaf.default.repository = system",
                " #",
                "-karaf.shell.init.script = ${karaf.etc}/shell.init.script,${karaf.etc}/scripts/*.script",
                "+# NB: ${karaf.etc} is implicitly added to the path, don't use absolute path here",
                "+#",
                "+karaf.shell.init.script = shell.init.script,scripts/*.script",
                "diff --git a/util/src/main/java/org/apache/karaf/util/filesstream/FilesStream.java b/util/src/main/java/org/apache/karaf/util/filesstream/FilesStream.java",
                "index b21cc38387..bd0f52b07b 100644",
                "--- a/util/src/main/java/org/apache/karaf/util/filesstream/FilesStream.java",
                "+++ b/util/src/main/java/org/apache/karaf/util/filesstream/FilesStream.java",
                "@@ -91,3 +91,3 @@ public final class FilesStream {",
                "         }",
                "-        Path cur = Paths.get(System.getProperty(\"karaf.base\"));",
                "+        Path cur = Paths.get(System.getProperty(\"karaf.etc\"));",
                "         return Stream.concat("
            ],
            "changed_files": [
                "assemblies/features/base/src/main/resources/resources/etc/system.properties",
                "assemblies/features/static/src/main/resources/resources/etc/system.properties",
                "instance/src/main/resources/org/apache/karaf/instance/resources/etc/system.properties",
                "util/src/main/java/org/apache/karaf/util/filesstream/FilesStream.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5352": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "066d28aa455d896ac6269c0b0efca67cda90c716"
                ]
            ],
            "tags": [
                "karaf-4.1.3",
                "karaf-4.1.4",
                "karaf-4.1.5",
                "karaf-4.1.6",
                "karaf-4.1.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: instance, file, system",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5352",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b6817836f7eb5b6b64f9e3f1b8224bb09f7202af",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1509994541,
            "hunks": 9,
            "message": "[KARAF-4756] Redeploying Features in the Deploy directory with install=\"auto\" does not work for same feature versions",
            "diff": [
                "diff --git a/deployer/features/src/main/java/org/apache/karaf/deployer/features/FeatureDeploymentListener.java b/deployer/features/src/main/java/org/apache/karaf/deployer/features/FeatureDeploymentListener.java",
                "index 2220b38314..04ddc0bb83 100644",
                "--- a/deployer/features/src/main/java/org/apache/karaf/deployer/features/FeatureDeploymentListener.java",
                "+++ b/deployer/features/src/main/java/org/apache/karaf/deployer/features/FeatureDeploymentListener.java",
                "@@ -28,3 +28,2 @@ import java.net.URL;",
                " import java.util.ArrayList;",
                "-import java.util.Arrays;",
                " import java.util.EnumSet;",
                "@@ -201,44 +200,45 @@ public class FeatureDeploymentListener implements ArtifactUrlTransformer, Bundle",
                "                 try {",
                "-                    List<URL> urls = new ArrayList<URL>();",
                "-                    Enumeration featuresUrlEnumeration = bundle.findEntries(\"/META-INF/\" + FEATURE_PATH + \"/\", \"*.xml\", false);",
                "+                    List<URI> toAdd = new ArrayList<>();",
                "+                    Enumeration<URL> featuresUrlEnumeration = bundle.findEntries(\"/META-INF/\" + FEATURE_PATH + \"/\", \"*.xml\", false);",
                "                     while (featuresUrlEnumeration != null && featuresUrlEnumeration.hasMoreElements()) {",
                "-                        URL url = (URL) featuresUrlEnumeration.nextElement();",
                "-                        try {",
                "-                            featuresService.addRepository(url.toURI());",
                "-                            URI needRemovedRepo = null;",
                "-                            for (Repository repo : featuresService.listRepositories()) {",
                "-                                if (repo.getURI().equals(url.toURI())) {",
                "-                                    Set<Feature> features = new HashSet<Feature>(Arrays.asList(repo.getFeatures()));",
                "-                                    Set<String> autoInstallFeatures = new HashSet<String>();",
                "-                                    for(Feature feature:features) {",
                "-                                        if(feature.getInstall() != null && feature.getInstall().equals(Feature.DEFAULT_INSTALL_MODE)){",
                "-                                            if (!featuresService.isInstalled(feature)) {",
                "-                                                autoInstallFeatures.add(feature.getId());",
                "-                                            }",
                "-                                        }",
                "-                                    }",
                "-                                    if (!autoInstallFeatures.isEmpty()) {",
                "-                                        featuresService.installFeatures(autoInstallFeatures, EnumSet.noneOf(FeaturesService.Option.class));",
                "-                                    }",
                "-                                } else {",
                "-                                    //remove older out-of-data feature repo",
                "-                                    if (repo.getURI().toString().contains(FEATURE_PATH)) {",
                "-                                        String featureFileName = repo.getURI().toString();",
                "-                                        featureFileName = featureFileName.substring(featureFileName.lastIndexOf('/') + 1);",
                "-                                        String newFeatureFileName = url.toURI().toString();",
                "-                                        newFeatureFileName = newFeatureFileName.substring(newFeatureFileName.lastIndexOf('/') + 1);",
                "-                                        if (featureFileName.equals(newFeatureFileName)) {",
                "-                                            needRemovedRepo = repo.getURI();",
                "-                                        }",
                "-                                    }",
                "+                        URI uri = featuresUrlEnumeration.nextElement().toURI();",
                "+                        toAdd.add(uri);",
                "+                    }",
                "+                    Set<Repository> toRemove = new HashSet<>();",
                "+                    synchronized (this) {",
                "+                        String prefix = bundle.getSymbolicName() + \"-\" + bundle.getVersion();",
                "+                        String countStr = (String) properties.remove(prefix + \".count\");",
                "+                        if (countStr != null) {",
                "+                            int count = Integer.parseInt(countStr);",
                "+                            for (int i = 0; i < count; i++) {",
                "+                                URI uri = new URI((String) properties.remove(prefix + \".url.\" + i));",
                "+                                if (!toAdd.contains(uri)) {",
                "+                                    toRemove.add(featuresService.getRepository(uri));",
                "                                 }",
                "-",
                "                             }",
                "-                            urls.add(url);",
                "-                            if (needRemovedRepo != null) {",
                "-                                featuresService.removeRepository(needRemovedRepo);",
                "+                        }",
                "+                    }",
                "+                    if (toRemove.isEmpty() && toAdd.isEmpty()) {",
                "+                        return;",
                "+                    }",
                "+                    // Now add and remove repositories",
                "+                    try {",
                "+                        for (Repository repo : toRemove) {",
                "+                            featuresService.removeRepository(repo.getURI(), true);",
                "+                        }",
                "+                        Set<String> featuresToInstall = new HashSet<>();",
                "+                        for (URI uri : toAdd) {",
                "+                            featuresService.addRepository(uri, false);",
                "+                            Repository repo = featuresService.getRepository(uri);",
                "+                            for (Feature f : repo.getFeatures()) {",
                "+                                if (Feature.DEFAULT_INSTALL_MODE.equals(f.getInstall())) {",
                "+                                    featuresToInstall.add(f.getId());",
                "+                                }",
                "                             }",
                "-                        } catch (Exception e) {",
                "-                            logger.error(\"Unable to install features\", e);",
                "                         }",
                "+                        if (!featuresToInstall.isEmpty()) {",
                "+                            featuresService.installFeatures(featuresToInstall, EnumSet.noneOf(FeaturesService.Option.class));",
                "+                        }",
                "+                    } catch (Exception e) {",
                "+                        logger.error(\"Unable to install features\", e);",
                "                     }",
                "@@ -247,9 +247,9 @@ public class FeatureDeploymentListener implements ArtifactUrlTransformer, Bundle",
                "                         String old = (String) properties.get(prefix + \".count\");",
                "-                        if (old != null && urls.isEmpty()) {",
                "+                        if (old != null && toAdd.isEmpty()) {",
                "                             properties.remove(prefix + \".count\");",
                "                             saveProperties();",
                "-                        } else if (!urls.isEmpty()) {",
                "-                            properties.put(prefix + \".count\", Integer.toString(urls.size()));",
                "-                            for (int i = 0; i < urls.size(); i++) {",
                "-                                properties.put(prefix + \".url.\" + i, urls.get(i).toExternalForm());",
                "+                        } else if (!toAdd.isEmpty()) {",
                "+                            properties.put(prefix + \".count\", Integer.toString(toAdd.size()));",
                "+                            for (int i = 0; i < toAdd.size(); i++) {",
                "+                                properties.put(prefix + \".url.\" + i, toAdd.get(i).toString());",
                "                             }"
            ],
            "changed_files": [
                "deployer/features/src/main/java/org/apache/karaf/deployer/features/FeatureDeploymentListener.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-4756": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "d9a0ec059506b0c06d0ba45d07b212ef978d9235"
                ]
            ],
            "tags": [],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: directory, install",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-4756",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "475be9310ebdc168b73d7b6a49763aab51698084",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1508499581,
            "hunks": 24,
            "message": "Fix meta command / completer to not print a warning when MetaType is not available I think this is a regression caused by https://github.com/apache/karaf/commit/bf666631fe84f0394a9b948b5088d205bf52db36#diff-290cb1e2332aeecaf61aaa6aa3602768 which removes the anonymous inner classes and thus cause a CNFE to be thrown when the MetaCompleter getMethods() is called for introspection. So this commit slightly change the mechanism and a warning is displayed when the completer is initialized, while a message is printed on the console when calling the command.",
            "diff": [
                "diff --git a/config/src/main/java/org/apache/karaf/config/command/MetaCommand.java b/config/src/main/java/org/apache/karaf/config/command/MetaCommand.java",
                "index c65e7e2426..6b33f818ad 100644",
                "--- a/config/src/main/java/org/apache/karaf/config/command/MetaCommand.java",
                "+++ b/config/src/main/java/org/apache/karaf/config/command/MetaCommand.java",
                "@@ -25,5 +25,5 @@ import java.util.Hashtable;",
                " import java.util.Map;",
                "+import java.util.function.Function;",
                " import org.apache.karaf.config.command.completers.MetaCompleter;",
                "-import org.apache.karaf.config.core.impl.MetatypeCallable;",
                " import org.apache.karaf.shell.api.action.Argument;",
                "@@ -34,2 +34,3 @@ import org.apache.karaf.shell.api.action.lifecycle.Reference;",
                " import org.apache.karaf.shell.api.action.lifecycle.Service;",
                "+import org.apache.karaf.shell.support.CommandException;",
                " import org.apache.karaf.shell.support.table.ShellTable;",
                "@@ -42,2 +43,4 @@ import org.osgi.service.metatype.MetaTypeService;",
                " import org.osgi.service.metatype.ObjectClassDefinition;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "@@ -46,2 +49,5 @@ import org.osgi.service.metatype.ObjectClassDefinition;",
                " public class MetaCommand extends ConfigCommandSupport {",
                "+",
                "+    private static final Logger LOG = LoggerFactory.getLogger(MetaCommand.class);",
                "+",
                "     @Argument(name = \"pid\", description = \"The configuration pid\", required = true, multiValued = false)",
                "@@ -74,11 +80,23 @@ public class MetaCommand extends ConfigCommandSupport {",
                "     public Object doExecute() throws Exception {",
                "-        if (create) {",
                "-            withMetaTypeService(context, new Create());",
                "-        } else {",
                "-            withMetaTypeService(context, new Print());",
                "+        try {",
                "+            if (create) {",
                "+                withMetaTypeService(context, new Create());",
                "+            } else {",
                "+                withMetaTypeService(context, new Print());",
                "+            }",
                "+            return null;",
                "+        } catch (Throwable e) {",
                "+            Throwable ncdfe = e;",
                "+            while (ncdfe != null && !(ncdfe instanceof NoClassDefFoundError)) {",
                "+                ncdfe = ncdfe.getCause();",
                "+            }",
                "+            if (ncdfe != null && ncdfe.getMessage().equals(\"org/osgi/service/metatype/MetaTypeService\")) {",
                "+                throw new CommandException(\"config:meta disabled because the org.osgi.service.metatype package is not wired\", e);",
                "+            } else {",
                "+                throw e;",
                "+            }",
                "         }",
                "-        return null;",
                "     }",
                "-    abstract class AbstractMeta implements MetatypeCallable<Void> {",
                "+    abstract class AbstractMeta implements Function<MetaTypeService, Void> {",
                "         protected String getDefaultValueStr(String[] defaultValues) {",
                "@@ -119,3 +137,3 @@ public class MetaCommand extends ConfigCommandSupport {",
                "-        public Void callWith(MetaTypeService metaTypeService) {",
                "+        public Void apply(MetaTypeService metaTypeService) {",
                "             ObjectClassDefinition def = getMetatype(metaTypeService, pid);",
                "@@ -153,3 +171,3 @@ public class MetaCommand extends ConfigCommandSupport {",
                "     class Print extends AbstractMeta {",
                "-        public Void callWith(MetaTypeService metaTypeService) {",
                "+        public Void apply(MetaTypeService metaTypeService) {",
                "             ObjectClassDefinition def = getMetatype(metaTypeService, pid);",
                "diff --git a/config/src/main/java/org/apache/karaf/config/command/completers/MetaCompleter.java b/config/src/main/java/org/apache/karaf/config/command/completers/MetaCompleter.java",
                "index 2aa39b8d05..c35ccde1a8 100644",
                "--- a/config/src/main/java/org/apache/karaf/config/command/completers/MetaCompleter.java",
                "+++ b/config/src/main/java/org/apache/karaf/config/command/completers/MetaCompleter.java",
                "@@ -18,4 +18,2 @@ package org.apache.karaf.config.command.completers;",
                "-import java.util.ArrayList;",
                "-import java.util.Arrays;",
                " import java.util.List;",
                "@@ -30,3 +28,2 @@ import org.apache.karaf.shell.api.console.Session;",
                " import org.apache.karaf.shell.support.completers.StringsCompleter;",
                "-import org.osgi.framework.Bundle;",
                " import org.osgi.framework.BundleContext;",
                "@@ -34,3 +31,4 @@ import org.osgi.framework.BundleEvent;",
                " import org.osgi.framework.BundleListener;",
                "-import org.osgi.service.metatype.MetaTypeInformation;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "@@ -38,4 +36,7 @@ import org.osgi.service.metatype.MetaTypeInformation;",
                " public class MetaCompleter implements Completer, BundleListener {",
                "+",
                "+    private static final Logger LOG = LoggerFactory.getLogger(MetaCompleter.class);",
                "+",
                "     private final StringsCompleter delegate = new StringsCompleter();",
                "-    ",
                "+",
                "     @Reference",
                "@@ -45,4 +46,20 @@ public class MetaCompleter implements Completer, BundleListener {",
                "     public void init() {",
                "-        context.registerService(BundleListener.class, this, null);",
                "-        updateMeta();",
                "+        try {",
                "+            updateMeta();",
                "+            context.registerService(BundleListener.class, this, null);",
                "+        } catch (Throwable e) {",
                "+            Throwable ncdfe = e;",
                "+            while (ncdfe != null && !(ncdfe instanceof NoClassDefFoundError)) {",
                "+                ncdfe = ncdfe.getCause();",
                "+            }",
                "+            if (ncdfe != null && ncdfe.getMessage().equals(\"org/osgi/service/metatype/MetaTypeService\")) {",
                "+                if (LOG.isDebugEnabled()) {",
                "+                    LOG.warn(\"config:meta disabled because the org.osgi.service.metatype package is not wired\", e);",
                "+                } else {",
                "+                    LOG.warn(\"config:meta disabled because the org.osgi.service.metatype package is not wired (enable debug logging for full stack trace).\");",
                "+                }",
                "+            } else {",
                "+                throw e;",
                "+            }",
                "+        }",
                "     }",
                "@@ -60,20 +77,3 @@ public class MetaCompleter implements Completer, BundleListener {",
                "     private synchronized void updateMeta() {",
                "-        List<String> pids = MetaServiceCaller.withMetaTypeService(context, metatypeService -> {",
                "-            List<String> pids1 = new ArrayList<>();",
                "-            Bundle[] bundles = context.getBundles();",
                "-            for (Bundle bundle : bundles) {",
                "-",
                "-                MetaTypeInformation info = metatypeService.getMetaTypeInformation(bundle);",
                "-                if (info == null) {",
                "-                    continue;",
                "-                }",
                "-                if (info.getFactoryPids() != null) {",
                "-                    pids1.addAll(Arrays.asList(info.getFactoryPids()));",
                "-                }",
                "-                if (info.getPids() != null) {",
                "-                    pids1.addAll(Arrays.asList(info.getPids()));",
                "-                }",
                "-            }",
                "-            return pids1;",
                "-        });",
                "+        List<String> pids = MetaServiceCaller.getPidsWithMetaInfo(context);",
                "         if (pids != null) {",
                "diff --git a/config/src/main/java/org/apache/karaf/config/core/impl/MetaServiceCaller.java b/config/src/main/java/org/apache/karaf/config/core/impl/MetaServiceCaller.java",
                "index 88bc1f33a3..5401df0d3d 100644",
                "--- a/config/src/main/java/org/apache/karaf/config/core/impl/MetaServiceCaller.java",
                "+++ b/config/src/main/java/org/apache/karaf/config/core/impl/MetaServiceCaller.java",
                "@@ -18,4 +18,6 @@ package org.apache.karaf.config.core.impl;",
                "+import org.osgi.framework.Bundle;",
                " import org.osgi.framework.BundleContext;",
                " import org.osgi.framework.ServiceReference;",
                "+import org.osgi.service.metatype.MetaTypeInformation;",
                " import org.osgi.service.metatype.MetaTypeService;",
                "@@ -24,2 +26,7 @@ import org.slf4j.LoggerFactory;",
                "+import java.util.ArrayList;",
                "+import java.util.Arrays;",
                "+import java.util.List;",
                "+import java.util.function.Function;",
                "+",
                " /**",
                "@@ -28,18 +35,33 @@ import org.slf4j.LoggerFactory;",
                " public class MetaServiceCaller {",
                "-    private static Logger LOG = LoggerFactory.getLogger(MetaServiceCaller.class);",
                "-    public static <T> T withMetaTypeService(BundleContext context, MetatypeCallable<T> callable) {",
                "+    public static <T> T withMetaTypeService(BundleContext context, Function<MetaTypeService, T> callable) {",
                "+        ServiceReference<MetaTypeService> ref = context.getServiceReference(MetaTypeService.class);",
                "         try {",
                "-            ServiceReference<MetaTypeService> ref = context.getServiceReference(MetaTypeService.class);",
                "-            try {",
                "-                MetaTypeService metaService = context.getService(ref);",
                "-                return callable.callWith(metaService);",
                "-            } finally {",
                "-                context.ungetService(ref);",
                "-            }",
                "-        } catch (NoClassDefFoundError e) {",
                "-            LOG.warn(\"No Metatype Service present\");",
                "-            return null;",
                "+            MetaTypeService metaService = context.getService(ref);",
                "+            return callable.apply(metaService);",
                "+        } finally {",
                "+            context.ungetService(ref);",
                "         }",
                "     }",
                "+",
                "+    public static List<String> getPidsWithMetaInfo(BundleContext context) {",
                "+        return withMetaTypeService(context, metatypeService -> {",
                "+            List<String> pids1 = new ArrayList<>();",
                "+            Bundle[] bundles = context.getBundles();",
                "+            for (Bundle bundle : bundles) {",
                "+",
                "+                MetaTypeInformation info = metatypeService.getMetaTypeInformation(bundle);",
                "+                if (info == null) {",
                "+                    continue;",
                "+                }",
                "+                if (info.getFactoryPids() != null) {",
                "+                    pids1.addAll(Arrays.asList(info.getFactoryPids()));",
                "+                }",
                "+                if (info.getPids() != null) {",
                "+                    pids1.addAll(Arrays.asList(info.getPids()));",
                "+                }",
                "+            }",
                "+            return pids1;",
                "+        });",
                "+    }",
                " }",
                "diff --git a/config/src/main/java/org/apache/karaf/config/core/impl/MetatypeCallable.java b/config/src/main/java/org/apache/karaf/config/core/impl/MetatypeCallable.java",
                "deleted file mode 100644",
                "index 39075f9824..0000000000",
                "--- a/config/src/main/java/org/apache/karaf/config/core/impl/MetatypeCallable.java",
                "+++ /dev/null",
                "@@ -1,23 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one or more",
                "- * contributor license agreements.  See the NOTICE file distributed with",
                "- * this work for additional information regarding copyright ownership.",
                "- * The ASF licenses this file to You under the Apache License, Version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with",
                "- * the License.  You may obtain a copy of the License at",
                "- *",
                "- *      http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- * See the License for the specific language governing permissions and",
                "- * limitations under the License.",
                "- */",
                "-package org.apache.karaf.config.core.impl;",
                "-",
                "-import org.osgi.service.metatype.MetaTypeService;",
                "-",
                "-public interface MetatypeCallable <T> {",
                "-    T callWith(MetaTypeService metatypeService);",
                "-}"
            ],
            "changed_files": [
                "config/src/main/java/org/apache/karaf/config/command/MetaCommand.java",
                "config/src/main/java/org/apache/karaf/config/command/completers/MetaCompleter.java",
                "config/src/main/java/org/apache/karaf/config/core/impl/MetaServiceCaller.java",
                "config/src/main/java/org/apache/karaf/config/core/impl/MetatypeCallable.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: console, change",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: service",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "b7139523b1bad1ebecde77cf65a7381bc40fc157",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1507929485,
            "hunks": 1,
            "message": "[KARAF-5423] - Karaf is flagged as vulnerable to CVE-2015-5262",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 630fe069c0..6a91ad501b 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -264,3 +264,3 @@",
                "         <pax.base.version>1.5.0</pax.base.version>",
                "-        <pax.url.version>2.5.2</pax.url.version>",
                "+        <pax.url.version>2.5.3</pax.url.version>",
                "         <pax.web.version>6.0.7</pax.web.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5423": ""
            },
            "ghissue_refs": {},
            "cve_refs": [
                "CVE-2015-5262"
            ],
            "twins": [
                [
                    "no-tag",
                    "fc7af0b0ca3cbaa75c01e9e1ff7529586c373b9c"
                ]
            ],
            "tags": [
                "karaf-4.1.3",
                "karaf-4.1.4",
                "karaf-4.1.5",
                "karaf-4.1.6",
                "karaf-4.1.7"
            ],
            "matched_rules": [
                {
                    "id": "SEC_KEYWORDS_IN_MESSAGE",
                    "message": "The commit message contains some security-related keywords: vulnerable",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5423",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fe5f0e94dd56a044ddb01041adaaf4290afa62ce",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1508433909,
            "hunks": 3,
            "message": "[KARAF-5436] Factory configurations file in etc/ are not deleted when the configuration is deleted",
            "diff": [
                "diff --git a/config/src/main/java/org/apache/karaf/config/core/impl/ConfigRepositoryImpl.java b/config/src/main/java/org/apache/karaf/config/core/impl/ConfigRepositoryImpl.java",
                "index 8ee9082103..5d3d93ffed 100644",
                "--- a/config/src/main/java/org/apache/karaf/config/core/impl/ConfigRepositoryImpl.java",
                "+++ b/config/src/main/java/org/apache/karaf/config/core/impl/ConfigRepositoryImpl.java",
                "@@ -80,5 +80,9 @@ public class ConfigRepositoryImpl implements ConfigRepository {",
                "         Configuration configuration = configAdmin.getConfiguration(pid, null);",
                "+        File cfgFile = getCfgFileFromProperties(configuration.getProperties());",
                "         configuration.delete();",
                "         try {",
                "-            deleteStorage(pid);",
                "+            if (cfgFile != null) {",
                "+                LOGGER.trace(\"Delete {}\", cfgFile.getName());",
                "+                cfgFile.delete();",
                "+            }",
                "         } catch (Exception e) {",
                "@@ -88,10 +92,2 @@ public class ConfigRepositoryImpl implements ConfigRepository {",
                "-    protected void deleteStorage(String pid) throws Exception {",
                "-        if (storage != null) {",
                "-            File cfgFile = new File(storage, pid + \".cfg\");",
                "-            LOGGER.trace(\"Delete {}\", cfgFile.getName());",
                "-            cfgFile.delete();",
                "-        }",
                "-    }",
                "-",
                "     private File getCfgFileFromProperties(Dictionary<String, Object> properties) throws URISyntaxException, MalformedURLException {"
            ],
            "changed_files": [
                "config/src/main/java/org/apache/karaf/config/core/impl/ConfigRepositoryImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5436": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "777f0c6d3f075d4d1821dcfae816d703e9d5c5b4"
                ]
            ],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: file",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5436",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7ebf194bb01c6e2de4fa9d4bc8c51aededa61335",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1511168721,
            "hunks": 2,
            "message": "[KARAF-5446] Fragment bundles are not resolved properly when installing/restarting the container",
            "diff": [
                "diff --git a/features/extension/src/main/java/org/apache/karaf/features/extension/StoredWiringResolver.java b/features/extension/src/main/java/org/apache/karaf/features/extension/StoredWiringResolver.java",
                "index 0d7de172ca..06b8bc604a 100644",
                "--- a/features/extension/src/main/java/org/apache/karaf/features/extension/StoredWiringResolver.java",
                "+++ b/features/extension/src/main/java/org/apache/karaf/features/extension/StoredWiringResolver.java",
                "@@ -29,2 +29,3 @@ import org.osgi.framework.Bundle;",
                " import org.osgi.framework.hooks.resolver.ResolverHook;",
                "+import org.osgi.framework.namespace.ExecutionEnvironmentNamespace;",
                " import org.osgi.framework.namespace.HostNamespace;",
                "@@ -87,3 +88,4 @@ class StoredWiringResolver implements ResolverHook {",
                "         if (isFragment(requirement.getRevision())",
                "-            && !requirement.getNamespace().equals(HostNamespace.HOST_NAMESPACE)) {",
                "+            && !requirement.getNamespace().equals(HostNamespace.HOST_NAMESPACE)",
                "+            && !requirement.getNamespace().equals(ExecutionEnvironmentNamespace.EXECUTION_ENVIRONMENT_NAMESPACE)) {",
                "             sourceId = wiring.get(sourceId).getFragmentHost();"
            ],
            "changed_files": [
                "features/extension/src/main/java/org/apache/karaf/features/extension/StoredWiringResolver.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5446": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "46e8b90ef3d37996f72f606bc8843c37540817eb"
                ]
            ],
            "tags": [
                "karaf-4.1.4",
                "karaf-4.1.5",
                "karaf-4.1.6",
                "karaf-4.1.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: install",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5446",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "226f9e8ed087c57b4ace236cb3fcc578a2720401",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1507906316,
            "hunks": 2,
            "message": "[KARAF-5414] Handle varying feature dependency versions When a feature stub specifies a feature dependency, and the POM contains a slight variant of the dependency (e.g., the former specifies a version range, the latter specifies a single version), we currently ignore the latter when resolving the former. This patch changes the behaviour so that feature dependencies are matched more generously, which allows dependency information to be correctly analysed. Signed-off-by: Stephen Kitt <skitt@redhat.com>",
            "diff": [
                "diff --git a/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/GenerateDescriptorMojo.java b/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/GenerateDescriptorMojo.java",
                "index d84b2a1f1d..896c12834e 100644",
                "--- a/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/GenerateDescriptorMojo.java",
                "+++ b/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/GenerateDescriptorMojo.java",
                "@@ -606,3 +606,3 @@ public class GenerateDescriptorMojo extends MojoSupport {",
                "-    private static Dependency findMatchingDependency(List<Dependency> dependencies, Dependency reference) {",
                "+    private static Dependency findMatchingDependency(Collection<Dependency> dependencies, Dependency reference) {",
                "         String referenceName = reference.getName();",
                "@@ -631,3 +631,5 @@ public class GenerateDescriptorMojo extends MojoSupport {",
                "         for (Dependency dependency : feature.getFeature()) {",
                "-            Feature otherFeature = otherFeatures.get(dependency);",
                "+            // Match dependencies \u00e2\u0080\u009cgenerously\u00e2\u0080\u009d (we might be matching single-version dependencies with version ranges)",
                "+            Dependency otherDependency = findMatchingDependency(otherFeatures.keySet(), dependency);",
                "+            Feature otherFeature = otherDependency != null ? otherFeatures.get(otherDependency) : null;",
                "             if (otherFeature != null) {"
            ],
            "changed_files": [
                "tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/GenerateDescriptorMojo.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5414": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "4dca9d73400e1ad4e911e9f50e3d927fb3a42fc4"
                ],
                [
                    "no-tag",
                    "d4c9456c5dee06d43e752608de89f6bff230ad50"
                ]
            ],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: allow, change",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5414",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "97c44c75657f3192677388dbd9c8f218c3b8b944",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1509030116,
            "hunks": 0,
            "message": "Merge pull request #390 from jbonofre/KARAF-5430 [KARAF-5430] Upgrade to Spring 4.0.9.RELEASE and 4.3.12.RELEASE",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5430": ""
            },
            "ghissue_refs": {
                "390": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: release",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5430",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 390",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d5c78a789e73df1adf93332b27f05dde5490c814",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1508738077,
            "hunks": 0,
            "message": "Merge pull request #382 from worldprogramming/master [KARAF-5411] Allow for users.properties file not existing, or empty",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5411": ""
            },
            "ghissue_refs": {
                "382": "Fix borked Karaf boot subutai-io/peer-os#2827"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: file, allow, user",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5411",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 382",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b964e0cc23cf836b2e614eb69d6e8474ce2aa6af",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1509031010,
            "hunks": 1,
            "message": "Update RELEASE-NOTES in preparation for 4.1.3 release",
            "diff": [
                "diff --git a/RELEASE-NOTES b/RELEASE-NOTES",
                "index c39e837da2..37f05e73e4 100644",
                "--- a/RELEASE-NOTES",
                "+++ b/RELEASE-NOTES",
                "@@ -17,2 +17,73 @@",
                "+\t\t    Apache Karaf 4.1.3",
                "+\t\t    ==================",
                "+ Apache Karaf 4.1.0 is a maintenance release on the 4.1.x series, bringing bug fixes and updates.",
                "+",
                "+ ChangeLog:",
                "+ ----------",
                "+",
                "+** Bug",
                "+    * [KARAF-3531] - SimpleMavenResolver does not handle wrap: prefix in mvn urls",
                "+    * [KARAF-4655] - karaf-maven-plugin add-features-to-repo goal can't add Camel feature",
                "+    * [KARAF-5103] - Quick start fails at the step \"feature:install camel-spring\"",
                "+    * [KARAF-5283] - Karaf in offline (no internet) environment - NamespaceHandler bugs",
                "+    * [KARAF-5304] - checkRootInstance function in karaf script fails under AIX",
                "+    * [KARAF-5311] - NPE in karaf-maven-plugin when specifying descriptor by file url",
                "+    * [KARAF-5312] - bin/stop script output some unwanted message on mac",
                "+    * [KARAF-5313] - Exception when deleting a .cfg file from hot deploy directory ",
                "+    * [KARAF-5314] - The performance of profile builder used by karaf maven plugin has reduced significantly in 4.1 compared to 4.0",
                "+    * [KARAF-5315] - Race condition during shutdown using SIGTERM",
                "+    * [KARAF-5317] - \"Exception in thread \"SIGWINCH handler\" java.lang.UnsupportedOperationException\" occurs when resizing the console while `log:tail` is run",
                "+    * [KARAF-5320] - Karaf Command Arguments escapes backslash characters",
                "+    * [KARAF-5326] - variables in cfg files are expanded",
                "+    * [KARAF-5328] - NPE is thrown when execute source command from client/ssh",
                "+    * [KARAF-5330] - Require a specific role to access the SSH console",
                "+    * [KARAF-5332] - bin/stop script fails when KARAF_DEBUG is set",
                "+    * [KARAF-5333] -  UnsupportedCharsetException: cp65001 and unprintable characters from karaf 4.1.2 console",
                "+    * [KARAF-5334] - Fix broken shell.support.table.ShellTableTest on Windows",
                "+    * [KARAF-5337] - karaf-maven-plugin generates an \"override.properties\" instead of \"overrides.properties\"",
                "+    * [KARAF-5338] - Unable to access the local JMX server on OSX",
                "+    * [KARAF-5343] - Upgrade to pax-web-6.0.7",
                "+    * [KARAF-5352] - KARAF_ETC envvar ignored",
                "+    * [KARAF-5371] - Race condition between FeatureService and Fileinstall",
                "+    * [KARAF-5373] - Karaf-maven-plugin fails to create feature file",
                "+    * [KARAF-5374] - karaf-maven-plugin can't configure the start-level for the startupBundles",
                "+    * [KARAF-5375] - feature:stop command does not stop the bundles",
                "+    * [KARAF-5377] - Speed up repository loading",
                "+    * [KARAF-5388] - create dump doesn't include log file anymore",
                "+    * [KARAF-5390] - tar.gz archives contains invalid data in demos\\web\\src\\main\\webapp\\WEB-INF\\karaf\\system\\org\\apache\\felix",
                "+    * [KARAF-5394] - maven-metadata-local.xml in KARs cause SAXParseException",
                "+    * [KARAF-5397] - Remove org.apache.karaf.shell config from ssh feature",
                "+    * [KARAF-5404] - CLI autocompletion issue",
                "+    * [KARAF-5406] - CLI error on window resize on Linux(Wayland)",
                "+    * [KARAF-5411] - Client doesn't prompt for user if no user.properties file",
                "+    * [KARAF-5414] - Features mentioned in feature.xml stubs aren't taken into account in dependency calculations",
                "+    * [KARAF-5423] - Karaf is flagged as vulnerable to CVE-2015-5262",
                "+    * [KARAF-5435] - BundleException when installing a bundle by API when the FeatureService install a feature",
                "+    * [KARAF-5436] - Factory configurations file in etc/ are not deleted when the configuration is deleted",
                "+    * [KARAF-5440] - No override facility for properties in system.properties",
                "+",
                "+** Dependency upgrade",
                "+    * [KARAF-5359] - Upgrade to JLine 3.5.0",
                "+    * [KARAF-5365] - Upgrade to Aries Subsystem 2.0.10",
                "+    * [KARAF-5366] - Upgrade to Felix ConfigAdmin 1.8.16",
                "+    * [KARAF-5367] - Upgrade to Felix EventAdmin 1.4.10",
                "+    * [KARAF-5368] - Upgrade to Felix Framework & Main 5.6.8",
                "+    * [KARAF-5369] - Upgrade to Felix Metatype 1.1.4",
                "+    * [KARAF-5370] - Upgrade to Felix Resolver 1.14.0",
                "+    * [KARAF-5419] - Upgrade to Aries Blueprint Core 1.8.3",
                "+    * [KARAF-5430] - Upgrade to Spring 4.0.9.RELEASE & 4.3.12.RELEASE",
                "+",
                "+** Documentation",
                "+    * [KARAF-5357] - Help string for feature:stop is incorrect",
                "+",
                "+** Improvement",
                "+    * [KARAF-4803] - Turn off Karaf configuration persistence manager",
                "+    * [KARAF-4932] - Remove blueprint compat and blueprint annotations bundles",
                "+    * [KARAF-5080] - Use the full ttop command from gogo-jline",
                "+    * [KARAF-5294] - Cleanup Maven repository",
                "+    * [KARAF-5319] - the jetty feature in karaf shouldn't depend on pax-jetty feature",
                "+    * [KARAF-5363] - Add --no-start option to kar:install, kar cfg and kar MBean",
                "+",
                "+",
                " \t\t    Apache Karaf 4.1.2"
            ],
            "changed_files": [
                "RELEASE-NOTES"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.1.3",
                "karaf-4.1.4",
                "karaf-4.1.5",
                "karaf-4.1.6",
                "karaf-4.1.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: release",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: release",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "2cd51653d61c30e483bd95f444b2a19f7932c86e",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1508759134,
            "hunks": 0,
            "message": "Merge pull request #386 from worldprogramming/KARAF-5440 [KARAF-5440] Allow for overrides to values in system.properties.",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5440": ""
            },
            "ghissue_refs": {
                "386": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: allow, system",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5440",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 386",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e1f59cae1912c1b0b3a0f6be06c70089ab2f659b",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1508738475,
            "hunks": 1,
            "message": "[KARAF-5411] Format user prompt. This closes #382",
            "diff": [
                "diff --git a/client/src/main/java/org/apache/karaf/client/Main.java b/client/src/main/java/org/apache/karaf/client/Main.java",
                "index 1d53042404..a493332b9c 100644",
                "--- a/client/src/main/java/org/apache/karaf/client/Main.java",
                "+++ b/client/src/main/java/org/apache/karaf/client/Main.java",
                "@@ -147,3 +147,3 @@ public class Main {",
                "             \twhile (true) {",
                "-            \t\tString user = console.readLine(\"Enter user : \");",
                "+            \t\tString user = console.readLine(\"Enter user: \");",
                "             \t\tif (user==null || user.isEmpty()) {"
            ],
            "changed_files": [
                "client/src/main/java/org/apache/karaf/client/Main.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5411": ""
            },
            "ghissue_refs": {
                "382": "Fix borked Karaf boot subutai-io/peer-os#2827"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: user",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5411",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 382",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9865bdf759392d5317a4d9623cb4aeed5dac6754",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1507730350,
            "hunks": 3,
            "message": "[KARAF-5373] Correctly attach the artifacts when inputFile doesn't exist",
            "diff": [
                "diff --git a/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/GenerateDescriptorMojo.java b/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/GenerateDescriptorMojo.java",
                "index f262ac3f98..d84b2a1f1d 100644",
                "--- a/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/GenerateDescriptorMojo.java",
                "+++ b/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/GenerateDescriptorMojo.java",
                "@@ -331,4 +331,4 @@ public class GenerateDescriptorMojo extends MojoSupport {",
                "                     projectHelper.attachArtifact(project, attachmentArtifactType, attachmentArtifactClassifier, outputFile);",
                "+                    return;",
                "                 }",
                "-                return;",
                "             }",
                "@@ -346,3 +346,2 @@ public class GenerateDescriptorMojo extends MojoSupport {",
                "                 projectHelper.attachArtifact(project, attachmentArtifactType, attachmentArtifactClassifier, outputFile);",
                "-",
                "             } else {"
            ],
            "changed_files": [
                "tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/GenerateDescriptorMojo.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5373": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "ea5a180959d5890f52d860d6f3ed7955403f72fc"
                ]
            ],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: file",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5373",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b19e547073f5cb0941adb770780aef07b6553803",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1508179585,
            "hunks": 1,
            "message": "[KARAF-5371] Race condition between FeatureService and Fileinstall",
            "diff": [
                "diff --git a/features/core/src/main/java/org/apache/karaf/features/internal/osgi/Activator.java b/features/core/src/main/java/org/apache/karaf/features/internal/osgi/Activator.java",
                "index 3f306faf6e..5f2fa95370 100644",
                "--- a/features/core/src/main/java/org/apache/karaf/features/internal/osgi/Activator.java",
                "+++ b/features/core/src/main/java/org/apache/karaf/features/internal/osgi/Activator.java",
                "@@ -131,2 +131,3 @@ public class Activator extends BaseActivator {",
                "         StandardRegionDigraph dg = digraph = DigraphHelper.loadDigraph(bundleContext);",
                "+        DigraphHelper.verifyUnmanagedBundles(bundleContext, dg);",
                "         register(ResolverHookFactory.class, dg.getResolverHookFactory());"
            ],
            "changed_files": [
                "features/core/src/main/java/org/apache/karaf/features/internal/osgi/Activator.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5371": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "45afc23cdac19dc89e86a14bafc5639d1fdcec5e"
                ]
            ],
            "tags": [
                "karaf-4.1.3",
                "karaf-4.1.4",
                "karaf-4.1.5",
                "karaf-4.1.6",
                "karaf-4.1.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: service, file, install",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5371",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b186ba3dc1da0db8dc3c19f5d004e8a137ff587b",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1509625298,
            "hunks": 5,
            "message": "Fix performance issue generating service metadata, change logging See https://mhus.de/2017/11/02/karaf-maven-tools-performance-issue-in-eclips e-ide/ for details",
            "diff": [
                "diff --git a/tooling/karaf-services-maven-plugin/src/main/java/org/apache/karaf/tooling/tracker/GenerateServiceMetadata.java b/tooling/karaf-services-maven-plugin/src/main/java/org/apache/karaf/tooling/tracker/GenerateServiceMetadata.java",
                "index 7b0fd373b3..bd0aa50d9b 100644",
                "--- a/tooling/karaf-services-maven-plugin/src/main/java/org/apache/karaf/tooling/tracker/GenerateServiceMetadata.java",
                "+++ b/tooling/karaf-services-maven-plugin/src/main/java/org/apache/karaf/tooling/tracker/GenerateServiceMetadata.java",
                "@@ -80,2 +80,5 @@ public class GenerateServiceMetadata extends AbstractMojo {",
                "+    @Parameter(defaultValue=\".*\")",
                "+    protected String artifactInclude;",
                "+",
                "     @Component",
                "@@ -98,3 +101,3 @@ public class GenerateServiceMetadata extends AbstractMojo {",
                "                 if (classUrl == null || !classUrl.getPath().startsWith(outputDirectoryUrl.getPath())) {",
                "-                    System.out.println(\"Ignoring \" + classUrl);",
                "+                \t\tgetLog().info(\"Ignoring \" + classUrl);",
                "                     continue;",
                "@@ -130,2 +133,3 @@ public class GenerateServiceMetadata extends AbstractMojo {",
                "             if (activators.size() == 1) {",
                "+        \t\t\tgetLog().info(\"Activator \" + activators.get(0).getName());",
                "                 project.getProperties().setProperty(activatorProperty, activators.get(0).getName());",
                "@@ -138,2 +142,3 @@ public class GenerateServiceMetadata extends AbstractMojo {",
                "             for (Class<?> clazz : services) {",
                "+            \t\tgetLog().info(\"Service \" + clazz.getPackage().getName());",
                "                 packages.add(clazz.getPackage().getName());",
                "@@ -193,6 +198,11 @@ public class GenerateServiceMetadata extends AbstractMojo {",
                "             for ( Artifact artifact : project.getArtifacts() ) {",
                "-                File file = artifact.getFile();",
                "-                if ( file != null ) {",
                "-                    urls.add( file.toURI().toURL() );",
                "-                }",
                "+            \t\tif (artifactInclude != null && artifactInclude.length() > 0 && artifact.getArtifactId().matches(artifactInclude)) {",
                "+\t                File file = artifact.getFile();",
                "+\t                if ( file != null ) {",
                "+            \t\t\t\tgetLog().debug(\"Use artifact \" + artifact.getArtifactId() + \": \" + file);",
                "+\t                    urls.add( file.toURI().toURL() );",
                "+\t                }",
                "+            \t\t} else {",
                "+            \t\t\tgetLog().debug(\"Ignore artifact \" + artifact.getArtifactId() );",
                "+            \t\t}",
                "             }"
            ],
            "changed_files": [
                "tooling/karaf-services-maven-plugin/src/main/java/org/apache/karaf/tooling/tracker/GenerateServiceMetadata.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: service, change",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: service",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "c07fc1a5cff22472513822b9a7c317d12f167b31",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1510900512,
            "hunks": 1,
            "message": "[KARAF-5488] Upgrade to Felix Framework 5.6.10 and Felix FileInstall 3.6.4",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 9009785db4..994d04e890 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -186,4 +186,4 @@",
                "         <felix.coordinator.version>1.0.2</felix.coordinator.version>",
                "-        <felix.fileinstall.version>3.5.8</felix.fileinstall.version>",
                "-        <felix.framework.version>5.6.8</felix.framework.version>",
                "+        <felix.fileinstall.version>3.6.4</felix.fileinstall.version>",
                "+        <felix.framework.version>5.6.10</felix.framework.version>",
                "         <felix.framework.security.version>2.6.0</felix.framework.security.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5488": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "256efd63c87432f9edadafbeba62768c5e1e2cf0"
                ]
            ],
            "tags": [
                "karaf-4.1.4",
                "karaf-4.1.5",
                "karaf-4.1.6",
                "karaf-4.1.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: file, install",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5488",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e424722aa559f46f12488f84109d63f9a0e0dc49",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1510049018,
            "hunks": 2,
            "message": "Do not attempt to start already starting bundles Fix possible problem when starting the karaf deployer/features with a deployed feature bundle",
            "diff": [
                "diff --git a/features/core/src/main/java/org/apache/karaf/features/internal/service/Deployer.java b/features/core/src/main/java/org/apache/karaf/features/internal/service/Deployer.java",
                "index 12d4d53d0b..48eed924b3 100644",
                "--- a/features/core/src/main/java/org/apache/karaf/features/internal/service/Deployer.java",
                "+++ b/features/core/src/main/java/org/apache/karaf/features/internal/service/Deployer.java",
                "@@ -103,2 +103,3 @@ import static org.osgi.framework.Bundle.ACTIVE;",
                " import static org.osgi.framework.Bundle.RESOLVED;",
                "+import static org.osgi.framework.Bundle.STARTING;",
                " import static org.osgi.framework.Bundle.STOPPING;",
                "@@ -634,3 +635,3 @@ public class Deployer {",
                "         }",
                "-        removeFragmentsAndBundlesInState(toStop, UNINSTALLED | RESOLVED | STOPPING);",
                "+        removeFragmentsAndBundlesInState(toStop, UNINSTALLED | RESOLVED | STOPPING | STARTING);",
                "         if (!toStop.isEmpty()) {"
            ],
            "changed_files": [
                "features/core/src/main/java/org/apache/karaf/features/internal/service/Deployer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: read",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: service",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "e57cb70539c12da8273e229b827e532bb47566f4",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1511423719,
            "hunks": 4,
            "message": "Fix gogo webconsole plugin Broken by 9b9dd7947577dec377808344e78736988f7e8428",
            "diff": [
                "diff --git a/webconsole/gogo/src/main/java/org/apache/karaf/webconsole/gogo/Terminal.java b/webconsole/gogo/src/main/java/org/apache/karaf/webconsole/gogo/Terminal.java",
                "index aef58d6080..70a860a452 100644",
                "--- a/webconsole/gogo/src/main/java/org/apache/karaf/webconsole/gogo/Terminal.java",
                "+++ b/webconsole/gogo/src/main/java/org/apache/karaf/webconsole/gogo/Terminal.java",
                "@@ -1710,12 +1710,12 @@ public class Terminal {",
                "                 vt100_keyfilter_escape = true;",
                "-            } else if (c == 127) {",
                "+            } else if (c == '\\u007f') {",
                "                 if (vt100_mode_backspace) {",
                "-                    o += Integer.toString(8);",
                "+                    o += '\\u0008';",
                "                 } else {",
                "-                    o += Integer.toString(127);",
                "+                    o += '\\u007f';",
                "                 }",
                "             } else {",
                "-                o += Integer.toString(c);",
                "-                if (vt100_mode_lfnewline && c == 13) {",
                "-                    o += Integer.toString(10);",
                "+                o += c;",
                "+                if (vt100_mode_lfnewline && c == '\\r') {",
                "+                    o += '\\n';",
                "                 }"
            ],
            "changed_files": [
                "webconsole/gogo/src/main/java/org/apache/karaf/webconsole/gogo/Terminal.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: console",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: console",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "631e9b0ab341a68f62631ffa9eb6c0486899913a",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1510066099,
            "hunks": 14,
            "message": "Deduplicate the java process management code in karaf",
            "diff": [
                "diff --git a/main/src/main/java/org/apache/karaf/jpm/Process.java b/util/src/main/java/org/apache/karaf/jpm/Process.java",
                "similarity index 100%",
                "rename from main/src/main/java/org/apache/karaf/jpm/Process.java",
                "rename to util/src/main/java/org/apache/karaf/jpm/Process.java",
                "diff --git a/main/src/main/java/org/apache/karaf/jpm/ProcessBuilder.java b/util/src/main/java/org/apache/karaf/jpm/ProcessBuilder.java",
                "similarity index 100%",
                "rename from main/src/main/java/org/apache/karaf/jpm/ProcessBuilder.java",
                "rename to util/src/main/java/org/apache/karaf/jpm/ProcessBuilder.java",
                "diff --git a/main/src/main/java/org/apache/karaf/jpm/ProcessBuilderFactory.java b/util/src/main/java/org/apache/karaf/jpm/ProcessBuilderFactory.java",
                "similarity index 100%",
                "rename from main/src/main/java/org/apache/karaf/jpm/ProcessBuilderFactory.java",
                "rename to util/src/main/java/org/apache/karaf/jpm/ProcessBuilderFactory.java",
                "diff --git a/main/src/main/java/org/apache/karaf/jpm/impl/ProcessBuilderFactoryImpl.java b/util/src/main/java/org/apache/karaf/jpm/impl/ProcessBuilderFactoryImpl.java",
                "similarity index 100%",
                "rename from main/src/main/java/org/apache/karaf/jpm/impl/ProcessBuilderFactoryImpl.java",
                "rename to util/src/main/java/org/apache/karaf/jpm/impl/ProcessBuilderFactoryImpl.java",
                "diff --git a/main/src/main/java/org/apache/karaf/jpm/impl/ProcessBuilderImpl.java b/util/src/main/java/org/apache/karaf/jpm/impl/ProcessBuilderImpl.java",
                "similarity index 100%",
                "rename from main/src/main/java/org/apache/karaf/jpm/impl/ProcessBuilderImpl.java",
                "rename to util/src/main/java/org/apache/karaf/jpm/impl/ProcessBuilderImpl.java",
                "index 4beee748f3..08f440757f 100644",
                "--- a/main/src/main/java/org/apache/karaf/jpm/impl/ProcessBuilderImpl.java",
                "+++ b/util/src/main/java/org/apache/karaf/jpm/impl/ProcessBuilderImpl.java",
                "@@ -18,5 +18,2 @@ package org.apache.karaf.jpm.impl;",
                "-import org.apache.karaf.jpm.Process;",
                "-import org.apache.karaf.jpm.ProcessBuilder;",
                "-",
                " import java.io.File;",
                "@@ -24,2 +21,5 @@ import java.io.IOException;",
                "+import org.apache.karaf.jpm.Process;",
                "+import org.apache.karaf.jpm.ProcessBuilder;",
                "+",
                "diff --git a/main/src/main/java/org/apache/karaf/jpm/impl/ProcessImpl.java b/util/src/main/java/org/apache/karaf/jpm/impl/ProcessImpl.java",
                "similarity index 93%",
                "rename from main/src/main/java/org/apache/karaf/jpm/impl/ProcessImpl.java",
                "rename to util/src/main/java/org/apache/karaf/jpm/impl/ProcessImpl.java",
                "index 2db277862b..e710c7afb9 100644",
                "--- a/main/src/main/java/org/apache/karaf/jpm/impl/ProcessImpl.java",
                "+++ b/util/src/main/java/org/apache/karaf/jpm/impl/ProcessImpl.java",
                "@@ -18,5 +18,9 @@ package org.apache.karaf.jpm.impl;",
                "-import org.apache.karaf.jpm.Process;",
                "-",
                "-import java.io.*;",
                "+import java.io.BufferedReader;",
                "+import java.io.File;",
                "+import java.io.FileInputStream;",
                "+import java.io.IOException;",
                "+import java.io.InputStream;",
                "+import java.io.InputStreamReader;",
                "+import java.io.InterruptedIOException;",
                " import java.util.HashMap;",
                "@@ -24,2 +28,4 @@ import java.util.Map;",
                "+import org.apache.karaf.jpm.Process;",
                "+",
                " public class ProcessImpl implements Process {",
                "@@ -75,3 +81,3 @@ public class ProcessImpl implements Process {",
                "         } else {",
                "-            ret = ScriptUtils.executeProcess(new ProcessBuilder(\"kill\", \"-9\", Integer.toString(pid)));",
                "+            ret = ScriptUtils.executeProcess(new java.lang.ProcessBuilder(\"kill\", \"-9\", Integer.toString(pid)));",
                "         }",
                "diff --git a/main/src/main/java/org/apache/karaf/jpm/impl/ScriptUtils.java b/util/src/main/java/org/apache/karaf/jpm/impl/ScriptUtils.java",
                "similarity index 88%",
                "rename from main/src/main/java/org/apache/karaf/jpm/impl/ScriptUtils.java",
                "rename to util/src/main/java/org/apache/karaf/jpm/impl/ScriptUtils.java",
                "index bb58f81e95..683431938e 100644",
                "--- a/main/src/main/java/org/apache/karaf/jpm/impl/ScriptUtils.java",
                "+++ b/util/src/main/java/org/apache/karaf/jpm/impl/ScriptUtils.java",
                "@@ -18,3 +18,9 @@ package org.apache.karaf.jpm.impl;",
                "-import java.io.*;",
                "+import java.io.File;",
                "+import java.io.FileOutputStream;",
                "+import java.io.IOException;",
                "+import java.io.InputStream;",
                "+import java.io.InterruptedIOException;",
                "+import java.io.OutputStream;",
                "+import java.io.PrintStream;",
                " import java.util.Map;",
                "@@ -30,3 +36,3 @@ public class ScriptUtils {",
                "                 ScriptUtils.copyFilteredResource(res, script, props);",
                "-                return executeProcess(new ProcessBuilder(\"cscript\",",
                "+                return executeProcess(new java.lang.ProcessBuilder(\"cscript\",",
                "                                                                    \"/NOLOGO\",",
                "@@ -37,3 +43,3 @@ public class ScriptUtils {",
                "                 ScriptUtils.copyFilteredResource(res, script, props);",
                "-                return executeProcess(new ProcessBuilder(\"/bin/sh\",",
                "+                return executeProcess(new java.lang.ProcessBuilder(\"/bin/sh\",",
                "                                                                    script.getCanonicalPath()));",
                "@@ -45,5 +51,5 @@ public class ScriptUtils {",
                "-    public static int executeProcess(ProcessBuilder builder) throws IOException {",
                "+    public static int executeProcess(java.lang.ProcessBuilder builder) throws IOException {",
                "         try {",
                "-            Process process = builder.start();",
                "+            java.lang.Process process = builder.start();",
                "             return process.waitFor();",
                "diff --git a/util/src/main/resources/org/apache/karaf/jpm/impl/unix/start.sh b/util/src/main/resources/org/apache/karaf/jpm/impl/unix/start.sh",
                "new file mode 100644",
                "index 0000000000..d925e48435",
                "--- /dev/null",
                "+++ b/util/src/main/resources/org/apache/karaf/jpm/impl/unix/start.sh",
                "@@ -0,0 +1,29 @@",
                "+#!/bin/sh",
                "+################################################################################",
                "+#",
                "+#    Licensed to the Apache Software Foundation (ASF) under one or more",
                "+#    contributor license agreements.  See the NOTICE file distributed with",
                "+#    this work for additional information regarding copyright ownership.",
                "+#    The ASF licenses this file to You under the Apache License, Version 2.0",
                "+#    (the \"License\"); you may not use this file except in compliance with",
                "+#    the License.  You may obtain a copy of the License at",
                "+#",
                "+#       http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+#    Unless required by applicable law or agreed to in writing, software",
                "+#    distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+#    See the License for the specific language governing permissions and",
                "+#    limitations under the License.",
                "+#",
                "+################################################################################",
                "+",
                "+#exec 1>${out.file}",
                "+#exec 2>${err.file}",
                "+exec 1>/dev/null",
                "+exec 2>/dev/null",
                "+if [ \"x${dir}\" != \"x\" ]; then",
                "+    cd ${dir}",
                "+fi",
                "+nohup ${command} &",
                "+echo $! > \"${pid.file}\"",
                "diff --git a/util/src/main/resources/org/apache/karaf/jpm/impl/windows/destroy.vbs b/util/src/main/resources/org/apache/karaf/jpm/impl/windows/destroy.vbs",
                "new file mode 100644",
                "index 0000000000..abd60ebba3",
                "--- /dev/null",
                "+++ b/util/src/main/resources/org/apache/karaf/jpm/impl/windows/destroy.vbs",
                "@@ -0,0 +1,27 @@",
                "+'===============================================================================",
                "+'",
                "+'    Licensed to the Apache Software Foundation (ASF) under one or more",
                "+'    contributor license agreements.  See the NOTICE file distributed with",
                "+'    this work for additional information regarding copyright ownership.",
                "+'    The ASF licenses this file to You under the Apache License, Version 2.0",
                "+'    (the \"License\"); you may not use this file except in compliance with",
                "+'    the License.  You may obtain a copy of the License at",
                "+'",
                "+'       http://www.apache.org/licenses/LICENSE-2.0",
                "+'",
                "+'    Unless required by applicable law or agreed to in writing, software",
                "+'    distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+'    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+'    See the License for the specific language governing permissions and",
                "+'    limitations under the License.",
                "+'",
                "+'===============================================================================",
                "+",
                "+Set objWMIService = GetObject(\"winmgmts:\\\\.\\root\\cimv2\")",
                "+Set colProcessList = objWMIService.ExecQuery(\"Select * from Win32_Process Where ProcessId = ${pid}\")",
                "+intRetVal = 1",
                "+For Each objProcess in colProcessList",
                "+    objProcess.Terminate()",
                "+    intRetVal = 0",
                "+Next",
                "+WScript.Quit(intRetVal)",
                "diff --git a/util/src/main/resources/org/apache/karaf/jpm/impl/windows/running.vbs b/util/src/main/resources/org/apache/karaf/jpm/impl/windows/running.vbs",
                "new file mode 100644",
                "index 0000000000..32c65c5f03",
                "--- /dev/null",
                "+++ b/util/src/main/resources/org/apache/karaf/jpm/impl/windows/running.vbs",
                "@@ -0,0 +1,26 @@",
                "+'===============================================================================",
                "+'",
                "+'    Licensed to the Apache Software Foundation (ASF) under one or more",
                "+'    contributor license agreements.  See the NOTICE file distributed with",
                "+'    this work for additional information regarding copyright ownership.",
                "+'    The ASF licenses this file to You under the Apache License, Version 2.0",
                "+'    (the \"License\"); you may not use this file except in compliance with",
                "+'    the License.  You may obtain a copy of the License at",
                "+'",
                "+'       http://www.apache.org/licenses/LICENSE-2.0",
                "+'",
                "+'    Unless required by applicable law or agreed to in writing, software",
                "+'    distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+'    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+'    See the License for the specific language governing permissions and",
                "+'    limitations under the License.",
                "+'",
                "+'===============================================================================",
                "+",
                "+Set objWMIService = GetObject(\"winmgmts:\\\\.\\root\\cimv2\")",
                "+Set colProcessList = objWMIService.ExecQuery(\"Select * from Win32_Process Where ProcessId = ${pid}\")",
                "+intRetVal = 1",
                "+For Each objProcess in colProcessList",
                "+    intRetVal = 0",
                "+Next",
                "+WScript.Quit(intRetVal)",
                "diff --git a/util/src/main/resources/org/apache/karaf/jpm/impl/windows/start.vbs b/util/src/main/resources/org/apache/karaf/jpm/impl/windows/start.vbs",
                "new file mode 100644",
                "index 0000000000..6004c86c4c",
                "--- /dev/null",
                "+++ b/util/src/main/resources/org/apache/karaf/jpm/impl/windows/start.vbs",
                "@@ -0,0 +1,34 @@",
                "+'===============================================================================",
                "+'",
                "+'    Licensed to the Apache Software Foundation (ASF) under one or more",
                "+'    contributor license agreements.  See the NOTICE file distributed with",
                "+'    this work for additional information regarding copyright ownership.",
                "+'    The ASF licenses this file to You under the Apache License, Version 2.0",
                "+'    (the \"License\"); you may not use this file except in compliance with",
                "+'    the License.  You may obtain a copy of the License at",
                "+'",
                "+'       http://www.apache.org/licenses/LICENSE-2.0",
                "+'",
                "+'    Unless required by applicable law or agreed to in writing, software",
                "+'    distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+'    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+'    See the License for the specific language governing permissions and",
                "+'    limitations under the License.",
                "+'",
                "+'===============================================================================",
                "+",
                "+Set objWMIService = GetObject(\"winmgmts:\\\\.\\root\\cimv2\")",
                "+Set objConfig = objWMIService.Get(\"Win32_ProcessStartup\").SpawnInstance_",
                "+objConfig.ShowWindow = SW_HIDE",
                "+objConfig.CreateFlags = 8",
                "+If Len(\"${dir}\") > 0 Then",
                "+    intReturn = objWMIService.Get(\"Win32_Process\").Create(\"${command}\", \"${dir}\", objConfig, intProcessID)",
                "+Else",
                "+    intReturn = objWMIService.Get(\"Win32_Process\").Create(\"${command}\", Null, objConfig, intProcessID)",
                "+End If",
                "+If intReturn = 0 Then",
                "+    Set objOutputFile = CreateObject(\"Scripting.fileSystemObject\").CreateTextFile(\"${pid.file}\", TRUE)",
                "+    objOutputFile.WriteLine(intProcessID)",
                "+    objOutputFile.Close",
                "+End If",
                "+WScript.Quit(intReturn)"
            ],
            "changed_files": [
                "main/src/main/java/org/apache/karaf/jpm/Process.java",
                "main/src/main/java/org/apache/karaf/jpm/ProcessBuilder.java",
                "main/src/main/java/org/apache/karaf/jpm/ProcessBuilderFactory.java",
                "main/src/main/java/org/apache/karaf/jpm/impl/ProcessBuilderFactoryImpl.java",
                "main/src/main/java/org/apache/karaf/jpm/impl/ProcessBuilderImpl.java",
                "main/src/main/java/org/apache/karaf/jpm/impl/ProcessImpl.java",
                "main/src/main/java/org/apache/karaf/jpm/impl/ScriptUtils.java",
                "util/src/main/java/org/apache/karaf/jpm/Process.java",
                "util/src/main/java/org/apache/karaf/jpm/ProcessBuilder.java",
                "util/src/main/java/org/apache/karaf/jpm/ProcessBuilderFactory.java",
                "util/src/main/java/org/apache/karaf/jpm/impl/ProcessBuilderFactoryImpl.java",
                "util/src/main/java/org/apache/karaf/jpm/impl/ProcessBuilderImpl.java",
                "util/src/main/java/org/apache/karaf/jpm/impl/ProcessImpl.java",
                "util/src/main/java/org/apache/karaf/jpm/impl/ScriptUtils.java",
                "util/src/main/resources/org/apache/karaf/jpm/impl/unix/start.sh",
                "util/src/main/resources/org/apache/karaf/jpm/impl/windows/destroy.vbs",
                "util/src/main/resources/org/apache/karaf/jpm/impl/windows/running.vbs",
                "util/src/main/resources/org/apache/karaf/jpm/impl/windows/start.vbs"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: process, manage",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: process",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "63b0a6c5e5e61209a058f7412814976a324bfe96",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1511379738,
            "hunks": 2,
            "message": "[KARAF-5475] Remove \"log_\" prefix in subtype, use a synchronous bundle listener to obtain the subject correctly",
            "diff": [
                "diff --git a/audit/src/main/java/org/apache/karaf/audit/Activator.java b/audit/src/main/java/org/apache/karaf/audit/Activator.java",
                "index bc1ddf5d4f..959bd503c0 100644",
                "--- a/audit/src/main/java/org/apache/karaf/audit/Activator.java",
                "+++ b/audit/src/main/java/org/apache/karaf/audit/Activator.java",
                "@@ -417,3 +417,7 @@ public class Activator extends BaseActivator implements ManagedService {",
                "             String topic = event.getTopic();",
                "-            return topic.substring(topic.lastIndexOf('/') + 1).toLowerCase(Locale.ENGLISH);",
                "+            String subtype = topic.substring(topic.lastIndexOf('/') + 1).toLowerCase(Locale.ENGLISH);",
                "+            if (subtype.startsWith(\"log_\")) {",
                "+                subtype = subtype.substring(\"log_\".length());",
                "+            }",
                "+            return subtype;",
                "         }",
                "diff --git a/services/eventadmin/src/main/java/org/apache/felix/eventadmin/impl/adapter/BundleEventAdapter.java b/services/eventadmin/src/main/java/org/apache/felix/eventadmin/impl/adapter/BundleEventAdapter.java",
                "new file mode 100644",
                "index 0000000000..d59a1d0709",
                "--- /dev/null",
                "+++ b/services/eventadmin/src/main/java/org/apache/felix/eventadmin/impl/adapter/BundleEventAdapter.java",
                "@@ -0,0 +1,127 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.felix.eventadmin.impl.adapter;",
                "+",
                "+import org.osgi.framework.BundleContext;",
                "+import org.osgi.framework.BundleEvent;",
                "+import org.osgi.framework.BundleListener;",
                "+import org.osgi.framework.SynchronousBundleListener;",
                "+import org.osgi.service.event.Event;",
                "+import org.osgi.service.event.EventAdmin;",
                "+import org.osgi.service.event.EventConstants;",
                "+",
                "+import java.util.Dictionary;",
                "+import java.util.Hashtable;",
                "+",
                "+/**",
                "+ * This class registers itself as a listener for bundle events and posts them via",
                "+ * the EventAdmin as specified in 113.6.4 OSGi R4 compendium.",
                "+ *",
                "+ * @author <a href=\"mailto:dev@felix.apache.org\">Felix Project Team</a>",
                "+ */",
                "+public class BundleEventAdapter extends AbstractAdapter implements SynchronousBundleListener",
                "+{",
                "+    /**",
                "+     * The constructor of the adapter. This will register the adapter with the given",
                "+     * context as a <tt>BundleListener</tt> and subsequently, will post received",
                "+     * events via the given EventAdmin.",
                "+     *",
                "+     * @param context The bundle context with which to register as a listener.",
                "+     * @param admin The <tt>EventAdmin</tt> to use for posting events.",
                "+     */",
                "+    public BundleEventAdapter(final BundleContext context, final EventAdmin admin)",
                "+    {",
                "+        super(admin);",
                "+        context.addBundleListener(this);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void destroy(BundleContext context) {",
                "+        context.removeBundleListener(this);",
                "+    }",
                "+",
                "+    /**",
                "+     * Once a bundle event is received this method assembles and posts an event via",
                "+     * the <tt>EventAdmin</tt> as specified in 113.6.4 OSGi R4 compendium.",
                "+     *",
                "+     * @param event The event to adapt.",
                "+     */",
                "+    @Override",
                "+    public void bundleChanged(final BundleEvent event)",
                "+    {",
                "+        final Dictionary<String, Object> properties = new Hashtable<String, Object>();",
                "+",
                "+        properties.put(EventConstants.EVENT, event);",
                "+",
                "+        properties.put(\"bundle.id\", new Long(event.getBundle()",
                "+            .getBundleId()));",
                "+",
                "+        final String symbolicName = event.getBundle().getSymbolicName();",
                "+",
                "+        if (null != symbolicName)",
                "+        {",
                "+            properties.put(EventConstants.BUNDLE_SYMBOLICNAME,",
                "+                symbolicName);",
                "+        }",
                "+",
                "+        properties.put(\"bundle\", event.getBundle());",
                "+",
                "+        final StringBuffer topic = new StringBuffer(BundleEvent.class",
                "+            .getName().replace('.', '/')).append('/');",
                "+",
                "+        switch (event.getType())",
                "+        {",
                "+            case BundleEvent.INSTALLED:",
                "+                topic.append(\"INSTALLED\");",
                "+                break;",
                "+            case BundleEvent.STARTING:",
                "+                topic.append(\"STARTING\");",
                "+                break;",
                "+            case BundleEvent.STARTED:",
                "+                topic.append(\"STARTED\");",
                "+                break;",
                "+            case BundleEvent.STOPPING:",
                "+                topic.append(\"STOPPING\");",
                "+                break;",
                "+            case BundleEvent.STOPPED:",
                "+                topic.append(\"STOPPED\");",
                "+                break;",
                "+            case BundleEvent.UPDATED:",
                "+                topic.append(\"UPDATED\");",
                "+                break;",
                "+            case BundleEvent.UNINSTALLED:",
                "+                topic.append(\"UNINSTALLED\");",
                "+                break;",
                "+            case BundleEvent.RESOLVED:",
                "+                topic.append(\"RESOLVED\");",
                "+                break;",
                "+            case BundleEvent.UNRESOLVED:",
                "+                topic.append(\"UNRESOLVED\");",
                "+                break;",
                "+            default:",
                "+                return; // IGNORE EVENT",
                "+        }",
                "+",
                "+        try {",
                "+            getEventAdmin().postEvent(new Event(topic.toString(), properties));",
                "+        } catch (IllegalStateException e) {",
                "+            // This is o.k. - indicates that we are stopped.",
                "+        }",
                "+    }",
                "+}"
            ],
            "changed_files": [
                "audit/src/main/java/org/apache/karaf/audit/Activator.java",
                "services/eventadmin/src/main/java/org/apache/felix/eventadmin/impl/adapter/BundleEventAdapter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5475": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: service",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5475",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c58790281b4d11b369ac1ccc131cee4be0bc6575",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1509023816,
            "hunks": 1,
            "message": "[KARAF-5430] Upgrade to Spring 4.3.12.RELEASE",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index e5c2d305f8..8d554b533b 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -290,3 +290,3 @@",
                "         <spring42.version>4.2.9.RELEASE_1</spring42.version>",
                "-        <spring43.version>4.3.10.RELEASE_1</spring43.version>",
                "+        <spring43.version>4.3.12.RELEASE_1</spring43.version>",
                "         <spring.security31.version>3.1.4.RELEASE</spring.security31.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5430": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: release",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5430",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a0ee11e0a56924ec5a1beba4884b202fac62f7ea",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1511427193,
            "hunks": 10,
            "message": "Partial revert of KARAF-5416 to keep libraries on java 1.8 specific runtimes This partially reverts commit 3f1f44b6521f058abea6f6df19ce03a4c353c991.",
            "diff": [
                "diff --git a/assemblies/features/base/src/main/filtered-resources/resources/bin/karaf b/assemblies/features/base/src/main/filtered-resources/resources/bin/karaf",
                "index a70a896db6..674b8d0f20 100644",
                "--- a/assemblies/features/base/src/main/filtered-resources/resources/bin/karaf",
                "+++ b/assemblies/features/base/src/main/filtered-resources/resources/bin/karaf",
                "@@ -157,4 +157,8 @@ run() {",
                "     fi",
                "+    JAVA_ENDORSED_DIRS=\"${JAVA_HOME}/jre/lib/endorsed:${JAVA_HOME}/lib/endorsed:${KARAF_HOME}/lib/endorsed\"",
                "+    JAVA_EXT_DIRS=\"${JAVA_HOME}/jre/lib/ext:${JAVA_HOME}/lib/ext:${KARAF_HOME}/lib/ext\"",
                "     if ${cygwin}; then",
                "         JAVA_HOME=$(cygpath --path --windows \"${JAVA_HOME}\")",
                "+        JAVA_ENDORSED_DIRS=$(cygpath --path --windows \"${JAVA_ENDORSED_DIRS}\")",
                "+        JAVA_EXT_DIRS=$(cygpath --path --windows \"${JAVA_EXT_DIRS}\")",
                "     fi",
                "@@ -292,2 +296,4 @@ run() {",
                "                 ${KARAF_EXEC} \"${JAVA}\" ${JAVA_OPTS} \\",
                "+                    -Djava.endorsed.dirs=\"${JAVA_ENDORSED_DIRS}\" \\",
                "+                    -Djava.ext.dirs=\"${JAVA_EXT_DIRS}\" \\",
                "                     -Dkaraf.instances=\"${KARAF_HOME}/instances\" \\",
                "diff --git a/assemblies/features/base/src/main/filtered-resources/resources/bin/karaf.bat b/assemblies/features/base/src/main/filtered-resources/resources/bin/karaf.bat",
                "index 0cb31c2ed3..1f95c211e8 100644",
                "--- a/assemblies/features/base/src/main/filtered-resources/resources/bin/karaf.bat",
                "+++ b/assemblies/features/base/src/main/filtered-resources/resources/bin/karaf.bat",
                "@@ -416,2 +416,4 @@ if \"%KARAF_PROFILER%\" == \"\" goto :RUN",
                "                 -classpath \"%CLASSPATH%\" ^",
                "+                -Djava.endorsed.dirs=\"%JAVA_HOME%\\jre\\lib\\endorsed;%JAVA_HOME%\\lib\\endorsed;%KARAF_HOME%\\lib\\endorsed\" ^",
                "+                -Djava.ext.dirs=\"%JAVA_HOME%\\jre\\lib\\ext;%JAVA_HOME%\\lib\\ext;%KARAF_HOME%\\lib\\ext\" ^",
                "                 -Dkaraf.instances=\"%KARAF_HOME%\\instances\" ^",
                "diff --git a/manual/src/main/asciidoc/user-guide/os-integration.adoc b/manual/src/main/asciidoc/user-guide/os-integration.adoc",
                "index 70022e4764..9af02e9f6e 100644",
                "--- a/manual/src/main/asciidoc/user-guide/os-integration.adoc",
                "+++ b/manual/src/main/asciidoc/user-guide/os-integration.adoc",
                "@@ -293,2 +293,6 @@ wrapper.java.additional.6=-Dkaraf.startLocalConsole=false",
                " wrapper.java.additional.7=-Dkaraf.startRemoteShell=true",
                "+wrapper.java.additional.8=-Djava.io.tmpdir=%KARAF_DATA%/tmp",
                "+# Uncomment if you need libraries on Java 8",
                "+#wrapper.java.additional.9=-Djava.endorsed.dirs=%JAVA_HOME%/jre/lib/endorsed:%JAVA_HOME%/lib/endorsed:%KARAF_HOME%/lib/endorsed",
                "+#wrapper.java.additional.10=-Djava.ext.dirs=%JAVA_HOME%/jre/lib/ext:%JAVA_HOME%/lib/ext:%KARAF_HOME%/lib/ext",
                "diff --git a/profile/src/main/java/org/apache/karaf/profile/assembly/Builder.java b/profile/src/main/java/org/apache/karaf/profile/assembly/Builder.java",
                "index 01f9a4a616..e69656b374 100644",
                "--- a/profile/src/main/java/org/apache/karaf/profile/assembly/Builder.java",
                "+++ b/profile/src/main/java/org/apache/karaf/profile/assembly/Builder.java",
                "@@ -147,3 +147,3 @@ public class Builder {",
                "     List<String> libraries = new ArrayList<>();",
                "-    String javase = \"1.7\";",
                "+    String javase = \"1.8\";",
                "     KarafVersion karafVersion = KarafVersion.v4x;",
                "@@ -717,4 +717,4 @@ public class Builder {",
                "                     ? clause.getDirective(LIBRARY_CLAUSE_TYPE) : Library.TYPE_DEFAULT;",
                "-            if (type == Library.TYPE_ENDORSED || type == Library.TYPE_EXTENSION) {",
                "-                LOGGER.warn(\"Ignoring library \" + library + \" which is of an unsupported type \" + type + \".\");",
                "+            if (!javase.startsWith(\"1.\") && (Library.TYPE_ENDORSED.equals(type) || Library.TYPE_EXTENSION.equals(type))) {",
                "+                LOGGER.warn(\"Ignoring library \" + library + \" of type \" + type + \" which is only supported for Java 1.8.\");",
                "                 continue;",
                "diff --git a/wrapper/src/main/resources/org/apache/karaf/wrapper/internal/unix/karaf-wrapper.conf b/wrapper/src/main/resources/org/apache/karaf/wrapper/internal/unix/karaf-wrapper.conf",
                "index 9bc2f9c1cc..2b2f2a05be 100644",
                "--- a/wrapper/src/main/resources/org/apache/karaf/wrapper/internal/unix/karaf-wrapper.conf",
                "+++ b/wrapper/src/main/resources/org/apache/karaf/wrapper/internal/unix/karaf-wrapper.conf",
                "@@ -47,2 +47,5 @@ wrapper.java.additional.7=-Dkaraf.startRemoteShell=true",
                " wrapper.java.additional.8=-Djava.io.tmpdir=%KARAF_DATA%/tmp",
                "+# Uncomment if you need libraries on Java 8",
                "+#wrapper.java.additional.9=-Djava.endorsed.dirs=%JAVA_HOME%/jre/lib/endorsed:%JAVA_HOME%/lib/endorsed:%KARAF_HOME%/lib/endorsed",
                "+#wrapper.java.additional.10=-Djava.ext.dirs=%JAVA_HOME%/jre/lib/ext:%JAVA_HOME%/lib/ext:%KARAF_HOME%/lib/ext",
                "diff --git a/wrapper/src/main/resources/org/apache/karaf/wrapper/internal/windows/karaf-wrapper.conf b/wrapper/src/main/resources/org/apache/karaf/wrapper/internal/windows/karaf-wrapper.conf",
                "index 4765361c1a..51a18772fb 100644",
                "--- a/wrapper/src/main/resources/org/apache/karaf/wrapper/internal/windows/karaf-wrapper.conf",
                "+++ b/wrapper/src/main/resources/org/apache/karaf/wrapper/internal/windows/karaf-wrapper.conf",
                "@@ -47,2 +47,5 @@ wrapper.java.additional.7=-Dkaraf.startRemoteShell=true",
                " wrapper.java.additional.8=-Djava.io.tmpdir=\"%KARAF_DATA%/tmp\"",
                "+# Uncomment if you need libraries on Java 8",
                "+#wrapper.java.additional.9=-Djava.endorsed.dirs=\"%JAVA_HOME%/jre/lib/endorsed;%JAVA_HOME%/lib/endorsed;%KARAF_HOME%/lib/endorsed\"",
                "+#wrapper.java.additional.10=-Djava.ext.dirs=\"%JAVA_HOME%/jre/lib/ext;%JAVA_HOME%/lib/ext;%KARAF_HOME%/lib/ext\"",
                "diff --git a/wrapper/src/main/resources/org/apache/karaf/wrapper/internal/windows64/karaf-wrapper.conf b/wrapper/src/main/resources/org/apache/karaf/wrapper/internal/windows64/karaf-wrapper.conf",
                "index 4765361c1a..51a18772fb 100644",
                "--- a/wrapper/src/main/resources/org/apache/karaf/wrapper/internal/windows64/karaf-wrapper.conf",
                "+++ b/wrapper/src/main/resources/org/apache/karaf/wrapper/internal/windows64/karaf-wrapper.conf",
                "@@ -47,2 +47,5 @@ wrapper.java.additional.7=-Dkaraf.startRemoteShell=true",
                " wrapper.java.additional.8=-Djava.io.tmpdir=\"%KARAF_DATA%/tmp\"",
                "+# Uncomment if you need libraries on Java 8",
                "+#wrapper.java.additional.9=-Djava.endorsed.dirs=\"%JAVA_HOME%/jre/lib/endorsed;%JAVA_HOME%/lib/endorsed;%KARAF_HOME%/lib/endorsed\"",
                "+#wrapper.java.additional.10=-Djava.ext.dirs=\"%JAVA_HOME%/jre/lib/ext;%JAVA_HOME%/lib/ext;%KARAF_HOME%/lib/ext\""
            ],
            "changed_files": [
                "assemblies/features/base/src/main/filtered-resources/resources/bin/karaf",
                "assemblies/features/base/src/main/filtered-resources/resources/bin/karaf.bat",
                "manual/src/main/asciidoc/user-guide/os-integration.adoc",
                "profile/src/main/java/org/apache/karaf/profile/assembly/Builder.java",
                "wrapper/src/main/resources/org/apache/karaf/wrapper/internal/unix/karaf-wrapper.conf",
                "wrapper/src/main/resources/org/apache/karaf/wrapper/internal/windows/karaf-wrapper.conf",
                "wrapper/src/main/resources/org/apache/karaf/wrapper/internal/windows64/karaf-wrapper.conf"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5416": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: file, user",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5416",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3d57887b58745018808e2c2f67192201a8d0ef7d",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1510246707,
            "hunks": 13,
            "message": "[KARAF-5475] Add a ClientPrincipal containing the connection method / remote ip",
            "diff": [
                "diff --git a/jaas/boot/src/main/java/org/apache/karaf/jaas/boot/principal/ClientPrincipal.java b/jaas/boot/src/main/java/org/apache/karaf/jaas/boot/principal/ClientPrincipal.java",
                "new file mode 100644",
                "index 0000000000..e76aec162f",
                "--- /dev/null",
                "+++ b/jaas/boot/src/main/java/org/apache/karaf/jaas/boot/principal/ClientPrincipal.java",
                "@@ -0,0 +1,54 @@",
                "+/*",
                "+ *  Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ *  you may not use this file except in compliance with the License.",
                "+ *  You may obtain a copy of the License at",
                "+ *",
                "+ *       http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ *  Unless required by applicable law or agreed to in writing, software",
                "+ *  distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ *  See the License for the specific language governing permissions and",
                "+ *  limitations under the License.",
                "+ *  under the License.",
                "+ */",
                "+package org.apache.karaf.jaas.boot.principal;",
                "+",
                "+import java.io.Serializable;",
                "+import java.security.Principal;",
                "+import java.util.Objects;",
                "+",
                "+public class ClientPrincipal implements Principal, Serializable {",
                "+",
                "+    private final String method;",
                "+    private final String address;",
                "+",
                "+    public ClientPrincipal(String method, String address) {",
                "+        this.method = method;",
                "+        this.address = address;",
                "+    }",
                "+",
                "+    @Override",
                "+    public String getName() {",
                "+        return method + \"(\" + address + \")\";",
                "+    }",
                "+",
                "+    public String getMethod() {",
                "+        return method;",
                "+    }",
                "+",
                "+    public String getAddress() {",
                "+        return address;",
                "+    }",
                "+",
                "+    @Override",
                "+    public int hashCode() {",
                "+        return Objects.hash(getName());",
                "+    }",
                "+",
                "+    @Override",
                "+    public String toString() {",
                "+        return \"ClientPrincipal[\" + getName() + \"]\";",
                "+    }",
                "+",
                "+}",
                "diff --git a/management/server/src/main/java/org/apache/karaf/management/JaasAuthenticator.java b/management/server/src/main/java/org/apache/karaf/management/JaasAuthenticator.java",
                "index 457d127048..1dbab703d4 100644",
                "--- a/management/server/src/main/java/org/apache/karaf/management/JaasAuthenticator.java",
                "+++ b/management/server/src/main/java/org/apache/karaf/management/JaasAuthenticator.java",
                "@@ -18,4 +18,6 @@ package org.apache.karaf.management;",
                "+import org.apache.karaf.jaas.boot.principal.ClientPrincipal;",
                " import org.apache.karaf.jaas.boot.principal.RolePrincipal;",
                "+import java.rmi.server.RemoteServer;",
                " import java.security.Principal;",
                "@@ -55,2 +57,7 @@ public class JaasAuthenticator implements JMXAuthenticator {",
                "             Subject subject = new Subject();",
                "+            try {",
                "+                subject.getPrincipals().add(new ClientPrincipal(\"jmx\", RemoteServer.getClientHost()));",
                "+            } catch (Throwable t) {",
                "+                // Ignore",
                "+            }",
                "             LoginContext loginContext = new LoginContext(realm, subject, callbacks -> {",
                "diff --git a/shell/core/src/main/java/org/apache/karaf/shell/impl/console/osgi/LocalConsoleManager.java b/shell/core/src/main/java/org/apache/karaf/shell/impl/console/osgi/LocalConsoleManager.java",
                "index 1bd3f2014f..e31d606202 100644",
                "--- a/shell/core/src/main/java/org/apache/karaf/shell/impl/console/osgi/LocalConsoleManager.java",
                "+++ b/shell/core/src/main/java/org/apache/karaf/shell/impl/console/osgi/LocalConsoleManager.java",
                "@@ -26,2 +26,3 @@ import javax.security.auth.Subject;",
                "+import org.apache.karaf.jaas.boot.principal.ClientPrincipal;",
                " import org.apache.karaf.jaas.boot.principal.RolePrincipal;",
                "@@ -136,2 +137,3 @@ public class LocalConsoleManager {",
                "         subject.getPrincipals().add(new UserPrincipal(userName));",
                "+        subject.getPrincipals().add(new ClientPrincipal(\"local\", \"localhost\"));",
                "diff --git a/shell/ssh/src/main/java/org/apache/karaf/shell/ssh/KarafJaasAuthenticator.java b/shell/ssh/src/main/java/org/apache/karaf/shell/ssh/KarafJaasAuthenticator.java",
                "index 3ab370d37d..8d4f88c79f 100644",
                "--- a/shell/ssh/src/main/java/org/apache/karaf/shell/ssh/KarafJaasAuthenticator.java",
                "+++ b/shell/ssh/src/main/java/org/apache/karaf/shell/ssh/KarafJaasAuthenticator.java",
                "@@ -32,2 +32,3 @@ import javax.security.auth.login.LoginContext;",
                "+import org.apache.karaf.jaas.boot.principal.ClientPrincipal;",
                " import org.apache.karaf.jaas.boot.principal.RolePrincipal;",
                "@@ -87,2 +88,3 @@ public class KarafJaasAuthenticator implements PasswordAuthenticator, PublickeyA",
                "             Subject subject = new Subject();",
                "+            subject.getPrincipals().add(new ClientPrincipal(\"ssh\", session.getClientAddress().toString()));",
                "             LoginContext loginContext = new LoginContext(realm, subject, callbackHandler);",
                "diff --git a/webconsole/console/src/main/java/org/apache/felix/webconsole/internal/servlet/JaasSecurityProvider.java b/webconsole/console/src/main/java/org/apache/felix/webconsole/internal/servlet/JaasSecurityProvider.java",
                "index fd2cc9db35..5676a90e75 100644",
                "--- a/webconsole/console/src/main/java/org/apache/felix/webconsole/internal/servlet/JaasSecurityProvider.java",
                "+++ b/webconsole/console/src/main/java/org/apache/felix/webconsole/internal/servlet/JaasSecurityProvider.java",
                "@@ -38,2 +38,3 @@ import javax.servlet.http.HttpSession;",
                " import org.apache.felix.webconsole.WebConsoleSecurityProvider2;",
                "+import org.apache.karaf.jaas.boot.principal.ClientPrincipal;",
                " import org.osgi.service.cm.ManagedService;",
                "@@ -79,3 +80,3 @@ public class JaasSecurityProvider implements WebConsoleSecurityProvider2, Manage",
                "     public Object authenticate(final String username, final String password) {",
                "-        return doAuthenticate( username, password );",
                "+        return doAuthenticate( \"?\", username, password );",
                "     }",
                "@@ -102,5 +103,6 @@ public class JaasSecurityProvider implements WebConsoleSecurityProvider2, Manage",
                "-    public Subject doAuthenticate(final String username, final String password) {",
                "+    public Subject doAuthenticate(final String address, final String username, final String password) {",
                "         try {",
                "             Subject subject = new Subject();",
                "+            subject.getPrincipals().add(new ClientPrincipal(\"webconsole\", address));",
                "             LoginContext loginContext = new LoginContext(realm, subject, callbacks -> {",
                "@@ -197,3 +199,4 @@ public class JaasSecurityProvider implements WebConsoleSecurityProvider2, Manage",
                "                         {",
                "-                            subject = doAuthenticate(username, password);",
                "+                            String addr = request.getRemoteHost() + \":\" + request.getRemotePort();",
                "+                            subject = doAuthenticate( addr, username, password );",
                "                         }"
            ],
            "changed_files": [
                "jaas/boot/src/main/java/org/apache/karaf/jaas/boot/principal/ClientPrincipal.java",
                "management/server/src/main/java/org/apache/karaf/management/JaasAuthenticator.java",
                "shell/core/src/main/java/org/apache/karaf/shell/impl/console/osgi/LocalConsoleManager.java",
                "shell/ssh/src/main/java/org/apache/karaf/shell/ssh/KarafJaasAuthenticator.java",
                "webconsole/console/src/main/java/org/apache/felix/webconsole/internal/servlet/JaasSecurityProvider.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5475": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: manager, console, security, manage",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5475",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "55a17dccec7d950e7cfa4d53890b1b143f140cb0",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1508999674,
            "hunks": 1,
            "message": "[KARAF-5430] Upgrade to Spring 4.0.9.RELEASE",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index aa8a234ed8..e5c2d305f8 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -287,3 +287,3 @@",
                "         <spring32.version>3.2.18.RELEASE_1</spring32.version>",
                "-        <spring40.version>4.0.7.RELEASE_3</spring40.version>",
                "+        <spring40.version>4.0.9.RELEASE_1</spring40.version>",
                "         <spring41.version>4.1.9.RELEASE_1</spring41.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5430": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: release",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5430",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "26a948bb9cef3ef8af640293703e051c9673589d",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1510247159,
            "hunks": 22,
            "message": "[KARAF-5475] Add EventAdmin support to JMX",
            "diff": [
                "diff --git a/management/server/pom.xml b/management/server/pom.xml",
                "index eb7648f915..6b03aa5345 100644",
                "--- a/management/server/pom.xml",
                "+++ b/management/server/pom.xml",
                "@@ -111,3 +111,9 @@",
                "                     <instructions>",
                "-                        <Export-Package>org.apache.karaf.management;version=${project.version};-split-package:=merge-first</Export-Package>",
                "+                        <Export-Package>",
                "+                            org.apache.karaf.management;version=${project.version};-split-package:=merge-first",
                "+                        </Export-Package>",
                "+                        <Import-Package>",
                "+                            org.osgi.service.event*;resolution:=optional,",
                "+                            *",
                "+                        </Import-Package>",
                "                         <Private-Package>",
                "diff --git a/management/server/src/main/java/org/apache/karaf/management/KarafMBeanServerGuard.java b/management/server/src/main/java/org/apache/karaf/management/KarafMBeanServerGuard.java",
                "index 6467a385d9..ab2fd44a91 100644",
                "--- a/management/server/src/main/java/org/apache/karaf/management/KarafMBeanServerGuard.java",
                "+++ b/management/server/src/main/java/org/apache/karaf/management/KarafMBeanServerGuard.java",
                "@@ -18,3 +18,7 @@ package org.apache.karaf.management;",
                "+import org.apache.karaf.management.internal.Activator;",
                " import org.apache.karaf.management.internal.BulkRequestContext;",
                "+import org.apache.karaf.management.internal.EventAdminLogger;",
                "+import org.apache.karaf.management.internal.EventAdminMBeanServerWrapper;",
                "+import org.apache.karaf.management.internal.MBeanInvocationHandler;",
                " import org.apache.karaf.service.guard.tools.ACLConfigurationParser;",
                "@@ -27,2 +31,3 @@ import java.lang.reflect.InvocationHandler;",
                " import java.lang.reflect.Method;",
                "+import java.lang.reflect.Proxy;",
                " import java.security.Principal;",
                "@@ -56,3 +61,8 @@ public class KarafMBeanServerGuard implements InvocationHandler {",
                "+    private static final String INVOKE = \"invoke\";",
                "+",
                "+    private static final String[] INVOKE_SIG = new String[] {ObjectName.class.getName(), String.class.getName(), Object[].class.getName(), String[].class.getName()};",
                "+",
                "     private ConfigurationAdmin configAdmin;",
                "+    private EventAdminLogger logger;",
                "@@ -66,2 +76,10 @@ public class KarafMBeanServerGuard implements InvocationHandler {",
                "+    public EventAdminLogger getLogger() {",
                "+        return logger;",
                "+    }",
                "+",
                "+    public void setLogger(EventAdminLogger logger) {",
                "+        this.logger = logger;",
                "+    }",
                "+",
                "     public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {",
                "@@ -73,11 +91,19 @@ public class KarafMBeanServerGuard implements InvocationHandler {",
                "+        MBeanServer mbs = (MBeanServer) proxy;",
                "+        if (mbs != null && Proxy.getInvocationHandler(mbs) instanceof MBeanInvocationHandler) {",
                "+            mbs = ((MBeanInvocationHandler) Proxy.getInvocationHandler(mbs)).getDelegate();",
                "+        }",
                "+        if (mbs instanceof EventAdminMBeanServerWrapper) {",
                "+            mbs = ((EventAdminMBeanServerWrapper) mbs).getDelegate();",
                "+        }",
                "+",
                "         ObjectName objectName = (ObjectName) args[0];",
                "         if (\"getAttribute\".equals(method.getName())) {",
                "-            handleGetAttribute((MBeanServer) proxy, objectName, (String) args[1]);",
                "+            handleGetAttribute(mbs, objectName, (String) args[1]);",
                "         } else if (\"getAttributes\".equals(method.getName())) {",
                "-            handleGetAttributes((MBeanServer) proxy, objectName, (String[]) args[1]);",
                "+            handleGetAttributes(mbs, objectName, (String[]) args[1]);",
                "         } else if (\"setAttribute\".equals(method.getName())) {",
                "-            handleSetAttribute((MBeanServer) proxy, objectName, (Attribute) args[1]);",
                "+            handleSetAttribute(mbs, objectName, (Attribute) args[1]);",
                "         } else if (\"setAttributes\".equals(method.getName())) {",
                "-            handleSetAttributes((MBeanServer) proxy, objectName, (AttributeList) args[1]);",
                "+            handleSetAttributes(mbs, objectName, (AttributeList) args[1]);",
                "         } else if (\"invoke\".equals(method.getName())) {",
                "@@ -340,3 +366,7 @@ public class KarafMBeanServerGuard implements InvocationHandler {",
                "         }",
                "-        throw new SecurityException(\"Insufficient roles/credentials for operation\");",
                "+        SecurityException se = new SecurityException(\"Insufficient roles/credentials for operation\");",
                "+        if (logger != null) {",
                "+            logger.log(INVOKE, INVOKE_SIG, null, se, objectName, operationName, signature, params);",
                "+        }",
                "+        throw se;",
                "     }",
                "diff --git a/management/server/src/main/java/org/apache/karaf/management/internal/Activator.java b/management/server/src/main/java/org/apache/karaf/management/internal/Activator.java",
                "index 484c4ffa07..4233d51462 100644",
                "--- a/management/server/src/main/java/org/apache/karaf/management/internal/Activator.java",
                "+++ b/management/server/src/main/java/org/apache/karaf/management/internal/Activator.java",
                "@@ -62,2 +62,4 @@ public class Activator extends BaseActivator implements ManagedService {",
                "+    private EventAdminLogger eventAdminLogger;",
                "+",
                "     protected void doStart() throws Exception {",
                "@@ -70,2 +72,22 @@ public class Activator extends BaseActivator implements ManagedService {",
                "+        EventAdminLogger logger = null;",
                "+        if (getBoolean(\"audit.eventadmin.enabled\", true)) {",
                "+            try {",
                "+                logger = new EventAdminLoggerImpl(bundleContext);",
                "+            } catch (Throwable ignore) {",
                "+                // Ignore the listener if EventAdmin package isn't present",
                "+            }",
                "+        }",
                "+        if (logger == null) {",
                "+            logger = new EventAdminLogger() {",
                "+                @Override",
                "+                public void close() {",
                "+                }",
                "+                @Override",
                "+                public void log(String methodName, String[] signature, Object result, Throwable error, Object... params) {",
                "+                }",
                "+            };",
                "+        }",
                "+        eventAdminLogger = logger;",
                "+",
                "         String rmiRegistryHost = getString(\"rmiRegistryHost\", \"\");",
                "@@ -95,2 +117,3 @@ public class Activator extends BaseActivator implements ManagedService {",
                "         KarafMBeanServerGuard guard = new KarafMBeanServerGuard();",
                "+        guard.setLogger(eventAdminLogger);",
                "         guard.setConfigAdmin(configurationAdmin);",
                "@@ -110,2 +133,3 @@ public class Activator extends BaseActivator implements ManagedService {",
                "         MBeanServer mbeanServer = mbeanServerFactory.getServer();",
                "+        mbeanServer = new EventAdminMBeanServerWrapper(mbeanServer, eventAdminLogger);",
                "@@ -210,2 +234,9 @@ public class Activator extends BaseActivator implements ManagedService {",
                "         }",
                "+        if (eventAdminLogger != null) {",
                "+            try {",
                "+                eventAdminLogger.close();",
                "+            } finally {",
                "+                eventAdminLogger = null;",
                "+            }",
                "+        }",
                "     }",
                "diff --git a/management/server/src/main/java/org/apache/karaf/management/internal/EventAdminLogger.java b/management/server/src/main/java/org/apache/karaf/management/internal/EventAdminLogger.java",
                "new file mode 100644",
                "index 0000000000..ada861ea45",
                "--- /dev/null",
                "+++ b/management/server/src/main/java/org/apache/karaf/management/internal/EventAdminLogger.java",
                "@@ -0,0 +1,25 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.karaf.management.internal;",
                "+",
                "+public interface EventAdminLogger {",
                "+",
                "+    void close();",
                "+",
                "+    void log(String methodName, String[] signature, Object result, Throwable error, Object... params);",
                "+",
                "+}",
                "diff --git a/management/server/src/main/java/org/apache/karaf/management/internal/EventAdminLoggerImpl.java b/management/server/src/main/java/org/apache/karaf/management/internal/EventAdminLoggerImpl.java",
                "new file mode 100644",
                "index 0000000000..b33a6bcccb",
                "--- /dev/null",
                "+++ b/management/server/src/main/java/org/apache/karaf/management/internal/EventAdminLoggerImpl.java",
                "@@ -0,0 +1,60 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.karaf.management.internal;",
                "+",
                "+import org.osgi.framework.BundleContext;",
                "+import org.osgi.service.event.Event;",
                "+import org.osgi.service.event.EventAdmin;",
                "+import org.osgi.util.tracker.ServiceTracker;",
                "+",
                "+import java.io.Closeable;",
                "+import java.util.HashMap;",
                "+import java.util.Locale;",
                "+import java.util.Map;",
                "+",
                "+public class EventAdminLoggerImpl implements EventAdminLogger {",
                "+",
                "+    private final ServiceTracker<EventAdmin, EventAdmin> tracker;",
                "+",
                "+    public EventAdminLoggerImpl(BundleContext context) {",
                "+        this.tracker = new ServiceTracker<>(context, EventAdmin.class.getName(), null);",
                "+        this.tracker.open();",
                "+    }",
                "+",
                "+    public void close() {",
                "+        this.tracker.close();",
                "+    }",
                "+",
                "+    public void log(String methodName, String[] signature, Object result, Throwable error, Object... params) {",
                "+        EventAdmin admin = tracker.getService();",
                "+        if (admin != null) {",
                "+            Map<String, Object> props = new HashMap<>();",
                "+            props.put(\"method\", methodName);",
                "+            props.put(\"signature\", signature);",
                "+            props.put(\"params\", params);",
                "+            if (result != null) {",
                "+                props.put(\"result\", result);",
                "+            }",
                "+            if (error != null) {",
                "+                props.put(\"error\", error);",
                "+            }",
                "+            Event event = new Event(\"javax/management/MBeanServer/\" + methodName.toUpperCase(Locale.ENGLISH), props);",
                "+            admin.postEvent(event);",
                "+        }",
                "+    }",
                "+",
                "+}",
                "diff --git a/management/server/src/main/java/org/apache/karaf/management/internal/EventAdminMBeanServerWrapper.java b/management/server/src/main/java/org/apache/karaf/management/internal/EventAdminMBeanServerWrapper.java",
                "new file mode 100644",
                "index 0000000000..b94ddf9cfb",
                "--- /dev/null",
                "+++ b/management/server/src/main/java/org/apache/karaf/management/internal/EventAdminMBeanServerWrapper.java",
                "@@ -0,0 +1,648 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.karaf.management.internal;",
                "+",
                "+import javax.management.Attribute;",
                "+import javax.management.AttributeList;",
                "+import javax.management.AttributeNotFoundException;",
                "+import javax.management.InstanceAlreadyExistsException;",
                "+import javax.management.InstanceNotFoundException;",
                "+import javax.management.IntrospectionException;",
                "+import javax.management.InvalidAttributeValueException;",
                "+import javax.management.ListenerNotFoundException;",
                "+import javax.management.MBeanException;",
                "+import javax.management.MBeanInfo;",
                "+import javax.management.MBeanRegistrationException;",
                "+import javax.management.MBeanServer;",
                "+import javax.management.NotCompliantMBeanException;",
                "+import javax.management.NotificationFilter;",
                "+import javax.management.NotificationListener;",
                "+import javax.management.ObjectInstance;",
                "+import javax.management.ObjectName;",
                "+import javax.management.OperationsException;",
                "+import javax.management.QueryExp;",
                "+import javax.management.ReflectionException;",
                "+import javax.management.loading.ClassLoaderRepository;",
                "+import java.io.ObjectInputStream;",
                "+import java.util.Objects;",
                "+import java.util.Set;",
                "+",
                "+public class EventAdminMBeanServerWrapper implements MBeanServer {",
                "+",
                "+    private static final String[] NO_ARGS_SIG = new String[] {ObjectName.class.getName()};",
                "+    private static final String[] OBJECT_NAME_ONLY_SIG = new String[] {ObjectName.class.getName()};",
                "+",
                "+    private static final String CREATE_MBEAN = \"createMBean\";",
                "+    private static final String[] CREATE_MBEAN_SIG_1 = new String[] {String.class.getName(), ObjectName.class.getName()};",
                "+    private static final String[] CREATE_MBEAN_SIG_2 = new String[] {String.class.getName(), ObjectName.class.getName(), ObjectName.class.getName()};",
                "+    private static final String[] CREATE_MBEAN_SIG_3 = new String[] {String.class.getName(), Object[].class.getName(), String[].class.getName()};",
                "+    private static final String[] CREATE_MBEAN_SIG_4 = new String[] {String.class.getName(), ObjectName.class.getName(), ObjectName.class.getName(), Object[].class.getName(), String[].class.getName()};",
                "+",
                "+    private static final String REGISTER_MBEAN = \"registerMBean\";",
                "+    private static final String[] REGISTER_MBEAN_SIG = new String[] {Object.class.getName(), ObjectName.class.getName()};",
                "+",
                "+",
                "+    private static final String UNREGISTER_MBEAN = \"unregisterMBean\";",
                "+    private static final String[] UNREGISTER_MBEAN_SIG = OBJECT_NAME_ONLY_SIG;",
                "+",
                "+    private static final String GET_OBJECT_INSTANCE = \"getObjectInstance\";",
                "+    private static final String[] GET_OBJECT_INSTANCE_SIG = OBJECT_NAME_ONLY_SIG;",
                "+",
                "+    private static final String QUERY_MBEANS = \"queryMBeans\";",
                "+    private static final String[] QUERY_MBEANS_SIG = new String[] {ObjectName.class.getName(), QueryExp.class.getName()};",
                "+",
                "+    private static final String QUERY_NAMES = \"queryMBeans\";",
                "+    private static final String[] QUERY_NAMES_SIG = QUERY_MBEANS_SIG;",
                "+",
                "+    private static final String IS_REGISTERED = \"isRegistered\";",
                "+    private static final String[] IS_REGISTERED_SIG = OBJECT_NAME_ONLY_SIG;",
                "+",
                "+    private static final String GET_MBEAN_COUNT = \"getMBeanCount\";",
                "+    private static final String[] GET_MBEAN_COUNT_SIG = NO_ARGS_SIG;",
                "+",
                "+    private static final String GET_ATTRIBUTE = \"getAttribute\";",
                "+    private static final String[] GET_ATTRIBUTE_SIG = new String[] {ObjectName.class.getName(), String.class.getName()};",
                "+",
                "+    private static final String GET_ATTRIBUTES = \"getAttributes\";",
                "+    private static final String[] GET_ATTRIBUTES_SIG = new String[] {ObjectName.class.getName(), String[].class.getName()};",
                "+",
                "+    private static final String SET_ATTRIBUTE = \"setAttribute\";",
                "+    private static final String[] SET_ATTRIBUTE_SIG = new String[] {ObjectName.class.getName(), Attribute.class.getName()};",
                "+",
                "+    private static final String SET_ATTRIBUTES = \"setAttributes\";",
                "+    private static final String[] SET_ATTRIBUTES_SIG = new String[] {ObjectName.class.getName(), AttributeList.class.getName()};",
                "+",
                "+    private static final String INVOKE = \"invoke\";",
                "+    private static final String[] INVOKE_SIG = new String[] {ObjectName.class.getName(), String.class.getName(), Object[].class.getName(), String[].class.getName()};",
                "+",
                "+    private static final String GET_DEFAULT_DOMAIN = \"getDefaultDomain\";",
                "+    private static final String[] GET_DEFAULT_DOMAIN_SIG = NO_ARGS_SIG;",
                "+",
                "+    private static final String GET_DOMAINS = \"getDomains\";",
                "+    private static final String[] GET_DOMAINS_SIG = NO_ARGS_SIG;",
                "+",
                "+    private static final String ADD_NOTIFICATION_LISTENER  = \"addNotificationListener\";",
                "+    private static final String[] ADD_NOTIFICATION_LISTENER_SIG_1 = new String[] {ObjectName.class.getName(), NotificationListener.class.getName(), NotificationFilter.class.getName(), Object.class.getName()};",
                "+    private static final String[] ADD_NOTIFICATION_LISTENER_SIG_2 = new String[] {ObjectName.class.getName(), ObjectName.class.getName(), NotificationFilter.class.getName(), Object.class.getName()};",
                "+",
                "+    private static final String REMOVE_NOTIFICATION_LISTENER  = \"addNotificationListener\";",
                "+    private static final String[] REMOVE_NOTIFICATION_LISTENER_SIG_1 = new String[] {ObjectName.class.getName(), ObjectName.class.getName()};",
                "+    private static final String[] REMOVE_NOTIFICATION_LISTENER_SIG_2 = new String[] {ObjectName.class.getName(), ObjectName.class.getName(), NotificationFilter.class.getName(), Object.class.getName()};",
                "+    private static final String[] REMOVE_NOTIFICATION_LISTENER_SIG_3 = new String[] {ObjectName.class.getName(), NotificationListener.class.getName()};",
                "+    private static final String[] REMOVE_NOTIFICATION_LISTENER_SIG_4 = new String[] {ObjectName.class.getName(), NotificationListener.class.getName(), NotificationFilter.class.getName(), Object.class.getName()};",
                "+",
                "+    private static final String GET_MBEAN_INFO = \"getMBeanInfo\";",
                "+    private static final String[] GET_MBEAN_INFO_SIG = OBJECT_NAME_ONLY_SIG;",
                "+",
                "+    private static final String IS_INSTANCE_OF = \"isInstanceOf\";",
                "+    private static final String[] IS_INSTANCE_OF_SIG = new String[] {ObjectName.class.getName(), String.class.getName()};",
                "+",
                "+    private static final String INSTANTIATE = \"instantiate\";",
                "+    private static final String[] INSTANTIATE_SIG1 = new String[] {String.class.getName()};",
                "+    private static final String[] INSTANTIATE_SIG2 = new String[] {String.class.getName(), ObjectName.class.getName()};",
                "+    private static final String[] INSTANTIATE_SIG3 = new String[] {String.class.getName(), Object[].class.getName(), String[].class.getName()};",
                "+    private static final String[] INSTANTIATE_SIG4 = new String[] {String.class.getName(), ObjectName.class.getName(), Object[].class.getName(), String[].class.getName()};",
                "+",
                "+    private static final String DESERIALIZE = \"deserialize\";",
                "+    private static final String[] DESERIALIZE_SIG1 = new String[] {ObjectName.class.getName(), byte[].class.getName()};",
                "+    private static final String[] DESERIALIZE_SIG2 = new String[] {String.class.getName(), byte[].class.getName()};",
                "+    private static final String[] DESERIALIZE_SIG3 = new String[] {String.class.getName(), ObjectName.class.getName(), byte[].class.getName()};",
                "+",
                "+    private static final String GET_CLASSLOADER_FOR = \"getClassLoaderFor\";",
                "+    private static final String[] GET_CLASSLOADER_FOR_SIG = OBJECT_NAME_ONLY_SIG;",
                "+",
                "+    private static final String GET_CLASSLOADER = \"getClassLoader\";",
                "+    private static final String[] GET_CLASSLOADER_SIG = OBJECT_NAME_ONLY_SIG;",
                "+",
                "+    private static final String GET_CLASSLOADER_REPOSITORY = \"getClassLoaderRepository\";",
                "+    private static final String[] GET_CLASSLOADER_REPOSITORY_SIG = NO_ARGS_SIG;",
                "+",
                "+    private final MBeanServer delegate;",
                "+    private final EventAdminLogger logger;",
                "+",
                "+    public EventAdminMBeanServerWrapper(MBeanServer delegate, EventAdminLogger logger) {",
                "+        this.delegate = Objects.requireNonNull(delegate);",
                "+        this.logger = Objects.requireNonNull(logger);",
                "+    }",
                "+",
                "+    private void log(String methodName, String[] signature, Object result, Throwable error, Object... params) {",
                "+        logger.log(methodName, signature, result, error, params);",
                "+    }",
                "+",
                "+    @Override",
                "+    public ObjectInstance createMBean(String className, ObjectName name) throws ReflectionException, InstanceAlreadyExistsException, MBeanException, NotCompliantMBeanException {",
                "+        Throwable error = null;",
                "+        ObjectInstance result = null;",
                "+        try {",
                "+            return result = delegate.createMBean(className, name);",
                "+        } catch (Throwable e) {",
                "+            error = e;",
                "+            throw e;",
                "+        } finally {",
                "+            log(CREATE_MBEAN, CREATE_MBEAN_SIG_1, result, error, className, name);",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public ObjectInstance createMBean(String className, ObjectName name, ObjectName loaderName) throws ReflectionException, InstanceAlreadyExistsException, MBeanException, NotCompliantMBeanException, InstanceNotFoundException {",
                "+        Throwable error = null;",
                "+        ObjectInstance result = null;",
                "+        try {",
                "+            return result = delegate.createMBean(className, name, loaderName);",
                "+        } catch (Throwable e) {",
                "+            error = e;",
                "+            throw e;",
                "+        } finally {",
                "+            log(CREATE_MBEAN, CREATE_MBEAN_SIG_2, result, error, className, name, loaderName);",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public ObjectInstance createMBean(String className, ObjectName name, Object[] params, String[] signature) throws ReflectionException, InstanceAlreadyExistsException, MBeanException, NotCompliantMBeanException {",
                "+        Throwable error = null;",
                "+        ObjectInstance result = null;",
                "+        try {",
                "+            return result = delegate.createMBean(className, name, params, signature);",
                "+        } catch (Throwable e) {",
                "+            error = e;",
                "+            throw e;",
                "+        } finally {",
                "+            log(CREATE_MBEAN, CREATE_MBEAN_SIG_3, result, error, className, name, params, signature);",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public ObjectInstance createMBean(String className, ObjectName name, ObjectName loaderName, Object[] params, String[] signature) throws ReflectionException, InstanceAlreadyExistsException, MBeanException, NotCompliantMBeanException, InstanceNotFoundException {",
                "+        Throwable error = null;",
                "+        ObjectInstance result = null;",
                "+        try {",
                "+            return result = delegate.createMBean(className, name, loaderName, params, signature);",
                "+        } catch (Throwable e) {",
                "+            error = e;",
                "+            throw e;",
                "+        } finally {",
                "+            log(CREATE_MBEAN, CREATE_MBEAN_SIG_4, result, error, className, name, loaderName, params, signature);",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public ObjectInstance registerMBean(Object object, ObjectName name) throws InstanceAlreadyExistsException, MBeanRegistrationException, NotCompliantMBeanException {",
                "+        Throwable error = null;",
                "+        ObjectInstance result = null;",
                "+        try {",
                "+            return result = delegate.registerMBean(object, name);",
                "+        } catch (Throwable e) {",
                "+            error = e;",
                "+            throw e;",
                "+        } finally {",
                "+            log(REGISTER_MBEAN, REGISTER_MBEAN_SIG, result, error, object, name);",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public void unregisterMBean(ObjectName name) throws InstanceNotFoundException, MBeanRegistrationException {",
                "+        Throwable error = null;",
                "+        try {",
                "+            delegate.unregisterMBean(name);",
                "+        } catch (Throwable e) {",
                "+            error = e;",
                "+            throw e;",
                "+        } finally {",
                "+            log(UNREGISTER_MBEAN, UNREGISTER_MBEAN_SIG, null, error, name);",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public ObjectInstance getObjectInstance(ObjectName name) throws InstanceNotFoundException {",
                "+        Throwable error = null;",
                "+        ObjectInstance result = null;",
                "+        try {",
                "+            return result = delegate.getObjectInstance(name);",
                "+        } catch (Throwable e) {",
                "+            error = e;",
                "+            throw e;",
                "+        } finally {",
                "+            log(GET_OBJECT_INSTANCE, GET_OBJECT_INSTANCE_SIG, result, error, name);",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public Set<ObjectInstance> queryMBeans(ObjectName name, QueryExp query) {",
                "+        Throwable error = null;",
                "+        Set<ObjectInstance> result = null;",
                "+        try {",
                "+            return result = delegate.queryMBeans(name, query);",
                "+        } catch (Throwable e) {",
                "+            error = e;",
                "+            throw e;",
                "+        } finally {",
                "+            log(QUERY_MBEANS, QUERY_MBEANS_SIG, result, error, name, query);",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public Set<ObjectName> queryNames(ObjectName name, QueryExp query) {",
                "+        Throwable error = null;",
                "+        Set<ObjectName> result = null;",
                "+        try {",
                "+            return result = delegate.queryNames(name, query);",
                "+        } catch (Throwable e) {",
                "+            error = e;",
                "+            throw e;",
                "+        } finally {",
                "+            log(QUERY_NAMES, QUERY_NAMES_SIG, result, error, name, query);",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean isRegistered(ObjectName name) {",
                "+        Throwable error = null;",
                "+        Boolean result = null;",
                "+        try {",
                "+            return result = delegate.isRegistered(name);",
                "+        } catch (Throwable e) {",
                "+            error = e;",
                "+            throw e;",
                "+        } finally {",
                "+            log(IS_REGISTERED, IS_REGISTERED_SIG, result, error, name);",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public Integer getMBeanCount() {",
                "+        Throwable error = null;",
                "+        Integer result = null;",
                "+        try {",
                "+            return result = delegate.getMBeanCount();",
                "+        } catch (Throwable e) {",
                "+            error = e;",
                "+            throw e;",
                "+        } finally {",
                "+            log(GET_MBEAN_COUNT, GET_MBEAN_COUNT_SIG, result, error);",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public Object getAttribute(ObjectName name, String attribute) throws MBeanException, AttributeNotFoundException, InstanceNotFoundException, ReflectionException {",
                "+        Throwable error = null;",
                "+        Object result = null;",
                "+        try {",
                "+            return result = delegate.getAttribute(name, attribute);",
                "+        } catch (Throwable e) {",
                "+            error = e;",
                "+            throw e;",
                "+        } finally {",
                "+            log(GET_ATTRIBUTE, GET_ATTRIBUTE_SIG, result, error, name, attribute);",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public AttributeList getAttributes(ObjectName name, String[] attributes) throws InstanceNotFoundException, ReflectionException {",
                "+        Throwable error = null;",
                "+        AttributeList result = null;",
                "+        try {",
                "+            return result = delegate.getAttributes(name, attributes);",
                "+        } catch (Throwable e) {",
                "+            error = e;",
                "+            throw e;",
                "+        } finally {",
                "+            log(GET_ATTRIBUTES, GET_ATTRIBUTES_SIG, result, error, name, attributes);",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setAttribute(ObjectName name, Attribute attribute) throws InstanceNotFoundException, AttributeNotFoundException, InvalidAttributeValueException, MBeanException, ReflectionException {",
                "+        Throwable error = null;",
                "+        try {",
                "+            delegate.setAttribute(name, attribute);",
                "+        } catch (Throwable e) {",
                "+            error = e;",
                "+            throw e;",
                "+        } finally {",
                "+            log(SET_ATTRIBUTE, SET_ATTRIBUTE_SIG, null, error, name, attribute);",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public AttributeList setAttributes(ObjectName name, AttributeList attributes) throws InstanceNotFoundException, ReflectionException {",
                "+        Throwable error = null;",
                "+        AttributeList result = null;",
                "+        try {",
                "+            return result = delegate.setAttributes(name, attributes);",
                "+        } catch (Throwable e) {",
                "+            error = e;",
                "+            throw e;",
                "+        } finally {",
                "+            log(SET_ATTRIBUTES, SET_ATTRIBUTES_SIG, result, error, name, attributes);",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public Object invoke(ObjectName name, String operationName, Object[] params, String[] signature) throws InstanceNotFoundException, MBeanException, ReflectionException {",
                "+        Throwable error = null;",
                "+        Object result = null;",
                "+        try {",
                "+            return result = delegate.invoke(name, operationName, params, signature);",
                "+        } catch (Throwable e) {",
                "+            error = e;",
                "+            throw e;",
                "+        } finally {",
                "+            log(INVOKE, INVOKE_SIG, result, error, name, operationName, params, signature);",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public String getDefaultDomain() {",
                "+        Throwable error = null;",
                "+        String result = null;",
                "+        try {",
                "+            return result = delegate.getDefaultDomain();",
                "+        } catch (Throwable e) {",
                "+            error = e;",
                "+            throw e;",
                "+        } finally {",
                "+            log(GET_DEFAULT_DOMAIN, GET_DEFAULT_DOMAIN_SIG, result, error);",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public String[] getDomains() {",
                "+        Throwable error = null;",
                "+        String[] result = null;",
                "+        try {",
                "+            return result = delegate.getDomains();",
                "+        } catch (Throwable e) {",
                "+            error = e;",
                "+            throw e;",
                "+        } finally {",
                "+            log(GET_DOMAINS, GET_DOMAINS_SIG, result, error);",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public void addNotificationListener(ObjectName name, NotificationListener listener, NotificationFilter filter, Object handback) throws InstanceNotFoundException {",
                "+        Throwable error = null;",
                "+        try {",
                "+            delegate.addNotificationListener(name, listener, filter, handback);",
                "+        } catch (Throwable e) {",
                "+            error = e;",
                "+            throw e;",
                "+        } finally {",
                "+            log(ADD_NOTIFICATION_LISTENER, ADD_NOTIFICATION_LISTENER_SIG_1, null, error, name, listener, filter, handback);",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public void addNotificationListener(ObjectName name, ObjectName listener, NotificationFilter filter, Object handback) throws InstanceNotFoundException {",
                "+        Throwable error = null;",
                "+        try {",
                "+            delegate.addNotificationListener(name, listener, filter, handback);",
                "+        } catch (Throwable e) {",
                "+            error = e;",
                "+            throw e;",
                "+        } finally {",
                "+            log(ADD_NOTIFICATION_LISTENER, ADD_NOTIFICATION_LISTENER_SIG_2, null, error, name, listener, filter, handback);",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public void removeNotificationListener(ObjectName name, ObjectName listener) throws InstanceNotFoundException, ListenerNotFoundException {",
                "+        Throwable error = null;",
                "+        try {",
                "+            delegate.removeNotificationListener(name, listener);",
                "+        } catch (Throwable e) {",
                "+            error = e;",
                "+            throw e;",
                "+        } finally {",
                "+            log(REMOVE_NOTIFICATION_LISTENER, REMOVE_NOTIFICATION_LISTENER_SIG_1, null, error, name, listener);",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public void removeNotificationListener(ObjectName name, ObjectName listener, NotificationFilter filter, Object handback) throws InstanceNotFoundException, ListenerNotFoundException {",
                "+        Throwable error = null;",
                "+        try {",
                "+            delegate.removeNotificationListener(name, listener, filter, handback);",
                "+        } catch (Throwable e) {",
                "+            error = e;",
                "+            throw e;",
                "+        } finally {",
                "+            log(REMOVE_NOTIFICATION_LISTENER, REMOVE_NOTIFICATION_LISTENER_SIG_2, null, error, name, listener, filter, handback);",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public void removeNotificationListener(ObjectName name, NotificationListener listener) throws InstanceNotFoundException, ListenerNotFoundException {",
                "+        Throwable error = null;",
                "+        try {",
                "+            delegate.removeNotificationListener(name, listener);",
                "+        } catch (Throwable e) {",
                "+            error = e;",
                "+            throw e;",
                "+        } finally {",
                "+            log(REMOVE_NOTIFICATION_LISTENER, REMOVE_NOTIFICATION_LISTENER_SIG_3, null, error, name, listener);",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public void removeNotificationListener(ObjectName name, NotificationListener listener, NotificationFilter filter, Object handback) throws InstanceNotFoundException, ListenerNotFoundException {",
                "+        Throwable error = null;",
                "+        try {",
                "+            delegate.removeNotificationListener(name, listener, filter, handback);",
                "+        } catch (Throwable e) {",
                "+            error = e;",
                "+            throw e;",
                "+        } finally {",
                "+            log(REMOVE_NOTIFICATION_LISTENER, REMOVE_NOTIFICATION_LISTENER_SIG_4, null, error, name, listener, filter, handback);",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public MBeanInfo getMBeanInfo(ObjectName name) throws InstanceNotFoundException, IntrospectionException, ReflectionException {",
                "+        Throwable error = null;",
                "+        MBeanInfo result = null;",
                "+        try {",
                "+            return result = delegate.getMBeanInfo(name);",
                "+        } catch (Throwable e) {",
                "+            error = e;",
                "+            throw e;",
                "+        } finally {",
                "+            log(GET_MBEAN_INFO, GET_MBEAN_INFO_SIG, result, error, name);",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean isInstanceOf(ObjectName name, String className) throws InstanceNotFoundException {",
                "+        Throwable error = null;",
                "+        Boolean result = null;",
                "+        try {",
                "+            return result = delegate.isInstanceOf(name, className);",
                "+        } catch (Throwable e) {",
                "+            error = e;",
                "+            throw e;",
                "+        } finally {",
                "+            log(IS_INSTANCE_OF, IS_INSTANCE_OF_SIG, result, error, name, className);",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public Object instantiate(String className) throws ReflectionException, MBeanException {",
                "+        Throwable error = null;",
                "+        Object result = null;",
                "+        try {",
                "+            return result = delegate.instantiate(className);",
                "+        } catch (Throwable e) {",
                "+            error = e;",
                "+            throw e;",
                "+        } finally {",
                "+            log(INSTANTIATE, INSTANTIATE_SIG1, result, error, className);",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public Object instantiate(String className, ObjectName loaderName) throws ReflectionException, MBeanException, InstanceNotFoundException {",
                "+        Throwable error = null;",
                "+        Object result = null;",
                "+        try {",
                "+            return result = delegate.instantiate(className, loaderName);",
                "+        } catch (Throwable e) {",
                "+            error = e;",
                "+            throw e;",
                "+        } finally {",
                "+            log(INSTANTIATE, INSTANTIATE_SIG2, result, error, className, loaderName);",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public Object instantiate(String className, Object[] params, String[] signature) throws ReflectionException, MBeanException {",
                "+        Throwable error = null;",
                "+        Object result = null;",
                "+        try {",
                "+            return result = delegate.instantiate(className, params, signature);",
                "+        } catch (Throwable e) {",
                "+            error = e;",
                "+            throw e;",
                "+        } finally {",
                "+            log(INSTANTIATE, INSTANTIATE_SIG3, result, error, className, params, signature);",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public Object instantiate(String className, ObjectName loaderName, Object[] params, String[] signature) throws ReflectionException, MBeanException, InstanceNotFoundException {",
                "+        Throwable error = null;",
                "+        Object result = null;",
                "+        try {",
                "+            return result = delegate.instantiate(className, loaderName, params, signature);",
                "+        } catch (Throwable e) {",
                "+            error = e;",
                "+            throw e;",
                "+        } finally {",
                "+            log(INSTANTIATE, INSTANTIATE_SIG4, result, error, className, loaderName, params, signature);",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    @Deprecated",
                "+    public ObjectInputStream deserialize(ObjectName name, byte[] data) throws OperationsException {",
                "+        Throwable error = null;",
                "+        ObjectInputStream result = null;",
                "+        try {",
                "+            return result = delegate.deserialize(name, data);",
                "+        } catch (Throwable e) {",
                "+            error = e;",
                "+            throw e;",
                "+        } finally {",
                "+            log(DESERIALIZE, DESERIALIZE_SIG1, result, error, name, data);",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    @Deprecated",
                "+    public ObjectInputStream deserialize(String className, byte[] data) throws OperationsException, ReflectionException {",
                "+        Throwable error = null;",
                "+        ObjectInputStream result = null;",
                "+        try {",
                "+            return result = delegate.deserialize(className, data);",
                "+        } catch (Throwable e) {",
                "+            error = e;",
                "+            throw e;",
                "+        } finally {",
                "+            log(DESERIALIZE, DESERIALIZE_SIG2, result, error, className, data);",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    @Deprecated",
                "+    public ObjectInputStream deserialize(String className, ObjectName loaderName, byte[] data) throws OperationsException, ReflectionException {",
                "+        Throwable error = null;",
                "+        ObjectInputStream result = null;",
                "+        try {",
                "+            return result = delegate.deserialize(className, loaderName, data);",
                "+        } catch (Throwable e) {",
                "+            error = e;",
                "+            throw e;",
                "+        } finally {",
                "+            log(DESERIALIZE, DESERIALIZE_SIG3, result, error, className, loaderName, data);",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public ClassLoader getClassLoaderFor(ObjectName mbeanName) throws InstanceNotFoundException {",
                "+        Throwable error = null;",
                "+        ClassLoader result = null;",
                "+        try {",
                "+            return result = delegate.getClassLoaderFor(mbeanName);",
                "+        } catch (Throwable e) {",
                "+            error = e;",
                "+            throw e;",
                "+        } finally {",
                "+            log(GET_CLASSLOADER_FOR, GET_CLASSLOADER_FOR_SIG, result, error, mbeanName);",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public ClassLoader getClassLoader(ObjectName loaderName) throws InstanceNotFoundException {",
                "+        Throwable error = null;",
                "+        ClassLoader result = null;",
                "+        try {",
                "+            return result = delegate.getClassLoader(loaderName);",
                "+        } catch (Throwable e) {",
                "+            error = e;",
                "+            throw e;",
                "+        } finally {",
                "+            log(GET_CLASSLOADER, GET_CLASSLOADER_SIG, result, error, loaderName);",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public ClassLoaderRepository getClassLoaderRepository() {",
                "+        Throwable error = null;",
                "+        ClassLoaderRepository result = null;",
                "+        try {",
                "+            return result = delegate.getClassLoaderRepository();",
                "+        } catch (Throwable e) {",
                "+            error = e;",
                "+            throw e;",
                "+        } finally {",
                "+            log(GET_CLASSLOADER_REPOSITORY, GET_CLASSLOADER_REPOSITORY_SIG, result, error);",
                "+        }",
                "+    }",
                "+",
                "+    public MBeanServer getDelegate() {",
                "+        return delegate;",
                "+    }",
                "+}",
                "diff --git a/management/server/src/main/java/org/apache/karaf/management/internal/MBeanInvocationHandler.java b/management/server/src/main/java/org/apache/karaf/management/internal/MBeanInvocationHandler.java",
                "index 29680d577c..b26ef2a4b4 100644",
                "--- a/management/server/src/main/java/org/apache/karaf/management/internal/MBeanInvocationHandler.java",
                "+++ b/management/server/src/main/java/org/apache/karaf/management/internal/MBeanInvocationHandler.java",
                "@@ -65,2 +65,5 @@ public class MBeanInvocationHandler implements InvocationHandler {",
                "+    public MBeanServer getDelegate() {",
                "+        return wrapped;",
                "+    }",
                " }"
            ],
            "changed_files": [
                "management/server/pom.xml",
                "management/server/src/main/java/org/apache/karaf/management/KarafMBeanServerGuard.java",
                "management/server/src/main/java/org/apache/karaf/management/internal/Activator.java",
                "management/server/src/main/java/org/apache/karaf/management/internal/EventAdminLogger.java",
                "management/server/src/main/java/org/apache/karaf/management/internal/EventAdminLoggerImpl.java",
                "management/server/src/main/java/org/apache/karaf/management/internal/EventAdminMBeanServerWrapper.java",
                "management/server/src/main/java/org/apache/karaf/management/internal/MBeanInvocationHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5475": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: manage",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5475",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "51c32b723fbd82f02de9941d134e7c5386e0193a",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1507798202,
            "hunks": 2,
            "message": "[KARAF-5413]revise the wrap/pax-http-service feature version to the pax version",
            "diff": [
                "diff --git a/assemblies/features/standard/src/main/feature/feature.xml b/assemblies/features/standard/src/main/feature/feature.xml",
                "index 4fabaf10b3..d785e802be 100644",
                "--- a/assemblies/features/standard/src/main/feature/feature.xml",
                "+++ b/assemblies/features/standard/src/main/feature/feature.xml",
                "@@ -562,3 +562,3 @@",
                "-    <feature name=\"pax-http-service\" description=\"Pax-Web OSGi HTTP Service\" version=\"${project.version}\">",
                "+    <feature name=\"pax-http-service\" description=\"Pax-Web OSGi HTTP Service\" version=\"${pax.web.version}\">",
                "         <feature>pax-http</feature>",
                "@@ -974,3 +974,3 @@",
                "-    <feature name=\"wrap\" description=\"Wrap URL handler\" version=\"${project.version}\">",
                "+    <feature name=\"wrap\" description=\"Wrap URL handler\" version=\"${pax.url.version}\">",
                "         <bundle start-level=\"5\">mvn:org.ops4j.pax.url/pax-url-wrap/${pax.url.version}/jar/uber</bundle>"
            ],
            "changed_files": [
                "assemblies/features/standard/src/main/feature/feature.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5413": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: service",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5413",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4bb3dc2230a2b15a6494d8dd00776f3d5ddac43d",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1511362176,
            "hunks": 4,
            "message": "[KARAF-3674] Improve Karaf scheduler documentation",
            "diff": [
                "diff --git a/manual/src/main/asciidoc/user-guide/scheduler.adoc b/manual/src/main/asciidoc/user-guide/scheduler.adoc",
                "index 835d1fea3b..24bb318833 100644",
                "--- a/manual/src/main/asciidoc/user-guide/scheduler.adoc",
                "+++ b/manual/src/main/asciidoc/user-guide/scheduler.adoc",
                "@@ -70,3 +70,3 @@ Alternatively, jobs can be registered as type \"Runnable\" in a more API neutral w",
                " ----",
                "-@Component (immediate = true, property = {",
                "+@Component(immediate = true, property = {",
                "         Scheduler.PROPERTY_SCHEDULER_EXPRESSION + \"=0 0/10 * * * ?\",",
                "@@ -91,5 +91,34 @@ Registered Service.185 \u00e2\u0094\u0082 cron(0 0/10 * * * ?)",
                "+The Karaf scheduler can also schedule `Runnable` service.",
                "+For instance, if you have the following bean:",
                "+",
                "+```",
                "+@Component(immediate = true, property = {",
                "+    \"scheduler.period:Long=60\",",
                "+    \"scheduler.concurrent:Boolean=false\",",
                "+    \"scheduler.name=PingJob\"",
                "+  }",
                "+)",
                "+public class PingThread implements Runnable {",
                "+",
                "+  @Override",
                "+  public void run() {",
                "+    // ..",
                "+  }",
                "+",
                "+}",
                "+```",
                "+",
                "+This will register a job for the thread (runnable):",
                "+",
                "+----",
                "+karaf@root()> scheduler:list",
                "+Name                       \u00e2\u0094\u0082 Schedule",
                "+\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u00bc\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080",
                "+PingJob.126                \u00e2\u0094\u0082 at(2017-11-22T15:37:17.103+01:00, -1, 10)",
                "+----",
                " ==== Schedule a new Job using the Gogo Shell",
                "+",
                " ----",
                "@@ -127,7 +156,2 @@ OPTIONS",
                "-For example:",
                "-----",
                "-tbd",
                "-----",
                "-",
                " ==== Schedule a new Job using the Scheduler Service"
            ],
            "changed_files": [
                "manual/src/main/asciidoc/user-guide/scheduler.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-3674": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: user",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-3674",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b52309a363c46de844e047d391a8d392ea1ee3f9",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1508327945,
            "hunks": 2,
            "message": "[KARAF-5354] The log:get and log:set commands should support etc/log4j2.xml configuration",
            "diff": [
                "diff --git a/log/src/main/java/org/apache/karaf/log/core/internal/LogServiceImpl.java b/log/src/main/java/org/apache/karaf/log/core/internal/LogServiceImpl.java",
                "index 9c32cfc9d9..d0c52fb0bb 100644",
                "--- a/log/src/main/java/org/apache/karaf/log/core/internal/LogServiceImpl.java",
                "+++ b/log/src/main/java/org/apache/karaf/log/core/internal/LogServiceImpl.java",
                "@@ -53,2 +53,10 @@ public class LogServiceImpl implements LogService, PaxAppender {",
                "         }",
                "+        else if (config.get(\"org.ops4j.pax.logging.log4j2.config.file\") != null) {",
                "+            String file = config.get(\"org.ops4j.pax.logging.log4j2.config.file\").toString();",
                "+            if (file.endsWith(\".xml\")) {",
                "+                return new LogServiceLog4j2XmlImpl(file);",
                "+            } else {",
                "+                throw new IllegalStateException(\"Unsupported Log4j2 configuration type: \" + file);",
                "+            }",
                "+        }",
                "         else {",
                "diff --git a/log/src/main/java/org/apache/karaf/log/core/internal/LogServiceLog4j2XmlImpl.java b/log/src/main/java/org/apache/karaf/log/core/internal/LogServiceLog4j2XmlImpl.java",
                "new file mode 100644",
                "index 0000000000..843bf51502",
                "--- /dev/null",
                "+++ b/log/src/main/java/org/apache/karaf/log/core/internal/LogServiceLog4j2XmlImpl.java",
                "@@ -0,0 +1,265 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.karaf.log.core.internal;",
                "+",
                "+import org.apache.karaf.log.core.Level;",
                "+import org.w3c.dom.Document;",
                "+import org.w3c.dom.Element;",
                "+import org.w3c.dom.Node;",
                "+import org.w3c.dom.NodeList;",
                "+import org.xml.sax.InputSource;",
                "+import org.xml.sax.SAXException;",
                "+",
                "+import javax.xml.parsers.DocumentBuilder;",
                "+import javax.xml.parsers.DocumentBuilderFactory;",
                "+import javax.xml.parsers.ParserConfigurationException;",
                "+import javax.xml.transform.Transformer;",
                "+import javax.xml.transform.TransformerFactory;",
                "+import javax.xml.transform.dom.DOMSource;",
                "+import javax.xml.transform.stream.StreamResult;",
                "+import java.io.IOException;",
                "+import java.io.InputStream;",
                "+import java.io.OutputStream;",
                "+import java.nio.file.Files;",
                "+import java.nio.file.Path;",
                "+import java.nio.file.Paths;",
                "+import java.nio.file.StandardOpenOption;",
                "+import java.util.Collections;",
                "+import java.util.Map;",
                "+import java.util.TreeMap;",
                "+",
                "+public class LogServiceLog4j2XmlImpl implements LogServiceInternal {",
                "+",
                "+    private static final String ELEMENT_LOGGERS = \"Loggers\";",
                "+    private static final String ELEMENT_ROOT = \"Root\";",
                "+    private static final String ELEMENT_LOGGER = \"Logger\";",
                "+    private static final String ATTRIBUTE_NAME = \"name\";",
                "+    private static final String ATTRIBUTE_LEVEL = \"level\";",
                "+    private static final String ELEMENT_CONFIGURATION = \"Configuration\";",
                "+",
                "+    private final Path path;",
                "+",
                "+    LogServiceLog4j2XmlImpl(String file) {",
                "+        this.path = Paths.get(file);",
                "+    }",
                "+",
                "+    public Map<String, String> getLevel(String logger) {",
                "+        try {",
                "+            Document doc = loadConfig(path);",
                "+            Map<String, Element> loggers = getLoggers(doc);",
                "+",
                "+            Map<String, String> levels = new TreeMap<>();",
                "+            for (Map.Entry<String, Element> e : loggers.entrySet()) {",
                "+                String level = e.getValue().getAttribute(ATTRIBUTE_LEVEL);",
                "+                if (level != null && !level.isEmpty()) {",
                "+                    levels.put(e.getKey(), level);",
                "+                }",
                "+            }",
                "+",
                "+            if (ALL_LOGGER.equals(logger)) {",
                "+                return levels;",
                "+            }",
                "+            String l = logger;",
                "+            String val;",
                "+            for (; ; ) {",
                "+                val = levels.get(l != null ? l : ROOT_LOGGER);",
                "+                if (val != null || l == null) {",
                "+                    return Collections.singletonMap(logger, val);",
                "+                }",
                "+                int idx = l.lastIndexOf('.');",
                "+                if (idx < 0) {",
                "+                    l = null;",
                "+                } else {",
                "+                    l = l.substring(0, idx);",
                "+                }",
                "+            }",
                "+        } catch (Exception e) {",
                "+            throw new RuntimeException(\"Unable to retrieve level for logger\", e);",
                "+        }",
                "+    }",
                "+",
                "+    public void setLevel(String logger, String level) {",
                "+        try {",
                "+            Document doc = loadConfig(path);",
                "+            Map<String, Element> loggers = getLoggers(doc);",
                "+",
                "+            Element element = loggers.get(logger);",
                "+            if (element != null) {",
                "+                if (Level.isDefault(level)) {",
                "+                    element.removeAttribute(ATTRIBUTE_LEVEL);",
                "+                } else {",
                "+                    element.setAttribute(ATTRIBUTE_LEVEL, level);",
                "+                }",
                "+            }",
                "+            else if (!Level.isDefault(level)) {",
                "+                Element docE = doc.getDocumentElement();",
                "+                Element docLoggers = (Element) docE.getElementsByTagName(ELEMENT_LOGGERS).item(0);",
                "+                boolean root = ROOT_LOGGER.equals(logger);",
                "+                if (root) {",
                "+                    element = doc.createElement(ELEMENT_ROOT);",
                "+                    element.setAttribute(ATTRIBUTE_LEVEL, level);",
                "+                } else {",
                "+                    element = doc.createElement(ELEMENT_LOGGER);",
                "+                    element.setAttribute(ATTRIBUTE_NAME, logger);",
                "+                    element.setAttribute(ATTRIBUTE_LEVEL, level);",
                "+                }",
                "+                insertIndented(docLoggers, element, root);",
                "+            } else {",
                "+                return;",
                "+            }",
                "+            try (OutputStream os = Files.newOutputStream(path, StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING)) {",
                "+                TransformerFactory tFactory = TransformerFactory.newInstance();",
                "+                Transformer transformer = tFactory.newTransformer();",
                "+                transformer.transform(new DOMSource(doc), new StreamResult(os));",
                "+            }",
                "+        } catch (Exception e) {",
                "+            throw new RuntimeException(\"Unable to set level for logger\", e);",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * Insert the given node at beginning or end of the given node,",
                "+     * indenting it as needed.",
                "+     */",
                "+    static void insertIndented(Element loggers, Element element, boolean atBeginning) {",
                "+        NodeList loggerElements = loggers.getElementsByTagName(\"*\");",
                "+        if (atBeginning && loggerElements.getLength() > 0) {",
                "+            Node insertBefore = loggers.getFirstChild();",
                "+            if (insertBefore != null) {",
                "+                if (insertBefore.getNodeType() == Node.TEXT_NODE) {",
                "+                    String indent = loggers.getFirstChild().getTextContent();",
                "+                    Node node = loggers.getOwnerDocument().createTextNode(indent);",
                "+                    loggers.insertBefore(node, insertBefore);",
                "+                }",
                "+                loggers.insertBefore(element, insertBefore);",
                "+            } else {",
                "+                loggers.appendChild(element);",
                "+            }",
                "+        } else {",
                "+            Node insertAfter = loggerElements.getLength() > 0 ? loggerElements.item(loggerElements.getLength() - 1) : null;",
                "+            if (insertAfter != null) {",
                "+                if (insertAfter.getPreviousSibling() != null && insertAfter.getPreviousSibling().getNodeType() == Node.TEXT_NODE) {",
                "+                    String indent = insertAfter.getPreviousSibling().getTextContent();",
                "+                    Node node = loggers.getOwnerDocument().createTextNode(indent);",
                "+                    if (insertAfter.getNextSibling() != null) {",
                "+                        loggers.insertBefore(node, insertAfter.getNextSibling());",
                "+                        insertAfter = node;",
                "+                    } else {",
                "+                        loggers.appendChild(node);",
                "+                    }",
                "+                }",
                "+                if (insertAfter.getNextSibling() != null) {",
                "+                    loggers.insertBefore(element, insertAfter.getNextSibling());",
                "+                } else {",
                "+                    loggers.appendChild(element);",
                "+                }",
                "+            } else {",
                "+                if (loggers.getPreviousSibling() != null && loggers.getPreviousSibling().getNodeType() == Node.TEXT_NODE) {",
                "+                    String indent = loggers.getPreviousSibling().getTextContent();",
                "+                    String prev = indent;",
                "+                    if (indent.endsWith(\"\\t\")) {",
                "+                        indent += \"\\t\";",
                "+                    } else {",
                "+                        int nl = indent.lastIndexOf('\\n');",
                "+                        if (nl >= 0) {",
                "+                            indent = indent + indent.substring(nl + 1);",
                "+                        } else {",
                "+                            indent += \"\\t\";",
                "+                        }",
                "+                    }",
                "+                    if (loggers.getFirstChild() != null && loggers.getPreviousSibling().getNodeType() == Node.TEXT_NODE) {",
                "+                        loggers.removeChild(loggers.getFirstChild());",
                "+                    }",
                "+                    loggers.appendChild(loggers.getOwnerDocument().createTextNode(indent));",
                "+                    loggers.appendChild(element);",
                "+                    loggers.appendChild(loggers.getOwnerDocument().createTextNode(prev));",
                "+                } else {",
                "+                    loggers.appendChild(element);",
                "+                }",
                "+            }",
                "+        }",
                "+",
                "+    }",
                "+",
                "+    static Document loadConfig(Path path) throws Exception {",
                "+        try (InputStream is = Files.newInputStream(path)) {",
                "+            return loadConfig(path.toString(), is);",
                "+        }",
                "+    }",
                "+",
                "+    static Document loadConfig(String id, InputStream is) throws ParserConfigurationException, SAXException, IOException {",
                "+        final InputSource source = new InputSource(is);",
                "+        source.setPublicId(id);",
                "+        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();",
                "+        factory.setNamespaceAware(true);",
                "+        factory.setValidating(false);",
                "+        factory.setExpandEntityReferences(false);",
                "+        setFeature(factory, \"http://xml.org/sax/features/external-general-entities\", false);",
                "+        setFeature(factory, \"http://xml.org/sax/features/external-parameter-entities\", false);",
                "+        setFeature(factory, \"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);",
                "+        setFeature(factory, \"http://apache.org/xml/features/xinclude/fixup-base-uris\", true);",
                "+        setFeature(factory, \"http://apache.org/xml/features/xinclude/fixup-language\", true);",
                "+        tryCall(() -> factory.setXIncludeAware(true));",
                "+        DocumentBuilder documentBuilder = factory.newDocumentBuilder();",
                "+        return documentBuilder.parse(source);",
                "+    }",
                "+",
                "+    private static void setFeature(DocumentBuilderFactory factory, String name, boolean b) {",
                "+        tryCall(() -> factory.setFeature(name, b));",
                "+    }",
                "+",
                "+    interface RunnableWithException {",
                "+        void run() throws Exception;",
                "+    }",
                "+",
                "+    private static void tryCall(RunnableWithException c) {",
                "+        try {",
                "+            c.run();",
                "+        } catch (Exception e) {",
                "+            // Ignore",
                "+        }",
                "+    }",
                "+",
                "+    private Map<String, Element> getLoggers(Document doc) {",
                "+        Map<String, Element> loggers = new TreeMap<>();",
                "+        Element docE = doc.getDocumentElement();",
                "+        if (!ELEMENT_CONFIGURATION.equals(docE.getLocalName())) {",
                "+            throw new IllegalArgumentException(\"Xml root document should be \" + ELEMENT_CONFIGURATION);",
                "+        }",
                "+        NodeList children = docE.getElementsByTagName(ELEMENT_LOGGERS);",
                "+        if (children.getLength() != 1) {",
                "+            return Collections.emptyMap();",
                "+        }",
                "+        NodeList loggersList = children.item(0).getChildNodes();",
                "+        for (int i = 0; i < loggersList.getLength(); i++) {",
                "+            Node n = loggersList.item(i);",
                "+            if (n instanceof Element) {",
                "+                Element e = (Element) n;",
                "+                if (ELEMENT_ROOT.equals(e.getLocalName())) {",
                "+                    loggers.put(ROOT_LOGGER, e);",
                "+                } else if (ELEMENT_LOGGER.equals(e.getLocalName())) {",
                "+                    String name = e.getAttribute(ATTRIBUTE_NAME);",
                "+                    if (name != null) {",
                "+                        loggers.put(name, e);",
                "+                    }",
                "+                }",
                "+            }",
                "+        }",
                "+        return loggers;",
                "+    }",
                "+",
                "+}"
            ],
            "changed_files": [
                "log/src/main/java/org/apache/karaf/log/core/internal/LogServiceImpl.java",
                "log/src/main/java/org/apache/karaf/log/core/internal/LogServiceLog4j2XmlImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5354": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: service",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5354",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9bbfbffab528c2f9b7ba53ad721e3ba0b61abbf6",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1510761295,
            "hunks": 3,
            "message": "[KARAF-5484] Change shell:sleep message to debug instead of info",
            "diff": [
                "diff --git a/shell/commands/src/main/java/org/apache/karaf/shell/commands/impl/SleepAction.java b/shell/commands/src/main/java/org/apache/karaf/shell/commands/impl/SleepAction.java",
                "index e8b1103e53..b0185a44e7 100644",
                "--- a/shell/commands/src/main/java/org/apache/karaf/shell/commands/impl/SleepAction.java",
                "+++ b/shell/commands/src/main/java/org/apache/karaf/shell/commands/impl/SleepAction.java",
                "@@ -41,6 +41,6 @@ public class SleepAction implements Action {",
                "         if (second) {",
                "-            log.info(\"Sleeping for {} second(s)\", time);",
                "+            log.debug(\"Sleeping for {} second(s)\", time);",
                "             time = time * 1000;",
                "         } else {",
                "-            log.info(\"Sleeping for {} millisecond(s)\", time);",
                "+            log.debug(\"Sleeping for {} millisecond(s)\", time);",
                "         }",
                "@@ -54,3 +54,3 @@ public class SleepAction implements Action {",
                "-        log.info(\"Awake now\");",
                "+        log.debug(\"Awake now\");",
                "         return null;"
            ],
            "changed_files": [
                "shell/commands/src/main/java/org/apache/karaf/shell/commands/impl/SleepAction.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5484": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: change",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5484",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "75e051fc1e9acaffe61c7ab0e50bbdc94cb21c94",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1509728866,
            "hunks": 3,
            "message": "[KARAF-5458] Use correct location to calculate target path for downloaded artifact",
            "diff": [
                "diff --git a/profile/src/main/java/org/apache/karaf/profile/assembly/ArtifactInstaller.java b/profile/src/main/java/org/apache/karaf/profile/assembly/ArtifactInstaller.java",
                "index 273d9e4159..c06ebf2446 100644",
                "--- a/profile/src/main/java/org/apache/karaf/profile/assembly/ArtifactInstaller.java",
                "+++ b/profile/src/main/java/org/apache/karaf/profile/assembly/ArtifactInstaller.java",
                "@@ -58,8 +58,9 @@ public class ArtifactInstaller {",
                "         }",
                "+        final String finalLocation = location;",
                "         downloader.download(location, provider -> {",
                "             String uri = provider.getUrl();",
                "-            if (blacklist.isBundleBlacklisted(uri)) {",
                "-                throw new RuntimeException(\"Bundle \" + uri + \" is blacklisted\");",
                "+            if (blacklist.isBundleBlacklisted(finalLocation)) {",
                "+                throw new RuntimeException(\"Bundle \" + finalLocation + \" is blacklisted\");",
                "             }",
                "-            Path path = pathFromProviderUrl(systemDirectory, uri);",
                "+            Path path = pathFromProviderUrl(systemDirectory, finalLocation);",
                "             synchronized (provider) {"
            ],
            "changed_files": [
                "profile/src/main/java/org/apache/karaf/profile/assembly/ArtifactInstaller.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5458": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: file, install",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5458",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "1c6a3371116c3f48a7f6405be1cc17fd7c06ef8c",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1509014576,
            "hunks": 18,
            "message": "[KARAF-5445] Completers should be followed by a space when complete",
            "diff": [
                "diff --git a/bundle/core/src/main/java/org/apache/karaf/bundle/command/completers/BundleSymbolicNameCompleter.java b/bundle/core/src/main/java/org/apache/karaf/bundle/command/completers/BundleSymbolicNameCompleter.java",
                "index c0b56f759a..0b2ec36fed 100644",
                "--- a/bundle/core/src/main/java/org/apache/karaf/bundle/command/completers/BundleSymbolicNameCompleter.java",
                "+++ b/bundle/core/src/main/java/org/apache/karaf/bundle/command/completers/BundleSymbolicNameCompleter.java",
                "@@ -20,3 +20,2 @@ import org.apache.karaf.shell.api.action.lifecycle.Reference;",
                " import org.apache.karaf.shell.api.action.lifecycle.Service;",
                "-import org.apache.karaf.shell.api.console.Candidate;",
                " import org.apache.karaf.shell.api.console.CommandLine;",
                "@@ -24,2 +23,3 @@ import org.apache.karaf.shell.api.console.Completer;",
                " import org.apache.karaf.shell.api.console.Session;",
                "+import org.apache.karaf.shell.support.completers.StringsCompleter;",
                " import org.osgi.framework.Bundle;",
                "@@ -27,3 +27,2 @@ import org.osgi.framework.BundleContext;",
                "-import java.util.ArrayList;",
                " import java.util.List;",
                "@@ -38,15 +37,7 @@ public class BundleSymbolicNameCompleter implements Completer {",
                "     public int complete(Session session, CommandLine commandLine, List<String> candidates) {",
                "-        List<Candidate> cands = new ArrayList<>();",
                "-        completeCandidates(session, commandLine, cands);",
                "-        for (Candidate cand : cands) {",
                "-            candidates.add(cand.value());",
                "-        }",
                "-        return candidates.isEmpty() ? -1 : 0;",
                "-    }",
                "-",
                "-    @Override",
                "-    public void completeCandidates(Session session, CommandLine commandLine, List<Candidate> candidates) {",
                "+        StringsCompleter delegate = new StringsCompleter();",
                "         for (Bundle bundle : bundleContext.getBundles()) {",
                "-            candidates.add(new Candidate(bundle.getSymbolicName(), true));",
                "+            delegate.getStrings().add(bundle.getSymbolicName());",
                "         }",
                "+        return delegate.complete(session, commandLine, candidates);",
                "     }",
                "diff --git a/config/src/main/java/org/apache/karaf/config/command/completers/ConfigurationCompleter.java b/config/src/main/java/org/apache/karaf/config/command/completers/ConfigurationCompleter.java",
                "index 19cc0df7bb..b0cef13df9 100644",
                "--- a/config/src/main/java/org/apache/karaf/config/command/completers/ConfigurationCompleter.java",
                "+++ b/config/src/main/java/org/apache/karaf/config/command/completers/ConfigurationCompleter.java",
                "@@ -79,3 +79,3 @@ public class ConfigurationCompleter implements Completer, ConfigurationListener",
                "         for (Configuration config : configs) {",
                "-            pids.add(config.getPid() + \" \");",
                "+            pids.add(config.getPid());",
                "         }",
                "@@ -97,5 +97,5 @@ public class ConfigurationCompleter implements Completer, ConfigurationListener",
                "         if (configurationEvent.getType() == ConfigurationEvent.CM_DELETED) {",
                "-            delegate.getStrings().remove(pid + \" \");",
                "+            delegate.getStrings().remove(pid);",
                "         } else if (configurationEvent.getType() == ConfigurationEvent.CM_UPDATED) {",
                "-            delegate.getStrings().add(pid + \" \");",
                "+            delegate.getStrings().add(pid);",
                "         }",
                "diff --git a/jms/src/main/java/org/apache/karaf/jms/command/completers/ConnectionFactoriesNameCompleter.java b/jms/src/main/java/org/apache/karaf/jms/command/completers/ConnectionFactoriesNameCompleter.java",
                "index 2fd8d2a985..98f97b34d3 100644",
                "--- a/jms/src/main/java/org/apache/karaf/jms/command/completers/ConnectionFactoriesNameCompleter.java",
                "+++ b/jms/src/main/java/org/apache/karaf/jms/command/completers/ConnectionFactoriesNameCompleter.java",
                "@@ -42,3 +42,3 @@ public class ConnectionFactoriesNameCompleter implements Completer {",
                "             for (String connectionFactory : jmsService.connectionFactories()) {",
                "-                delegate.getStrings().add(connectionFactory + \" \");",
                "+                delegate.getStrings().add(connectionFactory);",
                "             }",
                "diff --git a/shell/core/src/main/java/org/apache/karaf/shell/impl/action/command/ArgumentCompleter.java b/shell/core/src/main/java/org/apache/karaf/shell/impl/action/command/ArgumentCompleter.java",
                "index 25e259e65f..0a4a5e1966 100644",
                "--- a/shell/core/src/main/java/org/apache/karaf/shell/impl/action/command/ArgumentCompleter.java",
                "+++ b/shell/core/src/main/java/org/apache/karaf/shell/impl/action/command/ArgumentCompleter.java",
                "@@ -24,2 +24,3 @@ import java.net.URI;",
                " import java.util.ArrayList;",
                "+import java.util.Arrays;",
                " import java.util.Collection;",
                "@@ -121,8 +122,6 @@ public class ArgumentCompleter implements Completer {",
                "                     String[] value = ann.values();",
                "-                    if (clazz != null) {",
                "-                        if (value.length > 0 && clazz == StringsCompleter.class) {",
                "-                            completer = new StringsCompleter(value, ann.caseSensitive());",
                "-                        } else {",
                "-                            completer = command.getCompleter(clazz);",
                "-                        }",
                "+                    if (value.length > 0) {",
                "+                        completer = new StringsCompleter(Arrays.asList(value), ann.caseSensitive());",
                "+                    } else {",
                "+                        completer = command.getCompleter(clazz);",
                "                     }",
                "@@ -150,8 +149,6 @@ public class ArgumentCompleter implements Completer {",
                "                         String[] value = ann.values();",
                "-                        if (clazz != null) {",
                "-                            if (clazz == StringsCompleter.class) {",
                "-                                completer = new StringsCompleter(value, ann.caseSensitive());",
                "-                            } else {",
                "-                                completer = command.getCompleter(clazz);",
                "-                            }",
                "+                        if (value.length > 0) {",
                "+                            completer = new StringsCompleter(Arrays.asList(value), ann.caseSensitive());",
                "+                        } else {",
                "+                            completer = command.getCompleter(clazz);",
                "                         }",
                "@@ -191,3 +188,3 @@ public class ArgumentCompleter implements Completer {",
                "         } else if (type.isAssignableFrom(Boolean.class) || type.isAssignableFrom(boolean.class)) {",
                "-            completer = new StringsCompleter(new String[] {\"false\", \"true\"}, false);",
                "+            completer = new StringsCompleter(Arrays.asList(\"false\", \"true\"));",
                "         } else if (Enum.class.isAssignableFrom(type)) {",
                "@@ -197,3 +194,3 @@ public class ArgumentCompleter implements Completer {",
                "             }",
                "-            completer = new StringsCompleter(values, false);",
                "+            completer = new StringsCompleter(values);",
                "         }",
                "diff --git a/shell/core/src/main/java/org/apache/karaf/shell/impl/console/CommandsCompleter.java b/shell/core/src/main/java/org/apache/karaf/shell/impl/console/CommandsCompleter.java",
                "index 84f87c6237..b75489b52d 100644",
                "--- a/shell/core/src/main/java/org/apache/karaf/shell/impl/console/CommandsCompleter.java",
                "+++ b/shell/core/src/main/java/org/apache/karaf/shell/impl/console/CommandsCompleter.java",
                "@@ -99,3 +99,3 @@ public class CommandsCompleter extends org.apache.karaf.shell.support.completers",
                "             if (!subShell.equals(Session.SCOPE_GLOBAL)) {",
                "-                completers.add(new StringsCompleter(new String[] { \"exit\" }));",
                "+                completers.add(new StringsCompleter(Collections.singletonList(\"exit\")));",
                "             }",
                "diff --git a/shell/core/src/main/java/org/apache/karaf/shell/support/completers/StringsCompleter.java b/shell/core/src/main/java/org/apache/karaf/shell/support/completers/StringsCompleter.java",
                "index 7eff78de53..4a57aef403 100644",
                "--- a/shell/core/src/main/java/org/apache/karaf/shell/support/completers/StringsCompleter.java",
                "+++ b/shell/core/src/main/java/org/apache/karaf/shell/support/completers/StringsCompleter.java",
                "@@ -41,3 +41,3 @@ public class StringsCompleter",
                "     public StringsCompleter() {",
                "-        this(true);",
                "+        this(false);",
                "     }",
                "@@ -97,3 +97,3 @@ public class StringsCompleter",
                "             // noinspection unchecked",
                "-            candidates.add(match);",
                "+            candidates.add(match + \" \");",
                "         }"
            ],
            "changed_files": [
                "bundle/core/src/main/java/org/apache/karaf/bundle/command/completers/BundleSymbolicNameCompleter.java",
                "config/src/main/java/org/apache/karaf/config/command/completers/ConfigurationCompleter.java",
                "jms/src/main/java/org/apache/karaf/jms/command/completers/ConnectionFactoriesNameCompleter.java",
                "shell/core/src/main/java/org/apache/karaf/shell/impl/action/command/ArgumentCompleter.java",
                "shell/core/src/main/java/org/apache/karaf/shell/impl/console/CommandsCompleter.java",
                "shell/core/src/main/java/org/apache/karaf/shell/support/completers/StringsCompleter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5445": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: console",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5445",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "05beb1769cdf0fa1d44e769e6455a6f5edebb982",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1509002266,
            "hunks": 4,
            "message": "[KARAF-5023] Fix regression that cause newly created configurations to not be persisted in the etc directory",
            "diff": [
                "diff --git a/config/src/main/java/org/apache/karaf/config/core/impl/ConfigRepositoryImpl.java b/config/src/main/java/org/apache/karaf/config/core/impl/ConfigRepositoryImpl.java",
                "index b2d05c8395..04b38f019d 100644",
                "--- a/config/src/main/java/org/apache/karaf/config/core/impl/ConfigRepositoryImpl.java",
                "+++ b/config/src/main/java/org/apache/karaf/config/core/impl/ConfigRepositoryImpl.java",
                "@@ -57,3 +57,3 @@ public class ConfigRepositoryImpl implements ConfigRepository {",
                "             LOGGER.trace(\"Updating configuration {}\", pid);",
                "-            Configuration cfg = configAdmin.getConfiguration(pid, null);",
                "+            Configuration cfg = configAdmin.getConfiguration(pid, \"?\");",
                "             Dictionary<String, Object> dict = cfg.getProperties();",
                "@@ -69,3 +69,6 @@ public class ConfigRepositoryImpl implements ConfigRepository {",
                "             } else {",
                "+                file = new File(System.getProperty(\"karaf.etc\"), pid + \".cfg\");",
                "                 props.putAll(properties);",
                "+                props.save(file);",
                "+                props.put(FILEINSTALL_FILE_NAME, file.toURI().toString());",
                "             }",
                "@@ -148,3 +151,8 @@ public class ConfigRepositoryImpl implements ConfigRepository {",
                "         Configuration config = configAdmin.createFactoryConfiguration(factoryPid, \"?\");",
                "-        config.update(new Hashtable<>(properties));",
                "+        TypedProperties props = new TypedProperties();",
                "+        File file = File.createTempFile(factoryPid + \"-\", \".cfg\", new File(System.getProperty(\"karaf.etc\")));",
                "+        props.putAll(properties);",
                "+        props.save(file);",
                "+        props.put(FILEINSTALL_FILE_NAME, file.toURI().toString());",
                "+        config.update(new Hashtable<>(props));",
                "         return config.getPid();"
            ],
            "changed_files": [
                "config/src/main/java/org/apache/karaf/config/core/impl/ConfigRepositoryImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5023": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: directory",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5023",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9457727a27020876c4206178fc968c126690f064",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1508746897,
            "hunks": 3,
            "message": "[KARAF-5411] Allow for users.properties file not existing, or empty",
            "diff": [
                "diff --git a/client/src/main/java/org/apache/karaf/client/ClientConfig.java b/client/src/main/java/org/apache/karaf/client/ClientConfig.java",
                "index 4d06fd0baa..037585634c 100644",
                "--- a/client/src/main/java/org/apache/karaf/client/ClientConfig.java",
                "+++ b/client/src/main/java/org/apache/karaf/client/ClientConfig.java",
                "@@ -1,342 +1,349 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one or more",
                "- * contributor license agreements.  See the NOTICE file distributed with",
                "- * this work for additional information regarding copyright ownership.",
                "- * The ASF licenses this file to You under the Apache License, Version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with",
                "- * the License.  You may obtain a copy of the License at",
                "- *",
                "- *      http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- * See the License for the specific language governing permissions and",
                "- * limitations under the License.",
                "- */",
                "-package org.apache.karaf.client;",
                "-",
                "-import java.io.File;",
                "-import java.io.FileInputStream;",
                "-import java.io.IOException;",
                "-import java.util.LinkedHashMap;",
                "-import java.util.LinkedHashSet;",
                "-import java.util.Properties;",
                "-import java.util.Set;",
                "-import java.util.Map;",
                "-import java.util.regex.Matcher;",
                "-import java.util.regex.Pattern;",
                "-",
                "-public class ClientConfig {",
                "-",
                "-    private static final String ROLE_DELIMITER = \",\";",
                "-    private static final String GROUP_PREFIX = \"_g_:\";",
                "-",
                "-    private String host;",
                "-    private int port;",
                "-    private String user;",
                "-    private String password;",
                "-    private int level;",
                "-    private int retryAttempts;",
                "-    private int retryDelay;",
                "-    private long idleTimeout;",
                "-    private boolean batch;",
                "-    private String file = null;",
                "-    private String keyFile = null;",
                "-    private String command;",
                "-    private boolean interactiveMode = false;",
                "-    private boolean inputPassword = false;",
                "-",
                "-    public ClientConfig(String[] args) throws IOException {",
                "-        Properties shellCfg = loadProps(new File(System.getProperty(\"karaf.etc\"), \"org.apache.karaf.shell.cfg\"), null);",
                "-        Properties customCfg = loadProps(new File(System.getProperty(\"karaf.etc\"), \"custom.properties\"), null);",
                "-        ",
                "-        host = shellCfg.getProperty(\"sshHost\", \"localhost\");",
                "-        host = expandEnvVars(host);",
                "-        String portString = shellCfg.getProperty(\"sshPort\", \"8101\");",
                "-        portString = expandEnvVars(portString);",
                "-        ",
                "-        // if sshHost of sshPort properties contain a reference to another property (coming from ",
                "-        // , we try to use the custom.properties value",
                "-        if (host.contains(\"${\")) {",
                "-            host = replaceVariable(host, \"localhost\", customCfg);",
                "-        }",
                "-        if (host.contains(\"0.0.0.0\")) {",
                "-            host = \"localhost\";",
                "-        }",
                "-        if (portString.contains(\"${\")) {",
                "-            portString = replaceVariable(portString, \"8101\", customCfg);",
                "-        }",
                "-        port = Integer.parseInt(portString);",
                "-        level = Integer.parseInt(shellCfg.getProperty(\"logLevel\", \"0\"));",
                "-        retryAttempts = 0;",
                "-        retryDelay = 2;",
                "-        idleTimeout = Long.parseLong(shellCfg.getProperty(\"sshIdleTimeout\", \"1800000\"));",
                "-        batch = false;",
                "-        file = null;",
                "-        user = null;",
                "-        password = null;",
                "-        StringBuilder commandBuilder = new StringBuilder();",
                "-        boolean endOfOptionsMarkerReached = false;",
                "-        ",
                "-        for (int i = 0; i < args.length; i++) {",
                "-            if (!endOfOptionsMarkerReached && args[i].charAt(0) == '-') {",
                "-                if (args[i].equals(\"-a\")) {",
                "-                    if (args.length <= ++i) {",
                "-                        System.err.println(\"miss the port\");",
                "-                        System.exit(1);",
                "-                    } else {",
                "-                        port = Integer.parseInt(args[i]);",
                "-                    }",
                "-                } else if (args[i].equals(\"-h\")) {",
                "-                    if (args.length <= ++i) {",
                "-                        System.err.println(\"miss the host\");",
                "-                        System.exit(1);",
                "-                    } else {",
                "-                        host = args[i];",
                "-                    }",
                "-                } else if (args[i].equals(\"-u\")) {",
                "-                    if (args.length <= ++i) {",
                "-                        System.err.println(\"miss the user\");",
                "-                        System.exit(1);",
                "-                    } else {",
                "-                        user = args[i];",
                "-                        interactiveMode = true;",
                "-                        password = null;//get chance to input the password with interactive way",
                "-                    }",
                "-                } else if (args[i].equals(\"-v\")) {",
                "-                    level++;",
                "-                } else if (args[i].equals(\"-l\")) {",
                "-                    if (args.length <= ++i) {",
                "-                        System.err.println(\"miss the log level\");",
                "-                        System.exit(1);",
                "-                    } else {",
                "-                        int levelValue = Integer.parseInt(args[i]);",
                "-                        if (levelValue < 0 || levelValue > 4) {",
                "-                            System.err.println(\"log level can only be 0, 1, 2, 3, or 4\");",
                "-                            System.exit(1);",
                "-                        } else {",
                "-                            level = levelValue;",
                "-                        }",
                "-                    }",
                "-                } else if (args[i].equals(\"-r\")) {",
                "-                    if (args.length <= ++i) {",
                "-                        System.err.println(\"miss the attempts\");",
                "-                        System.exit(1);",
                "-                    } else {",
                "-                        retryAttempts = Integer.parseInt(args[i]);",
                "-                    }",
                "-                    ",
                "-                } else if (args[i].equals(\"-p\")) {",
                "-                    if (args.length <= ++i) {",
                "-                        System.err.println(\"miss the password\");",
                "-                        System.exit(1);",
                "-                    } else {",
                "-                        password = args[i];",
                "-                        interactiveMode = false;",
                "-                        inputPassword = true;",
                "-                    }",
                "-                } else if (args[i].equals(\"-d\")) {",
                "-                    if (args.length <= ++i) {",
                "-                        System.err.println(\"miss the delay in seconds\");",
                "-                        System.exit(1);",
                "-                    } else {",
                "-                        retryDelay = Integer.parseInt(args[i]);",
                "-                    }",
                "-                } else if (args[i].equals(\"-b\")) {",
                "-                    batch = true;",
                "-                } else if (args[i].equals(\"-f\")) {",
                "-                    if (args.length <= ++i) {",
                "-                        System.err.println(\"miss the commands file\");",
                "-                        System.exit(1);",
                "-                    } else {",
                "-                        file = args[i];",
                "-                    }",
                "-                } else if (args[i].equals(\"-k\")) {",
                "-                    if (args.length <= ++i) {",
                "-                        System.err.println(\"miss the key file\");",
                "-                        System.exit(1);",
                "-                    } else {",
                "-                        keyFile = args[i];",
                "-                    }",
                "-                } else if (args[i].equals(\"-t\")) {",
                "-                    if (args.length <= ++i) {",
                "-                        System.err.println(\"miss the idle timeout\");",
                "-                        System.exit(1);",
                "-                    } else {",
                "-                        idleTimeout = Long.parseLong(args[i]);",
                "-                    }",
                "-                } else if (args[i].equals(\"--help\")) {",
                "-                    showHelp();",
                "-                } else if (args[i].equals(\"--\")) {",
                "-                    endOfOptionsMarkerReached = true;",
                "-                } else {",
                "-                    System.err.println(\"Unknown option: \" + args[i]);",
                "-                    System.err.println(\"Run with --help for usage\");",
                "-                    System.exit(1);",
                "-                }",
                "-            } else {",
                "-                commandBuilder.append(args[i]);",
                "-                commandBuilder.append(' ');",
                "-            }",
                "-        }",
                "-        command = commandBuilder.toString();",
                "-",
                "-        Map<String, String> usersCfg = new LinkedHashMap<>();",
                "-        loadProps(new File(System.getProperty(\"karaf.etc\") + \"/users.properties\"), usersCfg);",
                "-        if (!usersCfg.isEmpty()) {",
                "-            Set<String> users = new LinkedHashSet<>();",
                "-            for (String user : usersCfg.keySet()) {",
                "-                if (!user.startsWith(GROUP_PREFIX)) {",
                "-                    users.add(user);",
                "-                }",
                "-            }",
                "-            if (user == null) {",
                "-                if (users.iterator().hasNext()) {",
                "-                    user = users.iterator().next();",
                "-                }",
                "-            }",
                "-            if (interactiveMode && !inputPassword) {",
                "-                password = null;",
                "-            } else if (!inputPassword) {",
                "-                password = usersCfg.get(user);",
                "-                if (password != null && password.contains(ROLE_DELIMITER)) {",
                "-                    password = password.substring(0, password.indexOf(ROLE_DELIMITER));",
                "-                }",
                "-            }",
                "-        }",
                "-",
                "-    }",
                "-    ",
                "-    private static void showHelp() {",
                "-        System.out.println(\"Apache Karaf client\");",
                "-        System.out.println(\"  -a [port]     specify the port to connect to\");",
                "-        System.out.println(\"  -h [host]     specify the host to connect to\");",
                "-        System.out.println(\"  -u [user]     specify the user name\");",
                "-        System.out.println(\"  -p [password] specify the password (optional, if not provided, the password is prompted)\");",
                "-        System.out.println(\"  --help        shows this help message\");",
                "-        System.out.println(\"  -v            raise verbosity\");",
                "-        System.out.println(\"  -l            set client logging level. Set to 0 for ERROR logging and up to 4 for TRACE\");",
                "-        System.out.println(\"  -r [attempts] retry connection establishment (up to attempts times)\");",
                "-        System.out.println(\"  -d [delay]    intra-retry delay (defaults to 2 seconds)\");",
                "-        System.out.println(\"  -b            batch mode, specify multiple commands via standard input\");",
                "-        System.out.println(\"  -f [file]     read commands from the specified file\");",
                "-        System.out.println(\"  -k [keyFile]  specify the private keyFile location when using key login, need have BouncyCastle registered as security provider using this flag\");",
                "-        System.out.println(\"  -t [timeout]  define the client idle timeout\");",
                "-        System.out.println(\"  [commands] [--]   commands to run\");",
                "-        System.out.println(\"If no commands are specified, the client will be put in an interactive mode\");",
                "-        System.exit(0);",
                "-    }",
                "-",
                "-    // tries a very basic variable substitution",
                "-    private static String replaceVariable(String input, String defaultValue, Properties customCfg) {",
                "-        try {",
                "-            int indexOfDollar = input.indexOf('$');",
                "-            int indexOfClosingBrace = input.indexOf('}', indexOfDollar + 1);",
                "-            String varName = input.substring(indexOfDollar + 2, indexOfClosingBrace);",
                "-            String varValue = customCfg.getProperty(varName, defaultValue);",
                "-            return input.replace(\"${\" + varName + \"}\", varValue);",
                "-        } catch (Exception e) {",
                "-            return input;",
                "-        }",
                "-    }",
                "-",
                "-    private static Properties loadProps(File file, final Map<String, String> additionalStorage) {",
                "-        Properties props = new Properties() {",
                "-            @Override",
                "-            public synchronized Object put(Object key, Object value) {",
                "-                if (additionalStorage != null) {",
                "-                    additionalStorage.put((String) key, (String) value);",
                "-                }",
                "-                return super.put(key, value);",
                "-            }",
                "-        };",
                "-        FileInputStream is = null;",
                "-        try {",
                "-            is = new FileInputStream(file);",
                "-            props.load(is);",
                "-",
                "-        } catch (Exception e) {",
                "-                System.err.println(\"Warning: could not load properties from: \" + file + \", Reason: \" + e.getMessage());",
                "-        } finally {",
                "-            if (is != null) {",
                "-                try {",
                "-                    is.close();",
                "-                } catch (IOException e) {",
                "-                    // ignore",
                "-                }",
                "-            }",
                "-        }",
                "-        return props;",
                "-    }",
                "-",
                "-    ",
                "-    private static String expandEnvVars(String text) {",
                "-        Map<String, String> envMap = System.getenv();",
                "-        String pattern = \"\\\\$\\\\{([A-Za-z0-9]+)\\\\}\";",
                "-        Pattern expr = Pattern.compile(pattern);",
                "-        Matcher matcher = expr.matcher(text);",
                "-        while (matcher.find()) {",
                "-            String envValue = envMap.get(matcher.group(1).toUpperCase());",
                "-            if (envValue != null) {",
                "-                envValue = envValue.replace(\"\\\\\", \"\\\\\\\\\");",
                "-                Pattern subexpr = Pattern.compile(Pattern.quote(matcher.group(0)));",
                "-                text = subexpr.matcher(text).replaceAll(envValue);",
                "-            }",
                "-        }",
                "-        return text;",
                "-    }",
                "-    ",
                "-    public String getHost() {",
                "-        return host;",
                "-    }",
                "-",
                "-    public int getPort() {",
                "-        return port;",
                "-    }",
                "-",
                "-    public String getUser() {",
                "-        return user;",
                "-    }",
                "-",
                "-    public String getPassword() {",
                "-        return password;",
                "-    }",
                "-",
                "-    public int getLevel() {",
                "-        return level;",
                "-    }",
                "-",
                "-    public int getRetryAttempts() {",
                "-        return retryAttempts;",
                "-    }",
                "-",
                "-    public int getRetryDelay() {",
                "-        return retryDelay;",
                "-    }",
                "-",
                "-    public String getCommand() {",
                "-        return command;",
                "-    }",
                "-",
                "-    public void setCommand(String command) {",
                "-        this.command = command;",
                "-    }",
                "-",
                "-    public boolean isBatch() {",
                "-        return batch;",
                "-    }",
                "-",
                "-    public String getFile() {",
                "-        return file;",
                "-    }",
                "-",
                "-    public String getKeyFile() {",
                "-        return keyFile;",
                "-    }",
                "-",
                "-    public long getIdleTimeout() {",
                "-        return idleTimeout;",
                "-    }",
                "-",
                "-}",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.karaf.client;",
                "+",
                "+import java.io.File;",
                "+import java.io.FileInputStream;",
                "+import java.io.IOException;",
                "+import java.util.LinkedHashMap;",
                "+import java.util.LinkedHashSet;",
                "+import java.util.Properties;",
                "+import java.util.Set;",
                "+import java.util.Map;",
                "+import java.util.regex.Matcher;",
                "+import java.util.regex.Pattern;",
                "+",
                "+public class ClientConfig {",
                "+",
                "+    private static final String ROLE_DELIMITER = \",\";",
                "+    private static final String GROUP_PREFIX = \"_g_:\";",
                "+",
                "+    private String host;",
                "+    private int port;",
                "+    private String user;",
                "+    private String password;",
                "+    private int level;",
                "+    private int retryAttempts;",
                "+    private int retryDelay;",
                "+    private long idleTimeout;",
                "+    private boolean batch;",
                "+    private String file = null;",
                "+    private String keyFile = null;",
                "+    private String command;",
                "+    private boolean interactiveMode = false;",
                "+    private boolean inputPassword = false;",
                "+",
                "+    public ClientConfig(String[] args) throws IOException {",
                "+        Properties shellCfg = loadProps(new File(System.getProperty(\"karaf.etc\"), \"org.apache.karaf.shell.cfg\"), null);",
                "+        Properties customCfg = loadProps(new File(System.getProperty(\"karaf.etc\"), \"custom.properties\"), null);",
                "+        ",
                "+        host = shellCfg.getProperty(\"sshHost\", \"localhost\");",
                "+        host = expandEnvVars(host);",
                "+        String portString = shellCfg.getProperty(\"sshPort\", \"8101\");",
                "+        portString = expandEnvVars(portString);",
                "+        ",
                "+        // if sshHost of sshPort properties contain a reference to another property (coming from ",
                "+        // , we try to use the custom.properties value",
                "+        if (host.contains(\"${\")) {",
                "+            host = replaceVariable(host, \"localhost\", customCfg);",
                "+        }",
                "+        if (host.contains(\"0.0.0.0\")) {",
                "+            host = \"localhost\";",
                "+        }",
                "+        if (portString.contains(\"${\")) {",
                "+            portString = replaceVariable(portString, \"8101\", customCfg);",
                "+        }",
                "+        port = Integer.parseInt(portString);",
                "+        level = Integer.parseInt(shellCfg.getProperty(\"logLevel\", \"0\"));",
                "+        retryAttempts = 0;",
                "+        retryDelay = 2;",
                "+        idleTimeout = Long.parseLong(shellCfg.getProperty(\"sshIdleTimeout\", \"1800000\"));",
                "+        batch = false;",
                "+        file = null;",
                "+        user = null;",
                "+        password = null;",
                "+        StringBuilder commandBuilder = new StringBuilder();",
                "+        boolean endOfOptionsMarkerReached = false;",
                "+        ",
                "+        for (int i = 0; i < args.length; i++) {",
                "+            if (!endOfOptionsMarkerReached && args[i].charAt(0) == '-') {",
                "+                if (args[i].equals(\"-a\")) {",
                "+                    if (args.length <= ++i) {",
                "+                        System.err.println(\"miss the port\");",
                "+                        System.exit(1);",
                "+                    } else {",
                "+                        port = Integer.parseInt(args[i]);",
                "+                    }",
                "+                } else if (args[i].equals(\"-h\")) {",
                "+                    if (args.length <= ++i) {",
                "+                        System.err.println(\"miss the host\");",
                "+                        System.exit(1);",
                "+                    } else {",
                "+                        host = args[i];",
                "+                    }",
                "+                } else if (args[i].equals(\"-u\")) {",
                "+                    if (args.length <= ++i) {",
                "+                        System.err.println(\"miss the user\");",
                "+                        System.exit(1);",
                "+                    } else {",
                "+                        user = args[i];",
                "+                        interactiveMode = true;",
                "+                        password = null;//get chance to input the password with interactive way",
                "+                    }",
                "+                } else if (args[i].equals(\"-v\")) {",
                "+                    level++;",
                "+                } else if (args[i].equals(\"-l\")) {",
                "+                    if (args.length <= ++i) {",
                "+                        System.err.println(\"miss the log level\");",
                "+                        System.exit(1);",
                "+                    } else {",
                "+                        int levelValue = Integer.parseInt(args[i]);",
                "+                        if (levelValue < 0 || levelValue > 4) {",
                "+                            System.err.println(\"log level can only be 0, 1, 2, 3, or 4\");",
                "+                            System.exit(1);",
                "+                        } else {",
                "+                            level = levelValue;",
                "+                        }",
                "+                    }",
                "+                } else if (args[i].equals(\"-r\")) {",
                "+                    if (args.length <= ++i) {",
                "+                        System.err.println(\"miss the attempts\");",
                "+                        System.exit(1);",
                "+                    } else {",
                "+                        retryAttempts = Integer.parseInt(args[i]);",
                "+                    }",
                "+                    ",
                "+                } else if (args[i].equals(\"-p\")) {",
                "+                    if (args.length <= ++i) {",
                "+                        System.err.println(\"miss the password\");",
                "+                        System.exit(1);",
                "+                    } else {",
                "+                        password = args[i];",
                "+                        interactiveMode = false;",
                "+                        inputPassword = true;",
                "+                    }",
                "+                } else if (args[i].equals(\"-d\")) {",
                "+                    if (args.length <= ++i) {",
                "+                        System.err.println(\"miss the delay in seconds\");",
                "+                        System.exit(1);",
                "+                    } else {",
                "+                        retryDelay = Integer.parseInt(args[i]);",
                "+                    }",
                "+                } else if (args[i].equals(\"-b\")) {",
                "+                    batch = true;",
                "+                } else if (args[i].equals(\"-f\")) {",
                "+                    if (args.length <= ++i) {",
                "+                        System.err.println(\"miss the commands file\");",
                "+                        System.exit(1);",
                "+                    } else {",
                "+                        file = args[i];",
                "+                    }",
                "+                } else if (args[i].equals(\"-k\")) {",
                "+                    if (args.length <= ++i) {",
                "+                        System.err.println(\"miss the key file\");",
                "+                        System.exit(1);",
                "+                    } else {",
                "+                        keyFile = args[i];",
                "+                    }",
                "+                } else if (args[i].equals(\"-t\")) {",
                "+                    if (args.length <= ++i) {",
                "+                        System.err.println(\"miss the idle timeout\");",
                "+                        System.exit(1);",
                "+                    } else {",
                "+                        idleTimeout = Long.parseLong(args[i]);",
                "+                    }",
                "+                } else if (args[i].equals(\"--help\")) {",
                "+                    showHelp();",
                "+                } else if (args[i].equals(\"--\")) {",
                "+                    endOfOptionsMarkerReached = true;",
                "+                } else {",
                "+                    System.err.println(\"Unknown option: \" + args[i]);",
                "+                    System.err.println(\"Run with --help for usage\");",
                "+                    System.exit(1);",
                "+                }",
                "+            } else {",
                "+                commandBuilder.append(args[i]);",
                "+                commandBuilder.append(' ');",
                "+            }",
                "+        }",
                "+        command = commandBuilder.toString();",
                "+",
                "+        Map<String, String> usersCfg = new LinkedHashMap<>();",
                "+        File userPropertiesFile = new File(System.getProperty(\"karaf.etc\") + \"/users.properties\");",
                "+        if (userPropertiesFile.exists()) {",
                "+            loadProps(new File(System.getProperty(\"karaf.etc\") + \"/users.properties\"), usersCfg);",
                "+            if (!usersCfg.isEmpty()) {",
                "+                Set<String> users = new LinkedHashSet<>();",
                "+                for (String user : usersCfg.keySet()) {",
                "+                    if (!user.startsWith(GROUP_PREFIX)) {",
                "+                        users.add(user);",
                "+                    }",
                "+                }",
                "+                if (user == null) {",
                "+                    if (users.iterator().hasNext()) {",
                "+                        user = users.iterator().next();",
                "+                    }",
                "+                }",
                "+                if (interactiveMode && !inputPassword) {",
                "+                    password = null;",
                "+                } else if (!inputPassword) {",
                "+                    password = usersCfg.get(user);",
                "+                    if (password != null && password.contains(ROLE_DELIMITER)) {",
                "+                        password = password.substring(0, password.indexOf(ROLE_DELIMITER));",
                "+                    }",
                "+                }",
                "+            }",
                "+        }",
                "+",
                "+    }",
                "+    ",
                "+    private static void showHelp() {",
                "+        System.out.println(\"Apache Karaf client\");",
                "+        System.out.println(\"  -a [port]     specify the port to connect to\");",
                "+        System.out.println(\"  -h [host]     specify the host to connect to\");",
                "+        System.out.println(\"  -u [user]     specify the user name\");",
                "+        System.out.println(\"  -p [password] specify the password (optional, if not provided, the password is prompted)\");",
                "+        System.out.println(\"  --help        shows this help message\");",
                "+        System.out.println(\"  -v            raise verbosity\");",
                "+        System.out.println(\"  -l            set client logging level. Set to 0 for ERROR logging and up to 4 for TRACE\");",
                "+        System.out.println(\"  -r [attempts] retry connection establishment (up to attempts times)\");",
                "+        System.out.println(\"  -d [delay]    intra-retry delay (defaults to 2 seconds)\");",
                "+        System.out.println(\"  -b            batch mode, specify multiple commands via standard input\");",
                "+        System.out.println(\"  -f [file]     read commands from the specified file\");",
                "+        System.out.println(\"  -k [keyFile]  specify the private keyFile location when using key login, need have BouncyCastle registered as security provider using this flag\");",
                "+        System.out.println(\"  -t [timeout]  define the client idle timeout\");",
                "+        System.out.println(\"  [commands] [--]   commands to run\");",
                "+        System.out.println(\"If no commands are specified, the client will be put in an interactive mode\");",
                "+        System.exit(0);",
                "+    }",
                "+",
                "+    // tries a very basic variable substitution",
                "+    private static String replaceVariable(String input, String defaultValue, Properties customCfg) {",
                "+        try {",
                "+            int indexOfDollar = input.indexOf('$');",
                "+            int indexOfClosingBrace = input.indexOf('}', indexOfDollar + 1);",
                "+            String varName = input.substring(indexOfDollar + 2, indexOfClosingBrace);",
                "+            String varValue = customCfg.getProperty(varName, defaultValue);",
                "+            return input.replace(\"${\" + varName + \"}\", varValue);",
                "+        } catch (Exception e) {",
                "+            return input;",
                "+        }",
                "+    }",
                "+",
                "+    private static Properties loadProps(File file, final Map<String, String> additionalStorage) {",
                "+        Properties props = new Properties() {",
                "+            @Override",
                "+            public synchronized Object put(Object key, Object value) {",
                "+                if (additionalStorage != null) {",
                "+                    additionalStorage.put((String) key, (String) value);",
                "+                }",
                "+                return super.put(key, value);",
                "+            }",
                "+        };",
                "+        FileInputStream is = null;",
                "+        try {",
                "+            is = new FileInputStream(file);",
                "+            props.load(is);",
                "+",
                "+        } catch (Exception e) {",
                "+                System.err.println(\"Warning: could not load properties from: \" + file + \", Reason: \" + e.getMessage());",
                "+        } finally {",
                "+            if (is != null) {",
                "+                try {",
                "+                    is.close();",
                "+                } catch (IOException e) {",
                "+                    // ignore",
                "+                }",
                "+            }",
                "+        }",
                "+        return props;",
                "+    }",
                "+",
                "+    ",
                "+    private static String expandEnvVars(String text) {",
                "+        Map<String, String> envMap = System.getenv();",
                "+        String pattern = \"\\\\$\\\\{([A-Za-z0-9]+)\\\\}\";",
                "+        Pattern expr = Pattern.compile(pattern);",
                "+        Matcher matcher = expr.matcher(text);",
                "+        while (matcher.find()) {",
                "+            String envValue = envMap.get(matcher.group(1).toUpperCase());",
                "+            if (envValue != null) {",
                "+                envValue = envValue.replace(\"\\\\\", \"\\\\\\\\\");",
                "+                Pattern subexpr = Pattern.compile(Pattern.quote(matcher.group(0)));",
                "+                text = subexpr.matcher(text).replaceAll(envValue);",
                "+            }",
                "+        }",
                "+        return text;",
                "+    }",
                "+    ",
                "+    public String getHost() {",
                "+        return host;",
                "+    }",
                "+",
                "+    public int getPort() {",
                "+        return port;",
                "+    }",
                "+",
                "+    public String getUser() {",
                "+        return user;",
                "+    }",
                "+",
                "+    public void setUser(String user) {",
                "+        this.user = user;",
                "+    }",
                "+",
                "+    public String getPassword() {",
                "+        return password;",
                "+    }",
                "+",
                "+    public int getLevel() {",
                "+        return level;",
                "+    }",
                "+",
                "+    public int getRetryAttempts() {",
                "+        return retryAttempts;",
                "+    }",
                "+",
                "+    public int getRetryDelay() {",
                "+        return retryDelay;",
                "+    }",
                "+",
                "+    public String getCommand() {",
                "+        return command;",
                "+    }",
                "+",
                "+    public void setCommand(String command) {",
                "+        this.command = command;",
                "+    }",
                "+",
                "+    public boolean isBatch() {",
                "+        return batch;",
                "+    }",
                "+",
                "+    public String getFile() {",
                "+        return file;",
                "+    }",
                "+",
                "+    public String getKeyFile() {",
                "+        return keyFile;",
                "+    }",
                "+",
                "+    public long getIdleTimeout() {",
                "+        return idleTimeout;",
                "+    }",
                "+",
                "+}",
                "diff --git a/client/src/main/java/org/apache/karaf/client/Main.java b/client/src/main/java/org/apache/karaf/client/Main.java",
                "index 14b09917c8..a179731dda 100644",
                "--- a/client/src/main/java/org/apache/karaf/client/Main.java",
                "+++ b/client/src/main/java/org/apache/karaf/client/Main.java",
                "@@ -151,2 +151,16 @@ public class Main {",
                "             }",
                "+",
                "+            if (config.getUser() == null || config.getUser().isEmpty()) {",
                "+                while (true) {",
                "+                    String user = console.readLine(\"Enter user: \");",
                "+                    if (user == null || user.isEmpty()) {",
                "+                        System.err.println(\"User must not be empty\");",
                "+                    } else {",
                "+                        config.setUser(user);",
                "+                        break;",
                "+                    }",
                "+                }",
                "+            } else if (console != null) {",
                "+                console.printf(\"Logging in as %s\\n\", config.getUser());",
                "+            }",
                "             setupAgent(config.getUser(), config.getKeyFile(), client, passwordProvider);",
                "@@ -156,5 +170,2 @@ public class Main {",
                "             client.start();",
                "-            if (console != null) {",
                "-                console.printf(\"Logging in as %s\\n\", config.getUser());",
                "-            }",
                "             ClientSession session = connectWithRetries(client, config);"
            ],
            "changed_files": [
                "client/src/main/java/org/apache/karaf/client/ClientConfig.java",
                "client/src/main/java/org/apache/karaf/client/Main.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5411": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.1.3",
                "karaf-4.1.4",
                "karaf-4.1.5",
                "karaf-4.1.6",
                "karaf-4.1.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: file, allow, user",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5411",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "90d289ee5ffedd6ff9c4bd27746947553ae1e58a",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1508261555,
            "hunks": 3,
            "message": "[KARAF-5310] Upgrade to maven surefire plugin 2.20 to get colored output",
            "diff": [
                "diff --git a/bundle/core/src/main/java/org/apache/karaf/bundle/command/Headers.java b/bundle/core/src/main/java/org/apache/karaf/bundle/command/Headers.java",
                "index ea830802fc..a9d8c82c8c 100644",
                "--- a/bundle/core/src/main/java/org/apache/karaf/bundle/command/Headers.java",
                "+++ b/bundle/core/src/main/java/org/apache/karaf/bundle/command/Headers.java",
                "@@ -243,4 +243,3 @@ public class Headers extends BundlesCommand {",
                "     protected int getTermWidth() {",
                "-        return terminal.getWidth();",
                "-",
                "+        return terminal != null ? terminal.getWidth() : 0;",
                "     }",
                "diff --git a/pom.xml b/pom.xml",
                "index 2e7778b1cb..ed2f721bc8 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -1797,3 +1797,3 @@",
                "                     <artifactId>maven-surefire-plugin</artifactId>",
                "-                    <version>2.18.1</version>",
                "+                    <version>2.20.1</version>",
                "                     <configuration>",
                "diff --git a/shell/core/src/main/java/org/apache/karaf/shell/impl/console/HeadlessSessionImpl.java b/shell/core/src/main/java/org/apache/karaf/shell/impl/console/HeadlessSessionImpl.java",
                "index 28d912170d..b496addb4d 100644",
                "--- a/shell/core/src/main/java/org/apache/karaf/shell/impl/console/HeadlessSessionImpl.java",
                "+++ b/shell/core/src/main/java/org/apache/karaf/shell/impl/console/HeadlessSessionImpl.java",
                "@@ -83,2 +83,3 @@ public class HeadlessSessionImpl implements Session {",
                "         }",
                "+        session.put(CommandSession.OPTION_NO_GLOB, Boolean.TRUE);",
                "         session.currentDir(Paths.get(System.getProperty(\"user.dir\")).toAbsolutePath().normalize());"
            ],
            "changed_files": [
                "bundle/core/src/main/java/org/apache/karaf/bundle/command/Headers.java",
                "pom.xml",
                "shell/core/src/main/java/org/apache/karaf/shell/impl/console/HeadlessSessionImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5310": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: console",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5310",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b23ca4169ce1d5fb8c0494ecb6d7ffa56a818aae",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1508955712,
            "hunks": 2,
            "message": "[KARAF-5432] Upgrade to Felix Utils 1.10.4 and FileInstall 3.6.4 [KARAF-5313] Exception when deleting a .cfg file from hot deploy directory",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index aa8a234ed8..eeaf438e72 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -191,3 +191,3 @@",
                "         <felix.coordinator.version>1.0.2</felix.coordinator.version>",
                "-        <felix.fileinstall.version>3.6.2</felix.fileinstall.version>",
                "+        <felix.fileinstall.version>3.6.4</felix.fileinstall.version>",
                "         <felix.framework.version>5.6.8</felix.framework.version>",
                "@@ -199,3 +199,3 @@",
                "         <felix.plugin.version>3.3.0</felix.plugin.version>",
                "-        <felix.utils.version>1.10.2</felix.utils.version>",
                "+        <felix.utils.version>1.10.4</felix.utils.version>",
                "         <felix.webconsole.version>4.3.4</felix.webconsole.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5432": "",
                "KARAF-5313": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: file, directory, install",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5432, KARAF-5313",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0edb20b4f00eb29f2bf2019f0f6564a62625fe41",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1511775693,
            "hunks": 3,
            "message": "[KARAF-5506]ensure we also check the ACL for alias cmds before auto-completer",
            "diff": [
                "diff --git a/shell/core/src/main/java/org/apache/karaf/shell/impl/console/CommandsCompleter.java b/shell/core/src/main/java/org/apache/karaf/shell/impl/console/CommandsCompleter.java",
                "index b75489b52d..99833b7841 100644",
                "--- a/shell/core/src/main/java/org/apache/karaf/shell/impl/console/CommandsCompleter.java",
                "+++ b/shell/core/src/main/java/org/apache/karaf/shell/impl/console/CommandsCompleter.java",
                "@@ -38,2 +38,4 @@ import org.apache.karaf.shell.api.console.Session;",
                " import org.apache.karaf.shell.api.console.SessionFactory;",
                "+import org.apache.karaf.shell.impl.console.osgi.secured.SecuredCommand;",
                "+import org.apache.karaf.shell.impl.console.osgi.secured.SecuredSessionFactoryImpl;",
                " import org.apache.karaf.shell.support.completers.ArgumentCommandLine;",
                "@@ -272,3 +274,30 @@ public class CommandsCompleter extends org.apache.karaf.shell.support.completers",
                "             if (content != null && \"org.apache.felix.gogo.runtime.Closure\".equals(content.getClass().getName())) {",
                "-                aliases.add(var);",
                "+",
                "+                //check both acl for alias and original cmd to determine if it should be visible",
                "+                int index = var.indexOf(\":\");",
                "+                if (index > 0 && (factory instanceof SecuredSessionFactoryImpl)) {",
                "+                    String scope = var.substring(0, index);",
                "+                    String command = var.substring(index + 1);",
                "+                    String originalCmd = content.toString();",
                "+                    index = originalCmd.indexOf(\" \");",
                "+                    Object securityCmd = null;",
                "+                    if (index > 0) {",
                "+                        securityCmd = ((org.apache.felix.gogo.runtime.Closure)content).",
                "+                            get(originalCmd.substring(0, index));",
                "+                    }",
                "+                    if (securityCmd instanceof SecuredCommand) {",
                "+                        if (((SecuredSessionFactoryImpl)factory).isVisible(scope, command)",
                "+                            && ((SecuredSessionFactoryImpl)factory).isVisible(((SecuredCommand)securityCmd).getScope(),",
                "+                                                                              ((SecuredCommand)securityCmd).getName())) {",
                "+                            aliases.add(var);",
                "+                        }",
                "+                    } else {",
                "+                        if (((SecuredSessionFactoryImpl)factory).isVisible(scope, command)) {",
                "+                            aliases.add(var);",
                "+                        }",
                "+                    }",
                "+                    ",
                "+                } else {",
                "+                    aliases.add(var);",
                "+                }",
                "             }",
                "diff --git a/shell/core/src/main/java/org/apache/karaf/shell/impl/console/osgi/secured/SecuredSessionFactoryImpl.java b/shell/core/src/main/java/org/apache/karaf/shell/impl/console/osgi/secured/SecuredSessionFactoryImpl.java",
                "index 7fe015cdfa..2140aab3a4 100644",
                "--- a/shell/core/src/main/java/org/apache/karaf/shell/impl/console/osgi/secured/SecuredSessionFactoryImpl.java",
                "+++ b/shell/core/src/main/java/org/apache/karaf/shell/impl/console/osgi/secured/SecuredSessionFactoryImpl.java",
                "@@ -110,3 +110,3 @@ public class SecuredSessionFactoryImpl extends SessionFactoryImpl implements Con",
                "-    protected boolean isVisible(String scope, String name) {",
                "+    public boolean isVisible(String scope, String name) {",
                "         Dictionary<String, Object> config = getScopeConfig(scope);"
            ],
            "changed_files": [
                "shell/core/src/main/java/org/apache/karaf/shell/impl/console/CommandsCompleter.java",
                "shell/core/src/main/java/org/apache/karaf/shell/impl/console/osgi/secured/SecuredSessionFactoryImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5506": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: console",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5506",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "807c020463e679f288851836f420a8b0b6e88c53",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1508760058,
            "hunks": 4,
            "message": "[KARAF-5396]enhance so that don't need have \"--add-modules java.xml.bind\" in MAVEN_OPTS when run with java9",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 91dec7f82c..0e5d3d1a1e 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -151,3 +151,3 @@",
                "         <jna.version>4.4.0</jna.version>",
                "-        ",
                "+        <jaxb.version>2.2.11</jaxb.version> ",
                "         <commons-beanutils.version>1.9.2</commons-beanutils.version>",
                "diff --git a/tooling/karaf-maven-plugin/pom.xml b/tooling/karaf-maven-plugin/pom.xml",
                "index 974c32e718..fc91e9b1ca 100644",
                "--- a/tooling/karaf-maven-plugin/pom.xml",
                "+++ b/tooling/karaf-maven-plugin/pom.xml",
                "@@ -297,2 +297,3 @@",
                "                 <artifactId>maven-plugin-plugin</artifactId>",
                "+                <version>3.5</version>",
                "                 <executions>",
                "@@ -391,2 +392,56 @@",
                " \t        </properties>",
                "+                <dependencies>",
                "+                    <dependency>",
                "+                        <groupId>javax.xml.bind</groupId>",
                "+                        <artifactId>jaxb-api</artifactId>",
                "+                        <version>2.3.0</version>",
                "+                    </dependency>",
                "+                    <dependency>",
                "+                        <groupId>javax.activation</groupId>",
                "+                        <artifactId>activation</artifactId>",
                "+                        <version>1.1.1</version>",
                "+                    </dependency>",
                "+                    <dependency>",
                "+                        <groupId>com.sun.xml.bind</groupId>",
                "+                        <artifactId>jaxb-core</artifactId>",
                "+                        <version>${jaxb.version}</version>",
                "+                        <exclusions>",
                "+                            <exclusion>",
                "+                                <groupId>org.glassfish.jaxb</groupId>",
                "+                                <artifactId>jaxb-core</artifactId>",
                "+                            </exclusion>",
                "+                            <exclusion>",
                "+                                <groupId>org.glassfish.jaxb</groupId>",
                "+                                <artifactId>txw2</artifactId>",
                "+                            </exclusion>",
                "+                        </exclusions>",
                "+                    </dependency>",
                "+                    <dependency>",
                "+                        <groupId>com.sun.xml.bind</groupId>",
                "+                        <artifactId>jaxb-impl</artifactId>",
                "+                        <version>${jaxb.version}</version>",
                "+                        <exclusions>",
                "+                            <exclusion>",
                "+                                <groupId>javax.xml.bind</groupId>",
                "+                                <artifactId>jsr173_api</artifactId>",
                "+                            </exclusion>",
                "+                            <exclusion>",
                "+                                <groupId>javax.xml</groupId>",
                "+                                <artifactId>jsr173</artifactId>",
                "+                            </exclusion>",
                "+                            <exclusion>",
                "+                                <groupId>javax.activation</groupId>",
                "+                                <artifactId>activation</artifactId>",
                "+                            </exclusion>",
                "+                            <exclusion>",
                "+                                <groupId>javax.xml.bind</groupId>",
                "+                                <artifactId>activation</artifactId>",
                "+                            </exclusion>",
                "+                            <exclusion>",
                "+                                <groupId>javax.xml.bind</groupId>",
                "+                                <artifactId>jaxb-api</artifactId>",
                "+                            </exclusion>",
                "+                        </exclusions>",
                "+                    </dependency>",
                "+                </dependencies>",
                " \t        <activation>",
                "@@ -394,3 +449,3 @@",
                "             </activation>",
                "-\t    </profile>",
                "+\t</profile>",
                "         <profile>"
            ],
            "changed_files": [
                "pom.xml",
                "tooling/karaf-maven-plugin/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5396": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: have",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5396",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ecdfeaae5adc25fc5d1ec8ff88a3a1a53d74202d",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1508762207,
            "hunks": 0,
            "message": "[KARAF-5396] Remove unused jvm config file",
            "diff": [
                "diff --git a/.mvn/jvm9.config b/.mvn/jvm9.config",
                "deleted file mode 100644",
                "index e69de29bb2..0000000000"
            ],
            "changed_files": [
                ".mvn/jvm9.config"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5396": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: file",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5396",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "851c5825ab772064b319a60689c93a11138688b7",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1510246916,
            "hunks": 3,
            "message": "[KARAF-5475] Send an event to EventAdmin after having executed a command in the shell and include the result / exception",
            "diff": [
                "diff --git a/shell/core/src/main/java/org/apache/karaf/shell/impl/console/osgi/EventAdminListener.java b/shell/core/src/main/java/org/apache/karaf/shell/impl/console/osgi/EventAdminListener.java",
                "index b7b805e1ba..ec249a2d49 100644",
                "--- a/shell/core/src/main/java/org/apache/karaf/shell/impl/console/osgi/EventAdminListener.java",
                "+++ b/shell/core/src/main/java/org/apache/karaf/shell/impl/console/osgi/EventAdminListener.java",
                "@@ -47,2 +47,13 @@ public class EventAdminListener implements CommandSessionListener, Closeable",
                "     public void beforeExecute(CommandSession session, CharSequence command) {",
                "+    }",
                "+",
                "+    public void afterExecute(CommandSession session, CharSequence command, Exception exception) {",
                "+        sendEvent(command, null, exception);",
                "+    }",
                "+",
                "+    public void afterExecute(CommandSession session, CharSequence command, Object result) {",
                "+        sendEvent(command, result, null);",
                "+    }",
                "+",
                "+    private void sendEvent(CharSequence command, Object result, Exception exception) {",
                "         if (command.toString().trim().length() > 0) {",
                "@@ -52,3 +63,9 @@ public class EventAdminListener implements CommandSessionListener, Closeable",
                "                 props.put(\"command\", command.toString());",
                "-                Event event = new Event(\"org/apache/karaf/shell/console/EXECUTING\", props);",
                "+                if (result != null) {",
                "+                    props.put(\"result\", result);",
                "+                }",
                "+                if (exception != null) {",
                "+                    props.put(\"exception\", exception);",
                "+                }",
                "+                Event event = new Event(\"org/apache/karaf/shell/console/EXECUTED\", props);",
                "                 admin.postEvent(event);",
                "@@ -58,8 +75,2 @@ public class EventAdminListener implements CommandSessionListener, Closeable",
                "-    public void afterExecute(CommandSession session, CharSequence command, Exception exception) {",
                "-    }",
                "-",
                "-    public void afterExecute(CommandSession session, CharSequence command, Object result) {",
                "-    }",
                "-",
                " }"
            ],
            "changed_files": [
                "shell/core/src/main/java/org/apache/karaf/shell/impl/console/osgi/EventAdminListener.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5475": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: console",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5475",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e3915a4f1c79c865b0939d70412fa6dadd21369f",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1508154494,
            "hunks": 2,
            "message": "[KARAF-5426] Print additional type information for --all-wiring/--features-wiring option",
            "diff": [
                "diff --git a/features/core/src/main/java/org/apache/karaf/features/internal/service/Deployer.java b/features/core/src/main/java/org/apache/karaf/features/internal/service/Deployer.java",
                "index 6e2f729621..12d4d53d0b 100644",
                "--- a/features/core/src/main/java/org/apache/karaf/features/internal/service/Deployer.java",
                "+++ b/features/core/src/main/java/org/apache/karaf/features/internal/service/Deployer.java",
                "@@ -1128,5 +1128,5 @@ public class Deployer {",
                "         for (Resource r : sorted) {",
                "-            print(\"    \" + ResolverUtil.getSymbolicName(r) + \" / \" + ResolverUtil.getVersion(r), true);",
                "+            print(\"    \" + ResourceUtils.getType(r) + \": \" + ResolverUtil.getSymbolicName(r) + \" / \" + ResolverUtil.getVersion(r), true);",
                "             for (Resource w : wires.get(r)) {",
                "-                print(\"        \" + ResolverUtil.getSymbolicName(w) + \" / \" + ResolverUtil.getVersion(w), true);",
                "+                print(\"        \" + ResourceUtils.getType(w) + \": \" + ResolverUtil.getSymbolicName(w) + \" / \" + ResolverUtil.getVersion(w), true);",
                "             }"
            ],
            "changed_files": [
                "features/core/src/main/java/org/apache/karaf/features/internal/service/Deployer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5426": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: service",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5426",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "495fbd3cb2d01eba87752cc2ec2a1f51a02d05fb",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1507656063,
            "hunks": 24,
            "message": "[KARAF-5395] Various minor improvements",
            "diff": [
                "diff --git a/features/core/src/main/java/org/apache/karaf/features/internal/model/Bundle.java b/features/core/src/main/java/org/apache/karaf/features/internal/model/Bundle.java",
                "index 9749da11a0..8afa5ff7c5 100644",
                "--- a/features/core/src/main/java/org/apache/karaf/features/internal/model/Bundle.java",
                "+++ b/features/core/src/main/java/org/apache/karaf/features/internal/model/Bundle.java",
                "@@ -180,2 +180,7 @@ public class Bundle implements BundleInfo {",
                "     }",
                "+",
                "+    @Override",
                "+    public String toString() {",
                "+        return value;",
                "+    }",
                " }",
                "diff --git a/features/core/src/main/java/org/apache/karaf/features/internal/region/Subsystem.java b/features/core/src/main/java/org/apache/karaf/features/internal/region/Subsystem.java",
                "index 33b9dae6e3..e55e60d644 100644",
                "--- a/features/core/src/main/java/org/apache/karaf/features/internal/region/Subsystem.java",
                "+++ b/features/core/src/main/java/org/apache/karaf/features/internal/region/Subsystem.java",
                "@@ -58,2 +58,3 @@ import org.apache.karaf.features.internal.resolver.SimpleFilter;",
                " import org.apache.karaf.features.internal.service.Overrides;",
                "+import org.apache.karaf.features.internal.util.StringArrayMap;",
                " import org.osgi.framework.BundleException;",
                "@@ -447,7 +448,2 @@ public class Subsystem extends ResourceImpl {",
                "                 int sl = bi.getStartLevel() <= 0 ? feature.getStartLevel() : bi.getStartLevel();",
                "-                if (bi.isDependency()) {",
                "-                    addDependency(res, false, bi.isStart(), sl);",
                "-                } else {",
                "-                    doAddDependency(res, cond == null, bi.isStart(), sl);",
                "-                }",
                "                 if (cond != null) {",
                "@@ -455,2 +451,8 @@ public class Subsystem extends ResourceImpl {",
                "                 }",
                "+                boolean mandatory = !bi.isDependency() && cond == null;",
                "+                if (bi.isDependency()) {",
                "+                    addDependency(res, mandatory, bi.isStart(), sl);",
                "+                } else {",
                "+                    doAddDependency(res, mandatory, bi.isStart(), sl);",
                "+                }",
                "             }",
                "@@ -499,3 +501,3 @@ public class Subsystem extends ResourceImpl {",
                "             res.addCapability(new CapabilityImpl(res, cap.getNamespace(),",
                "-                    new HashMap<>(cap.getDirectives()), new HashMap<>(cap.getAttributes())));",
                "+                    new StringArrayMap<>(cap.getDirectives()), new StringArrayMap<>(cap.getAttributes())));",
                "         }",
                "@@ -511,3 +513,3 @@ public class Subsystem extends ResourceImpl {",
                "             res.addRequirement(new RequirementImpl(res, req.getNamespace(),",
                "-                    new HashMap<>(req.getDirectives()), new HashMap<>(req.getAttributes()), sf));",
                "+                    new StringArrayMap<>(req.getDirectives()), new StringArrayMap<>(req.getAttributes()), sf));",
                "         }",
                "@@ -545,11 +547,39 @@ public class Subsystem extends ResourceImpl {",
                "         String id = ResolverUtil.getSymbolicName(resource) + \"|\" + ResolverUtil.getVersion(resource);",
                "-        DependencyInfo info = dependencies.computeIfAbsent(id, k -> new DependencyInfo());",
                "-        info.resource = resource;",
                "-        info.mandatory |= mandatory;",
                "-        info.start |= start;",
                "-        if (info.startLevel > 0 && startLevel > 0) {",
                "-            info.startLevel = Math.min(info.startLevel, startLevel);",
                "+        DependencyInfo info = new DependencyInfo(resource, mandatory, start, startLevel);",
                "+        dependencies.merge(id, info, this::merge);",
                "+    }",
                "+",
                "+    private DependencyInfo merge(DependencyInfo di1, DependencyInfo di2) {",
                "+        DependencyInfo info = new DependencyInfo();",
                "+        if (di1.resource != di2.resource) {",
                "+            Requirement r1 = getFirstIdentityReq(di1.resource);",
                "+            Requirement r2 = getFirstIdentityReq(di2.resource);",
                "+            if (r1 == null) {",
                "+                info.resource = di1.resource;",
                "+            } else if (r2 == null) {",
                "+                info.resource = di2.resource;",
                "+            } else {",
                "+                String id = ResolverUtil.getSymbolicName(di1.resource) + \"/\" + ResolverUtil.getVersion(di1.resource);",
                "+                throw new IllegalStateException(\"Resource \" + id + \" is duplicated on subsystem \" + this.toString() + \". First resource requires \" + (r1 != null ? r1 : \"nothing\") + \" while the second requires \" + (r2 != null ? r2 : \"nothing\"));",
                "+            }",
                "+        } else {",
                "+            info.resource = di1.resource;",
                "+        }",
                "+        info.mandatory = di1.mandatory | di2.mandatory;",
                "+        info.start = di1.start | di2.start;",
                "+        if (di1.startLevel > 0 && di2.startLevel > 0) {",
                "+            info.startLevel = Math.min(di1.startLevel, di2.startLevel);",
                "         } else {",
                "-            info.startLevel = Math.max(info.startLevel, startLevel);",
                "+            info.startLevel = Math.max(di1.startLevel, di2.startLevel);",
                "         }",
                "+        return info;",
                "+    }",
                "+",
                "+    private RequirementImpl getFirstIdentityReq(ResourceImpl resource) {",
                "+        for (Requirement r : resource.getRequirements(null)) {",
                "+            if (IDENTITY_NAMESPACE.equals(r.getNamespace())) {",
                "+                return (RequirementImpl) r;",
                "+            }",
                "+        }",
                "+        return null;",
                "     }",
                "@@ -562,2 +592,12 @@ public class Subsystem extends ResourceImpl {",
                "+        public DependencyInfo() {",
                "+        }",
                "+",
                "+        public DependencyInfo(ResourceImpl resource, boolean mandatory, boolean start, int startLevel) {",
                "+            this.resource = resource;",
                "+            this.mandatory = mandatory;",
                "+            this.start = start;",
                "+            this.startLevel = startLevel;",
                "+        }",
                "+",
                "         @Override",
                "@@ -581,2 +621,9 @@ public class Subsystem extends ResourceImpl {",
                "         }",
                "+",
                "+        @Override",
                "+        public String toString() {",
                "+            return \"DependencyInfo{\" +",
                "+                    \"resource=\" + resource +",
                "+                    '}';",
                "+        }",
                "     }",
                "diff --git a/features/core/src/main/java/org/apache/karaf/features/internal/region/SubsystemResolveContext.java b/features/core/src/main/java/org/apache/karaf/features/internal/region/SubsystemResolveContext.java",
                "index 59e334ce97..c162b81e7b 100644",
                "--- a/features/core/src/main/java/org/apache/karaf/features/internal/region/SubsystemResolveContext.java",
                "+++ b/features/core/src/main/java/org/apache/karaf/features/internal/region/SubsystemResolveContext.java",
                "@@ -249,3 +249,3 @@ public class SubsystemResolveContext extends ResolveContext {",
                "             // Sort caps",
                "-            if (distance != null) {",
                "+            if (distance != null && caps.size() > 1) {",
                "                 caps.sort(candidateComparator);",
                "diff --git a/features/core/src/main/java/org/apache/karaf/features/internal/resolver/ResourceImpl.java b/features/core/src/main/java/org/apache/karaf/features/internal/resolver/ResourceImpl.java",
                "index 0d85843ee0..892cfc79ca 100644",
                "--- a/features/core/src/main/java/org/apache/karaf/features/internal/resolver/ResourceImpl.java",
                "+++ b/features/core/src/main/java/org/apache/karaf/features/internal/resolver/ResourceImpl.java",
                "@@ -19,2 +19,3 @@ package org.apache.karaf.features.internal.resolver;",
                " import java.util.ArrayList;",
                "+import java.util.Collection;",
                " import java.util.List;",
                "@@ -41,4 +42,4 @@ public class ResourceImpl implements Resource {",
                "     public ResourceImpl() {",
                "-        caps = new ArrayList<>();",
                "-        reqs = new ArrayList<>();",
                "+        caps = new ArrayList<>(0);",
                "+        reqs = new ArrayList<>(0);",
                "     }",
                "@@ -46,3 +47,3 @@ public class ResourceImpl implements Resource {",
                "     public ResourceImpl(String name, String type, Version version) {",
                "-        caps = new ArrayList<>();",
                "+        caps = new ArrayList<>(1);",
                "         Map<String, String> dirs = new StringArrayMap<>(0);",
                "@@ -54,3 +55,3 @@ public class ResourceImpl implements Resource {",
                "         caps.add(identity);",
                "-        reqs = new ArrayList<>();",
                "+        reqs = new ArrayList<>(0);",
                "     }",
                "@@ -62,6 +63,7 @@ public class ResourceImpl implements Resource {",
                "-    public void addCapabilities(Iterable<? extends Capability> capabilities) {",
                "+    public void addCapabilities(Collection<? extends Capability> capabilities) {",
                "         for (Capability cap : capabilities) {",
                "-            addCapability(cap);",
                "+            assert cap.getResource() == this;",
                "         }",
                "+        caps.addAll(capabilities);",
                "     }",
                "@@ -73,6 +75,7 @@ public class ResourceImpl implements Resource {",
                "-    public void addRequirements(Iterable<? extends Requirement> requirements) {",
                "+    public void addRequirements(Collection<? extends Requirement> requirements) {",
                "         for (Requirement req : requirements) {",
                "-            addRequirement(req);",
                "+            assert req.getResource() == this;",
                "         }",
                "+        reqs.addAll(requirements);",
                "     }",
                "diff --git a/features/core/src/main/java/org/apache/karaf/features/internal/util/StringArrayMap.java b/features/core/src/main/java/org/apache/karaf/features/internal/util/StringArrayMap.java",
                "index d05b7a2427..e343bc4504 100644",
                "--- a/features/core/src/main/java/org/apache/karaf/features/internal/util/StringArrayMap.java",
                "+++ b/features/core/src/main/java/org/apache/karaf/features/internal/util/StringArrayMap.java",
                "@@ -281,2 +281,49 @@ public class StringArrayMap<V> implements Map<String, V> {",
                "+    public int hashCode() {",
                "+        return Objects.hash(table, size);",
                "+    }",
                "+",
                "+    public boolean equals(Object o) {",
                "+        if (o == this)",
                "+            return true;",
                "+        if (!(o instanceof Map))",
                "+            return false;",
                "+        Map<?,?> m = (Map<?,?>) o;",
                "+        if (m.size() != size())",
                "+            return false;",
                "+        try {",
                "+            for (int i = 0, l = size * 2; i < l; i += 2) {",
                "+                Object key = table[i];",
                "+                Object value = table[i+1];",
                "+                if (value == null) {",
                "+                    if (!(m.get(key)==null && m.containsKey(key)))",
                "+                        return false;",
                "+                } else {",
                "+                    if (!value.equals(m.get(key)))",
                "+                        return false;",
                "+                }",
                "+            }",
                "+        } catch (ClassCastException | NullPointerException unused) {",
                "+            return false;",
                "+        }",
                "+        return true;",
                "+    }",
                "+",
                "+    public String toString() {",
                "+        if (size == 0)",
                "+            return \"{}\";",
                "+",
                "+        StringBuilder sb = new StringBuilder();",
                "+        sb.append('{');",
                "+        for (int i = 0, l = size * 2; i < l; i += 2) {",
                "+            if (i > 0) {",
                "+                sb.append(',').append(' ');",
                "+            }",
                "+            sb.append(table[i]);",
                "+            sb.append('=');",
                "+            sb.append(table[i+1] == this ? \"(this Map)\" : table[i+1]);",
                "+        }",
                "+        return sb.append('}').toString();",
                "+    }",
                "+",
                " }",
                "diff --git a/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/VerifyMojo.java b/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/VerifyMojo.java",
                "index 3d008c9d8c..2ff0a534fa 100644",
                "--- a/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/VerifyMojo.java",
                "+++ b/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/VerifyMojo.java",
                "@@ -498,3 +498,3 @@ public class VerifyMojo extends MojoSupport {",
                "                 throw new MojoExecutionException(\"Feature resolution failed for \" + features",
                "-                        + \"\\nMessage: \" + e.getMessage()",
                "+                        + \"\\nMessage: \" + (e instanceof ResolutionException ? e.getMessage() : e.toString())",
                "                         + \"\\nRepositories: \" + toString(new TreeSet<>(repositories.keySet()))"
            ],
            "changed_files": [
                "features/core/src/main/java/org/apache/karaf/features/internal/model/Bundle.java",
                "features/core/src/main/java/org/apache/karaf/features/internal/region/Subsystem.java",
                "features/core/src/main/java/org/apache/karaf/features/internal/region/SubsystemResolveContext.java",
                "features/core/src/main/java/org/apache/karaf/features/internal/resolver/ResourceImpl.java",
                "features/core/src/main/java/org/apache/karaf/features/internal/util/StringArrayMap.java",
                "tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/VerifyMojo.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5395": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: system",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5395",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b6494ae17709fff6c50df4fd219fec2a880ecfd1",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1508857681,
            "hunks": 83,
            "message": "[KARAF-5023] The config:update command does not handle substituted properties correctly",
            "diff": [
                "diff --git a/config/src/main/java/org/apache/karaf/config/command/ConfigCommandSupport.java b/config/src/main/java/org/apache/karaf/config/command/ConfigCommandSupport.java",
                "index 031f85da64..2043158ec8 100644",
                "--- a/config/src/main/java/org/apache/karaf/config/command/ConfigCommandSupport.java",
                "+++ b/config/src/main/java/org/apache/karaf/config/command/ConfigCommandSupport.java",
                "@@ -19,4 +19,4 @@ package org.apache.karaf.config.command;",
                " import java.util.Arrays;",
                "-import java.util.Dictionary;",
                "+import org.apache.felix.utils.properties.TypedProperties;",
                " import org.apache.karaf.config.core.ConfigRepository;",
                "@@ -53,4 +53,4 @@ public abstract class ConfigCommandSupport implements Action {",
                "     @SuppressWarnings(\"rawtypes\")",
                "-    protected Dictionary<String, Object> getEditedProps() throws Exception {",
                "-        return (Dictionary) this.session.get(PROPERTY_CONFIG_PROPS);",
                "+    protected TypedProperties getEditedProps() throws Exception {",
                "+        return (TypedProperties) this.session.get(PROPERTY_CONFIG_PROPS);",
                "     }",
                "diff --git a/config/src/main/java/org/apache/karaf/config/command/ConfigPropertyCommandSupport.java b/config/src/main/java/org/apache/karaf/config/command/ConfigPropertyCommandSupport.java",
                "index 0caa5f4b5b..533ea933cc 100644",
                "--- a/config/src/main/java/org/apache/karaf/config/command/ConfigPropertyCommandSupport.java",
                "+++ b/config/src/main/java/org/apache/karaf/config/command/ConfigPropertyCommandSupport.java",
                "@@ -18,5 +18,3 @@ package org.apache.karaf.config.command;",
                "-import java.util.Dictionary;",
                "-import java.util.Hashtable;",
                "-",
                "+import org.apache.felix.utils.properties.TypedProperties;",
                " import org.apache.karaf.config.command.completers.ConfigurationCompleter;",
                "@@ -35,3 +33,3 @@ public abstract class ConfigPropertyCommandSupport extends ConfigCommandSupport",
                "     protected Object doExecute() throws Exception {",
                "-        Dictionary<String, Object> props = getEditedProps();",
                "+        TypedProperties props = getEditedProps();",
                "         if (props == null && pid == null) {",
                "@@ -40,3 +38,3 @@ public abstract class ConfigPropertyCommandSupport extends ConfigCommandSupport",
                "             if (props == null) {",
                "-                props = new Hashtable<>();",
                "+                props = new TypedProperties();",
                "             }",
                "@@ -55,4 +53,3 @@ public abstract class ConfigPropertyCommandSupport extends ConfigCommandSupport",
                "      */",
                "-    @SuppressWarnings(\"rawtypes\")",
                "-    protected abstract void propertyAction(Dictionary props);",
                "+    protected abstract void propertyAction(TypedProperties props);",
                "@@ -76,6 +73,11 @@ public abstract class ConfigPropertyCommandSupport extends ConfigCommandSupport",
                "     @Override",
                "-    protected Dictionary<String, Object> getEditedProps() throws Exception {",
                "-        Dictionary<String, Object> props = this.configRepository.getConfigProperties(pid);",
                "-        return (props != null) ? props : super.getEditedProps();",
                "+    protected TypedProperties getEditedProps() throws Exception {",
                "+        if (pid != null) {",
                "+            return this.configRepository.getConfig(pid);",
                "+        }",
                "+        else {",
                "+            return super.getEditedProps();",
                "+        }",
                "     }",
                "+",
                " }",
                "diff --git a/config/src/main/java/org/apache/karaf/config/command/EditCommand.java b/config/src/main/java/org/apache/karaf/config/command/EditCommand.java",
                "index 8b03fc5c37..d3493b4910 100644",
                "--- a/config/src/main/java/org/apache/karaf/config/command/EditCommand.java",
                "+++ b/config/src/main/java/org/apache/karaf/config/command/EditCommand.java",
                "@@ -18,4 +18,3 @@ package org.apache.karaf.config.command;",
                "-import java.util.Dictionary;",
                "-",
                "+import org.apache.felix.utils.properties.TypedProperties;",
                " import org.apache.karaf.config.command.completers.ConfigurationCompleter;",
                "@@ -39,3 +38,3 @@ public class EditCommand extends ConfigCommandSupport {",
                "-    @Option(name = \"--factory\", aliases = {}, description = \"Define this config as a factory config. Will be crearted on calling update\", required = false, multiValued = false)",
                "+    @Option(name = \"--factory\", aliases = {}, description = \"Define this config as a factory config. Will be created on calling update\", required = false, multiValued = false)",
                "     boolean factory;",
                "@@ -73,3 +72,3 @@ public class EditCommand extends ConfigCommandSupport {",
                "-        Dictionary props = this.configRepository.getConfigProperties(pid);",
                "+        TypedProperties props = this.configRepository.getConfig(pid);",
                "         this.session.put(PROPERTY_CONFIG_PID, pid);",
                "diff --git a/config/src/main/java/org/apache/karaf/config/command/PropAppendCommand.java b/config/src/main/java/org/apache/karaf/config/command/PropAppendCommand.java",
                "index f0211465c6..6b004315ac 100644",
                "--- a/config/src/main/java/org/apache/karaf/config/command/PropAppendCommand.java",
                "+++ b/config/src/main/java/org/apache/karaf/config/command/PropAppendCommand.java",
                "@@ -18,4 +18,5 @@ package org.apache.karaf.config.command;",
                "-import java.util.Dictionary;",
                "+import java.util.Collection;",
                "+import org.apache.felix.utils.properties.TypedProperties;",
                " import org.apache.karaf.config.command.completers.ConfigurationPropertyCompleter;",
                "@@ -39,3 +40,3 @@ public class PropAppendCommand extends ConfigPropertyCommandSupport {",
                "     @Override",
                "-    public void propertyAction(Dictionary props) {",
                "+    public void propertyAction(TypedProperties props) {",
                "         final Object currentValue = props.get(prop);",
                "@@ -45,2 +46,4 @@ public class PropAppendCommand extends ConfigPropertyCommandSupport {",
                "             props.put(prop, currentValue + value);",
                "+        } else if (currentValue instanceof Collection) {",
                "+            ((Collection) currentValue).add(value);",
                "         } else {",
                "diff --git a/config/src/main/java/org/apache/karaf/config/command/PropDelCommand.java b/config/src/main/java/org/apache/karaf/config/command/PropDelCommand.java",
                "index e416cf6786..528c97217d 100644",
                "--- a/config/src/main/java/org/apache/karaf/config/command/PropDelCommand.java",
                "+++ b/config/src/main/java/org/apache/karaf/config/command/PropDelCommand.java",
                "@@ -18,4 +18,3 @@ package org.apache.karaf.config.command;",
                "-import java.util.Dictionary;",
                "-",
                "+import org.apache.felix.utils.properties.TypedProperties;",
                " import org.apache.karaf.shell.api.action.Argument;",
                "@@ -24,3 +23,2 @@ import org.apache.karaf.shell.api.action.lifecycle.Service;",
                "-",
                " @Command(scope = \"config\", name = \"property-delete\", description = \"Deletes a property from the configuration being edited.\")",
                "@@ -32,5 +30,4 @@ public class PropDelCommand extends ConfigPropertyCommandSupport {",
                "-    @SuppressWarnings(\"rawtypes\")",
                "     @Override",
                "-    public void propertyAction(Dictionary props) {",
                "+    public void propertyAction(TypedProperties props) {",
                "         props.remove(prop);",
                "diff --git a/config/src/main/java/org/apache/karaf/config/command/PropGetCommand.java b/config/src/main/java/org/apache/karaf/config/command/PropGetCommand.java",
                "index 4656e57aaa..48d453ea8d 100644",
                "--- a/config/src/main/java/org/apache/karaf/config/command/PropGetCommand.java",
                "+++ b/config/src/main/java/org/apache/karaf/config/command/PropGetCommand.java",
                "@@ -18,3 +18,3 @@ package org.apache.karaf.config.command;",
                "-",
                "+import org.apache.felix.utils.properties.TypedProperties;",
                " import org.apache.karaf.config.command.completers.ConfigurationPropertyCompleter;",
                "@@ -23,5 +23,6 @@ import org.apache.karaf.shell.api.action.Command;",
                " import org.apache.karaf.shell.api.action.Completion;",
                "+import org.apache.karaf.shell.api.action.Option;",
                " import org.apache.karaf.shell.api.action.lifecycle.Service;",
                "-import java.util.Dictionary;",
                "+import java.util.List;",
                "@@ -31,2 +32,5 @@ public class PropGetCommand extends ConfigPropertyCommandSupport {",
                "+    @Option(name = \"--raw\")",
                "+    boolean raw;",
                "+",
                "     @Argument(index = 0, name = \"property\", description = \"The name of the property to get value for\", required = true, multiValued = false)",
                "@@ -35,6 +39,12 @@ public class PropGetCommand extends ConfigPropertyCommandSupport {",
                "-    @SuppressWarnings(\"rawtypes\")",
                "     @Override",
                "-    public void propertyAction(Dictionary props) {",
                "-        System.out.println(props.get(prop));",
                "+    public void propertyAction(TypedProperties props) {",
                "+        if (raw) {",
                "+            List<String> strings = props.getRaw(prop);",
                "+            for (String s : strings) {",
                "+                System.out.println(s);",
                "+            }",
                "+        } else {",
                "+            System.out.println(displayValue(props.get(prop)));",
                "+        }",
                "     }",
                "diff --git a/config/src/main/java/org/apache/karaf/config/command/PropListCommand.java b/config/src/main/java/org/apache/karaf/config/command/PropListCommand.java",
                "index 015e118b07..60b2209144 100644",
                "--- a/config/src/main/java/org/apache/karaf/config/command/PropListCommand.java",
                "+++ b/config/src/main/java/org/apache/karaf/config/command/PropListCommand.java",
                "@@ -18,6 +18,11 @@ package org.apache.karaf.config.command;",
                "-import java.util.Dictionary;",
                "-import java.util.Enumeration;",
                "+import java.io.IOException;",
                "+import java.io.StringReader;",
                "+import java.io.StringWriter;",
                "+import java.util.Map;",
                "+import java.util.TreeMap;",
                "+import org.apache.felix.utils.properties.TypedProperties;",
                " import org.apache.karaf.shell.api.action.Command;",
                "+import org.apache.karaf.shell.api.action.Option;",
                " import org.apache.karaf.shell.api.action.lifecycle.Service;",
                "@@ -28,8 +33,31 @@ public class PropListCommand extends ConfigPropertyCommandSupport {",
                "-    @SuppressWarnings(\"rawtypes\")",
                "+    @Option(name = \"--raw\")",
                "+    boolean raw;",
                "+",
                "     @Override",
                "-    public void propertyAction(Dictionary props) {",
                "-        for (Enumeration e = props.keys(); e.hasMoreElements(); ) {",
                "-            Object key = e.nextElement();",
                "-            System.out.println(\"   \" + key + \" = \" + props.get(key));",
                "+    public void propertyAction(TypedProperties props) {",
                "+        if (raw) {",
                "+            try {",
                "+                StringWriter sw = new StringWriter();",
                "+                props.save(sw);",
                "+                System.out.print(sw.toString());",
                "+            } catch (IOException e) {",
                "+                throw new RuntimeException(e);",
                "+            }",
                "+        }",
                "+        else",
                "+        {",
                "+            try {",
                "+                StringWriter sw = new StringWriter();",
                "+                props.save(sw);",
                "+                TypedProperties p = new TypedProperties();",
                "+                p.load(new StringReader(sw.toString()));",
                "+                props = p;",
                "+            } catch (IOException e) {",
                "+                // Ignore",
                "+            }",
                "+            Map<String, Object> sortedProps = new TreeMap<>(props);",
                "+            for (Map.Entry<String, Object> entry : sortedProps.entrySet()) {",
                "+                System.out.println(\"   \" + entry.getKey() + \" = \" + displayValue(entry.getValue()));",
                "+            }",
                "         }",
                "diff --git a/config/src/main/java/org/apache/karaf/config/command/PropSetCommand.java b/config/src/main/java/org/apache/karaf/config/command/PropSetCommand.java",
                "index b4c3f859f4..74eb2e89e4 100644",
                "--- a/config/src/main/java/org/apache/karaf/config/command/PropSetCommand.java",
                "+++ b/config/src/main/java/org/apache/karaf/config/command/PropSetCommand.java",
                "@@ -18,4 +18,8 @@ package org.apache.karaf.config.command;",
                "+import java.io.IOException;",
                "+import java.io.StringReader;",
                "+import java.io.StringWriter;",
                " import java.util.Dictionary;",
                "+import org.apache.felix.utils.properties.TypedProperties;",
                " import org.apache.karaf.config.command.completers.ConfigurationPropertyCompleter;",
                "@@ -37,7 +41,7 @@ public class PropSetCommand extends ConfigPropertyCommandSupport {",
                "-    @SuppressWarnings({\"unchecked\", \"rawtypes\"})",
                "     @Override",
                "-    public void propertyAction(Dictionary props) {",
                "+    public void propertyAction(TypedProperties props) {",
                "         props.put(prop, value);",
                "     }",
                "+",
                " }",
                "diff --git a/config/src/main/java/org/apache/karaf/config/command/UpdateCommand.java b/config/src/main/java/org/apache/karaf/config/command/UpdateCommand.java",
                "index 3e36694160..a908c8cd66 100644",
                "--- a/config/src/main/java/org/apache/karaf/config/command/UpdateCommand.java",
                "+++ b/config/src/main/java/org/apache/karaf/config/command/UpdateCommand.java",
                "@@ -18,4 +18,3 @@ package org.apache.karaf.config.command;",
                "-import java.util.Dictionary;",
                "-",
                "+import org.apache.felix.utils.properties.TypedProperties;",
                " import org.apache.karaf.shell.api.action.Command;",
                "@@ -30,3 +29,3 @@ public class UpdateCommand extends ConfigCommandSupport {",
                "     protected Object doExecute() throws Exception {",
                "-        Dictionary props = getEditedProps();",
                "+        TypedProperties props = getEditedProps();",
                "         if (props == null) {",
                "diff --git a/config/src/main/java/org/apache/karaf/config/command/completers/ConfigurationCompleter.java b/config/src/main/java/org/apache/karaf/config/command/completers/ConfigurationCompleter.java",
                "index b0cef13df9..19cc0df7bb 100644",
                "--- a/config/src/main/java/org/apache/karaf/config/command/completers/ConfigurationCompleter.java",
                "+++ b/config/src/main/java/org/apache/karaf/config/command/completers/ConfigurationCompleter.java",
                "@@ -79,3 +79,3 @@ public class ConfigurationCompleter implements Completer, ConfigurationListener",
                "         for (Configuration config : configs) {",
                "-            pids.add(config.getPid());",
                "+            pids.add(config.getPid() + \" \");",
                "         }",
                "@@ -97,5 +97,5 @@ public class ConfigurationCompleter implements Completer, ConfigurationListener",
                "         if (configurationEvent.getType() == ConfigurationEvent.CM_DELETED) {",
                "-            delegate.getStrings().remove(pid);",
                "+            delegate.getStrings().remove(pid + \" \");",
                "         } else if (configurationEvent.getType() == ConfigurationEvent.CM_UPDATED) {",
                "-            delegate.getStrings().add(pid);",
                "+            delegate.getStrings().add(pid + \" \");",
                "         }",
                "diff --git a/config/src/main/java/org/apache/karaf/config/core/ConfigRepository.java b/config/src/main/java/org/apache/karaf/config/core/ConfigRepository.java",
                "index 55cb1b027c..556cc17078 100644",
                "--- a/config/src/main/java/org/apache/karaf/config/core/ConfigRepository.java",
                "+++ b/config/src/main/java/org/apache/karaf/config/core/ConfigRepository.java",
                "@@ -19,4 +19,5 @@ package org.apache.karaf.config.core;",
                " import java.io.IOException;",
                "-import java.util.Dictionary;",
                "+import java.util.Map;",
                "+import org.apache.felix.utils.properties.TypedProperties;",
                " import org.osgi.framework.InvalidSyntaxException;",
                "@@ -26,10 +27,5 @@ public interface ConfigRepository {",
                "-    /**",
                "-     * Save config to storage or ConfigurationAdmin.",
                "-     *",
                "-     * @param pid the configuration PID.",
                "-     * @param props the dictionary used to update the configuration.",
                "-     * @throws IOException in case of update failure.",
                "-     */",
                "-    void update(String pid, Dictionary<String, Object> props) throws IOException;",
                "+    ConfigurationAdmin getConfigAdmin();",
                "+",
                "+    TypedProperties getConfig(String pid) throws IOException, InvalidSyntaxException;",
                "@@ -37,16 +33,8 @@ public interface ConfigRepository {",
                "-    Dictionary<String, Object> getConfigProperties(String pid) throws IOException, InvalidSyntaxException;",
                "+    void update(String pid, Map<String, Object> properties) throws IOException;",
                "-    ConfigurationAdmin getConfigAdmin();",
                "+    String createFactoryConfiguration(String factoryPid, Map<String, Object> properties) throws IOException;",
                "-    /**",
                "-     * Create a factory based configuration.",
                "-     *",
                "-     * @param factoryPid the configuration factory PID.",
                "-     * @param properties the new properties to set in the configuration.",
                "-     * @return the created configuration PID.",
                "-     */",
                "-    String createFactoryConfiguration(String factoryPid, Dictionary<String, Object> properties);",
                "+    String createFactoryConfiguration(String factoryPid, String alias, Map<String, Object> properties) throws IOException;",
                "-    String createFactoryConfiguration(String factoryPid, String alias, Dictionary<String, Object> properties);",
                " }",
                "diff --git a/config/src/main/java/org/apache/karaf/config/core/impl/ConfigMBeanImpl.java b/config/src/main/java/org/apache/karaf/config/core/impl/ConfigMBeanImpl.java",
                "index 3a93f9f846..de142c82b3 100644",
                "--- a/config/src/main/java/org/apache/karaf/config/core/impl/ConfigMBeanImpl.java",
                "+++ b/config/src/main/java/org/apache/karaf/config/core/impl/ConfigMBeanImpl.java",
                "@@ -20,3 +20,2 @@ import java.util.Arrays;",
                " import java.util.Dictionary;",
                "-import java.util.Enumeration;",
                " import java.util.HashMap;",
                "@@ -31,2 +30,3 @@ import javax.management.StandardMBean;",
                "+import org.apache.felix.utils.properties.TypedProperties;",
                " import org.apache.karaf.config.core.ConfigMBean;",
                "@@ -34,2 +34,3 @@ import org.apache.karaf.config.core.ConfigRepository;",
                " import org.apache.karaf.util.StreamUtils;",
                "+import org.osgi.framework.InvalidSyntaxException;",
                " import org.osgi.service.cm.Configuration;",
                "@@ -56,10 +57,4 @@ public class ConfigMBeanImpl extends StandardMBean implements ConfigMBean {",
                "     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })",
                "-    private Dictionary<String, Object> getConfigProperties(String pid) throws IOException {",
                "-        Configuration configuration = getConfiguration(pid);",
                "-",
                "-        Dictionary<String, Object> dictionary = configuration.getProperties();",
                "-        if (dictionary == null) {",
                "-            dictionary = new Hashtable(new java.util.Properties());",
                "-        }",
                "-        return dictionary;",
                "+    private TypedProperties getConfigProperties(String pid) throws IOException, InvalidSyntaxException {",
                "+        return configRepo.getConfig(pid);",
                "     }",
                "@@ -83,3 +78,3 @@ public class ConfigMBeanImpl extends StandardMBean implements ConfigMBean {",
                "         try {",
                "-            configRepo.update(pid, new Hashtable<>());",
                "+            configRepo.update(pid, new TypedProperties());",
                "         } catch (Exception e) {",
                "@@ -132,9 +127,6 @@ public class ConfigMBeanImpl extends StandardMBean implements ConfigMBean {",
                "         try {",
                "-            Dictionary dictionary = getConfigProperties(pid);",
                "-",
                "+            TypedProperties dictionary = getConfigProperties(pid);",
                "             Map<String, String> propertiesMap = new HashMap<>();",
                "-            for (Enumeration e = dictionary.keys(); e.hasMoreElements(); ) {",
                "-                Object key = e.nextElement();",
                "-                Object value = dictionary.get(key);",
                "-                propertiesMap.put(key.toString(), value.toString());",
                "+            for (Map.Entry<String, Object> e : dictionary.entrySet()) {",
                "+                propertiesMap.put(e.getKey(), displayValue(e.getValue().toString()));",
                "             }",
                "@@ -146,2 +138,12 @@ public class ConfigMBeanImpl extends StandardMBean implements ConfigMBean {",
                "+    protected String displayValue(Object value) {",
                "+        if (value == null) {",
                "+            return \"<null>\";",
                "+        }",
                "+        if (value.getClass().isArray()) {",
                "+            return Arrays.toString((Object[]) value);",
                "+        }",
                "+        return value.toString();",
                "+    }",
                "+",
                "     @Override",
                "@@ -149,3 +151,3 @@ public class ConfigMBeanImpl extends StandardMBean implements ConfigMBean {",
                "         try {",
                "-            Dictionary<String, Object> dictionary = getConfigProperties(pid);",
                "+            TypedProperties dictionary = getConfigProperties(pid);",
                "             dictionary.remove(key);",
                "@@ -160,3 +162,3 @@ public class ConfigMBeanImpl extends StandardMBean implements ConfigMBean {",
                "         try {",
                "-            Dictionary<String, Object> dictionary = getConfigProperties(pid);",
                "+            TypedProperties dictionary = getConfigProperties(pid);",
                "             Object currentValue = dictionary.get(key);",
                "@@ -178,3 +180,3 @@ public class ConfigMBeanImpl extends StandardMBean implements ConfigMBean {",
                "         try {",
                "-            Dictionary<String, Object> dictionary = getConfigProperties(pid);",
                "+            TypedProperties dictionary = getConfigProperties(pid);",
                "             dictionary.put(key, value);",
                "@@ -189,3 +191,3 @@ public class ConfigMBeanImpl extends StandardMBean implements ConfigMBean {",
                "         try {",
                "-            Dictionary<String, Object> dictionary = getConfigProperties(pid);",
                "+            TypedProperties dictionary = getConfigProperties(pid);",
                "             Object value = dictionary.get(key);",
                "@@ -203,7 +205,5 @@ public class ConfigMBeanImpl extends StandardMBean implements ConfigMBean {",
                "         try {",
                "-            if (properties == null) {",
                "-                properties = new HashMap<>();",
                "-            }",
                "-            Dictionary<String, Object> dictionary = toDictionary(properties);",
                "-            configRepo.update(pid, dictionary);",
                "+            TypedProperties props = configRepo.getConfig(pid);",
                "+            props.putAll(properties);",
                "+            configRepo.update(pid, props);",
                "         } catch (Exception e) {",
                "@@ -228,6 +228,10 @@ public class ConfigMBeanImpl extends StandardMBean implements ConfigMBean {",
                " \t@Override",
                "-\tpublic String createFactoryConfiguration(String factoryPid,",
                "-\t\t\tMap<String, String> properties) throws MBeanException {",
                "-\t\tDictionary<String, Object> dict = toDictionary(properties);",
                "-\t\treturn configRepo.createFactoryConfiguration(factoryPid, dict);",
                "+\tpublic String createFactoryConfiguration(String factoryPid, Map<String, String> properties) throws MBeanException {",
                "+        try {",
                "+            TypedProperties props = new TypedProperties();",
                "+            props.putAll(properties);",
                "+            return configRepo.createFactoryConfiguration(factoryPid, props);",
                "+        } catch (Exception e) {",
                "+            throw new MBeanException(null, e.toString());",
                "+        }",
                " \t}",
                "diff --git a/config/src/main/java/org/apache/karaf/config/core/impl/ConfigRepositoryImpl.java b/config/src/main/java/org/apache/karaf/config/core/impl/ConfigRepositoryImpl.java",
                "index 5d3d93ffed..b2d05c8395 100644",
                "--- a/config/src/main/java/org/apache/karaf/config/core/impl/ConfigRepositoryImpl.java",
                "+++ b/config/src/main/java/org/apache/karaf/config/core/impl/ConfigRepositoryImpl.java",
                "@@ -20,3 +20,2 @@ import java.io.File;",
                " import java.io.IOException;",
                "-import java.io.UncheckedIOException;",
                " import java.net.MalformedURLException;",
                "@@ -25,3 +24,2 @@ import java.net.URISyntaxException;",
                " import java.net.URL;",
                "-import java.util.ArrayList;",
                " import java.util.Dictionary;",
                "@@ -29,5 +27,5 @@ import java.util.Enumeration;",
                " import java.util.Hashtable;",
                "-import java.util.UUID;",
                "+import java.util.Map;",
                "-import org.apache.felix.utils.properties.Properties;",
                "+import org.apache.felix.utils.properties.TypedProperties;",
                " import org.apache.karaf.config.core.ConfigRepository;",
                "@@ -47,11 +45,5 @@ public class ConfigRepositoryImpl implements ConfigRepository {",
                "     private ConfigurationAdmin configAdmin;",
                "-    private File storage;",
                "     public ConfigRepositoryImpl(ConfigurationAdmin configAdmin) {",
                "-        this(configAdmin, null);",
                "-    }",
                "-",
                "-    public ConfigRepositoryImpl(ConfigurationAdmin configAdmin, File storage) {",
                "         this.configAdmin = configAdmin;",
                "-        this.storage = storage;",
                "     }",
                "@@ -62,10 +54,22 @@ public class ConfigRepositoryImpl implements ConfigRepository {",
                "     @Override",
                "-    public void update(String pid, Dictionary<String, Object> properties) throws IOException {",
                "-        LOGGER.trace(\"Update configuration {}\", pid);",
                "-        Configuration cfg = configAdmin.getConfiguration(pid, null);",
                "-        cfg.update(properties);",
                "+    public void update(String pid, Map<String, Object> properties) throws IOException {",
                "         try {",
                "-            updateStorage(pid, properties);",
                "-        } catch (Exception e) {",
                "-            LOGGER.warn(\"Can't update cfg file\", e);",
                "+            LOGGER.trace(\"Updating configuration {}\", pid);",
                "+            Configuration cfg = configAdmin.getConfiguration(pid, null);",
                "+            Dictionary<String, Object> dict = cfg.getProperties();",
                "+            TypedProperties props = new TypedProperties();",
                "+            File file = getCfgFileFromProperties(dict);",
                "+            if (file != null) {",
                "+                props.load(file);",
                "+                props.putAll(properties);",
                "+                props.save(file);",
                "+                props.clear();",
                "+                props.load(file);",
                "+                props.put(FILEINSTALL_FILE_NAME, file.toURI().toString());",
                "+            } else {",
                "+                props.putAll(properties);",
                "+            }",
                "+            cfg.update(new Hashtable<>(props));",
                "+        } catch (URISyntaxException e) {",
                "+            throw new IOException(\"Error updating config\", e);",
                "         }",
                "@@ -78,14 +82,5 @@ public class ConfigRepositoryImpl implements ConfigRepository {",
                "     public void delete(String pid) throws Exception {",
                "-        LOGGER.trace(\"Delete configuration {}\", pid);",
                "+        LOGGER.trace(\"Deleting configuration {}\", pid);",
                "         Configuration configuration = configAdmin.getConfiguration(pid, null);",
                "-        File cfgFile = getCfgFileFromProperties(configuration.getProperties());",
                "         configuration.delete();",
                "-        try {",
                "-            if (cfgFile != null) {",
                "-                LOGGER.trace(\"Delete {}\", cfgFile.getName());",
                "-                cfgFile.delete();",
                "-            }",
                "-        } catch (Exception e) {",
                "-            LOGGER.warn(\"Can't delete cfg file\", e);",
                "-        }",
                "     }",
                "@@ -93,74 +88,24 @@ public class ConfigRepositoryImpl implements ConfigRepository {",
                "     private File getCfgFileFromProperties(Dictionary<String, Object> properties) throws URISyntaxException, MalformedURLException {",
                "-        File cfgFile = null;",
                "         if (properties != null) {",
                "             Object val = properties.get(FILEINSTALL_FILE_NAME);",
                "-            if (val instanceof URL) {",
                "-                cfgFile = new File(((URL) val).toURI());",
                "-            }",
                "-            if (val instanceof URI) {",
                "-                cfgFile = new File((URI) val);",
                "-            }",
                "-            if (val instanceof String) {",
                "-                cfgFile = new File(new URL((String) val).toURI());",
                "-            }",
                "+            return getCfgFileFromProperty(val);",
                "         }",
                "-        return cfgFile;",
                "+        return null;",
                "     }",
                "-    protected void updateStorage(String pid, Dictionary<String, Object> props) throws IOException {",
                "-        if (storage != null) {",
                "-            Configuration cfg = configAdmin.getConfiguration(pid, null);",
                "-            // Initialize cfgFile with default location. Value gets overwritten when the existing configuration references a correct location.",
                "-            File cfgFile = new File(storage, pid + \".cfg\");",
                "-            if (cfg != null) {",
                "-                Dictionary<String, Object> oldProps = cfg.getProperties();",
                "-                if (oldProps != null && oldProps.get(FILEINSTALL_FILE_NAME) != null) {",
                "-                    try {",
                "-                        cfgFile = getCfgFileFromProperties(oldProps);",
                "-                        if (cfgFile == null) {",
                "-                            throw new IOException(\"The configuration value '\" + oldProps.get(FILEINSTALL_FILE_NAME)",
                "-                                    + \"' for '\" + FILEINSTALL_FILE_NAME + \"' does not represent a valid file location.\");",
                "-                        }",
                "-                    } catch (URISyntaxException | MalformedURLException e) {",
                "-                        throw new IOException(e);",
                "-                    }",
                "-                }",
                "-            }",
                "-            LOGGER.trace(\"Update {}\", cfgFile.getName());",
                "-            // update the cfg file",
                "-            Properties properties = new Properties(cfgFile);",
                "-            for (Enumeration<String> keys = props.keys(); keys.hasMoreElements(); ) {",
                "-                String key = keys.nextElement();",
                "-                if (!Constants.SERVICE_PID.equals(key)",
                "-                        && !ConfigurationAdmin.SERVICE_FACTORYPID.equals(key)",
                "-                        && !FILEINSTALL_FILE_NAME.equals(key)) {",
                "-                    if (props.get(key) != null) {",
                "-                        properties.put(key, props.get(key).toString());",
                "-                    }",
                "-                }",
                "-            }",
                "-            // remove \"removed\" properties from the cfg file",
                "-            ArrayList<String> propertiesToRemove = new ArrayList<>();",
                "-            for (String key : properties.keySet()) {",
                "-                if (props.get(key) == null",
                "-                        && !Constants.SERVICE_PID.equals(key)",
                "-                        && !ConfigurationAdmin.SERVICE_FACTORYPID.equals(key)",
                "-                        && !FILEINSTALL_FILE_NAME.equals(key)) {",
                "-                    propertiesToRemove.add(key);",
                "-                }",
                "-            }",
                "-            for (String key : propertiesToRemove) {",
                "-                properties.remove(key);",
                "-            }",
                "-            // save the cfg file",
                "-            storage.mkdirs();",
                "-            properties.save();",
                "+    private File getCfgFileFromProperty(Object val) throws URISyntaxException, MalformedURLException {",
                "+        if (val instanceof URL) {",
                "+            return new File(((URL) val).toURI());",
                "+        }",
                "+        if (val instanceof URI) {",
                "+            return new File((URI) val);",
                "+        }",
                "+        if (val instanceof String) {",
                "+            return new File(new URL((String) val).toURI());",
                "         }",
                "+        return null;",
                "     }",
                "-    /* (non-Javadoc)",
                "-     * @see org.apache.karaf.shell.config.impl.ConfigRepository#getConfigProperties(java.lang.String)",
                "-     */",
                "     @Override",
                "-    public Dictionary<String, Object> getConfigProperties(String pid) throws IOException, InvalidSyntaxException {",
                "+    public TypedProperties getConfig(String pid) throws IOException, InvalidSyntaxException {",
                "         if (pid != null && configAdmin != null) {",
                "@@ -168,4 +113,24 @@ public class ConfigRepositoryImpl implements ConfigRepository {",
                "             if (configuration != null) {",
                "+                TypedProperties tp = new TypedProperties();",
                "                 Dictionary<String, Object> props = configuration.getProperties();",
                "-                return (props != null) ? props : new Hashtable<>();",
                "+                if (props != null) {",
                "+                    File file;",
                "+                    try {",
                "+                        file = getCfgFileFromProperties(props);",
                "+                    } catch (URISyntaxException e) {",
                "+                        throw new IOException(e);",
                "+                    }",
                "+                    if (file != null) {",
                "+                        tp.load(file);",
                "+                    } else {",
                "+                        for (Enumeration<String> e = props.keys(); e.hasMoreElements();) {",
                "+                            String key = e.nextElement();",
                "+                            Object val = props.get(key);",
                "+                            tp.put(key, val);",
                "+                        }",
                "+                        tp.remove( Constants.SERVICE_PID );",
                "+                        tp.remove( ConfigurationAdmin.SERVICE_FACTORYPID );",
                "+                    }",
                "+                }",
                "+                return tp;",
                "             }",
                "@@ -176,4 +141,4 @@ public class ConfigRepositoryImpl implements ConfigRepository {",
                "     @Override",
                "-    public ConfigurationAdmin getConfigAdmin() {",
                "-        return configAdmin;",
                "+    public String createFactoryConfiguration(String factoryPid, Map<String, Object> properties) throws IOException {",
                "+        return createFactoryConfiguration(factoryPid, null, properties);",
                "     }",
                "@@ -181,4 +146,6 @@ public class ConfigRepositoryImpl implements ConfigRepository {",
                "     @Override",
                "-    public String createFactoryConfiguration(String factoryPid, Dictionary<String, Object> properties) {",
                "-        return createFactoryConfiguration(factoryPid, null, properties);",
                "+    public String createFactoryConfiguration(String factoryPid, String alias, Map<String, Object> properties) throws IOException {",
                "+        Configuration config = configAdmin.createFactoryConfiguration(factoryPid, \"?\");",
                "+        config.update(new Hashtable<>(properties));",
                "+        return config.getPid();",
                "     }",
                "@@ -186,28 +153,4 @@ public class ConfigRepositoryImpl implements ConfigRepository {",
                "     @Override",
                "-    public String createFactoryConfiguration(String factoryPid, String alias, Dictionary<String, Object> properties) {",
                "-        try {",
                "-            Configuration config = configAdmin.createFactoryConfiguration(factoryPid, null);",
                "-            if (storage != null) {",
                "-                // Check, whether a file location is already provided.",
                "-                if (properties.get(FILEINSTALL_FILE_NAME) == null) {",
                "-                    // Create a synthetic unique alias for the factory",
                "-                    // configuration when it is unspecified.",
                "-                    if (alias == null) {",
                "-                        // Felix Fileinstall uses the hyphen as separator",
                "-                        // between factoryPid and alias. For safety reasons, all",
                "-                        // hyphens are removed from the generated UUID.",
                "-                        alias = UUID.randomUUID().toString().replaceAll(\"-\", \"\");",
                "-                    }",
                "-                    String cfgFileName = factoryPid + \"-\" + alias + \".cfg\";",
                "-                    File cfgFile = new File(storage, cfgFileName);",
                "-                    properties.put(FILEINSTALL_FILE_NAME, cfgFile.getCanonicalFile().toURI().toString());",
                "-                }",
                "-            }",
                "-            config.update(properties);",
                "-            String pid = config.getPid();",
                "-            updateStorage(pid, properties);",
                "-            return pid;",
                "-        } catch (IOException e) {",
                "-            throw new UncheckedIOException(e);",
                "-        }",
                "+    public ConfigurationAdmin getConfigAdmin() {",
                "+        return configAdmin;",
                "     }",
                "diff --git a/config/src/main/java/org/apache/karaf/config/core/impl/MetaServiceCaller.java b/config/src/main/java/org/apache/karaf/config/core/impl/MetaServiceCaller.java",
                "index 5401df0d3d..0db2a79d00 100644",
                "--- a/config/src/main/java/org/apache/karaf/config/core/impl/MetaServiceCaller.java",
                "+++ b/config/src/main/java/org/apache/karaf/config/core/impl/MetaServiceCaller.java",
                "@@ -23,4 +23,2 @@ import org.osgi.service.metatype.MetaTypeInformation;",
                " import org.osgi.service.metatype.MetaTypeService;",
                "-import org.slf4j.Logger;",
                "-import org.slf4j.LoggerFactory;",
                "diff --git a/config/src/main/java/org/apache/karaf/config/core/impl/osgi/Activator.java b/config/src/main/java/org/apache/karaf/config/core/impl/osgi/Activator.java",
                "index cef952774e..2138dad39b 100644",
                "--- a/config/src/main/java/org/apache/karaf/config/core/impl/osgi/Activator.java",
                "+++ b/config/src/main/java/org/apache/karaf/config/core/impl/osgi/Activator.java",
                "@@ -25,8 +25,4 @@ import org.apache.karaf.util.tracker.annotation.RequireService;",
                " import org.apache.karaf.util.tracker.annotation.Services;",
                "-import org.osgi.service.cm.Configuration;",
                " import org.osgi.service.cm.ConfigurationAdmin;",
                "-import java.io.File;",
                "-import java.io.IOException;",
                "-",
                " @Services(",
                "@@ -43,5 +39,3 @@ public class Activator extends BaseActivator {",
                "-        File persistenceStorage = getPersistenceStorage(configurationAdmin);",
                "-",
                "-        ConfigRepository configRepository = new ConfigRepositoryImpl(configurationAdmin, persistenceStorage);",
                "+        ConfigRepository configRepository = new ConfigRepositoryImpl(configurationAdmin);",
                "         register(ConfigRepository.class, configRepository);",
                "@@ -53,11 +47,2 @@ public class Activator extends BaseActivator {",
                "-    private File getPersistenceStorage(ConfigurationAdmin configurationAdmin) throws IOException {",
                "-        Configuration configuration = configurationAdmin.getConfiguration(\"org.apache.karaf.config\");",
                "-        if(configuration.getProperties() == null){",
                "-            return new File(System.getProperty(\"karaf.etc\"));",
                "-        }",
                "-        String storage = (String) configuration.getProperties().get(\"storage\");",
                "-        return storage == null || storage.trim().isEmpty() ? null : new File(storage);",
                "-    }",
                "-",
                " }"
            ],
            "changed_files": [
                "config/src/main/java/org/apache/karaf/config/command/ConfigCommandSupport.java",
                "config/src/main/java/org/apache/karaf/config/command/ConfigPropertyCommandSupport.java",
                "config/src/main/java/org/apache/karaf/config/command/EditCommand.java",
                "config/src/main/java/org/apache/karaf/config/command/PropAppendCommand.java",
                "config/src/main/java/org/apache/karaf/config/command/PropDelCommand.java",
                "config/src/main/java/org/apache/karaf/config/command/PropGetCommand.java",
                "config/src/main/java/org/apache/karaf/config/command/PropListCommand.java",
                "config/src/main/java/org/apache/karaf/config/command/PropSetCommand.java",
                "config/src/main/java/org/apache/karaf/config/command/UpdateCommand.java",
                "config/src/main/java/org/apache/karaf/config/command/completers/ConfigurationCompleter.java",
                "config/src/main/java/org/apache/karaf/config/core/ConfigRepository.java",
                "config/src/main/java/org/apache/karaf/config/core/impl/ConfigMBeanImpl.java",
                "config/src/main/java/org/apache/karaf/config/core/impl/ConfigRepositoryImpl.java",
                "config/src/main/java/org/apache/karaf/config/core/impl/MetaServiceCaller.java",
                "config/src/main/java/org/apache/karaf/config/core/impl/osgi/Activator.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5023": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: service",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5023",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "235d8db2f1a3acc17536a06bec1d5dfacc6105d1",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1509030561,
            "hunks": 2,
            "message": "[KARAF-5430] Upgrade to Spring 4.0.9.RELEASE & 4.3.12.RELEASE",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 3f4affe1fa..239171b4d9 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -276,6 +276,6 @@",
                "         <spring32.version>3.2.18.RELEASE_1</spring32.version>",
                "-        <spring40.version>4.0.7.RELEASE_3</spring40.version>",
                "+        <spring40.version>4.0.9.RELEASE_1</spring40.version>",
                "         <spring41.version>4.1.9.RELEASE_1</spring41.version>",
                "         <spring42.version>4.2.9.RELEASE_1</spring42.version>",
                "-        <spring43.version>4.3.10.RELEASE_1</spring43.version>",
                "+        <spring43.version>4.3.12.RELEASE_1</spring43.version>",
                "         <spring.security31.version>3.1.4.RELEASE</spring.security31.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5430": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.1.3",
                "karaf-4.1.4",
                "karaf-4.1.5",
                "karaf-4.1.6",
                "karaf-4.1.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: release",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5430",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e8433bc15e3fafed664532b20dbe6b7ef700762e",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1510891683,
            "hunks": 2,
            "message": "[KARAF-5487]one more file to change",
            "diff": [
                "diff --git a/assemblies/features/base/src/main/resources/resources/etc/org.apache.karaf.shell.cfg b/assemblies/features/base/src/main/resources/resources/etc/org.apache.karaf.shell.cfg",
                "index dff3171f21..4fc8efc869 100644",
                "--- a/assemblies/features/base/src/main/resources/resources/etc/org.apache.karaf.shell.cfg",
                "+++ b/assemblies/features/base/src/main/resources/resources/etc/org.apache.karaf.shell.cfg",
                "@@ -53,6 +53,5 @@ hostKeyFormat = simple",
                " #",
                "-# Role name used for SSH access authorization",
                "-# If not set, this defaults to the ${karaf.admin.role} configured in etc/system.properties",
                "+# shRole defines the role required to access the console through ssh",
                " #",
                "-# sshRole = admin",
                "+sshRole = ssh"
            ],
            "changed_files": [
                "assemblies/features/base/src/main/resources/resources/etc/org.apache.karaf.shell.cfg"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5487": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: file, change",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5487",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b03bd9620d994044780fd2cca014b16bea72747c",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1507805916,
            "hunks": 1,
            "message": "[KARAF-5417][KARAF-4188] Add detailed instructions to enable systemd watchdog",
            "diff": [
                "diff --git a/assemblies/features/base/src/main/filtered-resources/resources/etc/config.properties b/assemblies/features/base/src/main/filtered-resources/resources/etc/config.properties",
                "index 5d4f5ccc33..74c33d0bf9 100644",
                "--- a/assemblies/features/base/src/main/filtered-resources/resources/etc/config.properties",
                "+++ b/assemblies/features/base/src/main/filtered-resources/resources/etc/config.properties",
                "@@ -235,2 +235,12 @@ karaf.delay.console=false",
                " #",
                "-#karaf.systemd.enabled=false",
                "+# In addition to setting the flag to true, the JNA library needs to be made",
                "+# available to the main classloader by adding the two following libraries",
                "+# to the lib/boot directory",
                "+#   mvn:net.java.dev.jna/jna/${jna.version}",
                "+#   mvn:net.java.dev.jna/jna-platform/${jna.version}",
                "+# or by building a custom distribution and adding the following lines for the",
                "+# karaf maven plugin configuration:",
                "+#    <library>mvn:net.java.dev.jna/jna/${jna.version};type:=boot;export:=false</library>",
                "+#    <library>mvn:net.java.dev.jna/jna-platform/${jna.version};type:=boot;export:=false</library>",
                "+#",
                "+#karaf.systemd.enabled=true"
            ],
            "changed_files": [
                "assemblies/features/base/src/main/filtered-resources/resources/etc/config.properties"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5417": "",
                "KARAF-4188": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: system",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5417, KARAF-4188",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3f1f44b6521f058abea6f6df19ce03a4c353c991",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1507742228,
            "hunks": 16,
            "message": "[KARAF-5416] Remove support for ext and endorsed libraries for Java 9 compatibility",
            "diff": [
                "diff --git a/assemblies/features/base/pom.xml b/assemblies/features/base/pom.xml",
                "index d14c0414d6..072c1bfcb7 100644",
                "--- a/assemblies/features/base/pom.xml",
                "+++ b/assemblies/features/base/pom.xml",
                "@@ -44,7 +44,2 @@",
                "         </dependency>",
                "-        <dependency>",
                "-            <groupId>org.apache.karaf</groupId>",
                "-            <artifactId>org.apache.karaf.exception</artifactId>",
                "-            <scope>runtime</scope>",
                "-        </dependency>",
                "         <dependency>",
                "@@ -136,7 +131,2 @@",
                "                                 </artifactItem>",
                "-                                <artifactItem>",
                "-                                    <groupId>org.apache.karaf</groupId>",
                "-                                    <artifactId>org.apache.karaf.exception</artifactId>",
                "-                                    <outputDirectory>target/classes/resources/lib/endorsed</outputDirectory>",
                "-                                </artifactItem>",
                "                                 <artifactItem>",
                "diff --git a/assemblies/features/base/src/main/filtered-resources/resources/bin/karaf b/assemblies/features/base/src/main/filtered-resources/resources/bin/karaf",
                "index 674b8d0f20..a70a896db6 100644",
                "--- a/assemblies/features/base/src/main/filtered-resources/resources/bin/karaf",
                "+++ b/assemblies/features/base/src/main/filtered-resources/resources/bin/karaf",
                "@@ -157,8 +157,4 @@ run() {",
                "     fi",
                "-    JAVA_ENDORSED_DIRS=\"${JAVA_HOME}/jre/lib/endorsed:${JAVA_HOME}/lib/endorsed:${KARAF_HOME}/lib/endorsed\"",
                "-    JAVA_EXT_DIRS=\"${JAVA_HOME}/jre/lib/ext:${JAVA_HOME}/lib/ext:${KARAF_HOME}/lib/ext\"",
                "     if ${cygwin}; then",
                "         JAVA_HOME=$(cygpath --path --windows \"${JAVA_HOME}\")",
                "-        JAVA_ENDORSED_DIRS=$(cygpath --path --windows \"${JAVA_ENDORSED_DIRS}\")",
                "-        JAVA_EXT_DIRS=$(cygpath --path --windows \"${JAVA_EXT_DIRS}\")",
                "     fi",
                "@@ -296,4 +292,2 @@ run() {",
                "                 ${KARAF_EXEC} \"${JAVA}\" ${JAVA_OPTS} \\",
                "-                    -Djava.endorsed.dirs=\"${JAVA_ENDORSED_DIRS}\" \\",
                "-                    -Djava.ext.dirs=\"${JAVA_EXT_DIRS}\" \\",
                "                     -Dkaraf.instances=\"${KARAF_HOME}/instances\" \\",
                "diff --git a/assemblies/features/base/src/main/filtered-resources/resources/bin/karaf.bat b/assemblies/features/base/src/main/filtered-resources/resources/bin/karaf.bat",
                "index 1f95c211e8..0cb31c2ed3 100644",
                "--- a/assemblies/features/base/src/main/filtered-resources/resources/bin/karaf.bat",
                "+++ b/assemblies/features/base/src/main/filtered-resources/resources/bin/karaf.bat",
                "@@ -416,4 +416,2 @@ if \"%KARAF_PROFILER%\" == \"\" goto :RUN",
                "                 -classpath \"%CLASSPATH%\" ^",
                "-                -Djava.endorsed.dirs=\"%JAVA_HOME%\\jre\\lib\\endorsed;%JAVA_HOME%\\lib\\endorsed;%KARAF_HOME%\\lib\\endorsed\" ^",
                "-                -Djava.ext.dirs=\"%JAVA_HOME%\\jre\\lib\\ext;%JAVA_HOME%\\lib\\ext;%KARAF_HOME%\\lib\\ext\" ^",
                "                 -Dkaraf.instances=\"%KARAF_HOME%\\instances\" ^",
                "diff --git a/assemblies/features/framework/pom.xml b/assemblies/features/framework/pom.xml",
                "index 61525b8210..a55051c89b 100644",
                "--- a/assemblies/features/framework/pom.xml",
                "+++ b/assemblies/features/framework/pom.xml",
                "@@ -51,7 +51,2 @@",
                "         </dependency>",
                "-        <dependency>",
                "-            <groupId>org.apache.karaf</groupId>",
                "-            <artifactId>org.apache.karaf.exception</artifactId>",
                "-            <scope>runtime</scope>",
                "-        </dependency>",
                "         <dependency>",
                "diff --git a/exception/pom.xml b/exception/pom.xml",
                "deleted file mode 100644",
                "index 370ddb6d88..0000000000",
                "--- a/exception/pom.xml",
                "+++ /dev/null",
                "@@ -1,38 +0,0 @@",
                "-<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">",
                "-",
                "-    <!--",
                "-",
                "-        Licensed to the Apache Software Foundation (ASF) under one or more",
                "-        contributor license agreements.  See the NOTICE file distributed with",
                "-        this work for additional information regarding copyright ownership.",
                "-        The ASF licenses this file to You under the Apache License, Version 2.0",
                "-        (the \"License\"); you may not use this file except in compliance with",
                "-        the License.  You may obtain a copy of the License at",
                "-",
                "-            http://www.apache.org/licenses/LICENSE-2.0",
                "-",
                "-        Unless required by applicable law or agreed to in writing, software",
                "-        distributed under the License is distributed on an \"AS IS\" BASIS,",
                "-        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "-        See the License for the specific language governing permissions and",
                "-        limitations under the License.",
                "-    -->",
                "-",
                "-    <modelVersion>4.0.0</modelVersion>",
                "-",
                "-    <parent>",
                "-        <groupId>org.apache.karaf</groupId>",
                "-        <artifactId>karaf</artifactId>",
                "-        <version>4.2.0-SNAPSHOT</version>",
                "-        <relativePath>../pom.xml</relativePath>",
                "-    </parent>",
                "-",
                "-    <artifactId>org.apache.karaf.exception</artifactId>",
                "-    <name>Apache Karaf :: Exception</name>",
                "-",
                "-    <properties>",
                "-        <appendedResourcesDirectory>${basedir}/../etc/appended-resources</appendedResourcesDirectory>",
                "-    </properties>",
                "-",
                "-</project>",
                "diff --git a/exception/src/main/java/java/lang/Exception.java b/exception/src/main/java/java/lang/Exception.java",
                "deleted file mode 100644",
                "index 940658b459..0000000000",
                "--- a/exception/src/main/java/java/lang/Exception.java",
                "+++ /dev/null",
                "@@ -1,194 +0,0 @@",
                "-/*",
                "- *  Licensed to the Apache Software Foundation (ASF) under one or more",
                "- *  contributor license agreements.  See the NOTICE file distributed with",
                "- *  this work for additional information regarding copyright ownership.",
                "- *  The ASF licenses this file to You under the Apache License, Version 2.0",
                "- *  (the \"License\"); you may not use this file except in compliance with",
                "- *  the License.  You may obtain a copy of the License at",
                "- *",
                "- *     http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- *  Unless required by applicable law or agreed to in writing, software",
                "- *  distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- *  See the License for the specific language governing permissions and",
                "- *  limitations under the License.",
                "- */",
                "-",
                "-package java.lang;",
                "-",
                "-import java.lang.reflect.Field;",
                "-import java.lang.ref.Reference;",
                "-import java.lang.ref.WeakReference;",
                "-",
                "-import javax.xml.bind.annotation.XmlTransient;",
                "-",
                "-",
                "-/**",
                "- * {@code Exception} is the superclass of all classes that represent recoverable",
                "- * exceptions. When exceptions are thrown, they may be caught by application",
                "- * code.",
                "- *",
                "- * @see Throwable",
                "- * @see Error",
                "- * @see RuntimeException",
                "- */",
                "-public class Exception extends Throwable {",
                "-    private static final long serialVersionUID = -3387516993124229948L;",
                "-",
                "-    private transient Reference<Class<?>>[] classContext = null;",
                "-",
                "-    /**",
                "-     * Constructs a new {@code Exception} that includes the current stack trace.",
                "-     */",
                "-    public Exception() {",
                "-        super();",
                "-        initClassContext();",
                "-    }",
                "-",
                "-    /**",
                "-     * Constructs a new {@code Exception} with the current stack trace and the",
                "-     * specified detail message.",
                "-     *",
                "-     * @param detailMessage",
                "-     *            the detail message for this exception.",
                "-     */",
                "-    public Exception(String detailMessage) {",
                "-        super(detailMessage);",
                "-        initClassContext();",
                "-    }",
                "-",
                "-    /**",
                "-     * Constructs a new {@code Exception} with the current stack trace, the",
                "-     * specified detail message and the specified cause.",
                "-     *",
                "-     * @param detailMessage",
                "-     *            the detail message for this exception.",
                "-     * @param throwable",
                "-     *            the cause of this exception.",
                "-     */",
                "-    public Exception(String detailMessage, Throwable throwable) {",
                "-        super(detailMessage, throwable);",
                "-        initClassContext();",
                "-    }",
                "-",
                "-    /**",
                "-     * Constructs a new {@code Exception} with the current stack trace and the",
                "-     * specified cause.",
                "-     *",
                "-     * @param throwable",
                "-     *            the cause of this exception.",
                "-     */",
                "-    public Exception(Throwable throwable) {",
                "-        super(throwable);",
                "-        initClassContext();",
                "-    }",
                "-",
                "-    /**",
                "-     * Constructs a new exception with the specified detail message,",
                "-     * cause, suppression enabled or disabled, and writable stack",
                "-     * trace enabled or disabled.",
                "-     *",
                "-     * @param  message the detail message.",
                "-     * @param cause the cause.  (A {@code null} value is permitted,",
                "-     * and indicates that the cause is nonexistent or unknown.)",
                "-     * @param enableSuppression whether or not suppression is enabled",
                "-     *                          or disabled",
                "-     * @param writableStackTrace whether or not the stack trace should",
                "-     *                           be writable",
                "-     */",
                "-    protected Exception(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {",
                "-        try {",
                "-            Field field = null;",
                "-            if (writableStackTrace) {",
                "-                fillInStackTrace();",
                "-            } else {",
                "-                field = Throwable.class.getDeclaredField(\"stackTrace\");",
                "-                field.setAccessible(true);",
                "-                field.set(this, null);",
                "-            }",
                "-            field = Throwable.class.getDeclaredField(\"detailMessage\");",
                "-            field.setAccessible(true);",
                "-            field.set(this, message);",
                "-            field = Throwable.class.getDeclaredField(\"cause\");",
                "-            field.setAccessible(true);",
                "-            field.set(this, cause);",
                "-            if (!enableSuppression) {",
                "-                field = Throwable.class.getDeclaredField(\"suppressedExceptions\");",
                "-                field.setAccessible(true);",
                "-                field.set(this, null);",
                "-            }",
                "-        } catch (Exception e) {",
                "-            e.printStackTrace();",
                "-        }",
                "-        initClassContext();",
                "-    }",
                "- ",
                "-    @XmlTransient",
                "-    @Deprecated",
                "-    public Class[] getClassContext() {",
                "-        Class<?>[] context = null;",
                "-        if (classContext != null) {",
                "-            context = new Class<?>[classContext.length];",
                "-            for (int i = 0; i < classContext.length; i++) {",
                "-                Class<?> c = classContext[i].get();",
                "-                context[i] = c == null ? Object.class : c;",
                "-            }",
                "-        }",
                "-        return context;",
                "-    }",
                "-",
                "-    @SuppressWarnings(\"unchecked\")",
                "-    private void initClassContext() {",
                "-        Class[] context = SecurityManagerEx.getInstance().getThrowableContext(this);",
                "-        if (context != null) {",
                "-            classContext = new Reference[context.length];",
                "-            for (int i = 0; i < context.length; i++) {",
                "-                classContext[i] = new WeakReference<Class<?>>(context[i]);",
                "-            }",
                "-        }",
                "-    }",
                "-    ",
                "-    protected Class[] classContext() {",
                "-        Class<?>[] context = new Class<?>[classContext.length];",
                "-        for (int i = 0; i < classContext.length; i++) {",
                "-            Class<?> c = classContext[i].get();",
                "-            context[i] = c == null ? Object.class : c;",
                "-        }",
                "-        return context;",
                "-    }",
                "-",
                "-    private static class SecurityManagerEx extends SecurityManager",
                "-    {",
                "-",
                "-        private static SecurityManagerEx sm;",
                "-",
                "-        public static SecurityManagerEx getInstance() {",
                "-            // No synchronized block because we don't really care",
                "-            // if multiple instances are created at some point",
                "-            if (sm == null) {",
                "-                sm = new SecurityManagerEx();",
                "-            }",
                "-            return sm;",
                "-        }",
                "-",
                "-        public Class[] getThrowableContext(Throwable t) {",
                "-            try {",
                "-                Class[] context = getClassContext();",
                "-                int nb = 0;",
                "-                for (;;) {",
                "-                    if (context[context.length - 1 - nb] == t.getClass()) {",
                "-                        break;",
                "-                    }",
                "-                    nb++;",
                "-                }",
                "-                Class[] nc = new Class[nb];",
                "-                System.arraycopy(context, context.length - nb, nc, 0, nb);",
                "-                return nc;",
                "-            } catch (Exception e) {",
                "-                return null;",
                "-            }",
                "-        }",
                "-    }",
                "-",
                "-}",
                "diff --git a/manual/src/main/asciidoc/user-guide/os-integration.adoc b/manual/src/main/asciidoc/user-guide/os-integration.adoc",
                "index b6310a15bf..70022e4764 100644",
                "--- a/manual/src/main/asciidoc/user-guide/os-integration.adoc",
                "+++ b/manual/src/main/asciidoc/user-guide/os-integration.adoc",
                "@@ -293,4 +293,2 @@ wrapper.java.additional.6=-Dkaraf.startLocalConsole=false",
                " wrapper.java.additional.7=-Dkaraf.startRemoteShell=true",
                "-wrapper.java.additional.8=-Djava.endorsed.dirs=%JAVA_HOME%/jre/lib/endorsed:%JAVA_HOME%/lib/endorsed:%KARAF_HOME%/lib/endorsed",
                "-wrapper.java.additional.9=-Djava.ext.dirs=%JAVA_HOME%/jre/lib/ext:%JAVA_HOME%/lib/ext:%KARAF_HOME%/lib/ext",
                "diff --git a/pom.xml b/pom.xml",
                "index d5afc90ccd..b57513be8a 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -58,3 +58,2 @@",
                "         <module>webconsole</module>",
                "-        <module>exception</module>",
                "         <module>scheduler</module>",
                "@@ -391,7 +390,2 @@",
                "             </dependency>",
                "-            <dependency>",
                "-                <groupId>org.apache.karaf</groupId>",
                "-                <artifactId>org.apache.karaf.exception</artifactId>",
                "-                <version>${project.version}</version>",
                "-            </dependency>",
                "             <dependency>",
                "diff --git a/profile/src/main/java/org/apache/karaf/profile/assembly/Builder.java b/profile/src/main/java/org/apache/karaf/profile/assembly/Builder.java",
                "index c6389adbde..01f9a4a616 100644",
                "--- a/profile/src/main/java/org/apache/karaf/profile/assembly/Builder.java",
                "+++ b/profile/src/main/java/org/apache/karaf/profile/assembly/Builder.java",
                "@@ -717,2 +717,6 @@ public class Builder {",
                "                     ? clause.getDirective(LIBRARY_CLAUSE_TYPE) : Library.TYPE_DEFAULT;",
                "+            if (type == Library.TYPE_ENDORSED || type == Library.TYPE_EXTENSION) {",
                "+                LOGGER.warn(\"Ignoring library \" + library + \" which is of an unsupported type \" + type + \".\");",
                "+                continue;",
                "+            }",
                "             final String path;",
                "diff --git a/wrapper/src/main/resources/org/apache/karaf/wrapper/internal/unix/karaf-wrapper.conf b/wrapper/src/main/resources/org/apache/karaf/wrapper/internal/unix/karaf-wrapper.conf",
                "index 38c1afe4dc..9bc2f9c1cc 100644",
                "--- a/wrapper/src/main/resources/org/apache/karaf/wrapper/internal/unix/karaf-wrapper.conf",
                "+++ b/wrapper/src/main/resources/org/apache/karaf/wrapper/internal/unix/karaf-wrapper.conf",
                "@@ -46,5 +46,3 @@ wrapper.java.additional.6=-Dkaraf.startLocalConsole=false",
                " wrapper.java.additional.7=-Dkaraf.startRemoteShell=true",
                "-wrapper.java.additional.8=-Djava.endorsed.dirs=%JAVA_HOME%/jre/lib/endorsed:%JAVA_HOME%/lib/endorsed:%KARAF_HOME%/lib/endorsed",
                "-wrapper.java.additional.9=-Djava.ext.dirs=%JAVA_HOME%/jre/lib/ext:%JAVA_HOME%/lib/ext:%KARAF_HOME%/lib/ext",
                "-wrapper.java.additional.10=-Djava.io.tmpdir=%KARAF_DATA%/tmp",
                "+wrapper.java.additional.8=-Djava.io.tmpdir=%KARAF_DATA%/tmp",
                "diff --git a/wrapper/src/main/resources/org/apache/karaf/wrapper/internal/windows/karaf-wrapper.conf b/wrapper/src/main/resources/org/apache/karaf/wrapper/internal/windows/karaf-wrapper.conf",
                "index 426761d102..4765361c1a 100644",
                "--- a/wrapper/src/main/resources/org/apache/karaf/wrapper/internal/windows/karaf-wrapper.conf",
                "+++ b/wrapper/src/main/resources/org/apache/karaf/wrapper/internal/windows/karaf-wrapper.conf",
                "@@ -46,5 +46,3 @@ wrapper.java.additional.6=-Dkaraf.startLocalConsole=false",
                " wrapper.java.additional.7=-Dkaraf.startRemoteShell=true",
                "-wrapper.java.additional.8=-Djava.endorsed.dirs=\"%JAVA_HOME%/jre/lib/endorsed;%JAVA_HOME%/lib/endorsed;%KARAF_HOME%/lib/endorsed\"",
                "-wrapper.java.additional.9=-Djava.ext.dirs=\"%JAVA_HOME%/jre/lib/ext;%JAVA_HOME%/lib/ext;%KARAF_HOME%/lib/ext\"",
                "-wrapper.java.additional.10=-Djava.io.tmpdir=\"%KARAF_DATA%/tmp\"",
                "+wrapper.java.additional.8=-Djava.io.tmpdir=\"%KARAF_DATA%/tmp\"",
                "diff --git a/wrapper/src/main/resources/org/apache/karaf/wrapper/internal/windows64/karaf-wrapper.conf b/wrapper/src/main/resources/org/apache/karaf/wrapper/internal/windows64/karaf-wrapper.conf",
                "index 426761d102..4765361c1a 100644",
                "--- a/wrapper/src/main/resources/org/apache/karaf/wrapper/internal/windows64/karaf-wrapper.conf",
                "+++ b/wrapper/src/main/resources/org/apache/karaf/wrapper/internal/windows64/karaf-wrapper.conf",
                "@@ -46,5 +46,3 @@ wrapper.java.additional.6=-Dkaraf.startLocalConsole=false",
                " wrapper.java.additional.7=-Dkaraf.startRemoteShell=true",
                "-wrapper.java.additional.8=-Djava.endorsed.dirs=\"%JAVA_HOME%/jre/lib/endorsed;%JAVA_HOME%/lib/endorsed;%KARAF_HOME%/lib/endorsed\"",
                "-wrapper.java.additional.9=-Djava.ext.dirs=\"%JAVA_HOME%/jre/lib/ext;%JAVA_HOME%/lib/ext;%KARAF_HOME%/lib/ext\"",
                "-wrapper.java.additional.10=-Djava.io.tmpdir=\"%KARAF_DATA%/tmp\"",
                "+wrapper.java.additional.8=-Djava.io.tmpdir=\"%KARAF_DATA%/tmp\""
            ],
            "changed_files": [
                "assemblies/features/base/pom.xml",
                "assemblies/features/base/src/main/filtered-resources/resources/bin/karaf",
                "assemblies/features/base/src/main/filtered-resources/resources/bin/karaf.bat",
                "assemblies/features/framework/pom.xml",
                "exception/pom.xml",
                "exception/src/main/java/java/lang/Exception.java",
                "manual/src/main/asciidoc/user-guide/os-integration.adoc",
                "pom.xml",
                "profile/src/main/java/org/apache/karaf/profile/assembly/Builder.java",
                "wrapper/src/main/resources/org/apache/karaf/wrapper/internal/unix/karaf-wrapper.conf",
                "wrapper/src/main/resources/org/apache/karaf/wrapper/internal/windows/karaf-wrapper.conf",
                "wrapper/src/main/resources/org/apache/karaf/wrapper/internal/windows64/karaf-wrapper.conf"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5416": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: file, user",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5416",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "02a4d42580f8eff39da3cf293b10dc03a477c618",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1511450651,
            "hunks": 0,
            "message": "Merge pull request #399 from coheigea/KARAF-5498 KARAF-5498 - SyncopeLoginModule parses roles instead of groups for Sy\u00e2\u0080\u00a6",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5498": ""
            },
            "ghissue_refs": {
                "399": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5498",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 399",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6b5627f281df042435541e0241ba57bcc27f2808",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1511266395,
            "hunks": 4,
            "message": "KARAF-5496 - NPEs in SyncopeLoginModule if \"version\" is not specified",
            "diff": [
                "diff --git a/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/syncope/SyncopeLoginModule.java b/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/syncope/SyncopeLoginModule.java",
                "index 08d904d7c6..64d56d8ad5 100644",
                "--- a/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/syncope/SyncopeLoginModule.java",
                "+++ b/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/syncope/SyncopeLoginModule.java",
                "@@ -87,3 +87,5 @@ public class SyncopeLoginModule extends AbstractKarafLoginModule {",
                "         HttpGet get = new HttpGet(address + \"/users/self\");",
                "-        if (version.equals(\"2.x\") || version.equals(\"2\")) {",
                "+",
                "+        boolean version2 = version != null && (version.equals(\"2.x\") || version.equals(\"2\"));",
                "+        if (version2) {",
                "             get.setHeader(\"Content-Type\", \"application/json\");",
                "@@ -104,6 +106,7 @@ public class SyncopeLoginModule extends AbstractKarafLoginModule {",
                "             LOGGER.debug(\"Retrieving user {} roles\", user);",
                "-            if (version.equals(\"2.x\") || version.equals(\"2\")) {",
                "-                roles = extractingRolesSyncope2(EntityUtils.toString(response.getEntity()));",
                "+            String responseSt = EntityUtils.toString(response.getEntity());",
                "+            if (version2) {",
                "+                roles = extractingRolesSyncope2(responseSt);",
                "             } else {",
                "-                roles = extractingRolesSyncope1(EntityUtils.toString(response.getEntity()));",
                "+                roles = extractingRolesSyncope1(responseSt);",
                "             }",
                "@@ -138,3 +141,3 @@ public class SyncopeLoginModule extends AbstractKarafLoginModule {",
                "                 response = response.substring(0, index);",
                "-    ",
                "+",
                "                 // looking for the roleName elements"
            ],
            "changed_files": [
                "jaas/modules/src/main/java/org/apache/karaf/jaas/modules/syncope/SyncopeLoginModule.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5496": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "915894b5d10f2cd3ca14d537291dc9365003d6a1"
                ]
            ],
            "tags": [
                "karaf-4.1.4",
                "karaf-4.1.5",
                "karaf-4.1.6",
                "karaf-4.1.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5496",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8dbd217b0f0a843ca114eb9f1a43ed53734f601c",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1507731093,
            "hunks": 2,
            "message": "[KARAF-5371] Make sure the region hooks are invoked first by the framework # Conflicts: #\tfeatures/core/src/main/java/org/apache/karaf/features/internal/osgi/Activator.java",
            "diff": [
                "diff --git a/features/core/src/main/java/org/apache/karaf/features/internal/osgi/Activator.java b/features/core/src/main/java/org/apache/karaf/features/internal/osgi/Activator.java",
                "index e591c128ba..3f306faf6e 100644",
                "--- a/features/core/src/main/java/org/apache/karaf/features/internal/osgi/Activator.java",
                "+++ b/features/core/src/main/java/org/apache/karaf/features/internal/osgi/Activator.java",
                "@@ -128,2 +128,4 @@ public class Activator extends BaseActivator {",
                "         // RegionDigraph",
                "+        Dictionary<String, Object> ranking = new Hashtable<>();",
                "+        ranking.put(Constants.SERVICE_RANKING, 1000);",
                "         StandardRegionDigraph dg = digraph = DigraphHelper.loadDigraph(bundleContext);",
                "@@ -131,6 +133,6 @@ public class Activator extends BaseActivator {",
                "         register(CollisionHook.class, CollisionHookHelper.getCollisionHook(dg));",
                "-        register(org.osgi.framework.hooks.bundle.FindHook.class, dg.getBundleFindHook());",
                "-        register(org.osgi.framework.hooks.bundle.EventHook.class, dg.getBundleEventHook());",
                "-        register(org.osgi.framework.hooks.service.FindHook.class, dg.getServiceFindHook());",
                "-        register(org.osgi.framework.hooks.service.EventHook.class, dg.getServiceEventHook());",
                "+        register(org.osgi.framework.hooks.bundle.FindHook.class, dg.getBundleFindHook(), ranking);",
                "+        register(org.osgi.framework.hooks.bundle.EventHook.class, dg.getBundleEventHook(), ranking);",
                "+        register(org.osgi.framework.hooks.service.FindHook.class, dg.getServiceFindHook(), ranking);",
                "+        register(org.osgi.framework.hooks.service.EventHook.class, dg.getServiceEventHook(), ranking);",
                "         register(RegionDigraph.class, dg);"
            ],
            "changed_files": [
                "features/core/src/main/java/org/apache/karaf/features/internal/osgi/Activator.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5371": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "cd0ecbbb0fb8a09a928bd87cc027572df2adfb7f"
                ]
            ],
            "tags": [
                "karaf-4.1.3",
                "karaf-4.1.4",
                "karaf-4.1.5",
                "karaf-4.1.6",
                "karaf-4.1.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5371",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fe0fa69986fb6fadacbd18fd6060d64e9b784b4b",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1508858601,
            "hunks": 0,
            "message": "Merge pull request #388 from apache/KARAF-2401 [KARAF-2401] Improve log coloring",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-2401": ""
            },
            "ghissue_refs": {
                "388": "DDF-3908 Upgrade to Karaf 4.2.0 codice/ddf#3635"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-2401",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 388",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b46deeec1ab6f5cd3016dd96cec1372c5e3f31af",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1511423778,
            "hunks": 52,
            "message": "Use a StringBuilder instead of string concatenations",
            "diff": [
                "diff --git a/webconsole/gogo/src/main/java/org/apache/karaf/webconsole/gogo/Terminal.java b/webconsole/gogo/src/main/java/org/apache/karaf/webconsole/gogo/Terminal.java",
                "index 70a860a452..ab9b7b3128 100644",
                "--- a/webconsole/gogo/src/main/java/org/apache/karaf/webconsole/gogo/Terminal.java",
                "+++ b/webconsole/gogo/src/main/java/org/apache/karaf/webconsole/gogo/Terminal.java",
                "@@ -1559,3 +1559,3 @@ public class Terminal {",
                "     public synchronized String pipe(String d) {",
                "-        String o = \"\";",
                "+        StringBuilder o = new StringBuilder();",
                "         for (char c : d.toCharArray()) {",
                "@@ -1566,69 +1566,69 @@ public class Terminal {",
                "                         case '~':",
                "-                            o += \"~\";",
                "+                            o.append(\"~\");",
                "                             break;",
                "                         case 'A':",
                "-                            o += \"\\u001bOA\";",
                "+                            o.append(\"\\u001bOA\");",
                "                             break;",
                "                         case 'B':",
                "-                            o += \"\\u001bOB\";",
                "+                            o.append(\"\\u001bOB\");",
                "                             break;",
                "                         case 'C':",
                "-                            o += \"\\u001bOC\";",
                "+                            o.append(\"\\u001bOC\");",
                "                             break;",
                "                         case 'D':",
                "-                            o += \"\\u001bOD\";",
                "+                            o.append(\"\\u001bOD\");",
                "                             break;",
                "                         case 'F':",
                "-                            o += \"\\u001bOF\";",
                "+                            o.append(\"\\u001bOF\");",
                "                             break;",
                "                         case 'H':",
                "-                            o += \"\\u001bOH\";",
                "+                            o.append(\"\\u001bOH\");",
                "                             break;",
                "                         case '1':",
                "-                            o += \"\\u001b[5~\";",
                "+                            o.append(\"\\u001b[5~\");",
                "                             break;",
                "                         case '2':",
                "-                            o += \"\\u001b[6~\";",
                "+                            o.append(\"\\u001b[6~\");",
                "                             break;",
                "                         case '3':",
                "-                            o += \"\\u001b[2~\";",
                "+                            o.append(\"\\u001b[2~\");",
                "                             break;",
                "                         case '4':",
                "-                            o += \"\\u001b[3~\";",
                "+                            o.append(\"\\u001b[3~\");",
                "                             break;",
                "                         case 'a':",
                "-                            o += \"\\u001bOP\";",
                "+                            o.append(\"\\u001bOP\");",
                "                             break;",
                "                         case 'b':",
                "-                            o += \"\\u001bOQ\";",
                "+                            o.append(\"\\u001bOQ\");",
                "                             break;",
                "                         case 'c':",
                "-                            o += \"\\u001bOR\";",
                "+                            o.append(\"\\u001bOR\");",
                "                             break;",
                "                         case 'd':",
                "-                            o += \"\\u001bOS\";",
                "+                            o.append(\"\\u001bOS\");",
                "                             break;",
                "                         case 'e':",
                "-                            o += \"\\u001b[15~\";",
                "+                            o.append(\"\\u001b[15~\");",
                "                             break;",
                "                         case 'f':",
                "-                            o += \"\\u001b[17~\";",
                "+                            o.append(\"\\u001b[17~\");",
                "                             break;",
                "                         case 'g':",
                "-                            o += \"\\u001b[18~\";",
                "+                            o.append(\"\\u001b[18~\");",
                "                             break;",
                "                         case 'h':",
                "-                            o += \"\\u001b[19~\";",
                "+                            o.append(\"\\u001b[19~\");",
                "                             break;",
                "                         case 'i':",
                "-                            o += \"\\u001b[20~\";",
                "+                            o.append(\"\\u001b[20~\");",
                "                             break;",
                "                         case 'j':",
                "-                            o += \"\\u001b[21~\";",
                "+                            o.append(\"\\u001b[21~\");",
                "                             break;",
                "                         case 'k':",
                "-                            o += \"\\u001b[23~\";",
                "+                            o.append(\"\\u001b[23~\");",
                "                             break;",
                "                         case 'l':",
                "-                            o += \"\\u001b[24~\";",
                "+                            o.append(\"\\u001b[24~\");",
                "                             break;",
                "@@ -1638,69 +1638,69 @@ public class Terminal {",
                "                         case '~':",
                "-                            o += \"~\";",
                "+                            o.append(\"~\");",
                "                             break;",
                "                         case 'A':",
                "-                            o += \"\\u001b[A\";",
                "+                            o.append(\"\\u001b[A\");",
                "                             break;",
                "                         case 'B':",
                "-                            o += \"\\u001b[B\";",
                "+                            o.append(\"\\u001b[B\");",
                "                             break;",
                "                         case 'C':",
                "-                            o += \"\\u001b[C\";",
                "+                            o.append(\"\\u001b[C\");",
                "                             break;",
                "                         case 'D':",
                "-                            o += \"\\u001b[D\";",
                "+                            o.append(\"\\u001b[D\");",
                "                             break;",
                "                         case 'F':",
                "-                            o += \"\\u001b[F\";",
                "+                            o.append(\"\\u001b[F\");",
                "                             break;",
                "                         case 'H':",
                "-                            o += \"\\u001b[H\";",
                "+                            o.append(\"\\u001b[H\");",
                "                             break;",
                "                         case '1':",
                "-                            o += \"\\u001b[5~\";",
                "+                            o.append(\"\\u001b[5~\");",
                "                             break;",
                "                         case '2':",
                "-                            o += \"\\u001b[6~\";",
                "+                            o.append(\"\\u001b[6~\");",
                "                             break;",
                "                         case '3':",
                "-                            o += \"\\u001b[2~\";",
                "+                            o.append(\"\\u001b[2~\");",
                "                             break;",
                "                         case '4':",
                "-                            o += \"\\u001b[3~\";",
                "+                            o.append(\"\\u001b[3~\");",
                "                             break;",
                "                         case 'a':",
                "-                            o += \"\\u001bOP\";",
                "+                            o.append(\"\\u001bOP\");",
                "                             break;",
                "                         case 'b':",
                "-                            o += \"\\u001bOQ\";",
                "+                            o.append(\"\\u001bOQ\");",
                "                             break;",
                "                         case 'c':",
                "-                            o += \"\\u001bOR\";",
                "+                            o.append(\"\\u001bOR\");",
                "                             break;",
                "                         case 'd':",
                "-                            o += \"\\u001bOS\";",
                "+                            o.append(\"\\u001bOS\");",
                "                             break;",
                "                         case 'e':",
                "-                            o += \"\\u001b[15~\";",
                "+                            o.append(\"\\u001b[15~\");",
                "                             break;",
                "                         case 'f':",
                "-                            o += \"\\u001b[17~\";",
                "+                            o.append(\"\\u001b[17~\");",
                "                             break;",
                "                         case 'g':",
                "-                            o += \"\\u001b[18~\";",
                "+                            o.append(\"\\u001b[18~\");",
                "                             break;",
                "                         case 'h':",
                "-                            o += \"\\u001b[19~\";",
                "+                            o.append(\"\\u001b[19~\");",
                "                             break;",
                "                         case 'i':",
                "-                            o += \"\\u001b[20~\";",
                "+                            o.append(\"\\u001b[20~\");",
                "                             break;",
                "                         case 'j':",
                "-                            o += \"\\u001b[21~\";",
                "+                            o.append(\"\\u001b[21~\");",
                "                             break;",
                "                         case 'k':",
                "-                            o += \"\\u001b[23~\";",
                "+                            o.append(\"\\u001b[23~\");",
                "                             break;",
                "                         case 'l':",
                "-                            o += \"\\u001b[24~\";",
                "+                            o.append(\"\\u001b[24~\");",
                "                             break;",
                "@@ -1712,10 +1712,10 @@ public class Terminal {",
                "                 if (vt100_mode_backspace) {",
                "-                    o += '\\u0008';",
                "+                    o.append('\\u0008');",
                "                 } else {",
                "-                    o += '\\u007f';",
                "+                    o.append('\\u007f');",
                "                 }",
                "             } else {",
                "-                o += c;",
                "+                o.append(c);",
                "                 if (vt100_mode_lfnewline && c == '\\r') {",
                "-                    o += '\\n';",
                "+                    o.append('\\n');",
                "                 }",
                "@@ -1723,3 +1723,3 @@ public class Terminal {",
                "         }",
                "-        return o;",
                "+        return o.toString();",
                "     }"
            ],
            "changed_files": [
                "webconsole/gogo/src/main/java/org/apache/karaf/webconsole/gogo/Terminal.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: console",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "634ba15a955f7d17ee60f0ae1547b8ecea9957ca",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1510049945,
            "hunks": 4,
            "message": "When removing a features repository, handle the fact that another repo can provide the required feature",
            "diff": [
                "diff --git a/features/core/src/main/java/org/apache/karaf/features/internal/service/FeaturesServiceImpl.java b/features/core/src/main/java/org/apache/karaf/features/internal/service/FeaturesServiceImpl.java",
                "index 430144804f..1478385d9e 100644",
                "--- a/features/core/src/main/java/org/apache/karaf/features/internal/service/FeaturesServiceImpl.java",
                "+++ b/features/core/src/main/java/org/apache/karaf/features/internal/service/FeaturesServiceImpl.java",
                "@@ -394,14 +394,29 @@ public class FeaturesServiceImpl implements FeaturesService, Deployer.DeployCall",
                "-        Set<Repository> repos;",
                "+        Map<String, Set<String>> reqsToRemove;",
                "         Set<String> features;",
                "         synchronized (lock) {",
                "-            repos = repositories.getRepositoryClosure(repo);",
                "-            List<Repository> required = new ArrayList<>(Arrays.asList(repositories.listMatchingRepositories(state.repositories)));",
                "-            required.remove(repo);",
                "-            for (Repository rep : required) {",
                "-                repos.removeAll(repositories.getRepositoryClosure(rep));",
                "-            }",
                "+            getFeatureCache();",
                "             features = new HashSet<>();",
                "-            for (Repository tranRepo : repos) {",
                "-                features.addAll(getRequiredFeatureIds(tranRepo));",
                "+            for (Set<String> reqs : state.requirements.values()) {",
                "+                features.addAll(reqs);",
                "+            }",
                "+            Set<Repository> repos = new HashSet<>();",
                "+            for (String r : state.repositories) {",
                "+                if (!uri.toString().equals(r)) {",
                "+                    Repository rep = repositories.getRepository(r);",
                "+                    repos.addAll(repositories.getRepositoryClosure(rep));",
                "+                }",
                "+            }",
                "+            for (Repository rep : repos) {",
                "+                for (Feature f : rep.getFeatures()) {",
                "+                    features.remove(new FeatureReq(f).toRequirement());",
                "+                }",
                "+            }",
                "+            reqsToRemove = new HashMap<>();",
                "+            for (Map.Entry<String, Set<String>> entry : state.requirements.entrySet()) {",
                "+                Set<String> reqs = new HashSet<>(entry.getValue());",
                "+                reqs.retainAll(features);",
                "+                if (!reqs.isEmpty()) {",
                "+                    reqsToRemove.put(entry.getKey(), reqs);",
                "+                }",
                "             }",
                "@@ -411,3 +426,3 @@ public class FeaturesServiceImpl implements FeaturesService, Deployer.DeployCall",
                "             if (uninstall) {",
                "-                uninstallFeatures(features, EnumSet.noneOf(Option.class));",
                "+                removeRequirements(reqsToRemove, EnumSet.noneOf(Option.class));",
                "             } else {"
            ],
            "changed_files": [
                "features/core/src/main/java/org/apache/karaf/features/internal/service/FeaturesServiceImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: service",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "2ebdf3c2804f51a1cdf50ce8dd0b2c14cfe4efd4",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1508086460,
            "hunks": 3,
            "message": "Revert \"[KARAF-5373] Improve the fix\" This reverts commit 0c4a819217cb35c59cc4c2d41369ca3f27e7cd12.",
            "diff": [
                "diff --git a/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/GenerateDescriptorMojo.java b/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/GenerateDescriptorMojo.java",
                "index 0b27da4649..896c12834e 100644",
                "--- a/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/GenerateDescriptorMojo.java",
                "+++ b/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/GenerateDescriptorMojo.java",
                "@@ -320,3 +320,3 @@ public class GenerateDescriptorMojo extends MojoSupport {",
                "                 String packaging = this.project.getPackaging();",
                "-                enableGeneration = \"feature\".equals(packaging);",
                "+                enableGeneration = !\"feature\".equals(packaging);",
                "             }",
                "@@ -331,4 +331,4 @@ public class GenerateDescriptorMojo extends MojoSupport {",
                "                     projectHelper.attachArtifact(project, attachmentArtifactType, attachmentArtifactClassifier, outputFile);",
                "+                    return;",
                "                 }",
                "-                return;",
                "             }"
            ],
            "changed_files": [
                "tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/GenerateDescriptorMojo.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5373": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "5a73cf4928ccae7e9fc0373cd060a5a6e506467b"
                ]
            ],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5373",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0c4a819217cb35c59cc4c2d41369ca3f27e7cd12",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1508083488,
            "hunks": 3,
            "message": "[KARAF-5373] Improve the fix",
            "diff": [
                "diff --git a/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/GenerateDescriptorMojo.java b/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/GenerateDescriptorMojo.java",
                "index 896c12834e..0b27da4649 100644",
                "--- a/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/GenerateDescriptorMojo.java",
                "+++ b/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/GenerateDescriptorMojo.java",
                "@@ -320,3 +320,3 @@ public class GenerateDescriptorMojo extends MojoSupport {",
                "                 String packaging = this.project.getPackaging();",
                "-                enableGeneration = !\"feature\".equals(packaging);",
                "+                enableGeneration = \"feature\".equals(packaging);",
                "             }",
                "@@ -331,4 +331,4 @@ public class GenerateDescriptorMojo extends MojoSupport {",
                "                     projectHelper.attachArtifact(project, attachmentArtifactType, attachmentArtifactClassifier, outputFile);",
                "-                    return;",
                "                 }",
                "+                return;",
                "             }"
            ],
            "changed_files": [
                "tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/GenerateDescriptorMojo.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5373": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "a9c35aaafed51e99aa878561c9919edb9167f05c"
                ]
            ],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5373",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5dcbf1779c7060cbd75b69289a79260fe09503eb",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1511443456,
            "hunks": 0,
            "message": "Merge pull request #398 from coheigea/KARAF-5496 KARAF-5496 - NPEs in SyncopeLoginModule if \"version\" is not specified",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5496": ""
            },
            "ghissue_refs": {
                "398": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5496",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 398",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "747eaa95963a5ac499d90e2a83080530c3f5eec9",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1508413260,
            "hunks": 1,
            "message": "[KARAF-5419] Upgrade to Aries Blueprint Core 1.8.3",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 71b5416446..c21290dc4c 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -215,3 +215,3 @@",
                "         <aries.blueprint.api.version>1.0.1</aries.blueprint.api.version>",
                "-        <aries.blueprint.core.version>1.8.2</aries.blueprint.core.version>",
                "+        <aries.blueprint.core.version>1.8.3</aries.blueprint.core.version>",
                "         <aries.blueprint.core.compatibility.version>1.0.0</aries.blueprint.core.compatibility.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5419": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "18ec985a1fc2d6b75665dafe642b9b35150e6251"
                ]
            ],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5419",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a06a34c0d5a845fba1081ced6fbb51de0bacdfe4",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1510215420,
            "hunks": 1,
            "message": "Remove unnecessary code",
            "diff": [
                "diff --git a/management/server/src/main/java/org/apache/karaf/management/KarafMBeanServerGuard.java b/management/server/src/main/java/org/apache/karaf/management/KarafMBeanServerGuard.java",
                "index 46df2e636c..6467a385d9 100644",
                "--- a/management/server/src/main/java/org/apache/karaf/management/KarafMBeanServerGuard.java",
                "+++ b/management/server/src/main/java/org/apache/karaf/management/KarafMBeanServerGuard.java",
                "@@ -418,3 +418,2 @@ public class KarafMBeanServerGuard implements InvocationHandler {",
                "     private String getGeneralPid(List<String> allPids, String pid) {",
                "-        String ret = \"\";",
                "         String[] pidStrArray = pid.split(Pattern.quote(\".\"));"
            ],
            "changed_files": [
                "management/server/src/main/java/org/apache/karaf/management/KarafMBeanServerGuard.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: manage",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "b3c848fce7e419b8fa4a54d8714b1433acbd33cd",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1507656102,
            "hunks": 1,
            "message": "[KARAF-5371] Use a defaut region to avoid having bundles not included in any region",
            "diff": [
                "diff --git a/features/core/src/main/java/org/apache/karaf/features/internal/region/DigraphHelper.java b/features/core/src/main/java/org/apache/karaf/features/internal/region/DigraphHelper.java",
                "index a24649fda1..5bc3e7f29c 100644",
                "--- a/features/core/src/main/java/org/apache/karaf/features/internal/region/DigraphHelper.java",
                "+++ b/features/core/src/main/java/org/apache/karaf/features/internal/region/DigraphHelper.java",
                "@@ -143,2 +143,3 @@ public final class DigraphHelper {",
                "         }",
                "+        dg.setDefaultRegion(defaultRegion);",
                "         // Add all unknown bundle to default region"
            ],
            "changed_files": [
                "features/core/src/main/java/org/apache/karaf/features/internal/region/DigraphHelper.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5371": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "28415d0a2e10e6823ba0cef020277d712d7cb5b1"
                ]
            ],
            "tags": [
                "karaf-4.1.3",
                "karaf-4.1.4",
                "karaf-4.1.5",
                "karaf-4.1.6",
                "karaf-4.1.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5371",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7ec85f0cbb3e90580312f0c27792688fae50e01a",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1510049042,
            "hunks": 1,
            "message": "Remove unused option",
            "diff": [
                "diff --git a/profile/src/main/java/org/apache/karaf/profile/command/ProfileCreate.java b/profile/src/main/java/org/apache/karaf/profile/command/ProfileCreate.java",
                "index 2b7abd58f6..7f8091da45 100644",
                "--- a/profile/src/main/java/org/apache/karaf/profile/command/ProfileCreate.java",
                "+++ b/profile/src/main/java/org/apache/karaf/profile/command/ProfileCreate.java",
                "@@ -34,4 +34,2 @@ public class ProfileCreate implements Action {",
                "-    @Option(name = \"--version\", description = \"The profile version. Defaults to the current default version.\")",
                "-    private String versionId;",
                "     @Option(name = \"--parents\", multiValued = true, required = false, description = \"Optionally specifies one or multiple parent profiles. To specify multiple parent profiles, specify this flag multiple times on the command line. For example, --parents foo --parents bar.\")"
            ],
            "changed_files": [
                "profile/src/main/java/org/apache/karaf/profile/command/ProfileCreate.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: file",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "844bacfc8af7e15eb99ff27c818471c6efca357f",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1508486297,
            "hunks": 1,
            "message": "Fix minor typo",
            "diff": [
                "diff --git a/manual/src/main/asciidoc/user-guide/log.adoc b/manual/src/main/asciidoc/user-guide/log.adoc",
                "index 9cfe952383..381a9d276c 100644",
                "--- a/manual/src/main/asciidoc/user-guide/log.adoc",
                "+++ b/manual/src/main/asciidoc/user-guide/log.adoc",
                "@@ -187,3 +187,3 @@ Additionally, de-facto standard log4j(2) levels can be used:",
                "-And because `org.ops4j.pax.loggin` PID uses `karaf.log.console` property, it's in fact better to use log4j levels instead:",
                "+And because `org.ops4j.pax.logging` PID uses `karaf.log.console` property, it's in fact better to use log4j levels instead:"
            ],
            "changed_files": [
                "manual/src/main/asciidoc/user-guide/log.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: user",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "ae58670327f032c5a1c52179e124f163017adcdf",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1507622373,
            "hunks": 1,
            "message": "[KARAF-5404] CLI autocompletion issue",
            "diff": [
                "diff --git a/assemblies/features/base/src/main/resources/resources/etc/shell.init.script b/assemblies/features/base/src/main/resources/resources/etc/shell.init.script",
                "index 5bfb836e84..2dff99c4ba 100644",
                "--- a/assemblies/features/base/src/main/resources/resources/etc/shell.init.script",
                "+++ b/assemblies/features/base/src/main/resources/resources/etc/shell.init.script",
                "@@ -59,3 +59,3 @@ if { %(jlineReader != null) } {",
                "   setopt auto-fresh-line",
                "-  setopt insert-tab",
                "+  unsetopt insert-tab",
                "   keymap \"^[OA\" up-line-or-search"
            ],
            "changed_files": [
                "assemblies/features/base/src/main/resources/resources/etc/shell.init.script"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5404": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "ff9dfd469d74652ace62016768439818c8dab2be"
                ],
                [
                    "no-tag",
                    "4188ef858315b4276cd87d73c2747671df695dc9"
                ]
            ],
            "tags": [
                "karaf-4.1.3",
                "karaf-4.1.4",
                "karaf-4.1.5",
                "karaf-4.1.6",
                "karaf-4.1.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5404",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ad89d81ceea78ae81c9712b049b5e8d752674bde",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1508762152,
            "hunks": 1,
            "message": "[KARAF-5440] Remove warning when starting karaf",
            "diff": [
                "diff --git a/util/src/main/java/org/apache/karaf/util/config/PropertiesLoader.java b/util/src/main/java/org/apache/karaf/util/config/PropertiesLoader.java",
                "index 414f6a937f..d4d7758393 100644",
                "--- a/util/src/main/java/org/apache/karaf/util/config/PropertiesLoader.java",
                "+++ b/util/src/main/java/org/apache/karaf/util/config/PropertiesLoader.java",
                "@@ -152,4 +152,2 @@ public class PropertiesLoader {",
                "                 throw ex;",
                "-            } else {",
                "-                System.err.println(\"WARN: \" + configPropURL + \" is not found, so not loaded\");",
                "             }"
            ],
            "changed_files": [
                "util/src/main/java/org/apache/karaf/util/config/PropertiesLoader.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5440": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "bd0ad0f48e0e2108d56fe453459dd7bf9728d6f3"
                ]
            ],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5440",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "beb02849e97e225965c3ebc805f38b31359f8d75",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1511513831,
            "hunks": 0,
            "message": "Merge pull request #394 from jbonofre/KARAF-5488 [KARAF-5488] Upgrade to Felix Framework 5.6.10",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5488": ""
            },
            "ghissue_refs": {
                "394": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5488",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 394",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e913df7cdfac222dfc8215fe78281d5a3f04dd18",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1509002392,
            "hunks": 1,
            "message": "[KARAF-5023] Improve the error message a bit.",
            "diff": [
                "diff --git a/config/src/main/java/org/apache/karaf/config/command/UpdateCommand.java b/config/src/main/java/org/apache/karaf/config/command/UpdateCommand.java",
                "index a908c8cd66..ff572a7d55 100644",
                "--- a/config/src/main/java/org/apache/karaf/config/command/UpdateCommand.java",
                "+++ b/config/src/main/java/org/apache/karaf/config/command/UpdateCommand.java",
                "@@ -31,3 +31,3 @@ public class UpdateCommand extends ConfigCommandSupport {",
                "         if (props == null) {",
                "-            System.err.println(\"No configuration is being edited--run the edit command first\");",
                "+            System.err.println(\"No configuration is being edited. Run the edit command first.\");",
                "             return null;"
            ],
            "changed_files": [
                "config/src/main/java/org/apache/karaf/config/command/UpdateCommand.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5023": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5023",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c89d5aade45bee78d0744fc144d839e621c9a6dc",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1511423933,
            "hunks": 1,
            "message": "[KARAF-5475] Disable the audit log LoginModule (superceeded by the event admin log)",
            "diff": [
                "diff --git a/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/impl/Activator.java b/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/impl/Activator.java",
                "index 3d369ecced..6a9c22ead4 100644",
                "--- a/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/impl/Activator.java",
                "+++ b/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/impl/Activator.java",
                "@@ -113,3 +113,3 @@ public class Activator extends BaseActivator implements ManagedService {",
                "         populate(config, \"audit.file.file\", System.getProperty(\"karaf.data\") + \"/security/audit.log\");",
                "-        populate(config, \"audit.log.enabled\", \"true\");",
                "+        populate(config, \"audit.log.enabled\", \"false\");",
                "         populate(config, \"audit.log.logger\", \"org.apache.karaf.jaas.modules.audit.LogAuditLoginModule\");"
            ],
            "changed_files": [
                "jaas/modules/src/main/java/org/apache/karaf/jaas/modules/impl/Activator.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5475": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5475",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4cd28b2737b4763faeddea13f7661064fa1d41d0",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1510219455,
            "hunks": 1,
            "message": "[KARAF-5470] Extend enforce JDK version range to include Java 9",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index b3b486eb05..215eb1109b 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -1992,3 +1992,3 @@",
                "                                 <requireJavaVersion>",
                "-                                    <version>[1.8,9]</version>",
                "+                                    <version>[1.8,)</version>",
                "                                 </requireJavaVersion>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5470": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5470",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5e050de5e957a3a1bebe06fcf162898203ce1ec6",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1508500433,
            "hunks": 1,
            "message": "[KARAF-5439] Upgrade Narayana to version 5.7.1.Final",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index c21290dc4c..91dec7f82c 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -247,3 +247,3 @@",
                "         <guava.version>20.0</guava.version>",
                "-        <narayana.version>5.7.0.Final</narayana.version>",
                "+        <narayana.version>5.7.1.Final</narayana.version>",
                "         <hibernate.annotations.common.version>3.3.0.ga</hibernate.annotations.common.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5439": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5439",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c9bffd932c27e362f9aaeaa045a2ca6b151c4259",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1510112760,
            "hunks": 3,
            "message": "[KARAF-5467]Karaf doesn't recognize Java 9 on Ubuntu 16.04",
            "diff": [
                "diff --git a/assemblies/features/base/src/main/filtered-resources/resources/bin/inc b/assemblies/features/base/src/main/filtered-resources/resources/bin/inc",
                "index bcd4962875..67433ae123 100644",
                "--- a/assemblies/features/base/src/main/filtered-resources/resources/bin/inc",
                "+++ b/assemblies/features/base/src/main/filtered-resources/resources/bin/inc",
                "@@ -215,3 +215,5 @@ checkJvmVersion() {",
                "         | sed -e 's;\\.;;g')",
                "-    if [ \"x${VERSION}\" = \"x\" ]; then",
                "+    MAJOR_VERSION=$(\"${JAVA}\" -version 2>&1 \\",
                "+        |awk -F '\"' '/version/ {print $2}')",
                "+    if [ \"${MAJOR_VERSION:0:1}\" -ge \"9\" ]; then",
                "        VERSION=90",
                "@@ -319,2 +321,2 @@ convertPaths() {",
                "     fi",
                "-}",
                "\\ No newline at end of file",
                "+}"
            ],
            "changed_files": [
                "assemblies/features/base/src/main/filtered-resources/resources/bin/inc"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5467": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5467",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5686ccf651600790197b9ca4e5ce69e0930107f5",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1508486489,
            "hunks": 9,
            "message": "[KARAF-2401] Improve log coloring",
            "diff": [
                "diff --git a/assemblies/features/base/src/main/resources/resources/etc/org.ops4j.pax.logging.cfg b/assemblies/features/base/src/main/resources/resources/etc/org.ops4j.pax.logging.cfg",
                "index 0c9d54e8c2..42d6c805a5 100644",
                "--- a/assemblies/features/base/src/main/resources/resources/etc/org.ops4j.pax.logging.cfg",
                "+++ b/assemblies/features/base/src/main/resources/resources/etc/org.ops4j.pax.logging.cfg",
                "@@ -19,4 +19,14 @@",
                "+# Colors for log level rendering",
                "+color.fatal = bright red",
                "+color.error = bright red",
                "+color.warn = bright yellow",
                "+color.info = bright green",
                "+color.debug = cyan",
                "+color.trace = cyan",
                "+",
                " # Common pattern layout for appenders",
                " log4j2.pattern = %d{ISO8601} | %-5p | %-16t | %-32c{1} | %X{bundle.id} - %X{bundle.name} - %X{bundle.version} | %m%n",
                "+log4j2.out.pattern = \\u001b[90m%d{HH:mm:ss\\.SSS}\\u001b[0m %highlight{%-5level}{FATAL=${color.fatal}, ERROR=${color.error}, WARN=${color.warn}, INFO=${color.info}, DEBUG=${color.debug}, TRACE=${color.trace}} \\u001b[90m[%t]\\u001b[0m %msg%n%throwable",
                "+",
                "@@ -51,3 +61,3 @@ log4j2.appender.console.name = Console",
                " log4j2.appender.console.layout.type = PatternLayout",
                "-log4j2.appender.console.layout.pattern = ${log4j2.pattern}",
                "+log4j2.appender.console.layout.pattern = ${log4j2.out.pattern}",
                "diff --git a/assemblies/features/standard/src/main/feature/feature.xml b/assemblies/features/standard/src/main/feature/feature.xml",
                "index d785e802be..49a2d2b545 100644",
                "--- a/assemblies/features/standard/src/main/feature/feature.xml",
                "+++ b/assemblies/features/standard/src/main/feature/feature.xml",
                "@@ -522,3 +522,9 @@",
                "             #",
                "-            pattern = \"%d{ISO8601} | %-5.5p | %-16.16t | %-32.32c{1} | %X{bundle.id} - %X{bundle.name} - %X{bundle.version} | %m%n\"",
                "+            color.fatal = \"bright red\"",
                "+            color.error = \"bright red\"",
                "+            color.warn = \"bright yellow\"",
                "+            color.info = \"bright green\"",
                "+            color.debug = \"cyan\"",
                "+            color.trace = \"cyan\"",
                "+            pattern = \"\\u001b[90m%d{HH:mm:ss.SSS}\\u001b[0m %h{%p}{FATAL=${color.fatal}, ERROR=${color.error}, WARN=${color.warn}, INFO=${color.info}, DEBUG=${color.debug}, TRACE=${color.trace}} \\u001b[90m[%t]\\u001b[0m %m%n\"",
                "         </config>",
                "diff --git a/log/src/main/java/org/apache/karaf/log/core/internal/layout/PatternParser.java b/log/src/main/java/org/apache/karaf/log/core/internal/layout/PatternParser.java",
                "index 5232b073c9..4c67b1de2f 100644",
                "--- a/log/src/main/java/org/apache/karaf/log/core/internal/layout/PatternParser.java",
                "+++ b/log/src/main/java/org/apache/karaf/log/core/internal/layout/PatternParser.java",
                "@@ -23,4 +23,7 @@ import java.util.Arrays;",
                " import java.util.Date;",
                "+import java.util.HashMap;",
                "+import java.util.Locale;",
                " import java.util.Map;",
                "+import org.ops4j.pax.logging.PaxLogger;",
                " import org.ops4j.pax.logging.spi.PaxLocationInfo;",
                "@@ -91,7 +94,17 @@ public class PatternParser {",
                "     if((i < patternLength) && (pattern.charAt(i) == '{')) {",
                "-      int end = pattern.indexOf('}', i);",
                "-      if (end > i) {",
                "-\tString r = pattern.substring(i + 1, end);",
                "-\ti = end+1;",
                "-\treturn r;",
                "+      int end = i;",
                "+      int nb = 1;",
                "+      while (++end < patternLength) {",
                "+        switch (pattern.charAt(end)) {",
                "+          case '{':",
                "+            nb++;",
                "+            break;",
                "+          case '}':",
                "+            if (--nb == 0) {",
                "+              String r = pattern.substring(i + 1, end);",
                "+              i = end + 1;",
                "+              return r;",
                "+            }",
                "+            break;",
                "+        }",
                "       }",
                "@@ -279,2 +292,8 @@ public class PatternParser {",
                "       break;",
                "+    case 'h':",
                "+      String pat = extractOption();",
                "+      String style = extractOption();",
                "+      pc = new HighlightPatternConverter(formattingInfo, pat, style);",
                "+      currentLiteral.setLength(0);",
                "+      break;",
                "     /*case 'l':",
                "@@ -443,2 +462,127 @@ public class PatternParser {",
                "+  private static class HighlightPatternConverter extends PatternConverter {",
                "+    static Map<String, String> SEQUENCES;",
                "+    static {",
                "+      SEQUENCES = new HashMap<>();",
                "+      SEQUENCES.put(\"csi\", \"\\u001b[\");",
                "+      SEQUENCES.put(\"suffix\", \"m\");",
                "+      SEQUENCES.put(\"separator\", \";\");",
                "+      SEQUENCES.put(\"normal\", \"0\");",
                "+      SEQUENCES.put(\"bold\", \"1\");",
                "+      SEQUENCES.put(\"bright\", \"1\");",
                "+      SEQUENCES.put(\"dim\", \"2\");",
                "+      SEQUENCES.put(\"underline\", \"3\");",
                "+      SEQUENCES.put(\"blink\", \"5\");",
                "+      SEQUENCES.put(\"reverse\", \"7\");",
                "+      SEQUENCES.put(\"hidden\", \"8\");",
                "+      SEQUENCES.put(\"black\", \"30\");",
                "+      SEQUENCES.put(\"fg_black\", \"30\");",
                "+      SEQUENCES.put(\"red\", \"31\");",
                "+      SEQUENCES.put(\"fg_red\", \"31\");",
                "+      SEQUENCES.put(\"green\", \"32\");",
                "+      SEQUENCES.put(\"fg_green\", \"32\");",
                "+      SEQUENCES.put(\"yellow\", \"33\");",
                "+      SEQUENCES.put(\"fg_yellow\", \"33\");",
                "+      SEQUENCES.put(\"blue\", \"34\");",
                "+      SEQUENCES.put(\"fg_blue\", \"34\");",
                "+      SEQUENCES.put(\"magenta\", \"35\");",
                "+      SEQUENCES.put(\"fg_magenta\", \"35\");",
                "+      SEQUENCES.put(\"cyan\", \"36\");",
                "+      SEQUENCES.put(\"fg_cyan\", \"36\");",
                "+      SEQUENCES.put(\"white\", \"37\");",
                "+      SEQUENCES.put(\"fg_white\", \"37\");",
                "+      SEQUENCES.put(\"default\", \"39\");",
                "+      SEQUENCES.put(\"fg_default\", \"39\");",
                "+      SEQUENCES.put(\"bg_black\", \"40\");",
                "+      SEQUENCES.put(\"bg_red\", \"41\");",
                "+      SEQUENCES.put(\"bg_green\", \"42\");",
                "+      SEQUENCES.put(\"bg_yellow\", \"43\");",
                "+      SEQUENCES.put(\"bg_blue\", \"44\");",
                "+      SEQUENCES.put(\"bg_magenta\", \"45\");",
                "+      SEQUENCES.put(\"bg_cyan\", \"46\");",
                "+      SEQUENCES.put(\"bg_white\", \"47\");",
                "+      SEQUENCES.put(\"bg_default\", \"49\");",
                "+    }",
                "+    private PatternConverter pattern;",
                "+    private Map<String, String> style;",
                "+",
                "+    HighlightPatternConverter(FormattingInfo formattingInfo, String pattern, String style) {",
                "+      super(formattingInfo);",
                "+      this.pattern = new PatternParser(pattern).parse();",
                "+      Map<String, String> unparsed = new HashMap<>();",
                "+      unparsed.put(\"trace\", \"cyan\");",
                "+      unparsed.put(\"debug\", \"cyan\");",
                "+      unparsed.put(\"info\", \"bright green\");",
                "+      unparsed.put(\"warn\", \"bright yellow\");",
                "+      unparsed.put(\"error\", \"bright red\");",
                "+      unparsed.put(\"fatal\", \"bright red\");",
                "+      if (style != null) {",
                "+        style = style.toLowerCase(Locale.ENGLISH);",
                "+        if (style.indexOf(',') < 0 && style.indexOf('=') < 0) {",
                "+          unparsed.put(\"trace\", style.trim());",
                "+          unparsed.put(\"debug\", style.trim());",
                "+          unparsed.put(\"info\", style.trim());",
                "+          unparsed.put(\"warn\", style.trim());",
                "+          unparsed.put(\"error\", style.trim());",
                "+          unparsed.put(\"fatal\", style.trim());",
                "+        } else {",
                "+          String[] keys = style.split(\"\\\\s*,\\\\s*\");",
                "+          for (String key : keys) {",
                "+            String[] val = key.split(\"\\\\s*=\\\\s*\");",
                "+            if (val.length > 1) {",
                "+              unparsed.put(val[0].trim(), val[1].trim());",
                "+            }",
                "+          }",
                "+        }",
                "+      }",
                "+      this.style = new HashMap<>();",
                "+      for (Map.Entry<String, String> e : unparsed.entrySet()) {",
                "+        this.style.put(e.getKey(), createSequence(e.getValue().split(\"\\\\s\")));",
                "+      }",
                "+    }",
                "+",
                "+    private String createSequence(String... names) {",
                "+      StringBuilder sb = new StringBuilder(SEQUENCES.get(\"csi\"));",
                "+      boolean first = true;",
                "+      for (String name : names) {",
                "+        name = name.trim();",
                "+        if (!first) {",
                "+          sb.append(SEQUENCES.get(\"separator\"));",
                "+        }",
                "+        first = false;",
                "+        sb.append(SEQUENCES.getOrDefault(name, name));",
                "+      }",
                "+      sb.append(SEQUENCES.get(\"suffix\"));",
                "+      return sb.toString();",
                "+    }",
                "+",
                "+    public",
                "+    String convert(PaxLoggingEvent event) {",
                "+      String s;",
                "+      switch (event.getLevel().toInt()) {",
                "+        case PaxLogger.LEVEL_TRACE:",
                "+          s = \"trace\";",
                "+          break;",
                "+        case PaxLogger.LEVEL_DEBUG:",
                "+          s = \"debug\";",
                "+          break;",
                "+        case PaxLogger.LEVEL_INFO:",
                "+          s = \"info\";",
                "+          break;",
                "+        case PaxLogger.LEVEL_WARNING:",
                "+          s = \"warn\";",
                "+          break;",
                "+        default:",
                "+          s = \"error\";",
                "+          break;",
                "+      }",
                "+      String str = style.get(s);",
                "+      if (str != null) {",
                "+        return str + pattern.convert(event) + SEQUENCES.get(\"csi\") + SEQUENCES.get(\"suffix\");",
                "+      } else {",
                "+        return pattern.convert(event);",
                "+      }",
                "+    }",
                "+  }",
                "+",
                "   private class LocationPatternConverter extends PatternConverter {"
            ],
            "changed_files": [
                "assemblies/features/base/src/main/resources/resources/etc/org.ops4j.pax.logging.cfg",
                "assemblies/features/standard/src/main/feature/feature.xml",
                "log/src/main/java/org/apache/karaf/log/core/internal/layout/PatternParser.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-2401": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-2401",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ac93582f6ff5ffa0ae00da99f35ff06db230b10d",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1509043853,
            "hunks": 1,
            "message": "Update scm URLs to use gitbox",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 239171b4d9..bd127081a7 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -79,5 +79,5 @@",
                "     <scm>",
                "-        <connection>scm:git:https://git-wip-us.apache.org/repos/asf/karaf.git</connection>",
                "-        <developerConnection>scm:git:https://git-wip-us.apache.org/repos/asf/karaf.git</developerConnection>",
                "-        <url>https://git-wip-us.apache.org/repos/asf?p=karaf.git;a=summary</url>",
                "+        <connection>scm:git:https://gitbox.apache.org/repos/asf/karaf.git</connection>",
                "+        <developerConnection>scm:git:https://gitbox.apache.org/repos/asf/karaf.git</developerConnection>",
                "+        <url>https://gitbox.apache.org/repos/asf?p=karaf.git;a=summary</url>",
                "       <tag>HEAD</tag>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "f3c99db6b93fd271e7ffd6cf7281167a42f696a4"
                ]
            ],
            "tags": [
                "karaf-4.1.3",
                "karaf-4.1.4",
                "karaf-4.1.5",
                "karaf-4.1.6",
                "karaf-4.1.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "1d708171c1d9261f00fe3298c390295eebcb459b",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1511422859,
            "hunks": 3,
            "message": "[KARAF-5475] Ability to use custom layouts using fragments",
            "diff": [
                "diff --git a/audit/src/main/java/org/apache/karaf/audit/Activator.java b/audit/src/main/java/org/apache/karaf/audit/Activator.java",
                "index 959bd503c0..7e3bcd2cba 100644",
                "--- a/audit/src/main/java/org/apache/karaf/audit/Activator.java",
                "+++ b/audit/src/main/java/org/apache/karaf/audit/Activator.java",
                "@@ -41,2 +41,3 @@ import javax.security.auth.Subject;",
                " import java.io.IOException;",
                "+import java.lang.reflect.Constructor;",
                " import java.util.AbstractMap;",
                "@@ -46,2 +47,4 @@ import java.util.Collections;",
                " import java.util.Dictionary;",
                "+import java.util.Enumeration;",
                "+import java.util.HashMap;",
                " import java.util.Hashtable;",
                "@@ -200,4 +203,43 @@ public class Activator extends BaseActivator implements ManagedService {",
                "             default:",
                "-                logger.warn(\"Unknown layout: \" + type + \". Using a simple layout.\");",
                "-                return new SimpleLayout();",
                "+                try {",
                "+                    return createCustomLayout(type);",
                "+                } catch (Exception e) {",
                "+                    logger.error(\"Error creating layout: \" + type + \". Using a simple layout.\", e);",
                "+                    return new SimpleLayout();",
                "+                }",
                "+        }",
                "+    }",
                "+",
                "+    private EventLayout createCustomLayout(String type) throws ClassNotFoundException, InstantiationException, IllegalAccessException, java.lang.reflect.InvocationTargetException {",
                "+        Class<?> clazz = Class.forName(type);",
                "+        Constructor<?> cnsMap = null;",
                "+        Constructor<?> cnsDef = null;",
                "+        Object layout = null;",
                "+        try {",
                "+            cnsMap = clazz.getConstructor(Map.class);",
                "+        } catch (NoSuchMethodException e) {",
                "+            // ignore",
                "+        }",
                "+        try {",
                "+            cnsDef = clazz.getConstructor();",
                "+        } catch (NoSuchMethodException e) {",
                "+            // ignore",
                "+        }",
                "+        if (cnsMap != null) {",
                "+            Map<String, Object> params = new HashMap<>();",
                "+            for (Enumeration<String> e = getConfiguration().keys(); e.hasMoreElements(); ) {",
                "+                String key = e.nextElement();",
                "+                Object val = getConfiguration().get(key);",
                "+                params.put(key, val);",
                "+            }",
                "+            layout = cnsMap.newInstance(params);",
                "+        } else if (cnsDef != null) {",
                "+            layout = cnsDef.newInstance();",
                "+        } else {",
                "+            throw new IllegalArgumentException(\"Unable to find a supported constructor\");",
                "+        }",
                "+        if (layout instanceof EventLayout) {",
                "+            return (EventLayout) layout;",
                "+        } else {",
                "+            throw new IllegalArgumentException(\"The built layout does not implement \" + EventLayout.class.getName());",
                "         }"
            ],
            "changed_files": [
                "audit/src/main/java/org/apache/karaf/audit/Activator.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5475": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5475",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "62e7179e216a01b6ff4a9eb51968a6ef671573f8",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1507793767,
            "hunks": 0,
            "message": "Merge branch 'KARAF-5413' of https://github.com/paoloantinori/karaf",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5413": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5413",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2aeb00bdbdfee3fb316a6ea86f7737a439af13ff",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1507882060,
            "hunks": 13,
            "message": "[KARAF-5103] Update quickstart for Karaf 4.2.0 and recent camel",
            "diff": [
                "diff --git a/manual/src/main/asciidoc/quick-start.adoc b/manual/src/main/asciidoc/quick-start.adoc",
                "index 16094fb898..f780affc5d 100644",
                "--- a/manual/src/main/asciidoc/quick-start.adoc",
                "+++ b/manual/src/main/asciidoc/quick-start.adoc",
                "@@ -20,3 +20,3 @@ These instructions should help you get Apache Karaf up and running in 5 to 15 mi",
                "-Karaf requires a Java SE 7 or Java SE 8 environment to run. Refer to http://www.oracle.com/technetwork/java/javase/ for details on how to download and install Java SE 1.7 or greater.",
                "+Karaf requires a Java SE 8 or Java SE 9 environment to run. Refer to http://www.oracle.com/technetwork/java/javase/ for details on how to download and install Java SE 1.8 or greater.",
                "@@ -51,3 +51,3 @@ You should see the following information on the command line console:",
                "-  Apache Karaf (4.0.0)",
                "+  Apache Karaf (4.2.0)",
                "@@ -58,3 +58,2 @@ Hit '<ctrl-d>' or type 'system:shutdown' or 'logout' to shutdown Karaf.",
                " karaf@root()>",
                "-",
                " ----",
                "@@ -66,2 +65,4 @@ You can now run your first command.  Simply type the `<tab>` key in the console.",
                " ----",
                "+karaf@root()>",
                "+karaf: do you wish to see to see all 356 possibilities (219 lines)?",
                " karaf@root()> Display all 294 possibilities? (y or n)",
                "@@ -95,16 +96,14 @@ ARGUMENTS",
                " OPTIONS",
                "-        -t",
                "-                Specifies the bundle threshold; bundles with a start-level less than this value will not get printed out.",
                "-        --no-format",
                "-                Disable table rendered output",
                "-        -s",
                "-                Shows the symbolic name",
                "-        -l",
                "-                Show the locations",
                "-        --no-ellipsis",
                "-",
                "-        --help",
                "-                Display this help message",
                "+        -name, -n",
                "+                Show bundle name",
                "         -u",
                "                 Shows the update locations",
                "+        -r",
                "+                Shows the bundle revisions",
                "+        --no-ellipsis",
                "+",
                "+        -l",
                "+                Show the locations",
                "+        -s",
                "+                Shows the symbolic name",
                "         --context, -c",
                "@@ -112,4 +111,8 @@ OPTIONS",
                "                 (defaults to 0)",
                "-        -r",
                "-                Shows the bundle revisions",
                "+        --help",
                "+                Display this help message",
                "+        -t",
                "+                Specifies the bundle threshold; bundles with a start-level less than this value will not get printed out.",
                "+        --no-format",
                "+                Disable table rendered output",
                " ----",
                "@@ -122,10 +125,22 @@ While you will learn in the Karaf user's guide how to fully use and leverage Apa",
                "-In the console, run the following commands:",
                "+Copy and paste the following commands in the console:",
                " ----",
                "-karaf@root()> feature:repo-add camel 2.15.2",
                "-Adding feature url mvn:org.apache.camel.karaf/apache-camel/2.15.2/xml/features",
                "-karaf@root()> feature:install camel-spring",
                "-karaf@root()> bundle:install -s mvn:org.apache.camel/camel-example-osgi/2.15.2",
                "-Bundle ID: 82",
                "+feature:repo-add camel 2.20.0",
                "+feature:install deployer camel-blueprint aries-blueprint",
                "+cat > deploy/example.xml <<END",
                "+<blueprint xmlns=\"http://www.osgi.org/xmlns/blueprint/v1.0.0\">",
                "+",
                "+    <camelContext xmlns=\"http://camel.apache.org/schema/blueprint\">",
                "+        <route>",
                "+            <from uri=\"timer://test?fixedRate=true&amp;period=2000\" />",
                "+            <setBody>",
                "+                <simple>Message at ${date:now:yyyy-MM-dd HH:mm:ss}</simple>",
                "+            </setBody>",
                "+            <to uri=\"log:test\" />",
                "+        </route>",
                "+    </camelContext>",
                "+",
                "+</blueprint>",
                "+END",
                " ----",
                "@@ -140,7 +155,4 @@ karaf@root()> log:display",
                " ...",
                "-2015-06-30 13:39:44,731 | INFO  |  timer://myTimer | ExampleRouter                    | 53 - org.apache.camel.camel-core - 2.15.2 | Exchange[ExchangePattern: InOnly, BodyType: String, Body: SpringDSL set body:  Tue Jun 30 13:39:44 CEST 2015]",
                "-2015-06-30 13:39:46,730 | INFO  |  timer://myTimer | MyTransform                      | 82 - camel-example-osgi - 2.15.2 | >>>> SpringDSL set body:  Tue Jun 30 13:39:46 CEST 2015",
                "-2015-06-30 13:39:46,731 | INFO  |  timer://myTimer | ExampleRouter                    | 53 - org.apache.camel.camel-core - 2.15.2 | Exchange[ExchangePattern: InOnly, BodyType: String, Body: SpringDSL set body:  Tue Jun 30 13:39:46 CEST 2015]",
                "-2015-06-30 13:39:48,730 | INFO  |  timer://myTimer | MyTransform                      | 82 - camel-example-osgi - 2.15.2 | >>>> SpringDSL set body:  Tue Jun 30 13:39:48 CEST 2015",
                "-2015-06-30 13:39:48,730 | INFO  |  timer://myTimer | ExampleRouter                    | 53 - org.apache.camel.camel-core - 2.15.2 | Exchange[ExchangePattern: InOnly, BodyType: String, Body: SpringDSL set body:  Tue Jun 30 13:39:48 CEST 2015]",
                "+2017-10-13 10:04:11,225 | INFO  | 7 - timer://test | test                             | 28 - org.apache.camel.camel-core - 2.20.0 | Exchange[ExchangePattern: InOnly, BodyType: String, Body: Message at 2017-10-13 10:04:11]",
                "+2017-10-13 10:04:13,225 | INFO  | 7 - timer://test | test                             | 28 - org.apache.camel.camel-core - 2.20.0 | Exchange[ExchangePattern: InOnly, BodyType: String, Body: Message at 2017-10-13 10:04:13]",
                " ----",
                "@@ -152,4 +164,4 @@ To stop and uninstall the demo, run the following command:",
                " ----",
                "-karaf@root()> bundle:stop camel-example-osgi",
                "-karaf@root()> bundle:uninstall camel-example-osgi",
                "+karaf@root()> bundle:stop example.xml",
                "+karaf@root()> bundle:uninstall example.xml",
                " ----",
                "@@ -167,3 +179,6 @@ Alternatively, you can also run the following command:",
                " ----",
                "+karaf@root()> feature:install system",
                " karaf@root()> system:shutdown",
                "+Confirm: halt instance root (yes/no): yes",
                "+karaf@root()>",
                " ----"
            ],
            "changed_files": [
                "manual/src/main/asciidoc/quick-start.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5103": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5103",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2e420daa66a00eb829a6ef5ecab7f451ee2401d7",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1509935671,
            "hunks": 1,
            "message": "[KARAF-5461]incorrect filter in EncryptionSupport of jaas modules",
            "diff": [
                "diff --git a/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/encryption/EncryptionSupport.java b/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/encryption/EncryptionSupport.java",
                "index 61e28f0670..49a3154a0c 100644",
                "--- a/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/encryption/EncryptionSupport.java",
                "+++ b/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/encryption/EncryptionSupport.java",
                "@@ -152,3 +152,3 @@ public class EncryptionSupport {",
                "         String objFilter = \"(objectClass=\" + EncryptionService.class.getName() + \")\";",
                "-        String filter = nameFilter == null ? objFilter : \"&(\" + nameFilter + objFilter + \")\"; ",
                "+        String filter = nameFilter == null ? objFilter : \"(&\" + nameFilter + objFilter + \")\"; ",
                "         try {"
            ],
            "changed_files": [
                "jaas/modules/src/main/java/org/apache/karaf/jaas/modules/encryption/EncryptionSupport.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5461": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5461",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fdc03979edc424ad7601bf7563b33c7a9b508a1b",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1509009324,
            "hunks": 7,
            "message": "[KARAF-5443] Add a completer for bundle symbolic names",
            "diff": [
                "diff --git a/bundle/core/src/main/java/org/apache/karaf/bundle/command/BundleCommand.java b/bundle/core/src/main/java/org/apache/karaf/bundle/command/BundleCommand.java",
                "index acca10593b..aa94600c31 100644",
                "--- a/bundle/core/src/main/java/org/apache/karaf/bundle/command/BundleCommand.java",
                "+++ b/bundle/core/src/main/java/org/apache/karaf/bundle/command/BundleCommand.java",
                "@@ -18,2 +18,3 @@ package org.apache.karaf.bundle.command;",
                "+import org.apache.karaf.bundle.command.completers.BundleSymbolicNameCompleter;",
                " import org.apache.karaf.bundle.core.BundleService;",
                "@@ -21,2 +22,3 @@ import org.apache.karaf.shell.api.action.Action;",
                " import org.apache.karaf.shell.api.action.Argument;",
                "+import org.apache.karaf.shell.api.action.Completion;",
                " import org.apache.karaf.shell.api.action.Option;",
                "@@ -35,2 +37,3 @@ public abstract class BundleCommand implements Action {",
                "     @Argument(index = 0, name = \"id\", description = \"The bundle ID or name or name/version\", required = true, multiValued = false)",
                "+    @Completion(BundleSymbolicNameCompleter.class)",
                "     String id;",
                "diff --git a/bundle/core/src/main/java/org/apache/karaf/bundle/command/BundlesCommand.java b/bundle/core/src/main/java/org/apache/karaf/bundle/command/BundlesCommand.java",
                "index 029c144b57..e9c3a9cd1a 100644",
                "--- a/bundle/core/src/main/java/org/apache/karaf/bundle/command/BundlesCommand.java",
                "+++ b/bundle/core/src/main/java/org/apache/karaf/bundle/command/BundlesCommand.java",
                "@@ -21,2 +21,3 @@ import java.util.List;",
                "+import org.apache.karaf.bundle.command.completers.BundleSymbolicNameCompleter;",
                " import org.apache.karaf.bundle.core.BundleService;",
                "@@ -24,2 +25,3 @@ import org.apache.karaf.shell.api.action.Action;",
                " import org.apache.karaf.shell.api.action.Argument;",
                "+import org.apache.karaf.shell.api.action.Completion;",
                " import org.apache.karaf.shell.api.action.Option;",
                "@@ -36,2 +38,3 @@ public abstract class BundlesCommand implements Action {",
                "     @Argument(index = 0, name = \"ids\", description = \"The list of bundle (identified by IDs or name or name/version) separated by whitespaces\", required = false, multiValued = true)",
                "+    @Completion(BundleSymbolicNameCompleter.class)",
                "     List<String> ids;",
                "diff --git a/bundle/core/src/main/java/org/apache/karaf/bundle/command/completers/BundleSymbolicNameCompleter.java b/bundle/core/src/main/java/org/apache/karaf/bundle/command/completers/BundleSymbolicNameCompleter.java",
                "new file mode 100644",
                "index 0000000000..c0b56f759a",
                "--- /dev/null",
                "+++ b/bundle/core/src/main/java/org/apache/karaf/bundle/command/completers/BundleSymbolicNameCompleter.java",
                "@@ -0,0 +1,54 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.karaf.bundle.command.completers;",
                "+",
                "+import org.apache.karaf.shell.api.action.lifecycle.Reference;",
                "+import org.apache.karaf.shell.api.action.lifecycle.Service;",
                "+import org.apache.karaf.shell.api.console.Candidate;",
                "+import org.apache.karaf.shell.api.console.CommandLine;",
                "+import org.apache.karaf.shell.api.console.Completer;",
                "+import org.apache.karaf.shell.api.console.Session;",
                "+import org.osgi.framework.Bundle;",
                "+import org.osgi.framework.BundleContext;",
                "+",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+",
                "+@Service",
                "+public class BundleSymbolicNameCompleter implements Completer {",
                "+",
                "+    @Reference",
                "+    private BundleContext bundleContext;",
                "+",
                "+    @Override",
                "+    public int complete(Session session, CommandLine commandLine, List<String> candidates) {",
                "+        List<Candidate> cands = new ArrayList<>();",
                "+        completeCandidates(session, commandLine, cands);",
                "+        for (Candidate cand : cands) {",
                "+            candidates.add(cand.value());",
                "+        }",
                "+        return candidates.isEmpty() ? -1 : 0;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void completeCandidates(Session session, CommandLine commandLine, List<Candidate> candidates) {",
                "+        for (Bundle bundle : bundleContext.getBundles()) {",
                "+            candidates.add(new Candidate(bundle.getSymbolicName(), true));",
                "+        }",
                "+    }",
                "+",
                "+}"
            ],
            "changed_files": [
                "bundle/core/src/main/java/org/apache/karaf/bundle/command/BundleCommand.java",
                "bundle/core/src/main/java/org/apache/karaf/bundle/command/BundlesCommand.java",
                "bundle/core/src/main/java/org/apache/karaf/bundle/command/completers/BundleSymbolicNameCompleter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5443": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5443",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "13ce82ecd0a14db6006e7ab0f7c9c94d79b58b8d",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1509675125,
            "hunks": 1,
            "message": "[KARAF-5455]remove redundant sshRole comment",
            "diff": [
                "diff --git a/assemblies/features/standard/src/main/feature/feature.xml b/assemblies/features/standard/src/main/feature/feature.xml",
                "index 49a2d2b545..c6b770a846 100644",
                "--- a/assemblies/features/standard/src/main/feature/feature.xml",
                "+++ b/assemblies/features/standard/src/main/feature/feature.xml",
                "@@ -185,7 +185,2 @@",
                "-            #",
                "-            # Role name used for SSH access authorization",
                "-            # If not set, this defaults to the ${karaf.admin.role} configured in etc/system.properties",
                "-            #",
                "-            # sshRole = admin"
            ],
            "changed_files": [
                "assemblies/features/standard/src/main/feature/feature.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5455": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5455",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a23ee51742dbefab22810d0803ffd1aeff2b8df8",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1511439097,
            "hunks": 1,
            "message": "[KARAF-5475] Fix timezone string computation",
            "diff": [
                "diff --git a/audit/src/main/java/org/apache/karaf/audit/util/FastDateFormat.java b/audit/src/main/java/org/apache/karaf/audit/util/FastDateFormat.java",
                "index 968e4a77a2..0442ed7db9 100644",
                "--- a/audit/src/main/java/org/apache/karaf/audit/util/FastDateFormat.java",
                "+++ b/audit/src/main/java/org/apache/karaf/audit/util/FastDateFormat.java",
                "@@ -84,3 +84,5 @@ public class FastDateFormat {",
                "             } else {",
                "-                date = new SimpleDateFormat(pattern, locale).format(new Date(now));",
                "+                SimpleDateFormat sdf = new SimpleDateFormat(pattern, locale);",
                "+                sdf.setCalendar(Calendar.getInstance(timeZone, locale));",
                "+                date = sdf.format(new Date(now));",
                "             }"
            ],
            "changed_files": [
                "audit/src/main/java/org/apache/karaf/audit/util/FastDateFormat.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5475": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5475",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "20f383065ef0c16d68b1a77c1a8e1166c9b286f6",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1507553767,
            "hunks": 3,
            "message": "KARAF-5413 - Added missing version in features.xml descriptors",
            "diff": [
                "diff --git a/assemblies/features/standard/src/main/feature/feature.xml b/assemblies/features/standard/src/main/feature/feature.xml",
                "index 487d4ea034..5404af0751 100644",
                "--- a/assemblies/features/standard/src/main/feature/feature.xml",
                "+++ b/assemblies/features/standard/src/main/feature/feature.xml",
                "@@ -115,3 +115,3 @@",
                "-    <feature name=\"jaas-boot\" hidden=\"true\">",
                "+    <feature name=\"jaas-boot\" hidden=\"true\" version=\"${project.version}\">",
                "         <library export=\"true\" delegate=\"true\" type=\"boot\">",
                "@@ -562,3 +562,3 @@",
                "-    <feature name=\"pax-http-service\" description=\"Pax-Web OSGi HTTP Service\">",
                "+    <feature name=\"pax-http-service\" description=\"Pax-Web OSGi HTTP Service\" version=\"${project.version}\">",
                "         <feature>pax-http</feature>",
                "@@ -974,3 +974,3 @@",
                "-    <feature name=\"wrap\" description=\"Wrap URL handler\">",
                "+    <feature name=\"wrap\" description=\"Wrap URL handler\" version=\"${project.version}\">",
                "         <bundle start=\"true\" start-level=\"5\">mvn:org.ops4j.pax.url/pax-url-wrap/${pax.url.version}/jar/uber</bundle>"
            ],
            "changed_files": [
                "assemblies/features/standard/src/main/feature/feature.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5413": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5413",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "cefe274d7936e0c93815eca830e8c94e3217660c",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1507882275,
            "hunks": 5,
            "message": "[KARAF-5103] Update quickstart for Karaf 4.1.0 and recent camel",
            "diff": [
                "diff --git a/manual/src/main/asciidoc/quick-start.adoc b/manual/src/main/asciidoc/quick-start.adoc",
                "index 16094fb898..c36eb171c0 100644",
                "--- a/manual/src/main/asciidoc/quick-start.adoc",
                "+++ b/manual/src/main/asciidoc/quick-start.adoc",
                "@@ -51,3 +51,3 @@ You should see the following information on the command line console:",
                "-  Apache Karaf (4.0.0)",
                "+  Apache Karaf (4.1.0)",
                "@@ -122,10 +122,22 @@ While you will learn in the Karaf user's guide how to fully use and leverage Apa",
                "-In the console, run the following commands:",
                "+Copy and paste the following commands in the console:",
                " ----",
                "-karaf@root()> feature:repo-add camel 2.15.2",
                "-Adding feature url mvn:org.apache.camel.karaf/apache-camel/2.15.2/xml/features",
                "-karaf@root()> feature:install camel-spring",
                "-karaf@root()> bundle:install -s mvn:org.apache.camel/camel-example-osgi/2.15.2",
                "-Bundle ID: 82",
                "+feature:repo-add camel 2.20.0",
                "+feature:install deployer camel-blueprint aries-blueprint",
                "+cat > deploy/example.xml <<END",
                "+<blueprint xmlns=\"http://www.osgi.org/xmlns/blueprint/v1.0.0\">",
                "+",
                "+    <camelContext xmlns=\"http://camel.apache.org/schema/blueprint\">",
                "+        <route>",
                "+            <from uri=\"timer://test?fixedRate=true&amp;period=2000\" />",
                "+            <setBody>",
                "+                <simple>Message at ${date:now:yyyy-MM-dd HH:mm:ss}</simple>",
                "+            </setBody>",
                "+            <to uri=\"log:test\" />",
                "+        </route>",
                "+    </camelContext>",
                "+",
                "+</blueprint>",
                "+END",
                " ----",
                "@@ -140,7 +152,4 @@ karaf@root()> log:display",
                " ...",
                "-2015-06-30 13:39:44,731 | INFO  |  timer://myTimer | ExampleRouter                    | 53 - org.apache.camel.camel-core - 2.15.2 | Exchange[ExchangePattern: InOnly, BodyType: String, Body: SpringDSL set body:  Tue Jun 30 13:39:44 CEST 2015]",
                "-2015-06-30 13:39:46,730 | INFO  |  timer://myTimer | MyTransform                      | 82 - camel-example-osgi - 2.15.2 | >>>> SpringDSL set body:  Tue Jun 30 13:39:46 CEST 2015",
                "-2015-06-30 13:39:46,731 | INFO  |  timer://myTimer | ExampleRouter                    | 53 - org.apache.camel.camel-core - 2.15.2 | Exchange[ExchangePattern: InOnly, BodyType: String, Body: SpringDSL set body:  Tue Jun 30 13:39:46 CEST 2015]",
                "-2015-06-30 13:39:48,730 | INFO  |  timer://myTimer | MyTransform                      | 82 - camel-example-osgi - 2.15.2 | >>>> SpringDSL set body:  Tue Jun 30 13:39:48 CEST 2015",
                "-2015-06-30 13:39:48,730 | INFO  |  timer://myTimer | ExampleRouter                    | 53 - org.apache.camel.camel-core - 2.15.2 | Exchange[ExchangePattern: InOnly, BodyType: String, Body: SpringDSL set body:  Tue Jun 30 13:39:48 CEST 2015]",
                "+2017-10-13 10:04:11,225 | INFO  | 7 - timer://test | test                             | 28 - org.apache.camel.camel-core - 2.20.0 | Exchange[ExchangePattern: InOnly, BodyType: String, Body: Message at 2017-10-13 10:04:11]",
                "+2017-10-13 10:04:13,225 | INFO  | 7 - timer://test | test                             | 28 - org.apache.camel.camel-core - 2.20.0 | Exchange[ExchangePattern: InOnly, BodyType: String, Body: Message at 2017-10-13 10:04:13]",
                " ----",
                "@@ -152,4 +161,4 @@ To stop and uninstall the demo, run the following command:",
                " ----",
                "-karaf@root()> bundle:stop camel-example-osgi",
                "-karaf@root()> bundle:uninstall camel-example-osgi",
                "+karaf@root()> bundle:stop example.xml",
                "+karaf@root()> bundle:uninstall example.xml",
                " ----"
            ],
            "changed_files": [
                "manual/src/main/asciidoc/quick-start.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5103": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.1.3",
                "karaf-4.1.4",
                "karaf-4.1.5",
                "karaf-4.1.6",
                "karaf-4.1.7"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5103",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "36b6a4677fd99f06545628d82138f31439d7d78e",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1510219763,
            "hunks": 0,
            "message": "Merge pull request #393 from tadayosi/master Remove unnecessary code",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "393": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 393",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "48f26e60dd42a44f3cb7f3142b0ce7c4b3158018",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1508316023,
            "hunks": 1,
            "message": "[KARAF-5429] Upgrade Narayana to version 5.7.0.Final",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index ed2f721bc8..71b5416446 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -247,3 +247,3 @@",
                "         <guava.version>20.0</guava.version>",
                "-        <narayana.version>5.6.4.Final</narayana.version>",
                "+        <narayana.version>5.7.0.Final</narayana.version>",
                "         <hibernate.annotations.common.version>3.3.0.ga</hibernate.annotations.common.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5429": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5429",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "94cd1e0b096fc4b1c6972107ef7c8f15df4afa74",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1510129642,
            "hunks": 1,
            "message": "[KARAF-5467]more fix",
            "diff": [
                "diff --git a/assemblies/features/base/src/main/filtered-resources/resources/bin/inc b/assemblies/features/base/src/main/filtered-resources/resources/bin/inc",
                "index 67433ae123..6f2dc6c3f6 100644",
                "--- a/assemblies/features/base/src/main/filtered-resources/resources/bin/inc",
                "+++ b/assemblies/features/base/src/main/filtered-resources/resources/bin/inc",
                "@@ -266,4 +266,6 @@ setupDefaults() {",
                "         VERSION=$(\"${JAVA}\" -version 2>&1 | egrep '\"([0-9].[0-9]\\..*[0-9]).*\"' | awk '{print substr($3,2,length($3)-2)}' | awk '{print substr($1, 3, 3)}' | sed -e 's;\\.;;g')",
                "-        if [ \"x${VERSION}\" = \"x\" ]; then",
                "-            VERSION=90",
                "+        MAJOR_VERSION=$(\"${JAVA}\" -version 2>&1 \\",
                "+            |awk -F '\"' '/version/ {print $2}')",
                "+        if [ \"${MAJOR_VERSION:0:1}\" -ge \"9\" ]; then",
                "+           VERSION=90",
                "         fi"
            ],
            "changed_files": [
                "assemblies/features/base/src/main/filtered-resources/resources/bin/inc"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5467": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5467",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "af1219ee9e512eb4492235e22a08219913b9971a",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1511346793,
            "hunks": 5,
            "message": "KARAF-5498 - SyncopeLoginModule parses roles instead of groups for Syncope 2.0.x  - Adding a configuration option to fall back to parsing the roles if required.",
            "diff": [
                "diff --git a/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/syncope/SyncopeLoginModule.java b/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/syncope/SyncopeLoginModule.java",
                "index 1e194b633f..0b172c37bd 100644",
                "--- a/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/syncope/SyncopeLoginModule.java",
                "+++ b/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/syncope/SyncopeLoginModule.java",
                "@@ -46,2 +46,3 @@ public class SyncopeLoginModule extends AbstractKarafLoginModule {",
                "     public final static String VERSION = \"version\";",
                "+    public final static String USE_ROLES_FOR_SYNCOPE2 = \"useRolesForSyncope2\";",
                "     public final static String ADMIN_USER = \"admin.user\"; // for the backing engine",
                "@@ -51,2 +52,3 @@ public class SyncopeLoginModule extends AbstractKarafLoginModule {",
                "     private String version;",
                "+    private boolean useRolesForSyncope2;",
                "@@ -56,2 +58,5 @@ public class SyncopeLoginModule extends AbstractKarafLoginModule {",
                "         version = (String) options.get(VERSION);",
                "+        if (options.containsKey(USE_ROLES_FOR_SYNCOPE2)) {",
                "+            useRolesForSyncope2 = Boolean.parseBoolean((String) options.get(USE_ROLES_FOR_SYNCOPE2));",
                "+        }",
                "     }",
                "@@ -163,3 +168,3 @@ public class SyncopeLoginModule extends AbstractKarafLoginModule {",
                "      * @return the list of user roles.",
                "-     * @throws Exception in case of extractiong failure.",
                "+     * @throws Exception in case of extracting failure.",
                "      */",
                "@@ -170,3 +175,16 @@ public class SyncopeLoginModule extends AbstractKarafLoginModule {",
                "             JSONParser parser = new JSONParser(response);",
                "-            return (List<String>) parser.getParsed().get(\"roles\");",
                "+            if (useRolesForSyncope2) {",
                "+                return (List<String>) parser.getParsed().get(\"roles\");",
                "+            } else {",
                "+                // extract the <memberships> element if it exists",
                "+                List<Map<String, String>> memberships =",
                "+                    (List<Map<String, String>>) parser.getParsed().get(\"memberships\");",
                "+                if (memberships != null) {",
                "+                    for (Map<String, String> membership : memberships) {",
                "+                        if (membership.containsKey(\"groupName\")) {",
                "+                            roles.add(membership.get(\"groupName\"));",
                "+                        }",
                "+                    }",
                "+                }",
                "+            }",
                "         }"
            ],
            "changed_files": [
                "jaas/modules/src/main/java/org/apache/karaf/jaas/modules/syncope/SyncopeLoginModule.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5498": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5498",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "92b505c70583b518e19693597d34cb449d9c1422",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1511170208,
            "hunks": 6,
            "message": "[KARAF-5494] Merge branch 'master' of https://github.com/mhus/karaf into mhus-master",
            "diff": [
                "diff --cc tooling/karaf-services-maven-plugin/src/main/java/org/apache/karaf/tooling/tracker/GenerateServiceMetadata.java",
                "index 7b0fd373b3,bd0aa50d9b..d2fd670604",
                "--- a/tooling/karaf-services-maven-plugin/src/main/java/org/apache/karaf/tooling/tracker/GenerateServiceMetadata.java",
                "+++ b/tooling/karaf-services-maven-plugin/src/main/java/org/apache/karaf/tooling/tracker/GenerateServiceMetadata.java",
                "@@@ -98,3 -101,3 +101,3 @@@ public class GenerateServiceMetadata ex",
                "                  if (classUrl == null || !classUrl.getPath().startsWith(outputDirectoryUrl.getPath())) {",
                "-                     System.out.println(\"Ignoring \" + classUrl);",
                " -                \t\tgetLog().info(\"Ignoring \" + classUrl);",
                "++                    getLog().info(\"Ignoring \" + classUrl);",
                "                      continue;",
                "@@@ -130,2 -133,3 +133,3 @@@",
                "              if (activators.size() == 1) {",
                " -        \t\t\tgetLog().info(\"Activator \" + activators.get(0).getName());",
                "++                getLog().info(\"Activator \" + activators.get(0).getName());",
                "                  project.getProperties().setProperty(activatorProperty, activators.get(0).getName());",
                "@@@ -138,2 -142,3 +142,3 @@@",
                "              for (Class<?> clazz : services) {",
                " -            \t\tgetLog().info(\"Service \" + clazz.getPackage().getName());",
                "++                getLog().info(\"Service \" + clazz.getPackage().getName());",
                "                  packages.add(clazz.getPackage().getName());",
                "@@@ -191,8 -196,13 +196,13 @@@",
                "--            urls.add( new File(project.getBuild().getOutputDirectory()).toURI().toURL() );",
                "--            for ( Artifact artifact : project.getArtifacts() ) {",
                "-                 File file = artifact.getFile();",
                "-                 if ( file != null ) {",
                "-                     urls.add( file.toURI().toURL() );",
                " -            \t\tif (artifactInclude != null && artifactInclude.length() > 0 && artifact.getArtifactId().matches(artifactInclude)) {",
                " -\t                File file = artifact.getFile();",
                " -\t                if ( file != null ) {",
                " -            \t\t\t\tgetLog().debug(\"Use artifact \" + artifact.getArtifactId() + \": \" + file);",
                " -\t                    urls.add( file.toURI().toURL() );",
                " -\t                }",
                " -            \t\t} else {",
                " -            \t\t\tgetLog().debug(\"Ignore artifact \" + artifact.getArtifactId() );",
                " -            \t\t}",
                "++            urls.add(new File(project.getBuild().getOutputDirectory()).toURI().toURL());",
                "++            for (Artifact artifact : project.getArtifacts()) {",
                "++                if (artifactInclude != null && artifactInclude.length() > 0 && artifact.getArtifactId().matches(artifactInclude)) {",
                "++                    File file = artifact.getFile();",
                "++                    if (file != null) {",
                "++                        getLog().debug(\"Use artifact \" + artifact.getArtifactId() + \": \" + file);",
                "++                        urls.add(file.toURI().toURL());",
                "++                    }",
                "++                } else {",
                "++                    getLog().debug(\"Ignore artifact \" + artifact.getArtifactId());",
                " +                }",
                "              }"
            ],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5494": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5494",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "25745245c5655a3f86ac7fd75a289f00a9d0b08e",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1509024371,
            "hunks": 4,
            "message": "[KARAF-5023] Fix regression when using \"config:property-delete --pid\"",
            "diff": [
                "diff --git a/config/src/main/java/org/apache/karaf/config/core/impl/ConfigRepositoryImpl.java b/config/src/main/java/org/apache/karaf/config/core/impl/ConfigRepositoryImpl.java",
                "index 04b38f019d..898c88c9e9 100644",
                "--- a/config/src/main/java/org/apache/karaf/config/core/impl/ConfigRepositoryImpl.java",
                "+++ b/config/src/main/java/org/apache/karaf/config/core/impl/ConfigRepositoryImpl.java",
                "@@ -26,4 +26,6 @@ import java.util.Dictionary;",
                " import java.util.Enumeration;",
                "+import java.util.HashSet;",
                " import java.util.Hashtable;",
                " import java.util.Map;",
                "+import java.util.Set;",
                "@@ -64,2 +66,3 @@ public class ConfigRepositoryImpl implements ConfigRepository {",
                "                 props.putAll(properties);",
                "+                props.keySet().retainAll(properties.keySet());",
                "                 props.save(file);",
                "@@ -71,2 +74,3 @@ public class ConfigRepositoryImpl implements ConfigRepository {",
                "                 props.putAll(properties);",
                "+                props.keySet().retainAll(properties.keySet());",
                "                 props.save(file);"
            ],
            "changed_files": [
                "config/src/main/java/org/apache/karaf/config/core/impl/ConfigRepositoryImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5023": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5023",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "1a240598c6cb593ab32ef91ede9aca6eb6ea96f4",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1511161441,
            "hunks": 11,
            "message": "[KARAF-5475] Fix tests to be timezone independent",
            "diff": [
                "diff --git a/audit/src/main/java/org/apache/karaf/audit/Activator.java b/audit/src/main/java/org/apache/karaf/audit/Activator.java",
                "index 1066aed3a1..bc1ddf5d4f 100644",
                "--- a/audit/src/main/java/org/apache/karaf/audit/Activator.java",
                "+++ b/audit/src/main/java/org/apache/karaf/audit/Activator.java",
                "@@ -53,2 +53,3 @@ import java.util.NoSuchElementException;",
                " import java.util.Set;",
                "+import java.util.TimeZone;",
                " import java.util.concurrent.ArrayBlockingQueue;",
                "@@ -188,3 +189,5 @@ public class Activator extends BaseActivator implements ManagedService {",
                "                         getInt(prefix + \".priority\", 5),",
                "-                        getInt(prefix + \".enterprise\", Rfc5424Layout.DEFAULT_ENTERPRISE_NUMBER));",
                "+                        getInt(prefix + \".enterprise\", Rfc5424Layout.DEFAULT_ENTERPRISE_NUMBER),",
                "+                        TimeZone.getDefault(),",
                "+                        Locale.ENGLISH);",
                "             case \"rfc5424\":",
                "@@ -192,3 +195,4 @@ public class Activator extends BaseActivator implements ManagedService {",
                "                                          getInt(prefix + \".priority\", 5),",
                "-                                         getInt(prefix + \".enterprise\", Rfc5424Layout.DEFAULT_ENTERPRISE_NUMBER));",
                "+                                         getInt(prefix + \".enterprise\", Rfc5424Layout.DEFAULT_ENTERPRISE_NUMBER),",
                "+                                         TimeZone.getDefault());",
                "             case \"gelf\":",
                "diff --git a/audit/src/main/java/org/apache/karaf/audit/layout/Rfc3164Layout.java b/audit/src/main/java/org/apache/karaf/audit/layout/Rfc3164Layout.java",
                "index 0f77985a15..0e3e984cab 100644",
                "--- a/audit/src/main/java/org/apache/karaf/audit/layout/Rfc3164Layout.java",
                "+++ b/audit/src/main/java/org/apache/karaf/audit/layout/Rfc3164Layout.java",
                "@@ -23,2 +23,4 @@ import org.apache.karaf.audit.util.FastDateFormat;",
                " import java.io.IOException;",
                "+import java.util.Locale;",
                "+import java.util.TimeZone;",
                "@@ -31,2 +33,3 @@ public class Rfc3164Layout extends AbstractLayout {",
                "     protected final int enterpriseNumber;",
                "+    protected final FastDateFormat fastDateFormat;",
                "@@ -36,5 +39,3 @@ public class Rfc3164Layout extends AbstractLayout {",
                "-    protected FastDateFormat fastDateFormat = new FastDateFormat();",
                "-",
                "-    public Rfc3164Layout(int facility, int priority, int enterpriseNumber) {",
                "+    public Rfc3164Layout(int facility, int priority, int enterpriseNumber, TimeZone timeZone, Locale locale) {",
                "         super(new Buffer(Buffer.Format.Syslog));",
                "@@ -43,2 +44,3 @@ public class Rfc3164Layout extends AbstractLayout {",
                "         this.enterpriseNumber = enterpriseNumber;",
                "+        this.fastDateFormat = new FastDateFormat(timeZone, locale);",
                "diff --git a/audit/src/main/java/org/apache/karaf/audit/layout/Rfc5424Layout.java b/audit/src/main/java/org/apache/karaf/audit/layout/Rfc5424Layout.java",
                "index 5bd314ba32..3980cb184f 100644",
                "--- a/audit/src/main/java/org/apache/karaf/audit/layout/Rfc5424Layout.java",
                "+++ b/audit/src/main/java/org/apache/karaf/audit/layout/Rfc5424Layout.java",
                "@@ -23,2 +23,4 @@ import org.apache.karaf.audit.util.FastDateFormat;",
                " import java.io.IOException;",
                "+import java.util.Locale;",
                "+import java.util.TimeZone;",
                "@@ -31,2 +33,3 @@ public class Rfc5424Layout extends AbstractLayout {",
                "     protected final int enterpriseNumber;",
                "+    protected final FastDateFormat fastDateFormat;",
                "@@ -36,6 +39,5 @@ public class Rfc5424Layout extends AbstractLayout {",
                "-    protected FastDateFormat fastDateFormat = new FastDateFormat();",
                "-",
                "-    public Rfc5424Layout(int facility, int priority, int enterpriseNumber) {",
                "+    public Rfc5424Layout(int facility, int priority, int enterpriseNumber, TimeZone timeZone) {",
                "         super(new Buffer(Buffer.Format.Syslog));",
                "+        this.fastDateFormat = new FastDateFormat(timeZone, Locale.ENGLISH);",
                "         this.facility = facility;"
            ],
            "changed_files": [
                "audit/src/main/java/org/apache/karaf/audit/Activator.java",
                "audit/src/main/java/org/apache/karaf/audit/layout/Rfc3164Layout.java",
                "audit/src/main/java/org/apache/karaf/audit/layout/Rfc5424Layout.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5475": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5475",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ed4a35c667a7a8ad1ae3ab3105612559a8c63d1b",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1511346793,
            "hunks": 5,
            "message": "[KARAF-5498] SyncopeLoginModule parses roles instead of groups for Syncope 2.0.x",
            "diff": [
                "diff --git a/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/syncope/SyncopeLoginModule.java b/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/syncope/SyncopeLoginModule.java",
                "index 64d56d8ad5..0caacfb9ad 100644",
                "--- a/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/syncope/SyncopeLoginModule.java",
                "+++ b/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/syncope/SyncopeLoginModule.java",
                "@@ -47,2 +47,3 @@ public class SyncopeLoginModule extends AbstractKarafLoginModule {",
                "     public final static String VERSION = \"version\";",
                "+    public final static String USE_ROLES_FOR_SYNCOPE2 = \"useRolesForSyncope2\";",
                "     public final static String ADMIN_USER = \"admin.user\"; // for the backing engine",
                "@@ -52,2 +53,3 @@ public class SyncopeLoginModule extends AbstractKarafLoginModule {",
                "     private String version;",
                "+    private boolean useRolesForSyncope2;",
                "@@ -57,2 +59,5 @@ public class SyncopeLoginModule extends AbstractKarafLoginModule {",
                "         version = (String) options.get(VERSION);",
                "+        if (options.containsKey(USE_ROLES_FOR_SYNCOPE2)) {",
                "+            useRolesForSyncope2 = Boolean.parseBoolean((String) options.get(USE_ROLES_FOR_SYNCOPE2));",
                "+        }",
                "     }",
                "@@ -166,3 +171,3 @@ public class SyncopeLoginModule extends AbstractKarafLoginModule {",
                "      * @return the list of user roles.",
                "-     * @throws Exception in case of extractiong failure.",
                "+     * @throws Exception in case of extracting failure.",
                "      */",
                "@@ -172,3 +177,16 @@ public class SyncopeLoginModule extends AbstractKarafLoginModule {",
                "             JSONParser parser = new JSONParser(response);",
                "-            return (List<String>) parser.getParsed().get(\"roles\");",
                "+            if (useRolesForSyncope2) {",
                "+                return (List<String>) parser.getParsed().get(\"roles\");",
                "+            } else {",
                "+                // extract the <memberships> element if it exists",
                "+                List<Map<String, String>> memberships =",
                "+                    (List<Map<String, String>>) parser.getParsed().get(\"memberships\");",
                "+                if (memberships != null) {",
                "+                    for (Map<String, String> membership : memberships) {",
                "+                        if (membership.containsKey(\"groupName\")) {",
                "+                            roles.add(membership.get(\"groupName\"));",
                "+                        }",
                "+                    }",
                "+                }",
                "+            }",
                "         }"
            ],
            "changed_files": [
                "jaas/modules/src/main/java/org/apache/karaf/jaas/modules/syncope/SyncopeLoginModule.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5498": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.1.4",
                "karaf-4.1.5",
                "karaf-4.1.6",
                "karaf-4.1.7"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5498",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e7ca1e209f02d844a481bb5d95a351aba47c8c6c",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1507742242,
            "hunks": 10,
            "message": "[KARAF-5417] Trim down distributions",
            "diff": [
                "diff --git a/assemblies/apache-karaf-minimal/pom.xml b/assemblies/apache-karaf-minimal/pom.xml",
                "index 7133a10b73..4a853f7eb9 100644",
                "--- a/assemblies/apache-karaf-minimal/pom.xml",
                "+++ b/assemblies/apache-karaf-minimal/pom.xml",
                "@@ -120,5 +120,2 @@",
                "                 <configuration>",
                "-                    <installedFeatures>",
                "-                        <feature>wrapper</feature>",
                "-                    </installedFeatures>",
                "                     <bootFeatures>",
                "@@ -128,13 +125,5 @@",
                "                         <feature>ssh</feature>",
                "-                        <feature>management</feature>",
                "                         <feature>bundle</feature>",
                "                         <feature>config</feature>",
                "-                        <feature>deployer</feature>",
                "-                        <feature>diagnostic</feature>",
                "-                        <feature>instance</feature>",
                "-                        <feature>kar</feature>",
                "                         <feature>log</feature>",
                "-                        <feature>package</feature>",
                "-                        <feature>service</feature>",
                "-                        <feature>system</feature>",
                "                     </bootFeatures>",
                "@@ -148,3 +137,20 @@",
                "             </plugin>",
                "-",
                "+            <plugin>",
                "+                <artifactId>maven-antrun-plugin</artifactId>",
                "+                <executions>",
                "+                    <execution>",
                "+                        <id>fix-distro</id>",
                "+                        <phase>prepare-package</phase>",
                "+                        <goals>",
                "+                            <goal>run</goal>",
                "+                        </goals>",
                "+                        <configuration>",
                "+                            <target>",
                "+                                <delete dir=\"${project.build.directory}/assembly/system/org/eclipse\" />",
                "+                                <delete dir=\"${project.build.directory}/assembly/system/org/ops4j/pax/logging/pax-logging-logback\" />",
                "+                            </target>",
                "+                        </configuration>",
                "+                    </execution>",
                "+                </executions>",
                "+            </plugin>",
                "         </plugins>",
                "diff --git a/assemblies/apache-karaf/pom.xml b/assemblies/apache-karaf/pom.xml",
                "index ca81c6793f..d90d55a9ec 100644",
                "--- a/assemblies/apache-karaf/pom.xml",
                "+++ b/assemblies/apache-karaf/pom.xml",
                "@@ -166,2 +166,4 @@",
                "                         <feature>wrapper</feature>",
                "+                        <feature>aries-blueprint</feature>",
                "+                        <feature>shell-compat</feature>",
                "                     </installedFeatures>",
                "@@ -172,5 +174,3 @@",
                "                         <feature>wrap</feature>",
                "-                        <feature>aries-blueprint</feature>",
                "                         <feature>shell</feature>",
                "-                        <feature>shell-compat</feature>",
                "                         <feature>feature</feature>",
                "@@ -192,18 +192,2 @@",
                "                     <libraries>",
                "-                        <library>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.xerces/${xerces.version};type:=endorsed;export:=true;delegate:=true</library>",
                "-                        <library>mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.jaxp-api-1.4/${servicemix.specs.version};type:=endorsed;export:=true</library>",
                "-                        <library>mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.jaxb-api-2.2/${servicemix.specs.version};type:=endorsed;export:=true</library>",
                "-                        <library>mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.jaxws-api-2.2/${servicemix.specs.version};type:=endorsed;export:=true</library>",
                "-                        <library>mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.saaj-api-1.3/${servicemix.specs.version};type:=endorsed;export:=true</library>",
                "-                        <library>mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.activation-api-1.1/${servicemix.specs.version};type:=endorsed;export:=true</library>",
                "-                        <library>mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.stax-api-1.2/${servicemix.specs.version};type:=endorsed;export:=true</library>",
                "-                        <library>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.xalan/${xalan.bundle.version};type:=endorsed;export:=true</library>",
                "-                        <library>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.xalan-serializer/${xalan-serializer.bundle.version};type:=endorsed;export:=true</library>",
                "-                        <library>mvn:javax.annotation/javax.annotation-api/1.2;type:=endorsed;export:=true</library>",
                "-",
                "-                        <library>mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.activator/${servicemix.specs.version};type:=default;export:=true</library>",
                "-                        <library>mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.locator/${servicemix.specs.version};type:=default;export:=true</library>",
                "-",
                "-                        <library>mvn:net.java.dev.jna/jna/${jna.version};type:=boot;export:=false</library>",
                "-                        <library>mvn:net.java.dev.jna/jna-platform/${jna.version};type:=boot;export:=false</library>",
                "                     </libraries>",
                "diff --git a/tooling/karaf-maven-plugin/src/main/resources/META-INF/plexus/components.xml b/tooling/karaf-maven-plugin/src/main/resources/META-INF/plexus/components.xml",
                "index c86b142a2e..2891bb81f9 100644",
                "--- a/tooling/karaf-maven-plugin/src/main/resources/META-INF/plexus/components.xml",
                "+++ b/tooling/karaf-maven-plugin/src/main/resources/META-INF/plexus/components.xml",
                "@@ -123,2 +123,4 @@",
                "                             </compile>",
                "+                            <prepare-package>",
                "+                            </prepare-package>",
                "                             <package>"
            ],
            "changed_files": [
                "assemblies/apache-karaf-minimal/pom.xml",
                "assemblies/apache-karaf/pom.xml",
                "tooling/karaf-maven-plugin/src/main/resources/META-INF/plexus/components.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "KARAF-5417": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: KARAF-5417",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "552a173b85d596a7686d4f6db6f116bb64205505",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1511789749,
            "hunks": 2,
            "message": "Exclude MavenTest from surefire execution to give us time to investigate",
            "diff": [
                "diff --git a/itests/pom.xml b/itests/pom.xml",
                "index cfe3e5e9fd..8e6f61f74d 100644",
                "--- a/itests/pom.xml",
                "+++ b/itests/pom.xml",
                "@@ -270,2 +270,5 @@",
                "                     </systemPropertyVariables>",
                "+                    <excludes>",
                "+                        <exclude>MavenTest</exclude>",
                "+                    </excludes>",
                "                 </configuration>",
                "@@ -318,2 +321,5 @@",
                "                         <configuration>",
                "+                            <excludes>",
                "+                                <exclude>MavenTest</exclude>",
                "+                            </excludes>",
                "                             <systemPropertyVariables>"
            ],
            "changed_files": [
                "itests/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "01ca22e97802538ec037759daf9b46a080543807",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1507798227,
            "hunks": 0,
            "message": "Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/karaf",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "f0843c9021152c43bb076d145cead1c8777e70ea",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1508169109,
            "hunks": 1,
            "message": "Fix build on Java 9",
            "diff": [
                "diff --git a/.mvn/jvm.config b/.mvn/jvm.config",
                "new file mode 100644",
                "index 0000000000..b2949cb1d3",
                "--- /dev/null",
                "+++ b/.mvn/jvm.config",
                "@@ -0,0 +1 @@",
                "+--add-modules java.xml.bind"
            ],
            "changed_files": [
                ".mvn/jvm.config"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "e03196e7574bfabb4c0f7f1c67d1ba4c5ead63d3",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1507731179,
            "hunks": 32,
            "message": "Remove start=\"true\" attribute on bundle dependencies as it's the default value",
            "diff": [
                "diff --git a/assemblies/features/framework/src/main/feature/feature.xml b/assemblies/features/framework/src/main/feature/feature.xml",
                "index 6dbe1a150d..5184536e22 100644",
                "--- a/assemblies/features/framework/src/main/feature/feature.xml",
                "+++ b/assemblies/features/framework/src/main/feature/feature.xml",
                "@@ -25,14 +25,14 @@",
                "         <!-- persistent wiring extension -->",
                "-        <bundle start=\"true\" start-level=\"1\">mvn:org.apache.karaf.features/org.apache.karaf.features.extension/${project.version}</bundle>",
                "+        <bundle start-level=\"1\">mvn:org.apache.karaf.features/org.apache.karaf.features.extension/${project.version}</bundle>",
                "         <!-- mvn: and wrap: url handlers -->",
                "-        <bundle start=\"true\" start-level=\"5\">mvn:org.ops4j.pax.url/pax-url-aether/${pax.url.version}</bundle>",
                "+        <bundle start-level=\"5\">mvn:org.ops4j.pax.url/pax-url-aether/${pax.url.version}</bundle>",
                "         <!-- logging -->",
                "-        <bundle start=\"true\" start-level=\"8\">mvn:org.ops4j.pax.logging/pax-logging-api/${pax.logging.version}</bundle>",
                "-        <bundle start=\"true\" start-level=\"8\">mvn:org.ops4j.pax.logging/pax-logging-log4j2/${pax.logging.version}</bundle>",
                "+        <bundle start-level=\"8\">mvn:org.ops4j.pax.logging/pax-logging-api/${pax.logging.version}</bundle>",
                "+        <bundle start-level=\"8\">mvn:org.ops4j.pax.logging/pax-logging-log4j2/${pax.logging.version}</bundle>",
                "         <!-- config admin -->",
                "-        <bundle start=\"true\" start-level=\"10\">mvn:org.apache.felix/org.apache.felix.configadmin/${felix.configadmin.version}</bundle>",
                "+        <bundle start-level=\"10\">mvn:org.apache.felix/org.apache.felix.configadmin/${felix.configadmin.version}</bundle>",
                "         <!-- file install -->",
                "-        <bundle start=\"true\" start-level=\"11\">mvn:org.apache.felix/org.apache.felix.fileinstall/${felix.fileinstall.version}</bundle>",
                "+        <bundle start-level=\"11\">mvn:org.apache.felix/org.apache.felix.fileinstall/${felix.fileinstall.version}</bundle>",
                "         <!-- features service -->",
                "-        <bundle start=\"true\" start-level=\"15\">mvn:org.apache.karaf.features/org.apache.karaf.features.core/${project.version}</bundle>",
                "+        <bundle start-level=\"15\">mvn:org.apache.karaf.features/org.apache.karaf.features.core/${project.version}</bundle>",
                "     </feature>",
                "@@ -41,14 +41,14 @@",
                "         <!-- persistent wiring extension -->",
                "-        <bundle start=\"true\" start-level=\"1\">mvn:org.apache.karaf.features/org.apache.karaf.features.extension/${project.version}</bundle>",
                "+        <bundle start-level=\"1\">mvn:org.apache.karaf.features/org.apache.karaf.features.extension/${project.version}</bundle>",
                "         <!-- mvn: and wrap: url handlers -->",
                "-        <bundle start=\"true\" start-level=\"5\">mvn:org.ops4j.pax.url/pax-url-aether/${pax.url.version}</bundle>",
                "+        <bundle start-level=\"5\">mvn:org.ops4j.pax.url/pax-url-aether/${pax.url.version}</bundle>",
                "         <!-- logging -->",
                "-        <bundle start=\"true\" start-level=\"8\">mvn:org.ops4j.pax.logging/pax-logging-api/${pax.logging.version}</bundle>",
                "-        <bundle start=\"true\" start-level=\"8\">mvn:org.ops4j.pax.logging/pax-logging-logback/${pax.logging.version}</bundle>",
                "+        <bundle start-level=\"8\">mvn:org.ops4j.pax.logging/pax-logging-api/${pax.logging.version}</bundle>",
                "+        <bundle start-level=\"8\">mvn:org.ops4j.pax.logging/pax-logging-logback/${pax.logging.version}</bundle>",
                "         <!-- config admin -->",
                "-        <bundle start=\"true\" start-level=\"10\">mvn:org.apache.felix/org.apache.felix.configadmin/${felix.configadmin.version}</bundle>",
                "+        <bundle start-level=\"10\">mvn:org.apache.felix/org.apache.felix.configadmin/${felix.configadmin.version}</bundle>",
                "         <!-- file install -->",
                "-        <bundle start=\"true\" start-level=\"11\">mvn:org.apache.felix/org.apache.felix.fileinstall/${felix.fileinstall.version}</bundle>",
                "+        <bundle start-level=\"11\">mvn:org.apache.felix/org.apache.felix.fileinstall/${felix.fileinstall.version}</bundle>",
                "         <!-- features service -->",
                "-        <bundle start=\"true\" start-level=\"15\">mvn:org.apache.karaf.features/org.apache.karaf.features.core/${project.version}</bundle>",
                "+        <bundle start-level=\"15\">mvn:org.apache.karaf.features/org.apache.karaf.features.core/${project.version}</bundle>",
                "     </feature>",
                "diff --git a/assemblies/features/standard/src/main/feature/feature.xml b/assemblies/features/standard/src/main/feature/feature.xml",
                "index 487d4ea034..f2d7683df5 100644",
                "--- a/assemblies/features/standard/src/main/feature/feature.xml",
                "+++ b/assemblies/features/standard/src/main/feature/feature.xml",
                "@@ -29,3 +29,3 @@",
                "         <feature>aries-proxy</feature>",
                "-        <bundle start=\"true\" start-level=\"10\">mvn:org.apache.karaf.service/org.apache.karaf.service.guard/${project.version}</bundle>",
                "+        <bundle start-level=\"10\">mvn:org.apache.karaf.service/org.apache.karaf.service.guard/${project.version}</bundle>",
                "     </feature>",
                "@@ -269,6 +269,6 @@",
                "     <feature name=\"deployer\" description=\"Karaf Deployer\" version=\"${project.version}\">",
                "-        <bundle start=\"true\" start-level=\"26\">mvn:org.apache.karaf.deployer/org.apache.karaf.deployer.features/${project.version}</bundle>",
                "+        <bundle start-level=\"26\">mvn:org.apache.karaf.deployer/org.apache.karaf.deployer.features/${project.version}</bundle>",
                "         <conditional>",
                "             <condition>wrap</condition>",
                "-            <bundle start=\"true\" start-level=\"24\">mvn:org.apache.karaf.deployer/org.apache.karaf.deployer.wrap/${project.version}</bundle>",
                "+            <bundle start-level=\"24\">mvn:org.apache.karaf.deployer/org.apache.karaf.deployer.wrap/${project.version}</bundle>",
                "         </conditional>",
                "@@ -276,3 +276,3 @@",
                "             <condition>req:osgi.extender;filter:=\"(&amp;(osgi.extender=osgi.blueprint)(version>=1.0))\"</condition>",
                "-            <bundle start=\"true\" start-level=\"24\">mvn:org.apache.karaf.deployer/org.apache.karaf.deployer.blueprint/${project.version}</bundle>",
                "+            <bundle start-level=\"24\">mvn:org.apache.karaf.deployer/org.apache.karaf.deployer.blueprint/${project.version}</bundle>",
                "         </conditional>",
                "@@ -280,3 +280,3 @@",
                "             <condition>kar</condition>",
                "-            <bundle start=\"true\" start-level=\"24\">mvn:org.apache.karaf.deployer/org.apache.karaf.deployer.kar/${project.version}</bundle>",
                "+            <bundle start-level=\"24\">mvn:org.apache.karaf.deployer/org.apache.karaf.deployer.kar/${project.version}</bundle>",
                "         </conditional>",
                "@@ -300,3 +300,3 @@",
                "         <feature>jaas-boot</feature>",
                "-        <bundle start-level=\"30\" start=\"true\">mvn:org.apache.karaf.bundle/org.apache.karaf.bundle.core/${project.version}</bundle>",
                "+        <bundle start-level=\"30\">mvn:org.apache.karaf.bundle/org.apache.karaf.bundle.core/${project.version}</bundle>",
                "         <conditional>",
                "@@ -358,3 +358,3 @@",
                "     <feature name=\"config\" description=\"Provide OSGi ConfigAdmin support\" version=\"${project.version}\">",
                "-        <bundle start-level=\"30\" start=\"true\">mvn:org.apache.karaf.config/org.apache.karaf.config.core/${project.version}</bundle>",
                "+        <bundle start-level=\"30\">mvn:org.apache.karaf.config/org.apache.karaf.config.core/${project.version}</bundle>",
                "         <conditional>",
                "@@ -430,3 +430,3 @@",
                "     <feature name=\"diagnostic\" description=\"Provide Diagnostic support\" version=\"${project.version}\">",
                "-        <bundle start-level=\"30\" start=\"true\">mvn:org.apache.karaf.diagnostic/org.apache.karaf.diagnostic.core/${project.version}</bundle>",
                "+        <bundle start-level=\"30\">mvn:org.apache.karaf.diagnostic/org.apache.karaf.diagnostic.core/${project.version}</bundle>",
                "         <library export=\"true\" type=\"boot\">",
                "@@ -437,3 +437,3 @@",
                "     <feature name=\"instance\" description=\"Provide Instance support\" version=\"${project.version}\">",
                "-        <bundle start-level=\"30\" start=\"true\">mvn:org.apache.karaf.instance/org.apache.karaf.instance.core/${project.version}</bundle>",
                "+        <bundle start-level=\"30\">mvn:org.apache.karaf.instance/org.apache.karaf.instance.core/${project.version}</bundle>",
                "     </feature>",
                "@@ -486,7 +486,7 @@",
                "         <feature>jaas-boot</feature>",
                "-        <bundle start-level=\"30\" start=\"true\">mvn:org.apache.karaf.jaas/org.apache.karaf.jaas.config/${project.version}</bundle>",
                "-        <bundle start-level=\"30\" start=\"true\">mvn:org.apache.karaf.jaas/org.apache.karaf.jaas.modules/${project.version}</bundle>",
                "+        <bundle start-level=\"30\">mvn:org.apache.karaf.jaas/org.apache.karaf.jaas.config/${project.version}</bundle>",
                "+        <bundle start-level=\"30\">mvn:org.apache.karaf.jaas/org.apache.karaf.jaas.modules/${project.version}</bundle>",
                "         <conditional>",
                "             <condition>aries-blueprint</condition>",
                "-            <bundle start-level=\"30\" start=\"true\">mvn:org.apache.karaf.jaas.blueprint/org.apache.karaf.jaas.blueprint.config/${project.version}</bundle>",
                "+            <bundle start-level=\"30\">mvn:org.apache.karaf.jaas.blueprint/org.apache.karaf.jaas.blueprint.config/${project.version}</bundle>",
                "         </conditional>",
                "@@ -500,3 +500,3 @@",
                "             </config>",
                "-            <bundle start-level=\"30\" start=\"true\">mvn:org.apache.karaf.jaas/org.apache.karaf.jaas.command/${project.version}</bundle>",
                "+            <bundle start-level=\"30\">mvn:org.apache.karaf.jaas/org.apache.karaf.jaas.command/${project.version}</bundle>",
                "         </conditional>",
                "@@ -524,3 +524,3 @@",
                "         </config>",
                "-        <bundle start-level=\"30\" start=\"true\">mvn:org.apache.karaf.log/org.apache.karaf.log.core/${project.version}</bundle>",
                "+        <bundle start-level=\"30\">mvn:org.apache.karaf.log/org.apache.karaf.log.core/${project.version}</bundle>",
                "     </feature>",
                "@@ -532,3 +532,3 @@",
                "     <feature name=\"service\" description=\"Provide Service support\" version=\"${project.version}\">",
                "-        <bundle start-level=\"30\" start=\"true\">mvn:org.apache.karaf.service/org.apache.karaf.service.core/${project.version}</bundle>",
                "+        <bundle start-level=\"30\">mvn:org.apache.karaf.service/org.apache.karaf.service.core/${project.version}</bundle>",
                "     </feature>",
                "@@ -536,3 +536,3 @@",
                "     <feature name=\"system\" description=\"Provide System support\" version=\"${project.version}\">",
                "-        <bundle start-level=\"30\" start=\"true\">mvn:org.apache.karaf.system/org.apache.karaf.system.core/${project.version}</bundle>",
                "+        <bundle start-level=\"30\">mvn:org.apache.karaf.system/org.apache.karaf.system.core/${project.version}</bundle>",
                "         <conditional>",
                "@@ -674,5 +674,5 @@",
                "         <feature>jaas</feature>",
                "-        <bundle start=\"true\" start-level=\"30\">mvn:org.apache.sshd/sshd-core/${sshd.version}</bundle>",
                "-        <bundle start=\"true\" start-level=\"30\">mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.not-yet-commons-ssl/0.3.11_1</bundle>",
                "-        <bundle start=\"true\" start-level=\"30\">mvn:org.apache.karaf.shell/org.apache.karaf.shell.ssh/${project.version}</bundle>",
                "+        <bundle start-level=\"30\">mvn:org.apache.sshd/sshd-core/${sshd.version}</bundle>",
                "+        <bundle start-level=\"30\">mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.not-yet-commons-ssl/0.3.11_1</bundle>",
                "+        <bundle start-level=\"30\">mvn:org.apache.karaf.shell/org.apache.karaf.shell.ssh/${project.version}</bundle>",
                "     </feature>",
                "@@ -937,3 +937,3 @@",
                "             <condition>aries-blueprint</condition>",
                "-            <bundle start-level=\"30\" start=\"true\">mvn:org.apache.karaf.jaas.blueprint/org.apache.karaf.jaas.blueprint.jasypt/${project.version}</bundle>",
                "+            <bundle start-level=\"30\">mvn:org.apache.karaf.jaas.blueprint/org.apache.karaf.jaas.blueprint.jasypt/${project.version}</bundle>",
                "         </conditional>",
                "@@ -941,3 +941,3 @@",
                "             <condition>spring</condition>",
                "-            <bundle start-level=\"30\" start=\"true\">mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.jasypt-spring31/${jasypt.bundle.version}</bundle>",
                "+            <bundle start-level=\"30\">mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.jasypt-spring31/${jasypt.bundle.version}</bundle>",
                "         </conditional>",
                "@@ -975,3 +975,3 @@",
                "     <feature name=\"wrap\" description=\"Wrap URL handler\">",
                "-        <bundle start=\"true\" start-level=\"5\">mvn:org.ops4j.pax.url/pax-url-wrap/${pax.url.version}/jar/uber</bundle>",
                "+        <bundle start-level=\"5\">mvn:org.ops4j.pax.url/pax-url-wrap/${pax.url.version}/jar/uber</bundle>",
                "     </feature>",
                "@@ -999,3 +999,3 @@",
                "         <feature>shell</feature>",
                "-        <bundle start-level=\"30\" start=\"true\">mvn:org.apache.karaf.maven/org.apache.karaf.maven.core/${project.version}</bundle>",
                "+        <bundle start-level=\"30\">mvn:org.apache.karaf.maven/org.apache.karaf.maven.core/${project.version}</bundle>",
                "         <bundle dependency=\"true\">mvn:org.apache.commons/commons-lang3/${commons-lang3.version}</bundle>"
            ],
            "changed_files": [
                "assemblies/features/framework/src/main/feature/feature.xml",
                "assemblies/features/standard/src/main/feature/feature.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "e7473daedc8cfbab865430545ab0b6d721cf07f1",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1508169867,
            "hunks": 0,
            "message": "Fix previous commit which fails with JDK 1.8",
            "diff": [
                "diff --git a/.mvn/jvm.config b/.mvn/jvm.config",
                "deleted file mode 100644",
                "index b2949cb1d3..0000000000",
                "--- a/.mvn/jvm.config",
                "+++ /dev/null",
                "@@ -1 +0,0 @@",
                "---add-modules java.xml.bind",
                "diff --git a/.mvn/jvm9.config b/.mvn/jvm9.config",
                "new file mode 100644",
                "index 0000000000..e69de29bb2"
            ],
            "changed_files": [
                ".mvn/jvm.config",
                ".mvn/jvm9.config"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "965ac924cc6547849a3d731639b583e98fe048ba",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1508327890,
            "hunks": 1,
            "message": "Fix typo in comment",
            "diff": [
                "diff --git a/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/properties/PropertiesBackingEngine.java b/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/properties/PropertiesBackingEngine.java",
                "index 9435f0cb51..7ad3dcb4d3 100644",
                "--- a/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/properties/PropertiesBackingEngine.java",
                "+++ b/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/properties/PropertiesBackingEngine.java",
                "@@ -247,3 +247,3 @@ public class PropertiesBackingEngine implements BackingEngine {",
                "-        // nobody is using this group any more, remote it",
                "+        // nobody is using this group any more, remove it",
                "         deleteUser(GROUP_PREFIX + group);"
            ],
            "changed_files": [
                "jaas/modules/src/main/java/org/apache/karaf/jaas/modules/properties/PropertiesBackingEngine.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "d4ed5e5f47be5ce52adee57b04b2d6726908af84",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1510139137,
            "hunks": 3,
            "message": "localRepositoryPath works now for maven-invoker-plugin tests (real local repository as remote in it/",
            "diff": [
                "diff --git a/tooling/karaf-maven-plugin/pom.xml b/tooling/karaf-maven-plugin/pom.xml",
                "index fc91e9b1ca..4ea78ab2f3 100644",
                "--- a/tooling/karaf-maven-plugin/pom.xml",
                "+++ b/tooling/karaf-maven-plugin/pom.xml",
                "@@ -37,2 +37,4 @@",
                "         <mvn.opts />",
                "+        <invoker.skip />",
                "+        <compiler.fork />",
                "         <jacoco-class-line-covered-ratio>0.00</jacoco-class-line-covered-ratio>",
                "@@ -231,2 +233,11 @@",
                "         </resources>",
                "+        <testResources>",
                "+            <testResource>",
                "+                <directory>${project.basedir}/src/test/resources</directory>",
                "+            </testResource>",
                "+            <testResource>",
                "+                <directory>${project.basedir}/src/test/filtered-resources</directory>",
                "+                <filtering>true</filtering>",
                "+            </testResource>",
                "+        </testResources>",
                "         <plugins>",
                "@@ -252,4 +263,5 @@",
                "                     <postBuildHookScript>verify</postBuildHookScript>",
                "-                    <!--<localRepositoryPath>${project.build.directory}/system</localRepositoryPath>-->",
                "-                    <!--<settingsFile>src/it/settings.xml</settingsFile>-->",
                "+                    <localRepositoryPath>${project.build.directory}/system</localRepositoryPath>",
                "+                    <settingsFile>${project.build.testOutputDirectory}/settings.xml</settingsFile>",
                "+                    <mergeUserSettings>true</mergeUserSettings>",
                "                     <mavenOpts>${mvn.opts}</mavenOpts>"
            ],
            "changed_files": [
                "tooling/karaf-maven-plugin/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "0f836ace5c992a7e2d349fc828f8329731c1d86f",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1507906083,
            "hunks": 2,
            "message": "Handle nullable values in Dependency dependency and prerequisite are nullable, adjust equals() and hashCode() accordingly. Signed-off-by: Stephen Kitt <skitt@redhat.com>",
            "diff": [
                "diff --git a/features/core/src/main/java/org/apache/karaf/features/internal/model/Dependency.java b/features/core/src/main/java/org/apache/karaf/features/internal/model/Dependency.java",
                "index d9b9272fd8..f0042040a7 100644",
                "--- a/features/core/src/main/java/org/apache/karaf/features/internal/model/Dependency.java",
                "+++ b/features/core/src/main/java/org/apache/karaf/features/internal/model/Dependency.java",
                "@@ -144,4 +144,4 @@ public class Dependency implements org.apache.karaf.features.Dependency {",
                "-        if (prerequisite != that.prerequisite) return false;",
                "-        if (dependency != that.dependency) return false;",
                "+        if (prerequisite != null ? !prerequisite.equals(that.prerequisite) : that.prerequisite != null) return false;",
                "+        if (dependency != null ? !dependency.equals(that.dependency) : that.dependency != null) return false;",
                "         if (name != null ? !name.equals(that.name) : that.name != null) return false;",
                "@@ -155,4 +155,4 @@ public class Dependency implements org.apache.karaf.features.Dependency {",
                "         result = 31 * result + (version != null ? version.hashCode() : 0);",
                "-        result = 31 * result + (prerequisite ? 1 : 0);",
                "-        result = 31 * result + (dependency ? 1 : 0);",
                "+        result = 31 * result + (prerequisite != null ? prerequisite.hashCode() : 0);",
                "+        result = 31 * result + (dependency != null ? dependency.hashCode() : 0);",
                "         return result;"
            ],
            "changed_files": [
                "features/core/src/main/java/org/apache/karaf/features/internal/model/Dependency.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "af032857a7c7ea787a74453461406000fda478d3",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1501175612,
            "hunks": 11,
            "message": "Fix karaf scheduler interface abstraction leak on exceptions Wrap quartz SchedulerException in SchedulerError instead of using the private exception class in the scheduler API.",
            "diff": [
                "diff --git a/scheduler/src/main/java/org/apache/karaf/scheduler/Scheduler.java b/scheduler/src/main/java/org/apache/karaf/scheduler/Scheduler.java",
                "index 90bd766914..dda0b0ea91 100644",
                "--- a/scheduler/src/main/java/org/apache/karaf/scheduler/Scheduler.java",
                "+++ b/scheduler/src/main/java/org/apache/karaf/scheduler/Scheduler.java",
                "@@ -22,4 +22,2 @@ import java.util.Map;",
                "-import org.quartz.SchedulerException;",
                "-",
                " /**",
                "@@ -76,3 +74,3 @@ public interface Scheduler {",
                "      * @param options Required options defining how to schedule the job.",
                "-     * @throws SchedulerException if the job can't be scheduled.",
                "+     * @throws SchedulerError if the job can't be scheduled.",
                "      * @throws IllegalArgumentException If the preconditions are not met.",
                "@@ -84,3 +82,3 @@ public interface Scheduler {",
                "      */",
                "-    void schedule(Object job, ScheduleOptions options) throws IllegalArgumentException, SchedulerException;",
                "+    void schedule(Object job, ScheduleOptions options) throws IllegalArgumentException, SchedulerError;",
                "@@ -94,3 +92,3 @@ public interface Scheduler {",
                "-    Map<Object, ScheduleOptions> getJobs() throws SchedulerException;",
                "+    Map<Object, ScheduleOptions> getJobs() throws SchedulerError;",
                "diff --git a/scheduler/src/main/java/org/apache/karaf/scheduler/SchedulerError.java b/scheduler/src/main/java/org/apache/karaf/scheduler/SchedulerError.java",
                "new file mode 100644",
                "index 0000000000..49705c1067",
                "--- /dev/null",
                "+++ b/scheduler/src/main/java/org/apache/karaf/scheduler/SchedulerError.java",
                "@@ -0,0 +1,35 @@",
                "+/*",
                "+ * Copyright 2017 The Apache Software Foundation.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.karaf.scheduler;",
                "+",
                "+public class SchedulerError extends Exception {",
                "+",
                "+    public SchedulerError() {",
                "+    }",
                "+",
                "+    public SchedulerError(String msg) {",
                "+        super(msg);",
                "+    }",
                "+",
                "+    public SchedulerError(Throwable cause) {",
                "+        super(cause);",
                "+    }",
                "+",
                "+    public SchedulerError(String msg, Throwable cause) {",
                "+        super(msg, cause);",
                "+    }",
                "+",
                "+}",
                "diff --git a/scheduler/src/main/java/org/apache/karaf/scheduler/core/QuartzScheduler.java b/scheduler/src/main/java/org/apache/karaf/scheduler/core/QuartzScheduler.java",
                "index 6b7309e18d..f02fcfc849 100644",
                "--- a/scheduler/src/main/java/org/apache/karaf/scheduler/core/QuartzScheduler.java",
                "+++ b/scheduler/src/main/java/org/apache/karaf/scheduler/core/QuartzScheduler.java",
                "@@ -27,2 +27,3 @@ import org.apache.karaf.scheduler.ScheduleOptions;",
                " import org.apache.karaf.scheduler.Scheduler;",
                "+import org.apache.karaf.scheduler.SchedulerError;",
                " import org.quartz.JobBuilder;",
                "@@ -207,3 +208,3 @@ public class QuartzScheduler implements Scheduler {",
                "      */",
                "-    public void schedule(final Object job, final ScheduleOptions options) throws IllegalArgumentException, SchedulerException {",
                "+    public void schedule(final Object job, final ScheduleOptions options) throws IllegalArgumentException, SchedulerError {",
                "         this.checkJob(job);",
                "@@ -253,3 +254,7 @@ public class QuartzScheduler implements Scheduler {",
                "         this.logger.debug(\"Scheduling job {} with name {} and trigger {}\", job, name, trigger);",
                "-        s.scheduleJob(detail, trigger);",
                "+        try {",
                "+            s.scheduleJob(detail, trigger);",
                "+        } catch (SchedulerException ex) {",
                "+            throw new SchedulerError(ex);",
                "+        }",
                "     }",
                "@@ -278,16 +283,20 @@ public class QuartzScheduler implements Scheduler {",
                "     @Override",
                "-    public Map<Object, ScheduleOptions> getJobs() throws SchedulerException {",
                "-        Map<Object, ScheduleOptions> jobs = new HashMap<>();",
                "-        org.quartz.Scheduler s = this.scheduler;",
                "-        if (s != null) {",
                "-            for (String group : s.getJobGroupNames()) {",
                "-                for (JobKey key : s.getJobKeys(GroupMatcher.jobGroupEquals(group))) {",
                "-                    JobDetail detail = s.getJobDetail(key);",
                "-                    ScheduleOptions options = (ScheduleOptions) detail.getJobDataMap().get(DATA_MAP_OPTIONS);",
                "-                    Object job = detail.getJobDataMap().get(DATA_MAP_OBJECT);",
                "-                    jobs.put(job, options);",
                "+    public Map<Object, ScheduleOptions> getJobs() throws SchedulerError {",
                "+        try {",
                "+            Map<Object, ScheduleOptions> jobs = new HashMap<>();",
                "+            org.quartz.Scheduler s = this.scheduler;",
                "+            if (s != null) {",
                "+                for (String group : s.getJobGroupNames()) {",
                "+                    for (JobKey key : s.getJobKeys(GroupMatcher.jobGroupEquals(group))) {",
                "+                        JobDetail detail = s.getJobDetail(key);",
                "+                        ScheduleOptions options = (ScheduleOptions) detail.getJobDataMap().get(DATA_MAP_OPTIONS);",
                "+                        Object job = detail.getJobDataMap().get(DATA_MAP_OBJECT);",
                "+                        jobs.put(job, options);",
                "+                    }",
                "                 }",
                "             }",
                "+            return jobs;",
                "+        } catch (SchedulerException ex) {",
                "+            throw new SchedulerError(ex);",
                "         }",
                "-        return jobs;",
                "     }"
            ],
            "changed_files": [
                "scheduler/src/main/java/org/apache/karaf/scheduler/Scheduler.java",
                "scheduler/src/main/java/org/apache/karaf/scheduler/SchedulerError.java",
                "scheduler/src/main/java/org/apache/karaf/scheduler/core/QuartzScheduler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.1.4",
                "karaf-4.1.5",
                "karaf-4.1.6",
                "karaf-4.1.7"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "f56fd1bdf126536cf1db1bf504b38214db657908",
            "repository": "https://github.com/apache/karaf",
            "timestamp": 1507795325,
            "hunks": 1,
            "message": "Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/karaf Conflicts: \tassemblies/features/standard/src/main/feature/feature.xml",
            "diff": [
                "diff --cc assemblies/features/standard/src/main/feature/feature.xml",
                "index 5404af0751,f2d7683df5..4fabaf10b3",
                "--- a/assemblies/features/standard/src/main/feature/feature.xml",
                "+++ b/assemblies/features/standard/src/main/feature/feature.xml",
                "@@@ -974,4 -974,4 +974,4 @@@",
                " -    <feature name=\"wrap\" description=\"Wrap URL handler\">",
                " +    <feature name=\"wrap\" description=\"Wrap URL handler\" version=\"${project.version}\">",
                "-         <bundle start=\"true\" start-level=\"5\">mvn:org.ops4j.pax.url/pax-url-wrap/${pax.url.version}/jar/uber</bundle>",
                "+         <bundle start-level=\"5\">mvn:org.ops4j.pax.url/pax-url-wrap/${pax.url.version}/jar/uber</bundle>",
                "      </feature>"
            ],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "karaf-4.2.0",
                "karaf-4.2.0.M1",
                "karaf-4.2.0.M2",
                "karaf-4.2.1",
                "karaf-4.2.10",
                "karaf-4.2.11",
                "karaf-4.2.12",
                "karaf-4.2.13",
                "karaf-4.2.14",
                "karaf-4.2.15",
                "karaf-4.2.16",
                "karaf-4.2.2",
                "karaf-4.2.3",
                "karaf-4.2.4",
                "karaf-4.2.5",
                "karaf-4.2.6",
                "karaf-4.2.7",
                "karaf-4.2.8",
                "karaf-4.2.9",
                "karaf-4.3.0",
                "karaf-4.3.0.RC1",
                "karaf-4.3.1",
                "karaf-4.3.10",
                "karaf-4.3.2",
                "karaf-4.3.3",
                "karaf-4.3.4",
                "karaf-4.3.5",
                "karaf-4.3.6",
                "karaf-4.3.7",
                "karaf-4.3.8",
                "karaf-4.3.9",
                "karaf-4.4.0",
                "karaf-4.4.1",
                "karaf-4.4.2",
                "karaf-4.4.3",
                "karaf-4.4.4",
                "karaf-4.4.5",
                "karaf-4.4.6"
            ],
            "matched_rules": []
        }
    ]
}
