{
    "advisory_record": {
        "cve_id": "CVE-2018-17228",
        "description": "nmap4j 1.1.0 allows attackers to execute arbitrary commands via shell metacharacters in an includeHosts call.",
        "reserved_timestamp": 1664755200,
        "published_timestamp": 1664814131,
        "updated_timestamp": 1664814131,
        "repository_url": null,
        "references": {
            "": 62,
            "https://github.com/narkisr/nmap4j/issues/9": 3,
            "commit::06b58aa3345d2f977553685a026b93e61f0c491e": 3,
            "https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax": 2,
            "https://github.com/features/actions": 1,
            "https://github.com/features/packages": 1,
            "https://github.com/features/security": 1,
            "https://github.com/features/codespaces": 1,
            "https://github.com/features/copilot": 1,
            "https://github.com/features/code-review": 1,
            "https://github.com/features/issues": 1,
            "https://github.com/features/discussions": 1,
            "https://github.com/features": 1,
            "https://docs.github.com": 1,
            "https://skills.github.com": 1,
            "https://github.blog": 1,
            "https://github.com/enterprise": 1,
            "https://github.com/team": 1,
            "https://github.com/enterprise/startups": 1,
            "https://github.com/solutions/industries/healthcare": 1,
            "https://github.com/solutions/industries/financial-services": 1,
            "https://github.com/solutions/industries/manufacturing": 1,
            "https://github.com/solutions/ci-cd": 1,
            "https://github.com/solutions/devops": 1,
            "https://github.com/solutions/devsecops": 1,
            "https://resources.github.com/learn/pathways": 1,
            "https://resources.github.com": 1,
            "https://github.com/customer-stories": 1,
            "https://partner.github.com": 1,
            "https://github.com/readme": 1,
            "https://github.com/topics": 1,
            "https://github.com/trending": 1,
            "https://github.com/collections": 1,
            "https://github.com/enterprise/advanced-security": 1,
            "https://github.com/pricing": 1,
            "https://docs.github.com/terms": 1,
            "https://docs.github.com/privacy": 1,
            "http://118.24.74.232:4999/test.hta": 1,
            "https://nvd.nist.gov/vuln/detail/CVE-2018-17228": 1,
            "http://www.testhostname.com": 1,
            "https://github.com": 1,
            "https://docs.github.com/site-policy/github-terms/github-terms-of-service": 1,
            "https://docs.github.com/site-policy/privacy-policies/github-privacy-statement": 1,
            "https://github.com/security": 1,
            "https://www.githubstatus.com/": 1,
            "https://docs.github.com/": 1,
            "https://support.github.com?tags=dotcom-footer": 1
        },
        "affected_products": [
            "n/a"
        ],
        "versions": {
            "status": "affected",
            "version": "n/a"
        },
        "files": [
            "includeHosts"
        ],
        "keywords": [
            "command",
            "attacker",
            "execute",
            "nmap4j",
            "includehost",
            "metacharacter",
            "allow",
            "call"
        ],
        "files_extension": [],
        "has_fixing_commit": true
    },
    "commits": [
        {
            "commit_id": "06b58aa3345d2f977553685a026b93e61f0c491e",
            "repository": "https://github.com/narkisr/nmap4j",
            "timestamp": 1538048433,
            "hunks": 14,
            "message": "Adding hosts validation fixing https://github.com/narkisr/nmap4j/issues/9",
            "diff": [
                "diff --git a/src/main/java/org/nmap4j/Nmap4j.java b/src/main/java/org/nmap4j/Nmap4j.java",
                "index 80294b4..e02865e 100644",
                "--- a/src/main/java/org/nmap4j/Nmap4j.java",
                "+++ b/src/main/java/org/nmap4j/Nmap4j.java",
                "@@ -10,2 +10,3 @@ import org.nmap4j.data.NMapRun;",
                " import org.nmap4j.parser.OnePassParser;",
                "+import org.nmap4j.valid.HostsInputValidator;",
                "@@ -13,3 +14,3 @@ import org.nmap4j.parser.OnePassParser;",
                " /**",
                "- * This is the simplified way to execute and parse Nmap output.  This is the ",
                "+ * This is the simplified way to execute and parse Nmap output.  This is the",
                "  * easiest way to run Nmap from this API.  Use of this class requires a little",
                "@@ -23,7 +24,7 @@ import org.nmap4j.parser.OnePassParser;",
                "  * nmap4j.addFlags( \"-T3 -oX - -O -sV\" ) ;",
                "- * nmap4j.execute() ; ",
                "+ * nmap4j.execute() ;",
                "  * if( !nma4j.hasError() ) {",
                "- *   NMapRun nmapRun = nmap4j.getResults() ;",
                "+ * NMapRun nmapRun = nmap4j.getResults() ;",
                "  * } else {",
                "- * \t System.out.println( nmap4j.getExecutionResults().getErrors() ) ;",
                "+ * System.out.println( nmap4j.getExecutionResults().getErrors() ) ;",
                "  * }",
                "@@ -33,115 +34,123 @@ import org.nmap4j.parser.OnePassParser;",
                "  * different exceptions.",
                "- * ",
                "- * @author jsvede",
                "  *",
                "+ * @author jsvede",
                "  */",
                " public class Nmap4j implements INmap4j {",
                "-\t",
                "-\tprivate NMapProperties nmapProperties ;",
                "-\tprivate ArgumentProperties flags ;",
                "-\tprivate NMapExecutor nmapExecutor ;",
                "-\tprivate ExecutionResults results ;",
                "-\t",
                "-\t/**",
                "-\t * Constructs this object with the path specified.  This path needs to be",
                "-\t * the path to your Nmap binary.  On many systems this will be something",
                "-\t * like \"/usr/local\".  Additionally, this will also be the path to the",
                "-\t * data dir required by Nmap.",
                "-\t * @param path",
                "-\t */",
                "-\tpublic Nmap4j( String path ) {",
                "-\t\tnmapProperties = new NMapProperties( path ) ;",
                "-\t\tflags = new ArgumentProperties() ;",
                "-\t}",
                "-\t",
                "-\t/**",
                "-\t * Executes the nmap scan with the parameters set.  You should have ",
                "-\t * called addFlags() with appropriate Nmap flags prior to executing the",
                "-\t * scan.",
                "-\t * ",
                "-\t * @throws NMapInitializationException",
                "-\t * @throws NMapExecutionException",
                "-\t */",
                "-\tpublic void execute() throws NMapInitializationException, NMapExecutionException {",
                "-\t\tnmapExecutor = new NMapExecutor( flags, nmapProperties ) ;",
                "-\t\tresults = nmapExecutor.execute() ;",
                "-\t}",
                "-\t",
                "-\t/**",
                "-\t * Add the appropriate flags to your scan.  Call this method with all the ",
                "-\t * flags you will want.  For example, if you want to scan for hosts, OS",
                "-\t * information and service information you would pass \"-sV -O -T4\". This ",
                "-\t * method will append \"-oX -\" if you did not supply it.",
                "-\t * ",
                "-\t * @param flagSet",
                "-\t */",
                "-\tpublic void addFlags( String flagSet ) {",
                "-\t\tStringBuilder sb = new StringBuilder() ;",
                "-\t\tsb.append( flagSet ) ;",
                "-\t\tif( !flagSet.contains( \"-oX\" ) ) {",
                "-\t\t\tsb.append( \" -oX -\" ) ;",
                "-\t\t}",
                "-\t\tflags.addFlag( sb.toString() ) ;",
                "-\t}",
                "-\t",
                "-\t/**",
                "-\t * Add a list of space delimited hosts that you want to scan.  This ",
                "-\t * list conforms to the requirements that Nmap sets forth.",
                "-\t * ",
                "-\t * @param hosts",
                "-\t */",
                "-\tpublic void includeHosts( String hosts )  {",
                "-\t\tflags.addIncludedHost( hosts ) ;",
                "-\t}",
                "-\t\t",
                "-\t/**",
                "-\t * Add a list of space delimited hosts to exclude.  Usually this is used",
                "-\t * when you specify a large included host list.  This allows you specify",
                "-\t * broad ranges host addresses and exclude some hosts within that range.",
                "-\t * ",
                "-\t * @param hosts",
                "-\t */",
                "-\tpublic void excludeHosts( String hosts ) {",
                "-\t\tflags.addExcludedHost( hosts ) ;",
                "-\t}",
                "-\t",
                "-\t/**",
                "-\t * Returns the raw output of the execution.",
                "-\t * @return",
                "-\t */",
                "-\tpublic String getOutput() {",
                "-\t\treturn results.getOutput() ;",
                "-\t}",
                "-\t",
                "-\t/**",
                "-\t * This method returns an object tree representing the XML nodes.",
                "-\t *  ",
                "-\t * @return",
                "-\t */",
                "-\tpublic NMapRun getResult() {",
                "-\t\tOnePassParser parser = new OnePassParser() ;",
                "-\t\tNMapRun nmapRun = parser.parse(results.getOutput(), OnePassParser.STRING_INPUT ) ;",
                "-\t\treturn nmapRun ;",
                "-\t}",
                "-\t",
                "-\t/**",
                "-\t * Checks the output for the word \"ERROR\" as Nmap will usually produce an",
                "-\t * error message that starts with ERROR though there are other scenarios. If",
                "-\t * the call to getResult() fails check the error output.",
                "-\t * @return",
                "-\t */",
                "-\tpublic boolean hasError() {",
                "-\t\treturn results.getErrors().contains( \"ERROR\") ;",
                "-\t}",
                "-\t",
                "-\t/**",
                "-\t * Use this method to get the raw results of the execution.  The ",
                "-\t * ExecutionResults contains the raw output, the errors and the",
                "-\t * command that was executed.",
                "-\t * @return",
                "-\t */",
                "-\tpublic ExecutionResults getExecutionResults() {",
                "-\t\treturn results ;",
                "-\t}",
                "-\t",
                "+",
                "+    private NMapProperties nmapProperties;",
                "+    private ArgumentProperties flags;",
                "+    private NMapExecutor nmapExecutor;",
                "+    private ExecutionResults results;",
                "+    private HostsInputValidator validator;",
                "+",
                "+    /**",
                "+     * Constructs this object with the path specified.  This path needs to be",
                "+     * the path to your Nmap binary.  On many systems this will be something",
                "+     * like \"/usr/local\".  Additionally, this will also be the path to the",
                "+     * data dir required by Nmap.",
                "+     *",
                "+     * @param path",
                "+     */",
                "+    public Nmap4j(String path) {",
                "+        nmapProperties = new NMapProperties(path);",
                "+        flags = new ArgumentProperties();",
                "+        validator = new HostsInputValidator();",
                "+    }",
                "+",
                "+    /**",
                "+     * Executes the nmap scan with the parameters set.  You should have",
                "+     * called addFlags() with appropriate Nmap flags prior to executing the",
                "+     * scan.",
                "+     *",
                "+     * @throws NMapInitializationException",
                "+     * @throws NMapExecutionException",
                "+     */",
                "+    public void execute() throws NMapInitializationException, NMapExecutionException {",
                "+        nmapExecutor = new NMapExecutor(flags, nmapProperties);",
                "+        results = nmapExecutor.execute();",
                "+    }",
                "+",
                "+    /**",
                "+     * Add the appropriate flags to your scan.  Call this method with all the",
                "+     * flags you will want.  For example, if you want to scan for hosts, OS",
                "+     * information and service information you would pass \"-sV -O -T4\". This",
                "+     * method will append \"-oX -\" if you did not supply it.",
                "+     *",
                "+     * @param flagSet",
                "+     */",
                "+    public void addFlags(String flagSet) {",
                "+        StringBuilder sb = new StringBuilder();",
                "+        sb.append(flagSet);",
                "+        if (!flagSet.contains(\"-oX\")) {",
                "+            sb.append(\" -oX -\");",
                "+        }",
                "+        flags.addFlag(sb.toString());",
                "+    }",
                "+",
                "+    /**",
                "+     * Add a list of space delimited hosts that you want to scan.  This",
                "+     * list conforms to the requirements that Nmap sets forth.",
                "+     *",
                "+     * @param hosts",
                "+     */",
                "+    public void includeHosts(String hosts) {",
                "+        if (!validator.valid(hosts)) {",
                "+            throw new RuntimeException(\"Non legal hosts parameter\");",
                "+        }",
                "+        flags.addIncludedHost(hosts);",
                "+    }",
                "+",
                "+    /**",
                "+     * Add a list of space delimited hosts to exclude.  Usually this is used",
                "+     * when you specify a large included host list.  This allows you specify",
                "+     * broad ranges host addresses and exclude some hosts within that range.",
                "+     *",
                "+     * @param hosts",
                "+     */",
                "+    public void excludeHosts(String hosts) {",
                "+        flags.addExcludedHost(hosts);",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns the raw output of the execution.",
                "+     *",
                "+     * @return",
                "+     */",
                "+    public String getOutput() {",
                "+        return results.getOutput();",
                "+    }",
                "+",
                "+    /**",
                "+     * This method returns an object tree representing the XML nodes.",
                "+     *",
                "+     * @return",
                "+     */",
                "+    public NMapRun getResult() {",
                "+        OnePassParser parser = new OnePassParser();",
                "+        NMapRun nmapRun = parser.parse(results.getOutput(), OnePassParser.STRING_INPUT);",
                "+        return nmapRun;",
                "+    }",
                "+",
                "+    /**",
                "+     * Checks the output for the word \"ERROR\" as Nmap will usually produce an",
                "+     * error message that starts with ERROR though there are other scenarios. If",
                "+     * the call to getResult() fails check the error output.",
                "+     *",
                "+     * @return",
                "+     */",
                "+    public boolean hasError() {",
                "+        return results.getErrors().contains(\"ERROR\");",
                "+    }",
                "+",
                "+    /**",
                "+     * Use this method to get the raw results of the execution.  The",
                "+     * ExecutionResults contains the raw output, the errors and the",
                "+     * command that was executed.",
                "+     *",
                "+     * @return",
                "+     */",
                "+    public ExecutionResults getExecutionResults() {",
                "+        return results;",
                "+    }",
                "+",
                " }",
                "diff --git a/src/main/java/org/nmap4j/valid/HostsInputValidator.java b/src/main/java/org/nmap4j/valid/HostsInputValidator.java",
                "index e579ef0..31eaa45 100644",
                "--- a/src/main/java/org/nmap4j/valid/HostsInputValidator.java",
                "+++ b/src/main/java/org/nmap4j/valid/HostsInputValidator.java",
                "@@ -4,5 +4,9 @@ import com.google.common.net.InternetDomainName;",
                "+import java.io.File;",
                " import java.util.regex.Pattern;",
                "-public class HostsValidator {",
                "+/**",
                "+ * nmap can scan over hostname, single ip, subnet, or using a file input",
                "+ */",
                "+public class HostsInputValidator {",
                "     private final static String IP_REGEX = \"^(([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\.){3}([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\";",
                "@@ -12,3 +16,3 @@ public class HostsValidator {",
                "     public boolean valid(String host) {",
                "-        return InternetDomainName.isValid(host) || ip(host) || subnet(host);",
                "+        return InternetDomainName.isValid(host) || isIp(host) || isSubnet(host) || isFile(host);",
                "     }",
                "@@ -16,3 +20,3 @@ public class HostsValidator {",
                "-    private boolean ip(final String ip) {",
                "+    private boolean isIp(final String ip) {",
                "         final Pattern PATTERN = Pattern.compile(IP_REGEX + \"$\");",
                "@@ -21,3 +25,3 @@ public class HostsValidator {",
                "-    private boolean subnet(final String subnet) {",
                "+    private boolean isSubnet(final String subnet) {",
                "         final Pattern PATTERN = Pattern.compile(IP_REGEX + IP_CIDR);",
                "@@ -26,2 +30,6 @@ public class HostsValidator {",
                "+    private boolean isFile(String host) {",
                "+        return new File(host).exists();",
                "+    }",
                "+",
                " }"
            ],
            "changed_files": [
                "src/main/java/org/nmap4j/Nmap4j.java",
                "src/main/java/org/nmap4j/valid/HostsInputValidator.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 3 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: includeHosts",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "1d1b903fd68fca2c730b5631baaedd36df9d4691",
            "repository": "https://github.com/narkisr/nmap4j",
            "timestamp": 1538034031,
            "hunks": 1,
            "message": "Update Port.java",
            "diff": [
                "diff --git a/src/main/java/org/nmap4j/data/host/ports/Port.java b/src/main/java/org/nmap4j/data/host/ports/Port.java",
                "index 226f8bc..537f12b 100644",
                "--- a/src/main/java/org/nmap4j/data/host/ports/Port.java",
                "+++ b/src/main/java/org/nmap4j/data/host/ports/Port.java",
                "@@ -79,3 +79,3 @@ public class Port {",
                " \tpublic String toString() {",
                "-\t\treturn \"Port [portId=\" + portId + \", protocol=\" + protocol + \"]\";",
                "+\t\treturn \"Port [portId=\" + portId + \", protocol=\" + protocol + \",service=\" + service + \"]\";",
                " \t}"
            ],
            "changed_files": [
                "src/main/java/org/nmap4j/data/host/ports/Port.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": []
        },
        {
            "commit_id": "3be15623bc9b253d91578a7038d00fdc3d27cb05",
            "repository": "https://github.com/narkisr/nmap4j",
            "timestamp": 1538048395,
            "hunks": 2,
            "message": "adding guava",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 478b301..e0ba8b5 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -3,41 +3,46 @@",
                "          xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">",
                "-  <modelVersion>4.0.0</modelVersion>",
                "-  <groupId>org.nmap4j</groupId>",
                "-  <artifactId>org.nmap4j</artifactId>",
                "-  <version>1.0.4</version>",
                "-  <description>Nmap4j</description>",
                "-  <dependencies>",
                "-  \t<dependency>",
                "-  \t\t<groupId>junit</groupId>",
                "-  \t\t<artifactId>junit</artifactId>",
                "-  \t\t<version>4.8</version>",
                "-  \t</dependency>",
                "-    <dependency>",
                "-        <groupId>org.apache.commons</groupId>",
                "-        <artifactId>commons-io</artifactId>",
                "-        <version>1.3.2</version>",
                "-    </dependency>",
                "-  </dependencies>",
                "-  <build>",
                "-    <plugins>",
                "-\t <plugin>",
                "-        <groupId>org.apache.maven.plugins</groupId>",
                "-        <artifactId>maven-compiler-plugin</artifactId>",
                "-        <configuration>",
                "-          <source>1.8</source>",
                "-          <target>1.8</target>",
                "-        </configuration>",
                "-      </plugin>",
                "-      <plugin>",
                "-        <groupId>org.apache.maven.plugins</groupId>",
                "-        <artifactId>maven-surefire-plugin</artifactId>",
                "-        <version>2.12.4</version>",
                "-        <configuration>",
                "-           <forkMode>pertest</forkMode>",
                "-           <argLine>-Xms1024m -Xmx1024m -XX:PermSize=256m -XX:MaxPermSize=256m</argLine>",
                "-           <testFailureIgnore>false</testFailureIgnore>",
                "-        </configuration>",
                "-      </plugin>",
                "-    </plugins>",
                "-  </build>",
                "+    <modelVersion>4.0.0</modelVersion>",
                "+    <groupId>org.nmap4j</groupId>",
                "+    <artifactId>org.nmap4j</artifactId>",
                "+    <version>1.0.4</version>",
                "+    <description>Nmap4j</description>",
                "+    <dependencies>",
                "+        <dependency>",
                "+            <groupId>junit</groupId>",
                "+            <artifactId>junit</artifactId>",
                "+            <version>4.8</version>",
                "+        </dependency>",
                "+        <dependency>",
                "+            <groupId>org.apache.commons</groupId>",
                "+            <artifactId>commons-io</artifactId>",
                "+            <version>1.3.2</version>",
                "+        </dependency>",
                "+        <dependency>",
                "+            <groupId>com.google.guava</groupId>",
                "+            <artifactId>guava</artifactId>",
                "+            <version>26.0-jre</version>",
                "+        </dependency>",
                "+    </dependencies>",
                "+    <build>",
                "+        <plugins>",
                "+            <plugin>",
                "+                <groupId>org.apache.maven.plugins</groupId>",
                "+                <artifactId>maven-compiler-plugin</artifactId>",
                "+                <configuration>",
                "+                    <source>1.8</source>",
                "+                    <target>1.8</target>",
                "+                </configuration>",
                "+            </plugin>",
                "+            <plugin>",
                "+                <groupId>org.apache.maven.plugins</groupId>",
                "+                <artifactId>maven-surefire-plugin</artifactId>",
                "+                <version>2.12.4</version>",
                "+                <configuration>",
                "+                    <forkMode>pertest</forkMode>",
                "+                    <argLine>-Xms1024m -Xmx1024m -XX:PermSize=256m -XX:MaxPermSize=256m</argLine>",
                "+                    <testFailureIgnore>false</testFailureIgnore>",
                "+                </configuration>",
                "+            </plugin>",
                "+        </plugins>",
                "+    </build>",
                " </project>",
                "diff --git a/src/main/java/org/nmap4j/valid/HostsInputValidator.java b/src/main/java/org/nmap4j/valid/HostsInputValidator.java",
                "new file mode 100644",
                "index 0000000..e579ef0",
                "--- /dev/null",
                "+++ b/src/main/java/org/nmap4j/valid/HostsInputValidator.java",
                "@@ -0,0 +1,27 @@",
                "+package org.nmap4j.valid;",
                "+",
                "+import com.google.common.net.InternetDomainName;",
                "+",
                "+import java.util.regex.Pattern;",
                "+",
                "+public class HostsValidator {",
                "+    private final static String IP_REGEX = \"^(([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\.){3}([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\";",
                "+",
                "+    private final static String IP_CIDR = \"(\\\\/([0-9]|[1-2][0-9]|3[0-2]))\";",
                "+",
                "+    public boolean valid(String host) {",
                "+        return InternetDomainName.isValid(host) || ip(host) || subnet(host);",
                "+    }",
                "+",
                "+",
                "+    private boolean ip(final String ip) {",
                "+        final Pattern PATTERN = Pattern.compile(IP_REGEX + \"$\");",
                "+        return PATTERN.matcher(ip).matches();",
                "+    }",
                "+",
                "+    private boolean subnet(final String subnet) {",
                "+        final Pattern PATTERN = Pattern.compile(IP_REGEX + IP_CIDR);",
                "+        return PATTERN.matcher(subnet).matches();",
                "+    }",
                "+",
                "+}"
            ],
            "changed_files": [
                "pom.xml",
                "src/main/java/org/nmap4j/valid/HostsInputValidator.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": []
        }
    ]
}
