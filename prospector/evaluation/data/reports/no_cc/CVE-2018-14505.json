{
    "advisory_record": {
        "cve_id": "CVE-2018-14505",
        "description": "mitmweb in mitmproxy v4.0.3 allows DNS Rebinding attacks, related to tools/web/app.py.",
        "reserved_timestamp": 1532217600,
        "published_timestamp": 1532282400,
        "updated_timestamp": 1532285821,
        "repository_url": null,
        "references": {
            "": 234,
            "https://github.com/mitmproxy/mitmproxy/pull/3243": 6,
            "https://github.com/mitmproxy/mitmproxy/issues/3234": 6,
            "https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax": 4,
            "https://github.com/atx": 3,
            "https://github.com/mhils": 3,
            "https://github.com/features/actions": 2,
            "https://github.com/features/packages": 2,
            "https://github.com/features/security": 2,
            "https://github.com/features/codespaces": 2,
            "https://github.com/features/copilot": 2,
            "https://github.com/features/code-review": 2,
            "https://github.com/features/issues": 2,
            "https://github.com/features/discussions": 2,
            "https://github.com/features": 2,
            "https://docs.github.com": 2,
            "https://skills.github.com": 2,
            "https://github.blog": 2,
            "https://github.com/enterprise": 2,
            "https://github.com/team": 2,
            "https://github.com/enterprise/startups": 2,
            "https://github.com/solutions/industries/healthcare": 2,
            "https://github.com/solutions/industries/financial-services": 2,
            "https://github.com/solutions/industries/manufacturing": 2,
            "https://github.com/solutions/ci-cd": 2,
            "https://github.com/solutions/devops": 2,
            "https://github.com/solutions/devsecops": 2,
            "https://resources.github.com/learn/pathways": 2,
            "https://resources.github.com": 2,
            "https://github.com/customer-stories": 2,
            "https://partner.github.com": 2,
            "https://github.com/readme": 2,
            "https://github.com/topics": 2,
            "https://github.com/trending": 2,
            "https://github.com/collections": 2,
            "https://github.com/enterprise/advanced-security": 2,
            "https://github.com/pricing": 2,
            "https://docs.github.com/terms": 2,
            "https://docs.github.com/privacy": 2,
            "commit::ae9177922911bd9d39b4fead45e196b51b2b9a84": 2,
            "commit::48ff616cefe899eb4de6d64957a1e291a7c022f5": 2,
            "https://github.com": 2,
            "https://docs.github.com/site-policy/github-terms/github-terms-of-service": 2,
            "https://docs.github.com/site-policy/privacy-policies/github-privacy-statement": 2,
            "https://github.com/security": 2,
            "https://www.githubstatus.com/": 2,
            "https://docs.github.com/": 2,
            "https://support.github.com?tags=dotcom-footer": 2,
            "commit::0e09f95f07e2d3f4f382809f47c998e1c6f47b19": 2,
            "https://github.com/chrisbecke": 2,
            "https://github.co/hiddenchars": 1,
            "http://www.tornadoweb.org/en/stable/guide/security.html#dns-rebinding": 1,
            "https://docs.github.com/articles/managing-disruptive-comments/#hiding-a-comment": 1,
            "commit::7f464b89296881f4d9ec032378c4418e832d17e3": 1,
            "https://github.com/mitmproxy/mitmproxy/pull/3243#event-1737546648": 1,
            "http://arya.atx.name/mmp.html": 1,
            "https://github.com/advisories/GHSA-6m53-c78q-7qmg": 1,
            "https://github.com/Kriechi": 1,
            "https://github.com/hoogi91": 1
        },
        "affected_products": [
            "n/a",
            "mitmweb"
        ],
        "versions": {
            "status": "affected",
            "version": "n/a"
        },
        "files": [
            "DNS",
            "app"
        ],
        "keywords": [
            "mitmweb",
            "rebinding",
            "tool",
            "allow",
            "attack",
            "relate",
            "mitmproxy"
        ],
        "files_extension": [
            "py"
        ],
        "has_fixing_commit": true
    },
    "commits": [
        {
            "commit_id": "7f464b89296881f4d9ec032378c4418e832d17e3",
            "repository": "https://github.com/mitmproxy/mitmproxy",
            "timestamp": 1531829995,
            "hunks": 0,
            "message": "Merge pull request #3243 from mhils/dns-rebinding mitmweb: protect against dns rebinding",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "3243": "mitmweb isn't protected against DNS rebinding #3234 Deploy to kubrentes #3543 [Bug] [Web UI] wss://updates not working through apache rewrite #3768"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "10.0.0",
                "10.1.0",
                "10.1.1",
                "10.1.2",
                "10.1.3",
                "10.1.4",
                "10.1.5",
                "10.1.6",
                "10.2.0",
                "10.2.1",
                "10.2.2",
                "10.2.3",
                "10.2.4",
                "10.3.0",
                "9.0.0",
                "9.0.1",
                "v10.0.0",
                "v10.1.0",
                "v10.1.1",
                "v10.1.2",
                "v10.1.3",
                "v10.1.4",
                "v10.1.5",
                "v10.1.6",
                "v10.2.0",
                "v10.2.1",
                "v10.2.2",
                "v10.2.3",
                "v10.2.4",
                "v10.3.0",
                "v10.3.1",
                "v5.0.0",
                "v5.0.1",
                "v5.1.0",
                "v5.1.1",
                "v5.2",
                "v5.3.0",
                "v6.0.0",
                "v6.0.1",
                "v6.0.2",
                "v7.0.0",
                "v7.0.1",
                "v7.0.2",
                "v7.0.3",
                "v7.0.4",
                "v8.0.0",
                "v8.1.0",
                "v8.1.1",
                "v9.0.0",
                "v9.0.1"
            ],
            "matched_rules": [
                {
                    "id": "XREF_GH",
                    "message": "The commit and the advisory (including referenced pages) mention the same github issue: 3243",
                    "relevance": 32
                },
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 1 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: mitmweb, rebinding",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 3243",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "48ff616cefe899eb4de6d64957a1e291a7c022f5",
            "repository": "https://github.com/mitmproxy/mitmproxy",
            "timestamp": 1531363250,
            "hunks": 4,
            "message": "mitmweb: improve dns rebinding protection, support ipv6",
            "diff": [
                "diff --git a/mitmproxy/tools/web/app.py b/mitmproxy/tools/web/app.py",
                "index 9c13690a7..b72e0d77a 100644",
                "--- a/mitmproxy/tools/web/app.py",
                "+++ b/mitmproxy/tools/web/app.py",
                "@@ -465,2 +465,11 @@ class SaveOptions(RequestHandler):",
                "+class DnsRebind(RequestHandler):",
                "+    def get(self):",
                "+        raise tornado.web.HTTPError(",
                "+            403,",
                "+            reason=\"To protect against DNS rebinding, mitmweb can only be accessed by IP at the moment. \"",
                "+                   \"(https://github.com/mitmproxy/mitmproxy/issues/3234)\"",
                "+        )",
                "+",
                "+",
                " class Application(tornado.web.Application):",
                "@@ -469,2 +478,3 @@ class Application(tornado.web.Application):",
                "         super().__init__(",
                "+            default_host=\"dns-rebind-protection\",",
                "             template_path=os.path.join(os.path.dirname(__file__), \"templates\"),",
                "@@ -477,5 +487,6 @@ class Application(tornado.web.Application):",
                "+        self.add_handlers(\"dns-rebind-protection\", [(r\"/.*\", DnsRebind)])",
                "         self.add_handlers(",
                "             # make mitmweb accessible by IP only to prevent DNS rebinding.",
                "-            r'(localhost|\\d+\\.\\d+\\.\\d+\\.\\d+)',",
                "+            r'^(localhost|[0-9.:\\[\\]]+)$',",
                "             ["
            ],
            "changed_files": [
                "mitmproxy/tools/web/app.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "10.0.0",
                "10.1.0",
                "10.1.1",
                "10.1.2",
                "10.1.3",
                "10.1.4",
                "10.1.5",
                "10.1.6",
                "10.2.0",
                "10.2.1",
                "10.2.2",
                "10.2.3",
                "10.2.4",
                "10.3.0",
                "9.0.0",
                "9.0.1",
                "v10.0.0",
                "v10.1.0",
                "v10.1.1",
                "v10.1.2",
                "v10.1.3",
                "v10.1.4",
                "v10.1.5",
                "v10.1.6",
                "v10.2.0",
                "v10.2.1",
                "v10.2.2",
                "v10.2.3",
                "v10.2.4",
                "v10.3.0",
                "v10.3.1",
                "v5.0.0",
                "v5.0.1",
                "v5.1.0",
                "v5.1.1",
                "v5.2",
                "v5.3.0",
                "v6.0.0",
                "v6.0.1",
                "v6.0.2",
                "v7.0.0",
                "v7.0.1",
                "v7.0.2",
                "v7.0.3",
                "v7.0.4",
                "v8.0.0",
                "v8.1.0",
                "v8.1.1",
                "v9.0.0",
                "v9.0.1"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 2 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: DNS",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: mitmweb, rebinding",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: tool",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "ae9177922911bd9d39b4fead45e196b51b2b9a84",
            "repository": "https://github.com/mitmproxy/mitmproxy",
            "timestamp": 1531306609,
            "hunks": 2,
            "message": "mitmweb: protect against dns rebinding",
            "diff": [
                "diff --git a/mitmproxy/tools/web/app.py b/mitmproxy/tools/web/app.py",
                "index ae2394eb0..9c13690a7 100644",
                "--- a/mitmproxy/tools/web/app.py",
                "+++ b/mitmproxy/tools/web/app.py",
                "@@ -468,27 +468,3 @@ class Application(tornado.web.Application):",
                "         self.master = master",
                "-        handlers = [",
                "-            (r\"/\", IndexHandler),",
                "-            (r\"/filter-help(?:\\.json)?\", FilterHelp),",
                "-            (r\"/updates\", ClientConnection),",
                "-            (r\"/events(?:\\.json)?\", Events),",
                "-            (r\"/flows(?:\\.json)?\", Flows),",
                "-            (r\"/flows/dump\", DumpFlows),",
                "-            (r\"/flows/resume\", ResumeFlows),",
                "-            (r\"/flows/kill\", KillFlows),",
                "-            (r\"/flows/(?P<flow_id>[0-9a-f\\-]+)\", FlowHandler),",
                "-            (r\"/flows/(?P<flow_id>[0-9a-f\\-]+)/resume\", ResumeFlow),",
                "-            (r\"/flows/(?P<flow_id>[0-9a-f\\-]+)/kill\", KillFlow),",
                "-            (r\"/flows/(?P<flow_id>[0-9a-f\\-]+)/duplicate\", DuplicateFlow),",
                "-            (r\"/flows/(?P<flow_id>[0-9a-f\\-]+)/replay\", ReplayFlow),",
                "-            (r\"/flows/(?P<flow_id>[0-9a-f\\-]+)/revert\", RevertFlow),",
                "-            (r\"/flows/(?P<flow_id>[0-9a-f\\-]+)/(?P<message>request|response)/content.data\", FlowContent),",
                "-            (",
                "-                r\"/flows/(?P<flow_id>[0-9a-f\\-]+)/(?P<message>request|response)/content/(?P<content_view>[0-9a-zA-Z\\-\\_]+)(?:\\.json)?\",",
                "-                FlowContentView),",
                "-            (r\"/settings(?:\\.json)?\", Settings),",
                "-            (r\"/clear\", ClearAll),",
                "-            (r\"/options(?:\\.json)?\", Options),",
                "-            (r\"/options/save\", SaveOptions)",
                "-        ]",
                "-        settings = dict(",
                "+        super().__init__(",
                "             template_path=os.path.join(os.path.dirname(__file__), \"templates\"),",
                "@@ -500,2 +476,30 @@ class Application(tornado.web.Application):",
                "         )",
                "-        super().__init__(handlers, **settings)",
                "+",
                "+        self.add_handlers(",
                "+            # make mitmweb accessible by IP only to prevent DNS rebinding.",
                "+            r'(localhost|\\d+\\.\\d+\\.\\d+\\.\\d+)',",
                "+            [",
                "+                (r\"/\", IndexHandler),",
                "+                (r\"/filter-help(?:\\.json)?\", FilterHelp),",
                "+                (r\"/updates\", ClientConnection),",
                "+                (r\"/events(?:\\.json)?\", Events),",
                "+                (r\"/flows(?:\\.json)?\", Flows),",
                "+                (r\"/flows/dump\", DumpFlows),",
                "+                (r\"/flows/resume\", ResumeFlows),",
                "+                (r\"/flows/kill\", KillFlows),",
                "+                (r\"/flows/(?P<flow_id>[0-9a-f\\-]+)\", FlowHandler),",
                "+                (r\"/flows/(?P<flow_id>[0-9a-f\\-]+)/resume\", ResumeFlow),",
                "+                (r\"/flows/(?P<flow_id>[0-9a-f\\-]+)/kill\", KillFlow),",
                "+                (r\"/flows/(?P<flow_id>[0-9a-f\\-]+)/duplicate\", DuplicateFlow),",
                "+                (r\"/flows/(?P<flow_id>[0-9a-f\\-]+)/replay\", ReplayFlow),",
                "+                (r\"/flows/(?P<flow_id>[0-9a-f\\-]+)/revert\", RevertFlow),",
                "+                (r\"/flows/(?P<flow_id>[0-9a-f\\-]+)/(?P<message>request|response)/content.data\", FlowContent),",
                "+                (",
                "+                    r\"/flows/(?P<flow_id>[0-9a-f\\-]+)/(?P<message>request|response)/content/(?P<content_view>[0-9a-zA-Z\\-\\_]+)(?:\\.json)?\",",
                "+                    FlowContentView),",
                "+                (r\"/settings(?:\\.json)?\", Settings),",
                "+                (r\"/clear\", ClearAll),",
                "+                (r\"/options(?:\\.json)?\", Options),",
                "+                (r\"/options/save\", SaveOptions)",
                "+            ]",
                "+        )"
            ],
            "changed_files": [
                "mitmproxy/tools/web/app.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "10.0.0",
                "10.1.0",
                "10.1.1",
                "10.1.2",
                "10.1.3",
                "10.1.4",
                "10.1.5",
                "10.1.6",
                "10.2.0",
                "10.2.1",
                "10.2.2",
                "10.2.3",
                "10.2.4",
                "10.3.0",
                "9.0.0",
                "9.0.1",
                "v10.0.0",
                "v10.1.0",
                "v10.1.1",
                "v10.1.2",
                "v10.1.3",
                "v10.1.4",
                "v10.1.5",
                "v10.1.6",
                "v10.2.0",
                "v10.2.1",
                "v10.2.2",
                "v10.2.3",
                "v10.2.4",
                "v10.3.0",
                "v10.3.1",
                "v5.0.0",
                "v5.0.1",
                "v5.1.0",
                "v5.1.1",
                "v5.2",
                "v5.3.0",
                "v6.0.0",
                "v6.0.1",
                "v6.0.2",
                "v7.0.0",
                "v7.0.1",
                "v7.0.2",
                "v7.0.3",
                "v7.0.4",
                "v8.0.0",
                "v8.1.0",
                "v8.1.1",
                "v9.0.0",
                "v9.0.1"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 2 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: DNS",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: mitmweb, rebinding",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: tool",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "dcb3de40b12bafd07979052647e71a172d55b360",
            "repository": "https://github.com/mitmproxy/mitmproxy",
            "timestamp": 1532008594,
            "hunks": 10,
            "message": "Some refactoring. New test case.",
            "diff": [
                "diff --git a/mitmproxy/tools/console/commander/commander.py b/mitmproxy/tools/console/commander/commander.py",
                "index fe21516a1..e8550f86f 100644",
                "--- a/mitmproxy/tools/console/commander/commander.py",
                "+++ b/mitmproxy/tools/console/commander/commander.py",
                "@@ -162,3 +162,3 @@ class CommandHistory:",
                "     def __init__(self, master: mitmproxy.master.Master, size: int=30) -> None:",
                "-        self.history: collections.deque = collections.deque(",
                "+        self.saved_commands: collections.deque = collections.deque(",
                "             [CommandBuffer(master, \"\")],",
                "@@ -170,3 +170,3 @@ class CommandHistory:",
                "     def last_index(self):",
                "-        return len(self.history) - 1",
                "+        return len(self.saved_commands) - 1",
                "@@ -175,3 +175,3 @@ class CommandHistory:",
                "             self.index = self.index + 1",
                "-            return self.history[self.index]",
                "+            return self.saved_commands[self.index]",
                "         return None",
                "@@ -181,3 +181,3 @@ class CommandHistory:",
                "             self.index = self.index - 1",
                "-            return self.history[self.index]",
                "+            return self.saved_commands[self.index]",
                "         return None",
                "@@ -186,7 +186,8 @@ class CommandHistory:",
                "         if self.index == self.last_index or execution:",
                "-            last_item_empty = not self.history[-1].text",
                "-            if self.history[-1].text == command.text or (last_item_empty and execution):",
                "-                self.history[-1] = copy.copy(command)",
                "+            last_item = self.saved_commands[-1]",
                "+            last_item_empty = not last_item.text",
                "+            if last_item.text == command.text or (last_item_empty and execution):",
                "+                self.saved_commands[-1] = copy.copy(command)",
                "             else:",
                "-                self.history.append(command)",
                "+                self.saved_commands.append(command)",
                "                 if not execution and self.index < self.last_index:",
                "diff --git a/mitmproxy/tools/console/statusbar.py b/mitmproxy/tools/console/statusbar.py",
                "index e0cbb05fd..2d32f4875 100644",
                "--- a/mitmproxy/tools/console/statusbar.py",
                "+++ b/mitmproxy/tools/console/statusbar.py",
                "@@ -102,3 +102,4 @@ class ActionBar(urwid.WidgetWrap):",
                "         signals.focus.send(self, section=\"footer\")",
                "-        self._w = commander.CommandEdit(self.master, partial, self.command_history)",
                "+        self._w = commander.CommandEdit(self.master, partial,",
                "+                                        self.command_history)",
                "         self.prompting = commandexecutor.CommandExecutor(self.master)",
                "diff --git a/test/mitmproxy/tools/console/test_commander.py b/test/mitmproxy/tools/console/test_commander.py",
                "index d9daa673c..b5e226fe7 100644",
                "--- a/test/mitmproxy/tools/console/test_commander.py",
                "+++ b/test/mitmproxy/tools/console/test_commander.py",
                "@@ -43,11 +43,11 @@ class TestCommandHistory:",
                "-        history_commands = [buf.text for buf in history.history]",
                "-        assert history_commands == [\"\"] + commands",
                "+        saved_commands = [buf.text for buf in history.saved_commands]",
                "+        assert saved_commands == [\"\"] + commands",
                "-        # The history size is only 3. So, we forget the first one command,",
                "-        # when adding fourth command",
                "+        # The history size is only 3. So, we forget the first",
                "+        # one command, when adding fourth command",
                "         cbuf = commander.CommandBuffer(tctx_master, \"command3\")",
                "         history.add_command(cbuf)",
                "-        history_commands = [buf.text for buf in history.history]",
                "-        assert history_commands == commands + [\"command3\"]",
                "+        saved_commands = [buf.text for buf in history.saved_commands]",
                "+        assert saved_commands == commands + [\"command3\"]",
                "@@ -55,4 +55,15 @@ class TestCommandHistory:",
                "         history.add_command(cbuf)",
                "-        history_commands = [buf.text for buf in history.history]",
                "-        assert history_commands == commands + [\"command3\"]",
                "+        saved_commands = [buf.text for buf in history.saved_commands]",
                "+        assert saved_commands == commands + [\"command3\"]",
                "+",
                "+        # adding command in execution mode sets index at the beginning of the history",
                "+        # and replace the last command buffer if it is empty or has the same text",
                "+        cbuf = commander.CommandBuffer(tctx_master, \"\")",
                "+        history.add_command(cbuf)",
                "+        history.index = 0",
                "+        cbuf = commander.CommandBuffer(tctx_master, \"command4\")",
                "+        history.add_command(cbuf, True)",
                "+        assert history.index == history.last_index",
                "+        saved_commands = [buf.text for buf in history.saved_commands]",
                "+        assert saved_commands == [\"command2\", \"command3\", \"command4\"]"
            ],
            "changed_files": [
                "mitmproxy/tools/console/commander/commander.py",
                "mitmproxy/tools/console/statusbar.py",
                "test/mitmproxy/tools/console/test_commander.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "10.0.0",
                "10.1.0",
                "10.1.1",
                "10.1.2",
                "10.1.3",
                "10.1.4",
                "10.1.5",
                "10.1.6",
                "10.2.0",
                "10.2.1",
                "10.2.2",
                "10.2.3",
                "10.2.4",
                "10.3.0",
                "9.0.0",
                "9.0.1",
                "v10.0.0",
                "v10.1.0",
                "v10.1.1",
                "v10.1.2",
                "v10.1.3",
                "v10.1.4",
                "v10.1.5",
                "v10.1.6",
                "v10.2.0",
                "v10.2.1",
                "v10.2.2",
                "v10.2.3",
                "v10.2.4",
                "v10.3.0",
                "v10.3.1",
                "v5.0.0",
                "v5.0.1",
                "v5.1.0",
                "v5.1.1",
                "v5.2",
                "v5.3.0",
                "v6.0.0",
                "v6.0.1",
                "v6.0.2",
                "v7.0.0",
                "v7.0.1",
                "v7.0.2",
                "v7.0.3",
                "v7.0.4",
                "v8.0.0",
                "v8.1.0",
                "v8.1.1",
                "v9.0.0",
                "v9.0.1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: app",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: tool",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "ffbd7c20e56ad65dc93de93129344a6e51d79344",
            "repository": "https://github.com/mitmproxy/mitmproxy",
            "timestamp": 1531841865,
            "hunks": 11,
            "message": "Command history implementation",
            "diff": [
                "diff --git a/mitmproxy/tools/console/commander/commander.py b/mitmproxy/tools/console/commander/commander.py",
                "index df3eaa5a6..fe21516a1 100644",
                "--- a/mitmproxy/tools/console/commander/commander.py",
                "+++ b/mitmproxy/tools/console/commander/commander.py",
                "@@ -1,3 +1,5 @@",
                " import abc",
                "+import copy",
                " import typing",
                "+import collections",
                "@@ -158,2 +160,39 @@ class CommandBuffer:",
                "+class CommandHistory:",
                "+    def __init__(self, master: mitmproxy.master.Master, size: int=30) -> None:",
                "+        self.history: collections.deque = collections.deque(",
                "+            [CommandBuffer(master, \"\")],",
                "+            maxlen=size",
                "+        )",
                "+        self.index: int = 0",
                "+",
                "+    @property",
                "+    def last_index(self):",
                "+        return len(self.history) - 1",
                "+",
                "+    def get_next(self) -> typing.Optional[CommandBuffer]:",
                "+        if self.index < self.last_index:",
                "+            self.index = self.index + 1",
                "+            return self.history[self.index]",
                "+        return None",
                "+",
                "+    def get_prev(self) -> typing.Optional[CommandBuffer]:",
                "+        if self.index > 0:",
                "+            self.index = self.index - 1",
                "+            return self.history[self.index]",
                "+        return None",
                "+",
                "+    def add_command(self, command: CommandBuffer, execution: bool=False) -> None:",
                "+        if self.index == self.last_index or execution:",
                "+            last_item_empty = not self.history[-1].text",
                "+            if self.history[-1].text == command.text or (last_item_empty and execution):",
                "+                self.history[-1] = copy.copy(command)",
                "+            else:",
                "+                self.history.append(command)",
                "+                if not execution and self.index < self.last_index:",
                "+                    self.index += 1",
                "+            if execution:",
                "+                self.index = self.last_index",
                "+",
                "+",
                " class CommandEdit(urwid.WidgetWrap):",
                "@@ -161,3 +200,4 @@ class CommandEdit(urwid.WidgetWrap):",
                "-    def __init__(self, master: mitmproxy.master.Master, text: str) -> None:",
                "+    def __init__(self, master: mitmproxy.master.Master,",
                "+                 text: str, history: CommandHistory) -> None:",
                "         super().__init__(urwid.Text(self.leader))",
                "@@ -165,2 +205,3 @@ class CommandEdit(urwid.WidgetWrap):",
                "         self.cbuf = CommandBuffer(master, text)",
                "+        self.history = history",
                "         self.update()",
                "@@ -174,2 +215,7 @@ class CommandEdit(urwid.WidgetWrap):",
                "             self.cbuf.right()",
                "+        elif key == \"up\":",
                "+            self.history.add_command(self.cbuf)",
                "+            self.cbuf = self.history.get_prev() or self.cbuf",
                "+        elif key == \"down\":",
                "+            self.cbuf = self.history.get_next() or self.cbuf",
                "         elif key == \"tab\":",
                "diff --git a/mitmproxy/tools/console/statusbar.py b/mitmproxy/tools/console/statusbar.py",
                "index 215cf5000..e0cbb05fd 100644",
                "--- a/mitmproxy/tools/console/statusbar.py",
                "+++ b/mitmproxy/tools/console/statusbar.py",
                "@@ -44,2 +44,4 @@ class ActionBar(urwid.WidgetWrap):",
                "+        self.command_history = commander.CommandHistory(master)",
                "+",
                "         self.prompting = None",
                "@@ -100,3 +102,3 @@ class ActionBar(urwid.WidgetWrap):",
                "         signals.focus.send(self, section=\"footer\")",
                "-        self._w = commander.CommandEdit(self.master, partial)",
                "+        self._w = commander.CommandEdit(self.master, partial, self.command_history)",
                "         self.prompting = commandexecutor.CommandExecutor(self.master)",
                "@@ -127,2 +129,3 @@ class ActionBar(urwid.WidgetWrap):",
                "             if k == \"esc\":",
                "+                self.command_history.index = self.command_history.last_index",
                "                 self.prompt_done()",
                "@@ -134,2 +137,3 @@ class ActionBar(urwid.WidgetWrap):",
                "             elif k == \"enter\":",
                "+                self.command_history.add_command(self._w.cbuf, True)",
                "                 self.prompt_execute(self._w.get_edit_text())",
                "diff --git a/test/mitmproxy/tools/console/test_commander.py b/test/mitmproxy/tools/console/test_commander.py",
                "index 2a96995d5..d9daa673c 100644",
                "--- a/test/mitmproxy/tools/console/test_commander.py",
                "+++ b/test/mitmproxy/tools/console/test_commander.py",
                "@@ -30,2 +30,53 @@ class TestListCompleter:",
                "+class TestCommandHistory:",
                "+    def fill_history(self, commands):",
                "+        with taddons.context() as tctx:",
                "+            history = commander.CommandHistory(tctx.master, size=3)",
                "+            for c in commands:",
                "+                cbuf = commander.CommandBuffer(tctx.master, c)",
                "+                history.add_command(cbuf)",
                "+        return history, tctx.master",
                "+",
                "+    def test_add_command(self):",
                "+        commands = [\"command1\", \"command2\"]",
                "+        history, tctx_master = self.fill_history(commands)",
                "+",
                "+        history_commands = [buf.text for buf in history.history]",
                "+        assert history_commands == [\"\"] + commands",
                "+",
                "+        # The history size is only 3. So, we forget the first one command,",
                "+        # when adding fourth command",
                "+        cbuf = commander.CommandBuffer(tctx_master, \"command3\")",
                "+        history.add_command(cbuf)",
                "+        history_commands = [buf.text for buf in history.history]",
                "+        assert history_commands == commands + [\"command3\"]",
                "+",
                "+        # Commands with the same text are not repeated in the history one by one",
                "+        history.add_command(cbuf)",
                "+        history_commands = [buf.text for buf in history.history]",
                "+        assert history_commands == commands + [\"command3\"]",
                "+",
                "+    def test_get_next(self):",
                "+        commands = [\"command1\", \"command2\"]",
                "+        history, tctx_master = self.fill_history(commands)",
                "+",
                "+        history.index = -1",
                "+        expected_items = [\"\", \"command1\", \"command2\"]",
                "+        for i in range(3):",
                "+            assert history.get_next().text == expected_items[i]",
                "+        # We are at the last item of the history",
                "+        assert history.get_next() is None",
                "+",
                "+    def test_get_prev(self):",
                "+        commands = [\"command1\", \"command2\"]",
                "+        history, tctx_master = self.fill_history(commands)",
                "+",
                "+        expected_items = [\"command2\", \"command1\", \"\"]",
                "+        history.index = history.last_index + 1",
                "+        for i in range(3):",
                "+            assert history.get_prev().text == expected_items[i]",
                "+        # We are at the first item of the history",
                "+        assert history.get_prev() is None",
                "+",
                "+",
                " class TestCommandBuffer:"
            ],
            "changed_files": [
                "mitmproxy/tools/console/commander/commander.py",
                "mitmproxy/tools/console/statusbar.py",
                "test/mitmproxy/tools/console/test_commander.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "10.0.0",
                "10.1.0",
                "10.1.1",
                "10.1.2",
                "10.1.3",
                "10.1.4",
                "10.1.5",
                "10.1.6",
                "10.2.0",
                "10.2.1",
                "10.2.2",
                "10.2.3",
                "10.2.4",
                "10.3.0",
                "9.0.0",
                "9.0.1",
                "v10.0.0",
                "v10.1.0",
                "v10.1.1",
                "v10.1.2",
                "v10.1.3",
                "v10.1.4",
                "v10.1.5",
                "v10.1.6",
                "v10.2.0",
                "v10.2.1",
                "v10.2.2",
                "v10.2.3",
                "v10.2.4",
                "v10.3.0",
                "v10.3.1",
                "v5.0.0",
                "v5.0.1",
                "v5.1.0",
                "v5.1.1",
                "v5.2",
                "v5.3.0",
                "v6.0.0",
                "v6.0.1",
                "v6.0.2",
                "v7.0.0",
                "v7.0.1",
                "v7.0.2",
                "v7.0.3",
                "v7.0.4",
                "v8.0.0",
                "v8.1.0",
                "v8.1.1",
                "v9.0.0",
                "v9.0.1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: app",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: tool",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "d5da74645b1231783eb5d527f226d0b06ffd2c4d",
            "repository": "https://github.com/mitmproxy/mitmproxy",
            "timestamp": 1530539988,
            "hunks": 41,
            "message": "protobuf: tests implemented, full coverage",
            "diff": [
                "diff --git a/.gitignore b/.gitignore",
                "index 2ada574a3..deb938149 100644",
                "--- a/.gitignore",
                "+++ b/.gitignore",
                "@@ -7,2 +7,3 @@ MANIFEST",
                " *.swo",
                "+*.sqlite",
                " *.egg-info/",
                "diff --git a/mitmproxy/io/__init__.py b/mitmproxy/io/__init__.py",
                "index 854d25058..bd248fd2e 100644",
                "--- a/mitmproxy/io/__init__.py",
                "+++ b/mitmproxy/io/__init__.py",
                "@@ -2,3 +2,3 @@",
                " from .io import FlowWriter, FlowReader, FilteredFlowWriter, read_flows_from_paths",
                "-from .db import DbHandler",
                "+from .db import DBHandler",
                "@@ -6,3 +6,3 @@ from .db import DbHandler",
                " __all__ = [",
                "-    \"FlowWriter\", \"FlowReader\", \"FilteredFlowWriter\", \"read_flows_from_paths\", \"DbHandler\"",
                "+    \"FlowWriter\", \"FlowReader\", \"FilteredFlowWriter\", \"read_flows_from_paths\", \"DBHandler\"",
                " ]",
                "diff --git a/mitmproxy/io/db.py b/mitmproxy/io/db.py",
                "index 01d30aa29..ea42e08b0 100644",
                "--- a/mitmproxy/io/db.py",
                "+++ b/mitmproxy/io/db.py",
                "@@ -4,7 +4,5 @@ import os",
                " from mitmproxy.io import protobuf",
                "-from mitmproxy.http import HTTPFlow",
                "-from mitmproxy import exceptions",
                "-class DbHandler:",
                "+class DBHandler:",
                "@@ -14,3 +12,6 @@ class DbHandler:",
                "-    def __init__(self, db_path=\"/tmp/tmp.sqlite\"):",
                "+    def __init__(self, db_path, mode='load'):",
                "+        if mode == 'write':",
                "+            if os.path.isfile(db_path):",
                "+                os.remove(db_path)",
                "         self.db_path = db_path",
                "diff --git a/mitmproxy/io/proto/http.proto b/mitmproxy/io/proto/http.proto",
                "index 6c3724334..c86a04f36 100644",
                "--- a/mitmproxy/io/proto/http.proto",
                "+++ b/mitmproxy/io/proto/http.proto",
                "@@ -12,3 +12,2 @@ message HTTPFlow {",
                "     optional string id = 9;",
                "-    optional int32 version = 10;",
                " }",
                "diff --git a/mitmproxy/io/proto/http_pb2.py b/mitmproxy/io/proto/http_pb2.py",
                "index 9809e7ee9..47b09815b 100644",
                "--- a/mitmproxy/io/proto/http_pb2.py",
                "+++ b/mitmproxy/io/proto/http_pb2.py",
                "@@ -21,3 +21,3 @@ DESCRIPTOR = _descriptor.FileDescriptor(",
                "   syntax='proto2',",
                "-  serialized_pb=_b('\\n\\nhttp.proto\\\"\\x85\\x02\\n\\x08HTTPFlow\\x12\\x1d\\n\\x07request\\x18\\x01 \\x01(\\x0b\\x32\\x0c.HTTPRequest\\x12\\x1f\\n\\x08response\\x18\\x02 \\x01(\\x0b\\x32\\r.HTTPResponse\\x12\\x19\\n\\x05\\x65rror\\x18\\x03 \\x01(\\x0b\\x32\\n.HTTPError\\x12&\\n\\x0b\\x63lient_conn\\x18\\x04 \\x01(\\x0b\\x32\\x11.ClientConnection\\x12&\\n\\x0bserver_conn\\x18\\x05 \\x01(\\x0b\\x32\\x11.ServerConnection\\x12\\x13\\n\\x0bintercepted\\x18\\x06 \\x01(\\x08\\x12\\x0e\\n\\x06marked\\x18\\x07 \\x01(\\x08\\x12\\x0c\\n\\x04mode\\x18\\x08 \\x01(\\t\\x12\\n\\n\\x02id\\x18\\t \\x01(\\t\\x12\\x0f\\n\\x07version\\x18\\n \\x01(\\x05\\\"\\xfa\\x01\\n\\x0bHTTPRequest\\x12\\x19\\n\\x11\\x66irst_line_format\\x18\\x01 \\x01(\\t\\x12\\x0e\\n\\x06method\\x18\\x02 \\x01(\\t\\x12\\x0e\\n\\x06scheme\\x18\\x03 \\x01(\\t\\x12\\x0c\\n\\x04host\\x18\\x04 \\x01(\\t\\x12\\x0c\\n\\x04port\\x18\\x05 \\x01(\\x05\\x12\\x0c\\n\\x04path\\x18\\x06 \\x01(\\t\\x12\\x14\\n\\x0chttp_version\\x18\\x07 \\x01(\\t\\x12\\x1c\\n\\x07headers\\x18\\x08 \\x03(\\x0b\\x32\\x0b.HTTPHeader\\x12\\x0f\\n\\x07\\x63ontent\\x18\\t \\x01(\\x0c\\x12\\x17\\n\\x0ftimestamp_start\\x18\\n \\x01(\\x01\\x12\\x15\\n\\rtimestamp_end\\x18\\x0b \\x01(\\x01\\x12\\x11\\n\\tis_replay\\x18\\x0c \\x01(\\x08\\\"\\xbb\\x01\\n\\x0cHTTPResponse\\x12\\x14\\n\\x0chttp_version\\x18\\x01 \\x01(\\t\\x12\\x13\\n\\x0bstatus_code\\x18\\x02 \\x01(\\x05\\x12\\x0e\\n\\x06reason\\x18\\x03 \\x01(\\t\\x12\\x1c\\n\\x07headers\\x18\\x04 \\x03(\\x0b\\x32\\x0b.HTTPHeader\\x12\\x0f\\n\\x07\\x63ontent\\x18\\x05 \\x01(\\x0c\\x12\\x17\\n\\x0ftimestamp_start\\x18\\x06 \\x01(\\x01\\x12\\x15\\n\\rtimestamp_end\\x18\\x07 \\x01(\\x01\\x12\\x11\\n\\tis_replay\\x18\\x08 \\x01(\\x08\\\"+\\n\\tHTTPError\\x12\\x0b\\n\\x03msg\\x18\\x01 \\x01(\\t\\x12\\x11\\n\\ttimestamp\\x18\\x02 \\x01(\\x01\\\")\\n\\nHTTPHeader\\x12\\x0c\\n\\x04name\\x18\\x01 \\x01(\\t\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\t\\\"%\\n\\x07\\x41\\x64\\x64ress\\x12\\x0c\\n\\x04host\\x18\\x01 \\x01(\\t\\x12\\x0c\\n\\x04port\\x18\\x02 \\x01(\\x05\\\"\\xc2\\x02\\n\\x10\\x43lientConnection\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\t\\x12\\x19\\n\\x07\\x61\\x64\\x64ress\\x18\\x02 \\x01(\\x0b\\x32\\x08.Address\\x12\\x17\\n\\x0ftls_established\\x18\\x03 \\x01(\\x08\\x12\\x12\\n\\nclientcert\\x18\\x04 \\x01(\\t\\x12\\x10\\n\\x08mitmcert\\x18\\x05 \\x01(\\t\\x12\\x17\\n\\x0ftimestamp_start\\x18\\x06 \\x01(\\x01\\x12\\x1b\\n\\x13timestamp_tls_setup\\x18\\x07 \\x01(\\x01\\x12\\x15\\n\\rtimestamp_end\\x18\\x08 \\x01(\\x01\\x12\\x0b\\n\\x03sni\\x18\\t \\x01(\\t\\x12\\x13\\n\\x0b\\x63ipher_name\\x18\\n \\x01(\\t\\x12\\x1d\\n\\x15\\x61lpn_proto_negotiated\\x18\\x0b \\x01(\\x0c\\x12\\x13\\n\\x0btls_version\\x18\\x0c \\x01(\\t\\x12%\\n\\x0etls_extensions\\x18\\r \\x03(\\x0b\\x32\\r.TLSExtension\\\"\\xeb\\x02\\n\\x10ServerConnection\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\t\\x12\\x19\\n\\x07\\x61\\x64\\x64ress\\x18\\x02 \\x01(\\x0b\\x32\\x08.Address\\x12\\x1c\\n\\nip_address\\x18\\x03 \\x01(\\x0b\\x32\\x08.Address\\x12 \\n\\x0esource_address\\x18\\x04 \\x01(\\x0b\\x32\\x08.Address\\x12\\x17\\n\\x0ftls_established\\x18\\x05 \\x01(\\x08\\x12\\x0c\\n\\x04\\x63\\x65rt\\x18\\x06 \\x01(\\t\\x12\\x0b\\n\\x03sni\\x18\\x07 \\x01(\\t\\x12\\x1d\\n\\x15\\x61lpn_proto_negotiated\\x18\\x08 \\x01(\\x0c\\x12\\x13\\n\\x0btls_version\\x18\\t \\x01(\\t\\x12\\x17\\n\\x0ftimestamp_start\\x18\\n \\x01(\\x01\\x12\\x1b\\n\\x13timestamp_tcp_setup\\x18\\x0b \\x01(\\x01\\x12\\x1b\\n\\x13timestamp_tls_setup\\x18\\x0c \\x01(\\x01\\x12\\x15\\n\\rtimestamp_end\\x18\\r \\x01(\\x01\\x12\\x1e\\n\\x03via\\x18\\x0e \\x01(\\x0b\\x32\\x11.ServerConnection\\\"*\\n\\x0cTLSExtension\\x12\\x0b\\n\\x03int\\x18\\x01 \\x01(\\x03\\x12\\r\\n\\x05\\x62ytes\\x18\\x02 \\x01(\\x0c')",
                "+  serialized_pb=_b('\\n\\nhttp.proto\\\"\\xf4\\x01\\n\\x08HTTPFlow\\x12\\x1d\\n\\x07request\\x18\\x01 \\x01(\\x0b\\x32\\x0c.HTTPRequest\\x12\\x1f\\n\\x08response\\x18\\x02 \\x01(\\x0b\\x32\\r.HTTPResponse\\x12\\x19\\n\\x05\\x65rror\\x18\\x03 \\x01(\\x0b\\x32\\n.HTTPError\\x12&\\n\\x0b\\x63lient_conn\\x18\\x04 \\x01(\\x0b\\x32\\x11.ClientConnection\\x12&\\n\\x0bserver_conn\\x18\\x05 \\x01(\\x0b\\x32\\x11.ServerConnection\\x12\\x13\\n\\x0bintercepted\\x18\\x06 \\x01(\\x08\\x12\\x0e\\n\\x06marked\\x18\\x07 \\x01(\\x08\\x12\\x0c\\n\\x04mode\\x18\\x08 \\x01(\\t\\x12\\n\\n\\x02id\\x18\\t \\x01(\\t\\\"\\xfa\\x01\\n\\x0bHTTPRequest\\x12\\x19\\n\\x11\\x66irst_line_format\\x18\\x01 \\x01(\\t\\x12\\x0e\\n\\x06method\\x18\\x02 \\x01(\\t\\x12\\x0e\\n\\x06scheme\\x18\\x03 \\x01(\\t\\x12\\x0c\\n\\x04host\\x18\\x04 \\x01(\\t\\x12\\x0c\\n\\x04port\\x18\\x05 \\x01(\\x05\\x12\\x0c\\n\\x04path\\x18\\x06 \\x01(\\t\\x12\\x14\\n\\x0chttp_version\\x18\\x07 \\x01(\\t\\x12\\x1c\\n\\x07headers\\x18\\x08 \\x03(\\x0b\\x32\\x0b.HTTPHeader\\x12\\x0f\\n\\x07\\x63ontent\\x18\\t \\x01(\\x0c\\x12\\x17\\n\\x0ftimestamp_start\\x18\\n \\x01(\\x01\\x12\\x15\\n\\rtimestamp_end\\x18\\x0b \\x01(\\x01\\x12\\x11\\n\\tis_replay\\x18\\x0c \\x01(\\x08\\\"\\xbb\\x01\\n\\x0cHTTPResponse\\x12\\x14\\n\\x0chttp_version\\x18\\x01 \\x01(\\t\\x12\\x13\\n\\x0bstatus_code\\x18\\x02 \\x01(\\x05\\x12\\x0e\\n\\x06reason\\x18\\x03 \\x01(\\t\\x12\\x1c\\n\\x07headers\\x18\\x04 \\x03(\\x0b\\x32\\x0b.HTTPHeader\\x12\\x0f\\n\\x07\\x63ontent\\x18\\x05 \\x01(\\x0c\\x12\\x17\\n\\x0ftimestamp_start\\x18\\x06 \\x01(\\x01\\x12\\x15\\n\\rtimestamp_end\\x18\\x07 \\x01(\\x01\\x12\\x11\\n\\tis_replay\\x18\\x08 \\x01(\\x08\\\"+\\n\\tHTTPError\\x12\\x0b\\n\\x03msg\\x18\\x01 \\x01(\\t\\x12\\x11\\n\\ttimestamp\\x18\\x02 \\x01(\\x01\\\")\\n\\nHTTPHeader\\x12\\x0c\\n\\x04name\\x18\\x01 \\x01(\\t\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\t\\\"%\\n\\x07\\x41\\x64\\x64ress\\x12\\x0c\\n\\x04host\\x18\\x01 \\x01(\\t\\x12\\x0c\\n\\x04port\\x18\\x02 \\x01(\\x05\\\"\\xc2\\x02\\n\\x10\\x43lientConnection\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\t\\x12\\x19\\n\\x07\\x61\\x64\\x64ress\\x18\\x02 \\x01(\\x0b\\x32\\x08.Address\\x12\\x17\\n\\x0ftls_established\\x18\\x03 \\x01(\\x08\\x12\\x12\\n\\nclientcert\\x18\\x04 \\x01(\\t\\x12\\x10\\n\\x08mitmcert\\x18\\x05 \\x01(\\t\\x12\\x17\\n\\x0ftimestamp_start\\x18\\x06 \\x01(\\x01\\x12\\x1b\\n\\x13timestamp_tls_setup\\x18\\x07 \\x01(\\x01\\x12\\x15\\n\\rtimestamp_end\\x18\\x08 \\x01(\\x01\\x12\\x0b\\n\\x03sni\\x18\\t \\x01(\\t\\x12\\x13\\n\\x0b\\x63ipher_name\\x18\\n \\x01(\\t\\x12\\x1d\\n\\x15\\x61lpn_proto_negotiated\\x18\\x0b \\x01(\\x0c\\x12\\x13\\n\\x0btls_version\\x18\\x0c \\x01(\\t\\x12%\\n\\x0etls_extensions\\x18\\r \\x03(\\x0b\\x32\\r.TLSExtension\\\"\\xeb\\x02\\n\\x10ServerConnection\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\t\\x12\\x19\\n\\x07\\x61\\x64\\x64ress\\x18\\x02 \\x01(\\x0b\\x32\\x08.Address\\x12\\x1c\\n\\nip_address\\x18\\x03 \\x01(\\x0b\\x32\\x08.Address\\x12 \\n\\x0esource_address\\x18\\x04 \\x01(\\x0b\\x32\\x08.Address\\x12\\x17\\n\\x0ftls_established\\x18\\x05 \\x01(\\x08\\x12\\x0c\\n\\x04\\x63\\x65rt\\x18\\x06 \\x01(\\t\\x12\\x0b\\n\\x03sni\\x18\\x07 \\x01(\\t\\x12\\x1d\\n\\x15\\x61lpn_proto_negotiated\\x18\\x08 \\x01(\\x0c\\x12\\x13\\n\\x0btls_version\\x18\\t \\x01(\\t\\x12\\x17\\n\\x0ftimestamp_start\\x18\\n \\x01(\\x01\\x12\\x1b\\n\\x13timestamp_tcp_setup\\x18\\x0b \\x01(\\x01\\x12\\x1b\\n\\x13timestamp_tls_setup\\x18\\x0c \\x01(\\x01\\x12\\x15\\n\\rtimestamp_end\\x18\\r \\x01(\\x01\\x12\\x1e\\n\\x03via\\x18\\x0e \\x01(\\x0b\\x32\\x11.ServerConnection\\\"*\\n\\x0cTLSExtension\\x12\\x0b\\n\\x03int\\x18\\x01 \\x01(\\x03\\x12\\r\\n\\x05\\x62ytes\\x18\\x02 \\x01(\\x0c')",
                " )",
                "@@ -97,9 +97,2 @@ _HTTPFLOW = _descriptor.Descriptor(",
                "       options=None, file=DESCRIPTOR),",
                "-    _descriptor.FieldDescriptor(",
                "-      name='version', full_name='HTTPFlow.version', index=9,",
                "-      number=10, type=5, cpp_type=1, label=1,",
                "-      has_default_value=False, default_value=0,",
                "-      message_type=None, enum_type=None, containing_type=None,",
                "-      is_extension=False, extension_scope=None,",
                "-      options=None, file=DESCRIPTOR),",
                "   ],",
                "@@ -117,3 +110,3 @@ _HTTPFLOW = _descriptor.Descriptor(",
                "   serialized_start=15,",
                "-  serialized_end=276,",
                "+  serialized_end=259,",
                " )",
                "@@ -224,4 +217,4 @@ _HTTPREQUEST = _descriptor.Descriptor(",
                "   ],",
                "-  serialized_start=279,",
                "-  serialized_end=529,",
                "+  serialized_start=262,",
                "+  serialized_end=512,",
                " )",
                "@@ -304,4 +297,4 @@ _HTTPRESPONSE = _descriptor.Descriptor(",
                "   ],",
                "-  serialized_start=532,",
                "-  serialized_end=719,",
                "+  serialized_start=515,",
                "+  serialized_end=702,",
                " )",
                "@@ -342,4 +335,4 @@ _HTTPERROR = _descriptor.Descriptor(",
                "   ],",
                "-  serialized_start=721,",
                "-  serialized_end=764,",
                "+  serialized_start=704,",
                "+  serialized_end=747,",
                " )",
                "@@ -380,4 +373,4 @@ _HTTPHEADER = _descriptor.Descriptor(",
                "   ],",
                "-  serialized_start=766,",
                "-  serialized_end=807,",
                "+  serialized_start=749,",
                "+  serialized_end=790,",
                " )",
                "@@ -418,4 +411,4 @@ _ADDRESS = _descriptor.Descriptor(",
                "   ],",
                "-  serialized_start=809,",
                "-  serialized_end=846,",
                "+  serialized_start=792,",
                "+  serialized_end=829,",
                " )",
                "@@ -533,4 +526,4 @@ _CLIENTCONNECTION = _descriptor.Descriptor(",
                "   ],",
                "-  serialized_start=849,",
                "-  serialized_end=1171,",
                "+  serialized_start=832,",
                "+  serialized_end=1154,",
                " )",
                "@@ -655,4 +648,4 @@ _SERVERCONNECTION = _descriptor.Descriptor(",
                "   ],",
                "-  serialized_start=1174,",
                "-  serialized_end=1537,",
                "+  serialized_start=1157,",
                "+  serialized_end=1520,",
                " )",
                "@@ -693,4 +686,4 @@ _TLSEXTENSION = _descriptor.Descriptor(",
                "   ],",
                "-  serialized_start=1539,",
                "-  serialized_end=1581,",
                "+  serialized_start=1522,",
                "+  serialized_end=1564,",
                " )",
                "diff --git a/mitmproxy/io/protobuf.py b/mitmproxy/io/protobuf.py",
                "index 3db9a0132..9a00eacf7 100644",
                "--- a/mitmproxy/io/protobuf.py",
                "+++ b/mitmproxy/io/protobuf.py",
                "@@ -4,3 +4,2 @@ from mitmproxy import flow",
                " from mitmproxy import exceptions",
                "-from mitmproxy import ctx",
                " from mitmproxy.http import HTTPFlow, HTTPResponse, HTTPRequest",
                "@@ -18,3 +17,4 @@ def _move_attrs(s_obj, d_obj, attrs):",
                "             if hasattr(s_obj, attr) and getattr(s_obj, attr) is not None:",
                "-                if not getattr(s_obj, attr):",
                "+                # ugly fix to set None in empty str or bytes fields",
                "+                if getattr(s_obj, attr) == \"\" or getattr(s_obj, attr) == b\"\":",
                "                     d_obj[attr] = None",
                "@@ -89,8 +89,8 @@ def _dump_http_error(e: flow.Error) -> http_pb2.HTTPError:",
                "-def dump_http(f: HTTPFlow) -> http_pb2.HTTPFlow():",
                "+def dump_http(f: flow.Flow) -> http_pb2.HTTPFlow:",
                "     pf = http_pb2.HTTPFlow()",
                "     for p in ['request', 'response', 'client_conn', 'server_conn', 'error']:",
                "-        if hasattr(f, p):",
                "+        if hasattr(f, p) and getattr(f, p):",
                "             getattr(pf, p).MergeFrom(eval(f\"_dump_http_{p}\")(getattr(f, p)))",
                "-    _move_attrs(f, pf, ['intercepted', 'marked', 'mode', 'id', 'version'])",
                "+    _move_attrs(f, pf, ['intercepted', 'marked', 'mode', 'id'])",
                "     return pf",
                "@@ -107,5 +107,5 @@ def dumps(f: flow.Flow) -> bytes:",
                " def _load_http_request(o: http_pb2.HTTPRequest) -> HTTPRequest:",
                "-    d = {}",
                "+    d: dict = {}",
                "     _move_attrs(o, d, ['first_line_format', 'method', 'scheme', 'host', 'port', 'path', 'http_version', 'content',",
                "-                            'timestamp_start', 'timestamp_end', 'is_replay'])",
                "+                       'timestamp_start', 'timestamp_end', 'is_replay'])",
                "     if d['content'] is None:",
                "@@ -120,5 +120,5 @@ def _load_http_request(o: http_pb2.HTTPRequest) -> HTTPRequest:",
                " def _load_http_response(o: http_pb2.HTTPResponse) -> HTTPResponse:",
                "-    d = {}",
                "+    d: dict = {}",
                "     _move_attrs(o, d, ['http_version', 'status_code', 'reason',",
                "-                            'content', 'timestamp_start', 'timestamp_end', 'is_replay'])",
                "+                       'content', 'timestamp_start', 'timestamp_end', 'is_replay'])",
                "     if d['content'] is None:",
                "@@ -133,10 +133,8 @@ def _load_http_response(o: http_pb2.HTTPResponse) -> HTTPResponse:",
                " def _load_http_client_conn(o: http_pb2.ClientConnection) -> ClientConnection:",
                "-    d = {}",
                "-    _move_attrs(o, d, ['id', 'tls_established', 'sni', 'alpn_proto_negotiated', 'tls_version',",
                "-                                   'timestamp_start', 'timestamp_tcp_setup', 'timestamp_tls_setup', 'timestamp_end'])",
                "+    d: dict = {}",
                "+    _move_attrs(o, d, ['id', 'tls_established', 'sni', 'cipher_name', 'alpn_proto_negotiated', 'tls_version',",
                "+                       'timestamp_start', 'timestamp_tcp_setup', 'timestamp_tls_setup', 'timestamp_end'])",
                "     for cert in ['clientcert', 'mitmcert']:",
                "         if hasattr(o, cert) and getattr(o, cert):",
                "-            c = Cert(\"\")",
                "-            c.from_pem(getattr(o, cert))",
                "-            d[cert] = c",
                "+            d[cert] = Cert.from_pem(getattr(o, cert))",
                "     if o.tls_extensions:",
                "@@ -154,5 +152,5 @@ def _load_http_client_conn(o: http_pb2.ClientConnection) -> ClientConnection:",
                " def _load_http_server_conn(o: http_pb2.ServerConnection) -> ServerConnection:",
                "-    d = {}",
                "+    d: dict = {}",
                "     _move_attrs(o, d, ['id', 'tls_established', 'sni', 'alpn_proto_negotiated', 'tls_version',",
                "-                          'timestamp_start', 'timestamp_tcp_setup', 'timestamp_tls_setup', 'timestamp_end'])",
                "+                       'timestamp_start', 'timestamp_tcp_setup', 'timestamp_tls_setup', 'timestamp_end'])",
                "     for addr in ['address', 'ip_address', 'source_address']:",
                "@@ -161,7 +159,6 @@ def _load_http_server_conn(o: http_pb2.ServerConnection) -> ServerConnection:",
                "     if o.cert:",
                "-        c = Cert(\"\")",
                "-        c.from_pem(o.cert)",
                "+        c = Cert.from_pem(o.cert)",
                "         d['cert'] = c",
                "-    if len(o.via.id):",
                "-        d['via'] = _load_http_server_conn(d['via'])",
                "+    if o.HasField('via'):",
                "+        d['via'] = _load_http_server_conn(o.via)",
                "     sc = ServerConnection(tuple())",
                "@@ -183,5 +180,7 @@ def load_http(hf: http_pb2.HTTPFlow) -> HTTPFlow:",
                "     for p in ['request', 'response', 'client_conn', 'server_conn', 'error']:",
                "-        if hasattr(hf, p) and getattr(hf, p):",
                "+        if hf.HasField(p):",
                "             parts[p] = eval(f\"_load_http_{p}\")(getattr(hf, p))",
                "-    _move_attrs(hf, parts, ['intercepted', 'marked', 'mode', 'id', 'version'])",
                "+        else:",
                "+            parts[p] = None",
                "+    _move_attrs(hf, parts, ['intercepted', 'marked', 'mode', 'id'])",
                "     f = HTTPFlow(ClientConnection(None, tuple(), None), ServerConnection(tuple()))",
                "@@ -197,7 +196,3 @@ def loads(b: bytes, typ=\"http\") -> flow.Flow:",
                "         p = http_pb2.HTTPFlow()",
                "-        try:",
                "-            p.ParseFromString(b)",
                "-            return load_http(p)",
                "-        except Exception as e:",
                "-            ctx.log(str(e))",
                "-",
                "+        p.ParseFromString(b)",
                "+        return load_http(p)",
                "diff --git a/setup.cfg b/setup.cfg",
                "index 32b6aac3c..173166d13 100644",
                "--- a/setup.cfg",
                "+++ b/setup.cfg",
                "@@ -4,3 +4,3 @@ max-complexity = 25",
                " ignore = E251,C901,W503,W292,E722,E741",
                "-exclude = mitmproxy/contrib/*,test/mitmproxy/data/*,release/build/*",
                "+exclude = mitmproxy/contrib/*,test/mitmproxy/data/*,release/build/*,mitmproxy/io/proto/*",
                " addons = file,open,basestring,xrange,unicode,long,cmp",
                "diff --git a/setup.py b/setup.py",
                "index acd3f2952..954327e9b 100644",
                "--- a/setup.py",
                "+++ b/setup.py",
                "@@ -72,2 +72,3 @@ setup(",
                "         \"passlib>=1.6.5, <1.8\",",
                "+        \"protobuf>=3.6.0, <3.7\",",
                "         \"pyasn1>=0.3.1,<0.5\",",
                "@@ -76,3 +77,2 @@ setup(",
                "         \"pyperclip>=1.6.0, <1.7\",",
                "-        \"protobuf>=3.6.0, <3.7\",",
                "         \"ruamel.yaml>=0.13.2, <0.16\",",
                "diff --git a/test/filename_matching.py b/test/filename_matching.py",
                "index 5f49725e6..f53213072 100755",
                "--- a/test/filename_matching.py",
                "+++ b/test/filename_matching.py",
                "@@ -11,3 +11,4 @@ def check_src_files_have_test():",
                "-    excluded = ['mitmproxy/contrib/', 'mitmproxy/test/', 'mitmproxy/tools/', 'mitmproxy/platform/']",
                "+    excluded = ['mitmproxy/contrib/', 'mitmproxy/io/proto/',",
                "+                'mitmproxy/test/', 'mitmproxy/tools/', 'mitmproxy/platform/']",
                "     src_files = glob.glob('mitmproxy/**/*.py', recursive=True) + glob.glob('pathod/**/*.py', recursive=True)",
                "diff --git a/test/mitmproxy/io/test_db.py b/test/mitmproxy/io/test_db.py",
                "new file mode 100644",
                "index 000000000..4a2dfb671",
                "--- /dev/null",
                "+++ b/test/mitmproxy/io/test_db.py",
                "@@ -0,0 +1,26 @@",
                "+from mitmproxy.io import db",
                "+from mitmproxy.test import tflow",
                "+",
                "+",
                "+class TestDB:",
                "+",
                "+    def test_create(self, tdata):",
                "+        dh = db.DBHandler(db_path=tdata.path(\"mitmproxy/data\") + \"/tmp.sqlite\")",
                "+        with dh._con as c:",
                "+            cur = c.cursor()",
                "+            cur.execute(\"SELECT name FROM sqlite_master WHERE type='table' AND name='FLOWS';\")",
                "+            assert cur.fetchall() == [('FLOWS',)]",
                "+",
                "+    def test_roundtrip(self, tdata):",
                "+        dh = db.DBHandler(db_path=tdata.path(\"mitmproxy/data\") + \"/tmp.sqlite\", mode='write')",
                "+        flows = []",
                "+        for i in range(10):",
                "+            flows.append(tflow.tflow())",
                "+        dh.store(flows)",
                "+        dh = db.DBHandler(db_path=tdata.path(\"mitmproxy/data\") + \"/tmp.sqlite\")",
                "+        with dh._con as c:",
                "+            cur = c.cursor()",
                "+            cur.execute(\"SELECT count(*) FROM FLOWS;\")",
                "+            assert cur.fetchall()[0][0] == 10",
                "+        loaded_flows = dh.load()",
                "+        assert len(loaded_flows) == len(flows)",
                "diff --git a/test/mitmproxy/io/test_protobuf.py b/test/mitmproxy/io/test_protobuf.py",
                "new file mode 100644",
                "index 000000000..f725b9809",
                "--- /dev/null",
                "+++ b/test/mitmproxy/io/test_protobuf.py",
                "@@ -0,0 +1,120 @@",
                "+import pytest",
                "+",
                "+from mitmproxy import certs",
                "+from mitmproxy import http",
                "+from mitmproxy import exceptions",
                "+from mitmproxy.test import tflow, tutils",
                "+from mitmproxy.io import protobuf",
                "+",
                "+",
                "+class TestProtobuf:",
                "+",
                "+    def test_roundtrip_client(self):",
                "+        c = tflow.tclient_conn()",
                "+        del c.reply",
                "+        c.rfile = None",
                "+        c.wfile = None",
                "+        pc = protobuf._dump_http_client_conn(c)",
                "+        lc = protobuf._load_http_client_conn(pc)",
                "+        assert c.__dict__ == lc.__dict__",
                "+",
                "+    def test_roundtrip_client_cert(self, tdata):",
                "+        c = tflow.tclient_conn()",
                "+        c.rfile = None",
                "+        c.wfile = None",
                "+        del c.reply",
                "+        with open(tdata.path(\"mitmproxy/net/data/clientcert/client.pem\"), \"rb\") as f:",
                "+            d = f.read()",
                "+        c.clientcert = certs.Cert.from_pem(d)",
                "+        pc = protobuf._dump_http_client_conn(c)",
                "+        lc = protobuf._load_http_client_conn(pc)",
                "+        assert c.__dict__ == lc.__dict__",
                "+",
                "+    def test_roundtrip_server(self):",
                "+        s = tflow.tserver_conn()",
                "+        del s.reply",
                "+        s.wfile = None",
                "+        s.rfile = None",
                "+        ps = protobuf._dump_http_server_conn(s)",
                "+        ls = protobuf._load_http_server_conn(ps)",
                "+        assert s.__dict__ == ls.__dict__",
                "+",
                "+    def test_roundtrip_server_cert(self, tdata):",
                "+        s = tflow.tserver_conn()",
                "+        del s.reply",
                "+        s.wfile = None",
                "+        s.rfile = None",
                "+        with open(tdata.path(\"mitmproxy/net/data/text_cert\"), \"rb\") as f:",
                "+            d = f.read()",
                "+        s.cert = certs.Cert.from_pem(d)",
                "+        ps = protobuf._dump_http_server_conn(s)",
                "+        ls = protobuf._load_http_server_conn(ps)",
                "+        assert s.__dict__ == ls.__dict__",
                "+",
                "+    def test_roundtrip_server_via(self):",
                "+        s = tflow.tserver_conn()",
                "+        s.via = tflow.tserver_conn()",
                "+        del s.reply",
                "+        s.wfile = None",
                "+        s.rfile = None",
                "+        ps = protobuf._dump_http_server_conn(s)",
                "+        ls = protobuf._load_http_server_conn(ps)",
                "+        assert s.__dict__ == ls.__dict__",
                "+        del s.via.reply",
                "+        s.via.wfile = None",
                "+        s.via.rfile = None",
                "+        assert s.via.__dict__ == ls.via.__dict__",
                "+",
                "+    def test_roundtrip_http_request(self):",
                "+        req = http.HTTPRequest.wrap(tutils.treq())",
                "+        preq = protobuf._dump_http_request(req)",
                "+        lreq = protobuf._load_http_request(preq)",
                "+        assert req.__dict__ == lreq.__dict__",
                "+",
                "+    def test_roundtrip_http_request_empty_content(self):",
                "+        req = http.HTTPRequest.wrap(tutils.treq(content=b\"\"))",
                "+        preq = protobuf._dump_http_request(req)",
                "+        lreq = protobuf._load_http_request(preq)",
                "+        assert req.__dict__ == lreq.__dict__",
                "+",
                "+    def test_roundtrip_http_response(self):",
                "+        res = http.HTTPResponse.wrap(tutils.tresp())",
                "+        pres = protobuf._dump_http_response(res)",
                "+        lres = protobuf._load_http_response(pres)",
                "+        assert res.__dict__ == lres.__dict__",
                "+",
                "+    def test_roundtrip_http_response_empty_content(self):",
                "+        res = http.HTTPResponse.wrap(tutils.tresp(content=b\"\"))",
                "+        pres = protobuf._dump_http_response(res)",
                "+        lres = protobuf._load_http_response(pres)",
                "+        assert res.__dict__ == lres.__dict__",
                "+",
                "+    def test_roundtrip_http_error(self):",
                "+        err = tflow.terr()",
                "+        perr = protobuf._dump_http_error(err)",
                "+        lerr = protobuf._load_http_error(perr)",
                "+        assert err.__dict__ == lerr.__dict__",
                "+",
                "+    def test_roundtrip_http_flow_only_req(self):",
                "+        f = tflow.tflow()",
                "+        f.reply = None",
                "+        pf = protobuf.dumps(f)",
                "+        lf = protobuf.loads(pf, \"http\")",
                "+        assert f.__dict__ == lf.__dict__",
                "+",
                "+    def test_roundtrip_http_flow_res(self):",
                "+        f = tflow.tflow(resp=True)",
                "+        f.reply = None",
                "+        pf = protobuf.dumps(f)",
                "+        lf = protobuf.loads(pf, \"http\")",
                "+        assert f.__dict__ == lf.__dict__",
                "+",
                "+    def test_unsupported_dumps(self):",
                "+        w = tflow.twebsocketflow()",
                "+        with pytest.raises(exceptions.TypeError):",
                "+            protobuf.dumps(w)",
                "+",
                "+    def test_unsupported_loads(self):",
                "+        b = b\"blobs\"",
                "+        with pytest.raises(exceptions.TypeError):",
                "+            protobuf.loads(b, 'not-http')"
            ],
            "changed_files": [
                ".gitignore",
                "mitmproxy/io/__init__.py",
                "mitmproxy/io/db.py",
                "mitmproxy/io/proto/http.proto",
                "mitmproxy/io/proto/http_pb2.py",
                "mitmproxy/io/protobuf.py",
                "setup.cfg",
                "setup.py",
                "test/filename_matching.py",
                "test/mitmproxy/io/test_db.py",
                "test/mitmproxy/io/test_protobuf.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "10.0.0",
                "10.1.0",
                "10.1.1",
                "10.1.2",
                "10.1.3",
                "10.1.4",
                "10.1.5",
                "10.1.6",
                "10.2.0",
                "10.2.1",
                "10.2.2",
                "10.2.3",
                "10.2.4",
                "10.3.0",
                "9.0.0",
                "9.0.1",
                "v10.0.0",
                "v10.1.0",
                "v10.1.1",
                "v10.1.2",
                "v10.1.3",
                "v10.1.4",
                "v10.1.5",
                "v10.1.6",
                "v10.2.0",
                "v10.2.1",
                "v10.2.2",
                "v10.2.3",
                "v10.2.4",
                "v10.3.0",
                "v10.3.1",
                "v5.0.0",
                "v5.0.1",
                "v5.1.0",
                "v5.1.1",
                "v5.2",
                "v5.3.0",
                "v6.0.0",
                "v6.0.1",
                "v6.0.2",
                "v7.0.0",
                "v7.0.1",
                "v7.0.2",
                "v7.0.3",
                "v7.0.4",
                "v8.0.0",
                "v8.1.0",
                "v8.1.1",
                "v9.0.0",
                "v9.0.1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: app",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "e727446f14870f087df2687883c3445fe10c3d95",
            "repository": "https://github.com/mitmproxy/mitmproxy",
            "timestamp": 1532373173,
            "hunks": 14,
            "message": "benchmark: some improvements - limit to queue size",
            "diff": [
                "diff --git a/test/bench/serialization-bm.py b/test/bench/serialization-bm.py",
                "old mode 100755",
                "new mode 100644",
                "index 6bac6415a..665b72cbe",
                "--- a/test/bench/serialization-bm.py",
                "+++ b/test/bench/serialization-bm.py",
                "@@ -1,4 +1,6 @@",
                "+import tempfile",
                " import asyncio",
                "+import typing",
                " import time",
                "-import os",
                "+",
                " from statistics import mean",
                "@@ -18,4 +20,2 @@ class StreamTester:",
                "     def __init__(self):",
                "-        self.loop = asyncio.get_event_loop()",
                "-        self.queue = asyncio.Queue(loop=self.loop)",
                "         self.dbh = None",
                "@@ -26,3 +26,3 @@ class StreamTester:",
                "         self.results = []",
                "-        self._fflushes = 0",
                "+        self._flushes = 0",
                "         self._stream_period = 0.001",
                "@@ -30,2 +30,6 @@ class StreamTester:",
                "         self._flush_rate = 150",
                "+        self._target = 2000",
                "+        self.loop = asyncio.get_event_loop()",
                "+        self.queue = asyncio.Queue(maxsize=self._flush_rate * 3, loop=self.loop)",
                "+        self.temp = tempfile.NamedTemporaryFile()",
                "@@ -40,4 +44,4 @@ class StreamTester:",
                "             \"benchmark_save_path\",",
                "-            str,",
                "-            \"/tmp/stats\",",
                "+            typing.Optional[str],",
                "+            None,",
                "             \"Destination for the stats result file\"",
                "@@ -45,2 +49,8 @@ class StreamTester:",
                "+    def _log(self, msg):",
                "+        if self.out:",
                "+            self.out.write(msg + '\\n')",
                "+        else:",
                "+            ctx.log(msg)",
                "+",
                "     def running(self):",
                "@@ -51,6 +61,9 @@ class StreamTester:",
                "             ctx.log(f\"With content size: {len(self.tf.request.content)} B\")",
                "-            self.dbh = db.DBHandler(\"/tmp/temp.sqlite\", mode='write')",
                "-            self.out = open(ctx.options.benchmark_save_path, \"w\")",
                "+            if ctx.options.benchmark_save_path:",
                "+                ctx.log(f\"Storing results to {ctx.options.benchmark_save_path}\")",
                "+                self.out = open(ctx.options.benchmark_save_path, \"w\")",
                "+            self.dbh = db.DBHandler(self.temp.name, mode='write')",
                "             self.streaming = True",
                "-            self.loop.create_task(asyncio.gather(self.writer(), self.stream(), self.stats()))",
                "+            tasks = (self.stream, self.writer, self.stats)",
                "+            self.loop.create_task(asyncio.gather(*(t() for t in tasks)))",
                "@@ -67,3 +80,3 @@ class StreamTester:",
                "             self.hot_flows.append(f)",
                "-            while not self.queue.empty() and count < self._flush_rate:",
                "+            while count < self._flush_rate:",
                "                 try:",
                "@@ -76,6 +89,7 @@ class StreamTester:",
                "             end = time.perf_counter()",
                "-            self.out.write(f\"dumps/time ratio: {n} / {end-start} -> {n/(end-start)}\\n\")",
                "+            self._log(f\"dumps/time ratio: {n} / {end-start} -> {n/(end-start)}\")",
                "             self.results.append(n / (end - start))",
                "-            self._fflushes += 1",
                "-            ctx.log(f\"Flushes: {self._fflushes}\")",
                "+            self._flushes += n",
                "+            self._log(f\"Flows dumped: {self._flushes}\")",
                "+            ctx.log(f\"Progress: {min(100.0, 100.0 * (self._flushes / self._target))}%\")",
                "@@ -84,8 +98,8 @@ class StreamTester:",
                "             await asyncio.sleep(1.0)",
                "-            if self._fflushes == 21:",
                "-                self.out.write(f\"AVG : {mean(self.results)}\\n\")",
                "-                ctx.log(f\"<== Benchmark Ended. Collect results at {ctx.options.benchmark_save_path} ==>\")",
                "-                self.out.close()",
                "-                del self.dbh",
                "-                os.remove(\"/tmp/temp.sqlite\")",
                "+            if self._flushes >= self._target:",
                "+                self._log(f\"AVG : {mean(self.results)}\")",
                "+                ctx.log(f\"<== Benchmark Ended. Shutting down... ==>\")",
                "+                if self.out:",
                "+                    self.out.close()",
                "+                self.temp.close()",
                "                 ctx.master.shutdown()"
            ],
            "changed_files": [
                "test/bench/serialization-bm.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "10.0.0",
                "10.1.0",
                "10.1.1",
                "10.1.2",
                "10.1.3",
                "10.1.4",
                "10.1.5",
                "10.1.6",
                "10.2.0",
                "10.2.1",
                "10.2.2",
                "10.2.3",
                "10.2.4",
                "10.3.0",
                "9.0.0",
                "9.0.1",
                "v10.0.0",
                "v10.1.0",
                "v10.1.1",
                "v10.1.2",
                "v10.1.3",
                "v10.1.4",
                "v10.1.5",
                "v10.1.6",
                "v10.2.0",
                "v10.2.1",
                "v10.2.2",
                "v10.2.3",
                "v10.2.4",
                "v10.3.0",
                "v10.3.1",
                "v5.0.0",
                "v5.0.1",
                "v5.1.0",
                "v5.1.1",
                "v5.2",
                "v5.3.0",
                "v6.0.0",
                "v6.0.1",
                "v6.0.2",
                "v7.0.0",
                "v7.0.1",
                "v7.0.2",
                "v7.0.3",
                "v7.0.4",
                "v8.0.0",
                "v8.1.0",
                "v8.1.1",
                "v9.0.0",
                "v9.0.1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: app",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "8ab82ad9a3b2fc440441309ac98568433193ac1f",
            "repository": "https://github.com/mitmproxy/mitmproxy",
            "timestamp": 1532250971,
            "hunks": 1,
            "message": "benchmark: new protobuf serialization performance profiler",
            "diff": [
                "diff --git a/test/bench/serialization-bm.py b/test/bench/serialization-bm.py",
                "new file mode 100755",
                "index 000000000..6bac6415a",
                "--- /dev/null",
                "+++ b/test/bench/serialization-bm.py",
                "@@ -0,0 +1,102 @@",
                "+import asyncio",
                "+import time",
                "+import os",
                "+from statistics import mean",
                "+",
                "+from mitmproxy import ctx",
                "+from mitmproxy.io import db",
                "+from mitmproxy.test import tflow",
                "+",
                "+",
                "+class StreamTester:",
                "+",
                "+    \"\"\"",
                "+    Generates a constant stream of flows and",
                "+    measure protobuf dumping throughput.",
                "+    \"\"\"",
                "+",
                "+    def __init__(self):",
                "+        self.loop = asyncio.get_event_loop()",
                "+        self.queue = asyncio.Queue(loop=self.loop)",
                "+        self.dbh = None",
                "+        self.streaming = False",
                "+        self.tf = None",
                "+        self.out = None",
                "+        self.hot_flows = []",
                "+        self.results = []",
                "+        self._fflushes = 0",
                "+        self._stream_period = 0.001",
                "+        self._flush_period = 3.0",
                "+        self._flush_rate = 150",
                "+",
                "+    def load(self, loader):",
                "+        loader.add_option(",
                "+            \"testflow_size\",",
                "+            int,",
                "+            1000,",
                "+            \"Length in bytes of test flow content\"",
                "+        )",
                "+        loader.add_option(",
                "+            \"benchmark_save_path\",",
                "+            str,",
                "+            \"/tmp/stats\",",
                "+            \"Destination for the stats result file\"",
                "+        )",
                "+",
                "+    def running(self):",
                "+        if not self.streaming:",
                "+            ctx.log(\"<== Serialization Benchmark Enabled ==>\")",
                "+            self.tf = tflow.tflow()",
                "+            self.tf.request.content = b'A' * ctx.options.testflow_size",
                "+            ctx.log(f\"With content size: {len(self.tf.request.content)} B\")",
                "+            self.dbh = db.DBHandler(\"/tmp/temp.sqlite\", mode='write')",
                "+            self.out = open(ctx.options.benchmark_save_path, \"w\")",
                "+            self.streaming = True",
                "+            self.loop.create_task(asyncio.gather(self.writer(), self.stream(), self.stats()))",
                "+",
                "+    async def stream(self):",
                "+        while True:",
                "+            await self.queue.put(self.tf)",
                "+            await asyncio.sleep(self._stream_period)",
                "+",
                "+    async def writer(self):",
                "+        while True:",
                "+            await asyncio.sleep(self._flush_period)",
                "+            count = 1",
                "+            f = await self.queue.get()",
                "+            self.hot_flows.append(f)",
                "+            while not self.queue.empty() and count < self._flush_rate:",
                "+                try:",
                "+                    self.hot_flows.append(self.queue.get_nowait())",
                "+                    count += 1",
                "+                except asyncio.QueueEmpty:",
                "+                    pass",
                "+            start = time.perf_counter()",
                "+            n = self._fflush()",
                "+            end = time.perf_counter()",
                "+            self.out.write(f\"dumps/time ratio: {n} / {end-start} -> {n/(end-start)}\\n\")",
                "+            self.results.append(n / (end - start))",
                "+            self._fflushes += 1",
                "+            ctx.log(f\"Flushes: {self._fflushes}\")",
                "+",
                "+    async def stats(self):",
                "+        while True:",
                "+            await asyncio.sleep(1.0)",
                "+            if self._fflushes == 21:",
                "+                self.out.write(f\"AVG : {mean(self.results)}\\n\")",
                "+                ctx.log(f\"<== Benchmark Ended. Collect results at {ctx.options.benchmark_save_path} ==>\")",
                "+                self.out.close()",
                "+                del self.dbh",
                "+                os.remove(\"/tmp/temp.sqlite\")",
                "+                ctx.master.shutdown()",
                "+",
                "+    def _fflush(self):",
                "+        self.dbh.store(self.hot_flows)",
                "+        n = len(self.hot_flows)",
                "+        self.hot_flows = []",
                "+        return n",
                "+",
                "+",
                "+addons = [",
                "+    StreamTester()",
                "+]"
            ],
            "changed_files": [
                "test/bench/serialization-bm.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "10.0.0",
                "10.1.0",
                "10.1.1",
                "10.1.2",
                "10.1.3",
                "10.1.4",
                "10.1.5",
                "10.1.6",
                "10.2.0",
                "10.2.1",
                "10.2.2",
                "10.2.3",
                "10.2.4",
                "10.3.0",
                "9.0.0",
                "9.0.1",
                "v10.0.0",
                "v10.1.0",
                "v10.1.1",
                "v10.1.2",
                "v10.1.3",
                "v10.1.4",
                "v10.1.5",
                "v10.1.6",
                "v10.2.0",
                "v10.2.1",
                "v10.2.2",
                "v10.2.3",
                "v10.2.4",
                "v10.3.0",
                "v10.3.1",
                "v5.0.0",
                "v5.0.1",
                "v5.1.0",
                "v5.1.1",
                "v5.2",
                "v5.3.0",
                "v6.0.0",
                "v6.0.1",
                "v6.0.2",
                "v7.0.0",
                "v7.0.1",
                "v7.0.2",
                "v7.0.3",
                "v7.0.4",
                "v8.0.0",
                "v8.1.0",
                "v8.1.1",
                "v9.0.0",
                "v9.0.1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: app",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "9c1710190e7b06246f4ac909f0eb32e50d042a31",
            "repository": "https://github.com/mitmproxy/mitmproxy",
            "timestamp": 1475482051,
            "hunks": 2,
            "message": "add smoke test",
            "diff": [
                "diff --git a/smoke_test_moz_top500.py b/smoke_test_moz_top500.py",
                "new file mode 100755",
                "index 000000000..3bc9e8948",
                "--- /dev/null",
                "+++ b/smoke_test_moz_top500.py",
                "@@ -0,0 +1,227 @@",
                "+#!/usr/bin/env python3",
                "+",
                "+# example command:",
                "+#   > py.test smoke_test_moz_top500.py -s n 4",
                "+",
                "+\"\"\"",
                "+Install on Ubuntu 16.04:",
                "+sudo apt-get install python3-pip python3-dev python3-venv libffi-dev libssl-dev libtiff5-dev libjpeg8-dev zlib1g-dev libwebp-dev",
                "+",
                "+sudo apt-get build-dep nghttp2",
                "+wget https://github.com/nghttp2/nghttp2/releases/download/v1.17.0/nghttp2-1.17.0.tar.bz2",
                "+tar xvjf nghttp2-1.17.0.tar.bz2",
                "+cd nghttp2-1.17.0",
                "+autoreconf -i",
                "+automake",
                "+autoreconf",
                "+./configure --disable-app",
                "+make",
                "+sudo make install",
                "+sudo ldconfig",
                "+",
                "+sudo apt-get build-dep curl",
                "+wget https://curl.haxx.se/download/curl-7.51.0.tar.bz2",
                "+tar xvjf curl-7.51.0.tar.bz2",
                "+cd curl-7.51.0",
                "+./configure",
                "+make",
                "+\"\"\"",
                "+",
                "+import tempfile",
                "+import sys",
                "+import os",
                "+import csv",
                "+import subprocess",
                "+import queue",
                "+import threading",
                "+import glob",
                "+import time",
                "+",
                "+import pytest",
                "+from flaky import flaky",
                "+",
                "+from mitmproxy import controller, flow, proxy, options",
                "+from mitmproxy.proxy.server import ProxyServer",
                "+from mitmproxy.proxy.config import ProxyConfig",
                "+from mitmproxy.addons.disable_h2c_upgrade import DisableH2CleartextUpgrade",
                "+from test.mitmproxy import tservers",
                "+",
                "+",
                "+def generate_combinations():",
                "+    if not os.path.isfile('tmp/top500.domains.csv'):",
                "+        subprocess.run(['wget', 'https://moz.com/top500/domains/csv', '-q', '-O', 'tmp/top500.domains.csv'])",
                "+",
                "+    domains = []",
                "+    with open('tmp/top500.domains.csv') as csvfile:",
                "+        reader = csv.reader(csvfile, delimiter=',', quotechar='\"')",
                "+        headers = next(reader)",
                "+        domains = [row[1].rstrip('/') for row in reader]",
                "+",
                "+    l = [[",
                "+            (False, domain, \"http://{}\".format(domain)),",
                "+            (False, domain, \"https://{}\".format(domain)),",
                "+            (False, domain, \"http://www.{}\".format(domain)),",
                "+            (False, domain, \"https://www.{}\".format(domain)),",
                "+            (True, domain, \"http://{}\".format(domain)),",
                "+            (True, domain, \"http://www.{}\".format(domain)),",
                "+            (True, domain, \"https://{}\".format(domain)),",
                "+            (True, domain, \"https://www.{}\".format(domain)),",
                "+        ] for domain in domains]",
                "+    return [item for sublist in l for item in sublist]",
                "+",
                "+",
                "+def write_protocol(offer_h2, domain, url, message=None, stdout=None, stderr=None, fs=None, tlog=None):",
                "+    u = 'h2_' if offer_h2 else ''",
                "+    u += 'http' if url.startswith('http://') else 'https'",
                "+    u += '_www.' if '://www.' in url else '_'",
                "+    u += domain",
                "+    with open(\"tmp/{}/{}.txt\".format(os.environ['SMOKE_TEST_TIMESTAMP'], u), mode='a') as file:",
                "+        file.write(\"################################################################################\\n\".format(domain))",
                "+        file.write(\"domain: {}\\n\".format(domain))",
                "+        file.write(\"url: {}\\n\".format(url))",
                "+",
                "+        if message:",
                "+            file.write(\"{}\\n\".format(message))",
                "+",
                "+        file.write(\"\\n\\n\")",
                "+        if fs:",
                "+            file.write(\"flows in mitmproxy:\\n\")",
                "+            for fl in fs.keys():",
                "+                file.write(\"{}\\n\".format(fl))",
                "+        else:",
                "+            file.write(\"<no flows in mitmproxy>\\n\")",
                "+",
                "+        if stdout:",
                "+            file.write(\"\\n\\n\")",
                "+            file.write(\"stdout:\\n{}\\n\".format(stdout.decode()))",
                "+        if stderr:",
                "+            file.write(\"\\n\\n\")",
                "+            file.write(\"stderr:\\n{}\\n\".format(stderr.decode()))",
                "+",
                "+        if tlog:",
                "+            file.write(\"\\n\\n\")",
                "+            for msg in tlog:",
                "+                file.write(msg)",
                "+                file.write(\"\\n\")",
                "+",
                "+        file.write(\"\\n\\n\")",
                "+",
                "+",
                "+class TestSmokeCurl(object):",
                "+    @classmethod",
                "+    def setup_class(cls):",
                "+        opts = options.Options(",
                "+            listen_port=0,",
                "+            no_upstream_cert=False,",
                "+            ssl_insecure=True,",
                "+            verbosity=99,",
                "+            flow_detail=99,",
                "+        )",
                "+        opts.cadir = os.path.join(tempfile.gettempdir(), \"mitmproxy\")",
                "+        config = ProxyConfig(opts)",
                "+",
                "+        tmaster = tservers.TestMaster(opts, config)",
                "+        cls.proxy = proxy = tservers.ProxyThread(tmaster)",
                "+        cls.proxy.start()",
                "+",
                "+    @classmethod",
                "+    def teardown_class(cls):",
                "+        cls.proxy.shutdown()",
                "+",
                "+    @flaky(max_runs=3)",
                "+    @pytest.mark.parametrize('offer_h2, domain, url', generate_combinations())",
                "+    def test_smoke_curl(self, offer_h2, domain, url):",
                "+        self.proxy.tmaster.reset([DisableH2CleartextUpgrade()])",
                "+",
                "+        cmd = [",
                "+            '/home/ubuntu/curl-7.51.0/src/curl',",
                "+            '--location',",
                "+            '--insecure',",
                "+            '--silent',",
                "+            '--verbose',",
                "+            '--fail',",
                "+            '--http2' if offer_h2 else '--http1.1',",
                "+            '--alpn' if offer_h2 else '--no-alpn',",
                "+            '--npn' if offer_h2 else '--no-npn',",
                "+            '--cookie', 'tmp/cookie_jar',",
                "+            '--cookie-jar', 'tmp/cookie_jar',",
                "+            '--header', 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',",
                "+            '--header', 'Accept-Encoding: gzip, deflate',",
                "+            '--header', 'Accept-Language: en,en-US;q=0.8,de;q=0.6',",
                "+            '--user-agent', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:50.0) Gecko/20100101 Firefox/50.0',",
                "+        ]",
                "+",
                "+        for i in range(3):",
                "+            try:",
                "+                subprocess.run(cmd + [url], stdout=subprocess.PIPE, stderr=subprocess.PIPE, timeout=60, check=True)",
                "+            except:",
                "+                if i == 2:",
                "+                    pytest.skip('{}: curl failed, so skip testing through mitmproxy'.format(url))",
                "+",
                "+        output = b''",
                "+        negotiated_http2 = False",
                "+        c = cmd + [",
                "+            '--proxy', 'http://127.0.0.1:{}'.format(self.proxy.port),",
                "+            url",
                "+        ]",
                "+        try:",
                "+            c = subprocess.run(c, stdout=subprocess.PIPE, stderr=subprocess.PIPE, timeout=60, check=True)",
                "+            output += c.stderr",
                "+            if b'ALPN, server accepted to use h2' in c.stderr:",
                "+                negotiated_http2 = True",
                "+        except subprocess.CalledProcessError as e:",
                "+            write_protocol(offer_h2,",
                "+                           domain,",
                "+                           url,",
                "+                           'curl failed: returncode={}'.format(e.returncode),",
                "+                           stdout=e.stdout,",
                "+                           stderr=e.stderr,",
                "+                           tlog=self.proxy.tmaster.tlog)",
                "+            pytest.fail(\"curl failed: {}, returncode: {}\".format(url, e.returncode))",
                "+        except subprocess.TimeoutExpired as e:",
                "+            write_protocol(offer_h2,",
                "+                           domain,",
                "+                           url,",
                "+                           'timeout',",
                "+                           stdout=e.stdout,",
                "+                           stderr=e.stderr,",
                "+                           tlog=self.proxy.tmaster.tlog)",
                "+            pytest.fail(\"timeout: {}\".format(url))",
                "+",
                "+",
                "+        fs = {}",
                "+        for f in self.proxy.tmaster.state.flows:",
                "+            if f.response:",
                "+                fs[(f.request.http_version, f.request.scheme, f.request.host, f.response.status_code)] = f",
                "+",
                "+        no_failed_flows = len([k for k in fs.keys() if k[3] >= 500]) == 0",
                "+        if not no_failed_flows:",
                "+            write_protocol(offer_h2, domain, url, stdout=output, fs=fs, tlog=self.proxy.tmaster.tlog)",
                "+        assert no_failed_flows",
                "+",
                "+        successful_flows = len([k for k in fs.keys() if k[3] == 200]) >= 1",
                "+        if not successful_flows:",
                "+            write_protocol(offer_h2, domain, url, stdout=output, fs=fs, tlog=self.proxy.tmaster.tlog)",
                "+        assert successful_flows",
                "+",
                "+        if negotiated_http2:",
                "+            successful_flows = len([k for k in fs.keys() if k[0] == 'HTTP/2.0' and k[3] >= 200 and k[3] <= 399]) >= 1",
                "+            if not successful_flows:",
                "+                write_protocol(offer_h2, domain, url, stdout=output, fs=fs, tlog=self.proxy.tmaster.tlog)",
                "+            assert successful_flows",
                "+",
                "+        for k, flow in [(k, f) for k, f in fs.items() if k[3] == 200]:",
                "+            success = flow.error is None and flow.request and flow.response",
                "+            if not success:",
                "+                write_protocol(offer_h2, domain, url, stdout=output, fs=fs, tlog=self.proxy.tmaster.tlog)",
                "+            assert success",
                "+",
                "+        for m in self.proxy.tmaster.tlog:",
                "+            assert 'Traceback' not in m",
                "+",
                "+",
                "+if __name__ == '__main__':",
                "+    os.environ['SMOKE_TEST_TIMESTAMP'] = time.strftime(\"%Y%m%d-%H%M\")",
                "+    print(os.environ['SMOKE_TEST_TIMESTAMP'])",
                "+    os.makedirs('tmp/{}'.format(os.environ['SMOKE_TEST_TIMESTAMP']), exist_ok=True)",
                "+    pytest.main(args=['-s', '-v', '-n', '16', '--show-progress', '--no-flaky-report', sys.argv[0]])",
                "diff --git a/twitter.py b/twitter.py",
                "new file mode 100644",
                "index 000000000..c7500d457",
                "--- /dev/null",
                "+++ b/twitter.py",
                "@@ -0,0 +1,52 @@",
                "+import certifi",
                "+import h2.connection",
                "+import h2.events",
                "+",
                "+import errno",
                "+import socket",
                "+import ssl",
                "+import time",
                "+",
                "+SERVER_NAME = 'twitter.com'",
                "+",
                "+socket.setdefaulttimeout(2)",
                "+",
                "+c = h2.connection.H2Connection()",
                "+c.initiate_connection()",
                "+",
                "+ctx = ssl.create_default_context(cafile=certifi.where())",
                "+ctx.set_alpn_protocols(['h2', 'http/1.1'])",
                "+ctx.set_npn_protocols(['h2', 'http/1.1'])",
                "+",
                "+s = socket.create_connection((SERVER_NAME, 443))",
                "+s = ctx.wrap_socket(s, server_hostname=SERVER_NAME)",
                "+",
                "+s.sendall(c.data_to_send())",
                "+",
                "+c.prioritize(1, weight=201, depends_on=0, exclusive=False)",
                "+",
                "+headers = [",
                "+    (':method', 'GET'),",
                "+    (':path', '/'),",
                "+    (':authority', SERVER_NAME),",
                "+    (':scheme', 'https'),",
                "+    ('user-agent', 'custom-python-script'),",
                "+]",
                "+c.send_headers(1, headers, end_stream=True)",
                "+",
                "+s.sendall(c.data_to_send())",
                "+",
                "+",
                "+while True:",
                "+    data = s.recv(65536 * 256)",
                "+    if not data:",
                "+        break",
                "+",
                "+    try:",
                "+        events = c.receive_data(data)",
                "+        s.sendall(c.data_to_send())",
                "+    except:",
                "+        break",
                "+",
                "+    for event in events:",
                "+        print(event)"
            ],
            "changed_files": [
                "smoke_test_moz_top500.py",
                "twitter.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: app",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "8fb5d2d482d8e483fe4f9f8a8d9ebd121128bdce",
            "repository": "https://github.com/mitmproxy/mitmproxy",
            "timestamp": 1530511803,
            "hunks": 1,
            "message": "Pass option, not option name to parse_setval Fixes #3230",
            "diff": [
                "diff --git a/mitmproxy/tools/console/options.py b/mitmproxy/tools/console/options.py",
                "index 6e1399ce5..5e5ef2a68 100644",
                "--- a/mitmproxy/tools/console/options.py",
                "+++ b/mitmproxy/tools/console/options.py",
                "@@ -176,3 +176,3 @@ class OptionsList(urwid.ListBox):",
                "                 try:",
                "-                    d = self.master.options.parse_setval(foc.opt.name, v)",
                "+                    d = self.master.options.parse_setval(foc.opt, v)",
                "                     self.master.options.update(**{foc.opt.name: d})"
            ],
            "changed_files": [
                "mitmproxy/tools/console/options.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "3230": "Pass option, not option name to parse_setval #3235"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "10.0.0",
                "10.1.0",
                "10.1.1",
                "10.1.2",
                "10.1.3",
                "10.1.4",
                "10.1.5",
                "10.1.6",
                "10.2.0",
                "10.2.1",
                "10.2.2",
                "10.2.3",
                "10.2.4",
                "10.3.0",
                "9.0.0",
                "9.0.1",
                "v10.0.0",
                "v10.1.0",
                "v10.1.1",
                "v10.1.2",
                "v10.1.3",
                "v10.1.4",
                "v10.1.5",
                "v10.1.6",
                "v10.2.0",
                "v10.2.1",
                "v10.2.2",
                "v10.2.3",
                "v10.2.4",
                "v10.3.0",
                "v10.3.1",
                "v5.0.0",
                "v5.0.1",
                "v5.1.0",
                "v5.1.1",
                "v5.2",
                "v5.3.0",
                "v6.0.0",
                "v6.0.1",
                "v6.0.2",
                "v7.0.0",
                "v7.0.1",
                "v7.0.2",
                "v7.0.3",
                "v7.0.4",
                "v8.0.0",
                "v8.1.0",
                "v8.1.1",
                "v9.0.0",
                "v9.0.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: tool",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 3230",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f20d78c3768deaef3a4b4a59273e0650248c8c9a",
            "repository": "https://github.com/mitmproxy/mitmproxy",
            "timestamp": 1532146260,
            "hunks": 0,
            "message": "Merge pull request #3251 from kajojify/command_history Command history",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "3251": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "10.0.0",
                "10.1.0",
                "10.1.1",
                "10.1.2",
                "10.1.3",
                "10.1.4",
                "10.1.5",
                "10.1.6",
                "10.2.0",
                "10.2.1",
                "10.2.2",
                "10.2.3",
                "10.2.4",
                "10.3.0",
                "9.0.0",
                "9.0.1",
                "v10.0.0",
                "v10.1.0",
                "v10.1.1",
                "v10.1.2",
                "v10.1.3",
                "v10.1.4",
                "v10.1.5",
                "v10.1.6",
                "v10.2.0",
                "v10.2.1",
                "v10.2.2",
                "v10.2.3",
                "v10.2.4",
                "v10.3.0",
                "v10.3.1",
                "v5.0.0",
                "v5.0.1",
                "v5.1.0",
                "v5.1.1",
                "v5.2",
                "v5.3.0",
                "v6.0.0",
                "v6.0.1",
                "v6.0.2",
                "v7.0.0",
                "v7.0.1",
                "v7.0.2",
                "v7.0.3",
                "v7.0.4",
                "v8.0.0",
                "v8.1.0",
                "v8.1.1",
                "v9.0.0",
                "v9.0.1"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 3251",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5f3cbbb3cd1a8930ec6f9df26cb0d4204391edd7",
            "repository": "https://github.com/mitmproxy/mitmproxy",
            "timestamp": 1532680694,
            "hunks": 0,
            "message": "Merge pull request #3155 from mitmproxy/requires-io-master dependency update on master branch",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "3155": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "10.0.0",
                "10.1.0",
                "10.1.1",
                "10.1.2",
                "10.1.3",
                "10.1.4",
                "10.1.5",
                "10.1.6",
                "10.2.0",
                "10.2.1",
                "10.2.2",
                "10.2.3",
                "10.2.4",
                "10.3.0",
                "9.0.0",
                "9.0.1",
                "v10.0.0",
                "v10.1.0",
                "v10.1.1",
                "v10.1.2",
                "v10.1.3",
                "v10.1.4",
                "v10.1.5",
                "v10.1.6",
                "v10.2.0",
                "v10.2.1",
                "v10.2.2",
                "v10.2.3",
                "v10.2.4",
                "v10.3.0",
                "v10.3.1",
                "v5.0.0",
                "v5.0.1",
                "v5.1.0",
                "v5.1.1",
                "v5.2",
                "v5.3.0",
                "v6.0.0",
                "v6.0.1",
                "v6.0.2",
                "v7.0.0",
                "v7.0.1",
                "v7.0.2",
                "v7.0.3",
                "v7.0.4",
                "v8.0.0",
                "v8.1.0",
                "v8.1.1",
                "v9.0.0",
                "v9.0.1"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 3155",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8ce963ad4c5a600c220c96957bd2a4bc886b1515",
            "repository": "https://github.com/mitmproxy/mitmproxy",
            "timestamp": 1532286307,
            "hunks": 0,
            "message": "Merge pull request #3258 from Kriechi/fix-whitespace fix whitespace",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "3258": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "10.0.0",
                "10.1.0",
                "10.1.1",
                "10.1.2",
                "10.1.3",
                "10.1.4",
                "10.1.5",
                "10.1.6",
                "10.2.0",
                "10.2.1",
                "10.2.2",
                "10.2.3",
                "10.2.4",
                "10.3.0",
                "9.0.0",
                "9.0.1",
                "v10.0.0",
                "v10.1.0",
                "v10.1.1",
                "v10.1.2",
                "v10.1.3",
                "v10.1.4",
                "v10.1.5",
                "v10.1.6",
                "v10.2.0",
                "v10.2.1",
                "v10.2.2",
                "v10.2.3",
                "v10.2.4",
                "v10.3.0",
                "v10.3.1",
                "v5.0.0",
                "v5.0.1",
                "v5.1.0",
                "v5.1.1",
                "v5.2",
                "v5.3.0",
                "v6.0.0",
                "v6.0.1",
                "v6.0.2",
                "v7.0.0",
                "v7.0.1",
                "v7.0.2",
                "v7.0.3",
                "v7.0.4",
                "v8.0.0",
                "v8.1.0",
                "v8.1.1",
                "v9.0.0",
                "v9.0.1"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 3258",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9c949bd2f852fb5f5a314e6faa45e4869571628c",
            "repository": "https://github.com/mitmproxy/mitmproxy",
            "timestamp": 1532442370,
            "hunks": 0,
            "message": "Merge pull request #3252 from madt1m/session-db Session - Hybrid DB",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "3252": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "10.0.0",
                "10.1.0",
                "10.1.1",
                "10.1.2",
                "10.1.3",
                "10.1.4",
                "10.1.5",
                "10.1.6",
                "10.2.0",
                "10.2.1",
                "10.2.2",
                "10.2.3",
                "10.2.4",
                "10.3.0",
                "9.0.0",
                "9.0.1",
                "v10.0.0",
                "v10.1.0",
                "v10.1.1",
                "v10.1.2",
                "v10.1.3",
                "v10.1.4",
                "v10.1.5",
                "v10.1.6",
                "v10.2.0",
                "v10.2.1",
                "v10.2.2",
                "v10.2.3",
                "v10.2.4",
                "v10.3.0",
                "v10.3.1",
                "v5.0.0",
                "v5.0.1",
                "v5.1.0",
                "v5.1.1",
                "v5.2",
                "v5.3.0",
                "v6.0.0",
                "v6.0.1",
                "v6.0.2",
                "v7.0.0",
                "v7.0.1",
                "v7.0.2",
                "v7.0.3",
                "v7.0.4",
                "v8.0.0",
                "v8.1.0",
                "v8.1.1",
                "v9.0.0",
                "v9.0.1"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 3252",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9829fe150e7d5ef115f0910756daeefd0740e77d",
            "repository": "https://github.com/mitmproxy/mitmproxy",
            "timestamp": 1531261492,
            "hunks": 0,
            "message": "Merge pull request #3186 from andersonvom/master Add scripting example to intercept & change requests",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "3186": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "10.0.0",
                "10.1.0",
                "10.1.1",
                "10.1.2",
                "10.1.3",
                "10.1.4",
                "10.1.5",
                "10.1.6",
                "10.2.0",
                "10.2.1",
                "10.2.2",
                "10.2.3",
                "10.2.4",
                "10.3.0",
                "9.0.0",
                "9.0.1",
                "v10.0.0",
                "v10.1.0",
                "v10.1.1",
                "v10.1.2",
                "v10.1.3",
                "v10.1.4",
                "v10.1.5",
                "v10.1.6",
                "v10.2.0",
                "v10.2.1",
                "v10.2.2",
                "v10.2.3",
                "v10.2.4",
                "v10.3.0",
                "v10.3.1",
                "v5.0.0",
                "v5.0.1",
                "v5.1.0",
                "v5.1.1",
                "v5.2",
                "v5.3.0",
                "v6.0.0",
                "v6.0.1",
                "v6.0.2",
                "v7.0.0",
                "v7.0.1",
                "v7.0.2",
                "v7.0.3",
                "v7.0.4",
                "v8.0.0",
                "v8.1.0",
                "v8.1.1",
                "v9.0.0",
                "v9.0.1"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 3186",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "81fa45450c6d48dd42326ace57d7eb849e27c795",
            "repository": "https://github.com/mitmproxy/mitmproxy",
            "timestamp": 1531258168,
            "hunks": 0,
            "message": "Merge pull request #3235 from gcmurphy/issues/3230 Pass option, not option name to parse_setval",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "3235": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "10.0.0",
                "10.1.0",
                "10.1.1",
                "10.1.2",
                "10.1.3",
                "10.1.4",
                "10.1.5",
                "10.1.6",
                "10.2.0",
                "10.2.1",
                "10.2.2",
                "10.2.3",
                "10.2.4",
                "10.3.0",
                "9.0.0",
                "9.0.1",
                "v10.0.0",
                "v10.1.0",
                "v10.1.1",
                "v10.1.2",
                "v10.1.3",
                "v10.1.4",
                "v10.1.5",
                "v10.1.6",
                "v10.2.0",
                "v10.2.1",
                "v10.2.2",
                "v10.2.3",
                "v10.2.4",
                "v10.3.0",
                "v10.3.1",
                "v5.0.0",
                "v5.0.1",
                "v5.1.0",
                "v5.1.1",
                "v5.2",
                "v5.3.0",
                "v6.0.0",
                "v6.0.1",
                "v6.0.2",
                "v7.0.0",
                "v7.0.1",
                "v7.0.2",
                "v7.0.3",
                "v7.0.4",
                "v8.0.0",
                "v8.1.0",
                "v8.1.1",
                "v9.0.0",
                "v9.0.1"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 3235",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0a6341e76fd2bd9e1a14240d631864eba3ce2116",
            "repository": "https://github.com/mitmproxy/mitmproxy",
            "timestamp": 1532426348,
            "hunks": 0,
            "message": "Merge pull request #3260 from kajojify/language Brackets support",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "3260": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 3260",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "16e07996d983483bb732269c921e89e8bda6ee20",
            "repository": "https://github.com/mitmproxy/mitmproxy",
            "timestamp": 1532375670,
            "hunks": 0,
            "message": "Merge pull request #3256 from madt1m/serialization-benchmark Protobuf - Benchmark Script",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "3256": "[OPEN] Test dumping performances #3126"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "10.0.0",
                "10.1.0",
                "10.1.1",
                "10.1.2",
                "10.1.3",
                "10.1.4",
                "10.1.5",
                "10.1.6",
                "10.2.0",
                "10.2.1",
                "10.2.2",
                "10.2.3",
                "10.2.4",
                "10.3.0",
                "9.0.0",
                "9.0.1",
                "v10.0.0",
                "v10.1.0",
                "v10.1.1",
                "v10.1.2",
                "v10.1.3",
                "v10.1.4",
                "v10.1.5",
                "v10.1.6",
                "v10.2.0",
                "v10.2.1",
                "v10.2.2",
                "v10.2.3",
                "v10.2.4",
                "v10.3.0",
                "v10.3.1",
                "v5.0.0",
                "v5.0.1",
                "v5.1.0",
                "v5.1.1",
                "v5.2",
                "v5.3.0",
                "v6.0.0",
                "v6.0.1",
                "v6.0.2",
                "v7.0.0",
                "v7.0.1",
                "v7.0.2",
                "v7.0.3",
                "v7.0.4",
                "v8.0.0",
                "v8.1.0",
                "v8.1.1",
                "v9.0.0",
                "v9.0.1"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 3256",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "dfb6a08bba5919c09167bef3effbca964e4d0b8e",
            "repository": "https://github.com/mitmproxy/mitmproxy",
            "timestamp": 1531081236,
            "hunks": 0,
            "message": "Merge pull request #3239 from bunnyhero/patch-1 Update howto-transparent.md",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "3239": "Syntax Error by Following Documentation Code #3255"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "10.0.0",
                "10.1.0",
                "10.1.1",
                "10.1.2",
                "10.1.3",
                "10.1.4",
                "10.1.5",
                "10.1.6",
                "10.2.0",
                "10.2.1",
                "10.2.2",
                "10.2.3",
                "10.2.4",
                "10.3.0",
                "9.0.0",
                "9.0.1",
                "v10.0.0",
                "v10.1.0",
                "v10.1.1",
                "v10.1.2",
                "v10.1.3",
                "v10.1.4",
                "v10.1.5",
                "v10.1.6",
                "v10.2.0",
                "v10.2.1",
                "v10.2.2",
                "v10.2.3",
                "v10.2.4",
                "v10.3.0",
                "v10.3.1",
                "v5.0.0",
                "v5.0.1",
                "v5.1.0",
                "v5.1.1",
                "v5.2",
                "v5.3.0",
                "v6.0.0",
                "v6.0.1",
                "v6.0.2",
                "v7.0.0",
                "v7.0.1",
                "v7.0.2",
                "v7.0.3",
                "v7.0.4",
                "v8.0.0",
                "v8.1.0",
                "v8.1.1",
                "v9.0.0",
                "v9.0.1"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 3239",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ec092fdc120273644c79ae65ae0328dc9f31ee80",
            "repository": "https://github.com/mitmproxy/mitmproxy",
            "timestamp": 1532146405,
            "hunks": 0,
            "message": "Merge pull request #3245 from madt1m/protobuf-serialization-clean Shifting to Protobuf Serialization - Cleaned",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "3245": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "10.0.0",
                "10.1.0",
                "10.1.1",
                "10.1.2",
                "10.1.3",
                "10.1.4",
                "10.1.5",
                "10.1.6",
                "10.2.0",
                "10.2.1",
                "10.2.2",
                "10.2.3",
                "10.2.4",
                "10.3.0",
                "9.0.0",
                "9.0.1",
                "v10.0.0",
                "v10.1.0",
                "v10.1.1",
                "v10.1.2",
                "v10.1.3",
                "v10.1.4",
                "v10.1.5",
                "v10.1.6",
                "v10.2.0",
                "v10.2.1",
                "v10.2.2",
                "v10.2.3",
                "v10.2.4",
                "v10.3.0",
                "v10.3.1",
                "v5.0.0",
                "v5.0.1",
                "v5.1.0",
                "v5.1.1",
                "v5.2",
                "v5.3.0",
                "v6.0.0",
                "v6.0.1",
                "v6.0.2",
                "v7.0.0",
                "v7.0.1",
                "v7.0.2",
                "v7.0.3",
                "v7.0.4",
                "v8.0.0",
                "v8.1.0",
                "v8.1.1",
                "v9.0.0",
                "v9.0.1"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 3245",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8c7793b91a2a182ec7d7831f2c03283dad3488cc",
            "repository": "https://github.com/mitmproxy/mitmproxy",
            "timestamp": 1532440631,
            "hunks": 7,
            "message": "session: temporary DB is now stored in temporary dir",
            "diff": [
                "diff --git a/mitmproxy/addons/session.py b/mitmproxy/addons/session.py",
                "index 7f1c0025d..c49b95c42 100644",
                "--- a/mitmproxy/addons/session.py",
                "+++ b/mitmproxy/addons/session.py",
                "@@ -1,2 +1,3 @@",
                " import tempfile",
                "+import shutil",
                " import sqlite3",
                "@@ -22,3 +23,3 @@ class SessionDB:",
                "         \"\"\"",
                "-        self.temp = None",
                "+        self.tempdir = None",
                "         self.con = None",
                "@@ -30,6 +31,4 @@ class SessionDB:",
                "             else:",
                "-                # We use tempfile only to generate a path, since we demand file creation to sqlite, and removal to os.",
                "-                self.temp = tempfile.NamedTemporaryFile()",
                "-                path = self.temp.name",
                "-                self.temp.close()",
                "+                self.tempdir = tempfile.mkdtemp()",
                "+                path = os.path.join(self.tempdir, 'tmp.sqlite')",
                "             self.con = sqlite3.connect(path)",
                "@@ -40,5 +39,4 @@ class SessionDB:",
                "             self.con.close()",
                "-        if self.temp:",
                "-            # This is a workaround to ensure portability",
                "-            os.remove(self.temp.name)",
                "+        if self.tempdir:",
                "+            shutil.rmtree(self.tempdir)",
                "diff --git a/test/mitmproxy/addons/test_session.py b/test/mitmproxy/addons/test_session.py",
                "index cb36e2830..d4b1109b0 100644",
                "--- a/test/mitmproxy/addons/test_session.py",
                "+++ b/test/mitmproxy/addons/test_session.py",
                "@@ -10,6 +10,10 @@ from mitmproxy.utils.data import pkg_data",
                " class TestSession:",
                "-    def test_session_temporary(self, tdata):",
                "+    def test_session_temporary(self):",
                "         s = session.SessionDB()",
                "-        filename = s.temp.name",
                "+        td = s.tempdir",
                "+        filename = os.path.join(td, 'tmp.sqlite')",
                "         assert session.SessionDB.is_session_db(filename)",
                "+        assert os.path.isdir(td)",
                "+        del s",
                "+        assert not os.path.isdir(td)"
            ],
            "changed_files": [
                "mitmproxy/addons/session.py",
                "test/mitmproxy/addons/test_session.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "10.0.0",
                "10.1.0",
                "10.1.1",
                "10.1.2",
                "10.1.3",
                "10.1.4",
                "10.1.5",
                "10.1.6",
                "10.2.0",
                "10.2.1",
                "10.2.2",
                "10.2.3",
                "10.2.4",
                "10.3.0",
                "9.0.0",
                "9.0.1",
                "v10.0.0",
                "v10.1.0",
                "v10.1.1",
                "v10.1.2",
                "v10.1.3",
                "v10.1.4",
                "v10.1.5",
                "v10.1.6",
                "v10.2.0",
                "v10.2.1",
                "v10.2.2",
                "v10.2.3",
                "v10.2.4",
                "v10.3.0",
                "v10.3.1",
                "v5.0.0",
                "v5.0.1",
                "v5.1.0",
                "v5.1.1",
                "v5.2",
                "v5.3.0",
                "v6.0.0",
                "v6.0.1",
                "v6.0.2",
                "v7.0.0",
                "v7.0.1",
                "v7.0.2",
                "v7.0.3",
                "v7.0.4",
                "v8.0.0",
                "v8.1.0",
                "v8.1.1",
                "v9.0.0",
                "v9.0.1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "645cfe0a42ad6c446a0fdf43d738fd812fafc14a",
            "repository": "https://github.com/mitmproxy/mitmproxy",
            "timestamp": 1499155987,
            "hunks": 2,
            "message": "tls handshake parser test",
            "diff": [
                "diff --git a/check.py b/check.py",
                "new file mode 100644",
                "index 000000000..624f91064",
                "--- /dev/null",
                "+++ b/check.py",
                "@@ -0,0 +1,70 @@",
                "+import io",
                "+",
                "+import pyshark",
                "+from kaitaistruct import KaitaiStream",
                "+from scapy.all import PcapReader, Raw",
                "+",
                "+import tls_client_hello",
                "+",
                "+packets = pyshark.FileCapture(\"tls-handshake-dump.pcap\")",
                "+with PcapReader('tls-handshake-dump.pcap') as pcap_reader:",
                "+    for pkt_pcap, pkt in zip(pcap_reader, packets):",
                "+        try:",
                "+            ssl = pkt.ssl",
                "+        except AttributeError:  # TCP Retransmission packet",
                "+            continue",
                "+",
                "+        ch_bytes = bytes(pkt_pcap.getlayer(Raw))[9:]  # Remove headers",
                "+        client_hello = tls_client_hello.TlsClientHello(KaitaiStream(io.BytesIO(bytes(ch_bytes))))",
                "+",
                "+        # Version",
                "+        assert(int(ssl.handshake_version.raw_value[:2]) == client_hello.version.major)",
                "+        assert(int(ssl.handshake_version.raw_value[2:]) == client_hello.version.minor)",
                "+",
                "+        # Random",
                "+        assert(ssl.handshake_random_time.hex_value == client_hello.random.gmt_unix_time)",
                "+        assert(bytes.fromhex(ssl.handshake_random.raw_value) == client_hello.random.random)",
                "+",
                "+        # Session Id",
                "+        assert(int(ssl.handshake_session_id_length) == client_hello.session_id.len)",
                "+        try:",
                "+            assert(bytes.fromhex(ssl.handshake_session_id.raw_value) == client_hello.session_id.sid)",
                "+        except AttributeError:",
                "+            if not int(ssl.handshake_session_id_length):",
                "+                pass",
                "+            else:",
                "+                raise Exception",
                "+",
                "+        # Cipher Suites",
                "+        assert(int(ssl.handshake_cipher_suites_length) == client_hello.cipher_suites.len)",
                "+        for cs1, cs2 in zip(ssl.handshake_ciphersuite.fields, client_hello.cipher_suites.cipher_suites):",
                "+            assert(cs1.hex_value == cs2.cipher_suite)",
                "+",
                "+        # Compression methods",
                "+        assert(int(ssl.handshake_comp_methods_length) == client_hello.compression_methods.len)",
                "+        assert(bytes.fromhex(ssl.handshake_comp_method.raw_value) == client_hello.compression_methods.compression_methods)",
                "+",
                "+        # Extensions",
                "+        assert(int(ssl.handshake_extensions_length) == client_hello.extensions.len)",
                "+",
                "+        for ext_len1, ext_len2 in zip(ssl.handshake_extension_len.fields, client_hello.extensions.extensions):",
                "+            assert(ext_len1.hex_value == ext_len2.len)",
                "+",
                "+        for ext1, ext2 in zip(ssl.handshake_extension_type.fields, client_hello.extensions.extensions):",
                "+            assert(ext1.hex_value == ext2.type)",
                "+            if ext2.type == 0:",
                "+                sni = ext2",
                "+            elif ext2.type == 16:",
                "+                alpn = ext2",
                "+",
                "+        # SNI",
                "+        assert(int(ssl.handshake_extensions_server_name_list_len) == sni.body.list_length)",
                "+",
                "+        assert(int(ssl.handshake_extensions_server_name_type) == sni.body.server_names[0].name_type)",
                "+        assert(ssl.handshake_extensions_server_name == str(sni.body.server_names[0].host_name, 'idna'))",
                "+",
                "+        # ALPN",
                "+        assert(int(ssl.handshake_extensions_alpn_len) == alpn.body.ext_len)",
                "+",
                "+        for pname1, pname2 in zip(ssl.handshake_extensions_alpn_str.all_fields, alpn.body.alpn_protocols):",
                "+            assert(pname1.show == pname2.name.decode())",
                "diff --git a/server.py b/server.py",
                "new file mode 100755",
                "index 000000000..326fa7d65",
                "--- /dev/null",
                "+++ b/server.py",
                "@@ -0,0 +1,32 @@",
                "+#!/usr/bin/env python",
                "+",
                "+from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer",
                "+import SocketServer",
                "+import urlparse",
                "+",
                "+class S(BaseHTTPRequestHandler):",
                "+    protocol_version = 'HTTP/1.1'",
                "+",
                "+    def do_POST(self):",
                "+        length = int(self.headers['Content-Length'])",
                "+        post_data = urlparse.parse_qs(self.rfile.read(length))",
                "+        self.send_response(200)",
                "+        self.send_header('Content-type', 'text/html')",
                "+        self.send_header('Content-Length', str(40))",
                "+        self.end_headers()",
                "+        self.wfile.write(\"<html><body><h1>POST!</h1></body></html>\")",
                "+        self.wfile.flush()",
                "+        ",
                "+def run(server_class=HTTPServer, handler_class=S, port=1234):",
                "+    server_address = ('', port)",
                "+    httpd = server_class(server_address, handler_class)",
                "+    print 'Starting httpd on port %d...' % port",
                "+    httpd.serve_forever()",
                "+",
                "+if __name__ == \"__main__\":",
                "+    from sys import argv",
                "+",
                "+    if len(argv) == 2:",
                "+        run(port=int(argv[1]))",
                "+    else:",
                "+        run()",
                "diff --git a/tls-handshake-dump.pcap b/tls-handshake-dump.pcap",
                "new file mode 100755",
                "index 000000000..2eaac8bee",
                "Binary files /dev/null and b/tls-handshake-dump.pcap differ"
            ],
            "changed_files": [
                "check.py",
                "server.py",
                "tls-handshake-dump.pcap"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": []
        },
        {
            "commit_id": "a7ffceebeddb1911749372d20bf4f7e5c3a55bfa",
            "repository": "https://github.com/mitmproxy/mitmproxy",
            "timestamp": 1482746909,
            "hunks": 13,
            "message": "use selenium",
            "diff": [
                "diff --git a/smoke_test_moz_top500.py b/smoke_test_moz_top500.py",
                "index 3bc9e8948..c7d043ae5 100755",
                "--- a/smoke_test_moz_top500.py",
                "+++ b/smoke_test_moz_top500.py",
                "@@ -22,7 +22,11 @@ sudo ldconfig",
                " sudo apt-get build-dep curl",
                "-wget https://curl.haxx.se/download/curl-7.51.0.tar.bz2",
                "-tar xvjf curl-7.51.0.tar.bz2",
                "-cd curl-7.51.0",
                "+wget https://curl.haxx.se/download/curl-7.52.1.tar.bz2",
                "+tar xvjf curl-7.52.1.tar.bz2",
                "+cd curl-7.52.1",
                " ./configure",
                " make",
                "+",
                "+",
                "+",
                "+export PATH=/home/ubuntu/chromedriver_linux64:$PATH",
                " \"\"\"",
                "@@ -40,3 +44,6 @@ import time",
                " import pytest",
                "+import selenium",
                " from flaky import flaky",
                "+from selenium import webdriver",
                "+from pyvirtualdisplay import Display",
                "@@ -64,6 +71,6 @@ def generate_combinations():",
                "             (False, domain, \"https://www.{}\".format(domain)),",
                "-            (True, domain, \"http://{}\".format(domain)),",
                "-            (True, domain, \"http://www.{}\".format(domain)),",
                "-            (True, domain, \"https://{}\".format(domain)),",
                "-            (True, domain, \"https://www.{}\".format(domain)),",
                "+            # (True, domain, \"http://{}\".format(domain)),",
                "+            # (True, domain, \"http://www.{}\".format(domain)),",
                "+            # (True, domain, \"https://{}\".format(domain)),",
                "+            # (True, domain, \"https://www.{}\".format(domain)),",
                "         ] for domain in domains]",
                "@@ -123,2 +130,3 @@ class TestSmokeCurl(object):",
                "         tmaster = tservers.TestMaster(opts, config)",
                "+        tmaster.clear_log()",
                "         cls.proxy = proxy = tservers.ProxyThread(tmaster)",
                "@@ -126,2 +134,10 @@ class TestSmokeCurl(object):",
                "+        cls.display = Display(visible=0, size=(800, 600))",
                "+        cls.display.start()",
                "+",
                "+        chrome_options = webdriver.ChromeOptions()",
                "+        chrome_options.add_argument('--proxy-server={}:{}'.format('127.0.0.1', cls.proxy.port))",
                "+        cls.driver = webdriver.Chrome(chrome_options=chrome_options)",
                "+",
                "+",
                "     @classmethod",
                "@@ -129,2 +145,4 @@ class TestSmokeCurl(object):",
                "         cls.proxy.shutdown()",
                "+        cls.driver.close()",
                "+        cls.display.stop()",
                "@@ -133,2 +151,3 @@ class TestSmokeCurl(object):",
                "     def test_smoke_curl(self, offer_h2, domain, url):",
                "+        self.proxy.tmaster.clear_log()",
                "         self.proxy.tmaster.reset([DisableH2CleartextUpgrade()])",
                "@@ -136,2 +155,3 @@ class TestSmokeCurl(object):",
                "         cmd = [",
                "+            # '/usr/local/opt/curl/bin/curl',",
                "             '/home/ubuntu/curl-7.51.0/src/curl',",
                "@@ -167,6 +187,9 @@ class TestSmokeCurl(object):",
                "         try:",
                "-            c = subprocess.run(c, stdout=subprocess.PIPE, stderr=subprocess.PIPE, timeout=60, check=True)",
                "-            output += c.stderr",
                "-            if b'ALPN, server accepted to use h2' in c.stderr:",
                "-                negotiated_http2 = True",
                "+            self.driver.get(url)",
                "+            # assert self.driver.title",
                "+",
                "+            # c = subprocess.run(c, stdout=subprocess.PIPE, stderr=subprocess.PIPE, timeout=60, check=True)",
                "+            # output += c.stderr",
                "+            # if b'ALPN, server accepted to use h2' in c.stderr:",
                "+            #     negotiated_http2 = True",
                "         except subprocess.CalledProcessError as e:",
                "@@ -189,2 +212,9 @@ class TestSmokeCurl(object):",
                "             pytest.fail(\"timeout: {}\".format(url))",
                "+        except selenium.common.exceptions.TimeoutException:",
                "+            write_protocol(offer_h2,",
                "+                           domain,",
                "+                           url,",
                "+                           'selenium timeout',",
                "+                           tlog=self.proxy.tmaster.tlog)",
                "+            pytest.fail(\"timeout: {}\".format(url))",
                "@@ -226,2 +256,12 @@ if __name__ == '__main__':",
                "     os.makedirs('tmp/{}'.format(os.environ['SMOKE_TEST_TIMESTAMP']), exist_ok=True)",
                "-    pytest.main(args=['-s', '-v', '-n', '16', '--show-progress', '--no-flaky-report', sys.argv[0]])",
                "+    if os.path.islink('tmp/latest'):",
                "+        os.remove('tmp/latest')",
                "+    os.symlink(os.environ['SMOKE_TEST_TIMESTAMP'], 'tmp/latest')",
                "+    pytest.main(args=['-s',",
                "+                      '-v',",
                "+                    #   '-x',",
                "+                    #   '-n', '16',",
                "+                      '--show-progress',",
                "+                      '--no-flaky-report',",
                "+                      *sys.argv",
                "+                      ])"
            ],
            "changed_files": [
                "smoke_test_moz_top500.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": []
        },
        {
            "commit_id": "2f90ea5ed5907e76a3c79bb6e3784c8809e7dbbf",
            "repository": "https://github.com/mitmproxy/mitmproxy",
            "timestamp": 1482355484,
            "hunks": 1,
            "message": "add selenium driver",
            "diff": [
                "diff --git a/selenium_tests.py b/selenium_tests.py",
                "new file mode 100644",
                "index 000000000..4f7551a98",
                "--- /dev/null",
                "+++ b/selenium_tests.py",
                "@@ -0,0 +1,37 @@",
                "+#!/usr/bin/env python3",
                "+",
                "+from selenium import webdriver",
                "+from selenium.webdriver.common.keys import Keys",
                "+from pyvirtualdisplay import Display",
                "+",
                "+# PROXY_HOST = 'http://127.0.0.1'",
                "+PROXY_HOST = '127.0.0.1'",
                "+PROXY_PORT = 8080",
                "+",
                "+# fp = webdriver.FirefoxProfile()",
                "+# fp.set_preference(\"network.proxy.type\", 1)",
                "+# fp.set_preference(\"network.proxy.http\", PROXY_HOST)",
                "+# fp.set_preference(\"network.proxy.http_port\", PROXY_PORT)",
                "+# fp.set_preference(\"network.proxy.ssl\", PROXY_HOST)",
                "+# fp.set_preference(\"network.proxy.ssl_port\", PROXY_PORT)",
                "+# fp.set_preference(\"network.proxy.share_proxy_settings\", True)",
                "+# fp.update_preferences()",
                "+# driver = webdriver.Firefox(firefox_profile=fp)",
                "+",
                "+display = Display(visible=0, size=(800, 600))",
                "+display.start()",
                "+",
                "+chrome_options = webdriver.ChromeOptions()",
                "+chrome_options.add_argument('--proxy-server={}:{}'.format(PROXY_HOST, PROXY_PORT))",
                "+driver = webdriver.Chrome(chrome_options=chrome_options)",
                "+",
                "+try:",
                "+    driver.get(\"http://www.python.org\")",
                "+    print(driver.title)",
                "+    assert \"Python\" in driver.title",
                "+",
                "+",
                "+",
                "+finally:",
                "+    driver.close()",
                "+    display.stop()"
            ],
            "changed_files": [
                "selenium_tests.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": []
        },
        {
            "commit_id": "1a584420276e4fab7997797ba14c004396924771",
            "repository": "https://github.com/mitmproxy/mitmproxy",
            "timestamp": 1532098643,
            "hunks": 1,
            "message": "exceptions: new SessionLoad exception for load errors",
            "diff": [
                "diff --git a/mitmproxy/exceptions.py b/mitmproxy/exceptions.py",
                "index d568898be..9f0a8c303 100644",
                "--- a/mitmproxy/exceptions.py",
                "+++ b/mitmproxy/exceptions.py",
                "@@ -131,2 +131,6 @@ class NetlibException(MitmproxyException):",
                "+class SessionLoadException(MitmproxyException):",
                "+    pass",
                "+",
                "+",
                " class Disconnect:"
            ],
            "changed_files": [
                "mitmproxy/exceptions.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "10.0.0",
                "10.1.0",
                "10.1.1",
                "10.1.2",
                "10.1.3",
                "10.1.4",
                "10.1.5",
                "10.1.6",
                "10.2.0",
                "10.2.1",
                "10.2.2",
                "10.2.3",
                "10.2.4",
                "10.3.0",
                "9.0.0",
                "9.0.1",
                "v10.0.0",
                "v10.1.0",
                "v10.1.1",
                "v10.1.2",
                "v10.1.3",
                "v10.1.4",
                "v10.1.5",
                "v10.1.6",
                "v10.2.0",
                "v10.2.1",
                "v10.2.2",
                "v10.2.3",
                "v10.2.4",
                "v10.3.0",
                "v10.3.1",
                "v5.0.0",
                "v5.0.1",
                "v5.1.0",
                "v5.1.1",
                "v5.2",
                "v5.3.0",
                "v6.0.0",
                "v6.0.1",
                "v6.0.2",
                "v7.0.0",
                "v7.0.1",
                "v7.0.2",
                "v7.0.3",
                "v7.0.4",
                "v8.0.0",
                "v8.1.0",
                "v8.1.1",
                "v9.0.0",
                "v9.0.1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "9e91ce9c1898ea7e19d792e10ba9e109c7becd45",
            "repository": "https://github.com/mitmproxy/mitmproxy",
            "timestamp": 1517654172,
            "hunks": 4,
            "message": "--wip-- [skip ci]",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index 97a26f4ec..f2c4d8c25 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -1,2 +1,3 @@",
                " sudo: false",
                "+",
                " language: python",
                "@@ -35,2 +36,10 @@ matrix:",
                "       env: TOXENV=py37",
                "+    - python: 3.6",
                "+      env: TOXENV=smoke",
                "+      addons:",
                "+        chrome: stable",
                "+        firefox: latest",
                "+        apt:",
                "+          packages:",
                "+            - libnss3-tools",
                "     - language: node_js",
                "diff --git a/smoke_test_moz_top500_splinter.py b/smoke_test_moz_top500_splinter.py",
                "new file mode 100755",
                "index 000000000..bb06ee5b4",
                "--- /dev/null",
                "+++ b/smoke_test_moz_top500_splinter.py",
                "@@ -0,0 +1,221 @@",
                "+#!/usr/bin/env python3",
                "+",
                "+import tempfile",
                "+import sys",
                "+import os",
                "+import csv",
                "+import subprocess",
                "+import queue",
                "+import threading",
                "+import glob",
                "+import time",
                "+import platform",
                "+",
                "+import pytest",
                "+from flaky import flaky",
                "+",
                "+from mitmproxy import controller, flow, proxy, options",
                "+from mitmproxy.proxy.server import ProxyServer",
                "+from mitmproxy.proxy.config import ProxyConfig",
                "+from mitmproxy.addons.disable_h2c import DisableH2C",
                "+from test.mitmproxy import tservers",
                "+",
                "+from splinter import Browser",
                "+from selenium.webdriver.chrome.options import Options as ChromeOptions",
                "+",
                "+def generate_combinations():",
                "+    if not os.path.isdir('tmp'):",
                "+        os.makedirs('tmp')",
                "+    if not os.path.isfile('tmp/top500.domains.csv'):",
                "+        subprocess.run(['wget', 'https://moz.com/top500/domains/csv', '-q', '-O', 'tmp/top500.domains.csv'])",
                "+",
                "+    domains = []",
                "+    with open('tmp/top500.domains.csv') as csvfile:",
                "+        reader = csv.reader(csvfile, delimiter=',', quotechar='\"')",
                "+        headers = next(reader)",
                "+        domains = [row[1].rstrip('/') for row in reader]",
                "+",
                "+    l = [[",
                "+            (False, domain, \"http://{}\".format(domain)),",
                "+            (False, domain, \"https://{}\".format(domain)),",
                "+            (False, domain, \"http://www.{}\".format(domain)),",
                "+            (False, domain, \"https://www.{}\".format(domain)),",
                "+            (True, domain, \"http://{}\".format(domain)),",
                "+            (True, domain, \"http://www.{}\".format(domain)),",
                "+            (True, domain, \"https://{}\".format(domain)),",
                "+            (True, domain, \"https://www.{}\".format(domain)),",
                "+        ] for domain in domains]",
                "+    return [item for sublist in l for item in sublist][:10]",
                "+",
                "+",
                "+def write_protocol(offer_h2, domain, url, fs=None, events=None, logs=None):",
                "+    u = 'h2_' if offer_h2 else ''",
                "+    u += 'http' if url.startswith('http://') else 'https'",
                "+    u += '_www.' if '://www.' in url else '_'",
                "+    u += domain",
                "+    with open(\"tmp/{}/{}.txt\".format(os.environ['SMOKE_TEST_TIMESTAMP'], u), mode='a') as file:",
                "+        file.write(\"\\n################################################################################\\n\")",
                "+        file.write(\"{}: offer_h2:{} domain:{} url:{}\\n\".format(os.environ['SMOKE_TEST_TIMESTAMP'], offer_h2, domain, url))",
                "+",
                "+        if fs:",
                "+            file.write(\"\\nFlows:\\n\")",
                "+            for fl in fs.keys():",
                "+                file.write(\"{}\\n\".format(fl))",
                "+        else:",
                "+            file.write(\"\\n<no flows>\\n\")",
                "+",
                "+        if events:",
                "+            file.write(\"\\nEvents:\\n\")",
                "+            for msg in events:",
                "+                file.write(\"{: <20} {}\".format(msg[0].upper() + ':', msg[1]))",
                "+                file.write(\"\\n\")",
                "+        else:",
                "+            file.write(\"\\n<no events>\\n\")",
                "+",
                "+        if logs:",
                "+            file.write(\"\\nLog entries:\\n\")",
                "+            for msg in logs:",
                "+                file.write(\"{: <6} {}\".format(msg.level.upper() + ':', msg.msg))",
                "+                file.write(\"\\n\")",
                "+        else:",
                "+            file.write(\"\\n<no log entries>\\n\")",
                "+",
                "+        file.write(\"################################################################################\\n\")",
                "+",
                "+    with open('/tmp/chromedriver-log.log') as f:",
                "+        print(f.read())",
                "+    print('-'*80)",
                "+    with open(\"tmp/{}/{}.txt\".format(os.environ['SMOKE_TEST_TIMESTAMP'], u)) as f:",
                "+        print(f.read())",
                "+",
                "+",
                "+class TestSmokeCurl(object):",
                "+    @classmethod",
                "+    def setup_class(cls):",
                "+        cls.proxy = {}",
                "+        for offer_h2 in [True, False]:",
                "+            opts = options.Options(",
                "+                listen_port=0,",
                "+                upstream_cert=True,",
                "+                ssl_insecure=True,",
                "+                verbosity='debug',",
                "+                flow_detail=99,",
                "+                http2=offer_h2,",
                "+            )",
                "+            opts.cadir = os.path.expanduser(\"~/.mitmproxy\")",
                "+            tmaster = tservers.TestMaster(opts)",
                "+            cls.proxy[offer_h2] = tservers.ProxyThread(tmaster)",
                "+            cls.proxy[offer_h2].start()",
                "+",
                "+        cls.browser = None",
                "+",
                "+    @classmethod",
                "+    def teardown_class(cls):",
                "+        for proxy in cls.proxy.values():",
                "+            proxy.shutdown()",
                "+",
                "+    def teardown_method(self, method):",
                "+        if self.browser:",
                "+            self.browser.quit()",
                "+            self.browser = None",
                "+",
                "+    @flaky(max_runs=3)",
                "+    @pytest.mark.parametrize('offer_h2, domain, url', generate_combinations())",
                "+    def test_smoke_curl(self, offer_h2, domain, url):",
                "+        self.proxy[offer_h2].tmaster.clear()",
                "+        self.proxy[offer_h2].tmaster.reset([DisableH2C()])",
                "+",
                "+        chrome_options = ChromeOptions()",
                "+        chrome_options.add_argument('--no-sandbox')",
                "+        chrome_options.add_argument('--proxy-server=http://127.0.0.1:' + str(self.proxy[offer_h2].port))",
                "+        if not offer_h2:",
                "+            chrome_options.add_argument('--disable-http2')",
                "+        self.browser = Browser('chrome',",
                "+                              options=chrome_options,",
                "+                              executable_path=os.path.expanduser('~/chromedriver'),",
                "+                              headless=True,",
                "+                              incognito=True,",
                "+                              service_log_path='/tmp/chromedriver-log.log',",
                "+                              service_args=[\"--verbose\"])",
                "+",
                "+        self.browser.visit(url)",
                "+        assert self.browser.status_code.is_success()",
                "+",
                "+        fs = {}",
                "+        for f in self.proxy[offer_h2].tmaster.state.flows:",
                "+            if f.response:",
                "+                fs[(f.request.http_version, f.request.scheme, f.request.host, f.response.status_code)] = f",
                "+",
                "+        if not offer_h2:",
                "+            assert all([k[0].startswith('HTTP/1') for k in fs.keys()])",
                "+",
                "+        no_failed_flows = len([k for k in fs.keys() if k[3] >= 500]) == 0",
                "+        if not no_failed_flows:",
                "+            write_protocol(offer_h2, domain, url, fs=fs, events=self.proxy[offer_h2].tmaster.events, logs=self.proxy[offer_h2].tmaster.logs)",
                "+        assert no_failed_flows",
                "+",
                "+        successful_flows = len([k for k in fs.keys() if k[3] == 200]) >= 1",
                "+        if not successful_flows:",
                "+            write_protocol(offer_h2, domain, url, fs=fs, events=self.proxy[offer_h2].tmaster.events, logs=self.proxy[offer_h2].tmaster.logs)",
                "+        assert successful_flows",
                "+",
                "+        for k, flow in [(k, f) for k, f in fs.items() if k[3] == 200]:",
                "+            success = flow.error is None and flow.request and flow.response",
                "+            if not success:",
                "+                write_protocol(offer_h2, domain, url, fs=fs, events=self.proxy[offer_h2].tmaster.events, logs=self.proxy[offer_h2].tmaster.logs)",
                "+            assert success",
                "+",
                "+        for msg in self.proxy[offer_h2].tmaster.logs:",
                "+            assert 'Traceback' not in msg.msg",
                "+",
                "+",
                "+if __name__ == '__main__':",
                "+    if platform.platform().startswith('Linux'):",
                "+        opts = options.Options(",
                "+            listen_port=0,",
                "+            upstream_cert=True,",
                "+            ssl_insecure=True,",
                "+            verbosity='debug',",
                "+            flow_detail=99,",
                "+            http2=True,",
                "+        )",
                "+        opts.cadir = os.path.expanduser(\"~/.mitmproxy\")",
                "+        tmaster = tservers.TestMaster(opts)",
                "+        proxy = tservers.ProxyThread(tmaster)",
                "+        proxy.start()",
                "+        proxy.shutdown()",
                "+",
                "+        os.makedirs(os.path.expanduser('~/.pki/nssdb'))",
                "+",
                "+        subprocess.run(['certutil',",
                "+                        '-d', os.path.expanduser('~/.pki/nssdb'),",
                "+                        '-A',",
                "+                        '-t', 'TC',",
                "+                        '-n', 'mitmproxy-ca',",
                "+                        '-i', os.path.expanduser('~/.mitmproxy/mitmproxy-ca-cert.pem'),",
                "+        ])",
                "+        subprocess.run(['wget',",
                "+                        'https://chromedriver.storage.googleapis.com/2.35/chromedriver_linux64.zip',",
                "+                        '--directory-prefix', os.path.expanduser('~/'),",
                "+        ])",
                "+        subprocess.run(['unzip',",
                "+                        os.path.expanduser('~/chromedriver_linux64.zip'),",
                "+                        '-d', os.path.expanduser('~/'),",
                "+        ])",
                "+        subprocess.run(['chmod',",
                "+                        '+x',",
                "+                        os.path.expanduser('~/chromedriver'),",
                "+        ])",
                "+",
                "+    os.environ['SMOKE_TEST_TIMESTAMP'] = time.strftime(\"%Y%m%d-%H%M\")",
                "+    os.makedirs('tmp/{}'.format(os.environ['SMOKE_TEST_TIMESTAMP']), exist_ok=True)",
                "+    if os.path.islink('tmp/latest'):",
                "+        os.remove('tmp/latest')",
                "+    os.symlink(os.environ['SMOKE_TEST_TIMESTAMP'], 'tmp/latest')",
                "+    pytest.main(args=['-s',",
                "+                      '-v',",
                "+                      '-x',",
                "+                      # '-n', '16',",
                "+                      '--no-flaky-report',",
                "+                      *sys.argv",
                "+                      ])",
                "diff --git a/tox.ini b/tox.ini",
                "index 9401b8f26..92394336e 100644",
                "--- a/tox.ini",
                "+++ b/tox.ini",
                "@@ -72 +72,10 @@ commands =",
                "   ./ci",
                "+",
                "+[testenv:smoke]",
                "+deps =",
                "+  -rrequirements.txt",
                "+  flaky==3.4.0",
                "+  splinter==0.7.7",
                "+commands =",
                "+  mitmdump --version",
                "+  python ./smoke_test_moz_top500_splinter.py {posargs}"
            ],
            "changed_files": [
                ".travis.yml",
                "smoke_test_moz_top500_splinter.py",
                "tox.ini"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": []
        },
        {
            "commit_id": "d3dff7a77c430d291d197274ac2583345ed52b5f",
            "repository": "https://github.com/mitmproxy/mitmproxy",
            "timestamp": 1532343113,
            "hunks": 12,
            "message": "Brackets support",
            "diff": [
                "diff --git a/mitmproxy/language/lexer.py b/mitmproxy/language/lexer.py",
                "index 44ccb0e29..e1f9fb80f 100644",
                "--- a/mitmproxy/language/lexer.py",
                "+++ b/mitmproxy/language/lexer.py",
                "@@ -1 +1,2 @@",
                "+import re",
                " import typing",
                "@@ -8,5 +9,9 @@ class CommandLanguageLexer:",
                "         \"WHITESPACE\",",
                "-        \"COMMAND\",",
                "+        \"LPAREN\",",
                "+        \"RPAREN\",",
                "+        \"LBRACE\",",
                "+        \"RBRACE\",",
                "         \"PLAIN_STR\",",
                "-        \"QUOTED_STR\"",
                "+        \"QUOTED_STR\",",
                "+        \"COMMAND\"",
                "     )",
                "@@ -21,2 +26,9 @@ class CommandLanguageLexer:",
                "     t_ignore_WHITESPACE = r\"\\s+\"",
                "+    t_LPAREN = r\"\\(\"",
                "+    t_RPAREN = r\"\\)\"",
                "+    t_LBRACE = r\"\\[\"",
                "+    t_RBRACE = r\"\\]\"",
                "+",
                "+    special_symbols = re.escape(\"()[]\")",
                "+    plain_str = rf\"\"\"[^{special_symbols}\\s]+\"\"\"",
                "@@ -33,4 +45,4 @@ class CommandLanguageLexer:",
                "+    @lex.TOKEN(plain_str)",
                "     def t_PLAIN_STR(self, t):",
                "-        r\"\"\"[^\\s]+\"\"\"",
                "         t.type = self.oneword_commands.get(t.value, \"PLAIN_STR\")",
                "diff --git a/mitmproxy/language/parser.py b/mitmproxy/language/parser.py",
                "index 34a81aeb2..ba14c18a0 100644",
                "--- a/mitmproxy/language/parser.py",
                "+++ b/mitmproxy/language/parser.py",
                "@@ -18,9 +18,14 @@ class CommandLanguageParser:",
                "     def p_command_line(self, p):",
                "-        \"\"\"command_line : command_call\"\"\"",
                "+        \"\"\"command_line : command_call_no_parentheses",
                "+                        | command_call_with_parentheses\"\"\"",
                "         p[0] = p[1]",
                "+        self.return_value = p[0]",
                "-    def p_command_call(self, p):",
                "-        \"\"\"command_call : COMMAND argument_list\"\"\"",
                "+    def p_command_call_no_parentheses(self, p):",
                "+        \"\"\"command_call_no_parentheses : COMMAND argument_list\"\"\"",
                "         p[0] = self.command_manager.call_strings(p[1], p[2])",
                "-        self.return_value = p[0]",
                "+",
                "+    def p_command_call_with_parentheses(self, p):",
                "+        \"\"\"command_call_with_parentheses : COMMAND LPAREN argument_list RPAREN\"\"\"",
                "+        p[0] = self.command_manager.call_strings(p[1], p[3])",
                "@@ -28,2 +33,3 @@ class CommandLanguageParser:",
                "         \"\"\"argument_list : empty",
                "+                         | argument",
                "                          | argument_list argument\"\"\"",
                "@@ -38,5 +44,11 @@ class CommandLanguageParser:",
                "                     | quoted_str",
                "-                    | COMMAND\"\"\"",
                "+                    | COMMAND",
                "+                    | array",
                "+                    | command_call_with_parentheses\"\"\"",
                "         p[0] = p[1]",
                "+    def p_array(self, p):",
                "+        \"\"\"array: LBRACE argument_list RBRACE\"\"\"",
                "+        p[0] = \",\".join(p[2])",
                "+",
                "     def p_quoted_str(self, p):"
            ],
            "changed_files": [
                "mitmproxy/language/lexer.py",
                "mitmproxy/language/parser.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": []
        },
        {
            "commit_id": "4cebfbabadfb6f500cf762923187017c47295961",
            "repository": "https://github.com/mitmproxy/mitmproxy",
            "timestamp": 1532098586,
            "hunks": 1,
            "message": "session: Implemented SessionDB Schema",
            "diff": [
                "diff --git a/mitmproxy/io/sql/session_create.sql b/mitmproxy/io/sql/session_create.sql",
                "new file mode 100644",
                "index 000000000..8387981c9",
                "--- /dev/null",
                "+++ b/mitmproxy/io/sql/session_create.sql",
                "@@ -0,0 +1,26 @@",
                "+CREATE TABLE FLOW (",
                "+FID INTEGER PRIMARY KEY,",
                "+MID INTEGER,",
                "+BID INTEGER,",
                "+CONTENT BLOB",
                "+);",
                "+",
                "+CREATE TABLE META (",
                "+MID INTEGER PRIMARY KEY,",
                "+INTERCEPTED INTEGER,",
                "+MARKED INTEGER,",
                "+MODE VARCHAR(20)",
                "+);",
                "+",
                "+CREATE TABLE BODY (",
                "+BID INTEGER,",
                "+BREQ BLOB,",
                "+BRES BLOB",
                "+);",
                "+",
                "+CREATE TABLE ANNOTATION (",
                "+AID INTEGER PRIMARY KEY,",
                "+FID INTEGER,",
                "+TYPE VARCHAR(20),",
                "+CONTENT BLOB",
                "+);",
                "\\ No newline at end of file"
            ],
            "changed_files": [
                "mitmproxy/io/sql/session_create.sql"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "10.0.0",
                "10.1.0",
                "10.1.1",
                "10.1.2",
                "10.1.3",
                "10.1.4",
                "10.1.5",
                "10.1.6",
                "10.2.0",
                "10.2.1",
                "10.2.2",
                "10.2.3",
                "10.2.4",
                "10.3.0",
                "9.0.0",
                "9.0.1",
                "v10.0.0",
                "v10.1.0",
                "v10.1.1",
                "v10.1.2",
                "v10.1.3",
                "v10.1.4",
                "v10.1.5",
                "v10.1.6",
                "v10.2.0",
                "v10.2.1",
                "v10.2.2",
                "v10.2.3",
                "v10.2.4",
                "v10.3.0",
                "v10.3.1",
                "v5.0.0",
                "v5.0.1",
                "v5.1.0",
                "v5.1.1",
                "v5.2",
                "v5.3.0",
                "v6.0.0",
                "v6.0.1",
                "v6.0.2",
                "v7.0.0",
                "v7.0.1",
                "v7.0.2",
                "v7.0.3",
                "v7.0.4",
                "v8.0.0",
                "v8.1.0",
                "v8.1.1",
                "v9.0.0",
                "v9.0.1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "68eb07b668b44074271b358b25e48ffd2b4726e0",
            "repository": "https://github.com/mitmproxy/mitmproxy",
            "timestamp": 1532423679,
            "hunks": 23,
            "message": "session: modified schema. Now SessionDB uses tempfile module for temp session",
            "diff": [
                "diff --git a/mitmproxy/addons/session.py b/mitmproxy/addons/session.py",
                "index d065ade2f..7f1c0025d 100644",
                "--- a/mitmproxy/addons/session.py",
                "+++ b/mitmproxy/addons/session.py",
                "@@ -1,3 +1,4 @@",
                "-import os",
                "+import tempfile",
                " import sqlite3",
                "+import os",
                "@@ -21,2 +22,4 @@ class SessionDB:",
                "         \"\"\"",
                "+        self.temp = None",
                "+        self.con = None",
                "         if db_path is not None and os.path.isfile(db_path):",
                "@@ -24,11 +27,18 @@ class SessionDB:",
                "         else:",
                "-            path = db_path or 'tmp.sqlite'",
                "-            # in case tmp.sqlite already exists in FS",
                "-            if os.path.isfile(path):",
                "-                os.remove(path)",
                "+            if db_path:",
                "+                path = db_path",
                "+            else:",
                "+                # We use tempfile only to generate a path, since we demand file creation to sqlite, and removal to os.",
                "+                self.temp = tempfile.NamedTemporaryFile()",
                "+                path = self.temp.name",
                "+                self.temp.close()",
                "             self.con = sqlite3.connect(path)",
                "-            script_path = pkg_data.path(\"io/sql/session_create.sql\")",
                "-            qry = open(script_path, 'r').read()",
                "-            with self.con:",
                "-                self.con.executescript(qry)",
                "+            self._create_session()",
                "+",
                "+    def __del__(self):",
                "+        if self.con:",
                "+            self.con.close()",
                "+        if self.temp:",
                "+            # This is a workaround to ensure portability",
                "+            os.remove(self.temp.name)",
                "@@ -39,2 +49,8 @@ class SessionDB:",
                "+    def _create_session(self):",
                "+        script_path = pkg_data.path(\"io/sql/session_create.sql\")",
                "+        qry = open(script_path, 'r').read()",
                "+        with self.con:",
                "+            self.con.executescript(qry)",
                "+",
                "     @staticmethod",
                "@@ -51,3 +67,3 @@ class SessionDB:",
                "             rows = cursor.fetchall()",
                "-            tables = [('FLOW',), ('BODY',), ('META',), ('ANNOTATION',)]",
                "+            tables = [('flow',), ('body',), ('annotation',)]",
                "             if all(elem in rows for elem in tables):",
                "diff --git a/mitmproxy/io/sql/session_create.sql b/mitmproxy/io/sql/session_create.sql",
                "index 8387981c9..bfc98b941 100644",
                "--- a/mitmproxy/io/sql/session_create.sql",
                "+++ b/mitmproxy/io/sql/session_create.sql",
                "@@ -1,26 +1,20 @@",
                "-CREATE TABLE FLOW (",
                "-FID INTEGER PRIMARY KEY,",
                "-MID INTEGER,",
                "-BID INTEGER,",
                "-CONTENT BLOB",
                "+CREATE TABLE flow (",
                "+id VARCHAR(36) PRIMARY KEY,",
                "+content BLOB",
                " );",
                "-CREATE TABLE META (",
                "-MID INTEGER PRIMARY KEY,",
                "-INTERCEPTED INTEGER,",
                "-MARKED INTEGER,",
                "-MODE VARCHAR(20)",
                "+CREATE TABLE body (",
                "+id INTEGER PRIMARY KEY,",
                "+flow_id VARCHAR(36),",
                "+type_id INTEGER,",
                "+content BLOB,",
                "+FOREIGN KEY(flow_id) REFERENCES flow(id)",
                " );",
                "-CREATE TABLE BODY (",
                "-BID INTEGER,",
                "-BREQ BLOB,",
                "-BRES BLOB",
                "+CREATE TABLE annotation (",
                "+id INTEGER PRIMARY KEY,",
                "+flow_id VARCHAR(36),",
                "+type VARCHAR(16),",
                "+content BLOB,",
                "+FOREIGN KEY(flow_id) REFERENCES flow(id)",
                " );",
                "-",
                "-CREATE TABLE ANNOTATION (",
                "-AID INTEGER PRIMARY KEY,",
                "-FID INTEGER,",
                "-TYPE VARCHAR(20),",
                "-CONTENT BLOB",
                "-);",
                "\\ No newline at end of file",
                "diff --git a/test/mitmproxy/addons/test_session.py b/test/mitmproxy/addons/test_session.py",
                "index 7089b89e4..cb36e2830 100644",
                "--- a/test/mitmproxy/addons/test_session.py",
                "+++ b/test/mitmproxy/addons/test_session.py",
                "@@ -1,7 +1,7 @@",
                " import sqlite3",
                "-import os",
                " import pytest",
                "+import os",
                "-from mitmproxy.exceptions import SessionLoadException",
                " from mitmproxy.addons import session",
                "+from mitmproxy.exceptions import SessionLoadException",
                " from mitmproxy.utils.data import pkg_data",
                "@@ -11,10 +11,8 @@ class TestSession:",
                "     def test_session_temporary(self, tdata):",
                "-        open('tmp.sqlite', 'w')",
                "         s = session.SessionDB()",
                "-        assert session.SessionDB.is_session_db('tmp.sqlite')",
                "-        s.con.close()",
                "-        os.remove('tmp.sqlite')",
                "+        filename = s.temp.name",
                "+        assert session.SessionDB.is_session_db(filename)",
                "     def test_session_not_valid(self, tdata):",
                "-        path = tdata.path('mitmproxy/data/') + '/test.sqlite'",
                "+        path = tdata.path('mitmproxy/data/') + '/test_snv.sqlite'",
                "         if os.path.isfile(path):",
                "@@ -25,5 +23,6 @@ class TestSession:",
                "             session.SessionDB(path)",
                "+        os.remove(path)",
                "     def test_session_new_persistent(self, tdata):",
                "-        path = tdata.path('mitmproxy/data/') + '/test.sqlite'",
                "+        path = tdata.path('mitmproxy/data/') + '/test_np.sqlite'",
                "         if os.path.isfile(path):",
                "@@ -32,5 +31,6 @@ class TestSession:",
                "         assert session.SessionDB.is_session_db(path)",
                "+        os.remove(path)",
                "     def test_session_load_existing(self, tdata):",
                "-        path = tdata.path('mitmproxy/data/') + '/test.sqlite'",
                "+        path = tdata.path('mitmproxy/data/') + '/test_le.sqlite'",
                "         if os.path.isfile(path):",
                "@@ -43,3 +43,3 @@ class TestSession:",
                "             blob = b'blob_of_data'",
                "-            con.execute(f'INSERT INTO FLOW VALUES(1, 1, 1, \"{blob}\");')",
                "+            con.execute(f'INSERT INTO FLOW VALUES(1, \"{blob}\");')",
                "         con.close()",
                "@@ -52 +52,3 @@ class TestSession:",
                "             assert len(rows) == 1",
                "+        con.close()",
                "+        os.remove(path)"
            ],
            "changed_files": [
                "mitmproxy/addons/session.py",
                "mitmproxy/io/sql/session_create.sql",
                "test/mitmproxy/addons/test_session.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "10.0.0",
                "10.1.0",
                "10.1.1",
                "10.1.2",
                "10.1.3",
                "10.1.4",
                "10.1.5",
                "10.1.6",
                "10.2.0",
                "10.2.1",
                "10.2.2",
                "10.2.3",
                "10.2.4",
                "10.3.0",
                "9.0.0",
                "9.0.1",
                "v10.0.0",
                "v10.1.0",
                "v10.1.1",
                "v10.1.2",
                "v10.1.3",
                "v10.1.4",
                "v10.1.5",
                "v10.1.6",
                "v10.2.0",
                "v10.2.1",
                "v10.2.2",
                "v10.2.3",
                "v10.2.4",
                "v10.3.0",
                "v10.3.1",
                "v5.0.0",
                "v5.0.1",
                "v5.1.0",
                "v5.1.1",
                "v5.2",
                "v5.3.0",
                "v6.0.0",
                "v6.0.1",
                "v6.0.2",
                "v7.0.0",
                "v7.0.1",
                "v7.0.2",
                "v7.0.3",
                "v7.0.4",
                "v8.0.0",
                "v8.1.0",
                "v8.1.1",
                "v9.0.0",
                "v9.0.1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "04b9555db8c821c053e156e65cb97d24eaf134b8",
            "repository": "https://github.com/mitmproxy/mitmproxy",
            "timestamp": 1532098611,
            "hunks": 1,
            "message": "session: load/create wrapper methods for SessionDB",
            "diff": [
                "diff --git a/mitmproxy/addons/session.py b/mitmproxy/addons/session.py",
                "new file mode 100644",
                "index 000000000..d065ade2f",
                "--- /dev/null",
                "+++ b/mitmproxy/addons/session.py",
                "@@ -0,0 +1,59 @@",
                "+import os",
                "+import sqlite3",
                "+",
                "+from mitmproxy.exceptions import SessionLoadException",
                "+from mitmproxy.utils.data import pkg_data",
                "+",
                "+",
                "+# Could be implemented using async libraries",
                "+class SessionDB:",
                "+    \"\"\"",
                "+    This class wraps connection to DB",
                "+    for Sessions and handles creation,",
                "+    retrieving and insertion in tables.",
                "+    \"\"\"",
                "+",
                "+    def __init__(self, db_path=None):",
                "+        \"\"\"",
                "+        Connect to an already existing database,",
                "+        or create a new one with optional path.",
                "+        :param db_path:",
                "+        \"\"\"",
                "+        if db_path is not None and os.path.isfile(db_path):",
                "+            self._load_session(db_path)",
                "+        else:",
                "+            path = db_path or 'tmp.sqlite'",
                "+            # in case tmp.sqlite already exists in FS",
                "+            if os.path.isfile(path):",
                "+                os.remove(path)",
                "+            self.con = sqlite3.connect(path)",
                "+            script_path = pkg_data.path(\"io/sql/session_create.sql\")",
                "+            qry = open(script_path, 'r').read()",
                "+            with self.con:",
                "+                self.con.executescript(qry)",
                "+",
                "+    def _load_session(self, path):",
                "+        if not self.is_session_db(path):",
                "+            raise SessionLoadException('Given path does not point to a valid Session')",
                "+        self.con = sqlite3.connect(path)",
                "+",
                "+    @staticmethod",
                "+    def is_session_db(path):",
                "+        \"\"\"",
                "+        Check if database entered from user",
                "+        is a valid Session SQLite DB.",
                "+        :return: True if valid, False if invalid.",
                "+        \"\"\"",
                "+        try:",
                "+            c = sqlite3.connect(f'file:{path}?mode=rw', uri=True)",
                "+            cursor = c.cursor()",
                "+            cursor.execute(\"SELECT NAME FROM sqlite_master WHERE type='table';\")",
                "+            rows = cursor.fetchall()",
                "+            tables = [('FLOW',), ('BODY',), ('META',), ('ANNOTATION',)]",
                "+            if all(elem in rows for elem in tables):",
                "+                c.close()",
                "+                return True",
                "+        except:",
                "+            if c:",
                "+                c.close()",
                "+        return False"
            ],
            "changed_files": [
                "mitmproxy/addons/session.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "10.0.0",
                "10.1.0",
                "10.1.1",
                "10.1.2",
                "10.1.3",
                "10.1.4",
                "10.1.5",
                "10.1.6",
                "10.2.0",
                "10.2.1",
                "10.2.2",
                "10.2.3",
                "10.2.4",
                "10.3.0",
                "9.0.0",
                "9.0.1",
                "v10.0.0",
                "v10.1.0",
                "v10.1.1",
                "v10.1.2",
                "v10.1.3",
                "v10.1.4",
                "v10.1.5",
                "v10.1.6",
                "v10.2.0",
                "v10.2.1",
                "v10.2.2",
                "v10.2.3",
                "v10.2.4",
                "v10.3.0",
                "v10.3.1",
                "v5.0.0",
                "v5.0.1",
                "v5.1.0",
                "v5.1.1",
                "v5.2",
                "v5.3.0",
                "v6.0.0",
                "v6.0.1",
                "v6.0.2",
                "v7.0.0",
                "v7.0.1",
                "v7.0.2",
                "v7.0.3",
                "v7.0.4",
                "v8.0.0",
                "v8.1.0",
                "v8.1.1",
                "v9.0.0",
                "v9.0.1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "2386ba62386fc463ac14981b5100ccee04eb8a86",
            "repository": "https://github.com/mitmproxy/mitmproxy",
            "timestamp": 1532385979,
            "hunks": 8,
            "message": "Minor fixes. Array handler. Coverage fixed.",
            "diff": [
                "diff --git a/mitmproxy/language/lexer.py b/mitmproxy/language/lexer.py",
                "index e1f9fb80f..67f77da45 100644",
                "--- a/mitmproxy/language/lexer.py",
                "+++ b/mitmproxy/language/lexer.py",
                "@@ -9,8 +9,5 @@ class CommandLanguageLexer:",
                "         \"WHITESPACE\",",
                "-        \"LPAREN\",",
                "-        \"RPAREN\",",
                "-        \"LBRACE\",",
                "-        \"RBRACE\",",
                "-        \"PLAIN_STR\",",
                "-        \"QUOTED_STR\",",
                "+        \"LPAREN\", \"RPAREN\",",
                "+        \"LBRACE\", \"RBRACE\",",
                "+        \"PLAIN_STR\", \"QUOTED_STR\",",
                "         \"COMMAND\"",
                "@@ -32,3 +29,3 @@ class CommandLanguageLexer:",
                "     special_symbols = re.escape(\"()[]\")",
                "-    plain_str = rf\"\"\"[^{special_symbols}\\s]+\"\"\"",
                "+    plain_str = rf\"[^{special_symbols}\\s]+\"",
                "diff --git a/mitmproxy/language/parser.py b/mitmproxy/language/parser.py",
                "index ba14c18a0..14aa33c6f 100644",
                "--- a/mitmproxy/language/parser.py",
                "+++ b/mitmproxy/language/parser.py",
                "@@ -44,4 +44,4 @@ class CommandLanguageParser:",
                "                     | quoted_str",
                "-                    | COMMAND",
                "                     | array",
                "+                    | COMMAND",
                "                     | command_call_with_parentheses\"\"\"",
                "@@ -50,4 +50,4 @@ class CommandLanguageParser:",
                "     def p_array(self, p):",
                "-        \"\"\"array: LBRACE argument_list RBRACE\"\"\"",
                "-        p[0] = \",\".join(p[2])",
                "+        \"\"\"array : LBRACE argument_list RBRACE\"\"\"",
                "+        p[0] = \",\".join(p[2]) if p[2] else \"\"",
                "diff --git a/test/mitmproxy/test_command.py b/test/mitmproxy/test_command.py",
                "index b404d1196..6ec40fb9a 100644",
                "--- a/test/mitmproxy/test_command.py",
                "+++ b/test/mitmproxy/test_command.py",
                "@@ -30,2 +30,6 @@ class TAddon:",
                "+    @command.command(\"cmd5\")",
                "+    def cmd5(self, choices: typing.Sequence[str]) -> typing.Sequence[str]:",
                "+        return choices",
                "+",
                "     @command.command(\"subcommand\")",
                "@@ -293,4 +297,7 @@ def test_simple():",
                "         c.add(\"one.two\", a.cmd1)",
                "+        c.add(\"array.command\", a.cmd5)",
                "         assert c.commands[\"one.two\"].help == \"cmd1 help\"",
                "         assert(c.execute(\"one.two foo\") == \"ret foo\")",
                "+        assert (c.execute(\"one.two(foo)\") == \"ret foo\")",
                "+        assert (c.execute(\"array.command [1 2 3]\") == [\"1\", \"2\", \"3\"])",
                "         assert(c.execute(\"one.two \\\"foo\\\"\") == \"ret foo\")"
            ],
            "changed_files": [
                "mitmproxy/language/lexer.py",
                "mitmproxy/language/parser.py",
                "test/mitmproxy/test_command.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": []
        },
        {
            "commit_id": "f3169da3ebec65bf65b71ce2c690132ff90efd59",
            "repository": "https://github.com/mitmproxy/mitmproxy",
            "timestamp": 1532678572,
            "hunks": 3,
            "message": "bump dependencies",
            "diff": [
                "diff --git a/setup.py b/setup.py",
                "index 954327e9b..65619e8ae 100644",
                "--- a/setup.py",
                "+++ b/setup.py",
                "@@ -66,3 +66,3 @@ setup(",
                "         \"click>=6.2, <7\",",
                "-        \"cryptography>=2.1.4,<2.3\",",
                "+        \"cryptography>=2.1.4,<2.4\",",
                "         \"h2>=3.0.1,<4\",",
                "@@ -79,3 +79,3 @@ setup(",
                "         \"sortedcontainers>=1.5.4,<2.1\",",
                "-        \"tornado>=4.3,<5.1\",",
                "+        \"tornado>=4.3,<5.2\",",
                "         \"urwid>=2.0.1,<2.1\",",
                "@@ -100,3 +100,3 @@ setup(",
                "             \"requests>=2.9.1, <3\",",
                "-            \"tox>=3.0,<3.1\",",
                "+            \"tox>=3.0,<3.2\",",
                "             \"rstcheck>=2.2, <4.0\","
            ],
            "changed_files": [
                "setup.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "10.0.0",
                "10.1.0",
                "10.1.1",
                "10.1.2",
                "10.1.3",
                "10.1.4",
                "10.1.5",
                "10.1.6",
                "10.2.0",
                "10.2.1",
                "10.2.2",
                "10.2.3",
                "10.2.4",
                "10.3.0",
                "9.0.0",
                "9.0.1",
                "v10.0.0",
                "v10.1.0",
                "v10.1.1",
                "v10.1.2",
                "v10.1.3",
                "v10.1.4",
                "v10.1.5",
                "v10.1.6",
                "v10.2.0",
                "v10.2.1",
                "v10.2.2",
                "v10.2.3",
                "v10.2.4",
                "v10.3.0",
                "v10.3.1",
                "v5.0.0",
                "v5.0.1",
                "v5.1.0",
                "v5.1.1",
                "v5.2",
                "v5.3.0",
                "v6.0.0",
                "v6.0.1",
                "v6.0.2",
                "v7.0.0",
                "v7.0.1",
                "v7.0.2",
                "v7.0.3",
                "v7.0.4",
                "v8.0.0",
                "v8.1.0",
                "v8.1.1",
                "v9.0.0",
                "v9.0.1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "3b5cdf7f67e030fa0887bc309068b727f20918e3",
            "repository": "https://github.com/mitmproxy/mitmproxy",
            "timestamp": 1532103327,
            "hunks": 6,
            "message": "test_linting: removed some unused local variables",
            "diff": [
                "diff --git a/test/mitmproxy/addons/test_session.py b/test/mitmproxy/addons/test_session.py",
                "index 2424bd28f..7089b89e4 100644",
                "--- a/test/mitmproxy/addons/test_session.py",
                "+++ b/test/mitmproxy/addons/test_session.py",
                "@@ -18,3 +18,3 @@ class TestSession:",
                "     def test_session_not_valid(self, tdata):",
                "-        path = tdata.path('mitmproxy/data/') + 'test.sqlite'",
                "+        path = tdata.path('mitmproxy/data/') + '/test.sqlite'",
                "         if os.path.isfile(path):",
                "@@ -24,9 +24,9 @@ class TestSession:",
                "         with pytest.raises(SessionLoadException):",
                "-            s = session.SessionDB(path)",
                "+            session.SessionDB(path)",
                "     def test_session_new_persistent(self, tdata):",
                "-        path = tdata.path('mitmproxy/data/') + 'test.sqlite'",
                "+        path = tdata.path('mitmproxy/data/') + '/test.sqlite'",
                "         if os.path.isfile(path):",
                "             os.remove(path)",
                "-        s = session.SessionDB(path)",
                "+        session.SessionDB(path)",
                "         assert session.SessionDB.is_session_db(path)",
                "@@ -34,3 +34,3 @@ class TestSession:",
                "     def test_session_load_existing(self, tdata):",
                "-        path = tdata.path('mitmproxy/data/') + 'test.sqlite'",
                "+        path = tdata.path('mitmproxy/data/') + '/test.sqlite'",
                "         if os.path.isfile(path):",
                "@@ -45,3 +45,3 @@ class TestSession:",
                "         con.close()",
                "-        s = session.SessionDB(path)",
                "+        session.SessionDB(path)",
                "         con = sqlite3.connect(path)"
            ],
            "changed_files": [
                "test/mitmproxy/addons/test_session.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "10.0.0",
                "10.1.0",
                "10.1.1",
                "10.1.2",
                "10.1.3",
                "10.1.4",
                "10.1.5",
                "10.1.6",
                "10.2.0",
                "10.2.1",
                "10.2.2",
                "10.2.3",
                "10.2.4",
                "10.3.0",
                "9.0.0",
                "9.0.1",
                "v10.0.0",
                "v10.1.0",
                "v10.1.1",
                "v10.1.2",
                "v10.1.3",
                "v10.1.4",
                "v10.1.5",
                "v10.1.6",
                "v10.2.0",
                "v10.2.1",
                "v10.2.2",
                "v10.2.3",
                "v10.2.4",
                "v10.3.0",
                "v10.3.1",
                "v5.0.0",
                "v5.0.1",
                "v5.1.0",
                "v5.1.1",
                "v5.2",
                "v5.3.0",
                "v6.0.0",
                "v6.0.1",
                "v6.0.2",
                "v7.0.0",
                "v7.0.1",
                "v7.0.2",
                "v7.0.3",
                "v7.0.4",
                "v8.0.0",
                "v8.1.0",
                "v8.1.1",
                "v9.0.0",
                "v9.0.1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "fad8e7c99b5db84f6e03da674453c28e47e97d9f",
            "repository": "https://github.com/mitmproxy/mitmproxy",
            "timestamp": 1532098691,
            "hunks": 1,
            "message": "tests: SessionDB fully tested",
            "diff": [
                "diff --git a/test/mitmproxy/addons/test_session.py b/test/mitmproxy/addons/test_session.py",
                "new file mode 100644",
                "index 000000000..2424bd28f",
                "--- /dev/null",
                "+++ b/test/mitmproxy/addons/test_session.py",
                "@@ -0,0 +1,52 @@",
                "+import sqlite3",
                "+import os",
                "+import pytest",
                "+",
                "+from mitmproxy.exceptions import SessionLoadException",
                "+from mitmproxy.addons import session",
                "+from mitmproxy.utils.data import pkg_data",
                "+",
                "+",
                "+class TestSession:",
                "+    def test_session_temporary(self, tdata):",
                "+        open('tmp.sqlite', 'w')",
                "+        s = session.SessionDB()",
                "+        assert session.SessionDB.is_session_db('tmp.sqlite')",
                "+        s.con.close()",
                "+        os.remove('tmp.sqlite')",
                "+",
                "+    def test_session_not_valid(self, tdata):",
                "+        path = tdata.path('mitmproxy/data/') + 'test.sqlite'",
                "+        if os.path.isfile(path):",
                "+            os.remove(path)",
                "+        with open(path, 'w') as handle:",
                "+            handle.write(\"Not valid data\")",
                "+        with pytest.raises(SessionLoadException):",
                "+            s = session.SessionDB(path)",
                "+",
                "+    def test_session_new_persistent(self, tdata):",
                "+        path = tdata.path('mitmproxy/data/') + 'test.sqlite'",
                "+        if os.path.isfile(path):",
                "+            os.remove(path)",
                "+        s = session.SessionDB(path)",
                "+        assert session.SessionDB.is_session_db(path)",
                "+",
                "+    def test_session_load_existing(self, tdata):",
                "+        path = tdata.path('mitmproxy/data/') + 'test.sqlite'",
                "+        if os.path.isfile(path):",
                "+            os.remove(path)",
                "+        con = sqlite3.connect(path)",
                "+        script_path = pkg_data.path(\"io/sql/session_create.sql\")",
                "+        qry = open(script_path, 'r').read()",
                "+        with con:",
                "+            con.executescript(qry)",
                "+            blob = b'blob_of_data'",
                "+            con.execute(f'INSERT INTO FLOW VALUES(1, 1, 1, \"{blob}\");')",
                "+        con.close()",
                "+        s = session.SessionDB(path)",
                "+        con = sqlite3.connect(path)",
                "+        with con:",
                "+            cur = con.cursor()",
                "+            cur.execute('SELECT * FROM FLOW;')",
                "+            rows = cur.fetchall()",
                "+            assert len(rows) == 1"
            ],
            "changed_files": [
                "test/mitmproxy/addons/test_session.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "10.0.0",
                "10.1.0",
                "10.1.1",
                "10.1.2",
                "10.1.3",
                "10.1.4",
                "10.1.5",
                "10.1.6",
                "10.2.0",
                "10.2.1",
                "10.2.2",
                "10.2.3",
                "10.2.4",
                "10.3.0",
                "9.0.0",
                "9.0.1",
                "v10.0.0",
                "v10.1.0",
                "v10.1.1",
                "v10.1.2",
                "v10.1.3",
                "v10.1.4",
                "v10.1.5",
                "v10.1.6",
                "v10.2.0",
                "v10.2.1",
                "v10.2.2",
                "v10.2.3",
                "v10.2.4",
                "v10.3.0",
                "v10.3.1",
                "v5.0.0",
                "v5.0.1",
                "v5.1.0",
                "v5.1.1",
                "v5.2",
                "v5.3.0",
                "v6.0.0",
                "v6.0.1",
                "v6.0.2",
                "v7.0.0",
                "v7.0.1",
                "v7.0.2",
                "v7.0.3",
                "v7.0.4",
                "v8.0.0",
                "v8.1.0",
                "v8.1.1",
                "v9.0.0",
                "v9.0.1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "50e3bab3c559615fb1a01c2292b65b0902ff851f",
            "repository": "https://github.com/mitmproxy/mitmproxy",
            "timestamp": 1532284540,
            "hunks": 1,
            "message": "fix whitespace",
            "diff": [
                "diff --git a/mitmproxy/contentviews/xml_html.py b/mitmproxy/contentviews/xml_html.py",
                "index 22c402e66..658fbcd7b 100644",
                "--- a/mitmproxy/contentviews/xml_html.py",
                "+++ b/mitmproxy/contentviews/xml_html.py",
                "@@ -140,3 +140,3 @@ def is_inline(prev2: Token, prev1: Token, t: Token, next1: Token, next2: Token)",
                "         if isinstance(next1, Tag) and t.is_opening and next1.is_closing and t.tag == next1.tag:",
                "-                return True  # <div></div> (start tag)",
                "+            return True  # <div></div> (start tag)",
                "         if isinstance(prev1, Tag) and prev1.is_opening and t.is_closing and prev1.tag == t.tag:"
            ],
            "changed_files": [
                "mitmproxy/contentviews/xml_html.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "10.0.0",
                "10.1.0",
                "10.1.1",
                "10.1.2",
                "10.1.3",
                "10.1.4",
                "10.1.5",
                "10.1.6",
                "10.2.0",
                "10.2.1",
                "10.2.2",
                "10.2.3",
                "10.2.4",
                "10.3.0",
                "9.0.0",
                "9.0.1",
                "v10.0.0",
                "v10.1.0",
                "v10.1.1",
                "v10.1.2",
                "v10.1.3",
                "v10.1.4",
                "v10.1.5",
                "v10.1.6",
                "v10.2.0",
                "v10.2.1",
                "v10.2.2",
                "v10.2.3",
                "v10.2.4",
                "v10.3.0",
                "v10.3.1",
                "v5.0.0",
                "v5.0.1",
                "v5.1.0",
                "v5.1.1",
                "v5.2",
                "v5.3.0",
                "v6.0.0",
                "v6.0.1",
                "v6.0.2",
                "v7.0.0",
                "v7.0.1",
                "v7.0.2",
                "v7.0.3",
                "v7.0.4",
                "v8.0.0",
                "v8.1.0",
                "v8.1.1",
                "v9.0.0",
                "v9.0.1"
            ],
            "matched_rules": []
        }
    ]
}
