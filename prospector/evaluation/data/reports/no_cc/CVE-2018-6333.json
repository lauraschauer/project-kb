{
    "advisory_record": {
        "cve_id": "CVE-2018-6333",
        "description": "The hhvm-attach deep link handler in Nuclide did not properly sanitize the provided hostname parameter when rendering. As a result, a malicious URL could be used to render HTML and other content inside of the editor's context, which could potentially be chained to lead to code execution. This issue affected Nuclide prior to v0.290.0.",
        "reserved_timestamp": 1516924800,
        "published_timestamp": 1546297200,
        "updated_timestamp": 1546297021,
        "repository_url": null,
        "references": {
            "commit::65f6bbd683404be1bb569b8d1be84b5d4c74a324": 2
        },
        "affected_products": [
            "Nuclide",
            "HTML"
        ],
        "versions": {
            "status": "affected",
            "version": "v0.290.0"
        },
        "files": [
            "hhvm-attach",
            "URL",
            "HTML"
        ],
        "keywords": [
            "hostname",
            "link",
            "chain",
            "code",
            "handler",
            "execution",
            "affect",
            "parameter",
            "content",
            "hhvm",
            "result",
            "editor",
            "issue",
            "provide",
            "html",
            "sanitize",
            "render",
            "nuclide",
            "attach",
            "lead",
            "context"
        ],
        "files_extension": [],
        "has_fixing_commit": true
    },
    "commits": [
        {
            "commit_id": "65f6bbd683404be1bb569b8d1be84b5d4c74a324",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521241375,
            "hunks": 1,
            "message": "Ignore invalid hostnames in hhvm-attach deep link Summary: Provide nicer handling and an error message when following a deep link requesting HHVM debugger attach that has a malformed host name. Reviewed By: hansonw Differential Revision: D7308417 fbshipit-source-id: 60bae4013444008980dda9cda8dec5f8ae20944f",
            "diff": [
                "diff --git a/pkg/nuclide-hhvm/lib/main.js b/pkg/nuclide-hhvm/lib/main.js",
                "index d286489c5..d503a37b9 100644",
                "--- a/pkg/nuclide-hhvm/lib/main.js",
                "+++ b/pkg/nuclide-hhvm/lib/main.js",
                "@@ -115,2 +115,13 @@ class Activation {",
                "     const host = nuclideUri.getHostname(pathString);",
                "+",
                "+    // Allow only valid hostname characters, per RFC 952:",
                "+    // https://tools.ietf.org/html/rfc952",
                "+    const invalidMatch = host.match(/[^A-Za-z0-9\\-._]+/);",
                "+    if (invalidMatch != null) {",
                "+      atom.notifications.addError(",
                "+        'The specified host name contained invalid characters.',",
                "+      );",
                "+      return;",
                "+    }",
                "+",
                "     const cwd = nuclideUri.createRemoteUri(host, hackRootString);"
            ],
            "changed_files": [
                "pkg/nuclide-hhvm/lib/main.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 2 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: hhvm-attach",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: hostname, link, provide, hhvm, attach",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: hhvm",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "e92680d91fae019c1000dafc294124ff0b213e50",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521848247,
            "hunks": 3,
            "message": "Fix HTML appearing in console messages Summary: DOM cleanup caused a regression that puts HTML markup back in console message entries Reviewed By: matthewwithanm Differential Revision: D7385301 fbshipit-source-id: b354baecc0b0473136aa0b7abf50ae9566469e42",
            "diff": [
                "diff --git a/modules/atom-ide-ui/pkg/atom-ide-diagnostics-ui/lib/ui/DiagnosticsMessageText.js b/modules/atom-ide-ui/pkg/atom-ide-diagnostics-ui/lib/ui/DiagnosticsMessageText.js",
                "index bc285d990..9883fd5ae 100644",
                "--- a/modules/atom-ide-ui/pkg/atom-ide-diagnostics-ui/lib/ui/DiagnosticsMessageText.js",
                "+++ b/modules/atom-ide-ui/pkg/atom-ide-diagnostics-ui/lib/ui/DiagnosticsMessageText.js",
                "@@ -115,3 +115,5 @@ export const DiagnosticsMessageText = (props: DiagnosticsMessageTextProps) => {",
                "         title={message.text}",
                "-        dangerouslySetInnerHTML={{__html: domPurify.sanitize(message.html)}}",
                "+        dangerouslySetInnerHTML={{",
                "+          __html: domPurify.sanitize(message.html),",
                "+        }}",
                "       />",
                "diff --git a/pkg/nuclide-atom-notifications/lib/main.js b/pkg/nuclide-atom-notifications/lib/main.js",
                "index 3be1865df..a2da0894a 100644",
                "--- a/pkg/nuclide-atom-notifications/lib/main.js",
                "+++ b/pkg/nuclide-atom-notifications/lib/main.js",
                "@@ -69,3 +69,3 @@ function getLevel(atomNotificationType: string): ConsoleLevel {",
                " function stripFormatting(raw: string): string {",
                "-  return domPurify.sanitize(marked(raw));",
                "+  return domPurify.sanitize(marked(raw), {ALLOWED_TAGS: []});",
                " }",
                "diff --git a/pkg/nuclide-ocaml/lib/CodeLensListener.js b/pkg/nuclide-ocaml/lib/CodeLensListener.js",
                "index 18e84f222..7d8cf943d 100644",
                "--- a/pkg/nuclide-ocaml/lib/CodeLensListener.js",
                "+++ b/pkg/nuclide-ocaml/lib/CodeLensListener.js",
                "@@ -111,3 +111,5 @@ function resolveVisible(): void {",
                "       if (lens != null && lens.command != null) {",
                "-        lensInfo.element.innerHTML = domPurify.sanitize(lens.command.title);",
                "+        lensInfo.element.innerHTML = domPurify.sanitize(lens.command.title, {",
                "+          ALLOWED_TAGS: [],",
                "+        });",
                "       } else if (lensInfo.retries < RETRIES) {"
            ],
            "changed_files": [
                "modules/atom-ide-ui/pkg/atom-ide-diagnostics-ui/lib/ui/DiagnosticsMessageText.js",
                "pkg/nuclide-atom-notifications/lib/main.js",
                "pkg/nuclide-ocaml/lib/CodeLensListener.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: HTML",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: HTML",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: html",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: code",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "bdb743ee12d76e918141f8411dd4fca4bcf30cc5",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520553000,
            "hunks": 19,
            "message": "Nuclide debugger: add experimental support for TerminateThread Summary: This diff adds support to the UX for TerminateThread, which is currently proposed as an addition to the VS Code debug adapter protocol, but not yet added.  A debugger would indicate support for this in capabilities, and if supported, Terminate Thread would appear as an option in the threads pane, and on the threads pane context menu. We currently send the terminate thread request with an \"fb_\" prefix since this is experimental. The prefix would be removed once this command is added to the protocol officially. Our HHVM debugger will support the \"fb_\" prefix. Reviewed By: mostafaeweda Differential Revision: D7198520 fbshipit-source-id: 9189646901223cdeb6648a48833f31a1303e460f",
            "diff": [
                "diff --git a/flow-libs/vscode-debugprotocol.js.flow b/flow-libs/vscode-debugprotocol.js.flow",
                "index 8ecae1169..059534153 100644",
                "--- a/flow-libs/vscode-debugprotocol.js.flow",
                "+++ b/flow-libs/vscode-debugprotocol.js.flow",
                "@@ -1081,2 +1081,8 @@ declare module 'vscode-debugprotocol' {",
                "     supportsContinueToLocation?: boolean,",
                "+",
                "+    /** Experimental support for terminate thread - this is currently proposed as",
                "+     *  an addition to the protocol but not added yet.",
                "+     *  Tracked by VS Code issue: https://github.com/Microsoft/vscode-debugadapter-node/issues/150",
                "+     */",
                "+     supportsTerminateThread?: boolean,",
                "   };",
                "diff --git a/modules/nuclide-commons-ui/Table.js b/modules/nuclide-commons-ui/Table.js",
                "index a19dd0b3e..79c5ecfd9 100644",
                "--- a/modules/nuclide-commons-ui/Table.js",
                "+++ b/modules/nuclide-commons-ui/Table.js",
                "@@ -55,4 +55,5 @@ export type Column<T: Object> = {",
                " export type Row<T: Object> = {",
                "-  +className?: string,",
                "-  +data: T,",
                "+  className?: string,",
                "+  data: T,",
                "+  rowAttributes?: Object,",
                " };",
                "@@ -552,3 +553,3 @@ export class Table<T: Object> extends React.Component<Props<T>, State<T>> {",
                "     let body = rows.map((row, i) => {",
                "-      const {className: rowClassName, data} = row;",
                "+      const {className: rowClassName, data, rowAttributes} = row;",
                "       const renderedRow = columns.map((column, j) => {",
                "@@ -579,3 +580,4 @@ export class Table<T: Object> extends React.Component<Props<T>, State<T>> {",
                "             style={cellStyle}",
                "-            title={typeof datum !== 'object' ? String(datum) : null}>",
                "+            title={typeof datum !== 'object' ? String(datum) : null}",
                "+            {...rowAttributes}>",
                "             {datum}",
                "diff --git a/pkg/nuclide-debugger-new/lib/constants.js b/pkg/nuclide-debugger-new/lib/constants.js",
                "index 7c406a645..79557aaad 100644",
                "--- a/pkg/nuclide-debugger-new/lib/constants.js",
                "+++ b/pkg/nuclide-debugger-new/lib/constants.js",
                "@@ -33,2 +33,3 @@ export const AnalyticsEvents = Object.freeze({",
                "   DEBUGGER_STOP: 'debugger-stop',",
                "+  DEBUGGER_TERMINATE_THREAD: 'debugger-terminate-thread',",
                "   DEBUGGER_TOGGLE_ATTACH_DIALOG: 'debugger-toggle-attach-dialog',",
                "diff --git a/pkg/nuclide-debugger-new/lib/main.js b/pkg/nuclide-debugger-new/lib/main.js",
                "index 998fff877..99d5b6e8e 100644",
                "--- a/pkg/nuclide-debugger-new/lib/main.js",
                "+++ b/pkg/nuclide-debugger-new/lib/main.js",
                "@@ -180,2 +180,5 @@ class Activation {",
                "       }),",
                "+      atom.commands.add('.nuclide-debugger-thread-list-item', {",
                "+        'nuclide-debugger:terminate-thread': this._terminateThread.bind(this),",
                "+      }),",
                "       atom.commands.add('atom-workspace', {",
                "@@ -252,2 +255,18 @@ class Activation {",
                "         ],",
                "+        '.nuclide-debugger-thread-list-item': [",
                "+          {",
                "+            label: 'Terminate thread',",
                "+            command: 'nuclide-debugger:terminate-thread',",
                "+            shouldDisplay: event => {",
                "+              const target: HTMLElement = event.target;",
                "+              if (target.dataset.threadid) {",
                "+                const threadId = parseInt(target.dataset.threadid, 10);",
                "+                if (!Number.isNaN(threadId)) {",
                "+                  return this._supportsTerminateThread();",
                "+                }",
                "+              }",
                "+              return false;",
                "+            },",
                "+          },",
                "+        ],",
                "         '.nuclide-debugger-callstack-table': [",
                "@@ -349,2 +368,14 @@ class Activation {",
                "+  _supportsTerminateThread(): boolean {",
                "+    // If currently debugging, return whether or not the current debugger supports this.",
                "+    const {focusedProcess} = this._service.viewModel;",
                "+    if (focusedProcess == null) {",
                "+      return false;",
                "+    } else {",
                "+      return Boolean(",
                "+        focusedProcess.session.capabilities.supportsTerminateThread,",
                "+      );",
                "+    }",
                "+  }",
                "+",
                "   _setProvidersForConnection(connection: NuclideUri): void {",
                "@@ -574,2 +605,12 @@ class Activation {",
                "+  _terminateThread(event: any) {",
                "+    const target: HTMLElement = event.target;",
                "+    if (target.dataset.threadid) {",
                "+      const threadId = parseInt(target.dataset.threadid, 10);",
                "+      if (!Number.isNaN(threadId) && this._supportsTerminateThread()) {",
                "+        this._service.terminateThread(threadId);",
                "+      }",
                "+    }",
                "+  }",
                "+",
                "   _executeWithEditorPath<T>(",
                "diff --git a/pkg/nuclide-debugger-new/lib/ui/DebuggerThreadsComponent.js b/pkg/nuclide-debugger-new/lib/ui/DebuggerThreadsComponent.js",
                "index 12ed022e7..e484e59ce 100644",
                "--- a/pkg/nuclide-debugger-new/lib/ui/DebuggerThreadsComponent.js",
                "+++ b/pkg/nuclide-debugger-new/lib/ui/DebuggerThreadsComponent.js",
                "@@ -43,8 +43,9 @@ type State = {",
                " type CellData = {|",
                "-  +id: number,",
                "-  +name: string,",
                "-  +address: ?string,",
                "-  +stopped: boolean,",
                "-  +stopReason: ?string,",
                "-  +isSelected: boolean,",
                "+  id: number,",
                "+  name: string,",
                "+  address: ?string,",
                "+  stopped: boolean,",
                "+  stopReason: ?string,",
                "+  isSelected: boolean,",
                "+  terminateThread?: number,",
                " |};",
                "@@ -57,3 +58,4 @@ type ColumnName =",
                "   | 'isSelected'",
                "-  | 'stopped';",
                "+  | 'stopped'",
                "+  | 'terminateThread';",
                "@@ -192,2 +194,12 @@ export default class DebuggerThreadsComponent extends React.Component<",
                "+    let supportsTerminateThread = false;",
                "+    const {focusedProcess} = this.props.service.viewModel;",
                "+    if (",
                "+      focusedProcess != null &&",
                "+      focusedProcess.session != null &&",
                "+      Boolean(focusedProcess.session.capabilities.supportsTerminateThread)",
                "+    ) {",
                "+      supportsTerminateThread = true;",
                "+    }",
                "+",
                "     const columns = [",
                "@@ -207,3 +219,3 @@ export default class DebuggerThreadsComponent extends React.Component<",
                "         key: 'address',",
                "-        width: 0.45,",
                "+        width: supportsTerminateThread ? 0.35 : 0.45,",
                "       },",
                "@@ -216,2 +228,23 @@ export default class DebuggerThreadsComponent extends React.Component<",
                "+    if (supportsTerminateThread) {",
                "+      columns.push({",
                "+        title: 'Terminate',",
                "+        key: 'terminateThread',",
                "+        width: 0.1,",
                "+        component: () => (",
                "+          <Icon",
                "+            icon=\"x\"",
                "+            title=\"Terminate Thread\"",
                "+            onClick={event => {",
                "+              atom.commands.dispatch(",
                "+                event.target.parentElement,",
                "+                'nuclide-debugger:terminate-thread',",
                "+              );",
                "+              event.stopPropagation();",
                "+            }}",
                "+          />",
                "+        ),",
                "+      });",
                "+    }",
                "+",
                "     const emptyComponent = () => (",
                "@@ -227,3 +260,3 @@ export default class DebuggerThreadsComponent extends React.Component<",
                "             const callstack = thread.getCallStack();",
                "-            const cellData = {",
                "+            const cellData: Row<CellData> = {",
                "               data: {",
                "@@ -240,2 +273,3 @@ export default class DebuggerThreadsComponent extends React.Component<",
                "                 isSelected: thread.threadId === selectedThreadId,",
                "+                terminateThread: thread.threadId,",
                "               },",
                "@@ -243,5 +277,14 @@ export default class DebuggerThreadsComponent extends React.Component<",
                "             if (thread.threadId === selectedThreadId) {",
                "-              // $FlowIssue className is an optional property of a table row",
                "-              cellData.className = 'nuclide-debugger-thread-list-item-selected';",
                "+              cellData.className =",
                "+                'nuclide-debugger-thread-list-item nuclide-debugger-thread-list-item-selected';",
                "+            } else {",
                "+              cellData.className = 'nuclide-debugger-thread-list-item';",
                "             }",
                "+",
                "+            // Decorate the cells with the thread ID they correspond to",
                "+            // so context menus know what thread to target for commands.",
                "+            cellData.rowAttributes = {",
                "+              'data-threadId': thread.threadId,",
                "+            };",
                "+",
                "             return cellData;",
                "diff --git a/pkg/nuclide-debugger-new/lib/vsp/DebugService.js b/pkg/nuclide-debugger-new/lib/vsp/DebugService.js",
                "index 61f1e3b9c..d13525cfb 100644",
                "--- a/pkg/nuclide-debugger-new/lib/vsp/DebugService.js",
                "+++ b/pkg/nuclide-debugger-new/lib/vsp/DebugService.js",
                "@@ -1045,2 +1045,17 @@ export default class DebugService implements IDebugService {",
                "+  async terminateThread(threadId: number): Promise<void> {",
                "+    const {focusedProcess} = this.viewModel;",
                "+    if (focusedProcess == null) {",
                "+      return;",
                "+    }",
                "+",
                "+    const session = focusedProcess.session;",
                "+    track(AnalyticsEvents.DEBUGGER_TERMINATE_THREAD);",
                "+    if (Boolean(session.capabilities.supportsTerminateThread)) {",
                "+      await session.custom('terminateThread', {",
                "+        threadId,",
                "+      });",
                "+    }",
                "+  }",
                "+",
                "   async runToLocation(uri: string, line: number): Promise<void> {"
            ],
            "changed_files": [
                "flow-libs/vscode-debugprotocol.js.flow",
                "modules/nuclide-commons-ui/Table.js",
                "pkg/nuclide-debugger-new/lib/constants.js",
                "pkg/nuclide-debugger-new/lib/main.js",
                "pkg/nuclide-debugger-new/lib/ui/DebuggerThreadsComponent.js",
                "pkg/nuclide-debugger-new/lib/vsp/DebugService.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: HTML",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code, hhvm, context",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: code",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "a71f48fc2283be76a003991dd216fbd4a3d80a98",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521743665,
            "hunks": 17,
            "message": "Clean up strings being used for atom.notifications and DOM element contents Summary: Cleanining up all input being passed to atom.notification.add* by hooking the functions and cleaning the input before passing to atom. Cleaning up all strings to be set as innerHTML on some DOM element. Reviewed By: matthewwithanm Differential Revision: D7310765 fbshipit-source-id: 3d74ede442e6f8ad51ac224a6d8c9f3b19389e81",
            "diff": [
                "diff --git a/flow-libs/atom.js.flow b/flow-libs/atom.js.flow",
                "index 03a095df6..8cd4bcdf5 100644",
                "--- a/flow-libs/atom.js.flow",
                "+++ b/flow-libs/atom.js.flow",
                "@@ -1862,2 +1862,3 @@ declare class atom$NotificationManager {",
                "   addFatalError(message: string, options?: atom$NotificationOptions): atom$Notification,",
                "+  addNotification(notification: atom$Notification): atom$Notification,",
                "diff --git a/lib/main.js b/lib/main.js",
                "index 19b47dc77..9fc3c1802 100644",
                "--- a/lib/main.js",
                "+++ b/lib/main.js",
                "@@ -44,2 +44,3 @@ import UniversalDisposable from 'nuclide-commons/UniversalDisposable';",
                " import pubFeatureGroups from './featureGroups.json';",
                "+import createDOMPurify from 'dompurify';",
                "@@ -52,2 +53,4 @@ try {",
                "+const domPurify = createDOMPurify();",
                "+",
                " // The minimum version of Atom required to run Nuclide. Anything less than this and users will get",
                "@@ -260,2 +263,17 @@ function _activate() {",
                "   );",
                "+",
                "+  patchNotificationManager();",
                "+}",
                "+",
                "+function patchNotificationManager() {",
                "+  const {addNotification} = atom.notifications;",
                "+",
                "+  // Patch the notification functions to make sure they only display cleaned",
                "+  // HTML output.",
                "+  // $FlowIgnore - property not writeable",
                "+  atom.notifications.addNotification = (notification: atom$Notification) => {",
                "+    // $FlowIgnore - internal property",
                "+    notification.message = domPurify.sanitize(notification.message);",
                "+    return addNotification.bind(atom.notifications)(notification);",
                "+  };",
                " }",
                "diff --git a/modules/atom-ide-ui/package.json b/modules/atom-ide-ui/package.json",
                "index 777cf650e..568f09f1f 100644",
                "--- a/modules/atom-ide-ui/package.json",
                "+++ b/modules/atom-ide-ui/package.json",
                "@@ -20,2 +20,3 @@",
                "     \"classnames\": \"2.2.5\",",
                "+    \"dompurify\": \"1.0.3\",",
                "     \"fuzzaldrin-plus\": \"0.4.1\",",
                "diff --git a/modules/atom-ide-ui/pkg/atom-ide-datatip/lib/MarkedStringDatatip.js b/modules/atom-ide-ui/pkg/atom-ide-datatip/lib/MarkedStringDatatip.js",
                "index 315ecd90c..8d0977f10 100644",
                "--- a/modules/atom-ide-ui/pkg/atom-ide-datatip/lib/MarkedStringDatatip.js",
                "+++ b/modules/atom-ide-ui/pkg/atom-ide-datatip/lib/MarkedStringDatatip.js",
                "@@ -18,2 +18,5 @@ import * as React from 'react';",
                " import MarkedStringSnippet from './MarkedStringSnippet';",
                "+import createDOMPurify from 'dompurify';",
                "+",
                "+const domPurify = createDOMPurify();",
                "@@ -31,3 +34,3 @@ export default class MarkedStringDatatip extends React.PureComponent<Props> {",
                "             dangerouslySetInnerHTML={{",
                "-              __html: marked(chunk.value, {sanitize: true}),",
                "+              __html: domPurify.sanitize(marked(chunk.value)),",
                "             }}",
                "diff --git a/modules/atom-ide-ui/pkg/atom-ide-diagnostics-ui/lib/ui/DiagnosticsMessageText.js b/modules/atom-ide-ui/pkg/atom-ide-diagnostics-ui/lib/ui/DiagnosticsMessageText.js",
                "index 303ac8b30..bc285d990 100644",
                "--- a/modules/atom-ide-ui/pkg/atom-ide-diagnostics-ui/lib/ui/DiagnosticsMessageText.js",
                "+++ b/modules/atom-ide-ui/pkg/atom-ide-diagnostics-ui/lib/ui/DiagnosticsMessageText.js",
                "@@ -15,2 +15,5 @@ import * as React from 'react';",
                " import {shell} from 'electron';",
                "+import createDOMPurify from 'dompurify';",
                "+",
                "+const domPurify = createDOMPurify();",
                "@@ -112,3 +115,3 @@ export const DiagnosticsMessageText = (props: DiagnosticsMessageTextProps) => {",
                "         title={message.text}",
                "-        dangerouslySetInnerHTML={{__html: message.html}}",
                "+        dangerouslySetInnerHTML={{__html: domPurify.sanitize(message.html)}}",
                "       />",
                "diff --git a/package.json b/package.json",
                "index d0f9f09f9..aaaecadf2 100644",
                "--- a/package.json",
                "+++ b/package.json",
                "@@ -64,2 +64,3 @@",
                "     \"domexception\": \"1.0.1\",",
                "+    \"dompurify\": \"1.0.3\",",
                "     \"double-ended-queue\": \"2.1.0-0\",",
                "diff --git a/pkg/nuclide-atom-notifications/lib/main.js b/pkg/nuclide-atom-notifications/lib/main.js",
                "index c847f5908..3be1865df 100644",
                "--- a/pkg/nuclide-atom-notifications/lib/main.js",
                "+++ b/pkg/nuclide-atom-notifications/lib/main.js",
                "@@ -16,2 +16,5 @@ import marked from 'marked';",
                " import createPackage from 'nuclide-commons-atom/createPackage';",
                "+import createDOMPurify from 'dompurify';",
                "+",
                "+const domPurify = createDOMPurify();",
                "@@ -62,16 +65,7 @@ function getLevel(atomNotificationType: string): ConsoleLevel {",
                "-let formattingDiv;",
                " /**",
                "- * Markdown and HTML can be used with Atom notifications, but not in the console. In order to strip",
                "- * all of the formatting, we'll first compile the markdown, then use a DOM element to convert that",
                "- * to raw text. This isn't the most performant way to strip the HTML, but it does handle `<br />`s",
                "- * and stuff really easily and only happens once per notification so it's okay.",
                "+ * Markdown and HTML can be used with Atom notifications, but not in the console.",
                "  */",
                " function stripFormatting(raw: string): string {",
                "-  const div =",
                "-    formattingDiv == null",
                "-      ? (formattingDiv = document.createElement('div'))",
                "-      : formattingDiv;",
                "-  div.innerHTML = marked(raw);",
                "-  return div.innerText || '';",
                "+  return domPurify.sanitize(marked(raw));",
                " }",
                "diff --git a/pkg/nuclide-ocaml/lib/CodeLensListener.js b/pkg/nuclide-ocaml/lib/CodeLensListener.js",
                "index 3484e993c..18e84f222 100644",
                "--- a/pkg/nuclide-ocaml/lib/CodeLensListener.js",
                "+++ b/pkg/nuclide-ocaml/lib/CodeLensListener.js",
                "@@ -23,2 +23,5 @@ import UniversalDisposable from 'nuclide-commons/UniversalDisposable';",
                " import {getFileVersionOfEditor} from '../../nuclide-open-files';",
                "+import createDOMPurify from 'dompurify';",
                "+",
                "+const domPurify = createDOMPurify();",
                "@@ -108,3 +111,3 @@ function resolveVisible(): void {",
                "       if (lens != null && lens.command != null) {",
                "-        lensInfo.element.innerHTML = lens.command.title;",
                "+        lensInfo.element.innerHTML = domPurify.sanitize(lens.command.title);",
                "       } else if (lensInfo.retries < RETRIES) {",
                "diff --git a/yarn.lock b/yarn.lock",
                "index ae4de0d38..25efa4a38 100644",
                "--- a/yarn.lock",
                "+++ b/yarn.lock",
                "@@ -1670,2 +1670,6 @@ domhandler@^2.3.0:",
                "+dompurify@1.0.3:",
                "+  version \"1.0.3\"",
                "+  resolved \"https://registry.yarnpkg.com/dompurify/-/dompurify-1.0.3.tgz#3f2f6ecb6ecd27599a506b410ff47d6eb90fd05d\"",
                "+",
                " domutils@1.5.1, domutils@^1.5.1:"
            ],
            "changed_files": [
                "flow-libs/atom.js.flow",
                "lib/main.js",
                "modules/atom-ide-ui/package.json",
                "modules/atom-ide-ui/pkg/atom-ide-datatip/lib/MarkedStringDatatip.js",
                "modules/atom-ide-ui/pkg/atom-ide-diagnostics-ui/lib/ui/DiagnosticsMessageText.js",
                "package.json",
                "pkg/nuclide-atom-notifications/lib/main.js",
                "pkg/nuclide-ocaml/lib/CodeLensListener.js",
                "yarn.lock"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: HTML",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: content, html",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: code",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "f67ab3e00ec61e87722d8fb10167e63c40dcb036",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520901468,
            "hunks": 4,
            "message": "Switch \"code lens copied\" text from notification to tooltip. Summary: Sending a notification for the \"code lens copied\" message is a bit heavyweight, so use a tooltip instead. This tooltip will be manually shown and removed so it shouldn't have the same problems with sticking around forever that other tooltips had. Reviewed By: ljw1004 Differential Revision: D7246448 fbshipit-source-id: 69fcf9c24911b3502e11c9406a92ddb3d909d448",
            "diff": [
                "diff --git a/pkg/nuclide-ocaml/lib/CodeLensListener.js b/pkg/nuclide-ocaml/lib/CodeLensListener.js",
                "index 72c2ee193..d8362911c 100644",
                "--- a/pkg/nuclide-ocaml/lib/CodeLensListener.js",
                "+++ b/pkg/nuclide-ocaml/lib/CodeLensListener.js",
                "@@ -173,2 +173,3 @@ export function observeForCodeLens(",
                "             const element = document.createElement('span');",
                "+",
                "             // Put in a nonbreaking space to reserve the space in the editor. If",
                "@@ -177,3 +178,10 @@ export function observeForCodeLens(",
                "             element.innerHTML = '\\xa0';",
                "-            element.classList.add('code-lens');",
                "+",
                "+            // We do a span inside a div so that the tooltip and clickable area",
                "+            // only cover the part of the code lens that has text, but the",
                "+            // code-lens style will be applied to the entire editor row.",
                "+            const containingElement = document.createElement('div');",
                "+            containingElement.classList.add('code-lens');",
                "+            containingElement.appendChild(element);",
                "+",
                "             editor.decorateMarker(marker, {",
                "@@ -181,3 +189,3 @@ export function observeForCodeLens(",
                "               position: 'before',",
                "-              item: element,",
                "+              item: containingElement,",
                "             });",
                "@@ -189,3 +197,8 @@ export function observeForCodeLens(",
                "                 atom.clipboard.write(element.innerText);",
                "-                atom.notifications.addSuccess('Copied code lens to clipboard.');",
                "+                const tooltipDispose = atom.tooltips.add(element, {",
                "+                  title: 'Copied code lens to clipboard.',",
                "+                  placement: 'auto',",
                "+                  trigger: 'manual',",
                "+                });",
                "+                setTimeout(() => tooltipDispose.dispose(), 3000);",
                "               }"
            ],
            "changed_files": [
                "pkg/nuclide-ocaml/lib/CodeLensListener.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: HTML",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: code",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "2fbe1e2ffa8de934439129dea79b3557f6a7cf89",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521047228,
            "hunks": 32,
            "message": "Nuclide VSP Debugger: Clear sourceReference breakpoints at the end of the debug session Summary: Not all debug adapters support consistent / persistent `sourceReference` numbers; Hence the need to cleanup them at the end of the debug session. Also, had to change url format & nuclide uri handling (As it was considering every editor path mapping to a nuclide uri: local or remote, but there's situations where you'd need an editor repsenting a non-file-based resource) + be unique. Reviewed By: velocityboy Differential Revision: D7252123 fbshipit-source-id: 98681b7605652151d2dd847917de657b5a424191",
            "diff": [
                "diff --git a/modules/nuclide-commons/nuclideUri.js b/modules/nuclide-commons/nuclideUri.js",
                "index 5588178f3..0bc223c2a 100644",
                "--- a/modules/nuclide-commons/nuclideUri.js",
                "+++ b/modules/nuclide-commons/nuclideUri.js",
                "@@ -149,6 +149,2 @@ function parse(uri: NuclideUri): ParsedUrl {",
                "-  invariant(",
                "-    uri.indexOf('://') === -1,",
                "-    'Nuclide URI must be either local file names or URLs starting with nuclide://',",
                "-  );",
                "   invariant(",
                "@@ -805,5 +801,2 @@ function _testForIllegalUri(uri: ?NuclideUri): void {",
                "   if (uri != null) {",
                "-    if (isAtomUri(uri)) {",
                "-      throw new Error(`Path operation invoked on Atom URI ${uri}`);",
                "-    }",
                "     if (_endsWithArchiveSeparator(uri)) {",
                "diff --git a/modules/nuclide-commons/spec/nuclideUri-spec.js b/modules/nuclide-commons/spec/nuclideUri-spec.js",
                "index c065a3e1c..af87092c2 100644",
                "--- a/modules/nuclide-commons/spec/nuclideUri-spec.js",
                "+++ b/modules/nuclide-commons/spec/nuclideUri-spec.js",
                "@@ -73,3 +73,2 @@ describe('nuclide-uri', () => {",
                "     expect(nuclideUri.join(remoteUri, '..')).toBe('nuclide://fb.com/usr');",
                "-    expect(() => nuclideUri.join(atomUri)).toThrow();",
                "     expect(() => nuclideUri.join(archiveSuffixUri)).toThrow();",
                "@@ -81,3 +80,2 @@ describe('nuclide-uri', () => {",
                "     );",
                "-    expect(() => nuclideUri.archiveJoin(atomUri, 'a.txt')).toThrow();",
                "     expect(() => nuclideUri.archiveJoin(archiveSuffixUri, 'a.txt')).toThrow();",
                "@@ -104,5 +102,2 @@ describe('nuclide-uri', () => {",
                "     it('throws when given an illegal URI', () => {",
                "-      expect(() => nuclideUri.getHostname(atomUri)).toThrow();",
                "-      expect(() => nuclideUri.getPath(atomUri)).toThrow();",
                "-      expect(() => nuclideUri.parse(atomUri)).toThrow();",
                "       expect(() => nuclideUri.getHostname(archiveSuffixUri)).toThrow();",
                "@@ -169,3 +164,2 @@ describe('nuclide-uri', () => {",
                "-    expect(() => nuclideUri.basename(atomUri)).toThrow();",
                "     expect(() => nuclideUri.basename(archiveSuffixUri)).toThrow();",
                "@@ -228,3 +222,2 @@ describe('nuclide-uri', () => {",
                "-    expect(() => nuclideUri.dirname(atomUri)).toThrow();",
                "     expect(() => nuclideUri.dirname(archiveSuffixUri)).toThrow();",
                "@@ -273,3 +266,2 @@ describe('nuclide-uri', () => {",
                "-    expect(() => nuclideUri.extname(atomUri)).toThrow();",
                "     expect(() => nuclideUri.extname(archiveSuffixUri)).toThrow();",
                "@@ -287,3 +279,2 @@ describe('nuclide-uri', () => {",
                "     expect(nuclideUri.getParent('/abc/def!ghi')).toBe('/abc');",
                "-    expect(() => nuclideUri.getParent(atomUri)).toThrow();",
                "     expect(() => nuclideUri.getParent(archiveSuffixUri)).toThrow();",
                "@@ -315,4 +306,2 @@ describe('nuclide-uri', () => {",
                "-    expect(() => nuclideUri.contains(atomUri, '/foo/bar')).toThrow();",
                "-    expect(() => nuclideUri.contains('/foo/bar', atomUri)).toThrow();",
                "     expect(() => nuclideUri.contains(archiveSuffixUri, '/foo/bar')).toThrow();",
                "@@ -359,3 +348,2 @@ describe('nuclide-uri', () => {",
                "     expect(nuclideUri.normalize('/a/b!c/..')).toBe('/a');",
                "-    expect(() => nuclideUri.normalize(atomUri)).toThrow();",
                "     expect(() => nuclideUri.normalize(archiveSuffixUri)).toThrow();",
                "@@ -409,3 +397,2 @@ describe('nuclide-uri', () => {",
                "     expect(nuclideUri.relative('/a/b!c', '/a/b!d')).toBe('../b!d');",
                "-    expect(() => nuclideUri.relative(atomUri, 'foo')).toThrow();",
                "     expect(() => nuclideUri.relative(archiveSuffixUri, 'foo')).toThrow();",
                "@@ -427,3 +414,2 @@ describe('nuclide-uri', () => {",
                "     );",
                "-    expect(() => nuclideUri.nuclideUriToDisplayString(atomUri)).toThrow();",
                "     expect(() =>",
                "@@ -466,3 +452,2 @@ describe('nuclide-uri', () => {",
                "     it('throws on illegal URIs', () => {",
                "-      expect(() => nuclideUri.basename(atomUri)).toThrow();",
                "       expect(() => nuclideUri.basename(archiveSuffixUri)).toThrow();",
                "@@ -507,3 +492,2 @@ describe('nuclide-uri', () => {",
                "     );",
                "-    expect(() => nuclideUri.ensureTrailingSeparator(atomUri)).toThrow();",
                "     expect(() =>",
                "@@ -558,3 +542,2 @@ describe('nuclide-uri', () => {",
                "     expect(nuclideUri.trimTrailingSeparator('\\\\abc\\\\def\\\\')).toBe('\\\\abc\\\\def');",
                "-    expect(() => nuclideUri.trimTrailingSeparator(atomUri)).toThrow();",
                "     expect(() => nuclideUri.trimTrailingSeparator(archiveSuffixUri)).toThrow();",
                "@@ -578,3 +561,2 @@ describe('nuclide-uri', () => {",
                "     expect(nuclideUri.isAbsolute('abc\\\\def')).toBe(false);",
                "-    expect(() => nuclideUri.isAbsolute(atomUri)).toThrow();",
                "     expect(() => nuclideUri.isAbsolute(archiveSuffixUri)).toThrow();",
                "@@ -652,3 +634,2 @@ describe('nuclide-uri', () => {",
                "     expect(nuclideUri.resolve('\\\\abc', '..', 'def')).toBe('\\\\def');",
                "-    expect(() => nuclideUri.resolve(atomUri, '..')).toThrow();",
                "   });",
                "@@ -673,3 +654,2 @@ describe('nuclide-uri', () => {",
                "     it('throws on illegal URIs', () => {",
                "-      expect(() => nuclideUri.expandHomeDir(atomUri)).toThrow();",
                "       expect(() => nuclideUri.expandHomeDir(archiveSuffixUri)).toThrow();",
                "diff --git a/pkg/nuclide-debugger-new/lib/vsp/DebugService.js b/pkg/nuclide-debugger-new/lib/vsp/DebugService.js",
                "index d9317cb28..6191843da 100644",
                "--- a/pkg/nuclide-debugger-new/lib/vsp/DebugService.js",
                "+++ b/pkg/nuclide-debugger-new/lib/vsp/DebugService.js",
                "@@ -246,5 +246,5 @@ export default class DebugService implements IDebugService {",
                "   async _openSourceView(uri: string): Promise<atom$TextEditor> {",
                "-    const query = nullthrows(url.parse(uri, true).query);",
                "-    const sessionId = query.sessionId;",
                "-    const sourceReference = parseInt(query.sourceReference, 10);",
                "+    const query = (url.parse(uri).path || '').split('/');",
                "+    const [, sessionId, sourceReferenceRaw] = query;",
                "+    const sourceReference = parseInt(sourceReferenceRaw, 10);",
                "@@ -275,3 +275,3 @@ export default class DebugService implements IDebugService {",
                "     const editor = atom.workspace.buildTextEditor({",
                "-      buffer: new DebugSourceTextBufffer(content, uri, source.name),",
                "+      buffer: new DebugSourceTextBufffer(content, uri),",
                "       autoHeight: false,",
                "@@ -807,2 +807,12 @@ export default class DebugService implements IDebugService {",
                "     );",
                "+",
                "+    // Clear in memory breakpoints.",
                "+    this._sessionEndDisposables.add(() => {",
                "+      const sourceRefBreakpoints = this._model",
                "+        .getBreakpoints()",
                "+        .filter(bp => bp.uri.startsWith(DEBUG_SOURCES_URI));",
                "+      if (sourceRefBreakpoints.length > 0) {",
                "+        this._model.removeBreakpoints(sourceRefBreakpoints);",
                "+      }",
                "+    });",
                "   }",
                "@@ -1493,8 +1503,6 @@ class DebugSourceTextBufffer extends TextBuffer {",
                "   _uri: string;",
                "-  _name: ?string;",
                "-  constructor(contents: string, uri: string, name: ?string) {",
                "+  constructor(contents: string, uri: string) {",
                "     super(contents);",
                "     this._uri = uri;",
                "-    this._name = name;",
                "   }",
                "@@ -1506,3 +1514,3 @@ class DebugSourceTextBufffer extends TextBuffer {",
                "   getPath() {",
                "-    return this._name;",
                "+    return this._uri;",
                "   }",
                "diff --git a/pkg/nuclide-debugger-new/lib/vsp/DebuggerModel.js b/pkg/nuclide-debugger-new/lib/vsp/DebuggerModel.js",
                "index 17e2b7233..ac00c74f8 100644",
                "--- a/pkg/nuclide-debugger-new/lib/vsp/DebuggerModel.js",
                "+++ b/pkg/nuclide-debugger-new/lib/vsp/DebuggerModel.js",
                "@@ -79,3 +79,2 @@ import {openSourceLocation, onUnexpectedError} from '../utils';",
                " import {distinct} from 'nuclide-commons/collection';",
                "-import url from 'url';",
                "@@ -96,11 +95,5 @@ export class Source implements ISource {",
                "     if (this._raw.sourceReference != null && this._raw.sourceReference > 0) {",
                "-      this.uri = url.format({",
                "-        protocol: 'atom',",
                "-        host: 'debug-sources',",
                "-        slashes: true,",
                "-        query: {",
                "-          sessionId,",
                "-          sourceReference: this._raw.sourceReference,",
                "-        },",
                "-      });",
                "+      this.uri = `${DEBUG_SOURCES_URI}/${sessionId}/${",
                "+        this._raw.sourceReference",
                "+      }/${this._raw.name == null ? UNKNOWN_SOURCE : this._raw.name}`;",
                "     } else {",
                "diff --git a/pkg/nuclide-remote-connection/lib/RemoteDirectory.js b/pkg/nuclide-remote-connection/lib/RemoteDirectory.js",
                "index 202f19401..83a14da30 100644",
                "--- a/pkg/nuclide-remote-connection/lib/RemoteDirectory.js",
                "+++ b/pkg/nuclide-remote-connection/lib/RemoteDirectory.js",
                "@@ -238,3 +238,3 @@ export class RemoteDirectory {",
                "   relativize(uri: string): string {",
                "-    if (!uri) {",
                "+    if (!nuclideUri.isRemote(uri || '')) {",
                "       return uri;",
                "@@ -343,3 +343,3 @@ export class RemoteDirectory {",
                "   contains(pathToCheck: ?string): boolean {",
                "-    if (pathToCheck == null) {",
                "+    if (!nuclideUri.isRemote(pathToCheck || '')) {",
                "       return false;",
                "@@ -347,3 +347,3 @@ export class RemoteDirectory {",
                "-    return nuclideUri.contains(this.getPath(), pathToCheck);",
                "+    return nuclideUri.contains(this.getPath(), pathToCheck || '');",
                "   }",
                "diff --git a/pkg/nuclide-remote-connection/lib/ServerConnection.js b/pkg/nuclide-remote-connection/lib/ServerConnection.js",
                "index 3b7135905..cc1f96a16 100644",
                "--- a/pkg/nuclide-remote-connection/lib/ServerConnection.js",
                "+++ b/pkg/nuclide-remote-connection/lib/ServerConnection.js",
                "@@ -431,7 +431,6 @@ export class ServerConnection {",
                "   static getForUri(uri: NuclideUri): ?ServerConnection {",
                "-    const {hostname} = nuclideUri.parse(uri);",
                "-    if (hostname == null) {",
                "+    if (!nuclideUri.isRemote(uri)) {",
                "       return null;",
                "     }",
                "-    return ServerConnection.getByHostname(hostname);",
                "+    return ServerConnection.getByHostname(nuclideUri.getHostname(uri));",
                "   }"
            ],
            "changed_files": [
                "modules/nuclide-commons/nuclideUri.js",
                "modules/nuclide-commons/spec/nuclideUri-spec.js",
                "pkg/nuclide-debugger-new/lib/vsp/DebugService.js",
                "pkg/nuclide-debugger-new/lib/vsp/DebuggerModel.js",
                "pkg/nuclide-remote-connection/lib/RemoteDirectory.js",
                "pkg/nuclide-remote-connection/lib/ServerConnection.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: URL",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: editor",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "d7d7c7e2c95d242bf22dd6e91fbaf723deb8790c",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520551619,
            "hunks": 31,
            "message": "Fix breakpoint marker calibration bugs Summary: Fixes a few issues with breakpoint display in the gutter, and in the breakpoints pane. Fixing these in the new debugger UI only, not backporting any fixes to the old debugger UX. 1. If an endLine is specified for a breakpoint, the gutter marker should be on the end line. 2. The breakpoint list and breakpoint edit dialog should show the matching line to the gutter marker (end line if available, line otherwise) 3. Stop sorting breakpoints in the breakpoints pane by resolved vs not - this is causing them to jump around when I check and uncheck the enabled box because disabled breakpoints are always treated as unresolved (since we disable in VSP by uninstalling the breakpoint from the backend) 4. Fixed bug where if you uncheck a breakpoint to disable it in the breakpoints pane, the checkbox becomes disabled and you can't re-check it to re-enable it! 5. Fixed bug where updating a breakpoint from an event sometimes loses the endLine if the backend doesn't send it again 6. Switch operations to add/remove/modify breakpoints from the UX to use the breakpoint ID when possible, instead of just file+line so we always get the correct breakpoint. Reviewed By: mostafaeweda Differential Revision: D7187295 fbshipit-source-id: 3006e88781c25f341a854c1bf511f4b5957664bc",
            "diff": [
                "diff --git a/pkg/nuclide-debugger-new/lib/BreakpointDisplayController.js b/pkg/nuclide-debugger-new/lib/BreakpointDisplayController.js",
                "index b99e7ca15..4f45594de 100644",
                "--- a/pkg/nuclide-debugger-new/lib/BreakpointDisplayController.js",
                "+++ b/pkg/nuclide-debugger-new/lib/BreakpointDisplayController.js",
                "@@ -219,2 +219,10 @@ export default class BreakpointDisplayController {",
                "+  _getLineForBp(bp: IBreakpoint): number {",
                "+    // Zero-based breakpoints line map (to match UI markers).",
                "+    return (",
                "+      (bp.endLine != null && !Number.isNaN(bp.endLine) ? bp.endLine : bp.line) -",
                "+      1",
                "+    );",
                "+  }",
                "+",
                "   /**",
                "@@ -236,4 +244,5 @@ export default class BreakpointDisplayController {",
                "     const breakpoints = allBreakpoints.filter(bp => bp.uri === path);",
                "-    // Zero-based breakpoints line map (to match UI markers).",
                "-    const lineMap = new Map(breakpoints.map(bp => [bp.line - 1, bp]));",
                "+    const lineMap = new Map(",
                "+      breakpoints.map(bp => [this._getLineForBp(bp), bp]),",
                "+    );",
                "@@ -279,5 +288,3 @@ export default class BreakpointDisplayController {",
                "         false, // isShadow",
                "-        breakpoint.enabled,",
                "-        breakpoint.verified,",
                "-        breakpoint.condition,",
                "+        breakpoint,",
                "       );",
                "@@ -454,5 +461,3 @@ export default class BreakpointDisplayController {",
                "         true, // isShadow",
                "-        true, // enabled",
                "-        false, // resolved",
                "-        null, // condition",
                "+        null,",
                "       );",
                "@@ -464,6 +469,7 @@ export default class BreakpointDisplayController {",
                "     isShadow: boolean,",
                "-    enabled: boolean,",
                "-    resolved: boolean,",
                "-    condition: ?string,",
                "+    breakpoint: ?IBreakpoint,",
                "   ): atom$Marker {",
                "+    const enabled = breakpoint != null ? breakpoint.enabled : true;",
                "+    const resolved = breakpoint != null ? breakpoint.verified : false;",
                "+    const condition = breakpoint != null ? breakpoint.condition : null;",
                "     const marker = this._editor.markBufferPosition([line, 0], {",
                "@@ -478,2 +484,7 @@ export default class BreakpointDisplayController {",
                "     elem.dataset.line = line.toString();",
                "+",
                "+    if (breakpoint != null) {",
                "+      elem.dataset.bpId = breakpoint.getId();",
                "+    }",
                "+",
                "     elem.className = classnames({",
                "diff --git a/pkg/nuclide-debugger-new/lib/main.js b/pkg/nuclide-debugger-new/lib/main.js",
                "index 8272bf9e2..998fff877 100644",
                "--- a/pkg/nuclide-debugger-new/lib/main.js",
                "+++ b/pkg/nuclide-debugger-new/lib/main.js",
                "@@ -22,3 +22,3 @@ import type {NuclideUri} from 'nuclide-commons/nuclideUri';",
                " import type {AtomAutocompleteProvider} from '../../nuclide-autocomplete/lib/types';",
                "-import type {SerializedState} from './types';",
                "+import type {SerializedState, IBreakpoint} from './types';",
                "@@ -28,3 +28,3 @@ import BreakpointConfigComponent from './ui/BreakpointConfigComponent';",
                " import createPackage from 'nuclide-commons-atom/createPackage';",
                "-import {getBreakpointEventLocation, getLineForEvent} from './utils';",
                "+import {getLineForEvent} from './utils';",
                " import UniversalDisposable from 'nuclide-commons/UniversalDisposable';",
                "@@ -242,12 +242,4 @@ class Activation {",
                "             shouldDisplay: event => {",
                "-              const location = getBreakpointEventLocation(",
                "-                (event.target: HTMLElement),",
                "-              );",
                "-              if (location != null) {",
                "-                const bp = this._service",
                "-                  .getModel()",
                "-                  .getBreakpointAtLine(location.path, location.line);",
                "-                return bp != null && this._supportsConditionalBreakpoints();",
                "-              }",
                "-              return false;",
                "+              const bp = this._getBreakpointFromEvent(event);",
                "+              return bp != null && this._supportsConditionalBreakpoints();",
                "             },",
                "@@ -543,7 +535,21 @@ class Activation {",
                "-  _getLocationOfEvent(event: any): ?{path: string, line: number} {",
                "-    return (",
                "-      getBreakpointEventLocation((event.target: HTMLElement)) ||",
                "-      this._executeWithEditorPath(event, (path, line) => ({path, line}))",
                "-    );",
                "+  _getBreakpointFromEvent(event: any): ?IBreakpoint {",
                "+    const target: HTMLElement = event.target;",
                "+    let bp = null;",
                "+    if (target != null && target.dataset != null) {",
                "+      if (target.dataset.bpid != null) {",
                "+        const bpId = target.dataset.bpid;",
                "+        bp = this._service.getModel().getBreakpointById(bpId);",
                "+      }",
                "+",
                "+      if (bp == null) {",
                "+        const path = target.dataset.path;",
                "+        const line = parseInt(target.dataset.line, 10);",
                "+        if (path != null && line != null) {",
                "+          bp = this._service.getModel().getBreakpointAtLine(path, line);",
                "+        }",
                "+      }",
                "+    }",
                "+",
                "+    return bp;",
                "   }",
                "@@ -551,21 +557,16 @@ class Activation {",
                "   _configureBreakpoint(event: any) {",
                "-    const location = this._getLocationOfEvent(event);",
                "-    if (location != null) {",
                "-      const bp = this._service",
                "-        .getModel()",
                "-        .getBreakpointAtLine(location.path, location.line);",
                "-      if (bp != null && this._supportsConditionalBreakpoints()) {",
                "-        // Open the configuration dialog.",
                "-        const container = new ReactMountRootElement();",
                "-        ReactDOM.render(",
                "-          <BreakpointConfigComponent",
                "-            breakpoint={bp}",
                "-            service={this._service}",
                "-            onDismiss={() => {",
                "-              ReactDOM.unmountComponentAtNode(container);",
                "-            }}",
                "-          />,",
                "-          container,",
                "-        );",
                "-      }",
                "+    const bp = this._getBreakpointFromEvent(event);",
                "+    if (bp != null && this._supportsConditionalBreakpoints()) {",
                "+      // Open the configuration dialog.",
                "+      const container = new ReactMountRootElement();",
                "+      ReactDOM.render(",
                "+        <BreakpointConfigComponent",
                "+          breakpoint={bp}",
                "+          service={this._service}",
                "+          onDismiss={() => {",
                "+            ReactDOM.unmountComponentAtNode(container);",
                "+          }}",
                "+        />,",
                "+        container,",
                "+      );",
                "     }",
                "@@ -587,9 +588,3 @@ class Activation {",
                "   _deleteBreakpoint(event: any): void {",
                "-    const location = this._getLocationOfEvent(event);",
                "-    if (location == null) {",
                "-      return;",
                "-    }",
                "-    const breakpoint = this._service",
                "-      .getModel()",
                "-      .getBreakpointAtLine(location.path, location.line);",
                "+    const breakpoint = this._getBreakpointFromEvent(event);",
                "     if (breakpoint != null) {",
                "diff --git a/pkg/nuclide-debugger-new/lib/types.js b/pkg/nuclide-debugger-new/lib/types.js",
                "index c516590d2..2107dd332 100644",
                "--- a/pkg/nuclide-debugger-new/lib/types.js",
                "+++ b/pkg/nuclide-debugger-new/lib/types.js",
                "@@ -299,2 +299,4 @@ export interface IModel extends ITreeElement {",
                "   getBreakpointAtLine(uri: string, line: number): ?IBreakpoint;",
                "+  getBreakpointById(id: string): ?IBreakpoint;",
                "+",
                "   areBreakpointsActivated(): boolean;",
                "diff --git a/pkg/nuclide-debugger-new/lib/ui/BreakpointConfigComponent.js b/pkg/nuclide-debugger-new/lib/ui/BreakpointConfigComponent.js",
                "index 7a25d9598..8bb7c5cc4 100644",
                "--- a/pkg/nuclide-debugger-new/lib/ui/BreakpointConfigComponent.js",
                "+++ b/pkg/nuclide-debugger-new/lib/ui/BreakpointConfigComponent.js",
                "@@ -11,3 +11,3 @@",
                "-import type {IBreakpoint, IDebugService} from '../types';",
                "+import type {IBreakpoint, IRawBreakpoint, IDebugService} from '../types';",
                "@@ -99,11 +99,15 @@ export default class BreakpointConfigComponent extends React.Component<",
                "     }",
                "+",
                "     await service.removeBreakpoints(breakpoint.getId());",
                "-    await service.addBreakpoints(breakpoint.uri, [",
                "-      {",
                "-        line: breakpoint.line,",
                "-        column: breakpoint.column,",
                "-        enabled: breakpoint.enabled,",
                "-        condition,",
                "-      },",
                "-    ]);",
                "+",
                "+    const bp: IRawBreakpoint = {",
                "+      line: breakpoint.line,",
                "+      column: breakpoint.column,",
                "+      enabled: breakpoint.enabled,",
                "+    };",
                "+    if (condition !== '') {",
                "+      bp.condition = condition;",
                "+    }",
                "+",
                "+    await service.addBreakpoints(breakpoint.uri, [bp]);",
                "     track(AnalyticsEvents.DEBUGGER_BREAKPOINT_UPDATE_CONDITION, {",
                "@@ -126,3 +130,5 @@ export default class BreakpointConfigComponent extends React.Component<",
                "               :",
                "-              {this.props.breakpoint.line}",
                "+              {this.props.breakpoint.endLine != null",
                "+                ? this.props.breakpoint.endLine",
                "+                : this.props.breakpoint.line}",
                "             </label>",
                "diff --git a/pkg/nuclide-debugger-new/lib/ui/BreakpointListComponent.js b/pkg/nuclide-debugger-new/lib/ui/BreakpointListComponent.js",
                "index b1aa98e68..2d4396305 100644",
                "--- a/pkg/nuclide-debugger-new/lib/ui/BreakpointListComponent.js",
                "+++ b/pkg/nuclide-debugger-new/lib/ui/BreakpointListComponent.js",
                "@@ -103,19 +103,25 @@ export default class BreakpointListComponent extends React.Component<",
                "     const items = breakpoints",
                "-      // Show resolved breakpoints at the top of the list, then order by filename & line number.",
                "-      .sort(",
                "-        (breakpointA, breakpointB) =>",
                "-          100 * (Number(breakpointB.verified) - Number(breakpointA.verified)) +",
                "-          10 *",
                "-            nuclideUri",
                "-              .basename(breakpointA.uri)",
                "-              .localeCompare(nuclideUri.basename(breakpointB.uri)) +",
                "-          Math.sign(breakpointA.line - breakpointB.line),",
                "-      )",
                "+      .sort((breakpointA, breakpointB) => {",
                "+        const fileA = nuclideUri.basename(breakpointA.uri);",
                "+        const fileB = nuclideUri.basename(breakpointB.uri);",
                "+        if (fileA !== fileB) {",
                "+          return fileA.localeCompare(fileB);",
                "+        }",
                "+",
                "+        const lineA =",
                "+          breakpointA.endLine != null ? breakpointA.endLine : breakpointA.line;",
                "+        const lineB =",
                "+          breakpointB.endLine != null ? breakpointB.endLine : breakpointB.line;",
                "+        return lineA - lineB;",
                "+      })",
                "       .map((breakpoint, i) => {",
                "         const basename = nuclideUri.basename(breakpoint.uri);",
                "-        const {line, enabled, verified: resolved, uri: path} = breakpoint;",
                "-        const label = `${basename}:${line}`;",
                "+        const {line, endLine, enabled, verified, uri: path} = breakpoint;",
                "+        const dataLine =",
                "+          endLine != null && !Number.isNaN(endLine) ? endLine : line;",
                "+        const bpId = breakpoint.getId();",
                "+        const label = `${basename}:${dataLine}`;",
                "         const title = !enabled",
                "           ? 'Disabled breakpoint'",
                "-          : !resolved",
                "+          : !verified",
                "             ? 'Unresolved Breakpoint'",
                "@@ -130,2 +136,3 @@ export default class BreakpointListComponent extends React.Component<",
                "               data-line={line}",
                "+              data-bpid={bpId}",
                "               onClick={event => {",
                "@@ -152,4 +159,2 @@ export default class BreakpointListComponent extends React.Component<",
                "                 checked={enabled}",
                "-                indeterminate={!resolved}",
                "-                disabled={!resolved}",
                "                 onChange={this._handleBreakpointEnabledChange.bind(",
                "@@ -161,3 +166,3 @@ export default class BreakpointListComponent extends React.Component<",
                "                 className={classnames(",
                "-                  resolved ? '' : 'nuclide-debugger-breakpoint-unresolved',",
                "+                  verified ? '' : 'nuclide-debugger-breakpoint-unresolved',",
                "                   'nuclide-debugger-breakpoint-checkbox',",
                "@@ -165,3 +170,7 @@ export default class BreakpointListComponent extends React.Component<",
                "               />",
                "-              <span title={title} data-path={path} data-line={line}>",
                "+              <span",
                "+                title={title}",
                "+                data-path={path}",
                "+                data-bpid={bpId}",
                "+                data-line={line}>",
                "                 <div className=\"nuclide-debugger-breakpoint-condition-controls\">",
                "@@ -171,2 +180,3 @@ export default class BreakpointListComponent extends React.Component<",
                "                     data-path={path}",
                "+                    data-bpid={bpId}",
                "                     data-line={line}",
                "@@ -184,2 +194,3 @@ export default class BreakpointListComponent extends React.Component<",
                "                     data-path={path}",
                "+                    data-bpid={bpId}",
                "                     data-line={line}",
                "@@ -209,2 +220,3 @@ export default class BreakpointListComponent extends React.Component<",
                "             data-path={path}",
                "+            data-bpid={bpId}",
                "             data-line={line}",
                "diff --git a/pkg/nuclide-debugger-new/lib/utils.js b/pkg/nuclide-debugger-new/lib/utils.js",
                "index 39393a88d..7fe24f610 100644",
                "--- a/pkg/nuclide-debugger-new/lib/utils.js",
                "+++ b/pkg/nuclide-debugger-new/lib/utils.js",
                "@@ -32,16 +32,2 @@ function getGutterLineNumber(target: HTMLElement): ?number {",
                "-export function getBreakpointEventLocation(",
                "-  target: HTMLElement,",
                "-): ?{path: string, line: number} {",
                "-  if (",
                "-    target != null &&",
                "-    target.dataset != null &&",
                "-    target.dataset.path != null &&",
                "-    target.dataset.line != null",
                "-  ) {",
                "-    return {path: target.dataset.path, line: parseInt(target.dataset.line, 10)};",
                "-  }",
                "-  return null;",
                "-}",
                "-",
                " const SCREEN_ROW_ATTRIBUTE_NAME = 'data-screen-row';",
                "diff --git a/pkg/nuclide-debugger-new/lib/vsp/DebuggerModel.js b/pkg/nuclide-debugger-new/lib/vsp/DebuggerModel.js",
                "index 4e1823d36..2aa77658f 100644",
                "--- a/pkg/nuclide-debugger-new/lib/vsp/DebuggerModel.js",
                "+++ b/pkg/nuclide-debugger-new/lib/vsp/DebuggerModel.js",
                "@@ -1155,2 +1155,6 @@ export class Model implements IModel {",
                "+  getBreakpointById(id: string): ?IBreakpoint {",
                "+    return this._breakpoints.find(bp => bp.getId() === id);",
                "+  }",
                "+",
                "   getFunctionBreakpoints(): IFunctionBreakpoint[] {",
                "@@ -1228,3 +1232,3 @@ export class Model implements IModel {",
                "         bp.line = bpData.line != null ? bpData.line : bp.line;",
                "-        bp.endLine = bpData.endLine;",
                "+        bp.endLine = bpData.endLine != null ? bpData.endLine : bp.endLine;",
                "         bp.column = bpData.column != null ? bpData.column : bp.column;"
            ],
            "changed_files": [
                "pkg/nuclide-debugger-new/lib/BreakpointDisplayController.js",
                "pkg/nuclide-debugger-new/lib/main.js",
                "pkg/nuclide-debugger-new/lib/types.js",
                "pkg/nuclide-debugger-new/lib/ui/BreakpointConfigComponent.js",
                "pkg/nuclide-debugger-new/lib/ui/BreakpointListComponent.js",
                "pkg/nuclide-debugger-new/lib/utils.js",
                "pkg/nuclide-debugger-new/lib/vsp/DebuggerModel.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: HTML",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: issue",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "173a718d01a66f66cf1f45c13737f09fb2cb2c48",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520958793,
            "hunks": 3,
            "message": "Fix fuzzy filename provider with remote/local paths Summary: It seems that the RPC framework validates that `NuclideUri`s must be remote if the service is remote. Since we're sending the `NuclideUri` of the open filename to the fuzzy filename service, we must first validate that it's contained in the path. Reviewed By: pelmers Differential Revision: D7253940 fbshipit-source-id: d5e71fb3d9899d4b9840ebb78db78479686fd233",
            "diff": [
                "diff --git a/pkg/nuclide-fuzzy-filename-provider/lib/FuzzyFileNameProvider.js b/pkg/nuclide-fuzzy-filename-provider/lib/FuzzyFileNameProvider.js",
                "index 7cc86ec6e..f5edad123 100644",
                "--- a/pkg/nuclide-fuzzy-filename-provider/lib/FuzzyFileNameProvider.js",
                "+++ b/pkg/nuclide-fuzzy-filename-provider/lib/FuzzyFileNameProvider.js",
                "@@ -54,3 +54,3 @@ export default ({",
                "       rootDirectory: directoryPath,",
                "-      queryRoot: getQueryRoot(),",
                "+      queryRoot: getQueryRoot(directoryPath),",
                "       queryString: fileName,",
                "@@ -85,3 +85,3 @@ export default ({",
                " // TODO(T26559382) Extract to util function",
                "-function getQueryRoot(): string | void {",
                "+function getQueryRoot(directoryPath: string): string | void {",
                "   if (!isGkEnabled('nuclide_fuzzy_file_search_with_root_path')) {",
                "@@ -92,3 +92,5 @@ function getQueryRoot(): string | void {",
                "-  return uri != null ? nuclideUri.dirname(uri) : undefined;",
                "+  return uri != null && nuclideUri.contains(directoryPath, uri)",
                "+    ? nuclideUri.dirname(uri)",
                "+    : undefined;",
                " }"
            ],
            "changed_files": [
                "pkg/nuclide-fuzzy-filename-provider/lib/FuzzyFileNameProvider.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "e3dc4923d493d6d7490c01c4a9be337560097545"
                ]
            ],
            "tags": [
                "v0.288.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: provide",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: provide",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2cbcf623c86b4adb872ad92eaf0c70811b8dd3aa",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1522045423,
            "hunks": 1,
            "message": "Make OCaml code lenses fill in from the top down rather than from the bottom up Summary: Make OCaml code lenses fill in from the top down rather than from the bottom up Reviewed By: ljw1004 Differential Revision: D7393177 fbshipit-source-id: 6eeb016f84286dc9992c8405b0a3c5ea42322956",
            "diff": [
                "diff --git a/pkg/nuclide-ocaml/lib/CodeLensListener.js b/pkg/nuclide-ocaml/lib/CodeLensListener.js",
                "index 7d8cf943d..44afc209d 100644",
                "--- a/pkg/nuclide-ocaml/lib/CodeLensListener.js",
                "+++ b/pkg/nuclide-ocaml/lib/CodeLensListener.js",
                "@@ -57,3 +57,7 @@ async function getCodeLens(",
                "     if (codeLens != null) {",
                "-      return codeLens;",
                "+      // sort code lenses based on their row numbers from top to bottom, so",
                "+      // later their resolution can start in the same order.",
                "+      return codeLens.sort((lens1, lens2) => {",
                "+        return lens1.range.start.row - lens2.range.start.row;",
                "+      });",
                "     }"
            ],
            "changed_files": [
                "pkg/nuclide-ocaml/lib/CodeLensListener.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: code",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "ce5d5435034ed5a9d80d9e139641603b106ac88b",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521138246,
            "hunks": 12,
            "message": "Native attach: put process collection behind RPC Summary: As above Reviewed By: ebluestein Differential Revision: D7281839 fbshipit-source-id: c2bf1bea4ffabaf58c7bc83dee766c4dd4dc2922",
            "diff": [
                "diff --git a/pkg/nuclide-debugger-native-rpc/lib/NativeDebuggerServiceImplementation.js b/pkg/nuclide-debugger-native-rpc/lib/NativeDebuggerServiceImplementation.js",
                "index 73bc9b140..8cf75ac53 100644",
                "--- a/pkg/nuclide-debugger-native-rpc/lib/NativeDebuggerServiceImplementation.js",
                "+++ b/pkg/nuclide-debugger-native-rpc/lib/NativeDebuggerServiceImplementation.js",
                "@@ -20,2 +20,3 @@ import type {",
                " import type {Socket} from 'net';",
                "+import type {ProcessInfo} from 'nuclide-commons/process';",
                "@@ -29,2 +30,3 @@ import {runCommand} from 'nuclide-commons/process';",
                " import {Observable} from 'rxjs';",
                "+import {psTree} from 'nuclide-commons/process';",
                " import {track} from '../../nuclide-analytics';",
                "@@ -127,2 +129,6 @@ export async function getAttachTargetInfoList(",
                "+export async function getProcessTree(): Promise<Array<ProcessInfo>> {",
                "+  return psTree();",
                "+}",
                "+",
                " async function _getDefaultLLDBConfig(): Promise<{",
                "diff --git a/pkg/nuclide-debugger-native-rpc/lib/NativeDebuggerServiceInterface.js b/pkg/nuclide-debugger-native-rpc/lib/NativeDebuggerServiceInterface.js",
                "index 6980bc690..7ce7fe48d 100644",
                "--- a/pkg/nuclide-debugger-native-rpc/lib/NativeDebuggerServiceInterface.js",
                "+++ b/pkg/nuclide-debugger-native-rpc/lib/NativeDebuggerServiceInterface.js",
                "@@ -14,2 +14,3 @@ import type {ConnectableObservable} from 'rxjs';",
                " import type {NuclideUri} from 'nuclide-commons/nuclideUri';",
                "+import type {ProcessInfo} from 'nuclide-commons/process';",
                "@@ -61,2 +62,6 @@ export async function getAttachTargetInfoList(",
                "+export async function getProcessTree(): Promise<Array<ProcessInfo>> {",
                "+  throw new Error('Not implemented');",
                "+}",
                "+",
                " export class NativeDebuggerService {",
                "diff --git a/pkg/nuclide-debugger-vsp/lib/NativeAttachUiComponent.js b/pkg/nuclide-debugger-vsp/lib/NativeAttachUiComponent.js",
                "index c0172ef80..3f6cdb776 100644",
                "--- a/pkg/nuclide-debugger-vsp/lib/NativeAttachUiComponent.js",
                "+++ b/pkg/nuclide-debugger-vsp/lib/NativeAttachUiComponent.js",
                "@@ -16,2 +16,3 @@ import type {VsAdapterType} from 'nuclide-debugger-common';",
                " import type {Option} from '../../nuclide-ui/Dropdown';",
                "+import typeof * as NativeDebuggerService from '../../nuclide-debugger-native-rpc/lib/NativeDebuggerServiceInterface';",
                "@@ -27,4 +28,5 @@ import UniversalDisposable from 'nuclide-commons/UniversalDisposable';",
                " import {getDebuggerService} from '../../commons-atom/debugger';",
                "+import {getServiceByNuclideUri} from '../../nuclide-remote-connection';",
                " import {getNativeVSPAttachProcessInfo} from './utils';",
                "-import {psTree} from 'nuclide-commons/process';",
                "+import invariant from 'assert';",
                " import {Observable} from 'rxjs';",
                "@@ -128,2 +130,3 @@ export default class NativeAttachUiComponent extends React.Component<",
                "   _disposables: UniversalDisposable;",
                "+  _nativeDebuggerService: NativeDebuggerService;",
                "@@ -187,2 +190,4 @@ export default class NativeAttachUiComponent extends React.Component<",
                "+    this._nativeDebuggerService = this._getRpcService();",
                "+",
                "     this._disposables.add(",
                "@@ -190,3 +195,3 @@ export default class NativeAttachUiComponent extends React.Component<",
                "         .startWith(0)",
                "-        .flatMap(_ => psTree())",
                "+        .flatMap(_ => this._nativeDebuggerService.getProcessTree())",
                "         .subscribe(this._updateList),",
                "@@ -343,2 +348,11 @@ export default class NativeAttachUiComponent extends React.Component<",
                "   };",
                "+",
                "+  _getRpcService(): NativeDebuggerService {",
                "+    const service: ?NativeDebuggerService = getServiceByNuclideUri(",
                "+      'NativeDebuggerService',",
                "+      this.props.targetUri,",
                "+    );",
                "+    invariant(service);",
                "+    return service;",
                "+  }",
                " }"
            ],
            "changed_files": [
                "pkg/nuclide-debugger-native-rpc/lib/NativeDebuggerServiceImplementation.js",
                "pkg/nuclide-debugger-native-rpc/lib/NativeDebuggerServiceInterface.js",
                "pkg/nuclide-debugger-vsp/lib/NativeAttachUiComponent.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: attach",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: attach",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "8c48d6bc9dd63fe21a9b0e940c14f64cc59b737e",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521656074,
            "hunks": 14,
            "message": "Surface HHVM crashes to user Reviewed By: mostafaeweda Differential Revision: D7238914 fbshipit-source-id: 6413d47197a1b621e79d6b6be5ab5a9651c6ec1d",
            "diff": [
                "diff --git a/modules/nuclide-debugger-common/VsDebugSession.js b/modules/nuclide-debugger-common/VsDebugSession.js",
                "index 98e68230c..e9ed45ec9 100644",
                "--- a/modules/nuclide-debugger-common/VsDebugSession.js",
                "+++ b/modules/nuclide-debugger-common/VsDebugSession.js",
                "@@ -36,3 +36,3 @@ function raiseAdapterExitedEvent(exitCode: number): AdapterExitedEvent {",
                "     event: 'adapter-exited',",
                "-    body: {exitCode: 0},",
                "+    body: {exitCode},",
                "   };",
                "diff --git a/pkg/nuclide-debugger-hhvm-rpc/lib/hhvmDebugger.js b/pkg/nuclide-debugger-hhvm-rpc/lib/hhvmDebugger.js",
                "index b1d36c8be..3b079085c 100644",
                "--- a/pkg/nuclide-debugger-hhvm-rpc/lib/hhvmDebugger.js",
                "+++ b/pkg/nuclide-debugger-hhvm-rpc/lib/hhvmDebugger.js",
                "@@ -89,3 +89,7 @@ class HHVMDebuggerWrapper {",
                "         socket.on('close', () => {",
                "-          process.exit(0);",
                "+          this._writeOutputWithHeader({",
                "+            seq: ++this._sequenceNumber,",
                "+            type: 'event',",
                "+            event: 'hhvmConnectionDied',",
                "+          });",
                "         });",
                "diff --git a/pkg/nuclide-debugger-hhvm-rpc/lib/main.js b/pkg/nuclide-debugger-hhvm-rpc/lib/main.js",
                "index 465a9b96a..e35497d9d 100644",
                "--- a/pkg/nuclide-debugger-hhvm-rpc/lib/main.js",
                "+++ b/pkg/nuclide-debugger-hhvm-rpc/lib/main.js",
                "@@ -185,2 +185,11 @@ async function _rotateHHVMLogs(path: string): Promise<void> {",
                "+export async function getHhvmStackTraces(): Promise<Array<string>> {",
                "+  try {",
                "+    // $FlowFB",
                "+    const fbConfig = require('./fbConfig');",
                "+    return fbConfig.getHhvmStackTraces();",
                "+  } catch (_) {}",
                "+  return [];",
                "+}",
                "+",
                " export async function createLogFilePaste(): Promise<string> {",
                "diff --git a/pkg/nuclide-debugger-vsp/lib/HhvmAttachUiComponent.js b/pkg/nuclide-debugger-vsp/lib/HhvmAttachUiComponent.js",
                "index 28c3baa03..93d72f111 100644",
                "--- a/pkg/nuclide-debugger-vsp/lib/HhvmAttachUiComponent.js",
                "+++ b/pkg/nuclide-debugger-vsp/lib/HhvmAttachUiComponent.js",
                "@@ -40,2 +40,3 @@ type PropsType = {",
                "     debugPort: ?number,",
                "+    serverAttach: boolean,",
                "   ) => Promise<VspProcessInfo>,",
                "@@ -335,2 +336,3 @@ export class AttachUiComponent extends React.Component<PropsType, StateType> {",
                "       this.state.attachPort,",
                "+      this.state.attachType === 'webserver',",
                "     );",
                "@@ -338,3 +340,3 @@ export class AttachUiComponent extends React.Component<PropsType, StateType> {",
                "     const debuggerService = await getDebuggerService();",
                "-    debuggerService.startDebugging(processInfo);",
                "+    await debuggerService.startDebugging(processInfo);",
                "diff --git a/pkg/nuclide-debugger-vsp/lib/HhvmLaunchAttachProvider.js b/pkg/nuclide-debugger-vsp/lib/HhvmLaunchAttachProvider.js",
                "index 3fe9277f7..5c0972696 100644",
                "--- a/pkg/nuclide-debugger-vsp/lib/HhvmLaunchAttachProvider.js",
                "+++ b/pkg/nuclide-debugger-vsp/lib/HhvmLaunchAttachProvider.js",
                "@@ -383,2 +383,3 @@ export async function getAttachProcessInfo(",
                "   attachPort: ?number,",
                "+  serverAttach: boolean,",
                " ): Promise<VspProcessInfo> {",
                "@@ -422,4 +423,15 @@ export async function getAttachProcessInfo(",
                "     services.startSlog();",
                "-    processInfo.setCustomDisposable(",
                "-      new UniversalDisposable(() => services.stopSlog()),",
                "+",
                "+    if (serverAttach) {",
                "+      services.startCrashHandler(targetUri, processInfo, getAttachProcessInfo);",
                "+    }",
                "+",
                "+    processInfo.addCustomDisposable(",
                "+      new UniversalDisposable(() => {",
                "+        services.stopSlog();",
                "+",
                "+        if (serverAttach) {",
                "+          services.stopCrashHandler(processInfo);",
                "+        }",
                "+      }),",
                "     );",
                "diff --git a/pkg/nuclide-debugger-vsp/lib/VspProcessInfo.js b/pkg/nuclide-debugger-vsp/lib/VspProcessInfo.js",
                "index fed98f339..419480322 100644",
                "--- a/pkg/nuclide-debugger-vsp/lib/VspProcessInfo.js",
                "+++ b/pkg/nuclide-debugger-vsp/lib/VspProcessInfo.js",
                "@@ -68,3 +68,3 @@ export default class VspProcessInfo extends DebuggerProcessInfo {",
                "   _preprocessors: ?MessagePreprocessors;",
                "-  _customDisposable: ?IDisposable;",
                "+  _disposables: UniversalDisposable;",
                "   _customCapabilities: CustomDebuggerCapabilities;",
                "@@ -91,3 +91,3 @@ export default class VspProcessInfo extends DebuggerProcessInfo {",
                "     this._rpcService = null;",
                "-    this._customDisposable = null;",
                "+    this._disposables = new UniversalDisposable();",
                "   }",
                "@@ -197,4 +197,4 @@ export default class VspProcessInfo extends DebuggerProcessInfo {",
                "-  setCustomDisposable(disposable: IDisposable): void {",
                "-    this._customDisposable = disposable;",
                "+  addCustomDisposable(disposable: IDisposable): void {",
                "+    this._disposables.add(disposable);",
                "   }",
                "@@ -206,6 +206,3 @@ export default class VspProcessInfo extends DebuggerProcessInfo {",
                "     }",
                "-    if (this._customDisposable != null) {",
                "-      this._customDisposable.dispose();",
                "-      this._customDisposable = null;",
                "-    }",
                "+    this._disposables.dispose();",
                "     this._vspInstance = null;",
                "diff --git a/pkg/nuclide-hhvm/lib/HhvmDebug.js b/pkg/nuclide-hhvm/lib/HhvmDebug.js",
                "index 0ce91774b..c082e7334 100644",
                "--- a/pkg/nuclide-hhvm/lib/HhvmDebug.js",
                "+++ b/pkg/nuclide-hhvm/lib/HhvmDebug.js",
                "@@ -55,3 +55,7 @@ export async function debug(",
                "     } else {",
                "-      processInfo = await getAttachProcessInfo(activeProjectRoot, null);",
                "+      processInfo = await getAttachProcessInfo(",
                "+        activeProjectRoot,",
                "+        null /* attachPort */,",
                "+        true /* serverAttach */,",
                "+      );",
                "     }",
                "diff --git a/pkg/nuclide-hhvm/lib/main.js b/pkg/nuclide-hhvm/lib/main.js",
                "index d503a37b9..eb71abccf 100644",
                "--- a/pkg/nuclide-hhvm/lib/main.js",
                "+++ b/pkg/nuclide-hhvm/lib/main.js",
                "@@ -184,3 +184,7 @@ class Activation {",
                "       await debuggerService.startDebugging(",
                "-        await getAttachProcessInfo(hackRootUri),",
                "+        await getAttachProcessInfo(",
                "+          hackRootUri,",
                "+          null /* attachPort */,",
                "+          true /* serverAttach */,",
                "+        ),",
                "       );"
            ],
            "changed_files": [
                "modules/nuclide-debugger-common/VsDebugSession.js",
                "pkg/nuclide-debugger-hhvm-rpc/lib/hhvmDebugger.js",
                "pkg/nuclide-debugger-hhvm-rpc/lib/main.js",
                "pkg/nuclide-debugger-vsp/lib/HhvmAttachUiComponent.js",
                "pkg/nuclide-debugger-vsp/lib/HhvmLaunchAttachProvider.js",
                "pkg/nuclide-debugger-vsp/lib/VspProcessInfo.js",
                "pkg/nuclide-hhvm/lib/HhvmDebug.js",
                "pkg/nuclide-hhvm/lib/main.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: hhvm",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: provide, hhvm, attach",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "65048b6240938c41400c245302c9298c8cd82058",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521155512,
            "hunks": 2,
            "message": "Fix uncaught exceptions from unicode datatip handler Summary: Atom's regex parser has a bug. The stupid simple workaround is to wrap the `\\\\u` into `\\\\[u]`. cc hchau-fb, another regex issue lol Reviewed By: hchau-fb Differential Revision: D7296568 fbshipit-source-id: 32efbd330e9b4a39870393ae44535dbefc02a05d",
            "diff": [
                "diff --git a/pkg/nuclide-unicode-datatip/lib/UnescapedUnicodeDatatip.js b/pkg/nuclide-unicode-datatip/lib/UnescapedUnicodeDatatip.js",
                "index ceba2f06d..75342ed60 100644",
                "--- a/pkg/nuclide-unicode-datatip/lib/UnescapedUnicodeDatatip.js",
                "+++ b/pkg/nuclide-unicode-datatip/lib/UnescapedUnicodeDatatip.js",
                "@@ -20,5 +20,6 @@ import {decodeSurrogateCodePoints, extractCodePoints} from './Unicode';",
                " // \\u{XXXX}.",
                "+// TODO(hansonw): Remove the \"[u]\" workaround: https://github.com/atom/superstring/issues/52",
                " //",
                " // eslint-disable-next-line max-len",
                "-const WORD_REGEX = /[a-zA-Z0-9_-]*(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}|\\\\u{[0-9a-fA-F]{1,8}})+(?:\\\\u[0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}|\\\\u{[0-9a-fA-F]{1,8}}|[a-zA-Z0-9_-])*/g;",
                "+const WORD_REGEX = /[a-zA-Z0-9_-]*(?:\\\\[u][0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}|\\\\[u]{[0-9a-fA-F]{1,8}})+(?:\\\\[u][0-9a-fA-F]{4}|\\\\U[0-9a-fA-F]{8}|\\\\[u]{[0-9a-fA-F]{1,8}}|[a-zA-Z0-9_-])*/g;"
            ],
            "changed_files": [
                "pkg/nuclide-unicode-datatip/lib/UnescapedUnicodeDatatip.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code, handler, issue",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: code",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "01ca0f23f320fc110ba99a778fd28bb87235d593",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520879488,
            "hunks": 2,
            "message": "Remove code lens \"copy on click\" tooltip Summary: The code lens tooltip has a tendency to get stuck, so we should remove it. Reviewed By: ljw1004 Differential Revision: D7240087 fbshipit-source-id: 84e2ede730d26da33aeb16d551f4c2e5bf2f10ad",
            "diff": [
                "diff --git a/pkg/nuclide-ocaml/lib/CodeLensListener.js b/pkg/nuclide-ocaml/lib/CodeLensListener.js",
                "index f9a3b3be2..c35b24f5b 100644",
                "--- a/pkg/nuclide-ocaml/lib/CodeLensListener.js",
                "+++ b/pkg/nuclide-ocaml/lib/CodeLensListener.js",
                "@@ -171,3 +171,3 @@ export function observeForCodeLens(",
                "-            const element = document.createElement('div');",
                "+            const element = document.createElement('span');",
                "             // Put in a nonbreaking space to reserve the space in the editor. If",
                "@@ -188,7 +188,2 @@ export function observeForCodeLens(",
                "             });",
                "-            elementsDisposable.add(",
                "-              atom.tooltips.add(element, {",
                "-                title: 'Click on a code lens to copy it to the clipboard.',",
                "-              }),",
                "-            );"
            ],
            "changed_files": [
                "pkg/nuclide-ocaml/lib/CodeLensListener.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: code",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "c13a3190d9d9e998df86106bfe67bae59ad0839a",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521667004,
            "hunks": 13,
            "message": "HHVM Debugger: support TerminateThreadsRequest Summary: The final addition to the VS Code adapter protocol uses TerminateThreads, which accepts an array of thread IDs, rather than the prototype implementation we have that accepts a single thread ID. Update to match the official protocol. Reviewed By: mostafaeweda Differential Revision: D7294075 fbshipit-source-id: 836471ddb71adfeff62a5b15e761beaca546cef3",
            "diff": [
                "diff --git a/flow-libs/vscode-debugprotocol.js.flow b/flow-libs/vscode-debugprotocol.js.flow",
                "index 32129d219..0a158eecf 100644",
                "--- a/flow-libs/vscode-debugprotocol.js.flow",
                "+++ b/flow-libs/vscode-debugprotocol.js.flow",
                "@@ -1089,3 +1089,3 @@ declare module 'vscode-debugprotocol' {",
                "      */",
                "-    supportsTerminateThread?: boolean,",
                "+    supportsTerminateThreadsRequest?: boolean,",
                "   };",
                "diff --git a/pkg/nuclide-debugger-hhvm-rpc/lib/hhvmDebugger.js b/pkg/nuclide-debugger-hhvm-rpc/lib/hhvmDebugger.js",
                "index 3b079085c..61d717067 100644",
                "--- a/pkg/nuclide-debugger-hhvm-rpc/lib/hhvmDebugger.js",
                "+++ b/pkg/nuclide-debugger-hhvm-rpc/lib/hhvmDebugger.js",
                "@@ -310,3 +310,3 @@ class HHVMDebuggerWrapper {",
                "               // Experimental support for terminate thread",
                "-              supportsTerminateThread: true,",
                "+              supportsTerminateThreadsRequest: true,",
                "             },",
                "diff --git a/pkg/nuclide-debugger-new/lib/main.js b/pkg/nuclide-debugger-new/lib/main.js",
                "index 0e64ccc0e..e9d21b34e 100644",
                "--- a/pkg/nuclide-debugger-new/lib/main.js",
                "+++ b/pkg/nuclide-debugger-new/lib/main.js",
                "@@ -264,3 +264,3 @@ class Activation {",
                "                 if (!Number.isNaN(threadId)) {",
                "-                  return this._supportsTerminateThread();",
                "+                  return this._supportsTerminateThreadsRequest();",
                "                 }",
                "@@ -368,3 +368,3 @@ class Activation {",
                "-  _supportsTerminateThread(): boolean {",
                "+  _supportsTerminateThreadsRequest(): boolean {",
                "     // If currently debugging, return whether or not the current debugger supports this.",
                "@@ -375,3 +375,3 @@ class Activation {",
                "       return Boolean(",
                "-        focusedProcess.session.capabilities.supportsTerminateThread,",
                "+        focusedProcess.session.capabilities.supportsTerminateThreadsRequest,",
                "       );",
                "@@ -609,4 +609,4 @@ class Activation {",
                "       const threadId = parseInt(target.dataset.threadid, 10);",
                "-      if (!Number.isNaN(threadId) && this._supportsTerminateThread()) {",
                "-        this._service.terminateThread(threadId);",
                "+      if (!Number.isNaN(threadId) && this._supportsTerminateThreadsRequest()) {",
                "+        this._service.terminateThreads([threadId]);",
                "       }",
                "diff --git a/pkg/nuclide-debugger-new/lib/ui/DebuggerThreadsComponent.js b/pkg/nuclide-debugger-new/lib/ui/DebuggerThreadsComponent.js",
                "index 747a48709..6264265f8 100644",
                "--- a/pkg/nuclide-debugger-new/lib/ui/DebuggerThreadsComponent.js",
                "+++ b/pkg/nuclide-debugger-new/lib/ui/DebuggerThreadsComponent.js",
                "@@ -194,3 +194,3 @@ export default class DebuggerThreadsComponent extends React.Component<",
                "-    let supportsTerminateThread = false;",
                "+    let supportsTerminateThreadsRequest = false;",
                "     const {focusedProcess} = this.props.service.viewModel;",
                "@@ -199,5 +199,7 @@ export default class DebuggerThreadsComponent extends React.Component<",
                "       focusedProcess.session != null &&",
                "-      Boolean(focusedProcess.session.capabilities.supportsTerminateThread)",
                "+      Boolean(",
                "+        focusedProcess.session.capabilities.supportsTerminateThreadsRequest,",
                "+      )",
                "     ) {",
                "-      supportsTerminateThread = true;",
                "+      supportsTerminateThreadsRequest = true;",
                "     }",
                "@@ -219,3 +221,3 @@ export default class DebuggerThreadsComponent extends React.Component<",
                "         key: 'address',",
                "-        width: supportsTerminateThread ? 0.35 : 0.45,",
                "+        width: supportsTerminateThreadsRequest ? 0.35 : 0.45,",
                "       },",
                "@@ -228,3 +230,3 @@ export default class DebuggerThreadsComponent extends React.Component<",
                "-    if (supportsTerminateThread) {",
                "+    if (supportsTerminateThreadsRequest) {",
                "       columns.push({",
                "diff --git a/pkg/nuclide-debugger-new/lib/vsp/DebugService.js b/pkg/nuclide-debugger-new/lib/vsp/DebugService.js",
                "index 8e4ffebc0..59634279b 100644",
                "--- a/pkg/nuclide-debugger-new/lib/vsp/DebugService.js",
                "+++ b/pkg/nuclide-debugger-new/lib/vsp/DebugService.js",
                "@@ -1050,3 +1050,3 @@ export default class DebugService implements IDebugService {",
                "-  async terminateThread(threadId: number): Promise<void> {",
                "+  async terminateThreads(threadIds: Array<number>): Promise<void> {",
                "     const {focusedProcess} = this.viewModel;",
                "@@ -1058,5 +1058,5 @@ export default class DebugService implements IDebugService {",
                "     track(AnalyticsEvents.DEBUGGER_TERMINATE_THREAD);",
                "-    if (Boolean(session.capabilities.supportsTerminateThread)) {",
                "-      await session.custom('terminateThread', {",
                "-        threadId,",
                "+    if (Boolean(session.capabilities.supportsTerminateThreadsRequest)) {",
                "+      await session.custom('terminateThreads', {",
                "+        threadIds,",
                "       });"
            ],
            "changed_files": [
                "flow-libs/vscode-debugprotocol.js.flow",
                "pkg/nuclide-debugger-hhvm-rpc/lib/hhvmDebugger.js",
                "pkg/nuclide-debugger-new/lib/main.js",
                "pkg/nuclide-debugger-new/lib/ui/DebuggerThreadsComponent.js",
                "pkg/nuclide-debugger-new/lib/vsp/DebugService.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code, hhvm",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: code, hhvm",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "d81c6f424cfeb69939de965ef5d1b31065eb82b3",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521763574,
            "hunks": 9,
            "message": "Fix setstate bug in launch/attach dialogs Summary: Fixing bug causing button enable not to work correctly Reviewed By: Goom11 Differential Revision: D7372310 fbshipit-source-id: 9705671159ea1b9b10d482bf9ab5600235db2c47",
            "diff": [
                "diff --git a/pkg/nuclide-debugger-native/lib/AttachUIComponent.js b/pkg/nuclide-debugger-native/lib/AttachUIComponent.js",
                "index ba39a33ca..775ad55c8 100644",
                "--- a/pkg/nuclide-debugger-native/lib/AttachUIComponent.js",
                "+++ b/pkg/nuclide-debugger-native/lib/AttachUIComponent.js",
                "@@ -173,4 +173,5 @@ export class AttachUIComponent extends React.Component<PropsType, StateType> {",
                "   setState(newState: Object): void {",
                "-    super.setState(newState);",
                "-    this.props.configIsValidChanged(this._debugButtonShouldEnable());",
                "+    super.setState(newState, () =>",
                "+      this.props.configIsValidChanged(this._debugButtonShouldEnable()),",
                "+    );",
                "   }",
                "diff --git a/pkg/nuclide-debugger-native/lib/LaunchUIComponent.js b/pkg/nuclide-debugger-native/lib/LaunchUIComponent.js",
                "index 98d09381a..c5b84f611 100644",
                "--- a/pkg/nuclide-debugger-native/lib/LaunchUIComponent.js",
                "+++ b/pkg/nuclide-debugger-native/lib/LaunchUIComponent.js",
                "@@ -86,4 +86,5 @@ export class LaunchUIComponent extends React.Component<PropsType, StateType> {",
                "   setState(newState: Object): void {",
                "-    super.setState(newState);",
                "-    this.props.configIsValidChanged(this._debugButtonShouldEnable());",
                "+    super.setState(newState, () =>",
                "+      this.props.configIsValidChanged(this._debugButtonShouldEnable()),",
                "+    );",
                "   }",
                "diff --git a/pkg/nuclide-debugger-vsp/lib/HhvmAttachUiComponent.js b/pkg/nuclide-debugger-vsp/lib/HhvmAttachUiComponent.js",
                "index 93d72f111..9207b7f7f 100644",
                "--- a/pkg/nuclide-debugger-vsp/lib/HhvmAttachUiComponent.js",
                "+++ b/pkg/nuclide-debugger-vsp/lib/HhvmAttachUiComponent.js",
                "@@ -164,4 +164,5 @@ export class AttachUiComponent extends React.Component<PropsType, StateType> {",
                "   setState(newState: Object): void {",
                "-    super.setState(newState);",
                "-    this.props.configIsValidChanged(this._debugButtonShouldEnable());",
                "+    super.setState(newState, () =>",
                "+      this.props.configIsValidChanged(this._debugButtonShouldEnable()),",
                "+    );",
                "   }",
                "diff --git a/pkg/nuclide-debugger-vsp/lib/HhvmLaunchUiComponent.js b/pkg/nuclide-debugger-vsp/lib/HhvmLaunchUiComponent.js",
                "index 9adb6e9be..7ed6e1de8 100644",
                "--- a/pkg/nuclide-debugger-vsp/lib/HhvmLaunchUiComponent.js",
                "+++ b/pkg/nuclide-debugger-vsp/lib/HhvmLaunchUiComponent.js",
                "@@ -111,4 +111,5 @@ export class LaunchUiComponent extends React.Component<Props, State> {",
                "   setState(newState: Object): void {",
                "-    super.setState(newState);",
                "-    this.props.configIsValidChanged(this._debugButtonShouldEnable());",
                "+    super.setState(newState, () =>",
                "+      this.props.configIsValidChanged(this._debugButtonShouldEnable()),",
                "+    );",
                "   }",
                "diff --git a/pkg/nuclide-debugger-vsp/lib/NativeAttachUiComponent.js b/pkg/nuclide-debugger-vsp/lib/NativeAttachUiComponent.js",
                "index 797c71912..f8c74fe13 100644",
                "--- a/pkg/nuclide-debugger-vsp/lib/NativeAttachUiComponent.js",
                "+++ b/pkg/nuclide-debugger-vsp/lib/NativeAttachUiComponent.js",
                "@@ -157,4 +157,5 @@ export default class NativeAttachUiComponent extends React.Component<",
                "   setState(newState: Object): void {",
                "-    super.setState(newState);",
                "-    this.props.configIsValidChanged(this._debugButtonShouldEnable());",
                "+    super.setState(newState, () =>",
                "+      this.props.configIsValidChanged(this._debugButtonShouldEnable()),",
                "+    );",
                "   }",
                "diff --git a/pkg/nuclide-debugger-vsp/lib/NativeLaunchUiComponent.js b/pkg/nuclide-debugger-vsp/lib/NativeLaunchUiComponent.js",
                "index db5d17462..d694a54c7 100644",
                "--- a/pkg/nuclide-debugger-vsp/lib/NativeLaunchUiComponent.js",
                "+++ b/pkg/nuclide-debugger-vsp/lib/NativeLaunchUiComponent.js",
                "@@ -81,4 +81,5 @@ export default class NativeLaunchUiComponent extends React.Component<",
                "   setState(newState: Object): void {",
                "-    super.setState(newState);",
                "-    this.props.configIsValidChanged(this._debugButtonShouldEnable());",
                "+    super.setState(newState, () =>",
                "+      this.props.configIsValidChanged(this._debugButtonShouldEnable()),",
                "+    );",
                "   }",
                "diff --git a/pkg/nuclide-debugger-vsp/lib/OCamlLaunchUIComponent.js b/pkg/nuclide-debugger-vsp/lib/OCamlLaunchUIComponent.js",
                "index f6d92bfc1..1f7b3ac3a 100644",
                "--- a/pkg/nuclide-debugger-vsp/lib/OCamlLaunchUIComponent.js",
                "+++ b/pkg/nuclide-debugger-vsp/lib/OCamlLaunchUIComponent.js",
                "@@ -79,6 +79,3 @@ export class OCamlLaunchUIComponent extends React.Component<",
                "   setState(state: Object) {",
                "-    super.setState(state);",
                "-    // const canLaunch = this.state.launchExecutable.trim().length > 0;",
                "-    // this.props.configIsValidChanged(canLaunch);",
                "-    this.props.configIsValidChanged(true);",
                "+    super.setState(state, () => this.props.configIsValidChanged(true));",
                "   }",
                "diff --git a/pkg/nuclide-debugger-vsp/lib/PrepackLaunchUIComponent.js b/pkg/nuclide-debugger-vsp/lib/PrepackLaunchUIComponent.js",
                "index 3ed0b5f92..b38823f84 100644",
                "--- a/pkg/nuclide-debugger-vsp/lib/PrepackLaunchUIComponent.js",
                "+++ b/pkg/nuclide-debugger-vsp/lib/PrepackLaunchUIComponent.js",
                "@@ -60,4 +60,5 @@ export default class PrepackScriptLaunchUiComponent extends React.Component<",
                "   setState(newState: Object): void {",
                "-    super.setState(newState);",
                "-    this.props.configIsValidChanged(this._debugButtonShouldEnable());",
                "+    super.setState(newState, () =>",
                "+      this.props.configIsValidChanged(this._debugButtonShouldEnable()),",
                "+    );",
                "   }",
                "diff --git a/pkg/nuclide-debugger-vsp/lib/ReactNativeCommonUiComponent.js b/pkg/nuclide-debugger-vsp/lib/ReactNativeCommonUiComponent.js",
                "index 5f296668b..7ca4abff3 100644",
                "--- a/pkg/nuclide-debugger-vsp/lib/ReactNativeCommonUiComponent.js",
                "+++ b/pkg/nuclide-debugger-vsp/lib/ReactNativeCommonUiComponent.js",
                "@@ -67,4 +67,5 @@ export default class ReactNativeCommonUiComponent<",
                "   setState(newState: Object): void {",
                "-    super.setState(newState);",
                "-    this.props.configIsValidChanged(this._debugButtonShouldEnable());",
                "+    super.setState(newState, () =>",
                "+      this.props.configIsValidChanged(this._debugButtonShouldEnable()),",
                "+    );",
                "   }"
            ],
            "changed_files": [
                "pkg/nuclide-debugger-native/lib/AttachUIComponent.js",
                "pkg/nuclide-debugger-native/lib/LaunchUIComponent.js",
                "pkg/nuclide-debugger-vsp/lib/HhvmAttachUiComponent.js",
                "pkg/nuclide-debugger-vsp/lib/HhvmLaunchUiComponent.js",
                "pkg/nuclide-debugger-vsp/lib/NativeAttachUiComponent.js",
                "pkg/nuclide-debugger-vsp/lib/NativeLaunchUiComponent.js",
                "pkg/nuclide-debugger-vsp/lib/OCamlLaunchUIComponent.js",
                "pkg/nuclide-debugger-vsp/lib/PrepackLaunchUIComponent.js",
                "pkg/nuclide-debugger-vsp/lib/ReactNativeCommonUiComponent.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: attach",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: hhvm, attach",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "fc029437f2a68b79975ea4a9b2752f7bce43e745",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520386689,
            "hunks": 7,
            "message": "Move adb tunneling logic Summary: Move to a node package so other code can quickly import this. We might want to make an Atom service out of this, but this is faster for now. Reviewed By: aadsm Differential Revision: D7175686 fbshipit-source-id: a3c972a06878dc40f075a383f6139258f1af1099",
            "diff": [
                "diff --git a/pkg/nuclide-adb-sdb-base/lib/Tunneling.js b/pkg/nuclide-adb-sdb-base/lib/Tunneling.js",
                "new file mode 100644",
                "index 000000000..fc0ba17c9",
                "--- /dev/null",
                "+++ b/pkg/nuclide-adb-sdb-base/lib/Tunneling.js",
                "@@ -0,0 +1,107 @@",
                "+/**",
                "+ * Copyright (c) 2015-present, Facebook, Inc.",
                "+ * All rights reserved.",
                "+ *",
                "+ * This source code is licensed under the license found in the LICENSE file in",
                "+ * the root directory of this source tree.",
                "+ *",
                "+ * @flow",
                "+ * @format",
                "+ */",
                "+",
                "+import type {NuclideUri} from 'nuclide-commons/nuclideUri';",
                "+import type {",
                "+  Tunnel,",
                "+  SshTunnelService,",
                "+} from '../../nuclide-ssh-tunnel/lib/types';",
                "+",
                "+import nuclideUri from 'nuclide-commons/nuclideUri';",
                "+import UniversalDisposable from 'nuclide-commons/UniversalDisposable';",
                "+import {BehaviorSubject, Observable} from 'rxjs';",
                "+import consumeFirstProvider from '../../commons-atom/consumeFirstProvider';",
                "+import {getAdbServiceByNuclideUri} from '../../nuclide-remote-connection';",
                "+",
                "+export function startTunnelingAdb(host: NuclideUri) {",
                "+  stopTunnelingAdb();",
                "+  const adbService = getAdbServiceByNuclideUri(host);",
                "+  Observable.fromPromise(adbService.killServer())",
                "+    .switchMap(async () => {",
                "+      const tunnelService: ?SshTunnelService = await consumeFirstProvider(",
                "+        'nuclide.ssh-tunnel',",
                "+      );",
                "+      if (tunnelService == null) {",
                "+        throw new Error(",
                "+          'No package to open a tunnel to the remote host available.',",
                "+        );",
                "+      }",
                "+      const tunnels = [",
                "+        {",
                "+          description: 'adb',",
                "+          from: {host: nuclideUri.getHostname(host), port: 5037, family: 4},",
                "+          to: {host: 'localhost', port: 5037, family: 4},",
                "+        },",
                "+        {",
                "+          description: 'emulator console',",
                "+          from: {host: nuclideUri.getHostname(host), port: 5554, family: 4},",
                "+          to: {host: 'localhost', port: 5554, family: 4},",
                "+        },",
                "+        {",
                "+          description: 'emulator adb',",
                "+          from: {host: nuclideUri.getHostname(host), port: 5555, family: 4},",
                "+          to: {host: 'localhost', port: 5555, family: 4},",
                "+        },",
                "+        {",
                "+          description: 'exopackage',",
                "+          from: {host: nuclideUri.getHostname(host), port: 2829, family: 4},",
                "+          to: {host: 'localhost', port: 2829, family: 4},",
                "+        },",
                "+      ];",
                "+      return Promise.all(",
                "+        tunnels.map(t => _requestTunnelFromService(t, tunnelService)),",
                "+      );",
                "+    })",
                "+    .subscribe(result => {",
                "+      const disposable = new UniversalDisposable();",
                "+      result.forEach(d => disposable.add(d));",
                "+      activeTunnels.next({host, disposable});",
                "+    });",
                "+}",
                "+",
                "+export function isAdbTunneled(host: NuclideUri): Observable<boolean> {",
                "+  return activeTunnels",
                "+    .publishReplay(1)",
                "+    .refCount()",
                "+    .map(active => active != null && active.host === host);",
                "+}",
                "+",
                "+export function stopTunnelingAdb() {",
                "+  const active = activeTunnels.getValue();",
                "+  if (active != null) {",
                "+    active.disposable.dispose();",
                "+    activeTunnels.next(null);",
                "+  }",
                "+}",
                "+",
                "+const activeTunnels: BehaviorSubject<?{",
                "+  host: NuclideUri,",
                "+  disposable: UniversalDisposable,",
                "+}> = new BehaviorSubject(null);",
                "+",
                "+async function _requestTunnelFromService(",
                "+  tunnel: Tunnel,",
                "+  service: SshTunnelService,",
                "+): Promise<IDisposable> {",
                "+  return new Promise((resolve, reject) => {",
                "+    const disposable = service.openTunnel(",
                "+      tunnel,",
                "+      error => {",
                "+        if (error == null) {",
                "+          resolve(disposable);",
                "+        } else {",
                "+          reject(error);",
                "+        }",
                "+      },",
                "+      () => {},",
                "+    );",
                "+  });",
                "+}",
                "diff --git a/pkg/nuclide-device-panel-android/lib/providers/AdbTunnelingProvider.js b/pkg/nuclide-device-panel-android/lib/providers/AdbTunnelingProvider.js",
                "index fceac26d6..24d42d81b 100644",
                "--- a/pkg/nuclide-device-panel-android/lib/providers/AdbTunnelingProvider.js",
                "+++ b/pkg/nuclide-device-panel-android/lib/providers/AdbTunnelingProvider.js",
                "@@ -16,6 +16,2 @@ import type {",
                " } from '../../../nuclide-device-panel/lib/types';",
                "-import type {",
                "-  SshTunnelService,",
                "-  Tunnel,",
                "-} from '../../../nuclide-ssh-tunnel/lib/types';",
                "@@ -24,5 +20,7 @@ import nuclideUri from 'nuclide-commons/nuclideUri';",
                " import UniversalDisposable from 'nuclide-commons/UniversalDisposable';",
                "-import {Observable, BehaviorSubject} from 'rxjs';",
                "-import consumeFirstProvider from '../../../commons-atom/consumeFirstProvider';",
                "-import {getAdbServiceByNuclideUri} from '../../../nuclide-remote-connection';",
                "+import {",
                "+  startTunnelingAdb,",
                "+  stopTunnelingAdb,",
                "+  isAdbTunneled,",
                "+} from '../../../nuclide-adb-sdb-base/lib/Tunneling';",
                " import {AdbTunnelButton} from '../ui/AdbTunnelButton';",
                "@@ -31,7 +29,2 @@ import * as React from 'react';",
                " export class AdbTunnelingProvider implements DeviceTypeComponentProvider {",
                "-  activeTunnels: BehaviorSubject<?{",
                "-    host: NuclideUri,",
                "-    disposable: UniversalDisposable,",
                "-  }> = new BehaviorSubject(null);",
                "-",
                "   getType = (): string => {",
                "@@ -53,8 +46,7 @@ export class AdbTunnelingProvider implements DeviceTypeComponentProvider {",
                "         const BoundButton = bindObservableAsProps(",
                "-          this.activeTunnels.map(value => ({",
                "+          isAdbTunneled(host).map(value => ({",
                "             host,",
                "-            status:",
                "-              value == null || value.host !== host ? 'inactive' : 'active',",
                "-            enable: () => this.openTunnels(host),",
                "-            disable: () => this.closeTunnels(),",
                "+            status: value ? 'active' : 'inactive',",
                "+            enable: () => startTunnelingAdb(host),",
                "+            disable: () => stopTunnelingAdb(),",
                "           })),",
                "@@ -68,75 +60,2 @@ export class AdbTunnelingProvider implements DeviceTypeComponentProvider {",
                "   };",
                "-",
                "-  openTunnels = (host: NuclideUri) => {",
                "-    this.closeTunnels();",
                "-    const adbService = getAdbServiceByNuclideUri(host);",
                "-    Observable.fromPromise(adbService.killServer())",
                "-      .switchMap(async () => {",
                "-        const tunnelService: ?SshTunnelService = await consumeFirstProvider(",
                "-          'nuclide.ssh-tunnel',",
                "-        );",
                "-        if (tunnelService == null) {",
                "-          throw new Error(",
                "-            'No package to open a tunnel to the remote host available.',",
                "-          );",
                "-        }",
                "-        const tunnels = [",
                "-          {",
                "-            description: 'adb',",
                "-            from: {host: nuclideUri.getHostname(host), port: 5037, family: 4},",
                "-            to: {host: 'localhost', port: 5037, family: 4},",
                "-          },",
                "-          {",
                "-            description: 'emulator console',",
                "-            from: {host: nuclideUri.getHostname(host), port: 5554, family: 4},",
                "-            to: {host: 'localhost', port: 5554, family: 4},",
                "-          },",
                "-          {",
                "-            description: 'emulator adb',",
                "-            from: {host: nuclideUri.getHostname(host), port: 5555, family: 4},",
                "-            to: {host: 'localhost', port: 5555, family: 4},",
                "-          },",
                "-          {",
                "-            description: 'exopackage',",
                "-            from: {host: nuclideUri.getHostname(host), port: 2829, family: 4},",
                "-            to: {host: 'localhost', port: 2829, family: 4},",
                "-          },",
                "-        ];",
                "-        return Promise.all(",
                "-          tunnels.map(t => _requestTunnelFromService(t, tunnelService)),",
                "-        );",
                "-      })",
                "-      .subscribe(result => {",
                "-        const disposable = new UniversalDisposable();",
                "-        result.forEach(d => disposable.add(d));",
                "-        this.activeTunnels.next({host, disposable});",
                "-      });",
                "-  };",
                "-",
                "-  closeTunnels = () => {",
                "-    const active = this.activeTunnels.getValue();",
                "-    if (active != null) {",
                "-      active.disposable.dispose();",
                "-      this.activeTunnels.next(null);",
                "-    }",
                "-  };",
                "-}",
                "-",
                "-async function _requestTunnelFromService(",
                "-  tunnel: Tunnel,",
                "-  service: SshTunnelService,",
                "-): Promise<IDisposable> {",
                "-  return new Promise((resolve, reject) => {",
                "-    const disposable = service.openTunnel(",
                "-      tunnel,",
                "-      error => {",
                "-        if (error == null) {",
                "-          resolve(disposable);",
                "-        } else {",
                "-          reject(error);",
                "-        }",
                "-      },",
                "-      () => {},",
                "-    );",
                "-  });",
                " }"
            ],
            "changed_files": [
                "pkg/nuclide-adb-sdb-base/lib/Tunneling.js",
                "pkg/nuclide-device-panel-android/lib/providers/AdbTunnelingProvider.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: provide",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "737c90b086b4e413f5e43d0b6562d7bfd60ac0c7",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521226850,
            "hunks": 3,
            "message": "Make code lens not scroll a newly opened file Summary: When opening a file to a line other than 1 (such as through a BigGrep search in the OmniSearch box), code lens has a tendency to scroll the file a few ms after it's opened because it's adding the dummy lines.  This change will recenter the file after the next tick of the event loop. Reviewed By: ljw1004 Differential Revision: D7296013 fbshipit-source-id: 5d01a22c8a1d9a8955a8a68ac6a4689d27811d1b",
            "diff": [
                "diff --git a/pkg/nuclide-ocaml/lib/CodeLensListener.js b/pkg/nuclide-ocaml/lib/CodeLensListener.js",
                "index e42a2369e..3484e993c 100644",
                "--- a/pkg/nuclide-ocaml/lib/CodeLensListener.js",
                "+++ b/pkg/nuclide-ocaml/lib/CodeLensListener.js",
                "@@ -20,2 +20,3 @@ import featureConfig from 'nuclide-commons-atom/feature-config';",
                " import {observeTextEditors} from 'nuclide-commons-atom/text-editor';",
                "+import {nextTick} from 'nuclide-commons/promise';",
                " import UniversalDisposable from 'nuclide-commons/UniversalDisposable';",
                "@@ -123,2 +124,3 @@ export function observeForCodeLens(",
                "     observeTextEditors(async editor => {",
                "+      let isFirstUpdate = true;",
                "       const editorDisposable = new UniversalDisposable();",
                "@@ -219,2 +221,8 @@ export function observeForCodeLens(",
                "           });",
                "+",
                "+          if (isFirstUpdate) {",
                "+            await nextTick();",
                "+            isFirstUpdate = false;",
                "+            editor.scrollToCursorPosition({center: true});",
                "+          }",
                "         }"
            ],
            "changed_files": [
                "pkg/nuclide-ocaml/lib/CodeLensListener.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: code",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "f33c8363a5df293939e8f299939e76cb35ef736f",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521047230,
            "hunks": 4,
            "message": "HHVM Debugger: Remove source attribute from stack frames when none exist or valid Summary: * No need for checking special '<unknown>' string in the `DebuggerModel`. Reviewed By: velocityboy Differential Revision: D7252124 fbshipit-source-id: 62d5c8538500e6d557cc9781ebf9a9a8579cd26b",
            "diff": [
                "diff --git a/pkg/nuclide-debugger-hhvm-rpc/lib/hhvmDebugger.js b/pkg/nuclide-debugger-hhvm-rpc/lib/hhvmDebugger.js",
                "index fb6abaab9..f5ad76d04 100644",
                "--- a/pkg/nuclide-debugger-hhvm-rpc/lib/hhvmDebugger.js",
                "+++ b/pkg/nuclide-debugger-hhvm-rpc/lib/hhvmDebugger.js",
                "@@ -12,2 +12,3 @@",
                " import child_process from 'child_process';",
                "+import nuclideUri from 'nuclide-commons/nuclideUri';",
                " import {",
                "@@ -414,2 +415,18 @@ class HHVMDebuggerWrapper {",
                "         }",
                "+        case 'stackTrace': {",
                "+          message.body.stackFrames.forEach(stackFrame => {",
                "+            if (stackFrame.source != null) {",
                "+              if (stackFrame.source.path === '<unknown>') {",
                "+                // TODO(ericblue): Delete source when there's none known.",
                "+                delete stackFrame.source;",
                "+              } else if (nuclideUri.isAbsolute(stackFrame.source.name)) {",
                "+                // TODO(ericblue): source names shouldn't be absolute paths.",
                "+                stackFrame.source.name = nuclideUri.basename(",
                "+                  stackFrame.source.name,",
                "+                );",
                "+              }",
                "+            }",
                "+          });",
                "+          break;",
                "+        }",
                "         default:",
                "diff --git a/pkg/nuclide-debugger-new/lib/vsp/DebuggerModel.js b/pkg/nuclide-debugger-new/lib/vsp/DebuggerModel.js",
                "index ac00c74f8..cdc25ff49 100644",
                "--- a/pkg/nuclide-debugger-new/lib/vsp/DebuggerModel.js",
                "+++ b/pkg/nuclide-debugger-new/lib/vsp/DebuggerModel.js",
                "@@ -80,4 +80,2 @@ import {distinct} from 'nuclide-commons/collection';",
                "-const UNKWOWN_SOURCE_NAMES = new Set([UNKNOWN_SOURCE, '<unknown>']);",
                "-",
                " export class Source implements ISource {",
                "@@ -93,3 +91,3 @@ export class Source implements ISource {",
                "     }",
                "-    this.available = !UNKWOWN_SOURCE_NAMES.has(this._raw.name);",
                "+    this.available = this._raw.name !== UNKNOWN_SOURCE;",
                "     if (this._raw.sourceReference != null && this._raw.sourceReference > 0) {"
            ],
            "changed_files": [
                "pkg/nuclide-debugger-hhvm-rpc/lib/hhvmDebugger.js",
                "pkg/nuclide-debugger-new/lib/vsp/DebuggerModel.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: hhvm",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: hhvm",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "59c2353b3521918db52966aed54cb767cf82bc0d",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520881140,
            "hunks": 3,
            "message": "HHVM Debugger: fix attach to already-running script is broken Summary: Attach to already-running script is currently attaching to the webserver instead! Reviewed By: mostafaeweda Differential Revision: D7240878 fbshipit-source-id: 1dff05b12be1f2127df24d02d86f5579f549c21c",
            "diff": [
                "diff --git a/pkg/nuclide-debugger-vsp/lib/HhvmLaunchAttachProvider.js b/pkg/nuclide-debugger-vsp/lib/HhvmLaunchAttachProvider.js",
                "index 9787ef934..3fe9277f7 100644",
                "--- a/pkg/nuclide-debugger-vsp/lib/HhvmLaunchAttachProvider.js",
                "+++ b/pkg/nuclide-debugger-vsp/lib/HhvmLaunchAttachProvider.js",
                "@@ -360,3 +360,6 @@ export async function getLaunchProcessInfo(",
                "-async function _getHHVMAttachConfig(targetUri: NuclideUri): Promise<Object> {",
                "+async function _getHHVMAttachConfig(",
                "+  targetUri: NuclideUri,",
                "+  attachPort: ?number,",
                "+): Promise<Object> {",
                "   // Note: not specifying startup document or debug port here, the backend",
                "@@ -369,2 +372,6 @@ async function _getHHVMAttachConfig(targetUri: NuclideUri): Promise<Object> {",
                "+  if (attachPort != null) {",
                "+    config.debugPort = attachPort;",
                "+  }",
                "+",
                "   const service = getHhvmDebuggerServiceByNuclideUri(targetUri);",
                "@@ -400,3 +407,3 @@ export async function getAttachProcessInfo(",
                "     adapterExecutable = await getHhvmAdapterInfo(targetUri);",
                "-    config = await _getHHVMAttachConfig(targetUri);",
                "+    config = await _getHHVMAttachConfig(targetUri, attachPort);",
                "     processInfo = new VspProcessInfo("
            ],
            "changed_files": [
                "pkg/nuclide-debugger-vsp/lib/HhvmLaunchAttachProvider.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: hhvm, attach",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: provide, hhvm, attach",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "6d34736ed8df579c0d04dbb0cc4704bb896c5b92",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521695887,
            "hunks": 2,
            "message": "Remove name field from providers Summary: Most of these used the constructor name, so there shouldn't be any negative effects. Reviewed By: matthewwithanm Differential Revision: D7354752 fbshipit-source-id: 716a2936c2185c2f956f13b8511fae0e9766f9f3",
            "diff": [
                "diff --git a/pkg/nuclide-terminal/lib/TerminalDashProvider.js b/pkg/nuclide-terminal/lib/TerminalDashProvider.js",
                "index d7e27f803..f013a9896 100644",
                "--- a/pkg/nuclide-terminal/lib/TerminalDashProvider.js",
                "+++ b/pkg/nuclide-terminal/lib/TerminalDashProvider.js",
                "@@ -39,3 +39,2 @@ export default class TerminalDashProvider",
                "-  name = 'TerminalProvider';",
                "   prefix = '!';",
                "diff --git a/pkg/sample-nuclide-contributors/lib/NuclidePackageReloadDashProvider.js b/pkg/sample-nuclide-contributors/lib/NuclidePackageReloadDashProvider.js",
                "index 6b643cd5e..4dc0d82c1 100644",
                "--- a/pkg/sample-nuclide-contributors/lib/NuclidePackageReloadDashProvider.js",
                "+++ b/pkg/sample-nuclide-contributors/lib/NuclidePackageReloadDashProvider.js",
                "@@ -39,3 +39,2 @@ export default class NuclidePackageReloadDashProvider",
                "   includeAsFallback = true;",
                "-  name = 'NuclideReloadPackageDashProvider';",
                "   prefix = 'npr';"
            ],
            "changed_files": [
                "pkg/nuclide-terminal/lib/TerminalDashProvider.js",
                "pkg/sample-nuclide-contributors/lib/NuclidePackageReloadDashProvider.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: provide",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: provide",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "9264b02fb4319f46fec352212d644f568e55d5c4",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520891688,
            "hunks": 3,
            "message": "Add setting to disable copy-on-click for code lens. Summary: Copy on click is nice when you have a really long code lens that goes off the screen, but for 90% of them it's not necessary and just messes up clipboards if people accidentally click on a code lens. Reviewed By: ljw1004 Differential Revision: D7240727 fbshipit-source-id: 1c5ce94069e83551b5eacc6fbee94782eb82040f",
            "diff": [
                "diff --git a/pkg/nuclide-ocaml/lib/CodeLensListener.js b/pkg/nuclide-ocaml/lib/CodeLensListener.js",
                "index c35b24f5b..72c2ee193 100644",
                "--- a/pkg/nuclide-ocaml/lib/CodeLensListener.js",
                "+++ b/pkg/nuclide-ocaml/lib/CodeLensListener.js",
                "@@ -18,2 +18,3 @@ import type {FileVersion} from '../../nuclide-open-files-rpc/lib/rpc-types';",
                "+import featureConfig from 'nuclide-commons-atom/feature-config';",
                " import {observeTextEditors} from 'nuclide-commons-atom/text-editor';",
                "@@ -183,3 +184,6 @@ export function observeForCodeLens(",
                "             element.addEventListener('click', () => {",
                "-              if (element.innerText != null) {",
                "+              if (",
                "+                element.innerText != null &&",
                "+                featureConfig.get('nuclide-ocaml.codeLensCopy')",
                "+              ) {",
                "                 atom.clipboard.write(element.innerText);",
                "diff --git a/pkg/nuclide-ocaml/package.json b/pkg/nuclide-ocaml/package.json",
                "index 270ecf972..ae851079a 100644",
                "--- a/pkg/nuclide-ocaml/package.json",
                "+++ b/pkg/nuclide-ocaml/package.json",
                "@@ -57,2 +57,7 @@",
                "         \"default\": true",
                "+      },",
                "+      \"codeLensCopy\": {",
                "+        \"title\": \"Enable copy-on-click for code lenses.\",",
                "+        \"type\": \"boolean\",",
                "+        \"default\": true",
                "       }"
            ],
            "changed_files": [
                "pkg/nuclide-ocaml/lib/CodeLensListener.js",
                "pkg/nuclide-ocaml/package.json"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: code",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "30cc3c29939ec58e91c3a3a34d63161ba072024c",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521165447,
            "hunks": 8,
            "message": "HHVM Debugger: provide instructions if connection is refused by HHVM Reviewed By: mostafaeweda Differential Revision: D7265131 fbshipit-source-id: 301901209cb03c7e446cfdc2bc27ec055c787a60",
            "diff": [
                "diff --git a/pkg/nuclide-debugger-hhvm-rpc/lib/fbConfig.js b/pkg/nuclide-debugger-hhvm-rpc/lib/fbConfig.js",
                "index 4f4c1598c..79a87eea1 100644",
                "--- a/pkg/nuclide-debugger-hhvm-rpc/lib/fbConfig.js",
                "+++ b/pkg/nuclide-debugger-hhvm-rpc/lib/fbConfig.js",
                "@@ -13,2 +13,5 @@ import type {HHVMLaunchConfig} from './types';",
                "+import fsPromise from 'nuclide-commons/fsPromise';",
                "+import nuclideUri from 'nuclide-commons/nuclideUri';",
                "+",
                " export function getHHVMRuntimeArgs(",
                "@@ -24 +27,18 @@ export function getHHVMRuntimeArgs(",
                " }",
                "+",
                "+export async function getHhvmStackTraces(): Promise<Array<string>> {",
                "+  const STACK_TRACE_LOCATION = '/var/tmp/cores/';",
                "+  const STACK_TRACE_PATTERN = /stacktrace\\..+\\.log/;",
                "+  const fileNames = await fsPromise.readdir(STACK_TRACE_LOCATION);",
                "+  return fileNames",
                "+    .filter(fileName => STACK_TRACE_PATTERN.exec(fileName) != null)",
                "+    .map(fileName => nuclideUri.join(STACK_TRACE_LOCATION, fileName));",
                "+}",
                "+",
                "+export function getRestartInstructions(): string {",
                "+  return (",
                "+    'Nuclide was unable to connect to your HHVM instance. Please wait ' +",
                "+    'a few moments and try again. If your webserver instance is still not ' +",
                "+    'responding, you can run `sudo webserver restart` from a terminal to restart it.'",
                "+  );",
                "+}",
                "diff --git a/pkg/nuclide-debugger-hhvm-rpc/lib/hhvmDebugger.js b/pkg/nuclide-debugger-hhvm-rpc/lib/hhvmDebugger.js",
                "index a3ddb3dec..b1d36c8be 100644",
                "--- a/pkg/nuclide-debugger-hhvm-rpc/lib/hhvmDebugger.js",
                "+++ b/pkg/nuclide-debugger-hhvm-rpc/lib/hhvmDebugger.js",
                "@@ -94,3 +94,3 @@ class HHVMDebuggerWrapper {",
                "           process.stderr.write(",
                "-            'The connection to the debug target has been closed.',",
                "+            'The connection to the debug target has been closed.\\n',",
                "           );",
                "@@ -118,4 +118,12 @@ class HHVMDebuggerWrapper {",
                "           process.stderr.write(",
                "-            'Error communicating with debugger target: ' + error.toString(),",
                "+            'Error communicating with debugger target: ' +",
                "+              error.toString() +",
                "+              '\\n',",
                "           );",
                "+",
                "+          try {",
                "+            // $FlowFB",
                "+            const fbConfig = require('./fbConfig');",
                "+            process.stderr.write(fbConfig.getRestartInstructions() + '\\n');",
                "+          } catch (_) {}",
                "           process.exit(error.code);",
                "@@ -129,3 +137,3 @@ class HHVMDebuggerWrapper {",
                "             this._attachTarget(attachMessage, retries + 1);",
                "-          }, 1000);",
                "+          }, 2000);",
                "         }",
                "@@ -169,3 +177,5 @@ class HHVMDebuggerWrapper {",
                "     targetProcess.on('exit', code => process.exit(code));",
                "-    targetProcess.on('error', error => process.stderr.write(error.toString()));",
                "+    targetProcess.on('error', error =>",
                "+      process.stderr.write(error.toString() + '\\n'),",
                "+    );",
                "@@ -352,3 +362,3 @@ class HHVMDebuggerWrapper {",
                "         process.stderr.write(",
                "-          `Error parsing message from target: ${e.toString()}: ${message}`,",
                "+          `Error parsing message from target: ${e.toString()}: ${message}\\n`,",
                "         );"
            ],
            "changed_files": [
                "pkg/nuclide-debugger-hhvm-rpc/lib/fbConfig.js",
                "pkg/nuclide-debugger-hhvm-rpc/lib/hhvmDebugger.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: provide, hhvm",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: hhvm",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "02a8551184bc365bcb927e64d76b9d9a5245a61c",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520627426,
            "hunks": 14,
            "message": "Remove PanelRenderer Summary: It wasn't paying the abstraction tax so I killed it. While I was in there, I also addressed a few race conditions caused by Promises/async. For example, if the breadcrumbs package was deactivated after the GK check completed, the panel could never be disposed. Similarly, actions could be dispatched on the store after the package was disposed. Reviewed By: captbaritone Differential Revision: D7207366 fbshipit-source-id: 162c845c766d5a8638e211bdf1d4e1ec0fc67ee2",
            "diff": [
                "diff --git a/pkg/commons-atom/PanelRenderer.js b/pkg/commons-atom/PanelRenderer.js",
                "deleted file mode 100644",
                "index 129b253b4..000000000",
                "--- a/pkg/commons-atom/PanelRenderer.js",
                "+++ /dev/null",
                "@@ -1,80 +0,0 @@",
                "-/**",
                "- * Copyright (c) 2015-present, Facebook, Inc.",
                "- * All rights reserved.",
                "- *",
                "- * This source code is licensed under the license found in the LICENSE file in",
                "- * the root directory of this source tree.",
                "- *",
                "- * @flow",
                "- * @format",
                "- */",
                "-",
                "-type PanelLocation = 'top' | 'right' | 'bottom' | 'left' | 'header';",
                "-type Options = {",
                "-  location: PanelLocation,",
                "-  createItem: () => Object,",
                "-  priority?: number,",
                "-};",
                "-",
                "-/**",
                "- * A class that gives us an idempotent API for rendering panels, creating them lazily.",
                "- */",
                "-export default class PanelRenderer {",
                "-  _createItem: () => Object;",
                "-  _item: ?Object;",
                "-  _location: PanelLocation;",
                "-  _panel: ?atom$Panel;",
                "-  _priority: ?number;",
                "-",
                "-  constructor(options: Options) {",
                "-    this._createItem = options.createItem;",
                "-    this._location = options.location;",
                "-    this._priority = options.priority;",
                "-  }",
                "-",
                "-  render(props: {visible: boolean}): void {",
                "-    if (props.visible) {",
                "-      if (this._panel == null) {",
                "-        const item =",
                "-          this._item == null ? (this._item = this._createItem()) : this._item;",
                "-        this._panel = addPanel(this._location, {",
                "-          item,",
                "-          priority: this._priority == null ? undefined : this._priority,",
                "-        });",
                "-      } else {",
                "-        this._panel.show();",
                "-      }",
                "-    } else if (this._panel != null) {",
                "-      this._panel.hide();",
                "-    }",
                "-  }",
                "-",
                "-  dispose(): void {",
                "-    if (this._item != null && typeof this._item.destroy === 'function') {",
                "-      this._item.destroy();",
                "-    }",
                "-    if (this._panel != null) {",
                "-      this._panel.destroy();",
                "-    }",
                "-  }",
                "-}",
                "-",
                "-function addPanel(",
                "-  location: PanelLocation,",
                "-  options: atom$WorkspaceAddPanelOptions,",
                "-): atom$Panel {",
                "-  switch (location) {",
                "-    case 'top':",
                "-      return atom.workspace.addTopPanel(options);",
                "-    case 'right':",
                "-      return atom.workspace.addRightPanel(options);",
                "-    case 'bottom':",
                "-      return atom.workspace.addBottomPanel(options);",
                "-    case 'left':",
                "-      return atom.workspace.addLeftPanel(options);",
                "-    case 'header':",
                "-      return atom.workspace.addHeaderPanel(options);",
                "-    default:",
                "-      throw new Error(`Invalid location: ${location}`);",
                "-  }",
                "-}",
                "diff --git a/pkg/commons-atom/spec/PanelRenderer-spec.js b/pkg/commons-atom/spec/PanelRenderer-spec.js",
                "deleted file mode 100644",
                "index aa357dc55..000000000",
                "--- a/pkg/commons-atom/spec/PanelRenderer-spec.js",
                "+++ /dev/null",
                "@@ -1,56 +0,0 @@",
                "-/**",
                "- * Copyright (c) 2015-present, Facebook, Inc.",
                "- * All rights reserved.",
                "- *",
                "- * This source code is licensed under the license found in the LICENSE file in",
                "- * the root directory of this source tree.",
                "- *",
                "- * @flow",
                "- * @format",
                "- */",
                "-",
                "-import PanelRenderer from '../PanelRenderer';",
                "-import invariant from 'assert';",
                "-",
                "-describe('PanelRenderer', () => {",
                "-  it('defers item creation', () => {",
                "-    const createItem = jasmine.createSpy().andReturn({});",
                "-    const renderer = new PanelRenderer({location: 'top', createItem});",
                "-    expect(createItem).not.toHaveBeenCalled();",
                "-    renderer.render({visible: false});",
                "-    expect(createItem).not.toHaveBeenCalled();",
                "-    renderer.render({visible: true});",
                "-    expect(createItem).toHaveBeenCalled();",
                "-    renderer.dispose();",
                "-  });",
                "-",
                "-  it('shows and hides the panel', () => {",
                "-    const createItem = jasmine.createSpy().andReturn({});",
                "-    const renderer = new PanelRenderer({location: 'top', createItem});",
                "-    renderer.render({visible: true});",
                "-    const panel = renderer._panel;",
                "-    invariant(panel != null);",
                "-    spyOn(panel, 'show');",
                "-    spyOn(panel, 'hide');",
                "-    renderer.render({visible: false});",
                "-    expect(panel.hide).toHaveBeenCalled();",
                "-    renderer.render({visible: true});",
                "-    expect(panel.show).toHaveBeenCalled();",
                "-    renderer.dispose();",
                "-  });",
                "-",
                "-  it('destroys the item when disposed', () => {",
                "-    const item = {",
                "-      createElement: () => document.createElement('div'),",
                "-      destroy: jasmine.createSpy(),",
                "-    };",
                "-    const createItem = () => item;",
                "-    const renderer = new PanelRenderer({location: 'top', createItem});",
                "-    // Force the creation of the item.",
                "-    renderer.render({visible: true});",
                "-    expect(item.destroy).not.toHaveBeenCalled();",
                "-    renderer.dispose();",
                "-    expect(item.destroy).toHaveBeenCalled();",
                "-    expect(item.destroy.calls.length).toBe(1);",
                "-  });",
                "-});",
                "diff --git a/pkg/nuclide-task-runner/lib/main.js b/pkg/nuclide-task-runner/lib/main.js",
                "index 03bd7030c..d8d04ccc8 100644",
                "--- a/pkg/nuclide-task-runner/lib/main.js",
                "+++ b/pkg/nuclide-task-runner/lib/main.js",
                "@@ -25,2 +25,4 @@ import type {ConsoleService} from 'atom-ide-ui';",
                "+import {bindObservableAsProps} from 'nuclide-commons-ui/bindObservableAsProps';",
                "+import {renderReactRoot} from 'nuclide-commons-ui/renderReactRoot';",
                " import syncAtomCommands from '../../commons-atom/sync-atom-commands';",
                "@@ -28,4 +30,4 @@ import createPackage from 'nuclide-commons-atom/createPackage';",
                " import {LocalStorageJsonTable} from '../../commons-atom/LocalStorageJsonTable';",
                "-import PanelRenderer from '../../commons-atom/PanelRenderer';",
                " import {observableFromSubscribeFunction} from 'nuclide-commons/event';",
                "+import {memoize} from 'lodash';",
                " import {arrayEqual} from 'nuclide-commons/collection';",
                "@@ -40,3 +42,4 @@ import * as Reducers from './redux/Reducers';",
                " import {trackingMiddleware} from './trackingMiddleware';",
                "-import {createPanelItem} from './ui/createPanelItem';",
                "+import getToolbarProps from './ui/getToolbarProps';",
                "+import Toolbar from './ui/Toolbar';",
                " import invariant from 'assert';",
                "@@ -50,2 +53,3 @@ import {Observable} from 'rxjs';",
                " import {makeToolbarButtonSpec} from 'nuclide-commons-ui/ToolbarUtils';",
                "+import * as React from 'react';",
                "@@ -68,3 +72,3 @@ class Activation {",
                "   _actionCreators: BoundActionCreators;",
                "-  _panelRenderer: PanelRenderer;",
                "+  _panel: atom$Panel;",
                "   _store: Store;",
                "@@ -108,5 +112,11 @@ class Activation {",
                "     this._actionCreators = bindActionCreators(Actions, this._store.dispatch);",
                "-    this._panelRenderer = new PanelRenderer({",
                "-      location: 'top',",
                "-      createItem: () => createPanelItem(this._store),",
                "+    this._panel = atom.workspace.addTopPanel({",
                "+      item: {",
                "+        getElement: memoize(() => {",
                "+          const props = getToolbarProps(this._store);",
                "+          const StatefulToolbar = bindObservableAsProps(props, Toolbar);",
                "+          return renderReactRoot(<StatefulToolbar />);",
                "+        }),",
                "+      },",
                "+      visible: false,",
                "     });",
                "@@ -118,3 +128,5 @@ class Activation {",
                "       }),",
                "-      this._panelRenderer,",
                "+      () => {",
                "+        this._panel.destroy();",
                "+      },",
                "       atom.commands.add('atom-workspace', {",
                "@@ -223,3 +235,7 @@ class Activation {",
                "         .subscribe(visible => {",
                "-          this._panelRenderer.render({visible});",
                "+          if (visible) {",
                "+            this._panel.show();",
                "+          } else {",
                "+            this._panel.hide();",
                "+          }",
                "         }),",
                "diff --git a/pkg/nuclide-task-runner/lib/ui/Toolbar.js b/pkg/nuclide-task-runner/lib/ui/Toolbar.js",
                "index 4ed75a7d7..b3e6cf806 100644",
                "--- a/pkg/nuclide-task-runner/lib/ui/Toolbar.js",
                "+++ b/pkg/nuclide-task-runner/lib/ui/Toolbar.js",
                "@@ -24,3 +24,3 @@ import * as Immutable from 'immutable';",
                "-type Props = {",
                "+export type Props = {",
                "   toolbarDisabled: boolean,",
                "@@ -39,3 +39,3 @@ type Props = {",
                "-export class Toolbar extends React.Component<Props> {",
                "+export default class Toolbar extends React.Component<Props> {",
                "   render(): React.Node {",
                "diff --git a/pkg/nuclide-task-runner/lib/ui/getToolbarProps.js b/pkg/nuclide-task-runner/lib/ui/getToolbarProps.js",
                "new file mode 100644",
                "index 000000000..de2498327",
                "--- /dev/null",
                "+++ b/pkg/nuclide-task-runner/lib/ui/getToolbarProps.js",
                "@@ -0,0 +1,101 @@",
                "+/**",
                "+ * Copyright (c) 2015-present, Facebook, Inc.",
                "+ * All rights reserved.",
                "+ *",
                "+ * This source code is licensed under the license found in the LICENSE file in",
                "+ * the root directory of this source tree.",
                "+ *",
                "+ * @flow",
                "+ * @format",
                "+ */",
                "+",
                "+import type {Store, TaskRunner} from '../types';",
                "+import type {Props} from './Toolbar';",
                "+",
                "+import {nextAnimationFrame, throttle} from 'nuclide-commons/observable';",
                "+import * as Actions from '../redux/Actions';",
                "+import * as React from 'react';",
                "+import {Observable} from 'rxjs';",
                "+import shallowequal from 'shallowequal';",
                "+",
                "+export default function getToolbarProps(store: Store): Observable<Props> {",
                "+  const staticProps = {",
                "+    runTask: taskMeta => {",
                "+      store.dispatch(Actions.runTask(taskMeta));",
                "+    },",
                "+    selectTaskRunner: taskRunner => {",
                "+      store.dispatch(Actions.selectTaskRunner(taskRunner, true));",
                "+    },",
                "+    stopRunningTask: () => {",
                "+      store.dispatch(Actions.stopTask());",
                "+    },",
                "+  };",
                "+",
                "+  // $FlowFixMe: We need to teach Flow about Symbol.observable",
                "+  const states = Observable.from(store).distinctUntilChanged();",
                "+",
                "+  // We don't want to refresh the UI with a \"pending\" state while we wait for the initial tasks to",
                "+  // become ready; that would cause too many updates in quick succession. So we make the parts of",
                "+  // the state related to the selected task \"sticky.\" Other parts of the state, however, we always",
                "+  // need to update immediately (e.g. progress).",
                "+  const stickyProps = states",
                "+    .filter(",
                "+      state =>",
                "+        state.initialPackagesActivated &&",
                "+        state.readyTaskRunners.count() === state.taskRunners.count(),",
                "+    )",
                "+    .startWith(store.getState())",
                "+    .map(state => ({",
                "+      taskRunners: state.taskRunners,",
                "+      statesForTaskRunners: state.statesForTaskRunners,",
                "+      activeTaskRunner: state.activeTaskRunner,",
                "+      iconComponent: state.activeTaskRunner",
                "+        ? state.activeTaskRunner.getIcon()",
                "+        : null,",
                "+      extraUiComponent: getExtraUiComponent(state.activeTaskRunner),",
                "+    }))",
                "+    .distinctUntilChanged(shallowequal);",
                "+",
                "+  const alwaysUpToDateProps = states.map(state => ({",
                "+    ...staticProps,",
                "+    toolbarDisabled:",
                "+      !state.initialPackagesActivated ||",
                "+      state.readyTaskRunners.count() !== state.taskRunners.count(),",
                "+    progress: state.runningTask ? state.runningTask.progress : null,",
                "+    taskIsRunning: state.runningTask != null,",
                "+    runningTaskIsCancelable: state.runningTask",
                "+      ? state.runningTask.metadata.cancelable !== false",
                "+      : undefined,",
                "+  }));",
                "+",
                "+  const props = Observable.combineLatest(",
                "+    stickyProps,",
                "+    alwaysUpToDateProps,",
                "+    (a, b) => ({",
                "+      ...a,",
                "+      ...b,",
                "+    }),",
                "+  ).let(throttle(() => nextAnimationFrame));",
                "+",
                "+  return props;",
                "+}",
                "+",
                "+// Since `getExtraUi` may create a React class dynamically, the classes are cached",
                "+const extraUiComponentCache = new WeakMap();",
                "+function getExtraUiComponent(",
                "+  taskRunner: ?TaskRunner,",
                "+): ?React.ComponentType<any> {",
                "+  if (!taskRunner) {",
                "+    return null;",
                "+  }",
                "+  let extraUi = extraUiComponentCache.get(taskRunner);",
                "+  if (extraUi != null) {",
                "+    return extraUi;",
                "+  }",
                "+  if (!taskRunner.getExtraUi) {",
                "+    return null;",
                "+  }",
                "+  extraUi = taskRunner.getExtraUi();",
                "+  extraUiComponentCache.set(taskRunner, extraUi);",
                "+  return extraUi;",
                "+}"
            ],
            "changed_files": [
                "pkg/commons-atom/PanelRenderer.js",
                "pkg/commons-atom/spec/PanelRenderer-spec.js",
                "pkg/nuclide-task-runner/lib/main.js",
                "pkg/nuclide-task-runner/lib/ui/Toolbar.js",
                "pkg/nuclide-task-runner/lib/ui/getToolbarProps.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: render",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: render",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "9e478cd1a2fe855ec4a245ed443ba53a1a3d07c0",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521138248,
            "hunks": 2,
            "message": "Native attach: handle square-bracketed process names on Linux Summary: Handle process names of the form [name] on Linux, which shouldn't be parsed as paths to get the base process name Reviewed By: ebluestein Differential Revision: D7281896 fbshipit-source-id: c1035afcea3355e66c9f409f3e973ebeba5b9dd5",
            "diff": [
                "diff --git a/pkg/nuclide-debugger-vsp/lib/NativeAttachUiComponent.js b/pkg/nuclide-debugger-vsp/lib/NativeAttachUiComponent.js",
                "index 3f6cdb776..797c71912 100644",
                "--- a/pkg/nuclide-debugger-vsp/lib/NativeAttachUiComponent.js",
                "+++ b/pkg/nuclide-debugger-vsp/lib/NativeAttachUiComponent.js",
                "@@ -209,5 +209,19 @@ export default class NativeAttachUiComponent extends React.Component<",
                "   _updateList = (processes: Array<ProcessInfo>): void => {",
                "+    // On Linux, process names for which only a name is available",
                "+    // are denoted as [name] in the commandWithArgs field. These",
                "+    // names often do not play well with basename (in particular,",
                "+    // some of the contain literal slashes) so handle them as a special",
                "+    // case.",
                "+    const noargsRegex = /^\\[(.*)\\]$/;",
                "+    const commandName = (name, withArgs) => {",
                "+      const match = withArgs.match(noargsRegex);",
                "+      if (match != null) {",
                "+        return match[1];",
                "+      }",
                "+      return nuclideUri.basename(name);",
                "+    };",
                "+",
                "     const processList = processes.map(process => {",
                "       return {",
                "-        process: nuclideUri.basename(process.command),",
                "+        process: commandName(process.command, process.commandWithArgs),",
                "         pid: process.pid,"
            ],
            "changed_files": [
                "pkg/nuclide-debugger-vsp/lib/NativeAttachUiComponent.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: attach",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: attach",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "f7931f96adbb655d3b0f2817598b375865336d4b",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520984197,
            "hunks": 4,
            "message": "Indent code lenses to match the text they're lensing Summary: Instead of displaying against the far left gutter like they are now, code lenses should be indented to the same level as the text they're displaying over. Also, by switching from using `rem` to set the font size to using `em` to set the font size, code lenses also scale with editor zoom (Cmd+= and Cmd+-) Reviewed By: ljw1004 Differential Revision: D7257731 fbshipit-source-id: eb43facc8e40ad9c618b47f6013c4b74e0fc5eaf",
            "diff": [
                "diff --git a/pkg/nuclide-ocaml/lib/CodeLensListener.js b/pkg/nuclide-ocaml/lib/CodeLensListener.js",
                "index d8362911c..e42a2369e 100644",
                "--- a/pkg/nuclide-ocaml/lib/CodeLensListener.js",
                "+++ b/pkg/nuclide-ocaml/lib/CodeLensListener.js",
                "@@ -173,2 +173,3 @@ export function observeForCodeLens(",
                "             const element = document.createElement('span');",
                "+            element.classList.add('code-lens-content');",
                "@@ -179,2 +180,5 @@ export function observeForCodeLens(",
                "+            const leadingWhitespace = document.createElement('span');",
                "+            leadingWhitespace.innerText = ' '.repeat(lens.range.start.column);",
                "+",
                "             // We do a span inside a div so that the tooltip and clickable area",
                "@@ -184,2 +188,3 @@ export function observeForCodeLens(",
                "             containingElement.classList.add('code-lens');",
                "+            containingElement.appendChild(leadingWhitespace);",
                "             containingElement.appendChild(element);",
                "diff --git a/pkg/nuclide-ocaml/styles/ui.less b/pkg/nuclide-ocaml/styles/ui.less",
                "index 9a9b560d1..d77243796 100644",
                "--- a/pkg/nuclide-ocaml/styles/ui.less",
                "+++ b/pkg/nuclide-ocaml/styles/ui.less",
                "@@ -4,3 +4,10 @@",
                "   color: @syntax-gutter-text-color;",
                "-  font-size: 1rem;",
                "+  line-height: 0;",
                "+  white-space: pre;",
                "+}",
                "+",
                "+.code-lens-content {",
                "+  font-size: 0.9em;",
                "+  font-style: italic;",
                "+  line-height: 1;",
                "   white-space: nowrap;"
            ],
            "changed_files": [
                "pkg/nuclide-ocaml/lib/CodeLensListener.js",
                "pkg/nuclide-ocaml/styles/ui.less"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code, editor",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: code",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "5c27ab15d1bdb6e6c3737963495a873af3989b3d",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520961126,
            "hunks": 4,
            "message": "HHVM Debugger: rotate log files if they exceed a certain size Reviewed By: velocityboy Differential Revision: D7248748 fbshipit-source-id: 68e0b3a71d3caf90647f7a9b3fc3292c46208cec",
            "diff": [
                "diff --git a/pkg/nuclide-debugger-hhvm-rpc/lib/main.js b/pkg/nuclide-debugger-hhvm-rpc/lib/main.js",
                "index b658fdf59..5d946ff64 100644",
                "--- a/pkg/nuclide-debugger-hhvm-rpc/lib/main.js",
                "+++ b/pkg/nuclide-debugger-hhvm-rpc/lib/main.js",
                "@@ -18,2 +18,3 @@ import os from 'os';",
                " import {runCommand} from 'nuclide-commons/process';",
                "+import fs from 'fs';",
                "@@ -132,2 +133,8 @@ async function _getHHVMLogFilePath(): Promise<string> {",
                "+  await _rotateHHVMLogs(path);",
                "+  await _createLogFile(path);",
                "+  return path;",
                "+}",
                "+",
                "+async function _createLogFile(path: string): Promise<void> {",
                "   // Ensure the log file exists, and is write-able by everyone so that",
                "@@ -140,5 +147,33 @@ async function _getHHVMLogFilePath(): Promise<string> {",
                "     }",
                "+    fs.close(fd, () => {});",
                "   } catch (_) {}",
                "+}",
                "-  return path;",
                "+async function _rotateHHVMLogs(path: string): Promise<void> {",
                "+  const fileStat = await fsPromise.stat(path);",
                "+",
                "+  // Cap the size of the log file so it can't grow forever.",
                "+  const MAX_LOG_FILE_SIZE_BYTES = 512 * 1024; // 0.5 MB",
                "+  const MAX_LOGS_TO_KEEP = 5;",
                "+  if (fileStat.size >= MAX_LOG_FILE_SIZE_BYTES) {",
                "+    // Rotate the logs.",
                "+    for (let i = MAX_LOGS_TO_KEEP - 1; i >= 0; i--) {",
                "+      const fromFile = i > 0 ? path + i : path;",
                "+      const toFile = path + (i + 1);",
                "+",
                "+      // eslint-disable-next-line no-await-in-loop",
                "+      const exists = await fsPromise.exists(toFile);",
                "+      if (exists) {",
                "+        try {",
                "+          // eslint-disable-next-line no-await-in-loop",
                "+          await fsPromise.unlink(toFile).catch(() => {});",
                "+        } catch (_) {}",
                "+      }",
                "+",
                "+      try {",
                "+        // eslint-disable-next-line no-await-in-loop",
                "+        await fsPromise.mv(fromFile, toFile).catch(() => {});",
                "+      } catch (_) {}",
                "+    }",
                "+  }",
                " }"
            ],
            "changed_files": [
                "pkg/nuclide-debugger-hhvm-rpc/lib/main.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: hhvm",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: hhvm",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "41b04dd0295f5c94d664a053433c93a975b01f10",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520881984,
            "hunks": 11,
            "message": "Native debugger: Change launch and attach args to object Summary: As above. Long and getting longer list of parameters hard to read at call sites so make them an object. Reviewed By: mostafaeweda Differential Revision: D7238074 fbshipit-source-id: 3de79f5eaa5f325d7425b9c703dfa2f5ef246dfb",
            "diff": [
                "diff --git a/pkg/nuclide-debugger-native/lib/main.js b/pkg/nuclide-debugger-native/lib/main.js",
                "index d99150eae..e5d07f816 100644",
                "--- a/pkg/nuclide-debugger-native/lib/main.js",
                "+++ b/pkg/nuclide-debugger-native/lib/main.js",
                "@@ -301,4 +301,6 @@ class Activation {",
                "         buckRoot,",
                "-        pid,",
                "-        nuclideUri.getPath(buckRoot),",
                "+        {",
                "+          pid,",
                "+          sourcePath: nuclideUri.getPath(buckRoot),",
                "+        },",
                "       );",
                "@@ -377,6 +379,8 @@ class Activation {",
                "         nuclideUri.join(buckRoot, relativeOutputPath),",
                "-        (runArguments.length ? runArguments : targetOutput.args) || [],",
                "-        remoteBuckRoot,",
                "-        env,",
                "-        remoteBuckRoot,",
                "+        {",
                "+          args: (runArguments.length ? runArguments : targetOutput.args) || [],",
                "+          cwd: remoteBuckRoot,",
                "+          env,",
                "+          sourcePath: remoteBuckRoot,",
                "+        },",
                "       );",
                "diff --git a/pkg/nuclide-debugger-vsp/lib/NativeAttachUiComponent.js b/pkg/nuclide-debugger-vsp/lib/NativeAttachUiComponent.js",
                "index 44a75de71..c0172ef80 100644",
                "--- a/pkg/nuclide-debugger-vsp/lib/NativeAttachUiComponent.js",
                "+++ b/pkg/nuclide-debugger-vsp/lib/NativeAttachUiComponent.js",
                "@@ -323,4 +323,6 @@ export default class NativeAttachUiComponent extends React.Component<",
                "       this.props.targetUri,",
                "-      pid,",
                "-      this.state.sourcePath,",
                "+      {",
                "+        pid,",
                "+        sourcePath: this.state.sourcePath,",
                "+      },",
                "     );",
                "diff --git a/pkg/nuclide-debugger-vsp/lib/NativeLaunchUiComponent.js b/pkg/nuclide-debugger-vsp/lib/NativeLaunchUiComponent.js",
                "index 299926021..db5d17462 100644",
                "--- a/pkg/nuclide-debugger-vsp/lib/NativeLaunchUiComponent.js",
                "+++ b/pkg/nuclide-debugger-vsp/lib/NativeLaunchUiComponent.js",
                "@@ -199,3 +199,3 @@ export default class NativeLaunchUiComponent extends React.Component<",
                "     const args = shellParse(nullthrows(this._args).getText());",
                "-    const workingDirectory = nullthrows(this._workingDirectory)",
                "+    const cwd = nullthrows(this._workingDirectory)",
                "       .getText()",
                "@@ -203,5 +203,3 @@ export default class NativeLaunchUiComponent extends React.Component<",
                "-    const environmentVariables = shellParse(",
                "-      nullthrows(this._environmentVariables).getText(),",
                "-    );",
                "+    const env = shellParse(nullthrows(this._environmentVariables).getText());",
                "@@ -216,6 +214,8 @@ export default class NativeLaunchUiComponent extends React.Component<",
                "       programUri,",
                "-      args,",
                "-      workingDirectory,",
                "-      environmentVariables,",
                "-      this.state.sourcePath,",
                "+      {",
                "+        args,",
                "+        cwd,",
                "+        env,",
                "+        sourcePath: this.state.sourcePath,",
                "+      },",
                "     );",
                "diff --git a/pkg/nuclide-debugger-vsp/lib/utils.js b/pkg/nuclide-debugger-vsp/lib/utils.js",
                "index fcc9c1cc9..67d6ef542 100644",
                "--- a/pkg/nuclide-debugger-vsp/lib/utils.js",
                "+++ b/pkg/nuclide-debugger-vsp/lib/utils.js",
                "@@ -52,2 +52,14 @@ const REMOTE_DEBUG_SERVICES_DELAYED_STARTUP_MS = 10 * 1000;",
                "+export type VspNativeDebuggerLaunchBuilderParms = {",
                "+  args: Array<string>,",
                "+  cwd: string,",
                "+  env: Array<string>,",
                "+  sourcePath: string,",
                "+};",
                "+",
                "+export type VspNativeDebuggerAttachBuilderParms = {",
                "+  pid: number,",
                "+  sourcePath: string,",
                "+};",
                "+",
                " export async function getPythonParLaunchProcessInfo(",
                "@@ -284,6 +296,3 @@ export async function getNativeVSPLaunchProcessInfo(",
                "   program: NuclideUri,",
                "-  args: Array<string>,",
                "-  cwd: string,",
                "-  env: Array<string>,",
                "-  sourcePath: string,",
                "+  args: VspNativeDebuggerLaunchBuilderParms,",
                " ): Promise<VspProcessInfo> {",
                "@@ -298,6 +307,3 @@ export async function getNativeVSPLaunchProcessInfo(",
                "       program: nuclideUri.getPath(program),",
                "-      args,",
                "-      cwd,",
                "-      env,",
                "-      sourcePath,",
                "+      ...args,",
                "     },",
                "@@ -310,4 +316,3 @@ export async function getNativeVSPAttachProcessInfo(",
                "   targetUri: NuclideUri,",
                "-  pid: number,",
                "-  sourcePath: string,",
                "+  args: VspNativeDebuggerAttachBuilderParms,",
                " ): Promise<VspProcessInfo> {",
                "@@ -315,10 +320,5 @@ export async function getNativeVSPAttachProcessInfo(",
                "-  return new VspProcessInfo(",
                "-    targetUri,",
                "-    'attach',",
                "-    adapter,",
                "-    adapterInfo,",
                "-    {pid, sourcePath},",
                "-    {threads: true},",
                "-  );",
                "+  return new VspProcessInfo(targetUri, 'attach', adapter, adapterInfo, args, {",
                "+    threads: true,",
                "+  });",
                " }"
            ],
            "changed_files": [
                "pkg/nuclide-debugger-native/lib/main.js",
                "pkg/nuclide-debugger-vsp/lib/NativeAttachUiComponent.js",
                "pkg/nuclide-debugger-vsp/lib/NativeLaunchUiComponent.js",
                "pkg/nuclide-debugger-vsp/lib/utils.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: parameter, attach",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: attach",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "7de15ad27434384af97a98fa79f351f8cdcbe3ed",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520974361,
            "hunks": 1,
            "message": "HHVM Debugger: Support terminate request command Summary: This adds support for a new \"terminateThread\" command that will kill the specified thread by raising a PHP fatal exception on it. This can be useful during  debugging for preventing a thread from continuing down a particular code path, or aborting before side effects are produced when debugging an issue. terminateThread is not yet available in the VS Code debugger protocol spec, so it is prefixed with \"fb_\" to denote it is Facebook-specific. Reviewed By: velocityboy Differential Revision: D6850122 fbshipit-source-id: e22150d1e0aa682baed55de9f15661235cf591fc",
            "diff": [
                "diff --git a/pkg/nuclide-debugger-hhvm-rpc/lib/hhvmDebugger.js b/pkg/nuclide-debugger-hhvm-rpc/lib/hhvmDebugger.js",
                "index 5c15aa4d2..fb6abaab9 100644",
                "--- a/pkg/nuclide-debugger-hhvm-rpc/lib/hhvmDebugger.js",
                "+++ b/pkg/nuclide-debugger-hhvm-rpc/lib/hhvmDebugger.js",
                "@@ -289,2 +289,5 @@ class HHVMDebuggerWrapper {",
                "               supportsStepInTargetsRequest: false,",
                "+",
                "+              // Experimental support for terminate thread",
                "+              supportsTerminateThread: true,",
                "             },"
            ],
            "changed_files": [
                "pkg/nuclide-debugger-hhvm-rpc/lib/hhvmDebugger.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code, hhvm, issue",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: hhvm",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "113a3f4b8462548fb3b1e043c3399af8463bcc55",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520551256,
            "hunks": 3,
            "message": "Nuclide VSP Debugger: Adapt OCaml debugger to the new client Summary: * The OCaml debugger initialization flow was dependent on the debugger being slow (hence, the creation of the sessioin would be complete by the time we get the breakpoint requests). But in the new debugger, we'd want to send the initialize event after the launch/attach request to mark that we're ready to process breakpoint & configuration requests * OCaml debugger is using the `name` property (part of VSP), hence, that's added to the implementation. Reviewed By: ebluestein Differential Revision: D7201979 fbshipit-source-id: 8d5678ff5298af764088b1dc1d9db07cf38e4155",
            "diff": [
                "diff --git a/modules/nuclide-debugger-vsps/vscode-ocaml/OCamlDebugger.js b/modules/nuclide-debugger-vsps/vscode-ocaml/OCamlDebugger.js",
                "index e133cef5d..a7df41a2a 100644",
                "--- a/modules/nuclide-debugger-vsps/vscode-ocaml/OCamlDebugger.js",
                "+++ b/modules/nuclide-debugger-vsps/vscode-ocaml/OCamlDebugger.js",
                "@@ -96,7 +96,2 @@ class OCamlDebugSession extends LoggingDebugSession {",
                "   ): void {",
                "-    // since this debug adapter can accept configuration requests like 'setBreakpoint' at any time,",
                "-    // we request them early by sending an 'initializeRequest' to the frontend.",
                "-    // The frontend will end the configuration sequence by calling 'configurationDone' request.",
                "-    this.sendEvent(new InitializedEvent());",
                "-",
                "     response.body = {",
                "@@ -124,2 +119,6 @@ class OCamlDebugSession extends LoggingDebugSession {",
                "       this._breakAfterStart = args.config.breakAfterStart;",
                "+",
                "+      // Now send the initialized event as we're ready to process breakpoint requests",
                "+      this.sendEvent(new InitializedEvent());",
                "+",
                "       this.sendResponse(response);",
                "diff --git a/pkg/nuclide-debugger-new/lib/vsp/DebugService.js b/pkg/nuclide-debugger-new/lib/vsp/DebugService.js",
                "index 46a05ea06..61f1e3b9c 100644",
                "--- a/pkg/nuclide-debugger-new/lib/vsp/DebugService.js",
                "+++ b/pkg/nuclide-debugger-new/lib/vsp/DebugService.js",
                "@@ -1319,3 +1319,6 @@ export default class DebugService implements IDebugService {",
                "-    const rawSource = process.getSource({path: uri}).raw;",
                "+    const rawSource = process.getSource({",
                "+      path: uri,",
                "+      name: nuclideUri.basename(uri),",
                "+    }).raw;"
            ],
            "changed_files": [
                "modules/nuclide-debugger-vsps/vscode-ocaml/OCamlDebugger.js",
                "pkg/nuclide-debugger-new/lib/vsp/DebugService.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: attach",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: code",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "e7cd3db3c385ad34c61c94d9f8719d80f04cb69f",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521492996,
            "hunks": 28,
            "message": "Autogenerate Attach/Launch Dialogs [1/N]: First Version Summary: This is the first functional version of autogenerating launch and attach dialogs from a declarative configuration. The `AutoGenLaunchAttachProvider` takes in a config of type `AutoGenConfig` and from that renders the `AutoGenLaunchAttachUiComponent`. For now this replaces the Node Launch, Node Attach, and Python Launch launch attach providers and components. I will next expand this to consume all other launch attach providers and then remove any common boilerplate. Reviewed By: mostafaeweda Differential Revision: D7175025 fbshipit-source-id: 48ae2e15e1ded49b666f346e22a5e319938ee003",
            "diff": [
                "diff --git a/pkg/nuclide-debugger-new/lib/main.js b/pkg/nuclide-debugger-new/lib/main.js",
                "index 99d5b6e8e..fa8f5dd92 100644",
                "--- a/pkg/nuclide-debugger-new/lib/main.js",
                "+++ b/pkg/nuclide-debugger-new/lib/main.js",
                "@@ -679,3 +679,2 @@ class Activation {",
                "         dialogMode={dialogMode}",
                "-        model={this._uiModel}",
                "         connectionChanged={(newValue: ?string) => {",
                "diff --git a/pkg/nuclide-debugger-new/lib/ui/DebuggerLaunchAttachUI.js b/pkg/nuclide-debugger-new/lib/ui/DebuggerLaunchAttachUI.js",
                "index 9fbe8df25..22d06c6cd 100644",
                "--- a/pkg/nuclide-debugger-new/lib/ui/DebuggerLaunchAttachUI.js",
                "+++ b/pkg/nuclide-debugger-new/lib/ui/DebuggerLaunchAttachUI.js",
                "@@ -25,13 +25,13 @@ import invariant from 'assert';",
                "-type PropsType = {",
                "-  dialogMode: DebuggerConfigAction,",
                "-  connection: string,",
                "-  connectionChanged: (newValue: ?string) => void,",
                "+type Props = {|",
                "+  +dialogMode: DebuggerConfigAction,",
                "+  +connection: string,",
                "+  +connectionChanged: (newValue: ?string) => void,",
                "   // $FlowFixMe",
                "-  connectionOptions: Array<{value: string, label: string}>,",
                "-  providers: Map<string, Array<DebuggerLaunchAttachProvider>>,",
                "-  dialogCloser: () => void,",
                "-};",
                "+  +connectionOptions: Array<{value: string, label: string}>,",
                "+  +providers: Map<string, Array<DebuggerLaunchAttachProvider>>,",
                "+  +dialogCloser: () => void,",
                "+|};",
                "-type StateType = {",
                "+type State = {",
                "   selectedProviderTab: ?string,",
                "@@ -63,10 +63,10 @@ function getLastUsedDebugger(",
                " export default class DebuggerLaunchAttachUI extends React.Component<",
                "-  PropsType,",
                "-  StateType,",
                "+  Props,",
                "+  State,",
                " > {",
                "-  props: PropsType;",
                "-  state: StateType;",
                "+  props: Props;",
                "+  state: State;",
                "   _disposables: UniversalDisposable;",
                "-  constructor(props: PropsType) {",
                "+  constructor(props: Props) {",
                "     super(props);",
                "@@ -127,3 +127,3 @@ export default class DebuggerLaunchAttachUI extends React.Component<",
                "-  componentWillReceiveProps(nextProps: PropsType) {",
                "+  componentWillReceiveProps(nextProps: Props) {",
                "     const host = nuclideUri.isRemote(nextProps.connection)",
                "diff --git a/pkg/nuclide-debugger-vsp/lib/AutoGenLaunchAttachProvider.js b/pkg/nuclide-debugger-vsp/lib/AutoGenLaunchAttachProvider.js",
                "new file mode 100644",
                "index 000000000..87e0fdaee",
                "--- /dev/null",
                "+++ b/pkg/nuclide-debugger-vsp/lib/AutoGenLaunchAttachProvider.js",
                "@@ -0,0 +1,107 @@",
                "+/**",
                "+ * Copyright (c) 2015-present, Facebook, Inc.",
                "+ * All rights reserved.",
                "+ *",
                "+ * This source code is licensed under the license found in the LICENSE file in",
                "+ * the root directory of this source tree.",
                "+ *",
                "+ * @flow",
                "+ * @format",
                "+ */",
                "+",
                "+import type {NuclideUri} from 'nuclide-commons/nuclideUri';",
                "+import type {DebuggerConfigAction} from 'nuclide-debugger-common';",
                "+import type {",
                "+  HandleDebugButtonClick,",
                "+  LaunchAttachProviderIsEnabled,",
                "+  AutoGenConfig,",
                "+} from './types';",
                "+",
                "+import invariant from 'assert';",
                "+import {DebuggerLaunchAttachProvider} from 'nuclide-debugger-common';",
                "+import * as React from 'react';",
                "+import AutoGenLaunchAttachUiComponent from './AutoGenLaunchAttachUiComponent';",
                "+",
                "+const LaunchAttachProviderDefaultIsEnabled = (",
                "+  action: DebuggerConfigAction,",
                "+  config: AutoGenConfig,",
                "+) => {",
                "+  return Promise.resolve(config[action] != null);",
                "+};",
                "+",
                "+const ActionNotSupportedButtonClick = (",
                "+  targetUri: NuclideUri,",
                "+  stringValues: Map<string, string>,",
                "+  booleanValues: Map<string, boolean>,",
                "+  enumValues: Map<string, string>,",
                "+  numberValues: Map<string, number>,",
                "+) => {",
                "+  throw new Error('This method should never be called');",
                "+};",
                "+",
                "+export default class AutoGenLaunchAttachProvider extends DebuggerLaunchAttachProvider {",
                "+  _config: AutoGenConfig;",
                "+  _handleLaunchButtonClick: HandleDebugButtonClick;",
                "+  _handleAttachButtonClick: HandleDebugButtonClick;",
                "+  _isEnabled: LaunchAttachProviderIsEnabled;",
                "+",
                "+  constructor(",
                "+    debuggingTypeName: string,",
                "+    targetUri: string,",
                "+    config: AutoGenConfig,",
                "+    handleLaunchButtonClick: ?HandleDebugButtonClick,",
                "+    handleAttachButtonClick: ?HandleDebugButtonClick,",
                "+    isEnabled?: LaunchAttachProviderIsEnabled = LaunchAttachProviderDefaultIsEnabled,",
                "+  ) {",
                "+    super(debuggingTypeName, targetUri);",
                "+    this._config = config;",
                "+    this._handleLaunchButtonClick =",
                "+      handleLaunchButtonClick || ActionNotSupportedButtonClick;",
                "+    this._handleAttachButtonClick =",
                "+      handleAttachButtonClick || ActionNotSupportedButtonClick;",
                "+    this._isEnabled = isEnabled;",
                "+  }",
                "+",
                "+  getCallbacksForAction(action: DebuggerConfigAction) {",
                "+    return {",
                "+      /**",
                "+       * Whether this provider is enabled or not.",
                "+       */",
                "+      isEnabled: async (): Promise<boolean> => {",
                "+        return this._isEnabled(action, this._config);",
                "+      },",
                "+",
                "+      /**",
                "+       * Returns a list of supported debugger types + environments for the specified action.",
                "+       */",
                "+      getDebuggerTypeNames: super.getCallbacksForAction(action)",
                "+        .getDebuggerTypeNames,",
                "+",
                "+      /**",
                "+       * Returns the UI component for configuring the specified debugger type and action.",
                "+       */",
                "+      getComponent: (",
                "+        debuggerTypeName: string,",
                "+        configIsValidChanged: (valid: boolean) => void,",
                "+      ) => {",
                "+        const launchOrAttachConfig = this._config[action];",
                "+        invariant(launchOrAttachConfig != null);",
                "+        return (",
                "+          <AutoGenLaunchAttachUiComponent",
                "+            targetUri={this.getTargetUri()}",
                "+            configIsValidChanged={configIsValidChanged}",
                "+            handleDebugButtonClick={",
                "+              action === 'launch'",
                "+                ? this._handleLaunchButtonClick",
                "+                : this._handleAttachButtonClick",
                "+            }",
                "+            config={launchOrAttachConfig}",
                "+            debuggerTypeName={debuggerTypeName}",
                "+          />",
                "+        );",
                "+      },",
                "+    };",
                "+  }",
                "+",
                "+  dispose(): void {}",
                "+}",
                "diff --git a/pkg/nuclide-debugger-vsp/lib/AutoGenLaunchAttachUiComponent.js b/pkg/nuclide-debugger-vsp/lib/AutoGenLaunchAttachUiComponent.js",
                "new file mode 100644",
                "index 000000000..83ad84b2b",
                "--- /dev/null",
                "+++ b/pkg/nuclide-debugger-vsp/lib/AutoGenLaunchAttachUiComponent.js",
                "@@ -0,0 +1,334 @@",
                "+/**",
                "+ * Copyright (c) 2015-present, Facebook, Inc.",
                "+ * All rights reserved.",
                "+ *",
                "+ * This source code is licensed under the license found in the LICENSE file in",
                "+ * the root directory of this source tree.",
                "+ *",
                "+ * @flow",
                "+ * @format",
                "+ */",
                "+",
                "+import type {NuclideUri} from 'nuclide-commons/nuclideUri';",
                "+import type {",
                "+  HandleDebugButtonClick,",
                "+  AutoGenProperty,",
                "+  AutoGenLaunchOrAttachConfig,",
                "+} from './types';",
                "+",
                "+import idx from 'idx';",
                "+import {Checkbox} from 'nuclide-commons-ui/Checkbox';",
                "+import RadioGroup from 'nuclide-commons-ui/RadioGroup';",
                "+import * as React from 'react';",
                "+import {AtomInput} from 'nuclide-commons-ui/AtomInput';",
                "+import nuclideUri from 'nuclide-commons/nuclideUri';",
                "+import {capitalize} from 'nuclide-commons/string';",
                "+import {",
                "+  serializeDebuggerConfig,",
                "+  deserializeDebuggerConfig,",
                "+} from 'nuclide-debugger-common';",
                "+import UniversalDisposable from 'nuclide-commons/UniversalDisposable';",
                "+import {getActiveScriptPath} from './utils';",
                "+",
                "+type Props = {|",
                "+  +targetUri: NuclideUri,",
                "+  +configIsValidChanged: (valid: boolean) => void,",
                "+  +config: AutoGenLaunchOrAttachConfig,",
                "+  +handleDebugButtonClick: HandleDebugButtonClick,",
                "+  +debuggerTypeName: string,",
                "+|};",
                "+",
                "+type State = {",
                "+  enumValues: Map<string, string>,",
                "+  booleanValues: Map<string, boolean>,",
                "+  stringValues: Map<string, string>,",
                "+};",
                "+",
                "+export default class AutoGenLaunchAttachUiComponent extends React.Component<",
                "+  Props,",
                "+  State,",
                "+> {",
                "+  _disposables: UniversalDisposable;",
                "+",
                "+  constructor(props: Props) {",
                "+    super(props);",
                "+    this._disposables = new UniversalDisposable();",
                "+    this.state = {",
                "+      stringValues: new Map(),",
                "+      booleanValues: new Map(),",
                "+      enumValues: new Map(),",
                "+    };",
                "+  }",
                "+",
                "+  _getConfigurationProperties(): AutoGenProperty[] {",
                "+    const {config} = this.props;",
                "+    return config.properties;",
                "+  }",
                "+",
                "+  _populateDefaultValues(",
                "+    config: AutoGenLaunchOrAttachConfig,",
                "+    stringValues: Map<string, string>,",
                "+    booleanValues: Map<string, boolean>,",
                "+    enumValues: Map<string, string>,",
                "+  ): void {",
                "+    config.properties.map(property => {",
                "+      const {name, type} = property;",
                "+      const itemType = idx(property, _ => _.itemType);",
                "+      if (",
                "+        type === 'string' ||",
                "+        (type === 'array' && itemType === 'string') ||",
                "+        type === 'object' ||",
                "+        type === 'number'",
                "+      ) {",
                "+        const existingValue = stringValues.get(name);",
                "+        if (",
                "+          existingValue == null &&",
                "+          typeof property.defaultValue !== 'undefined'",
                "+        ) {",
                "+          // String(propertyDescription.default) deals with both strings and numbers",
                "+          const defaultValue =",
                "+            type === 'string' || type === 'number'",
                "+              ? String(property.defaultValue)",
                "+              : '';",
                "+          stringValues.set(name, defaultValue);",
                "+        }",
                "+      } else if (type === 'boolean') {",
                "+        const existingValue = booleanValues.get(name);",
                "+        if (",
                "+          existingValue == null &&",
                "+          typeof property.defaultValue !== 'undefined' &&",
                "+          property.defaultValue != null &&",
                "+          typeof property.defaultValue === 'boolean'",
                "+        ) {",
                "+          booleanValues.set(name, property.defaultValue);",
                "+        } else {",
                "+          booleanValues.set(name, false);",
                "+        }",
                "+      } else if (type === 'enum' && property.enums != null) {",
                "+        const existingValue = enumValues.get(name);",
                "+        if (",
                "+          existingValue == null &&",
                "+          typeof property.defaultValue !== 'undefined' &&",
                "+          property.defaultValue != null &&",
                "+          typeof property.defaultValue === 'string'",
                "+        ) {",
                "+          enumValues.set(name, property.defaultValue);",
                "+        }",
                "+      }",
                "+    });",
                "+  }",
                "+",
                "+  _getSerializationArgs(props: Props) {",
                "+    const {targetUri, config, debuggerTypeName} = props;",
                "+    const args = [",
                "+      nuclideUri.isRemote(targetUri)",
                "+        ? nuclideUri.getHostname(targetUri)",
                "+        : 'local',",
                "+      config.launch ? 'launch' : 'attach',",
                "+      debuggerTypeName,",
                "+    ];",
                "+    return args;",
                "+  }",
                "+",
                "+  _deserializeDebuggerConfig(props: Props): void {",
                "+    deserializeDebuggerConfig(",
                "+      ...this._getSerializationArgs(props),",
                "+      (transientSettings, savedSettings) => {",
                "+        const stringValues = new Map(savedSettings.stringValues || []);",
                "+        const {config} = props;",
                "+        if (config.launch) {",
                "+          const scriptPath =",
                "+            stringValues.get(config.scriptPropertyName) ||",
                "+            getActiveScriptPath(config.scriptExtension);",
                "+          if (scriptPath !== '') {",
                "+            stringValues.set(config.scriptPropertyName, scriptPath);",
                "+          }",
                "+          const cwd =",
                "+            stringValues.get(config.cwdPropertyName) ||",
                "+            (scriptPath.length > 0 ? nuclideUri.dirname(scriptPath) : '');",
                "+          if (cwd !== '') {",
                "+            stringValues.set(config.cwdPropertyName, cwd);",
                "+          }",
                "+        }",
                "+        const numberValues = new Map(savedSettings.numberValues || []);",
                "+        numberValues.forEach((value, key) => {",
                "+          if (value != null) {",
                "+            stringValues.set(key, String(value));",
                "+          }",
                "+        });",
                "+        const booleanValues = new Map(savedSettings.booleanValues || []);",
                "+        const enumValues = new Map(savedSettings.enumValues || []);",
                "+        this._populateDefaultValues(",
                "+          config,",
                "+          stringValues,",
                "+          booleanValues,",
                "+          enumValues,",
                "+        );",
                "+        this.setState(",
                "+          {",
                "+            stringValues,",
                "+            booleanValues,",
                "+            enumValues,",
                "+          },",
                "+          () => props.configIsValidChanged(this._debugButtonShouldEnable()),",
                "+        );",
                "+      },",
                "+    );",
                "+    props.configIsValidChanged(this._debugButtonShouldEnable());",
                "+  }",
                "+",
                "+  componentWillReceiveProps(nextProps: Props) {",
                "+    if (nextProps.debuggerTypeName !== this.props.debuggerTypeName) {",
                "+      this._deserializeDebuggerConfig(nextProps);",
                "+    }",
                "+  }",
                "+",
                "+  componentWillMount(): void {",
                "+    this._deserializeDebuggerConfig(this.props);",
                "+  }",
                "+",
                "+  componentDidMount(): void {",
                "+    this._disposables.add(",
                "+      atom.commands.add('atom-workspace', {",
                "+        'core:confirm': async () => {",
                "+          if (this._debugButtonShouldEnable()) {",
                "+            await this._handleDebugButtonClick();",
                "+          }",
                "+        },",
                "+      }),",
                "+    );",
                "+  }",
                "+",
                "+  componentWillUnmount(): void {",
                "+    this._disposables.dispose();",
                "+  }",
                "+",
                "+  _valueExists(property: AutoGenProperty): boolean {",
                "+    const {name, type} = property;",
                "+    if (type === 'string') {",
                "+      const value = this.state.stringValues.get(name);",
                "+      return value != null && value !== '';",
                "+    } else if (type === 'number') {",
                "+      const value = this.state.stringValues.get(name);",
                "+      return value != null && !isNaN(value);",
                "+    }",
                "+    return false;",
                "+  }",
                "+",
                "+  _debugButtonShouldEnable(): boolean {",
                "+    return this._getConfigurationProperties()",
                "+      .filter(p => p.required)",
                "+      .every(p => this._valueExists(p));",
                "+  }",
                "+",
                "+  _getComponentForProperty(property: AutoGenProperty): React.Node {",
                "+    const {name, type, description, required} = property;",
                "+    const formattedName =",
                "+      capitalize(name).replace(/([a-z])([A-Z])/, '$1 $2') +",
                "+      (required ? ' (Required)' : '');",
                "+    const nameLabel = <label>{formattedName}:</label>;",
                "+    const itemType = idx(property, _ => _.itemType);",
                "+    if (",
                "+      type === 'string' ||",
                "+      (type === 'array' && itemType === 'string') ||",
                "+      type === 'object' ||",
                "+      type === 'number'",
                "+    ) {",
                "+      const value = this.state.stringValues.get(name) || '';",
                "+      return (",
                "+        <div>",
                "+          {nameLabel}",
                "+          <AtomInput",
                "+            key={this.props.debuggerTypeName + ':' + name}",
                "+            placeholderText={description}",
                "+            value={value}",
                "+            onDidChange={newValue => {",
                "+              this.state.stringValues.set(name, newValue);",
                "+              this.props.configIsValidChanged(this._debugButtonShouldEnable());",
                "+            }}",
                "+          />",
                "+        </div>",
                "+      );",
                "+    } else if (type === 'boolean') {",
                "+      const checked = this.state.booleanValues.get(name) || false;",
                "+      return (",
                "+        <div>",
                "+          <div>{nameLabel}</div>",
                "+          <Checkbox",
                "+            checked={checked}",
                "+            label={description}",
                "+            onChange={newValue => {",
                "+              this.state.booleanValues.set(name, newValue);",
                "+              this.props.configIsValidChanged(this._debugButtonShouldEnable());",
                "+            }}",
                "+          />",
                "+        </div>",
                "+      );",
                "+    } else if (type === 'enum' && property.enums != null) {",
                "+      const enums = property.enums;",
                "+      const selectedValue = this.state.enumValues.get(name) || '';",
                "+      return (",
                "+        <div>",
                "+          {nameLabel}",
                "+          <RadioGroup",
                "+            selectedIndex={enums.indexOf(selectedValue)}",
                "+            optionLabels={enums.map((enumValue, i) => (",
                "+              <label key={i}>{enumValue}</label>",
                "+            ))}",
                "+            onSelectedChange={index => {",
                "+              this.state.enumValues.set(name, enums[index]);",
                "+              this.props.configIsValidChanged(this._debugButtonShouldEnable());",
                "+            }}",
                "+          />",
                "+        </div>",
                "+      );",
                "+    }",
                "+    return (",
                "+      <div>",
                "+        <label>NO TRANSLATION YET FOR: {capitalize(name)}</label>",
                "+        <hr />",
                "+      </div>",
                "+    );",
                "+  }",
                "+",
                "+  _renderHeader(): ?React.Node {",
                "+    const {config} = this.props;",
                "+    return config.header != null ? config.header : null;",
                "+  }",
                "+",
                "+  render(): React.Node {",
                "+    return (",
                "+      <div className=\"block\">",
                "+        {this._renderHeader()}",
                "+        {this._getConfigurationProperties().map(property =>",
                "+          this._getComponentForProperty(property),",
                "+        )}",
                "+      </div>",
                "+    );",
                "+  }",
                "+",
                "+  _handleDebugButtonClick = async (): Promise<void> => {",
                "+    const numberValues = new Map();",
                "+    this._getConfigurationProperties()",
                "+      .filter(property => property.type === 'number')",
                "+      .forEach(property => {",
                "+        const {name} = property;",
                "+        numberValues.set(name, Number(this.state.stringValues.get(name)));",
                "+        this.state.stringValues.delete(name);",
                "+      });",
                "+    await this.props.handleDebugButtonClick(",
                "+      this.props.targetUri,",
                "+      this.state.stringValues,",
                "+      this.state.booleanValues,",
                "+      this.state.enumValues,",
                "+      numberValues,",
                "+    );",
                "+",
                "+    serializeDebuggerConfig(...this._getSerializationArgs(this.props), {",
                "+      stringValues: Array.from(this.state.stringValues.entries()),",
                "+      booleanValues: Array.from(this.state.booleanValues.entries()),",
                "+      enumValues: Array.from(this.state.enumValues.entries()),",
                "+      numberValues: Array.from(numberValues),",
                "+    });",
                "+  };",
                "+}",
                "diff --git a/pkg/nuclide-debugger-vsp/lib/NodeAttachUiComponent.js b/pkg/nuclide-debugger-vsp/lib/NodeAttachUiComponent.js",
                "deleted file mode 100644",
                "index 2a8272d67..000000000",
                "--- a/pkg/nuclide-debugger-vsp/lib/NodeAttachUiComponent.js",
                "+++ /dev/null",
                "@@ -1,138 +0,0 @@",
                "-/**",
                "- * Copyright (c) 2015-present, Facebook, Inc.",
                "- * All rights reserved.",
                "- *",
                "- * This source code is licensed under the license found in the LICENSE file in",
                "- * the root directory of this source tree.",
                "- *",
                "- * @flow",
                "- * @format",
                "- */",
                "-",
                "-import * as React from 'react';",
                "-import {AtomInput} from 'nuclide-commons-ui/AtomInput';",
                "-import nuclideUri from 'nuclide-commons/nuclideUri';",
                "-import nullthrows from 'nullthrows';",
                "-import {",
                "-  serializeDebuggerConfig,",
                "-  deserializeDebuggerConfig,",
                "-} from 'nuclide-debugger-common';",
                "-import {getDebuggerService} from '../../commons-atom/debugger';",
                "-import {track} from '../../nuclide-analytics';",
                "-import UniversalDisposable from 'nuclide-commons/UniversalDisposable';",
                "-import {getNodeAttachProcessInfo} from './utils';",
                "-",
                "-import type {NuclideUri} from 'nuclide-commons/nuclideUri';",
                "-",
                "-type Props = {|",
                "-  +targetUri: NuclideUri,",
                "-  +configIsValidChanged: (valid: boolean) => void,",
                "-|};",
                "-",
                "-type State = {",
                "-  port: string,",
                "-};",
                "-",
                "-export default class NodeScriptAttachUiComponent extends React.Component<",
                "-  Props,",
                "-  State,",
                "-> {",
                "-  _disposables: UniversalDisposable;",
                "-  _port: ?AtomInput;",
                "-",
                "-  constructor(props: Props) {",
                "-    super(props);",
                "-    this._disposables = new UniversalDisposable();",
                "-    this.state = {",
                "-      port: '',",
                "-    };",
                "-  }",
                "-",
                "-  _getSerializationArgs() {",
                "-    return [",
                "-      nuclideUri.isRemote(this.props.targetUri)",
                "-        ? nuclideUri.getHostname(this.props.targetUri)",
                "-        : 'local',",
                "-      'attach',",
                "-      'node',",
                "-    ];",
                "-  }",
                "-",
                "-  setState(newState: Object): void {",
                "-    super.setState(newState);",
                "-    this.props.configIsValidChanged(this._debugButtonShouldEnable());",
                "-  }",
                "-",
                "-  componentDidMount(): void {",
                "-    deserializeDebuggerConfig(",
                "-      ...this._getSerializationArgs(),",
                "-      (transientSettings, savedSettings) => {",
                "-        this.setState({",
                "-          port: savedSettings.port || '',",
                "-        });",
                "-      },",
                "-    );",
                "-",
                "-    if (this._port != null) {",
                "-      this._port.focus();",
                "-    }",
                "-",
                "-    this.props.configIsValidChanged(this._debugButtonShouldEnable());",
                "-    this._disposables.add(",
                "-      atom.commands.add('atom-workspace', {",
                "-        'core:confirm': () => {",
                "-          if (this._debugButtonShouldEnable()) {",
                "-            this._handleAttachButtonClick();",
                "-          }",
                "-        },",
                "-      }),",
                "-    );",
                "-  }",
                "-",
                "-  componentWillUnmount() {",
                "-    this._disposables.dispose();",
                "-  }",
                "-",
                "-  _debugButtonShouldEnable(): boolean {",
                "-    const {port} = this.state;",
                "-    return port.length > 0 && !isNaN(port);",
                "-  }",
                "-",
                "-  render(): React.Node {",
                "-    return (",
                "-      <div className=\"block\">",
                "-        <p>Attach to a running node.js process</p>",
                "-        <label>Debug port number: </label>",
                "-        <AtomInput",
                "-          ref={input => {",
                "-            this._port = input;",
                "-          }}",
                "-          tabIndex=\"1\"",
                "-          placeholderText=\"Node debug port (e.g. 5858 or 9229)\"",
                "-          value={this.state.port}",
                "-          onDidChange={port => this.setState({port})}",
                "-        />",
                "-      </div>",
                "-    );",
                "-  }",
                "-",
                "-  _handleAttachButtonClick = async (): Promise<void> => {",
                "-    track('fb-node-debugger-attach-from-dialog');",
                "-    const port = Number(",
                "-      nullthrows(this._port)",
                "-        .getText()",
                "-        .trim(),",
                "-    );",
                "-    const attachInfo = await getNodeAttachProcessInfo(",
                "-      this.props.targetUri,",
                "-      port,",
                "-    );",
                "-",
                "-    const debuggerService = await getDebuggerService();",
                "-    debuggerService.startDebugging(attachInfo);",
                "-",
                "-    serializeDebuggerConfig(...this._getSerializationArgs(), {",
                "-      port: this.state.port,",
                "-    });",
                "-  };",
                "-}",
                "diff --git a/pkg/nuclide-debugger-vsp/lib/NodeLaunchAttachProvider.js b/pkg/nuclide-debugger-vsp/lib/NodeLaunchAttachProvider.js",
                "deleted file mode 100644",
                "index a2ffec881..000000000",
                "--- a/pkg/nuclide-debugger-vsp/lib/NodeLaunchAttachProvider.js",
                "+++ /dev/null",
                "@@ -1,69 +0,0 @@",
                "-/**",
                "- * Copyright (c) 2015-present, Facebook, Inc.",
                "- * All rights reserved.",
                "- *",
                "- * This source code is licensed under the license found in the LICENSE file in",
                "- * the root directory of this source tree.",
                "- *",
                "- * @flow",
                "- * @format",
                "- */",
                "-",
                "-import {DebuggerLaunchAttachProvider} from 'nuclide-debugger-common';",
                "-import * as React from 'react';",
                "-import NodeLaunchUiComponent from './NodeLaunchUiComponent';",
                "-import NodeAttachUiComponent from './NodeAttachUiComponent';",
                "-import invariant from 'assert';",
                "-",
                "-import type {DebuggerConfigAction} from 'nuclide-debugger-common';",
                "-",
                "-export default class NodeLaunchAttachProvider extends DebuggerLaunchAttachProvider {",
                "-  constructor(targetUri: string) {",
                "-    super('Node', targetUri);",
                "-  }",
                "-",
                "-  getCallbacksForAction(action: DebuggerConfigAction) {",
                "-    return {",
                "-      /**",
                "-       * Whether this provider is enabled or not.",
                "-       */",
                "-      isEnabled: async () => {",
                "-        return true;",
                "-      },",
                "-",
                "-      /**",
                "-       * Returns a list of supported debugger types + environments for the specified action.",
                "-       */",
                "-      getDebuggerTypeNames: super.getCallbacksForAction(action)",
                "-        .getDebuggerTypeNames,",
                "-",
                "-      /**",
                "-       * Returns the UI component for configuring the specified debugger type and action.",
                "-       */",
                "-      getComponent: (",
                "-        debuggerTypeName: string,",
                "-        configIsValidChanged: (valid: boolean) => void,",
                "-      ) => {",
                "-        if (action === 'launch') {",
                "-          return (",
                "-            <NodeLaunchUiComponent",
                "-              targetUri={this.getTargetUri()}",
                "-              configIsValidChanged={configIsValidChanged}",
                "-            />",
                "-          );",
                "-        } else if (action === 'attach') {",
                "-          return (",
                "-            <NodeAttachUiComponent",
                "-              targetUri={this.getTargetUri()}",
                "-              configIsValidChanged={configIsValidChanged}",
                "-            />",
                "-          );",
                "-        } else {",
                "-          invariant(false, 'Unrecognized action for component.');",
                "-        }",
                "-      },",
                "-    };",
                "-  }",
                "-",
                "-  dispose(): void {}",
                "-}",
                "diff --git a/pkg/nuclide-debugger-vsp/lib/NodeLaunchUiComponent.js b/pkg/nuclide-debugger-vsp/lib/NodeLaunchUiComponent.js",
                "deleted file mode 100644",
                "index 4fd2457a7..000000000",
                "--- a/pkg/nuclide-debugger-vsp/lib/NodeLaunchUiComponent.js",
                "+++ /dev/null",
                "@@ -1,262 +0,0 @@",
                "-/**",
                "- * Copyright (c) 2015-present, Facebook, Inc.",
                "- * All rights reserved.",
                "- *",
                "- * This source code is licensed under the license found in the LICENSE file in",
                "- * the root directory of this source tree.",
                "- *",
                "- * @flow",
                "- * @format",
                "- */",
                "-",
                "-import * as React from 'react';",
                "-import {AtomInput} from 'nuclide-commons-ui/AtomInput';",
                "-import nuclideUri from 'nuclide-commons/nuclideUri';",
                "-import nullthrows from 'nullthrows';",
                "-import {shellParse} from 'nuclide-commons/string';",
                "-import {",
                "-  serializeDebuggerConfig,",
                "-  deserializeDebuggerConfig,",
                "-} from 'nuclide-debugger-common';",
                "-import {getDebuggerService} from '../../commons-atom/debugger';",
                "-import {track} from '../../nuclide-analytics';",
                "-import UniversalDisposable from 'nuclide-commons/UniversalDisposable';",
                "-import {getNodeLaunchProcessInfo} from './utils';",
                "-",
                "-import type {NuclideUri} from 'nuclide-commons/nuclideUri';",
                "-",
                "-function getActiveScriptPath(): string {",
                "-  const center = atom.workspace.getCenter",
                "-    ? atom.workspace.getCenter()",
                "-    : atom.workspace;",
                "-  const activeEditor: ?atom$TextEditor = center.getActiveTextEditor();",
                "-  if (",
                "-    activeEditor == null ||",
                "-    !activeEditor.getPath() ||",
                "-    !nullthrows(activeEditor.getPath()).endsWith('.js')",
                "-  ) {",
                "-    return '';",
                "-  }",
                "-  return nuclideUri.getPath(nullthrows(activeEditor.getPath()));",
                "-}",
                "-",
                "-type Props = {|",
                "-  +targetUri: NuclideUri,",
                "-  +configIsValidChanged: (valid: boolean) => void,",
                "-|};",
                "-",
                "-type State = {",
                "-  scriptPath: string,",
                "-  nodePath: string,",
                "-  args: string,",
                "-  environmentVariables: string,",
                "-  workingDirectory: string,",
                "-  outFiles: string,",
                "-};",
                "-",
                "-export default class NodeScriptLaunchUiComponent extends React.Component<",
                "-  Props,",
                "-  State,",
                "-> {",
                "-  _disposables: UniversalDisposable;",
                "-",
                "-  _args: ?AtomInput;",
                "-  _environmentVariables: ?AtomInput;",
                "-  _nodePath: ?AtomInput;",
                "-  _outFiles: ?AtomInput;",
                "-  _scriptPath: ?AtomInput;",
                "-  _workingDirectory: ?AtomInput;",
                "-",
                "-  constructor(props: Props) {",
                "-    super(props);",
                "-    this._disposables = new UniversalDisposable();",
                "-    this.state = {",
                "-      scriptPath: '',",
                "-      nodePath: '',",
                "-      args: '',",
                "-      environmentVariables: '',",
                "-      workingDirectory: '',",
                "-      outFiles: '',",
                "-    };",
                "-  }",
                "-",
                "-  _getSerializationArgs() {",
                "-    return [",
                "-      nuclideUri.isRemote(this.props.targetUri)",
                "-        ? nuclideUri.getHostname(this.props.targetUri)",
                "-        : 'local',",
                "-      'launch',",
                "-      'node',",
                "-    ];",
                "-  }",
                "-",
                "-  setState(newState: Object): void {",
                "-    super.setState(newState);",
                "-    this.props.configIsValidChanged(this._debugButtonShouldEnable());",
                "-  }",
                "-",
                "-  componentDidMount(): void {",
                "-    deserializeDebuggerConfig(",
                "-      ...this._getSerializationArgs(),",
                "-      (transientSettings, savedSettings) => {",
                "-        const scriptPath = savedSettings.scriptPath || getActiveScriptPath();",
                "-        const workingDirectory =",
                "-          savedSettings.workingDirectory ||",
                "-          (scriptPath.length > 0 ? nuclideUri.dirname(scriptPath) : '');",
                "-        this.setState({",
                "-          scriptPath,",
                "-          nodePath: savedSettings.nodePath || '',",
                "-          args: savedSettings.args || '',",
                "-          environmentVariables: savedSettings.environmentVariables || '',",
                "-          workingDirectory,",
                "-          outFiles: savedSettings.outFiles || '',",
                "-        });",
                "-      },",
                "-    );",
                "-",
                "-    const scriptPathInput = this._scriptPath;",
                "-    if (scriptPathInput != null) {",
                "-      scriptPathInput.focus();",
                "-    }",
                "-",
                "-    this.props.configIsValidChanged(this._debugButtonShouldEnable());",
                "-    this._disposables.add(",
                "-      atom.commands.add('atom-workspace', {",
                "-        'core:confirm': () => {",
                "-          if (this._debugButtonShouldEnable()) {",
                "-            this._handleLaunchButtonClick();",
                "-          }",
                "-        },",
                "-      }),",
                "-    );",
                "-  }",
                "-",
                "-  componentWillUnmount() {",
                "-    this._disposables.dispose();",
                "-  }",
                "-",
                "-  _debugButtonShouldEnable(): boolean {",
                "-    const {scriptPath} = this.state;",
                "-    return scriptPath.length > 0;",
                "-  }",
                "-",
                "-  render(): React.Node {",
                "-    return (",
                "-      <div className=\"block\">",
                "-        <p>This is intended to debug node.js files (for node version 6.3+).</p>",
                "-        <label>Script Path: </label>",
                "-        <AtomInput",
                "-          ref={input => {",
                "-            this._scriptPath = input;",
                "-          }}",
                "-          tabIndex=\"1\"",
                "-          placeholderText=\"Input the script path you want to launch\"",
                "-          value={this.state.scriptPath}",
                "-          onDidChange={value => this.setState({scriptPath: value})}",
                "-        />",
                "-        <label>(Optional) Node Runtime Path: </label>",
                "-        <p>Will use Nuclide's node version if not provided.</p>",
                "-        <AtomInput",
                "-          ref={input => {",
                "-            this._nodePath = input;",
                "-          }}",
                "-          tabIndex=\"2\"",
                "-          placeholderText=\"Node executable path (e.g. /usr/local/bin/node)\"",
                "-          value={this.state.nodePath}",
                "-          onDidChange={value => this.setState({nodePath: value})}",
                "-        />",
                "-        <label>(Optional) Arguments: </label>",
                "-        <AtomInput",
                "-          ref={input => {",
                "-            this._args = input;",
                "-          }}",
                "-          tabIndex=\"3\"",
                "-          placeholderText=\"Arguments to the executable\"",
                "-          value={this.state.args}",
                "-          onDidChange={value => this.setState({args: value})}",
                "-        />",
                "-        <label>(Optional) Environment Variables: </label>",
                "-        <AtomInput",
                "-          ref={input => {",
                "-            this._environmentVariables = input;",
                "-          }}",
                "-          tabIndex=\"4\"",
                "-          placeholderText=\"Environment variables (e.g., SHELL=/bin/bash PATH=/bin)\"",
                "-          value={this.state.environmentVariables}",
                "-          onDidChange={value => this.setState({environmentVariables: value})}",
                "-        />",
                "-        <label>(Optional) Working directory: </label>",
                "-        <AtomInput",
                "-          ref={input => {",
                "-            this._workingDirectory = input;",
                "-          }}",
                "-          tabIndex=\"5\"",
                "-          placeholderText=\"Working directory for the launched executable\"",
                "-          value={this.state.workingDirectory}",
                "-          onDidChange={value => this.setState({workingDirectory: value})}",
                "-        />",
                "-        <label>(Optional) source maps output files: </label>",
                "-        <AtomInput",
                "-          ref={input => {",
                "-            this._outFiles = input;",
                "-          }}",
                "-          tabIndex=\"6\"",
                "-          placeholderText=\"Output files pattern (e.g. $projectRoot/out/**/*.js)\"",
                "-          value={this.state.outFiles}",
                "-          onDidChange={value => this.setState({outFiles: value})}",
                "-        />",
                "-      </div>",
                "-    );",
                "-  }",
                "-",
                "-  _handleLaunchButtonClick = async (): Promise<void> => {",
                "-    track('fb-node-debugger-launch-from-dialog');",
                "-    const nodePath = nullthrows(this._nodePath)",
                "-      .getText()",
                "-      .trim();",
                "-    const scriptPath = nullthrows(this._scriptPath)",
                "-      .getText()",
                "-      .trim();",
                "-    const args = shellParse(nullthrows(this._args).getText());",
                "-    const workingDirectory = nullthrows(this._workingDirectory)",
                "-      .getText()",
                "-      .trim();",
                "-    const outFiles = nullthrows(this._outFiles)",
                "-      .getText()",
                "-      .trim();",
                "-    const environmentVariables = {};",
                "-    shellParse(nullthrows(this._environmentVariables).getText()).forEach(",
                "-      variable => {",
                "-        const [key, value] = variable.split('=');",
                "-        environmentVariables[key] = value;",
                "-      },",
                "-    );",
                "-",
                "-    const {hostname} = nuclideUri.parse(this.props.targetUri);",
                "-    const scriptUri =",
                "-      hostname != null",
                "-        ? nuclideUri.createRemoteUri(hostname, scriptPath)",
                "-        : scriptPath;",
                "-",
                "-    const launchInfo = await getNodeLaunchProcessInfo(",
                "-      scriptUri,",
                "-      nodePath,",
                "-      args,",
                "-      workingDirectory,",
                "-      environmentVariables,",
                "-      outFiles,",
                "-    );",
                "-",
                "-    const debuggerService = await getDebuggerService();",
                "-    debuggerService.startDebugging(launchInfo);",
                "-",
                "-    serializeDebuggerConfig(...this._getSerializationArgs(), {",
                "-      nodePath: this.state.nodePath,",
                "-      scriptPath: this.state.scriptPath,",
                "-      args: this.state.args,",
                "-      environmentVariables: this.state.environmentVariables,",
                "-      workingDirectory: this.state.workingDirectory,",
                "-      outFiles: this.state.outFiles,",
                "-    });",
                "-  };",
                "-}",
                "diff --git a/pkg/nuclide-debugger-vsp/lib/PrepackLaunchUIComponent.js b/pkg/nuclide-debugger-vsp/lib/PrepackLaunchUIComponent.js",
                "index 5005448b2..3ed0b5f92 100644",
                "--- a/pkg/nuclide-debugger-vsp/lib/PrepackLaunchUIComponent.js",
                "+++ b/pkg/nuclide-debugger-vsp/lib/PrepackLaunchUIComponent.js",
                "@@ -13,3 +13,2 @@ import * as React from 'react';",
                " import {AtomInput} from 'nuclide-commons-ui/AtomInput';",
                "-import nuclideUri from 'nuclide-commons/nuclideUri';",
                " import nullthrows from 'nullthrows';",
                "@@ -23,18 +22,5 @@ import {track} from '../../nuclide-analytics';",
                " import UniversalDisposable from 'nuclide-commons/UniversalDisposable';",
                "-import {getPrepackLaunchProcessInfo} from './utils';",
                "-",
                "-function getActiveScriptPath(): string {",
                "-  const center = atom.workspace.getCenter",
                "-    ? atom.workspace.getCenter()",
                "-    : atom.workspace;",
                "-  const activeEditor: ?atom$TextEditor = center.getActiveTextEditor();",
                "-  if (",
                "-    activeEditor == null ||",
                "-    !activeEditor.getPath() ||",
                "-    !nullthrows(activeEditor.getPath()).endsWith('.js')",
                "-  ) {",
                "-    return '';",
                "-  }",
                "-  return nuclideUri.getPath(nullthrows(activeEditor.getPath()));",
                "-}",
                "+import {getPrepackLaunchProcessInfo, getActiveScriptPath} from './utils';",
                "+",
                "+const JS_EXTENSION = '.js';",
                "@@ -82,3 +68,4 @@ export default class PrepackScriptLaunchUiComponent extends React.Component<",
                "       (transientSettings, savedSettings) => {",
                "-        const scriptPath = savedSettings.scriptPath || getActiveScriptPath();",
                "+        const scriptPath =",
                "+          savedSettings.scriptPath || getActiveScriptPath(JS_EXTENSION);",
                "         this.setState({",
                "diff --git a/pkg/nuclide-debugger-vsp/lib/PythonLaunchAttachProvider.js b/pkg/nuclide-debugger-vsp/lib/PythonLaunchAttachProvider.js",
                "deleted file mode 100644",
                "index 8af419343..000000000",
                "--- a/pkg/nuclide-debugger-vsp/lib/PythonLaunchAttachProvider.js",
                "+++ /dev/null",
                "@@ -1,61 +0,0 @@",
                "-/**",
                "- * Copyright (c) 2015-present, Facebook, Inc.",
                "- * All rights reserved.",
                "- *",
                "- * This source code is licensed under the license found in the LICENSE file in",
                "- * the root directory of this source tree.",
                "- *",
                "- * @flow",
                "- * @format",
                "- */",
                "-",
                "-import {DebuggerLaunchAttachProvider} from 'nuclide-debugger-common';",
                "-import * as React from 'react';",
                "-import PythonScriptLaunchUiComponent from './PythonScriptLaunchUiComponent';",
                "-import invariant from 'assert';",
                "-",
                "-import type {DebuggerConfigAction} from 'nuclide-debugger-common';",
                "-",
                "-export default class PythonLaunchAttachProvider extends DebuggerLaunchAttachProvider {",
                "-  constructor(targetUri: string) {",
                "-    super('Python', targetUri);",
                "-  }",
                "-",
                "-  getCallbacksForAction(action: DebuggerConfigAction) {",
                "-    return {",
                "-      /**",
                "-       * Whether this provider is enabled or not.",
                "-       */",
                "-      isEnabled: (): Promise<boolean> => {",
                "-        return Promise.resolve(action === 'launch');",
                "-      },",
                "-",
                "-      /**",
                "-       * Returns a list of supported debugger types + environments for the specified action.",
                "-       */",
                "-      getDebuggerTypeNames: super.getCallbacksForAction(action)",
                "-        .getDebuggerTypeNames,",
                "-",
                "-      /**",
                "-       * Returns the UI component for configuring the specified debugger type and action.",
                "-       */",
                "-      getComponent: (",
                "-        debuggerTypeName: string,",
                "-        configIsValidChanged: (valid: boolean) => void,",
                "-      ) => {",
                "-        if (action === 'launch') {",
                "-          return (",
                "-            <PythonScriptLaunchUiComponent",
                "-              targetUri={this.getTargetUri()}",
                "-              configIsValidChanged={configIsValidChanged}",
                "-            />",
                "-          );",
                "-        } else {",
                "-          invariant(false, 'Unrecognized action for component.');",
                "-        }",
                "-      },",
                "-    };",
                "-  }",
                "-",
                "-  dispose(): void {}",
                "-}",
                "diff --git a/pkg/nuclide-debugger-vsp/lib/PythonScriptLaunchUiComponent.js b/pkg/nuclide-debugger-vsp/lib/PythonScriptLaunchUiComponent.js",
                "deleted file mode 100644",
                "index 326fbd492..000000000",
                "--- a/pkg/nuclide-debugger-vsp/lib/PythonScriptLaunchUiComponent.js",
                "+++ /dev/null",
                "@@ -1,250 +0,0 @@",
                "-/**",
                "- * Copyright (c) 2015-present, Facebook, Inc.",
                "- * All rights reserved.",
                "- *",
                "- * This source code is licensed under the license found in the LICENSE file in",
                "- * the root directory of this source tree.",
                "- *",
                "- * @flow",
                "- * @format",
                "- */",
                "-",
                "-import * as React from 'react';",
                "-import {AtomInput} from 'nuclide-commons-ui/AtomInput';",
                "-import nuclideUri from 'nuclide-commons/nuclideUri';",
                "-import nullthrows from 'nullthrows';",
                "-import {shellParse} from 'nuclide-commons/string';",
                "-import {",
                "-  serializeDebuggerConfig,",
                "-  deserializeDebuggerConfig,",
                "-} from 'nuclide-debugger-common';",
                "-import {getDebuggerService} from '../../commons-atom/debugger';",
                "-import {track} from '../../nuclide-analytics';",
                "-import UniversalDisposable from 'nuclide-commons/UniversalDisposable';",
                "-import {getPythonScriptLaunchProcessInfo} from './utils';",
                "-",
                "-import type {NuclideUri} from 'nuclide-commons/nuclideUri';",
                "-",
                "-function getActiveScriptPath(): string {",
                "-  const center = atom.workspace.getCenter",
                "-    ? atom.workspace.getCenter()",
                "-    : atom.workspace;",
                "-  const activeEditor: ?atom$TextEditor = center.getActiveTextEditor();",
                "-  if (",
                "-    activeEditor == null ||",
                "-    !activeEditor.getPath() ||",
                "-    !nullthrows(activeEditor.getPath()).endsWith('.py')",
                "-  ) {",
                "-    return '';",
                "-  }",
                "-  return nuclideUri.getPath(nullthrows(activeEditor.getPath()));",
                "-}",
                "-",
                "-type Props = {|",
                "-  +targetUri: NuclideUri,",
                "-  +configIsValidChanged: (valid: boolean) => void,",
                "-|};",
                "-",
                "-type State = {",
                "-  scriptPath: string,",
                "-  pythonPath: string,",
                "-  args: string,",
                "-  environmentVariables: string,",
                "-  workingDirectory: string,",
                "-};",
                "-",
                "-export default class PythonScriptLaunchUiComponent extends React.Component<",
                "-  Props,",
                "-  State,",
                "-> {",
                "-  _disposables: UniversalDisposable;",
                "-",
                "-  _args: ?AtomInput;",
                "-  _environmentVariables: ?AtomInput;",
                "-  _pythonPath: ?AtomInput;",
                "-  _scriptPath: ?AtomInput;",
                "-  _workingDirectory: ?AtomInput;",
                "-",
                "-  constructor(props: Props) {",
                "-    super(props);",
                "-    this._disposables = new UniversalDisposable();",
                "-    this.state = {",
                "-      scriptPath: '',",
                "-      pythonPath: '',",
                "-      args: '',",
                "-      environmentVariables: '',",
                "-      workingDirectory: '',",
                "-    };",
                "-  }",
                "-",
                "-  _getSerializationArgs() {",
                "-    return [",
                "-      nuclideUri.isRemote(this.props.targetUri)",
                "-        ? nuclideUri.getHostname(this.props.targetUri)",
                "-        : 'local',",
                "-      'launch',",
                "-      'python',",
                "-    ];",
                "-  }",
                "-",
                "-  setState(newState: Object): void {",
                "-    super.setState(newState);",
                "-    this.props.configIsValidChanged(this._debugButtonShouldEnable());",
                "-  }",
                "-",
                "-  componentDidMount(): void {",
                "-    deserializeDebuggerConfig(",
                "-      ...this._getSerializationArgs(),",
                "-      (transientSettings, savedSettings) => {",
                "-        const scriptPath = savedSettings.scriptPath || getActiveScriptPath();",
                "-        const workingDirectory =",
                "-          savedSettings.workingDirectory ||",
                "-          (scriptPath.length > 0 ? nuclideUri.dirname(scriptPath) : '');",
                "-        this.setState({",
                "-          scriptPath,",
                "-          pythonPath: savedSettings.pythonPath || '',",
                "-          args: savedSettings.args || '',",
                "-          environmentVariables: savedSettings.environmentVariables || '',",
                "-          workingDirectory,",
                "-        });",
                "-      },",
                "-    );",
                "-",
                "-    if (this._scriptPath != null) {",
                "-      this._scriptPath.focus();",
                "-    }",
                "-",
                "-    this.props.configIsValidChanged(this._debugButtonShouldEnable());",
                "-    this._disposables.add(",
                "-      atom.commands.add('atom-workspace', {",
                "-        'core:confirm': () => {",
                "-          if (this._debugButtonShouldEnable()) {",
                "-            this._handleLaunchButtonClick();",
                "-          }",
                "-        },",
                "-      }),",
                "-    );",
                "-  }",
                "-",
                "-  componentWillUnmount() {",
                "-    this._disposables.dispose();",
                "-  }",
                "-",
                "-  _debugButtonShouldEnable(): boolean {",
                "-    const {scriptPath, pythonPath} = this.state;",
                "-    return scriptPath.length > 0 && pythonPath.length > 0;",
                "-  }",
                "-",
                "-  render(): React.Node {",
                "-    const nuclidePythonDebuggerDexUri =",
                "-      'https://our.intern.facebook.com/intern/dex/python-and-fbcode/debugging/#nuclide';",
                "-    return (",
                "-      <div className=\"block\">",
                "-        <p>",
                "-          This is intended to debug python script files.",
                "-          <br />",
                "-          To debug buck targets, you should{' '}",
                "-          <a href={nuclidePythonDebuggerDexUri}>",
                "-            use the buck toolbar instead",
                "-          </a>.",
                "-        </p>",
                "-        <label>Script Path: </label>",
                "-        <AtomInput",
                "-          ref={input => {",
                "-            this._scriptPath = input;",
                "-          }}",
                "-          tabIndex=\"12\"",
                "-          placeholderText=\"Input the script path you want to launch\"",
                "-          value={this.state.scriptPath}",
                "-          onDidChange={value => this.setState({scriptPath: value})}",
                "-        />",
                "-        <label>Python Path: </label>",
                "-        <AtomInput",
                "-          ref={input => {",
                "-            this._pythonPath = input;",
                "-          }}",
                "-          tabIndex=\"11\"",
                "-          placeholderText=\"Input python executable path (e.g. /usr/bin/python)\"",
                "-          value={this.state.pythonPath}",
                "-          onDidChange={value => this.setState({pythonPath: value})}",
                "-        />",
                "-        <label>Arguments: </label>",
                "-        <AtomInput",
                "-          ref={input => {",
                "-            this._args = input;",
                "-          }}",
                "-          tabIndex=\"13\"",
                "-          placeholderText=\"Arguments to the executable\"",
                "-          value={this.state.args}",
                "-          onDidChange={value => this.setState({args: value})}",
                "-        />",
                "-        <label>Environment Variables: </label>",
                "-        <AtomInput",
                "-          ref={input => {",
                "-            this._environmentVariables = input;",
                "-          }}",
                "-          tabIndex=\"14\"",
                "-          placeholderText=\"Environment variables (e.g., SHELL=/bin/bash PATH=/bin)\"",
                "-          value={this.state.environmentVariables}",
                "-          onDidChange={value => this.setState({environmentVariables: value})}",
                "-        />",
                "-        <label>Working directory: </label>",
                "-        <AtomInput",
                "-          ref={input => {",
                "-            this._workingDirectory = input;",
                "-          }}",
                "-          tabIndex=\"15\"",
                "-          placeholderText=\"Working directory for the launched executable\"",
                "-          value={this.state.workingDirectory}",
                "-          onDidChange={value => this.setState({workingDirectory: value})}",
                "-        />",
                "-      </div>",
                "-    );",
                "-  }",
                "-",
                "-  _handleLaunchButtonClick = async (): Promise<void> => {",
                "-    track('fb-python-debugger-launch-from-dialog');",
                "-    const pythonPath = nullthrows(this._pythonPath)",
                "-      .getText()",
                "-      .trim();",
                "-    const scriptPath = nullthrows(this._scriptPath)",
                "-      .getText()",
                "-      .trim();",
                "-    const args = shellParse(nullthrows(this._args).getText());",
                "-    const workingDirectory = nullthrows(this._workingDirectory)",
                "-      .getText()",
                "-      .trim();",
                "-    const environmentVariables = {};",
                "-    shellParse(nullthrows(this._environmentVariables).getText()).forEach(",
                "-      variable => {",
                "-        const [key, value] = variable.split('=');",
                "-        environmentVariables[key] = value;",
                "-      },",
                "-    );",
                "-",
                "-    const {hostname} = nuclideUri.parse(this.props.targetUri);",
                "-    const scriptUri =",
                "-      hostname != null",
                "-        ? nuclideUri.createRemoteUri(hostname, scriptPath)",
                "-        : scriptPath;",
                "-",
                "-    const launchInfo = await getPythonScriptLaunchProcessInfo(",
                "-      scriptUri,",
                "-      pythonPath,",
                "-      args,",
                "-      workingDirectory,",
                "-      environmentVariables,",
                "-    );",
                "-",
                "-    const debuggerService = await getDebuggerService();",
                "-    debuggerService.startDebugging(launchInfo);",
                "-",
                "-    serializeDebuggerConfig(...this._getSerializationArgs(), {",
                "-      pythonPath: this.state.pythonPath,",
                "-      scriptPath: this.state.scriptPath,",
                "-      args: this.state.args,",
                "-      environmentVariables: this.state.environmentVariables,",
                "-      workingDirectory: this.state.workingDirectory,",
                "-    });",
                "-  };",
                "-}",
                "diff --git a/pkg/nuclide-debugger-vsp/lib/main.js b/pkg/nuclide-debugger-vsp/lib/main.js",
                "index 3ff09acf2..d3d63e9fb 100644",
                "--- a/pkg/nuclide-debugger-vsp/lib/main.js",
                "+++ b/pkg/nuclide-debugger-vsp/lib/main.js",
                "@@ -16,4 +16,3 @@ import passesGK from '../../commons-node/passesGK';",
                " import {OcamlLaunchProvider} from './OCamlLaunchProvider';",
                "-import PythonLaunchAttachProvider from './PythonLaunchAttachProvider';",
                "-import NodeLaunchAttachProvider from './NodeLaunchAttachProvider';",
                "+import AutoGenLaunchAttachProvider from './AutoGenLaunchAttachProvider';",
                " import HhvmLaunchAttachProvider from './HhvmLaunchAttachProvider';",
                "@@ -24,3 +23,10 @@ import UniversalDisposable from 'nuclide-commons/UniversalDisposable';",
                " import fsPromise from 'nuclide-commons/fsPromise';",
                "-import {listenToRemoteDebugCommands} from './utils';",
                "+import {",
                "+  listenToRemoteDebugCommands,",
                "+  nodeHandleLaunchButtonClick,",
                "+  nodeHandleAttachButtonClick,",
                "+  pythonHandleLaunchButtonClick,",
                "+  getPythonAutoGenConfig,",
                "+  getNodeAutoGenConfig,",
                "+} from './utils';",
                " // eslint-disable-next-line rulesdir/prefer-nuclide-uri",
                "@@ -62,3 +68,9 @@ class Activation {",
                "       getLaunchAttachProvider: connection => {",
                "-        return new PythonLaunchAttachProvider(connection);",
                "+        return new AutoGenLaunchAttachProvider(",
                "+          'Python',",
                "+          connection,",
                "+          getPythonAutoGenConfig(),",
                "+          pythonHandleLaunchButtonClick,",
                "+          null /* Nuclide with vs-py-debugger does not support attach */,",
                "+        );",
                "       },",
                "@@ -71,3 +83,9 @@ class Activation {",
                "       getLaunchAttachProvider: connection => {",
                "-        return new NodeLaunchAttachProvider(connection);",
                "+        return new AutoGenLaunchAttachProvider(",
                "+          'Node',",
                "+          connection,",
                "+          getNodeAutoGenConfig(),",
                "+          nodeHandleLaunchButtonClick,",
                "+          nodeHandleAttachButtonClick,",
                "+        );",
                "       },",
                "diff --git a/pkg/nuclide-debugger-vsp/lib/types.js b/pkg/nuclide-debugger-vsp/lib/types.js",
                "index 924e67b8f..709344b83 100644",
                "--- a/pkg/nuclide-debugger-vsp/lib/types.js",
                "+++ b/pkg/nuclide-debugger-vsp/lib/types.js",
                "@@ -11,2 +11,69 @@",
                "+import type {NuclideUri} from 'nuclide-commons/nuclideUri';",
                "+import type {DebuggerConfigAction} from 'nuclide-debugger-common';",
                "+",
                "+import * as React from 'react';",
                "+",
                "+export type HandleDebugButtonClick = (",
                "+  targetUri: NuclideUri,",
                "+  stringValues: Map<string, string>,",
                "+  booleanValues: Map<string, boolean>,",
                "+  enumValues: Map<string, string>,",
                "+  numberValues: Map<string, number>,",
                "+) => Promise<void>;",
                "+",
                "+export type AutoGenPropertyPrimitiveType = 'string' | 'number' | 'boolean';",
                "+",
                "+export type AutoGenPropertyType =",
                "+  | AutoGenPropertyPrimitiveType",
                "+  | 'array'",
                "+  | 'enum'",
                "+  | 'object';",
                "+",
                "+export type AutoGenProperty = {",
                "+  name: string,",
                "+  type: AutoGenPropertyType,",
                "+  itemType?: AutoGenPropertyPrimitiveType,",
                "+  description: string,",
                "+  defaultValue?: string | number | boolean,",
                "+  required: boolean,",
                "+  enums?: string[],",
                "+  enumsDefaultValue?: string,",
                "+};",
                "+",
                "+export type AutoGenLaunchConfig = {|",
                "+  // Disjoint Union Flag",
                "+  launch: true,",
                "+  // General Properties",
                "+  properties: AutoGenProperty[],",
                "+  header?: React.Node,",
                "+  // Launch Specific Properties",
                "+  scriptPropertyName: string,",
                "+  cwdPropertyName: string,",
                "+  scriptExtension: string,",
                "+|};",
                "+",
                "+export type AutoGenAttachConfig = {|",
                "+  // Disjoint Union Flag",
                "+  launch: false,",
                "+  // General Properties",
                "+  properties: AutoGenProperty[],",
                "+  header?: React.Node,",
                "+  // Attach Specific Properties",
                "+|};",
                "+",
                "+export type AutoGenLaunchOrAttachConfig =",
                "+  | AutoGenLaunchConfig",
                "+  | AutoGenAttachConfig;",
                "+",
                "+export type AutoGenConfig = {|",
                "+  launch: ?AutoGenLaunchConfig,",
                "+  attach: ?AutoGenAttachConfig,",
                "+|};",
                "+",
                "+export type LaunchAttachProviderIsEnabled = (",
                "+  action: DebuggerConfigAction,",
                "+  config: AutoGenConfig,",
                "+) => Promise<boolean>;",
                "+",
                " // Subsets of https://git.io/vbhTr.",
                "diff --git a/pkg/nuclide-debugger-vsp/lib/utils.js b/pkg/nuclide-debugger-vsp/lib/utils.js",
                "index e4995b457..92e3a2315 100644",
                "--- a/pkg/nuclide-debugger-vsp/lib/utils.js",
                "+++ b/pkg/nuclide-debugger-vsp/lib/utils.js",
                "@@ -22,5 +22,14 @@ import type {",
                " import type {Adapter} from 'nuclide-debugger-vsps/main';",
                "-import type {ReactNativeAttachArgs, ReactNativeLaunchArgs} from './types';",
                "-",
                "+import type {",
                "+  ReactNativeAttachArgs,",
                "+  ReactNativeLaunchArgs,",
                "+  AutoGenConfig,",
                "+  AutoGenProperty,",
                "+} from './types';",
                "+",
                "+import invariant from 'assert';",
                "+import {shellParse} from 'nuclide-commons/string';",
                "+import nullthrows from 'nullthrows';",
                " import {diffSets, fastDebounce} from 'nuclide-commons/observable';",
                "+import * as React from 'react';",
                " import UniversalDisposable from 'nuclide-commons/UniversalDisposable';",
                "@@ -47,2 +56,5 @@ const DEFAULT_DEBUG_OPTIONS = new Set([",
                "+export const NUCLIDE_PYTHON_DEBUGGER_DEX_URI =",
                "+  'https://our.intern.facebook.com/intern/dex/python-and-fbcode/debugging/#nuclide';",
                "+",
                " export const REACT_NATIVE_PACKAGER_DEFAULT_PORT = 8081;",
                "@@ -64,2 +76,55 @@ export type VspNativeDebuggerAttachBuilderParms = {",
                "+// extension must be a string starting with a '.' like '.js' or '.py'",
                "+export function getActiveScriptPath(extension: string): string {",
                "+  const center = atom.workspace.getCenter",
                "+    ? atom.workspace.getCenter()",
                "+    : atom.workspace;",
                "+  const activeEditor: ?atom$TextEditor = center.getActiveTextEditor();",
                "+  if (",
                "+    activeEditor == null ||",
                "+    !activeEditor.getPath() ||",
                "+    !nullthrows(activeEditor.getPath()).endsWith(extension)",
                "+  ) {",
                "+    return '';",
                "+  }",
                "+  return nuclideUri.getPath(nullthrows(activeEditor.getPath()));",
                "+}",
                "+",
                "+function generatePropertyArray(",
                "+  launchOrAttachConfigProperties: Object,",
                "+  required: string[],",
                "+): AutoGenProperty[] {",
                "+  const propertyArray = Object.entries(launchOrAttachConfigProperties)",
                "+    .map(property => {",
                "+      const name = property[0];",
                "+      const propertyDetails: any = property[1];",
                "+      const autoGenProperty: AutoGenProperty = {",
                "+        name,",
                "+        type: propertyDetails.type,",
                "+        description: propertyDetails.description,",
                "+        required: required.includes(name),",
                "+      };",
                "+      if (typeof propertyDetails.default !== 'undefined') {",
                "+        autoGenProperty.defaultValue = propertyDetails.default;",
                "+      }",
                "+      if (",
                "+        propertyDetails.items != null &&",
                "+        typeof propertyDetails.items.type !== 'undefined'",
                "+      ) {",
                "+        autoGenProperty.itemType = propertyDetails.items.type;",
                "+      }",
                "+      return autoGenProperty;",
                "+    })",
                "+    .sort((p1, p2) => {",
                "+      if (p1.required && !p2.required) {",
                "+        return -1;",
                "+      }",
                "+      if (p2.required && !p1.required) {",
                "+        return 1;",
                "+      }",
                "+      return 0;",
                "+    });",
                "+  return propertyArray;",
                "+}",
                "+",
                " export async function getPythonParLaunchProcessInfo(",
                "@@ -78,2 +143,91 @@ export async function getPythonParLaunchProcessInfo(",
                "+export function getPythonAutoGenConfig(): AutoGenConfig {",
                "+  const pkgJson = require('../../../modules/nuclide-debugger-vsps/VendorLib/vs-py-debugger/package.json');",
                "+  const configurationAttributes =",
                "+    pkgJson.contributes.debuggers[0].configurationAttributes;",
                "+  configurationAttributes.launch.properties.pythonPath.description =",
                "+    'Path (fully qualified) to python executable.';",
                "+  const launchProperties = {};",
                "+  const launchRequired = ['pythonPath', 'program', 'cwd'];",
                "+  const usedLaunchProperties = new Set([",
                "+    'pythonPath',",
                "+    'program',",
                "+    'args',",
                "+    'cwd',",
                "+    'env',",
                "+  ]);",
                "+  Object.entries(configurationAttributes.launch.properties)",
                "+    .filter(property => usedLaunchProperties.has(property[0]))",
                "+    .forEach(property => {",
                "+      const name = property[0];",
                "+      const propertyDetails: any = property[1];",
                "+      // TODO(goom): replace the indexOf '$' stuff with logic that accesses settings",
                "+      if (",
                "+        propertyDetails.default != null &&",
                "+        typeof propertyDetails.default === 'string' &&",
                "+        propertyDetails.default.indexOf('$') === 0",
                "+      ) {",
                "+        delete propertyDetails.default;",
                "+      }",
                "+      launchProperties[name] = propertyDetails;",
                "+    });",
                "+",
                "+  return {",
                "+    launch: {",
                "+      launch: true,",
                "+      properties: generatePropertyArray(launchProperties, launchRequired),",
                "+      scriptPropertyName: 'program',",
                "+      scriptExtension: '.py',",
                "+      cwdPropertyName: 'cwd',",
                "+      header: (",
                "+        <p>",
                "+          This is intended to debug python script files.",
                "+          <br />",
                "+          To debug buck targets, you should{' '}",
                "+          <a href={NUCLIDE_PYTHON_DEBUGGER_DEX_URI}>",
                "+            use the buck toolbar instead",
                "+          </a>.",
                "+        </p>",
                "+      ),",
                "+    },",
                "+    attach: null,",
                "+  };",
                "+}",
                "+",
                "+export async function pythonHandleLaunchButtonClick(",
                "+  targetUri: NuclideUri,",
                "+  stringValues: Map<string, string>,",
                "+  booleanValues: Map<string, boolean>,",
                "+  enumValues: Map<string, string>,",
                "+  numberValues: Map<string, number>,",
                "+): Promise<void> {",
                "+  track('fb-python-debugger-launch-from-dialog');",
                "+  const pythonPath = nullthrows(stringValues.get('pythonPath')).trim();",
                "+  const scriptPath = nullthrows(stringValues.get('program')).trim();",
                "+  const args = shellParse(nullthrows(stringValues.get('args')));",
                "+  const workingDirectory = nullthrows(stringValues.get('cwd')).trim();",
                "+  const environmentVariables = {};",
                "+  shellParse(nullthrows(stringValues.get('env'))).forEach(variable => {",
                "+    const [key, value] = variable.split('=');",
                "+    environmentVariables[key] = value;",
                "+  });",
                "+",
                "+  const {hostname} = nuclideUri.parse(targetUri);",
                "+  const scriptUri =",
                "+    hostname != null",
                "+      ? nuclideUri.createRemoteUri(hostname, scriptPath)",
                "+      : scriptPath;",
                "+",
                "+  const launchInfo = await getPythonScriptLaunchProcessInfo(",
                "+    scriptUri,",
                "+    pythonPath,",
                "+    args,",
                "+    workingDirectory,",
                "+    environmentVariables,",
                "+  );",
                "+",
                "+  const debuggerService = await getDebuggerService();",
                "+  debuggerService.startDebugging(launchInfo);",
                "+}",
                "+",
                " export async function getPythonScriptLaunchProcessInfo(",
                "@@ -224,2 +378,140 @@ function getPrepackScriptConfig(",
                "+export function getNodeAutoGenConfig(): AutoGenConfig {",
                "+  const pkgJson = require('../../../modules/nuclide-debugger-vsps/VendorLib/vscode-node-debug2/package.json');",
                "+  const pkgJsonDescriptions = require('../../../modules/nuclide-debugger-vsps/VendorLib/vscode-node-debug2/package.nls.json');",
                "+  const configurationAttributes =",
                "+    pkgJson.contributes.debuggers[1].configurationAttributes;",
                "+  Object.entries(configurationAttributes.launch.properties).forEach(",
                "+    property => {",
                "+      const name = property[0];",
                "+      const descriptionSubstitution =",
                "+        configurationAttributes.launch.properties[name].description;",
                "+      if (",
                "+        descriptionSubstitution != null &&",
                "+        typeof descriptionSubstitution === 'string'",
                "+      ) {",
                "+        configurationAttributes.launch.properties[name].description =",
                "+          pkgJsonDescriptions[descriptionSubstitution.slice(1, -1)];",
                "+      }",
                "+    },",
                "+  );",
                "+  configurationAttributes.launch.properties.nodePath = {",
                "+    type: 'string',",
                "+    description:",
                "+      \"Node executable path (e.g. /usr/local/bin/node). Will use Nuclide's node version if not provided.\",",
                "+    default: '',",
                "+  };",
                "+  Object.entries(configurationAttributes.attach.properties).forEach(",
                "+    property => {",
                "+      const name = property[0];",
                "+      const descriptionSubstitution =",
                "+        configurationAttributes.attach.properties[name].description;",
                "+      if (",
                "+        descriptionSubstitution != null &&",
                "+        typeof descriptionSubstitution === 'string'",
                "+      ) {",
                "+        configurationAttributes.attach.properties[name].description =",
                "+          pkgJsonDescriptions[descriptionSubstitution.slice(1, -1)];",
                "+      }",
                "+    },",
                "+  );",
                "+",
                "+  const launchProperties = {};",
                "+  const attachProperties = {};",
                "+  const launchRequired = ['program', 'cwd'];",
                "+  const attachRequired = ['port'];",
                "+",
                "+  const usedLaunchProperties = new Set(",
                "+    launchRequired.concat(['nodePath', 'args', 'outFiles', 'env']),",
                "+  );",
                "+",
                "+  Object.entries(configurationAttributes.launch.properties)",
                "+    .filter(property => usedLaunchProperties.has(property[0]))",
                "+    .forEach(property => {",
                "+      const name = property[0];",
                "+      const propertyDetails: any = property[1];",
                "+      launchProperties[name] = propertyDetails;",
                "+    });",
                "+",
                "+  const usedAttachProperties = new Set(['port']);",
                "+",
                "+  Object.entries(configurationAttributes.attach.properties)",
                "+    .filter(property => usedAttachProperties.has(property[0]))",
                "+    .forEach(property => {",
                "+      const name = property[0];",
                "+      const propertyDetails: any = property[1];",
                "+      attachProperties[name] = propertyDetails;",
                "+    });",
                "+",
                "+  return {",
                "+    launch: {",
                "+      launch: true,",
                "+      properties: generatePropertyArray(launchProperties, launchRequired),",
                "+      scriptPropertyName: 'program',",
                "+      cwdPropertyName: 'cwd',",
                "+      scriptExtension: '.js',",
                "+      header: (",
                "+        <p>This is intended to debug node.js files (for node version 6.3+).</p>",
                "+      ),",
                "+    },",
                "+    attach: {",
                "+      launch: false,",
                "+      properties: generatePropertyArray(attachProperties, attachRequired),",
                "+      header: <p>Attach to a running node.js process</p>,",
                "+    },",
                "+  };",
                "+}",
                "+",
                "+export async function nodeHandleAttachButtonClick(",
                "+  targetUri: NuclideUri,",
                "+  stringValues: Map<string, string>,",
                "+  booleanValues: Map<string, boolean>,",
                "+  enumValues: Map<string, string>,",
                "+  numberValues: Map<string, number>,",
                "+): Promise<void> {",
                "+  track('fb-node-debugger-attach-from-dialog');",
                "+  const port = numberValues.get('port');",
                "+  invariant(port != null);",
                "+  const attachInfo = await getNodeAttachProcessInfo(targetUri, port);",
                "+  const debuggerService = await getDebuggerService();",
                "+  debuggerService.startDebugging(attachInfo);",
                "+}",
                "+",
                "+export async function nodeHandleLaunchButtonClick(",
                "+  targetUri: NuclideUri,",
                "+  stringValues: Map<string, string>,",
                "+  booleanValues: Map<string, boolean>,",
                "+  enumValues: Map<string, string>,",
                "+  numberValues: Map<string, number>,",
                "+): Promise<void> {",
                "+  track('fb-node-debugger-launch-from-dialog');",
                "+  const nodePath = nullthrows(stringValues.get('nodePath')).trim();",
                "+  const scriptPath = nullthrows(stringValues.get('program')).trim();",
                "+  const args = shellParse(nullthrows(stringValues.get('args')));",
                "+  const workingDirectory = nullthrows(stringValues.get('cwd')).trim();",
                "+  const outFiles = nullthrows(stringValues.get('outFiles')).trim();",
                "+  const environmentVariables = {};",
                "+  shellParse(nullthrows(stringValues.get('env'))).forEach(variable => {",
                "+    const [key, value] = variable.split('=');",
                "+    environmentVariables[key] = value;",
                "+  });",
                "+",
                "+  const {hostname} = nuclideUri.parse(targetUri);",
                "+  const scriptUri =",
                "+    hostname != null",
                "+      ? nuclideUri.createRemoteUri(hostname, scriptPath)",
                "+      : scriptPath;",
                "+",
                "+  const launchInfo = await getNodeLaunchProcessInfo(",
                "+    scriptUri,",
                "+    nodePath,",
                "+    args,",
                "+    workingDirectory,",
                "+    environmentVariables,",
                "+    outFiles,",
                "+  );",
                "+  const debuggerService = await getDebuggerService();",
                "+  debuggerService.startDebugging(launchInfo);",
                "+}",
                "+",
                " export async function getNodeLaunchProcessInfo("
            ],
            "changed_files": [
                "pkg/nuclide-debugger-new/lib/main.js",
                "pkg/nuclide-debugger-new/lib/ui/DebuggerLaunchAttachUI.js",
                "pkg/nuclide-debugger-vsp/lib/AutoGenLaunchAttachProvider.js",
                "pkg/nuclide-debugger-vsp/lib/AutoGenLaunchAttachUiComponent.js",
                "pkg/nuclide-debugger-vsp/lib/NodeAttachUiComponent.js",
                "pkg/nuclide-debugger-vsp/lib/NodeLaunchAttachProvider.js",
                "pkg/nuclide-debugger-vsp/lib/NodeLaunchUiComponent.js",
                "pkg/nuclide-debugger-vsp/lib/PrepackLaunchUIComponent.js",
                "pkg/nuclide-debugger-vsp/lib/PythonLaunchAttachProvider.js",
                "pkg/nuclide-debugger-vsp/lib/PythonScriptLaunchUiComponent.js",
                "pkg/nuclide-debugger-vsp/lib/main.js",
                "pkg/nuclide-debugger-vsp/lib/types.js",
                "pkg/nuclide-debugger-vsp/lib/utils.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: render, provide, attach",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: provide, attach",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "f0ee3764d04c86ce46d804c355f84e48a28f8389",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521566850,
            "hunks": 2,
            "message": "Add Jest flow types Reviewed By: bolinfest Differential Revision: D7313136 fbshipit-source-id: 3e86efb01b4d7262f884192b0e08c5ce6cc8fce1",
            "diff": [
                "diff --git a/flow-libs/jest.js.flow b/flow-libs/jest.js.flow",
                "new file mode 100644",
                "index 000000000..7079891be",
                "--- /dev/null",
                "+++ b/flow-libs/jest.js.flow",
                "@@ -0,0 +1,579 @@",
                "+/**",
                "+ * Copyright (c) 2015-present, Facebook, Inc.",
                "+ * All rights reserved.",
                "+ *",
                "+ * This source code is licensed under the license found in the LICENSE file in",
                "+ * the root directory of this source tree.",
                "+ *",
                "+ * @flow",
                "+ */",
                "+",
                "+// Derived from https://github.com/flowtype/flow-typed/blob/b14f68e407c3c0365f00bc9cf42f954b124012cb/cli/flow-typed/npm/jest_v22.x.x.js",
                "+// Keep in sync with future changes.",
                "+",
                "+declare module 'nuclide-jest/globals' {",
                "+  /** Runs this function after every test inside this context */",
                "+  declare function afterEach(",
                "+    fn: (done: () => void) => ?Promise<mixed>,",
                "+    timeout?: number",
                "+  ): void;",
                "+  /** Runs this function before every test inside this context */",
                "+  declare function beforeEach(",
                "+    fn: (done: () => void) => ?Promise<mixed>,",
                "+    timeout?: number",
                "+  ): void;",
                "+  /** Runs this function after all tests have finished inside this context */",
                "+  declare function afterAll(",
                "+    fn: (done: () => void) => ?Promise<mixed>,",
                "+    timeout?: number",
                "+  ): void;",
                "+  /** Runs this function before any tests have started inside this context */",
                "+  declare function beforeAll(",
                "+    fn: (done: () => void) => ?Promise<mixed>,",
                "+    timeout?: number",
                "+  ): void;",
                "+",
                "+  /** A context for grouping tests together */",
                "+  declare var describe: {",
                "+    /**",
                "+     * Creates a block that groups together several related tests in one \"test suite\"",
                "+     */",
                "+    (name: JestTestName, fn: () => void): void,",
                "+",
                "+    /**",
                "+     * Only run this describe block",
                "+     */",
                "+    only(name: JestTestName, fn: () => void): void,",
                "+",
                "+    /**",
                "+     * Skip running this describe block",
                "+     */",
                "+    skip(name: JestTestName, fn: () => void): void",
                "+  };",
                "+",
                "+  /** An individual test unit */",
                "+  declare var it: {",
                "+    /**",
                "+     * An individual test unit",
                "+     *",
                "+     * @param {JestTestName} Name of Test",
                "+     * @param {Function} Test",
                "+     * @param {number} Timeout for the test, in milliseconds.",
                "+     */",
                "+    (",
                "+      name: JestTestName,",
                "+      fn?: (done: () => void) => ?Promise<mixed>,",
                "+      timeout?: number",
                "+    ): void,",
                "+    /**",
                "+     * Only run this test",
                "+     *",
                "+     * @param {JestTestName} Name of Test",
                "+     * @param {Function} Test",
                "+     * @param {number} Timeout for the test, in milliseconds.",
                "+     */",
                "+    only(",
                "+      name: JestTestName,",
                "+      fn?: (done: () => void) => ?Promise<mixed>,",
                "+      timeout?: number",
                "+    ): void,",
                "+    /**",
                "+     * Skip running this test",
                "+     *",
                "+     * @param {JestTestName} Name of Test",
                "+     * @param {Function} Test",
                "+     * @param {number} Timeout for the test, in milliseconds.",
                "+     */",
                "+    skip(",
                "+      name: JestTestName,",
                "+      fn?: (done: () => void) => ?Promise<mixed>,",
                "+      timeout?: number",
                "+    ): void,",
                "+    /**",
                "+     * Run the test concurrently",
                "+     *",
                "+     * @param {JestTestName} Name of Test",
                "+     * @param {Function} Test",
                "+     * @param {number} Timeout for the test, in milliseconds.",
                "+     */",
                "+    concurrent(",
                "+      name: JestTestName,",
                "+      fn?: (done: () => void) => ?Promise<mixed>,",
                "+      timeout?: number",
                "+    ): void",
                "+  };",
                "+  declare function fit(",
                "+    name: JestTestName,",
                "+    fn: (done: () => void) => ?Promise<mixed>,",
                "+    timeout?: number",
                "+  ): void;",
                "+  /** An individual test unit */",
                "+  declare var test: typeof it;",
                "+  /** A disabled group of tests */",
                "+  declare var xdescribe: typeof describe;",
                "+  /** A focused group of tests */",
                "+  declare var fdescribe: typeof describe;",
                "+  /** A disabled individual test */",
                "+  declare var xit: typeof it;",
                "+  /** A disabled individual test */",
                "+  declare var xtest: typeof it;",
                "+",
                "+  declare var expect: {",
                "+    /** The object that you want to make assertions against */",
                "+    (value: any): JestExpectType & JestPromiseType & EnzymeMatchersType,",
                "+    /** Add additional Jasmine matchers to Jest's roster */",
                "+    extend(matchers: {[name: string]: JestMatcher}): void,",
                "+    /** Add a module that formats application-specific data structures. */",
                "+    addSnapshotSerializer(serializer: (input: Object) => string): void,",
                "+    assertions(expectedAssertions: number): void,",
                "+    hasAssertions(): void,",
                "+    any(value: mixed): JestAsymmetricEqualityType,",
                "+    anything(): void,",
                "+    arrayContaining(value: Array<mixed>): void,",
                "+    objectContaining(value: Object): void,",
                "+    /** Matches any received string that contains the exact expected string. */",
                "+    stringContaining(value: string): void,",
                "+    stringMatching(value: string | RegExp): void,",
                "+  };",
                "+",
                "+  // TODO handle return type",
                "+  // http://jasmine.github.io/2.4/introduction.html#section-Spies",
                "+  declare function spyOn(value: mixed, method: string): Object;",
                "+",
                "+  /** Holds all functions related to manipulating test runner */",
                "+  declare var jest: JestObjectType;",
                "+}",
                "+",
                "+type JestMockFn<TArguments: $ReadOnlyArray<*>, TReturn> = {",
                "+  (...args: TArguments): TReturn,",
                "+  /**",
                "+   * An object for introspecting mock calls",
                "+   */",
                "+  mock: {",
                "+    /**",
                "+     * An array that represents all calls that have been made into this mock",
                "+     * function. Each call is represented by an array of arguments that were",
                "+     * passed during the call.",
                "+     */",
                "+    calls: Array<TArguments>,",
                "+    /**",
                "+     * An array that contains all the object instances that have been",
                "+     * instantiated from this mock function.",
                "+     */",
                "+    instances: Array<TReturn>",
                "+  },",
                "+  /**",
                "+   * Resets all information stored in the mockFn.mock.calls and",
                "+   * mockFn.mock.instances arrays. Often this is useful when you want to clean",
                "+   * up a mock's usage data between two assertions.",
                "+   */",
                "+  mockClear(): void,",
                "+  /**",
                "+   * Resets all information stored in the mock. This is useful when you want to",
                "+   * completely restore a mock back to its initial state.",
                "+   */",
                "+  mockReset(): void,",
                "+  /**",
                "+   * Removes the mock and restores the initial implementation. This is useful",
                "+   * when you want to mock functions in certain test cases and restore the",
                "+   * original implementation in others. Beware that mockFn.mockRestore only",
                "+   * works when mock was created with jest.spyOn. Thus you have to take care of",
                "+   * restoration yourself when manually assigning jest.fn().",
                "+   */",
                "+  mockRestore(): void,",
                "+  /**",
                "+   * Accepts a function that should be used as the implementation of the mock.",
                "+   * The mock itself will still record all calls that go into and instances",
                "+   * that come from itself -- the only difference is that the implementation",
                "+   * will also be executed when the mock is called.",
                "+   */",
                "+  mockImplementation(",
                "+    fn: (...args: TArguments) => TReturn",
                "+  ): JestMockFn<TArguments, TReturn>,",
                "+  /**",
                "+   * Accepts a function that will be used as an implementation of the mock for",
                "+   * one call to the mocked function. Can be chained so that multiple function",
                "+   * calls produce different results.",
                "+   */",
                "+  mockImplementationOnce(",
                "+    fn: (...args: TArguments) => TReturn",
                "+  ): JestMockFn<TArguments, TReturn>,",
                "+  /**",
                "+   * Just a simple sugar function for returning `this`",
                "+   */",
                "+  mockReturnThis(): void,",
                "+  /**",
                "+   * Deprecated: use jest.fn(() => value) instead",
                "+   */",
                "+  mockReturnValue(value: TReturn): JestMockFn<TArguments, TReturn>,",
                "+  /**",
                "+   * Sugar for only returning a value once inside your mock",
                "+   */",
                "+  mockReturnValueOnce(value: TReturn): JestMockFn<TArguments, TReturn>",
                "+};",
                "+",
                "+type JestAsymmetricEqualityType = {",
                "+  /**",
                "+   * A custom Jasmine equality tester",
                "+   */",
                "+  asymmetricMatch(value: mixed): boolean",
                "+};",
                "+",
                "+type JestCallsType = {",
                "+  allArgs(): mixed,",
                "+  all(): mixed,",
                "+  any(): boolean,",
                "+  count(): number,",
                "+  first(): mixed,",
                "+  mostRecent(): mixed,",
                "+  reset(): void",
                "+};",
                "+",
                "+type JestMatcherResult = {",
                "+  message?: string | (() => string),",
                "+  pass: boolean",
                "+};",
                "+",
                "+type JestMatcher = (actual: any, expected: any) => JestMatcherResult;",
                "+",
                "+type JestPromiseType = {",
                "+  /**",
                "+   * Use rejects to unwrap the reason of a rejected promise so any other",
                "+   * matcher can be chained. If the promise is fulfilled the assertion fails.",
                "+   */",
                "+  rejects: JestExpectType,",
                "+  /**",
                "+   * Use resolves to unwrap the value of a fulfilled promise so any other",
                "+   * matcher can be chained. If the promise is rejected the assertion fails.",
                "+   */",
                "+  resolves: JestExpectType",
                "+};",
                "+",
                "+/**",
                "+ * Jest allows functions and classes to be used as test names in test() and",
                "+ * describe()",
                "+ */",
                "+type JestTestName = string | Function;",
                "+",
                "+/**",
                "+ *  Plugin: jest-enzyme",
                "+ */",
                "+type EnzymeMatchersType = {",
                "+  toBeChecked(): void,",
                "+  toBeDisabled(): void,",
                "+  toBeEmpty(): void,",
                "+  toBeEmptyRender(): void,",
                "+  toBePresent(): void,",
                "+  toContainReact(element: React$Element<any>): void,",
                "+  toExist(): void,",
                "+  toHaveClassName(className: string): void,",
                "+  toHaveHTML(html: string): void,",
                "+  toHaveProp: ((propKey: string, propValue?: any) => void) & ((props: Object) => void),",
                "+  toHaveRef(refName: string): void,",
                "+  toHaveState: ((stateKey: string, stateValue?: any) => void) & ((state: Object) => void),",
                "+  toHaveStyle: ((styleKey: string, styleValue?: any) => void) & ((style: Object) => void),",
                "+  toHaveTagName(tagName: string): void,",
                "+  toHaveText(text: string): void,",
                "+  toIncludeText(text: string): void,",
                "+  toHaveValue(value: any): void,",
                "+  toMatchElement(element: React$Element<any>): void,",
                "+  toMatchSelector(selector: string): void",
                "+};",
                "+",
                "+type JestExpectType = {",
                "+  not: JestExpectType & EnzymeMatchersType,",
                "+  /**",
                "+   * If you have a mock function, you can use .lastCalledWith to test what",
                "+   * arguments it was last called with.",
                "+   */",
                "+  lastCalledWith(...args: Array<any>): void,",
                "+  /**",
                "+   * toBe just checks that a value is what you expect. It uses === to check",
                "+   * strict equality.",
                "+   */",
                "+  toBe(value: any): void,",
                "+  /**",
                "+   * Use .toHaveBeenCalled to ensure that a mock function got called.",
                "+   */",
                "+  toBeCalled(): void,",
                "+  /**",
                "+   * Use .toBeCalledWith to ensure that a mock function was called with",
                "+   * specific arguments.",
                "+   */",
                "+  toBeCalledWith(...args: Array<any>): void,",
                "+  /**",
                "+   * Using exact equality with floating point numbers is a bad idea. Rounding",
                "+   * means that intuitive things fail.",
                "+   */",
                "+  toBeCloseTo(num: number, delta: any): void,",
                "+  /**",
                "+   * Use .toBeDefined to check that a variable is not undefined.",
                "+   */",
                "+  toBeDefined(): void,",
                "+  /**",
                "+   * Use .toBeFalsy when you don't care what a value is, you just want to",
                "+   * ensure a value is false in a boolean context.",
                "+   */",
                "+  toBeFalsy(): void,",
                "+  /**",
                "+   * To compare floating point numbers, you can use toBeGreaterThan.",
                "+   */",
                "+  toBeGreaterThan(number: number): void,",
                "+  /**",
                "+   * To compare floating point numbers, you can use toBeGreaterThanOrEqual.",
                "+   */",
                "+  toBeGreaterThanOrEqual(number: number): void,",
                "+  /**",
                "+   * To compare floating point numbers, you can use toBeLessThan.",
                "+   */",
                "+  toBeLessThan(number: number): void,",
                "+  /**",
                "+   * To compare floating point numbers, you can use toBeLessThanOrEqual.",
                "+   */",
                "+  toBeLessThanOrEqual(number: number): void,",
                "+  /**",
                "+   * Use .toBeInstanceOf(Class) to check that an object is an instance of a",
                "+   * class.",
                "+   */",
                "+  toBeInstanceOf(cls: Class<*>): void,",
                "+  /**",
                "+   * .toBeNull() is the same as .toBe(null) but the error messages are a bit",
                "+   * nicer.",
                "+   */",
                "+  toBeNull(): void,",
                "+  /**",
                "+   * Use .toBeTruthy when you don't care what a value is, you just want to",
                "+   * ensure a value is true in a boolean context.",
                "+   */",
                "+  toBeTruthy(): void,",
                "+  /**",
                "+   * Use .toBeUndefined to check that a variable is undefined.",
                "+   */",
                "+  toBeUndefined(): void,",
                "+  /**",
                "+   * Use .toContain when you want to check that an item is in a list. For",
                "+   * testing the items in the list, this uses ===, a strict equality check.",
                "+   */",
                "+  toContain(item: any): void,",
                "+  /**",
                "+   * Use .toContainEqual when you want to check that an item is in a list. For",
                "+   * testing the items in the list, this matcher recursively checks the",
                "+   * equality of all fields, rather than checking for object identity.",
                "+   */",
                "+  toContainEqual(item: any): void,",
                "+  /**",
                "+   * Use .toEqual when you want to check that two objects have the same value.",
                "+   * This matcher recursively checks the equality of all fields, rather than",
                "+   * checking for object identity.",
                "+   */",
                "+  toEqual(value: any): void,",
                "+  /**",
                "+   * Use .toHaveBeenCalled to ensure that a mock function got called.",
                "+   */",
                "+  toHaveBeenCalled(): void,",
                "+  /**",
                "+   * Use .toHaveBeenCalledTimes to ensure that a mock function got called exact",
                "+   * number of times.",
                "+   */",
                "+  toHaveBeenCalledTimes(number: number): void,",
                "+  /**",
                "+   * Use .toHaveBeenCalledWith to ensure that a mock function was called with",
                "+   * specific arguments.",
                "+   */",
                "+  toHaveBeenCalledWith(...args: Array<any>): void,",
                "+  /**",
                "+   * Use .toHaveBeenLastCalledWith to ensure that a mock function was last called",
                "+   * with specific arguments.",
                "+   */",
                "+  toHaveBeenLastCalledWith(...args: Array<any>): void,",
                "+  /**",
                "+   * Check that an object has a .length property and it is set to a certain",
                "+   * numeric value.",
                "+   */",
                "+  toHaveLength(number: number): void,",
                "+  /**",
                "+   *",
                "+   */",
                "+  toHaveProperty(propPath: string, value?: any): void,",
                "+  /**",
                "+   * Use .toMatch to check that a string matches a regular expression or string.",
                "+   */",
                "+  toMatch(regexpOrString: RegExp | string): void,",
                "+  /**",
                "+   * Use .toMatchObject to check that a javascript object matches a subset of the properties of an object.",
                "+   */",
                "+  toMatchObject(object: Object | Array<Object>): void,",
                "+  /**",
                "+   * This ensures that a React component matches the most recent snapshot.",
                "+   */",
                "+  toMatchSnapshot(name?: string): void,",
                "+  /**",
                "+   * Use .toThrow to test that a function throws when it is called.",
                "+   * If you want to test that a specific error gets thrown, you can provide an",
                "+   * argument to toThrow. The argument can be a string for the error message,",
                "+   * a class for the error, or a regex that should match the error.",
                "+   *",
                "+   * Alias: .toThrowError",
                "+   */",
                "+  toThrow(message?: string | Error | Class<Error> | RegExp): void,",
                "+  toThrowError(message?: string | Error | Class<Error> | RegExp): void,",
                "+  /**",
                "+   * Use .toThrowErrorMatchingSnapshot to test that a function throws a error",
                "+   * matching the most recent snapshot when it is called.",
                "+   */",
                "+  toThrowErrorMatchingSnapshot(): void",
                "+};",
                "+",
                "+type JestObjectType = {",
                "+  /**",
                "+   *  Disables automatic mocking in the module loader.",
                "+   *",
                "+   *  After this method is called, all `require()`s will return the real",
                "+   *  versions of each module (rather than a mocked version).",
                "+   */",
                "+  disableAutomock(): JestObjectType,",
                "+  /**",
                "+   * An un-hoisted version of disableAutomock",
                "+   */",
                "+  autoMockOff(): JestObjectType,",
                "+  /**",
                "+   * Enables automatic mocking in the module loader.",
                "+   */",
                "+  enableAutomock(): JestObjectType,",
                "+  /**",
                "+   * An un-hoisted version of enableAutomock",
                "+   */",
                "+  autoMockOn(): JestObjectType,",
                "+  /**",
                "+   * Clears the mock.calls and mock.instances properties of all mocks.",
                "+   * Equivalent to calling .mockClear() on every mocked function.",
                "+   */",
                "+  clearAllMocks(): JestObjectType,",
                "+  /**",
                "+   * Resets the state of all mocks. Equivalent to calling .mockReset() on every",
                "+   * mocked function.",
                "+   */",
                "+  resetAllMocks(): JestObjectType,",
                "+  /**",
                "+   * Restores all mocks back to their original value.",
                "+   */",
                "+  restoreAllMocks(): JestObjectType,",
                "+  /**",
                "+   * Removes any pending timers from the timer system.",
                "+   */",
                "+  clearAllTimers(): void,",
                "+  /**",
                "+   * The same as `mock` but not moved to the top of the expectation by",
                "+   * babel-jest.",
                "+   */",
                "+  doMock(moduleName: string, moduleFactory?: any): JestObjectType,",
                "+  /**",
                "+   * The same as `unmock` but not moved to the top of the expectation by",
                "+   * babel-jest.",
                "+   */",
                "+  dontMock(moduleName: string): JestObjectType,",
                "+  /**",
                "+   * Returns a new, unused mock function. Optionally takes a mock",
                "+   * implementation.",
                "+   */",
                "+  fn<TArguments: $ReadOnlyArray<*>, TReturn>(",
                "+    implementation?: (...args: TArguments) => TReturn",
                "+  ): JestMockFn<TArguments, TReturn>,",
                "+  /**",
                "+   * Determines if the given function is a mocked function.",
                "+   */",
                "+  isMockFunction(fn: Function): boolean,",
                "+  /**",
                "+   * Given the name of a module, use the automatic mocking system to generate a",
                "+   * mocked version of the module for you.",
                "+   */",
                "+  genMockFromModule(moduleName: string): any,",
                "+  /**",
                "+   * Mocks a module with an auto-mocked version when it is being required.",
                "+   *",
                "+   * The second argument can be used to specify an explicit module factory that",
                "+   * is being run instead of using Jest's automocking feature.",
                "+   *",
                "+   * The third argument can be used to create virtual mocks -- mocks of modules",
                "+   * that don't exist anywhere in the system.",
                "+   */",
                "+  mock(",
                "+    moduleName: string,",
                "+    moduleFactory?: any,",
                "+    options?: Object",
                "+  ): JestObjectType,",
                "+  /**",
                "+   * Returns the actual module instead of a mock, bypassing all checks on",
                "+   * whether the module should receive a mock implementation or not.",
                "+   */",
                "+  requireActual(moduleName: string): any,",
                "+  /**",
                "+   * Returns a mock module instead of the actual module, bypassing all checks",
                "+   * on whether the module should be required normally or not.",
                "+   */",
                "+  requireMock(moduleName: string): any,",
                "+  /**",
                "+   * Resets the module registry - the cache of all required modules. This is",
                "+   * useful to isolate modules where local state might conflict between tests.",
                "+   */",
                "+  resetModules(): JestObjectType,",
                "+  /**",
                "+   * Exhausts the micro-task queue (usually interfaced in node via",
                "+   * process.nextTick).",
                "+   */",
                "+  runAllTicks(): void,",
                "+  /**",
                "+   * Exhausts the macro-task queue (i.e., all tasks queued by setTimeout(),",
                "+   * setInterval(), and setImmediate()).",
                "+   */",
                "+  runAllTimers(): void,",
                "+  /**",
                "+   * Exhausts all tasks queued by setImmediate().",
                "+   */",
                "+  runAllImmediates(): void,",
                "+  /**",
                "+   * Executes only the macro task queue (i.e. all tasks queued by setTimeout()",
                "+   * or setInterval() and setImmediate()).",
                "+   */",
                "+  advanceTimersByTime(msToRun: number): void,",
                "+  // alias",
                "+  runTimersToTime(msToRun: number): void,",
                "+  /**",
                "+   * Executes only the macro-tasks that are currently pending (i.e., only the",
                "+   * tasks that have been queued by setTimeout() or setInterval() up to this",
                "+   * point)",
                "+   */",
                "+  runOnlyPendingTimers(): void,",
                "+  /**",
                "+   * Explicitly supplies the mock object that the module system should return",
                "+   * for the specified module. Note: It is recommended to use jest.mock()",
                "+   * instead.",
                "+   */",
                "+  setMock(moduleName: string, moduleExports: any): JestObjectType,",
                "+  /**",
                "+   * Indicates that the module system should never return a mocked version of",
                "+   * the specified module from require() (e.g. that it should always return the",
                "+   * real module).",
                "+   */",
                "+  unmock(moduleName: string): JestObjectType,",
                "+  /**",
                "+   * Instructs Jest to use fake versions of the standard timer functions",
                "+   * (setTimeout, setInterval, clearTimeout, clearInterval, nextTick,",
                "+   * setImmediate and clearImmediate).",
                "+   */",
                "+  useFakeTimers(): JestObjectType,",
                "+  /**",
                "+   * Instructs Jest to use the real versions of the standard timer functions.",
                "+   */",
                "+  useRealTimers(): JestObjectType,",
                "+  /**",
                "+   * Creates a mock function similar to jest.fn but also tracks calls to",
                "+   * object[methodName].",
                "+   */",
                "+  spyOn(object: Object, methodName: string): JestMockFn<any, any>,",
                "+  /**",
                "+   * Set the default timeout interval for tests and before/after hooks in milliseconds.",
                "+   * Note: The default timeout interval is 5 seconds if this method is not called.",
                "+   */",
                "+  setTimeout(timeout: number): JestObjectType",
                "+};",
                "diff --git a/modules/nuclide-jest/globals.js b/modules/nuclide-jest/globals.js",
                "new file mode 100644",
                "index 000000000..f96cf0fb6",
                "--- /dev/null",
                "+++ b/modules/nuclide-jest/globals.js",
                "@@ -0,0 +1,33 @@",
                "+/**",
                "+ * Copyright (c) 2017-present, Facebook, Inc.",
                "+ * All rights reserved.",
                "+ *",
                "+ * This source code is licensed under the BSD-style license found in the",
                "+ * LICENSE file in the root directory of this source tree. An additional grant",
                "+ * of patent rights can be found in the PATENTS file in the same directory.",
                "+ *",
                "+ * @noflow",
                "+ */",
                "+'use strict';",
                "+",
                "+/* eslint",
                "+  comma-dangle: [1, always-multiline],",
                "+  prefer-object-spread/prefer-object-spread: 0,",
                "+  rulesdir/no-commonjs: 0,",
                "+  */",
                "+",
                "+module.exports.expect = global.expect;",
                "+module.exports.test = global.test;",
                "+module.exports.xtest = global.xtest;",
                "+module.exports.xit = global.xit;",
                "+module.exports.it = global.it;",
                "+module.exports.fit = global.fit;",
                "+module.exports.describe = global.describe;",
                "+module.exports.xdescribe = global.xdescribe;",
                "+module.exports.fdescribe = global.fdescribe;",
                "+module.exports.beforeEach = global.beforeEach;",
                "+module.exports.afterEach = global.afterEach;",
                "+module.exports.beforeAll = global.beforeAll;",
                "+module.exports.afterAll = global.afterAll;",
                "+// $FlowIgnore",
                "+module.exports.jest = jest;"
            ],
            "changed_files": [
                "flow-libs/jest.js.flow",
                "modules/nuclide-jest/globals.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: HTML",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "67e0b1daa0fe262ba140a21e5618ceef443d25c6",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521658163,
            "hunks": 2,
            "message": "LSP hover can have null response Summary: Apparently textDocument/hover is supposed to return null when the LSP server has no hover to offer at that point. This diff makes Nuclide cope with that. https://github.com/Microsoft/language-server-protocol/issues/261 (When I wrote this code originally, it wasn't clear what to return when the LSP server has no hover to offer. I surveyed existing LSP implementations and they returned either `[\"\"]` or `[]`, so that's what Nuclide handled. But dbaumer clarified that the preferred return value is just `null`). Reviewed By: hansonw Differential Revision: D7351011 fbshipit-source-id: e1e6da2757619b0879bb6767bd1cddfc93e482fa",
            "diff": [
                "diff --git a/pkg/nuclide-vscode-language-service-rpc/lib/LspLanguageService.js b/pkg/nuclide-vscode-language-service-rpc/lib/LspLanguageService.js",
                "index eda43f127..0559c2bfa 100644",
                "--- a/pkg/nuclide-vscode-language-service-rpc/lib/LspLanguageService.js",
                "+++ b/pkg/nuclide-vscode-language-service-rpc/lib/LspLanguageService.js",
                "@@ -1986,3 +1986,2 @@ export class LspLanguageService {",
                "       );",
                "-      invariant(response != null, 'null textDocument/hover');",
                "     } catch (e) {",
                "@@ -1992,3 +1991,3 @@ export class LspLanguageService {",
                "-    if (response.contents == null) {",
                "+    if (response == null || response.contents == null) {",
                "       return null;"
            ],
            "changed_files": [
                "pkg/nuclide-vscode-language-service-rpc/lib/LspLanguageService.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code, issue",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: code",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "d2ec631f0f87e256c351c8509360e66e7583422f",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520623353,
            "hunks": 23,
            "message": "Prefer suggestions closer to directory of the active text editor Summary: The `nuclide-prebuilt-libs/fuzzy-native` breaks ties when sorting suggestions by the suggestion size. That is a pretty bad approach for common exactly matches (e.g. `package.json`, `utils.js`, `promise.js`). This diff passes down the directory of the activate text editor to `fuzzy-native` in order to get better suggestions' sorting. This diff depends on https://github.com/facebook-atom/nuclide-prebuilt-libs/pull/8 Reviewed By: wbinnssmith Differential Revision: D7072948 fbshipit-source-id: 51bb0b7d2669fde15f096e93eda29fd51eaaa00a",
            "diff": [
                "diff --git a/pkg/nuclide-fuzzy-file-search-rpc/lib/FileSearchProcess.js b/pkg/nuclide-fuzzy-file-search-rpc/lib/FileSearchProcess.js",
                "index 09944fb6e..42140fc94 100644",
                "--- a/pkg/nuclide-fuzzy-file-search-rpc/lib/FileSearchProcess.js",
                "+++ b/pkg/nuclide-fuzzy-file-search-rpc/lib/FileSearchProcess.js",
                "@@ -11,2 +11,3 @@",
                "+import type {NuclideUri} from 'nuclide-commons/nuclideUri';",
                " import type {FileSearchResult} from './rpc-types';",
                "@@ -58,3 +59,6 @@ class FileSearchProcess {",
                "-  async query(query: string): Promise<Array<FileSearchResult>> {",
                "+  async query(",
                "+    query: string,",
                "+    queryRoot: ?NuclideUri = undefined,",
                "+  ): Promise<Array<FileSearchResult>> {",
                "     const task = this._task;",
                "@@ -66,3 +70,3 @@ class FileSearchProcess {",
                "       method: 'doSearch',",
                "-      args: [this._directory, query],",
                "+      args: [this._directory, query, queryRoot],",
                "     });",
                "diff --git a/pkg/nuclide-fuzzy-file-search-rpc/lib/FuzzyFileSearchService.js b/pkg/nuclide-fuzzy-file-search-rpc/lib/FuzzyFileSearchService.js",
                "index 5103d1ac6..0581d4004 100644",
                "--- a/pkg/nuclide-fuzzy-file-search-rpc/lib/FuzzyFileSearchService.js",
                "+++ b/pkg/nuclide-fuzzy-file-search-rpc/lib/FuzzyFileSearchService.js",
                "@@ -47,17 +47,20 @@ const filesystemCache: LRUCache<NuclideUri, Promise<FileSystemMetadata>> = LRU({",
                "  */",
                "-export async function queryFuzzyFile(",
                "+export async function queryFuzzyFile(config: {|",
                "   rootDirectory: NuclideUri,",
                "+  queryRoot?: NuclideUri,",
                "   queryString: string,",
                "   ignoredNames: Array<string>,",
                "-): Promise<Array<FileSearchResult>> {",
                "-  let metadataPromise = filesystemCache.get(rootDirectory);",
                "+|}): Promise<Array<FileSearchResult>> {",
                "+  let metadataPromise = filesystemCache.get(config.rootDirectory);",
                "   if (metadataPromise == null) {",
                "-    metadataPromise = getFileSystemMetadata(rootDirectory);",
                "-    filesystemCache.set(rootDirectory, metadataPromise);",
                "+    metadataPromise = getFileSystemMetadata(config.rootDirectory);",
                "+    filesystemCache.set(config.rootDirectory, metadataPromise);",
                "   }",
                "-",
                "   const metadata = await metadataPromise;",
                "   if (!metadata.isEden) {",
                "-    const search = await fileSearchForDirectory(rootDirectory, ignoredNames);",
                "-    return search.query(queryString);",
                "+    const search = await fileSearchForDirectory(",
                "+      config.rootDirectory,",
                "+      config.ignoredNames,",
                "+    );",
                "+    return search.query(config.queryString, config.queryRoot);",
                "   } else {",
                "@@ -67,3 +70,3 @@ export async function queryFuzzyFile(",
                "     invariant(edenFsRoot != null);",
                "-    return doSearch(queryString, edenFsRoot, rootDirectory);",
                "+    return doSearch(config.queryString, edenFsRoot, config.rootDirectory);",
                "   }",
                "@@ -96,3 +99,7 @@ export async function queryAllExistingFuzzyFile(",
                "     directories.map(rootDirectory =>",
                "-      queryFuzzyFile(rootDirectory, queryString, ignoredNames),",
                "+      queryFuzzyFile({",
                "+        ignoredNames,",
                "+        queryString,",
                "+        rootDirectory,",
                "+      }),",
                "     ),",
                "diff --git a/pkg/nuclide-fuzzy-file-search-rpc/lib/process/FileSearch.js b/pkg/nuclide-fuzzy-file-search-rpc/lib/process/FileSearch.js",
                "index b2582d58f..66ef88619 100644",
                "--- a/pkg/nuclide-fuzzy-file-search-rpc/lib/process/FileSearch.js",
                "+++ b/pkg/nuclide-fuzzy-file-search-rpc/lib/process/FileSearch.js",
                "@@ -11,2 +11,3 @@",
                "+import type {NuclideUri} from 'nuclide-commons/nuclideUri';",
                " import type {FileSearchResult} from '../rpc-types';",
                "@@ -77,5 +78,6 @@ export async function doSearch(",
                "   query: string,",
                "+  queryRoot: ?NuclideUri,",
                " ): Promise<Array<FileSearchResult>> {",
                "   const pathSet = await fileSearchForDirectory(directory);",
                "-  return pathSet.query(query);",
                "+  return pathSet.query(query, queryRoot);",
                " }",
                "diff --git a/pkg/nuclide-fuzzy-file-search-rpc/lib/process/PathSet.js b/pkg/nuclide-fuzzy-file-search-rpc/lib/process/PathSet.js",
                "index e75b5fe79..bcf4c80ef 100644",
                "--- a/pkg/nuclide-fuzzy-file-search-rpc/lib/process/PathSet.js",
                "+++ b/pkg/nuclide-fuzzy-file-search-rpc/lib/process/PathSet.js",
                "@@ -11,2 +11,3 @@",
                "+import type {NuclideUri} from 'nuclide-commons/nuclideUri';",
                " import type {FileSearchResult} from '../rpc-types';",
                "@@ -52,3 +53,6 @@ export class PathSet {",
                "-  query(query: string): Array<FileSearchResult> {",
                "+  query(",
                "+    query: string,",
                "+    queryRoot: ?NuclideUri = undefined,",
                "+  ): Array<FileSearchResult> {",
                "     // Attempt to relativize paths that people might e.g. copy + paste.",
                "@@ -68,2 +72,7 @@ export class PathSet {",
                "+    let relQueryRoot;",
                "+    if (queryRoot != null && nuclideUri.contains(basePath, queryRoot)) {",
                "+      relQueryRoot = nuclideUri.relative(basePath, queryRoot);",
                "+    }",
                "+",
                "     return (",
                "@@ -74,2 +83,3 @@ export class PathSet {",
                "           recordMatchIndexes: true,",
                "+          rootPath: relQueryRoot,",
                "         })",
                "diff --git a/pkg/nuclide-fuzzy-file-search-rpc/spec/FuzzyFileSearchService-spec.js b/pkg/nuclide-fuzzy-file-search-rpc/spec/FuzzyFileSearchService-spec.js",
                "index 59c3f0d8b..099e048db 100644",
                "--- a/pkg/nuclide-fuzzy-file-search-rpc/spec/FuzzyFileSearchService-spec.js",
                "+++ b/pkg/nuclide-fuzzy-file-search-rpc/spec/FuzzyFileSearchService-spec.js",
                "@@ -51,3 +51,7 @@ describe('FuzzyFileSearchService.queryFuzzyFile', () => {",
                "       // uses watchman and we don't have a good way to mock dependencies.",
                "-      const fileSearchResults = await queryFuzzyFile(__dirname, 'anything', []);",
                "+      const fileSearchResults = await queryFuzzyFile({",
                "+        rootDirectory: __dirname,",
                "+        queryString: 'anything',",
                "+        ignoredNames: [],",
                "+      });",
                "       expect(fileSearchResults).toEqual([]);",
                "diff --git a/pkg/nuclide-fuzzy-filename-provider/lib/FuzzyFileNameProvider.js b/pkg/nuclide-fuzzy-filename-provider/lib/FuzzyFileNameProvider.js",
                "index 6011e059a..7cc86ec6e 100644",
                "--- a/pkg/nuclide-fuzzy-filename-provider/lib/FuzzyFileNameProvider.js",
                "+++ b/pkg/nuclide-fuzzy-filename-provider/lib/FuzzyFileNameProvider.js",
                "@@ -16,2 +16,4 @@ import type {",
                "+import nuclideUri from 'nuclide-commons/nuclideUri';",
                "+import {isGkEnabled} from '../../commons-node/passesGK';",
                " import {",
                "@@ -50,7 +52,8 @@ export default ({",
                "     const service = getFuzzyFileSearchServiceByNuclideUri(directoryPath);",
                "-    const results = await service.queryFuzzyFile(",
                "-      directoryPath,",
                "-      fileName,",
                "-      getIgnoredNames(),",
                "-    );",
                "+    const results = await service.queryFuzzyFile({",
                "+      rootDirectory: directoryPath,",
                "+      queryRoot: getQueryRoot(),",
                "+      queryString: fileName,",
                "+      ignoredNames: getIgnoredNames(),",
                "+    });",
                "@@ -78 +81,14 @@ export default ({",
                " }: DirectoryProviderType<FileResult>);",
                "+",
                "+// Returns the directory of the active text editor which will be used to unbreak",
                "+// ties when sorting the suggestions.",
                "+// TODO(T26559382) Extract to util function",
                "+function getQueryRoot(): string | void {",
                "+  if (!isGkEnabled('nuclide_fuzzy_file_search_with_root_path')) {",
                "+    return undefined;",
                "+  }",
                "+  const editor = atom.workspace.getActiveTextEditor();",
                "+  const uri = editor ? editor.getURI() : null;",
                "+",
                "+  return uri != null ? nuclideUri.dirname(uri) : undefined;",
                "+}",
                "diff --git a/pkg/nuclide-fuzzy-filename-provider/lib/main.js b/pkg/nuclide-fuzzy-filename-provider/lib/main.js",
                "index d487154a4..7883b2b5c 100644",
                "--- a/pkg/nuclide-fuzzy-filename-provider/lib/main.js",
                "+++ b/pkg/nuclide-fuzzy-filename-provider/lib/main.js",
                "@@ -112,3 +112,7 @@ class Activation {",
                "     try {",
                "-      await service.queryFuzzyFile(projectPath, 'a', getIgnoredNames());",
                "+      await service.queryFuzzyFile({",
                "+        rootDirectory: projectPath,",
                "+        queryString: 'a',",
                "+        ignoredNames: getIgnoredNames(),",
                "+      });",
                "     } catch (err) {"
            ],
            "changed_files": [
                "pkg/nuclide-fuzzy-file-search-rpc/lib/FileSearchProcess.js",
                "pkg/nuclide-fuzzy-file-search-rpc/lib/FuzzyFileSearchService.js",
                "pkg/nuclide-fuzzy-file-search-rpc/lib/process/FileSearch.js",
                "pkg/nuclide-fuzzy-file-search-rpc/lib/process/PathSet.js",
                "pkg/nuclide-fuzzy-file-search-rpc/spec/FuzzyFileSearchService-spec.js",
                "pkg/nuclide-fuzzy-filename-provider/lib/FuzzyFileNameProvider.js",
                "pkg/nuclide-fuzzy-filename-provider/lib/main.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: editor",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: provide",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "9be822f8f64f6d0c7c913024db722317f76a900e",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521220981,
            "hunks": 1,
            "message": "Catch missing file exception when rotating HHVM debugger logs Summary: If they don't exist, they don't need to be rotated. Reviewed By: mostafaeweda Differential Revision: D7299354 fbshipit-source-id: dc0f19fb126bab0a445eb11293afb6e91c137a6d",
            "diff": [
                "diff --git a/pkg/nuclide-debugger-hhvm-rpc/lib/main.js b/pkg/nuclide-debugger-hhvm-rpc/lib/main.js",
                "index 5d946ff64..465a9b96a 100644",
                "--- a/pkg/nuclide-debugger-hhvm-rpc/lib/main.js",
                "+++ b/pkg/nuclide-debugger-hhvm-rpc/lib/main.js",
                "@@ -152,3 +152,8 @@ async function _createLogFile(path: string): Promise<void> {",
                " async function _rotateHHVMLogs(path: string): Promise<void> {",
                "-  const fileStat = await fsPromise.stat(path);",
                "+  let fileStat;",
                "+  try {",
                "+    fileStat = await fsPromise.stat(path);",
                "+  } catch (_) {",
                "+    return;",
                "+  }"
            ],
            "changed_files": [
                "pkg/nuclide-debugger-hhvm-rpc/lib/main.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: hhvm",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: hhvm",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "3ddb6ed84498287301ee1baf2f58d62b86f59af5",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520971666,
            "hunks": 1,
            "message": "Fix missing return in keytarWrapper Summary: This causes passwords to be unnecessarily saved twice. (and brings up an extra keychain prompt in many cases.) Reviewed By: matthewwithanm Differential Revision: D7260862 fbshipit-source-id: 628c6845364b76e4d391955516f792c54ce27ee0",
            "diff": [
                "diff --git a/pkg/commons-node/keytarWrapper.js b/pkg/commons-node/keytarWrapper.js",
                "index d0ddb3193..afc229275 100644",
                "--- a/pkg/commons-node/keytarWrapper.js",
                "+++ b/pkg/commons-node/keytarWrapper.js",
                "@@ -136,2 +136,3 @@ export default {",
                "       );",
                "+      return;",
                "     }"
            ],
            "changed_files": [
                "pkg/commons-node/keytarWrapper.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "da504929b6158ad196f59d0e679f0444174dbbaf"
                ]
            ],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: chain",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b072fa647a9b8f97e8fb1776efbee63f7b6cd3b0",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520380383,
            "hunks": 3,
            "message": "Fix type error supressions for fb-dash Reviewed By: nmote Differential Revision: D7173512 fbshipit-source-id: eab3083bd18cb54f255694182213d0d76418f30f",
            "diff": [
                "diff --git a/pkg/sample-nuclide-contributors/lib/NuclidePackageReloadDashProvider.js b/pkg/sample-nuclide-contributors/lib/NuclidePackageReloadDashProvider.js",
                "index 8f6eeb1a6..6b643cd5e 100644",
                "--- a/pkg/sample-nuclide-contributors/lib/NuclidePackageReloadDashProvider.js",
                "+++ b/pkg/sample-nuclide-contributors/lib/NuclidePackageReloadDashProvider.js",
                "@@ -11,3 +11,2 @@",
                "-// $FlowFB",
                " import type {",
                "@@ -16,2 +15,3 @@ import type {",
                "   QueryContext,",
                "+  // $FlowFB",
                " } from '../../fb-dash/lib/types';",
                "diff --git a/pkg/sample-nuclide-contributors/lib/main.js b/pkg/sample-nuclide-contributors/lib/main.js",
                "index 3811186dd..71c8d0058 100644",
                "--- a/pkg/sample-nuclide-contributors/lib/main.js",
                "+++ b/pkg/sample-nuclide-contributors/lib/main.js",
                "@@ -11,2 +11,3 @@",
                "+// $FlowFB",
                " import type {RegisterProvider} from '../../fb-dash/lib/types';"
            ],
            "changed_files": [
                "pkg/sample-nuclide-contributors/lib/NuclidePackageReloadDashProvider.js",
                "pkg/sample-nuclide-contributors/lib/main.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "46eb625b540df3dec81688520d44f8838ee0b57a"
                ]
            ],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: provide",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9d305e51c454955219f3b8f17ec5d42d57ba5800",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520474187,
            "hunks": 3,
            "message": "yarn add -D -E babel-plugin-transform-async-super@1.0.0 Summary: I have an upcoming revision that uses `super` inside an `async` method and apparently this is necessary to workaround an issue in Babel 6 that is fixed in Babel 7: https://github.com/devongovett/babel-plugin-transform-async-super Reviewed By: zertosh Differential Revision: D7178758 fbshipit-source-id: 5de28df73a56771919e58d2698b054f18dc95d3a",
            "diff": [
                "diff --git a/modules/nuclide-node-transpiler/lib/NodeTranspiler.js b/modules/nuclide-node-transpiler/lib/NodeTranspiler.js",
                "index 6d9e18539..6093325b6 100644",
                "--- a/modules/nuclide-node-transpiler/lib/NodeTranspiler.js",
                "+++ b/modules/nuclide-node-transpiler/lib/NodeTranspiler.js",
                "@@ -59,2 +59,5 @@ const BABEL_OPTIONS = {",
                "     }],",
                "+    // babel-plugin-transform-async-super is used to workaround a bug in Babel",
                "+    // 6. Remove this once we upgrade to Babel 7.",
                "+    [require.resolve('babel-plugin-transform-async-super')],",
                "     [require.resolve('babel-plugin-transform-class-properties')],",
                "diff --git a/package.json b/package.json",
                "index 5e5a8bd5f..6ab8dfbb7 100644",
                "--- a/package.json",
                "+++ b/package.json",
                "@@ -155,2 +155,3 @@",
                "     \"babel-plugin-syntax-flow\": \"6.18.0\",",
                "+    \"babel-plugin-transform-async-super\": \"1.0.0\",",
                "     \"babel-plugin-transform-async-to-module-method\": \"6.24.1\",",
                "diff --git a/yarn.lock b/yarn.lock",
                "index ae0b72246..9cdd1b7ac 100644",
                "--- a/yarn.lock",
                "+++ b/yarn.lock",
                "@@ -515,2 +515,8 @@ babel-plugin-syntax-trailing-function-commas@^6.8.0:",
                "+babel-plugin-transform-async-super@1.0.0:",
                "+  version \"1.0.0\"",
                "+  resolved \"https://registry.yarnpkg.com/babel-plugin-transform-async-super/-/babel-plugin-transform-async-super-1.0.0.tgz#4d0884df0cad1017271105522b79f78db7892678\"",
                "+  dependencies:",
                "+    babel-template \"^6.26.0\"",
                "+",
                " babel-plugin-transform-async-to-module-method@6.24.1:"
            ],
            "changed_files": [
                "modules/nuclide-node-transpiler/lib/NodeTranspiler.js",
                "package.json",
                "yarn.lock"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: issue",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "fb3e340e8bc9a389c693eb698bc5788645f6c125",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521141864,
            "hunks": 1,
            "message": "ignore optional dependencies by default Summary: This bundles a nightly version of yarn into the nuclide tree. This ignores optional dependencies by default now that the implementation in yarn had its issues ironed out. Reviewed By: zertosh Differential Revision: D7239287 fbshipit-source-id: a75dbcaea49853befbeaa6ee8ae818389d2ccdf0",
            "diff": [
                "diff --git a/.yarnrc b/.yarnrc",
                "index 11fb03eb9..8fb2ea8d5 100644",
                "--- a/.yarnrc",
                "+++ b/.yarnrc",
                "@@ -9,2 +9,5 @@ ignore-scripts true",
                "+# Don't install things like fsevents in all environments",
                "+ignore-optional true",
                "+",
                " workspaces-experimental true"
            ],
            "changed_files": [
                ".yarnrc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: issue",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "da337245cd81efccbebbb4eac3767e692dca1895",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520461650,
            "hunks": 4,
            "message": "Have Python logs go to $TMPDIR/nuclide-$USER-logs Summary: Looks like I accidentally regressed this when I changed the logging path! Also, by not passing in the full environment, this uses `/tmp` rather than the standard `$TEMP` on Mac OS, so that needed a fix. This solves an unusual issue on shared servers where users would fight for permissions over `/tmp/nuclide-jedi.log`. Reviewed By: pelmers Differential Revision: D7176997 fbshipit-source-id: 0e05df56492b052cbd3fe600ec59b531d1eb2e7f",
            "diff": [
                "diff --git a/pkg/nuclide-python-rpc/lib/JediServer.js b/pkg/nuclide-python-rpc/lib/JediServer.js",
                "index 58e61f2f3..a0815752c 100644",
                "--- a/pkg/nuclide-python-rpc/lib/JediServer.js",
                "+++ b/pkg/nuclide-python-rpc/lib/JediServer.js",
                "@@ -28,3 +28,3 @@ const OPTS = {",
                "   detached: false, // When Atom is killed, server process should be killed.",
                "-  env: {PYTHONPATH: LIB_PATH},",
                "+  env: {...process.env, PYTHONPATH: LIB_PATH},",
                "   /* TODO(T17353599) */ isExitError: () => false,",
                "diff --git a/pkg/nuclide-python-rpc/python/jediserver.py b/pkg/nuclide-python-rpc/python/jediserver.py",
                "index 6c85c19b1..11902c32f 100644",
                "--- a/pkg/nuclide-python-rpc/python/jediserver.py",
                "+++ b/pkg/nuclide-python-rpc/python/jediserver.py",
                "@@ -6,2 +6,8 @@",
                "+from __future__ import absolute_import",
                "+from __future__ import division",
                "+from __future__ import print_function",
                "+from __future__ import unicode_literals",
                "+",
                "+import errno",
                " import getpass",
                "@@ -21,3 +27,2 @@ import outline",
                "-LOGGING_DIR = 'nuclide-%s-logs/python' % getpass.getuser()",
                " LIB_DIR = os.path.abspath('../VendorLib')",
                "@@ -58,3 +63,15 @@ class JediServer:",
                "         # Be consistent with the main Nuclide logs.",
                "-        log_path = os.path.join(tempfile.gettempdir(), 'nuclide-jedi.log')",
                "+        log_dir = os.path.join(",
                "+            tempfile.gettempdir(),",
                "+            'nuclide-%s-logs' % getpass.getuser()",
                "+        )",
                "+        try:",
                "+            os.makedirs(log_dir)",
                "+        except OSError as e:",
                "+            if e.errno != errno.EEXIST:",
                "+                # Skip logging on any other exception.",
                "+                return",
                "+        except Exception as e:",
                "+            return",
                "+        log_path = os.path.join(log_dir, 'nuclide-jedi.log')",
                "         handler = FileHandler(log_path)"
            ],
            "changed_files": [
                "pkg/nuclide-python-rpc/lib/JediServer.js",
                "pkg/nuclide-python-rpc/python/jediserver.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: issue",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "bea1205940cca955266af67d088036fa2996c93b",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520636839,
            "hunks": 12,
            "message": "Display a visible error when FB login fails Summary: Right now, we set the password in the keychain without handling the failure case. This changes the `keytarWrapper` methods to actually throw when their underlying code throws (which ends up being a `ProcessExitError`). Reviewed By: matthewwithanm Differential Revision: D7201906 fbshipit-source-id: 3822b7196edc2f20c1e8a44bdb53064e1d21ecb5",
            "diff": [
                "diff --git a/pkg/commons-node/keytarWrapper.js b/pkg/commons-node/keytarWrapper.js",
                "index b908bbc8c..d0ddb3193 100644",
                "--- a/pkg/commons-node/keytarWrapper.js",
                "+++ b/pkg/commons-node/keytarWrapper.js",
                "@@ -12,3 +12,3 @@",
                " import nuclideUri from 'nuclide-commons/nuclideUri';",
                "-import {runCommand} from 'nuclide-commons/process';",
                "+import {runCommand, ProcessExitError} from 'nuclide-commons/process';",
                "@@ -30,5 +30,5 @@ const getPasswordScriptAsync = `",
                "       rl.close();",
                "-    }, function() {",
                "-      console.log(null);",
                "-      rl.close();",
                "+    }, function(err) {",
                "+      console.error(err);",
                "+      process.exit(1);",
                "     });",
                "@@ -45,7 +45,7 @@ const replacePasswordScriptAsync = `",
                "     keytar.setPassword(data.service, data.account, data.password).then(function() {",
                "-      console.log(JSON.stringify(true));",
                "-    }, function() {",
                "-      console.log(JSON.stringify(false));",
                "-    })",
                "-    .then(rl.close.bind(rl), rl.close.bind(rl))",
                "+      rl.close();",
                "+    }, function(err) {",
                "+      console.error(err);",
                "+      process.exit(1);",
                "+    });",
                "   });",
                "@@ -62,6 +62,7 @@ const deletePasswordScriptAsync = `",
                "       console.log(JSON.stringify(result));",
                "-    }, function() {",
                "-      console.log(JSON.stringify(false));",
                "-    })",
                "-    .then(rl.close.bind(rl), rl.close.bind(rl))",
                "+      rl.close();",
                "+    }, function(err) {",
                "+      console.error(err);",
                "+      process.exit(1);",
                "+    });",
                "   });",
                "@@ -94,3 +95,11 @@ function runScriptInApmNode(",
                "   };",
                "-  return runCommand(getApmNodePath(), args, options).toPromise();",
                "+  return runCommand(getApmNodePath(), args, options)",
                "+    .toPromise()",
                "+    .catch(err => {",
                "+      if (err instanceof ProcessExitError) {",
                "+        // Unwrap underlying error from stderr (as it already has a stack!)",
                "+        throw Error(err.stderr);",
                "+      }",
                "+      throw err;",
                "+    });",
                " }",
                "@@ -98,2 +107,6 @@ function runScriptInApmNode(",
                " export default {",
                "+  /**",
                "+   * Returns the password (or null if it doesn't exist).",
                "+   * Rejects on keychain access failure.",
                "+   */",
                "   async getPassword(service: string, account: string): Promise<?string> {",
                "@@ -107,2 +120,6 @@ export default {",
                "+  /**",
                "+   * Returns nothing.",
                "+   * Rejects on keychain access failure.",
                "+   */",
                "   async replacePassword(",
                "@@ -111,11 +128,9 @@ export default {",
                "     password: string,",
                "-  ): Promise<?boolean> {",
                "+  ): Promise<void> {",
                "     if (typeof atom === 'object') {",
                "-      return JSON.parse(",
                "-        await runScriptInApmNode(",
                "-          replacePasswordScriptAsync,",
                "-          service,",
                "-          account,",
                "-          password,",
                "-        ),",
                "+      await runScriptInApmNode(",
                "+        replacePasswordScriptAsync,",
                "+        service,",
                "+        account,",
                "+        password,",
                "       );",
                "@@ -125,3 +140,7 @@ export default {",
                "-  async deletePassword(service: string, account: string): Promise<?boolean> {",
                "+  /**",
                "+   * Returns true if a password was deleted, or false if it didn't exist.",
                "+   * Rejects on keychain access failure.",
                "+   */",
                "+  async deletePassword(service: string, account: string): Promise<boolean> {",
                "     if (typeof atom === 'object') {",
                "diff --git a/pkg/nuclide-remote-connection/lib/RemoteConnectionConfigurationManager.js b/pkg/nuclide-remote-connection/lib/RemoteConnectionConfigurationManager.js",
                "index f57b448af..dc0cf6ece 100644",
                "--- a/pkg/nuclide-remote-connection/lib/RemoteConnectionConfigurationManager.js",
                "+++ b/pkg/nuclide-remote-connection/lib/RemoteConnectionConfigurationManager.js",
                "@@ -172,5 +172,5 @@ async function decryptConfig(",
                "   const restoredClientKey = decryptString(encryptedString, password, salt);",
                "-  // \"nolint\" is to suppress ArcanistPrivateKeyLinter errors",
                "   if (",
                "-    !restoredClientKey.startsWith('-----BEGIN RSA PRIVATE KEY-----') // nolint",
                "+    // @lint-ignore PRIVATEKEY1",
                "+    !restoredClientKey.startsWith('-----BEGIN RSA PRIVATE KEY-----')",
                "   ) {"
            ],
            "changed_files": [
                "pkg/commons-node/keytarWrapper.js",
                "pkg/nuclide-remote-connection/lib/RemoteConnectionConfigurationManager.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: chain, code",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "6beee6b58cfbdc8627ed40e7ea64775e6858d0bb",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521844239,
            "hunks": 3,
            "message": "Always include `alternate` in set of labels Summary: This was an oversight -- the `labels` set was never used. Reviewed By: matthewwithanm Differential Revision: D7383835 fbshipit-source-id: ed331a97488c899881183daa933a589a03833a5f",
            "diff": [
                "diff --git a/pkg/nuclide-file-family-projectionist/lib/ProjectionistFileFamilyProvider.js b/pkg/nuclide-file-family-projectionist/lib/ProjectionistFileFamilyProvider.js",
                "index 93580924f..f1516acfd 100644",
                "--- a/pkg/nuclide-file-family-projectionist/lib/ProjectionistFileFamilyProvider.js",
                "+++ b/pkg/nuclide-file-family-projectionist/lib/ProjectionistFileFamilyProvider.js",
                "@@ -93,2 +93,3 @@ export default class ProjectionistFileFamilyProvider {",
                "     );",
                "+",
                "     const files: FileMap = new Map([",
                "@@ -115,3 +116,3 @@ export default class ProjectionistFileFamilyProvider {",
                "         to: nuclideUri.resolve(cwd, alternate),",
                "-        labels: type == null ? new Set() : new Set([type]),",
                "+        labels,",
                "         directed: true,",
                "diff --git a/pkg/nuclide-projectionist/spec/main-spec.js b/pkg/nuclide-projectionist/spec/main-spec.js",
                "index f37a40bda..b563f9c69 100644",
                "--- a/pkg/nuclide-projectionist/spec/main-spec.js",
                "+++ b/pkg/nuclide-projectionist/spec/main-spec.js",
                "@@ -90,2 +90,19 @@ describe('Projectionist', () => {",
                "+    it('returns all possible alternates', () => {",
                "+      const projectionist = new Projectionist({",
                "+        'pkg/*/spec/*-spec.js': {",
                "+          alternate: 'pkg/{}/lib/{}.js',",
                "+          type: 'test',",
                "+        },",
                "+        'pkg/*/*.js': {",
                "+          alternate: 'pkg/{}/spec/{}-spec.js',",
                "+        },",
                "+      });",
                "+",
                "+      expect(projectionist.getAlternates('pkg/foo/spec/bar-spec.js')).toEqual([",
                "+        'pkg/foo/lib/bar.js',",
                "+        'pkg/foo/spec/spec/bar-spec-spec.js',",
                "+      ]);",
                "+    });",
                "+",
                "     it('expands dirname and basename', () => {"
            ],
            "changed_files": [
                "pkg/nuclide-file-family-projectionist/lib/ProjectionistFileFamilyProvider.js",
                "pkg/nuclide-projectionist/spec/main-spec.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: provide",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "f7b67326b83fdf2787817151da2bdc2ff5f9631f",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520620210,
            "hunks": 2,
            "message": "Update xterm dependency to 3.1.0 Summary: The new version adds a fontWeight configuration option and should fix issues related to moving the terminal between monitors of different DPI, per release notes: https://github.com/xtermjs/xterm.js/releases Reviewed By: hansonw Differential Revision: D7169596 fbshipit-source-id: ca3f16fb34b3b737576cfe79be00e6f3001390bf",
            "diff": [
                "diff --git a/package.json b/package.json",
                "index 039246cd7..c4b6a58b4 100644",
                "--- a/package.json",
                "+++ b/package.json",
                "@@ -143,3 +143,3 @@",
                "     \"xml2js\": \"0.4.17\",",
                "-    \"xterm\": \"3.0.1\",",
                "+    \"xterm\": \"3.1.0\",",
                "     \"yargs\": \"3.32.0\"",
                "diff --git a/yarn.lock b/yarn.lock",
                "index aa2c71ba0..409301f8a 100644",
                "--- a/yarn.lock",
                "+++ b/yarn.lock",
                "@@ -5852,5 +5852,5 @@ xmldom@0.1.x, xmldom@~0.1.22:",
                "-xterm@3.0.1:",
                "-  version \"3.0.1\"",
                "-  resolved \"https://registry.yarnpkg.com/xterm/-/xterm-3.0.1.tgz#6fef126c6198699d08c3d1dfd43f4c7c45740d39\"",
                "+xterm@3.1.0:",
                "+  version \"3.1.0\"",
                "+  resolved \"https://registry.yarnpkg.com/xterm/-/xterm-3.1.0.tgz#7f7e1c8cf4b80bd881a4e8891213b851423e90c9\""
            ],
            "changed_files": [
                "package.json",
                "yarn.lock"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: issue",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "2e65a591eee1f71f353b9b5b8b6ca979994a7c4d",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1522082749,
            "hunks": 3,
            "message": "Make LspLanguageService fall back to language identifier regex when no hover range is given Summary: Rather than falling back to a single character range when the remote LSP server doesn't return a range, we should use a simple word regex to make a range.  The hovered-over-identifier's position is used to calculate when to recheck for a new type hint, so this change will make it easier to mouse over the shown type hint without it going away. Reviewed By: ljw1004 Differential Revision: D7390235 fbshipit-source-id: c8b769bbe0336f528f1613cff525a14b4ff7d070",
            "diff": [
                "diff --git a/pkg/nuclide-vscode-language-service-rpc/lib/LspLanguageService.js b/pkg/nuclide-vscode-language-service-rpc/lib/LspLanguageService.js",
                "index 0559c2bfa..c6df6ee7d 100644",
                "--- a/pkg/nuclide-vscode-language-service-rpc/lib/LspLanguageService.js",
                "+++ b/pkg/nuclide-vscode-language-service-rpc/lib/LspLanguageService.js",
                "@@ -111,2 +111,4 @@ import {arrayCompact} from 'nuclide-commons/collection';",
                "+const WORD_REGEX = /\\w+/gi;",
                "+",
                " type State =",
                "@@ -1600,3 +1602,2 @@ export class LspLanguageService {",
                "     if (referencedSymbolName == null && buffer != null) {",
                "-      const WORD_REGEX = /\\w+/gi;",
                "       const match = wordAtPositionFromBuffer(buffer, position, WORD_REGEX);",
                "@@ -2017,2 +2018,12 @@ export class LspLanguageService {",
                "       range = convert.lspRange_atomRange(response.range);",
                "+    } else {",
                "+      const buffer = await this.tryGetBufferWhenWeAndLspAtSameVersion(",
                "+        fileVersion,",
                "+      );",
                "+      if (buffer != null) {",
                "+        const match = wordAtPositionFromBuffer(buffer, position, WORD_REGEX);",
                "+        if (match != null && match.wordMatch.length > 0) {",
                "+          range = match.range;",
                "+        }",
                "+      }",
                "     }"
            ],
            "changed_files": [
                "pkg/nuclide-vscode-language-service-rpc/lib/LspLanguageService.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: code",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "08fce5ee76a6da68db414f92f66096f8f7a1fcc3",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521482586,
            "hunks": 16,
            "message": "Override handleclose to provide more information. Reviewed By: hchau-fb Differential Revision: D7310983 fbshipit-source-id: f44fc0e81c80b51152e2d5e5911ef7c6f21700d4",
            "diff": [
                "diff --git a/pkg/nuclide-cquery-lsp-rpc/lib/CqueryLanguageClient.js b/pkg/nuclide-cquery-lsp-rpc/lib/CqueryLanguageClient.js",
                "index ae60b2c94..ec5e6a233 100644",
                "--- a/pkg/nuclide-cquery-lsp-rpc/lib/CqueryLanguageClient.js",
                "+++ b/pkg/nuclide-cquery-lsp-rpc/lib/CqueryLanguageClient.js",
                "@@ -15,3 +15,5 @@ import type {NuclideUri} from 'nuclide-commons/nuclideUri';",
                " import type {Subscription, ConnectableObservable} from 'rxjs';",
                "+import type {HostServices} from '../../nuclide-language-service-rpc/lib/rpc-types';",
                " import type {FileDiagnosticMap} from '../../nuclide-language-service/lib/LanguageService';",
                "+import type {FileCache} from '../../nuclide-open-files-rpc';",
                " import type {",
                "@@ -21,5 +23,8 @@ import type {",
                " } from '../../nuclide-vscode-language-service-rpc/lib/protocol';",
                "-import type {RequestLocationsResult} from './types';",
                "+import type {RequestLocationsResult, CqueryProjectKey} from './types';",
                "+import fsPromise from 'nuclide-commons/fsPromise';",
                " import {Observable} from 'rxjs';",
                "+import {track} from '../../nuclide-analytics';",
                "+import {isHeaderFile} from '../../nuclide-clang-rpc/lib/utils';",
                " import {",
                "@@ -32,2 +37,3 @@ import {",
                " import {LspLanguageService} from '../../nuclide-vscode-language-service-rpc/lib/LspLanguageService';",
                "+import {CqueryProjectManager} from './CqueryProjectManager';",
                " import {parseOutlineTree} from './outline/CqueryOutlineParser';",
                "@@ -60,4 +66,6 @@ function shortenByOneCharacter({newText, range}: TextEdit): TextEdit {",
                " export class CqueryLanguageClient extends LspLanguageService {",
                "-  _checkProject: string => boolean = _ => false;",
                "-  _progressInfo: ?ProgressInfo;",
                "+  _projectKey: string;",
                "+  _progressInfo: ProgressInfo;",
                "+  _projectManager: CqueryProjectManager;",
                "+  _logFile: string;",
                "   _progressSubscription: ?Subscription;",
                "@@ -69,8 +77,38 @@ export class CqueryLanguageClient extends LspLanguageService {",
                "-  setProjectChecker(check: string => boolean): void {",
                "-    this._checkProject = check;",
                "-  }",
                "-",
                "-  setProgressInfo(info: ProgressInfo): void {",
                "-    this._progressInfo = info;",
                "+  constructor(",
                "+    logger: log4js$Logger,",
                "+    fileCache: FileCache,",
                "+    host: HostServices,",
                "+    languageServerName: string,",
                "+    command: string,",
                "+    args: Array<string>,",
                "+    spawnOptions: Object = {},",
                "+    projectRoot: string,",
                "+    fileExtensions: Array<string>,",
                "+    initializationOptions: Object,",
                "+    additionalLogFilesRetentionPeriod: number,",
                "+    logFile: string,",
                "+    progressInfo: ProgressInfo,",
                "+    projectKey: CqueryProjectKey,",
                "+    projectManager: CqueryProjectManager,",
                "+    useOriginalEnvironment?: boolean = false,",
                "+  ) {",
                "+    super(",
                "+      logger,",
                "+      fileCache,",
                "+      host,",
                "+      languageServerName,",
                "+      command,",
                "+      args,",
                "+      spawnOptions,",
                "+      projectRoot,",
                "+      fileExtensions,",
                "+      initializationOptions,",
                "+      additionalLogFilesRetentionPeriod,",
                "+      useOriginalEnvironment,",
                "+    );",
                "+    this._logFile = logFile;",
                "+    this._progressInfo = progressInfo;",
                "+    this._projectKey = projectKey;",
                "+    this._projectManager = projectManager;",
                "   }",
                "@@ -181,3 +219,11 @@ export class CqueryLanguageClient extends LspLanguageService {",
                "   _isFileInProject(file: string): boolean {",
                "-    return super._isFileInProject(file) && this._checkProject(file);",
                "+    const project = this._projectManager.getProjectForFile(file);",
                "+    const checkProject =",
                "+      project != null",
                "+        ? CqueryProjectManager.getProjectKey(project) === this._projectKey",
                "+        : // TODO pelmers: header files aren't in the map because they do not",
                "+          // appear in compile_commands.json, but they should be cached!",
                "+          isHeaderFile(file);",
                "+",
                "+    return checkProject && super._isFileInProject(file);",
                "   }",
                "@@ -199,3 +245,44 @@ export class CqueryLanguageClient extends LspLanguageService {",
                "-  // TODO pelmers: override handleClose",
                "+  _handleClose(): void {",
                "+    track('lsp-handle-close', {",
                "+      name: this._languageServerName,",
                "+      projectKey: this._projectKey,",
                "+      fileList: this._projectManager.getFilesInProject(this._projectKey),",
                "+    });",
                "+    this._logger.error('Lsp.Close - will auto-restart');",
                "+    this._host.consoleNotification(",
                "+      this._languageServerName,",
                "+      'warning',",
                "+      `Automatically restarting ${this._languageServerName} for ${",
                "+        this._projectKey",
                "+      } after a crash`,",
                "+    );",
                "+    fsPromise",
                "+      .readFile(this._logFile)",
                "+      .then(contents => {",
                "+        const lines = contents.toString('utf8').split('\\n');",
                "+        // Find a line with 'stack trace' and take the rest (or up to 40 lines.)",
                "+        let foundStackTrace = false;",
                "+        const stackTraceLines = lines.filter(line => {",
                "+          // the string 'Stack trace:' matches loguru.hpp:",
                "+          // https://github.com/emilk/loguru/blob/master/loguru.hpp#L2424",
                "+          foundStackTrace = foundStackTrace || line.startsWith('Stack trace:');",
                "+          return foundStackTrace;",
                "+        });",
                "+        track('cquery-crash-trace', {",
                "+          projectKey: this._projectKey,",
                "+          trace: stackTraceLines.slice(0, 40).join('\\n'),",
                "+        });",
                "+        // Restart now because otherwise the restart would overwrite the log file.",
                "+        this._setState('Initial');",
                "+        this.start();",
                "+      })",
                "+      .catch(err => {",
                "+        this._host.consoleNotification(",
                "+          this._languageServerName,",
                "+          'error',",
                "+          `Unable to restart ${this._languageServerName} because of ${err}`,",
                "+        );",
                "+      });",
                "+  }",
                "diff --git a/pkg/nuclide-cquery-lsp-rpc/lib/CqueryLanguageServer.js b/pkg/nuclide-cquery-lsp-rpc/lib/CqueryLanguageServer.js",
                "index 5bfc1a6c3..91d59db0a 100644",
                "--- a/pkg/nuclide-cquery-lsp-rpc/lib/CqueryLanguageServer.js",
                "+++ b/pkg/nuclide-cquery-lsp-rpc/lib/CqueryLanguageServer.js",
                "@@ -24,3 +24,2 @@ import {getOriginalEnvironment} from 'nuclide-commons/process';",
                " import UniversalDisposable from 'nuclide-commons/UniversalDisposable';",
                "-import {isHeaderFile} from '../../nuclide-clang-rpc/lib/utils';",
                " import {",
                "@@ -144,2 +143,10 @@ export default class CqueryLanguageServer extends MultiProjectLanguageService<",
                "     }",
                "+    const projectRoot = project.hasCompilationDb",
                "+      ? nuclideUri.dirname(project.flagsFile)",
                "+      : project.projectRoot;",
                "+    const logFile = nuclideUri.join(",
                "+      initalizationOptions.cacheDirectory,",
                "+      '..',",
                "+      'diagnostics',",
                "+    );",
                "     const lsp = new CqueryLanguageClient(",
                "@@ -150,15 +157,5 @@ export default class CqueryLanguageServer extends MultiProjectLanguageService<",
                "       this._command,",
                "-      [",
                "-        '--language-server',",
                "-        '--log-file',",
                "-        nuclideUri.join(",
                "-          initalizationOptions.cacheDirectory,",
                "-          '..',",
                "-          'diagnostics',",
                "-        ),",
                "-      ],",
                "+      ['--language-server', '--log-file', logFile],",
                "       spawnOptions,",
                "-      project.hasCompilationDb",
                "-        ? nuclideUri.dirname(project.flagsFile)",
                "-        : project.projectRoot,",
                "+      projectRoot,",
                "       ['.cpp', '.h', '.hpp', '.cc', '.m', 'mm'],",
                "@@ -166,13 +163,7 @@ export default class CqueryLanguageServer extends MultiProjectLanguageService<",
                "       5 * 60 * 1000, // 5 minutes",
                "+      logFile,",
                "+      {id: projectKey, label: projectRoot},",
                "+      projectKey,",
                "+      this._projectManager,",
                "     );",
                "-",
                "-    lsp.setProjectChecker(file => {",
                "-      const checkProject = this._projectManager.getProjectForFile(file);",
                "-      return checkProject != null",
                "-        ? CqueryProjectManager.getProjectKey(checkProject) === projectKey",
                "-        : // TODO pelmers: header files aren't in the map because they do not",
                "-          // appear in compile_commands.json, but they should be cached!",
                "-          isHeaderFile(file);",
                "-    });",
                "-    lsp.setProgressInfo({id: projectKey, label: lsp._projectRoot});",
                "     lsp.start(); // Kick off 'Initializing'...",
                "diff --git a/pkg/nuclide-cquery-lsp-rpc/lib/CqueryProjectManager.js b/pkg/nuclide-cquery-lsp-rpc/lib/CqueryProjectManager.js",
                "index 5cac77f9d..a87f62810 100644",
                "--- a/pkg/nuclide-cquery-lsp-rpc/lib/CqueryProjectManager.js",
                "+++ b/pkg/nuclide-cquery-lsp-rpc/lib/CqueryProjectManager.js",
                "@@ -85,2 +85,8 @@ export class CqueryProjectManager {",
                "+  getFilesInProject(projectKey: CqueryProjectKey): Array<string> {",
                "+    return Array.from(this._fileToProjectKey.entries())",
                "+      .filter(([_, key]) => projectKey === key)",
                "+      .map(([file, _]) => file);",
                "+  }",
                "+",
                "   getProjectForFile(file: string): ?CqueryProject {"
            ],
            "changed_files": [
                "pkg/nuclide-cquery-lsp-rpc/lib/CqueryLanguageClient.js",
                "pkg/nuclide-cquery-lsp-rpc/lib/CqueryLanguageServer.js",
                "pkg/nuclide-cquery-lsp-rpc/lib/CqueryProjectManager.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: provide",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "cd26cc38f6898da44e9aacdac92180a0650e0d00",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520881986,
            "hunks": 1,
            "message": "Native debugger: fix Android attach to use VSP Summary: As above Reviewed By: mostafaeweda Differential Revision: D7240351 fbshipit-source-id: 3467c94c7e8889de9f081fc9b3944ef8229737b0",
            "diff": [
                "diff --git a/pkg/nuclide-debugger-vsp/lib/utils.js b/pkg/nuclide-debugger-vsp/lib/utils.js",
                "index 67d6ef542..e4995b457 100644",
                "--- a/pkg/nuclide-debugger-vsp/lib/utils.js",
                "+++ b/pkg/nuclide-debugger-vsp/lib/utils.js",
                "@@ -60,3 +60,3 @@ export type VspNativeDebuggerLaunchBuilderParms = {",
                " export type VspNativeDebuggerAttachBuilderParms = {",
                "-  pid: number,",
                "+  pid?: number,",
                "   sourcePath: string,"
            ],
            "changed_files": [
                "pkg/nuclide-debugger-vsp/lib/utils.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: attach",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "a16a70ca9089f82481bd0cfcc4695b49b8b5975d",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520625450,
            "hunks": 1,
            "message": "Move required stylesheet to modules for atom-ide-ui Summary: This stylesheet is required to make the component work. Without it, the console's List component was never rendered in atom-ide-ui. Reviewed By: hansonw Differential Revision: D7217370 fbshipit-source-id: a65c9df50145b6c5c92b3bbf9a1e32a15f0db9ef",
            "diff": [
                "diff --git a/modules/nuclide-commons-ui/styles/ResizeSensitiveContainer.less b/modules/nuclide-commons-ui/styles/ResizeSensitiveContainer.less",
                "new file mode 100644",
                "index 000000000..e5f55e513",
                "--- /dev/null",
                "+++ b/modules/nuclide-commons-ui/styles/ResizeSensitiveContainer.less",
                "@@ -0,0 +1,53 @@",
                "+.nuclide-resize-sensitive-container-wrapper {",
                "+  display: flex;",
                "+  flex: 1;",
                "+}",
                "+",
                "+.nuclide-resize-sensitive-container {",
                "+  position: relative;",
                "+}",
                "+",
                "+.nuclide-resize-sensitive-container-sensor,",
                "+.nuclide-resize-sensitive-container-expand,",
                "+.nuclide-resize-sensitive-container-shrink {",
                "+  position: absolute;",
                "+  height: 100%;",
                "+  width: 100%;",
                "+  left: 0;",
                "+  top: 0;",
                "+  right: 0;",
                "+  bottom: 0;",
                "+  overflow: hidden;",
                "+  z-index: -1;",
                "+  visibility: hidden;",
                "+}",
                "+",
                "+.nuclide-resize-sensitive-container-expand-inner,",
                "+.nuclide-resize-sensitive-container-shrink-inner {",
                "+  position: absolute;",
                "+  left: 0;",
                "+  top: 0;",
                "+  transition: 0s;",
                "+}",
                "+",
                "+.nuclide-resize-sensitive-container-shrink-inner {",
                "+  height: 150%;",
                "+  width: 150%;",
                "+}",
                "+",
                "+.nuclide-resize-sensitive-container-sensor {",
                "+  animation-duration: 0.1s;",
                "+  animation-name: nuclide-resize-sensitive-sensor;",
                "+}",
                "+",
                "+@keyframes nuclide-resize-sensitive-sensor {",
                "+  0% {",
                "+    opacity: 1;",
                "+  }",
                "+  50% {",
                "+    opacity: 0;",
                "+  }",
                "+  100% {",
                "+    opacity: 1;",
                "+  }",
                "+}"
            ],
            "changed_files": [
                "modules/nuclide-commons-ui/styles/ResizeSensitiveContainer.less"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: render",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "ebfb4a01c0ee7f235a56c9a6da6f2857f79b1a31",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521484585,
            "hunks": 6,
            "message": "Add atomproject modal styling and put behind GK (2 of 7). Summary: Adds basic UI (ie: react component) for project selection. Puts projects behind GK. Adds projects to UI through GK. Reviewed By: matthewwithanm Differential Revision: D7298097 fbshipit-source-id: e711eb5aa2af0393107a9fe57f36582c1d119fc1",
            "diff": [
                "diff --git a/pkg/nuclide-file-tree/components/ProjectSelection.js b/pkg/nuclide-file-tree/components/ProjectSelection.js",
                "index 6ed738fcf..1431bacab 100644",
                "--- a/pkg/nuclide-file-tree/components/ProjectSelection.js",
                "+++ b/pkg/nuclide-file-tree/components/ProjectSelection.js",
                "@@ -83,3 +83,3 @@ export class ProjectSelection extends React.Component<Props, State> {",
                "           icon=\"device-desktop\"",
                "-          label=\"Add Project Folder\"",
                "+          label=\"Add Local Folder\"",
                "         />",
                "@@ -88,3 +88,3 @@ export class ProjectSelection extends React.Component<Props, State> {",
                "           icon=\"cloud-upload\"",
                "-          label=\"Add Remote Project Folder\"",
                "+          label=\"Add Remote Folder\"",
                "         />",
                "diff --git a/pkg/nuclide-file-tree/lib/FileTreeContextMenu.js b/pkg/nuclide-file-tree/lib/FileTreeContextMenu.js",
                "index 51b90d333..21b9d80a5 100644",
                "--- a/pkg/nuclide-file-tree/lib/FileTreeContextMenu.js",
                "+++ b/pkg/nuclide-file-tree/lib/FileTreeContextMenu.js",
                "@@ -214,3 +214,3 @@ export default class FileTreeContextMenu {",
                "         {",
                "-          label: 'Add Project Folder',",
                "+          label: 'Add Folder',",
                "           command: 'application:add-project-folder',",
                "@@ -218,3 +218,3 @@ export default class FileTreeContextMenu {",
                "         {",
                "-          label: 'Add Remote Project Folder',",
                "+          label: 'Add Remote Folder',",
                "           command: 'nuclide-remote-projects:connect',",
                "@@ -222,3 +222,3 @@ export default class FileTreeContextMenu {",
                "         {",
                "-          label: 'Remove Project Folder',",
                "+          label: 'Remove Folder',",
                "           command: 'nuclide-file-tree:remove-project-folder-selection',",
                "diff --git a/pkg/nuclide-file-tree/spec/FileTreeContextMenu-spec.js b/pkg/nuclide-file-tree/spec/FileTreeContextMenu-spec.js",
                "index 79e30c3fb..709dc9ef0 100644",
                "--- a/pkg/nuclide-file-tree/spec/FileTreeContextMenu-spec.js",
                "+++ b/pkg/nuclide-file-tree/spec/FileTreeContextMenu-spec.js",
                "@@ -52,3 +52,3 @@ describe('FileTreeContextMenu', () => {",
                "       getNonNull(groups, 'New'),",
                "-      getNonNull(groups, 'Add Project Folder'),",
                "+      getNonNull(groups, 'Add Folder'),",
                "       getNonNull(groups, 'Rename'),"
            ],
            "changed_files": [
                "pkg/nuclide-file-tree/components/ProjectSelection.js",
                "pkg/nuclide-file-tree/lib/FileTreeContextMenu.js",
                "pkg/nuclide-file-tree/spec/FileTreeContextMenu-spec.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: context",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "f1dc97583426b18815859783770bbd1d81dae6c1",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521141866,
            "hunks": 135,
            "message": "Jest Test Runner for Nuclide Summary: This is the beginnings of a Jest test runner for Nuclide's packages. Nuclide has long been stuck on version 1.3 of Jasmine (circa 2012 iirc), and Jest provides a much better, modern experience with features like snapshot tests. This initial implementation doesn't handle integration tests, watch mode, or writing coverage reports. Reviewed By: hansonw Differential Revision: D7134327 fbshipit-source-id: 023da2c92454945f89c7509dff056731c3c85caa",
            "diff": [
                "diff --git a/modules/nuclide-jest/AtomJestEnvironment.js b/modules/nuclide-jest/AtomJestEnvironment.js",
                "new file mode 100644",
                "index 000000000..9e1f81bd7",
                "--- /dev/null",
                "+++ b/modules/nuclide-jest/AtomJestEnvironment.js",
                "@@ -0,0 +1,27 @@",
                "+/**",
                "+ * Copyright (c) 2017-present, Facebook, Inc.",
                "+ * All rights reserved.",
                "+ *",
                "+ * This source code is licensed under the BSD-style license found in the",
                "+ * LICENSE file in the root directory of this source tree. An additional grant",
                "+ * of patent rights can be found in the PATENTS file in the same directory.",
                "+ *",
                "+ * @noflow",
                "+ */",
                "+'use strict';",
                "+",
                "+/* eslint",
                "+  comma-dangle: [1, always-multiline],",
                "+  prefer-object-spread/prefer-object-spread: 0,",
                "+  rulesdir/no-commonjs: 0,",
                "+  */",
                "+",
                "+// eslint-disable-next-line rulesdir/no-unresolved",
                "+const NodeEnvironment = require('jest-environment-node');",
                "+",
                "+module.exports = class AtomJestEnvironment extends NodeEnvironment {",
                "+  setup() {",
                "+    this.global.atom = global.atom;",
                "+    return Promise.resolve();",
                "+  }",
                "+};",
                "diff --git a/modules/nuclide-jest/atom-runner.js b/modules/nuclide-jest/atom-runner.js",
                "new file mode 100644",
                "index 000000000..f52c1404d",
                "--- /dev/null",
                "+++ b/modules/nuclide-jest/atom-runner.js",
                "@@ -0,0 +1,96 @@",
                "+/**",
                "+ * Copyright (c) 2017-present, Facebook, Inc.",
                "+ * All rights reserved.",
                "+ *",
                "+ * This source code is licensed under the BSD-style license found in the",
                "+ * LICENSE file in the root directory of this source tree. An additional grant",
                "+ * of patent rights can be found in the PATENTS file in the same directory.",
                "+ *",
                "+ * @noflow",
                "+ */",
                "+'use strict';",
                "+",
                "+/* eslint",
                "+  comma-dangle: [1, always-multiline],",
                "+  prefer-object-spread/prefer-object-spread: 0,",
                "+  rulesdir/no-commonjs: 0,",
                "+  */",
                "+",
                "+const {Console} = require('console');",
                "+const electron = require('electron');",
                "+const invariant = require('assert');",
                "+const fs = require('fs');",
                "+// eslint-disable-next-line rulesdir/no-unresolved",
                "+const jestCLI = require('jest-cli');",
                "+const os = require('os');",
                "+",
                "+// eslint-disable-next-line rulesdir/prefer-nuclide-uri",
                "+const path = require('path');",
                "+",
                "+const {ipcRenderer} = electron;",
                "+invariant(ipcRenderer != null);",
                "+",
                "+// Patch `console` to output through the main process.",
                "+global.console = new Console(",
                "+  /* stdout */ {",
                "+    write(chunk) {",
                "+      ipcRenderer.send('write-to-stdout', chunk);",
                "+    },",
                "+  },",
                "+  /* stderr */ {",
                "+    write(chunk) {",
                "+      ipcRenderer.send('write-to-stderr', chunk);",
                "+    },",
                "+  }",
                "+);",
                "+",
                "+module.exports = function(params) {",
                "+  // It's assumed that all of the tests belong to the same package.",
                "+  const pkg = getPackage(params.testPaths[0]);",
                "+  if (pkg == null) {",
                "+    throw new Error(",
                "+      `Couldn't find a parent \"package.json\" for ${params.testPaths[0]}`",
                "+    );",
                "+  }",
                "+",
                "+  global.atom = params.buildAtomEnvironment({",
                "+    applicationDelegate: params.buildDefaultApplicationDelegate(),",
                "+    window,",
                "+    document: window.document,",
                "+    configDirPath: os.tmpdir(),",
                "+    enablePersistence: true,",
                "+  });",
                "+",
                "+  return jestCLI.runCLI(",
                "+    {",
                "+      outputFile: params.logFile,",
                "+      _: params.testPaths,",
                "+      cache: false,",
                "+      env: 'nuclide-jest/AtomJestEnvironment.js',",
                "+      config: JSON.stringify({",
                "+        testMatch: ['**/spec/**/*-spec.js'],",
                "+        transform: {",
                "+          '\\\\.js$': 'nuclide-jest/jestTransformer.js',",
                "+        },",
                "+      }),",
                "+    },",
                "+    [process.cwd()]",
                "+  ).then(response => response.results.success ? 0 : 1);",
                "+};",
                "+",
                "+function getPackage(start) {",
                "+  let current = path.resolve(start);",
                "+  while (true) {",
                "+    const filename = path.join(current, 'package.json');",
                "+    if (fs.existsSync(filename)) {",
                "+      return JSON.parse(fs.readFileSync(filename, 'utf8'));",
                "+    } else {",
                "+      const next = path.join(current, '..');",
                "+      if (next === current) {",
                "+        return null;",
                "+      } else {",
                "+        current = next;",
                "+      }",
                "+    }",
                "+  }",
                "+}",
                "diff --git a/modules/nuclide-jest/jestTransformer.js b/modules/nuclide-jest/jestTransformer.js",
                "new file mode 100644",
                "index 000000000..29bc7d9bf",
                "--- /dev/null",
                "+++ b/modules/nuclide-jest/jestTransformer.js",
                "@@ -0,0 +1,32 @@",
                "+/**",
                "+ * Copyright (c) 2017-present, Facebook, Inc.",
                "+ * All rights reserved.",
                "+ *",
                "+ * This source code is licensed under the BSD-style license found in the",
                "+ * LICENSE file in the root directory of this source tree. An additional grant",
                "+ * of patent rights can be found in the PATENTS file in the same directory.",
                "+ *",
                "+ * @noflow",
                "+ */",
                "+'use strict';",
                "+",
                "+/* eslint",
                "+  comma-dangle: [1, always-multiline],",
                "+  prefer-object-spread/prefer-object-spread: 0,",
                "+  rulesdir/no-commonjs: 0,",
                "+  */",
                "+",
                "+// eslint-disable-next-line rulesdir/modules-dependencies",
                "+const NodeTranspiler = require('nuclide-node-transpiler/lib/NodeTranspiler');",
                "+const transpiler = new NodeTranspiler();",
                "+",
                "+// eslint-disable-next-line rulesdir/no-commonjs",
                "+module.exports = {",
                "+  process(src, path) {",
                "+    if (NodeTranspiler.shouldCompile(src)) {",
                "+      return transpiler.transformWithCache(src, path);",
                "+    }",
                "+",
                "+    return src;",
                "+  },",
                "+};",
                "diff --git a/modules/nuclide-jest/package.json b/modules/nuclide-jest/package.json",
                "new file mode 100644",
                "index 000000000..5fd526f35",
                "--- /dev/null",
                "+++ b/modules/nuclide-jest/package.json",
                "@@ -0,0 +1,15 @@",
                "+{",
                "+  \"name\": \"nuclide-jest\",",
                "+  \"version\": \"0.5.0\",",
                "+  \"description\": \"Atom-compatible Jest runner that runs inside of Atom\",",
                "+  \"author\": \"NEEDS OWNER\",",
                "+  \"license\": \"BSD-3-Clause\",",
                "+  \"homepage\": \"https://nuclide.io/\",",
                "+  \"repository\": \"https://github.com/facebook/nuclide/tree/master/modules/nuclide-jest\",",
                "+  \"private\": true,",
                "+  \"dependencies\": {",
                "+    \"async-to-generator\": \"1.1.0\",",
                "+    \"jest-cli\": \"22.4.2\",",
                "+    \"jest-environment-node\": \"22.4.1\"",
                "+  }",
                "+}",
                "diff --git a/package.json b/package.json",
                "index e3844ae2c..7f0cf240e 100644",
                "--- a/package.json",
                "+++ b/package.json",
                "@@ -179,2 +179,4 @@",
                "     \"jasmine-node\": \"1.14.5\",",
                "+    \"jest-cli\": \"22.4.2\",",
                "+    \"jest-environment-node\": \"22.4.1\",",
                "     \"mock-spawn\": \"0.2.6\",",
                "diff --git a/yarn.lock b/yarn.lock",
                "index e792d5342..d12809b3b 100644",
                "--- a/yarn.lock",
                "+++ b/yarn.lock",
                "@@ -4,2 +4,16 @@",
                "+\"@babel/code-frame@^7.0.0-beta.35\":",
                "+  version \"7.0.0-beta.40\"",
                "+  resolved \"https://registry.yarnpkg.com/@babel/code-frame/-/code-frame-7.0.0-beta.40.tgz#37e2b0cf7c56026b4b21d3927cadf81adec32ac6\"",
                "+  dependencies:",
                "+    \"@babel/highlight\" \"7.0.0-beta.40\"",
                "+",
                "+\"@babel/highlight@7.0.0-beta.40\":",
                "+  version \"7.0.0-beta.40\"",
                "+  resolved \"https://registry.yarnpkg.com/@babel/highlight/-/highlight-7.0.0-beta.40.tgz#b43d67d76bf46e1d10d227f68cddcd263786b255\"",
                "+  dependencies:",
                "+    chalk \"^2.0.0\"",
                "+    esutils \"^2.0.2\"",
                "+    js-tokens \"^3.0.0\"",
                "+",
                " \"@types/node@*\":",
                "@@ -12,2 +26,6 @@",
                "+abab@^1.0.4:",
                "+  version \"1.0.4\"",
                "+  resolved \"https://registry.yarnpkg.com/abab/-/abab-1.0.4.tgz#5faad9c2c07f60dd76770f71cf025b62a63cfd4e\"",
                "+",
                " abbrev@1:",
                "@@ -16,2 +34,8 @@ abbrev@1:",
                "+acorn-globals@^4.1.0:",
                "+  version \"4.1.0\"",
                "+  resolved \"https://registry.yarnpkg.com/acorn-globals/-/acorn-globals-4.1.0.tgz#ab716025dbe17c54d3ef81d32ece2b2d99fe2538\"",
                "+  dependencies:",
                "+    acorn \"^5.0.0\"",
                "+",
                " acorn-jsx@^3.0.0:",
                "@@ -26,2 +50,6 @@ acorn@^3.0.4:",
                "+acorn@^5.0.0, acorn@^5.3.0:",
                "+  version \"5.5.0\"",
                "+  resolved \"https://registry.yarnpkg.com/acorn/-/acorn-5.5.0.tgz#1abb587fbf051f94e3de20e6b26ef910b1828298\"",
                "+",
                " acorn@^5.1.1:",
                "@@ -42,2 +70,9 @@ ajv-keywords@^2.1.0:",
                "+ajv@^4.9.1:",
                "+  version \"4.11.8\"",
                "+  resolved \"https://registry.yarnpkg.com/ajv/-/ajv-4.11.8.tgz#82ffb02b29e662ae53bdc20af15947706739c536\"",
                "+  dependencies:",
                "+    co \"^4.6.0\"",
                "+    json-stable-stringify \"^1.0.1\"",
                "+",
                " ajv@^5.1.0:",
                "@@ -106,3 +141,3 @@ ansi-styles@^2.2.1:",
                "-ansi-styles@^3.1.0:",
                "+ansi-styles@^3.1.0, ansi-styles@^3.2.0:",
                "   version \"3.2.0\"",
                "@@ -116,2 +151,9 @@ ansi-wrap@0.1.0:",
                "+anymatch@^1.3.0:",
                "+  version \"1.3.2\"",
                "+  resolved \"https://registry.yarnpkg.com/anymatch/-/anymatch-1.3.2.tgz#553dcb8f91e3c889845dfdba34c77721b90b9d7a\"",
                "+  dependencies:",
                "+    micromatch \"^2.1.5\"",
                "+    normalize-path \"^2.0.0\"",
                "+",
                " append-transform@^0.4.0:",
                "@@ -122,2 +164,6 @@ append-transform@^0.4.0:",
                "+aproba@^1.0.3:",
                "+  version \"1.2.0\"",
                "+  resolved \"https://registry.yarnpkg.com/aproba/-/aproba-1.2.0.tgz#6802e6264efd18c790a1b0d517f0f2627bf2c94a\"",
                "+",
                " archy@^1.0.0:",
                "@@ -126,2 +172,9 @@ archy@^1.0.0:",
                "+are-we-there-yet@~1.1.2:",
                "+  version \"1.1.4\"",
                "+  resolved \"https://registry.yarnpkg.com/are-we-there-yet/-/are-we-there-yet-1.1.4.tgz#bb5dca382bb94f05e15194373d16fd3ba1ca110d\"",
                "+  dependencies:",
                "+    delegates \"^1.0.0\"",
                "+    readable-stream \"^2.0.6\"",
                "+",
                " argparse@^1.0.6, argparse@^1.0.7:",
                "@@ -171,2 +224,6 @@ array-differ@^1.0.0:",
                "+array-equal@^1.0.0:",
                "+  version \"1.0.0\"",
                "+  resolved \"https://registry.yarnpkg.com/array-equal/-/array-equal-1.0.0.tgz#8c2a5ef2472fd9ea742b04c77a75093ba2757c93\"",
                "+",
                " array-filter@~0.0.0:",
                "@@ -240,2 +297,6 @@ ast-types-flow@0.0.7:",
                "+astral-regex@^1.0.0:",
                "+  version \"1.0.0\"",
                "+  resolved \"https://registry.yarnpkg.com/astral-regex/-/astral-regex-1.0.0.tgz#6c8c3fb827dd43ee3918f27b82782ab7658a6fd9\"",
                "+",
                " async-each@^1.0.1:",
                "@@ -256,2 +317,8 @@ async@^1.4.0:",
                "+async@^2.1.4:",
                "+  version \"2.6.0\"",
                "+  resolved \"https://registry.yarnpkg.com/async/-/async-2.6.0.tgz#61a29abb6fcc026fea77e56d1c6ec53a795951f4\"",
                "+  dependencies:",
                "+    lodash \"^4.14.0\"",
                "+",
                " async@~0.2.6, async@~0.2.9:",
                "@@ -321,3 +388,3 @@ babel-code-frame@^6.22.0, babel-code-frame@^6.26.0:",
                "-babel-core@6.26.0, babel-core@^6.26.0:",
                "+babel-core@6.26.0, babel-core@^6.0.0, babel-core@^6.26.0:",
                "   version \"6.26.0\"",
                "@@ -452,2 +519,9 @@ babel-helpers@^6.24.1:",
                "+babel-jest@^22.4.1:",
                "+  version \"22.4.1\"",
                "+  resolved \"https://registry.yarnpkg.com/babel-jest/-/babel-jest-22.4.1.tgz#ff53ebca45957347f27ff4666a31499fbb4c4ddd\"",
                "+  dependencies:",
                "+    babel-plugin-istanbul \"^4.1.5\"",
                "+    babel-preset-jest \"^22.4.1\"",
                "+",
                " babel-messages@^6.23.0:",
                "@@ -468,3 +542,3 @@ babel-plugin-idx@1.4.0:",
                "-babel-plugin-istanbul@4.1.5:",
                "+babel-plugin-istanbul@4.1.5, babel-plugin-istanbul@^4.1.5:",
                "   version \"4.1.5\"",
                "@@ -476,2 +550,6 @@ babel-plugin-istanbul@4.1.5:",
                "+babel-plugin-jest-hoist@^22.4.1:",
                "+  version \"22.4.1\"",
                "+  resolved \"https://registry.yarnpkg.com/babel-plugin-jest-hoist/-/babel-plugin-jest-hoist-22.4.1.tgz#d712fe5da8b6965f3191dacddbefdbdf4fb66d63\"",
                "+",
                " babel-plugin-lodash@3.2.11:",
                "@@ -507,3 +585,3 @@ babel-plugin-syntax-jsx@^6.8.0:",
                "-babel-plugin-syntax-object-rest-spread@^6.8.0:",
                "+babel-plugin-syntax-object-rest-spread@^6.13.0, babel-plugin-syntax-object-rest-spread@^6.8.0:",
                "   version \"6.13.0\"",
                "@@ -757,2 +835,9 @@ babel-preset-fbjs@^2.1.4:",
                "+babel-preset-jest@^22.4.1:",
                "+  version \"22.4.1\"",
                "+  resolved \"https://registry.yarnpkg.com/babel-preset-jest/-/babel-preset-jest-22.4.1.tgz#efa2e5f5334242a9457a068452d7d09735db172a\"",
                "+  dependencies:",
                "+    babel-plugin-jest-hoist \"^22.4.1\"",
                "+    babel-plugin-syntax-object-rest-spread \"^6.13.0\"",
                "+",
                " babel-register@^6.26.0:",
                "@@ -939,2 +1024,12 @@ braces@^2.3.0:",
                "+browser-process-hrtime@^0.1.2:",
                "+  version \"0.1.2\"",
                "+  resolved \"https://registry.yarnpkg.com/browser-process-hrtime/-/browser-process-hrtime-0.1.2.tgz#425d68a58d3447f02a04aa894187fce8af8b7b8e\"",
                "+",
                "+browser-resolve@^1.11.2:",
                "+  version \"1.11.2\"",
                "+  resolved \"https://registry.yarnpkg.com/browser-resolve/-/browser-resolve-1.11.2.tgz#8ff09b0a2c421718a1051c260b32e48f442938ce\"",
                "+  dependencies:",
                "+    resolve \"1.1.7\"",
                "+",
                " browser-stdout@1.3.0:",
                "@@ -993,2 +1088,6 @@ callsites@^0.2.0:",
                "+callsites@^2.0.0:",
                "+  version \"2.0.0\"",
                "+  resolved \"https://registry.yarnpkg.com/callsites/-/callsites-2.0.0.tgz#06eb84f00eea413da86affefacbffb36093b3c50\"",
                "+",
                " camelcase@^1.0.2:",
                "@@ -1042,2 +1141,10 @@ chalk@^2.0.0, chalk@^2.1.0:",
                "+chalk@^2.0.1:",
                "+  version \"2.3.1\"",
                "+  resolved \"https://registry.yarnpkg.com/chalk/-/chalk-2.3.1.tgz#523fe2678aec7b04e8041909292fe8b17059b796\"",
                "+  dependencies:",
                "+    ansi-styles \"^3.2.0\"",
                "+    escape-string-regexp \"^1.0.5\"",
                "+    supports-color \"^5.2.0\"",
                "+",
                " cheerio@0.22.0:",
                "@@ -1078,2 +1185,6 @@ chevrotain@^0.8.0:",
                "+ci-info@^1.0.0:",
                "+  version \"1.1.2\"",
                "+  resolved \"https://registry.yarnpkg.com/ci-info/-/ci-info-1.1.2.tgz#03561259db48d0474c8bdc90f5b47b068b6bbfb4\"",
                "+",
                " circular-json@^0.3.1:",
                "@@ -1122,2 +1233,10 @@ cliui@^3.0.3, cliui@^3.2.0:",
                "+cliui@^4.0.0:",
                "+  version \"4.0.0\"",
                "+  resolved \"https://registry.yarnpkg.com/cliui/-/cliui-4.0.0.tgz#743d4650e05f36d1ed2575b59638d87322bfbbcc\"",
                "+  dependencies:",
                "+    string-width \"^2.1.1\"",
                "+    strip-ansi \"^4.0.0\"",
                "+    wrap-ansi \"^2.0.0\"",
                "+",
                " clone-buffer@^1.0.0:",
                "@@ -1240,3 +1359,11 @@ consistent-env@^1.2.0:",
                "-convert-source-map@^1.1.1:",
                "+console-control-strings@^1.0.0, console-control-strings@~1.1.0:",
                "+  version \"1.1.0\"",
                "+  resolved \"https://registry.yarnpkg.com/console-control-strings/-/console-control-strings-1.1.0.tgz#3d7cf4464db6446ea644bf4b39507f9851008e8e\"",
                "+",
                "+content-type-parser@^1.0.2:",
                "+  version \"1.0.2\"",
                "+  resolved \"https://registry.yarnpkg.com/content-type-parser/-/content-type-parser-1.0.2.tgz#caabe80623e63638b2502fd4c7f12ff4ce2352e7\"",
                "+",
                "+convert-source-map@^1.1.1, convert-source-map@^1.4.0:",
                "   version \"1.5.1\"",
                "@@ -1312,2 +1439,12 @@ css-what@2.1:",
                "+cssom@0.3.x, \"cssom@>= 0.3.2 < 0.4.0\":",
                "+  version \"0.3.2\"",
                "+  resolved \"https://registry.yarnpkg.com/cssom/-/cssom-0.3.2.tgz#b8036170c79f07a90ff2f16e22284027a243848b\"",
                "+",
                "+\"cssstyle@>= 0.2.37 < 0.3.0\":",
                "+  version \"0.2.37\"",
                "+  resolved \"https://registry.yarnpkg.com/cssstyle/-/cssstyle-0.2.37.tgz#541097234cb2513c83ceed3acddc27ff27987d54\"",
                "+  dependencies:",
                "+    cssom \"0.3.x\"",
                "+",
                " cubic2quad@^1.0.0:",
                "@@ -1364,3 +1501,3 @@ debug@^0.7.2:",
                "-debug@^3.0.1:",
                "+debug@^3.0.1, debug@^3.1.0:",
                "   version \"3.1.0\"",
                "@@ -1394,2 +1531,6 @@ deep-diff@^0.3.5:",
                "+deep-extend@~0.4.0:",
                "+  version \"0.4.2\"",
                "+  resolved \"https://registry.yarnpkg.com/deep-extend/-/deep-extend-0.4.2.tgz#48b699c27e334bf89f10892be432f6e4c7d34a7f\"",
                "+",
                " deep-is@^0.1.3, deep-is@~0.1.3:",
                "@@ -1439,2 +1580,6 @@ delayed-stream@~1.0.0:",
                "+delegates@^1.0.0:",
                "+  version \"1.0.0\"",
                "+  resolved \"https://registry.yarnpkg.com/delegates/-/delegates-1.0.0.tgz#84c6e159b81904fdca59a0ef44cd870d31250f9a\"",
                "+",
                " denodeify@^1.2.1:",
                "@@ -1449,2 +1594,10 @@ detect-indent@^4.0.0:",
                "+detect-libc@^1.0.2:",
                "+  version \"1.0.3\"",
                "+  resolved \"https://registry.yarnpkg.com/detect-libc/-/detect-libc-1.0.3.tgz#fa137c4bd698edf55cd5cd02ac559f91a4c4ba9b\"",
                "+",
                "+detect-newline@^2.1.0:",
                "+  version \"2.1.0\"",
                "+  resolved \"https://registry.yarnpkg.com/detect-newline/-/detect-newline-2.1.0.tgz#f41f1c10be4b00e87b5f13da680759f2c5bfd3e2\"",
                "+",
                " diff@3.0.1:",
                "@@ -1457,2 +1610,6 @@ diff@3.2.0:",
                "+diff@^3.2.0:",
                "+  version \"3.4.0\"",
                "+  resolved \"https://registry.yarnpkg.com/diff/-/diff-3.4.0.tgz#b1d85507daf3964828de54b37d0d73ba67dda56c\"",
                "+",
                " diffparser@1.1.0:",
                "@@ -1487,2 +1644,8 @@ domelementtype@~1.1.1:",
                "+domexception@^1.0.0:",
                "+  version \"1.0.1\"",
                "+  resolved \"https://registry.yarnpkg.com/domexception/-/domexception-1.0.1.tgz#937442644ca6a31261ef36e3ec677fe805582c90\"",
                "+  dependencies:",
                "+    webidl-conversions \"^4.0.2\"",
                "+",
                " domhandler@^2.3.0:",
                "@@ -1559,2 +1722,12 @@ error-ex@^1.2.0, error-ex@^1.3.1:",
                "+es-abstract@^1.5.1:",
                "+  version \"1.10.0\"",
                "+  resolved \"https://registry.yarnpkg.com/es-abstract/-/es-abstract-1.10.0.tgz#1ecb36c197842a00d8ee4c2dfd8646bb97d60864\"",
                "+  dependencies:",
                "+    es-to-primitive \"^1.1.1\"",
                "+    function-bind \"^1.1.1\"",
                "+    has \"^1.0.1\"",
                "+    is-callable \"^1.1.3\"",
                "+    is-regex \"^1.0.4\"",
                "+",
                " es-abstract@^1.7.0:",
                "@@ -1592,2 +1765,13 @@ escape-string-regexp@1.0.5, escape-string-regexp@^1.0.2, escape-string-regexp@^1",
                "+escodegen@^1.9.0:",
                "+  version \"1.9.1\"",
                "+  resolved \"https://registry.yarnpkg.com/escodegen/-/escodegen-1.9.1.tgz#dbae17ef96c8e4bedb1356f4504fa4cc2f7cb7e2\"",
                "+  dependencies:",
                "+    esprima \"^3.1.3\"",
                "+    estraverse \"^4.2.0\"",
                "+    esutils \"^2.0.2\"",
                "+    optionator \"^0.8.1\"",
                "+  optionalDependencies:",
                "+    source-map \"~0.6.1\"",
                "+",
                " eslint-plugin-dependencies@2.4.0:",
                "@@ -1701,2 +1885,6 @@ espree@^3.5.1:",
                "+esprima@^3.1.3:",
                "+  version \"3.1.3\"",
                "+  resolved \"https://registry.yarnpkg.com/esprima/-/esprima-3.1.3.tgz#fdca51cee6133895e3c88d535ce49dbff62a4633\"",
                "+",
                " esprima@^4.0.0:",
                "@@ -1746,2 +1934,8 @@ event-stream@^3.3.1, event-stream@~3.3.4:",
                "+exec-sh@^0.2.0:",
                "+  version \"0.2.1\"",
                "+  resolved \"https://registry.yarnpkg.com/exec-sh/-/exec-sh-0.2.1.tgz#163b98a6e89e6b65b47c2a28d215bc1f63989c38\"",
                "+  dependencies:",
                "+    merge \"^1.1.3\"",
                "+",
                " execa@^0.7.0:",
                "@@ -1758,2 +1952,6 @@ execa@^0.7.0:",
                "+exit@^0.1.2:",
                "+  version \"0.1.2\"",
                "+  resolved \"https://registry.yarnpkg.com/exit/-/exit-0.1.2.tgz#0632638f8d877cc82107d30a0fff1a17cba1cd0c\"",
                "+",
                " expand-brackets@^0.1.4:",
                "@@ -1782,2 +1980,13 @@ expand-range@^1.8.1:",
                "+expect@^22.4.0:",
                "+  version \"22.4.0\"",
                "+  resolved \"https://registry.yarnpkg.com/expect/-/expect-22.4.0.tgz#371edf1ae15b83b5bf5ec34b42f1584660a36c16\"",
                "+  dependencies:",
                "+    ansi-styles \"^3.2.0\"",
                "+    jest-diff \"^22.4.0\"",
                "+    jest-get-type \"^22.1.0\"",
                "+    jest-matcher-utils \"^22.4.0\"",
                "+    jest-message-util \"^22.4.0\"",
                "+    jest-regex-util \"^22.1.0\"",
                "+",
                " extend-shallow@^1.1.2:",
                "@@ -1910,2 +2119,9 @@ filename-regex@^2.0.0:",
                "+fileset@^2.0.2:",
                "+  version \"2.0.3\"",
                "+  resolved \"https://registry.yarnpkg.com/fileset/-/fileset-2.0.3.tgz#8e7548a96d3cc2327ee5e674168723a333bba2a0\"",
                "+  dependencies:",
                "+    glob \"^7.0.3\"",
                "+    minimatch \"^3.0.3\"",
                "+",
                " fileset@~0.1.5:",
                "@@ -2098,3 +2314,18 @@ fs.realpath@^1.0.0:",
                "-fstream@^1.0.2:",
                "+fsevents@^1.1.1:",
                "+  version \"1.1.3\"",
                "+  resolved \"https://registry.yarnpkg.com/fsevents/-/fsevents-1.1.3.tgz#11f82318f5fe7bb2cd22965a108e9306208216d8\"",
                "+  dependencies:",
                "+    nan \"^2.3.0\"",
                "+    node-pre-gyp \"^0.6.39\"",
                "+",
                "+fstream-ignore@^1.0.5:",
                "+  version \"1.0.5\"",
                "+  resolved \"https://registry.yarnpkg.com/fstream-ignore/-/fstream-ignore-1.0.5.tgz#9c31dae34767018fe1d249b24dada67d092da105\"",
                "+  dependencies:",
                "+    fstream \"^1.0.0\"",
                "+    inherits \"2\"",
                "+    minimatch \"^3.0.0\"",
                "+",
                "+fstream@^1.0.0, fstream@^1.0.10, fstream@^1.0.2:",
                "   version \"1.0.11\"",
                "@@ -2111,2 +2342,6 @@ function-bind@^1.0.2, function-bind@^1.1.0:",
                "+function-bind@^1.1.1:",
                "+  version \"1.1.1\"",
                "+  resolved \"https://registry.yarnpkg.com/function-bind/-/function-bind-1.1.1.tgz#a56899d3ea3c9bab874bb9773b7c5ede92f4895d\"",
                "+",
                " functional-red-black-tree@^1.0.1:",
                "@@ -2119,2 +2354,15 @@ fuzzaldrin-plus@0.4.1:",
                "+gauge@~2.7.3:",
                "+  version \"2.7.4\"",
                "+  resolved \"https://registry.yarnpkg.com/gauge/-/gauge-2.7.4.tgz#2c03405c7538c39d7eb37b317022e325fb018bf7\"",
                "+  dependencies:",
                "+    aproba \"^1.0.3\"",
                "+    console-control-strings \"^1.0.0\"",
                "+    has-unicode \"^2.0.0\"",
                "+    object-assign \"^4.1.0\"",
                "+    signal-exit \"^3.0.0\"",
                "+    string-width \"^1.0.1\"",
                "+    strip-ansi \"^3.0.1\"",
                "+    wide-align \"^1.1.0\"",
                "+",
                " gaze@~0.3.2:",
                "@@ -2350,2 +2598,6 @@ growl@~1.7.0:",
                "+growly@^1.3.0:",
                "+  version \"1.3.0\"",
                "+  resolved \"https://registry.yarnpkg.com/growly/-/growly-1.3.0.tgz#f10748cbe76af964b7c96c93c6bcc28af120c081\"",
                "+",
                " gulp-chmod@^2.0.0:",
                "@@ -2471,2 +2723,6 @@ handlebars@^4.0.3:",
                "+har-schema@^1.0.5:",
                "+  version \"1.0.5\"",
                "+  resolved \"https://registry.yarnpkg.com/har-schema/-/har-schema-1.0.5.tgz#d263135f43307c02c602afc8fe95970c0151369e\"",
                "+",
                " har-schema@^2.0.0:",
                "@@ -2484,2 +2740,9 @@ har-validator@~2.0.6:",
                "+har-validator@~4.2.1:",
                "+  version \"4.2.1\"",
                "+  resolved \"https://registry.yarnpkg.com/har-validator/-/har-validator-4.2.1.tgz#33481d0f1bbff600dd203d75812a6a5fba002e2a\"",
                "+  dependencies:",
                "+    ajv \"^4.9.1\"",
                "+    har-schema \"^1.0.5\"",
                "+",
                " har-validator@~5.0.3:",
                "@@ -2505,2 +2768,6 @@ has-flag@^2.0.0:",
                "+has-flag@^3.0.0:",
                "+  version \"3.0.0\"",
                "+  resolved \"https://registry.yarnpkg.com/has-flag/-/has-flag-3.0.0.tgz#b5d454dc2199ae225699f3467e5a07f3b955bafd\"",
                "+",
                " has-gulplog@^0.1.0:",
                "@@ -2511,2 +2778,6 @@ has-gulplog@^0.1.0:",
                "+has-unicode@^2.0.0:",
                "+  version \"2.0.1\"",
                "+  resolved \"https://registry.yarnpkg.com/has-unicode/-/has-unicode-2.0.1.tgz#e0e6fe6a28cf51138855e086d1691e771de2a8b9\"",
                "+",
                " has-value@^0.3.1:",
                "@@ -2544,3 +2815,3 @@ has@^1.0.1:",
                "-hawk@~3.1.3:",
                "+hawk@3.1.3, hawk@~3.1.3:",
                "   version \"3.1.3\"",
                "@@ -2593,2 +2864,8 @@ hosted-git-info@^2.1.4:",
                "+html-encoding-sniffer@^1.0.2:",
                "+  version \"1.0.2\"",
                "+  resolved \"https://registry.yarnpkg.com/html-encoding-sniffer/-/html-encoding-sniffer-1.0.2.tgz#e70d84b94da53aa375e11fe3a351be6642ca46f8\"",
                "+  dependencies:",
                "+    whatwg-encoding \"^1.0.1\"",
                "+",
                " htmlparser2@^3.9.1:",
                "@@ -2636,3 +2913,3 @@ https-proxy-agent@^0.3.5:",
                "-iconv-lite@^0.4.17, iconv-lite@^0.4.8, iconv-lite@~0.4.13:",
                "+iconv-lite@0.4.19, iconv-lite@^0.4.17, iconv-lite@^0.4.8, iconv-lite@~0.4.13:",
                "   version \"0.4.19\"",
                "@@ -2664,2 +2941,9 @@ immutable@~3.7.6:",
                "+import-local@^1.0.0:",
                "+  version \"1.0.0\"",
                "+  resolved \"https://registry.yarnpkg.com/import-local/-/import-local-1.0.0.tgz#5e4ffdc03f4fe6c009c6729beb29631c2f8227bc\"",
                "+  dependencies:",
                "+    pkg-dir \"^2.0.0\"",
                "+    resolve-cwd \"^2.0.0\"",
                "+",
                " imurmurhash@^0.1.4:",
                "@@ -2683,3 +2967,3 @@ ini@1.3.4:",
                "-ini@^1.3.5:",
                "+ini@^1.3.5, ini@~1.3.0:",
                "   version \"1.3.5\"",
                "@@ -2740,2 +3024,8 @@ is-callable@^1.1.1, is-callable@^1.1.3:",
                "+is-ci@^1.0.10:",
                "+  version \"1.1.0\"",
                "+  resolved \"https://registry.yarnpkg.com/is-ci/-/is-ci-1.1.0.tgz#247e4162e7860cebbdaf30b774d6b0ac7dcfe7a5\"",
                "+  dependencies:",
                "+    ci-info \"^1.0.0\"",
                "+",
                " is-data-descriptor@^0.1.4:",
                "@@ -2810,2 +3100,6 @@ is-fullwidth-code-point@^2.0.0:",
                "+is-generator-fn@^1.0.0:",
                "+  version \"1.0.0\"",
                "+  resolved \"https://registry.yarnpkg.com/is-generator-fn/-/is-generator-fn-1.0.0.tgz#969d49e1bb3329f6bb7f09089be26578b2ddd46a\"",
                "+",
                " is-glob@^2.0.0, is-glob@^2.0.1:",
                "@@ -2891,3 +3185,3 @@ is-property@^1.0.0:",
                "-is-regex@^1.0.3:",
                "+is-regex@^1.0.3, is-regex@^1.0.4:",
                "   version \"1.0.4\"",
                "@@ -2960,2 +3254,18 @@ isstream@~0.1.2:",
                "+istanbul-api@^1.1.14:",
                "+  version \"1.2.2\"",
                "+  resolved \"https://registry.yarnpkg.com/istanbul-api/-/istanbul-api-1.2.2.tgz#e17cd519dd5ec4141197f246fdf380b75487f3b1\"",
                "+  dependencies:",
                "+    async \"^2.1.4\"",
                "+    fileset \"^2.0.2\"",
                "+    istanbul-lib-coverage \"^1.1.2\"",
                "+    istanbul-lib-hook \"^1.1.0\"",
                "+    istanbul-lib-instrument \"^1.9.2\"",
                "+    istanbul-lib-report \"^1.1.3\"",
                "+    istanbul-lib-source-maps \"^1.2.3\"",
                "+    istanbul-reports \"^1.1.4\"",
                "+    js-yaml \"^3.7.0\"",
                "+    mkdirp \"^0.5.1\"",
                "+    once \"^1.4.0\"",
                "+",
                " istanbul-lib-coverage@^1.1.1:",
                "@@ -2964,2 +3274,6 @@ istanbul-lib-coverage@^1.1.1:",
                "+istanbul-lib-coverage@^1.1.2:",
                "+  version \"1.1.2\"",
                "+  resolved \"https://registry.yarnpkg.com/istanbul-lib-coverage/-/istanbul-lib-coverage-1.1.2.tgz#4113c8ff6b7a40a1ef7350b01016331f63afde14\"",
                "+",
                " istanbul-lib-hook@^1.0.7:",
                "@@ -2970,2 +3284,8 @@ istanbul-lib-hook@^1.0.7:",
                "+istanbul-lib-hook@^1.1.0:",
                "+  version \"1.1.0\"",
                "+  resolved \"https://registry.yarnpkg.com/istanbul-lib-hook/-/istanbul-lib-hook-1.1.0.tgz#8538d970372cb3716d53e55523dd54b557a8d89b\"",
                "+  dependencies:",
                "+    append-transform \"^0.4.0\"",
                "+",
                " istanbul-lib-instrument@^1.7.5, istanbul-lib-instrument@^1.8.0:",
                "@@ -2982,2 +3302,14 @@ istanbul-lib-instrument@^1.7.5, istanbul-lib-instrument@^1.8.0:",
                "+istanbul-lib-instrument@^1.9.2:",
                "+  version \"1.9.2\"",
                "+  resolved \"https://registry.yarnpkg.com/istanbul-lib-instrument/-/istanbul-lib-instrument-1.9.2.tgz#84905bf47f7e0b401d6b840da7bad67086b4aab6\"",
                "+  dependencies:",
                "+    babel-generator \"^6.18.0\"",
                "+    babel-template \"^6.16.0\"",
                "+    babel-traverse \"^6.18.0\"",
                "+    babel-types \"^6.18.0\"",
                "+    babylon \"^6.18.0\"",
                "+    istanbul-lib-coverage \"^1.1.2\"",
                "+    semver \"^5.3.0\"",
                "+",
                " istanbul-lib-report@^1.1.1:",
                "@@ -2991,2 +3323,11 @@ istanbul-lib-report@^1.1.1:",
                "+istanbul-lib-report@^1.1.3:",
                "+  version \"1.1.3\"",
                "+  resolved \"https://registry.yarnpkg.com/istanbul-lib-report/-/istanbul-lib-report-1.1.3.tgz#2df12188c0fa77990c0d2176d2d0ba3394188259\"",
                "+  dependencies:",
                "+    istanbul-lib-coverage \"^1.1.2\"",
                "+    mkdirp \"^0.5.1\"",
                "+    path-parse \"^1.0.5\"",
                "+    supports-color \"^3.1.2\"",
                "+",
                " istanbul-lib-source-maps@^1.2.1:",
                "@@ -3001,2 +3342,12 @@ istanbul-lib-source-maps@^1.2.1:",
                "+istanbul-lib-source-maps@^1.2.3:",
                "+  version \"1.2.3\"",
                "+  resolved \"https://registry.yarnpkg.com/istanbul-lib-source-maps/-/istanbul-lib-source-maps-1.2.3.tgz#20fb54b14e14b3fb6edb6aca3571fd2143db44e6\"",
                "+  dependencies:",
                "+    debug \"^3.1.0\"",
                "+    istanbul-lib-coverage \"^1.1.2\"",
                "+    mkdirp \"^0.5.1\"",
                "+    rimraf \"^2.6.1\"",
                "+    source-map \"^0.5.3\"",
                "+",
                " istanbul-reports@^1.1.1:",
                "@@ -3007,2 +3358,8 @@ istanbul-reports@^1.1.1:",
                "+istanbul-reports@^1.1.4:",
                "+  version \"1.1.4\"",
                "+  resolved \"https://registry.yarnpkg.com/istanbul-reports/-/istanbul-reports-1.1.4.tgz#5ccba5e22b7b5a5d91d5e0a830f89be334bf97bd\"",
                "+  dependencies:",
                "+    handlebars \"^4.0.3\"",
                "+",
                " iterall@1.1.3:",
                "@@ -3036,2 +3393,72 @@ jasmine-reporters@~1.0.0:",
                "+jest-changed-files@^22.2.0:",
                "+  version \"22.2.0\"",
                "+  resolved \"https://registry.yarnpkg.com/jest-changed-files/-/jest-changed-files-22.2.0.tgz#517610c4a8ca0925bdc88b0ca53bd678aa8d019e\"",
                "+  dependencies:",
                "+    throat \"^4.0.0\"",
                "+",
                "+jest-cli@22.4.2:",
                "+  version \"22.4.2\"",
                "+  resolved \"https://registry.yarnpkg.com/jest-cli/-/jest-cli-22.4.2.tgz#e6546dc651e13d164481aa3e76e53ac4f4edab06\"",
                "+  dependencies:",
                "+    ansi-escapes \"^3.0.0\"",
                "+    chalk \"^2.0.1\"",
                "+    exit \"^0.1.2\"",
                "+    glob \"^7.1.2\"",
                "+    graceful-fs \"^4.1.11\"",
                "+    import-local \"^1.0.0\"",
                "+    is-ci \"^1.0.10\"",
                "+    istanbul-api \"^1.1.14\"",
                "+    istanbul-lib-coverage \"^1.1.1\"",
                "+    istanbul-lib-instrument \"^1.8.0\"",
                "+    istanbul-lib-source-maps \"^1.2.1\"",
                "+    jest-changed-files \"^22.2.0\"",
                "+    jest-config \"^22.4.2\"",
                "+    jest-environment-jsdom \"^22.4.1\"",
                "+    jest-get-type \"^22.1.0\"",
                "+    jest-haste-map \"^22.4.2\"",
                "+    jest-message-util \"^22.4.0\"",
                "+    jest-regex-util \"^22.1.0\"",
                "+    jest-resolve-dependencies \"^22.1.0\"",
                "+    jest-runner \"^22.4.2\"",
                "+    jest-runtime \"^22.4.2\"",
                "+    jest-snapshot \"^22.4.0\"",
                "+    jest-util \"^22.4.1\"",
                "+    jest-validate \"^22.4.2\"",
                "+    jest-worker \"^22.2.2\"",
                "+    micromatch \"^2.3.11\"",
                "+    node-notifier \"^5.2.1\"",
                "+    realpath-native \"^1.0.0\"",
                "+    rimraf \"^2.5.4\"",
                "+    slash \"^1.0.0\"",
                "+    string-length \"^2.0.0\"",
                "+    strip-ansi \"^4.0.0\"",
                "+    which \"^1.2.12\"",
                "+    yargs \"^10.0.3\"",
                "+",
                "+jest-config@^22.4.2:",
                "+  version \"22.4.2\"",
                "+  resolved \"https://registry.yarnpkg.com/jest-config/-/jest-config-22.4.2.tgz#580ba5819bf81a5e48f4fd470e8b81834f45c855\"",
                "+  dependencies:",
                "+    chalk \"^2.0.1\"",
                "+    glob \"^7.1.1\"",
                "+    jest-environment-jsdom \"^22.4.1\"",
                "+    jest-environment-node \"^22.4.1\"",
                "+    jest-get-type \"^22.1.0\"",
                "+    jest-jasmine2 \"^22.4.2\"",
                "+    jest-regex-util \"^22.1.0\"",
                "+    jest-resolve \"^22.4.2\"",
                "+    jest-util \"^22.4.1\"",
                "+    jest-validate \"^22.4.2\"",
                "+    pretty-format \"^22.4.0\"",
                "+",
                "+jest-diff@^22.4.0:",
                "+  version \"22.4.0\"",
                "+  resolved \"https://registry.yarnpkg.com/jest-diff/-/jest-diff-22.4.0.tgz#384c2b78519ca44ca126382df53f134289232525\"",
                "+  dependencies:",
                "+    chalk \"^2.0.1\"",
                "+    diff \"^3.2.0\"",
                "+    jest-get-type \"^22.1.0\"",
                "+    pretty-format \"^22.4.0\"",
                "+",
                " jest-docblock@^21.0.0:",
                "@@ -3040,2 +3467,8 @@ jest-docblock@^21.0.0:",
                "+jest-docblock@^22.4.0:",
                "+  version \"22.4.0\"",
                "+  resolved \"https://registry.yarnpkg.com/jest-docblock/-/jest-docblock-22.4.0.tgz#dbf1877e2550070cfc4d9b07a55775a0483159b8\"",
                "+  dependencies:",
                "+    detect-newline \"^2.1.0\"",
                "+",
                " jest-editor-support@19.0.2:",
                "@@ -3046,2 +3479,178 @@ jest-editor-support@19.0.2:",
                "+jest-environment-jsdom@^22.4.1:",
                "+  version \"22.4.1\"",
                "+  resolved \"https://registry.yarnpkg.com/jest-environment-jsdom/-/jest-environment-jsdom-22.4.1.tgz#754f408872441740100d3917e5ec40c74de6447f\"",
                "+  dependencies:",
                "+    jest-mock \"^22.2.0\"",
                "+    jest-util \"^22.4.1\"",
                "+    jsdom \"^11.5.1\"",
                "+",
                "+jest-environment-node@22.4.1, jest-environment-node@^22.4.1:",
                "+  version \"22.4.1\"",
                "+  resolved \"https://registry.yarnpkg.com/jest-environment-node/-/jest-environment-node-22.4.1.tgz#418850eb654596b8d6e36c2021cbedbc23df8e16\"",
                "+  dependencies:",
                "+    jest-mock \"^22.2.0\"",
                "+    jest-util \"^22.4.1\"",
                "+",
                "+jest-get-type@^22.1.0:",
                "+  version \"22.1.0\"",
                "+  resolved \"https://registry.yarnpkg.com/jest-get-type/-/jest-get-type-22.1.0.tgz#4e90af298ed6181edc85d2da500dbd2753e0d5a9\"",
                "+",
                "+jest-haste-map@^22.4.2:",
                "+  version \"22.4.2\"",
                "+  resolved \"https://registry.yarnpkg.com/jest-haste-map/-/jest-haste-map-22.4.2.tgz#a90178e66146d4378bb076345a949071f3b015b4\"",
                "+  dependencies:",
                "+    fb-watchman \"^2.0.0\"",
                "+    graceful-fs \"^4.1.11\"",
                "+    jest-docblock \"^22.4.0\"",
                "+    jest-serializer \"^22.4.0\"",
                "+    jest-worker \"^22.2.2\"",
                "+    micromatch \"^2.3.11\"",
                "+    sane \"^2.0.0\"",
                "+",
                "+jest-jasmine2@^22.4.2:",
                "+  version \"22.4.2\"",
                "+  resolved \"https://registry.yarnpkg.com/jest-jasmine2/-/jest-jasmine2-22.4.2.tgz#dfd3d259579ed6f52510d8f1ab692808f0d40691\"",
                "+  dependencies:",
                "+    chalk \"^2.0.1\"",
                "+    co \"^4.6.0\"",
                "+    expect \"^22.4.0\"",
                "+    graceful-fs \"^4.1.11\"",
                "+    is-generator-fn \"^1.0.0\"",
                "+    jest-diff \"^22.4.0\"",
                "+    jest-matcher-utils \"^22.4.0\"",
                "+    jest-message-util \"^22.4.0\"",
                "+    jest-snapshot \"^22.4.0\"",
                "+    jest-util \"^22.4.1\"",
                "+    source-map-support \"^0.5.0\"",
                "+",
                "+jest-leak-detector@^22.4.0:",
                "+  version \"22.4.0\"",
                "+  resolved \"https://registry.yarnpkg.com/jest-leak-detector/-/jest-leak-detector-22.4.0.tgz#64da77f05b001c96d2062226e079f89989c4aa2f\"",
                "+  dependencies:",
                "+    pretty-format \"^22.4.0\"",
                "+",
                "+jest-matcher-utils@^22.4.0:",
                "+  version \"22.4.0\"",
                "+  resolved \"https://registry.yarnpkg.com/jest-matcher-utils/-/jest-matcher-utils-22.4.0.tgz#d55f5faf2270462736bdf7c7485ee931c9d4b6a1\"",
                "+  dependencies:",
                "+    chalk \"^2.0.1\"",
                "+    jest-get-type \"^22.1.0\"",
                "+    pretty-format \"^22.4.0\"",
                "+",
                "+jest-message-util@^22.4.0:",
                "+  version \"22.4.0\"",
                "+  resolved \"https://registry.yarnpkg.com/jest-message-util/-/jest-message-util-22.4.0.tgz#e3d861df16d2fee60cb2bc8feac2188a42579642\"",
                "+  dependencies:",
                "+    \"@babel/code-frame\" \"^7.0.0-beta.35\"",
                "+    chalk \"^2.0.1\"",
                "+    micromatch \"^2.3.11\"",
                "+    slash \"^1.0.0\"",
                "+    stack-utils \"^1.0.1\"",
                "+",
                "+jest-mock@^22.2.0:",
                "+  version \"22.2.0\"",
                "+  resolved \"https://registry.yarnpkg.com/jest-mock/-/jest-mock-22.2.0.tgz#444b3f9488a7473adae09bc8a77294afded397a7\"",
                "+",
                "+jest-regex-util@^22.1.0:",
                "+  version \"22.1.0\"",
                "+  resolved \"https://registry.yarnpkg.com/jest-regex-util/-/jest-regex-util-22.1.0.tgz#5daf2fe270074b6da63e5d85f1c9acc866768f53\"",
                "+",
                "+jest-resolve-dependencies@^22.1.0:",
                "+  version \"22.1.0\"",
                "+  resolved \"https://registry.yarnpkg.com/jest-resolve-dependencies/-/jest-resolve-dependencies-22.1.0.tgz#340e4139fb13315cd43abc054e6c06136be51e31\"",
                "+  dependencies:",
                "+    jest-regex-util \"^22.1.0\"",
                "+",
                "+jest-resolve@^22.4.2:",
                "+  version \"22.4.2\"",
                "+  resolved \"https://registry.yarnpkg.com/jest-resolve/-/jest-resolve-22.4.2.tgz#25d88aa4147462c9c1c6a1ba16250d3794c24d00\"",
                "+  dependencies:",
                "+    browser-resolve \"^1.11.2\"",
                "+    chalk \"^2.0.1\"",
                "+",
                "+jest-runner@^22.4.2:",
                "+  version \"22.4.2\"",
                "+  resolved \"https://registry.yarnpkg.com/jest-runner/-/jest-runner-22.4.2.tgz#19390ea9d99f768973e16f95a1efa351c0017e87\"",
                "+  dependencies:",
                "+    exit \"^0.1.2\"",
                "+    jest-config \"^22.4.2\"",
                "+    jest-docblock \"^22.4.0\"",
                "+    jest-haste-map \"^22.4.2\"",
                "+    jest-jasmine2 \"^22.4.2\"",
                "+    jest-leak-detector \"^22.4.0\"",
                "+    jest-message-util \"^22.4.0\"",
                "+    jest-runtime \"^22.4.2\"",
                "+    jest-util \"^22.4.1\"",
                "+    jest-worker \"^22.2.2\"",
                "+    throat \"^4.0.0\"",
                "+",
                "+jest-runtime@^22.4.2:",
                "+  version \"22.4.2\"",
                "+  resolved \"https://registry.yarnpkg.com/jest-runtime/-/jest-runtime-22.4.2.tgz#0de0444f65ce15ee4f2e0055133fc7c17b9168f3\"",
                "+  dependencies:",
                "+    babel-core \"^6.0.0\"",
                "+    babel-jest \"^22.4.1\"",
                "+    babel-plugin-istanbul \"^4.1.5\"",
                "+    chalk \"^2.0.1\"",
                "+    convert-source-map \"^1.4.0\"",
                "+    exit \"^0.1.2\"",
                "+    graceful-fs \"^4.1.11\"",
                "+    jest-config \"^22.4.2\"",
                "+    jest-haste-map \"^22.4.2\"",
                "+    jest-regex-util \"^22.1.0\"",
                "+    jest-resolve \"^22.4.2\"",
                "+    jest-util \"^22.4.1\"",
                "+    jest-validate \"^22.4.2\"",
                "+    json-stable-stringify \"^1.0.1\"",
                "+    micromatch \"^2.3.11\"",
                "+    realpath-native \"^1.0.0\"",
                "+    slash \"^1.0.0\"",
                "+    strip-bom \"3.0.0\"",
                "+    write-file-atomic \"^2.1.0\"",
                "+    yargs \"^10.0.3\"",
                "+",
                "+jest-serializer@^22.4.0:",
                "+  version \"22.4.0\"",
                "+  resolved \"https://registry.yarnpkg.com/jest-serializer/-/jest-serializer-22.4.0.tgz#b5d145b98c4b0d2c20ab686609adbb81fe23b566\"",
                "+",
                "+jest-snapshot@^22.4.0:",
                "+  version \"22.4.0\"",
                "+  resolved \"https://registry.yarnpkg.com/jest-snapshot/-/jest-snapshot-22.4.0.tgz#03d3ce63f8fa7352388afc6a3c8b5ccc3a180ed7\"",
                "+  dependencies:",
                "+    chalk \"^2.0.1\"",
                "+    jest-diff \"^22.4.0\"",
                "+    jest-matcher-utils \"^22.4.0\"",
                "+    mkdirp \"^0.5.1\"",
                "+    natural-compare \"^1.4.0\"",
                "+    pretty-format \"^22.4.0\"",
                "+",
                "+jest-util@^22.4.1:",
                "+  version \"22.4.1\"",
                "+  resolved \"https://registry.yarnpkg.com/jest-util/-/jest-util-22.4.1.tgz#dd17c3bdb067f8e90591563ec0c42bf847dc249f\"",
                "+  dependencies:",
                "+    callsites \"^2.0.0\"",
                "+    chalk \"^2.0.1\"",
                "+    graceful-fs \"^4.1.11\"",
                "+    is-ci \"^1.0.10\"",
                "+    jest-message-util \"^22.4.0\"",
                "+    mkdirp \"^0.5.1\"",
                "+    source-map \"^0.6.0\"",
                "+",
                "+jest-validate@^22.4.2:",
                "+  version \"22.4.2\"",
                "+  resolved \"https://registry.yarnpkg.com/jest-validate/-/jest-validate-22.4.2.tgz#e789a4e056173bf97fe797a2df2d52105c57d4f4\"",
                "+  dependencies:",
                "+    chalk \"^2.0.1\"",
                "+    jest-config \"^22.4.2\"",
                "+    jest-get-type \"^22.1.0\"",
                "+    leven \"^2.1.0\"",
                "+    pretty-format \"^22.4.0\"",
                "+",
                "+jest-worker@^22.2.2:",
                "+  version \"22.2.2\"",
                "+  resolved \"https://registry.yarnpkg.com/jest-worker/-/jest-worker-22.2.2.tgz#c1f5dc39976884b81f68ec50cb8532b2cbab3390\"",
                "+  dependencies:",
                "+    merge-stream \"^1.0.1\"",
                "+",
                " jodid25519@^1.0.0:",
                "@@ -3063,3 +3672,3 @@ js-yaml@3.9.1, js-yaml@^3.9.0:",
                "-js-yaml@^3.9.1:",
                "+js-yaml@^3.7.0, js-yaml@^3.9.1:",
                "   version \"3.10.0\"",
                "@@ -3078,2 +3687,33 @@ jschardet@^1.4.2:",
                "+jsdom@^11.5.1:",
                "+  version \"11.6.2\"",
                "+  resolved \"https://registry.yarnpkg.com/jsdom/-/jsdom-11.6.2.tgz#25d1ef332d48adf77fc5221fe2619967923f16bb\"",
                "+  dependencies:",
                "+    abab \"^1.0.4\"",
                "+    acorn \"^5.3.0\"",
                "+    acorn-globals \"^4.1.0\"",
                "+    array-equal \"^1.0.0\"",
                "+    browser-process-hrtime \"^0.1.2\"",
                "+    content-type-parser \"^1.0.2\"",
                "+    cssom \">= 0.3.2 < 0.4.0\"",
                "+    cssstyle \">= 0.2.37 < 0.3.0\"",
                "+    domexception \"^1.0.0\"",
                "+    escodegen \"^1.9.0\"",
                "+    html-encoding-sniffer \"^1.0.2\"",
                "+    left-pad \"^1.2.0\"",
                "+    nwmatcher \"^1.4.3\"",
                "+    parse5 \"4.0.0\"",
                "+    pn \"^1.1.0\"",
                "+    request \"^2.83.0\"",
                "+    request-promise-native \"^1.0.5\"",
                "+    sax \"^1.2.4\"",
                "+    symbol-tree \"^3.2.2\"",
                "+    tough-cookie \"^2.3.3\"",
                "+    w3c-hr-time \"^1.0.1\"",
                "+    webidl-conversions \"^4.0.2\"",
                "+    whatwg-encoding \"^1.0.3\"",
                "+    whatwg-url \"^6.4.0\"",
                "+    ws \"^4.0.0\"",
                "+    xml-name-validator \"^3.0.0\"",
                "+",
                " jsesc@^1.3.0:",
                "@@ -3193,2 +3833,10 @@ lcid@^1.0.0:",
                "+left-pad@^1.2.0:",
                "+  version \"1.2.0\"",
                "+  resolved \"https://registry.yarnpkg.com/left-pad/-/left-pad-1.2.0.tgz#d30a73c6b8201d8f7d8e7956ba9616087a68e0ee\"",
                "+",
                "+leven@^2.1.0:",
                "+  version \"2.1.0\"",
                "+  resolved \"https://registry.yarnpkg.com/leven/-/leven-2.1.0.tgz#c2e7a9f772094dee9d34202ae8acce4687875580\"",
                "+",
                " levn@^0.3.0, levn@~0.3.0:",
                "@@ -3382,2 +4030,6 @@ lodash.some@^4.4.0:",
                "+lodash.sortby@^4.7.0:",
                "+  version \"4.7.0\"",
                "+  resolved \"https://registry.yarnpkg.com/lodash.sortby/-/lodash.sortby-4.7.0.tgz#edd14c824e2cc9c1e0b0a1b42bb5210516a42438\"",
                "+",
                " lodash.template@^3.0.0:",
                "@@ -3411,2 +4063,6 @@ lodash@4.17.4, lodash@^4.0.0, lodash@^4.15.0, lodash@^4.17.2, lodash@^4.17.4, lo",
                "+lodash@^4.13.1, lodash@^4.14.0:",
                "+  version \"4.17.5\"",
                "+  resolved \"https://registry.yarnpkg.com/lodash/-/lodash-4.17.5.tgz#99a92d65c0272debe8c96b6057bc8fbfa3bed511\"",
                "+",
                " log4js@1.1.1:",
                "@@ -3440,2 +4096,8 @@ lru-cache@4.0.2, lru-cache@^4.0.1:",
                "+makeerror@1.0.x:",
                "+  version \"1.0.11\"",
                "+  resolved \"https://registry.yarnpkg.com/makeerror/-/makeerror-1.0.11.tgz#e01a5c9109f2af79660e4e8b9587790184f5a96c\"",
                "+  dependencies:",
                "+    tmpl \"1.0.x\"",
                "+",
                " map-cache@^0.2.2:",
                "@@ -3494,3 +4156,3 @@ merge-source-map@^1.0.2:",
                "-merge-stream@^1.0.0:",
                "+merge-stream@^1.0.0, merge-stream@^1.0.1:",
                "   version \"1.0.1\"",
                "@@ -3500,2 +4162,6 @@ merge-stream@^1.0.0:",
                "+merge@^1.1.3:",
                "+  version \"1.2.0\"",
                "+  resolved \"https://registry.yarnpkg.com/merge/-/merge-1.2.0.tgz#7531e39d4949c281a66b8c5a6e0265e8b05894da\"",
                "+",
                " microbuffer@^1.0.0:",
                "@@ -3522,3 +4188,3 @@ micromatch@3.1.5:",
                "-micromatch@^2.3.11, micromatch@^2.3.7:",
                "+micromatch@^2.1.5, micromatch@^2.3.11, micromatch@^2.3.7:",
                "   version \"2.3.11\"",
                "@@ -3610,3 +4276,3 @@ minimist@0.0.8, minimist@~0.0.1:",
                "-minimist@^1.1.0:",
                "+minimist@^1.1.0, minimist@^1.1.1, minimist@^1.2.0:",
                "   version \"1.2.0\"",
                "@@ -3689,2 +4355,6 @@ mv@2.1.1:",
                "+nan@^2.3.0:",
                "+  version \"2.9.2\"",
                "+  resolved \"https://registry.yarnpkg.com/nan/-/nan-2.9.2.tgz#f564d75f5f8f36a6d9456cca7a6c4fe488ab7866\"",
                "+",
                " nanomatch@^1.2.1:",
                "@@ -3750,2 +4420,27 @@ node-int64@^0.4.0:",
                "+node-notifier@^5.2.1:",
                "+  version \"5.2.1\"",
                "+  resolved \"https://registry.yarnpkg.com/node-notifier/-/node-notifier-5.2.1.tgz#fa313dd08f5517db0e2502e5758d664ac69f9dea\"",
                "+  dependencies:",
                "+    growly \"^1.3.0\"",
                "+    semver \"^5.4.1\"",
                "+    shellwords \"^0.1.1\"",
                "+    which \"^1.3.0\"",
                "+",
                "+node-pre-gyp@^0.6.39:",
                "+  version \"0.6.39\"",
                "+  resolved \"https://registry.yarnpkg.com/node-pre-gyp/-/node-pre-gyp-0.6.39.tgz#c00e96860b23c0e1420ac7befc5044e1d78d8649\"",
                "+  dependencies:",
                "+    detect-libc \"^1.0.2\"",
                "+    hawk \"3.1.3\"",
                "+    mkdirp \"^0.5.1\"",
                "+    nopt \"^4.0.1\"",
                "+    npmlog \"^4.0.2\"",
                "+    rc \"^1.1.7\"",
                "+    request \"2.81.0\"",
                "+    rimraf \"^2.6.1\"",
                "+    semver \"^5.3.0\"",
                "+    tar \"^2.2.1\"",
                "+    tar-pack \"^3.4.0\"",
                "+",
                " node.extend@~1.1.2:",
                "@@ -3760,2 +4455,9 @@ noice-json-rpc@1.0.1:",
                "+nopt@^4.0.1:",
                "+  version \"4.0.1\"",
                "+  resolved \"https://registry.yarnpkg.com/nopt/-/nopt-4.0.1.tgz#d0d4685afd5415193c8c7505602d0d17cd64474d\"",
                "+  dependencies:",
                "+    abbrev \"1\"",
                "+    osenv \"^0.1.4\"",
                "+",
                " nopt@~1.0.10:",
                "@@ -3775,3 +4477,3 @@ normalize-package-data@^2.3.2:",
                "-normalize-path@^2.0.1:",
                "+normalize-path@^2.0.0, normalize-path@^2.0.1:",
                "   version \"2.1.1\"",
                "@@ -3787,2 +4489,11 @@ npm-run-path@^2.0.0:",
                "+npmlog@^4.0.2:",
                "+  version \"4.1.2\"",
                "+  resolved \"https://registry.yarnpkg.com/npmlog/-/npmlog-4.1.2.tgz#08a7f2a8bf734604779a9efa4ad5cc717abb954b\"",
                "+  dependencies:",
                "+    are-we-there-yet \"~1.1.2\"",
                "+    console-control-strings \"~1.1.0\"",
                "+    gauge \"~2.7.3\"",
                "+    set-blocking \"~2.0.0\"",
                "+",
                " nth-check@~1.0.1:",
                "@@ -3828,2 +4539,6 @@ number-is-nan@^1.0.0:",
                "+nwmatcher@^1.4.3:",
                "+  version \"1.4.3\"",
                "+  resolved \"https://registry.yarnpkg.com/nwmatcher/-/nwmatcher-1.4.3.tgz#64348e3b3d80f035b40ac11563d278f8b72db89c\"",
                "+",
                " nyc@11.2.1:",
                "@@ -3890,2 +4605,9 @@ object-visit@^1.0.0:",
                "+object.getownpropertydescriptors@^2.0.3:",
                "+  version \"2.0.3\"",
                "+  resolved \"https://registry.yarnpkg.com/object.getownpropertydescriptors/-/object.getownpropertydescriptors-2.0.3.tgz#8758c846f5b407adab0f236e0986f14b051caa16\"",
                "+  dependencies:",
                "+    define-properties \"^1.1.2\"",
                "+    es-abstract \"^1.5.1\"",
                "+",
                " object.omit@^2.0.0:",
                "@@ -3909,3 +4631,3 @@ on-finished@~2.3.0:",
                "-once@^1.3.0, once@^1.4.0:",
                "+once@^1.3.0, once@^1.3.3, once@^1.4.0:",
                "   version \"1.4.0\"",
                "@@ -3934,3 +4656,3 @@ optimist@~0.3, optimist@~0.3.5:",
                "-optionator@^0.8.2:",
                "+optionator@^0.8.1, optionator@^0.8.2:",
                "   version \"0.8.2\"",
                "@@ -3985,2 +4707,9 @@ osenv@^0.1.3:",
                "+osenv@^0.1.4:",
                "+  version \"0.1.5\"",
                "+  resolved \"https://registry.yarnpkg.com/osenv/-/osenv-0.1.5.tgz#85cdfafaeb28e8677f416e287592b5f3f49ea410\"",
                "+  dependencies:",
                "+    os-homedir \"^1.0.0\"",
                "+    os-tmpdir \"^1.0.0\"",
                "+",
                " p-finally@^1.0.0:",
                "@@ -4025,2 +4754,6 @@ parse-json@^4.0.0:",
                "+parse5@4.0.0:",
                "+  version \"4.0.0\"",
                "+  resolved \"https://registry.yarnpkg.com/parse5/-/parse5-4.0.0.tgz#6d78656e3da8d78b4ec0b906f7c08ef1dfe3f608\"",
                "+",
                " parse5@^3.0.1:",
                "@@ -4099,2 +4832,6 @@ pend@~1.2.0:",
                "+performance-now@^0.2.0:",
                "+  version \"0.2.0\"",
                "+  resolved \"https://registry.yarnpkg.com/performance-now/-/performance-now-0.2.0.tgz#33ef30c5c77d4ea21c5a53869d91b56d8f2555e5\"",
                "+",
                " performance-now@^2.1.0:",
                "@@ -4127,2 +4864,8 @@ pkg-dir@^1.0.0:",
                "+pkg-dir@^2.0.0:",
                "+  version \"2.0.0\"",
                "+  resolved \"https://registry.yarnpkg.com/pkg-dir/-/pkg-dir-2.0.0.tgz#f6d5d1109e19d63edf428e0bd57e12777615334b\"",
                "+  dependencies:",
                "+    find-up \"^2.1.0\"",
                "+",
                " plist@2.0.1:",
                "@@ -4149,2 +4892,6 @@ pluralize@^7.0.0:",
                "+pn@^1.1.0:",
                "+  version \"1.1.0\"",
                "+  resolved \"https://registry.yarnpkg.com/pn/-/pn-1.1.0.tgz#e2f4cef0e219f463c179ab37463e4e1ecdccbafb\"",
                "+",
                " posix-character-classes@^0.1.0:",
                "@@ -4165,2 +4912,9 @@ prettier@1.9.1:",
                "+pretty-format@^22.4.0:",
                "+  version \"22.4.0\"",
                "+  resolved \"https://registry.yarnpkg.com/pretty-format/-/pretty-format-22.4.0.tgz#237b1f7e1c50ed03bc65c03ccc29d7c8bb7beb94\"",
                "+  dependencies:",
                "+    ansi-regex \"^3.0.0\"",
                "+    ansi-styles \"^3.2.0\"",
                "+",
                " private@^0.1.7:",
                "@@ -4203,2 +4957,6 @@ punycode@^1.4.1:",
                "+punycode@^2.1.0:",
                "+  version \"2.1.0\"",
                "+  resolved \"https://registry.yarnpkg.com/punycode/-/punycode-2.1.0.tgz#5f863edc89b96db09074bad7947bf09056ca4e7d\"",
                "+",
                " q@1.4.1:",
                "@@ -4219,2 +4977,6 @@ qs@~6.3.0:",
                "+qs@~6.4.0:",
                "+  version \"6.4.0\"",
                "+  resolved \"https://registry.yarnpkg.com/qs/-/qs-6.4.0.tgz#13e26d28ad6b0ffaa91312cd3bf708ed351e7233\"",
                "+",
                " qs@~6.5.1:",
                "@@ -4250,2 +5012,11 @@ randomatic@^1.1.3:",
                "+rc@^1.1.7:",
                "+  version \"1.2.5\"",
                "+  resolved \"https://registry.yarnpkg.com/rc/-/rc-1.2.5.tgz#275cd687f6e3b36cc756baa26dfee80a790301fd\"",
                "+  dependencies:",
                "+    deep-extend \"~0.4.0\"",
                "+    ini \"~1.3.0\"",
                "+    minimist \"^1.2.0\"",
                "+    strip-json-comments \"~2.0.1\"",
                "+",
                " react-devtools-core@3.1.0:",
                "@@ -4374,3 +5145,3 @@ readable-stream@^1.0.33, readable-stream@^1.1.7, readable-stream@~1.1.9:",
                "-readable-stream@^2.0.0, readable-stream@^2.0.1, readable-stream@^2.0.5, readable-stream@^2.1.5:",
                "+readable-stream@^2.0.0, readable-stream@^2.0.1, readable-stream@^2.0.5, readable-stream@^2.0.6, readable-stream@^2.1.4, readable-stream@^2.1.5:",
                "   version \"2.3.4\"",
                "@@ -4417,2 +5188,8 @@ readdir-enhanced@^1.5.2:",
                "+realpath-native@^1.0.0:",
                "+  version \"1.0.0\"",
                "+  resolved \"https://registry.yarnpkg.com/realpath-native/-/realpath-native-1.0.0.tgz#7885721a83b43bd5327609f0ddecb2482305fdf0\"",
                "+  dependencies:",
                "+    util.promisify \"^1.0.0\"",
                "+",
                " redux-logger@3.0.6:",
                "@@ -4524,2 +5301,16 @@ request-light@^0.1.0:",
                "+request-promise-core@1.1.1:",
                "+  version \"1.1.1\"",
                "+  resolved \"https://registry.yarnpkg.com/request-promise-core/-/request-promise-core-1.1.1.tgz#3eee00b2c5aa83239cfb04c5700da36f81cd08b6\"",
                "+  dependencies:",
                "+    lodash \"^4.13.1\"",
                "+",
                "+request-promise-native@^1.0.5:",
                "+  version \"1.0.5\"",
                "+  resolved \"https://registry.yarnpkg.com/request-promise-native/-/request-promise-native-1.0.5.tgz#5281770f68e0c9719e5163fd3fab482215f4fda5\"",
                "+  dependencies:",
                "+    request-promise-core \"1.1.1\"",
                "+    stealthy-require \"^1.1.0\"",
                "+    tough-cookie \">=2.3.3\"",
                "+",
                " request@2.79.0, request@~2.79.0:",
                "@@ -4549,3 +5340,30 @@ request@2.79.0, request@~2.79.0:",
                "-request@^2.79.0:",
                "+request@2.81.0:",
                "+  version \"2.81.0\"",
                "+  resolved \"https://registry.yarnpkg.com/request/-/request-2.81.0.tgz#c6928946a0e06c5f8d6f8a9333469ffda46298a0\"",
                "+  dependencies:",
                "+    aws-sign2 \"~0.6.0\"",
                "+    aws4 \"^1.2.1\"",
                "+    caseless \"~0.12.0\"",
                "+    combined-stream \"~1.0.5\"",
                "+    extend \"~3.0.0\"",
                "+    forever-agent \"~0.6.1\"",
                "+    form-data \"~2.1.1\"",
                "+    har-validator \"~4.2.1\"",
                "+    hawk \"~3.1.3\"",
                "+    http-signature \"~1.1.0\"",
                "+    is-typedarray \"~1.0.0\"",
                "+    isstream \"~0.1.2\"",
                "+    json-stringify-safe \"~5.0.1\"",
                "+    mime-types \"~2.1.7\"",
                "+    oauth-sign \"~0.8.1\"",
                "+    performance-now \"^0.2.0\"",
                "+    qs \"~6.4.0\"",
                "+    safe-buffer \"^5.0.1\"",
                "+    stringstream \"~0.0.4\"",
                "+    tough-cookie \"~2.3.0\"",
                "+    tunnel-agent \"^0.6.0\"",
                "+    uuid \"^3.0.0\"",
                "+",
                "+request@^2.79.0, request@^2.83.0:",
                "   version \"2.83.0\"",
                "@@ -4603,2 +5421,8 @@ reselect@3.0.1:",
                "+resolve-cwd@^2.0.0:",
                "+  version \"2.0.0\"",
                "+  resolved \"https://registry.yarnpkg.com/resolve-cwd/-/resolve-cwd-2.0.0.tgz#00a9f7387556e27038eae232caa372a6a59b665a\"",
                "+  dependencies:",
                "+    resolve-from \"^3.0.0\"",
                "+",
                " resolve-from@2.0.0, resolve-from@^2.0.0:",
                "@@ -4611,2 +5435,6 @@ resolve-from@^1.0.0:",
                "+resolve-from@^3.0.0:",
                "+  version \"3.0.0\"",
                "+  resolved \"https://registry.yarnpkg.com/resolve-from/-/resolve-from-3.0.0.tgz#b22c7af7d9d6881bc8b6e653335eebcb0a188748\"",
                "+",
                " resolve-url@^0.2.1:",
                "@@ -4619,2 +5447,6 @@ resolve@1.1.6, resolve@^1.1.6:",
                "+resolve@1.1.7:",
                "+  version \"1.1.7\"",
                "+  resolved \"https://registry.yarnpkg.com/resolve/-/resolve-1.1.7.tgz#203114d82ad2c5ed9e8e0411b3932875e889e97b\"",
                "+",
                " restore-cursor@^2.0.0:",
                "@@ -4632,3 +5464,3 @@ right-align@^0.1.1:",
                "-rimraf@2, rimraf@2.6.2, rimraf@^2.2.8, rimraf@^2.3.3, rimraf@^2.5.4, rimraf@^2.6.1:",
                "+rimraf@2, rimraf@2.6.2, rimraf@^2.2.8, rimraf@^2.3.3, rimraf@^2.5.1, rimraf@^2.5.4, rimraf@^2.6.1:",
                "   version \"2.6.2\"",
                "@@ -4694,2 +5526,16 @@ safe-buffer@~5.0.1:",
                "+sane@^2.0.0:",
                "+  version \"2.4.1\"",
                "+  resolved \"https://registry.yarnpkg.com/sane/-/sane-2.4.1.tgz#29f991208cf28636720efdc584293e7fd66663a5\"",
                "+  dependencies:",
                "+    anymatch \"^1.3.0\"",
                "+    exec-sh \"^0.2.0\"",
                "+    fb-watchman \"^2.0.0\"",
                "+    minimatch \"^3.0.2\"",
                "+    minimist \"^1.1.1\"",
                "+    walker \"~1.0.5\"",
                "+    watch \"~0.18.0\"",
                "+  optionalDependencies:",
                "+    fsevents \"^1.1.1\"",
                "+",
                " sax@>=0.6.0, sax@^1.1.5:",
                "@@ -4698,2 +5544,6 @@ sax@>=0.6.0, sax@^1.1.5:",
                "+sax@^1.2.4:",
                "+  version \"1.2.4\"",
                "+  resolved \"https://registry.yarnpkg.com/sax/-/sax-1.2.4.tgz#2816234e2378bddc4e5354fab5caa895df7100d9\"",
                "+",
                " sb-callsite@^1.1.2:",
                "@@ -4736,3 +5586,7 @@ sb-promisify@^2.0.1:",
                "-set-blocking@^2.0.0:",
                "+semver@^5.4.1:",
                "+  version \"5.5.0\"",
                "+  resolved \"https://registry.yarnpkg.com/semver/-/semver-5.5.0.tgz#dc4bbc7a6ca9d916dee5d43516f0092b58f7b8ab\"",
                "+",
                "+set-blocking@^2.0.0, set-blocking@~2.0.0:",
                "   version \"2.0.0\"",
                "@@ -4793,2 +5647,6 @@ shell-quote@1.6.1, shell-quote@^1.6.1:",
                "+shellwords@^0.1.1:",
                "+  version \"0.1.1\"",
                "+  resolved \"https://registry.yarnpkg.com/shellwords/-/shellwords-0.1.1.tgz#d6b9181c1a48d397324c84871efbcfc73fc0654b\"",
                "+",
                " sigmund@~1.0.0:",
                "@@ -4886,2 +5744,8 @@ source-map-support@^0.4.11, source-map-support@^0.4.15:",
                "+source-map-support@^0.5.0:",
                "+  version \"0.5.3\"",
                "+  resolved \"https://registry.yarnpkg.com/source-map-support/-/source-map-support-0.5.3.tgz#2b3d5fff298cfa4d1afd7d4352d569e9a0158e76\"",
                "+  dependencies:",
                "+    source-map \"^0.6.0\"",
                "+",
                " source-map-url@^0.4.0:",
                "@@ -4906,2 +5770,6 @@ source-map@^0.5.3, source-map@^0.5.6, source-map@~0.5.1:",
                "+source-map@^0.6.0, source-map@~0.6.1:",
                "+  version \"0.6.1\"",
                "+  resolved \"https://registry.yarnpkg.com/source-map/-/source-map-0.6.1.tgz#74722af32e9614e9c287a8d0bbde48b5e2f1a263\"",
                "+",
                " span-skip-list@0.2.0:",
                "@@ -5006,2 +5874,6 @@ stack-trace@0.0.10:",
                "+stack-utils@^1.0.1:",
                "+  version \"1.0.1\"",
                "+  resolved \"https://registry.yarnpkg.com/stack-utils/-/stack-utils-1.0.1.tgz#d4f33ab54e8e38778b0ca5cfd3b3afb12db68620\"",
                "+",
                " stat-mode@^0.2.0:",
                "@@ -5021,2 +5893,6 @@ statuses@~1.3.0:",
                "+stealthy-require@^1.1.0:",
                "+  version \"1.1.1\"",
                "+  resolved \"https://registry.yarnpkg.com/stealthy-require/-/stealthy-require-1.1.1.tgz#35b09875b4ff49f26a777e509b3090a3226bf24b\"",
                "+",
                " stream-combiner@~0.0.4:",
                "@@ -5063,3 +5939,10 @@ streamsearch@~0.1.2:",
                "-string-width@^1.0.1:",
                "+string-length@^2.0.0:",
                "+  version \"2.0.0\"",
                "+  resolved \"https://registry.yarnpkg.com/string-length/-/string-length-2.0.0.tgz#d40dbb686a3ace960c1cffca562bf2c45f8363ed\"",
                "+  dependencies:",
                "+    astral-regex \"^1.0.0\"",
                "+    strip-ansi \"^4.0.0\"",
                "+",
                "+string-width@^1.0.1, string-width@^1.0.2:",
                "   version \"1.0.2\"",
                "@@ -5132,2 +6015,6 @@ strip-bom-stream@^1.0.0:",
                "+strip-bom@3.0.0, strip-bom@^3.0.0:",
                "+  version \"3.0.0\"",
                "+  resolved \"https://registry.yarnpkg.com/strip-bom/-/strip-bom-3.0.0.tgz#2334c18e9c759f7bdd56fdef7e9ae3d588e68ed3\"",
                "+",
                " strip-bom@^2.0.0:",
                "@@ -5138,6 +6025,2 @@ strip-bom@^2.0.0:",
                "-strip-bom@^3.0.0:",
                "-  version \"3.0.0\"",
                "-  resolved \"https://registry.yarnpkg.com/strip-bom/-/strip-bom-3.0.0.tgz#2334c18e9c759f7bdd56fdef7e9ae3d588e68ed3\"",
                "-",
                " strip-eof@^1.0.0:",
                "@@ -5166,2 +6049,8 @@ supports-color@^4.0.0:",
                "+supports-color@^5.2.0:",
                "+  version \"5.2.0\"",
                "+  resolved \"https://registry.yarnpkg.com/supports-color/-/supports-color-5.2.0.tgz#b0d5333b1184dd3666cbe5aa0b45c5ac7ac17a4a\"",
                "+  dependencies:",
                "+    has-flag \"^3.0.0\"",
                "+",
                " svg-pathdata@^1.0.3:",
                "@@ -5207,2 +6096,6 @@ symbol-observable@1.0.4, symbol-observable@^1.0.2:",
                "+symbol-tree@^3.2.2:",
                "+  version \"3.2.2\"",
                "+  resolved \"https://registry.yarnpkg.com/symbol-tree/-/symbol-tree-3.2.2.tgz#ae27db38f660a7ae2e1c3b7d1bc290819b8519e6\"",
                "+",
                " sync-exec@~0.6.x:",
                "@@ -5226,2 +6119,15 @@ table@^4.0.1:",
                "+tar-pack@^3.4.0:",
                "+  version \"3.4.1\"",
                "+  resolved \"https://registry.yarnpkg.com/tar-pack/-/tar-pack-3.4.1.tgz#e1dbc03a9b9d3ba07e896ad027317eb679a10a1f\"",
                "+  dependencies:",
                "+    debug \"^2.2.0\"",
                "+    fstream \"^1.0.10\"",
                "+    fstream-ignore \"^1.0.5\"",
                "+    once \"^1.3.3\"",
                "+    readable-stream \"^2.1.4\"",
                "+    rimraf \"^2.5.1\"",
                "+    tar \"^2.2.1\"",
                "+    uid-number \"^0.0.6\"",
                "+",
                " tar@^2.2.1:",
                "@@ -5255,2 +6161,6 @@ text-table@~0.2.0:",
                "+throat@^4.0.0:",
                "+  version \"4.1.0\"",
                "+  resolved \"https://registry.yarnpkg.com/throat/-/throat-4.1.0.tgz#89037cbc92c56ab18926e6ba4cbb200e15672a6a\"",
                "+",
                " through2-filter@^2.0.0:",
                "@@ -5296,2 +6206,6 @@ tmp@^0.0.33:",
                "+tmpl@1.0.x:",
                "+  version \"1.0.4\"",
                "+  resolved \"https://registry.yarnpkg.com/tmpl/-/tmpl-1.0.4.tgz#23640dd7b42d00433911140820e5cf440e521dd1\"",
                "+",
                " to-absolute-glob@^0.1.1:",
                "@@ -5333,2 +6247,8 @@ touch@1.0.0:",
                "+tough-cookie@>=2.3.3, tough-cookie@^2.3.3:",
                "+  version \"2.3.4\"",
                "+  resolved \"https://registry.yarnpkg.com/tough-cookie/-/tough-cookie-2.3.4.tgz#ec60cee38ac675063ffc97a5c18970578ee83655\"",
                "+  dependencies:",
                "+    punycode \"^1.4.1\"",
                "+",
                " tough-cookie@~2.3.0, tough-cookie@~2.3.3:",
                "@@ -5339,2 +6259,8 @@ tough-cookie@~2.3.0, tough-cookie@~2.3.3:",
                "+tr46@^1.0.0:",
                "+  version \"1.0.1\"",
                "+  resolved \"https://registry.yarnpkg.com/tr46/-/tr46-1.0.1.tgz#a8b13fd6bfd2489519674ccde55ba3693b706d09\"",
                "+  dependencies:",
                "+    punycode \"^2.1.0\"",
                "+",
                " tree-kill@1.1.0:",
                "@@ -5430,2 +6356,6 @@ uglify-to-browserify@~1.0.0:",
                "+uid-number@^0.0.6:",
                "+  version \"0.0.6\"",
                "+  resolved \"https://registry.yarnpkg.com/uid-number/-/uid-number-0.0.6.tgz#0ea10e8035e8eb5b8e4449f06da1c730663baa81\"",
                "+",
                " uint64be@1.0.1:",
                "@@ -5514,2 +6444,9 @@ util-deprecate@~1.0.1:",
                "+util.promisify@^1.0.0:",
                "+  version \"1.0.0\"",
                "+  resolved \"https://registry.yarnpkg.com/util.promisify/-/util.promisify-1.0.0.tgz#440f7165a459c9a16dc145eb8e72f35687097030\"",
                "+  dependencies:",
                "+    define-properties \"^1.1.2\"",
                "+    object.getownpropertydescriptors \"^2.0.3\"",
                "+",
                " utils-merge@1.0.0:",
                "@@ -5732,2 +6669,8 @@ vso-node-api@^6.1.2-preview:",
                "+w3c-hr-time@^1.0.1:",
                "+  version \"1.0.1\"",
                "+  resolved \"https://registry.yarnpkg.com/w3c-hr-time/-/w3c-hr-time-1.0.1.tgz#82ac2bff63d950ea9e3189a58a65625fedf19045\"",
                "+  dependencies:",
                "+    browser-process-hrtime \"^0.1.2\"",
                "+",
                " \"walkdir@>= 0.0.1\":",
                "@@ -5736,2 +6679,15 @@ vso-node-api@^6.1.2-preview:",
                "+walker@~1.0.5:",
                "+  version \"1.0.7\"",
                "+  resolved \"https://registry.yarnpkg.com/walker/-/walker-1.0.7.tgz#2f7f9b8fd10d677262b18a884e28d19618e028fb\"",
                "+  dependencies:",
                "+    makeerror \"1.0.x\"",
                "+",
                "+watch@~0.18.0:",
                "+  version \"0.18.0\"",
                "+  resolved \"https://registry.yarnpkg.com/watch/-/watch-0.18.0.tgz#28095476c6df7c90c963138990c0a5423eb4b986\"",
                "+  dependencies:",
                "+    exec-sh \"^0.2.0\"",
                "+    minimist \"^1.2.0\"",
                "+",
                " webfonts-generator@0.3.5:",
                "@@ -5750,2 +6706,12 @@ webfonts-generator@0.3.5:",
                "+webidl-conversions@^4.0.1, webidl-conversions@^4.0.2:",
                "+  version \"4.0.2\"",
                "+  resolved \"https://registry.yarnpkg.com/webidl-conversions/-/webidl-conversions-4.0.2.tgz#a855980b1f0b6b359ba1d5d9fb39ae941faa63ad\"",
                "+",
                "+whatwg-encoding@^1.0.1, whatwg-encoding@^1.0.3:",
                "+  version \"1.0.3\"",
                "+  resolved \"https://registry.yarnpkg.com/whatwg-encoding/-/whatwg-encoding-1.0.3.tgz#57c235bc8657e914d24e1a397d3c82daee0a6ba3\"",
                "+  dependencies:",
                "+    iconv-lite \"0.4.19\"",
                "+",
                " whatwg-fetch@>=0.10.0:",
                "@@ -5754,2 +6720,10 @@ whatwg-fetch@>=0.10.0:",
                "+whatwg-url@^6.4.0:",
                "+  version \"6.4.0\"",
                "+  resolved \"https://registry.yarnpkg.com/whatwg-url/-/whatwg-url-6.4.0.tgz#08fdf2b9e872783a7a1f6216260a1d66cc722e08\"",
                "+  dependencies:",
                "+    lodash.sortby \"^4.7.0\"",
                "+    tr46 \"^1.0.0\"",
                "+    webidl-conversions \"^4.0.1\"",
                "+",
                " which-module@^2.0.0:",
                "@@ -5758,3 +6732,3 @@ which-module@^2.0.0:",
                "-which@^1.2.4, which@^1.2.9:",
                "+which@^1.2.12, which@^1.2.4, which@^1.2.9, which@^1.3.0:",
                "   version \"1.3.0\"",
                "@@ -5764,2 +6738,8 @@ which@^1.2.4, which@^1.2.9:",
                "+wide-align@^1.1.0:",
                "+  version \"1.1.2\"",
                "+  resolved \"https://registry.yarnpkg.com/wide-align/-/wide-align-1.1.2.tgz#571e0f1b0604636ebc0dfc21b0339bbe31341710\"",
                "+  dependencies:",
                "+    string-width \"^1.0.2\"",
                "+",
                " window-size@0.1.0:",
                "@@ -5799,2 +6779,10 @@ write-file-atomic@^1.1.4:",
                "+write-file-atomic@^2.1.0:",
                "+  version \"2.3.0\"",
                "+  resolved \"https://registry.yarnpkg.com/write-file-atomic/-/write-file-atomic-2.3.0.tgz#1ff61575c2e2a4e8e510d6fa4e243cce183999ab\"",
                "+  dependencies:",
                "+    graceful-fs \"^4.1.11\"",
                "+    imurmurhash \"^0.1.4\"",
                "+    signal-exit \"^3.0.2\"",
                "+",
                " write@^0.2.1:",
                "@@ -5827,2 +6815,13 @@ ws@^2.0.3:",
                "+ws@^4.0.0:",
                "+  version \"4.1.0\"",
                "+  resolved \"https://registry.yarnpkg.com/ws/-/ws-4.1.0.tgz#a979b5d7d4da68bf54efe0408967c324869a7289\"",
                "+  dependencies:",
                "+    async-limiter \"~1.0.0\"",
                "+    safe-buffer \"~5.1.0\"",
                "+",
                "+xml-name-validator@^3.0.0:",
                "+  version \"3.0.0\"",
                "+  resolved \"https://registry.yarnpkg.com/xml-name-validator/-/xml-name-validator-3.0.0.tgz#6ae73e06de4d8c6e47f9fb181f78d648ad457c6a\"",
                "+",
                " xml2js@0.4.17:",
                "@@ -5876,2 +6875,8 @@ yargs-parser@^7.0.0:",
                "+yargs-parser@^8.1.0:",
                "+  version \"8.1.0\"",
                "+  resolved \"https://registry.yarnpkg.com/yargs-parser/-/yargs-parser-8.1.0.tgz#f1376a33b6629a5d063782944da732631e966950\"",
                "+  dependencies:",
                "+    camelcase \"^4.1.0\"",
                "+",
                " yargs@3.32.0, \"yargs@^3.32.0 || ^7.0.0\":",
                "@@ -5888,2 +6893,19 @@ yargs@3.32.0, \"yargs@^3.32.0 || ^7.0.0\":",
                "+yargs@^10.0.3:",
                "+  version \"10.1.2\"",
                "+  resolved \"https://registry.yarnpkg.com/yargs/-/yargs-10.1.2.tgz#454d074c2b16a51a43e2fb7807e4f9de69ccb5c5\"",
                "+  dependencies:",
                "+    cliui \"^4.0.0\"",
                "+    decamelize \"^1.1.1\"",
                "+    find-up \"^2.1.0\"",
                "+    get-caller-file \"^1.0.1\"",
                "+    os-locale \"^2.0.0\"",
                "+    require-directory \"^2.1.1\"",
                "+    require-main-filename \"^1.0.1\"",
                "+    set-blocking \"^2.0.0\"",
                "+    string-width \"^2.0.0\"",
                "+    which-module \"^2.0.0\"",
                "+    y18n \"^3.2.1\"",
                "+    yargs-parser \"^8.1.0\"",
                "+",
                " yargs@^8.0.1, yargs@^8.0.2:"
            ],
            "changed_files": [
                "modules/nuclide-jest/AtomJestEnvironment.js",
                "modules/nuclide-jest/atom-runner.js",
                "modules/nuclide-jest/jestTransformer.js",
                "modules/nuclide-jest/package.json",
                "package.json",
                "yarn.lock"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: provide",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "4c174b08286b2cd99a507930a6421624b93e33ba",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521163826,
            "hunks": 23,
            "message": "Use an \"exclusive\" parameter to kill existing servers Summary: Right now, big-dig servers attempt to kill other running ones via `pkill -f \"launchEntry-entry.js.*\"port\"` which is super hacky (although Nuclide does largely the same thing right now). Here is a proposed alternative: - An `exclusive` parameter at startup indicates that there should only be one server, per user, per `exclusive` tag. e.g. Nuclide will set `exclusive` to \"nuclide\" and Nuclide for VSCode will use \"nuclide-for-vscode\" (so they won't collide). - At startup, the server attempts to create `.bigdig.${exclusive}.pid` in `~/.certs`. - If it doesn't exist, we write our PID there and continue. - If it does already exist, we read the PID, sanity check that it belongs to a big-dig server, and kill it, then write our own over it. Unfortunately Node does not expose any bindings into fcntl / flock, so it's not really possible to do the last step as cleanly as we'd like (there's no way for us to tell that the process with pid = $PID still owns the .pid file, and we have to resort to heuristics). Still, this seems like a reasonably stable approach to doing things. Plus, we then have a documented way of allowing people to have multiple servers per machine (just use a unique `--exclusive` tag!) Reviewed By: wanderley Differential Revision: D7284119 fbshipit-source-id: f03a3c98809377f378809574051f73bcd2883029",
            "diff": [
                "diff --git a/modules/big-dig/src/client/SshHandshake.js b/modules/big-dig/src/client/SshHandshake.js",
                "index 1802350aa..5d61ec479 100644",
                "--- a/modules/big-dig/src/client/SshHandshake.js",
                "+++ b/modules/big-dig/src/client/SshHandshake.js",
                "@@ -67,2 +67,3 @@ export type SshConnectionConfiguration = {",
                "   password: string, // for simple password-based authentication",
                "+  exclusive?: string, // Ensure that only one server with this \"exclusive\" tag is running.",
                " };",
                "@@ -797,2 +798,3 @@ export class SshHandshake {",
                "       port: this._config.remoteServerPort,",
                "+      exclusive: this._config.exclusive,",
                "     };",
                "diff --git a/modules/big-dig/src/server/certificates.js b/modules/big-dig/src/server/certificates.js",
                "index faf35f7f1..1e440f936 100644",
                "--- a/modules/big-dig/src/server/certificates.js",
                "+++ b/modules/big-dig/src/server/certificates.js",
                "@@ -13,2 +13,3 @@",
                " import net from 'net';",
                "+import os from 'os';",
                " import nuclideUri from 'nuclide-commons/nuclideUri';",
                "@@ -192 +193,5 @@ function generateEnvironmentForOpenSSLCalls(serverCommonName: string): Object {",
                " }",
                "+",
                "+export function getCertificateDir(): string {",
                "+  return nuclideUri.join(os.homedir(), '.certs');",
                "+}",
                "diff --git a/modules/big-dig/src/server/cli.js b/modules/big-dig/src/server/cli.js",
                "index eafb9e164..6912301ea 100644",
                "--- a/modules/big-dig/src/server/cli.js",
                "+++ b/modules/big-dig/src/server/cli.js",
                "@@ -40,2 +40,3 @@ export type BigDigCliParams = {|",
                "   port: ?number,",
                "+  exclusive: ?string,",
                " |};",
                "@@ -53,3 +54,3 @@ export async function parseArgsAndRunMain(absolutePathToServerMain: string) {",
                "   );",
                "-  const {cname, expiration, jsonOutputFile} = params;",
                "+  const {cname, expiration, exclusive, jsonOutputFile} = params;",
                "   let {port, timeout} = params;",
                "@@ -99,2 +100,9 @@ export async function parseArgsAndRunMain(absolutePathToServerMain: string) {",
                "+  if (",
                "+    exclusive != null &&",
                "+    (typeof exclusive !== 'string' || !exclusive.match(/^[\\w\\d][\\w\\d-]*$/))",
                "+  ) {",
                "+    throw Error(`exclusive must be a valid identifier: '${exclusive}'`);",
                "+  }",
                "+",
                "   const clientCommonName = 'nuclide';",
                "@@ -110,2 +118,3 @@ export async function parseArgsAndRunMain(absolutePathToServerMain: string) {",
                "     expirationDays,",
                "+    exclusive,",
                "     jsonOutputFile,",
                "diff --git a/modules/big-dig/src/server/launchServer.js b/modules/big-dig/src/server/launchServer.js",
                "index 2913f540e..e31f8d8c0 100644",
                "--- a/modules/big-dig/src/server/launchServer.js",
                "+++ b/modules/big-dig/src/server/launchServer.js",
                "@@ -13,5 +13,8 @@",
                " import invariant from 'assert';",
                "+import fs from 'fs';",
                " import log4js from 'log4js';",
                " import nuclideUri from 'nuclide-commons/nuclideUri';",
                "+import {psTree} from 'nuclide-commons/process';",
                " import os from 'os';",
                "+import {getCertificateDir} from './certificates';",
                " import {launchServer} from './NuclideServer';",
                "@@ -23,2 +26,4 @@ export type LauncherScriptParams = {|",
                "   port: number,",
                "+  expirationDays: number,",
                "+  exclusive: ?string,",
                "   launcher: string,",
                "@@ -66,2 +71,75 @@ async function handleLaunchParams(params: LauncherScriptParams) {",
                "   });",
                "+",
                "+  // Exit once the certificates expire, as no clients will be able to connect at this point.",
                "+  setTimeout(() => {",
                "+    log4js",
                "+      .getLogger()",
                "+      .info(",
                "+        `Certificates expired after ${",
                "+          params.expirationDays",
                "+        } days, shutting down.`,",
                "+      );",
                "+    process.exit(2);",
                "+  }, params.expirationDays * 24 * 60 * 60 * 1000);",
                "+}",
                "+",
                "+// When an 'exclusive' parameter is provided, we'll ensure that only one server",
                "+// with a given \"exclusive\" tag is alive at any given time (per user).",
                "+// We do this by storing a .bigdig.exclusive.pid file in sharedCertsDir:",
                "+// if the file already exists, we'll try to kill the PID in that file.",
                "+async function enforceExclusive(exclusive: string): Promise<void> {",
                "+  const sharedCertsDir = getCertificateDir();",
                "+  const pidFile = nuclideUri.join(sharedCertsDir, `.bigdig.${exclusive}.pid`);",
                "+",
                "+  while (true) {",
                "+    try {",
                "+      const c = fs.constants;",
                "+      // O_CREAT / O_EXCL atomically creates the PID file.",
                "+      // Ideally we'd use fcntl/flock to hold onto the PID file until exit,",
                "+      // but sadly there's no easy flock API in Node.",
                "+      const handle = fs.openSync(",
                "+        pidFile,",
                "+        // eslint-disable-next-line no-bitwise",
                "+        c.O_WRONLY | c.O_CREAT | c.O_EXCL,",
                "+        // Readable only for the current user.",
                "+        0o600,",
                "+      );",
                "+      log4js.getLogger().info(`Writing pid=${process.pid} to ${pidFile}`);",
                "+      // $FlowFixMe: writeFileSync takes handles too.",
                "+      fs.writeFileSync(handle, process.pid);",
                "+      fs.closeSync(handle);",
                "+      break;",
                "+    } catch (error) {",
                "+      if (error.code === 'EEXIST') {",
                "+        // Note: the read, kill, and unlink steps could all throw.",
                "+        // However, an exception at any of those steps probably indicates a race,",
                "+        // in which case we should probably bail out anyway.",
                "+        const pidContents = fs.readFileSync(pidFile, 'utf8');",
                "+        const pid = parseInt(pidContents, 10);",
                "+        if (pid > 0) {",
                "+          log4js.getLogger().info(`Killing existing server with pid=${pid}`);",
                "+          // Node doesn't have any flock() style primitives, so we can't be certain",
                "+          // that this pid still corresponds to the process.",
                "+          // As a quick sanity check, we'll inspect the pstree to see that it's consistent.",
                "+          // eslint-disable-next-line no-await-in-loop",
                "+          const processTree = await psTree();",
                "+          const processInfo = processTree.find(proc => proc.pid === pid);",
                "+          if (",
                "+            processInfo != null &&",
                "+            processInfo.commandWithArgs.includes('launchServer')",
                "+          ) {",
                "+            process.kill(pid);",
                "+          }",
                "+        }",
                "+        fs.unlinkSync(pidFile);",
                "+      } else {",
                "+        throw error;",
                "+      }",
                "+    }",
                "+  }",
                "+",
                "+  // Attempt to clean up the pid file on graceful exits.",
                "+  process.on('exit', () => {",
                "+    fs.unlinkSync(pidFile);",
                "+  });",
                " }",
                "diff --git a/modules/big-dig/src/server/main.js b/modules/big-dig/src/server/main.js",
                "index b047995f9..7f94a1bc6 100644",
                "--- a/modules/big-dig/src/server/main.js",
                "+++ b/modules/big-dig/src/server/main.js",
                "@@ -12,3 +12,2 @@",
                "-import child_process from 'child_process';",
                " import type {LauncherScriptParams} from './launchServer';",
                "@@ -17,7 +16,6 @@ import {timeoutPromise, TimedOutError} from 'nuclide-commons/promise';",
                " import fs from '../common/fs';",
                "-import invariant from 'assert';",
                "-import nuclideUri from 'nuclide-commons/nuclideUri';",
                "+import child_process from 'child_process';",
                " import {getLogger} from 'log4js';",
                " import os from 'os';",
                "-import {generateCertificates} from './certificates';",
                "+import {generateCertificates, getCertificateDir} from './certificates';",
                "@@ -30,2 +28,3 @@ export type StartServerParams = {",
                "   expirationDays: number,",
                "+  exclusive: ?string,",
                "   jsonOutputFile: string,",
                "@@ -42,2 +41,3 @@ export async function generateCertificatesAndStartServer({",
                "   expirationDays,",
                "+  exclusive,",
                "   jsonOutputFile,",
                "@@ -49,8 +49,3 @@ export async function generateCertificatesAndStartServer({",
                "-  // flowlint-next-line sketchy-null-string:off",
                "-  const homeDir = process.env.HOME || process.env.USERPROFILE;",
                "-  // flowlint-next-line sketchy-null-string:off",
                "-  invariant(homeDir);",
                "-",
                "-  const sharedCertsDir = nuclideUri.join(homeDir, '.certs');",
                "+  const sharedCertsDir = getCertificateDir();",
                "   try {",
                "@@ -82,2 +77,4 @@ export async function generateCertificatesAndStartServer({",
                "     port,",
                "+    expirationDays,",
                "+    exclusive,",
                "     launcher: absolutePathToServerMain,",
                "diff --git a/pkg/nuclide-remote-projects/lib/connectBigDigSshHandshake.js b/pkg/nuclide-remote-projects/lib/connectBigDigSshHandshake.js",
                "index b70fef96c..ed1864bcf 100644",
                "--- a/pkg/nuclide-remote-projects/lib/connectBigDigSshHandshake.js",
                "+++ b/pkg/nuclide-remote-projects/lib/connectBigDigSshHandshake.js",
                "@@ -106,2 +106,4 @@ export default function connectBigDigSshHandshake(",
                "   let version = getNuclideVersion();",
                "+  // We'll only allow one Nuclide server per user - but you can override this.",
                "+  let exclusive = 'nuclide';",
                "   // big-dig doesn't parse extra arguments.",
                "@@ -120,2 +122,5 @@ export default function connectBigDigSshHandshake(",
                "     }",
                "+    if (typeof parsed.exclusive === 'string') {",
                "+      exclusive = parsed.exclusive;",
                "+    }",
                "   }",
                "@@ -135,2 +140,3 @@ export default function connectBigDigSshHandshake(",
                "     password,",
                "+    exclusive,",
                "   });"
            ],
            "changed_files": [
                "modules/big-dig/src/client/SshHandshake.js",
                "modules/big-dig/src/server/certificates.js",
                "modules/big-dig/src/server/cli.js",
                "modules/big-dig/src/server/launchServer.js",
                "modules/big-dig/src/server/main.js",
                "pkg/nuclide-remote-projects/lib/connectBigDigSshHandshake.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code, parameter",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "7f6991e0c17ff379b0ed15249671f6007500de63",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521071806,
            "hunks": 3,
            "message": "Call filterMultiRootFileChanges() when necessary instead of per render() Reviewed By: tjfryan Differential Revision: D7279105 fbshipit-source-id: f0927b6b93064ec542410b819d5fef44d0b69a94",
            "diff": [
                "diff --git a/pkg/nuclide-file-tree/components/FileTreeSidebarComponent.js b/pkg/nuclide-file-tree/components/FileTreeSidebarComponent.js",
                "index ad1d149e9..f8b22dd97 100644",
                "--- a/pkg/nuclide-file-tree/components/FileTreeSidebarComponent.js",
                "+++ b/pkg/nuclide-file-tree/components/FileTreeSidebarComponent.js",
                "@@ -62,2 +62,3 @@ import {showMenuForEvent} from '../../commons-atom/context-menu';",
                " import Immutable from 'immutable';",
                "+import {createSelector} from 'reselect';",
                "@@ -305,5 +306,3 @@ export default class FileTreeSidebarComponent extends React.Component<",
                "             enableInlineActions={true}",
                "-            fileStatuses={filterMultiRootFileChanges(",
                "-              this.state.uncommittedFileChanges,",
                "-            )}",
                "+            fileStatuses={this._getFilteredUncommittedFileChanges(this.state)}",
                "             selectedFile={this.state.activeUri}",
                "@@ -597,2 +596,7 @@ All the changes across your entire stacked diff.",
                "+  _getFilteredUncommittedFileChanges = createSelector(",
                "+    [(state: State) => state.uncommittedFileChanges],",
                "+    filterMultiRootFileChanges,",
                "+  );",
                "+",
                "   isFocused(): boolean {"
            ],
            "changed_files": [
                "pkg/nuclide-file-tree/components/FileTreeSidebarComponent.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: render",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "a1890213e323598eebddfe5fba02507baaa3bf93",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520634433,
            "hunks": 4,
            "message": "Move pkg/nuclide-debugger-new/lib/vsp/processors.js to nuclide-debugger-common. Summary: This will allow us to reuse the path/URI rewriting in other contexts. Reviewed By: mostafaeweda Differential Revision: D7219809 fbshipit-source-id: a6030c55a22e4aa1d3f9f9997e5dc1048a41ed9b",
            "diff": [
                "diff --git a/modules/nuclide-debugger-common/main.js b/modules/nuclide-debugger-common/main.js",
                "index 16f6a5054..099293f58 100644",
                "--- a/modules/nuclide-debugger-common/main.js",
                "+++ b/modules/nuclide-debugger-common/main.js",
                "@@ -62,2 +62,8 @@ export {",
                "+export {",
                "+  localToRemoteProcessor,",
                "+  pathProcessor,",
                "+  remoteToLocalProcessor,",
                "+} from './processors';",
                "+",
                " export {default as VsAdapterSpawner} from './VsAdapterSpawner';",
                "diff --git a/modules/nuclide-debugger-common/processors.js b/modules/nuclide-debugger-common/processors.js",
                "new file mode 100644",
                "index 000000000..e19643d33",
                "--- /dev/null",
                "+++ b/modules/nuclide-debugger-common/processors.js",
                "@@ -0,0 +1,120 @@",
                "+/**",
                "+ * Copyright (c) 2017-present, Facebook, Inc.",
                "+ * All rights reserved.",
                "+ *",
                "+ * This source code is licensed under the BSD-style license found in the",
                "+ * LICENSE file in the root directory of this source tree. An additional grant",
                "+ * of patent rights can be found in the PATENTS file in the same directory.",
                "+ *",
                "+ * @flow",
                "+ * @format",
                "+ */",
                "+",
                "+import type {MessageProcessor} from './types';",
                "+import type {NuclideUri} from 'nuclide-commons/nuclideUri';",
                "+",
                "+import nuclideUri from 'nuclide-commons/nuclideUri';",
                "+",
                "+type PathMapper = (path: string) => string;",
                "+",
                "+export function remoteToLocalProcessor(): MessageProcessor {",
                "+  return pathProcessor(path => nuclideUri.getPath(path));",
                "+}",
                "+",
                "+export function localToRemoteProcessor(",
                "+  targetUri: NuclideUri,",
                "+): MessageProcessor {",
                "+  const hostname = nuclideUri.getHostname(targetUri);",
                "+  return pathProcessor(path => nuclideUri.createRemoteUri(hostname, path));",
                "+}",
                "+",
                "+export function pathProcessor(pathMapper: PathMapper): MessageProcessor {",
                "+  return message => {",
                "+    processRequestsUris(message, pathMapper);",
                "+    processResponseUris(message, pathMapper);",
                "+    processEventsUris(message, pathMapper);",
                "+  };",
                "+}",
                "+",
                "+function processRequestsUris(message: Object, pathMapper: PathMapper): void {",
                "+  if (message.type !== 'request') {",
                "+    return;",
                "+  }",
                "+  switch (message.command) {",
                "+    case 'setBreakpoints':",
                "+    case 'source':",
                "+      translateField(message, 'arguments.source.path', pathMapper);",
                "+      break;",
                "+  }",
                "+}",
                "+",
                "+function processResponseUris(message: Object, pathMapper: PathMapper): void {",
                "+  if (message.type !== 'response') {",
                "+    return;",
                "+  }",
                "+  switch (message.command) {",
                "+    case 'setBreakpoints':",
                "+    case 'setFunctionBreakpoints':",
                "+      message.body.breakpoints.forEach(bp =>",
                "+        translateField(bp, 'source.path', pathMapper),",
                "+      );",
                "+      break;",
                "+    case 'stackTrace':",
                "+      message.body.stackFrames.forEach(frame =>",
                "+        translateField(frame, 'source.path', pathMapper),",
                "+      );",
                "+      break;",
                "+    case 'modules':",
                "+      message.body.modules.forEach(module =>",
                "+        translateField(module, 'path', pathMapper),",
                "+      );",
                "+      break;",
                "+    case 'loadedSources':",
                "+      message.body.sources.forEach(source =>",
                "+        translateField(source, 'path', pathMapper),",
                "+      );",
                "+      break;",
                "+  }",
                "+}",
                "+",
                "+function processEventsUris(message: Object, pathMapper: PathMapper): void {",
                "+  if (message.type !== 'event') {",
                "+    return;",
                "+  }",
                "+",
                "+  switch (message.event) {",
                "+    case 'output':",
                "+    case 'loadedSource':",
                "+      translateField(message, 'body.source.path', pathMapper);",
                "+      break;",
                "+    case 'breakpoint':",
                "+      translateField(message, 'body.breakpoint.source.path', pathMapper);",
                "+      break;",
                "+    case 'module':",
                "+      translateField(message, 'body.module.path', pathMapper);",
                "+      break;",
                "+  }",
                "+}",
                "+",
                "+// Traverse the source `object` for a deeply nested field,",
                "+// then apply the `pathMapper` to that field, if existing.",
                "+function translateField(",
                "+  object: Object,",
                "+  fieldDescriptor: string,",
                "+  pathMapper: PathMapper,",
                "+): void {",
                "+  const fields = fieldDescriptor.split('.');",
                "+  let lastObj = {};",
                "+  const value = fields.reduce((child, field) => {",
                "+    if (child == null) {",
                "+      return null;",
                "+    } else {",
                "+      lastObj = child;",
                "+      return child[field];",
                "+    }",
                "+  }, object);",
                "+  if (value != null) {",
                "+    const [lastField] = fields.slice(-1);",
                "+    lastObj[lastField] = pathMapper((value: any));",
                "+  }",
                "+}",
                "diff --git a/pkg/nuclide-debugger-new/lib/vsp/DebugService.js b/pkg/nuclide-debugger-new/lib/vsp/DebugService.js",
                "index ca4f48bc4..d9317cb28 100644",
                "--- a/pkg/nuclide-debugger-new/lib/vsp/DebugService.js",
                "+++ b/pkg/nuclide-debugger-new/lib/vsp/DebugService.js",
                "@@ -67,3 +67,7 @@ import {observableFromSubscribeFunction} from 'nuclide-commons/event';",
                " import {sleep, serializeAsyncCall} from 'nuclide-commons/promise';",
                "-import {VsDebugSession} from 'nuclide-debugger-common';",
                "+import {",
                "+  VsDebugSession,",
                "+  localToRemoteProcessor,",
                "+  remoteToLocalProcessor,",
                "+} from 'nuclide-debugger-common';",
                " import {Observable, Subject, TimeoutError} from 'rxjs';",
                "@@ -106,3 +110,2 @@ import logger from '../logger';",
                " import stripAnsi from 'strip-ansi';",
                "-import {remoteToLocalProcessor, localToRemoteProcessor} from './processors';",
                " import url from 'url';"
            ],
            "changed_files": [
                "modules/nuclide-debugger-common/main.js",
                "modules/nuclide-debugger-common/processors.js",
                "pkg/nuclide-debugger-new/lib/vsp/DebugService.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: context",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "7d0748ac2ec733033d74034dc548f7511cb8b008",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521498858,
            "hunks": 1,
            "message": "Store latest_diff in revisionStatusDisplay Summary: We'll use this info to fetch the build statuses from sandcastle, who require this number and not the diff number. I'm storing it here because we have it for free, since it's already being requested in this same query. However the name RevisionStatusDisplay might be a little misleading now, since it's not just for displaying. Reviewed By: tjfryan Differential Revision: D7262361 fbshipit-source-id: 4585e5c2ba934c7bb886155129434b2145d8ad6e",
            "diff": [
                "diff --git a/pkg/nuclide-hg-repository-client/lib/HgRepositoryClient.js b/pkg/nuclide-hg-repository-client/lib/HgRepositoryClient.js",
                "index 94f874c33..f882521fb 100644",
                "--- a/pkg/nuclide-hg-repository-client/lib/HgRepositoryClient.js",
                "+++ b/pkg/nuclide-hg-repository-client/lib/HgRepositoryClient.js",
                "@@ -62,2 +62,3 @@ export type RevisionStatusDisplay = {",
                "   className: ?string,",
                "+  latestDiff: number, // id of the latest diff within this revision",
                " };"
            ],
            "changed_files": [
                "pkg/nuclide-hg-repository-client/lib/HgRepositoryClient.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: lead",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "f98cd9b0066b79ffbc819b34607497e9c3eb94d0",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1522021153,
            "hunks": 2,
            "message": "Removed providesModule tag from FB module format template used by several tools (e.g.: relay generator) Summary: This is required to remove the providesModule tag from many files in WWW. Most of them are generated by the Relay generator (~6K files). There aren't any generated files with providesModule in fbsource, so we just need to commit the files with the templates. In the diff that will be automatically created when this gets landed in fbsource, we should rebuild the code and commit any modified files so we don't have issues with hashes & CIGAR. Reviewed By: mjesun Differential Revision: D7370686 fbshipit-source-id: 46908c73c36204dc560df18b4cfd133f343dfaae",
            "diff": [
                "diff --git a/scripts/utils/getFBFormatGeneratedModule.js b/scripts/utils/getFBFormatGeneratedModule.js",
                "index a5cc131e5..374ab42c1 100644",
                "--- a/scripts/utils/getFBFormatGeneratedModule.js",
                "+++ b/scripts/utils/getFBFormatGeneratedModule.js",
                "@@ -22,3 +22,2 @@ function getFBFormatGeneratedModule(buildCommand) {",
                "   return ({",
                "-    moduleName,",
                "     documentType,",
                "@@ -44,3 +43,2 @@ function getFBFormatGeneratedModule(buildCommand) {",
                "  *",
                "- * ${'@'}providesModule ${moduleName}",
                "  * ${SignedSource.getSigningToken()}${hashText}"
            ],
            "changed_files": [
                "scripts/utils/getFBFormatGeneratedModule.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: provide, code, issue",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "21f460dd24637008938ab9e98e838361571e4435",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1522093088,
            "hunks": 3,
            "message": "Add nuclide-prebuilt-libs@0.4.0 Summary: Includes changes in https://github.com/facebook-atom/nuclide-prebuilt-libs/pull/10. - Speed optimizations - Configurable \"smartCase\" parameter - Compiled with GCC7 for Linux Reviewed By: wanderley Differential Revision: D7397387 fbshipit-source-id: 091af4dd60ff23bacc78a04dcac6683ad5d2ee0b",
            "diff": [
                "diff --git a/modules/nuclide-debugger-vsps/package.json b/modules/nuclide-debugger-vsps/package.json",
                "index d87a3fd83..f069d6c81 100644",
                "--- a/modules/nuclide-debugger-vsps/package.json",
                "+++ b/modules/nuclide-debugger-vsps/package.json",
                "@@ -18,3 +18,3 @@",
                "     \"nuclide-debugger-common\": \"0.5.1-dev\",",
                "-    \"nuclide-prebuilt-libs\": \"0.3.8\",",
                "+    \"nuclide-prebuilt-libs\": \"0.4.0\",",
                "     \"nullthrows\": \"1.0.0\",",
                "diff --git a/package.json b/package.json",
                "index 59d6dd832..29099dc76 100644",
                "--- a/package.json",
                "+++ b/package.json",
                "@@ -100,3 +100,3 @@",
                "     \"node-fetch\": \"1.6.3\",",
                "-    \"nuclide-prebuilt-libs\": \"0.3.8\",",
                "+    \"nuclide-prebuilt-libs\": \"0.4.0\",",
                "     \"nullthrows\": \"1.0.0\",",
                "diff --git a/yarn.lock b/yarn.lock",
                "index 25efa4a38..f2355c20c 100644",
                "--- a/yarn.lock",
                "+++ b/yarn.lock",
                "@@ -4563,5 +4563,5 @@ nuclide-commons@0.5.1:",
                "-nuclide-prebuilt-libs@0.3.8:",
                "-  version \"0.3.8\"",
                "-  resolved \"https://registry.yarnpkg.com/nuclide-prebuilt-libs/-/nuclide-prebuilt-libs-0.3.8.tgz#c5ee284fc0df6eabc888143a5e1b7d3739ae21f7\"",
                "+nuclide-prebuilt-libs@0.4.0:",
                "+  version \"0.4.0\"",
                "+  resolved \"https://registry.yarnpkg.com/nuclide-prebuilt-libs/-/nuclide-prebuilt-libs-0.4.0.tgz#da1ee8bded779fc39d22eae48a3c69dec0958e0b\""
            ],
            "changed_files": [
                "modules/nuclide-debugger-vsps/package.json",
                "package.json",
                "yarn.lock"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: parameter",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "4a13a7bffa606200fefd94057bdd3a39a8beff92",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1522080125,
            "hunks": 2,
            "message": "retry should only be true once \"attempts\" is non-zero. Summary: For a user who has elected to use password-based auth (and did not specify a password in the connection dialog), it is not right that the first time they attempt to enter a password it is flagged as a \"retry.\" This fixes that issue. Reviewed By: hansonw Differential Revision: D7396979 fbshipit-source-id: 9b449b2ef0f6cadd5f61e1a03e6149bc3a7ee507",
            "diff": [
                "diff --git a/modules/big-dig/src/client/SshHandshake.js b/modules/big-dig/src/client/SshHandshake.js",
                "index 9dc22c950..a03cc27a0 100644",
                "--- a/modules/big-dig/src/client/SshHandshake.js",
                "+++ b/modules/big-dig/src/client/SshHandshake.js",
                "@@ -465,2 +465,3 @@ export class SshHandshake {",
                "     while (authError != null && attempts < PASSWORD_RETRIES) {",
                "+      const retry = attempts > 0;",
                "       const retryText = attempts > 0 ? ' again' : '';",
                "@@ -474,3 +475,3 @@ export class SshHandshake {",
                "         echo: false,",
                "-        retry: true,",
                "+        retry,",
                "       });"
            ],
            "changed_files": [
                "modules/big-dig/src/client/SshHandshake.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: issue",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "6ea10af870cff881815217aff0ebf13caf066336",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520889371,
            "hunks": 3,
            "message": "Back out \"Paths need to be local when passing parameters to the chrome-debugger / lldb bridge\" Summary: Reverts D7149229 as it breaks the general native debugging in Nuclide (manual test plan); hence, reverting as that's a release-blocker. Reviewed By: stepanhruda Differential Revision: D7206022 fbshipit-source-id: 0640ac4e97c5e7d954ff871fcc893bb747de4d7d",
            "diff": [
                "diff --git a/pkg/nuclide-debugger-native-rpc/lib/NativeDebuggerServiceInterface.js b/pkg/nuclide-debugger-native-rpc/lib/NativeDebuggerServiceInterface.js",
                "index eb1495d9d..6980bc690 100644",
                "--- a/pkg/nuclide-debugger-native-rpc/lib/NativeDebuggerServiceInterface.js",
                "+++ b/pkg/nuclide-debugger-native-rpc/lib/NativeDebuggerServiceInterface.js",
                "@@ -28,4 +28,4 @@ export type LaunchTargetInfo = {",
                "   stdinFilePath?: string,",
                "-  basepath?: NuclideUri,",
                "-  lldbPythonPath?: ?NuclideUri, // see DebuggerConfig",
                "+  basepath?: string,",
                "+  lldbPythonPath?: ?string, // see DebuggerConfig",
                "   coreDump?: string,",
                "@@ -35,4 +35,4 @@ export type BootstrapDebuggerInfo = {",
                "   lldbBootstrapFiles: Array<string>,",
                "-  basepath?: NuclideUri,",
                "-  lldbPythonPath?: ?NuclideUri, // see DebuggerConfig",
                "+  basepath?: string,",
                "+  lldbPythonPath?: ?string, // see DebuggerConfig",
                " };",
                "@@ -44,3 +44,3 @@ export type DebuggerConfig = {",
                "   buckConfigRootFile: string,",
                "-  lldbPythonPath: ?NuclideUri, // path of the lldb python modules",
                "+  lldbPythonPath: ?string, // path of the lldb python modules",
                "   envPythonPath: string, // sets the PYTHONPATH env var when spawning the lldb server"
            ],
            "changed_files": [
                "pkg/nuclide-debugger-native-rpc/lib/NativeDebuggerServiceInterface.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: parameter",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "5321e2a18e493df12027c46a6c78d553a2a2a3a1",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521150848,
            "hunks": 1,
            "message": "Make Jedi-cache user-specific as well Summary: Like the logs, sharing a Jedi cache between users also leads to permissions issues :( We'll use `$TMPDIR/jedi-cache-$USER` instead. Reviewed By: pelmers Differential Revision: D7295127 fbshipit-source-id: 53715c849e94e9ab48c7f1a9887b33815471ee10",
            "diff": [
                "diff --git a/pkg/nuclide-python-rpc/python/jediserver.py b/pkg/nuclide-python-rpc/python/jediserver.py",
                "index 11902c32f..90c3e6f8b 100644",
                "--- a/pkg/nuclide-python-rpc/python/jediserver.py",
                "+++ b/pkg/nuclide-python-rpc/python/jediserver.py",
                "@@ -252,3 +252,3 @@ if __name__ == '__main__':",
                "         tempfile.gettempdir(),",
                "-        'jedi-cache',",
                "+        'jedi-cache-%s' % getpass.getuser(),",
                "     )"
            ],
            "changed_files": [
                "pkg/nuclide-python-rpc/python/jediserver.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: issue, lead",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "88594e2beeeccd3c56c4079ceb250c036ab48d0f",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520377431,
            "hunks": 24,
            "message": "Bring over some other flags from the Nuclide server startup Summary: This ports over a bunch of features from the Nuclide server starter, including: - enables core dumps (via `ulimit -c unlimited` in the startup wrapper) - increases the stack trace limit to 50, for parity with Atom/Electron - increases the heap size limit to 4GB when the system memory exceeds 8GB - the ability to pass a custom `--version` (for manual testing with other fbpkg versions) - removes the hardcoded port in favor of the preferred port selection from the prior diff Reviewed By: wanderley Differential Revision: D7155224 fbshipit-source-id: bbf03824f0ae9332ed0825cbffb7dd4efbc5a307",
            "diff": [
                "diff --git a/modules/big-dig/src/client/SshHandshake.js b/modules/big-dig/src/client/SshHandshake.js",
                "index 51a69d09c..bddf27c88 100644",
                "--- a/modules/big-dig/src/client/SshHandshake.js",
                "+++ b/modules/big-dig/src/client/SshHandshake.js",
                "@@ -787,4 +787,4 @@ export class SshHandshake {",
                "       jsonOutputFile: remoteTempFile,",
                "-      timeout: '60s', // Currently unused and not configurable.",
                "-      expiration: '7d',",
                "+      timeout: 60000,",
                "+      expiration: '14d',",
                "       serverParams: this._config.remoteServerCustomParams,",
                "diff --git a/modules/big-dig/src/server/cli.js b/modules/big-dig/src/server/cli.js",
                "index e3420e55e..4e3faff0f 100644",
                "--- a/modules/big-dig/src/server/cli.js",
                "+++ b/modules/big-dig/src/server/cli.js",
                "@@ -31,2 +31,3 @@ log4js.configure({",
                " const DEFAULT_PORT = 0;",
                "+const DEFAULT_TIMEOUT = 60000;",
                "@@ -42,3 +43,3 @@ export async function parseArgsAndRunMain(absolutePathToServerMain: string) {",
                "   const {cname, expiration, jsonOutputFile} = params;",
                "-  let {port} = params;",
                "+  let {port, timeout} = params;",
                "   if (typeof cname !== 'string') {",
                "@@ -65,2 +66,9 @@ export async function parseArgsAndRunMain(absolutePathToServerMain: string) {",
                "+  if (timeout == null) {",
                "+    timeout = DEFAULT_TIMEOUT;",
                "+  }",
                "+  if (typeof timeout !== 'number') {",
                "+    throw Error(`timeout must be specified as number but was: '${timeout}'`);",
                "+  }",
                "+",
                "   // expiration arg validation",
                "@@ -84,3 +92,3 @@ export async function parseArgsAndRunMain(absolutePathToServerMain: string) {",
                "-  await generateCertificatesAndStartServer(",
                "+  await generateCertificatesAndStartServer({",
                "     clientCommonName,",
                "@@ -89,2 +97,3 @@ export async function parseArgsAndRunMain(absolutePathToServerMain: string) {",
                "     port,",
                "+    timeout,",
                "     expirationDays,",
                "@@ -92,4 +101,4 @@ export async function parseArgsAndRunMain(absolutePathToServerMain: string) {",
                "     absolutePathToServerMain,",
                "-    params.serverParams,",
                "-  );",
                "+    serverParams: params.serverParams,",
                "+  });",
                " }",
                "diff --git a/modules/big-dig/src/server/launchServer.js b/modules/big-dig/src/server/launchServer.js",
                "index c01402d29..3f169dfc0 100644",
                "--- a/modules/big-dig/src/server/launchServer.js",
                "+++ b/modules/big-dig/src/server/launchServer.js",
                "@@ -52,7 +52,9 @@ log4js.configure({",
                "-main();",
                "+main().catch(error => {",
                "+  log4js.getLogger().fatal('launchServer failed:', error);",
                "+  log4js.shutdown(() => process.exit(1));",
                "+});",
                " process.on('unhandledRejection', error => {",
                "-  log4js.getLogger().fatal('Unhandled rejection:', error);",
                "-  log4js.shutdown(() => process.exit(1));",
                "+  log4js.getLogger().error('Unhandled rejection:', error);",
                " });",
                "diff --git a/modules/big-dig/src/server/main.js b/modules/big-dig/src/server/main.js",
                "index a3b358eca..4f4b06434 100644",
                "--- a/modules/big-dig/src/server/main.js",
                "+++ b/modules/big-dig/src/server/main.js",
                "@@ -13,2 +13,3 @@",
                " import child_process from 'child_process';",
                "+import {timeoutPromise, TimedOutError} from 'nuclide-commons/promise';",
                " import fs from '../common/fs';",
                "@@ -17,5 +18,6 @@ import nuclideUri from 'nuclide-commons/nuclideUri';",
                " import {getLogger} from 'log4js';",
                "+import os from 'os';",
                " import {generateCertificates} from './certificates';",
                "-export async function generateCertificatesAndStartServer(",
                "+export type StartServerParams = {",
                "   clientCommonName: string,",
                "@@ -24,2 +26,3 @@ export async function generateCertificatesAndStartServer(",
                "   port: number,",
                "+  timeout: number,",
                "   expirationDays: number,",
                "@@ -28,3 +31,15 @@ export async function generateCertificatesAndStartServer(",
                "   serverParams: mixed,",
                "-): Promise<void> {",
                "+};",
                "+",
                "+export async function generateCertificatesAndStartServer({",
                "+  clientCommonName,",
                "+  serverCommonName,",
                "+  openSSLConfigPath,",
                "+  port,",
                "+  timeout,",
                "+  expirationDays,",
                "+  jsonOutputFile,",
                "+  absolutePathToServerMain,",
                "+  serverParams,",
                "+}: StartServerParams): Promise<void> {",
                "   const logger = getLogger();",
                "@@ -81,3 +96,15 @@ export async function generateCertificatesAndStartServer(",
                "     process.execPath,",
                "-    [launcherScript, JSON.stringify(params)],",
                "+    [",
                "+      // Increase stack trace limit for better debug logs.",
                "+      // For reference, Atom/Electron does not have a stack trace limit.",
                "+      '--stack-trace-limit=50',",
                "+      // Increase the maximum heap size if we have enough memory.",
                "+      ...(os.totalmem() > 8 * 1024 * 1024 * 1024",
                "+        ? ['--max-old-space-size=4096']",
                "+        : []),",
                "+      // In case anything slips through the exception handler.",
                "+      '--abort_on_uncaught_exception',",
                "+      launcherScript,",
                "+      JSON.stringify(params),",
                "+    ],",
                "     {",
                "@@ -89,13 +116,22 @@ export async function generateCertificatesAndStartServer(",
                "-  const childPort = await new Promise((resolve, reject) => {",
                "-    const onMessage = ({port: result}) => {",
                "-      resolve(result);",
                "-      child.removeAllListeners();",
                "-    };",
                "-    child.on('message', onMessage);",
                "-    child.on('error', reject);",
                "-    child.on('exit', code => {",
                "-      logger.info(`${launcherScript} exited with code ${code}`);",
                "-      reject(Error(`child exited early with code ${code}`));",
                "-    });",
                "+  const childPort = await timeoutPromise(",
                "+    new Promise((resolve, reject) => {",
                "+      const onMessage = ({port: result}) => {",
                "+        resolve(result);",
                "+        child.removeAllListeners();",
                "+      };",
                "+      child.on('message', onMessage);",
                "+      child.on('error', reject);",
                "+      child.on('exit', code => {",
                "+        logger.info(`${launcherScript} exited with code ${code}`);",
                "+        reject(Error(`child exited early with code ${code}`));",
                "+      });",
                "+    }),",
                "+    timeout,",
                "+  ).catch(err => {",
                "+    // Make sure we clean up hung children.",
                "+    if (err instanceof TimedOutError) {",
                "+      child.kill('SIGKILL');",
                "+    }",
                "+    return Promise.reject(err);",
                "   });",
                "diff --git a/pkg/nuclide-remote-projects/lib/connectBigDigSshHandshake.js b/pkg/nuclide-remote-projects/lib/connectBigDigSshHandshake.js",
                "index 76f227609..2085f73ab 100644",
                "--- a/pkg/nuclide-remote-projects/lib/connectBigDigSshHandshake.js",
                "+++ b/pkg/nuclide-remote-projects/lib/connectBigDigSshHandshake.js",
                "@@ -22,3 +22,3 @@ import type {",
                " import {SshHandshake} from 'big-dig/src/client/index';",
                "-import {shellParse} from 'nuclide-commons/string';",
                "+import yargs from 'yargs';",
                " import {getNuclideVersion} from '../../commons-node/system-info';",
                "@@ -103,5 +103,6 @@ export default function connectBigDigSshHandshake(",
                "   } = connectionConfig;",
                "-  // TODO(T25636858): Have the server auto-detect FB-friendly ports",
                "-  let remoteServerPort = 9091;",
                "   let {remoteServerCommand} = connectionConfig;",
                "+  let remoteServerPort;",
                "+  // Add the current Nuclide version, unless explicitly provided.",
                "+  let version = getNuclideVersion();",
                "   // big-dig doesn't parse extra arguments.",
                "@@ -109,9 +110,12 @@ export default function connectBigDigSshHandshake(",
                "   if (remoteServerCommand.includes(' ')) {",
                "-    const argv = shellParse(remoteServerCommand);",
                "-    remoteServerCommand = argv[0];",
                "-    for (let i = 1; i < argv.length - 1; i++) {",
                "-      if (argv[i] === '--port' || argv[i] === '-p') {",
                "-        remoteServerPort = parseInt(argv[i + 1], 10);",
                "-      }",
                "-      // TODO(T25636823): Also support debug flags",
                "+    const parsed = yargs.parse(remoteServerCommand);",
                "+    remoteServerCommand = parsed._[0];",
                "+    if (parsed.version != null) {",
                "+      version = parsed.version;",
                "+    }",
                "+    if (typeof parsed.port === 'number') {",
                "+      remoteServerPort = parsed.port;",
                "+    }",
                "+    if (typeof parsed.p === 'number') {",
                "+      remoteServerPort = parsed.p;",
                "     }",
                "@@ -120,4 +124,3 @@ export default function connectBigDigSshHandshake(",
                "   remoteServerCommand += ' --big-dig';",
                "-  // And the current Nuclide version.",
                "-  remoteServerCommand += ` --version=${getNuclideVersion()}`;",
                "+  remoteServerCommand += ` --version=${version}`;",
                "   sshHandshake.connect({",
                "diff --git a/pkg/nuclide-server/nuclide-start-server b/pkg/nuclide-server/nuclide-start-server",
                "index f569eaa3f..885bef6de 100755",
                "--- a/pkg/nuclide-server/nuclide-start-server",
                "+++ b/pkg/nuclide-server/nuclide-start-server",
                "@@ -16,2 +16,4 @@ if [ \"$1\" == \"--big-dig\" ]; then",
                "   shift",
                "+  # Try to enable core dumps (not doable from with Node)",
                "+  ulimit -c unlimited || true",
                "   node ../nuclide-server2/lib/main.js \"$@\"",
                "diff --git a/pkg/nuclide-server2/lib/server.js b/pkg/nuclide-server2/lib/server.js",
                "index 08d95784d..0069924da 100644",
                "--- a/pkg/nuclide-server2/lib/server.js",
                "+++ b/pkg/nuclide-server2/lib/server.js",
                "@@ -35,5 +35,2 @@ function launch(launcherParams: LauncherParameters): Promise<void> {",
                "     onConnection(transport: Transport) {",
                "-      // TODO: we need some way of identifying a connection",
                "-      // so that a client can resume its prior RpcConnection.",
                "-      // Right now the client doesn't even reconnect though :D",
                "       const rpcTransport: RpcTransportType = {",
                "@@ -45,6 +42,3 @@ function launch(launcherParams: LauncherParameters): Promise<void> {",
                "         },",
                "-        // Assuming we have a reliable connection, it'd be OK to just",
                "-        // pretend the transport is always open.",
                "-        // (Note that right now big-dig's WebSocketTransport *does* close",
                "-        // and it *will* throw errors when we try to send messages.)",
                "+        // TODO: Right now, connections are never closed.",
                "         close() {},"
            ],
            "changed_files": [
                "modules/big-dig/src/client/SshHandshake.js",
                "modules/big-dig/src/server/cli.js",
                "modules/big-dig/src/server/launchServer.js",
                "modules/big-dig/src/server/main.js",
                "pkg/nuclide-remote-projects/lib/connectBigDigSshHandshake.js",
                "pkg/nuclide-server/nuclide-start-server",
                "pkg/nuclide-server2/lib/server.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "2dacb9eb93667ab51b29183018166333f6126337",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521149337,
            "hunks": 4,
            "message": "Flow type CLI parameters Summary: To statically enforce consistency between what `SshHandshake` creates and what the CLI expects. (If only we could automate some of the runtime checks in `cli.js` using the Flow type!) Reviewed By: siegebell Differential Revision: D7284118 fbshipit-source-id: 1a5c17787ae89c02cc819a4ad3c54ec38ab6bb3e",
            "diff": [
                "diff --git a/modules/big-dig/src/client/SshHandshake.js b/modules/big-dig/src/client/SshHandshake.js",
                "index 15005e361..1802350aa 100644",
                "--- a/modules/big-dig/src/client/SshHandshake.js",
                "+++ b/modules/big-dig/src/client/SshHandshake.js",
                "@@ -12,2 +12,3 @@",
                "+import type {BigDigCliParams} from '../server/cli';",
                " import type {",
                "@@ -789,3 +790,3 @@ export class SshHandshake {",
                "     const remoteTempFile = `/tmp/big-dig-sshhandshake-${Math.random()}`;",
                "-    const params = {",
                "+    const params: BigDigCliParams = {",
                "       cname: this._config.host,",
                "diff --git a/modules/big-dig/src/server/cli.js b/modules/big-dig/src/server/cli.js",
                "index 4e3faff0f..eafb9e164 100644",
                "--- a/modules/big-dig/src/server/cli.js",
                "+++ b/modules/big-dig/src/server/cli.js",
                "@@ -33,2 +33,11 @@ const DEFAULT_TIMEOUT = 60000;",
                "+export type BigDigCliParams = {|",
                "+  cname: string,",
                "+  jsonOutputFile: string,",
                "+  timeout: ?number,",
                "+  expiration: string,",
                "+  serverParams: mixed,",
                "+  port: ?number,",
                "+|};",
                "+",
                " /**",
                "@@ -41,3 +50,5 @@ export async function parseArgsAndRunMain(absolutePathToServerMain: string) {",
                "   // All arguments expect for the last one are ignored.",
                "-  const params = JSON.parse(process.argv[process.argv.length - 1]);",
                "+  const params: BigDigCliParams = JSON.parse(",
                "+    process.argv[process.argv.length - 1],",
                "+  );",
                "   const {cname, expiration, jsonOutputFile} = params;"
            ],
            "changed_files": [
                "modules/big-dig/src/client/SshHandshake.js",
                "modules/big-dig/src/server/cli.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: parameter",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "357a78b77e2f0023b360e2e9f783e035d6dd276a",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521478467,
            "hunks": 3,
            "message": "Bring back the path resolution for the old debugger flow Summary: I had to bring this back because I wasn't able to fix it with type change only, as it was causing other issues (it  was a push blocker and reverted) that I don't think it's worthwhile investigating since this code will be thrown away soon. Differential Revision: D7313672 fbshipit-source-id: b6bcb2e46aa45fed127dc2ec2bbf5afba7e1f392",
            "diff": [
                "diff --git a/pkg/nuclide-debugger-native-rpc/lib/NativeDebuggerServiceImplementation.js b/pkg/nuclide-debugger-native-rpc/lib/NativeDebuggerServiceImplementation.js",
                "index 8cf75ac53..ecf082676 100644",
                "--- a/pkg/nuclide-debugger-native-rpc/lib/NativeDebuggerServiceImplementation.js",
                "+++ b/pkg/nuclide-debugger-native-rpc/lib/NativeDebuggerServiceImplementation.js",
                "@@ -153,2 +153,12 @@ async function _getDefaultLLDBConfig(): Promise<{",
                "+function getLocalPathIfRemote(path: any): string {",
                "+  const maybeRemotePath = (path: string);",
                "+  if (nuclideUri.isRemote(maybeRemotePath)) {",
                "+    const {path: localPath} = nuclideUri.parseRemoteUri(maybeRemotePath);",
                "+    return localPath;",
                "+  } else {",
                "+    return maybeRemotePath;",
                "+  }",
                "+}",
                "+",
                " export class NativeDebuggerService extends DebuggerRpcWebSocketService {",
                "@@ -254,7 +264,13 @@ export class NativeDebuggerService extends DebuggerRpcWebSocketService {",
                "       (await _getDefaultLLDBConfig()).pythonPath;",
                "-    const lldbPythonPath =",
                "+    let lldbPythonPath =",
                "       // flowlint-next-line sketchy-null-mixed:off",
                "-      inferiorArguments.lldb_python_path ||",
                "-      (await _getDefaultLLDBConfig()).lldbModulePath;",
                "+      ((inferiorArguments.lldb_python_path ||",
                "+        (await _getDefaultLLDBConfig()).lldbModulePath: any): string);",
                "+    lldbPythonPath = getLocalPathIfRemote(lldbPythonPath);",
                "+    if (inferiorArguments.basepath) {",
                "+      inferiorArguments.basepath = getLocalPathIfRemote(",
                "+        inferiorArguments.basepath,",
                "+      );",
                "+    }",
                "     const lldbProcess = this._spawnPythonBackend(pythonBinaryPath);"
            ],
            "changed_files": [
                "pkg/nuclide-debugger-native-rpc/lib/NativeDebuggerServiceImplementation.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code, issue",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "eb328389cfc27be58b75e925310b2d87eee2c5fd",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521840572,
            "hunks": 2,
            "message": "Java Debugger: Attach To Test [1/N] Summary: Video Example: https://pxl.cl/clNl Clicking the debug button for the buck toolbar where the target is a test target will launch the tests with debugging enabled. The user then has to attach to the port specified in the console. Next I'd like to make it so that the user doesn't need to manually attach to the debug port but since this was such a small diff I figured I'd put it up to get it out there. Reviewed By: stepanhruda Differential Revision: D7357083 fbshipit-source-id: 6e892282ac11291ec0cf005c250fb5ed6e6376a8",
            "diff": [
                "diff --git a/pkg/nuclide-buck/lib/BuckTaskRunner.js b/pkg/nuclide-buck/lib/BuckTaskRunner.js",
                "index a40555e11..e86ba06cc 100644",
                "--- a/pkg/nuclide-buck/lib/BuckTaskRunner.js",
                "+++ b/pkg/nuclide-buck/lib/BuckTaskRunner.js",
                "@@ -85,2 +85,4 @@ function shouldEnableTask(taskType: TaskType, ruleType: string): boolean {",
                "       return ruleType.endsWith('binary');",
                "+    case 'debug':",
                "+      return ruleType.endsWith('binary') || ruleType.endsWith('test');",
                "     default:",
                "@@ -335,3 +337,12 @@ export class BuckTaskRunner {",
                "           } else {",
                "-            const subcommand = taskType === 'debug' ? 'build' : taskType;",
                "+            let subcommand;",
                "+            if (taskType === 'debug') {",
                "+              if (buildRuleType.type.endsWith('test')) {",
                "+                subcommand = 'test';",
                "+              } else {",
                "+                subcommand = 'build';",
                "+              }",
                "+            } else {",
                "+              subcommand = taskType;",
                "+            }",
                "             return this._buildSystem"
            ],
            "changed_files": [
                "pkg/nuclide-buck/lib/BuckTaskRunner.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: attach",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "6c8fb603890509003139d1ee21899c613d72eb8b",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521044769,
            "hunks": 5,
            "message": "allow nuclide server to accept clientIds in the initial ws connection Summary: D7053394 simplifies NuclideSocket by sending the clientId in the initial websocket connection. Unfortunately this causes our upgrade path to fail in the BigDig case, since the old version of the server will be expecting the clientId to be sent as the first message, but the client will be sending a different message at that point. This diff gives us a path to upgrade without impacting users. So the plan is to roll this diff out to production, then land the clientId diff, then delete this additional code. It seems that the old NuclideServer path won't be affected since the heartbeat will be sent first and the version check will happen. Unfortunately, I couldn't confirm that path without a release build, so I went ahead and did the upgrade path there as well. Reviewed By: hansonw Differential Revision: D7258076 fbshipit-source-id: 19d7b2c6f1de075745707b3902eea8745736bada",
            "diff": [
                "diff --git a/modules/big-dig/src/server/BigDigServer.js b/modules/big-dig/src/server/BigDigServer.js",
                "index 09219cd4f..2bb5768e3 100644",
                "--- a/modules/big-dig/src/server/BigDigServer.js",
                "+++ b/modules/big-dig/src/server/BigDigServer.js",
                "@@ -99,42 +99,56 @@ export default class BigDigServer {",
                "     // TODO: send clientId in the http headers on the websocket connection",
                "+    const headerClientId = req.headers.client_id;",
                "+",
                "+    // TODO: after we start sending the clientId in headers, we can remove this check",
                "+    if (headerClientId != null) {",
                "+      this._logger.info(",
                "+        `received clientId ${headerClientId} in header, not waiting for first clientId message`,",
                "+      );",
                "+      this._handleClientId(ws, headerClientId);",
                "+    } else {",
                "+      this._logger.info(",
                "+        'did not receive clientId in header, will wait for first message',",
                "+      );",
                "+      // the first message after a connection should only include",
                "+      // the clientId of the connecting client; the BigDig connection",
                "+      // is not actually made until we get this connection",
                "+      ws.once('message', (clientId: string) => {",
                "+        this._handleClientId(ws, clientId);",
                "+      });",
                "+    }",
                "+  }",
                "-    // the first message after a connection should only include",
                "-    // the clientId of the connecting client; the BigDig connection",
                "-    // is not actually made until we get this connection",
                "-    ws.once('message', (clientId: string) => {",
                "-      const cachedTransport = this._clientIdToTransport.get(clientId);",
                "-      const wsTransport = new WebSocketTransport(clientId, ws);",
                "-",
                "-      if (cachedTransport == null) {",
                "-        // handle first message which should include the clientId",
                "-        this._logger.info(",
                "-          `got first message from client with clientId ${clientId}`,",
                "-        );",
                "-",
                "-        const qaTransport = new QueuedAckTransport(clientId, wsTransport);",
                "-        this._clientIdToTransport.set(clientId, qaTransport);",
                "-",
                "-        // Every subscriber must be notified of the new connection because it may",
                "-        // want to broadcast messages to it.",
                "-        const tagToTransport: Map<string, InternalTransport> = new Map();",
                "-        for (const [tag, subscriber] of this._tagToSubscriber) {",
                "-          const transport = new InternalTransport(tag, qaTransport);",
                "-          this._logger.info(`Created new InternalTransport for ${tag}`);",
                "-          tagToTransport.set(tag, transport);",
                "-          subscriber.onConnection(transport);",
                "-        }",
                "-",
                "-        // subsequent messages will be BigDig messages",
                "-        // TODO: could the message be a Buffer?",
                "-        qaTransport.onMessage().subscribe(message => {",
                "-          this._handleBigDigMessage(tagToTransport, message);",
                "-        });",
                "-",
                "-        // TODO: Either garbage collect inactive transports, or implement",
                "-        // an explicit \"close\" action in the big-dig protocol.",
                "-      } else {",
                "-        invariant(clientId === cachedTransport.id);",
                "-        cachedTransport.reconnect(wsTransport);",
                "+  _handleClientId(ws: WS, clientId: string) {",
                "+    const cachedTransport = this._clientIdToTransport.get(clientId);",
                "+    const wsTransport = new WebSocketTransport(clientId, ws);",
                "+",
                "+    if (cachedTransport == null) {",
                "+      // handle first message which should include the clientId",
                "+      this._logger.info(`creating new transport with clientId ${clientId}`);",
                "+",
                "+      const qaTransport = new QueuedAckTransport(clientId, wsTransport);",
                "+      this._clientIdToTransport.set(clientId, qaTransport);",
                "+",
                "+      // Every subscriber must be notified of the new connection because it may",
                "+      // want to broadcast messages to it.",
                "+      const tagToTransport: Map<string, InternalTransport> = new Map();",
                "+      for (const [tag, subscriber] of this._tagToSubscriber) {",
                "+        const transport = new InternalTransport(tag, qaTransport);",
                "+        this._logger.info(`Created new InternalTransport for ${tag}`);",
                "+        tagToTransport.set(tag, transport);",
                "+        subscriber.onConnection(transport);",
                "       }",
                "-    });",
                "+",
                "+      // subsequent messages will be BigDig messages",
                "+      // TODO: could the message be a Buffer?",
                "+      qaTransport.onMessage().subscribe(message => {",
                "+        this._handleBigDigMessage(tagToTransport, message);",
                "+      });",
                "+",
                "+      // TODO: Either garbage collect inactive transports, or implement",
                "+      // an explicit \"close\" action in the big-dig protocol.",
                "+    } else {",
                "+      invariant(clientId === cachedTransport.id);",
                "+      cachedTransport.reconnect(wsTransport);",
                "+    }",
                "   }",
                "diff --git a/pkg/nuclide-server/lib/NuclideServer.js b/pkg/nuclide-server/lib/NuclideServer.js",
                "index 53da94bf4..f899ed468 100644",
                "--- a/pkg/nuclide-server/lib/NuclideServer.js",
                "+++ b/pkg/nuclide-server/lib/NuclideServer.js",
                "@@ -147,3 +147,5 @@ export default class NuclideServer {",
                "     });",
                "-    webSocketServer.on('connection', socket => this._onConnection(socket));",
                "+    webSocketServer.on('connection', (socket, req) =>",
                "+      this._onConnection(socket, req),",
                "+    );",
                "     webSocketServer.on('error', error =>",
                "@@ -289,29 +291,46 @@ export default class NuclideServer {",
                "-  _onConnection(socket: WS): void {",
                "+  _onConnection(socket: WS, req: http$IncomingMessage): void {",
                "     logger.debug('WebSocket connecting');",
                "-    let client: ?RpcConnection<QueuedAckTransport> = null;",
                "+    const headerClientId = req.headers.client_id;",
                "-    const errorSubscription = attachEvent(socket, 'error', e =>",
                "-      logger.error('WebSocket error before first message', e),",
                "-    );",
                "+    // XXX: Once we ship the client that is sending the clientId in the header",
                "+    // we can remove this check and just leave the else block",
                "+    if (headerClientId != null) {",
                "+      logger.info(",
                "+        `received clientId in the initial ws header: ${headerClientId}`,",
                "+      );",
                "+      this._handleClientId(socket, headerClientId);",
                "+    } else {",
                "+      logger.info('did not receive the clientId in the initial ws header');",
                "+      logger.info('will wait for the clientId in the first message...');",
                "+      const errorSubscription = attachEvent(socket, 'error', e =>",
                "+        logger.error('WebSocket error before first message', e),",
                "+      );",
                "-    socket.once('message', (clientId: string) => {",
                "-      errorSubscription.dispose();",
                "-      client = this._clients.get(clientId);",
                "-      const transport = new WebSocketTransport(clientId, socket);",
                "-      if (client == null) {",
                "-        client = RpcConnection.createServer(",
                "-          this._rpcServiceRegistry,",
                "-          new QueuedAckTransport(clientId, transport, protocolLogger),",
                "-          {},",
                "-          clientId,",
                "-          protocolLogger,",
                "-        );",
                "-        this._clients.set(clientId, client);",
                "-      } else {",
                "-        invariant(clientId === client.getTransport().id);",
                "-        client.getTransport().reconnect(transport);",
                "-      }",
                "-    });",
                "+      socket.once('message', (clientId: string) => {",
                "+        errorSubscription.dispose();",
                "+        this._handleClientId(socket, clientId);",
                "+      });",
                "+    }",
                "+  }",
                "+",
                "+  _handleClientId(socket: WS, clientId: string) {",
                "+    let client: ?RpcConnection<QueuedAckTransport> = null;",
                "+",
                "+    client = this._clients.get(clientId);",
                "+    const transport = new WebSocketTransport(clientId, socket);",
                "+    if (client == null) {",
                "+      client = RpcConnection.createServer(",
                "+        this._rpcServiceRegistry,",
                "+        new QueuedAckTransport(clientId, transport, protocolLogger),",
                "+        {},",
                "+        clientId,",
                "+        protocolLogger,",
                "+      );",
                "+      this._clients.set(clientId, client);",
                "+    } else {",
                "+      invariant(clientId === client.getTransport().id);",
                "+      client.getTransport().reconnect(transport);",
                "+    }",
                "   }"
            ],
            "changed_files": [
                "modules/big-dig/src/server/BigDigServer.js",
                "pkg/nuclide-server/lib/NuclideServer.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code, affect",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "42b8d011a6f2437068fb21e94bec689e3c5dffec",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521065852,
            "hunks": 2,
            "message": "Sort files before generating the manifest file Summary: I ran into an issue where I connected using the production build, but once I killed the server and reconnected it claimed my manifest didn't match. I'm not 100% sure that this was the cause, but by using `find . -printf \"%t %p\"` I was able to see that some directories had modified timestamps (but none of the files did). I'm guessing that the shuffled directories may have thrown off the manifest ordering. As a prospective fix, this sorts the files by name before hashing all the data. Reviewed By: bolinfest Differential Revision: D7275100 fbshipit-source-id: 7deb728147cccc1f3839dab930ce9203bac40ddb",
            "diff": [
                "diff --git a/modules/big-dig/src/client/Manifest.js b/modules/big-dig/src/client/Manifest.js",
                "index f886568bf..038ce890e 100644",
                "--- a/modules/big-dig/src/client/Manifest.js",
                "+++ b/modules/big-dig/src/client/Manifest.js",
                "@@ -82,3 +82,3 @@ export function createManifest(",
                "   basePath: string,",
                "-  files: Iterable<{",
                "+  files: $ReadOnlyArray<{",
                "     filename: string,",
                "@@ -88,7 +88,9 @@ export function createManifest(",
                "   const hash = crypto.createHash('sha1');",
                "-  for (const file of files) {",
                "-    if (file.filename === manifestFilename || file.stats.isDirectory()) {",
                "-      // Exclude the manifest file and directories from the manifest.",
                "-      continue;",
                "-    }",
                "+  const sortedFiles = files",
                "+    // Exclude the manifest file and directories from the manifest.",
                "+    .filter(",
                "+      file => file.filename !== manifestFilename && !file.stats.isDirectory(),",
                "+    )",
                "+    .sort((a, b) => a.filename.localeCompare(b.filename));",
                "+  for (const file of sortedFiles) {",
                "     const filename = path.relative(basePath, file.filename);"
            ],
            "changed_files": [
                "modules/big-dig/src/client/Manifest.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: issue",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "716224ab16748c831724b826e97c30c6c66d9b21",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520636471,
            "hunks": 1,
            "message": "Use the selected range if the context menu was spawned within it Summary: Normally, using the context menu uses the point from the mouse click as the query range for the refactor. However, if the user selected some text and then right clicked within it, it's safe to assume that they meant to refactor the range. Reviewed By: wanderley Differential Revision: D7218276 fbshipit-source-id: 35bb569ace591449854c4e0256c9e5137a30fd93",
            "diff": [
                "diff --git a/pkg/nuclide-refactorizer/lib/main.js b/pkg/nuclide-refactorizer/lib/main.js",
                "index 2a9a1b3c8..4d2cab22d 100644",
                "--- a/pkg/nuclide-refactorizer/lib/main.js",
                "+++ b/pkg/nuclide-refactorizer/lib/main.js",
                "@@ -134,3 +134,8 @@ class Activation {",
                "           );",
                "-          editor.setCursorBufferPosition(bufferPosition);",
                "+          // If the user selected some text and clicked within it,",
                "+          // we'll treat it as a 'range refactor'.",
                "+          const currentSelection = editor.getSelectedBufferRange();",
                "+          if (!currentSelection.containsPoint(bufferPosition)) {",
                "+            editor.setCursorBufferPosition(bufferPosition);",
                "+          }"
            ],
            "changed_files": [
                "pkg/nuclide-refactorizer/lib/main.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: context",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "17a983288b5c9d47bc4fa9f3af904d6ad9ee6db7",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520377177,
            "hunks": 3,
            "message": "Implement FileFamily provider for clang Summary: We currently have related file functionality in the form of a package that is only backed by this clang service. Ultimately when File Family can provide all its functionality I'd like to deprecate it. For now, implement basic file family functionality for getting an alternate file. Reviewed By: hansonw Differential Revision: D7172037 fbshipit-source-id: 8984a8444e0ea7d93ac1d6b5e5910601c373dc42",
            "diff": [
                "diff --git a/pkg/nuclide-clang/lib/main.js b/pkg/nuclide-clang/lib/main.js",
                "index cf31cc2cd..5cb40e0a8 100644",
                "--- a/pkg/nuclide-clang/lib/main.js",
                "+++ b/pkg/nuclide-clang/lib/main.js",
                "@@ -20,2 +20,6 @@ import type {",
                " } from 'atom-ide-ui';",
                "+import type {",
                "+  FileFamilyProvider,",
                "+  FileGraph,",
                "+} from '../../nuclide-file-family/lib/types';",
                " import type {TypeHintProvider} from '../../nuclide-type-hint/lib/types';",
                "@@ -176,2 +180,31 @@ export function provideRelatedFiles(): RelatedFilesProvider {",
                "+export function provideFileFamily(): FileFamilyProvider {",
                "+  return {",
                "+    async getRelatedFiles(filePath: NuclideUri): Promise<FileGraph> {",
                "+      const relatedSourceOrHeader = await getRelatedSourceOrHeader(filePath);",
                "+      if (relatedSourceOrHeader == null) {",
                "+        return {",
                "+          files: new Map(),",
                "+          relations: [],",
                "+        };",
                "+      }",
                "+",
                "+      return {",
                "+        files: new Map([",
                "+          [filePath, {labels: new Set()}],",
                "+          [relatedSourceOrHeader, {labels: new Set()}],",
                "+        ]),",
                "+        relations: [",
                "+          {",
                "+            from: filePath,",
                "+            to: relatedSourceOrHeader,",
                "+            labels: new Set(['alternate']),",
                "+            directed: true,",
                "+          },",
                "+        ],",
                "+      };",
                "+    },",
                "+  };",
                "+}",
                "+",
                " export function consumeClangConfigurationProvider(",
                "diff --git a/pkg/nuclide-clang/package.json b/pkg/nuclide-clang/package.json",
                "index 661539646..b20353967 100644",
                "--- a/pkg/nuclide-clang/package.json",
                "+++ b/pkg/nuclide-clang/package.json",
                "@@ -84,2 +84,7 @@",
                "     },",
                "+    \"file-family-backend\": {",
                "+      \"versions\": {",
                "+        \"0.0.0\": \"provideFileFamily\"",
                "+      }",
                "+    },",
                "     \"code-actions\": {"
            ],
            "changed_files": [
                "pkg/nuclide-clang/lib/main.js",
                "pkg/nuclide-clang/package.json"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: provide",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "6f58405ff451a317a425241c52b02dba8afcc23f",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1522093092,
            "hunks": 1,
            "message": "Fix edge case with watchman events in filename search Summary: If a file is created and then rapidly modified, there's some buffering logic in PathSetUpdater that currently merges them into a single 'modified' event. Only 'creation' events result in things getting added to the index, so this is wrong. We have to be careful to merge 'new' and 'modified' events into a 'new' event. Reviewed By: wanderley Differential Revision: D7397388 fbshipit-source-id: 2a4fbaf391f7ba660c114b8006c5531b55ffff80",
            "diff": [
                "diff --git a/pkg/nuclide-fuzzy-file-search-rpc/lib/process/PathSetUpdater.js b/pkg/nuclide-fuzzy-file-search-rpc/lib/process/PathSetUpdater.js",
                "index f29d71457..178d2b2a2 100644",
                "--- a/pkg/nuclide-fuzzy-file-search-rpc/lib/process/PathSetUpdater.js",
                "+++ b/pkg/nuclide-fuzzy-file-search-rpc/lib/process/PathSetUpdater.js",
                "@@ -184,3 +184,9 @@ export default class PathSetUpdater {",
                "       files.forEach(file => {",
                "-        filesMap.set(file.name, file);",
                "+        const existing = filesMap.get(file.name);",
                "+        // If a file gets created and then modified, we have to preserve the 'new' bit.",
                "+        if (existing != null && file.exists && existing.new) {",
                "+          filesMap.set(file.name, {...file, new: true});",
                "+        } else {",
                "+          filesMap.set(file.name, file);",
                "+        }",
                "       });"
            ],
            "changed_files": [
                "pkg/nuclide-fuzzy-file-search-rpc/lib/process/PathSetUpdater.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: result",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "c6dfeda85611d328e24ecf14eff33d1f22cfcf86",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1522093090,
            "hunks": 17,
            "message": "Disable smartcase for fuzzy filename search by default Summary: But make it configurable in Nuclide settings. Reviewed By: wanderley Differential Revision: D7397386 fbshipit-source-id: 5882c6d3ba77469254653b31b3c3976966ec983c",
            "diff": [
                "diff --git a/pkg/nuclide-fuzzy-file-search-rpc/lib/FileSearchProcess.js b/pkg/nuclide-fuzzy-file-search-rpc/lib/FileSearchProcess.js",
                "index 42140fc94..82d8bc4e6 100644",
                "--- a/pkg/nuclide-fuzzy-file-search-rpc/lib/FileSearchProcess.js",
                "+++ b/pkg/nuclide-fuzzy-file-search-rpc/lib/FileSearchProcess.js",
                "@@ -11,3 +11,3 @@",
                "-import type {NuclideUri} from 'nuclide-commons/nuclideUri';",
                "+import type {FileSearchOptions} from './process/FileSearch';",
                " import type {FileSearchResult} from './rpc-types';",
                "@@ -61,3 +61,3 @@ class FileSearchProcess {",
                "     query: string,",
                "-    queryRoot: ?NuclideUri = undefined,",
                "+    options: FileSearchOptions,",
                "   ): Promise<Array<FileSearchResult>> {",
                "@@ -70,3 +70,3 @@ class FileSearchProcess {",
                "       method: 'doSearch',",
                "-      args: [this._directory, query, queryRoot],",
                "+      args: [this._directory, query, options],",
                "     });",
                "diff --git a/pkg/nuclide-fuzzy-file-search-rpc/lib/FuzzyFileSearchService.js b/pkg/nuclide-fuzzy-file-search-rpc/lib/FuzzyFileSearchService.js",
                "index 0581d4004..3655a4361 100644",
                "--- a/pkg/nuclide-fuzzy-file-search-rpc/lib/FuzzyFileSearchService.js",
                "+++ b/pkg/nuclide-fuzzy-file-search-rpc/lib/FuzzyFileSearchService.js",
                "@@ -52,2 +52,3 @@ export async function queryFuzzyFile(config: {|",
                "   ignoredNames: Array<string>,",
                "+  smartCase?: boolean,",
                " |}): Promise<Array<FileSearchResult>> {",
                "@@ -64,3 +65,6 @@ export async function queryFuzzyFile(config: {|",
                "     );",
                "-    return search.query(config.queryString, config.queryRoot);",
                "+    return search.query(config.queryString, {",
                "+      queryRoot: config.queryRoot,",
                "+      smartCase: config.smartCase,",
                "+    });",
                "   } else {",
                "diff --git a/pkg/nuclide-fuzzy-file-search-rpc/lib/process/FileSearch.js b/pkg/nuclide-fuzzy-file-search-rpc/lib/process/FileSearch.js",
                "index 66ef88619..4960e8f24 100644",
                "--- a/pkg/nuclide-fuzzy-file-search-rpc/lib/process/FileSearch.js",
                "+++ b/pkg/nuclide-fuzzy-file-search-rpc/lib/process/FileSearch.js",
                "@@ -11,3 +11,2 @@",
                "-import type {NuclideUri} from 'nuclide-commons/nuclideUri';",
                " import type {FileSearchResult} from '../rpc-types';",
                "@@ -21,2 +20,7 @@ import PathSetUpdater from './PathSetUpdater';",
                "+export type FileSearchOptions = {|",
                "+  queryRoot?: string,",
                "+  smartCase?: boolean,",
                "+|};",
                "+",
                " const logger = getLogger('nuclide-fuzzy-file-search-rpc');",
                "@@ -78,6 +82,6 @@ export async function doSearch(",
                "   query: string,",
                "-  queryRoot: ?NuclideUri,",
                "+  options?: FileSearchOptions = Object.freeze({}),",
                " ): Promise<Array<FileSearchResult>> {",
                "   const pathSet = await fileSearchForDirectory(directory);",
                "-  return pathSet.query(query, queryRoot);",
                "+  return pathSet.query(query, options);",
                " }",
                "diff --git a/pkg/nuclide-fuzzy-file-search-rpc/lib/process/PathSet.js b/pkg/nuclide-fuzzy-file-search-rpc/lib/process/PathSet.js",
                "index bcf4c80ef..1e94fef06 100644",
                "--- a/pkg/nuclide-fuzzy-file-search-rpc/lib/process/PathSet.js",
                "+++ b/pkg/nuclide-fuzzy-file-search-rpc/lib/process/PathSet.js",
                "@@ -11,4 +11,4 @@",
                "-import type {NuclideUri} from 'nuclide-commons/nuclideUri';",
                " import type {FileSearchResult} from '../rpc-types';",
                "+import type {FileSearchOptions} from './FileSearch';",
                "@@ -55,3 +55,3 @@ export class PathSet {",
                "     query: string,",
                "-    queryRoot: ?NuclideUri = undefined,",
                "+    options?: FileSearchOptions = Object.freeze({}),",
                "   ): Array<FileSearchResult> {",
                "@@ -73,2 +73,3 @@ export class PathSet {",
                "     let relQueryRoot;",
                "+    const {queryRoot, smartCase} = options;",
                "     if (queryRoot != null && nuclideUri.contains(basePath, queryRoot)) {",
                "@@ -84,2 +85,3 @@ export class PathSet {",
                "           rootPath: relQueryRoot,",
                "+          smartCase,",
                "         })",
                "diff --git a/pkg/nuclide-fuzzy-filename-provider/lib/FuzzyFileNameProvider.js b/pkg/nuclide-fuzzy-filename-provider/lib/FuzzyFileNameProvider.js",
                "index f5edad123..dcb9f310b 100644",
                "--- a/pkg/nuclide-fuzzy-filename-provider/lib/FuzzyFileNameProvider.js",
                "+++ b/pkg/nuclide-fuzzy-filename-provider/lib/FuzzyFileNameProvider.js",
                "@@ -16,2 +16,3 @@ import type {",
                "+import featureConfig from 'nuclide-commons-atom/feature-config';",
                " import nuclideUri from 'nuclide-commons/nuclideUri';",
                "@@ -57,2 +58,5 @@ export default ({",
                "       ignoredNames: getIgnoredNames(),",
                "+      smartCase: Boolean(",
                "+        featureConfig.get('nuclide-fuzzy-filename-provider.smartCase'),",
                "+      ),",
                "     });",
                "diff --git a/pkg/nuclide-fuzzy-filename-provider/package.json b/pkg/nuclide-fuzzy-filename-provider/package.json",
                "index 2c2a9d8aa..e7ff94644 100644",
                "--- a/pkg/nuclide-fuzzy-filename-provider/package.json",
                "+++ b/pkg/nuclide-fuzzy-filename-provider/package.json",
                "@@ -9,3 +9,17 @@",
                "     \"packageType\": \"Atom\",",
                "-    \"testRunner\": \"apm\"",
                "+    \"testRunner\": \"apm\",",
                "+    \"configMetadata\": {",
                "+      \"pathComponents\": [",
                "+        \"IDE\",",
                "+        \"Filename Search\"",
                "+      ]",
                "+    },",
                "+    \"config\": {",
                "+      \"smartCase\": {",
                "+        \"title\": \"Smart Case\",",
                "+        \"type\": \"boolean\",",
                "+        \"default\": false,",
                "+        \"description\": \"Enable case sensitive searches if the query contains a capital letter.\"",
                "+      }",
                "+    }",
                "   },"
            ],
            "changed_files": [
                "pkg/nuclide-fuzzy-file-search-rpc/lib/FileSearchProcess.js",
                "pkg/nuclide-fuzzy-file-search-rpc/lib/FuzzyFileSearchService.js",
                "pkg/nuclide-fuzzy-file-search-rpc/lib/process/FileSearch.js",
                "pkg/nuclide-fuzzy-file-search-rpc/lib/process/PathSet.js",
                "pkg/nuclide-fuzzy-filename-provider/lib/FuzzyFileNameProvider.js",
                "pkg/nuclide-fuzzy-filename-provider/package.json"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: provide",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "4919c13d987b66fbe29751690afacb21e77b8beb",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521423062,
            "hunks": 6,
            "message": "Move exclusive PID file to ~/.big-dig Summary: - Use `~/.big-dig/.big-dig.exclusive.pid` for the PID files. - Also, use `atom` and `vscode` as the exclusive tags. Reviewed By: bolinfest Differential Revision: D7314392 fbshipit-source-id: 86d8ab220c27940ac6fce27f43c929206e791d76",
            "diff": [
                "diff --git a/modules/big-dig/src/server/certificates.js b/modules/big-dig/src/server/certificates.js",
                "index 8c02366b9..b9455b560 100644",
                "--- a/modules/big-dig/src/server/certificates.js",
                "+++ b/modules/big-dig/src/server/certificates.js",
                "@@ -200,5 +200 @@ function generateEnvironmentForOpenSSLCalls(serverCommonName: string): Object {",
                " }",
                "-",
                "-export function getCertificateDir(): string {",
                "-  return nuclideUri.join(os.homedir(), '.certs');",
                "-}",
                "diff --git a/modules/big-dig/src/server/launchServer.js b/modules/big-dig/src/server/launchServer.js",
                "index e31f8d8c0..f1680f552 100644",
                "--- a/modules/big-dig/src/server/launchServer.js",
                "+++ b/modules/big-dig/src/server/launchServer.js",
                "@@ -18,3 +18,3 @@ import {psTree} from 'nuclide-commons/process';",
                " import os from 'os';",
                "-import {getCertificateDir} from './certificates';",
                "+import fsPromise from '../common/fs';",
                " import {launchServer} from './NuclideServer';",
                "@@ -90,4 +90,11 @@ async function handleLaunchParams(params: LauncherScriptParams) {",
                " async function enforceExclusive(exclusive: string): Promise<void> {",
                "-  const sharedCertsDir = getCertificateDir();",
                "-  const pidFile = nuclideUri.join(sharedCertsDir, `.bigdig.${exclusive}.pid`);",
                "+  const bigDigPath = nuclideUri.join(os.homedir(), '.big-dig');",
                "+  try {",
                "+    await fsPromise.mkdir(bigDigPath);",
                "+  } catch (err) {",
                "+    if (err.code !== 'EEXIST') {",
                "+      throw err;",
                "+    }",
                "+  }",
                "+  const pidFile = nuclideUri.join(bigDigPath, `.big-dig.${exclusive}.pid`);",
                "diff --git a/modules/big-dig/src/server/main.js b/modules/big-dig/src/server/main.js",
                "index 4609e4703..f858c0e4c 100644",
                "--- a/modules/big-dig/src/server/main.js",
                "+++ b/modules/big-dig/src/server/main.js",
                "@@ -19,3 +19,3 @@ import {getLogger} from 'log4js';",
                " import os from 'os';",
                "-import {generateCertificates, getCertificateDir} from './certificates';",
                "+import {generateCertificates} from './certificates';",
                "@@ -49,11 +49,2 @@ export async function generateCertificatesAndStartServer({",
                "-  const sharedCertsDir = getCertificateDir();",
                "-  try {",
                "-    await fs.mkdir(sharedCertsDir);",
                "-  } catch (error) {",
                "-    if (error.code !== 'EEXIST') {",
                "-      throw error;",
                "-    }",
                "-  }",
                "-",
                "   const paths = await generateCertificates(",
                "diff --git a/pkg/nuclide-remote-projects/lib/connectBigDigSshHandshake.js b/pkg/nuclide-remote-projects/lib/connectBigDigSshHandshake.js",
                "index e47ed45c8..0a1cc04e5 100644",
                "--- a/pkg/nuclide-remote-projects/lib/connectBigDigSshHandshake.js",
                "+++ b/pkg/nuclide-remote-projects/lib/connectBigDigSshHandshake.js",
                "@@ -108,3 +108,3 @@ export default function connectBigDigSshHandshake(",
                "   // We'll only allow one Nuclide server per user - but you can override this.",
                "-  let exclusive = 'nuclide';",
                "+  let exclusive = 'atom';",
                "   // big-dig doesn't parse extra arguments."
            ],
            "changed_files": [
                "modules/big-dig/src/server/certificates.js",
                "modules/big-dig/src/server/launchServer.js",
                "modules/big-dig/src/server/main.js",
                "pkg/nuclide-remote-projects/lib/connectBigDigSshHandshake.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "88740d557ab407733ebe4c2d1bdbe47ee11fbb84",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521124298,
            "hunks": 1,
            "message": "Backport CursorKind.VISIBILITY_ATTR from upstream cindex.py Summary: subj, backported from https://github.com/llvm-mirror/clang/blob/master/bindings/python/clang/cindex.py#L1327 Without this addition, I run into exception 'ValueError: Unknown cursor kind 417' when parsing class or struct definitions. Please note though that I'm currently using this branch of clang.cindex not for Nuclide, but for some custom codegeneration script in our project. Eventually we will either add our separate copy of clang.cindex to the repo, or move this one to the top-level third-party code. Please let me know if you think that we shouldn't update the Nuclide version of cindex here but actually do the fork immediately Reviewed By: hansonw Differential Revision: D7217298 fbshipit-source-id: 7522ff2073c545c816f15aafa35b386b17b4dd88",
            "diff": [
                "diff --git a/pkg/nuclide-clang-rpc/VendorLib/clang/cindex.py b/pkg/nuclide-clang-rpc/VendorLib/clang/cindex.py",
                "index 68f7e48fc..e3cd8ac8a 100644",
                "--- a/pkg/nuclide-clang-rpc/VendorLib/clang/cindex.py",
                "+++ b/pkg/nuclide-clang-rpc/VendorLib/clang/cindex.py",
                "@@ -1090,2 +1090,4 @@ CursorKind.CUDASHARED_ATTR = CursorKind(416)",
                "+CursorKind.VISIBILITY_ATTR = CursorKind(417)",
                "+",
                " ###"
            ],
            "changed_files": [
                "pkg/nuclide-clang-rpc/VendorLib/clang/cindex.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "fbfcffca69b6dee1067baed4bda03670cc44fed9",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521824388,
            "hunks": 20,
            "message": "clean up VSP init and handle SIGINT Summary: Properly handle the VSP launch model, and provide a 'run' command to start exection after breakpoints are set. Wire SIGINT (ctrl+C) to sending a break command to the VSP. Reviewed By: mostafaeweda Differential Revision: D7357920 fbshipit-source-id: 0902fb769db08f73b29dc6efbe4fa14dcfa95e2c",
            "diff": [
                "diff --git a/modules/nuclide-debugger-cli/lib/CommandLine.js b/modules/nuclide-debugger-cli/lib/CommandLine.js",
                "index f1ae6bc9e..17c70b47c 100644",
                "--- a/modules/nuclide-debugger-cli/lib/CommandLine.js",
                "+++ b/modules/nuclide-debugger-cli/lib/CommandLine.js",
                "@@ -12,5 +12,7 @@",
                "+import type {ConsoleIO} from './ConsoleIO';",
                "+",
                " import readline from 'readline';",
                " import CommandDispatcher from './CommandDispatcher';",
                "-import type {ConsoleIO} from './ConsoleIO';",
                "+import {Observable, Subject} from 'rxjs';",
                "@@ -23,2 +25,4 @@ export default class CommandLine implements ConsoleIO {",
                "+  _onSIGINT: Subject<void> = new Subject();",
                "+",
                "   constructor(dispatcher: CommandDispatcher) {",
                "@@ -33,2 +37,6 @@ export default class CommandLine implements ConsoleIO {",
                "+  observerSIGINT(): Observable<void> {",
                "+    return this._onSIGINT.asObservable();",
                "+  }",
                "+",
                "   // $TODO handle",
                "@@ -65,2 +73,3 @@ export default class CommandLine implements ConsoleIO {",
                "         .on('line', this._executeCommand.bind(this))",
                "+        .on('SIGINT', _ => this._onSIGINT.next())",
                "         .on('close', resolve);",
                "diff --git a/modules/nuclide-debugger-cli/lib/Debugger.js b/modules/nuclide-debugger-cli/lib/Debugger.js",
                "index 52a24d230..b3fa12a00 100644",
                "--- a/modules/nuclide-debugger-cli/lib/Debugger.js",
                "+++ b/modules/nuclide-debugger-cli/lib/Debugger.js",
                "@@ -46,2 +46,8 @@ import VsDebugSession from 'nuclide-debugger-common/VsDebugSession';",
                "+type SessionState =",
                "+  | 'INITIALIZING' // waiting for initialized event from adapter",
                "+  | 'CONFIGURING' // waiting for user to issue 'run' command after setting initial breakpoints",
                "+  | 'RUNNING' // program is running",
                "+  | 'STOPPED'; // program has hit a breakpoint",
                "+",
                " export default class Debugger implements DebuggerInterface {",
                "@@ -55,3 +61,3 @@ export default class Debugger implements DebuggerInterface {",
                "   _terminated: boolean = false;",
                "-  _launching: boolean;",
                "+  _state: SessionState = 'INITIALIZING';",
                "   _breakpoints: BreakpointCollection = new BreakpointCollection();",
                "@@ -81,2 +87,98 @@ export default class Debugger implements DebuggerInterface {",
                "+  // launch is for launching a process from scratch when we need a new",
                "+  // session",
                "+  launch(adapter: ParsedVSAdapter): Promise<void> {",
                "+    this._adapter = adapter;",
                "+    this._breakpoints = new BreakpointCollection();",
                "+    return this.relaunch();",
                "+  }",
                "+",
                "+  // relaunch is for when we want to restart the current process",
                "+  // without tearing down the session. some adapters can do this",
                "+  // automatically",
                "+  async relaunch(): Promise<void> {",
                "+    const adapter = this._adapter;",
                "+    if (adapter == null) {",
                "+      throw new Error('There is nothing to relaunch.');",
                "+    }",
                "+",
                "+    this._state = 'INITIALIZING';",
                "+    await this.closeSession();",
                "+    await this.createSession(adapter.adapterInfo);",
                "+",
                "+    switch (adapter.action) {",
                "+      case 'attach':",
                "+        const attachArgs = adapter.attachArgs;",
                "+        invariant(attachArgs != null);",
                "+        await this._ensureDebugSession(true).attach(attachArgs);",
                "+        break;",
                "+",
                "+      case 'launch':",
                "+        const launchArgs = adapter.launchArgs;",
                "+        invariant(launchArgs != null);",
                "+        await this._ensureDebugSession(true).launch(launchArgs);",
                "+        break;",
                "+    }",
                "+  }",
                "+",
                "+  async _onInitialized(): Promise<void> {",
                "+    const adapter = this._adapter;",
                "+    invariant(adapter != null);",
                "+",
                "+    this._state = 'CONFIGURING';",
                "+",
                "+    // if we are attaching, then the process is already running, so",
                "+    // just proceed to configurationDone",
                "+    if (adapter.action === 'attach') {",
                "+      return this._configurationDone();",
                "+    }",
                "+",
                "+    // for launching, we now open up the command prompt so the user can set",
                "+    // breakpoints",
                "+    this._console.startInput();",
                "+  }",
                "+",
                "+  async _configurationDone(): Promise<void> {",
                "+    const session = this._ensureDebugSession(true);",
                "+    this._state = 'RUNNING';",
                "+",
                "+    await this._resetAllBreakpoints();",
                "+",
                "+    // this needs to be sent last for adapters that don't support configurationDone",
                "+    await session.setExceptionBreakpoints({filters: []});",
                "+",
                "+    invariant(this._capabilities != null);",
                "+    if (this._capabilities.supportsConfigurationDoneRequest) {",
                "+      await session.configurationDone();",
                "+    }",
                "+",
                "+    this._cacheThreads();",
                "+    this._console.stopInput();",
                "+  }",
                "+",
                "+  async run(): Promise<void> {",
                "+    const adapter = this._adapter;",
                "+",
                "+    if (",
                "+      this._state !== 'CONFIGURING' ||",
                "+      adapter == null ||",
                "+      adapter.action !== 'launch'",
                "+    ) {",
                "+      throw new Error(",
                "+        'There is nothing to run, or already attached to a process.',",
                "+      );",
                "+    }",
                "+",
                "+    return this._configurationDone();",
                "+  }",
                "+",
                "+  breakInto(): void {",
                "+    const threadId = [...this._threads.keys()][0];",
                "+    if (threadId == null) {",
                "+      return;",
                "+    }",
                "+",
                "+    this._ensureDebugSession().pause({threadId});",
                "+  }",
                "+",
                "   getThreads(): Map<number, Thread> {",
                "@@ -200,9 +302,13 @@ export default class Debugger implements DebuggerInterface {",
                "-    const breakpoint = await this._setSourceBreakpointsForPath(",
                "-      session,",
                "-      path,",
                "-      index,",
                "-    );",
                "+    let message = 'Breakpoint pending until program starts.';",
                "+",
                "+    if (this._state !== 'CONFIGURING') {",
                "+      const breakpoint = await this._setSourceBreakpointsForPath(",
                "+        session,",
                "+        path,",
                "+        index,",
                "+      );",
                "+      message = breakpoint == null ? null : breakpoint.message;",
                "+    }",
                "-    const message = breakpoint == null ? null : breakpoint.message;",
                "     return {index, message};",
                "@@ -348,58 +454,2 @@ export default class Debugger implements DebuggerInterface {",
                "-  // launch is for launching a process from scratch when we need a new",
                "-  // session",
                "-  launch(adapter: ParsedVSAdapter): Promise<void> {",
                "-    this._adapter = adapter;",
                "-    this._breakpoints = new BreakpointCollection();",
                "-    return this.relaunch();",
                "-  }",
                "-",
                "-  // relaunch is for when we want to restart the current process",
                "-  // without tearing down the session. some adapters can do this",
                "-  // automatically",
                "-  async relaunch(): Promise<void> {",
                "-    const adapter = this._adapter;",
                "-    if (adapter == null) {",
                "-      throw new Error('There is nothing to relaunch.');",
                "-    }",
                "-",
                "-    this._launching = true;",
                "-    await this.closeSession();",
                "-    await this.createSession(adapter.adapterInfo);",
                "-",
                "-    switch (adapter.action) {",
                "-      case 'attach':",
                "-        const attachArgs = adapter.attachArgs;",
                "-        invariant(attachArgs != null);",
                "-        await this._ensureDebugSession(true).attach(attachArgs);",
                "-        await this._cacheThreads();",
                "-        this._launching = false;",
                "-        break;",
                "-",
                "-      case 'launch':",
                "-        // If we are launching, that will happen after the user issues the 'run'",
                "-        // command.",
                "-        this._console.startInput();",
                "-        break;",
                "-    }",
                "-  }",
                "-",
                "-  async run(): Promise<void> {",
                "-    const adapter = this._adapter;",
                "-",
                "-    if (!this._launching || adapter == null || adapter.action !== 'launch') {",
                "-      throw new Error(",
                "-        'There is nothing to run, or already attached to a process.',",
                "-      );",
                "-    }",
                "-",
                "-    const launchArgs = adapter.launchArgs;",
                "-    invariant(launchArgs != null);",
                "-",
                "-    await this._ensureDebugSession(true).launch(launchArgs);",
                "-",
                "-    await this._cacheThreads();",
                "-    this._launching = false;",
                "-  }",
                "-",
                "   async evaluateExpression(",
                "@@ -442,19 +492,2 @@ export default class Debugger implements DebuggerInterface {",
                "-  async _finishInitialization(): Promise<void> {",
                "-    const session = this._ensureDebugSession();",
                "-",
                "-    await session.setExceptionBreakpoints({filters: []});",
                "-    await this._resetAllBreakpoints();",
                "-",
                "-    invariant(this._capabilities != null);",
                "-    if (this._capabilities.supportsConfigurationDoneRequest) {",
                "-      await session.configurationDone();",
                "-    }",
                "-",
                "-    // On attach, we won't get a stop event, so start the console here.",
                "-    if (this._adapter != null && this._adapter.action === 'attach') {",
                "-      this._console.startInput();",
                "-    }",
                "-  }",
                "-",
                "   async _resetAllBreakpoints(): Promise<void> {",
                "@@ -502,3 +535,3 @@ export default class Debugger implements DebuggerInterface {",
                "       try {",
                "-        this._finishInitialization();",
                "+        this._onInitialized();",
                "       } catch (error) {",
                "@@ -600,3 +633,12 @@ export default class Debugger implements DebuggerInterface {",
                "     );",
                "-    this.closeSession();",
                "+",
                "+    const adapter = this._adapter;",
                "+    invariant(adapter != null);",
                "+",
                "+    if (adapter.action === 'launch') {",
                "+      this.relaunch();",
                "+      return;",
                "+    }",
                "+",
                "+    process.exit(0);",
                "   }",
                "@@ -605,8 +647,17 @@ export default class Debugger implements DebuggerInterface {",
                "     // Some adapters will send multiple terminated events.",
                "-    if (this._terminated || this._launching) {",
                "+    if (this._terminated || this._state !== 'RUNNING') {",
                "       return;",
                "     }",
                "+",
                "     this._console.outputLine('The target has exited.');",
                "-    this.closeSession();",
                "-    this._console.startInput();",
                "+",
                "+    const adapter = this._adapter;",
                "+    invariant(adapter != null);",
                "+",
                "+    if (adapter.action === 'launch') {",
                "+      this.relaunch();",
                "+      return;",
                "+    }",
                "+",
                "+    process.exit(0);",
                "   }",
                "@@ -700,6 +751,10 @@ export default class Debugger implements DebuggerInterface {",
                "-    if (this._launching && !allowBeforeLaunch) {",
                "-      throw new Error(",
                "+    if (",
                "+      (this._state === 'INITIALIZING' || this._state === 'CONFIGURING') &&",
                "+      !allowBeforeLaunch",
                "+    ) {",
                "+      const err = new Error(",
                "         \"The program is not yet running (use 'run' to start it).\",",
                "       );",
                "+      throw err;",
                "     }",
                "diff --git a/modules/nuclide-debugger-cli/lib/main.js b/modules/nuclide-debugger-cli/lib/main.js",
                "index 52b1a9988..4191ca945 100755",
                "--- a/modules/nuclide-debugger-cli/lib/main.js",
                "+++ b/modules/nuclide-debugger-cli/lib/main.js",
                "@@ -106,2 +106,6 @@ async function main(): Promise<void> {",
                "+    cli.observerSIGINT().subscribe(_ => {",
                "+      debuggerInstance.breakInto();",
                "+    });",
                "+",
                "     await cli.run();",
                "diff --git a/modules/nuclide-debugger-cli/package.json b/modules/nuclide-debugger-cli/package.json",
                "index 61c9acb20..b70c5127b 100644",
                "--- a/modules/nuclide-debugger-cli/package.json",
                "+++ b/modules/nuclide-debugger-cli/package.json",
                "@@ -22,2 +22,3 @@",
                "     \"nullthrows\": \"1.0.0\",",
                "+    \"rxjs\": \"5.5.5\",",
                "     \"v8-compile-cache\": \"1.1.0\","
            ],
            "changed_files": [
                "modules/nuclide-debugger-cli/lib/CommandLine.js",
                "modules/nuclide-debugger-cli/lib/Debugger.js",
                "modules/nuclide-debugger-cli/lib/main.js",
                "modules/nuclide-debugger-cli/package.json"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: provide",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "c458225292b1090afe23ebc2821b163b12376d8c",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521055154,
            "hunks": 4,
            "message": "Check for existence of .android/avd before calling watchman Summary: Check for existence of .android/avd before calling watchman. Reviewed By: stepanhruda Differential Revision: D7245643 fbshipit-source-id: b7f09349c115349a55f2befc60ebffade9c233ea",
            "diff": [
                "diff --git a/pkg/nuclide-device-panel-android/lib/providers/AvdComponentProvider.js b/pkg/nuclide-device-panel-android/lib/providers/AvdComponentProvider.js",
                "index a400dd815..59542004c 100644",
                "--- a/pkg/nuclide-device-panel-android/lib/providers/AvdComponentProvider.js",
                "+++ b/pkg/nuclide-device-panel-android/lib/providers/AvdComponentProvider.js",
                "@@ -79,24 +79,31 @@ export class AvdComponentProvider implements DeviceTypeComponentProvider {",
                "   _watchAvdDirectory(): IDisposable {",
                "-    const watchmanClient = new WatchmanClient();",
                "+    const watchAvdDirectory: Promise<() => mixed> = (async () => {",
                "+      const avdDirectoryExists = await fsPromise.exists(AVD_DIRECTORY);",
                "+      if (!avdDirectoryExists) {",
                "+        return () => {};",
                "+      }",
                "-    // Create a .watchmanconfig so Watchman recognizes the AVD directory as a",
                "-    // project root.",
                "-    const createWatchmanConfig = fsPromise.writeFile(AVD_WATCHMAN_CONFIG, '{}');",
                "+      // Create a .watchmanconfig so Watchman recognizes the AVD directory as a",
                "+      // project root.",
                "+      await fsPromise.writeFile(AVD_WATCHMAN_CONFIG, '{}');",
                "-    createWatchmanConfig",
                "-      .then(() =>",
                "-        watchmanClient.watchDirectoryRecursive(AVD_DIRECTORY, AVD_DIRECTORY, {",
                "+      const watchmanClient = new WatchmanClient();",
                "+      const watchmanSubscription = await watchmanClient.watchDirectoryRecursive(",
                "+        AVD_DIRECTORY,",
                "+        AVD_DIRECTORY,",
                "+        {",
                "           expression: ['match', '*.avd'],",
                "-        }),",
                "-      )",
                "-      .then(subscription => {",
                "-        subscription.on('change', () => {",
                "-          this._refreshAvds();",
                "-        });",
                "+        },",
                "+      );",
                "+      watchmanSubscription.on('change', () => {",
                "+        this._refreshAvds();",
                "       });",
                "+      return () => fsPromise.unlink(AVD_WATCHMAN_CONFIG).catch(() => {});",
                "+    })();",
                "+",
                "     return {",
                "       dispose: () => {",
                "-        createWatchmanConfig.then(() => {",
                "-          fsPromise.unlink(AVD_WATCHMAN_CONFIG).catch(() => {});",
                "+        watchAvdDirectory.then(dispose => {",
                "+          dispose();",
                "         });"
            ],
            "changed_files": [
                "pkg/nuclide-device-panel-android/lib/providers/AvdComponentProvider.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: provide",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "b4a7fd6ad3fe68fb00fa8e1d642b8c6bed4a56f2",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521141871,
            "hunks": 16,
            "message": "Create Atom reporter Summary: This creates an Atom reporter for running Jest suites. Note that this does not use Less and uses inline styles. This is because we run outside the typical Atom context, meaning we would have to bring the less runtime with us. This was easier and allowed me to keep the frontend concise and in one file. Reviewed By: matthewwithanm Differential Revision: D7215900 fbshipit-source-id: 16480f882cc1a3f2c008ff664513dda7206113e1",
            "diff": [
                "diff --git a/modules/nuclide-commons/Model.js b/modules/nuclide-commons/Model.js",
                "index 6a2d0a52a..ff3a12e70 100644",
                "--- a/modules/nuclide-commons/Model.js",
                "+++ b/modules/nuclide-commons/Model.js",
                "@@ -33,3 +33,3 @@ import UniversalDisposable from './UniversalDisposable';",
                "  *         const {count} = this._model.state;",
                "- *         this._model.update({count: count + 1});",
                "+ *         this._model.setState({count: count + 1});",
                "  *       }",
                "@@ -46,3 +46,3 @@ import UniversalDisposable from './UniversalDisposable';",
                "  *         const {count} = model.state;",
                "- *         model.update({count: count + 1})",
                "+ *         model.setState({count: count + 1})",
                "  *       },",
                "diff --git a/modules/nuclide-jest/atom-reporter.js b/modules/nuclide-jest/atom-reporter.js",
                "new file mode 100644",
                "index 000000000..6809ee30a",
                "--- /dev/null",
                "+++ b/modules/nuclide-jest/atom-reporter.js",
                "@@ -0,0 +1,62 @@",
                "+/**",
                "+ * Copyright (c) 2017-present, Facebook, Inc.",
                "+ * All rights reserved.",
                "+ *",
                "+ * This source code is licensed under the BSD-style license found in the",
                "+ * LICENSE file in the root directory of this source tree. An additional grant",
                "+ * of patent rights can be found in the PATENTS file in the same directory.",
                "+ *",
                "+ * @flow",
                "+ * @format",
                "+ */",
                "+",
                "+import type {TestResult, AggregatedResults} from './types';",
                "+",
                "+import UniversalDisposable from 'nuclide-commons/UniversalDisposable';",
                "+import React from 'react';",
                "+import ReactDOM from 'react-dom';",
                "+import nullthrows from 'nullthrows';",
                "+",
                "+import Model from 'nuclide-commons/Model';",
                "+import Jest from './frontend/Jest';",
                "+",
                "+const div = document.createElement('div');",
                "+nullthrows(document.body).appendChild(div);",
                "+",
                "+type GlobalConfig = Object;",
                "+",
                "+// Jest seems to be particular about this being a commonjs export",
                "+// eslint-disable-next-line rulesdir/no-commonjs",
                "+module.exports = class AtomReporter {",
                "+  _modelSubscription: UniversalDisposable;",
                "+  _globalConfig: Object;",
                "+  _options: Object;",
                "+  model: Model<{",
                "+    results: ?AggregatedResults,",
                "+  }>;",
                "+",
                "+  constructor(globalConfig: GlobalConfig, options: Object) {",
                "+    this._globalConfig = globalConfig;",
                "+    this._options = options;",
                "+",
                "+    this.model = new Model({results: null});",
                "+    this._modelSubscription = new UniversalDisposable(",
                "+      this.model.subscribe(state => {",
                "+        ReactDOM.render(<Jest results={state.results} />, div);",
                "+      }),",
                "+    );",
                "+  }",
                "+",
                "+  onTestResult(",
                "+    config: GlobalConfig,",
                "+    result: TestResult,",
                "+    results: AggregatedResults,",
                "+  ) {",
                "+    this.model.setState({results});",
                "+  }",
                "+",
                "+  onRunComplete(contexts: mixed, results: AggregatedResults) {",
                "+    this.model.setState({results});",
                "+    this._modelSubscription.dispose();",
                "+  }",
                "+};",
                "diff --git a/modules/nuclide-jest/atom-runner.js b/modules/nuclide-jest/atom-runner.js",
                "index 813d5cb67..11e6031dd 100644",
                "--- a/modules/nuclide-jest/atom-runner.js",
                "+++ b/modules/nuclide-jest/atom-runner.js",
                "@@ -34,22 +34,10 @@ invariant(ipcRenderer != null);",
                "-// Patch `console` to output through the main process.",
                "-global.console = new Console(",
                "-  /* stdout */ {",
                "-    write(chunk) {",
                "-      ipcRenderer.send('write-to-stdout', chunk);",
                "-    },",
                "-  },",
                "-  /* stderr */ {",
                "-    write(chunk) {",
                "-      ipcRenderer.send('write-to-stderr', chunk);",
                "-    },",
                "-  }",
                "-);",
                "-",
                " module.exports = function(params) {",
                "+  const firstTestPath = params.testPaths[0];",
                "+  const cwd = path.dirname(getPackageFile(firstTestPath));",
                "   // It's assumed that all of the tests belong to the same package.",
                "-  const pkg = getPackage(params.testPaths[0]);",
                "+  const pkg = getPackage(firstTestPath);",
                "   if (pkg == null) {",
                "     throw new Error(",
                "-      `Couldn't find a parent \"package.json\" for ${params.testPaths[0]}`",
                "+      `Couldn't find a parent \"package.json\" for ${firstTestPath}`",
                "     );",
                "@@ -65,2 +53,22 @@ module.exports = function(params) {",
                "+  if (params.headless) {",
                "+    // Patch `console` to output through the main process.",
                "+    global.console = new Console(",
                "+      /* stdout */ {",
                "+        write(chunk) {",
                "+          ipcRenderer.send('write-to-stdout', chunk);",
                "+        },",
                "+      },",
                "+      /* stderr */ {",
                "+        write(chunk) {",
                "+          ipcRenderer.send('write-to-stderr', chunk);",
                "+        },",
                "+      }",
                "+    );",
                "+  } else {",
                "+    try {",
                "+      // eslint-disable-next-line rulesdir/modules-dependencies",
                "+      require('nuclide-node-transpiler');",
                "+    } catch (e) {}",
                "+  }",
                "   return jestCLI.runCLI(",
                "@@ -68,8 +76,16 @@ module.exports = function(params) {",
                "       outputFile: params.logFile,",
                "-      _: params.testPaths,",
                "+      _: params.testPaths.map(testPath => fs.realpathSync(testPath)),",
                "       cache: false,",
                "       env: 'nuclide-jest/AtomJestEnvironment.js',",
                "-      config: JSON.stringify(config),",
                "+      config: JSON.stringify(Object.assign(",
                "+        {},",
                "+        config,",
                "+        {",
                "+          reporters: params.headless ?",
                "+            ['default'] :",
                "+            [path.join(__dirname, 'atom-reporter.js')],",
                "+        }",
                "+      )),",
                "     },",
                "-    [process.cwd()]",
                "+    [cwd]",
                "   ).then(response => response.results.success ? 0 : 1);",
                "@@ -78,2 +94,6 @@ module.exports = function(params) {",
                " function getPackage(start) {",
                "+  return JSON.parse(fs.readFileSync(getPackageFile(start), 'utf8'));",
                "+}",
                "+",
                "+function getPackageFile(start) {",
                "   let current = path.resolve(start);",
                "@@ -82,3 +102,3 @@ function getPackage(start) {",
                "     if (fs.existsSync(filename)) {",
                "-      return JSON.parse(fs.readFileSync(filename, 'utf8'));",
                "+      return filename;",
                "     } else {",
                "diff --git a/modules/nuclide-jest/frontend/Jest.js b/modules/nuclide-jest/frontend/Jest.js",
                "new file mode 100644",
                "index 000000000..b7b3d16d1",
                "--- /dev/null",
                "+++ b/modules/nuclide-jest/frontend/Jest.js",
                "@@ -0,0 +1,167 @@",
                "+/**",
                "+ * Copyright (c) 2017-present, Facebook, Inc.",
                "+ * All rights reserved.",
                "+ *",
                "+ * This source code is licensed under the BSD-style license found in the",
                "+ * LICENSE file in the root directory of this source tree. An additional grant",
                "+ * of patent rights can be found in the PATENTS file in the same directory.",
                "+ *",
                "+ * @flow",
                "+ * @format",
                "+ */",
                "+",
                "+import type {AggregatedResults, TestResult, AssertionResult} from '../types';",
                "+",
                "+import React from 'react';",
                "+",
                "+import {Icon} from 'nuclide-commons-ui/Icon';",
                "+",
                "+type Props = {",
                "+  results: ?AggregatedResults,",
                "+};",
                "+",
                "+export default class Jest extends React.Component<Props> {",
                "+  render() {",
                "+    const {results} = this.props;",
                "+    if (results == null) {",
                "+      return null;",
                "+    }",
                "+",
                "+    const success = results.numFailedTests === 0;",
                "+",
                "+    return (",
                "+      <Body>",
                "+        <Header success={success}>",
                "+          <HeaderLeft>{success ? 'Passed!' : 'Failed :('}</HeaderLeft>",
                "+          <div>",
                "+            {results.numPassedTests} of {results.numTotalTests} passed",
                "+          </div>",
                "+        </Header>",
                "+        <Main>",
                "+          <List>",
                "+            {results.testResults.map(result => (",
                "+              <ResultItem key={result.testFilePath} result={result} />",
                "+            ))}",
                "+          </List>",
                "+          <details style={{paddingLeft: 40}}>",
                "+            <summary>Raw Jest JSON Output (debug)</summary>",
                "+            <pre>{JSON.stringify(results, null, 2)}</pre>",
                "+          </details>",
                "+        </Main>",
                "+      </Body>",
                "+    );",
                "+  }",
                "+}",
                "+",
                "+type ResultProps = {",
                "+  result: TestResult,",
                "+};",
                "+function ResultItem(props: ResultProps) {",
                "+  const {result} = props;",
                "+  return (",
                "+    <li>",
                "+      <span>{result.testFilePath}</span>",
                "+      {result.failureMessage == null ? null : (",
                "+        <pre>{result.failureMessage}</pre>",
                "+      )}",
                "+      <details open={!result.failureMessage}>",
                "+        <List>",
                "+          {result.testResults.map(test => (",
                "+            <SingleTestItem key={test.fullName} test={test} />",
                "+          ))}",
                "+        </List>",
                "+      </details>",
                "+    </li>",
                "+  );",
                "+}",
                "+",
                "+type SingleTestProps = {",
                "+  test: AssertionResult,",
                "+};",
                "+function SingleTestItem(props: SingleTestProps) {",
                "+  const {test} = props;",
                "+  return (",
                "+    <li>",
                "+      <Icon icon={statusToIcon[test.status]} />",
                "+      <span>{test.title}</span>",
                "+      {test.failureMessages.length > 0 ? (",
                "+        <List>",
                "+          {test.failureMessages.map(message => {",
                "+            return (",
                "+              <li key={message}>",
                "+                <pre>{message}</pre>",
                "+              </li>",
                "+            );",
                "+          })}",
                "+        </List>",
                "+      ) : null}",
                "+    </li>",
                "+  );",
                "+}",
                "+",
                "+function Body(props) {",
                "+  return (",
                "+    <div",
                "+      style={{",
                "+        display: 'flex',",
                "+        flexDirection: 'column',",
                "+        height: '100vh',",
                "+      }}",
                "+      {...props}",
                "+    />",
                "+  );",
                "+}",
                "+",
                "+function Header(props) {",
                "+  const {success, ...restProps} = props;",
                "+  return (",
                "+    <header",
                "+      style={{",
                "+        alignItems: 'center',",
                "+        display: 'flex',",
                "+        height: 48,",
                "+        backgroundColor: success ? 'green' : 'red',",
                "+        color: 'white',",
                "+        flex: '0 0 48',",
                "+        padding: 20,",
                "+      }}",
                "+      {...restProps}",
                "+    />",
                "+  );",
                "+}",
                "+",
                "+const HeaderLeft = function(props) {",
                "+  return <div style={{flex: 1}} {...props} />;",
                "+};",
                "+",
                "+const Main = function(props) {",
                "+  return (",
                "+    <div",
                "+      style={{",
                "+        flex: 1,",
                "+        overflow: 'auto',",
                "+        padding: '40px 0',",
                "+      }}",
                "+      {...props}",
                "+    />",
                "+  );",
                "+};",
                "+",
                "+const List = function(props) {",
                "+  return (",
                "+    <ol",
                "+      style={{",
                "+        listStyle: 'none',",
                "+        paddingLeft: 40,",
                "+      }}",
                "+      {...props}",
                "+    />",
                "+  );",
                "+};",
                "+",
                "+const statusToIcon = {",
                "+  passed: 'check',",
                "+  failed: 'x',",
                "+  pending: 'dash',",
                "+  skipped: 'dash',",
                "+};",
                "diff --git a/modules/nuclide-jest/package.json b/modules/nuclide-jest/package.json",
                "index 5fd526f35..1197e7e08 100644",
                "--- a/modules/nuclide-jest/package.json",
                "+++ b/modules/nuclide-jest/package.json",
                "@@ -12,3 +12,8 @@",
                "     \"jest-cli\": \"22.4.2\",",
                "-    \"jest-environment-node\": \"22.4.1\"",
                "+    \"jest-environment-node\": \"22.4.1\",",
                "+    \"nuclide-commons\": \"0.5.1-dev\",",
                "+    \"nuclide-commons-ui\": \"0.5.1-dev\",",
                "+    \"nullthrows\": \"1.0.0\",",
                "+    \"react\": \"16.2.0\",",
                "+    \"react-dom\": \"16.2.0\"",
                "   }",
                "diff --git a/modules/nuclide-jest/types.js b/modules/nuclide-jest/types.js",
                "new file mode 100644",
                "index 000000000..83813c334",
                "--- /dev/null",
                "+++ b/modules/nuclide-jest/types.js",
                "@@ -0,0 +1,141 @@",
                "+/**",
                "+ * Copyright (c) 2017-present, Facebook, Inc.",
                "+ * All rights reserved.",
                "+ *",
                "+ * This source code is licensed under the BSD-style license found in the",
                "+ * LICENSE file in the root directory of this source tree. An additional grant",
                "+ * of patent rights can be found in the PATENTS file in the same directory.",
                "+ *",
                "+ * @flow",
                "+ * @format",
                "+ */",
                "+",
                "+type ConsoleBuffer = Array<LogEntry>;",
                "+",
                "+type LogMessage = string;",
                "+type LogEntry = {|",
                "+  message: LogMessage,",
                "+  origin: string,",
                "+  type: LogType,",
                "+|};",
                "+",
                "+type LogType =",
                "+  | 'assert'",
                "+  | 'count'",
                "+  | 'debug'",
                "+  | 'dir'",
                "+  | 'dirxml'",
                "+  | 'error'",
                "+  | 'group'",
                "+  | 'groupCollapsed'",
                "+  | 'info'",
                "+  | 'log'",
                "+  | 'time'",
                "+  | 'warn';",
                "+",
                "+type SerializableError = {|",
                "+  code?: mixed,",
                "+  message: string,",
                "+  stack: ?string,",
                "+  type?: string,",
                "+|};",
                "+",
                "+type RawFileCoverage = {|",
                "+  path: string,",
                "+  s: {[statementId: number]: number},",
                "+  b: {[branchId: number]: number},",
                "+  f: {[functionId: number]: number},",
                "+  l: {[lineId: number]: number},",
                "+  fnMap: {[functionId: number]: any},",
                "+  statementMap: {[statementId: number]: any},",
                "+  branchMap: {[branchId: number]: any},",
                "+  inputSourceMap?: Object,",
                "+|};",
                "+",
                "+type RawCoverage = {",
                "+  [filePath: string]: RawFileCoverage,",
                "+};",
                "+",
                "+type Bytes = number;",
                "+type Milliseconds = number;",
                "+",
                "+export type TestResult = {|",
                "+  console: ?ConsoleBuffer,",
                "+  coverage?: RawCoverage,",
                "+  displayName: ?string,",
                "+  failureMessage: ?string,",
                "+  leaks: boolean,",
                "+  memoryUsage?: Bytes,",
                "+  numFailingTests: number,",
                "+  numPassingTests: number,",
                "+  numPendingTests: number,",
                "+  perfStats: {|",
                "+    end: Milliseconds,",
                "+    start: Milliseconds,",
                "+  |},",
                "+  skipped: boolean,",
                "+  snapshot: {|",
                "+    added: number,",
                "+    fileDeleted: boolean,",
                "+    matched: number,",
                "+    unchecked: number,",
                "+    uncheckedKeys: Array<string>,",
                "+    unmatched: number,",
                "+    updated: number,",
                "+  |},",
                "+  sourceMaps: {[sourcePath: string]: string},",
                "+  testExecError?: SerializableError,",
                "+  testFilePath: string,",
                "+  testResults: Array<AssertionResult>,",
                "+|};",
                "+",
                "+type Callsite = {|",
                "+  column: number,",
                "+  line: number,",
                "+|};",
                "+",
                "+type Status = 'passed' | 'failed' | 'skipped' | 'pending';",
                "+",
                "+export type AssertionResult = {|",
                "+  ancestorTitles: Array<string>,",
                "+  duration?: ?Milliseconds,",
                "+  failureMessages: Array<string>,",
                "+  fullName: string,",
                "+  location: ?Callsite,",
                "+  numPassingAsserts: number,",
                "+  status: Status,",
                "+  title: string,",
                "+|};",
                "+",
                "+export type AggregatedResults = {|",
                "+  numFailedTests: number,",
                "+  numFailedTestSuites: number,",
                "+  numPassedTests: number,",
                "+  numPassedTestSuites: number,",
                "+  numPendingTests: number,",
                "+  numPendingTestSuites: number,",
                "+  numRuntimeErrorTestSuites: number,",
                "+  numTotalTests: number,",
                "+  numTotalTestSuites: number,",
                "+  snapshot: SnapshotSummary,",
                "+  startTime: number,",
                "+  success: boolean,",
                "+  testResults: Array<TestResult>,",
                "+  wasInterrupted: boolean,",
                "+|};",
                "+",
                "+type SnapshotSummary = {|",
                "+  added: number,",
                "+  didUpdate: boolean,",
                "+  failure: boolean,",
                "+  filesAdded: number,",
                "+  filesRemoved: number,",
                "+  filesUnmatched: number,",
                "+  filesUpdated: number,",
                "+  matched: number,",
                "+  total: number,",
                "+  unchecked: number,",
                "+  uncheckedKeys: Array<string>,",
                "+  unmatched: number,",
                "+  updated: number,",
                "+|};"
            ],
            "changed_files": [
                "modules/nuclide-commons/Model.js",
                "modules/nuclide-jest/atom-reporter.js",
                "modules/nuclide-jest/atom-runner.js",
                "modules/nuclide-jest/frontend/Jest.js",
                "modules/nuclide-jest/package.json",
                "modules/nuclide-jest/types.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: context",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "7c19846cb146fd0f70407b7ee34392f086f8ece7",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521047233,
            "hunks": 8,
            "message": "Nuclide VSP Debugging: Respect supportsThreadCausedFocus experimental client flags Reviewed By: velocityboy Differential Revision: D7252121 fbshipit-source-id: 51c0ade90d064e7134b5e2317ad788815e6154fe",
            "diff": [
                "diff --git a/flow-libs/vscode-debugprotocol.js.flow b/flow-libs/vscode-debugprotocol.js.flow",
                "index 059534153..32129d219 100644",
                "--- a/flow-libs/vscode-debugprotocol.js.flow",
                "+++ b/flow-libs/vscode-debugprotocol.js.flow",
                "@@ -246,2 +246,5 @@ declare module 'vscode-debugprotocol' {",
                "     supportsRunInTerminalRequest?: boolean,",
                "+    /** Experimental: Client supports the `threadCausedFocus` stopped event attribute . */",
                "+    // https://github.com/Microsoft/vscode-debugadapter-node/issues/147",
                "+    supportsThreadCausedFocus?: boolean,",
                "   };",
                "@@ -1086,3 +1089,3 @@ declare module 'vscode-debugprotocol' {",
                "      */",
                "-     supportsTerminateThread?: boolean,",
                "+    supportsTerminateThread?: boolean,",
                "   };",
                "diff --git a/pkg/nuclide-debugger-hhvm-rpc/lib/hhvmDebugger.js b/pkg/nuclide-debugger-hhvm-rpc/lib/hhvmDebugger.js",
                "index f5ad76d04..a3ddb3dec 100644",
                "--- a/pkg/nuclide-debugger-hhvm-rpc/lib/hhvmDebugger.js",
                "+++ b/pkg/nuclide-debugger-hhvm-rpc/lib/hhvmDebugger.js",
                "@@ -11,2 +11,3 @@",
                "+import * as DebugProtocol from 'vscode-debugprotocol';",
                " import child_process from 'child_process';",
                "@@ -37,2 +38,3 @@ class HHVMDebuggerWrapper {",
                "   _nonLoaderBreakSeen: boolean;",
                "+  _initializeArgs: DebugProtocol.InitializeRequestArguments;",
                "@@ -47,2 +49,3 @@ class HHVMDebuggerWrapper {",
                "     this._nonLoaderBreakSeen = false;",
                "+    this._initializeArgs = {adapterID: 'hhvm'};",
                "   }",
                "@@ -260,2 +263,3 @@ class HHVMDebuggerWrapper {",
                "         case 'initialize':",
                "+          this._initializeArgs = requestMsg.arguments;",
                "           this._writeResponseMessage({",
                "@@ -508,2 +512,14 @@ class HHVMDebuggerWrapper {",
                "+    // Skip forwarding non-focused thread stop events to VSCode's UI",
                "+    // to avoid confusing the UX on what thread to focus.",
                "+    // https://github.com/Microsoft/vscode-debugadapter-node/issues/147",
                "+    if (",
                "+      message.type === 'event' &&",
                "+      message.event === 'stopped' &&",
                "+      !message.body.threadCausedFocus &&",
                "+      !this._initializeArgs.supportsThreadCausedFocus",
                "+    ) {",
                "+      return;",
                "+    }",
                "+",
                "     const output = JSON.stringify(message);",
                "diff --git a/pkg/nuclide-debugger-new/lib/vsp/DebugService.js b/pkg/nuclide-debugger-new/lib/vsp/DebugService.js",
                "index 6191843da..8e4ffebc0 100644",
                "--- a/pkg/nuclide-debugger-new/lib/vsp/DebugService.js",
                "+++ b/pkg/nuclide-debugger-new/lib/vsp/DebugService.js",
                "@@ -1163,2 +1163,4 @@ export default class DebugService implements IDebugService {",
                "         supportsRunInTerminalRequest: false,",
                "+        // Experimental: https://github.com/Microsoft/vscode-debugadapter-node/issues/147",
                "+        supportsThreadCausedFocus: true,",
                "         locale: 'en_US',"
            ],
            "changed_files": [
                "flow-libs/vscode-debugprotocol.js.flow",
                "pkg/nuclide-debugger-hhvm-rpc/lib/hhvmDebugger.js",
                "pkg/nuclide-debugger-new/lib/vsp/DebugService.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: code, hhvm",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "69b8241f12f8a07b9c7f908491b7948b0cf3c3b4",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521126843,
            "hunks": 9,
            "message": "Rework tunneling implementation Summary: This now supports tunneling to multiple hosts concurrently and proper cleanup. I originally implemented a more sophisticated solution in mind which handled multiple subscribers, but ended up going back to this. The assumption is that tunneling is either on or off, and it should be okay for a feature to turn it on and leave it on, instead of triggering it there and back. Reviewed By: aadsm Differential Revision: D7282718 fbshipit-source-id: d9e7e6d03be770805c4ee11705c6e0f16ae43212",
            "diff": [
                "diff --git a/pkg/nuclide-adb-sdb-base/lib/Tunneling.js b/pkg/nuclide-adb-sdb-base/lib/Tunneling.js",
                "index fc0ba17c9..bb4e1990e 100644",
                "--- a/pkg/nuclide-adb-sdb-base/lib/Tunneling.js",
                "+++ b/pkg/nuclide-adb-sdb-base/lib/Tunneling.js",
                "@@ -17,5 +17,6 @@ import type {",
                "+import invariant from 'assert';",
                " import nuclideUri from 'nuclide-commons/nuclideUri';",
                "-import UniversalDisposable from 'nuclide-commons/UniversalDisposable';",
                "-import {BehaviorSubject, Observable} from 'rxjs';",
                "+import {Observable, Subject} from 'rxjs';",
                "+import {Cache} from '../../commons-node/cache';",
                " import consumeFirstProvider from '../../commons-atom/consumeFirstProvider';",
                "@@ -23,67 +24,82 @@ import {getAdbServiceByNuclideUri} from '../../nuclide-remote-connection';",
                "-export function startTunnelingAdb(host: NuclideUri) {",
                "-  stopTunnelingAdb();",
                "-  const adbService = getAdbServiceByNuclideUri(host);",
                "-  Observable.fromPromise(adbService.killServer())",
                "-    .switchMap(async () => {",
                "-      const tunnelService: ?SshTunnelService = await consumeFirstProvider(",
                "-        'nuclide.ssh-tunnel',",
                "-      );",
                "-      if (tunnelService == null) {",
                "-        throw new Error(",
                "-          'No package to open a tunnel to the remote host available.',",
                "-        );",
                "-      }",
                "-      const tunnels = [",
                "-        {",
                "-          description: 'adb',",
                "-          from: {host: nuclideUri.getHostname(host), port: 5037, family: 4},",
                "-          to: {host: 'localhost', port: 5037, family: 4},",
                "-        },",
                "-        {",
                "-          description: 'emulator console',",
                "-          from: {host: nuclideUri.getHostname(host), port: 5554, family: 4},",
                "-          to: {host: 'localhost', port: 5554, family: 4},",
                "-        },",
                "-        {",
                "-          description: 'emulator adb',",
                "-          from: {host: nuclideUri.getHostname(host), port: 5555, family: 4},",
                "-          to: {host: 'localhost', port: 5555, family: 4},",
                "-        },",
                "-        {",
                "-          description: 'exopackage',",
                "-          from: {host: nuclideUri.getHostname(host), port: 2829, family: 4},",
                "-          to: {host: 'localhost', port: 2829, family: 4},",
                "-        },",
                "-      ];",
                "-      return Promise.all(",
                "-        tunnels.map(t => _requestTunnelFromService(t, tunnelService)),",
                "-      );",
                "-    })",
                "-    .subscribe(result => {",
                "-      const disposable = new UniversalDisposable();",
                "-      result.forEach(d => disposable.add(d));",
                "-      activeTunnels.next({host, disposable});",
                "-    });",
                "+export function startTunnelingAdb(uri: NuclideUri): Promise<void> {",
                "+  const {onReady} = activeTunnels.getOrCreate(uri, (_, serviceUri) => {",
                "+    invariant(typeof serviceUri === 'string');",
                "+    const adbService = getAdbServiceByNuclideUri(serviceUri);",
                "+    const tunnelsOpen = adbService",
                "+      .killServer()",
                "+      .then(() => openTunnels(serviceUri));",
                "+    return {",
                "+      onReady: tunnelsOpen.then(() => {}),",
                "+      dispose: () => {",
                "+        tunnelsOpen.then(disposables => disposables.forEach(d => d.dispose()));",
                "+      },",
                "+    };",
                "+  });",
                "+  changes.next();",
                "+",
                "+  return onReady;",
                " }",
                "-export function isAdbTunneled(host: NuclideUri): Observable<boolean> {",
                "-  return activeTunnels",
                "-    .publishReplay(1)",
                "-    .refCount()",
                "-    .map(active => active != null && active.host === host);",
                "+export function stopTunnelingAdb(uri: NuclideUri) {",
                "+  activeTunnels.delete(uri);",
                "+  changes.next();",
                " }",
                "-export function stopTunnelingAdb() {",
                "-  const active = activeTunnels.getValue();",
                "-  if (active != null) {",
                "-    active.disposable.dispose();",
                "-    activeTunnels.next(null);",
                "-  }",
                "+export function isAdbTunneled(uri: NuclideUri): Observable<boolean> {",
                "+  return changes",
                "+    .startWith(undefined)",
                "+    .map(() => activeTunnels.get(uri) != null)",
                "+    .distinctUntilChanged();",
                " }",
                "-const activeTunnels: BehaviorSubject<?{",
                "-  host: NuclideUri,",
                "-  disposable: UniversalDisposable,",
                "-}> = new BehaviorSubject(null);",
                "+const activeTunnels: Cache<",
                "+  NuclideUri,",
                "+  {onReady: Promise<void>, dispose: () => void},",
                "+> = new Cache({",
                "+  keyFactory: uri =>",
                "+    nuclideUri.createRemoteUri(nuclideUri.getHostname(uri), '/'),",
                "+  dispose: value => value.dispose(),",
                "+});",
                "+const changes: Subject<void> = new Subject();",
                "+",
                "+async function openTunnels(host: NuclideUri): Promise<Array<IDisposable>> {",
                "+  const tunnelService: ?SshTunnelService = await consumeFirstProvider(",
                "+    'nuclide.ssh-tunnel',",
                "+  );",
                "+  if (tunnelService == null) {",
                "+    throw new Error(",
                "+      'No package to open a tunnel to the remote host available.',",
                "+    );",
                "+  }",
                "+  const tunnels = [",
                "+    {",
                "+      description: 'adb',",
                "+      from: {host: nuclideUri.getHostname(host), port: 5037, family: 4},",
                "+      to: {host: 'localhost', port: 5037, family: 4},",
                "+    },",
                "+    {",
                "+      description: 'emulator console',",
                "+      from: {host: nuclideUri.getHostname(host), port: 5554, family: 4},",
                "+      to: {host: 'localhost', port: 5554, family: 4},",
                "+    },",
                "+    {",
                "+      description: 'emulator adb',",
                "+      from: {host: nuclideUri.getHostname(host), port: 5555, family: 4},",
                "+      to: {host: 'localhost', port: 5555, family: 4},",
                "+    },",
                "+    {",
                "+      description: 'exopackage',",
                "+      from: {host: nuclideUri.getHostname(host), port: 2829, family: 4},",
                "+      to: {host: 'localhost', port: 2829, family: 4},",
                "+    },",
                "+  ];",
                "+  return Promise.all(",
                "+    tunnels.map(t =>",
                "+      _requestTunnelFromService(t, tunnelService).catch(() => ({",
                "+        dispose: () => {},",
                "+      })),",
                "+    ),",
                "+  );",
                "+}",
                "diff --git a/pkg/nuclide-device-panel-android/lib/providers/AdbTunnelingProvider.js b/pkg/nuclide-device-panel-android/lib/providers/AdbTunnelingProvider.js",
                "index 24d42d81b..5ad5783a0 100644",
                "--- a/pkg/nuclide-device-panel-android/lib/providers/AdbTunnelingProvider.js",
                "+++ b/pkg/nuclide-device-panel-android/lib/providers/AdbTunnelingProvider.js",
                "@@ -21,5 +21,5 @@ import UniversalDisposable from 'nuclide-commons/UniversalDisposable';",
                " import {",
                "+  isAdbTunneled,",
                "   startTunnelingAdb,",
                "   stopTunnelingAdb,",
                "-  isAdbTunneled,",
                " } from '../../../nuclide-adb-sdb-base/lib/Tunneling';",
                "@@ -50,3 +50,3 @@ export class AdbTunnelingProvider implements DeviceTypeComponentProvider {",
                "             enable: () => startTunnelingAdb(host),",
                "-            disable: () => stopTunnelingAdb(),",
                "+            disable: () => stopTunnelingAdb(host),",
                "           })),"
            ],
            "changed_files": [
                "pkg/nuclide-adb-sdb-base/lib/Tunneling.js",
                "pkg/nuclide-device-panel-android/lib/providers/AdbTunnelingProvider.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: provide",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "760ba9e8ce5d8fc47be660d5758b463f063092e7",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521235116,
            "hunks": 10,
            "message": "set runInBand to true to prevent loss of Atom global Summary: In the case where more than one test file is run, Jest forks and we lose the context established in AtomEnvironment. Use `runInBand`: `true` to prevent this. Reviewed By: evangrayk Differential Revision: D7295457 fbshipit-source-id: b6bf40bb26f292b4420e50a8ea4400b436839a5a",
            "diff": [
                "diff --git a/modules/nuclide-jest/AtomJestEnvironment.js b/modules/nuclide-jest/AtomJestEnvironment.js",
                "index d0ccb720d..34569233c 100644",
                "--- a/modules/nuclide-jest/AtomJestEnvironment.js",
                "+++ b/modules/nuclide-jest/AtomJestEnvironment.js",
                "@@ -18,11 +18,36 @@",
                "+// Slightly derived from https://github.com/nhunzaker/jest-electron-environment",
                "+// which is licensed MIT.",
                "+",
                "+// eslint-disable-next-line rulesdir/no-unresolved",
                "+const mock = require('jest-mock');",
                " // eslint-disable-next-line rulesdir/no-unresolved",
                "-const NodeEnvironment = require('jest-environment-node');",
                "+const {FakeTimers, installCommonGlobals} = require('jest-util');",
                "+",
                "+class AtomJestEnvironment {",
                "+  constructor(config) {",
                "+    const global = (this.global = window);",
                "+    installCommonGlobals(global, config.globals);",
                "+    this.moduleMocker = new mock.ModuleMocker(global);",
                "+    this.fakeTimers = new FakeTimers({",
                "+      config,",
                "+      global,",
                "+      moduleMocker: this.moduleMocker,",
                "+    });",
                "+  }",
                "-module.exports = class AtomJestEnvironment extends NodeEnvironment {",
                "   setup() {",
                "     this.global.atom = global.atom;",
                "-    this.global.__pkg = global.__pkg;",
                "     return Promise.resolve();",
                "   }",
                "-};",
                "+",
                "+  teardown() {",
                "+    return Promise.resolve();",
                "+  }",
                "+",
                "+  runScript(script) {",
                "+    return script.runInThisContext();",
                "+  }",
                "+}",
                "+",
                "+module.exports = AtomJestEnvironment;",
                "diff --git a/modules/nuclide-jest/atom-runner.js b/modules/nuclide-jest/atom-runner.js",
                "index 44fa11f0b..27dcdb51f 100644",
                "--- a/modules/nuclide-jest/atom-runner.js",
                "+++ b/modules/nuclide-jest/atom-runner.js",
                "@@ -78,2 +78,3 @@ module.exports = function(params) {",
                "       env: 'nuclide-jest/AtomJestEnvironment.js',",
                "+      runInBand: true,",
                "       watch: params.headless ? process.env.JEST_WATCH != null : true,",
                "diff --git a/modules/nuclide-jest/package.json b/modules/nuclide-jest/package.json",
                "index e9d41037c..7dce88b94 100644",
                "--- a/modules/nuclide-jest/package.json",
                "+++ b/modules/nuclide-jest/package.json",
                "@@ -12,3 +12,4 @@",
                "     \"jest-cli\": \"22.4.2\",",
                "-    \"jest-environment-node\": \"22.4.1\",",
                "+    \"jest-mock\": \"22.2.0\",",
                "+    \"jest-util\": \"22.4.1\",",
                "     \"nuclide-commons\": \"0.5.1-dev\",",
                "diff --git a/package.json b/package.json",
                "index c3ec137ef..a4436b984 100644",
                "--- a/package.json",
                "+++ b/package.json",
                "@@ -183,3 +183,4 @@",
                "     \"jest-cli\": \"22.4.2\",",
                "-    \"jest-environment-node\": \"22.4.1\",",
                "+    \"jest-mock\": \"22.2.0\",",
                "+    \"jest-util\": \"22.4.1\",",
                "     \"mock-spawn\": \"0.2.6\",",
                "diff --git a/yarn.lock b/yarn.lock",
                "index 04f2c937d..4094b2448 100644",
                "--- a/yarn.lock",
                "+++ b/yarn.lock",
                "@@ -3496,3 +3496,3 @@ jest-environment-jsdom@^22.4.1:",
                "-jest-environment-node@22.4.1, jest-environment-node@^22.4.1:",
                "+jest-environment-node@^22.4.1:",
                "   version \"22.4.1\"",
                "@@ -3559,3 +3559,3 @@ jest-message-util@^22.4.0:",
                "-jest-mock@^22.2.0:",
                "+jest-mock@22.2.0, jest-mock@^22.2.0:",
                "   version \"22.2.0\"",
                "@@ -3636,3 +3636,3 @@ jest-snapshot@^22.4.0:",
                "-jest-util@^22.4.1:",
                "+jest-util@22.4.1, jest-util@^22.4.1:",
                "   version \"22.4.1\""
            ],
            "changed_files": [
                "modules/nuclide-jest/AtomJestEnvironment.js",
                "modules/nuclide-jest/atom-runner.js",
                "modules/nuclide-jest/package.json",
                "package.json",
                "yarn.lock"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: context",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "5d9f172400f4015a83fceae0756d114a52031113",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521149491,
            "hunks": 2,
            "message": "Console: track code execution Reviewed By: wbinnssmith Differential Revision: D7208212 fbshipit-source-id: bc6acafab1286bee4b64d274175c3de3135117a4",
            "diff": [
                "diff --git a/modules/atom-ide-ui/pkg/atom-ide-console/lib/redux/Epics.js b/modules/atom-ide-ui/pkg/atom-ide-console/lib/redux/Epics.js",
                "index 1d2d4f021..c871963b6 100644",
                "--- a/modules/atom-ide-ui/pkg/atom-ide-console/lib/redux/Epics.js",
                "+++ b/modules/atom-ide-ui/pkg/atom-ide-console/lib/redux/Epics.js",
                "@@ -20,2 +20,3 @@ import invariant from 'assert';",
                " import {Observable} from 'rxjs';",
                "+import analytics from 'nuclide-commons-atom/analytics';",
                "@@ -88,2 +89,13 @@ export function executeEpic(",
                "+export function trackEpic(",
                "+  actions: ActionsObservable<Action>,",
                "+  store: Store,",
                "+): Observable<empty> {",
                "+  return actions",
                "+    .ofType(Actions.EXECUTE)",
                "+    .map(action => ({type: 'console:execute'}))",
                "+    .do(analytics.trackEvent)",
                "+    .ignoreElements();",
                "+}",
                "+",
                " export function registerRecordProviderEpic("
            ],
            "changed_files": [
                "modules/atom-ide-ui/pkg/atom-ide-console/lib/redux/Epics.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code, execution",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "eb800f9e2b115fe573d6d8b0dc0e1223ee241573",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520632862,
            "hunks": 4,
            "message": "Make OperationProgress fields optional Summary: We were casting data read from hg immediately without structural parsing, which lead to a crash in the RPC layer when hg changed something. We can be more lenient here about the type for now (since this is hardly used at all) and then later add a more robust flow type parser. Reviewed By: aadisriram Differential Revision: D7216171 fbshipit-source-id: 3a4d99bf9251b3201c32bb2ec1a338ae2ef4b4f5",
            "diff": [
                "diff --git a/pkg/nuclide-hg-rpc/lib/HgService.js b/pkg/nuclide-hg-rpc/lib/HgService.js",
                "index 95ec39bc4..78a5d3e6f 100644",
                "--- a/pkg/nuclide-hg-rpc/lib/HgService.js",
                "+++ b/pkg/nuclide-hg-rpc/lib/HgService.js",
                "@@ -257,3 +257,3 @@ export type CheckoutOptions = {",
                " export type OperationProgressState = {",
                "-  active: boolean,",
                "+  active: ?boolean,",
                "   estimate_sec: ?number,",
                "@@ -261,5 +261,5 @@ export type OperationProgressState = {",
                "   item: ?string,",
                "-  pos: number,",
                "+  pos: ?number,",
                "   speed_str: ?string,",
                "-  topic: string,",
                "+  topic: ?string,",
                "   total: ?number,",
                "@@ -270,3 +270,6 @@ export type OperationProgress = {",
                "   topics: Array<string>,",
                "-  state: {[key: string]: OperationProgressState},",
                "+  // TODO(T26794506): We expect that the state field will conform to OperationProgressState",
                "+  // but any unknown fields (due to changes in hg) will break us at the rpc layer.",
                "+  // So we type it as Object to save ourselves a crash.",
                "+  state: Object,",
                " };"
            ],
            "changed_files": [
                "pkg/nuclide-hg-rpc/lib/HgService.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: lead",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "471eb1f86517f380af96ab8b3dc972f2ba3c6578",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521141868,
            "hunks": 5,
            "message": "Support Jest for Node packages Summary: Like D7134327, this adds support for Jest in Nuclide packages. This piece adds support for running node-only packages using a jest runner that runs code through the nuclide-node-transpiler. It also supports watch mode, by passing `--watch` or `--watchAll` alongside `npm test` like so: `npm test -- --watch` (yarn use can ommit the middle --) Reviewed By: hansonw Differential Revision: D7135601 fbshipit-source-id: faf2c8da921874ee3fb97f9439136c74da7fccf5",
            "diff": [
                "diff --git a/modules/nuclide-jest/atom-runner.js b/modules/nuclide-jest/atom-runner.js",
                "index f52c1404d..813d5cb67 100644",
                "--- a/modules/nuclide-jest/atom-runner.js",
                "+++ b/modules/nuclide-jest/atom-runner.js",
                "@@ -29,2 +29,4 @@ const path = require('path');",
                "+const config = require('./jest.config.js');",
                "+",
                " const {ipcRenderer} = electron;",
                "@@ -69,8 +71,3 @@ module.exports = function(params) {",
                "       env: 'nuclide-jest/AtomJestEnvironment.js',",
                "-      config: JSON.stringify({",
                "-        testMatch: ['**/spec/**/*-spec.js'],",
                "-        transform: {",
                "-          '\\\\.js$': 'nuclide-jest/jestTransformer.js',",
                "-        },",
                "-      }),",
                "+      config: JSON.stringify(config),",
                "     },",
                "diff --git a/modules/nuclide-jest/bin/jest-node.js b/modules/nuclide-jest/bin/jest-node.js",
                "new file mode 100644",
                "index 000000000..6b7017503",
                "--- /dev/null",
                "+++ b/modules/nuclide-jest/bin/jest-node.js",
                "@@ -0,0 +1,33 @@",
                "+#!/usr/bin/env node",
                "+/**",
                "+ * Copyright (c) 2017-present, Facebook, Inc.",
                "+ * All rights reserved.",
                "+ *",
                "+ * This source code is licensed under the BSD-style license found in the",
                "+ * LICENSE file in the root directory of this source tree. An additional grant",
                "+ * of patent rights can be found in the PATENTS file in the same directory.",
                "+ *",
                "+ * @noflow",
                "+ */",
                "+'use strict';",
                "+",
                "+/* eslint",
                "+  comma-dangle: [1, always-multiline],",
                "+  prefer-object-spread/prefer-object-spread: 0,",
                "+  rulesdir/no-commonjs: 0,",
                "+  */",
                "+/* eslint-disable no-console */",
                "+",
                "+// eslint-disable-next-line rulesdir/no-unresolved",
                "+const jestCLI = require('jest-cli');",
                "+const config = require('../jest.config.js');",
                "+",
                "+jestCLI.runCLI(",
                "+  {",
                "+    config: JSON.stringify(config),",
                "+    watch: process.argv.includes('--watch'),",
                "+    watchAll: process.argv.includes('--watchAll'),",
                "+    watchman: true,",
                "+  },",
                "+  [process.cwd()]",
                "+).then(response => process.exit(response.results.success ? 0 : 1));",
                "diff --git a/modules/nuclide-jest/jest.config.js b/modules/nuclide-jest/jest.config.js",
                "new file mode 100644",
                "index 000000000..3e00804d7",
                "--- /dev/null",
                "+++ b/modules/nuclide-jest/jest.config.js",
                "@@ -0,0 +1,24 @@",
                "+/**",
                "+ * Copyright (c) 2017-present, Facebook, Inc.",
                "+ * All rights reserved.",
                "+ *",
                "+ * This source code is licensed under the BSD-style license found in the",
                "+ * LICENSE file in the root directory of this source tree. An additional grant",
                "+ * of patent rights can be found in the PATENTS file in the same directory.",
                "+ *",
                "+ * @noflow",
                "+ */",
                "+'use strict';",
                "+",
                "+/* eslint",
                "+  comma-dangle: [1, always-multiline],",
                "+  prefer-object-spread/prefer-object-spread: 0,",
                "+  rulesdir/no-commonjs: 0,",
                "+  */",
                "+",
                "+module.exports = {",
                "+  testMatch: ['**/spec/**/*-spec.js'],",
                "+  transform: {",
                "+    '\\\\.js$': 'nuclide-jest/jestTransformer.js',",
                "+  },",
                "+};",
                "diff --git a/pkg/nuclide-projectionist/package.json b/pkg/nuclide-projectionist/package.json",
                "index 44fd5ef72..fe49aacfa 100644",
                "--- a/pkg/nuclide-projectionist/package.json",
                "+++ b/pkg/nuclide-projectionist/package.json",
                "@@ -9,3 +9,3 @@",
                "     \"prepublish\": \"../scripts/prepublish.sh\",",
                "-    \"test\": \"node ../nuclide-jasmine/bin/jasmine-node-transpiled spec\"",
                "+    \"test\": \"node ../../modules/nuclide-jest/bin/jest-node.js spec\"",
                "   },"
            ],
            "changed_files": [
                "modules/nuclide-jest/atom-runner.js",
                "modules/nuclide-jest/bin/jest-node.js",
                "modules/nuclide-jest/jest.config.js",
                "pkg/nuclide-projectionist/package.json"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "1845de6f99f7c14763e200624fde211aec7b16b2",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521163825,
            "hunks": 9,
            "message": "Send launchServer commands over IPC Summary: To avoid the security flaw of having certificates visible via `ps`. Note that this means we have to remove the `pkill` hack to clean up old servers.. but the next diff implements a fix for that. Reviewed By: bolinfest Differential Revision: D7284120 fbshipit-source-id: 9c482acaca20f09e576437d403e61141bc1f3a90",
            "diff": [
                "diff --git a/modules/big-dig/src/server/launchServer.js b/modules/big-dig/src/server/launchServer.js",
                "index 3f169dfc0..2913f540e 100644",
                "--- a/modules/big-dig/src/server/launchServer.js",
                "+++ b/modules/big-dig/src/server/launchServer.js",
                "@@ -18,5 +18,33 @@ import {launchServer} from './NuclideServer';",
                "-async function main() {",
                "-  const params = JSON.parse(process.argv[2]);",
                "-  // TODO(mbolin): Do basic runtime validation on params.",
                "+export type LauncherScriptParams = {|",
                "+  key: string,",
                "+  cert: string,",
                "+  ca: string,",
                "+  port: number,",
                "+  launcher: string,",
                "+  serverParams: mixed,",
                "+|};",
                "+",
                "+function main() {",
                "+  // launchServer should only be spawned from ./main.js.",
                "+  if (process.send == null) {",
                "+    // eslint-disable-next-line no-console",
                "+    console.error(",
                "+      'Error: launchServer should only be spawned via parseArgsAndRunMain.',",
                "+    );",
                "+    process.exit(1);",
                "+  }",
                "+",
                "+  process.on('message', params => {",
                "+    handleLaunchParams(params).catch(error => {",
                "+      log4js.getLogger().fatal('launchServer failed:', error);",
                "+      log4js.shutdown(() => process.exit(1));",
                "+    });",
                "+  });",
                "+}",
                "+",
                "+async function handleLaunchParams(params: LauncherScriptParams) {",
                "+  if (params.exclusive != null) {",
                "+    await enforceExclusive(params.exclusive);",
                "+  }",
                "@@ -33,3 +61,3 @@ async function main() {",
                "-  // $FlowIgnore",
                "+  invariant(process.send != null);",
                "   process.send({port}, () => {",
                "@@ -52,7 +80,2 @@ log4js.configure({",
                "-main().catch(error => {",
                "-  log4js.getLogger().fatal('launchServer failed:', error);",
                "-  log4js.shutdown(() => process.exit(1));",
                "-});",
                "-",
                " process.on('unhandledRejection', error => {",
                "@@ -65 +88,3 @@ process.on('uncaughtException', error => {",
                " });",
                "+",
                "+main();",
                "diff --git a/modules/big-dig/src/server/main.js b/modules/big-dig/src/server/main.js",
                "index 4f4b06434..b047995f9 100644",
                "--- a/modules/big-dig/src/server/main.js",
                "+++ b/modules/big-dig/src/server/main.js",
                "@@ -13,2 +13,4 @@",
                " import child_process from 'child_process';",
                "+import type {LauncherScriptParams} from './launchServer';",
                "+",
                " import {timeoutPromise, TimedOutError} from 'nuclide-commons/promise';",
                "@@ -61,10 +63,2 @@ export async function generateCertificatesAndStartServer({",
                "-  // HACK: kill existing servers on the given port.",
                "-  try {",
                "-    child_process.execFileSync('pkill', [",
                "-      '-f',",
                "-      `launchServer-entry.js.*\"port\":${port}`,",
                "-    ]);",
                "-  } catch (e) {}",
                "-",
                "   const paths = await generateCertificates(",
                "@@ -83,3 +77,3 @@ export async function generateCertificatesAndStartServer({",
                "   ]);",
                "-  const params = {",
                "+  const params: LauncherScriptParams = {",
                "     key: key.toString(),",
                "@@ -107,3 +101,2 @@ export async function generateCertificatesAndStartServer({",
                "       launcherScript,",
                "-      JSON.stringify(params),",
                "     ],",
                "@@ -115,2 +108,4 @@ export async function generateCertificatesAndStartServer({",
                "   logger.info(`spawn called for ${launcherScript}`);",
                "+  // Send launch parameters over IPC to avoid making them visible in `ps`.",
                "+  child.send(params);"
            ],
            "changed_files": [
                "modules/big-dig/src/server/launchServer.js",
                "modules/big-dig/src/server/main.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "SEC_KEYWORDS_IN_MESSAGE",
                    "message": "The commit message contains some security-related keywords: security",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "1a2ed910bed905f4651e1daf80b54af690dcda78",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520377434,
            "hunks": 4,
            "message": "Partial revert of D6954016 Summary: It looks like D6954016 started cleaning up `tagToTransport` on WS disconnect, but this is incorrect now -- `QueuedAckTransport` is able to reconnect from closed WS connections (and in fact we need this to implement reconnection in Nuclide/VSCode). I think siegebell and I briefly discussed this on a chat thread but the solution is probably some combination of: 1) garbage collect inactive `QueuedAckTransports` 2) implement something in the big-dig protocol to represent connection closure, since closing a websocket connection is not necessarily final. I also cleaned up two TODOs: 1) we don't need any heartbeat `onConnectionRestored` functionality; this is handled in `NuclideSocket` 2) the new imported `WebSocketTransport` handles errors within itself. Reviewed By: siegebell Differential Revision: D7163999 fbshipit-source-id: 87ed52357a32936c06709f3cd238871da15c021e",
            "diff": [
                "diff --git a/modules/big-dig/src/client/BigDigClient.js b/modules/big-dig/src/client/BigDigClient.js",
                "index 0abf1a7ed..e337d845b 100644",
                "--- a/modules/big-dig/src/client/BigDigClient.js",
                "+++ b/modules/big-dig/src/client/BigDigClient.js",
                "@@ -61,5 +61,2 @@ export class BigDigClient {",
                "     this._heartbeat = heartbeat;",
                "-    this._heartbeat.onConnectionRestored(() => {",
                "-      this._logger.warn('TODO(T25533063): Implement reconnect logic');",
                "-    });",
                "   }",
                "diff --git a/modules/big-dig/src/server/BigDigServer.js b/modules/big-dig/src/server/BigDigServer.js",
                "index a04dd4654..d60a7efd0 100644",
                "--- a/modules/big-dig/src/server/BigDigServer.js",
                "+++ b/modules/big-dig/src/server/BigDigServer.js",
                "@@ -130,9 +130,4 @@ export default class BigDigServer {",
                "-        ws.once('close', () => {",
                "-          for (const transport of tagToTransport.values()) {",
                "-            transport.close();",
                "-          }",
                "-          // This may be garbage-collected automatically, but clearing it won't hurt...",
                "-          tagToTransport.clear();",
                "-        });",
                "+        // TODO: Either garbage collect inactive transports, or implement",
                "+        // an explicit \"close\" action in the big-dig protocol.",
                "       } else {",
                "@@ -142,4 +137,2 @@ export default class BigDigServer {",
                "     });",
                "-",
                "-    // TODO: need to handle ws errors.",
                "   }",
                "diff --git a/pkg/nuclide-remote-connection/lib/RemoteConnection.js b/pkg/nuclide-remote-connection/lib/RemoteConnection.js",
                "index 5f080e1cd..f8dda036c 100644",
                "--- a/pkg/nuclide-remote-connection/lib/RemoteConnection.js",
                "+++ b/pkg/nuclide-remote-connection/lib/RemoteConnection.js",
                "@@ -134,10 +134,9 @@ export class RemoteConnection {",
                "     if (!connectionConfig) {",
                "-      return null;",
                "-    }",
                "-    try {",
                "-      // Connection configs are also stored by IP address to share between hostnames.",
                "-      const {address} = await lookupPreferIpv6(host);",
                "-      connectionConfig = await getConnectionConfig(address);",
                "-    } catch (err) {",
                "-      // It's OK if the backup IP check fails.",
                "+      try {",
                "+        // Connection configs are also stored by IP address to share between hostnames.",
                "+        const {address} = await lookupPreferIpv6(host);",
                "+        connectionConfig = await getConnectionConfig(address);",
                "+      } catch (err) {",
                "+        // It's OK if the backup IP check fails.",
                "+      }",
                "     }"
            ],
            "changed_files": [
                "modules/big-dig/src/client/BigDigClient.js",
                "modules/big-dig/src/server/BigDigServer.js",
                "pkg/nuclide-remote-connection/lib/RemoteConnection.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "0e9d45eb254281e922b1cce4a6c3027a05d5c89d",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520637475,
            "hunks": 13,
            "message": "Allow multi-line input in debugger console Summary: This diff adds a tip telling the user they can Shift+Enter (Windows/Linux) or Option+Enter (Mac) to enter multi-line text in the debugger console prompt. When pressing the up or down arrows, the input area will suggest history auto complete only if the input has 1 or fewer lines in it, so we don't replace your input with history when you're navigating around a multi-line text area. This diff also fixes an issue where really long unbreakable text in a console record is truncated because there was no scrollbar. Reviewed By: captbaritone Differential Revision: D6861199 fbshipit-source-id: 305e810b3f9ff38d6f1aae1d44d4557e767e3551",
            "diff": [
                "diff --git a/modules/atom-ide-ui/pkg/atom-ide-console/lib/ui/ConsoleView.js b/modules/atom-ide-ui/pkg/atom-ide-console/lib/ui/ConsoleView.js",
                "index ed6a2edc8..54028937d 100644",
                "--- a/modules/atom-ide-ui/pkg/atom-ide-console/lib/ui/ConsoleView.js",
                "+++ b/modules/atom-ide-ui/pkg/atom-ide-console/lib/ui/ConsoleView.js",
                "@@ -36,2 +36,3 @@ import recordsChanged from '../recordsChanged';",
                " import StyleSheet from 'nuclide-commons-ui/StyleSheet';",
                "+import classnames from 'classnames';",
                "@@ -63,2 +64,3 @@ type State = {",
                "   unseenMessages: boolean,",
                "+  promptBufferChanged: boolean,",
                " };",
                "@@ -87,2 +89,3 @@ export default class ConsoleView extends React.Component<Props, State> {",
                "       unseenMessages: false,",
                "+      promptBufferChanged: false,",
                "     };",
                "@@ -238,2 +241,3 @@ export default class ConsoleView extends React.Component<Props, State> {",
                "           {this._renderPrompt()}",
                "+          {this._renderMultilineTip()}",
                "         </div>",
                "@@ -243,2 +247,29 @@ export default class ConsoleView extends React.Component<Props, State> {",
                "+  _renderMultilineTip(): ?React.Element<any> {",
                "+    const {currentExecutor} = this.props;",
                "+    if (currentExecutor == null) {",
                "+      return;",
                "+    }",
                "+    const keyCombo =",
                "+      process.platform === 'darwin' ? (",
                "+        // Option + Enter on Mac",
                "+        <span>&#8997; + &#9166;</span>",
                "+      ) : (",
                "+        // Shift + Enter on Windows and Linux.",
                "+        <span>Shift + Enter</span>",
                "+      );",
                "+",
                "+    return (",
                "+      <div",
                "+        className={classnames(",
                "+          'console-multiline-tip',",
                "+          this.state.promptBufferChanged",
                "+            ? 'console-multiline-tip-dim'",
                "+            : 'console-multiline-tip-not-dim',",
                "+        )}>",
                "+        Tip: {keyCombo} to insert a newline",
                "+      </div>",
                "+    );",
                "+  }",
                "+",
                "   _renderPrompt(): ?React.Element<any> {",
                "@@ -256,2 +287,5 @@ export default class ConsoleView extends React.Component<Props, State> {",
                "           watchEditor={this.props.watchEditor}",
                "+          onDidTextBufferChange={() => {",
                "+            this.setState({promptBufferChanged: true});",
                "+          }}",
                "         />",
                "diff --git a/modules/atom-ide-ui/pkg/atom-ide-console/lib/ui/InputArea.js b/modules/atom-ide-ui/pkg/atom-ide-console/lib/ui/InputArea.js",
                "index 9b1d4a436..06e210039 100644",
                "--- a/modules/atom-ide-ui/pkg/atom-ide-console/lib/ui/InputArea.js",
                "+++ b/modules/atom-ide-ui/pkg/atom-ide-console/lib/ui/InputArea.js",
                "@@ -24,2 +24,3 @@ type Props = {",
                "   watchEditor: ?WatchEditorFunction,",
                "+  onDidTextBufferChange?: (event: atom$AggregatedTextEditEvent) => mixed,",
                " };",
                "@@ -99,3 +100,3 @@ export default class InputArea extends React.Component<Props, State> {",
                "-      if (event.ctrlKey) {",
                "+      if (event.ctrlKey || event.altKey || event.shiftKey) {",
                "         editor.insertNewline();",
                "@@ -105,3 +106,3 @@ export default class InputArea extends React.Component<Props, State> {",
                "       this._submit();",
                "-    } else if (event.which === UP_KEY_CODE) {",
                "+    } else if (event.which === UP_KEY_CODE && editor.getLineCount() <= 1) {",
                "       if (this.props.history.length === 0 || isAutocompleteOpen) {",
                "@@ -123,3 +124,3 @@ export default class InputArea extends React.Component<Props, State> {",
                "       );",
                "-    } else if (event.which === DOWN_KEY_CODE) {",
                "+    } else if (event.which === DOWN_KEY_CODE && editor.getLineCount() <= 1) {",
                "       if (this.props.history.length === 0 || isAutocompleteOpen) {",
                "@@ -156,2 +157,3 @@ export default class InputArea extends React.Component<Props, State> {",
                "           onInitialized={this._attachLabel}",
                "+          onDidTextBufferChange={this.props.onDidTextBufferChange}",
                "         />",
                "diff --git a/modules/atom-ide-ui/pkg/atom-ide-console/styles/console.less b/modules/atom-ide-ui/pkg/atom-ide-console/styles/console.less",
                "index 46e2a5d8d..db318722d 100644",
                "--- a/modules/atom-ide-ui/pkg/atom-ide-console/styles/console.less",
                "+++ b/modules/atom-ide-ui/pkg/atom-ide-console/styles/console.less",
                "@@ -435,2 +435,15 @@",
                "+.console-multiline-tip {",
                "+  padding: 0px 0px 5px 100px;",
                "+  font-size: 0.8em;",
                "+}",
                "+",
                "+.console-multiline-tip-dim {",
                "+  opacity: 0.5;",
                "+}",
                "+",
                "+.console-multiline-tip-not-dim {",
                "+  opacity: 0.8;",
                "+}",
                "+",
                " .console-prompt-wrapper {",
                "@@ -512 +525,7 @@",
                " }",
                "+",
                "+.console-table-row-wrapper {",
                "+  overflow-x: auto;",
                "+  overflow-y: hidden;",
                "+  padding-bottom: 3px;",
                "+}"
            ],
            "changed_files": [
                "modules/atom-ide-ui/pkg/atom-ide-console/lib/ui/ConsoleView.js",
                "modules/atom-ide-ui/pkg/atom-ide-console/lib/ui/InputArea.js",
                "modules/atom-ide-ui/pkg/atom-ide-console/styles/console.less"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: issue",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "becd92816d8ef10ee8e8eabcdcc94823ceabb5ca",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521058322,
            "hunks": 2,
            "message": "Fix exception on jsimports startup (#1448) Summary: The environments listed in package.json / .eslintrc may not be defined in the \"globals\" package. Closes https://github.com/facebook/nuclide/pull/1480 Reviewed By: wanderley Differential Revision: D7274984 Pulled By: hansonw fbshipit-source-id: de69678b1a6d0a2bd29232a4b57da956ac365612",
            "diff": [
                "diff --git a/pkg/nuclide-js-imports-server/spec/UndefinedSymbolManager-spec.js b/pkg/nuclide-js-imports-server/spec/UndefinedSymbolManager-spec.js",
                "index a5df9c50d..5920c3ef7 100644",
                "--- a/pkg/nuclide-js-imports-server/spec/UndefinedSymbolManager-spec.js",
                "+++ b/pkg/nuclide-js-imports-server/spec/UndefinedSymbolManager-spec.js",
                "@@ -277,2 +277,7 @@ describe('UndefinedSymbolManager', () => {",
                "   });",
                "+",
                "+  it('should not error with non-standard environments', () => {",
                "+    // eslint-disable-next-line no-new",
                "+    new UndefinedSymbolManager(['asdf']);",
                "+  });",
                " });",
                "diff --git a/pkg/nuclide-js-imports-server/src/lib/UndefinedSymbolManager.js b/pkg/nuclide-js-imports-server/src/lib/UndefinedSymbolManager.js",
                "index dae32620a..49048744f 100644",
                "--- a/pkg/nuclide-js-imports-server/src/lib/UndefinedSymbolManager.js",
                "+++ b/pkg/nuclide-js-imports-server/src/lib/UndefinedSymbolManager.js",
                "@@ -31,5 +31,7 @@ export class UndefinedSymbolManager {",
                "     envs.forEach(env => {",
                "-      Object.keys(globalsJSON[env]).forEach(globalVar => {",
                "-        this.globals.add(globalVar);",
                "-      });",
                "+      if (globalsJSON[env]) {",
                "+        Object.keys(globalsJSON[env]).forEach(globalVar => {",
                "+          this.globals.add(globalVar);",
                "+        });",
                "+      }",
                "     });"
            ],
            "changed_files": [
                "pkg/nuclide-js-imports-server/spec/UndefinedSymbolManager-spec.js",
                "pkg/nuclide-js-imports-server/src/lib/UndefinedSymbolManager.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1448": "Fix exception on jsimports startup (#1448) #1480"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1448",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "300ced336d56772b5dedcd075f011a3fa1f9a0be",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521562768,
            "hunks": 1,
            "message": "Bump version to 0.290.0 Summary: 0.290.0 fbshipit-source-id: 15fca8bb2866d27f2b800b9c0cf051aa649f8032",
            "diff": [
                "diff --git a/package.json b/package.json",
                "index 8f3919ad4..42ee1ff82 100644",
                "--- a/package.json",
                "+++ b/package.json",
                "@@ -2,3 +2,3 @@",
                "   \"name\": \"nuclide\",",
                "-  \"version\": \"0.289.0\",",
                "+  \"version\": \"0.290.0\",",
                "   \"description\": \"A unified developer experience for web and mobile development, built as a suite of features on top of Atom to provide hackability and the support of an active community.\","
            ],
            "changed_files": [
                "package.json"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "cf3cadb01d7e9ff6ff37cacf549b0877e03c39b9"
                ],
                [
                    "no-tag",
                    "ca8a03812d02dab1b6f15eec7077178f5b16006d"
                ]
            ],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8a674f9856c0a1f663bc223b63ec669b869b3b6c",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520642119,
            "hunks": 20,
            "message": "Rename addOpenTunnel to openTunnel Summary: Another rename since the name is now free Reviewed By: semmypurewal Differential Revision: D7221297 fbshipit-source-id: e088b2b9e5108a1b9c3903206d40bbc39fc0bb5c",
            "diff": [
                "diff --git a/pkg/nuclide-ssh-tunnel/lib/redux/Actions.js b/pkg/nuclide-ssh-tunnel/lib/redux/Actions.js",
                "index 58c0ce31a..98a8ba5a3 100644",
                "--- a/pkg/nuclide-ssh-tunnel/lib/redux/Actions.js",
                "+++ b/pkg/nuclide-ssh-tunnel/lib/redux/Actions.js",
                "@@ -13,4 +13,4 @@ import type {Directory} from '../../../nuclide-remote-connection';",
                " import type {",
                "-  AddOpenTunnelAction,",
                "   CloseTunnelAction,",
                "+  OpenTunnelAction,",
                "   RequestTunnelAction,",
                "@@ -21,4 +21,4 @@ import type {",
                "-export const ADD_OPEN_TUNNEL = 'ADD_OPEN_TUNNEL';",
                " export const CLOSE_TUNNEL = 'CLOSE_TUNNEL';",
                "+export const OPEN_TUNNEL = 'OPEN_TUNNEL';",
                " export const REQUEST_TUNNEL = 'REQUEST_TUNNEL';",
                "@@ -27,10 +27,6 @@ export const SET_CURRENT_WORKING_DIRECTORY = 'SET_CURRENT_WORKING_DIRECTORY';",
                "-export function requestTunnel(",
                "-  tunnel: Tunnel,",
                "-  onOpen: (?Error) => void,",
                "-  onClose: (?Error) => void,",
                "-): RequestTunnelAction {",
                "+export function closeTunnel(tunnel: Tunnel, error: ?Error): CloseTunnelAction {",
                "   return {",
                "-    type: REQUEST_TUNNEL,",
                "-    payload: {tunnel, onOpen, onClose},",
                "+    type: CLOSE_TUNNEL,",
                "+    payload: {tunnel, error},",
                "   };",
                "@@ -38,8 +34,8 @@ export function requestTunnel(",
                "-export function addOpenTunnel(",
                "+export function openTunnel(",
                "   tunnel: Tunnel,",
                "   close: (?Error) => void,",
                "-): AddOpenTunnelAction {",
                "+): OpenTunnelAction {",
                "   return {",
                "-    type: ADD_OPEN_TUNNEL,",
                "+    type: OPEN_TUNNEL,",
                "     payload: {tunnel, close},",
                "@@ -48,6 +44,10 @@ export function addOpenTunnel(",
                "-export function closeTunnel(tunnel: Tunnel, error: ?Error): CloseTunnelAction {",
                "+export function requestTunnel(",
                "+  tunnel: Tunnel,",
                "+  onOpen: (?Error) => void,",
                "+  onClose: (?Error) => void,",
                "+): RequestTunnelAction {",
                "   return {",
                "-    type: CLOSE_TUNNEL,",
                "-    payload: {tunnel, error},",
                "+    type: REQUEST_TUNNEL,",
                "+    payload: {tunnel, onOpen, onClose},",
                "   };",
                "diff --git a/pkg/nuclide-ssh-tunnel/lib/redux/Epics.js b/pkg/nuclide-ssh-tunnel/lib/redux/Epics.js",
                "index 7367b898c..69edef847 100644",
                "--- a/pkg/nuclide-ssh-tunnel/lib/redux/Epics.js",
                "+++ b/pkg/nuclide-ssh-tunnel/lib/redux/Epics.js",
                "@@ -92,3 +92,3 @@ export function requestTunnelEpic(",
                "-      return Actions.addOpenTunnel(tunnel, error => {",
                "+      return Actions.openTunnel(tunnel, error => {",
                "         subscription.unsubscribe();",
                "diff --git a/pkg/nuclide-ssh-tunnel/lib/redux/Reducers.js b/pkg/nuclide-ssh-tunnel/lib/redux/Reducers.js",
                "index 075389a50..3d97ce180 100644",
                "--- a/pkg/nuclide-ssh-tunnel/lib/redux/Reducers.js",
                "+++ b/pkg/nuclide-ssh-tunnel/lib/redux/Reducers.js",
                "@@ -25,8 +25,2 @@ export function openTunnels(",
                "   switch (action.type) {",
                "-    case Actions.ADD_OPEN_TUNNEL:",
                "-      const {close, tunnel} = action.payload;",
                "-      return state.set(tunnel, {",
                "-        close,",
                "-        state: 'initializing',",
                "-      });",
                "     case Actions.CLOSE_TUNNEL:",
                "@@ -39,2 +33,8 @@ export function openTunnels(",
                "       return state.delete(toClose);",
                "+    case Actions.OPEN_TUNNEL:",
                "+      const {close, tunnel} = action.payload;",
                "+      return state.set(tunnel, {",
                "+        close,",
                "+        state: 'initializing',",
                "+      });",
                "     case Actions.SET_TUNNEL_STATE:",
                "diff --git a/pkg/nuclide-ssh-tunnel/lib/types.js b/pkg/nuclide-ssh-tunnel/lib/types.js",
                "index c2a381470..a064155a9 100644",
                "--- a/pkg/nuclide-ssh-tunnel/lib/types.js",
                "+++ b/pkg/nuclide-ssh-tunnel/lib/types.js",
                "@@ -63,4 +63,4 @@ export type TunnelState = 'initializing' | 'ready' | 'active';",
                " export type Action =",
                "-  | AddOpenTunnelAction",
                "   | CloseTunnelAction",
                "+  | OpenTunnelAction",
                "   | RequestTunnelAction",
                "@@ -69,7 +69,7 @@ export type Action =",
                "-export type AddOpenTunnelAction = {",
                "-  type: 'ADD_OPEN_TUNNEL',",
                "+export type CloseTunnelAction = {",
                "+  type: 'CLOSE_TUNNEL',",
                "   payload: {",
                "     tunnel: Tunnel,",
                "-    close: (?Error) => void,",
                "+    error: ?Error,",
                "   },",
                "@@ -77,7 +77,7 @@ export type AddOpenTunnelAction = {",
                "-export type CloseTunnelAction = {",
                "-  type: 'CLOSE_TUNNEL',",
                "+export type OpenTunnelAction = {",
                "+  type: 'OPEN_TUNNEL',",
                "   payload: {",
                "     tunnel: Tunnel,",
                "-    error: ?Error,",
                "+    close: (?Error) => void,",
                "   },"
            ],
            "changed_files": [
                "pkg/nuclide-ssh-tunnel/lib/redux/Actions.js",
                "pkg/nuclide-ssh-tunnel/lib/redux/Epics.js",
                "pkg/nuclide-ssh-tunnel/lib/redux/Reducers.js",
                "pkg/nuclide-ssh-tunnel/lib/types.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "fd82126f7e9f374d2ba4a128bcdaf2cfb72fc6d6",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520632414,
            "hunks": 2,
            "message": "Generic hgRunCommand functions Reviewed By: aadisriram Differential Revision: D7198523 fbshipit-source-id: eea25093a5fdf136692d8a672245fc78d2f1829f",
            "diff": [
                "diff --git a/pkg/nuclide-hg-repository-client/lib/HgRepositoryClient.js b/pkg/nuclide-hg-repository-client/lib/HgRepositoryClient.js",
                "index f9c288d03..94f874c33 100644",
                "--- a/pkg/nuclide-hg-repository-client/lib/HgRepositoryClient.js",
                "+++ b/pkg/nuclide-hg-repository-client/lib/HgRepositoryClient.js",
                "@@ -1318,2 +1318,10 @@ export class HgRepositoryClient {",
                "   }",
                "+",
                "+  runCommand(args: Array<string>): Observable<string> {",
                "+    return this._service.runCommand(args).refCount();",
                "+  }",
                "+",
                "+  observeExecution(args: Array<string>): Observable<LegacyProcessMessage> {",
                "+    return this._service.observeExecution(args).refCount();",
                "+  }",
                " }",
                "diff --git a/pkg/nuclide-hg-rpc/lib/HgService.js b/pkg/nuclide-hg-rpc/lib/HgService.js",
                "index 9ef2dd21c..95ec39bc4 100644",
                "--- a/pkg/nuclide-hg-rpc/lib/HgService.js",
                "+++ b/pkg/nuclide-hg-rpc/lib/HgService.js",
                "@@ -1748,2 +1748,18 @@ export class HgService {",
                "   }",
                "+",
                "+  runCommand(args: Array<string>): ConnectableObservable<string> {",
                "+    const execOptions = {",
                "+      cwd: this._workingDirectory,",
                "+    };",
                "+    return hgRunCommand(args, execOptions).publish();",
                "+  }",
                "+",
                "+  observeExecution(",
                "+    args: Array<string>,",
                "+  ): ConnectableObservable<LegacyProcessMessage> {",
                "+    const execOptions = {",
                "+      cwd: this._workingDirectory,",
                "+    };",
                "+    return hgObserveExecution(args, execOptions).publish();",
                "+  }",
                " }"
            ],
            "changed_files": [
                "pkg/nuclide-hg-repository-client/lib/HgRepositoryClient.js",
                "pkg/nuclide-hg-rpc/lib/HgService.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "3547ee4b8e25c8e1d0f91d48d6e65397a06e029d",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521335844,
            "hunks": 5,
            "message": "Reject tunnel promise on onClose errors Summary: Stopped calling `onClose` when `onOpen` hasn't been called. I also wrapped the errors in new Error so that when producing a stack trace we also have the local stack and not only the remote one. Differential Revision: D7301312 fbshipit-source-id: a9f939d93b05f6edadd87934b5fd00c14a5fa436",
            "diff": [
                "diff --git a/pkg/nuclide-adb-sdb-base/lib/Tunneling.js b/pkg/nuclide-adb-sdb-base/lib/Tunneling.js",
                "index bb4e1990e..3ad96a430 100644",
                "--- a/pkg/nuclide-adb-sdb-base/lib/Tunneling.js",
                "+++ b/pkg/nuclide-adb-sdb-base/lib/Tunneling.js",
                "@@ -116,3 +116,3 @@ async function _requestTunnelFromService(",
                "         } else {",
                "-          reject(error);",
                "+          reject(new Error(error));",
                "         }",
                "diff --git a/pkg/nuclide-ssh-tunnel/lib/redux/Epics.js b/pkg/nuclide-ssh-tunnel/lib/redux/Epics.js",
                "index c59027151..c4fe1206c 100644",
                "--- a/pkg/nuclide-ssh-tunnel/lib/redux/Epics.js",
                "+++ b/pkg/nuclide-ssh-tunnel/lib/redux/Epics.js",
                "@@ -68,2 +68,3 @@ export function requestTunnelEpic(",
                "+      let isTunnelOpen = false;",
                "       const open = () => {",
                "@@ -80,2 +81,3 @@ export function requestTunnelEpic(",
                "               });",
                "+              isTunnelOpen = true;",
                "               store.dispatch(Actions.setTunnelState(tunnel, 'ready'));",
                "@@ -92,3 +94,8 @@ export function requestTunnelEpic(",
                "           },",
                "-          error: error => store.dispatch(Actions.closeTunnel(tunnel, error)),",
                "+          error: error => {",
                "+            if (!isTunnelOpen) {",
                "+              onOpen(error);",
                "+            }",
                "+            store.dispatch(Actions.closeTunnel(tunnel, error));",
                "+          },",
                "         });",
                "@@ -98,2 +105,5 @@ export function requestTunnelEpic(",
                "         subscription.unsubscribe();",
                "+        if (!isTunnelOpen) {",
                "+          return;",
                "+        }",
                "         let message;"
            ],
            "changed_files": [
                "pkg/nuclide-adb-sdb-base/lib/Tunneling.js",
                "pkg/nuclide-ssh-tunnel/lib/redux/Epics.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "26513995170792bd4d88bdd657d23801a944b42d",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520642823,
            "hunks": 2,
            "message": "Track when diagnostics popups are shown Summary: Previously, this was only done if they were shown from the gutter. Reviewed By: captbaritone Differential Revision: D7208215 fbshipit-source-id: d8b364a19c3b5233fbf9496fd2e3b0578dc22e20",
            "diff": [
                "diff --git a/modules/atom-ide-ui/pkg/atom-ide-diagnostics-ui/lib/ui/DiagnosticsPopup.js b/modules/atom-ide-ui/pkg/atom-ide-diagnostics-ui/lib/ui/DiagnosticsPopup.js",
                "index 631489151..771761e26 100644",
                "--- a/modules/atom-ide-ui/pkg/atom-ide-diagnostics-ui/lib/ui/DiagnosticsPopup.js",
                "+++ b/modules/atom-ide-ui/pkg/atom-ide-diagnostics-ui/lib/ui/DiagnosticsPopup.js",
                "@@ -18,2 +18,3 @@ import * as React from 'react';",
                " import classnames from 'classnames';",
                "+import analytics from 'nuclide-commons-atom/analytics';",
                " import {mapUnion} from 'nuclide-commons/collection';",
                "@@ -96,11 +97,23 @@ function getCodeActions(",
                " // TODO move LESS styles to nuclide-ui",
                "-export const DiagnosticsPopup = (props: DiagnosticsPopupProps) => {",
                "-  const {fixer, goToLocation, codeActionsForMessage, messages, ...rest} = props;",
                "-  return (",
                "-    <div className=\"diagnostics-popup\" {...rest}>",
                "-      {messages.map(",
                "-        renderMessage.bind(null, fixer, goToLocation, codeActionsForMessage),",
                "-      )}",
                "-    </div>",
                "-  );",
                "-};",
                "+export class DiagnosticsPopup extends React.Component<DiagnosticsPopupProps> {",
                "+  componentDidMount() {",
                "+    analytics.track('diagnostics-show-popup');",
                "+  }",
                "+",
                "+  render() {",
                "+    const {",
                "+      fixer,",
                "+      goToLocation,",
                "+      codeActionsForMessage,",
                "+      messages,",
                "+      ...rest",
                "+    } = this.props;",
                "+    return (",
                "+      <div className=\"diagnostics-popup\" {...rest}>",
                "+        {messages.map(",
                "+          renderMessage.bind(null, fixer, goToLocation, codeActionsForMessage),",
                "+        )}",
                "+      </div>",
                "+    );",
                "+  }",
                "+}"
            ],
            "changed_files": [
                "modules/atom-ide-ui/pkg/atom-ide-diagnostics-ui/lib/ui/DiagnosticsPopup.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "e75664472ae61e74ded42f3445f59c4aeef9c564",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521484587,
            "hunks": 7,
            "message": "Add project path utils and usage (3 of 7) Summary: Adds project path utils and basic UI that utilizes it. Reviewed By: hansonw Differential Revision: D7190668 fbshipit-source-id: 7190c195f63fc19c8b4b40d624696bae95af34e3",
            "diff": [
                "diff --git a/modules/nuclide-commons-ui/addTooltip.js b/modules/nuclide-commons-ui/addTooltip.js",
                "index 4c2517c65..04b9a3187 100644",
                "--- a/modules/nuclide-commons-ui/addTooltip.js",
                "+++ b/modules/nuclide-commons-ui/addTooltip.js",
                "@@ -27,3 +27,3 @@ let _timeoutHandle: ?TimeoutID;",
                " /**",
                "- * Adds a self-disposing Atom's tooltip to a react element.",
                "+ * Adds a self-disposing Atom tooltip to a react element.",
                "  *",
                "diff --git a/pkg/nuclide-remote-projects/lib/connection-profile-utils.js b/pkg/nuclide-remote-projects/lib/connection-profile-utils.js",
                "index d16fafce0..b37629ef4 100644",
                "--- a/pkg/nuclide-remote-projects/lib/connection-profile-utils.js",
                "+++ b/pkg/nuclide-remote-projects/lib/connection-profile-utils.js",
                "@@ -36,7 +36,9 @@ import lookupPreferIpv6 from '../../nuclide-remote-connection/lib/lookup-prefer-",
                "  */",
                "-export function getDefaultConnectionProfile(options?: {",
                "-  initialServer: string,",
                "-  initialCwd: string,",
                "-  initialRemoteServerCommand?: string,",
                "-}): NuclideRemoteConnectionProfile {",
                "+export function getDefaultConnectionProfile(",
                "+  options?: {",
                "+    initialServer?: string,",
                "+    initialCwd?: string,",
                "+    initialRemoteServerCommand?: string,",
                "+  } = {},",
                "+): NuclideRemoteConnectionProfile {",
                "   const defaultConnectionSettings = getDefaultConfig();",
                "@@ -81,10 +83,15 @@ export function getDefaultConnectionProfile(options?: {",
                "   };",
                "-  if (options != null) {",
                "-    dialogSettings.cwd = options.initialCwd;",
                "+",
                "+  if (options.initialServer != null) {",
                "     dialogSettings.server = options.initialServer;",
                "-    // flowlint-next-line sketchy-null-string:off",
                "-    if (options.initialRemoteServerCommand) {",
                "-      dialogSettings.remoteServerCommand = options.initialRemoteServerCommand;",
                "-    }",
                "   }",
                "+",
                "+  if (options.initialCwd != null) {",
                "+    dialogSettings.cwd = options.initialCwd;",
                "+  }",
                "+",
                "+  if (options.initialRemoteServerCommand != null) {",
                "+    dialogSettings.remoteServerCommand = options.initialRemoteServerCommand;",
                "+  }",
                "+",
                "   // Due to a previous bug in the sshPort type, we may need to do this cast to",
                "diff --git a/pkg/nuclide-remote-projects/lib/main.js b/pkg/nuclide-remote-projects/lib/main.js",
                "index 0df81aebd..63c0ffe3f 100644",
                "--- a/pkg/nuclide-remote-projects/lib/main.js",
                "+++ b/pkg/nuclide-remote-projects/lib/main.js",
                "@@ -424,4 +424,15 @@ export function activate(",
                "   subscriptions.add(",
                "-    atom.commands.add('atom-workspace', 'nuclide-remote-projects:connect', () =>",
                "-      openConnectionDialog(),",
                "+    atom.commands.add(",
                "+      'atom-workspace',",
                "+      'nuclide-remote-projects:connect',",
                "+      event => {",
                "+        let args;",
                "+        if (event.detail != null) {",
                "+          const {initialCwd} = event.detail;",
                "+          if (initialCwd != null) {",
                "+            args = {initialCwd};",
                "+          }",
                "+        }",
                "+        openConnectionDialog(args);",
                "+      },",
                "     ),",
                "diff --git a/pkg/nuclide-remote-projects/lib/open-connection.js b/pkg/nuclide-remote-projects/lib/open-connection.js",
                "index 6b755c9aa..777c980b9 100644",
                "--- a/pkg/nuclide-remote-projects/lib/open-connection.js",
                "+++ b/pkg/nuclide-remote-projects/lib/open-connection.js",
                "@@ -35,4 +35,4 @@ import {Observable} from 'rxjs';",
                " export type OpenConnectionDialogOptions = {",
                "-  initialServer: string,",
                "-  initialCwd: string,",
                "+  initialServer?: string,",
                "+  initialCwd?: string,",
                "   initialRemoteServerCommand?: string,"
            ],
            "changed_files": [
                "modules/nuclide-commons-ui/addTooltip.js",
                "pkg/nuclide-remote-projects/lib/connection-profile-utils.js",
                "pkg/nuclide-remote-projects/lib/main.js",
                "pkg/nuclide-remote-projects/lib/open-connection.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "5e08ca65aef6c56a97f75d60a1ef0b3b1e8e554c",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521423060,
            "hunks": 5,
            "message": "Fix certificate location and permissions Summary: - Certs were going into the homedir! Make them go to `/tmp/.big-dig-certsXXX`. - Make sure certs are not group/other readable/writable. Reviewed By: bolinfest Differential Revision: D7311813 fbshipit-source-id: 1a2b5f245347a3ad7cd4554f0e73b2ac325350e5",
            "diff": [
                "diff --git a/modules/big-dig/src/server/certificates.js b/modules/big-dig/src/server/certificates.js",
                "index 1e440f936..8c02366b9 100644",
                "--- a/modules/big-dig/src/server/certificates.js",
                "+++ b/modules/big-dig/src/server/certificates.js",
                "@@ -38,35 +38,42 @@ export async function generateCertificates(",
                "   openSSLConfigPath: string,",
                "-  sharedCertsDir: string,",
                "   expirationDays: number,",
                " ): Promise<CertificatePaths> {",
                "-  const paths = await generateKeyPairPaths(sharedCertsDir);",
                "-  const env = generateEnvironmentForOpenSSLCalls(serverCommonName);",
                "-  await generateCA(paths.caKey, paths.caCert, expirationDays, env);",
                "-  await Promise.all([",
                "-    generateKeyAndCertificate(",
                "-      paths.caKey,",
                "-      paths.caCert,",
                "-      expirationDays,",
                "-      paths.serverKey,",
                "-      paths.serverCsr,",
                "-      paths.serverCert,",
                "-      openSSLConfigPath,",
                "-      serverCommonName,",
                "-      1,",
                "-      env,",
                "-    ),",
                "-    generateKeyAndCertificate(",
                "-      paths.caKey,",
                "-      paths.caCert,",
                "-      expirationDays,",
                "-      paths.clientKey,",
                "-      paths.clientCsr,",
                "-      paths.clientCert,",
                "-      openSSLConfigPath,",
                "-      clientCommonName,",
                "-      2,",
                "-      env,",
                "-    ),",
                "-  ]);",
                "-  return paths;",
                "+  // Set the process umask to 0077 to ensure that certificates have 0700 permissions.",
                "+  // The spawned OpenSSL processes will inherit the umask.",
                "+  const oldUmask = process.umask();",
                "+  process.umask(0o77);",
                "+  try {",
                "+    const paths = await generateKeyPairPaths();",
                "+    const env = generateEnvironmentForOpenSSLCalls(serverCommonName);",
                "+    await generateCA(paths.caKey, paths.caCert, expirationDays, env);",
                "+    await Promise.all([",
                "+      generateKeyAndCertificate(",
                "+        paths.caKey,",
                "+        paths.caCert,",
                "+        expirationDays,",
                "+        paths.serverKey,",
                "+        paths.serverCsr,",
                "+        paths.serverCert,",
                "+        openSSLConfigPath,",
                "+        serverCommonName,",
                "+        1,",
                "+        env,",
                "+      ),",
                "+      generateKeyAndCertificate(",
                "+        paths.caKey,",
                "+        paths.caCert,",
                "+        expirationDays,",
                "+        paths.clientKey,",
                "+        paths.clientCsr,",
                "+        paths.clientCert,",
                "+        openSSLConfigPath,",
                "+        clientCommonName,",
                "+        2,",
                "+        env,",
                "+      ),",
                "+    ]);",
                "+    return paths;",
                "+  } finally {",
                "+    process.umask(oldUmask);",
                "+  }",
                " }",
                "@@ -158,10 +165,10 @@ async function generateKeyAndCertificate(",
                " /**",
                "- * Creates a new directory under `sharedCertsDir` where all of the certificate data for one instance",
                "+ * Creates a new temporary directory where all of the certificate data for one instance",
                "  * of the server should be written.",
                "  */",
                "-async function generateKeyPairPaths(",
                "-  sharedCertsDir: string,",
                "-): Promise<CertificatePaths> {",
                "-  const certsDir = await fs.mkdtemp(sharedCertsDir);",
                "-  const pathPrefix = nuclideUri.join(certsDir, 'nuclide');",
                "+async function generateKeyPairPaths(): Promise<CertificatePaths> {",
                "+  const certsDir = await fs.mkdtemp(",
                "+    nuclideUri.join(os.tmpdir(), '.big-dig-certs'),",
                "+  );",
                "+  const pathPrefix = nuclideUri.join(certsDir, 'big-dig');",
                "   return {",
                "diff --git a/modules/big-dig/src/server/main.js b/modules/big-dig/src/server/main.js",
                "index 7f94a1bc6..4609e4703 100644",
                "--- a/modules/big-dig/src/server/main.js",
                "+++ b/modules/big-dig/src/server/main.js",
                "@@ -62,3 +62,2 @@ export async function generateCertificatesAndStartServer({",
                "     openSSLConfigPath,",
                "-    sharedCertsDir,",
                "     expirationDays,"
            ],
            "changed_files": [
                "modules/big-dig/src/server/certificates.js",
                "modules/big-dig/src/server/main.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "da86576985e34767f2fdebe0e5cdde05c8cd7a54",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521246691,
            "hunks": 2,
            "message": "Forward arguments from `npm test`. Summary: This makes it possible to run tests from specific files/folders from the command line. Reviewed By: wbinnssmith Differential Revision: D7309175 fbshipit-source-id: cd7b1d0453ada882b44bfabe0d8242977b3954a5",
            "diff": [
                "diff --git a/modules/nuclide-jest/bin/jest-node.js b/modules/nuclide-jest/bin/jest-node.js",
                "index 6b7017503..ee4516c84 100644",
                "--- a/modules/nuclide-jest/bin/jest-node.js",
                "+++ b/modules/nuclide-jest/bin/jest-node.js",
                "@@ -23,11 +23,14 @@ const jestCLI = require('jest-cli');",
                " const config = require('../jest.config.js');",
                "+const yargs = require('yargs');",
                "+const {options} = require('jest-cli/build/cli/args');",
                "-jestCLI.runCLI(",
                "-  {",
                "-    config: JSON.stringify(config),",
                "-    watch: process.argv.includes('--watch'),",
                "-    watchAll: process.argv.includes('--watchAll'),",
                "-    watchman: true,",
                "-  },",
                "-  [process.cwd()]",
                "-).then(response => process.exit(response.results.success ? 0 : 1));",
                "+// We reach into the internals of Jest to get the options it uses for arg",
                "+// parsing with yargs to ensure we parse the args consistently with Jest.",
                "+const {argv} = yargs(process.argv.slice(2)).options(options);",
                "+// Then we override some of the options with hardcoded values.",
                "+argv.watchman = true;",
                "+argv.config = JSON.stringify(config);",
                "+",
                "+jestCLI",
                "+  .runCLI(argv, [process.cwd()])",
                "+  .then(response => process.exit(response.results.success ? 0 : 1));",
                "diff --git a/modules/nuclide-jest/package.json b/modules/nuclide-jest/package.json",
                "index 7dce88b94..75b306cfc 100644",
                "--- a/modules/nuclide-jest/package.json",
                "+++ b/modules/nuclide-jest/package.json",
                "@@ -19,3 +19,4 @@",
                "     \"react-dom\": \"16.2.0\",",
                "-    \"temp\": \"0.8.3\"",
                "+    \"temp\": \"0.8.3\",",
                "+    \"yargs\": \"3.32.0\"",
                "   }"
            ],
            "changed_files": [
                "modules/nuclide-jest/bin/jest-node.js",
                "modules/nuclide-jest/package.json"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "e5053767c7fe34ef4735c14ce0886011ea840609",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521153557,
            "hunks": 2,
            "message": "Allow console arrow keys to scroll through history in multi-line input Summary: Cycle through command history if cursor is on the first or last line Reviewed By: pelmers Differential Revision: D7294257 fbshipit-source-id: 121f572cf20704aac070192b4817ba8f0816bf1b",
            "diff": [
                "diff --git a/modules/atom-ide-ui/pkg/atom-ide-console/lib/ui/InputArea.js b/modules/atom-ide-ui/pkg/atom-ide-console/lib/ui/InputArea.js",
                "index 06e210039..6e00c969d 100644",
                "--- a/modules/atom-ide-ui/pkg/atom-ide-console/lib/ui/InputArea.js",
                "+++ b/modules/atom-ide-ui/pkg/atom-ide-console/lib/ui/InputArea.js",
                "@@ -106,3 +106,6 @@ export default class InputArea extends React.Component<Props, State> {",
                "       this._submit();",
                "-    } else if (event.which === UP_KEY_CODE && editor.getLineCount() <= 1) {",
                "+    } else if (",
                "+      event.which === UP_KEY_CODE &&",
                "+      (editor.getLineCount() <= 1 || editor.getCursorBufferPosition().row === 0)",
                "+    ) {",
                "       if (this.props.history.length === 0 || isAutocompleteOpen) {",
                "@@ -124,3 +127,7 @@ export default class InputArea extends React.Component<Props, State> {",
                "       );",
                "-    } else if (event.which === DOWN_KEY_CODE && editor.getLineCount() <= 1) {",
                "+    } else if (",
                "+      event.which === DOWN_KEY_CODE &&",
                "+      (editor.getLineCount() <= 1 ||",
                "+        editor.getCursorBufferPosition().row === editor.getLineCount() - 1)",
                "+    ) {",
                "       if (this.props.history.length === 0 || isAutocompleteOpen) {"
            ],
            "changed_files": [
                "modules/atom-ide-ui/pkg/atom-ide-console/lib/ui/InputArea.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "a22aabbb63338cc72ca7584f24ae96ecce8cbfbf",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521236671,
            "hunks": 1,
            "message": "Add featuregroups (3 of 4) Summary: Add preliminary featureGroups to Nuclide. These are (and should be) subject to change, but a preliminary version is necessary for project configs to work. Reviewed By: wbinnssmith Differential Revision: D7244677 fbshipit-source-id: d1ebc0326e79d0da1dfd920a63a23210222d1e47",
            "diff": [
                "diff --git a/lib/featureGroups.json b/lib/featureGroups.json",
                "new file mode 100644",
                "index 000000000..aca4f4a5a",
                "--- /dev/null",
                "+++ b/lib/featureGroups.json",
                "@@ -0,0 +1,162 @@",
                "+{",
                "+   \"nuclide-required\":[",
                "+      \"nuclide-current-working-directory\",",
                "+      \"nuclide-remote-atom\",",
                "+      \"nuclide-remote-projects\"",
                "+   ],",
                "+   \"nuclide-core\":[",
                "+      \"nuclide-atom-notifications\",",
                "+      \"nuclide-autocomplete\",",
                "+      \"nuclide-blame\",",
                "+      \"nuclide-blame-provider-hg\",",
                "+      \"nuclide-bookshelf\",",
                "+      \"nuclide-clipboard-path\",",
                "+      \"nuclide-code-search\",",
                "+      \"nuclide-context-view\",",
                "+      \"nuclide-debugger\",",
                "+      \"nuclide-debugger-new\",",
                "+      \"nuclide-debugger-vsp\",",
                "+      \"nuclide-deep-link\",",
                "+      \"nuclide-definition-preview\",",
                "+      \"nuclide-definition-preview-provider\",",
                "+      \"nuclide-deprecation-cop\",",
                "+      \"nuclide-diagnostics-extras\",",
                "+      \"nuclide-distraction-free-mode\",",
                "+      \"nuclide-file-family\",",
                "+      \"nuclide-file-family-projectionist\",",
                "+      \"nuclide-file-tree\",",
                "+      \"nuclide-file-watcher\",",
                "+      \"nuclide-fuzzy-filename-provider\",",
                "+      \"nuclide-health\",",
                "+      \"nuclide-hg-repository\",",
                "+      \"nuclide-infer-al\",",
                "+      \"nuclide-json\",",
                "+      \"nuclide-key-binding-hint-status\",",
                "+      \"nuclide-move-item-to-available-pane\",",
                "+      \"nuclide-navigation-stack\",",
                "+      \"nuclide-navigation-stack-status-bar\",",
                "+      \"nuclide-notifications\",",
                "+      \"nuclide-nux\",",
                "+      \"nuclide-open-filenames-provider\",",
                "+      \"nuclide-outline-view-extras\",",
                "+      \"nuclide-project\",",
                "+      \"nuclide-quick-open\",",
                "+      \"nuclide-recent-files-provider\",",
                "+      \"nuclide-recent-files-service\",",
                "+      \"nuclide-refactorizer\",",
                "+      \"nuclide-related-files\",",
                "+      \"nuclide-settings\",",
                "+      \"nuclide-ssh-tunnel\",",
                "+      \"nuclide-syntactic-selection\",",
                "+      \"nuclide-task-runner\",",
                "+      \"nuclide-terminal\",",
                "+      \"nuclide-test-runner\",",
                "+      \"nuclide-type-coverage\",",
                "+      \"nuclide-type-hint\",",
                "+      \"nuclide-ui\",",
                "+      \"nuclide-unicode-datatip\",",
                "+      \"nuclide-url-hyperclick\",",
                "+      \"nuclide-vcs-base\",",
                "+      \"nuclide-vcs-log\",",
                "+      \"nuclide-working-sets\",",
                "+      \"sample-datatip\",",
                "+      \"sample-diagnostics-tester\",",
                "+      \"sample-executor\",",
                "+      \"sample-logging-console\",",
                "+      \"sample-lsp-tester\",",
                "+      \"sample-nuclide-contributors\",",
                "+      \"sample-nux-example\",",
                "+      \"sample-quickopen-provider-example\",",
                "+      \"sample-task-runner\",",
                "+      \"sample-ui-playground\",",
                "+      \"sample-web-view\",",
                "+      \"sample-workspace-views-example\"",
                "+   ],",
                "+   \"android\":[",
                "+      \"nuclide-adb-logcat\",",
                "+      \"nuclide-adb-sdb\",",
                "+      \"nuclide-buck\",",
                "+      \"nuclide-debugger-native\",",
                "+      \"nuclide-device-panel\",",
                "+      \"nuclide-device-panel-android\"",
                "+   ],",
                "+   \"cpp\":[",
                "+      \"nuclide-clang\",",
                "+      \"nuclide-clang-base\",",
                "+      \"nuclide-cquery-lsp\",",
                "+      \"nuclide-ctags\"",
                "+   ],",
                "+   \"flow\":[",
                "+      \"nuclide-flow\"",
                "+   ],",
                "+   \"graphql\":[",
                "+      \"nuclide-graphql\"",
                "+   ],",
                "+   \"hack\":[",
                "+      \"nuclide-debugger-php\",",
                "+      \"nuclide-hack\",",
                "+      \"nuclide-http-request-sender\",",
                "+      \"nuclide-hhvm\",",
                "+      \"nuclide-language-hack\"",
                "+   ],",
                "+   \"ios\":[",
                "+      \"nuclide-buck\",",
                "+      \"nuclide-buck-base\",",
                "+      \"nuclide-buck-ios\",",
                "+      \"nuclide-debugger-native\",",
                "+      \"nuclide-device-panel\",",
                "+      \"nuclide-device-panel-ios\",",
                "+      \"nuclide-fbsimctl\",",
                "+      \"nuclide-ios-simulator-logs\",",
                "+      \"nuclide-swift\"",
                "+   ],",
                "+   \"java\":[",
                "+      \"nuclide-buck\",",
                "+      \"nuclide-buck-base\"",
                "+   ],",
                "+   \"javascript\":[",
                "+      \"nuclide-buck\",",
                "+      \"nuclide-buck-base\",",
                "+      \"nuclide-js-imports-client\",",
                "+      \"nuclide-metro\"",
                "+   ],",
                "+   \"ocaml\":[",
                "+      \"nuclide-ocaml\"",
                "+   ],",
                "+   \"react\":[",
                "+      \"nuclide-buck\",",
                "+      \"nuclide-buck-base\",",
                "+      \"nuclide-js-imports-client\",",
                "+      \"nuclide-js-imports-server\",",
                "+      \"nuclide-metro\",",
                "+      \"nuclide-react-inspector\"",
                "+   ],",
                "+   \"react-native\":[",
                "+      \"nuclide-buck\",",
                "+      \"nuclide-buck-base\",",
                "+      \"nuclide-js-imports-client\",",
                "+      \"nuclide-js-imports-server\",",
                "+      \"nuclide-metro\",",
                "+      \"nuclide-react-inspector\"",
                "+   ],",
                "+   \"objc\":[",
                "+      \"nuclide-clang\",",
                "+      \"nuclide-cquery-lsp\",",
                "+      \"nuclide-ctags\",",
                "+      \"nuclide-objc\"",
                "+   ],",
                "+   \"infer\":[",
                "+      \"nuclide-language-infer-al\"",
                "+   ],",
                "+   \"oculus\":[",
                "+      \"nuclide-buck\",",
                "+      \"nuclide-buck-base\"",
                "+   ],",
                "+   \"python\":[",
                "+      \"nuclide-python\"",
                "+   ],",
                "+   \"reason\":[",
                "+      \"nuclide-ocaml\",",
                "+      \"nuclide-language-reason\"",
                "+   ]",
                "+}"
            ],
            "changed_files": [
                "lib/featureGroups.json"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "06bb37b425910b1fed818c0f7772fdfd5ad4aba8",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520624830,
            "hunks": 4,
            "message": "Allow copying filename from \"Changed files\" Summary: This was requested by a user. It's useful to copy filenames for referencing, etc. I made it so you will auto-select the entire filename and never select the `(file added - 2 lines)` part. Reviewed By: aadisriram Differential Revision: D7176968 fbshipit-source-id: f8306dd277affa886909e60a87e74879214fda7c",
            "diff": [
                "diff --git a/pkg/nuclide-ui/FileChanges.js b/pkg/nuclide-ui/FileChanges.js",
                "index 0eaf84648..46e4adda0 100644",
                "--- a/pkg/nuclide-ui/FileChanges.js",
                "+++ b/pkg/nuclide-ui/FileChanges.js",
                "@@ -136,3 +136,13 @@ export class HunkDiff extends React.Component<HunkProps> {",
                "     super(props);",
                "-    this._disposables = new UniversalDisposable();",
                "+    this._disposables = new UniversalDisposable(",
                "+      // enable copying filename",
                "+      atom.contextMenu.add({",
                "+        '.nuclide-ui-file-changes-item': [",
                "+          {",
                "+            label: 'Copy',",
                "+            command: 'core:copy',",
                "+          },",
                "+        ],",
                "+      }),",
                "+    );",
                "   }",
                "@@ -346,3 +356,3 @@ export default class FileChanges extends React.Component<Props> {",
                "     const diffDetails = (",
                "-      <span>",
                "+      <span className=\"nuclide-ui-file-changes-details\">",
                "         {annotationComponent} (",
                "@@ -356,3 +366,7 @@ export default class FileChanges extends React.Component<Props> {",
                "       fullPath != null ? (",
                "-        <a onClick={this._handleFilenameClick}>{fileName}</a>",
                "+        <a",
                "+          className=\"nuclide-ui-file-changes-name\"",
                "+          onClick={this._handleFilenameClick}>",
                "+          {fileName}",
                "+        </a>",
                "       ) : (",
                "@@ -366,3 +380,8 @@ export default class FileChanges extends React.Component<Props> {",
                "     const headline = (",
                "-      <span className=\"nuclide-ui-file-changes-item\">",
                "+      <span",
                "+        className={classnames(",
                "+          'nuclide-ui-file-changes-item',",
                "+          'native-key-bindings',",
                "+        )}",
                "+        tabIndex={-1}>",
                "         {renderedFilename} {diffDetails}"
            ],
            "changed_files": [
                "pkg/nuclide-ui/FileChanges.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "ca9d7bddeb74600c18407706b3d547c05db3687e",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521766937,
            "hunks": 28,
            "message": "Remove heartbeat from RpcConnection's transporter Summary: The heartbeat (one that lives in `NuclideSocket`) is a concept related with the `ServerConnection` rather than `RpcConnection`. This diff - exposes `heartbeat` through `ServerConnection.getHeartbeat()` - removes `TransportWithHeartbeat` type - returns `bigDigClient` to `ServerConnection` which can use it to expose the heartbeat Reviewed By: semmypurewal Differential Revision: D7331113 fbshipit-source-id: 80a908a4d617315f2fa77639ae5e06a8f1720a5f",
            "diff": [
                "diff --git a/modules/big-dig/src/client/BigDigClient.js b/modules/big-dig/src/client/BigDigClient.js",
                "index 3a995329e..d3c2cf7d3 100644",
                "--- a/modules/big-dig/src/client/BigDigClient.js",
                "+++ b/modules/big-dig/src/client/BigDigClient.js",
                "@@ -26,3 +26,2 @@ export class BigDigClient {",
                "   _logger: log4js$Logger;",
                "-  _heartbeat: XhrConnectionHeartbeat;",
                "   _tagToSubject: Map<string, Subject<string>>;",
                "@@ -30,6 +29,3 @@ export class BigDigClient {",
                "-  constructor(",
                "-    nuclideSocketTransport: NuclideSocket,",
                "-    heartbeat: XhrConnectionHeartbeat,",
                "-  ) {",
                "+  constructor(nuclideSocketTransport: NuclideSocket) {",
                "     this._logger = getLogger();",
                "@@ -59,4 +55,2 @@ export class BigDigClient {",
                "     });",
                "-",
                "-    this._heartbeat = heartbeat;",
                "   }",
                "@@ -89,3 +83,3 @@ export class BigDigClient {",
                "   getHeartbeat(): XhrConnectionHeartbeat {",
                "-    return this._heartbeat;",
                "+    return this._transport.getHeartbeat();",
                "   }",
                "diff --git a/modules/big-dig/src/client/createBigDigClient.js b/modules/big-dig/src/client/createBigDigClient.js",
                "index d32d31dae..8a1ee51d6 100644",
                "--- a/modules/big-dig/src/client/createBigDigClient.js",
                "+++ b/modules/big-dig/src/client/createBigDigClient.js",
                "@@ -32,2 +32,15 @@ export default (async function createBigDigClient(",
                " ): Promise<BigDigClient> {",
                "+  const nuclideSocket = createNuclideSocket(config);",
                "+  const client = new BigDigClient(nuclideSocket);",
                "+  try {",
                "+    // Make sure we're able to make the initial connection",
                "+    await nuclideSocket.testConnection();",
                "+    return client;",
                "+  } catch (error) {",
                "+    client.close();",
                "+    throw error;",
                "+  }",
                "+});",
                "+",
                "+function createNuclideSocket(config: BigDigClientConfig): NuclideSocket {",
                "   const options = {",
                "@@ -51,11 +64,3 @@ export default (async function createBigDigClient(",
                "-  const client = new BigDigClient(nuclideSocket, nuclideSocket.getHeartbeat());",
                "-  try {",
                "-    // Make sure we're able to make the initial connection",
                "-    await nuclideSocket.testConnection();",
                "-    return client;",
                "-  } catch (error) {",
                "-    client.close();",
                "-    throw error;",
                "-  }",
                "-});",
                "+  return nuclideSocket;",
                "+}",
                "diff --git a/pkg/nuclide-remote-connection/lib/ServerConnection.js b/pkg/nuclide-remote-connection/lib/ServerConnection.js",
                "index 7f6d7114b..cb6514088 100644",
                "--- a/pkg/nuclide-remote-connection/lib/ServerConnection.js",
                "+++ b/pkg/nuclide-remote-connection/lib/ServerConnection.js",
                "@@ -11,4 +11,5 @@",
                "+import type {XhrConnectionHeartbeat} from 'big-dig/src/client/XhrConnectionHeartbeat';",
                " import type {NuclideUri} from 'nuclide-commons/nuclideUri';",
                "-import type {TransportWithHeartbeat} from '../../nuclide-rpc';",
                "+import type {Transport} from '../../nuclide-rpc';",
                " import type {RemoteConnection} from './RemoteConnection';",
                "@@ -74,3 +75,4 @@ export class ServerConnection {",
                "   _healthNotifier: ?ConnectionHealthNotifier;",
                "-  _client: ?RpcConnection<TransportWithHeartbeat>;",
                "+  _heartbeat: ?XhrConnectionHeartbeat;",
                "+  _client: ?RpcConnection<Transport>;",
                "   _connections: Array<RemoteConnection>;",
                "@@ -128,2 +130,3 @@ export class ServerConnection {",
                "     this._client = null;",
                "+    this._heartbeat = null;",
                "     this._connections = [];",
                "@@ -168,5 +171,3 @@ export class ServerConnection {",
                "       this._config.port,",
                "-      this.getClient()",
                "-        .getTransport()",
                "-        .getHeartbeat(),",
                "+      this.getHeartbeat(),",
                "     );",
                "@@ -228,3 +229,2 @@ export class ServerConnection {",
                "     await this._startRpc();",
                "-    const client = this.getClient();",
                "     const clientVersion = getVersion();",
                "@@ -244,5 +244,3 @@ export class ServerConnection {",
                "       // when we don't have cached credentials yet.",
                "-      const transport = client.getTransport();",
                "-",
                "-      const heartbeatVersion = await transport.getHeartbeat().sendHeartBeat();",
                "+      const heartbeatVersion = await this.getHeartbeat().sendHeartBeat();",
                "       if (clientVersion !== heartbeatVersion) {",
                "@@ -280,2 +278,6 @@ export class ServerConnection {",
                "       this._client = null;",
                "+      if (this._heartbeat) {",
                "+        this._heartbeat.close();",
                "+        this._heartbeat = null;",
                "+      }",
                "     }",
                "@@ -288,3 +290,3 @@ export class ServerConnection {",
                "-  getClient(): RpcConnection<TransportWithHeartbeat> {",
                "+  getClient(): RpcConnection<Transport> {",
                "     invariant(",
                "@@ -296,5 +298,17 @@ export class ServerConnection {",
                "+  getHeartbeat(): XhrConnectionHeartbeat {",
                "+    invariant(",
                "+      !this._closed && this._client != null && this._heartbeat != null,",
                "+      'Server connection has been closed.',",
                "+    );",
                "+    return this._heartbeat;",
                "+  }",
                "+",
                "   async _startRpc(): Promise<void> {",
                "     if (this._config.version === BIG_DIG_VERSION) {",
                "-      this._client = await createBigDigRpcClient(this._config);",
                "+      const {bigDigClient, rpcConnection} = await createBigDigRpcClient(",
                "+        this._config,",
                "+      );",
                "+      this._client = rpcConnection;",
                "+      this._heartbeat = bigDigClient.getHeartbeat();",
                "       return;",
                "@@ -330,3 +344,3 @@ export class ServerConnection {",
                "     const client = RpcConnection.createRemote(",
                "-      (socket: TransportWithHeartbeat),",
                "+      (socket: Transport),",
                "       getAtomSideMarshalers(this.getRemoteHostname()),",
                "@@ -341,2 +355,3 @@ export class ServerConnection {",
                "     this._client = client;",
                "+    this._heartbeat = socket.getHeartbeat();",
                "   }",
                "diff --git a/pkg/nuclide-remote-connection/lib/createBigDigRpcClient.js b/pkg/nuclide-remote-connection/lib/createBigDigRpcClient.js",
                "index 4d73e8ea9..47bb12245 100644",
                "--- a/pkg/nuclide-remote-connection/lib/createBigDigRpcClient.js",
                "+++ b/pkg/nuclide-remote-connection/lib/createBigDigRpcClient.js",
                "@@ -11,4 +11,5 @@",
                "+import type {BigDigClient} from 'big-dig/src/client';",
                " import type {ServerConnectionConfiguration} from './ServerConnection';",
                "-import type {TransportWithHeartbeat} from '../../nuclide-rpc';",
                "+import type {Transport} from '../../nuclide-rpc';",
                "@@ -23,3 +24,6 @@ export default (async function createBigDigRpcClient(",
                "   config: ServerConnectionConfiguration,",
                "-): Promise<RpcConnection<TransportWithHeartbeat>> {",
                "+): Promise<{",
                "+  bigDigClient: BigDigClient,",
                "+  rpcConnection: RpcConnection<Transport>,",
                "+}> {",
                "   const bigDigClient = await createBigDigClient({",
                "@@ -28,3 +32,3 @@ export default (async function createBigDigRpcClient(",
                "   });",
                "-  const bigDigTransport: TransportWithHeartbeat = {",
                "+  const bigDigTransport: Transport = {",
                "     send(message: string) {",
                "@@ -41,13 +45,13 @@ export default (async function createBigDigRpcClient(",
                "     },",
                "-    getHeartbeat() {",
                "-      return bigDigClient.getHeartbeat();",
                "-    },",
                "   };",
                "-  return RpcConnection.createRemote(",
                "-    bigDigTransport,",
                "-    getAtomSideMarshalers(config.host),",
                "-    servicesConfig,",
                "-    {trackSampleRate: 10},",
                "-    SERVICE_FRAMEWORK3_PROTOCOL,",
                "-  );",
                "+  return {",
                "+    bigDigClient,",
                "+    rpcConnection: RpcConnection.createRemote(",
                "+      bigDigTransport,",
                "+      getAtomSideMarshalers(config.host),",
                "+      servicesConfig,",
                "+      {trackSampleRate: 10},",
                "+      SERVICE_FRAMEWORK3_PROTOCOL,",
                "+    ),",
                "+  };",
                " });",
                "diff --git a/pkg/nuclide-remote-projects/lib/RemoteProjectsController.js b/pkg/nuclide-remote-projects/lib/RemoteProjectsController.js",
                "index 490a59434..aea7e71c5 100644",
                "--- a/pkg/nuclide-remote-projects/lib/RemoteProjectsController.js",
                "+++ b/pkg/nuclide-remote-projects/lib/RemoteProjectsController.js",
                "@@ -86,3 +86,3 @@ export default class RemoteProjectsController {",
                "-    const heartbeat = socket.getHeartbeat();",
                "+    const heartbeat = connection.getHeartbeat();",
                "     this._disposables.add(",
                "diff --git a/pkg/nuclide-rpc/lib/index.js b/pkg/nuclide-rpc/lib/index.js",
                "index f9e98dc91..2c644613c 100644",
                "--- a/pkg/nuclide-rpc/lib/index.js",
                "+++ b/pkg/nuclide-rpc/lib/index.js",
                "@@ -11,3 +11,2 @@",
                "-import type {XhrConnectionHeartbeat} from 'big-dig/src/client/XhrConnectionHeartbeat';",
                " import type {Observable} from 'rxjs';",
                "@@ -56,5 +55 @@ export type Transport = {",
                " };",
                "-",
                "-export type TransportWithHeartbeat = Transport & {",
                "-  getHeartbeat(): XhrConnectionHeartbeat,",
                "-};"
            ],
            "changed_files": [
                "modules/big-dig/src/client/BigDigClient.js",
                "modules/big-dig/src/client/createBigDigClient.js",
                "pkg/nuclide-remote-connection/lib/ServerConnection.js",
                "pkg/nuclide-remote-connection/lib/createBigDigRpcClient.js",
                "pkg/nuclide-remote-projects/lib/RemoteProjectsController.js",
                "pkg/nuclide-rpc/lib/index.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "e5de3d2a98446e3961997793c5d1c0e77f03a6c1",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520642121,
            "hunks": 8,
            "message": "Set initial state before opening a tunnel Summary: Sometimes a tunnel could get open very quickly and we'd try to update its state before we had even marked it as `initializing`. The `SET_TUNNEL_STATE` action assumes that we have some kind of state already and would crash on this: ``` invariant(state.get(action.payload.tunnel) != null); ``` Getting rid of the invariant isn't a good idea, because we would update the state to `ready` and immediately overwrite it back to `initializing`. This makes sure the sequence of events happens as intended. Reviewed By: semmypurewal Differential Revision: D7221298 fbshipit-source-id: 80f1f12f28f84f123c80ef96e1db35f78a7d776b",
            "diff": [
                "diff --git a/pkg/nuclide-ssh-tunnel/lib/redux/Actions.js b/pkg/nuclide-ssh-tunnel/lib/redux/Actions.js",
                "index 98a8ba5a3..1d8e7bfe6 100644",
                "--- a/pkg/nuclide-ssh-tunnel/lib/redux/Actions.js",
                "+++ b/pkg/nuclide-ssh-tunnel/lib/redux/Actions.js",
                "@@ -36,2 +36,3 @@ export function openTunnel(",
                "   tunnel: Tunnel,",
                "+  open: () => void,",
                "   close: (?Error) => void,",
                "@@ -40,3 +41,3 @@ export function openTunnel(",
                "     type: OPEN_TUNNEL,",
                "-    payload: {tunnel, close},",
                "+    payload: {tunnel, open, close},",
                "   };",
                "diff --git a/pkg/nuclide-ssh-tunnel/lib/redux/Epics.js b/pkg/nuclide-ssh-tunnel/lib/redux/Epics.js",
                "index 69edef847..c59027151 100644",
                "--- a/pkg/nuclide-ssh-tunnel/lib/redux/Epics.js",
                "+++ b/pkg/nuclide-ssh-tunnel/lib/redux/Epics.js",
                "@@ -65,30 +65,34 @@ export function requestTunnelEpic(",
                "       const connectionFactory = await toService.getConnectionFactory();",
                "-      const events = fromService.createTunnel(",
                "-        tunnelDescriptor,",
                "-        connectionFactory,",
                "-      );",
                "-      const subscription = events.refCount().subscribe({",
                "-        next: event => {",
                "-          if (event.type === 'server_started') {",
                "-            store.getState().consoleOutput.next({",
                "-              text: `Opened tunnel: ${friendlyString}`,",
                "-              level: 'info',",
                "-            });",
                "-            store.dispatch(Actions.setTunnelState(tunnel, 'ready'));",
                "-            onOpen();",
                "-          } else if (event.type === 'client_connected') {",
                "-            clientCount++;",
                "-            store.dispatch(Actions.setTunnelState(tunnel, 'active'));",
                "-          } else if (event.type === 'client_disconnected') {",
                "-            clientCount--;",
                "-            if (clientCount === 0) {",
                "+      let subscription;",
                "+",
                "+      const open = () => {",
                "+        const events = fromService.createTunnel(",
                "+          tunnelDescriptor,",
                "+          connectionFactory,",
                "+        );",
                "+        subscription = events.refCount().subscribe({",
                "+          next: event => {",
                "+            if (event.type === 'server_started') {",
                "+              store.getState().consoleOutput.next({",
                "+                text: `Opened tunnel: ${friendlyString}`,",
                "+                level: 'info',",
                "+              });",
                "               store.dispatch(Actions.setTunnelState(tunnel, 'ready'));",
                "+              onOpen();",
                "+            } else if (event.type === 'client_connected') {",
                "+              clientCount++;",
                "+              store.dispatch(Actions.setTunnelState(tunnel, 'active'));",
                "+            } else if (event.type === 'client_disconnected') {",
                "+              clientCount--;",
                "+              if (clientCount === 0) {",
                "+                store.dispatch(Actions.setTunnelState(tunnel, 'ready'));",
                "+              }",
                "             }",
                "-          }",
                "-        },",
                "-        error: error => store.dispatch(Actions.closeTunnel(tunnel, error)),",
                "-      });",
                "+          },",
                "+          error: error => store.dispatch(Actions.closeTunnel(tunnel, error)),",
                "+        });",
                "+      };",
                "-      return Actions.openTunnel(tunnel, error => {",
                "+      const close = error => {",
                "         subscription.unsubscribe();",
                "@@ -108,3 +112,5 @@ export function requestTunnelEpic(",
                "         onClose(error);",
                "-      });",
                "+      };",
                "+",
                "+      return Actions.openTunnel(tunnel, open, close);",
                "     })",
                "@@ -119,2 +125,15 @@ export function requestTunnelEpic(",
                "+export function openTunnelEpic(",
                "+  actions: ActionsObservable<Action>,",
                "+  store: Store,",
                "+): Observable<Action> {",
                "+  return actions",
                "+    .ofType(Actions.OPEN_TUNNEL)",
                "+    .do(action => {",
                "+      invariant(action.type === Actions.OPEN_TUNNEL);",
                "+      action.payload.open();",
                "+    })",
                "+    .ignoreElements();",
                "+}",
                "+",
                " function getSocketServiceByHost(host) {",
                "diff --git a/pkg/nuclide-ssh-tunnel/lib/types.js b/pkg/nuclide-ssh-tunnel/lib/types.js",
                "index a064155a9..44a7ef313 100644",
                "--- a/pkg/nuclide-ssh-tunnel/lib/types.js",
                "+++ b/pkg/nuclide-ssh-tunnel/lib/types.js",
                "@@ -81,2 +81,3 @@ export type OpenTunnelAction = {",
                "     tunnel: Tunnel,",
                "+    open: () => void,",
                "     close: (?Error) => void,"
            ],
            "changed_files": [
                "pkg/nuclide-ssh-tunnel/lib/redux/Actions.js",
                "pkg/nuclide-ssh-tunnel/lib/redux/Epics.js",
                "pkg/nuclide-ssh-tunnel/lib/types.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "e41f9b531d94dbc6a673d1898b9df2d26dc7d4a3",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520642115,
            "hunks": 17,
            "message": "Rename openTunnel to requestTunnel Summary: We don't guarantee that it will be opened at this point, the first action is more of a request. Reviewed By: semmypurewal Differential Revision: D7221295 fbshipit-source-id: e33b3e7b845a123bb7b0f24d4c04e23fce7b26c4",
            "diff": [
                "diff --git a/pkg/nuclide-ssh-tunnel/lib/main.js b/pkg/nuclide-ssh-tunnel/lib/main.js",
                "index ac75fc5b7..4f76110d3 100644",
                "--- a/pkg/nuclide-ssh-tunnel/lib/main.js",
                "+++ b/pkg/nuclide-ssh-tunnel/lib/main.js",
                "@@ -98,3 +98,3 @@ class Activation {",
                "       openTunnel: (tunnel, onOpen, onClose) => {",
                "-        this._store.dispatch(Actions.openTunnel(tunnel, onOpen, onClose));",
                "+        this._store.dispatch(Actions.requestTunnel(tunnel, onOpen, onClose));",
                "         return new UniversalDisposable(() =>",
                "diff --git a/pkg/nuclide-ssh-tunnel/lib/redux/Actions.js b/pkg/nuclide-ssh-tunnel/lib/redux/Actions.js",
                "index e40922a86..58c0ce31a 100644",
                "--- a/pkg/nuclide-ssh-tunnel/lib/redux/Actions.js",
                "+++ b/pkg/nuclide-ssh-tunnel/lib/redux/Actions.js",
                "@@ -13,5 +13,5 @@ import type {Directory} from '../../../nuclide-remote-connection';",
                " import type {",
                "-  OpenTunnelAction,",
                "   AddOpenTunnelAction,",
                "   CloseTunnelAction,",
                "+  RequestTunnelAction,",
                "   SetTunnelStateAction,",
                "@@ -21,5 +21,5 @@ import type {",
                "-export const OPEN_TUNNEL = 'OPEN_TUNNEL';",
                " export const ADD_OPEN_TUNNEL = 'ADD_OPEN_TUNNEL';",
                " export const CLOSE_TUNNEL = 'CLOSE_TUNNEL';",
                "+export const REQUEST_TUNNEL = 'REQUEST_TUNNEL';",
                " export const SET_TUNNEL_STATE = 'SET_TUNNEL_STATE';",
                "@@ -27,3 +27,3 @@ export const SET_CURRENT_WORKING_DIRECTORY = 'SET_CURRENT_WORKING_DIRECTORY';",
                "-export function openTunnel(",
                "+export function requestTunnel(",
                "   tunnel: Tunnel,",
                "@@ -31,5 +31,5 @@ export function openTunnel(",
                "   onClose: (?Error) => void,",
                "-): OpenTunnelAction {",
                "+): RequestTunnelAction {",
                "   return {",
                "-    type: OPEN_TUNNEL,",
                "+    type: REQUEST_TUNNEL,",
                "     payload: {tunnel, onOpen, onClose},",
                "diff --git a/pkg/nuclide-ssh-tunnel/lib/redux/Epics.js b/pkg/nuclide-ssh-tunnel/lib/redux/Epics.js",
                "index b0d669bef..56868047c 100644",
                "--- a/pkg/nuclide-ssh-tunnel/lib/redux/Epics.js",
                "+++ b/pkg/nuclide-ssh-tunnel/lib/redux/Epics.js",
                "@@ -23,3 +23,3 @@ import * as SocketService from '../../../nuclide-socket-rpc';",
                "-export function openTunnelEpic(",
                "+export function requestTunnelEpic(",
                "   actions: ActionsObservable<Action>,",
                "@@ -28,5 +28,5 @@ export function openTunnelEpic(",
                "   return actions",
                "-    .ofType(Actions.OPEN_TUNNEL)",
                "+    .ofType(Actions.REQUEST_TUNNEL)",
                "     .mergeMap(async action => {",
                "-      invariant(action.type === Actions.OPEN_TUNNEL);",
                "+      invariant(action.type === Actions.REQUEST_TUNNEL);",
                "       const {tunnel, onOpen, onClose} = action.payload;",
                "diff --git a/pkg/nuclide-ssh-tunnel/lib/types.js b/pkg/nuclide-ssh-tunnel/lib/types.js",
                "index ec73dbfe3..c2a381470 100644",
                "--- a/pkg/nuclide-ssh-tunnel/lib/types.js",
                "+++ b/pkg/nuclide-ssh-tunnel/lib/types.js",
                "@@ -63,16 +63,7 @@ export type TunnelState = 'initializing' | 'ready' | 'active';",
                " export type Action =",
                "-  | OpenTunnelAction",
                "   | AddOpenTunnelAction",
                "   | CloseTunnelAction",
                "-  | SetTunnelStateAction",
                "-  | SetCurrentWorkingDirectoryAction;",
                "-",
                "-export type OpenTunnelAction = {",
                "-  type: 'OPEN_TUNNEL',",
                "-  payload: {",
                "-    tunnel: Tunnel,",
                "-    onOpen: (?Error) => void,",
                "-    onClose: (?Error) => void,",
                "-  },",
                "-};",
                "+  | RequestTunnelAction",
                "+  | SetCurrentWorkingDirectoryAction",
                "+  | SetTunnelStateAction;",
                "@@ -94,7 +85,8 @@ export type CloseTunnelAction = {",
                "-export type SetTunnelStateAction = {",
                "-  type: 'SET_TUNNEL_STATE',",
                "+export type RequestTunnelAction = {",
                "+  type: 'REQUEST_TUNNEL',",
                "   payload: {",
                "     tunnel: Tunnel,",
                "-    state: TunnelState,",
                "+    onOpen: (?Error) => void,",
                "+    onClose: (?Error) => void,",
                "   },",
                "@@ -108 +100,9 @@ export type SetCurrentWorkingDirectoryAction = {",
                " };",
                "+",
                "+export type SetTunnelStateAction = {",
                "+  type: 'SET_TUNNEL_STATE',",
                "+  payload: {",
                "+    tunnel: Tunnel,",
                "+    state: TunnelState,",
                "+  },",
                "+};",
                "diff --git a/pkg/nuclide-ssh-tunnel/lib/ui/TunnelsPanel.js b/pkg/nuclide-ssh-tunnel/lib/ui/TunnelsPanel.js",
                "index d94ac0394..81ada5024 100644",
                "--- a/pkg/nuclide-ssh-tunnel/lib/ui/TunnelsPanel.js",
                "+++ b/pkg/nuclide-ssh-tunnel/lib/ui/TunnelsPanel.js",
                "@@ -74,3 +74,3 @@ export class TunnelsPanel {",
                "           this._store.dispatch(",
                "-            Actions.openTunnel(",
                "+            Actions.requestTunnel(",
                "               tunnel,"
            ],
            "changed_files": [
                "pkg/nuclide-ssh-tunnel/lib/main.js",
                "pkg/nuclide-ssh-tunnel/lib/redux/Actions.js",
                "pkg/nuclide-ssh-tunnel/lib/redux/Epics.js",
                "pkg/nuclide-ssh-tunnel/lib/types.js",
                "pkg/nuclide-ssh-tunnel/lib/ui/TunnelsPanel.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "cd5fdcce3859e340ff26bc0b1abc47fddfa5c1cf",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521844237,
            "hunks": 3,
            "message": "Remove unnecessary double star Summary: Projectionist actually treats the last star as a generous glob (\"**/*\") and this isn't needed. Reviewed By: matthewwithanm Differential Revision: D7383834 fbshipit-source-id: 2254e5a56b218f2d4adfe66d3b34b6eca0bae735",
            "diff": [
                "diff --git a/.projections.json b/.projections.json",
                "index ac250501f..4b7cd1bf2 100644",
                "--- a/.projections.json",
                "+++ b/.projections.json",
                "@@ -4,4 +4,7 @@",
                "   },",
                "-  \"pkg/*/spec/**-spec.js\": {",
                "-    \"alternate\": \"pkg/{}/lib/{}.js\",",
                "+  \"pkg/*/spec/*-spec.js\": {",
                "+    \"alternate\": [",
                "+      \"pkg/{}/lib/{}.js\",",
                "+      \"pkg/{}/{}.js\"",
                "+    ],",
                "     \"type\": \"test\"",
                "@@ -11,6 +14,2 @@",
                "   },",
                "-  \"pkg/*/spec/*-spec.js\": {",
                "-    \"alternate\": \"pkg/{}/{}.js\",",
                "-    \"type\": \"test\"",
                "-  },",
                "   \"pkg/*/**/Epics.js\": {",
                "@@ -50,3 +49,3 @@",
                "   },",
                "-  \"modules/*/pkg/*/lib/**.js\": {",
                "+  \"modules/*/pkg/*/lib/*.js\": {",
                "     \"alternate\": \"modules/{}/pkg/{}/spec/{}-spec.js\""
            ],
            "changed_files": [
                ".projections.json"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "68c3abae655efd3bf1aff21533b5c440815c0e62",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521571525,
            "hunks": 63,
            "message": "Convert Big Dig to use Jest as its test runner. Reviewed By: hansonw Differential Revision: D7311359 fbshipit-source-id: 6781afec3d724279533844ecdd21aecec8bdbbf0",
            "diff": [
                "diff --git a/modules/big-dig/package.json b/modules/big-dig/package.json",
                "index 610f10e73..3ffda77e3 100644",
                "--- a/modules/big-dig/package.json",
                "+++ b/modules/big-dig/package.json",
                "@@ -9,3 +9,3 @@",
                "     \"prepublish\": \"../scripts/prepublish.sh\",",
                "-    \"test\": \"node ../nuclide-jasmine/bin/jasmine-node-transpiled spec\"",
                "+    \"test\": \"node ../nuclide-jest/bin/jest-node.js\"",
                "   },",
                "@@ -23,2 +23,5 @@",
                "     \"ws\": \"3.2.0\"",
                "+  },",
                "+  \"devDependencies\": {",
                "+    \"nuclide-jest\": \"0.5.0\"",
                "   }",
                "diff --git a/modules/big-dig/spec/client/utils/asyncRequest-spec.js b/modules/big-dig/spec/client/utils/asyncRequest-spec.js",
                "index cea735622..718b748df 100644",
                "--- a/modules/big-dig/spec/client/utils/asyncRequest-spec.js",
                "+++ b/modules/big-dig/spec/client/utils/asyncRequest-spec.js",
                "@@ -14,2 +14,3 @@ import http from 'http';",
                " import asyncRequest from '../../../src/client/utils/asyncRequest';",
                "+import {describe, expect, it} from 'nuclide-jest/globals';",
                "@@ -18,4 +19,3 @@ describe('asyncRequest', () => {",
                "-  beforeEach(() => {",
                "-    let connected = false;",
                "+  beforeEach(async () => {",
                "     server = http.createServer((req, res) => {",
                "@@ -24,6 +24,5 @@ describe('asyncRequest', () => {",
                "     });",
                "-    server.listen(36845, '127.0.0.1', 511 /* backlog */, () => {",
                "-      connected = true;",
                "+    await new Promise(resolve => {",
                "+      server.listen(36845, '127.0.0.1', 511 /* backlog */, resolve);",
                "     });",
                "-    waitsFor(() => connected);",
                "   });",
                "@@ -34,10 +33,8 @@ describe('asyncRequest', () => {",
                "-  it('can do http request in an async way', () => {",
                "-    waitsForPromise(async () => {",
                "-      const {body, response} = await asyncRequest({",
                "-        uri: 'http://127.0.0.1:36845/abc',",
                "-      });",
                "-      expect(body).toBe('okay');",
                "-      expect(response.statusCode).toBe(200);",
                "+  it('can do http request in an async way', async () => {",
                "+    const {body, response} = await asyncRequest({",
                "+      uri: 'http://127.0.0.1:36845/abc',",
                "     });",
                "+    expect(body).toBe('okay');",
                "+    expect(response.statusCode).toBe(200);",
                "   });",
                "diff --git a/modules/big-dig/spec/socket/QueuedAckTransport-spec.js b/modules/big-dig/spec/socket/QueuedAckTransport-spec.js",
                "index 4db6f65d6..d7c23d954 100644",
                "--- a/modules/big-dig/spec/socket/QueuedAckTransport-spec.js",
                "+++ b/modules/big-dig/spec/socket/QueuedAckTransport-spec.js",
                "@@ -26,2 +26,3 @@ import {Emitter} from 'event-kit';",
                " import {Subject} from 'rxjs';",
                "+import {describe, expect, it, jest} from 'nuclide-jest/globals';",
                "@@ -32,3 +33,3 @@ function makeUnreliableTransport(",
                "   const transport: any = new Emitter();",
                "-  transport.send = jasmine.createSpy('send').andCallFake((data: Object) => {",
                "+  transport.send = jest.fn((data: Object) => {",
                "     transport.emit('send', data);",
                "@@ -36,9 +37,7 @@ function makeUnreliableTransport(",
                "   });",
                "-  transport.onClose = jasmine",
                "-    .createSpy('onClose')",
                "-    .andCallFake((callback: () => mixed): IDisposable => {",
                "-      return transport.on('close', callback);",
                "-    });",
                "-  transport.onMessage = jasmine.createSpy('onMessage').andReturn(receiver);",
                "-  transport.close = jasmine.createSpy('close').andCallFake((): void => {",
                "+  transport.onClose = jest.fn((callback: () => mixed): IDisposable => {",
                "+    return transport.on('close', callback);",
                "+  });",
                "+  transport.onMessage = jest.fn(() => receiver);",
                "+  transport.close = jest.fn((): void => {",
                "     isClosed = true;",
                "@@ -52,2 +51,8 @@ function makeUnreliableTransport(",
                "+jest.useFakeTimers();",
                "+",
                "+function advanceClock(duration: number) {",
                "+  jest.advanceTimersByTime(duration);",
                "+}",
                "+",
                " describe('QueuedAckTransport framing', () => {",
                "@@ -84,4 +89,4 @@ describe('QueuedAckTransport', () => {",
                "     expect(q.getState()).toBe('open');",
                "-    expect(transport.onMessage).toHaveBeenCalledWith();",
                "-    expect(transport.onClose).toHaveBeenCalledWith(jasmine.any(Function));",
                "+    expect(transport.onMessage).toBeCalledWith();",
                "+    expect(transport.onClose).toBeCalledWith(expect.any(Function));",
                "   });",
                "@@ -91,3 +96,3 @@ describe('QueuedAckTransport', () => {",
                "     q.send(data);",
                "-    expect(transport.send).toHaveBeenCalledWith(frameContent(1, data));",
                "+    expect(transport.send).toBeCalledWith(frameContent(1, data));",
                "   });",
                "@@ -95,3 +100,3 @@ describe('QueuedAckTransport', () => {",
                "   it('close tranport', () => {",
                "-    const onDisconnect = jasmine.createSpy('onDisconnect');",
                "+    const onDisconnect = jest.fn();",
                "     q.onDisconnect(onDisconnect);",
                "@@ -101,3 +106,3 @@ describe('QueuedAckTransport', () => {",
                "     expect(q.getState()).toBe('disconnected');",
                "-    expect(onDisconnect).toHaveBeenCalledWith(transport);",
                "+    expect(onDisconnect).toBeCalledWith(transport);",
                "   });",
                "@@ -105,3 +110,3 @@ describe('QueuedAckTransport', () => {",
                "   it('disconnect', () => {",
                "-    const onDisconnect = jasmine.createSpy('onDisconnect');",
                "+    const onDisconnect = jest.fn();",
                "     q.onDisconnect(onDisconnect);",
                "@@ -111,4 +116,4 @@ describe('QueuedAckTransport', () => {",
                "     expect(q.getState()).toBe('disconnected');",
                "-    expect(onDisconnect).toHaveBeenCalledWith(transport);",
                "-    expect(transport.close).toHaveBeenCalledWith();",
                "+    expect(onDisconnect).toBeCalledWith(transport);",
                "+    expect(transport.close).toBeCalledWith();",
                "@@ -120,3 +125,3 @@ describe('QueuedAckTransport', () => {",
                "   it('dispose unsubscribes from disconnect', () => {",
                "-    const onDisconnect = jasmine.createSpy('onDisconnect');",
                "+    const onDisconnect = jest.fn();",
                "     q.onDisconnect(onDisconnect).dispose();",
                "@@ -125,3 +130,3 @@ describe('QueuedAckTransport', () => {",
                "-    expect(onDisconnect).not.toHaveBeenCalled();",
                "+    expect(onDisconnect).not.toBeCalled();",
                "   });",
                "@@ -135,4 +140,4 @@ describe('QueuedAckTransport', () => {",
                "     expect(q.getState()).toBe('open');",
                "-    expect(newTransport.onMessage).toHaveBeenCalledWith();",
                "-    expect(newTransport.onClose).toHaveBeenCalledWith(jasmine.any(Function));",
                "+    expect(newTransport.onMessage).toBeCalledWith();",
                "+    expect(newTransport.onClose).toBeCalledWith(expect.any(Function));",
                "   });",
                "@@ -148,4 +153,4 @@ describe('QueuedAckTransport', () => {",
                "     expect(q.getState()).toBe('open');",
                "-    expect(transport.send).not.toHaveBeenCalled();",
                "-    expect(newTransport.send).toHaveBeenCalledWith(frameContent(1, data));",
                "+    expect(transport.send).not.toBeCalled();",
                "+    expect(newTransport.send).toBeCalledWith(frameContent(1, data));",
                "   });",
                "@@ -164,4 +169,4 @@ describe('QueuedAckTransport', () => {",
                "     expect(q.getState()).toBe('open');",
                "-    expect(transport.send).toHaveBeenCalled();",
                "-    expect(transport.send.argsForCall).toEqual([",
                "+    expect(transport.send).toBeCalled();",
                "+    expect(transport.send.mock.calls).toEqual([",
                "       [frameContent(1, data1)],",
                "@@ -169,4 +174,4 @@ describe('QueuedAckTransport', () => {",
                "     ]);",
                "-    expect(newTransport.send).toHaveBeenCalled();",
                "-    expect(newTransport.send.argsForCall).toEqual([[frameContent(2, data2)]]);",
                "+    expect(newTransport.send).toBeCalled();",
                "+    expect(newTransport.send.mock.calls).toEqual([[frameContent(2, data2)]]);",
                "   });",
                "@@ -174,3 +179,3 @@ describe('QueuedAckTransport', () => {",
                "   it('close', () => {",
                "-    const onDisconnect = jasmine.createSpy('onDisconnect');",
                "+    const onDisconnect = jest.fn();",
                "     q.onDisconnect(onDisconnect);",
                "@@ -178,5 +183,5 @@ describe('QueuedAckTransport', () => {",
                "-    expect(onDisconnect).toHaveBeenCalledWith(transport);",
                "+    expect(onDisconnect).toBeCalledWith(transport);",
                "     expect(q.getState()).toBe('closed');",
                "-    expect(transport.close).toHaveBeenCalledWith();",
                "+    expect(transport.close).toBeCalledWith();",
                "   });",
                "@@ -185,3 +190,3 @@ describe('QueuedAckTransport', () => {",
                "     q.disconnect();",
                "-    const onDisconnect = jasmine.createSpy('onDisconnect');",
                "+    const onDisconnect = jest.fn();",
                "     q.onDisconnect(onDisconnect);",
                "@@ -189,3 +194,3 @@ describe('QueuedAckTransport', () => {",
                "-    expect(onDisconnect).not.toHaveBeenCalled();",
                "+    expect(onDisconnect).not.toBeCalled();",
                "     expect(q.getState()).toBe('closed');",
                "@@ -194,3 +199,3 @@ describe('QueuedAckTransport', () => {",
                "   it('onMessage', () => {",
                "-    const onMessage = jasmine.createSpy('onMessage');",
                "+    const onMessage = jest.fn();",
                "     q.onMessage().subscribe(onMessage);",
                "@@ -199,3 +204,3 @@ describe('QueuedAckTransport', () => {",
                "-    expect(onMessage).toHaveBeenCalledWith(data);",
                "+    expect(onMessage).toBeCalledWith(data);",
                "   });",
                "@@ -205,3 +210,3 @@ describe('QueuedAckTransport', () => {",
                "   it('onMessage first two out of order', () => {",
                "-    const onMessage = jasmine.createSpy('onMessage');",
                "+    const onMessage = jest.fn();",
                "     q.onMessage().subscribe(onMessage);",
                "@@ -213,3 +218,3 @@ describe('QueuedAckTransport', () => {",
                "-    expect(onMessage.argsForCall).toEqual([[data1], [data2]]);",
                "+    expect(onMessage.mock.calls).toEqual([[data1], [data2]]);",
                "   });",
                "@@ -220,3 +225,3 @@ describe('QueuedAckTransport', () => {",
                "   it('onMessage retry out of order', () => {",
                "-    const onMessage = jasmine.createSpy('onMessage');",
                "+    const onMessage = jest.fn();",
                "     q.onMessage().subscribe(onMessage);",
                "@@ -230,4 +235,4 @@ describe('QueuedAckTransport', () => {",
                "-    expect(onMessage).toHaveBeenCalled();",
                "-    expect(onMessage.argsForCall).toEqual([[data1], [data2]]);",
                "+    expect(onMessage).toBeCalled();",
                "+    expect(onMessage.mock.calls).toEqual([[data1], [data2]]);",
                "   });",
                "@@ -235,3 +240,3 @@ describe('QueuedAckTransport', () => {",
                "   it('dispose unsubscribes from onMessage', () => {",
                "-    const onMessage = jasmine.createSpy('onMessage');",
                "+    const onMessage = jest.fn();",
                "     const subscription = q.onMessage().subscribe(onMessage);",
                "@@ -242,3 +247,3 @@ describe('QueuedAckTransport', () => {",
                "-    expect(onMessage).not.toHaveBeenCalled();",
                "+    expect(onMessage).not.toBeCalled();",
                "   });",
                "@@ -250,3 +255,3 @@ describe('QueuedAckTransport', () => {",
                "     advanceClock(PENDING_MESSAGE_TIMEOUT - 1);",
                "-    expect(transport.close).not.toHaveBeenCalled();",
                "+    expect(transport.close).not.toBeCalled();",
                "     expect(q.getState()).toBe('open');",
                "@@ -254,3 +259,3 @@ describe('QueuedAckTransport', () => {",
                "     advanceClock(2);",
                "-    expect(transport.close).toHaveBeenCalled();",
                "+    expect(transport.close).toBeCalled();",
                "     expect(q.getState()).toBe('disconnected');",
                "@@ -259,3 +264,3 @@ describe('QueuedAckTransport', () => {",
                "   it('disconnects if pending receive sits too long', () => {",
                "-    const onMessage = jasmine.createSpy('onMessage');",
                "+    const onMessage = jest.fn();",
                "     q.onMessage().subscribe(onMessage);",
                "@@ -265,3 +270,3 @@ describe('QueuedAckTransport', () => {",
                "     advanceClock(PENDING_MESSAGE_TIMEOUT - 1);",
                "-    expect(transport.close).not.toHaveBeenCalled();",
                "+    expect(transport.close).not.toBeCalled();",
                "     expect(q.getState()).toBe('open');",
                "@@ -269,6 +274,6 @@ describe('QueuedAckTransport', () => {",
                "     advanceClock(2);",
                "-    expect(transport.close).toHaveBeenCalled();",
                "+    expect(transport.close).toBeCalled();",
                "     expect(q.getState()).toBe('disconnected');",
                "-    expect(onMessage).not.toHaveBeenCalled();",
                "+    expect(onMessage).not.toBeCalled();",
                "   });",
                "@@ -281,3 +286,3 @@ describe('QueuedAckTransport', () => {",
                "     advanceClock(2 * PENDING_MESSAGE_TIMEOUT);",
                "-    expect(transport.close).not.toHaveBeenCalled();",
                "+    expect(transport.close).not.toBeCalled();",
                "     expect(q.getState()).toBe('open');",
                "@@ -290,11 +295,11 @@ describe('QueuedAckTransport', () => {",
                "     const expectedDeliveries = [];",
                "-    const onMessage = jasmine.createSpy('onMessage');",
                "+    const onMessage = jest.fn();",
                "     q.onMessage().subscribe(onMessage);",
                "-    const check = checkId => {",
                "-      expect(q.getState()).toBe('open', checkId);",
                "-      expect(transport.close).not.toHaveBeenCalled();",
                "-      expect(transport.send.argsForCall).toEqual(expectedSends, checkId);",
                "-      expect(onMessage.argsForCall).toEqual(expectedDeliveries, checkId);",
                "-    };",
                "+    function check() {",
                "+      expect(q.getState()).toBe('open');",
                "+      expect(transport.close).not.toBeCalled();",
                "+      expect(transport.send.mock.calls).toEqual(expectedSends);",
                "+      expect(onMessage.mock.calls).toEqual(expectedDeliveries);",
                "+    }",
                "@@ -302,15 +307,15 @@ describe('QueuedAckTransport', () => {",
                "     expectedSends.push([frameContent(1, data1)]);",
                "-    check('q.send(data1)');",
                "+    check(); // q.send(data1)",
                "     advanceClock(PENDING_MESSAGE_TIMEOUT - 1);",
                "-    check('advanceClock after q.send(data1)');",
                "+    check(); // advanceClock after q.send(data1)",
                "     receiver.next(frameContent(2, data2));",
                "-    check('receiver.next(frameContent(2, data2))');",
                "+    check(); // receiver.next(frameContent(2, data2))",
                "     receiver.next(frameAck(1));",
                "-    check('receiver.next(frameAck(1))');",
                "+    check(); // receiver.next(frameAck(1))",
                "     advanceClock(PENDING_MESSAGE_TIMEOUT - 1);",
                "-    check('advanceClock after receiver.next(frameAck(1))');",
                "+    check(); // advanceClock after receiver.next(frameAck(1))",
                "@@ -318,3 +323,3 @@ describe('QueuedAckTransport', () => {",
                "     expectedSends.push([frameContent(2, data2)]);",
                "-    check('q.send(data2)');",
                "+    check(); // q.send(data2)",
                "@@ -323,3 +328,3 @@ describe('QueuedAckTransport', () => {",
                "     expectedDeliveries.push([data2]);",
                "-    check('receiver.next(frameContent(1, data1))');",
                "+    check(); // receiver.next(frameContent(1, data1))",
                "@@ -330,9 +335,9 @@ describe('QueuedAckTransport', () => {",
                "     expectedSends.push([frameAck(2)]);",
                "-    check('advanceClock after receiver.next(frameContent(1, data1))');",
                "+    check(); // advanceClock after receiver.next(frameContent(1, data1))",
                "     receiver.next(frameAck(2));",
                "-    check('receiver.next(frameAck(2))');",
                "+    check(); // receiver.next(frameAck(2))",
                "     advanceClock(2 * PENDING_MESSAGE_TIMEOUT);",
                "-    check('advanceClock final');",
                "+    check(); // advanceClock final",
                "   });",
                "@@ -342,3 +347,3 @@ describe('QueuedAckTransport', () => {",
                "     expect(q.getState()).toBe('closed');",
                "-    expect(transport.close).toHaveBeenCalled();",
                "+    expect(transport.close).toBeCalled();",
                "   });",
                "diff --git a/modules/big-dig/spec/socket/WebSocketTransport-spec.js b/modules/big-dig/spec/socket/WebSocketTransport-spec.js",
                "index 4d3a3b5ad..cbfddc2a8 100644",
                "--- a/modules/big-dig/spec/socket/WebSocketTransport-spec.js",
                "+++ b/modules/big-dig/spec/socket/WebSocketTransport-spec.js",
                "@@ -17,2 +17,3 @@ import {WebSocketTransport} from '../../src/socket/WebSocketTransport';",
                " import {compress, decompress} from '../../src/socket/compression';",
                "+import {describe, expect, it, jest} from 'nuclide-jest/globals';",
                "@@ -23,3 +24,3 @@ function mockSocket(): WS {",
                "   };",
                "-  spyOn(result, 'on').andCallThrough();",
                "+  jest.spyOn(result, 'on');",
                "   return result;",
                "@@ -38,5 +39,5 @@ describe('WebSocketTransport', () => {",
                "     expect(transport.isClosed()).toBe(false);",
                "-    expect(socket.on).toHaveBeenCalledWith('message', jasmine.any(Function));",
                "-    expect(socket.on).toHaveBeenCalledWith('error', jasmine.any(Function));",
                "-    expect(socket.on).toHaveBeenCalledWith('close', jasmine.any(Function));",
                "+    expect(socket.on).toHaveBeenCalledWith('message', expect.any(Function));",
                "+    expect(socket.on).toHaveBeenCalledWith('error', expect.any(Function));",
                "+    expect(socket.on).toHaveBeenCalledWith('close', expect.any(Function));",
                "   });",
                "@@ -53,34 +54,26 @@ describe('WebSocketTransport', () => {",
                "-  it('send - success', () => {",
                "-    waitsForPromise(async () => {",
                "-      const s: any = socket;",
                "-      s.send = jasmine",
                "-        .createSpy('send')",
                "-        .andCallFake((data, _, callback) => callback(null));",
                "-      const data = JSON.stringify({foo: 42});",
                "-      const result = await transport.send(data);",
                "-      expect(result).toBe(true);",
                "-      expect(socket.send).toHaveBeenCalledWith(",
                "-        data,",
                "-        jasmine.any(Object),",
                "-        jasmine.any(Function),",
                "-      );",
                "-    });",
                "+  it('send - success', async () => {",
                "+    const s: any = socket;",
                "+    s.send = jest.fn((data, _, callback) => callback(null));",
                "+    const data = JSON.stringify({foo: 42});",
                "+    const result = await transport.send(data);",
                "+    expect(result).toBe(true);",
                "+    expect(socket.send).toBeCalledWith(",
                "+      data,",
                "+      expect.any(Object),",
                "+      expect.any(Function),",
                "+    );",
                "   });",
                "-  it('send - error', () => {",
                "-    waitsForPromise(async () => {",
                "-      const s: any = socket;",
                "-      s.send = jasmine",
                "-        .createSpy('send')",
                "-        .andCallFake((data, _, callback) => callback(new Error()));",
                "-      const data = JSON.stringify({foo: 42});",
                "-      const result = await transport.send(data);",
                "-      expect(result).toBe(false);",
                "-      expect(socket.send).toHaveBeenCalledWith(",
                "-        data,",
                "-        jasmine.any(Object),",
                "-        jasmine.any(Function),",
                "-      );",
                "-    });",
                "+  it('send - error', async () => {",
                "+    const s: any = socket;",
                "+    s.send = jest.fn((data, _, callback) => callback(new Error()));",
                "+    const data = JSON.stringify({foo: 42});",
                "+    const result = await transport.send(data);",
                "+    expect(result).toBe(false);",
                "+    expect(socket.send).toBeCalledWith(",
                "+      data,",
                "+      expect.any(Object),",
                "+      expect.any(Function),",
                "+    );",
                "   });",
                "@@ -128,17 +121,13 @@ describe('WebSocketTransport', () => {",
                "-  it('can send compressed messages', () => {",
                "-    waitsForPromise(async () => {",
                "-      transport = new WebSocketTransport('42', socket, {syncCompression: true});",
                "-      const s: any = socket;",
                "-      s.send = jasmine",
                "-        .createSpy('send')",
                "-        .andCallFake((data, _, callback) => callback(null));",
                "-      const data = 'a'.repeat(10000);",
                "-      const result = await transport.send(data);",
                "-      expect(result).toBe(true);",
                "-      expect(s.send).toHaveBeenCalled();",
                "-      const buffer = s.send.calls[0].args[0];",
                "-      expect(buffer instanceof Buffer).toBe(true);",
                "-      expect(decompress(buffer)).toBe(data);",
                "-    });",
                "+  it('can send compressed messages', async () => {",
                "+    transport = new WebSocketTransport('42', socket, {syncCompression: true});",
                "+    const s: any = socket;",
                "+    s.send = jest.fn((data, _, callback) => callback(null));",
                "+    const data = 'a'.repeat(10000);",
                "+    const result = await transport.send(data);",
                "+    expect(result).toBe(true);",
                "+    expect(s.send).toBeCalled();",
                "+    const buffer = s.send.mock.calls[0][0];",
                "+    expect(buffer instanceof Buffer).toBe(true);",
                "+    expect(decompress(buffer)).toBe(data);",
                "   });"
            ],
            "changed_files": [
                "modules/big-dig/package.json",
                "modules/big-dig/spec/client/utils/asyncRequest-spec.js",
                "modules/big-dig/spec/socket/QueuedAckTransport-spec.js",
                "modules/big-dig/spec/socket/WebSocketTransport-spec.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "e36b0c6e2c3f53883c8e344c0a9de42611ec667f",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521827474,
            "hunks": 1,
            "message": "LSP notifications shouldn't persist Summary: That has been a great source of frustration for users as these notifications stays there all the time, but aren't actionable. It also covers the debugger controls (when active), hence, degrading the debugging experience. Reviewed By: ljw1004 Differential Revision: D7345948 fbshipit-source-id: fce706298c55404467bfe32348478d26699f1838",
            "diff": [
                "diff --git a/pkg/nuclide-language-service/lib/HostServices.js b/pkg/nuclide-language-service/lib/HostServices.js",
                "index 852845340..107e4e75a 100644",
                "--- a/pkg/nuclide-language-service/lib/HostServices.js",
                "+++ b/pkg/nuclide-language-service/lib/HostServices.js",
                "@@ -87,5 +87,3 @@ class RootHostServices {",
                "     return Observable.create(observer => {",
                "-      const notification = this._atomNotification(level, text, {",
                "-        dismissable: true,",
                "-      });",
                "+      const notification = this._atomNotification(level, text);",
                "       notification.onDidDismiss(() => observer.complete());"
            ],
            "changed_files": [
                "pkg/nuclide-language-service/lib/HostServices.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "d401cdb376a26e2cf2cc806b1a8163a0aae16b73",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520880346,
            "hunks": 3,
            "message": "Update nuclide-prebuilt-libs to 0.3.8 Summary: As title. Reviewed By: aadsm Differential Revision: D7219806 fbshipit-source-id: 05a353797739657e52143682dca666f84ffb1e5a",
            "diff": [
                "diff --git a/modules/nuclide-debugger-vsps/package.json b/modules/nuclide-debugger-vsps/package.json",
                "index c978198fc..d87a3fd83 100644",
                "--- a/modules/nuclide-debugger-vsps/package.json",
                "+++ b/modules/nuclide-debugger-vsps/package.json",
                "@@ -18,3 +18,3 @@",
                "     \"nuclide-debugger-common\": \"0.5.1-dev\",",
                "-    \"nuclide-prebuilt-libs\": \"0.3.3\",",
                "+    \"nuclide-prebuilt-libs\": \"0.3.8\",",
                "     \"nullthrows\": \"1.0.0\",",
                "diff --git a/package.json b/package.json",
                "index fcbeefece..cb910c36b 100644",
                "--- a/package.json",
                "+++ b/package.json",
                "@@ -94,3 +94,3 @@",
                "     \"node-fetch\": \"1.6.3\",",
                "-    \"nuclide-prebuilt-libs\": \"0.3.3\",",
                "+    \"nuclide-prebuilt-libs\": \"0.3.8\",",
                "     \"nullthrows\": \"1.0.0\",",
                "diff --git a/yarn.lock b/yarn.lock",
                "index 970e209e0..e792d5342 100644",
                "--- a/yarn.lock",
                "+++ b/yarn.lock",
                "@@ -3816,5 +3816,5 @@ nuclide-commons@0.5.1:",
                "-nuclide-prebuilt-libs@0.3.3:",
                "-  version \"0.3.3\"",
                "-  resolved \"https://registry.yarnpkg.com/nuclide-prebuilt-libs/-/nuclide-prebuilt-libs-0.3.3.tgz#179659b7531384fb46390914497b555f34e572aa\"",
                "+nuclide-prebuilt-libs@0.3.8:",
                "+  version \"0.3.8\"",
                "+  resolved \"https://registry.yarnpkg.com/nuclide-prebuilt-libs/-/nuclide-prebuilt-libs-0.3.8.tgz#c5ee284fc0df6eabc888143a5e1b7d3739ae21f7\""
            ],
            "changed_files": [
                "modules/nuclide-debugger-vsps/package.json",
                "package.json",
                "yarn.lock"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "a7d9a271475c8e384b61bdff0a65da35f209d97b",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521141873,
            "hunks": 11,
            "message": "Create setup file Summary: This creates a setup file (which gets run after the jest runtime is available). We can install global beforeEach hooks here. This prepares the nuclide config schema into the atom config and replaces `atom.confirm` with a mock that won't block. Reviewed By: hansonw Differential Revision: D7135602 fbshipit-source-id: 63079c8f7f5b64c0454fe370ab0fc26fe7d04454",
            "diff": [
                "diff --git a/.eslintrc.js b/.eslintrc.js",
                "index 1d4e7fafd..c4534a877 100644",
                "--- a/.eslintrc.js",
                "+++ b/.eslintrc.js",
                "@@ -38,2 +38,3 @@ module.exports = {",
                "     jasmine: true,",
                "+    jest: true,",
                "     node: true,",
                "diff --git a/modules/nuclide-jest/AtomJestEnvironment.js b/modules/nuclide-jest/AtomJestEnvironment.js",
                "index 9e1f81bd7..d0ccb720d 100644",
                "--- a/modules/nuclide-jest/AtomJestEnvironment.js",
                "+++ b/modules/nuclide-jest/AtomJestEnvironment.js",
                "@@ -24,2 +24,3 @@ module.exports = class AtomJestEnvironment extends NodeEnvironment {",
                "     this.global.atom = global.atom;",
                "+    this.global.__pkg = global.__pkg;",
                "     return Promise.resolve();",
                "diff --git a/modules/nuclide-jest/AtomJestUtils.js b/modules/nuclide-jest/AtomJestUtils.js",
                "new file mode 100644",
                "index 000000000..b58c0c794",
                "--- /dev/null",
                "+++ b/modules/nuclide-jest/AtomJestUtils.js",
                "@@ -0,0 +1,45 @@",
                "+/**",
                "+ * Copyright (c) 2017-present, Facebook, Inc.",
                "+ * All rights reserved.",
                "+ *",
                "+ * This source code is licensed under the BSD-style license found in the",
                "+ * LICENSE file in the root directory of this source tree. An additional grant",
                "+ * of patent rights can be found in the PATENTS file in the same directory.",
                "+ *",
                "+ * @noflow",
                "+ */",
                "+'use strict';",
                "+",
                "+/* eslint",
                "+  comma-dangle: [1, always-multiline],",
                "+  prefer-object-spread/prefer-object-spread: 0,",
                "+  rulesdir/no-commonjs: 0,",
                "+  */",
                "+",
                "+const fs = require('fs');",
                "+const path = require('path');",
                "+",
                "+module.exports = {",
                "+  getPackage(start) {",
                "+    return JSON.parse(fs.readFileSync(",
                "+      module.exports.getPackageFile(start), 'utf8'",
                "+    ));",
                "+  },",
                "+",
                "+  getPackageFile(start) {",
                "+    let current = path.resolve(start);",
                "+    while (true) {",
                "+      const filename = path.join(current, 'package.json');",
                "+      if (fs.existsSync(filename)) {",
                "+        return filename;",
                "+      } else {",
                "+        const next = path.join(current, '..');",
                "+        if (next === current) {",
                "+          return null;",
                "+        } else {",
                "+          current = next;",
                "+        }",
                "+      }",
                "+    }",
                "+  },",
                "+};",
                "diff --git a/modules/nuclide-jest/atom-runner.js b/modules/nuclide-jest/atom-runner.js",
                "index 11e6031dd..f035341f3 100644",
                "--- a/modules/nuclide-jest/atom-runner.js",
                "+++ b/modules/nuclide-jest/atom-runner.js",
                "@@ -21,8 +21,6 @@ const electron = require('electron');",
                " const invariant = require('assert');",
                "-const fs = require('fs');",
                " // eslint-disable-next-line rulesdir/no-unresolved",
                " const jestCLI = require('jest-cli');",
                "+const fs = require('fs');",
                " const os = require('os');",
                "-",
                "-// eslint-disable-next-line rulesdir/prefer-nuclide-uri",
                " const path = require('path');",
                "@@ -30,2 +28,3 @@ const path = require('path');",
                " const config = require('./jest.config.js');",
                "+const {getPackage, getPackageFile} = require('./AtomJestUtils');",
                "@@ -86,2 +85,3 @@ module.exports = function(params) {",
                "             [path.join(__dirname, 'atom-reporter.js')],",
                "+          setupTestFrameworkScriptFile: path.resolve(__dirname, 'atomSetup.js'),",
                "         }",
                "@@ -92,22 +92 @@ module.exports = function(params) {",
                " };",
                "-",
                "-function getPackage(start) {",
                "-  return JSON.parse(fs.readFileSync(getPackageFile(start), 'utf8'));",
                "-}",
                "-",
                "-function getPackageFile(start) {",
                "-  let current = path.resolve(start);",
                "-  while (true) {",
                "-    const filename = path.join(current, 'package.json');",
                "-    if (fs.existsSync(filename)) {",
                "-      return filename;",
                "-    } else {",
                "-      const next = path.join(current, '..');",
                "-      if (next === current) {",
                "-        return null;",
                "-      } else {",
                "-        current = next;",
                "-      }",
                "-    }",
                "-  }",
                "-}",
                "diff --git a/modules/nuclide-jest/atomSetup.js b/modules/nuclide-jest/atomSetup.js",
                "new file mode 100644",
                "index 000000000..c200e2b38",
                "--- /dev/null",
                "+++ b/modules/nuclide-jest/atomSetup.js",
                "@@ -0,0 +1,49 @@",
                "+/**",
                "+ * Copyright (c) 2017-present, Facebook, Inc.",
                "+ * All rights reserved.",
                "+ *",
                "+ * This source code is licensed under the BSD-style license found in the",
                "+ * LICENSE file in the root directory of this source tree. An additional grant",
                "+ * of patent rights can be found in the PATENTS file in the same directory.",
                "+ *",
                "+ * @noflow",
                "+ */",
                "+'use strict';",
                "+",
                "+/* eslint",
                "+  comma-dangle: [1, always-multiline],",
                "+  prefer-object-spread/prefer-object-spread: 0,",
                "+  rulesdir/no-commonjs: 0,",
                "+  */",
                "+",
                "+const temp = require('temp');",
                "+const {getPackage} = require('./AtomJestUtils');",
                "+const pkg = getPackage(atom.getLoadSettings().testPaths[0]);",
                "+const nuclideConfig = pkg.atomConfig || (pkg.nuclide && pkg.nuclide.config);",
                "+",
                "+beforeEach(() => {",
                "+  // Since the FeatureLoader creates the config for all feature packages,",
                "+  // and it doesn't load for unit tests, it's necessary to manually",
                "+  // construct any default config that they define.",
                "+  Object.keys(nuclideConfig).forEach(key => {",
                "+    global.atom.config.setSchema(",
                "+      `${pkg.name}.${key}`,",
                "+      nuclideConfig[key]",
                "+    );",
                "+  });",
                "+",
                "+  atom.confirm = jest.fn();",
                "+});",
                "+",
                "+afterEach(() => {",
                "+   // Atom intercepts \"process.exit\" so we have to do our own manual cleanup.",
                "+   return new Promise((resolve, reject) => {",
                "+     temp.cleanup((err, stats) => {",
                "+       resolve();",
                "+       if (err && err.message !== 'not tracking') {",
                "+         // eslint-disable-next-line no-console",
                "+         console.log(`temp.cleanup() failed. ${err}`);",
                "+       }",
                "+     });",
                "+   });",
                "+});",
                "diff --git a/modules/nuclide-jest/package.json b/modules/nuclide-jest/package.json",
                "index 1197e7e08..e9d41037c 100644",
                "--- a/modules/nuclide-jest/package.json",
                "+++ b/modules/nuclide-jest/package.json",
                "@@ -17,3 +17,4 @@",
                "     \"react\": \"16.2.0\",",
                "-    \"react-dom\": \"16.2.0\"",
                "+    \"react-dom\": \"16.2.0\",",
                "+    \"temp\": \"0.8.3\"",
                "   }"
            ],
            "changed_files": [
                ".eslintrc.js",
                "modules/nuclide-jest/AtomJestEnvironment.js",
                "modules/nuclide-jest/AtomJestUtils.js",
                "modules/nuclide-jest/atom-runner.js",
                "modules/nuclide-jest/atomSetup.js",
                "modules/nuclide-jest/package.json"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "d290d78ba26c7c45ecd486454ef067fe1656ede1",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521652751,
            "hunks": 13,
            "message": "send the client id in the header on a websocket connection to avoid the extra round-trip Summary: Got to the airport a little early and thought I would see how hard this was. Turns out it was pretty straight-forward. I don't think I tested it enough, and it may still need some polish, but I figured I'd get it out before I got on the plane. Reviewed By: hansonw Differential Revision: D7053394 fbshipit-source-id: 3d3cad41463acfeb068798a8b0cdc238b12e1372",
            "diff": [
                "diff --git a/modules/big-dig/src/server/BigDigServer.js b/modules/big-dig/src/server/BigDigServer.js",
                "index 2bb5768e3..54d7b17c0 100644",
                "--- a/modules/big-dig/src/server/BigDigServer.js",
                "+++ b/modules/big-dig/src/server/BigDigServer.js",
                "@@ -91,3 +91,5 @@ export default class BigDigServer {",
                "     const {pathname} = url.parse(req.url);",
                "+    const clientId = req.headers.client_id;",
                "     this._logger.info(`connection negotiation via path ${String(pathname)}`);",
                "+    this._logger.info(`received client_id in header ${clientId}`);",
                "@@ -98,25 +100,2 @@ export default class BigDigServer {",
                "-    // TODO: send clientId in the http headers on the websocket connection",
                "-    const headerClientId = req.headers.client_id;",
                "-",
                "-    // TODO: after we start sending the clientId in headers, we can remove this check",
                "-    if (headerClientId != null) {",
                "-      this._logger.info(",
                "-        `received clientId ${headerClientId} in header, not waiting for first clientId message`,",
                "-      );",
                "-      this._handleClientId(ws, headerClientId);",
                "-    } else {",
                "-      this._logger.info(",
                "-        'did not receive clientId in header, will wait for first message',",
                "-      );",
                "-      // the first message after a connection should only include",
                "-      // the clientId of the connecting client; the BigDig connection",
                "-      // is not actually made until we get this connection",
                "-      ws.once('message', (clientId: string) => {",
                "-        this._handleClientId(ws, clientId);",
                "-      });",
                "-    }",
                "-  }",
                "-",
                "-  _handleClientId(ws: WS, clientId: string) {",
                "     const cachedTransport = this._clientIdToTransport.get(clientId);",
                "@@ -125,4 +104,3 @@ export default class BigDigServer {",
                "     if (cachedTransport == null) {",
                "-      // handle first message which should include the clientId",
                "-      this._logger.info(`creating new transport with clientId ${clientId}`);",
                "+      this._logger.info(`on connection the clientId is ${clientId}`);",
                "diff --git a/modules/big-dig/src/socket/NuclideSocket.js b/modules/big-dig/src/socket/NuclideSocket.js",
                "index cf3be7f45..5ecf6756e 100644",
                "--- a/modules/big-dig/src/socket/NuclideSocket.js",
                "+++ b/modules/big-dig/src/socket/NuclideSocket.js",
                "@@ -24,3 +24,2 @@ import {XhrConnectionHeartbeat} from '../client/XhrConnectionHeartbeat';",
                " import invariant from 'assert';",
                "-import {attachEvent} from 'nuclide-commons/event';",
                " import {getLogger} from 'log4js';",
                "@@ -144,3 +143,8 @@ export class NuclideSocket {",
                "-    const websocket = new WS(this._websocketUri, this._options);",
                "+    const websocket = new WS(this._websocketUri, {",
                "+      ...this._options,",
                "+      headers: {",
                "+        client_id: this.id,",
                "+      },",
                "+    });",
                "@@ -165,60 +169,35 @@ export class NuclideSocket {",
                "     const onSocketOpen = async () => {",
                "-      logger.info(`sending the id: ${this.id}`);",
                "-      const sendIdResult = await sendOneMessage(websocket, this.id);",
                "-      switch (sendIdResult.kind) {",
                "-        case 'close':",
                "-          websocket.close();",
                "-          logger.info('WebSocket closed before sending id handshake');",
                "-          if (this.isDisconnected()) {",
                "-            logger.info('WebSocket reconnecting after closed.');",
                "-            this._scheduleReconnect();",
                "-          }",
                "-          break;",
                "-        case 'error':",
                "-          websocket.close();",
                "-          logger.error(",
                "-            'WebSocket Error before sending id handshake',",
                "-            sendIdResult.message,",
                "-          );",
                "-          if (this.isDisconnected()) {",
                "-            logger.info('WebSocket reconnecting after error.');",
                "-            this._scheduleReconnect();",
                "-          }",
                "-          break;",
                "-        case 'success':",
                "-          if (this.isDisconnected()) {",
                "-            const ws = new WebSocketTransport(this.id, websocket);",
                "-            const pingId = uuid.v4();",
                "-            ws.onClose(() => {",
                "-              this._clearPingTimer();",
                "-            });",
                "-            ws.onError(error => {",
                "-              ws.close();",
                "-            });",
                "-            ws.onPong(data => {",
                "-              if (pingId === data) {",
                "-                this._schedulePing(pingId, ws);",
                "-              } else {",
                "-                logger.error('pingId mismatch');",
                "-              }",
                "-            });",
                "-            ws.onMessage().subscribe(() => {",
                "-              this._schedulePing(pingId, ws);",
                "-            });",
                "+      if (this.isDisconnected()) {",
                "+        const ws = new WebSocketTransport(this.id, websocket);",
                "+        const pingId = uuid.v4();",
                "+        ws.onClose(() => {",
                "+          this._clearPingTimer();",
                "+        });",
                "+        ws.onError(error => {",
                "+          ws.close();",
                "+        });",
                "+        ws.onPong(data => {",
                "+          if (pingId === data) {",
                "             this._schedulePing(pingId, ws);",
                "-            invariant(this._transport != null);",
                "-            this._transport.reconnect(ws);",
                "-            websocket.removeListener('error', onSocketError);",
                "-            this._emitter.emit('status', true);",
                "-            if (this._previouslyConnected) {",
                "-              logger.info('WebSocket reconnected');",
                "-              this._emitter.emit('reconnect');",
                "-            } else {",
                "-              logger.info('WebSocket connected');",
                "-              this._emitter.emit('connect');",
                "-            }",
                "-            this._previouslyConnected = true;",
                "-            this._reconnectTime = INITIAL_RECONNECT_TIME_MS;",
                "+          } else {",
                "+            logger.error('pingId mismatch');",
                "           }",
                "-          break;",
                "+        });",
                "+        ws.onMessage().subscribe(() => {",
                "+          this._schedulePing(pingId, ws);",
                "+        });",
                "+        this._schedulePing(pingId, ws);",
                "+        invariant(this._transport != null);",
                "+        this._transport.reconnect(ws);",
                "+        websocket.removeListener('error', onSocketError);",
                "+        this._emitter.emit('status', true);",
                "+        if (this._previouslyConnected) {",
                "+          logger.info('WebSocket reconnected');",
                "+          this._emitter.emit('reconnect');",
                "+        } else {",
                "+          logger.info('WebSocket connected');",
                "+          this._emitter.emit('connect');",
                "+        }",
                "+        this._previouslyConnected = true;",
                "+        this._reconnectTime = INITIAL_RECONNECT_TIME_MS;",
                "       }",
                "@@ -351,27 +330 @@ export class NuclideSocket {",
                " }",
                "-",
                "-type SendResult =",
                "-  | {kind: 'error', message: string}",
                "-  | {kind: 'close'}",
                "-  | {kind: 'success'};",
                "-",
                "-function sendOneMessage(socket: WS, message: string): Promise<SendResult> {",
                "-  return new Promise((resolve, reject) => {",
                "-    function finish(result) {",
                "-      onError.dispose();",
                "-      onClose.dispose();",
                "-      resolve(result);",
                "-    }",
                "-    const onError = attachEvent(socket, 'event', err =>",
                "-      finish({kind: 'error', message: err}),",
                "-    );",
                "-    const onClose = attachEvent(socket, 'close', () => finish({kind: 'close'}));",
                "-    socket.send(message, error => {",
                "-      if (error == null) {",
                "-        finish({kind: 'success'});",
                "-      } else {",
                "-        finish({kind: 'error', message: error.toString()});",
                "-      }",
                "-    });",
                "-  });",
                "-}",
                "diff --git a/pkg/nuclide-remote-projects/lib/ConnectionDialog.js b/pkg/nuclide-remote-projects/lib/ConnectionDialog.js",
                "index 104cfc8d4..5e4722f07 100644",
                "--- a/pkg/nuclide-remote-projects/lib/ConnectionDialog.js",
                "+++ b/pkg/nuclide-remote-projects/lib/ConnectionDialog.js",
                "@@ -467,2 +467,3 @@ export default class ConnectionDialog extends React.Component<Props, State> {",
                "         if (useBigDig) {",
                "+          logger.info('using BigDig for the SshHandshake');",
                "           sshHandshake = connectBigDigSshHandshake(",
                "diff --git a/pkg/nuclide-server/lib/NuclideServer.js b/pkg/nuclide-server/lib/NuclideServer.js",
                "index f899ed468..ff598b4df 100644",
                "--- a/pkg/nuclide-server/lib/NuclideServer.js",
                "+++ b/pkg/nuclide-server/lib/NuclideServer.js",
                "@@ -17,3 +17,2 @@ import {getLogger} from 'log4js';",
                " import WS from 'ws';",
                "-import {attachEvent} from 'nuclide-commons/event';",
                " import UniversalDisposable from 'nuclide-commons/UniversalDisposable';",
                "@@ -294,26 +293,5 @@ export default class NuclideServer {",
                "-    const headerClientId = req.headers.client_id;",
                "+    const clientId = req.headers.client_id;",
                "+    logger.info(`received client_id in header ${clientId}`);",
                "-    // XXX: Once we ship the client that is sending the clientId in the header",
                "-    // we can remove this check and just leave the else block",
                "-    if (headerClientId != null) {",
                "-      logger.info(",
                "-        `received clientId in the initial ws header: ${headerClientId}`,",
                "-      );",
                "-      this._handleClientId(socket, headerClientId);",
                "-    } else {",
                "-      logger.info('did not receive the clientId in the initial ws header');",
                "-      logger.info('will wait for the clientId in the first message...');",
                "-      const errorSubscription = attachEvent(socket, 'error', e =>",
                "-        logger.error('WebSocket error before first message', e),",
                "-      );",
                "-",
                "-      socket.once('message', (clientId: string) => {",
                "-        errorSubscription.dispose();",
                "-        this._handleClientId(socket, clientId);",
                "-      });",
                "-    }",
                "-  }",
                "-",
                "-  _handleClientId(socket: WS, clientId: string) {",
                "     let client: ?RpcConnection<QueuedAckTransport> = null;"
            ],
            "changed_files": [
                "modules/big-dig/src/server/BigDigServer.js",
                "modules/big-dig/src/socket/NuclideSocket.js",
                "pkg/nuclide-remote-projects/lib/ConnectionDialog.js",
                "pkg/nuclide-server/lib/NuclideServer.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "dcae1666322177d4f73416a03725af77102cbc22",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521827442,
            "hunks": 2,
            "message": "Add gdb support to command line debugger Summary: Hook up command line debugger to the gdb adapter Reviewed By: mostafaeweda Differential Revision: D7358763 fbshipit-source-id: b00b456ca40d68d6db798ecf418cf8d05d0abe33",
            "diff": [
                "diff --git a/modules/nuclide-debugger-cli/lib/DebuggerAdapterFactory.js b/modules/nuclide-debugger-cli/lib/DebuggerAdapterFactory.js",
                "index 3e20e1ad9..d97362e4c 100644",
                "--- a/modules/nuclide-debugger-cli/lib/DebuggerAdapterFactory.js",
                "+++ b/modules/nuclide-debugger-cli/lib/DebuggerAdapterFactory.js",
                "@@ -86,2 +86,10 @@ export default class DebuggerAdapterFactory {",
                "     ],",
                "+    [",
                "+      VsAdapterTypes.NATIVE_GDB,",
                "+      {",
                "+        key: 'native_gdb',",
                "+        type: 'mi',",
                "+        customArguments: new Map(),",
                "+      },",
                "+    ],",
                "   ]);",
                "diff --git a/modules/nuclide-debugger-vsps/main.js b/modules/nuclide-debugger-vsps/main.js",
                "index e0cf3bbfc..c8b8e70fc 100644",
                "--- a/modules/nuclide-debugger-vsps/main.js",
                "+++ b/modules/nuclide-debugger-vsps/main.js",
                "@@ -117,3 +117,3 @@ const _adapters: Map<Adapter, AdapterInfo> = new Map([",
                "       },",
                "-      root: nuclideUri.join(__dirname, 'fb-native-debugger-gdb-vsp/src'),",
                "+      root: nuclideUri.join(__dirname, 'fb-native-debugger-gdb-vsp'),",
                "     },"
            ],
            "changed_files": [
                "modules/nuclide-debugger-cli/lib/DebuggerAdapterFactory.js",
                "modules/nuclide-debugger-vsps/main.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "ad73ddcfcd37009454d2d731fcabcc18427a5641",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521647025,
            "hunks": 6,
            "message": "Move very verbose logging under a constant Summary: This was making looking at the logs hard and it's not that useful. I also added the tunnel description for the shutdown log message. Reviewed By: stepanhruda Differential Revision: D7313785 fbshipit-source-id: bef981fdea7b0d5628f4154eae68029b21519d72",
            "diff": [
                "diff --git a/pkg/nuclide-socket-rpc/lib/Tunnel.js b/pkg/nuclide-socket-rpc/lib/Tunnel.js",
                "index 9d5b2cecc..900a3c53a 100644",
                "--- a/pkg/nuclide-socket-rpc/lib/Tunnel.js",
                "+++ b/pkg/nuclide-socket-rpc/lib/Tunnel.js",
                "@@ -20,2 +20,3 @@ import type {SocketEvent, TunnelDescriptor, IRemoteSocket} from './types.js';",
                " const LOG_DELTA = 500000; // log for every half megabyte of transferred data",
                "+const DEBUG_VERBOSE = false;",
                "@@ -41,3 +42,5 @@ export function createTunnel(",
                "-      trace('Tunnel: client connected on remote port ' + clientPort);",
                "+      if (DEBUG_VERBOSE) {",
                "+        trace('Tunnel: client connected on remote port ' + clientPort);",
                "+      }",
                "       observer.next({type: 'client_connected', clientPort});",
                "@@ -48,3 +51,5 @@ export function createTunnel(",
                "         bytesWritten += count;",
                "-        logStatsIfNecessary(bytesWritten, bytesReceived);",
                "+        if (DEBUG_VERBOSE) {",
                "+          logStatsIfNecessary(bytesWritten, bytesReceived);",
                "+        }",
                "       });",
                "@@ -59,7 +64,11 @@ export function createTunnel(",
                "-      socket.on('end', () => {",
                "-        trace(",
                "-          `Tunnel: end (port: ${clientPort}, ${tunnelDescription(descriptor)})`,",
                "-        );",
                "-      });",
                "+      if (DEBUG_VERBOSE) {",
                "+        socket.on('end', () => {",
                "+          trace(",
                "+            `Tunnel: end (port: ${clientPort}, ${tunnelDescription(",
                "+              descriptor,",
                "+            )})`,",
                "+          );",
                "+        });",
                "+      }",
                "@@ -87,7 +96,9 @@ export function createTunnel(",
                "         // on client_disconnect remove and dispose the connection",
                "-        trace(",
                "-          `Tunnel: close (port: ${clientPort}, ${tunnelDescription(",
                "-            descriptor,",
                "-          )})`,",
                "-        );",
                "+        if (DEBUG_VERBOSE) {",
                "+          trace(",
                "+            `Tunnel: close (port: ${clientPort}, ${tunnelDescription(",
                "+              descriptor,",
                "+            )})`,",
                "+          );",
                "+        }",
                "         connectionPromise.then(connection => {",
                "@@ -110,3 +121,3 @@ export function createTunnel(",
                "     return () => {",
                "-      trace('Tunnel: shutting down tunnel');",
                "+      trace(`Tunnel: shutting down tunnel ${tunnelDescription(descriptor)}`);",
                "       connections.forEach(connectionPromise =>"
            ],
            "changed_files": [
                "pkg/nuclide-socket-rpc/lib/Tunnel.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "1d5fc5de79be0de8eea5463878b4069141a2f60a",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520642117,
            "hunks": 4,
            "message": "Move whitelist validation to its own file Summary: cleanup Reviewed By: semmypurewal Differential Revision: D7221302 fbshipit-source-id: 3b2202e2d554703f1141322ec53f8f8c8b3b039f",
            "diff": [
                "diff --git a/pkg/nuclide-ssh-tunnel/lib/Whitelist.js b/pkg/nuclide-ssh-tunnel/lib/Whitelist.js",
                "new file mode 100644",
                "index 000000000..ab620b6ee",
                "--- /dev/null",
                "+++ b/pkg/nuclide-ssh-tunnel/lib/Whitelist.js",
                "@@ -0,0 +1,49 @@",
                "+/**",
                "+ * Copyright (c) 2015-present, Facebook, Inc.",
                "+ * All rights reserved.",
                "+ *",
                "+ * This source code is licensed under the license found in the LICENSE file in",
                "+ * the root directory of this source tree.",
                "+ *",
                "+ * @flow",
                "+ * @format",
                "+ */",
                "+",
                "+import type {Tunnel} from './types';",
                "+",
                "+import {memoize} from 'lodash';",
                "+",
                "+export async function validateTunnel(tunnel: Tunnel): Promise<boolean> {",
                "+  if (tunnel.to.host === 'localhost') {",
                "+    return true;",
                "+  }",
                "+  const allowedPorts = await getAllowedPorts();",
                "+  if (allowedPorts == null) {",
                "+    return true;",
                "+  }",
                "+",
                "+  return allowedPorts.includes(tunnel.to.port);",
                "+}",
                "+",
                "+// require fb-sitevar module lazily",
                "+const requireFetchSitevarOnce = memoize(() => {",
                "+  try {",
                "+    // $FlowFB",
                "+    return require('../../commons-node/fb-sitevar').fetchSitevarOnce;",
                "+  } catch (e) {",
                "+    return null;",
                "+  }",
                "+});",
                "+",
                "+// returns either a list of allowed ports, or null if not restricted",
                "+async function getAllowedPorts(): Promise<?Array<number>> {",
                "+  const fetchSitevarOnce = requireFetchSitevarOnce();",
                "+  if (fetchSitevarOnce == null) {",
                "+    return null;",
                "+  }",
                "+  const allowedPorts = await fetchSitevarOnce('NUCLIDE_TUNNEL_ALLOWED_PORTS');",
                "+  if (allowedPorts == null) {",
                "+    return [];",
                "+  }",
                "+  return allowedPorts;",
                "+}",
                "diff --git a/pkg/nuclide-ssh-tunnel/lib/redux/Epics.js b/pkg/nuclide-ssh-tunnel/lib/redux/Epics.js",
                "index 56868047c..7367b898c 100644",
                "--- a/pkg/nuclide-ssh-tunnel/lib/redux/Epics.js",
                "+++ b/pkg/nuclide-ssh-tunnel/lib/redux/Epics.js",
                "@@ -12,4 +12,5 @@",
                " import type {ActionsObservable} from 'nuclide-commons/redux-observable';",
                "-import type {Action, Store, Tunnel} from '../types';",
                "+import type {Action, Store} from '../types';",
                "+import {validateTunnel} from '../Whitelist';",
                " import * as Actions from './Actions';",
                "@@ -19,3 +20,2 @@ import {getSocketServiceByNuclideUri} from '../../../nuclide-remote-connection/'",
                " import nuclideUri from 'nuclide-commons/nuclideUri';",
                "-import {memoize} from 'lodash';",
                " import {tunnelDescription} from '../../../nuclide-socket-rpc/lib/Tunnel';",
                "@@ -128,36 +128 @@ function getSocketServiceByHost(host) {",
                " }",
                "-",
                "-// require fb-sitevar module lazily",
                "-const requireFetchSitevarOnce = memoize(() => {",
                "-  try {",
                "-    // $FlowFB",
                "-    return require('../../../commons-node/fb-sitevar').fetchSitevarOnce;",
                "-  } catch (e) {",
                "-    return null;",
                "-  }",
                "-});",
                "-",
                "-// returns either a list of allowed ports, or null if not restricted",
                "-async function getAllowedPorts(): Promise<?Array<number>> {",
                "-  const fetchSitevarOnce = requireFetchSitevarOnce();",
                "-  if (fetchSitevarOnce == null) {",
                "-    return null;",
                "-  }",
                "-  const allowedPorts = await fetchSitevarOnce('NUCLIDE_TUNNEL_ALLOWED_PORTS');",
                "-  if (allowedPorts == null) {",
                "-    return [];",
                "-  }",
                "-  return allowedPorts;",
                "-}",
                "-",
                "-async function validateTunnel(tunnel: Tunnel): Promise<boolean> {",
                "-  if (tunnel.to.host === 'localhost') {",
                "-    return true;",
                "-  }",
                "-  const allowedPorts = await getAllowedPorts();",
                "-  if (allowedPorts == null) {",
                "-    return true;",
                "-  }",
                "-",
                "-  return allowedPorts.includes(tunnel.to.port);",
                "-}"
            ],
            "changed_files": [
                "pkg/nuclide-ssh-tunnel/lib/Whitelist.js",
                "pkg/nuclide-ssh-tunnel/lib/redux/Epics.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "202b10ea7bfca304c7352a9f061545a833ce8f3a",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521335846,
            "hunks": 3,
            "message": "Dispose of the sucessful tunnels when one fails Summary: Make sure that we dispose successful open tunnels when one of them fails. Since this was just rejecting the promise when one failed we would never get any disposable to clean the others up. It also collects all the errors (for all the tunnels) and surfaces them. Reviewed By: stepanhruda Differential Revision: D7301348 fbshipit-source-id: c8b787e5148ac7a95bd1d9003c878e752458a6e9",
            "diff": [
                "diff --git a/pkg/nuclide-adb-sdb-base/lib/Tunneling.js b/pkg/nuclide-adb-sdb-base/lib/Tunneling.js",
                "index 3ad96a430..8d7db6aa7 100644",
                "--- a/pkg/nuclide-adb-sdb-base/lib/Tunneling.js",
                "+++ b/pkg/nuclide-adb-sdb-base/lib/Tunneling.js",
                "@@ -19,2 +19,3 @@ import invariant from 'assert';",
                " import nuclideUri from 'nuclide-commons/nuclideUri';",
                "+import UniversalDisposable from 'nuclide-commons/UniversalDisposable';",
                " import {Observable, Subject} from 'rxjs';",
                "@@ -96,9 +97,18 @@ async function openTunnels(host: NuclideUri): Promise<Array<IDisposable>> {",
                "   ];",
                "+",
                "+  const rejectedErrors = [];",
                "   return Promise.all(",
                "-    tunnels.map(t =>",
                "-      _requestTunnelFromService(t, tunnelService).catch(() => ({",
                "-        dispose: () => {},",
                "-      })),",
                "-    ),",
                "-  );",
                "+    tunnels.map(tunnel => {",
                "+      return _requestTunnelFromService(tunnel, tunnelService).catch(error => {",
                "+        rejectedErrors.push(error);",
                "+        return new UniversalDisposable();",
                "+      });",
                "+    }),",
                "+  ).then(disposables => {",
                "+    if (rejectedErrors.length > 0) {",
                "+      disposables.forEach(disposable => disposable.dispose());",
                "+      return Promise.reject(new Error(rejectedErrors));",
                "+    }",
                "+    return disposables;",
                "+  });",
                " }"
            ],
            "changed_files": [
                "pkg/nuclide-adb-sdb-base/lib/Tunneling.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "e5ce79d4e431eff55df4136d04a819ffeb3e2033",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521578874,
            "hunks": 1,
            "message": "Implement BigDigClient.dispose() Summary: The function was a `TODO`. Reviewed By: bolinfest Differential Revision: D7336354 fbshipit-source-id: 4036d40d6c010ab773f7f735553c844734f8fc66",
            "diff": [
                "diff --git a/modules/big-dig/src/client/BigDigClient.js b/modules/big-dig/src/client/BigDigClient.js",
                "index 73e105f93..3a995329e 100644",
                "--- a/modules/big-dig/src/client/BigDigClient.js",
                "+++ b/modules/big-dig/src/client/BigDigClient.js",
                "@@ -97,3 +97,3 @@ export class BigDigClient {",
                "   dispose() {",
                "-    // TODO(mbolin)",
                "+    this.close();",
                "   }"
            ],
            "changed_files": [
                "modules/big-dig/src/client/BigDigClient.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "dd1ccfaf6ae07d74d04e0a8871bc6d27dda35520",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521844071,
            "hunks": 2,
            "message": "Update Nuclide's package-deps Summary: - Remove the versions - there were some important changes we wanted everyone to have, but atom-package-deps will install the exact version rather than the latest. Now that this has run for everyone we can go back to just using the latest. - Remove MagicPython - Atom 1.25's language-python should be superior now. Reviewed By: wbinnssmith Differential Revision: D7384921 fbshipit-source-id: ed518dbbd22ee57cdf975c83a0081737d3857b8a",
            "diff": [
                "diff --git a/package.json b/package.json",
                "index aaaecadf2..b9fbf2da3 100644",
                "--- a/package.json",
                "+++ b/package.json",
                "@@ -205,4 +205,4 @@",
                "   \"package-deps\": [",
                "-    \"file-icons:2.1.17\",",
                "-    \"tool-bar:1.1.6\",",
                "+    \"file-icons\",",
                "+    \"tool-bar\",",
                "     \"highlight-selected\",",
                "@@ -218,4 +218,3 @@",
                "     \"language-scala\",",
                "-    \"MagicPython\",",
                "-    \"nuclide-format-js:0.0.44\",",
                "+    \"nuclide-format-js\",",
                "     \"set-syntax\","
            ],
            "changed_files": [
                "package.json"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "b922c438e082c4edca1d55984bfa184494c2bd7e",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520468926,
            "hunks": 1,
            "message": "Track go-to-definition actions Reviewed By: jgebhardt Differential Revision: D7188129 fbshipit-source-id: d7b80a07842c689dba2f3ff01538a22f1b1c4036",
            "diff": [
                "diff --git a/modules/atom-ide-ui/pkg/atom-ide-definitions/lib/main.js b/modules/atom-ide-ui/pkg/atom-ide-definitions/lib/main.js",
                "index 3e7cc906a..022b8bc23 100644",
                "--- a/modules/atom-ide-ui/pkg/atom-ide-definitions/lib/main.js",
                "+++ b/modules/atom-ide-ui/pkg/atom-ide-definitions/lib/main.js",
                "@@ -131,2 +131,8 @@ class Activation {",
                "         });",
                "+        analytics.track('go-to-definition', {",
                "+          path: definition.path,",
                "+          line: definition.position.row,",
                "+          column: definition.position.column,",
                "+          from: editor.getPath(),",
                "+        });",
                "       };"
            ],
            "changed_files": [
                "modules/atom-ide-ui/pkg/atom-ide-definitions/lib/main.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "bb6db8b31bed915d3d70145f4f9d2cd3f58b42b9",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520548641,
            "hunks": 14,
            "message": "Fix: race condition when breakpoint hits before thread event processed Summary: If a thread starts and then very quickly hits a breakpoint, the breakpoint may be ignored because the thread data may have not finished fetching and therefore there's no thread to mark as stopped. Fix is to sync all threads when we stop before we update the model. Reviewed By: ebluestein Differential Revision: D7170029 fbshipit-source-id: 4fd7937b492c4877c4fa4b19450d331d12f3d4c3",
            "diff": [
                "diff --git a/pkg/nuclide-debugger-new/lib/types.js b/pkg/nuclide-debugger-new/lib/types.js",
                "index b11a39dab..c516590d2 100644",
                "--- a/pkg/nuclide-debugger-new/lib/types.js",
                "+++ b/pkg/nuclide-debugger-new/lib/types.js",
                "@@ -479,9 +479,14 @@ export interface IFunctionBreakpoint extends IEnableable {",
                "-export interface IRawModelUpdate {",
                "-  threadId: number;",
                "-  sessionId: string;",
                "-  thread?: ?DebugProtocol.Thread;",
                "-  callStack?: ?(DebugProtocol.StackFrame[]);",
                "-  stoppedDetails?: ?IRawStoppedDetails;",
                "-}",
                "+export type IRawStopppedUpdate = {",
                "+  sessionId: string,",
                "+  threadId: ?number,",
                "+  stoppedDetails: IRawStoppedDetails,",
                "+};",
                "+",
                "+export type IRawThreadUpdate = {",
                "+  sessionId: string,",
                "+  thread: DebugProtocol.Thread,",
                "+};",
                "+",
                "+export type IRawModelUpdate = IRawStopppedUpdate | IRawThreadUpdate;",
                "diff --git a/pkg/nuclide-debugger-new/lib/vsp/DebugService.js b/pkg/nuclide-debugger-new/lib/vsp/DebugService.js",
                "index 5997bd052..46a05ea06 100644",
                "--- a/pkg/nuclide-debugger-new/lib/vsp/DebugService.js",
                "+++ b/pkg/nuclide-debugger-new/lib/vsp/DebugService.js",
                "@@ -440,3 +440,2 @@ export default class DebugService implements IDebugService {",
                "             sessionId,",
                "-            threadId: thread.id,",
                "             thread,",
                "@@ -501,11 +500,34 @@ export default class DebugService implements IDebugService {",
                "+    const observeContinuedTo = (threadId: ?number) => {",
                "+      return session",
                "+        .observeContinuedEvents()",
                "+        .filter(",
                "+          continued =>",
                "+            continued.body.allThreadsContinued ||",
                "+            (threadId != null && threadId === continued.body.threadId),",
                "+        )",
                "+        .take(1);",
                "+    };",
                "+",
                "     this._sessionEndDisposables.add(",
                "-      session.observeStopEvents().subscribe(async event => {",
                "+      session.observeStopEvents().subscribe(() => {",
                "         this._updateModeAndEmit(DebuggerMode.PAUSED);",
                "-        const {threadId} = event.body;",
                "-        try {",
                "-          const threadFetecherPromise = threadFetcher();",
                "-          if (threadId == null) {",
                "-            return;",
                "-          }",
                "+      }),",
                "+      session",
                "+        .observeStopEvents()",
                "+        .flatMap(event =>",
                "+          Observable.fromPromise(threadFetcher())",
                "+            .ignoreElements()",
                "+            .concat(Observable.of(event))",
                "+            .catch(error => {",
                "+              onUnexpectedError(error);",
                "+              return Observable.empty();",
                "+            })",
                "+            // Proceeed processing the stopped event only if there wasn't",
                "+            // a continued event while we're fetching the threads",
                "+            .takeUntil(observeContinuedTo(event.body.threadId)),",
                "+        )",
                "+        .subscribe((event: DebugProtocol.StoppedEvent) => {",
                "+          const {threadId} = event.body;",
                "+          // Updating stopped state needs to happen after fetching the threads",
                "           this._model.rawUpdate({",
                "@@ -515,3 +537,6 @@ export default class DebugService implements IDebugService {",
                "           });",
                "-          await threadFetecherPromise;",
                "+",
                "+          if (threadId == null) {",
                "+            return;",
                "+          }",
                "           const thread = process.getThread(threadId);",
                "@@ -520,6 +545,3 @@ export default class DebugService implements IDebugService {",
                "           }",
                "-        } catch (error) {",
                "-          onUnexpectedError(error);",
                "-        }",
                "-      }),",
                "+        }),",
                "@@ -545,9 +567,15 @@ export default class DebugService implements IDebugService {",
                "           // then the rest of the call stack.",
                "-          return Observable.fromPromise(this._model.fetchCallStack(thread))",
                "-            .ignoreElements()",
                "-            .concat(Observable.of(thread))",
                "-            .catch(error => {",
                "-              onUnexpectedError(error);",
                "-              return Observable.empty();",
                "-            });",
                "+          return (",
                "+            Observable.fromPromise(this._model.fetchCallStack(thread))",
                "+              .ignoreElements()",
                "+              .concat(Observable.of(thread))",
                "+              // Avoid focusing a continued thread.",
                "+              .takeUntil(observeContinuedTo(thread.threadId))",
                "+              // Verify the thread is still stopped.",
                "+              .filter(() => thread.stopped)",
                "+              .catch(error => {",
                "+                onUnexpectedError(error);",
                "+                return Observable.empty();",
                "+              })",
                "+          );",
                "         })",
                "diff --git a/pkg/nuclide-debugger-new/lib/vsp/DebuggerModel.js b/pkg/nuclide-debugger-new/lib/vsp/DebuggerModel.js",
                "index fae1fec0d..4e1823d36 100644",
                "--- a/pkg/nuclide-debugger-new/lib/vsp/DebuggerModel.js",
                "+++ b/pkg/nuclide-debugger-new/lib/vsp/DebuggerModel.js",
                "@@ -47,2 +47,4 @@ import type {",
                "   IRawModelUpdate,",
                "+  IRawStopppedUpdate,",
                "+  IRawThreadUpdate,",
                "   ISession,",
                "@@ -845,31 +847,37 @@ export class Process implements IProcess {",
                "-  rawUpdate(data: IRawModelUpdate): void {",
                "-    if (data.thread && !this._threads.has(data.threadId)) {",
                "-      // A new thread came in, initialize it.",
                "-      this._threads.set(",
                "-        data.threadId,",
                "-        new Thread(this, data.thread.name, data.thread.id),",
                "-      );",
                "-    } else if (data.thread && data.thread.name) {",
                "-      // Just the thread name got updated #18244",
                "-      nullthrows(this._threads.get(data.threadId)).name = data.thread.name;",
                "+  rawStoppedUpdate(data: IRawStopppedUpdate): void {",
                "+    const {threadId, stoppedDetails} = data;",
                "+    if (threadId != null && !this._threads.has(threadId)) {",
                "+      // We're being asked to update a thread we haven't seen yet, so",
                "+      // create it",
                "+      const thread = new Thread(this, 'PENDING_UPDATE', threadId);",
                "+      this._threads.set(threadId, thread);",
                "     }",
                "-    if (data.stoppedDetails != null) {",
                "-      // Set the availability of the threads' callstacks depending on",
                "-      // whether the thread is stopped or not",
                "-      if (data.stoppedDetails.allThreadsStopped) {",
                "-        this._threads.forEach(thread => {",
                "-          thread.stoppedDetails =",
                "-            thread.threadId === data.threadId ? data.stoppedDetails : {};",
                "-          thread.stopped = true;",
                "-          thread.clearCallStack();",
                "-        });",
                "-      } else if (this._threads.has(data.threadId)) {",
                "-        // One thread is stopped, only update that thread.",
                "-        const thread = nullthrows(this._threads.get(data.threadId));",
                "-        thread.stoppedDetails = data.stoppedDetails || null;",
                "-        thread.clearCallStack();",
                "+    // Set the availability of the threads' callstacks depending on",
                "+    // whether the thread is stopped or not",
                "+    if (stoppedDetails.allThreadsStopped) {",
                "+      this._threads.forEach(thread => {",
                "+        thread.stoppedDetails =",
                "+          thread.threadId === threadId ? stoppedDetails : {};",
                "         thread.stopped = true;",
                "-      }",
                "+        thread.clearCallStack();",
                "+      });",
                "+    } else if (threadId != null) {",
                "+      // One thread is stopped, only update that thread.",
                "+      const thread = nullthrows(this._threads.get(threadId));",
                "+      thread.stoppedDetails = stoppedDetails;",
                "+      thread.clearCallStack();",
                "+      thread.stopped = true;",
                "+    }",
                "+  }",
                "+",
                "+  rawThreadUpdate(data: IRawThreadUpdate): void {",
                "+    const {thread} = data;",
                "+    if (!this._threads.has(thread.id)) {",
                "+      // A new thread came in, initialize it.",
                "+      this._threads.set(thread.id, new Thread(this, thread.name, thread.id));",
                "+    } else if (thread.name) {",
                "+      // Just the thread name got updated #18244",
                "+      nullthrows(this._threads.get(thread.id)).name = thread.name;",
                "     }",
                "@@ -1088,6 +1096,12 @@ export class Model implements IModel {",
                "       .pop();",
                "-    if (process != null) {",
                "-      process.rawUpdate(data);",
                "-      this._emitter.emit(CALLSTACK_CHANGED);",
                "+    if (process == null) {",
                "+      return;",
                "+    }",
                "+    if (data.stoppedDetails != null) {",
                "+      process.rawStoppedUpdate((data: any));",
                "+    } else {",
                "+      process.rawThreadUpdate((data: any));",
                "     }",
                "+",
                "+    this._emitter.emit(CALLSTACK_CHANGED);",
                "   }"
            ],
            "changed_files": [
                "pkg/nuclide-debugger-new/lib/types.js",
                "pkg/nuclide-debugger-new/lib/vsp/DebugService.js",
                "pkg/nuclide-debugger-new/lib/vsp/DebuggerModel.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "3f9f960f1c1457ff5ccacb732db373db005e7ccb",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520621828,
            "hunks": 6,
            "message": "Flow upgrade to v0.67.1 Summary: Upgrade Flow in Nuclide to latest. Reviewed By: nmote Differential Revision: D7198578 fbshipit-source-id: 74d6775e45754297cd8e47e7e46c3ac51a748d13",
            "diff": [
                "diff --git a/.flowconfig b/.flowconfig",
                "index f50686948..6d0739160 100644",
                "--- a/.flowconfig",
                "+++ b/.flowconfig",
                "@@ -40,2 +40,2 @@ sketchy-null-bool=off",
                " [version]",
                "-0.66.0",
                "+0.67.1",
                "diff --git a/modules/nuclide-commons/fsPromise.js b/modules/nuclide-commons/fsPromise.js",
                "index 9168a3f55..7f16da830 100644",
                "--- a/modules/nuclide-commons/fsPromise.js",
                "+++ b/modules/nuclide-commons/fsPromise.js",
                "@@ -273,3 +273,2 @@ async function copyFilePermissions(",
                "       destinationPath,",
                "-      // $FlowIssue: umask argument is optional",
                "       0o666 & ~process.umask(), // eslint-disable-line no-bitwise",
                "diff --git a/modules/nuclide-commons/spec/fsPromise-spec.js b/modules/nuclide-commons/spec/fsPromise-spec.js",
                "index a112893b0..ac55ea42a 100644",
                "--- a/modules/nuclide-commons/spec/fsPromise-spec.js",
                "+++ b/modules/nuclide-commons/spec/fsPromise-spec.js",
                "@@ -170,3 +170,2 @@ describe('fsPromise test suite', () => {",
                "         expect(fs.statSync(pathToWriteFile).mode & 0o777).toEqual(",
                "-          // $FlowIssue: umask argument is optional",
                "           0o666 & ~process.umask(), // eslint-disable-line no-bitwise",
                "diff --git a/package.json b/package.json",
                "index c4b6a58b4..080a6acaf 100644",
                "--- a/package.json",
                "+++ b/package.json",
                "@@ -175,3 +175,3 @@",
                "     \"eslint-plugin-rulesdir\": \"0.1.0\",",
                "-    \"flow-bin\": \"0.66.0\",",
                "+    \"flow-bin\": \"0.67.1\",",
                "     \"fs-extra\": \"2.0.0\",",
                "diff --git a/scripts/lib/dependencies.json b/scripts/lib/dependencies.json",
                "index 8bb7b37ab..8b60ab71c 100644",
                "--- a/scripts/lib/dependencies.json",
                "+++ b/scripts/lib/dependencies.json",
                "@@ -14,3 +14,3 @@",
                "     \"version-cmd\": [\"flow\", \"version\"],",
                "-    \"version-output\": \"Flow, a static type checker for JavaScript, version 0.66.0\",",
                "+    \"version-output\": \"Flow, a static type checker for JavaScript, version 0.67.1\",",
                "     \"url\": null,",
                "diff --git a/yarn.lock b/yarn.lock",
                "index 409301f8a..5b77cb6fd 100644",
                "--- a/yarn.lock",
                "+++ b/yarn.lock",
                "@@ -1986,5 +1986,5 @@ flatten-source-map@0.0.2:",
                "-flow-bin@0.66.0:",
                "-  version \"0.66.0\"",
                "-  resolved \"https://registry.yarnpkg.com/flow-bin/-/flow-bin-0.66.0.tgz#a96dde7015dc3343fd552a7b4963c02be705ca26\"",
                "+flow-bin@0.67.1:",
                "+  version \"0.67.1\"",
                "+  resolved \"https://registry.yarnpkg.com/flow-bin/-/flow-bin-0.67.1.tgz#eabb7197cce870ac9442cfd04251c7ddc30377db\""
            ],
            "changed_files": [
                ".flowconfig",
                "modules/nuclide-commons/fsPromise.js",
                "modules/nuclide-commons/spec/fsPromise-spec.js",
                "package.json",
                "scripts/lib/dependencies.json",
                "yarn.lock"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "0fb693d750684d6972005e2780b846a6e63b371e",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521581613,
            "hunks": 1,
            "message": "Removing modules/big-dig/src/client/WebSocketTransport.js Summary: This file appears as though it has been superseded by `modules/big-dig/src/socket/WebSocketTransport.js` because there do not appear to be any references to `modules/big-dig/src/client/WebSocketTransport.js`. Reviewed By: hansonw Differential Revision: D7335069 fbshipit-source-id: ff6a17c88a9d6db02274ead5dc572d015d3c9342",
            "diff": [
                "diff --git a/modules/big-dig/src/client/WebSocketTransport.js b/modules/big-dig/src/client/WebSocketTransport.js",
                "deleted file mode 100644",
                "index d4235073f..000000000",
                "--- a/modules/big-dig/src/client/WebSocketTransport.js",
                "+++ /dev/null",
                "@@ -1,198 +0,0 @@",
                "-/**",
                "- * Copyright (c) 2017-present, Facebook, Inc.",
                "- * All rights reserved.",
                "- *",
                "- * This source code is licensed under the BSD-style license found in the",
                "- * LICENSE file in the root directory of this source tree. An additional grant",
                "- * of patent rights can be found in the PATENTS file in the same directory.",
                "- *",
                "- * @flow",
                "- * @format",
                "- */",
                "-",
                "-import type WS from 'ws';",
                "-import type {Observable} from 'rxjs';",
                "-",
                "-import {Subject} from 'rxjs';",
                "-import https from 'https';",
                "-import invariant from 'assert';",
                "-import {getLogger} from 'log4js';",
                "-import {Emitter} from 'event-kit';",
                "-",
                "-const logger = getLogger();",
                "-",
                "-// An unreliable transport for sending JSON formatted messages",
                "-// over a WebSocket",
                "-//",
                "-// onClose handlers are guaranteed to be called exactly once.",
                "-// onMessage handlers are guaranteed to not be called after onClose has been called.",
                "-// send(data) yields false if the message failed to send, true on success.",
                "-// onClose handlers will be called before close() returns.",
                "-export class WebSocketTransport {",
                "-  id: string;",
                "-  _agent: http$Agent;",
                "-  _socket: ?WS;",
                "-  _emitter: Emitter;",
                "-  _messages: Subject<string>;",
                "-",
                "-  constructor(clientId: string, agent: http$Agent, socket: WS) {",
                "-    this.id = clientId;",
                "-    this._emitter = new Emitter();",
                "-    this._agent = agent;",
                "-    this._socket = socket;",
                "-    this._messages = new Subject();",
                "-",
                "-    logger.info('Client #%s connecting with a new socket!', this.id);",
                "-    socket.on('message', data => {",
                "-      this._onSocketMessage(data);",
                "-    });",
                "-",
                "-    socket.on('close', () => {",
                "-      if (this._socket != null) {",
                "-        invariant(this._socket === socket);",
                "-        logger.info(",
                "-          'Client #%s socket close received on open socket!',",
                "-          this.id,",
                "-        );",
                "-        this._setClosed();",
                "-      } else {",
                "-        logger.info(",
                "-          'Client #%s received socket close on already closed socket!',",
                "-          this.id,",
                "-        );",
                "-      }",
                "-    });",
                "-",
                "-    socket.on('error', e => {",
                "-      if (this._socket != null) {",
                "-        logger.error(`Client #${this.id} error: ${e.message}`);",
                "-        this._emitter.emit('error', e);",
                "-      } else {",
                "-        logger.error(`Client #${this.id} error after close: ${e.message}`);",
                "-      }",
                "-    });",
                "-",
                "-    socket.on('pong', data => {",
                "-      if (this._socket != null) {",
                "-        // data may be a Uint8Array",
                "-        this._emitter.emit('pong', data != null ? String(data) : data);",
                "-      } else {",
                "-        logger.error('Received socket pong after connection closed');",
                "-      }",
                "-    });",
                "-  }",
                "-",
                "-  /** @return `wss://hostname:port`. */",
                "-  getAddress(): string {",
                "-    const socket = this._socket;",
                "-    invariant(socket);",
                "-    return socket.url;",
                "-  }",
                "-",
                "-  // TODO(mbolin): Remove this once we have BigDigClient working. Until then,",
                "-  // this demonstrates how to make a secure request to the HTTPS server.",
                "-  testAgent() {",
                "-    const {hostname, port} = require('url').parse(this.getAddress());",
                "-    // eslint-disable-next-line no-console",
                "-    console.log(`will connect to ${String(hostname)} ${String(port)}`);",
                "-    const request = https.request(",
                "-      {",
                "-        hostname,",
                "-        port,",
                "-        path: '/test',",
                "-        method: 'GET',",
                "-        agent: this._agent,",
                "-      },",
                "-      response => {",
                "-        // eslint-disable-next-line no-console",
                "-        console.log(`received response in testAgent: ${response.statusCode}`);",
                "-      },",
                "-    );",
                "-    request.on('error', e => {",
                "-      // eslint-disable-next-line no-console",
                "-      console.error(`problem with request: ${e.message}`);",
                "-    });",
                "-    request.end();",
                "-  }",
                "-",
                "-  _onSocketMessage(message: string): void {",
                "-    if (this._socket == null) {",
                "-      logger.error('Received socket message after connection closed');",
                "-      return;",
                "-    }",
                "-    this._messages.next(message);",
                "-  }",
                "-",
                "-  onMessage(): Observable<string> {",
                "-    return this._messages;",
                "-  }",
                "-",
                "-  onClose(callback: () => mixed): IDisposable {",
                "-    return this._emitter.on('close', callback);",
                "-  }",
                "-",
                "-  onError(callback: (error: Error) => mixed): IDisposable {",
                "-    return this._emitter.on('error', callback);",
                "-  }",
                "-",
                "-  send(message: string): Promise<boolean> {",
                "-    const socket = this._socket;",
                "-    if (socket == null) {",
                "-      logger.error(",
                "-        'Attempt to send socket message after connection closed',",
                "-        new Error(),",
                "-      );",
                "-      return Promise.resolve(false);",
                "-    }",
                "-",
                "-    return new Promise((resolve, reject) => {",
                "-      const data = message;",
                "-      socket.send(data, err => {",
                "-        if (err != null) {",
                "-          logger.warn(",
                "-            'Failed sending socket message to client:',",
                "-            this.id,",
                "-            message,",
                "-          );",
                "-          resolve(false);",
                "-        } else {",
                "-          resolve(true);",
                "-        }",
                "-      });",
                "-    });",
                "-  }",
                "-",
                "-  // The WS socket automatically responds to pings with pongs.",
                "-  ping(data: ?string): void {",
                "-    if (this._socket != null) {",
                "-      this._socket.ping(data);",
                "-    } else {",
                "-      logger.error('Attempted to send socket ping after connection closed');",
                "-    }",
                "-  }",
                "-",
                "-  onPong(callback: (data: ?string) => void): IDisposable {",
                "-    return this._emitter.on('pong', callback);",
                "-  }",
                "-",
                "-  close(): void {",
                "-    if (this._socket != null) {",
                "-      // The call to socket.close may or may not cause our handler to be called",
                "-      this._socket.close();",
                "-      this._setClosed();",
                "-    }",
                "-  }",
                "-",
                "-  isClosed(): boolean {",
                "-    return this._socket == null;",
                "-  }",
                "-",
                "-  _setClosed(): void {",
                "-    if (this._socket != null) {",
                "-      // In certain (Error) conditions socket.close may not emit the on close",
                "-      // event synchronously.",
                "-      this._socket = null;",
                "-      this._emitter.emit('close');",
                "-    }",
                "-  }",
                "-}"
            ],
            "changed_files": [
                "modules/big-dig/src/client/WebSocketTransport.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "b66a4a7744d0b6e8861dd08169046a892396fbfc",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521483515,
            "hunks": 5,
            "message": "Upgrade atom 1.25 Reviewed By: hansonw Differential Revision: D7295055 fbshipit-source-id: 27227d58d075f701d5c15438e93f0de8f6b03271",
            "diff": [
                "diff --git a/circle.yml b/circle.yml",
                "index 4092346a6..91b187060 100644",
                "--- a/circle.yml",
                "+++ b/circle.yml",
                "@@ -4,3 +4,3 @@ machine:",
                "   node:",
                "-    version: 7.4.0",
                "+    version: 7.9.0",
                "diff --git a/package.json b/package.json",
                "index 7a734f296..cc537b26f 100644",
                "--- a/package.json",
                "+++ b/package.json",
                "@@ -196,4 +196,4 @@",
                "   \"engines\": {",
                "-    \"atom\": \">=1.24.0\",",
                "-    \"node\": \">=7.4.0\"",
                "+    \"atom\": \">=1.25.0\",",
                "+    \"node\": \">=7.9.0\"",
                "   },",
                "diff --git a/scripts/lib/dependencies.json b/scripts/lib/dependencies.json",
                "index 8b60ab71c..dc112fa45 100644",
                "--- a/scripts/lib/dependencies.json",
                "+++ b/scripts/lib/dependencies.json",
                "@@ -7,5 +7,5 @@",
                "     ],",
                "-    \"version-output\": \"Atom    : 1.24.0\\nElectron: 1.6.16\\nChrome  : 56.0.2924.87\\nNode    : 7.4.0\",",
                "-    \"url\": \"https://github.com/atom/atom/releases/download/v1.24.0/atom-mac.zip\",",
                "-    \"shasum\": \"4f95c311c9f8d28ff2c1b8a530c68d77334d061d5829cfdb34b4b9f077bf3365\"",
                "+    \"version-output\": \"Atom    : 1.25.0\\nElectron: 1.7.11\\nChrome  : 58.0.3029.110\\nNode    : 7.9.0\",",
                "+    \"url\": \"https://github.com/atom/atom/releases/download/v1.25.0/atom-mac.zip\",",
                "+    \"shasum\": \"da80ffdb083b6b658ca42acba3b09a0a3865d45e4c2deca925d35c02eae34dde\"",
                "   },",
                "@@ -24,5 +24,5 @@",
                "     ],",
                "-    \"version-output\": \"v7.4.0\",",
                "-    \"url\": \"https://nodejs.org/dist/v7.4.0/node-v7.4.0-darwin-x64.tar.gz\",",
                "-    \"shasum\": \"72158cac53f01d1794fa56e75c8c637a9ae3072b339d9221a2bbf7f0744c80bb\"",
                "+    \"version-output\": \"v7.9.0\",",
                "+    \"url\": \"https://nodejs.org/dist/v7.9.0/node-v7.9.0-darwin-x64.tar.gz\",",
                "+    \"shasum\": \"fbeff9aa20adfb69e0a2977578713ac0a33d20d895816af4c9eb9f75aa2b0c31\"",
                "   },",
                "@@ -34,3 +34,3 @@",
                "     ],",
                "-    \"version-output\": \"4.0.5\",",
                "+    \"version-output\": \"4.2.0\",",
                "     \"url\": null,"
            ],
            "changed_files": [
                "circle.yml",
                "package.json",
                "scripts/lib/dependencies.json"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "0809ef38017784c1aac95fc35f6cd9733e0b46d3",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521236669,
            "hunks": 8,
            "message": "Add season excluding offline (2 of 4) Summary: Add `season` dependency into nuclide. Reviewed By: wbinnssmith Differential Revision: D7244678 fbshipit-source-id: e84f9047e0b4a40364b45e6d5e18dc66de8dd6fb",
            "diff": [
                "diff --git a/package.json b/package.json",
                "index a4436b984..7a734f296 100644",
                "--- a/package.json",
                "+++ b/package.json",
                "@@ -117,2 +117,3 @@",
                "     \"rxjs\": \"5.5.5\",",
                "+    \"season\": \"6.0.2\",",
                "     \"semver\": \"5.3.0\",",
                "diff --git a/yarn.lock b/yarn.lock",
                "index 4094b2448..0b7d37445 100644",
                "--- a/yarn.lock",
                "+++ b/yarn.lock",
                "@@ -317,3 +317,3 @@ async-to-generator@1.1.0:",
                "-async@^1.4.0:",
                "+async@^1.4.0, async@^1.5.2:",
                "   version \"1.5.2\"",
                "@@ -1285,2 +1285,6 @@ coffee-script@>=1.0.1:",
                "+coffee-script@^1.10.0:",
                "+  version \"1.12.7\"",
                "+  resolved \"https://registry.yarnpkg.com/coffee-script/-/coffee-script-1.12.7.tgz#c05dae0cb79591d05b3070a8433a98c9a89ccc53\"",
                "+",
                " collection-visit@^1.0.0:",
                "@@ -1430,2 +1434,8 @@ cryptiles@3.x.x:",
                "+cson-parser@^1.3.0:",
                "+  version \"1.3.5\"",
                "+  resolved \"https://registry.yarnpkg.com/cson-parser/-/cson-parser-1.3.5.tgz#7ec675e039145533bf2a6a856073f1599d9c2d24\"",
                "+  dependencies:",
                "+    coffee-script \"^1.10.0\"",
                "+",
                " css-select@~1.2.0:",
                "@@ -2315,2 +2325,11 @@ fs-plus@2.9.3:",
                "+fs-plus@^3.0.0:",
                "+  version \"3.0.2\"",
                "+  resolved \"https://registry.yarnpkg.com/fs-plus/-/fs-plus-3.0.2.tgz#6b5f52a7712894c4dde9fd8f81fa8c60df041f3d\"",
                "+  dependencies:",
                "+    async \"^1.5.2\"",
                "+    mkdirp \"^0.5.1\"",
                "+    rimraf \"^2.5.2\"",
                "+    underscore-plus \"1.x\"",
                "+",
                " fs.realpath@^1.0.0:",
                "@@ -5477,3 +5496,3 @@ right-align@^0.1.1:",
                "-rimraf@2, rimraf@2.6.2, rimraf@^2.2.8, rimraf@^2.3.3, rimraf@^2.5.1, rimraf@^2.5.4, rimraf@^2.6.1:",
                "+rimraf@2, rimraf@2.6.2, rimraf@^2.2.8, rimraf@^2.3.3, rimraf@^2.5.1, rimraf@^2.5.2, rimraf@^2.5.4, rimraf@^2.6.1:",
                "   version \"2.6.2\"",
                "@@ -5595,2 +5614,10 @@ sb-promisify@^2.0.1:",
                "+season@6.0.2:",
                "+  version \"6.0.2\"",
                "+  resolved \"https://registry.yarnpkg.com/season/-/season-6.0.2.tgz#9da58fb1ddd24824d7621b2dc63a7123b50217b6\"",
                "+  dependencies:",
                "+    cson-parser \"^1.3.0\"",
                "+    fs-plus \"^3.0.0\"",
                "+    yargs \"^3.23.0\"",
                "+",
                " \"semver@2 || 3 || 4 || 5\", semver@5.3.0, semver@^5.1.0, semver@^5.3.0:",
                "@@ -6898,3 +6925,3 @@ yargs-parser@^8.1.0:",
                "-yargs@3.32.0, \"yargs@^3.32.0 || ^7.0.0\":",
                "+yargs@3.32.0, yargs@^3.23.0, \"yargs@^3.32.0 || ^7.0.0\":",
                "   version \"3.32.0\""
            ],
            "changed_files": [
                "package.json",
                "yarn.lock"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "24280e5f76ad4701ca223aa549472ed65424572a",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520879392,
            "hunks": 3,
            "message": "Return disassembly for no source available Summary: Add a source reference to the stack frame, and use it to return disassembly if source is not available Reviewed By: ebluestein Differential Revision: D7219394 fbshipit-source-id: e9d1eebe15491452354fac318c08d0569ab267fd",
            "diff": [
                "diff --git a/modules/nuclide-debugger-vsps/package.json b/modules/nuclide-debugger-vsps/package.json",
                "index bdb4c8723..c978198fc 100644",
                "--- a/modules/nuclide-debugger-vsps/package.json",
                "+++ b/modules/nuclide-debugger-vsps/package.json",
                "@@ -15,2 +15,3 @@",
                "     \"async-to-generator\": \"1.1.0\",",
                "+    \"big-integer\": \"1.6.17\",",
                "     \"nuclide-commons\": \"0.5.1-dev\",",
                "diff --git a/package.json b/package.json",
                "index 080a6acaf..fcbeefece 100644",
                "--- a/package.json",
                "+++ b/package.json",
                "@@ -51,2 +51,3 @@",
                "     \"babylon\": \"6.18.0\",",
                "+    \"big-integer\": \"1.6.17\",",
                "     \"bplist-parser\": \"0.1.1\",",
                "diff --git a/yarn.lock b/yarn.lock",
                "index 5b77cb6fd..970e209e0 100644",
                "--- a/yarn.lock",
                "+++ b/yarn.lock",
                "@@ -854,3 +854,3 @@ beeper@^1.0.0:",
                "-big-integer@^1.6.7:",
                "+big-integer@1.6.17, big-integer@^1.6.7:",
                "   version \"1.6.17\""
            ],
            "changed_files": [
                "modules/nuclide-debugger-vsps/package.json",
                "package.json",
                "yarn.lock"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "b5e31934b263e68e8464cc5788a597037185533e",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521573958,
            "hunks": 1,
            "message": "observable-dom: correctly return an instance of the same class from `lift` Summary: Previously we just returned a generic DOMObserverObservable, but we should be returning an instance of that same class. Also, use the public `observe` API to correctly carry over additional observations Reviewed By: matthewwithanm Differential Revision: D5907042 fbshipit-source-id: 543df47f51937f31840c32677080e4606c7b2774",
            "diff": [
                "diff --git a/modules/nuclide-commons-ui/observable-dom.js b/modules/nuclide-commons-ui/observable-dom.js",
                "index 69d96274c..aef678d10 100644",
                "--- a/modules/nuclide-commons-ui/observable-dom.js",
                "+++ b/modules/nuclide-commons-ui/observable-dom.js",
                "@@ -107,10 +107,9 @@ class DOMObserverObservable<",
                "-  lift<R, S>(",
                "-    operator: rxjs$Operator<TNext, R>,",
                "-  ): DOMObserverObservable<R, S, TObserveArgs> {",
                "-    const obs = new DOMObserverObservable(",
                "-      this._DOMObserverCtor,",
                "-      ...this._observations[0],",
                "-    );",
                "-    obs._observations = this._observations.slice();",
                "+  lift<R>(operator: rxjs$Operator<TNext, R>): this {",
                "+    const Constructor = this.constructor;",
                "+    const [firstObservation, ...restObservations] = this._observations;",
                "+    const obs = new Constructor(this._DOMObserverCtor, ...firstObservation);",
                "+    for (const observation of restObservations) {",
                "+      obs.observe(...observation);",
                "+    }",
                "     obs.source = this;"
            ],
            "changed_files": [
                "modules/nuclide-commons-ui/observable-dom.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "17e3af4fc37faf97a9010c4aecac64b6495457cd",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521487228,
            "hunks": 1,
            "message": "Make output for possibly flaky test more readable Summary: The previous approach would just output \"false is not true\" which does not give much insight into why it failed. Reviewed By: matthewwithanm Differential Revision: D7322739 fbshipit-source-id: c783665e085795b1c49f194c650e2702498ef735",
            "diff": [
                "diff --git a/spec/atom-script-integration-spec.js b/spec/atom-script-integration-spec.js",
                "index 176626060..fbf2354dd 100644",
                "--- a/spec/atom-script-integration-spec.js",
                "+++ b/spec/atom-script-integration-spec.js",
                "@@ -54,3 +54,4 @@ describe('atom-script', () => {",
                "           const stdout = await runAtomScript(markdownScript, [readme]);",
                "-          expect(stdout.endsWith('</body>\\n</html>\\n')).toBe(true);",
                "+          const expectedEnd = '</body>\\n</html>\\n';",
                "+          expect(stdout.slice(-expectedEnd.length)).toBe(expectedEnd);",
                "         });"
            ],
            "changed_files": [
                "spec/atom-script-integration-spec.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "2a0616f374785f13542f6e96dbf9270333f277e4",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520712492,
            "hunks": 1,
            "message": "Improve hg progress status component Summary: I ran into a situation where hg did some discovering in the background but got stuck. I believe this is due to a race where the progress file changes faster than watchman debouncing and we only get one event and never clear the state. As a precaution, we should only show progress messages while an action is actually going on. Furthermore, progress messages actually have an \"active\" field which we should respect, since it causes it to show more relevant messages (in my testing). Reviewed By: tjfryan Differential Revision: D7222440 fbshipit-source-id: 1aaccd71d95e06d7f78c5774f82c505cb5e29b2b",
            "diff": [
                "diff --git a/pkg/nuclide-hg-rpc/lib/HgService.js b/pkg/nuclide-hg-rpc/lib/HgService.js",
                "index 78a5d3e6f..55bb6abc0 100644",
                "--- a/pkg/nuclide-hg-rpc/lib/HgService.js",
                "+++ b/pkg/nuclide-hg-rpc/lib/HgService.js",
                "@@ -836,2 +836,3 @@ export class HgService {",
                "     return this._hgOperationProgressDidChangeObserver",
                "+      .let(fastDebounce(50))",
                "       .switchMap(() =>"
            ],
            "changed_files": [
                "pkg/nuclide-hg-rpc/lib/HgService.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "83a1cfb523f9f6a0461b34bdef949d18c27c24eb",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520642125,
            "hunks": 1,
            "message": "Remove outdated check Summary: this is really old Reviewed By: semmypurewal Differential Revision: D7221296 fbshipit-source-id: cb549feb436c03ac6d5373d655c4263068d45f73",
            "diff": [
                "diff --git a/pkg/nuclide-ssh-tunnel/lib/ui/TunnelsPanel.js b/pkg/nuclide-ssh-tunnel/lib/ui/TunnelsPanel.js",
                "index 81ada5024..5e0944d9e 100644",
                "--- a/pkg/nuclide-ssh-tunnel/lib/ui/TunnelsPanel.js",
                "+++ b/pkg/nuclide-ssh-tunnel/lib/ui/TunnelsPanel.js",
                "@@ -70,5 +70,2 @@ export class TunnelsPanel {",
                "         openTunnel: tunnel => {",
                "-          if (this._store.getState().status === 'opening') {",
                "-            return;",
                "-          }",
                "           this._store.dispatch("
            ],
            "changed_files": [
                "pkg/nuclide-ssh-tunnel/lib/ui/TunnelsPanel.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "7532d7edc6114e02e06d8e4de0d0644c727f9f6b",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521423059,
            "hunks": 11,
            "message": "Add tracking for Nuclide users on big-dig Reviewed By: wanderley Differential Revision: D7310500 fbshipit-source-id: 6902ef2d7b812d8df31f1a02341639b429a45e40",
            "diff": [
                "diff --git a/pkg/nuclide-remote-connection/lib/ConnectionTracker.js b/pkg/nuclide-remote-connection/lib/ConnectionTracker.js",
                "index 1e7e1c6c7..95385c20f 100644",
                "--- a/pkg/nuclide-remote-connection/lib/ConnectionTracker.js",
                "+++ b/pkg/nuclide-remote-connection/lib/ConnectionTracker.js",
                "@@ -12,2 +12,3 @@",
                " import {stringifyError} from 'nuclide-commons/string';",
                "+import {isGkEnabled} from '../../commons-node/passesGK';",
                " import {track} from '../../nuclide-analytics';",
                "@@ -86,2 +87,4 @@ export default class ConnectionTracker {",
                "       authMethod: this._config.authMethod,",
                "+      // We already checked this GK to get here, so no need to await.",
                "+      isBigDig: isGkEnabled('nuclide_big_dig'),",
                "     });",
                "diff --git a/pkg/nuclide-remote-connection/lib/RemoteConnection.js b/pkg/nuclide-remote-connection/lib/RemoteConnection.js",
                "index f8dda036c..e4693e73e 100644",
                "--- a/pkg/nuclide-remote-connection/lib/RemoteConnection.js",
                "+++ b/pkg/nuclide-remote-connection/lib/RemoteConnection.js",
                "@@ -19,2 +19,3 @@ import type {RemoteFile} from './RemoteFile';",
                " import type {RemoteDirectory} from './RemoteDirectory';",
                "+import type {ServerConnectionVersion} from './ServerConnection';",
                "@@ -44,3 +45,3 @@ export type RemoteConnectionConfiguration = {",
                "   promptReconnectOnFailure?: boolean, // open a connection dialog prompt if the reconnect fails",
                "-  version?: number,",
                "+  version?: ServerConnectionVersion,",
                " };",
                "diff --git a/pkg/nuclide-remote-connection/lib/RemoteConnectionConfigurationManager.js b/pkg/nuclide-remote-connection/lib/RemoteConnectionConfigurationManager.js",
                "index dc0cf6ece..afd31b90e 100644",
                "--- a/pkg/nuclide-remote-connection/lib/RemoteConnectionConfigurationManager.js",
                "+++ b/pkg/nuclide-remote-connection/lib/RemoteConnectionConfigurationManager.js",
                "@@ -13,3 +13,6 @@",
                "-import type {ServerConnectionConfiguration} from './ServerConnection';",
                "+import type {",
                "+  ServerConnectionConfiguration,",
                "+  ServerConnectionVersion,",
                "+} from './ServerConnection';",
                "@@ -35,3 +38,3 @@ type SerializableServerConnectionConfiguration = {",
                "   clientKey?: string,",
                "-  version?: number,",
                "+  version?: ServerConnectionVersion,",
                " };",
                "diff --git a/pkg/nuclide-remote-connection/lib/ServerConnection.js b/pkg/nuclide-remote-connection/lib/ServerConnection.js",
                "index cc1f96a16..7f6d7114b 100644",
                "--- a/pkg/nuclide-remote-connection/lib/ServerConnection.js",
                "+++ b/pkg/nuclide-remote-connection/lib/ServerConnection.js",
                "@@ -48,2 +48,5 @@ import createBigDigRpcClient from './createBigDigRpcClient';",
                "+export type ServerConnectionVersion = 1 | 2;",
                "+export const BIG_DIG_VERSION: ServerConnectionVersion = 2;",
                "+",
                " export type ServerConnectionConfiguration = {",
                "@@ -55,3 +58,3 @@ export type ServerConnectionConfiguration = {",
                "   clientKey?: Buffer, // key for https connection.",
                "-  version?: number,",
                "+  version?: ServerConnectionVersion,",
                " };",
                "@@ -294,3 +297,3 @@ export class ServerConnection {",
                "   async _startRpc(): Promise<void> {",
                "-    if (this._config.version === 2) {",
                "+    if (this._config.version === BIG_DIG_VERSION) {",
                "       this._client = await createBigDigRpcClient(this._config);",
                "diff --git a/pkg/nuclide-remote-projects/lib/connectBigDigSshHandshake.js b/pkg/nuclide-remote-projects/lib/connectBigDigSshHandshake.js",
                "index ed1864bcf..e47ed45c8 100644",
                "--- a/pkg/nuclide-remote-projects/lib/connectBigDigSshHandshake.js",
                "+++ b/pkg/nuclide-remote-projects/lib/connectBigDigSshHandshake.js",
                "@@ -28,2 +28,3 @@ import {",
                " } from '../../nuclide-remote-connection';",
                "+import {BIG_DIG_VERSION} from '../../nuclide-remote-connection/lib/ServerConnection';",
                "@@ -69,3 +70,3 @@ export default function connectBigDigSshHandshake(",
                "         displayTitle: connectionConfig.displayTitle,",
                "-        version: 2,",
                "+        version: BIG_DIG_VERSION,",
                "       }).then("
            ],
            "changed_files": [
                "pkg/nuclide-remote-connection/lib/ConnectionTracker.js",
                "pkg/nuclide-remote-connection/lib/RemoteConnection.js",
                "pkg/nuclide-remote-connection/lib/RemoteConnectionConfigurationManager.js",
                "pkg/nuclide-remote-connection/lib/ServerConnection.js",
                "pkg/nuclide-remote-projects/lib/connectBigDigSshHandshake.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "e0b9c37c8d62648884c495ee7d326a76e7f14b9f",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520450279,
            "hunks": 12,
            "message": "Nuclide VSP Debugger: Fix pausing while there's no previously focusedThread Summary: Previously, the `focusedThread` would be the last thread entry in the process by default; When that was fixed to retain only the focussed thread (even with single thread stepping), the could-be-paused-thread definition has changed as well to be either the focused thread (or the first thread in the process). Reviewed By: ebluestein Differential Revision: D7182260 fbshipit-source-id: 6c3a242bd05c988486f85d8575dbcebac3a0b37e",
            "diff": [
                "diff --git a/pkg/nuclide-debugger-new/lib/ui/DebuggerSteppingComponent.js b/pkg/nuclide-debugger-new/lib/ui/DebuggerSteppingComponent.js",
                "index 382c9aed7..d5b7c2d64 100644",
                "--- a/pkg/nuclide-debugger-new/lib/ui/DebuggerSteppingComponent.js",
                "+++ b/pkg/nuclide-debugger-new/lib/ui/DebuggerSteppingComponent.js",
                "@@ -11,3 +11,3 @@",
                "-import type {DebuggerModeType, IDebugService} from '../types';",
                "+import type {DebuggerModeType, IDebugService, IThread} from '../types';",
                " import type {ControlButtonSpecification} from 'nuclide-debugger-common';",
                "@@ -19,2 +19,3 @@ import {",
                " import {observableFromSubscribeFunction} from 'nuclide-commons/event';",
                "+import {fastDebounce} from 'nuclide-commons/observable';",
                " import * as React from 'react';",
                "@@ -109,2 +110,3 @@ export default class DebuggerSteppingComponent extends React.Component<",
                "     const {service} = this.props;",
                "+    const model = service.getModel();",
                "     this._disposables.add(",
                "@@ -112,2 +114,3 @@ export default class DebuggerSteppingComponent extends React.Component<",
                "         observableFromSubscribeFunction(service.onDidChangeMode.bind(service)),",
                "+        observableFromSubscribeFunction(model.onDidChangeCallStack.bind(model)),",
                "         observableFromSubscribeFunction(",
                "@@ -117,2 +120,3 @@ export default class DebuggerSteppingComponent extends React.Component<",
                "         .startWith(null)",
                "+        .let(fastDebounce(10))",
                "         .subscribe(() => {",
                "@@ -148,6 +152,17 @@ export default class DebuggerSteppingComponent extends React.Component<",
                "+  _getPausableThread(): ?IThread {",
                "+    const {focusedThread, focusedProcess} = this.props.service.viewModel;",
                "+    if (focusedThread != null) {",
                "+      return focusedThread;",
                "+    } else if (focusedProcess != null) {",
                "+      return focusedProcess.getAllThreads()[0];",
                "+    } else {",
                "+      return null;",
                "+    }",
                "+  }",
                "+",
                "   _togglePauseState = () => {",
                "-    const {focusedThread} = this.props.service.viewModel;",
                "-    if (focusedThread == null) {",
                "-      logger.error('No focussed thread to pause/resume');",
                "+    const pausableThread = this._getPausableThread();",
                "+    if (pausableThread == null) {",
                "+      logger.error('No thread to pause/resume');",
                "       return;",
                "@@ -155,10 +170,7 @@ export default class DebuggerSteppingComponent extends React.Component<",
                "-    const {debuggerMode} = this.state;",
                "-    if (debuggerMode === DebuggerMode.RUNNING) {",
                "-      this._setWaitingForPause(true);",
                "-      focusedThread.pause();",
                "-    } else if (debuggerMode === DebuggerMode.PAUSED) {",
                "-      focusedThread.continue();",
                "+    if (pausableThread.stopped) {",
                "+      pausableThread.continue();",
                "     } else {",
                "-      logger.error('Unable to pause/resume in debug mode', debuggerMode);",
                "+      this._setWaitingForPause(true);",
                "+      pausableThread.pause();",
                "     }",
                "@@ -227,2 +239,3 @@ export default class DebuggerSteppingComponent extends React.Component<",
                "+    const pausableThread = this._getPausableThread();",
                "     let playPauseTitle;",
                "@@ -232,3 +245,3 @@ export default class DebuggerSteppingComponent extends React.Component<",
                "       playPauseTitle = 'Continue';",
                "-    } else if (focusedThread == null) {",
                "+    } else if (pausableThread == null) {",
                "       playPauseTitle = 'No running threads to pause!';",
                "@@ -243,3 +256,3 @@ export default class DebuggerSteppingComponent extends React.Component<",
                "           <Button",
                "-            disabled={isPausing || isReadonlyTarget || focusedThread == null}",
                "+            disabled={isPausing || isReadonlyTarget || pausableThread == null}",
                "             tooltip={{"
            ],
            "changed_files": [
                "pkg/nuclide-debugger-new/lib/ui/DebuggerSteppingComponent.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "c74d5f09500f89e8816bb437b3d08964c3231eb2",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521149335,
            "hunks": 17,
            "message": "Respect resolved ipv4/ipv6 address after the handshake Summary: The SshHandshake authentication step resolves the IP address, but we should preserve this in subsequent communications (for the websocket and the heartbeat). Reviewed By: bolinfest Differential Revision: D7284121 fbshipit-source-id: ee5803f9b732e34fc0f224fc9e1075c30f6abaac",
            "diff": [
                "diff --git a/modules/big-dig/src/client/SshHandshake.js b/modules/big-dig/src/client/SshHandshake.js",
                "index bddf27c88..15005e361 100644",
                "--- a/modules/big-dig/src/client/SshHandshake.js",
                "+++ b/modules/big-dig/src/client/SshHandshake.js",
                "@@ -17,2 +17,3 @@ import type {",
                " } from './SshClient';",
                "+import type {DnsFamily} from './lookup-prefer-ip-v6';",
                "@@ -42,2 +43,3 @@ export type RemoteConnectionConfiguration = {",
                "   port: number, // port to connect to.",
                "+  family: DnsFamily, // IPv4/IPv6",
                "   certificateAuthorityCertificate?: Buffer, // certificate of certificate authority.",
                "@@ -280,2 +282,3 @@ export class SshHandshake {",
                "   _remoteHost: ?string;",
                "+  _remoteFamily: ?DnsFamily;",
                "   _remotePort: number;",
                "@@ -515,5 +518,5 @@ export class SshHandshake {",
                "-      let address;",
                "+      let lookup;",
                "       try {",
                "-        address = await lookupPreferIpv6(config.host);",
                "+        lookup = await lookupPreferIpv6(config.host);",
                "       } catch (error) {",
                "@@ -525,2 +528,4 @@ export class SshHandshake {",
                "       }",
                "+      const {address, family} = lookup;",
                "+      this._remoteFamily = family;",
                "@@ -831,6 +836,7 @@ export class SshHandshake {",
                "     if (this._isSecure()) {",
                "-      // flowlint-next-line sketchy-null-string:off",
                "-      invariant(this._remoteHost);",
                "+      invariant(this._remoteHost != null);",
                "+      invariant(this._remoteFamily != null);",
                "       return this._didConnect({",
                "         host: this._remoteHost,",
                "+        family: this._remoteFamily,",
                "         port: this._remotePort,",
                "@@ -848,6 +854,7 @@ export class SshHandshake {",
                "       const localPort = this._getLocalPort();",
                "-      // flowlint-next-line sketchy-null-number:off",
                "-      invariant(localPort);",
                "+      invariant(localPort != null);",
                "+      invariant(this._remoteFamily != null);",
                "       return this._didConnect({",
                "         host: 'localhost',",
                "+        family: this._remoteFamily,",
                "         port: localPort,",
                "diff --git a/modules/big-dig/src/client/createBigDigClient.js b/modules/big-dig/src/client/createBigDigClient.js",
                "index b65421eaa..d32d31dae 100644",
                "--- a/modules/big-dig/src/client/createBigDigClient.js",
                "+++ b/modules/big-dig/src/client/createBigDigClient.js",
                "@@ -19,2 +19,3 @@ export type BigDigClientConfig = {",
                "   +port: number,",
                "+  +family?: 4 | 6,",
                "   +certificateAuthorityCertificate?: Buffer | string,",
                "@@ -35,2 +36,3 @@ export default (async function createBigDigClient(",
                "     key: config.clientKey,",
                "+    family: config.family,",
                "   };",
                "diff --git a/modules/big-dig/src/client/lookup-prefer-ip-v6.js b/modules/big-dig/src/client/lookup-prefer-ip-v6.js",
                "index 1e8f290c8..ed63aa83c 100644",
                "--- a/modules/big-dig/src/client/lookup-prefer-ip-v6.js",
                "+++ b/modules/big-dig/src/client/lookup-prefer-ip-v6.js",
                "@@ -12,7 +12,15 @@",
                "+import invariant from 'assert';",
                " import dns from 'dns';",
                "-type DnsFamily = 4 | 6;",
                "+export type DnsFamily = 4 | 6;",
                "-export default (async function lookupPreferIpv6(host: string): Promise<string> {",
                "+export type DnsLookup = {",
                "+  address: string,",
                "+  family: DnsFamily,",
                "+};",
                "+",
                "+export default (async function lookupPreferIpv6(",
                "+  host: string,",
                "+): Promise<DnsLookup> {",
                "   try {",
                "@@ -27,13 +35,18 @@ export default (async function lookupPreferIpv6(host: string): Promise<string> {",
                "-function lookup(host: string, family: DnsFamily): Promise<string> {",
                "+function lookup(host: string, family: DnsFamily): Promise<DnsLookup> {",
                "   return new Promise((resolve, reject) => {",
                "-    dns.lookup(host, family, (error: ?Error, address: ?string) => {",
                "-      if (error) {",
                "-        reject(error);",
                "-      } else if (address != null) {",
                "-        resolve(address);",
                "-      } else {",
                "-        reject(Error('One of error or address must be set.'));",
                "-      }",
                "-    });",
                "+    dns.lookup(",
                "+      host,",
                "+      family,",
                "+      (error: ?Error, address: ?string, resultFamily: ?number) => {",
                "+        if (error) {",
                "+          reject(error);",
                "+        } else if (address != null) {",
                "+          invariant(resultFamily === 4 || resultFamily === 6);",
                "+          resolve({address, family: resultFamily});",
                "+        } else {",
                "+          reject(new Error('One of error or address must be set.'));",
                "+        }",
                "+      },",
                "+    );",
                "   });",
                "diff --git a/pkg/nuclide-remote-projects/lib/connectBigDigSshHandshake.js b/pkg/nuclide-remote-projects/lib/connectBigDigSshHandshake.js",
                "index 2085f73ab..b70fef96c 100644",
                "--- a/pkg/nuclide-remote-projects/lib/connectBigDigSshHandshake.js",
                "+++ b/pkg/nuclide-remote-projects/lib/connectBigDigSshHandshake.js",
                "@@ -69,3 +69,2 @@ export default function connectBigDigSshHandshake(",
                "         displayTitle: connectionConfig.displayTitle,",
                "-        // TODO(T25637185): Get family from SshHandshake",
                "         version: 2,"
            ],
            "changed_files": [
                "modules/big-dig/src/client/SshHandshake.js",
                "modules/big-dig/src/client/createBigDigClient.js",
                "modules/big-dig/src/client/lookup-prefer-ip-v6.js",
                "pkg/nuclide-remote-projects/lib/connectBigDigSshHandshake.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "c38e04a791ec399a4479d3a16a7349028f82bcc9",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520488085,
            "hunks": 2,
            "message": "Make sure heartbeat requests are POST requests. Summary: Also print out the HTTP method used to make the request when it is ignored. Verified that `POST` is used here: diffusion/FBS/browse/master/xplat/nuclide/modules/big-dig/src/client/XhrConnectionHeartbeat.js$38-42 Reviewed By: siegebell Differential Revision: D7182116 fbshipit-source-id: 0b10bb472541df192993c9cff34aad9a7753730c",
            "diff": [
                "diff --git a/modules/big-dig/src/server/BigDigServer.js b/modules/big-dig/src/server/BigDigServer.js",
                "index d60a7efd0..09219cd4f 100644",
                "--- a/modules/big-dig/src/server/BigDigServer.js",
                "+++ b/modules/big-dig/src/server/BigDigServer.js",
                "@@ -79,3 +79,3 @@ export default class BigDigServer {",
                "     const {pathname} = url.parse(request.url);",
                "-    if (pathname === `/v1/${HEARTBEAT_CHANNEL}`) {",
                "+    if (request.method === 'POST' && pathname === `/v1/${HEARTBEAT_CHANNEL}`) {",
                "       response.write(getVersion());",
                "@@ -84,3 +84,5 @@ export default class BigDigServer {",
                "     }",
                "-    this._logger.info(`Ignored HTTPS request for ${request.url}`);",
                "+    this._logger.info(",
                "+      `Ignored HTTPS ${request.method} request for ${request.url}`,",
                "+    );",
                "   }"
            ],
            "changed_files": [
                "modules/big-dig/src/server/BigDigServer.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "344efc40a62b8c66f34ec7884f20e668fc6206bf",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521742450,
            "hunks": 1,
            "message": "Nuclide VSP Debugger: Add start debugging tracking Summary: That was missing from the old debugger migration Reviewed By: Goom11 Differential Revision: D7357475 fbshipit-source-id: 69425034e40c1c9ed3946dfd52c3c766c646ccf7",
            "diff": [
                "diff --git a/pkg/nuclide-debugger-new/lib/vsp/DebugService.js b/pkg/nuclide-debugger-new/lib/vsp/DebugService.js",
                "index 59634279b..6145cbc2b 100644",
                "--- a/pkg/nuclide-debugger-new/lib/vsp/DebugService.js",
                "+++ b/pkg/nuclide-debugger-new/lib/vsp/DebugService.js",
                "@@ -1144,2 +1144,6 @@ export default class DebugService implements IDebugService {",
                "   ): Promise<?IProcess> {",
                "+    track(AnalyticsEvents.DEBUGGER_START, {",
                "+      serviceName: configuration.adapterType,",
                "+      clientType: 'VSP',",
                "+    });",
                "     let process: ?IProcess;"
            ],
            "changed_files": [
                "pkg/nuclide-debugger-new/lib/vsp/DebugService.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "02ee6159e49d86bf9957badcb8eabae9405a8f97",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520626735,
            "hunks": 5,
            "message": "Nuclide VSP Debugger: End the debug session immediately (not waiting for disconnect to complete) Summary: In some debuggers, that `disconnect` never completes and others, it takes a long time where we know already the debugging session has ended. Reviewed By: ebluestein Differential Revision: D7206150 fbshipit-source-id: f135b3cb471bd15ce05e5193e7108551b00b806e",
            "diff": [
                "diff --git a/pkg/nuclide-debugger-new/lib/vsp/DebugService.js b/pkg/nuclide-debugger-new/lib/vsp/DebugService.js",
                "index d13525cfb..ca4f48bc4 100644",
                "--- a/pkg/nuclide-debugger-new/lib/vsp/DebugService.js",
                "+++ b/pkg/nuclide-debugger-new/lib/vsp/DebugService.js",
                "@@ -475,6 +475,4 @@ export default class DebugService implements IDebugService {",
                "               // Disconnect the debug session on configuration done error #10596",
                "-              session",
                "-                .disconnect()",
                "-                .catch(onUnexpectedError)",
                "-                .then(this._onSessionEnd);",
                "+              this._onSessionEnd();",
                "+              session.disconnect().catch(onUnexpectedError);",
                "               atom.notifications.addError('Failed to configure debugger', {",
                "@@ -599,15 +597,11 @@ export default class DebugService implements IDebugService {",
                "       session.observeTerminateDebugeeEvents().subscribe(event => {",
                "-        if (session && session.getId() === event.sessionId) {",
                "-          if (event.body && event.body.restart && process) {",
                "-            this.restartProcess().catch(err => {",
                "-              atom.notifications.addError('Failed to restart debugger', {",
                "-                detail: err.stack || String(err),",
                "-              });",
                "+        if (event.body && event.body.restart) {",
                "+          this.restartProcess().catch(err => {",
                "+            atom.notifications.addError('Failed to restart debugger', {",
                "+              detail: err.stack || String(err),",
                "             });",
                "-          } else {",
                "-            session",
                "-              .disconnect()",
                "-              .catch(onUnexpectedError)",
                "-              .then(this._onSessionEnd);",
                "-          }",
                "+          });",
                "+        } else {",
                "+          this._onSessionEnd();",
                "+          session.disconnect().catch(onUnexpectedError);",
                "         }",
                "@@ -801,5 +795,3 @@ export default class DebugService implements IDebugService {",
                "         // 'Run without debugging' mode VSCode must terminate the extension host. More details: #3905",
                "-        if (session && session.getId() === event.body.sessionId) {",
                "-          this._onSessionEnd();",
                "-        }",
                "+        this._onSessionEnd();",
                "       }),",
                "@@ -1187,6 +1179,4 @@ export default class DebugService implements IDebugService {",
                "       if (!session.isDisconnected()) {",
                "-        session",
                "-          .disconnect()",
                "-          .catch(onUnexpectedError)",
                "-          .then(this._onSessionEnd);",
                "+        this._onSessionEnd();",
                "+        session.disconnect().catch(onUnexpectedError);",
                "       }"
            ],
            "changed_files": [
                "pkg/nuclide-debugger-new/lib/vsp/DebugService.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "323648a836686a7f10dfc4d98268ca7ce6b25cdf",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521504034,
            "hunks": 1,
            "message": "Retry most long running hg observables Summary: In many places, we were assuming the observables we're watching would never throw. This is generally true, but in certain situations breakages occur, such as if a bad type gets sent across rpc. In some situations in which a failure like this occurs, we can simply retry, and possibly fix the transient error. After a few retries, if we're still failing we should resort to throwing an error to the user so we can diagnose the root cause. This should make smartlog more robust as a whole, for example if hg changes some message format in its internals. The only risk here is if we retry observables that really shouldn't be retried, such as user-initiated actions. I don't expect this will be a problem since this new method is only used for long running observables that usually watch external events. Plus these callsites (almost) never throw exceptions. Reviewed By: aadisriram Differential Revision: D7281903 fbshipit-source-id: 38454c5ac9b45eb13548b02e5fce20e60772c056",
            "diff": [
                "diff --git a/pkg/nuclide-hg-rpc/lib/HgService.js b/pkg/nuclide-hg-rpc/lib/HgService.js",
                "index b90f2366d..5b65c50c8 100644",
                "--- a/pkg/nuclide-hg-rpc/lib/HgService.js",
                "+++ b/pkg/nuclide-hg-rpc/lib/HgService.js",
                "@@ -824,6 +824,2 @@ export class HgService {",
                "   observeHgOperationProgressDidChange(): ConnectableObservable<any> {",
                "-    // TODO(T26794506): We expect this to return OperationProgress,",
                "-    // but in some exceptional circumstances the object will fail marshalling",
                "-    // for an unknown reason. We don't care about the type on the server, so",
                "-    // we are sending `any` and letting the client do the type checking.",
                "     return this._hgOperationProgressDidChangeObserver"
            ],
            "changed_files": [
                "pkg/nuclide-hg-rpc/lib/HgService.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "330dfb1eb5c83699bc2bcf0aaab113098d1912e6",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521049646,
            "hunks": 4,
            "message": "Create Paste from Nuclide Terminal Summary: Saw this requested and wanted to give it a shot. Took a couple mins and I learned a bit about nuclide-terminal. Reviewed By: pelmers Differential Revision: D7220881 fbshipit-source-id: 1a38baa718e9e2ad83adc7fd816f3cca0af4930e",
            "diff": [
                "diff --git a/pkg/nuclide-terminal/lib/main.js b/pkg/nuclide-terminal/lib/main.js",
                "index aa194df87..bcd8544fb 100644",
                "--- a/pkg/nuclide-terminal/lib/main.js",
                "+++ b/pkg/nuclide-terminal/lib/main.js",
                "@@ -27,2 +27,3 @@ import {uriFromCwd, URI_PREFIX} from '../../commons-node/nuclide-terminal-uri';",
                " // $FlowFB",
                "+import type {CreatePasteFunction} from 'atom-ide-ui/pkg/atom-ide-console/lib/types';",
                " import type {RegisterProvider} from '../../fb-dash/lib/types';",
                "@@ -102,2 +103,48 @@ class Activation {",
                "+  consumePasteProvider(provider: any): IDisposable {",
                "+    const createPaste: CreatePasteFunction = provider.createPaste;",
                "+    const disposable = new UniversalDisposable(",
                "+      atom.commands.add(",
                "+        '.terminal-pane',",
                "+        'nuclide-terminal:create-paste',",
                "+        async event => {",
                "+          const {currentTarget: {terminal}} = (event: any);",
                "+          const uri = await createPaste(",
                "+            terminal.getSelection(),",
                "+            {",
                "+              title: 'Paste from Nuclide Terminal',",
                "+            },",
                "+            'terminal paste',",
                "+          );",
                "+          atom.notifications.addSuccess(`Created paste at ${uri}`);",
                "+        },",
                "+      ),",
                "+      atom.contextMenu.add({",
                "+        '.terminal-pane': [",
                "+          {",
                "+            label: 'Create Paste',",
                "+            command: 'nuclide-terminal:create-paste',",
                "+            shouldDisplay: event => {",
                "+              const div = event.target.closest('.terminal-pane');",
                "+              if (div == null) {",
                "+                return false;",
                "+              }",
                "+              const {terminal} = (div: any);",
                "+              if (terminal == null) {",
                "+                return false;",
                "+              }",
                "+              return terminal.hasSelection();",
                "+            },",
                "+          },",
                "+          {type: 'separator'},",
                "+        ],",
                "+      }),",
                "+    );",
                "+    this._subscriptions.add(disposable);",
                "+    return new UniversalDisposable(() => {",
                "+      disposable.dispose();",
                "+      this._subscriptions.remove(disposable);",
                "+    });",
                "+  }",
                "+",
                "   addItemsToFileTreeContextMenu(contextMenu: FileTreeContextMenu): IDisposable {",
                "diff --git a/pkg/nuclide-terminal/lib/terminal-view.js b/pkg/nuclide-terminal/lib/terminal-view.js",
                "index 72664110e..318ade2b0 100644",
                "--- a/pkg/nuclide-terminal/lib/terminal-view.js",
                "+++ b/pkg/nuclide-terminal/lib/terminal-view.js",
                "@@ -160,2 +160,3 @@ export class TerminalView implements PtyClient {",
                "     }));",
                "+    (div: any).terminal = terminal;",
                "     terminal.open(this._div);",
                "diff --git a/pkg/nuclide-terminal/package.json b/pkg/nuclide-terminal/package.json",
                "index 9a99c004b..6c9cd0828 100644",
                "--- a/pkg/nuclide-terminal/package.json",
                "+++ b/pkg/nuclide-terminal/package.json",
                "@@ -92,2 +92,7 @@",
                "       }",
                "+    },",
                "+    \"nuclide-paste\": {",
                "+      \"versions\": {",
                "+        \"0.0.0\": \"consumePasteProvider\"",
                "+      }",
                "     }"
            ],
            "changed_files": [
                "pkg/nuclide-terminal/lib/main.js",
                "pkg/nuclide-terminal/lib/terminal-view.js",
                "pkg/nuclide-terminal/package.json"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "437ae752697654c2682f748b82b03b1c2b627f5e",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521159245,
            "hunks": 3,
            "message": "Fix nuclide-move-item-to-available-pane test Summary: atom.commands.dispatch used to return a boolean A couple versions ago it started returning a Promise (or null), causing this test to break. Reviewed By: evangrayk Differential Revision: D7297632 fbshipit-source-id: 18179c1c902cc6b4ca619ca6db96ce9303ce45d5",
            "diff": [
                "diff --git a/pkg/nuclide-move-item-to-available-pane/spec/move-spec.js b/pkg/nuclide-move-item-to-available-pane/spec/move-spec.js",
                "index d07d2b331..78578cfad 100644",
                "--- a/pkg/nuclide-move-item-to-available-pane/spec/move-spec.js",
                "+++ b/pkg/nuclide-move-item-to-available-pane/spec/move-spec.js",
                "@@ -118,3 +118,3 @@ function dispatchCmdKRight() {",
                "   );",
                "-  expect(wasDispatched).toBe(true);",
                "+  expect(wasDispatched).toBeTruthy();",
                " }",
                "@@ -129,3 +129,3 @@ function dispatchCmdKLeft() {",
                "   );",
                "-  expect(wasDispatched).toBe(true);",
                "+  expect(wasDispatched).toBeTruthy();",
                " }",
                "@@ -145,3 +145,3 @@ function dispatchCmdKCmdLeft() {",
                "   );",
                "-  expect(wasDispatched).toBe(true);",
                "+  expect(wasDispatched).toBeTruthy();"
            ],
            "changed_files": [
                "pkg/nuclide-move-item-to-available-pane/spec/move-spec.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "27fd2150e7f7a8da84261b45518ffc78f916d3be",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521842519,
            "hunks": 33,
            "message": "1/n clean up threads Summary: Factor out thread collection and start to clean up focused thread logic. Does not yet support stopped event focus thread flag Reviewed By: mostafaeweda Differential Revision: D7383078 fbshipit-source-id: 195218bc989d9e2799b4ba92a8bc7931b0248c15",
            "diff": [
                "diff --git a/modules/nuclide-debugger-cli/lib/Debugger.js b/modules/nuclide-debugger-cli/lib/Debugger.js",
                "index b3fa12a00..1b6a85ac8 100644",
                "--- a/modules/nuclide-debugger-cli/lib/Debugger.js",
                "+++ b/modules/nuclide-debugger-cli/lib/Debugger.js",
                "@@ -42,2 +42,3 @@ import PrintCommand from './PrintCommand';",
                " import RunCommand from './RunCommand';",
                "+import ThreadCollection from './ThreadCollection';",
                "@@ -50,3 +51,4 @@ type SessionState =",
                "   | 'RUNNING' // program is running",
                "-  | 'STOPPED'; // program has hit a breakpoint",
                "+  | 'STOPPED' // program has hit a breakpoint",
                "+  | 'TERMINATED'; // program is gone and not coming back",
                "@@ -58,5 +60,4 @@ export default class Debugger implements DebuggerInterface {",
                "   _activeThread: ?number;",
                "-  _threads: Map<number, Thread> = new Map();",
                "+  _threads: ThreadCollection = new ThreadCollection();",
                "   _sourceFiles: SourceFileCache;",
                "-  _terminated: boolean = false;",
                "   _state: SessionState = 'INITIALIZING';",
                "@@ -175,4 +176,9 @@ export default class Debugger implements DebuggerInterface {",
                "   breakInto(): void {",
                "-    const threadId = [...this._threads.keys()][0];",
                "-    if (threadId == null) {",
                "+    // if there is a focus thread from before, stop that one, else just",
                "+    // pick the first.",
                "+    const thread =",
                "+      this._threads.focusThread != null",
                "+        ? this._threads.focusThread",
                "+        : this._threads.allThreads[0];",
                "+    if (thread == null) {",
                "       return;",
                "@@ -180,6 +186,6 @@ export default class Debugger implements DebuggerInterface {",
                "-    this._ensureDebugSession().pause({threadId});",
                "+    this._ensureDebugSession().pause({threadId: thread.id()});",
                "   }",
                "-  getThreads(): Map<number, Thread> {",
                "+  getThreads(): ThreadCollection {",
                "     this._ensureDebugSession();",
                "@@ -190,3 +196,3 @@ export default class Debugger implements DebuggerInterface {",
                "     this._ensureDebugSession();",
                "-    return nullthrows(this._threads.get(nullthrows(this._activeThread)));",
                "+    return nullthrows(this._threads.focusThread);",
                "   }",
                "@@ -470,5 +476,6 @@ export default class Debugger implements DebuggerInterface {",
                "   async createSession(adapterInfo: VSAdapterExecutableInfo): Promise<void> {",
                "-    this._terminated = false;",
                "     this._console.stopInput();",
                "+    this._threads = new ThreadCollection();",
                "+",
                "     this._debugSession = new VsDebugSession(",
                "@@ -554,2 +561,4 @@ export default class Debugger implements DebuggerInterface {",
                "+    session.observeThreadEvents().subscribe(this._onThread.bind(this));",
                "+",
                "     session",
                "@@ -572,6 +581,4 @@ export default class Debugger implements DebuggerInterface {",
                "-    this._terminated = true;",
                "-",
                "     await this._debugSession.disconnect();",
                "-    this._threads = new Map();",
                "+    this._threads = new ThreadCollection();",
                "     this._debugSession = null;",
                "@@ -591,5 +598,12 @@ export default class Debugger implements DebuggerInterface {",
                "   _onContinued(event: DebugProtocol.ContinuedEvent) {",
                "-    // if the thread we're actively debugging starts running,",
                "-    // stop interactivity until the target stops again",
                "-    if (event.body.threadId === this.getActiveThread().id()) {",
                "+    const {body: {threadId, allThreadsContinued}} = event;",
                "+",
                "+    if (allThreadsContinued === true) {",
                "+      this._threads.markAllThreadsRunning();",
                "+    } else {",
                "+      this._threads.markThreadRunning(threadId);",
                "+    }",
                "+",
                "+    // only turn the console off if all threads have started up again",
                "+    if (this._threads.allThreadsRunning()) {",
                "       this._console.stopInput();",
                "@@ -599,3 +613,3 @@ export default class Debugger implements DebuggerInterface {",
                "   async _onStopped(event: DebugProtocol.StoppedEvent) {",
                "-    const {body: {description, threadId}} = event;",
                "+    const {body: {description, threadId, allThreadsStopped}} = event;",
                "@@ -605,24 +619,58 @@ export default class Debugger implements DebuggerInterface {",
                "-    // $TODO handle allThreadsStopped",
                "-    if (threadId != null) {",
                "-      let thread = this._threads.get(threadId);",
                "+    const firstStop = this._threads.allThreadsRunning();",
                "-      if (thread == null) {",
                "-        await this._cacheThreads();",
                "-        thread = this._threads.get(threadId);",
                "+    if (allThreadsStopped === true) {",
                "+      this._threads.markAllThreadsStopped();",
                "+      this._threads.allThreads.map(_ => _.clearSelectedStackFrame());",
                "+    } else if (threadId != null) {",
                "+      this._threads.markThreadStopped(threadId);",
                "+      nullthrows(",
                "+        this._threads.getThreadById(threadId),",
                "+      ).clearSelectedStackFrame();",
                "+    } else {",
                "+      // the call didn't actually contain information about anything stopping.",
                "+      this._console.outputLine(",
                "+        'stop event with no thread information ignored.',",
                "+      );",
                "+      return;",
                "+    }",
                "+",
                "+    // for now, set the focus thread to the first thread that stopped",
                "+    if (firstStop) {",
                "+      if (threadId != null) {",
                "+        this._threads.setFocusThread(threadId);",
                "+      } else {",
                "+        const firstStopped = this._threads.firstStoppedThread();",
                "+        invariant(firstStopped != null);",
                "+        this._threads.setFocusThread(firstStopped);",
                "       }",
                "-      nullthrows(thread).clearSelectedStackFrame();",
                "+      const topOfStack = await this._getTopOfStackSourceInfo(",
                "+        nullthrows(this._threads.focusThreadId),",
                "+      );",
                "-      if (threadId === this.getActiveThread().id()) {",
                "-        const topOfStack = await this._getTopOfStackSourceInfo(threadId);",
                "-        if (topOfStack != null) {",
                "-          this._console.outputLine(",
                "-            `${topOfStack.name}:${topOfStack.frame.line} ${topOfStack.line}`,",
                "-          );",
                "-        }",
                "+      if (topOfStack != null) {",
                "+        this._console.outputLine(",
                "+          `${topOfStack.name}:${topOfStack.frame.line} ${topOfStack.line}`,",
                "+        );",
                "       }",
                "+",
                "+      this._console.startInput();",
                "     }",
                "+  }",
                "-    this._console.startInput();",
                "+  _onThread(event: DebugProtocol.ThreadEvent) {",
                "+    const {body: {reason, threadId}} = event;",
                "+",
                "+    if (reason === 'started') {",
                "+      // to avoid a race, create a thread immediately. then call _cacheThreads,",
                "+      // which will query gdb and update the description",
                "+      this._threads.addThread(new Thread(threadId, `thread ${threadId}`));",
                "+      this._cacheThreads();",
                "+      return;",
                "+    }",
                "+",
                "+    if (reason === 'exited') {",
                "+      this._threads.removeThread(threadId);",
                "+    }",
                "   }",
                "@@ -630,2 +678,4 @@ export default class Debugger implements DebuggerInterface {",
                "   _onExitedDebugee(event: DebugProtocol.ExitedEvent) {",
                "+    this._state = 'TERMINATED';",
                "+",
                "     this._console.outputLine(",
                "@@ -647,3 +697,3 @@ export default class Debugger implements DebuggerInterface {",
                "     // Some adapters will send multiple terminated events.",
                "-    if (this._terminated || this._state !== 'RUNNING') {",
                "+    if (this._state !== 'RUNNING') {",
                "       return;",
                "@@ -651,2 +701,4 @@ export default class Debugger implements DebuggerInterface {",
                "+    this._state = 'TERMINATED';",
                "+",
                "     this._console.outputLine('The target has exited.');",
                "@@ -671,12 +723,7 @@ export default class Debugger implements DebuggerInterface {",
                "     const {body} = await this._debugSession.threads();",
                "-    const threads = body.threads != null ? body.threads : [];",
                "-",
                "-    this._threads = new Map(",
                "-      threads.map(thd => [thd.id, new Thread(thd.id, thd.name)]),",
                "+    const threads = (body.threads != null ? body.threads : []).map(",
                "+      _ => new Thread(_.id, _.name),",
                "     );",
                "-    this._activeThread = null;",
                "-    if (threads.length > 0) {",
                "-      this._activeThread = threads[0].id;",
                "-    }",
                "+    this._threads.updateThreads(threads);",
                "   }",
                "diff --git a/modules/nuclide-debugger-cli/lib/DebuggerInterface.js b/modules/nuclide-debugger-cli/lib/DebuggerInterface.js",
                "index 745bce210..3b4eec477 100644",
                "--- a/modules/nuclide-debugger-cli/lib/DebuggerInterface.js",
                "+++ b/modules/nuclide-debugger-cli/lib/DebuggerInterface.js",
                "@@ -16,2 +16,3 @@ import Breakpoint from './Breakpoint';",
                " import Thread from './Thread';",
                "+import ThreadCollection from './ThreadCollection';",
                "@@ -30,3 +31,3 @@ export interface DebuggerInterface {",
                "   run(): Promise<void>;",
                "-  getThreads(): Map<number, Thread>;",
                "+  getThreads(): ThreadCollection;",
                "   getActiveThread(): Thread;",
                "diff --git a/modules/nuclide-debugger-cli/lib/Thread.js b/modules/nuclide-debugger-cli/lib/Thread.js",
                "index 33cae56c6..22fe7aa6e 100644",
                "--- a/modules/nuclide-debugger-cli/lib/Thread.js",
                "+++ b/modules/nuclide-debugger-cli/lib/Thread.js",
                "@@ -16,2 +16,3 @@ export default class Thread {",
                "   _selectedStackFrame: number;",
                "+  _stopped: boolean;",
                "@@ -20,2 +21,3 @@ export default class Thread {",
                "     this._name = name;",
                "+    this._stopped = false;",
                "     this.clearSelectedStackFrame();",
                "@@ -31,2 +33,10 @@ export default class Thread {",
                "+  setName(name: string): void {",
                "+    this._name = name;",
                "+  }",
                "+",
                "+  get isStopped(): boolean {",
                "+    return this._stopped;",
                "+  }",
                "+",
                "   clearSelectedStackFrame(): void {",
                "@@ -42,2 +52,10 @@ export default class Thread {",
                "   }",
                "+",
                "+  setRunning(): void {",
                "+    this._stopped = false;",
                "+  }",
                "+",
                "+  setStopped(): void {",
                "+    this._stopped = true;",
                "+  }",
                " }",
                "diff --git a/modules/nuclide-debugger-cli/lib/ThreadCollection.js b/modules/nuclide-debugger-cli/lib/ThreadCollection.js",
                "new file mode 100644",
                "index 000000000..4a16d636b",
                "--- /dev/null",
                "+++ b/modules/nuclide-debugger-cli/lib/ThreadCollection.js",
                "@@ -0,0 +1,131 @@",
                "+/**",
                "+ * Copyright (c) 2017-present, Facebook, Inc.",
                "+ * All rights reserved.",
                "+ *",
                "+ * This source code is licensed under the BSD-style license found in the",
                "+ * LICENSE file in the root directory of this source tree. An additional grant",
                "+ * of patent rights can be found in the PATENTS file in the same directory.",
                "+ *",
                "+ * @flow",
                "+ * @format",
                "+ */",
                "+",
                "+import Thread from './Thread';",
                "+",
                "+export default class ThreadCollection {",
                "+  _threads: Map<number, Thread>;",
                "+  _focusThread: ?number;",
                "+",
                "+  constructor() {",
                "+    this._threads = new Map();",
                "+  }",
                "+",
                "+  updateThreads(threads: Array<Thread>): void {",
                "+    const newIds = new Set(threads.map(_ => _.id()));",
                "+    const existingIds = [...this._threads.keys()];",
                "+",
                "+    existingIds",
                "+      .filter(_ => !newIds.has(_))",
                "+      .forEach(_ => this._threads.delete(_));",
                "+",
                "+    threads.forEach(_ => {",
                "+      const thread = this._threads.get(_.id());",
                "+      if (thread != null) {",
                "+        thread.setName(_.name());",
                "+        return;",
                "+      }",
                "+      this._threads.set(_.id(), _);",
                "+    });",
                "+",
                "+    if (",
                "+      this._focusThread != null &&",
                "+      this.getThreadById(this._focusThread) == null",
                "+    ) {",
                "+      this._focusThread = null;",
                "+    }",
                "+  }",
                "+",
                "+  addThread(thread: Thread): void {",
                "+    this._threads.set(thread.id(), thread);",
                "+  }",
                "+",
                "+  removeThread(id: number): void {",
                "+    this._threads.delete(id);",
                "+    if (this._focusThread === id) {",
                "+      this._focusThread = null;",
                "+    }",
                "+  }",
                "+",
                "+  get allThreads(): Array<Thread> {",
                "+    return [...this._threads.values()];",
                "+  }",
                "+",
                "+  getThreadById(id: number): ?Thread {",
                "+    return this._threads.get(id);",
                "+  }",
                "+",
                "+  markThreadStopped(id: number): void {",
                "+    const thread = this.getThreadById(id);",
                "+    if (thread == null) {",
                "+      throw new Error(`Attempt to mark unknown thread ${id} as stopped.`);",
                "+    }",
                "+    thread.setStopped();",
                "+  }",
                "+",
                "+  markThreadRunning(id: number): void {",
                "+    const thread = this.getThreadById(id);",
                "+    if (thread == null) {",
                "+      throw new Error(`Attempt to mark unknown thread ${id} as running.`);",
                "+    }",
                "+    thread.setRunning();",
                "+  }",
                "+",
                "+  markAllThreadsStopped(): void {",
                "+    [...this._threads.values()].forEach(thread => thread.setStopped());",
                "+  }",
                "+",
                "+  markAllThreadsRunning(): void {",
                "+    [...this._threads.values()].forEach(thread => thread.setRunning());",
                "+  }",
                "+",
                "+  allThreadsStopped(): boolean {",
                "+    return [...this._threads.values()].reduce((x, y) => x && y.isStopped, true);",
                "+  }",
                "+",
                "+  allThreadsRunning(): boolean {",
                "+    return [...this._threads.values()].reduce(",
                "+      (x, y) => x && !y.isStopped,",
                "+      true,",
                "+    );",
                "+  }",
                "+",
                "+  firstStoppedThread(): ?number {",
                "+    const stopped = [...this._threads.values()]",
                "+      .sort((a, b) => a.id() - b.id())",
                "+      .find(_ => _.isStopped);",
                "+",
                "+    if (stopped == null) {",
                "+      return null;",
                "+    }",
                "+",
                "+    return stopped.id();",
                "+  }",
                "+",
                "+  setFocusThread(id: number): void {",
                "+    if (this.getThreadById(id) == null) {",
                "+      throw new Error(`Attempt to focus unknown thread ${id}`);",
                "+    }",
                "+    this._focusThread = id;",
                "+  }",
                "+",
                "+  get focusThreadId(): ?number {",
                "+    return this._focusThread;",
                "+  }",
                "+",
                "+  get focusThread(): ?Thread {",
                "+    if (this._focusThread == null) {",
                "+      return null;",
                "+    }",
                "+    return this._threads.get(this._focusThread);",
                "+  }",
                "+}",
                "diff --git a/modules/nuclide-debugger-cli/lib/ThreadsCommand.js b/modules/nuclide-debugger-cli/lib/ThreadsCommand.js",
                "index d47f70f46..a8d61a5d5 100644",
                "--- a/modules/nuclide-debugger-cli/lib/ThreadsCommand.js",
                "+++ b/modules/nuclide-debugger-cli/lib/ThreadsCommand.js",
                "@@ -30,10 +30,10 @@ export default class ThreadsCommand implements Command {",
                "     const threads = this._debugger.getThreads();",
                "-    const activeThread = this._debugger.getActiveThread();",
                "+    const focusThread = threads.focusThreadId;",
                "-    Array.from(threads)",
                "-      .sort((left, right) => left[0] - right[0])",
                "-      .forEach(([tid, thread]) => {",
                "-        const activeMarker = tid === activeThread ? '*' : ' ';",
                "+    threads.allThreads",
                "+      .sort((left, right) => left.id() - right.id())",
                "+      .forEach(thread => {",
                "+        const activeMarker = thread.id() === focusThread ? '*' : ' ';",
                "         this._console.outputLine(",
                "-          `${activeMarker} ${tid} ${thread.name() || ''}`,",
                "+          `${activeMarker} ${thread.id()} ${thread.name() || ''}`,",
                "         );"
            ],
            "changed_files": [
                "modules/nuclide-debugger-cli/lib/Debugger.js",
                "modules/nuclide-debugger-cli/lib/DebuggerInterface.js",
                "modules/nuclide-debugger-cli/lib/Thread.js",
                "modules/nuclide-debugger-cli/lib/ThreadCollection.js",
                "modules/nuclide-debugger-cli/lib/ThreadsCommand.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "905f35b7d6cc0e86e99bb4828c9d3491cc07d068",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520386687,
            "hunks": 2,
            "message": "Fix missed CSS class Summary: Added this and immediately broke it when moving files between packages. Reviewed By: aadsm Differential Revision: D7175637 fbshipit-source-id: ed18ff9dddc054c3dace15dc40ee66f555f8be90",
            "diff": [
                "diff --git a/pkg/nuclide-device-panel-android/lib/ui/AdbTunnelButton.js b/pkg/nuclide-device-panel-android/lib/ui/AdbTunnelButton.js",
                "index 379018616..6aa11aa92 100644",
                "--- a/pkg/nuclide-device-panel-android/lib/ui/AdbTunnelButton.js",
                "+++ b/pkg/nuclide-device-panel-android/lib/ui/AdbTunnelButton.js",
                "@@ -27,3 +27,6 @@ export function AdbTunnelButton(props: Props): React.Element<any> {",
                "   const {host, enable, disable, status} = props;",
                "-  const className = classnames('nuclide-adb-sdb-tunnel-control', status);",
                "+  const className = classnames(",
                "+    'nuclide-device-panel-android-tunnel-control',",
                "+    status,",
                "+  );",
                "   const tooltipAction =",
                "diff --git a/pkg/nuclide-device-panel-android/styles/nuclide-device-panel-android.less b/pkg/nuclide-device-panel-android/styles/nuclide-device-panel-android.less",
                "index a79592607..702de2e49 100644",
                "--- a/pkg/nuclide-device-panel-android/styles/nuclide-device-panel-android.less",
                "+++ b/pkg/nuclide-device-panel-android/styles/nuclide-device-panel-android.less",
                "@@ -23,3 +23,3 @@",
                "-.nuclide-device-panel-android-tunneling-control {",
                "+.nuclide-device-panel-android-tunnel-control {",
                "   order: -1;"
            ],
            "changed_files": [
                "pkg/nuclide-device-panel-android/lib/ui/AdbTunnelButton.js",
                "pkg/nuclide-device-panel-android/styles/nuclide-device-panel-android.less"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "3534291ccf236e5781507ed255e27f4cced16a29",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520382705,
            "hunks": 1,
            "message": "remove ACK from clientId Summary: Pretty much the least interesting diff ever. Reviewed By: hansonw Differential Revision: D7062626 fbshipit-source-id: 5bbd4f7a467c7610d7c6ec6824b11d1c326615ee",
            "diff": [
                "diff --git a/modules/big-dig/src/socket/NuclideSocket.js b/modules/big-dig/src/socket/NuclideSocket.js",
                "index babc64a0e..c8c986cf7 100644",
                "--- a/modules/big-dig/src/socket/NuclideSocket.js",
                "+++ b/modules/big-dig/src/socket/NuclideSocket.js",
                "@@ -78,4 +78,3 @@ export class NuclideSocket {",
                "     this._heartbeatChannel = heartbeatChannel;",
                "-    // TODO: ACK can be removed after the release of 0.282.",
                "-    this.id = 'ACK' + uuid.v4();",
                "+    this.id = uuid.v4();",
                "     this._pingTimer = null;"
            ],
            "changed_files": [
                "modules/big-dig/src/socket/NuclideSocket.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "481efce6f48cba223a8b5f3c6616001ac3aef3a6",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521472831,
            "hunks": 1,
            "message": "Return immediately if tunneling not needed Summary: This way the caller can treat remote and local URIs the same way, since calling this with a local one is a no-op. Reviewed By: aadsm Differential Revision: D7292588 fbshipit-source-id: c32819d30fae3c9525e22728777654ce3d9ca390",
            "diff": [
                "diff --git a/pkg/nuclide-adb-sdb-base/lib/Tunneling.js b/pkg/nuclide-adb-sdb-base/lib/Tunneling.js",
                "index 79a114b7f..70fac06ed 100644",
                "--- a/pkg/nuclide-adb-sdb-base/lib/Tunneling.js",
                "+++ b/pkg/nuclide-adb-sdb-base/lib/Tunneling.js",
                "@@ -26,2 +26,5 @@ import {getAdbServiceByNuclideUri} from '../../nuclide-remote-connection';",
                " export function startTunnelingAdb(uri: NuclideUri): Promise<void> {",
                "+  if (!nuclideUri.isRemote(uri)) {",
                "+    return Promise.resolve();",
                "+  }",
                "   const {onReady} = activeTunnels.getOrCreate(uri, (_, serviceUri) => {"
            ],
            "changed_files": [
                "pkg/nuclide-adb-sdb-base/lib/Tunneling.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "2b19e164e684b5d01be9bfad558b79c1e1a26d22",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521597272,
            "hunks": 18,
            "message": "Add AbortController/AbortSignal polyfills and utilities Summary: This adds polyfills for `AbortController` and `AbortSignal` based on the spec here: https://dom.spec.whatwg.org/#aborting-ongoing-activities These have landed in Chrome but won't be out until Chrome 66, so we'll be stuck with these for quite a while. (It's also unclear what the story is when it comes to Node integration). (NOTE: there's https://github.com/mo/abortcontroller-polyfill but its implementation seems a little not-up-to-spec.) I used polyfills for `DOMException` and `EventTarget` as those are not available in Node (even in Chrome, `EventTarget` isn't instantiable until Chrome 64.) I also added two utilities for interop between RxJS and `AbortSignal` in `observable.js`: - `fromAbortablePromise`, which takes a function that accepts a `AbortSignal` and returns a `Promise<T>` and turns that into an `Observable<T>`. Unsubscribing from the observable naturally sends an `abort()` to the `AbortSignal`.   - This is meant to be used to e.g. convert cancellable fetch to an Observable. - `toAbortablePromise`, which turns an `Observable<T>` + `AbortSignal` into a `Promise<T>` which throws an \"AbortError\" `DOMException` upon receiving an abort.   - This is meant to help whken you want to actually implement a cancellable function.   - It takes a nullable `signal` to work well with the spec for cancellable functions, which indicates that `AbortSignal` objects should be accepted through a `signal` dictionary member (which may not exist). Reviewed By: matthewwithanm Differential Revision: D7314270 fbshipit-source-id: 2818fe81d62029fb2cc9de3a940d48fec72ed227",
            "diff": [
                "diff --git a/modules/nuclide-commons/AbortController.js b/modules/nuclide-commons/AbortController.js",
                "new file mode 100644",
                "index 000000000..09437905a",
                "--- /dev/null",
                "+++ b/modules/nuclide-commons/AbortController.js",
                "@@ -0,0 +1,59 @@",
                "+/**",
                "+ * Copyright (c) 2017-present, Facebook, Inc.",
                "+ * All rights reserved.",
                "+ *",
                "+ * This source code is licensed under the BSD-style license found in the",
                "+ * LICENSE file in the root directory of this source tree. An additional grant",
                "+ * of patent rights can be found in the PATENTS file in the same directory.",
                "+ *",
                "+ * @flow",
                "+ * @format",
                "+ */",
                "+",
                "+/**",
                "+ * This implements polyfills for AbortSignal and AbortController",
                "+ * from the whatwg spec: https://dom.spec.whatwg.org/#aborting-ongoing-activities",
                "+ * These will become available in Chrome 66.",
                "+ */",
                "+",
                "+// Shim of EventTarget usable in Node.",
                "+// Note that even in Chrome, EventTarget also isn't instantiable until version 64.",
                "+import {",
                "+  EventTarget as EventTargetShim,",
                "+  defineEventAttribute,",
                "+} from 'event-target-shim';",
                "+",
                "+export class AbortSignal extends (EventTargetShim: typeof EventTarget) {",
                "+  aborted: boolean = false;",
                "+  // Defined via defineEventAttribute below.",
                "+  onabort: ?(event: Event) => mixed;",
                "+",
                "+  // $FlowIssue: Computed properties are not supported",
                "+  get [Symbol.toStringTag]() {",
                "+    return 'AbortSignal';",
                "+  }",
                "+}",
                "+",
                "+defineEventAttribute(AbortSignal.prototype, 'abort');",
                "+",
                "+export default class AbortController {",
                "+  signal = new AbortSignal();",
                "+",
                "+  abort() {",
                "+    // From whatwg spec, section 3.2:",
                "+    // If signal\u00e2\u0080\u0099s aborted flag is set, then return.",
                "+    if (this.signal.aborted) {",
                "+      return;",
                "+    }",
                "+    // Set signal\u00e2\u0080\u0099s aborted flag.",
                "+    this.signal.aborted = true;",
                "+    // Fire an event named abort at signal.",
                "+    // Note: event-target-shim converts objects to Events.",
                "+    this.signal.dispatchEvent(({type: 'abort'}: any));",
                "+  }",
                "+",
                "+  // $FlowIssue: Computed properties are not supported",
                "+  get [Symbol.toStringTag]() {",
                "+    return 'AbortController';",
                "+  }",
                "+}",
                "diff --git a/modules/nuclide-commons/observable.js b/modules/nuclide-commons/observable.js",
                "index 209ce050d..733713353 100644",
                "--- a/modules/nuclide-commons/observable.js",
                "+++ b/modules/nuclide-commons/observable.js",
                "@@ -26,5 +26,10 @@",
                "+import type {AbortSignal} from './AbortController';",
                "+",
                " import UniversalDisposable from './UniversalDisposable';",
                " import invariant from 'assert';",
                "+// Note: DOMException is usable in Chrome but not in Node.",
                "+import DOMException from 'domexception';",
                " import {Observable, ReplaySubject, Subject} from 'rxjs';",
                "+import AbortController from './AbortController';",
                " import {setDifference} from './collection';",
                "@@ -423,2 +428,99 @@ export const nextAnimationFrame = Observable.create(observer => {",
                "+/**",
                "+ * Creates an Observable around an abortable promise.",
                "+ * Unsubscriptions are forwarded to the AbortController as an `abort()`.",
                "+ * Example usage (with an abortable fetch):",
                "+ *",
                "+ *   fromPromise(signal => fetch(url, {...options, signal}))",
                "+ *     .switchMap(....)",
                "+ *",
                "+ * Note that this can take a normal `() => Promise<T>` too",
                "+ * (in which case this acts as just a plain `Observable.defer`).",
                "+ */",
                "+export function fromAbortablePromise<T>(",
                "+  func: (signal: AbortSignal) => Promise<T>,",
                "+): Observable<T> {",
                "+  return Observable.create(observer => {",
                "+    let completed = false;",
                "+    const abortController = new AbortController();",
                "+    func(abortController.signal).then(",
                "+      value => {",
                "+        completed = true;",
                "+        observer.next(value);",
                "+        observer.complete();",
                "+      },",
                "+      error => {",
                "+        completed = true;",
                "+        observer.error(error);",
                "+      },",
                "+    );",
                "+    return () => {",
                "+      if (!completed) {",
                "+        abortController.abort();",
                "+        // If the promise adheres to the spec, it should throw.",
                "+        // The error will be captured above but go into the void.",
                "+      }",
                "+    };",
                "+  });",
                "+}",
                "+",
                "+/**",
                "+ * Converts an observable + AbortSignal into a cancellable Promise,",
                "+ * which rejects with an AbortError DOMException on abort.",
                "+ * Useful when writing the internals of a cancellable promise.",
                "+ *",
                "+ * Usage:",
                "+ *",
                "+ *   function abortableFunction(arg1: blah, options?: {signal?: AbortSignal}): Promise {",
                "+ *     return toPromise(",
                "+ *       observableFunction(arg1, options),",
                "+ *       options && options.signal,",
                "+ *     );",
                "+ *   }",
                "+ *",
                "+ * Could eventually be replaced by Observable.first if",
                "+ * https://github.com/whatwg/dom/issues/544 goes through.",
                "+ *",
                "+ * It's currently unclear if this should be usable with let/pipe:",
                "+ * https://github.com/ReactiveX/rxjs/issues/3445",
                "+ */",
                "+export function toAbortablePromise<T>(",
                "+  observable: Observable<T>,",
                "+  signal?: ?AbortSignal,",
                "+): Promise<T> {",
                "+  if (signal == null) {",
                "+    return observable.toPromise();",
                "+  }",
                "+  if (signal.aborted) {",
                "+    return Promise.reject(DOMException('Aborted', 'AbortError'));",
                "+  }",
                "+  return observable",
                "+    .race(",
                "+      Observable.fromEvent(signal, 'abort').map(() => {",
                "+        throw new DOMException('Aborted', 'AbortError');",
                "+      }),",
                "+    )",
                "+    .toPromise();",
                "+}",
                "+",
                "+/**",
                "+ * When using Observables with AbortSignals, be sure to use this -",
                "+ * it's really easy to miss the case when the signal is already aborted!",
                "+ * Recommended to use this with let/pipe:",
                "+ *",
                "+ *   myObservable",
                "+ *     .let(obs => takeUntilAbort(obs, signal))",
                "+ */",
                "+export function takeUntilAbort<T>(",
                "+  observable: Observable<T>,",
                "+  signal: AbortSignal,",
                "+): Observable<T> {",
                "+  return Observable.defer(() => {",
                "+    if (signal.aborted) {",
                "+      return Observable.empty();",
                "+    }",
                "+    return observable.takeUntil(Observable.fromEvent(signal, 'abort'));",
                "+  });",
                "+}",
                "+",
                " export type CancelablePromise<T> = {",
                "diff --git a/modules/nuclide-commons/package.json b/modules/nuclide-commons/package.json",
                "index 21eaf5fbe..0a803121a 100644",
                "--- a/modules/nuclide-commons/package.json",
                "+++ b/modules/nuclide-commons/package.json",
                "@@ -14,3 +14,5 @@",
                "     \"async-to-generator\": \"1.1.0\",",
                "+    \"domexception\": \"1.0.1\",",
                "     \"event-kit\": \"2.2.0\",",
                "+    \"event-target-shim\": \"3.0.1\",",
                "     \"fs-plus\": \"2.9.3\",",
                "diff --git a/modules/nuclide-commons/spec/AbortController-spec.js b/modules/nuclide-commons/spec/AbortController-spec.js",
                "new file mode 100644",
                "index 000000000..3da5a3580",
                "--- /dev/null",
                "+++ b/modules/nuclide-commons/spec/AbortController-spec.js",
                "@@ -0,0 +1,43 @@",
                "+/**",
                "+ * Copyright (c) 2017-present, Facebook, Inc.",
                "+ * All rights reserved.",
                "+ *",
                "+ * This source code is licensed under the BSD-style license found in the",
                "+ * LICENSE file in the root directory of this source tree. An additional grant",
                "+ * of patent rights can be found in the PATENTS file in the same directory.",
                "+ *",
                "+ * @flow",
                "+ * @format",
                "+ */",
                "+",
                "+import AbortController from '../AbortController';",
                "+",
                "+describe('AbortController', () => {",
                "+  it('dispatches abort() events', () => {",
                "+    const controller = new AbortController();",
                "+    expect(controller.signal.aborted).toBe(false);",
                "+",
                "+    const spy = jasmine.createSpy('onabort');",
                "+    controller.signal.onabort = spy;",
                "+",
                "+    controller.abort();",
                "+",
                "+    expect(controller.signal.aborted).toBe(true);",
                "+    expect(spy).toHaveBeenCalled();",
                "+",
                "+    // Ensure that we don't double-abort.",
                "+    controller.abort();",
                "+    expect(spy.callCount).toBe(1);",
                "+  });",
                "+",
                "+  it('dispatches abort() events via addEventListener', () => {",
                "+    const controller = new AbortController();",
                "+    const spy = jasmine.createSpy('onabort');",
                "+    controller.signal.addEventListener('abort', spy);",
                "+",
                "+    controller.abort();",
                "+",
                "+    expect(controller.signal.aborted).toBe(true);",
                "+    expect(spy).toHaveBeenCalled();",
                "+  });",
                "+});",
                "diff --git a/modules/nuclide-commons/spec/observable-spec.js b/modules/nuclide-commons/spec/observable-spec.js",
                "index 6b78e4f60..d1c390d3b 100644",
                "--- a/modules/nuclide-commons/spec/observable-spec.js",
                "+++ b/modules/nuclide-commons/spec/observable-spec.js",
                "@@ -12,2 +12,4 @@",
                "+import type {AbortSignal} from '../AbortController';",
                "+",
                " import {",
                "@@ -19,2 +21,3 @@ import {",
                "   fastDebounce,",
                "+  fromAbortablePromise,",
                "   macrotask,",
                "@@ -27,4 +30,6 @@ import {",
                "   splitStream,",
                "+  takeUntilAbort,",
                "   takeWhileInclusive,",
                "   throttle,",
                "+  toAbortablePromise,",
                "   toCancelablePromise,",
                "@@ -33,2 +38,3 @@ import {",
                " import nullthrows from 'nullthrows';",
                "+import AbortController from '../AbortController';",
                " import UniversalDisposable from '../UniversalDisposable';",
                "@@ -615,2 +621,84 @@ describe('nuclide-commons/observable', () => {",
                "+  describe('fromAbortablePromise', () => {",
                "+    it('is able to cancel a promise after unsubscription', () => {",
                "+      const spy = jasmine.createSpy('onabort');",
                "+      function f(signal: AbortSignal) {",
                "+        expect(signal.aborted).toBe(false);",
                "+        signal.onabort = spy;",
                "+        return new Promise(resolve => {});",
                "+      }",
                "+      const subscription = fromAbortablePromise(f).subscribe();",
                "+      subscription.unsubscribe();",
                "+      expect(spy).toHaveBeenCalled();",
                "+    });",
                "+",
                "+    it('does not trigger an abort after normal completion', () => {",
                "+      waitsForPromise(async () => {",
                "+        const spy = jasmine.createSpy('onabort');",
                "+        function f(signal: AbortSignal) {",
                "+          signal.onabort = spy;",
                "+          return Promise.resolve(1);",
                "+        }",
                "+        const result = await fromAbortablePromise(f).toPromise();",
                "+        expect(result).toBe(1);",
                "+        expect(spy).not.toHaveBeenCalled();",
                "+      });",
                "+    });",
                "+  });",
                "+",
                "+  describe('toAbortablePromise', () => {",
                "+    it('rejects with a DOMException on abort', () => {",
                "+      waitsForPromise(async () => {",
                "+        const controller = new AbortController();",
                "+        const spy = jasmine.createSpy('error');",
                "+        const promise = toAbortablePromise(",
                "+          Observable.never(),",
                "+          controller.signal,",
                "+        ).catch(spy);",
                "+        controller.abort();",
                "+        await promise;",
                "+",
                "+        expect(spy).toHaveBeenCalled();",
                "+        const exception: any = spy.calls[0].args[0];",
                "+        expect(exception.constructor.name).toBe('DOMException');",
                "+        expect(exception.name).toBe('AbortError');",
                "+        expect(exception.message).toBe('Aborted');",
                "+      });",
                "+    });",
                "+",
                "+    describe('takeUntilAbort', () => {",
                "+      it('completes on abort', () => {",
                "+        const controller = new AbortController();",
                "+",
                "+        const spy = jasmine.createSpy('completed');",
                "+        Observable.never()",
                "+          .let(obs => takeUntilAbort(obs, controller.signal))",
                "+          .subscribe({complete: spy});",
                "+",
                "+        expect(spy).not.toHaveBeenCalled();",
                "+        controller.abort();",
                "+        expect(spy).toHaveBeenCalled();",
                "+      });",
                "+",
                "+      it('completes when already aborted', () => {",
                "+        const controller = new AbortController();",
                "+        controller.abort();",
                "+",
                "+        const spy = jasmine.createSpy('completed');",
                "+        Observable.never()",
                "+          .let(obs => takeUntilAbort(obs, controller.signal))",
                "+          .subscribe({complete: spy});",
                "+",
                "+        expect(spy).toHaveBeenCalled();",
                "+      });",
                "+    });",
                "+",
                "+    it('works with no signal', () => {",
                "+      waitsForPromise(async () => {",
                "+        const promise = toAbortablePromise(Observable.of(1));",
                "+        expect(await promise).toBe(1);",
                "+      });",
                "+    });",
                "+  });",
                "+",
                "   describe('toCancellablePromise', () => {",
                "diff --git a/package.json b/package.json",
                "index 42ee1ff82..d0f9f09f9 100644",
                "--- a/package.json",
                "+++ b/package.json",
                "@@ -63,2 +63,3 @@",
                "     \"diffparser\": \"1.1.0\",",
                "+    \"domexception\": \"1.0.1\",",
                "     \"double-ended-queue\": \"2.1.0-0\",",
                "@@ -66,2 +67,3 @@",
                "     \"event-kit\": \"2.2.0\",",
                "+    \"event-target-shim\": \"3.0.1\",",
                "     \"fb-watchman\": \"2.0.0\",",
                "diff --git a/yarn.lock b/yarn.lock",
                "index b180a4793..ae4de0d38 100644",
                "--- a/yarn.lock",
                "+++ b/yarn.lock",
                "@@ -1658,3 +1658,3 @@ domelementtype@~1.1.1:",
                "-domexception@^1.0.0:",
                "+domexception@1.0.1, domexception@^1.0.0:",
                "   version \"1.0.1\"",
                "@@ -1948,2 +1948,6 @@ event-stream@^3.3.1, event-stream@~3.3.4:",
                "+event-target-shim@3.0.1:",
                "+  version \"3.0.1\"",
                "+  resolved \"https://registry.yarnpkg.com/event-target-shim/-/event-target-shim-3.0.1.tgz#a4a62f0795e5b65363e86c6780413224d1eea688\"",
                "+",
                " exec-sh@^0.2.0:"
            ],
            "changed_files": [
                "modules/nuclide-commons/AbortController.js",
                "modules/nuclide-commons/observable.js",
                "modules/nuclide-commons/package.json",
                "modules/nuclide-commons/spec/AbortController-spec.js",
                "modules/nuclide-commons/spec/observable-spec.js",
                "package.json",
                "yarn.lock"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "b24dfc7e8d79888afea12a5ae571dee81368d9cf",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521160739,
            "hunks": 1,
            "message": "Create \"Go\" menu entries for core functions Summary: This adds \"Go\" menu entries for: * Go to File * Go to Symbol in File * Go to Symbol in Project * Go to Line Reviewed By: matthewwithanm Differential Revision: D7282597 fbshipit-source-id: f80c5ecc8c6564c09245d10d33a8afe940ed488f",
            "diff": [
                "diff --git a/pkg/nuclide-navigation-stack/menus/nuclide-navigation-stack.json b/pkg/nuclide-navigation-stack/menus/nuclide-navigation-stack.json",
                "index cedec8345..6f50d1d5c 100644",
                "--- a/pkg/nuclide-navigation-stack/menus/nuclide-navigation-stack.json",
                "+++ b/pkg/nuclide-navigation-stack/menus/nuclide-navigation-stack.json",
                "@@ -5,2 +5,5 @@",
                "       \"submenu\": [",
                "+        {",
                "+          \"type\": \"separator\"",
                "+        },",
                "         {"
            ],
            "changed_files": [
                "pkg/nuclide-navigation-stack/menus/nuclide-navigation-stack.json"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "e99bbc770b0d1f1f4e9f0e6e01e06cca0dd6edc2",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520582422,
            "hunks": 18,
            "message": "Add flow-language-server as an internal dependency. Reviewed By: hansonw, wbinnssmith Differential Revision: D7163353 fbshipit-source-id: c6bca14a918970196aadee5e27c5fdab34cf5e57",
            "diff": [
                "diff --git a/package.json b/package.json",
                "index 6ab8dfbb7..039246cd7 100644",
                "--- a/package.json",
                "+++ b/package.json",
                "@@ -66,2 +66,3 @@",
                "     \"flatten-source-map\": \"0.0.2\",",
                "+    \"flow-language-server\": \"0.4.3\",",
                "     \"fs-plus\": \"2.9.3\",",
                "diff --git a/yarn.lock b/yarn.lock",
                "index 9cdd1b7ac..aa2c71ba0 100644",
                "--- a/yarn.lock",
                "+++ b/yarn.lock",
                "@@ -30,3 +30,3 @@ acorn@^5.1.1:",
                "-adm-zip@0.4.7:",
                "+adm-zip@0.4.7, adm-zip@^0.4.7:",
                "   version \"0.4.7\"",
                "@@ -1553,3 +1553,3 @@ entities@^1.1.1, entities@~1.1.1:",
                "-error-ex@^1.2.0:",
                "+error-ex@^1.2.0, error-ex@^1.3.1:",
                "   version \"1.3.1\"",
                "@@ -1990,2 +1990,39 @@ flow-bin@0.66.0:",
                "+flow-language-server@0.4.3:",
                "+  version \"0.4.3\"",
                "+  resolved \"https://registry.yarnpkg.com/flow-language-server/-/flow-language-server-0.4.3.tgz#48cb5a024ea5ab59423deb9b0cfb95063bcc3875\"",
                "+  dependencies:",
                "+    async-to-generator \"1.1.0\"",
                "+    event-kit \"2.2.0\"",
                "+    flow-versions \"^0.3.1\"",
                "+    fuzzaldrin-plus \"0.4.1\"",
                "+    log4js \"1.1.1\"",
                "+    nuclide-commons \"0.5.1\"",
                "+    semver \"5.3.0\"",
                "+    simple-text-buffer \"9.2.11\"",
                "+    temp \"0.8.3\"",
                "+    through \"2.3.8\"",
                "+    vscode-jsonrpc \"3.3.0\"",
                "+    vscode-languageserver \"^3.3.0\"",
                "+    vscode-uri \"^1.0.1\"",
                "+    yargs \"^8.0.2\"",
                "+",
                "+flow-versions@^0.3.1:",
                "+  version \"0.3.1\"",
                "+  resolved \"https://registry.yarnpkg.com/flow-versions/-/flow-versions-0.3.1.tgz#99e3f4ea97a8e97ae2d81194e80812b0c6562be2\"",
                "+  dependencies:",
                "+    adm-zip \"^0.4.7\"",
                "+    async-to-generator \"1.1.0\"",
                "+    idx \"^1.5.0\"",
                "+    ini \"^1.3.5\"",
                "+    invariant \"2.2.2\"",
                "+    log4js \"1.1.1\"",
                "+    node-fetch \"^2.0.0\"",
                "+    nuclide-commons \"0.5.1\"",
                "+    nullthrows \"1.0.0\"",
                "+    read-pkg-up \"^3.0.0\"",
                "+    rimraf \"2.5.4\"",
                "+    semver \"5.3.0\"",
                "+    temp \"0.8.3\"",
                "+",
                " for-in@^1.0.1, for-in@^1.0.2:",
                "@@ -2611,2 +2648,6 @@ idx@1.2.0:",
                "+idx@^1.5.0:",
                "+  version \"1.5.0\"",
                "+  resolved \"https://registry.yarnpkg.com/idx/-/idx-1.5.0.tgz#2ce9665945fdb36544308f930c78e3f1ef6c4315\"",
                "+",
                " ignore@^3.3.3:",
                "@@ -2642,2 +2683,6 @@ ini@1.3.4:",
                "+ini@^1.3.5:",
                "+  version \"1.3.5\"",
                "+  resolved \"https://registry.yarnpkg.com/ini/-/ini-1.3.5.tgz#eee25f56db1c9ec6085e0c22778083f596abf927\"",
                "+",
                " inquirer@^3.0.6:",
                "@@ -3037,2 +3082,6 @@ jsesc@^1.3.0:",
                "+json-parse-better-errors@^1.0.1:",
                "+  version \"1.0.1\"",
                "+  resolved \"https://registry.yarnpkg.com/json-parse-better-errors/-/json-parse-better-errors-1.0.1.tgz#50183cd1b2d25275de069e9e71b467ac9eab973a\"",
                "+",
                " json-schema-traverse@^0.3.0:",
                "@@ -3180,2 +3229,11 @@ load-json-file@^2.0.0:",
                "+load-json-file@^4.0.0:",
                "+  version \"4.0.0\"",
                "+  resolved \"https://registry.yarnpkg.com/load-json-file/-/load-json-file-4.0.0.tgz#2f5f45ab91e33216234fd53adab668eb4ec0993b\"",
                "+  dependencies:",
                "+    graceful-fs \"^4.1.2\"",
                "+    parse-json \"^4.0.0\"",
                "+    pify \"^3.0.0\"",
                "+    strip-bom \"^3.0.0\"",
                "+",
                " locate-path@^2.0.0:",
                "@@ -3684,2 +3742,6 @@ node-fetch@1.6.3, node-fetch@^1.0.1:",
                "+node-fetch@^2.0.0:",
                "+  version \"2.1.1\"",
                "+  resolved \"https://registry.yarnpkg.com/node-fetch/-/node-fetch-2.1.1.tgz#369ca70b82f50c86496104a6c776d274f4e4a2d4\"",
                "+",
                " node-int64@^0.4.0:",
                "@@ -3731,2 +3793,25 @@ nth-check@~1.0.1:",
                "+nuclide-commons@0.5.1:",
                "+  version \"0.5.1\"",
                "+  resolved \"https://registry.yarnpkg.com/nuclide-commons/-/nuclide-commons-0.5.1.tgz#243826dce1ec5e79ef19719af20f457a9eb3c569\"",
                "+  dependencies:",
                "+    async-to-generator \"1.1.0\"",
                "+    event-kit \"2.2.0\"",
                "+    fs-plus \"2.9.3\"",
                "+    glob \"7.1.1\"",
                "+    idx \"1.2.0\"",
                "+    log4js \"1.1.1\"",
                "+    lru-cache \"4.0.2\"",
                "+    mime-types \"2.1.16\"",
                "+    mkdirp \"0.5.1\"",
                "+    mv \"2.1.1\"",
                "+    nullthrows \"1.0.0\"",
                "+    rimraf \"2.6.2\"",
                "+    rxjs \"5.5.5\"",
                "+    shell-quote \"1.6.1\"",
                "+    temp \"0.8.3\"",
                "+    uuid \"3.0.1\"",
                "+    vscode-jsonrpc \"3.3.0\"",
                "+    vscode-uri \"1.0.1\"",
                "+",
                " nuclide-prebuilt-libs@0.3.3:",
                "@@ -3933,2 +4018,9 @@ parse-json@^2.2.0:",
                "+parse-json@^4.0.0:",
                "+  version \"4.0.0\"",
                "+  resolved \"https://registry.yarnpkg.com/parse-json/-/parse-json-4.0.0.tgz#be35f5425be1f7f6c747184f98a788cb99477ee0\"",
                "+  dependencies:",
                "+    error-ex \"^1.3.1\"",
                "+    json-parse-better-errors \"^1.0.1\"",
                "+",
                " parse5@^3.0.1:",
                "@@ -3991,2 +4083,8 @@ path-type@^2.0.0:",
                "+path-type@^3.0.0:",
                "+  version \"3.0.0\"",
                "+  resolved \"https://registry.yarnpkg.com/path-type/-/path-type-3.0.0.tgz#cef31dc8e0a1a3bb0d105c0cd97cf3bf47f4e36f\"",
                "+  dependencies:",
                "+    pify \"^3.0.0\"",
                "+",
                " pause-stream@0.0.11:",
                "@@ -4009,2 +4107,6 @@ pify@^2.0.0:",
                "+pify@^3.0.0:",
                "+  version \"3.0.0\"",
                "+  resolved \"https://registry.yarnpkg.com/pify/-/pify-3.0.0.tgz#e5a4acd2c101fdf3d9a4d07f0dbc4db49dd28176\"",
                "+",
                " pinkie-promise@^2.0.0:",
                "@@ -4217,2 +4319,9 @@ read-pkg-up@^2.0.0:",
                "+read-pkg-up@^3.0.0:",
                "+  version \"3.0.0\"",
                "+  resolved \"https://registry.yarnpkg.com/read-pkg-up/-/read-pkg-up-3.0.0.tgz#3ed496685dba0f8fe118d0691dc51f4a1ff96f07\"",
                "+  dependencies:",
                "+    find-up \"^2.0.0\"",
                "+    read-pkg \"^3.0.0\"",
                "+",
                " read-pkg@^1.0.0:",
                "@@ -4233,2 +4342,10 @@ read-pkg@^2.0.0:",
                "+read-pkg@^3.0.0:",
                "+  version \"3.0.0\"",
                "+  resolved \"https://registry.yarnpkg.com/read-pkg/-/read-pkg-3.0.0.tgz#9cbc686978fee65d16c00e2b19c237fcf6e38389\"",
                "+  dependencies:",
                "+    load-json-file \"^4.0.0\"",
                "+    normalize-package-data \"^2.3.2\"",
                "+    path-type \"^3.0.0\"",
                "+",
                " read@^1.0.7:",
                "@@ -4521,2 +4638,8 @@ rimraf@2, rimraf@2.6.2, rimraf@^2.2.8, rimraf@^2.3.3, rimraf@^2.5.4, rimraf@^2.6",
                "+rimraf@2.5.4:",
                "+  version \"2.5.4\"",
                "+  resolved \"https://registry.yarnpkg.com/rimraf/-/rimraf-2.5.4.tgz#96800093cbf1a0c86bd95b4625467535c29dfa04\"",
                "+  dependencies:",
                "+    glob \"^7.0.5\"",
                "+",
                " rimraf@~2.2.2, rimraf@~2.2.6:",
                "@@ -5577,3 +5700,3 @@ vscode-nls@^1.0.4:",
                "-vscode-uri@1.0.1:",
                "+vscode-uri@1.0.1, vscode-uri@^1.0.1:",
                "   version \"1.0.1\"",
                "@@ -5765,3 +5888,3 @@ yargs@3.32.0, \"yargs@^3.32.0 || ^7.0.0\":",
                "-yargs@^8.0.1:",
                "+yargs@^8.0.1, yargs@^8.0.2:",
                "   version \"8.0.2\""
            ],
            "changed_files": [
                "package.json",
                "yarn.lock"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "af01d562d38b6d431568ae9ac67423c8b9844fce",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1522088136,
            "hunks": 6,
            "message": "Fix homedir expansion bug in findOrCreateFromConnection Summary: Fixed a bug where homedir was not being expanded in findOrCreateFromConnection, meaning that the project file could not be found. Previously, it was not necessarily to expand in this function because the filesystem was not being read from until `_initialize()` was called. Reviewed By: hansonw Differential Revision: D7368450 fbshipit-source-id: a03d30d0c55103e2226565fecea500b734e09bec",
            "diff": [
                "diff --git a/pkg/nuclide-remote-connection/lib/RemoteConnection.js b/pkg/nuclide-remote-connection/lib/RemoteConnection.js",
                "index ca127227f..eeb9d64f2 100644",
                "--- a/pkg/nuclide-remote-connection/lib/RemoteConnection.js",
                "+++ b/pkg/nuclide-remote-connection/lib/RemoteConnection.js",
                "@@ -87,5 +87,8 @@ export class RemoteConnection {",
                "     );",
                "-    // cwd may actually be a project file.",
                "-    const contents = hasAtomProjectFormat(cwd)",
                "-      ? await fsService.readFile(cwd).catch(() => null)",
                "+",
                "+    const realPath = await fsService.resolveRealPath(cwd);",
                "+",
                "+    // realPath may actually be a project file.",
                "+    const contents = hasAtomProjectFormat(realPath)",
                "+      ? await fsService.readFile(realPath).catch(() => null)",
                "       : null;",
                "@@ -93,7 +96,19 @@ export class RemoteConnection {",
                "     const directories = [];",
                "+",
                "+    // If the file is not a project file, initialize the connection.",
                "     if (contents == null) {",
                "-      directories.push(cwd);",
                "+      // Now that we know the real path, it's possible this collides with an existing connection.",
                "+      if (realPath !== cwd && nuclideUri.isRemote(cwd)) {",
                "+        const existingConnection = this.getByHostnameAndPath(",
                "+          nuclideUri.getHostname(cwd),",
                "+          realPath,",
                "+        );",
                "+        if (existingConnection != null) {",
                "+          return existingConnection;",
                "+        }",
                "+      }",
                "+      directories.push(realPath);",
                "     } else {",
                "       const projectContents = season.parse(contents.toString());",
                "-      const dirname = nuclideUri.dirname(cwd);",
                "+      const dirname = nuclideUri.dirname(realPath);",
                "@@ -110,3 +125,3 @@ export class RemoteConnection {",
                "         projectContents.paths = directories;",
                "-        projectContents.originPath = cwd;",
                "+        projectContents.originPath = realPath;",
                "         atom.project.replace(projectContents);",
                "@@ -281,23 +296,2 @@ export class RemoteConnection {",
                "     try {",
                "-      const fileSystemService: FileSystemServiceType = this.getService(",
                "-        FILE_SYSTEM_SERVICE,",
                "-      );",
                "-      const resolvedPath = await fileSystemService.resolveRealPath(this._cwd);",
                "-",
                "-      // Now that we know the real path, it's possible this collides with an existing connection.",
                "-      // If so, we should just stop immediately.",
                "-      if (resolvedPath !== this._cwd) {",
                "-        const existingConnection = RemoteConnection.getByHostnameAndPath(",
                "-          this.getRemoteHostname(),",
                "-          resolvedPath,",
                "-        );",
                "-        invariant(this !== existingConnection);",
                "-        if (existingConnection != null) {",
                "-          this.close(attemptShutdown);",
                "-          return existingConnection;",
                "-        }",
                "-",
                "-        this._cwd = resolvedPath;",
                "-      }",
                "-",
                "       // A workaround before Atom 2.0: see ::getHgRepoInfo."
            ],
            "changed_files": [
                "pkg/nuclide-remote-connection/lib/RemoteConnection.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "dcc9584e2eb7b9305a12525864cbeb6c83b99297",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521126842,
            "hunks": 2,
            "message": "Pass keys to cache's value factory Summary: Sometimes useful to have both the original source for a key and the actual key available when creating an object. Easy enough to ignore these arguments when you don't need them, so no harm done. Reviewed By: aadsm Differential Revision: D7282644 fbshipit-source-id: feb74faf5e3f60a2da0e61b7fe7621497fef9435",
            "diff": [
                "diff --git a/pkg/commons-node/cache.js b/pkg/commons-node/cache.js",
                "index 67ef72e88..d080fecf6 100644",
                "--- a/pkg/commons-node/cache.js",
                "+++ b/pkg/commons-node/cache.js",
                "@@ -43,3 +43,3 @@ export class Cache<KeyArgs, T> {",
                "-  getOrCreate(keyArgs: KeyArgs, factory: () => T): T {",
                "+  getOrCreate(keyArgs: KeyArgs, factory: (KeyArgs, mixed) => T): T {",
                "     const key = this._keyFactory(keyArgs);",
                "@@ -48,3 +48,3 @@ export class Cache<KeyArgs, T> {",
                "     }",
                "-    const value = factory();",
                "+    const value = factory(keyArgs, key);",
                "     this.store.set(key, value);"
            ],
            "changed_files": [
                "pkg/commons-node/cache.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "9c51492fd2d5e2699deb196d927bdf3c270cf464",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520531867,
            "hunks": 2,
            "message": "Add fallback switch when cquery is missing Summary: If the cquery binary does not exist on the connection host, add an atom notification with a button to fall back to the built-in C++ language service. Reviewed By: a20012251 Differential Revision: D7154988 fbshipit-source-id: e171c0f2946fb055d7e97507e318050b823aa59d",
            "diff": [
                "diff --git a/pkg/nuclide-cquery-lsp-rpc/lib/main.js b/pkg/nuclide-cquery-lsp-rpc/lib/main.js",
                "index f6d6cb862..95a56bf30 100644",
                "--- a/pkg/nuclide-cquery-lsp-rpc/lib/main.js",
                "+++ b/pkg/nuclide-cquery-lsp-rpc/lib/main.js",
                "@@ -173,3 +173,2 @@ async function ensureCommandExists(",
                "     logger.warn(message);",
                "-    host.consoleNotification(languageId, 'warning', message);",
                "     return false;",
                "diff --git a/pkg/nuclide-cquery-lsp/lib/main.js b/pkg/nuclide-cquery-lsp/lib/main.js",
                "index 6c7a6abca..b3f3bb639 100644",
                "--- a/pkg/nuclide-cquery-lsp/lib/main.js",
                "+++ b/pkg/nuclide-cquery-lsp/lib/main.js",
                "@@ -339,2 +339,24 @@ async function getConnection(connection): Promise<LanguageService> {",
                "   });",
                "+  if (cqueryService == null && featureConfig.get(USE_CQUERY_CONFIG)) {",
                "+    const notification = atom.notifications.addWarning(",
                "+      'Could not enable cquery, would you like to switch to built-in C++ support?',",
                "+      {",
                "+        buttons: [",
                "+          {",
                "+            text: 'Use built-in C++ services',",
                "+            onDidClick: () => {",
                "+              featureConfig.set(USE_CQUERY_CONFIG, false);",
                "+              notification.dismiss();",
                "+            },",
                "+          },",
                "+          {",
                "+            text: 'Ignore',",
                "+            onDidClick: () => {",
                "+              notification.dismiss();",
                "+            },",
                "+          },",
                "+        ],",
                "+      },",
                "+    );",
                "+  }",
                "   return cqueryService != null"
            ],
            "changed_files": [
                "pkg/nuclide-cquery-lsp-rpc/lib/main.js",
                "pkg/nuclide-cquery-lsp/lib/main.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "2796796d675f46a5d43b8daa0554f0bd4e2e98a4",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521742087,
            "hunks": 3,
            "message": "don't rename absolutePathToServerMain in the middle of threading it through Summary: the renaming of this variable while threading it through caused me some confusion, so i fixed it. Reviewed By: hansonw Differential Revision: D7359026 fbshipit-source-id: 8dfd5c773e4454b7a3fdd5fbd925c1676be192bb",
            "diff": [
                "diff --git a/modules/big-dig/src/server/launchServer.js b/modules/big-dig/src/server/launchServer.js",
                "index dc784efb2..13a9d80a6 100644",
                "--- a/modules/big-dig/src/server/launchServer.js",
                "+++ b/modules/big-dig/src/server/launchServer.js",
                "@@ -28,3 +28,3 @@ export type LauncherScriptParams = {|",
                "   exclusive: ?string,",
                "-  launcher: string,",
                "+  absolutePathToServerMain: string,",
                "   serverParams: mixed,",
                "@@ -62,3 +62,3 @@ async function handleLaunchParams(params: LauncherScriptParams) {",
                "     },",
                "-    absolutePathToServerMain: params.launcher,",
                "+    absolutePathToServerMain: params.absolutePathToServerMain,",
                "     serverParams: params.serverParams,",
                "diff --git a/modules/big-dig/src/server/main.js b/modules/big-dig/src/server/main.js",
                "index 6342ca2d1..5bce1eb0d 100644",
                "--- a/modules/big-dig/src/server/main.js",
                "+++ b/modules/big-dig/src/server/main.js",
                "@@ -69,3 +69,3 @@ export async function generateCertificatesAndStartServer({",
                "     exclusive,",
                "-    launcher: absolutePathToServerMain,",
                "+    absolutePathToServerMain,",
                "     serverParams,"
            ],
            "changed_files": [
                "modules/big-dig/src/server/launchServer.js",
                "modules/big-dig/src/server/main.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "603ca12ec1bdab2688eb86874264ff139a87397c",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520442331,
            "hunks": 3,
            "message": "Fix off by one error in callstack component Summary: IStackFrame has 0-based line numbers, so we need to add one before displaying. Reviewed By: mostafaeweda Differential Revision: D7176075 fbshipit-source-id: 6f90c9b5a4825d17a817f74b02fd1f9aa8e29845",
            "diff": [
                "diff --git a/pkg/nuclide-debugger-new/lib/ui/DebuggerCallstackComponent.js b/pkg/nuclide-debugger-new/lib/ui/DebuggerCallstackComponent.js",
                "index def9ac948..238b74fac 100644",
                "--- a/pkg/nuclide-debugger-new/lib/ui/DebuggerCallstackComponent.js",
                "+++ b/pkg/nuclide-debugger-new/lib/ui/DebuggerCallstackComponent.js",
                "@@ -62,6 +62,8 @@ export default class DebuggerCallstackComponent extends React.Component<",
                "         : path.basename(source.uri) || UNKNOWN_SOURCE;",
                "+",
                "+    // Note: IStackFrame ranges are 0-based.",
                "     return (",
                "-      <div title={`${name}:${range.start.row}`}>",
                "+      <div title={`${name}:${range.start.row + 1}`}>",
                "         <span>",
                "-          {name}:{range.start.row}",
                "+          {name}:{range.start.row + 1}",
                "         </span>"
            ],
            "changed_files": [
                "pkg/nuclide-debugger-new/lib/ui/DebuggerCallstackComponent.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "e6fa9ee335ae087df71399f1b2772eb3b5937962",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520377429,
            "hunks": 8,
            "message": "Allow the ability to prefer certain ports over others when none is specified Reviewed By: bolinfest Differential Revision: D7155223 fbshipit-source-id: 3c65d6568b0876661010fe297a537e829352426e",
            "diff": [
                "diff --git a/modules/big-dig/src/server/NuclideServer.js b/modules/big-dig/src/server/NuclideServer.js",
                "index a5c3fd295..d4ffdbe54 100644",
                "--- a/modules/big-dig/src/server/NuclideServer.js",
                "+++ b/modules/big-dig/src/server/NuclideServer.js",
                "@@ -43,2 +43,6 @@ export type NuclideServerOptions = {",
                "+// When a port of 0 is specified, it still makes sense to prefer certain ports over others.",
                "+// TODO(hansonw): Make this configurable.",
                "+const PREFERRED_PORTS = [9093, 9092, 9091, 9090];",
                "+",
                " /**",
                "@@ -54,42 +58,63 @@ export type NuclideServerOptions = {",
                "  */",
                "-export function launchServer(options: NuclideServerOptions): Promise<number> {",
                "+export async function launchServer(",
                "+  options: NuclideServerOptions,",
                "+): Promise<number> {",
                "   const webServer = https.createServer(options.webServer);",
                "+  const ports = [];",
                "+  if (options.port === 0) {",
                "+    ports.push(...PREFERRED_PORTS);",
                "+  }",
                "+  ports.push(options.port);",
                "+",
                "+  let found = false;",
                "+  for (const port of ports) {",
                "+    // eslint-disable-next-line no-await-in-loop",
                "+    if (await tryListen(webServer, port)) {",
                "+      found = true;",
                "+      break;",
                "+    }",
                "+  }",
                "+  if (!found) {",
                "+    throw Error(`Port ${options.port} is already in use`);",
                "+  }",
                "+",
                "+  const webSocketServer = new WS.Server({",
                "+    server: webServer,",
                "+    perMessageDeflate: true,",
                "+  });",
                "+",
                "+  // Let unhandled WS server errors go through to the global exception handler.",
                "+",
                "+  // $FlowIgnore",
                "+  const launcher: LauncherType = require(options.absolutePathToServerMain);",
                "+",
                "+  const bigDigServer = new BigDigServer(webServer, webSocketServer);",
                "+  await launcher({",
                "+    server: bigDigServer,",
                "+    serverParams: options.serverParams,",
                "+  });",
                "+  return webServer.address().port;",
                "+}",
                "+",
                "+/**",
                "+ * Attempts to have the https server listen to the specified port.",
                "+ * Returns true if successful or false if the port is already in use.",
                "+ * Any other errors result in a rejection.",
                "+ */",
                "+function tryListen(server: https.Server, port: number): Promise<boolean> {",
                "   return new Promise((resolve, reject) => {",
                "-    // TODO(mbolin): Once the webServer is up and running and this Promise is resolved,",
                "-    // rejecting the Promise will be a noop. We need better error handling here.",
                "-    const onError = error => {",
                "+    function onError(error) {",
                "       if (error.errno === 'EADDRINUSE') {",
                "-        // eslint-disable-next-line",
                "-        console.error(`ERROR: Port ${options.port} is already in use.`);",
                "-        process.exit(1);",
                "+        return resolve(false);",
                "       }",
                "-      // Note that `error` could be an EADDRINUSE error.",
                "-      webServer.removeAllListeners();",
                "       reject(error);",
                "-    };",
                "-    // TODO(mbolin): If we want the new WebSocketServer to get the 'connection' event,",
                "-    // then we need to get it wired up before the webServer is connected.",
                "-    webServer.on('listening', () => {",
                "-      const webSocketServer = new WS.Server({",
                "-        server: webServer,",
                "-        perMessageDeflate: true,",
                "-      });",
                "-      webSocketServer.on('error', onError);",
                "-",
                "-      // $FlowIgnore",
                "-      const launcher: LauncherType = require(options.absolutePathToServerMain);",
                "+    }",
                "-      const bigDigServer = new BigDigServer(webServer, webSocketServer);",
                "-      launcher({",
                "-        server: bigDigServer,",
                "-        serverParams: options.serverParams,",
                "-      }).then(() => {",
                "-        // Now the NuclideServer should have attached its own error handler.",
                "-        webServer.removeListener('error', onError);",
                "-        resolve(webServer.address().port);",
                "-      });",
                "+    server.once('error', onError);",
                "+    server.listen(port, () => {",
                "+      // Let errors after the initial listen fall through to the global exception handler.",
                "+      server.removeListener('error', onError);",
                "+      resolve(true);",
                "     });",
                "-    webServer.on('error', onError);",
                "-    webServer.listen(options.port);",
                "   });"
            ],
            "changed_files": [
                "modules/big-dig/src/server/NuclideServer.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "d3fe588e538038f6790b1fe8135f30429f65e578",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521565149,
            "hunks": 1,
            "message": "Backport remaining CursorKinds=60x from the upstream cindex.py Summary: subj Reviewed By: hansonw Differential Revision: D7305595 fbshipit-source-id: 167ef8b5e1bda0fd1c589ac9839666930e443c89",
            "diff": [
                "diff --git a/pkg/nuclide-clang-rpc/VendorLib/clang/cindex.py b/pkg/nuclide-clang-rpc/VendorLib/clang/cindex.py",
                "index e3cd8ac8a..512015270 100644",
                "--- a/pkg/nuclide-clang-rpc/VendorLib/clang/cindex.py",
                "+++ b/pkg/nuclide-clang-rpc/VendorLib/clang/cindex.py",
                "@@ -1104,2 +1104,8 @@ CursorKind.INCLUSION_DIRECTIVE = CursorKind(503)",
                " CursorKind.MODULE_IMPORT_DECL = CursorKind(600)",
                "+# A type alias template declaration",
                "+CursorKind.TYPE_ALIAS_TEMPLATE_DECL = CursorKind(601)",
                "+# A static_assert or _Static_assert node",
                "+CursorKind.STATIC_ASSERT = CursorKind(602)",
                "+# A friend declaration",
                "+CursorKind.FRIEND_DECL = CursorKind(603)"
            ],
            "changed_files": [
                "pkg/nuclide-clang-rpc/VendorLib/clang/cindex.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "e96247bee9d6e3af350034f388ac88646e86a4d9",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521575942,
            "hunks": 2,
            "message": "Vsp Rewrite: Disposable Error Fix Summary: I'm not sure if this is the proper solution but if it isn't, then I'm not sure what the proper solution would be. There was an error whenever you reloaded atom that said something like \"Emitter has already been disposed\". This is because the DebuggerLayoutManager needs to be disposed before the DebugService which when disposed, disposes the Model from DebuggerModel.js which disposes that emitter. Reviewed By: mostafaeweda Differential Revision: D7313189 fbshipit-source-id: 7f4c2913bde05771b129d7e34d9bb04cb7bc0ea0",
            "diff": [
                "diff --git a/pkg/nuclide-debugger-new/lib/main.js b/pkg/nuclide-debugger-new/lib/main.js",
                "index fa8f5dd92..0e64ccc0e 100644",
                "--- a/pkg/nuclide-debugger-new/lib/main.js",
                "+++ b/pkg/nuclide-debugger-new/lib/main.js",
                "@@ -85,5 +85,5 @@ class Activation {",
                "     this._disposables = new UniversalDisposable(",
                "+      this._layoutManager,",
                "       this._service,",
                "       this._uiModel,",
                "-      this._layoutManager,",
                "       this._breakpointManager,"
            ],
            "changed_files": [
                "pkg/nuclide-debugger-new/lib/main.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "6b65f987df227c13818a9efea4e890aa52115201",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521482506,
            "hunks": 1,
            "message": "Add empty object to nuclide field of nuclide's atomproject Summary: Previously, the enabledFeatureGroups field was removed from this config. After this field was removed, the CSON became invalid. This (small) diff adds an empty object to make the CSON valid again. Reviewed By: matthewwithanm Differential Revision: D7316982 fbshipit-source-id: 336b828f157dff3e016e65ff2d6e79f103b76eb7",
            "diff": [
                "diff --git a/Nuclide.atomproject.cson b/Nuclide.atomproject.cson",
                "index 610860a8a..348a59e0e 100644",
                "--- a/Nuclide.atomproject.cson",
                "+++ b/Nuclide.atomproject.cson",
                "@@ -7,7 +7,5 @@",
                "   \"*\":",
                "-    \"nuclide\":",
                "-      # For now, no featuregroups are specified. This means all",
                "-      # featuregroups will by default be loaded into Nuclide.",
                "-",
                "-      # \"enabledFeatureGroups\": [",
                "-      # ]",
                "+    # For now, no featuregroups are specified. This means all",
                "+    # featuregroups will by default be loaded into Nuclide.",
                "+    \"nuclide\": {",
                "+    }"
            ],
            "changed_files": [
                "Nuclide.atomproject.cson"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "7d7ba141358c36f329f213ae0aa7b68cc8efff55",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520559880,
            "hunks": 11,
            "message": "Handle refused connections in NuclideSocket Summary: 1. `NuclideSocket` will now emit an `'intransient-error'` if it sees an ECONNREFUSED error. 2. `createBigDigClient` requires the caller to indicate whether intransient errors should be ignored. If *not ignored*, then this closes the nuclide socket if there is an intransient error. (Note: because `NuclideSocket` emits the event before checking `isDisconnected()`, closing the socket in the listener prevents a useless reconnection attempt, too -- *yay!*) 4. Checking for a heartbeat on initial connection is now done in `createBigDigClient`. (Nuclide: unless `createBgDigClient` is not being used.) Reviewed By: bolinfest Differential Revision: D7081993 fbshipit-source-id: 352164fd751d81a0d31b8cd8124b0bf136b11b4f",
            "diff": [
                "diff --git a/modules/big-dig-samples/command-line-client/cli.js b/modules/big-dig-samples/command-line-client/cli.js",
                "index 57dac98f3..7c7789fef 100644",
                "--- a/modules/big-dig-samples/command-line-client/cli.js",
                "+++ b/modules/big-dig-samples/command-line-client/cli.js",
                "@@ -76,3 +76,6 @@ function parseArgsAndRunMain(): Promise<void> {",
                "       ) {",
                "-        createBigDigClient(connectionConfig).then(",
                "+        createBigDigClient({",
                "+          ...connectionConfig,",
                "+          ignoreIntransientErrors: true,",
                "+        }).then(",
                "           connection => {",
                "diff --git a/modules/big-dig/src/client/BigDigClient.js b/modules/big-dig/src/client/BigDigClient.js",
                "index e337d845b..73e105f93 100644",
                "--- a/modules/big-dig/src/client/BigDigClient.js",
                "+++ b/modules/big-dig/src/client/BigDigClient.js",
                "@@ -67,8 +67,4 @@ export class BigDigClient {",
                "-  // XXX: do we even need this now that we're using",
                "-  // NuclideSocket and QueuedAckTransport?",
                "   onClose(callback: () => mixed): IDisposable {",
                "-    return {",
                "-      dispose: () => {},",
                "-    };",
                "+    return this._transport.onClose(callback);",
                "   }",
                "diff --git a/modules/big-dig/src/client/createBigDigClient.js b/modules/big-dig/src/client/createBigDigClient.js",
                "index c591b7a43..b65421eaa 100644",
                "--- a/modules/big-dig/src/client/createBigDigClient.js",
                "+++ b/modules/big-dig/src/client/createBigDigClient.js",
                "@@ -22,2 +22,3 @@ export type BigDigClientConfig = {",
                "   +clientKey?: Buffer | string,",
                "+  +ignoreIntransientErrors: boolean,",
                " };",
                "@@ -44,3 +45,15 @@ export default (async function createBigDigClient(",
                "-  return new BigDigClient(nuclideSocket, nuclideSocket.getHeartbeat());",
                "+  if (!config.ignoreIntransientErrors) {",
                "+    nuclideSocket.onIntransientError(error => nuclideSocket.close());",
                "+  }",
                "+",
                "+  const client = new BigDigClient(nuclideSocket, nuclideSocket.getHeartbeat());",
                "+  try {",
                "+    // Make sure we're able to make the initial connection",
                "+    await nuclideSocket.testConnection();",
                "+    return client;",
                "+  } catch (error) {",
                "+    client.close();",
                "+    throw error;",
                "+  }",
                " });",
                "diff --git a/modules/big-dig/src/socket/NuclideSocket.js b/modules/big-dig/src/socket/NuclideSocket.js",
                "index c8c986cf7..cf3be7f45 100644",
                "--- a/modules/big-dig/src/socket/NuclideSocket.js",
                "+++ b/modules/big-dig/src/socket/NuclideSocket.js",
                "@@ -151,2 +151,8 @@ export class NuclideSocket {",
                "       logger.warn(`WebSocket Error while connecting... ${error.message}`);",
                "+      if (error.code === 'ECONNREFUSED') {",
                "+        // Error: \"Connection Refused\"",
                "+        // The remote machine is reachable, but the server is not running.",
                "+        // Listeners may choose to close this socket.",
                "+        this._emitter.emit('intransient-error', error);",
                "+      }",
                "       if (this.isDisconnected()) {",
                "@@ -296,2 +302,3 @@ export class NuclideSocket {",
                "       transport.close();",
                "+      this._emitter.emit('close');",
                "     }",
                "@@ -326,2 +333,19 @@ export class NuclideSocket {",
                "   }",
                "+",
                "+  /**",
                "+   * Called if there is an intransient error. I.e. when we cannot recover from",
                "+   * an error by attempting to reconnect. It is up to the listener to decide",
                "+   * whether to close this socket.",
                "+   */",
                "+  onIntransientError(callback: (error: Error) => mixed): IDisposable {",
                "+    return this._emitter.on('intransient-error', callback);",
                "+  }",
                "+",
                "+  /**",
                "+   * Called just once if the state of this socket goes from opened to closed.",
                "+   * E.g. this socket is closed via its `close` method.",
                "+   */",
                "+  onClose(callback: () => mixed): IDisposable {",
                "+    return this._emitter.on('close', callback);",
                "+  }",
                " }",
                "diff --git a/pkg/nuclide-remote-connection/lib/ServerConnection.js b/pkg/nuclide-remote-connection/lib/ServerConnection.js",
                "index f847f27ff..3b7135905 100644",
                "--- a/pkg/nuclide-remote-connection/lib/ServerConnection.js",
                "+++ b/pkg/nuclide-remote-connection/lib/ServerConnection.js",
                "@@ -236,11 +236,10 @@ export class ServerConnection {",
                "-    // Test connection first. First time we get here we're checking to reestablish",
                "-    // connection using cached credentials. This will fail fast (faster than infoService)",
                "-    // when we don't have cached credentials yet.",
                "-    const transport = client.getTransport();",
                "-",
                "-    const heartbeatVersion = await transport.getHeartbeat().sendHeartBeat();",
                "-",
                "     // NOTE: BigDig's version may not actually match Nuclide's",
                "     if (this._config.version !== 2) {",
                "+      // Test connection first. First time we get here we're checking to reestablish",
                "+      // connection using cached credentials. This will fail fast (faster than infoService)",
                "+      // when we don't have cached credentials yet.",
                "+      const transport = client.getTransport();",
                "+",
                "+      const heartbeatVersion = await transport.getHeartbeat().sendHeartBeat();",
                "       if (clientVersion !== heartbeatVersion) {",
                "diff --git a/pkg/nuclide-remote-connection/lib/createBigDigRpcClient.js b/pkg/nuclide-remote-connection/lib/createBigDigRpcClient.js",
                "index 29d6e7e87..4d73e8ea9 100644",
                "--- a/pkg/nuclide-remote-connection/lib/createBigDigRpcClient.js",
                "+++ b/pkg/nuclide-remote-connection/lib/createBigDigRpcClient.js",
                "@@ -24,3 +24,6 @@ export default (async function createBigDigRpcClient(",
                " ): Promise<RpcConnection<TransportWithHeartbeat>> {",
                "-  const bigDigClient = await createBigDigClient(config);",
                "+  const bigDigClient = await createBigDigClient({",
                "+    ...config,",
                "+    ignoreIntransientErrors: true,",
                "+  });",
                "   const bigDigTransport: TransportWithHeartbeat = {"
            ],
            "changed_files": [
                "modules/big-dig-samples/command-line-client/cli.js",
                "modules/big-dig/src/client/BigDigClient.js",
                "modules/big-dig/src/client/createBigDigClient.js",
                "modules/big-dig/src/socket/NuclideSocket.js",
                "pkg/nuclide-remote-connection/lib/ServerConnection.js",
                "pkg/nuclide-remote-connection/lib/createBigDigRpcClient.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "a58df0b8652c8b0fbb74da7c5d474ebacb97205b",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520385781,
            "hunks": 1,
            "message": "Adding a C++ tool to merge header map files Summary: An initial version of a simple tool that takes a compile_db JSON file and compresses all header map files into just 1 file. Reviewed By: a20012251 Differential Revision: D7146117 fbshipit-source-id: 58dd32a8b13965ac4677185fef3565a9a238a6ce",
            "diff": [
                "diff --git a/pkg/nuclide-cquery-lsp-rpc/lib/hmap/MergeHeaderMaps.cpp b/pkg/nuclide-cquery-lsp-rpc/lib/hmap/MergeHeaderMaps.cpp",
                "new file mode 100644",
                "index 000000000..0e51d8a2f",
                "--- /dev/null",
                "+++ b/pkg/nuclide-cquery-lsp-rpc/lib/hmap/MergeHeaderMaps.cpp",
                "@@ -0,0 +1,212 @@",
                "+#include <array>",
                "+#include <fstream>",
                "+#include <iostream>",
                "+#include <string>",
                "+#include <unordered_map>",
                "+#include <vector>",
                "+",
                "+using namespace std;",
                "+",
                "+// For now this assumes everything is valid, it assumes it takes 3 command",
                "+// line parameters:",
                "+//   - Input JSON compilation DB file path.",
                "+//   - Output JSON compilation DB file path.",
                "+//   - Output new headers map file path.",
                "+// It assumes the input is valid JSON and looks for a line which is `\"-I\",` and",
                "+// the next line contains a string that ends with `.hmap\",`.",
                "+// These \".hmap\" files are the files which will be compressed, and will be",
                "+// replaced by a single header file which will be produced.",
                "+// Also it assumes this is installed: https://github.com/milend/hmap",
                "+",
                "+// Here's how it was tested:",
                "+//   g++ MergeHeaderMaps.cpp -o MergeHeaderMaps -O3 -std=c++14",
                "+//   ./MergeHeaderMaps <COMPILE_DB_PATH> <OUT_COMPILE_DP_PATH> \\",
                "+//     <OUT_HEADERS_MAP_FILE_PATH>",
                "+",
                "+// Trims leading spaces.",
                "+string TrimStart(const string& str) {",
                "+  int i = 0;",
                "+  while (i < str.size() && isspace(str[i])) {",
                "+    ++i;",
                "+  }",
                "+  return str.substr(i);",
                "+}",
                "+",
                "+// Trims trailing spaces.",
                "+string TrimEnd(const string& str) {",
                "+  int i = str.size();",
                "+  while (i > 0 && isspace(str[i - 1])) {",
                "+    --i;",
                "+  }",
                "+  return str.substr(0, i);",
                "+}",
                "+",
                "+// Checks if the given string ends with the given suffix.",
                "+bool EndsWith(const string& str, const string& suffix) {",
                "+  int i = str.length() - 1;",
                "+  int j = suffix.length() - 1;",
                "+  for (; i >= 0 && j >= 0; --i, --j) {",
                "+    if (str[i] != suffix[j]) {",
                "+      return false;",
                "+    }",
                "+  }",
                "+  return j == -1;",
                "+}",
                "+",
                "+// Executes the given command and returns its output as a string.",
                "+string Execute(const string& cmd) {",
                "+  array<char, 128> buffer;",
                "+  string result;",
                "+  shared_ptr<FILE> pipe(popen(cmd.c_str(), \"r\"), pclose);",
                "+  if (!pipe) {",
                "+    throw runtime_error(\"popen() failed.\");",
                "+  }",
                "+  while (!feof(pipe.get())) {",
                "+    if (fgets(buffer.data(), 128, pipe.get()) != nullptr) {",
                "+      result += buffer.data();",
                "+    }",
                "+  }",
                "+  return result;",
                "+}",
                "+",
                "+// Splits the given string using the given separator and puts the result strings",
                "+// in the given vector.",
                "+void Split(const string& str, const string& pat, vector<string>* result) {",
                "+  int last = 0;",
                "+  for (int i = 0; i < str.length(); ++i) {",
                "+    int j = 0;",
                "+    for (; i + j < str.length() && j < pat.length(); ++j) {",
                "+      if (str[i + j] != pat[j]) {",
                "+        break;",
                "+      }",
                "+    }",
                "+    if (j == pat.length()) {",
                "+      const string& part = str.substr(last, i - last);",
                "+      if (!part.empty()) {",
                "+        result->push_back(part);",
                "+      }",
                "+      last = i + j;",
                "+      i += j - 1;",
                "+    }",
                "+  }",
                "+  const string& part = str.substr(last);",
                "+  if (!part.empty()) {",
                "+    result->push_back(part);",
                "+  }",
                "+}",
                "+",
                "+// Reads and stores the headers in a single map file.",
                "+void ProcessSingleFile(",
                "+    const string& path,",
                "+    unordered_map<string, string>* all_headers) {",
                "+  const string& lines = Execute(\"hmap print \" + path);",
                "+  vector<string> headers;",
                "+  Split(lines, \"\\n\", &headers);",
                "+  for (const string& header : headers) {",
                "+    vector<string> key_value;",
                "+    Split(header, \" -> \", &key_value);",
                "+    if (key_value.size() != 2) {",
                "+      throw runtime_error(\"Invalid header entry.\");",
                "+    }",
                "+    const string& key = key_value[0];",
                "+    const string& value = key_value[1];",
                "+    auto old_value = all_headers->find(key);",
                "+    if (old_value != all_headers->end()) {",
                "+      if (old_value->second != value) {",
                "+        throw runtime_error(\"Multiple values for the same key.\");",
                "+      }",
                "+    } else {",
                "+      all_headers->insert({key, value});",
                "+    }",
                "+  }",
                "+}",
                "+",
                "+// Just replaces each / with \\/.",
                "+// Should be done better once this is exposed to other libs.",
                "+string ProperJSON(const string& str) {",
                "+  string result = \"\";",
                "+  int last = 0;",
                "+  for (int i = 0; i <= str.length(); ++i) {",
                "+    if (i == str.length() || str[i] == '/') {",
                "+      result += str.substr(last, i - last);",
                "+      if (i < str.length()) {",
                "+        result += \"\\\\/\";",
                "+      }",
                "+      last = i + 1;",
                "+      continue;",
                "+    }",
                "+  }",
                "+  return result;",
                "+}",
                "+",
                "+// Prints all headers in JSON format.",
                "+// Should be done better once this is exposed to other libs.",
                "+void PrintToJSON(",
                "+    const unordered_map<string, string>& all_headers,",
                "+    const string& out_path) {",
                "+  ofstream out_json_file(out_path.c_str());",
                "+  out_json_file << \"{\\n\";",
                "+  int cur = 0;",
                "+  for (const auto& header : all_headers) {",
                "+    out_json_file << \"  \\\"\" << ProperJSON(header.first) << \"\\\" : {\\n\";",
                "+    size_t last_ind = header.second.find_last_of(\"/\");",
                "+    if (last_ind == string::npos) {",
                "+      throw runtime_error(\"Invalid header value.\");",
                "+    }",
                "+    out_json_file << \"    \\\"prefix\\\" : \\\"\"",
                "+                  << ProperJSON(header.second.substr(0, last_ind + 1))",
                "+                  << \"\\\",\\n\";",
                "+    out_json_file << \"    \\\"suffix\\\" : \\\"\" << header.second.substr(last_ind + 1)",
                "+                  << \"\\\"\\n\";",
                "+    out_json_file << \"  }\";",
                "+    if (cur + 1 != all_headers.size()) {",
                "+      out_json_file << \",\";",
                "+    }",
                "+    out_json_file << \"\\n\";",
                "+    ++cur;",
                "+  }",
                "+  out_json_file << \"}\";",
                "+  out_json_file.close();",
                "+}",
                "+",
                "+int main(int argc, char** argv) {",
                "+  ifstream in_db_file(argv[1]);",
                "+  ofstream out_db_file(argv[2]);",
                "+  string line, path;",
                "+  bool first_include = true;",
                "+  unordered_map<string, string> all_headers;",
                "+  while (getline(in_db_file, line)) {",
                "+    line = TrimEnd(line);",
                "+    if (TrimStart(line) == \"\\\"-I\\\",\") {",
                "+      if (getline(in_db_file, path)) {",
                "+        path = TrimEnd(path);",
                "+        if (EndsWith(path, \".hmap\\\",\")) {",
                "+          if (first_include) {",
                "+            first_include = false;",
                "+            out_db_file << line << endl;",
                "+            out_db_file << \"    \\\"\" << argv[3] << \"\\\",\" << endl;",
                "+          }",
                "+          path = TrimStart(path);",
                "+          // Removing the \" at the beginning and the \", at the end.",
                "+          path = path.substr(1, path.length() - 3);",
                "+          ProcessSingleFile(path, &all_headers);",
                "+        } else {",
                "+          out_db_file << line << endl;",
                "+          out_db_file << path << endl;",
                "+        }",
                "+      } else {",
                "+        out_db_file << line << endl;",
                "+      }",
                "+    } else {",
                "+      out_db_file << line << endl;",
                "+    }",
                "+  }",
                "+  in_db_file.close();",
                "+  out_db_file.close();",
                "+",
                "+  const string& out_json_path = string(argv[3]) + \".json\";",
                "+  PrintToJSON(all_headers, out_json_path);",
                "+",
                "+  cout << Execute(\"hmap convert \" + out_json_path + \" \" + argv[3]);",
                "+  return 0;",
                "+}"
            ],
            "changed_files": [
                "pkg/nuclide-cquery-lsp-rpc/lib/hmap/MergeHeaderMaps.cpp"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "bd4d6fdb6c635971e58fb734638515c774af82c1",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521490405,
            "hunks": 1,
            "message": "Log stack traces for remote connection closes Reviewed By: aadisriram Differential Revision: D7325893 fbshipit-source-id: 5792e8ffcfdd35dedbe96d3c851a00248638ab8b",
            "diff": [
                "diff --git a/pkg/nuclide-remote-connection/lib/RemoteConnection.js b/pkg/nuclide-remote-connection/lib/RemoteConnection.js",
                "index 2c0ecda99..ca127227f 100644",
                "--- a/pkg/nuclide-remote-connection/lib/RemoteConnection.js",
                "+++ b/pkg/nuclide-remote-connection/lib/RemoteConnection.js",
                "@@ -383,3 +383,6 @@ export class RemoteConnection {",
                "   async close(shutdownIfLast: boolean): Promise<void> {",
                "-    logger.info('Received close command!', {shutdownIfLast});",
                "+    logger.info('Received close command!', {",
                "+      shutdownIfLast,",
                "+      stack: Error('stack').stack,",
                "+    });",
                "     this._subscriptions.dispose();"
            ],
            "changed_files": [
                "pkg/nuclide-remote-connection/lib/RemoteConnection.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "db22461a86c2d454712fc2c002d1473678f0f6d7",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521061702,
            "hunks": 2,
            "message": "Adjust comment Reviewed By: pelmers Differential Revision: D7277804 fbshipit-source-id: 5baee1079812f1df962e9bbd94cae5bea6a209f0",
            "diff": [
                "diff --git a/pkg/nuclide-terminal/lib/main.js b/pkg/nuclide-terminal/lib/main.js",
                "index bcd8544fb..e1cfefb49 100644",
                "--- a/pkg/nuclide-terminal/lib/main.js",
                "+++ b/pkg/nuclide-terminal/lib/main.js",
                "@@ -27,3 +27,2 @@ import {uriFromCwd, URI_PREFIX} from '../../commons-node/nuclide-terminal-uri';",
                " // $FlowFB",
                "-import type {CreatePasteFunction} from 'atom-ide-ui/pkg/atom-ide-console/lib/types';",
                " import type {RegisterProvider} from '../../fb-dash/lib/types';",
                "@@ -31,2 +30,3 @@ import type {CwdApi} from '../../nuclide-current-working-directory/lib/CwdApi';",
                " import type FileTreeContextMenu from '../../nuclide-file-tree/lib/FileTreeContextMenu';",
                "+import type {CreatePasteFunction} from 'atom-ide-ui/pkg/atom-ide-console/lib/types';"
            ],
            "changed_files": [
                "pkg/nuclide-terminal/lib/main.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "4414c91a876a781b68146ccc2e79a4d2fbae6ca0",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521165774,
            "hunks": 9,
            "message": "Improve task runner tracking Reviewed By: wbinnssmith Differential Revision: D7208217 fbshipit-source-id: 1a3b2f6c26f74aa087a85c9be207f6cd41e639cd",
            "diff": [
                "diff --git a/pkg/nuclide-task-runner/lib/main.js b/pkg/nuclide-task-runner/lib/main.js",
                "index d8d04ccc8..5b7ad7e92 100644",
                "--- a/pkg/nuclide-task-runner/lib/main.js",
                "+++ b/pkg/nuclide-task-runner/lib/main.js",
                "@@ -28,2 +28,3 @@ import {renderReactRoot} from 'nuclide-commons-ui/renderReactRoot';",
                " import syncAtomCommands from '../../commons-atom/sync-atom-commands';",
                "+import {track} from '../../nuclide-analytics';",
                " import createPackage from 'nuclide-commons-atom/createPackage';",
                "@@ -41,3 +42,2 @@ import * as Epics from './redux/Epics';",
                " import * as Reducers from './redux/Reducers';",
                "-import {trackingMiddleware} from './trackingMiddleware';",
                " import getToolbarProps from './ui/getToolbarProps';",
                "@@ -91,2 +91,11 @@ class Activation {",
                "+    const initialVisibility = getInitialVisibility(",
                "+      serializedState,",
                "+      preferencesForWorkingRoots,",
                "+    );",
                "+",
                "+    track('nuclide-task-runner:initialized', {",
                "+      visible: initialVisibility,",
                "+    });",
                "+",
                "     const epics = Object.keys(Epics)",
                "@@ -99,9 +108,4 @@ class Activation {",
                "       combineReducers(Reducers),",
                "-      {",
                "-        visible: getInitialVisibility(",
                "-          serializedState,",
                "-          preferencesForWorkingRoots,",
                "-        ),",
                "-      },",
                "-      applyMiddleware(createEpicMiddleware(rootEpic), trackingMiddleware),",
                "+      {visible: initialVisibility},",
                "+      applyMiddleware(createEpicMiddleware(rootEpic)),",
                "     );",
                "diff --git a/pkg/nuclide-task-runner/lib/redux/Epics.js b/pkg/nuclide-task-runner/lib/redux/Epics.js",
                "index 0a7e36846..f9b6f4418 100644",
                "--- a/pkg/nuclide-task-runner/lib/redux/Epics.js",
                "+++ b/pkg/nuclide-task-runner/lib/redux/Epics.js",
                "@@ -23,4 +23,6 @@ import type {ActionsObservable} from 'nuclide-commons/redux-observable';",
                "+import {compact} from 'nuclide-commons/observable';",
                " import {ProcessExitError} from 'nuclide-commons/process';",
                " import {observableFromTask} from '../../../commons-node/tasks';",
                "+import {trackEvent} from '../../../nuclide-analytics';",
                " import UniversalDisposable from 'nuclide-commons/UniversalDisposable';",
                "@@ -486,2 +488,76 @@ export function setToolbarVisibilityEpic(",
                "+export function trackEpic(",
                "+  actions: ActionsObservable<Action>,",
                "+  store: Store,",
                "+): Observable<empty> {",
                "+  const trackingEvents = actions",
                "+    .map(action => {",
                "+      switch (action.type) {",
                "+        case Actions.TASK_STARTED:",
                "+          return {",
                "+            type: 'nuclide-task-runner:task-started',",
                "+            data: getTaskTrackEventData(action, store.getState()),",
                "+          };",
                "+        case Actions.TASK_STOPPED:",
                "+          return {",
                "+            type: 'nuclide-task-runner:task-stopped',",
                "+            data: getTaskTrackEventData(action, store.getState()),",
                "+          };",
                "+        case Actions.TASK_COMPLETED:",
                "+          return {",
                "+            type: 'nuclide-task-runner:task-completed',",
                "+            data: getTaskTrackEventData(action, store.getState()),",
                "+          };",
                "+",
                "+        case Actions.TASK_ERRORED:",
                "+          return {",
                "+            type: 'nuclide-task-runner:task-errored',",
                "+            data: getTaskTrackEventData(action, store.getState()),",
                "+          };",
                "+        case Actions.SET_TOOLBAR_VISIBILITY:",
                "+          const visible = action.payload.visible;",
                "+          return visible",
                "+            ? {type: 'nuclide-task-runner:show'}",
                "+            : {type: 'nuclide-task-runner: hide'};",
                "+        default:",
                "+          return null;",
                "+      }",
                "+    })",
                "+    .let(compact);",
                "+",
                "+  return trackingEvents.do(trackEvent).ignoreElements();",
                "+}",
                "+",
                "+function getTaskTrackEventData(action: Action, state: AppState): Object {",
                "+  invariant(",
                "+    action.type === Actions.TASK_STARTED ||",
                "+      action.type === Actions.TASK_STOPPED ||",
                "+      action.type === Actions.TASK_COMPLETED ||",
                "+      action.type === Actions.TASK_ERRORED,",
                "+  );",
                "+  const {activeTaskRunner, projectRoot} = state;",
                "+  invariant(projectRoot != null);",
                "+  invariant(activeTaskRunner);",
                "+  const {taskStatus} = action.payload;",
                "+  const {task} = taskStatus;",
                "+  const taskTrackingData =",
                "+    typeof task.getTrackingData === 'function' ? task.getTrackingData() : {};",
                "+  const error =",
                "+    action.type === Actions.TASK_ERRORED ? action.payload.error : null;",
                "+  const duration =",
                "+    action.type === Actions.TASK_STARTED",
                "+      ? null",
                "+      : new Date().getTime() -",
                "+        parseInt(action.payload.taskStatus.startDate.getTime(), 10);",
                "+  return {",
                "+    ...taskTrackingData,",
                "+    projectRoot,",
                "+    taskRunnerId: activeTaskRunner.id,",
                "+    taskType: taskStatus.metadata.type,",
                "+    errorMessage: error != null ? error.message : null,",
                "+    stackTrace: error != null ? String(error.stack) : null,",
                "+    duration,",
                "+  };",
                "+}",
                "+",
                " export function printTaskCanceledEpic(",
                "diff --git a/pkg/nuclide-task-runner/lib/trackingMiddleware.js b/pkg/nuclide-task-runner/lib/trackingMiddleware.js",
                "deleted file mode 100644",
                "index 7ba44b8ca..000000000",
                "--- a/pkg/nuclide-task-runner/lib/trackingMiddleware.js",
                "+++ /dev/null",
                "@@ -1,82 +0,0 @@",
                "-/**",
                "- * Copyright (c) 2015-present, Facebook, Inc.",
                "- * All rights reserved.",
                "- *",
                "- * This source code is licensed under the license found in the LICENSE file in",
                "- * the root directory of this source tree.",
                "- *",
                "- * @flow",
                "- * @format",
                "- */",
                "-",
                "-import type {",
                "-  Action,",
                "-  Store,",
                "-  TaskStartedAction,",
                "-  TaskStoppedAction,",
                "-  TaskCompletedAction,",
                "-  TaskErroredAction,",
                "-} from './types';",
                "-",
                "-import * as Actions from './redux/Actions';",
                "-import {trackEvent} from '../../nuclide-analytics';",
                "-import invariant from 'assert';",
                "-",
                "-export function trackingMiddleware(",
                "-  store: Store,",
                "-): ((action: Action) => Store) => (action: Action) => Store {",
                "-  return next => action => {",
                "-    switch (action.type) {",
                "-      case Actions.TASK_STARTED:",
                "-        trackTaskAction('nuclide-task-runner:task-started', store, action);",
                "-        break;",
                "-      case Actions.TASK_STOPPED:",
                "-        trackTaskAction('nuclide-task-runner:task-stopped', store, action);",
                "-        break;",
                "-      case Actions.TASK_COMPLETED:",
                "-        trackTaskAction('nuclide-task-runner:task-completed', store, action);",
                "-        break;",
                "-      case Actions.TASK_ERRORED:",
                "-        trackTaskAction('nuclide-task-runner:task-errored', store, action);",
                "-        break;",
                "-    }",
                "-    return next(action);",
                "-  };",
                "-}",
                "-",
                "-function trackTaskAction(",
                "-  type: string,",
                "-  store: Store,",
                "-  action:",
                "-    | TaskStartedAction",
                "-    | TaskStoppedAction",
                "-    | TaskCompletedAction",
                "-    | TaskErroredAction,",
                "-): void {",
                "-  const {activeTaskRunner, projectRoot} = store.getState();",
                "-  invariant(projectRoot != null);",
                "-  invariant(activeTaskRunner);",
                "-  const {taskStatus} = action.payload;",
                "-  const {task} = taskStatus;",
                "-  const taskTrackingData =",
                "-    typeof task.getTrackingData === 'function' ? task.getTrackingData() : {};",
                "-  const error =",
                "-    action.type === Actions.TASK_ERRORED ? action.payload.error : null;",
                "-  const duration =",
                "-    action.type === Actions.TASK_STARTED",
                "-      ? null",
                "-      : new Date().getTime() -",
                "-        parseInt(action.payload.taskStatus.startDate.getTime(), 10);",
                "-  trackEvent({",
                "-    type,",
                "-    data: {",
                "-      ...taskTrackingData,",
                "-      projectRoot,",
                "-      taskRunnerId: activeTaskRunner.id,",
                "-      taskType: taskStatus.metadata.type,",
                "-      errorMessage: error != null ? error.message : null,",
                "-      stackTrace: error != null ? String(error.stack) : null,",
                "-      duration,",
                "-    },",
                "-  });",
                "-}",
                "diff --git a/pkg/nuclide-task-runner/spec/Epics-spec.js b/pkg/nuclide-task-runner/spec/Epics-spec.js",
                "index ca418d80e..666dd9015 100644",
                "--- a/pkg/nuclide-task-runner/spec/Epics-spec.js",
                "+++ b/pkg/nuclide-task-runner/spec/Epics-spec.js",
                "@@ -30,2 +30,3 @@ function getRootEpic() {",
                "   const epics = Object.keys(Epics)",
                "+    .filter(k => k !== 'trackEpic') // Omit the tracking epic",
                "     .map(k => Epics[k])"
            ],
            "changed_files": [
                "pkg/nuclide-task-runner/lib/main.js",
                "pkg/nuclide-task-runner/lib/redux/Epics.js",
                "pkg/nuclide-task-runner/lib/trackingMiddleware.js",
                "pkg/nuclide-task-runner/spec/Epics-spec.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "4a00f94add87043ad38b7082e9cf3824007afcd3",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521248396,
            "hunks": 5,
            "message": "Remove paths from nuclide atomproject Summary: Remove unnecessary path field from Nuclide atom projects. Reviewed By: matthewwithanm Differential Revision: D7306190 fbshipit-source-id: d89a4b602ce76f34882891ba874ccb8bcffdc42a",
            "diff": [
                "diff --git a/Nuclide.atomproject.cson b/Nuclide.atomproject.cson",
                "index d6435b3d7..610860a8a 100644",
                "--- a/Nuclide.atomproject.cson",
                "+++ b/Nuclide.atomproject.cson",
                "@@ -1,5 +1,5 @@",
                "-\"paths\":",
                "-    [",
                "-      \"fbsource/xplat/nuclide\"",
                "-    ]",
                "+# By default, paths map to the directory in which the atomproject lives.",
                "+",
                "+# \"paths\": [",
                "+# ]",
                "@@ -8,6 +8,6 @@",
                "     \"nuclide\":",
                "-",
                "       # For now, no featuregroups are specified. This means all",
                "       # featuregroups will by default be loaded into Nuclide.",
                "-      \"enabled-feature-groups\":",
                "-        []",
                "+",
                "+      # \"enabledFeatureGroups\": [",
                "+      # ]",
                "diff --git a/modules/nuclide-commons-atom/FeatureLoader.js b/modules/nuclide-commons-atom/FeatureLoader.js",
                "index aa7f5c150..ca1e53535 100644",
                "--- a/modules/nuclide-commons-atom/FeatureLoader.js",
                "+++ b/modules/nuclide-commons-atom/FeatureLoader.js",
                "@@ -292,3 +292,3 @@ export default class FeatureLoader {",
                "     let groupedPackages;",
                "-    if (featureGroupState != null && featureGroupState.length > 0) {",
                "+    if (featureGroupState != null) {",
                "       groupedPackages = setUnion(",
                "@@ -366,3 +366,3 @@ export default class FeatureLoader {",
                "   useKeyPathForFeatureGroup(): string {",
                "-    return `${this._pkgName}.enabled-feature-groups`;",
                "+    return `${this._pkgName}.enabledFeatureGroups`;",
                "   }"
            ],
            "changed_files": [
                "Nuclide.atomproject.cson",
                "modules/nuclide-commons-atom/FeatureLoader.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "00c85e7e8465455261594c336e419cdb645f571d",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1522090971,
            "hunks": 2,
            "message": "Cancel diagnostic requests on document close Summary: I noticed that sometimes I'd get diagnostics for files I closed. I'm guessing that the linting finished after the diagnostics closed - luckily this can easily be fixed by a `takeUntil` :) Reviewed By: wbinnssmith Differential Revision: D7386902 fbshipit-source-id: 521a7e76ba752375ddd3ad0a15a0f216fca6bf7c",
            "diff": [
                "diff --git a/pkg/nuclide-lsp-implementation-common/TextDocument.js b/pkg/nuclide-lsp-implementation-common/TextDocument.js",
                "index 6c4b75a1e..338223b69 100644",
                "--- a/pkg/nuclide-lsp-implementation-common/TextDocument.js",
                "+++ b/pkg/nuclide-lsp-implementation-common/TextDocument.js",
                "@@ -60,2 +60,3 @@ export default class TextDocument {",
                "   dispose() {",
                "+    this._emitter.emit('dispose');",
                "     this.assertNotDisposed();",
                "@@ -85,2 +86,6 @@ export default class TextDocument {",
                "+  onDidDispose(handler: () => mixed): IDisposable {",
                "+    return this._emitter.on('dispose', handler);",
                "+  }",
                "+",
                "   onDidStopChanging(handler: (document: TextDocument) => void): IDisposable {"
            ],
            "changed_files": [
                "pkg/nuclide-lsp-implementation-common/TextDocument.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "580320c0f4face083b05de6dc1c5fd6c686b2f16",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521583187,
            "hunks": 4,
            "message": "Don't perform extra stat when reading package.json files Summary: I don't see any reason why we're doing this `stat()` call. Also, I'm not exactly sure what we were expecting to happen here\u00e2\u0080\u00a6if the assertion failed, we would still try to read the file! Reviewed By: hansonw Differential Revision: D7333178 fbshipit-source-id: f661665855202235a408930b6d4c8427486c077a",
            "diff": [
                "diff --git a/lib/main.js b/lib/main.js",
                "index c2412533e..19b47dc77 100644",
                "--- a/lib/main.js",
                "+++ b/lib/main.js",
                "@@ -100,5 +100,5 @@ fs.readdirSync(FEATURES_DIR).forEach(item => {",
                "   const filename = path.join(featurePath, 'package.json');",
                "+  let src;",
                "   try {",
                "-    const stat = fs.statSync(filename);",
                "-    invariant(stat.isFile());",
                "+    src = fs.readFileSync(filename, 'utf8');",
                "   } catch (err) {",
                "@@ -107,4 +107,4 @@ fs.readdirSync(FEATURES_DIR).forEach(item => {",
                "     }",
                "+    throw err;",
                "   }",
                "-  const src = fs.readFileSync(filename, 'utf8');",
                "   // Optimization: Avoid JSON parsing if it can't reasonably be an Atom package"
            ],
            "changed_files": [
                "lib/main.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "ed9cca4598b47803ec11ddb97a424eb05408e94b",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520407954,
            "hunks": 25,
            "message": "Bump nuclide modules to 0.5.1-dev Summary: To avoid conflicts with installing third-party copies of these modules via `yarn`. Reviewed By: jgebhardt Differential Revision: D7178176 fbshipit-source-id: ca39a9c7c26075f135331945507b6236b334f257",
            "diff": [
                "diff --git a/lerna.json b/lerna.json",
                "index d28bb27ea..4b2442f84 100644",
                "--- a/lerna.json",
                "+++ b/lerna.json",
                "@@ -5,3 +5,3 @@",
                "   ],",
                "-  \"version\": \"0.5.0\",",
                "+  \"version\": \"0.5.1-dev\",",
                "   \"command\": {",
                "diff --git a/modules/atom-ide-ui/package.json b/modules/atom-ide-ui/package.json",
                "index 7de75e2b1..777cf650e 100644",
                "--- a/modules/atom-ide-ui/package.json",
                "+++ b/modules/atom-ide-ui/package.json",
                "@@ -2,3 +2,3 @@",
                "   \"name\": \"atom-ide-ui\",",
                "-  \"version\": \"0.5.0\",",
                "+  \"version\": \"0.5.1-dev\",",
                "   \"description\": \"A suite of language service UIs for Atom.\",",
                "@@ -25,5 +25,5 @@",
                "     \"marked\": \"0.3.9\",",
                "-    \"nuclide-commons\": \"0.5.1\",",
                "-    \"nuclide-commons-atom\": \"0.5.0\",",
                "-    \"nuclide-commons-ui\": \"0.5.0\",",
                "+    \"nuclide-commons\": \"0.5.1-dev\",",
                "+    \"nuclide-commons-atom\": \"0.5.1-dev\",",
                "+    \"nuclide-commons-ui\": \"0.5.1-dev\",",
                "     \"nullthrows\": \"1.0.0\",",
                "diff --git a/modules/big-dig-samples/package.json b/modules/big-dig-samples/package.json",
                "index 87d906890..6cd22b3b8 100644",
                "--- a/modules/big-dig-samples/package.json",
                "+++ b/modules/big-dig-samples/package.json",
                "@@ -4,3 +4,3 @@",
                "   \"author\": \"Nuclide : Remote\",",
                "-  \"version\": \"0.5.0\",",
                "+  \"version\": \"0.5.1-dev\",",
                "   \"private\": true,",
                "@@ -8,3 +8,3 @@",
                "     \"async-to-generator\": \"1.1.0\",",
                "-    \"big-dig\": \"0.5.0\",",
                "+    \"big-dig\": \"0.5.1-dev\",",
                "     \"log4js\": \"1.1.1\",",
                "diff --git a/modules/big-dig/package.json b/modules/big-dig/package.json",
                "index ee92bb2d3..610f10e73 100644",
                "--- a/modules/big-dig/package.json",
                "+++ b/modules/big-dig/package.json",
                "@@ -2,3 +2,3 @@",
                "   \"name\": \"big-dig\",",
                "-  \"version\": \"0.5.0\",",
                "+  \"version\": \"0.5.1-dev\",",
                "   \"description\": \"Secure, re-connectable channel for bidirectional communication with a remote host.\",",
                "@@ -16,3 +16,3 @@",
                "     \"log4js\": \"1.1.1\",",
                "-    \"nuclide-commons\": \"0.5.1\",",
                "+    \"nuclide-commons\": \"0.5.1-dev\",",
                "     \"request\": \"2.79.0\",",
                "diff --git a/modules/eslint-plugin-nuclide-internal/package.json b/modules/eslint-plugin-nuclide-internal/package.json",
                "index 36b4b2502..39ddf6088 100644",
                "--- a/modules/eslint-plugin-nuclide-internal/package.json",
                "+++ b/modules/eslint-plugin-nuclide-internal/package.json",
                "@@ -2,3 +2,3 @@",
                "   \"name\": \"eslint-plugin-nuclide-internal\",",
                "-  \"version\": \"0.5.0\",",
                "+  \"version\": \"0.5.1-dev\",",
                "   \"description\": \"A custom ESLint plugin for Atom/Nuclide code\",",
                "diff --git a/modules/nuclide-commons-atom/package.json b/modules/nuclide-commons-atom/package.json",
                "index b6d00d730..50fa709d7 100644",
                "--- a/modules/nuclide-commons-atom/package.json",
                "+++ b/modules/nuclide-commons-atom/package.json",
                "@@ -2,3 +2,3 @@",
                "   \"name\": \"nuclide-commons-atom\",",
                "-  \"version\": \"0.5.0\",",
                "+  \"version\": \"0.5.1-dev\",",
                "   \"description\": \"Common Nuclide node modules (for use with Atom only).\",",
                "@@ -18,3 +18,3 @@",
                "     \"log4js\": \"1.1.1\",",
                "-    \"nuclide-commons\": \"0.5.1\",",
                "+    \"nuclide-commons\": \"0.5.1-dev\",",
                "     \"redux-logger\": \"3.0.6\",",
                "diff --git a/modules/nuclide-commons-ui/package.json b/modules/nuclide-commons-ui/package.json",
                "index 4c0448d0a..fc6ee74c5 100644",
                "--- a/modules/nuclide-commons-ui/package.json",
                "+++ b/modules/nuclide-commons-ui/package.json",
                "@@ -2,3 +2,3 @@",
                "   \"name\": \"nuclide-commons-ui\",",
                "-  \"version\": \"0.5.0\",",
                "+  \"version\": \"0.5.1-dev\",",
                "   \"description\": \"Common Nuclide UI components.\",",
                "@@ -20,4 +20,4 @@",
                "     \"invariant\": \"2.2.2\",",
                "-    \"nuclide-commons\": \"0.5.1\",",
                "-    \"nuclide-commons-atom\": \"0.5.0\",",
                "+    \"nuclide-commons\": \"0.5.1-dev\",",
                "+    \"nuclide-commons-atom\": \"0.5.1-dev\",",
                "     \"nullthrows\": \"1.0.0\",",
                "diff --git a/modules/nuclide-commons/package.json b/modules/nuclide-commons/package.json",
                "index ee5b794c1..21eaf5fbe 100644",
                "--- a/modules/nuclide-commons/package.json",
                "+++ b/modules/nuclide-commons/package.json",
                "@@ -2,3 +2,3 @@",
                "   \"name\": \"nuclide-commons\",",
                "-  \"version\": \"0.5.1\",",
                "+  \"version\": \"0.5.1-dev\",",
                "   \"description\": \"Common Nuclide node modules.\",",
                "diff --git a/modules/nuclide-debugger-cli/package.json b/modules/nuclide-debugger-cli/package.json",
                "index 84f9262bc..61c9acb20 100644",
                "--- a/modules/nuclide-debugger-cli/package.json",
                "+++ b/modules/nuclide-debugger-cli/package.json",
                "@@ -2,3 +2,3 @@",
                "   \"name\": \"nuclide-debugger-cli\",",
                "-  \"version\": \"0.5.0\",",
                "+  \"version\": \"0.5.1-dev\",",
                "   \"description\": \"Nuclide command line debugger.\",",
                "@@ -18,5 +18,5 @@",
                "     \"log4js\": \"1.1.1\",",
                "-    \"nuclide-commons\": \"0.5.1\",",
                "-    \"nuclide-debugger-common\": \"0.5.1\",",
                "-    \"nuclide-debugger-vsps\": \"0.5.1\",",
                "+    \"nuclide-commons\": \"0.5.1-dev\",",
                "+    \"nuclide-debugger-common\": \"0.5.1-dev\",",
                "+    \"nuclide-debugger-vsps\": \"0.5.1-dev\",",
                "     \"nullthrows\": \"1.0.0\",",
                "diff --git a/modules/nuclide-debugger-common/package.json b/modules/nuclide-debugger-common/package.json",
                "index 71f61ea08..73848bcc0 100644",
                "--- a/modules/nuclide-debugger-common/package.json",
                "+++ b/modules/nuclide-debugger-common/package.json",
                "@@ -2,3 +2,3 @@",
                "   \"name\": \"nuclide-debugger-common\",",
                "-  \"version\": \"0.5.1\",",
                "+  \"version\": \"0.5.1-dev\",",
                "   \"description\": \"Provides common Node functionality for the Nuclide debugger\",",
                "@@ -19,4 +19,4 @@",
                "     \"log4js\": \"1.1.1\",",
                "-    \"nuclide-commons\": \"0.5.1\",",
                "-    \"nuclide-commons-ui\": \"0.5.0\",",
                "+    \"nuclide-commons\": \"0.5.1-dev\",",
                "+    \"nuclide-commons-ui\": \"0.5.1-dev\",",
                "     \"nullthrows\": \"1.0.0\",",
                "diff --git a/modules/nuclide-debugger-vsps/package.json b/modules/nuclide-debugger-vsps/package.json",
                "index bfd253f6c..bdb4c8723 100644",
                "--- a/modules/nuclide-debugger-vsps/package.json",
                "+++ b/modules/nuclide-debugger-vsps/package.json",
                "@@ -2,3 +2,3 @@",
                "   \"name\": \"nuclide-debugger-vsps\",",
                "-  \"version\": \"0.5.1\",",
                "+  \"version\": \"0.5.1-dev\",",
                "   \"description\": \"Third party VSP adapters used by the Nuclide debugger.\",",
                "@@ -15,4 +15,4 @@",
                "     \"async-to-generator\": \"1.1.0\",",
                "-    \"nuclide-commons\": \"0.5.1\",",
                "-    \"nuclide-debugger-common\": \"0.5.1\",",
                "+    \"nuclide-commons\": \"0.5.1-dev\",",
                "+    \"nuclide-debugger-common\": \"0.5.1-dev\",",
                "     \"nuclide-prebuilt-libs\": \"0.3.3\",",
                "@@ -29,3 +29,3 @@",
                "     \"log4js\": \"1.1.1\",",
                "-    \"nuclide-node-transpiler\": \"0.5.0\",",
                "+    \"nuclide-node-transpiler\": \"0.5.1-dev\",",
                "     \"simple-text-buffer\": \"9.2.11\"",
                "diff --git a/modules/nuclide-jasmine/package.json b/modules/nuclide-jasmine/package.json",
                "index d7753a9a3..b848aaebf 100644",
                "--- a/modules/nuclide-jasmine/package.json",
                "+++ b/modules/nuclide-jasmine/package.json",
                "@@ -2,3 +2,3 @@",
                "   \"name\": \"nuclide-jasmine\",",
                "-  \"version\": \"0.5.0\",",
                "+  \"version\": \"0.5.1-dev\",",
                "   \"description\": \"Atom-compatible Jasmine runner that runs outside of Atom\",",
                "@@ -14,4 +14,4 @@",
                "     \"jasmine-node\": \"1.14.5\",",
                "-    \"nuclide-commons\": \"0.5.1\",",
                "-    \"nuclide-node-transpiler\": \"0.5.0\",",
                "+    \"nuclide-commons\": \"0.5.1-dev\",",
                "+    \"nuclide-node-transpiler\": \"0.5.1-dev\",",
                "     \"temp\": \"0.8.3\"",
                "diff --git a/modules/nuclide-node-transpiler/package.json b/modules/nuclide-node-transpiler/package.json",
                "index 445a73fec..9af21274d 100644",
                "--- a/modules/nuclide-node-transpiler/package.json",
                "+++ b/modules/nuclide-node-transpiler/package.json",
                "@@ -2,3 +2,3 @@",
                "   \"name\": \"nuclide-node-transpiler\",",
                "-  \"version\": \"0.5.0\",",
                "+  \"version\": \"0.5.1-dev\",",
                "   \"description\": \"Transpiles JavaScript files\",",
                "diff --git a/modules/nuclide-watchman-helpers/package.json b/modules/nuclide-watchman-helpers/package.json",
                "index cb4503c57..b1d2acfea 100644",
                "--- a/modules/nuclide-watchman-helpers/package.json",
                "+++ b/modules/nuclide-watchman-helpers/package.json",
                "@@ -4,3 +4,3 @@",
                "   \"main\": \"./lib/main.js\",",
                "-  \"version\": \"0.5.0\",",
                "+  \"version\": \"0.5.1-dev\",",
                "   \"description\": \"Helper methods for interacting with fb-watchman\",",
                "@@ -22,3 +22,3 @@",
                "     \"log4js\": \"1.1.1\",",
                "-    \"nuclide-commons\": \"0.5.1\"",
                "+    \"nuclide-commons\": \"0.5.1-dev\"",
                "   }"
            ],
            "changed_files": [
                "lerna.json",
                "modules/atom-ide-ui/package.json",
                "modules/big-dig-samples/package.json",
                "modules/big-dig/package.json",
                "modules/eslint-plugin-nuclide-internal/package.json",
                "modules/nuclide-commons-atom/package.json",
                "modules/nuclide-commons-ui/package.json",
                "modules/nuclide-commons/package.json",
                "modules/nuclide-debugger-cli/package.json",
                "modules/nuclide-debugger-common/package.json",
                "modules/nuclide-debugger-vsps/package.json",
                "modules/nuclide-jasmine/package.json",
                "modules/nuclide-node-transpiler/package.json",
                "modules/nuclide-watchman-helpers/package.json"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "1fcb7fb4b7c3877271d4e1c49299877ff7df649f",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521220387,
            "hunks": 3,
            "message": "Update conflict state subscription in HgService Summary: update conflict state subscription Reviewed By: evangrayk Differential Revision: D7292568 fbshipit-source-id: 982dfa937a86eda53e4a788b0721da47e845121f",
            "diff": [
                "diff --git a/pkg/nuclide-hg-rpc/lib/HgService.js b/pkg/nuclide-hg-rpc/lib/HgService.js",
                "index 508e685a4..b90f2366d 100644",
                "--- a/pkg/nuclide-hg-rpc/lib/HgService.js",
                "+++ b/pkg/nuclide-hg-rpc/lib/HgService.js",
                "@@ -749,15 +749,8 @@ export class HgService {",
                "     const mergeDirectoryExists = await this._checkMergeDirectoryExists();",
                "-    if (this._isInConflict) {",
                "-      if (!mergeDirectoryExists) {",
                "-        this._isInConflict = false;",
                "-        this._hgConflictStateDidChangeObserver.next(false);",
                "-      }",
                "-      return;",
                "-    } else if (mergeDirectoryExists) {",
                "-      // Detect if the repository is in a conflict state.",
                "-      const mergeConflicts = await this._fetchMergeConflicts();",
                "-      if (mergeConflicts != null) {",
                "-        this._isInConflict = true;",
                "-        this._hgConflictStateDidChangeObserver.next(true);",
                "-      }",
                "+    if (mergeDirectoryExists) {",
                "+      this._isInConflict = true;",
                "+      this._hgConflictStateDidChangeObserver.next(true);",
                "+    } else {",
                "+      this._isInConflict = false;",
                "+      this._hgConflictStateDidChangeObserver.next(false);",
                "     }",
                "diff --git a/pkg/nuclide-hg-rpc/spec/HgService-spec.js b/pkg/nuclide-hg-rpc/spec/HgService-spec.js",
                "index b8c1adfcb..accf7aafb 100644",
                "--- a/pkg/nuclide-hg-rpc/spec/HgService-spec.js",
                "+++ b/pkg/nuclide-hg-rpc/spec/HgService-spec.js",
                "@@ -460,3 +460,4 @@ describe('HgService', () => {",
                "-    it('reports no conflicts even when merge directory exists, but no conflicts found', () => {",
                "+    // This is necessary especially when users need to run merge drivers to finish",
                "+    it('reports in conflict state even if no files have merge conflicts', () => {",
                "       mergeDirectoryExists = true;",
                "@@ -464,3 +465,3 @@ describe('HgService', () => {",
                "         await hgService._checkConflictChange();",
                "-        expect(hgService._isInConflict).toBeFalsy();",
                "+        expect(hgService._isInConflict).toBeTruthy();",
                "       });"
            ],
            "changed_files": [
                "pkg/nuclide-hg-rpc/lib/HgService.js",
                "pkg/nuclide-hg-rpc/spec/HgService-spec.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "00bdf7343eeabd1a4fe35da5d11388e676153d90",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1522080127,
            "hunks": 7,
            "message": "Delete big-dig-samples. Summary: I don't believe that these work at all, and they're just a maintenance burden at this point. We can consider re-creating them once the design of Big Dig settles down. Reviewed By: siegebell Differential Revision: D7397121 fbshipit-source-id: f91bfd619a218b70d28787644a40b55d94baba5e",
            "diff": [
                "diff --git a/modules/big-dig-samples/PATENTS b/modules/big-dig-samples/PATENTS",
                "deleted file mode 100644",
                "index 8afc35937..000000000",
                "--- a/modules/big-dig-samples/PATENTS",
                "+++ /dev/null",
                "@@ -1,33 +0,0 @@",
                "-Additional Grant of Patent Rights Version 2",
                "-",
                "-\"Software\" means the Big Dig Samples software distributed by Facebook, Inc.",
                "-",
                "-Facebook, Inc. (\"Facebook\") hereby grants to each recipient of the Software",
                "-(\"you\") a perpetual, worldwide, royalty-free, non-exclusive, irrevocable",
                "-(subject to the termination provision below) license under any Necessary",
                "-Claims, to make, have made, use, sell, offer to sell, import, and otherwise",
                "-transfer the Software. For avoidance of doubt, no license is granted under",
                "-Facebook's rights in any patent claims that are infringed by (i) modifications",
                "-to the Software made by you or any third party or (ii) the Software in",
                "-combination with any software or other technology.",
                "-",
                "-The license granted hereunder will terminate, automatically and without notice,",
                "-if you (or any of your subsidiaries, corporate affiliates or agents) initiate",
                "-directly or indirectly, or take a direct financial interest in, any Patent",
                "-Assertion: (i) against Facebook or any of its subsidiaries or corporate",
                "-affiliates, (ii) against any party if such Patent Assertion arises in whole or",
                "-in part from any software, technology, product or service of Facebook or any of",
                "-its subsidiaries or corporate affiliates, or (iii) against any party relating",
                "-to the Software. Notwithstanding the foregoing, if Facebook or any of its",
                "-subsidiaries or corporate affiliates files a lawsuit alleging patent",
                "-infringement against you in the first instance, and you respond by filing a",
                "-patent infringement counterclaim in that lawsuit against that party that is",
                "-unrelated to the Software, the license granted hereunder will not terminate",
                "-under section (i) of this paragraph due to such counterclaim.",
                "-",
                "-A \"Necessary Claim\" is a claim of a patent owned by Facebook that is",
                "-necessarily infringed by the Software standing alone.",
                "-",
                "-A \"Patent Assertion\" is any lawsuit or other action alleging direct, indirect,",
                "-or contributory infringement or inducement to infringe any patent, including a",
                "-cross-claim or counterclaim.",
                "diff --git a/modules/big-dig-samples/command-line-client/cli-entry.js b/modules/big-dig-samples/command-line-client/cli-entry.js",
                "deleted file mode 100644",
                "index 2b388261c..000000000",
                "--- a/modules/big-dig-samples/command-line-client/cli-entry.js",
                "+++ /dev/null",
                "@@ -1,22 +0,0 @@",
                "-/**",
                "- * Copyright (c) 2017-present, Facebook, Inc.",
                "- * All rights reserved.",
                "- *",
                "- * This source code is licensed under the BSD-style license found in the",
                "- * LICENSE file in the root directory of this source tree. An additional grant",
                "- * of patent rights can be found in the PATENTS file in the same directory.",
                "- *",
                "- * @noflow",
                "- */",
                "-'use strict';",
                "-",
                "-/* eslint",
                "-  comma-dangle: [1, always-multiline],",
                "-  prefer-object-spread/prefer-object-spread: 0,",
                "-  rulesdir/no-commonjs: 0,",
                "-  */",
                "-",
                "-// eslint-disable-next-line rulesdir/modules-dependencies",
                "-require('../../nuclide-node-transpiler');",
                "-",
                "-require('./cli');",
                "diff --git a/modules/big-dig-samples/command-line-client/cli.js b/modules/big-dig-samples/command-line-client/cli.js",
                "deleted file mode 100644",
                "index 23b0edb25..000000000",
                "--- a/modules/big-dig-samples/command-line-client/cli.js",
                "+++ /dev/null",
                "@@ -1,155 +0,0 @@",
                "-/**",
                "- * Copyright (c) 2017-present, Facebook, Inc.",
                "- * All rights reserved.",
                "- *",
                "- * This source code is licensed under the BSD-style license found in the",
                "- * LICENSE file in the root directory of this source tree. An additional grant",
                "- * of patent rights can be found in the PATENTS file in the same directory.",
                "- *",
                "- * @flow",
                "- * @format",
                "- */",
                "-",
                "-import type {BigDigClient} from 'big-dig/src/client';",
                "-import type {",
                "-  SshHandshakeErrorType,",
                "-  SshConnectionConfiguration,",
                "-  Prompt,",
                "-  RemoteConnectionConfiguration,",
                "-} from 'big-dig/src/client/SshHandshake';",
                "-",
                "-import invariant from 'assert';",
                "-import {getLogger} from 'log4js';",
                "-import yargs from 'yargs';",
                "-",
                "-import {question} from 'big-dig/src/common/readline';",
                "-import {getUsername} from 'big-dig/src/common/username';",
                "-import {createBigDigClient, SshHandshake} from 'big-dig/src/client';",
                "-import {setupDefaultLogging} from './logging';",
                "-",
                "-setupDefaultLogging('big-dig-server-cli.log');",
                "-",
                "-const DEFAULT_SSH_PORT = 22;",
                "-",
                "-function parseArgsAndRunMain(): Promise<void> {",
                "-  const {version} = require('../package.json');",
                "-  const {argv} = yargs",
                "-    .usage(`Big Dig sample command line client, version ${version} `)",
                "-    .help('h')",
                "-    .alias('h', 'help')",
                "-    .option('host', {",
                "-      describe: 'The host to connect to',",
                "-      type: 'string',",
                "-    })",
                "-    .option('private-key', {",
                "-      describe: 'Path to file that contains your private key',",
                "-      type: 'string',",
                "-    })",
                "-    .option('remote-server-command', {",
                "-      describe: 'Command to launch the server on the host',",
                "-      type: 'string',",
                "-    });",
                "-",
                "-  const {host, privateKey, remoteServerCommand} = argv;",
                "-",
                "-  return new Promise((resolve, reject) => {",
                "-    const sshHandshake = new SshHandshake({",
                "-      async onKeyboardInteractive(",
                "-        name,",
                "-        instructions,",
                "-        instructionsLang,",
                "-        prompts: Array<Prompt>,",
                "-      ): Promise<Array<string>> {",
                "-        invariant(prompts.length > 0);",
                "-        const {prompt, echo} = prompts[0];",
                "-        const answer = await question(prompt, !echo);",
                "-        return [answer];",
                "-      },",
                "-",
                "-      onWillConnect() {",
                "-        getLogger().info('Connecting...');",
                "-      },",
                "-",
                "-      onDidConnect(",
                "-        connectionConfig: RemoteConnectionConfiguration,",
                "-        config: SshConnectionConfiguration,",
                "-      ) {",
                "-        createBigDigClient({",
                "-          ...connectionConfig,",
                "-          ignoreIntransientErrors: true,",
                "-        }).then(",
                "-          connection => {",
                "-            getLogger().info(",
                "-              `Connected to server at: ${connection.getAddress()}`,",
                "-            );",
                "-            // TODO(mbolin): Do this in a better way that does not interleave",
                "-            // with logging output. Maybe a simpler send/response would be a better",
                "-            // first sample and there could be a more complex example that uses more",
                "-            // of the Observable API.",
                "-            connection",
                "-              .onMessage('raw-data')",
                "-              .subscribe(x => getLogger().info(x));",
                "-",
                "-            // Once the connection is established, the common pattern is to pass",
                "-            // the WebSocketTransport to the business logic that needs to",
                "-            // communicate with the server.",
                "-            const client = new QuestionClient(connection, resolve);",
                "-            client.run();",
                "-          },",
                "-          err => {",
                "-            getLogger().error('Error connecting to server', err);",
                "-            reject(err);",
                "-          },",
                "-        );",
                "-      },",
                "-",
                "-      onError(",
                "-        errorType: SshHandshakeErrorType,",
                "-        error: Error,",
                "-        config: SshConnectionConfiguration,",
                "-      ) {",
                "-        getLogger().error('CONNECTION FAILED');",
                "-",
                "-        reject(error);",
                "-      },",
                "-    });",
                "-    sshHandshake.connect({",
                "-      host,",
                "-      sshPort: DEFAULT_SSH_PORT,",
                "-      username: getUsername(),",
                "-      pathToPrivateKey: privateKey,",
                "-      authMethod: 'PRIVATE_KEY',",
                "-      remoteServer: {command: remoteServerCommand},",
                "-      remoteServerPorts: '0',",
                "-      remoteServerCustomParams: {},",
                "-      password: '', // Should probably be nullable because of the authMethod.",
                "-    });",
                "-  });",
                "-}",
                "-",
                "-class QuestionClient {",
                "-  connection_: BigDigClient;",
                "-  exit_: () => void;",
                "-",
                "-  constructor(connection: BigDigClient, exit: () => void) {",
                "-    this.connection_ = connection;",
                "-    this.exit_ = exit;",
                "-  }",
                "-",
                "-  async run() {",
                "-    const data = await question(",
                "-      'Input to send to server or \"exit\" to exit: ',",
                "-      /* hideInput */ false,",
                "-    );",
                "-",
                "-    if (data !== 'exit') {",
                "-      this.connection_.sendMessage('raw-data', data);",
                "-      await this.run();",
                "-    } else {",
                "-      this.exit_();",
                "-      this.connection_.dispose();",
                "-    }",
                "-  }",
                "-}",
                "-",
                "-parseArgsAndRunMain();",
                "diff --git a/modules/big-dig-samples/command-line-client/echo-server.js b/modules/big-dig-samples/command-line-client/echo-server.js",
                "deleted file mode 100644",
                "index 52dab5ea6..000000000",
                "--- a/modules/big-dig-samples/command-line-client/echo-server.js",
                "+++ /dev/null",
                "@@ -1,34 +0,0 @@",
                "-/**",
                "- * Copyright (c) 2017-present, Facebook, Inc.",
                "- * All rights reserved.",
                "- *",
                "- * This source code is licensed under the BSD-style license found in the",
                "- * LICENSE file in the root directory of this source tree. An additional grant",
                "- * of patent rights can be found in the PATENTS file in the same directory.",
                "- *",
                "- * @noflow",
                "- */",
                "-'use strict';",
                "-",
                "-/* eslint",
                "-  comma-dangle: [1, always-multiline],",
                "-  prefer-object-spread/prefer-object-spread: 0,",
                "-  rulesdir/no-commonjs: 0,",
                "-  */",
                "-",
                "-/**",
                "- * @param {LauncherParameters} launcherParams",
                "- * @return {Promise<void>}",
                "- */",
                "-module.exports = function(launcherParams) {",
                "-  const {webSocketServer} = launcherParams;",
                "-  webSocketServer.on('connection', socket => {",
                "-    socket.on('message', data => {",
                "-      socket.send(`Received ${data}`);",
                "-    });",
                "-  });",
                "-",
                "-  // The contract of the launcher's main() is that it must return a Promise",
                "-  // that resolves when the server is initialized.",
                "-  return Promise.resolve();",
                "-};",
                "diff --git a/modules/big-dig-samples/command-line-client/logging.js b/modules/big-dig-samples/command-line-client/logging.js",
                "deleted file mode 100644",
                "index cb7533fea..000000000",
                "--- a/modules/big-dig-samples/command-line-client/logging.js",
                "+++ /dev/null",
                "@@ -1,40 +0,0 @@",
                "-/**",
                "- * Copyright (c) 2017-present, Facebook, Inc.",
                "- * All rights reserved.",
                "- *",
                "- * This source code is licensed under the BSD-style license found in the",
                "- * LICENSE file in the root directory of this source tree. An additional grant",
                "- * of patent rights can be found in the PATENTS file in the same directory.",
                "- *",
                "- * @flow",
                "- * @format",
                "- */",
                "-",
                "-import log4js from 'log4js';",
                "-import os from 'os';",
                "-// eslint-disable-next-line rulesdir/prefer-nuclide-uri",
                "-import path from 'path';",
                "-",
                "-export function setupDefaultLogging(loggingFile: string) {",
                "-  log4js.configure({",
                "-    appenders: [",
                "-      {",
                "-        type: 'file',",
                "-        filename: path.join(os.tmpdir(), loggingFile),",
                "-      },",
                "-      {",
                "-        type: 'console',",
                "-      },",
                "-    ],",
                "-  });",
                "-",
                "-  process.on('unhandledRejection', error => {",
                "-    log4js.getLogger().fatal('Unhandled rejection:', error);",
                "-    log4js.shutdown(() => process.exit(1));",
                "-  });",
                "-",
                "-  process.on('uncaughtException', error => {",
                "-    log4js.getLogger().fatal('Uncaught exception:', error);",
                "-    log4js.shutdown(() => process.exit(1));",
                "-  });",
                "-}",
                "diff --git a/modules/big-dig-samples/command-line-client/server.js b/modules/big-dig-samples/command-line-client/server.js",
                "deleted file mode 100644",
                "index 7afc8bb51..000000000",
                "--- a/modules/big-dig-samples/command-line-client/server.js",
                "+++ /dev/null",
                "@@ -1,30 +0,0 @@",
                "-/**",
                "- * Copyright (c) 2017-present, Facebook, Inc.",
                "- * All rights reserved.",
                "- *",
                "- * This source code is licensed under the BSD-style license found in the",
                "- * LICENSE file in the root directory of this source tree. An additional grant",
                "- * of patent rights can be found in the PATENTS file in the same directory.",
                "- *",
                "- * @noflow",
                "- */",
                "-'use strict';",
                "-",
                "-/* eslint",
                "-  comma-dangle: [1, always-multiline],",
                "-  prefer-object-spread/prefer-object-spread: 0,",
                "-  rulesdir/no-commonjs: 0,",
                "-  */",
                "-",
                "-// Note that loading nuclide-node-transpiler is only necessary if we are",
                "-// developing against the dev version of big-dig.",
                "-// eslint-disable-next-line rulesdir/modules-dependencies",
                "-require('../../nuclide-node-transpiler');",
                "-",
                "-const {setupDefaultLogging} = require('./logging');",
                "-setupDefaultLogging('big-dig-samples-cli-server.log');",
                "-",
                "-const {parseArgsAndRunMain} = require('big-dig/src/server/cli');",
                "-",
                "-const absolutePathToServerMain = require.resolve('./echo-server');",
                "-parseArgsAndRunMain(absolutePathToServerMain);",
                "diff --git a/modules/big-dig-samples/package.json b/modules/big-dig-samples/package.json",
                "deleted file mode 100644",
                "index 6cd22b3b8..000000000",
                "--- a/modules/big-dig-samples/package.json",
                "+++ /dev/null",
                "@@ -1,13 +0,0 @@",
                "-{",
                "-  \"name\": \"big-dig-samples\",",
                "-  \"description\": \"Sample library that uses big-dig.\",",
                "-  \"author\": \"Nuclide : Remote\",",
                "-  \"version\": \"0.5.1-dev\",",
                "-  \"private\": true,",
                "-  \"dependencies\": {",
                "-    \"async-to-generator\": \"1.1.0\",",
                "-    \"big-dig\": \"0.5.1-dev\",",
                "-    \"log4js\": \"1.1.1\",",
                "-    \"yargs\": \"3.32.0\"",
                "-  }",
                "-}"
            ],
            "changed_files": [
                "modules/big-dig-samples/PATENTS",
                "modules/big-dig-samples/command-line-client/cli-entry.js",
                "modules/big-dig-samples/command-line-client/cli.js",
                "modules/big-dig-samples/command-line-client/echo-server.js",
                "modules/big-dig-samples/command-line-client/logging.js",
                "modules/big-dig-samples/command-line-client/server.js",
                "modules/big-dig-samples/package.json"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "76e8bdf43aa9929cebee8d0fceebc949700cb73a",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521573076,
            "hunks": 17,
            "message": "Update create-package to use Jest Reviewed By: matthewwithanm Differential Revision: D7264164 fbshipit-source-id: 95d1a046998c0a2b94005289d51159abe4072461",
            "diff": [
                "diff --git a/scripts/create-package.py b/scripts/create-package.py",
                "index 89f4a05f5..e5a8ef70a 100755",
                "--- a/scripts/create-package.py",
                "+++ b/scripts/create-package.py",
                "@@ -7,3 +7,2 @@",
                " # the root directory of this source tree.",
                "-",
                " '''",
                "@@ -20,2 +19,4 @@ This will create the directory and all of the necessary boilerplate:",
                "+from __future__ import print_function",
                "+",
                " import commands",
                "@@ -23,3 +24,2 @@ import os",
                " import os.path",
                "-import subprocess",
                " import sys",
                "@@ -28,2 +28,7 @@ from lib.package_manager import PACKAGES_PATH",
                "+try:",
                "+    input = raw_input",
                "+except NameError:",
                "+    pass",
                "+",
                " NPM = 'npm'",
                "@@ -34,5 +39,8 @@ DEFAULT_PREFIX = 'nuclide'",
                " PACKAGE_PREFIXES = [DEFAULT_PREFIX, 'fb', 'sample']",
                "-ATOM_TEST_RUNNER_FILE = os.path.join(PACKAGES_PATH, '../lib/test-runner-entry.js')",
                "-NUCLIDE_JASMINE_BIN = os.path.join(PACKAGES_PATH,",
                "-                                   'nuclide-jasmine/bin/jasmine-node-transpiled')",
                "+ATOM_TEST_RUNNER_FILE = os.path.join(",
                "+    PACKAGES_PATH, '../modules/nuclide-jest/atom-runner.js'",
                "+)",
                "+NUCLIDE_JEST_BIN = os.path.join(",
                "+    PACKAGES_PATH, '../modules/nuclide-jest/bin/jest-node'",
                "+)",
                "@@ -126,3 +134,3 @@ NODE_NPM_PACKAGE_JSON_TEMPLATE = \"\"\"\\",
                "   \"scripts\": {",
                "-    \"test\": \"node %s spec\"",
                "+    \"test\": \"node %s\"",
                "   }",
                "@@ -141,2 +149,3 @@ def get_package_name(user_input):",
                "+",
                " def create_package(package_name, package_type, test_runner):",
                "@@ -160,12 +169,13 @@ def create_package(package_name, package_type, test_runner):",
                "             if test_runner == NPM:",
                "-                f.write(NODE_NPM_PACKAGE_JSON_TEMPLATE % \\",
                "-                    (package_name, os.path.relpath(NUCLIDE_JASMINE_BIN, pkg_dir)))",
                "+                f.write(NODE_NPM_PACKAGE_JSON_TEMPLATE %",
                "+                        (package_name, os.path.relpath(NUCLIDE_JEST_BIN, pkg_dir)))",
                "             else:",
                "-                f.write(NODE_APM_PACKAGE_JSON_TEMPLATE % \\",
                "-                    (package_name, os.path.relpath(ATOM_TEST_RUNNER_FILE, pkg_dir)))",
                "+                f.write(NODE_APM_PACKAGE_JSON_TEMPLATE %",
                "+                        (package_name, os.path.relpath(ATOM_TEST_RUNNER_FILE, pkg_dir)))",
                "         else:",
                "-            f.write(ATOM_APM_PACKAGE_JSON_TEMPLATE % \\",
                "-                (package_name, os.path.relpath(ATOM_TEST_RUNNER_FILE, pkg_dir)))",
                "+            f.write(ATOM_APM_PACKAGE_JSON_TEMPLATE %",
                "+                    (package_name, os.path.relpath(ATOM_TEST_RUNNER_FILE, pkg_dir)))",
                "+",
                "+    print('New package created at: %s.' % pkg_dir)",
                "-    print 'New package created at: %s.' % pkg_dir",
                "@@ -173,8 +183,12 @@ def prompt_and_create_package(user_input):",
                "     if user_input is None:",
                "-        user_input = raw_input('Enter the name of your new package: ').strip()",
                "+        user_input = input('Enter the name of your new package: ').strip()",
                "     package_name = get_package_name(user_input)",
                "-    print 'Using %s as package name under pkg/%s.' % (package_name, package_name)",
                "-",
                "-    answer = raw_input('Can this package be used outside of Atom ' +",
                "-                       '(e.g., on a server)? [Y/n]: ').strip()",
                "+    print('Using %s as package name under pkg/%s.' % (",
                "+        package_name, package_name",
                "+    ))",
                "+",
                "+    answer = input(",
                "+        'Can this package be used outside of Atom ' +",
                "+        '(e.g., on a server)? [Y/n]: '",
                "+    ).strip()",
                "     if len(answer) > 0 and (answer[0] == 'N' or answer[0] == 'n'):",
                "@@ -185,7 +199,9 @@ def prompt_and_create_package(user_input):",
                "         package_type = NODE_PACKAGE",
                "-    print 'Using %s as test runner.' % test_runner",
                "+    print('Using %s as test runner.' % test_runner)",
                "     if package_type is None:",
                "-        answer = raw_input('Can this package be loaded synchronously via ' +",
                "-                           'require() in Atom? [Y/n]: ').strip()",
                "+        answer = input(",
                "+            'Can this package be loaded synchronously via ' +",
                "+            'require() in Atom? [Y/n]: '",
                "+        ).strip()",
                "         if len(answer) > 0 and (answer[0] == 'N' or answer[0] == 'n'):",
                "@@ -194,3 +210,3 @@ def prompt_and_create_package(user_input):",
                "             package_type = NODE_PACKAGE",
                "-    print 'Using %s as package type.' % package_type",
                "+    print('Using %s as package type.' % package_type)",
                "@@ -198,2 +214,3 @@ def prompt_and_create_package(user_input):",
                "+",
                " def main():",
                "@@ -203,2 +220,3 @@ def main():",
                "+",
                " if __name__ == '__main__':"
            ],
            "changed_files": [
                "scripts/create-package.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "f1fb8f5442af27d2c34a60359f2b4e2661ba74a4",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521158236,
            "hunks": 2,
            "message": "Make OperationProgress be any over rpc Reviewed By: aadisriram Differential Revision: D7294849 fbshipit-source-id: bceacd361a2a4453ca10f8e857ee931c0c6261df",
            "diff": [
                "diff --git a/pkg/nuclide-hg-rpc/lib/HgService.js b/pkg/nuclide-hg-rpc/lib/HgService.js",
                "index 55bb6abc0..508e685a4 100644",
                "--- a/pkg/nuclide-hg-rpc/lib/HgService.js",
                "+++ b/pkg/nuclide-hg-rpc/lib/HgService.js",
                "@@ -270,5 +270,2 @@ export type OperationProgress = {",
                "   topics: Array<string>,",
                "-  // TODO(T26794506): We expect that the state field will conform to OperationProgressState",
                "-  // but any unknown fields (due to changes in hg) will break us at the rpc layer.",
                "-  // So we type it as Object to save ourselves a crash.",
                "   state: Object,",
                "@@ -832,5 +829,8 @@ export class HgService {",
                "    */",
                "-  observeHgOperationProgressDidChange(): ConnectableObservable<",
                "-    OperationProgress,",
                "-  > {",
                "+",
                "+  observeHgOperationProgressDidChange(): ConnectableObservable<any> {",
                "+    // TODO(T26794506): We expect this to return OperationProgress,",
                "+    // but in some exceptional circumstances the object will fail marshalling",
                "+    // for an unknown reason. We don't care about the type on the server, so",
                "+    // we are sending `any` and letting the client do the type checking.",
                "     return this._hgOperationProgressDidChangeObserver"
            ],
            "changed_files": [
                "pkg/nuclide-hg-rpc/lib/HgService.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "011c80e2ad487e3b80bfc10b74580e33801a0362",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520531569,
            "hunks": 6,
            "message": "Use new coalesced error handling for legacyProcessMessages Reviewed By: tjfryan Differential Revision: D7161362 fbshipit-source-id: 7f89c275767ca258e360f1d685530851fca3b15e",
            "diff": [
                "diff --git a/pkg/nuclide-hg-rpc/lib/HgService.js b/pkg/nuclide-hg-rpc/lib/HgService.js",
                "index 606506f0f..9ef2dd21c 100644",
                "--- a/pkg/nuclide-hg-rpc/lib/HgService.js",
                "+++ b/pkg/nuclide-hg-rpc/lib/HgService.js",
                "@@ -51,3 +51,2 @@ import {",
                "   hgRunCommand,",
                "-  processExitCodeAndThrow,",
                " } from './hg-utils';",
                "@@ -1323,5 +1322,3 @@ export class HgService {",
                "     };",
                "-    return hgObserveExecution(args, executionOptions)",
                "-      .switchMap(processExitCodeAndThrow)",
                "-      .publish();",
                "+    return hgObserveExecution(args, executionOptions).publish();",
                "   }",
                "@@ -1595,5 +1592,3 @@ export class HgService {",
                "     };",
                "-    return this._hgObserveExecution(args, execOptions)",
                "-      .switchMap(processExitCodeAndThrow)",
                "-      .publish();",
                "+    return this._hgObserveExecution(args, execOptions).publish();",
                "   }",
                "@@ -1608,5 +1603,3 @@ export class HgService {",
                "     };",
                "-    return this._hgObserveExecution(args, execOptions)",
                "-      .switchMap(processExitCodeAndThrow)",
                "-      .publish();",
                "+    return this._hgObserveExecution(args, execOptions).publish();",
                "   }",
                "@@ -1627,5 +1620,3 @@ export class HgService {",
                "     };",
                "-    return this._hgObserveExecution(args, execOptions)",
                "-      .switchMap(processExitCodeAndThrow)",
                "-      .publish();",
                "+    return this._hgObserveExecution(args, execOptions).publish();",
                "   }",
                "diff --git a/pkg/nuclide-hg-rpc/lib/hg-utils.js b/pkg/nuclide-hg-rpc/lib/hg-utils.js",
                "index 72ce54ca6..ac81516a8 100644",
                "--- a/pkg/nuclide-hg-rpc/lib/hg-utils.js",
                "+++ b/pkg/nuclide-hg-rpc/lib/hg-utils.js",
                "@@ -243,13 +243 @@ function getAtomRpcScriptPath(): string {",
                " }",
                "-",
                "-export function processExitCodeAndThrow(",
                "-  processMessage: LegacyProcessMessage,",
                "-): Observable<LegacyProcessMessage> {",
                "-  // TODO(T17463635)",
                "-  if (processMessage.kind === 'exit' && processMessage.exitCode !== 0) {",
                "-    return Observable.throw(",
                "-      new Error(`HG failed with exit code: ${String(processMessage.exitCode)}`),",
                "-    );",
                "-  }",
                "-  return Observable.of(processMessage);",
                "-}"
            ],
            "changed_files": [
                "pkg/nuclide-hg-rpc/lib/HgService.js",
                "pkg/nuclide-hg-rpc/lib/hg-utils.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "6343adce77f0ef1567a4d48cc14fe2ca5ec4e77a",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521837074,
            "hunks": 3,
            "message": "Make nuclide-jest dependencies `devDependencies` Summary: These are getting included in production mode :P Reviewed By: wbinnssmith Differential Revision: D7383949 fbshipit-source-id: 5aa0133a789e483186f246f755a687a3baff53cf",
            "diff": [
                "diff --git a/modules/nuclide-jest/.eslintrc b/modules/nuclide-jest/.eslintrc",
                "new file mode 100644",
                "index 000000000..29ad3c73e",
                "--- /dev/null",
                "+++ b/modules/nuclide-jest/.eslintrc",
                "@@ -0,0 +1,5 @@",
                "+{",
                "+  \"rules\": {",
                "+    \"rulesdir/modules-dependencies\": [1, {\"allowDevDependencies\": true}]",
                "+  }",
                "+}",
                "diff --git a/modules/nuclide-jest/bin/jest-node.js b/modules/nuclide-jest/bin/jest-node.js",
                "index ee4516c84..3042c8292 100644",
                "--- a/modules/nuclide-jest/bin/jest-node.js",
                "+++ b/modules/nuclide-jest/bin/jest-node.js",
                "@@ -23,2 +23,3 @@ const jestCLI = require('jest-cli');",
                " const config = require('../jest.config.js');",
                "+// eslint-disable-next-line rulesdir/no-unresolved",
                " const yargs = require('yargs');",
                "diff --git a/modules/nuclide-jest/package.json b/modules/nuclide-jest/package.json",
                "index 75b306cfc..631641cb1 100644",
                "--- a/modules/nuclide-jest/package.json",
                "+++ b/modules/nuclide-jest/package.json",
                "@@ -9,3 +9,3 @@",
                "   \"private\": true,",
                "-  \"dependencies\": {",
                "+  \"devDependencies\": {",
                "     \"async-to-generator\": \"1.1.0\","
            ],
            "changed_files": [
                "modules/nuclide-jest/.eslintrc",
                "modules/nuclide-jest/bin/jest-node.js",
                "modules/nuclide-jest/package.json"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "547961c4037082a2913cbe956aedf9949e653d2e",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521532715,
            "hunks": 1,
            "message": "Create RPC method for reading .bigdig.toml and use it to launch LSPs. Reviewed By: siegebell Differential Revision: D7191618 fbshipit-source-id: e486138ab137f423ed8058706145e2c9785f2bc5",
            "diff": [
                "diff --git a/yarn.lock b/yarn.lock",
                "index 0b7d37445..b180a4793 100644",
                "--- a/yarn.lock",
                "+++ b/yarn.lock",
                "@@ -6281,2 +6281,6 @@ to-regex@^3.0.1:",
                "+toml@2.3.3:",
                "+  version \"2.3.3\"",
                "+  resolved \"https://registry.yarnpkg.com/toml/-/toml-2.3.3.tgz#8d683d729577cb286231dfc7a8affe58d31728fb\"",
                "+",
                " touch@1.0.0:"
            ],
            "changed_files": [
                "yarn.lock"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "64bf66ea9d19e9cb2e159fb0075a6ca0fd1fd748",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521075058,
            "hunks": 1,
            "message": "Add nuclide atomproject Summary: Add a Nuclide project file to JSON. This is landing before the rest of project configs is out because I would like to have a *.atomproject.{cson, json} file in fb to test my atomproject reading job (aka: php script scanning for atomproject files). I added paths in (even though technically they are redundant) because in general I think it is better to be explicit about which paths a project launches. @[100002839212206:matthewwithanm] I included all of the feature groups by default, since if a feature starts erroring, we should probably know about it right away. If anyone feels strongly otherwise, please let me know! Reviewed By: hansonw Differential Revision: D7274575 fbshipit-source-id: 8a9b95f12c18c1dec7c02183cc09877034145310",
            "diff": [
                "diff --git a/Nuclide.atomproject.cson b/Nuclide.atomproject.cson",
                "new file mode 100644",
                "index 000000000..d6435b3d7",
                "--- /dev/null",
                "+++ b/Nuclide.atomproject.cson",
                "@@ -0,0 +1,13 @@",
                "+\"paths\":",
                "+    [",
                "+      \"fbsource/xplat/nuclide\"",
                "+    ]",
                "+",
                "+\"config\":",
                "+  \"*\":",
                "+    \"nuclide\":",
                "+",
                "+      # For now, no featuregroups are specified. This means all",
                "+      # featuregroups will by default be loaded into Nuclide.",
                "+      \"enabled-feature-groups\":",
                "+        []"
            ],
            "changed_files": [
                "Nuclide.atomproject.cson"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "123660774b74c300077abcb22afd1cee9ee6897e",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521578676,
            "hunks": 29,
            "message": "Replace port:number option with ports:string option. Reviewed By: siegebell Differential Revision: D7192073 fbshipit-source-id: 56cc3518beff2e854b2c19e212c4e6a6c94af520",
            "diff": [
                "diff --git a/modules/big-dig-samples/command-line-client/cli.js b/modules/big-dig-samples/command-line-client/cli.js",
                "index 7c7789fef..23b0edb25 100644",
                "--- a/modules/big-dig-samples/command-line-client/cli.js",
                "+++ b/modules/big-dig-samples/command-line-client/cli.js",
                "@@ -122,2 +122,3 @@ function parseArgsAndRunMain(): Promise<void> {",
                "       remoteServer: {command: remoteServerCommand},",
                "+      remoteServerPorts: '0',",
                "       remoteServerCustomParams: {},",
                "diff --git a/modules/big-dig/spec/common/ports-spec.js b/modules/big-dig/spec/common/ports-spec.js",
                "new file mode 100644",
                "index 000000000..abfe1802e",
                "--- /dev/null",
                "+++ b/modules/big-dig/spec/common/ports-spec.js",
                "@@ -0,0 +1,101 @@",
                "+/**",
                "+ * Copyright (c) 2017-present, Facebook, Inc.",
                "+ * All rights reserved.",
                "+ *",
                "+ * This source code is licensed under the BSD-style license found in the",
                "+ * LICENSE file in the root directory of this source tree. An additional grant",
                "+ * of patent rights can be found in the PATENTS file in the same directory.",
                "+ *",
                "+ * @flow",
                "+ * @format",
                "+ */",
                "+",
                "+import {parsePorts} from '../../src/common/ports';",
                "+",
                "+describe('parsePorts', () => {",
                "+  it('empty ports', () => {",
                "+    test('', []);",
                "+    test(',', []);",
                "+  });",
                "+",
                "+  it('individual ports', () => {",
                "+    test('0', [0]);",
                "+    test('42', [42]);",
                "+    test('42,43', [42, 43]);",
                "+    test('   42   ,   43  ', [42, 43]);",
                "+  });",
                "+",
                "+  it('positive ranges', () => {",
                "+    test('0-1', [0, 1]);",
                "+    test('0-4', [0, 1, 2, 3, 4]);",
                "+    test('22-25', [22, 23, 24, 25]);",
                "+    test('  18-25 ,  9090-9093,  ', [",
                "+      18,",
                "+      19,",
                "+      20,",
                "+      21,",
                "+      22,",
                "+      23,",
                "+      24,",
                "+      25,",
                "+      9090,",
                "+      9091,",
                "+      9092,",
                "+      9093,",
                "+    ]);",
                "+    test('3141592653589793238462643', [3141592653589793238462643]);",
                "+  });",
                "+",
                "+  it('zero-length ranges', () => {",
                "+    test('0-0', [0]);",
                "+    test('9090-9090', [9090]);",
                "+  });",
                "+",
                "+  it('negative ranges', () => {",
                "+    test('5-0', [5, 4, 3, 2, 1, 0]);",
                "+    test('5-4', [5, 4]);",
                "+    test('9093-9090', [9093, 9092, 9091, 9090]);",
                "+  });",
                "+",
                "+  it('mix of individuals and ranges', () => {",
                "+    test('0, 8080-8083, 42, 10000-10001', [",
                "+      0,",
                "+      8080,",
                "+      8081,",
                "+      8082,",
                "+      8083,",
                "+      42,",
                "+      10000,",
                "+      10001,",
                "+    ]);",
                "+  });",
                "+",
                "+  it('invalid patterns', () => {",
                "+    testError('-42', 'Could not parse ports from: \"-42\".');",
                "+    testError('0--4', 'Could not parse ports from: \"0--4\".');",
                "+    testError('abcd', 'Could not parse ports from: \"abcd\".');",
                "+    testError('NaN', 'Could not parse ports from: \"NaN\".');",
                "+    testError('4.2', 'Could not parse ports from: \"4.2\".');",
                "+    testError('Infinity', 'Could not parse ports from: \"Infinity\".');",
                "+    testError('-Infinity', 'Could not parse ports from: \"-Infinity\".');",
                "+    const shouldParseAsInfinity =",
                "+      '314159265358979323846264338327950288419716939937510582097494459' +",
                "+      '230781640628620899862803482534211706798214808651328230664709384' +",
                "+      '460955058223172535940812848111745028410270193852110555964462294' +",
                "+      '895493038196442881097566593344612847564823378678316527120190914' +",
                "+      '5648566923460348610454326648213393607260249141273724587006';",
                "+    testError(",
                "+      shouldParseAsInfinity,",
                "+      `${shouldParseAsInfinity} parses to an extrema: Infinity.`,",
                "+    );",
                "+  });",
                "+});",
                "+",
                "+function test(descriptor: string, ports: Array<number>) {",
                "+  const iterable = parsePorts(descriptor);",
                "+  expect(Array.from(iterable)).toEqual(ports);",
                "+}",
                "+",
                "+function testError(descriptor: string, message: string) {",
                "+  expect(() => parsePorts(descriptor)).toThrow(message);",
                "+}",
                "diff --git a/modules/big-dig/src/client/SshHandshake.js b/modules/big-dig/src/client/SshHandshake.js",
                "index 45523c1bb..9dc22c950 100644",
                "--- a/modules/big-dig/src/client/SshHandshake.js",
                "+++ b/modules/big-dig/src/client/SshHandshake.js",
                "@@ -63,3 +63,3 @@ export type SshConnectionConfiguration = {",
                "   remoteServer: PackageParams, // Command to use to start server",
                "-  remoteServerPort?: number, // Port remote server should run on (defaults to 0)",
                "+  remoteServerPorts: string, // Range of ports remote server should run on",
                "   remoteServerCustomParams?: Object, // JSON-serializable params.",
                "@@ -811,4 +811,4 @@ export class SshHandshake {",
                "       serverParams: this._config.remoteServerCustomParams,",
                "-      port: this._config.remoteServerPort,",
                "       exclusive: this._config.exclusive,",
                "+      ports: this._config.remoteServerPorts,",
                "     };",
                "diff --git a/modules/big-dig/src/common/ports.js b/modules/big-dig/src/common/ports.js",
                "new file mode 100644",
                "index 000000000..08b4edf7e",
                "--- /dev/null",
                "+++ b/modules/big-dig/src/common/ports.js",
                "@@ -0,0 +1,91 @@",
                "+/**",
                "+ * Copyright (c) 2017-present, Facebook, Inc.",
                "+ * All rights reserved.",
                "+ *",
                "+ * This source code is licensed under the BSD-style license found in the",
                "+ * LICENSE file in the root directory of this source tree. An additional grant",
                "+ * of patent rights can be found in the PATENTS file in the same directory.",
                "+ *",
                "+ * @flow",
                "+ * @format",
                "+ */",
                "+",
                "+/**",
                "+ * Represents a range of ports by an initial integer paired with the number of",
                "+ * elements in the range. If `length` is negative, then the range counts \"down\"",
                "+ * from `start` instead of counting \"up\". `length` should never be zero.",
                "+ */",
                "+type PortRange = {",
                "+  start: number,",
                "+  length: number,",
                "+};",
                "+",
                "+export function parsePorts(portsDescriptor: string): Ports {",
                "+  const ranges = [];",
                "+  const descriptors = portsDescriptor",
                "+    .split(',')",
                "+    .map(x => x.trim())",
                "+    .filter(x => x !== '');",
                "+  for (const descriptor of descriptors) {",
                "+    let range = null;",
                "+    if (/^\\d+$/.test(descriptor)) {",
                "+      range = {",
                "+        start: parseNonNegativeIntOrThrow(descriptor),",
                "+        length: 1,",
                "+      };",
                "+    } else {",
                "+      const match = descriptor.match(/^(\\d+)-(\\d+)$/);",
                "+      if (match != null) {",
                "+        const start = parseNonNegativeIntOrThrow(match[1]);",
                "+        const end = parseNonNegativeIntOrThrow(match[2]);",
                "+        const delta = end - start;",
                "+        range = {",
                "+          start,",
                "+          length: delta + (delta < 0 ? -1 : 1),",
                "+        };",
                "+      } else {",
                "+        throw Error(`Could not parse ports from: \"${descriptor}\".`);",
                "+      }",
                "+    }",
                "+    ranges.push(range);",
                "+  }",
                "+",
                "+  return new Ports(ranges);",
                "+}",
                "+",
                "+/**",
                "+ * Class that is an iterable for port numbers.",
                "+ */",
                "+// $FlowIssue https://github.com/facebook/flow/issues/2286",
                "+class Ports implements Iterable<number> {",
                "+  _ranges: Array<PortRange>;",
                "+",
                "+  constructor(ranges: Array<PortRange>) {",
                "+    this._ranges = ranges;",
                "+  }",
                "+",
                "+  // $FlowIssue https://github.com/facebook/flow/issues/2286",
                "+  *[Symbol.iterator]() {",
                "+    for (const {start, length} of this._ranges) {",
                "+      const delta = length < 0 ? -1 : 1;",
                "+      let offset = 0;",
                "+      while (offset !== length) {",
                "+        yield start + offset;",
                "+        offset += delta;",
                "+      }",
                "+    }",
                "+  }",
                "+}",
                "+",
                "+function parseNonNegativeIntOrThrow(str: string): number {",
                "+  const value = parseInt(str, 10);",
                "+  if (isNaN(value)) {",
                "+    throw Error(`\"${str}\" could not be parsed as a valid integer.`);",
                "+  } else if (value === Infinity || value === -Infinity) {",
                "+    throw Error(`${str} parses to an extrema: ${value}.`);",
                "+  } else if (value < 0) {",
                "+    throw Error(`${str} parses to a negative number: ${value}.`);",
                "+  } else {",
                "+    return value;",
                "+  }",
                "+}",
                "diff --git a/modules/big-dig/src/server/NuclideServer.js b/modules/big-dig/src/server/NuclideServer.js",
                "index d4ffdbe54..91a7c9fc0 100644",
                "--- a/modules/big-dig/src/server/NuclideServer.js",
                "+++ b/modules/big-dig/src/server/NuclideServer.js",
                "@@ -15,2 +15,3 @@ import WS from 'ws';",
                " import https from 'https';",
                "+import {parsePorts} from '../common/ports';",
                "@@ -37,3 +38,3 @@ export type NuclideServerOptions = {",
                "   },",
                "-  port: number,",
                "+  ports: string,",
                "   absolutePathToServerMain: string,",
                "@@ -43,6 +44,2 @@ export type NuclideServerOptions = {",
                "-// When a port of 0 is specified, it still makes sense to prefer certain ports over others.",
                "-// TODO(hansonw): Make this configurable.",
                "-const PREFERRED_PORTS = [9093, 9092, 9091, 9090];",
                "-",
                " /**",
                "@@ -63,10 +60,4 @@ export async function launchServer(",
                "-  const ports = [];",
                "-  if (options.port === 0) {",
                "-    ports.push(...PREFERRED_PORTS);",
                "-  }",
                "-  ports.push(options.port);",
                "-",
                "   let found = false;",
                "-  for (const port of ports) {",
                "+  for (const port of parsePorts(options.ports)) {",
                "     // eslint-disable-next-line no-await-in-loop",
                "@@ -78,3 +69,3 @@ export async function launchServer(",
                "   if (!found) {",
                "-    throw Error(`Port ${options.port} is already in use`);",
                "+    throw Error(`All ports in range \"${options.ports}\" are already in use`);",
                "   }",
                "diff --git a/modules/big-dig/src/server/cli.js b/modules/big-dig/src/server/cli.js",
                "index 6912301ea..a0c7b575b 100644",
                "--- a/modules/big-dig/src/server/cli.js",
                "+++ b/modules/big-dig/src/server/cli.js",
                "@@ -17,2 +17,3 @@ import {getUsername} from '../common/username';",
                " import {generateCertificatesAndStartServer} from './main';",
                "+import {parsePorts} from '../common/ports';",
                "@@ -30,3 +31,3 @@ log4js.configure({",
                "-const DEFAULT_PORT = 0;",
                "+const DEFAULT_PORTS = '0';",
                " const DEFAULT_TIMEOUT = 60000;",
                "@@ -39,3 +40,3 @@ export type BigDigCliParams = {|",
                "   serverParams: mixed,",
                "-  port: ?number,",
                "+  ports: ?string,",
                "   exclusive: ?string,",
                "@@ -55,3 +56,3 @@ export async function parseArgsAndRunMain(absolutePathToServerMain: string) {",
                "   const {cname, expiration, exclusive, jsonOutputFile} = params;",
                "-  let {port, timeout} = params;",
                "+  let {ports, timeout} = params;",
                "   if (typeof cname !== 'string') {",
                "@@ -64,15 +65,10 @@ export async function parseArgsAndRunMain(absolutePathToServerMain: string) {",
                "   // port arg validation",
                "-  if (port == null) {",
                "-    port = DEFAULT_PORT;",
                "+  if (ports == null) {",
                "+    ports = DEFAULT_PORTS;",
                "   }",
                "-  if (typeof port !== 'number') {",
                "-    throw Error(`port must be specified as number but was: '${port}'`);",
                "-  }",
                "-  // eslint-disable-next-line no-bitwise",
                "-  if ((port | 0) !== port) {",
                "-    throw Error(`port must be an integer but was: '${port}'`);",
                "-  }",
                "-  if (port < 0) {",
                "-    throw Error(`port must be >=0 but was ${port}`);",
                "+  if (typeof ports !== 'string') {",
                "+    throw Error(`ports must be specified as string but was: '${ports}'`);",
                "   }",
                "+  // This will throw an exception if the ports string is invalid.",
                "+  parsePorts(ports);",
                "@@ -115,3 +111,3 @@ export async function parseArgsAndRunMain(absolutePathToServerMain: string) {",
                "     openSSLConfigPath,",
                "-    port,",
                "+    ports,",
                "     timeout,",
                "diff --git a/modules/big-dig/src/server/launchServer.js b/modules/big-dig/src/server/launchServer.js",
                "index f1680f552..dc784efb2 100644",
                "--- a/modules/big-dig/src/server/launchServer.js",
                "+++ b/modules/big-dig/src/server/launchServer.js",
                "@@ -25,3 +25,3 @@ export type LauncherScriptParams = {|",
                "   ca: string,",
                "-  port: number,",
                "+  ports: string,",
                "   expirationDays: number,",
                "@@ -56,3 +56,3 @@ async function handleLaunchParams(params: LauncherScriptParams) {",
                "   const port = await launchServer({",
                "-    port: params.port,",
                "+    ports: params.ports,",
                "     webServer: {",
                "diff --git a/modules/big-dig/src/server/main.js b/modules/big-dig/src/server/main.js",
                "index f858c0e4c..6342ca2d1 100644",
                "--- a/modules/big-dig/src/server/main.js",
                "+++ b/modules/big-dig/src/server/main.js",
                "@@ -25,3 +25,3 @@ export type StartServerParams = {",
                "   openSSLConfigPath: string,",
                "-  port: number,",
                "+  ports: string,",
                "   timeout: number,",
                "@@ -38,3 +38,3 @@ export async function generateCertificatesAndStartServer({",
                "   openSSLConfigPath,",
                "-  port,",
                "+  ports,",
                "   timeout,",
                "@@ -66,3 +66,3 @@ export async function generateCertificatesAndStartServer({",
                "     ca: ca.toString(),",
                "-    port,",
                "+    ports,",
                "     expirationDays,",
                "diff --git a/pkg/nuclide-remote-projects/lib/connectBigDigSshHandshake.js b/pkg/nuclide-remote-projects/lib/connectBigDigSshHandshake.js",
                "index 0a1cc04e5..9b0965582 100644",
                "--- a/pkg/nuclide-remote-projects/lib/connectBigDigSshHandshake.js",
                "+++ b/pkg/nuclide-remote-projects/lib/connectBigDigSshHandshake.js",
                "@@ -104,3 +104,7 @@ export default function connectBigDigSshHandshake(",
                "   let {remoteServerCommand} = connectionConfig;",
                "-  let remoteServerPort;",
                "+  // If the user does not specify --port or -p in the remoteServerCommand, then",
                "+  // we default to '9093-9090' as the port range. Currently, we do not give the",
                "+  // user a way to specify their own port range from the connection dialog.",
                "+  // We can straighten this out once we completely cutover to Big Dig.",
                "+  let remoteServerPorts = '9093-9090';",
                "   // Add the current Nuclide version, unless explicitly provided.",
                "@@ -118,6 +122,6 @@ export default function connectBigDigSshHandshake(",
                "     if (typeof parsed.port === 'number') {",
                "-      remoteServerPort = parsed.port;",
                "+      remoteServerPorts = String(parsed.port);",
                "     }",
                "     if (typeof parsed.p === 'number') {",
                "-      remoteServerPort = parsed.p;",
                "+      remoteServerPorts = String(parsed.p);",
                "     }",
                "@@ -138,3 +142,3 @@ export default function connectBigDigSshHandshake(",
                "     },",
                "-    remoteServerPort,",
                "+    remoteServerPorts,",
                "     authMethod,"
            ],
            "changed_files": [
                "modules/big-dig-samples/command-line-client/cli.js",
                "modules/big-dig/spec/common/ports-spec.js",
                "modules/big-dig/src/client/SshHandshake.js",
                "modules/big-dig/src/common/ports.js",
                "modules/big-dig/src/server/NuclideServer.js",
                "modules/big-dig/src/server/cli.js",
                "modules/big-dig/src/server/launchServer.js",
                "modules/big-dig/src/server/main.js",
                "pkg/nuclide-remote-projects/lib/connectBigDigSshHandshake.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "9b2f8291a1ed069ecdd93a711791ca8183b1fba7",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520547763,
            "hunks": 1,
            "message": "fix redundancy for features in user's config.json Summary: Calls `atom.config.set` in order to remove default values from cluttering a user's config. Behavior remains identical. Reviewed By: hansonw Differential Revision: D7186907 fbshipit-source-id: 7e2cfc2bb85df5ee1276d698624166e98ba29465",
            "diff": [
                "diff --git a/modules/nuclide-commons-atom/FeatureLoader.js b/modules/nuclide-commons-atom/FeatureLoader.js",
                "index 9f2447265..4f9c5f5ce 100644",
                "--- a/modules/nuclide-commons-atom/FeatureLoader.js",
                "+++ b/modules/nuclide-commons-atom/FeatureLoader.js",
                "@@ -211,2 +211,12 @@ export default class FeatureLoader {",
                "     this._features.forEach(feature => {",
                "+      // Since the migration from bool to enum occurs before the config defaults",
                "+      // are changed, the user's config gets filled with every Nuclide feature.",
                "+      // Since these values are already the default, this `config.set`",
                "+      // removes these uneccessary values from the user's config file.",
                "+      // TODO: When enough users have migrated, this should be removed along with the enum migration.",
                "+      atom.config.set(",
                "+        this.useKeyPathForFeature(feature),",
                "+        atom.config.get(this.useKeyPathForFeature(feature)),",
                "+      );",
                "+",
                "       if (this.shouldEnable(feature)) {"
            ],
            "changed_files": [
                "modules/nuclide-commons-atom/FeatureLoader.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "065a90aca8e4c556cb882b1f3d48cf3b4b8f2098",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521582055,
            "hunks": 3,
            "message": "Make `onceGKInitialized()` actually cancelable Summary: Stumbled on this while looking at other stuff. It looks like in the common case (after initialization), this wasn't actually cancelable? Reviewed By: hansonw Differential Revision: D7333180 fbshipit-source-id: e48f73e2ea15ee4a1d27efe36b00dfd7b0368bc7",
            "diff": [
                "diff --git a/pkg/commons-node/passesGK.js b/pkg/commons-node/passesGK.js",
                "index aa10c998c..996e6e3d4 100644",
                "--- a/pkg/commons-node/passesGK.js",
                "+++ b/pkg/commons-node/passesGK.js",
                "@@ -34,6 +34,11 @@ const getGatekeeper = once(() => {",
                "       onceGkInitialized(callback: () => mixed): IDisposable {",
                "+        let canceled = false;",
                "         process.nextTick(() => {",
                "-          callback();",
                "+          if (!canceled) {",
                "+            callback();",
                "+          }",
                "+        });",
                "+        return new UniversalDisposable(() => {",
                "+          canceled = true;",
                "         });",
                "-        return new UniversalDisposable();",
                "       }"
            ],
            "changed_files": [
                "pkg/commons-node/passesGK.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "18b5f758bbb706fdcc8bf54bb0cd3658fc06177a",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521141875,
            "hunks": 1,
            "message": "Support and make watch mode default except for headless Summary: This enables watch mode for both headless and nonheadless test runs, making it the default for headless test runs. Reviewed By: matthewwithanm Differential Revision: D7240526 fbshipit-source-id: a31eaa914702db37ce73bfa6451fb1753ae685bb",
            "diff": [
                "diff --git a/modules/nuclide-jest/atom-runner.js b/modules/nuclide-jest/atom-runner.js",
                "index f035341f3..44fa11f0b 100644",
                "--- a/modules/nuclide-jest/atom-runner.js",
                "+++ b/modules/nuclide-jest/atom-runner.js",
                "@@ -78,2 +78,5 @@ module.exports = function(params) {",
                "       env: 'nuclide-jest/AtomJestEnvironment.js',",
                "+      watch: params.headless ? process.env.JEST_WATCH != null : true,",
                "+      watchAll: params.headless ? process.env.JEST_WATCH_ALL != null : true,",
                "+      watchman: true,",
                "       config: JSON.stringify(Object.assign("
            ],
            "changed_files": [
                "modules/nuclide-jest/atom-runner.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "268430ba146d69027faa17ceb5524f95a8c6c745",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520642824,
            "hunks": 3,
            "message": "Add additional tracking to diagnostics Reviewed By: captbaritone Differential Revision: D7208213 fbshipit-source-id: 419770b7f9b5905cb0635878be4a382626b84587",
            "diff": [
                "diff --git a/modules/atom-ide-ui/pkg/atom-ide-diagnostics-ui/lib/DiagnosticsViewModel.js b/modules/atom-ide-ui/pkg/atom-ide-diagnostics-ui/lib/DiagnosticsViewModel.js",
                "index 97344845f..8a7d23cf7 100644",
                "--- a/modules/atom-ide-ui/pkg/atom-ide-diagnostics-ui/lib/DiagnosticsViewModel.js",
                "+++ b/modules/atom-ide-ui/pkg/atom-ide-diagnostics-ui/lib/DiagnosticsViewModel.js",
                "@@ -221,2 +221,3 @@ export class DiagnosticsViewModel {",
                "     this._model.setState({hiddenGroups: nextHiddenTypes});",
                "+    analytics.track('diagnostics-panel-change-filter');",
                "   };",
                "@@ -230,2 +231,3 @@ export class DiagnosticsViewModel {",
                "     });",
                "+    analytics.track('diagnostics-panel-change-filter');",
                "   };",
                "diff --git a/modules/atom-ide-ui/pkg/atom-ide-diagnostics-ui/lib/gutter.js b/modules/atom-ide-ui/pkg/atom-ide-diagnostics-ui/lib/gutter.js",
                "index 47c5030d1..81db16f1d 100644",
                "--- a/modules/atom-ide-ui/pkg/atom-ide-diagnostics-ui/lib/gutter.js",
                "+++ b/modules/atom-ide-ui/pkg/atom-ide-diagnostics-ui/lib/gutter.js",
                "@@ -197,2 +197,3 @@ export function applyUpdateToEditor(",
                "     gutter.show();",
                "+    analytics.track('diagnostics-show-editor-diagnostics');",
                "   }"
            ],
            "changed_files": [
                "modules/atom-ide-ui/pkg/atom-ide-diagnostics-ui/lib/DiagnosticsViewModel.js",
                "modules/atom-ide-ui/pkg/atom-ide-diagnostics-ui/lib/gutter.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "ec74022d00d862d04660f5cc2217b5413f23643e",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520645437,
            "hunks": 1,
            "message": "Vsp Rewrite: Dispose VspProcessInfo Summary: Found a bug with the buck toolbar that was happening because the VspProcessInfo was not being disposed Reviewed By: mostafaeweda Differential Revision: D7222263 fbshipit-source-id: cff6fee0f4bf80b288a5a91cdcd1bacb3959a29d",
            "diff": [
                "diff --git a/pkg/nuclide-debugger-new/lib/RemoteControlService.js b/pkg/nuclide-debugger-new/lib/RemoteControlService.js",
                "index 2c8255f9a..598df23fc 100644",
                "--- a/pkg/nuclide-debugger-new/lib/RemoteControlService.js",
                "+++ b/pkg/nuclide-debugger-new/lib/RemoteControlService.js",
                "@@ -47,2 +47,16 @@ export default class RemoteControlService {",
                "     processInfo.setVspDebuggerInstance(instance);",
                "+",
                "+    const {focusedProcess} = this._service.viewModel;",
                "+    invariant(focusedProcess != null);",
                "+    const disposable = this._service.viewModel.onDidFocusProcess(() => {",
                "+      if (",
                "+        !this._service",
                "+          .getModel()",
                "+          .getProcesses()",
                "+          .includes(focusedProcess)",
                "+      ) {",
                "+        processInfo.dispose();",
                "+        disposable.dispose();",
                "+      }",
                "+    });",
                "   }"
            ],
            "changed_files": [
                "pkg/nuclide-debugger-new/lib/RemoteControlService.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "3f6ffa6819696895f177ca574815a506d42fcc97",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520887652,
            "hunks": 1,
            "message": "Track when outline view filter changes Reviewed By: wbinnssmith Differential Revision: D7208211 fbshipit-source-id: ead3cf567ca0dc401a01835ef0eec5fe9df09da7",
            "diff": [
                "diff --git a/modules/atom-ide-ui/pkg/atom-ide-outline-view/lib/OutlineViewSearch.js b/modules/atom-ide-ui/pkg/atom-ide-outline-view/lib/OutlineViewSearch.js",
                "index 4241e8111..8ea47ff5e 100644",
                "--- a/modules/atom-ide-ui/pkg/atom-ide-outline-view/lib/OutlineViewSearch.js",
                "+++ b/modules/atom-ide-ui/pkg/atom-ide-outline-view/lib/OutlineViewSearch.js",
                "@@ -144,2 +144,3 @@ export class OutlineViewSearchComponent extends React.Component<Props, State> {",
                "   _onDidChange = debounce(query => {",
                "+    analytics.track('outline-view:change-query');",
                "     this.setState({currentQuery: query});"
            ],
            "changed_files": [
                "modules/atom-ide-ui/pkg/atom-ide-outline-view/lib/OutlineViewSearch.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "64718726cc4d17437aabe396966e0947dd5e760e",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521844235,
            "hunks": 8,
            "message": "Support macros like {dirname} and {basename} Summary: Used in https://github.com/wincent/wincent/blob/89a4ddc49f2b898569c7fbaa62e4e9ed10b5faf3/roles/dotfiles/files/.vim/after/plugin/projectionist.vim -- seems to be the simplest way to represent the common `__tests__` peer directory relationship pattern seen in jest tests. Reviewed By: matthewwithanm Differential Revision: D7383836 fbshipit-source-id: c0187d1129274b6d1da022fe263f560befea757a",
            "diff": [
                "diff --git a/pkg/nuclide-projectionist/lib/main.js b/pkg/nuclide-projectionist/lib/main.js",
                "index ef16ed4e7..1da56cf3e 100644",
                "--- a/pkg/nuclide-projectionist/lib/main.js",
                "+++ b/pkg/nuclide-projectionist/lib/main.js",
                "@@ -100,2 +100,8 @@ function isProjection(maybeProjection: Object): boolean {",
                "+const keywordReplacements = {",
                "+  '{}': match => match,",
                "+  '{basename}': match => basenameWithoutExtension(match),",
                "+  '{dirname}': match => match,",
                "+};",
                "+",
                " function replaceTargetsWithMatches(",
                "@@ -106,7 +112,2 @@ function replaceTargetsWithMatches(",
                "   if (matches == null) {",
                "-    const basenameWithoutExtension = path.basename(",
                "-      projectRelativePath,",
                "-      path.extname(projectRelativePath),",
                "-    );",
                "-",
                "     return path.join(",
                "@@ -117,3 +118,3 @@ function replaceTargetsWithMatches(",
                "-  const targets = stringWithTargets.match(/{}/g);",
                "+  const targets = stringWithTargets.match(/({.*?})/g);",
                "   if (targets == null) {",
                "@@ -124,6 +125,13 @@ function replaceTargetsWithMatches(",
                "   for (let i = 0; i < targets.length; i++) {",
                "+    const target = targets[i];",
                "     if (i === targets.length - 1 && targets.length < matches.length) {",
                "-      replaced = replaced.replace('{}', path.join(...matches.slice(i)));",
                "+      replaced = replaced.replace(",
                "+        target,",
                "+        keywordReplacements[target](path.join(...matches.slice(i))),",
                "+      );",
                "     } else {",
                "-      replaced = replaced.replace('{}', matches[i]);",
                "+      replaced = replaced.replace(",
                "+        target,",
                "+        keywordReplacements[target](matches[i]),",
                "+      );",
                "     }",
                "@@ -143 +151,5 @@ function normalizePattern(pattern: string) {",
                " }",
                "+",
                "+function basenameWithoutExtension(pathString) {",
                "+  return path.basename(pathString, path.extname(pathString));",
                "+}",
                "diff --git a/pkg/nuclide-projectionist/spec/main-spec.js b/pkg/nuclide-projectionist/spec/main-spec.js",
                "index b352a36f0..f37a40bda 100644",
                "--- a/pkg/nuclide-projectionist/spec/main-spec.js",
                "+++ b/pkg/nuclide-projectionist/spec/main-spec.js",
                "@@ -89,2 +89,34 @@ describe('Projectionist', () => {",
                "     });",
                "+",
                "+    it('expands dirname and basename', () => {",
                "+      const projectionist = new Projectionist({",
                "+        '**/__tests__/*-test.js': {",
                "+          alternate: '{dirname}/{basename}.js',",
                "+          type: 'test',",
                "+        },",
                "+      });",
                "+",
                "+      expect(",
                "+        projectionist.getAlternates('bin/scripts/__tests__/foo-test.js'),",
                "+      ).toEqual(['bin/scripts/foo.js']);",
                "+    });",
                "+",
                "+    it('expands many dirname and basename', () => {",
                "+      const projectionist = new Projectionist({",
                "+        '*.js': {",
                "+          alternate: [",
                "+            '{dirname}/{basename}.test.js',",
                "+            '{dirname}/__tests__/{basename}-test.js',",
                "+            '{dirname}/__tests__/{basename}-mocha.js',",
                "+          ],",
                "+          type: 'source',",
                "+        },",
                "+      });",
                "+",
                "+      expect(projectionist.getAlternates('bin/scripts/foo.js')).toEqual([",
                "+        'bin/scripts/foo.test.js',",
                "+        'bin/scripts/__tests__/foo-test.js',",
                "+        'bin/scripts/__tests__/foo-mocha.js',",
                "+      ]);",
                "+    });",
                "   });"
            ],
            "changed_files": [
                "pkg/nuclide-projectionist/lib/main.js",
                "pkg/nuclide-projectionist/spec/main-spec.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "c7effe45c16b1a5ad11785682a7d12ac84a0c11e",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521555127,
            "hunks": 3,
            "message": "Clean up error handling in SshHandshake Summary: Cleaned up some error handling and fixed a couple small bugs where an SshHandshakeError was wrapped twice and cancelation was ignored by a retry auth attempt. Reviewed By: hansonw Differential Revision: D7319870 fbshipit-source-id: 5d0736b94767fa9170a03050a947095f4dd21f4f",
            "diff": [
                "diff --git a/modules/big-dig/src/client/SshHandshake.js b/modules/big-dig/src/client/SshHandshake.js",
                "index 5d61ec479..45523c1bb 100644",
                "--- a/modules/big-dig/src/client/SshHandshake.js",
                "+++ b/modules/big-dig/src/client/SshHandshake.js",
                "@@ -394,2 +394,8 @@ export class SshHandshake {",
                "   async _connectOrNeedsAuth(config: ConnectConfig): Promise<?SshAuthError> {",
                "+    if (this._canceled) {",
                "+      throw new SshHandshakeError(",
                "+        'Connection has been cancelled by the user',",
                "+        SshHandshake.ErrorType.USER_CANCELED,",
                "+      );",
                "+    }",
                "     try {",
                "@@ -405,2 +411,7 @@ export class SshHandshake {",
                "         return new SshAuthError(error, {needsPrivateKeyPassword: false});",
                "+      } else if (error.level !== undefined) {",
                "+        const errorType =",
                "+          (error.level && SshConnectionErrorLevelMap.get(error.level)) ||",
                "+          SshHandshake.ErrorType.UNKNOWN;",
                "+        throw new SshHandshakeError(error.message, errorType, error);",
                "       } else {",
                "@@ -702,2 +713,5 @@ export class SshHandshake {",
                "     } catch (error) {",
                "+      if (error instanceof SshHandshakeError) {",
                "+        throw error;",
                "+      }",
                "       throw new SshHandshakeError("
            ],
            "changed_files": [
                "modules/big-dig/src/client/SshHandshake.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "eb3578c0694e5a595e1371012f62ba7f062c0e47",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521486345,
            "hunks": 1,
            "message": "Bump version to 0.289.0 Summary: 0.289.0 fbshipit-source-id: e4b43199d4adfa56c99761fb14af58ff57634e0c",
            "diff": [
                "diff --git a/package.json b/package.json",
                "index cc537b26f..8f3919ad4 100644",
                "--- a/package.json",
                "+++ b/package.json",
                "@@ -2,3 +2,3 @@",
                "   \"name\": \"nuclide\",",
                "-  \"version\": \"0.288.0\",",
                "+  \"version\": \"0.289.0\",",
                "   \"description\": \"A unified developer experience for web and mobile development, built as a suite of features on top of Atom to provide hackability and the support of an active community.\","
            ],
            "changed_files": [
                "package.json"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "f1c438f57abd47e7c57b336927a9ca8db5f1236a",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521829555,
            "hunks": 1,
            "message": "Fix regex in certificate generator for OpenSSL 1.1 Summary: Imported version of https://github.com/facebook/nuclide/pull/1483. Reviewed By: semmypurewal Differential Revision: D7369899 fbshipit-source-id: 481ad26afc13495dcfd12d13b7e3ce8334fc689f",
            "diff": [
                "diff --git a/pkg/nuclide-server/scripts/nuclide_certificates_generator.py b/pkg/nuclide-server/scripts/nuclide_certificates_generator.py",
                "index ee1fc186d..eccdb9d1a 100755",
                "--- a/pkg/nuclide-server/scripts/nuclide_certificates_generator.py",
                "+++ b/pkg/nuclide-server/scripts/nuclide_certificates_generator.py",
                "@@ -27,3 +27,3 @@ OPENSSL_SAN = 'OPENSSL_SAN'",
                " # regex pattern for matching common name.",
                "-SUBJECT_CN_REGEX = 'subject=.*/CN=([^/\\n]*)'",
                "+SUBJECT_CN_REGEX = 'subject=.*/?CN ?= ?([^/\\n]*)'"
            ],
            "changed_files": [
                "pkg/nuclide-server/scripts/nuclide_certificates_generator.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "856b84c299ce931c995a0907f6bc29ca23cdd7bb",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521484590,
            "hunks": 7,
            "message": "Support atomprojects in findOrCreateFromConnection (4 of 7) Summary: update `findOrCreateFromConnection` to handle project files properly. Reviewed By: hansonw Differential Revision: D7198375 fbshipit-source-id: a85d1e2fa10561cb836df98136c247b496e6bfcd",
            "diff": [
                "diff --git a/flow-libs/atom.js.flow b/flow-libs/atom.js.flow",
                "index 175e88566..03a095df6 100644",
                "--- a/flow-libs/atom.js.flow",
                "+++ b/flow-libs/atom.js.flow",
                "@@ -1641,3 +1641,7 @@ declare class atom$Project {",
                "   observeBuffers(callback: (buffer: atom$TextBuffer) => mixed): IDisposable,",
                "-",
                "+  replace?: (newSettings: {|",
                "+    originPath?: string,",
                "+    paths?: Array<string>,",
                "+    config?: {[string]: mixed}",
                "+  |}) => void,",
                "   // Accessing the git repository",
                "diff --git a/pkg/nuclide-remote-connection/lib/RemoteConnection.js b/pkg/nuclide-remote-connection/lib/RemoteConnection.js",
                "index e4693e73e..95b653c88 100644",
                "--- a/pkg/nuclide-remote-connection/lib/RemoteConnection.js",
                "+++ b/pkg/nuclide-remote-connection/lib/RemoteConnection.js",
                "@@ -22,2 +22,3 @@ import type {ServerConnectionVersion} from './ServerConnection';",
                " import invariant from 'assert';",
                "+import season from 'season';",
                " import UniversalDisposable from 'nuclide-commons/UniversalDisposable';",
                "@@ -77,3 +78,3 @@ export class RemoteConnection {",
                "-  static findOrCreateFromConnection(",
                "+  static async findOrCreateFromConnection(",
                "     serverConnection: ServerConnection,",
                "@@ -83,9 +84,45 @@ export class RemoteConnection {",
                "   ): Promise<RemoteConnection> {",
                "-    const connection = new RemoteConnection(",
                "-      serverConnection,",
                "-      cwd,",
                "-      displayTitle,",
                "-      promptReconnectOnFailure,",
                "+    const fsService: FileSystemServiceType = serverConnection.getService(",
                "+      FILE_SYSTEM_SERVICE,",
                "     );",
                "-    return connection._initialize();",
                "+    // cwd may actually be a project file.",
                "+    const contents = hasAtomProjectFormat(cwd)",
                "+      ? await fsService.readFile(cwd).catch(() => null)",
                "+      : null;",
                "+",
                "+    const directories = [];",
                "+    if (contents == null) {",
                "+      directories.push(cwd);",
                "+    } else {",
                "+      const projectContents = season.parse(contents.toString());",
                "+      const dirname = nuclideUri.dirname(cwd);",
                "+",
                "+      const projectPaths = projectContents.paths;",
                "+      if (projectPaths != null && Array.isArray(projectPaths)) {",
                "+        directories.push(",
                "+          ...projectPaths.map(path => nuclideUri.resolve(dirname, path)),",
                "+        );",
                "+      } else {",
                "+        directories.push(dirname);",
                "+      }",
                "+      if (atom.project.replace != null) {",
                "+        projectContents.paths = directories;",
                "+        projectContents.originPath = cwd;",
                "+        atom.project.replace(projectContents);",
                "+      }",
                "+    }",
                "+    const connections = await Promise.all(",
                "+      directories.map((dir, i) => {",
                "+        const connection = new RemoteConnection(",
                "+          serverConnection,",
                "+          dir,",
                "+          i === 0 ? displayTitle : '',",
                "+          promptReconnectOnFailure,",
                "+        );",
                "+        return connection._initialize();",
                "+      }),",
                "+    );",
                "+    // We need to return one connection from this function,",
                "+    // even though many connections are being created to support projects.",
                "+    return connections[0];",
                "   }",
                "@@ -179,5 +216,9 @@ export class RemoteConnection {",
                "     });",
                "-    const connection = RemoteConnection.getByHostnameAndPath(host, cwd);",
                "-    if (connection != null) {",
                "-      return connection;",
                "+",
                "+    if (!hasAtomProjectFormat(cwd)) {",
                "+      const connection = RemoteConnection.getByHostnameAndPath(host, cwd);",
                "+",
                "+      if (connection != null) {",
                "+        return connection;",
                "+      }",
                "     }",
                "@@ -437 +478,6 @@ export class RemoteConnection {",
                " }",
                "+",
                "+function hasAtomProjectFormat(filepath) {",
                "+  const ext = nuclideUri.extname(filepath);",
                "+  return ext === '.json' || ext === '.cson';",
                "+}"
            ],
            "changed_files": [
                "flow-libs/atom.js.flow",
                "pkg/nuclide-remote-connection/lib/RemoteConnection.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "f503bc30759abe85d6c6969fec6125a468d13407",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521139428,
            "hunks": 5,
            "message": "Disable modules-dependencies linter for types Summary: Types are already verified by Flow on CI, so this linter's not needed. (previously even type imports had to be declared in `dependencies`.) Reviewed By: bolinfest Differential Revision: D7285497 fbshipit-source-id: 1309fc94d56831e4a98ce35177b90e8a857259e0",
            "diff": [
                "diff --git a/modules/eslint-plugin-nuclide-internal/modules-dependencies.js b/modules/eslint-plugin-nuclide-internal/modules-dependencies.js",
                "index e32432d0a..3d64f04e9 100644",
                "--- a/modules/eslint-plugin-nuclide-internal/modules-dependencies.js",
                "+++ b/modules/eslint-plugin-nuclide-internal/modules-dependencies.js",
                "@@ -27,2 +27,6 @@ const ASYNC_TO_GENERATOR = 'async-to-generator';",
                "+function isType(kind) {",
                "+  return kind === 'type' || kind === 'typeof';",
                "+}",
                "+",
                " module.exports = function(context) {",
                "@@ -102,3 +106,3 @@ module.exports = function(context) {",
                "     ExportNamedDeclaration(node) {",
                "-      if (node.source != null) {",
                "+      if (node.source != null && !isType(node.exportKind)) {",
                "         // export foo from \"\u00e2\u0080\u00a6\"",
                "@@ -108,4 +112,6 @@ module.exports = function(context) {",
                "     ExportAllDeclaration(node) {",
                "-      // export * from \"\u00e2\u0080\u00a6\"",
                "-      checkDependency(node, node.source.value);",
                "+      if (!isType(node.exportKind)) {",
                "+        // export * from \"\u00e2\u0080\u00a6\"",
                "+        checkDependency(node, node.source.value);",
                "+      }",
                "     },",
                "@@ -114,4 +120,6 @@ module.exports = function(context) {",
                "     ImportDeclaration(node) {",
                "-      // import foo from \"\u00e2\u0080\u00a6\"",
                "-      checkDependency(node, node.source.value);",
                "+      if (!isType(node.importKind)) {",
                "+        // import foo from \"\u00e2\u0080\u00a6\"",
                "+        checkDependency(node, node.source.value);",
                "+      }",
                "     },",
                "diff --git a/modules/eslint-plugin-nuclide-internal/spec/modules-dependencies-spec.js b/modules/eslint-plugin-nuclide-internal/spec/modules-dependencies-spec.js",
                "index 4ed63069f..6a7866484 100644",
                "--- a/modules/eslint-plugin-nuclide-internal/spec/modules-dependencies-spec.js",
                "+++ b/modules/eslint-plugin-nuclide-internal/spec/modules-dependencies-spec.js",
                "@@ -50,2 +50,14 @@ ruleTester.run('modules-dependencies', rule, {",
                "     },",
                "+    {",
                "+      code: 'import type {test} from \"test1234\"',",
                "+      filename: TEST_PATH,",
                "+    },",
                "+    {",
                "+      code: 'import typeof * as test from \"test1234\"',",
                "+      filename: TEST_PATH,",
                "+    },",
                "+    {",
                "+      code: 'export type {test} from \"test1234\"',",
                "+      filename: TEST_PATH,",
                "+    },",
                "   ],"
            ],
            "changed_files": [
                "modules/eslint-plugin-nuclide-internal/modules-dependencies.js",
                "modules/eslint-plugin-nuclide-internal/spec/modules-dependencies-spec.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "cbdd3d90583a35a7c556cb53c6c8a5945dfcb074",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520545242,
            "hunks": 5,
            "message": "Use 'React.Node' in Section Reviewed By: aadisriram Differential Revision: D7162678 fbshipit-source-id: 23462f572184cc3877caa95f1624ea65d22a407e",
            "diff": [
                "diff --git a/pkg/nuclide-debugger/lib/ScopesComponent.js b/pkg/nuclide-debugger/lib/ScopesComponent.js",
                "index b8e39855b..572dc4ffa 100644",
                "--- a/pkg/nuclide-debugger/lib/ScopesComponent.js",
                "+++ b/pkg/nuclide-debugger/lib/ScopesComponent.js",
                "@@ -131,3 +131,2 @@ export class ScopesComponent extends React.Component<Props> {",
                "     return (",
                "-      // $FlowFixMe(>=0.53.0) Flow suppress",
                "       <Section",
                "diff --git a/pkg/nuclide-file-tree/components/FileTreeSidebarComponent.js b/pkg/nuclide-file-tree/components/FileTreeSidebarComponent.js",
                "index 785e9f598..ad1d149e9 100644",
                "--- a/pkg/nuclide-file-tree/components/FileTreeSidebarComponent.js",
                "+++ b/pkg/nuclide-file-tree/components/FileTreeSidebarComponent.js",
                "@@ -400,3 +400,2 @@ All the changes across your entire stacked diff.",
                "         <LockableHeight isLocked={this.state.isFileTreeHovered}>",
                "-          {/* $FlowFixMe(>=0.53.0) Flow suppress */}",
                "           <Section",
                "diff --git a/pkg/nuclide-ui/FileChanges.js b/pkg/nuclide-ui/FileChanges.js",
                "index 79ad8e828..0eaf84648 100644",
                "--- a/pkg/nuclide-ui/FileChanges.js",
                "+++ b/pkg/nuclide-ui/FileChanges.js",
                "@@ -371,3 +371,2 @@ export default class FileChanges extends React.Component<Props> {",
                "     return (",
                "-      // $FlowFixMe(>=0.53.0) Flow suppress",
                "       <Section",
                "diff --git a/pkg/nuclide-ui/Section.js b/pkg/nuclide-ui/Section.js",
                "index 938bb9c78..473b80be4 100644",
                "--- a/pkg/nuclide-ui/Section.js",
                "+++ b/pkg/nuclide-ui/Section.js",
                "@@ -16,5 +16,5 @@ type SectionSize = 'large' | 'medium' | 'small';",
                " type Props = {",
                "-  headline: React.Element<any> | string,",
                "+  headline: React.Node,",
                "   className?: string,",
                "-  children?: React.Element<any>,",
                "+  children?: React.Node,",
                "   // Option A: Specify just `collapsable` for uncontrolled toggle behavior."
            ],
            "changed_files": [
                "pkg/nuclide-debugger/lib/ScopesComponent.js",
                "pkg/nuclide-file-tree/components/FileTreeSidebarComponent.js",
                "pkg/nuclide-ui/FileChanges.js",
                "pkg/nuclide-ui/Section.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "ee8e058c8b90cb008f3ee151c52aec40cad1174a",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521236673,
            "hunks": 9,
            "message": "Update featureloader to accept CSON object of featuregroups (4 of 4) Summary: Read featureGroups.json, as well as fb-featureGroups.json and populate featureLoader._featureGroupMap Reviewed By: wbinnssmith Differential Revision: D7244675 fbshipit-source-id: 4850a66bcc9178c0f5772408f8bdd0036810aad9",
            "diff": [
                "diff --git a/lib/main.js b/lib/main.js",
                "index 83c908a12..bcebbbdbd 100644",
                "--- a/lib/main.js",
                "+++ b/lib/main.js",
                "@@ -43,2 +43,10 @@ import {initializeLogging} from '../pkg/nuclide-logging';",
                " import UniversalDisposable from 'nuclide-commons/UniversalDisposable';",
                "+import pubFeatureGroups from './featureGroups.json';",
                "+",
                "+let featureGroups = pubFeatureGroups;",
                "+try {",
                "+  // $eslint-disable-next-line $FlowFB",
                "+  const fbFeatureGroups = require('./fb-featureGroups.json');",
                "+  featureGroups = mergeFeatureGroups(featureGroups, fbFeatureGroups);",
                "+} catch (e) {}",
                "@@ -143,2 +151,3 @@ if (shouldInitialize) {",
                "     features,",
                "+    featureGroups,",
                "   });",
                "@@ -281,2 +290,18 @@ function sortSubmenuGroup(",
                "+function mergeFeatureGroups(",
                "+  firstGroup: {[string]: Array<string>},",
                "+  secondGroup: {[string]: Array<string>},",
                "+): {[string]: Array<string>} {",
                "+  const mergedObject = {};",
                "+  for (const key in firstGroup) {",
                "+    mergedObject[key] = [...firstGroup[key], ...secondGroup[key]];",
                "+  }",
                "+",
                "+  for (const key in secondGroup) {",
                "+    mergedObject[key] = [...firstGroup[key], ...secondGroup[key]];",
                "+  }",
                "+",
                "+  return mergedObject;",
                "+}",
                "+",
                " function sortMenuGroups(menuNames: Array<string>) {",
                "diff --git a/modules/nuclide-commons-atom/FeatureLoader.js b/modules/nuclide-commons-atom/FeatureLoader.js",
                "index 4f9c5f5ce..aa7f5c150 100644",
                "--- a/modules/nuclide-commons-atom/FeatureLoader.js",
                "+++ b/modules/nuclide-commons-atom/FeatureLoader.js",
                "@@ -40,2 +40,5 @@ type FeatureLoaderParams = {",
                "   features: Array<Feature>,",
                "+  featureGroups?: {",
                "+    [string]: Array<string>,",
                "+  },",
                " };",
                "@@ -54,2 +57,3 @@ export default class FeatureLoader {",
                "   _features: Array<Feature>;",
                "+  _featureGroups: {[string]: Array<string>};",
                "   _featureGroupMap: MultiMap<string, Feature> = new MultiMap();",
                "@@ -59,3 +63,3 @@ export default class FeatureLoader {",
                "-  constructor({features, path: _path}: FeatureLoaderParams) {",
                "+  constructor({features, path: _path, featureGroups}: FeatureLoaderParams) {",
                "     this._path = _path;",
                "@@ -64,2 +68,6 @@ export default class FeatureLoader {",
                "     this._pkgName = packageNameFromPath(this._path);",
                "+    this._featureGroups = featureGroups == null ? {} : featureGroups;",
                "+",
                "+    // Constructs the map from feature groups to features.",
                "+    this.constructFeatureGroupMap();",
                "     this._config = {",
                "@@ -108,7 +116,2 @@ export default class FeatureLoader {",
                "-      // Add the feature to its feature group.",
                "-      this.addToFeatureGroup(feature);",
                "-",
                "-      // Entry for enabling/disabling the feature",
                "-",
                "       // Migrate the current feature (from boolean on/off to enumerated states).",
                "@@ -314,7 +317,21 @@ export default class FeatureLoader {",
                "-  addToFeatureGroup(feature: Feature): void {",
                "-    const featureGroups = feature.pkg.featureGroups;",
                "-    if (featureGroups != null) {",
                "-      for (const featureGroup of featureGroups) {",
                "-        this._featureGroupMap.add(featureGroup, feature);",
                "+  constructFeatureGroupMap() {",
                "+    /*",
                "+     * Construct a map from feature name to feature. The _featureGroupMap",
                "+     * must contain the true feature objects, but featureGroups.cson only has",
                "+     * the feature names.",
                "+     */",
                "+    const featureMap = new Map();",
                "+    this._features.forEach(feature => {",
                "+      featureMap.set(path.basename(feature.path), feature);",
                "+    });",
                "+",
                "+    for (const key of Object.keys(this._featureGroups)) {",
                "+      if (Array.isArray(this._featureGroups[key])) {",
                "+        const featuresForKey = this._featureGroups[key]",
                "+          .map(featureName => featureMap.get(featureName))",
                "+          .filter(Boolean);",
                "+        if (featuresForKey != null) {",
                "+          this._featureGroupMap.set(key, featuresForKey);",
                "+        }",
                "       }"
            ],
            "changed_files": [
                "lib/main.js",
                "modules/nuclide-commons-atom/FeatureLoader.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "32f39f0476fb51f71e935482920e34e6b6b96ccf",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521335848,
            "hunks": 2,
            "message": "Don\\'t store a failed open tunnel in the cache Summary: Deletes the promise entry from the cache whenever it gets rejected. I do this because otherwise it's not possible to retry to create the tunnel unless we reload Atom. I'm doing the same thing for when the tunnels get disposed because otherwise we end up with promises in the cache for tunnels that have already been disposed. Reviewed By: stepanhruda Differential Revision: D7301350 fbshipit-source-id: f4276c5470b35dd5e221e4f090915b51b4fb2b36",
            "diff": [
                "diff --git a/pkg/nuclide-adb-sdb-base/lib/Tunneling.js b/pkg/nuclide-adb-sdb-base/lib/Tunneling.js",
                "index 8d7db6aa7..79a114b7f 100644",
                "--- a/pkg/nuclide-adb-sdb-base/lib/Tunneling.js",
                "+++ b/pkg/nuclide-adb-sdb-base/lib/Tunneling.js",
                "@@ -29,5 +29,5 @@ export function startTunnelingAdb(uri: NuclideUri): Promise<void> {",
                "     const adbService = getAdbServiceByNuclideUri(serviceUri);",
                "-    const tunnelsOpen = adbService",
                "-      .killServer()",
                "-      .then(() => openTunnels(serviceUri));",
                "+    const tunnelsOpen = adbService.killServer().then(() => {",
                "+      return openTunnels(serviceUri);",
                "+    });",
                "     return {",
                "@@ -41,3 +41,8 @@ export function startTunnelingAdb(uri: NuclideUri): Promise<void> {",
                "-  return onReady;",
                "+  return onReady.catch(error => {",
                "+    // We don't want to keep a failed open tunnel in the cache, otherwise",
                "+    // when there's an error we're not able to retry the operation.",
                "+    activeTunnels.delete(uri);",
                "+    throw error;",
                "+  });",
                " }"
            ],
            "changed_files": [
                "pkg/nuclide-adb-sdb-base/lib/Tunneling.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "da2d137c17bcad08b037e63f9ed965d0dbdec90b",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521132309,
            "hunks": 3,
            "message": "Allow using gdb for buck, and send debuggerRoot Summary: Check SV for flag to use gdb Reviewed By: ebluestein Differential Revision: D7276609 fbshipit-source-id: aec32e015eee360a17403a9fbf92c4c34c762a91",
            "diff": [
                "diff --git a/pkg/nuclide-debugger-native/lib/main.js b/pkg/nuclide-debugger-native/lib/main.js",
                "index e5d07f816..e4020b814 100644",
                "--- a/pkg/nuclide-debugger-native/lib/main.js",
                "+++ b/pkg/nuclide-debugger-native/lib/main.js",
                "@@ -376,4 +376,10 @@ class Activation {",
                "     if (await passesGK('nuclide_debugger_native_vsp')) {",
                "+      let adapter = VsAdapterTypes.NATIVE_LLDB;",
                "+",
                "+      if (await passesGK('nuclide_buck_uses_gdb')) {",
                "+        adapter = VsAdapterTypes.NATIVE_GDB;",
                "+      }",
                "+",
                "       info = await getNativeVSPLaunchProcessInfo(",
                "-        VsAdapterTypes.NATIVE_LLDB,",
                "+        adapter,",
                "         nuclideUri.join(buckRoot, relativeOutputPath),",
                "@@ -384,2 +390,3 @@ class Activation {",
                "           sourcePath: remoteBuckRoot,",
                "+          debuggerRoot: remoteBuckRoot,",
                "         },"
            ],
            "changed_files": [
                "pkg/nuclide-debugger-native/lib/main.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "37ae7190738062c4696f28cd15cfda4478ff23f4",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521047227,
            "hunks": 15,
            "message": "Nuclide VSP Debugger: Fix react warnings in dev mode Summary: * Shouldn't `setState` after unmounting. * List items should have unique `key`. * `data-*` attributes should be lower-case to be added to DOM. Reviewed By: velocityboy Differential Revision: D7252122 fbshipit-source-id: 26ef8cf68217d2b4600bcd99eae0e47c866f69c8",
            "diff": [
                "diff --git a/pkg/nuclide-debugger-new/lib/ui/CallstackView.js b/pkg/nuclide-debugger-new/lib/ui/CallstackView.js",
                "index f64be9a27..f42836f7d 100644",
                "--- a/pkg/nuclide-debugger-new/lib/ui/CallstackView.js",
                "+++ b/pkg/nuclide-debugger-new/lib/ui/CallstackView.js",
                "@@ -14,2 +14,3 @@ import type {DebuggerModeType, IDebugService} from '../types';",
                " import classnames from 'classnames';",
                "+import {observableFromSubscribeFunction} from 'nuclide-commons/event';",
                " import UniversalDisposable from 'nuclide-commons/UniversalDisposable';",
                "@@ -39,8 +40,7 @@ export default class CallstackView extends React.PureComponent<Props, State> {",
                "   componentDidMount(): void {",
                "+    const {service} = this.props;",
                "     this._disposables.add(",
                "-      this.props.service.onDidChangeMode(() => {",
                "-        this.setState({",
                "-          mode: this.props.service.getDebuggerMode(),",
                "-        });",
                "-      }),",
                "+      observableFromSubscribeFunction(",
                "+        service.onDidChangeMode.bind(service),",
                "+      ).subscribe(mode => this.setState({mode})),",
                "     );",
                "diff --git a/pkg/nuclide-debugger-new/lib/ui/DebuggerControllerView.js b/pkg/nuclide-debugger-new/lib/ui/DebuggerControllerView.js",
                "index 3dfffe224..bbf93f192 100644",
                "--- a/pkg/nuclide-debugger-new/lib/ui/DebuggerControllerView.js",
                "+++ b/pkg/nuclide-debugger-new/lib/ui/DebuggerControllerView.js",
                "@@ -13,2 +13,3 @@ import type {IDebugService} from '../types';",
                "+import {observableFromSubscribeFunction} from 'nuclide-commons/event';",
                " import * as React from 'react';",
                "@@ -31,4 +32,7 @@ export default class DebuggerControllerView extends React.Component<Props> {",
                "   componentDidMount() {",
                "+    const {service} = this.props;",
                "     this._disposables.add(",
                "-      this.props.service.onDidChangeMode(() => this.forceUpdate()),",
                "+      observableFromSubscribeFunction(",
                "+        service.onDidChangeMode.bind(service),",
                "+      ).subscribe(mode => this.forceUpdate()),",
                "     );",
                "diff --git a/pkg/nuclide-debugger-new/lib/ui/DebuggerThreadsComponent.js b/pkg/nuclide-debugger-new/lib/ui/DebuggerThreadsComponent.js",
                "index e484e59ce..747a48709 100644",
                "--- a/pkg/nuclide-debugger-new/lib/ui/DebuggerThreadsComponent.js",
                "+++ b/pkg/nuclide-debugger-new/lib/ui/DebuggerThreadsComponent.js",
                "@@ -286,3 +286,3 @@ export default class DebuggerThreadsComponent extends React.Component<",
                "             cellData.rowAttributes = {",
                "-              'data-threadId': thread.threadId,",
                "+              'data-threadid': thread.threadId,",
                "             };",
                "diff --git a/pkg/nuclide-debugger-new/lib/ui/ScopesComponent.js b/pkg/nuclide-debugger-new/lib/ui/ScopesComponent.js",
                "index 7f500e488..5158e2394 100644",
                "--- a/pkg/nuclide-debugger-new/lib/ui/ScopesComponent.js",
                "+++ b/pkg/nuclide-debugger-new/lib/ui/ScopesComponent.js",
                "@@ -128,2 +128,3 @@ export default class ScopesComponent extends React.Component<Props, State> {",
                "       <Section",
                "+        key={scope.getId()}",
                "         collapsable={true}",
                "diff --git a/pkg/nuclide-debugger-new/lib/ui/ScopesView.js b/pkg/nuclide-debugger-new/lib/ui/ScopesView.js",
                "index 913e46f25..efc9531b4 100644",
                "--- a/pkg/nuclide-debugger-new/lib/ui/ScopesView.js",
                "+++ b/pkg/nuclide-debugger-new/lib/ui/ScopesView.js",
                "@@ -13,2 +13,3 @@ import type {DebuggerModeType, IDebugService} from '../types';",
                "+import {observableFromSubscribeFunction} from 'nuclide-commons/event';",
                " import UniversalDisposable from 'nuclide-commons/UniversalDisposable';",
                "@@ -41,7 +42,5 @@ export default class ScopesView extends React.PureComponent<Props, State> {",
                "     this._disposables.add(",
                "-      service.onDidChangeMode(() => {",
                "-        this.setState({",
                "-          mode: service.getDebuggerMode(),",
                "-        });",
                "-      }),",
                "+      observableFromSubscribeFunction(",
                "+        service.onDidChangeMode.bind(service),",
                "+      ).subscribe(mode => this.setState({mode})),",
                "     );",
                "diff --git a/pkg/nuclide-debugger-new/lib/ui/ThreadsView.js b/pkg/nuclide-debugger-new/lib/ui/ThreadsView.js",
                "index 6e064b0cd..e82fd9cfa 100644",
                "--- a/pkg/nuclide-debugger-new/lib/ui/ThreadsView.js",
                "+++ b/pkg/nuclide-debugger-new/lib/ui/ThreadsView.js",
                "@@ -14,2 +14,3 @@ import type {DebuggerModeType, IDebugService} from '../types';",
                " import classnames from 'classnames';",
                "+import {observableFromSubscribeFunction} from 'nuclide-commons/event';",
                " import UniversalDisposable from 'nuclide-commons/UniversalDisposable';",
                "@@ -42,7 +43,5 @@ export default class ThreadsView extends React.PureComponent<",
                "     this._disposables.add(",
                "-      service.onDidChangeMode(() => {",
                "-        this.setState({",
                "-          mode: service.getDebuggerMode(),",
                "-        });",
                "-      }),",
                "+      observableFromSubscribeFunction(",
                "+        service.onDidChangeMode.bind(service),",
                "+      ).subscribe(mode => this.setState({mode})),",
                "     );",
                "diff --git a/pkg/nuclide-debugger-new/lib/vsp/DebuggerModel.js b/pkg/nuclide-debugger-new/lib/vsp/DebuggerModel.js",
                "index 2aa77658f..17e2b7233 100644",
                "--- a/pkg/nuclide-debugger-new/lib/vsp/DebuggerModel.js",
                "+++ b/pkg/nuclide-debugger-new/lib/vsp/DebuggerModel.js",
                "@@ -861,3 +861,3 @@ export class Process implements IProcess {",
                "         thread.stoppedDetails =",
                "-          thread.threadId === threadId ? stoppedDetails : {};",
                "+          thread.threadId === threadId ? stoppedDetails : thread.stoppedDetails;",
                "         thread.stopped = true;",
                "@@ -890,3 +890,3 @@ export class Process implements IProcess {",
                "         thread.clearCallStack();",
                "-        thread.stoppedDetails = undefined;",
                "+        thread.stoppedDetails = null;",
                "         thread.stopped = false;",
                "@@ -900,3 +900,3 @@ export class Process implements IProcess {",
                "         thread.clearCallStack();",
                "-        thread.stoppedDetails = undefined;",
                "+        thread.stoppedDetails = null;",
                "         thread.stopped = false;"
            ],
            "changed_files": [
                "pkg/nuclide-debugger-new/lib/ui/CallstackView.js",
                "pkg/nuclide-debugger-new/lib/ui/DebuggerControllerView.js",
                "pkg/nuclide-debugger-new/lib/ui/DebuggerThreadsComponent.js",
                "pkg/nuclide-debugger-new/lib/ui/ScopesComponent.js",
                "pkg/nuclide-debugger-new/lib/ui/ScopesView.js",
                "pkg/nuclide-debugger-new/lib/ui/ThreadsView.js",
                "pkg/nuclide-debugger-new/lib/vsp/DebuggerModel.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "ea04272878103f3a9786f30b5c074e735c31b69c",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1520459903,
            "hunks": 2,
            "message": "Fix Navigation Stack buttons in the status bar Summary: I broke this in D7057761. Reviewed By: semmypurewal Differential Revision: D7184227 fbshipit-source-id: b6a138dc0d70bccc926b8599938f06015b30f0bc",
            "diff": [
                "diff --git a/pkg/nuclide-navigation-stack-status-bar/lib/StatusBar.js b/pkg/nuclide-navigation-stack-status-bar/lib/StatusBar.js",
                "index 2f57149e5..2caa76a13 100644",
                "--- a/pkg/nuclide-navigation-stack-status-bar/lib/StatusBar.js",
                "+++ b/pkg/nuclide-navigation-stack-status-bar/lib/StatusBar.js",
                "@@ -41,3 +41,3 @@ export function consumeStatusBar(",
                "     analytics.track('status-bar-nav-stack-clicked-back');",
                "-    navigationStack.navigateBackwards;",
                "+    navigationStack.navigateBackwards();",
                "   };",
                "@@ -45,3 +45,3 @@ export function consumeStatusBar(",
                "     analytics.track('status-bar-nav-stack-clicked-forward');",
                "-    navigationStack.navigateForwards;",
                "+    navigationStack.navigateForwards();",
                "   };"
            ],
            "changed_files": [
                "pkg/nuclide-navigation-stack-status-bar/lib/StatusBar.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.288.0",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "3471b20eae78929592be5b18464117c8c50d314a",
            "repository": "https://github.com/facebookarchive/nuclide",
            "timestamp": 1521484598,
            "hunks": 5,
            "message": "Monkeypatch project configs (7 of 7). Summary: Monkeypatch atom.config and atom.project to support project specific configs. Once https://github.com/atom/atom/pull/16845 is merged into atom, makes it into release, and then becomes supported by Nuclide, this should be removed. Note that this monkeypatch is behind the nuclide-atomprojects GK. Reviewed By: matthewwithanm Differential Revision: D7118459 fbshipit-source-id: ee6605614db823914906746a9ba5939d86bd68aa",
            "diff": [
                "diff --git a/lib/main.js b/lib/main.js",
                "index bcebbbdbd..c2412533e 100644",
                "--- a/lib/main.js",
                "+++ b/lib/main.js",
                "@@ -296,9 +296,13 @@ function mergeFeatureGroups(",
                "   for (const key in firstGroup) {",
                "-    mergedObject[key] = [...firstGroup[key], ...secondGroup[key]];",
                "+    mergedObject[key] = [",
                "+      ...(firstGroup[key] || []),",
                "+      ...(secondGroup[key] || []),",
                "+    ];",
                "   }",
                "-",
                "   for (const key in secondGroup) {",
                "-    mergedObject[key] = [...firstGroup[key], ...secondGroup[key]];",
                "+    mergedObject[key] = [",
                "+      ...(firstGroup[key] || []),",
                "+      ...(secondGroup[key] || []),",
                "+    ];",
                "   }",
                "-",
                "   return mergedObject;",
                "diff --git a/pkg/nuclide-remote-connection/lib/RemoteConnection.js b/pkg/nuclide-remote-connection/lib/RemoteConnection.js",
                "index 95b653c88..2c0ecda99 100644",
                "--- a/pkg/nuclide-remote-connection/lib/RemoteConnection.js",
                "+++ b/pkg/nuclide-remote-connection/lib/RemoteConnection.js",
                "@@ -107,2 +107,3 @@ export class RemoteConnection {",
                "       }",
                "+",
                "       if (atom.project.replace != null) {"
            ],
            "changed_files": [
                "lib/main.js",
                "pkg/nuclide-remote-connection/lib/RemoteConnection.js"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "modules-v0.7.2",
                "v0.290.0",
                "v0.291.0",
                "v0.293.0",
                "v0.296.0",
                "v0.297.0",
                "v0.299.0",
                "v0.300.0",
                "v0.301.0",
                "v0.301.1",
                "v0.302.0",
                "v0.303.0",
                "v0.305.0",
                "v0.307.0",
                "v0.310.0",
                "v0.311.0",
                "v0.315.0",
                "v0.317.0",
                "v0.319.0",
                "v0.321.0",
                "v0.323.0",
                "v0.324.0",
                "v0.327.0",
                "v0.328.0",
                "v0.332.0",
                "v0.333.0",
                "v0.335.0",
                "v0.337.0",
                "v0.338.0",
                "v0.339.0",
                "v0.341",
                "v0.341.0",
                "v0.345.0",
                "v0.346.0",
                "v0.349.0",
                "v0.351.0",
                "v0.353.0",
                "v0.354.0",
                "v0.357.0",
                "v0.360.0",
                "v0.362.0",
                "v0.366.0"
            ],
            "matched_rules": []
        }
    ]
}
