{
    "advisory_record": {
        "cve_id": "CVE-2018-1324",
        "description": "A specially crafted ZIP archive can be used to cause an infinite loop inside of Apache Commons Compress' extra field parser used by the ZipFile and ZipArchiveInputStream classes in versions 1.11 to 1.15. This can be used to mount a denial of service attack against services that use Compress' zip package.",
        "reserved_timestamp": 1512604800,
        "published_timestamp": 1521158400,
        "updated_timestamp": 1644244803,
        "repository_url": null,
        "references": {
            "": 76,
            "https://git-wip-us.apache.org/repos/asf?p=commons-compress.git;a=blobdiff;f=src/main/java/org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.java;h=acc3b22346b49845e85b5ef27a5814b69e834139;hp=0feb9c98cc622cde1defa3bbd268ef82b4ae5c18;hb=2a2f1dc48e22a34ddb72321a4db211da91aa933b;hpb=dcb0486fb4cb2b6592c04d6ec2edbd3f690df5f2": 4,
            "https://issues.apache.org/jira/browse/COMPRESS-432": 4,
            "http://www.securitytracker.com/id/1040549": 2,
            "https://lists.apache.org/thread.html/1c7b6df6d1c5c8583518a0afa017782924918e4d6acfaf23ed5b2089%40%3Cdev.commons.apache.org%3E": 2,
            "http://www.securityfocus.com/bid/103490": 2,
            "https://lists.apache.org/thread.html/ff8dcfe29377088ab655fda9d585dccd5b1f07fabd94ae84fd60a7f8%40%3Ccommits.pulsar.apache.org%3E": 2,
            "https://lists.apache.org/thread.html/b8ef29df0f1d55aa741170748352ae8e425c7b1d286b2f257711a2dd%40%3Cdev.creadur.apache.org%3E": 2,
            "https://lists.apache.org/thread.html/r5532dc8d5456b5151e8c286801e2e5769f5c04118b29c3b5d13ea387%40%3Cissues.beam.apache.org%3E": 2,
            "https://www.oracle.com/security-alerts/cpujan2022.html": 2,
            "https://commons.apache.org/proper/commons-compress/security-reports.html": 2,
            "https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax": 2,
            "https://docs.atlassian.com/jira/jcore-docs-0820/": 2,
            "http://www.atlassian.com/software/jira": 2,
            "https://github.com/features/actions": 1,
            "https://github.com/features/packages": 1,
            "https://github.com/features/security": 1,
            "https://github.com/features/codespaces": 1,
            "https://github.com/features/copilot": 1,
            "https://github.com/features/code-review": 1,
            "https://github.com/features/issues": 1,
            "https://github.com/features/discussions": 1,
            "https://github.com/features": 1,
            "https://docs.github.com": 1,
            "https://skills.github.com": 1,
            "https://github.blog": 1,
            "https://github.com/enterprise": 1,
            "https://github.com/team": 1,
            "https://github.com/enterprise/startups": 1,
            "https://github.com/solutions/industries/healthcare": 1,
            "https://github.com/solutions/industries/financial-services": 1,
            "https://github.com/solutions/industries/manufacturing": 1,
            "https://github.com/solutions/ci-cd": 1,
            "https://github.com/solutions/devops": 1,
            "https://github.com/solutions/devsecops": 1,
            "https://resources.github.com/learn/pathways": 1,
            "https://resources.github.com": 1,
            "https://github.com/customer-stories": 1,
            "https://partner.github.com": 1,
            "https://github.com/readme": 1,
            "https://github.com/topics": 1,
            "https://github.com/trending": 1,
            "https://github.com/collections": 1,
            "https://github.com/enterprise/advanced-security": 1,
            "https://github.com/pricing": 1,
            "commit::2a2f1dc48e22a34ddb72321a4db211da91aa933b": 1,
            "commit::dcb0486fb4cb2b6592c04d6ec2edbd3f690df5f2": 1,
            "https://github.co/hiddenchars": 1,
            "https://github.com": 1,
            "https://docs.github.com/site-policy/github-terms/github-terms-of-service": 1,
            "https://docs.github.com/site-policy/privacy-policies/github-privacy-statement": 1,
            "https://github.com/security": 1,
            "https://www.githubstatus.com/": 1,
            "https://docs.github.com/": 1,
            "https://support.github.com?tags=dotcom-footer": 1,
            "https://issues.apache.org/jira/secure/MyJiraHome.jspa": 1,
            "https://selfserve.apache.org/jira-account.html": 1,
            "https://www.atlassian.com/software/jira": 1,
            "http://www.atlassian.com/": 1
        },
        "affected_products": [
            "ZipArchiveInputStream",
            "ZIP",
            "Apache",
            "Compress",
            "Commons",
            "Apache Commons Compress",
            "ZipFile"
        ],
        "versions": {
            "status": "affected",
            "version": "1.11 to 1.15"
        },
        "files": [
            "ZipArchiveInputStream",
            "ZIP",
            "ZipFile"
        ],
        "keywords": [
            "cause",
            "compress",
            "apache",
            "class",
            "commons",
            "denial",
            "field",
            "version",
            "service",
            "archive",
            "package",
            "ziparchiveinputstream",
            "parser",
            "mount",
            "loop",
            "zipfile",
            "craft",
            "attack"
        ],
        "files_extension": [],
        "has_fixing_commit": true
    },
    "commits": [
        {
            "commit_id": "2a2f1dc48e22a34ddb72321a4db211da91aa933b",
            "repository": "https://github.com/apache/commons-compress",
            "timestamp": 1513967697,
            "hunks": 1,
            "message": "COMPRESS-432 make sure code doesn't get stuck in infinite loop",
            "diff": [
                "diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.java b/src/main/java/org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.java",
                "index 0feb9c98c..acc3b2234 100644",
                "--- a/src/main/java/org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.java",
                "+++ b/src/main/java/org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.java",
                "@@ -312,3 +312,3 @@ public class X0017_StrongEncryptionHeader extends PKWareExtraHeader {",
                "             // srlist... hashed public keys",
                "-            for (int i = 0; i < this.rcount; i++) {",
                "+            for (long i = 0; i < this.rcount; i++) {",
                "                 for (int j = 0; j < this.hashSize; j++) {"
            ],
            "changed_files": [
                "src/main/java/org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "COMPRESS-432": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.16-RC1",
                "1.16.1-RC1",
                "1.17-RC1",
                "1.18-RC1",
                "1.19-RC1",
                "1.20-RC1",
                "1.20-RC2",
                "1.21-RC1",
                "commons-compress-1.22",
                "commons-compress-1.22-RC1",
                "commons-compress-1.23.0-RC1",
                "commons-compress-1.24.0-RC1",
                "commons-compress-1.25.0-RC1",
                "commons-compress-1.26.0-RC1",
                "commons-compress-1.26.1-RC1",
                "commons-compress-1.26.2-RC1",
                "rel/1.16",
                "rel/1.16.1",
                "rel/1.17",
                "rel/1.18",
                "rel/1.19",
                "rel/1.20",
                "rel/1.21",
                "rel/1.22",
                "rel/commons-compress-1.23.0",
                "rel/commons-compress-1.24.0",
                "rel/commons-compress-1.25.0",
                "rel/commons-compress-1.26.0",
                "rel/commons-compress-1.26.1",
                "rel/commons-compress-1.26.2"
            ],
            "matched_rules": [
                {
                    "id": "XREF_BUG",
                    "message": "The commit and the advisory (including referenced pages) mention the same bug tracking ticket: COMPRESS-432",
                    "relevance": 32
                },
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 4 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: loop",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: archive",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: COMPRESS-432",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "dcb0486fb4cb2b6592c04d6ec2edbd3f690df5f2",
            "repository": "https://github.com/apache/commons-compress",
            "timestamp": 1513965729,
            "hunks": 6,
            "message": "COMPRESS-433 fix TarArchiveOutputStream javadocs, thanks to  Gerard Weatherby",
            "diff": [
                "diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java",
                "index 328b5a988..940ca4818 100644",
                "--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java",
                "+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java",
                "@@ -118,3 +118,3 @@ public class TarArchiveOutputStream extends ArchiveOutputStream {",
                "     /**",
                "-     * Constructor for TarInputStream.",
                "+     * Constructor for TarArchiveOutputStream.",
                "      *",
                "@@ -127,3 +127,3 @@ public class TarArchiveOutputStream extends ArchiveOutputStream {",
                "     /**",
                "-     * Constructor for TarInputStream.",
                "+     * Constructor for TarArchiveOutputStream.",
                "      *",
                "@@ -138,3 +138,3 @@ public class TarArchiveOutputStream extends ArchiveOutputStream {",
                "     /**",
                "-     * Constructor for TarInputStream.",
                "+     * Constructor for TarArchiveOutputStream.",
                "      *",
                "@@ -149,3 +149,3 @@ public class TarArchiveOutputStream extends ArchiveOutputStream {",
                "     /**",
                "-     * Constructor for TarInputStream.",
                "+     * Constructor for TarArchiveOutputStream.",
                "      *",
                "@@ -164,3 +164,3 @@ public class TarArchiveOutputStream extends ArchiveOutputStream {",
                "     /**",
                "-     * Constructor for TarInputStream.",
                "+     * Constructor for TarArchiveOutputStream.",
                "      *",
                "@@ -186,3 +186,3 @@ public class TarArchiveOutputStream extends ArchiveOutputStream {",
                "     /**",
                "-     * Constructor for TarInputStream.",
                "+     * Constructor for TarArchiveOutputStream.",
                "      *"
            ],
            "changed_files": [
                "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "COMPRESS-433": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.16-RC1",
                "1.16.1-RC1",
                "1.17-RC1",
                "1.18-RC1",
                "1.19-RC1",
                "1.20-RC1",
                "1.20-RC2",
                "1.21-RC1",
                "commons-compress-1.22",
                "commons-compress-1.22-RC1",
                "commons-compress-1.23.0-RC1",
                "commons-compress-1.24.0-RC1",
                "commons-compress-1.25.0-RC1",
                "commons-compress-1.26.0-RC1",
                "commons-compress-1.26.1-RC1",
                "commons-compress-1.26.2-RC1",
                "rel/1.16",
                "rel/1.16.1",
                "rel/1.17",
                "rel/1.18",
                "rel/1.19",
                "rel/1.20",
                "rel/1.21",
                "rel/1.22",
                "rel/commons-compress-1.23.0",
                "rel/commons-compress-1.24.0",
                "rel/commons-compress-1.25.0",
                "rel/commons-compress-1.26.0",
                "rel/commons-compress-1.26.1",
                "rel/commons-compress-1.26.2"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 4 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: archive",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: archive",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: COMPRESS-433",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6ae716d458c52e1fbe205c78edf37af4fbb304cf",
            "repository": "https://github.com/apache/commons-compress",
            "timestamp": 1514384370,
            "hunks": 1,
            "message": "COMPRESS-432 record fix",
            "diff": [
                "diff --git a/src/changes/changes.xml b/src/changes/changes.xml",
                "index aad1964dc..6b4f1d2c3 100644",
                "--- a/src/changes/changes.xml",
                "+++ b/src/changes/changes.xml",
                "@@ -58,2 +58,6 @@ The <action> type attribute can be add,update,fix,remove.",
                "       </action>",
                "+      <action issue=\"COMPRESS-432\" type=\"fix\" date=\"2017-12-22\">",
                "+        ZipFile could get stuck in an infinite loop when parsing ZIP",
                "+        archives with certain strong encryption headers.",
                "+      </action>",
                "       <action issue=\"COMPRESS-435\" type=\"update\" date=\"2017-12-27\""
            ],
            "changed_files": [
                "src/changes/changes.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "COMPRESS-432": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.16-RC1",
                "1.16.1-RC1",
                "1.17-RC1",
                "1.18-RC1",
                "1.19-RC1",
                "1.20-RC1",
                "1.20-RC2",
                "1.21-RC1",
                "commons-compress-1.22",
                "commons-compress-1.22-RC1",
                "commons-compress-1.23.0-RC1",
                "commons-compress-1.24.0-RC1",
                "commons-compress-1.25.0-RC1",
                "commons-compress-1.26.0-RC1",
                "commons-compress-1.26.1-RC1",
                "commons-compress-1.26.2-RC1",
                "rel/1.16",
                "rel/1.16.1",
                "rel/1.17",
                "rel/1.18",
                "rel/1.19",
                "rel/1.20",
                "rel/1.21",
                "rel/1.22",
                "rel/commons-compress-1.23.0",
                "rel/commons-compress-1.24.0",
                "rel/commons-compress-1.25.0",
                "rel/commons-compress-1.26.0",
                "rel/commons-compress-1.26.1",
                "rel/commons-compress-1.26.2"
            ],
            "matched_rules": [
                {
                    "id": "XREF_BUG",
                    "message": "The commit and the advisory (including referenced pages) mention the same bug tracking ticket: COMPRESS-432",
                    "relevance": 32
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: ZIP, ZipFile",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: COMPRESS-432",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "34b75c6f0ac96df0221bfbd11cafdc62dc0baa79",
            "repository": "https://github.com/apache/commons-compress",
            "timestamp": 1514467216,
            "hunks": 11,
            "message": "add write support for Zstandard",
            "diff": [
                "diff --git a/src/changes/changes.xml b/src/changes/changes.xml",
                "index 6b4f1d2c3..9662b41ed 100644",
                "--- a/src/changes/changes.xml",
                "+++ b/src/changes/changes.xml",
                "@@ -66,2 +66,5 @@ The <action> type attribute can be add,update,fix,remove.",
                "       </action>",
                "+      <action issue=\"COMPRESS-426\" type=\"add\" date=\"2017-12-28\">",
                "+        Added write-support for Zstandard compression.",
                "+      </action>",
                "     </release>",
                "diff --git a/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java b/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java",
                "index 234bf5ef9..0f03d30aa 100644",
                "--- a/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java",
                "+++ b/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java",
                "@@ -58,2 +58,3 @@ import org.apache.commons.compress.compressors.z.ZCompressorInputStream;",
                " import org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;",
                "+import org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream;",
                " import org.apache.commons.compress.compressors.zstandard.ZstdUtils;",
                "@@ -635,3 +636,3 @@ public class CompressorStreamFactory implements CompressorStreamProvider {",
                "      *            {@value #XZ}, {@value #PACK200}, {@value #SNAPPY_FRAMED},",
                "-     *            {@value #LZ4_BLOCK}, {@value #LZ4_FRAMED}",
                "+     *            {@value #LZ4_BLOCK}, {@value #LZ4_FRAMED}, {@value #ZSTANDARD}",
                "      *            or {@value #DEFLATE}",
                "@@ -690,2 +691,8 @@ public class CompressorStreamFactory implements CompressorStreamProvider {",
                "+            if (ZSTANDARD.equalsIgnoreCase(name)) {",
                "+                if (!ZstdUtils.isZstdCompressionAvailable()) {",
                "+                    throw new CompressorException(\"Zstandard compression is not available.\");",
                "+                }",
                "+                return new ZstdCompressorOutputStream(out);",
                "+            }",
                "         } catch (final IOException e) {",
                "@@ -733,3 +740,3 @@ public class CompressorStreamFactory implements CompressorStreamProvider {",
                "     public Set<String> getOutputStreamCompressorNames() {",
                "-        return Sets.newHashSet(GZIP, BZIP2, XZ, LZMA, PACK200, DEFLATE, SNAPPY_FRAMED, LZ4_BLOCK, LZ4_FRAMED);",
                "+        return Sets.newHashSet(GZIP, BZIP2, XZ, LZMA, PACK200, DEFLATE, SNAPPY_FRAMED, LZ4_BLOCK, LZ4_FRAMED, ZSTANDARD);",
                "     }",
                "diff --git a/src/main/java/org/apache/commons/compress/compressors/zstandard/ZstdCompressorOutputStream.java b/src/main/java/org/apache/commons/compress/compressors/zstandard/ZstdCompressorOutputStream.java",
                "new file mode 100644",
                "index 000000000..f4c7dbee4",
                "--- /dev/null",
                "+++ b/src/main/java/org/apache/commons/compress/compressors/zstandard/ZstdCompressorOutputStream.java",
                "@@ -0,0 +1,65 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.commons.compress.compressors.zstandard;",
                "+",
                "+",
                "+import java.io.IOException;",
                "+import java.io.OutputStream;",
                "+",
                "+import com.github.luben.zstd.ZstdOutputStream;",
                "+import org.apache.commons.compress.compressors.CompressorOutputStream;",
                "+",
                "+/**",
                "+ * {@link CompressorOutputStream} implementation to create Zstandard encoded stream.",
                "+ * Library relies on <a href=\"https://github.com/luben/zstd-jni/\">Zstandard JNI</a>",
                "+ *",
                "+ * @since 1.16",
                "+ */",
                "+public class ZstdCompressorOutputStream extends CompressorOutputStream {",
                "+",
                "+    private final com.github.luben.zstd.ZstdOutputStream encOS;",
                "+",
                "+    public ZstdCompressorOutputStream(final OutputStream out) throws IOException {",
                "+        this.encOS = new ZstdOutputStream(out);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void close() throws IOException {",
                "+        encOS.close();",
                "+    }",
                "+",
                "+    @Override",
                "+    public void write(final int b) throws IOException {",
                "+        encOS.write(b);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void write(final byte[] buf, final int off, final int len) throws IOException {",
                "+        encOS.write(buf, off, len);",
                "+    }",
                "+",
                "+    @Override",
                "+    public String toString() {",
                "+        return encOS.toString();",
                "+    }",
                "+",
                "+    @Override",
                "+    public void flush() throws IOException {",
                "+        encOS.flush();",
                "+    }",
                "+}",
                "diff --git a/src/main/java/org/apache/commons/compress/compressors/zstandard/package.html b/src/main/java/org/apache/commons/compress/compressors/zstandard/package.html",
                "index 1c105ab20..6deb74fcf 100644",
                "--- a/src/main/java/org/apache/commons/compress/compressors/zstandard/package.html",
                "+++ b/src/main/java/org/apache/commons/compress/compressors/zstandard/package.html",
                "@@ -20,3 +20,3 @@",
                "   <body>",
                "-    <p>Provides stream class for decompressing streams using the",
                "+    <p>Provides stream class for (de)compressing streams using the",
                "       Zstandard algorithm based",
                "diff --git a/src/site/xdoc/examples.xml b/src/site/xdoc/examples.xml",
                "index 83b1b7c9a..b6997b35d 100644",
                "--- a/src/site/xdoc/examples.xml",
                "+++ b/src/site/xdoc/examples.xml",
                "@@ -904,2 +904,20 @@ zsIn.close();",
                " ]]></source>",
                "+",
                "+        <p>Compressing a given file using the Zstandard format (you",
                "+        would certainly add exception handling and make sure all",
                "+        streams get closed properly):</p>",
                "+<source><![CDATA[",
                "+InputStream in = Files.newInputStream(Paths.get(\"archive.tar\"));",
                "+OutputStream fout = Files.newOutputStream(Paths.get(\"archive.tar.zstd\"));",
                "+BufferedOutputStream out = new BufferedInputStream(fout);",
                "+ZstdCompressorOutputStream zOut = new ZstdCompressorOutputStream(out);",
                "+final byte[] buffer = new byte[buffersize];",
                "+int n = 0;",
                "+while (-1 != (n = in.read(buffer))) {",
                "+    zOut.write(buffer, 0, n);",
                "+}",
                "+zOut.close();",
                "+in.close();",
                "+]]></source>",
                "+",
                "       </subsection>",
                "diff --git a/src/site/xdoc/index.xml b/src/site/xdoc/index.xml",
                "index 6218475c3..ea32924ef 100644",
                "--- a/src/site/xdoc/index.xml",
                "+++ b/src/site/xdoc/index.xml",
                "@@ -70,3 +70,3 @@",
                "             <ul>",
                "-              <li>Read-only support for Zstandard compression.</li>",
                "+              <li>Support for Zstandard compression.</li>",
                "             </ul>",
                "@@ -96,4 +96,4 @@",
                "             licensed <a href=\"https://github.com/luben/zstd-jni\">Zstd-jni</a>.",
                "-            As of Commons Compress 1.16 support for the Z, Zstandard",
                "-            and Brotli formats is read-only.</p>",
                "+            As of Commons Compress 1.16 support for the Z and Brotli",
                "+            formats is read-only.</p>",
                "diff --git a/src/site/xdoc/limitations.xml b/src/site/xdoc/limitations.xml",
                "index d6512043a..e86b2960c 100644",
                "--- a/src/site/xdoc/limitations.xml",
                "+++ b/src/site/xdoc/limitations.xml",
                "@@ -201,3 +201,2 @@",
                "          library.</li>",
                "-         <li>read-only support</li>",
                "        </ul>"
            ],
            "changed_files": [
                "src/changes/changes.xml",
                "src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java",
                "src/main/java/org/apache/commons/compress/compressors/zstandard/ZstdCompressorOutputStream.java",
                "src/main/java/org/apache/commons/compress/compressors/zstandard/package.html",
                "src/site/xdoc/examples.xml",
                "src/site/xdoc/index.xml",
                "src/site/xdoc/limitations.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.16-RC1",
                "1.16.1-RC1",
                "1.17-RC1",
                "1.18-RC1",
                "1.19-RC1",
                "1.20-RC1",
                "1.20-RC2",
                "1.21-RC1",
                "commons-compress-1.22",
                "commons-compress-1.22-RC1",
                "commons-compress-1.23.0-RC1",
                "commons-compress-1.24.0-RC1",
                "commons-compress-1.25.0-RC1",
                "commons-compress-1.26.0-RC1",
                "commons-compress-1.26.1-RC1",
                "commons-compress-1.26.2-RC1",
                "rel/1.16",
                "rel/1.16.1",
                "rel/1.17",
                "rel/1.18",
                "rel/1.19",
                "rel/1.20",
                "rel/1.21",
                "rel/1.22",
                "rel/commons-compress-1.23.0",
                "rel/commons-compress-1.24.0",
                "rel/commons-compress-1.25.0",
                "rel/commons-compress-1.26.0",
                "rel/commons-compress-1.26.1",
                "rel/commons-compress-1.26.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: ZIP",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: package",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "0c75ccec267ce902ff36278ba928b4573f4fb937",
            "repository": "https://github.com/apache/commons-compress",
            "timestamp": 1514627614,
            "hunks": 29,
            "message": "change bounds check to greater-equals to avoid arithmetic in loops",
            "diff": [
                "diff --git a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java",
                "index 06e2beea3..945ba3c9f 100644",
                "--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java",
                "+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java",
                "@@ -401,3 +401,3 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements",
                "-    private static void checkBounds(final int checkVal, final int limitInclusive, String name)",
                "+    private static void checkBounds(final int checkVal, final int limitExclusive, String name)",
                "         throws IOException {",
                "@@ -406,3 +406,3 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements",
                "         }",
                "-        if (checkVal > limitInclusive) {",
                "+        if (checkVal >= limitExclusive) {",
                "             throw new IOException(\"Corrupted input, \" + name + \" value too big\");",
                "@@ -433,3 +433,3 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements",
                "             final int l = length[i];",
                "-            checkBounds(l, MAX_ALPHA_SIZE - 1, \"length\");",
                "+            checkBounds(l, MAX_ALPHA_SIZE, \"length\");",
                "             base[l + 1]++;",
                "@@ -489,5 +489,5 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements",
                "         final int nSelectors = bsR(bin, 15);",
                "-        checkBounds(alphaSize, MAX_ALPHA_SIZE, \"alphaSize\");",
                "-        checkBounds(nGroups, N_GROUPS, \"nGroups\");",
                "-        checkBounds(nSelectors, MAX_SELECTORS, \"nSelectors\");",
                "+        checkBounds(alphaSize, MAX_ALPHA_SIZE + 1, \"alphaSize\");",
                "+        checkBounds(nGroups, N_GROUPS + 1, \"nGroups\");",
                "+        checkBounds(nSelectors, MAX_SELECTORS + 1, \"nSelectors\");",
                "@@ -508,3 +508,3 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements",
                "             int v = selectorMtf[i] & 0xff;",
                "-            checkBounds(v, N_GROUPS - 1, \"selectorMtf\");",
                "+            checkBounds(v, N_GROUPS, \"selectorMtf\");",
                "             final byte tmp = pos[v];",
                "@@ -601,3 +601,3 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements",
                "         int zt = selector[groupNo] & 0xff;",
                "-        checkBounds(zt, N_GROUPS - 1, \"zt\");",
                "+        checkBounds(zt, N_GROUPS, \"zt\");",
                "         int[] base_zt = base[zt];",
                "@@ -622,5 +622,5 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements",
                "                         groupPos = G_SIZE - 1;",
                "-                        checkBounds(++groupNo, MAX_SELECTORS - 1, \"groupNo\");",
                "+                        checkBounds(++groupNo, MAX_SELECTORS, \"groupNo\");",
                "                         zt = selector[groupNo] & 0xff;",
                "-                        checkBounds(zt, N_GROUPS - 1, \"zt\");",
                "+                        checkBounds(zt, N_GROUPS, \"zt\");",
                "                         base_zt = base[zt];",
                "@@ -634,6 +634,6 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements",
                "                     int zn = minLens_zt;",
                "-                    checkBounds(zn, MAX_ALPHA_SIZE - 1, \"zn\");",
                "+                    checkBounds(zn, MAX_ALPHA_SIZE, \"zn\");",
                "                     int zvec = bsR(bin, zn);",
                "                     while(zvec > limit_zt[zn]) {",
                "-                        checkBounds(++zn, MAX_ALPHA_SIZE - 1, \"zn\");",
                "+                        checkBounds(++zn, MAX_ALPHA_SIZE, \"zn\");",
                "                         zvec = (zvec << 1) | bsR(bin, 1);",
                "@@ -641,3 +641,3 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements",
                "                     final int tmp = zvec - base_zt[zn];",
                "-                    checkBounds(tmp, MAX_ALPHA_SIZE - 1, \"zvec\");",
                "+                    checkBounds(tmp, MAX_ALPHA_SIZE, \"zvec\");",
                "                     nextSym = perm_zt[tmp];",
                "@@ -646,3 +646,3 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements",
                "                 final int yy_0 = yy[0];",
                "-                checkBounds(yy_0, 255, \"yy\");",
                "+                checkBounds(yy_0, 256, \"yy\");",
                "                 final byte ch = seqToUnseq[yy_0];",
                "@@ -661,6 +661,6 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements",
                "                 }",
                "-                checkBounds(nextSym, 256, \"nextSym\");",
                "+                checkBounds(nextSym, 256 + 1, \"nextSym\");",
                "                 final char tmp = yy[nextSym - 1];",
                "-                checkBounds(tmp, 255, \"yy\");",
                "+                checkBounds(tmp, 256, \"yy\");",
                "                 unzftab[seqToUnseq[tmp] & 0xff]++;",
                "@@ -685,5 +685,5 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements",
                "                     groupPos = G_SIZE - 1;",
                "-                    checkBounds(++groupNo, MAX_SELECTORS - 1, \"groupNo\");",
                "+                    checkBounds(++groupNo, MAX_SELECTORS, \"groupNo\");",
                "                     zt = selector[groupNo] & 0xff;",
                "-                    checkBounds(zt, N_GROUPS - 1, \"zt\");",
                "+                    checkBounds(zt, N_GROUPS, \"zt\");",
                "                     base_zt = base[zt];",
                "@@ -697,6 +697,6 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements",
                "                 int zn = minLens_zt;",
                "-                checkBounds(zn, MAX_ALPHA_SIZE - 1, \"zn\");",
                "+                checkBounds(zn, MAX_ALPHA_SIZE, \"zn\");",
                "                 int zvec = bsR(bin, zn);",
                "                 while(zvec > limit_zt[zn]) {",
                "-                    checkBounds(++zn, MAX_ALPHA_SIZE - 1, \"zn\");",
                "+                    checkBounds(++zn, MAX_ALPHA_SIZE, \"zn\");",
                "                     zvec = (zvec << 1) | bsR(bin, 1);",
                "@@ -704,3 +704,3 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements",
                "                 final int idx = zvec - base_zt[zn];",
                "-                checkBounds(idx, MAX_ALPHA_SIZE - 1, \"zvec\");",
                "+                checkBounds(idx, MAX_ALPHA_SIZE, \"zvec\");",
                "                 nextSym = perm_zt[idx];",
                "@@ -715,9 +715,9 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements",
                "         final int zt = dataShadow.selector[0] & 0xff;",
                "-        checkBounds(zt, N_GROUPS - 1, \"zt\");",
                "+        checkBounds(zt, N_GROUPS, \"zt\");",
                "         final int[] limit_zt = dataShadow.limit[zt];",
                "         int zn = dataShadow.minLens[zt];",
                "-        checkBounds(zn, MAX_ALPHA_SIZE - 1, \"zn\");",
                "+        checkBounds(zn, MAX_ALPHA_SIZE, \"zn\");",
                "         int zvec = bsR(bin, zn);",
                "         while (zvec > limit_zt[zn]) {",
                "-            checkBounds(++zn, MAX_ALPHA_SIZE - 1, \"zn\");",
                "+            checkBounds(++zn, MAX_ALPHA_SIZE, \"zn\");",
                "             zvec = (zvec << 1) | bsR(bin, 1);",
                "@@ -725,3 +725,3 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements",
                "         final int tmp = zvec - dataShadow.base[zt][zn];",
                "-        checkBounds(tmp, MAX_ALPHA_SIZE - 1, \"zvec\");",
                "+        checkBounds(tmp, MAX_ALPHA_SIZE, \"zvec\");",
                "@@ -736,3 +736,4 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements",
                "         final int[] cftab = this.data.cftab;",
                "-        final int[] tt = this.data.initTT(this.last + 1);",
                "+        final int ttLen = this.last + 1;",
                "+        final int[] tt = this.data.initTT(ttLen);",
                "         final byte[] ll8 = this.data.ll8;",
                "@@ -748,3 +749,3 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements",
                "             final int tmp = cftab[ll8[i] & 0xff]++;",
                "-            checkBounds(tmp, this.last, \"tt index\");",
                "+            checkBounds(tmp, ttLen, \"tt index\");",
                "             tt[tmp] = i;",
                "@@ -773,3 +774,3 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements",
                "             int su_ch2Shadow = this.data.ll8[this.su_tPos] & 0xff;",
                "-            checkBounds(this.su_tPos, this.data.tt.length - 1, \"su_tPos\");",
                "+            checkBounds(this.su_tPos, this.data.tt.length, \"su_tPos\");",
                "             this.su_tPos = this.data.tt[this.su_tPos];",
                "@@ -799,3 +800,3 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements",
                "             this.su_ch2 = su_ch2Shadow;",
                "-            checkBounds(this.su_tPos, this.data.tt.length - 1, \"su_tPos\");",
                "+            checkBounds(this.su_tPos, this.data.tt.length, \"su_tPos\");",
                "             this.su_tPos = this.data.tt[this.su_tPos];",
                "@@ -819,3 +820,3 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements",
                "             this.su_z = (char) (this.data.ll8[this.su_tPos] & 0xff);",
                "-            checkBounds(this.su_tPos, this.data.tt.length - 1, \"su_tPos\");",
                "+            checkBounds(this.su_tPos, this.data.tt.length, \"su_tPos\");",
                "             this.su_tPos = this.data.tt[this.su_tPos];",
                "@@ -858,3 +859,3 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements",
                "         } else if (++this.su_count >= 4) {",
                "-            checkBounds(this.su_tPos, this.data.ll8.length - 1, \"su_tPos\");",
                "+            checkBounds(this.su_tPos, this.data.ll8.length, \"su_tPos\");",
                "             this.su_z = (char) (this.data.ll8[this.su_tPos] & 0xff);"
            ],
            "changed_files": [
                "src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.16-RC1",
                "1.16.1-RC1",
                "1.17-RC1",
                "1.18-RC1",
                "1.19-RC1",
                "1.20-RC1",
                "1.20-RC2",
                "1.21-RC1",
                "commons-compress-1.22",
                "commons-compress-1.22-RC1",
                "commons-compress-1.23.0-RC1",
                "commons-compress-1.24.0-RC1",
                "commons-compress-1.25.0-RC1",
                "commons-compress-1.26.0-RC1",
                "commons-compress-1.26.1-RC1",
                "commons-compress-1.26.2-RC1",
                "rel/1.16",
                "rel/1.16.1",
                "rel/1.17",
                "rel/1.18",
                "rel/1.19",
                "rel/1.20",
                "rel/1.21",
                "rel/1.22",
                "rel/commons-compress-1.23.0",
                "rel/commons-compress-1.24.0",
                "rel/commons-compress-1.25.0",
                "rel/commons-compress-1.26.0",
                "rel/commons-compress-1.26.1",
                "rel/commons-compress-1.26.2"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: loop",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "abd47125414b2bc66830bb511b213594ebf43437",
            "repository": "https://github.com/apache/commons-compress",
            "timestamp": 1514625221,
            "hunks": 1,
            "message": "ensure zstd test-archive is seen as binary",
            "diff": [
                "diff --git a/.gitattributes b/.gitattributes",
                "index 11ea3e92d..0fda71d64 100644",
                "--- a/.gitattributes",
                "+++ b/.gitattributes",
                "@@ -7,2 +7,3 @@",
                " *.yml                                   text",
                "+*.zst                                   binary",
                " .gitattributes                          text"
            ],
            "changed_files": [
                ".gitattributes"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.16-RC1",
                "1.16.1-RC1",
                "1.17-RC1",
                "1.18-RC1",
                "1.19-RC1",
                "1.20-RC1",
                "1.20-RC2",
                "1.21-RC1",
                "commons-compress-1.22",
                "commons-compress-1.22-RC1",
                "commons-compress-1.23.0-RC1",
                "commons-compress-1.24.0-RC1",
                "commons-compress-1.25.0-RC1",
                "commons-compress-1.26.0-RC1",
                "commons-compress-1.26.1-RC1",
                "commons-compress-1.26.2-RC1",
                "rel/1.16",
                "rel/1.16.1",
                "rel/1.17",
                "rel/1.18",
                "rel/1.19",
                "rel/1.20",
                "rel/1.21",
                "rel/1.22",
                "rel/commons-compress-1.23.0",
                "rel/commons-compress-1.24.0",
                "rel/commons-compress-1.25.0",
                "rel/commons-compress-1.26.0",
                "rel/commons-compress-1.26.1",
                "rel/commons-compress-1.26.2"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: archive",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "ecb6e94adf85c1e978d2ee040b33dddf475ce4c9",
            "repository": "https://github.com/apache/commons-compress",
            "timestamp": 1514628042,
            "hunks": 1,
            "message": "COMPRESS-424 record fix",
            "diff": [
                "diff --git a/src/changes/changes.xml b/src/changes/changes.xml",
                "index 9662b41ed..8d3bf9317 100644",
                "--- a/src/changes/changes.xml",
                "+++ b/src/changes/changes.xml",
                "@@ -69,2 +69,7 @@ The <action> type attribute can be add,update,fix,remove.",
                "       </action>",
                "+      <action issue=\"COMPRESS-424\" type=\"fix\" date=\"2017-12-30\">",
                "+        Added improved checks to detect corrupted bzip2 streams and",
                "+        throw the expected IOException rather than obscure",
                "+        RuntimeExceptions.",
                "+      </action>",
                "     </release>"
            ],
            "changed_files": [
                "src/changes/changes.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "COMPRESS-424": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.16-RC1",
                "1.16.1-RC1",
                "1.17-RC1",
                "1.18-RC1",
                "1.19-RC1",
                "1.20-RC1",
                "1.20-RC2",
                "1.21-RC1",
                "commons-compress-1.22",
                "commons-compress-1.22-RC1",
                "commons-compress-1.23.0-RC1",
                "commons-compress-1.24.0-RC1",
                "commons-compress-1.25.0-RC1",
                "commons-compress-1.26.0-RC1",
                "commons-compress-1.26.1-RC1",
                "commons-compress-1.26.2-RC1",
                "rel/1.16",
                "rel/1.16.1",
                "rel/1.17",
                "rel/1.18",
                "rel/1.19",
                "rel/1.20",
                "rel/1.21",
                "rel/1.22",
                "rel/commons-compress-1.23.0",
                "rel/commons-compress-1.24.0",
                "rel/commons-compress-1.25.0",
                "rel/commons-compress-1.26.0",
                "rel/commons-compress-1.26.1",
                "rel/commons-compress-1.26.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: COMPRESS-424",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "920831594efc8d25fd280d79682e9aa9aad22f23",
            "repository": "https://github.com/apache/commons-compress",
            "timestamp": 1514627664,
            "hunks": 0,
            "message": "Merge branch 'COMPRESS-424'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {
                "COMPRESS-424": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.16-RC1",
                "1.16.1-RC1",
                "1.17-RC1",
                "1.18-RC1",
                "1.19-RC1",
                "1.20-RC1",
                "1.20-RC2",
                "1.21-RC1",
                "commons-compress-1.22",
                "commons-compress-1.22-RC1",
                "commons-compress-1.23.0-RC1",
                "commons-compress-1.24.0-RC1",
                "commons-compress-1.25.0-RC1",
                "commons-compress-1.26.0-RC1",
                "commons-compress-1.26.1-RC1",
                "commons-compress-1.26.2-RC1",
                "rel/1.16",
                "rel/1.16.1",
                "rel/1.17",
                "rel/1.18",
                "rel/1.19",
                "rel/1.20",
                "rel/1.21",
                "rel/1.22",
                "rel/commons-compress-1.23.0",
                "rel/commons-compress-1.24.0",
                "rel/commons-compress-1.25.0",
                "rel/commons-compress-1.26.0",
                "rel/commons-compress-1.26.1",
                "rel/commons-compress-1.26.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: COMPRESS-424",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ccf4ce767a6cc07f1a88a0c33393e394af3c328b",
            "repository": "https://github.com/apache/commons-compress",
            "timestamp": 1514476963,
            "hunks": 29,
            "message": "COMPRESS-424 add array bounds checks, detect corrupted input",
            "diff": [
                "diff --git a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java",
                "index 17937e873..06e2beea3 100644",
                "--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java",
                "+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java",
                "@@ -401,2 +401,12 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements",
                "+    private static void checkBounds(final int checkVal, final int limitInclusive, String name)",
                "+        throws IOException {",
                "+        if (checkVal < 0) {",
                "+            throw new IOException(\"Corrupted input, \" + name + \" value negative\");",
                "+        }",
                "+        if (checkVal > limitInclusive) {",
                "+            throw new IOException(\"Corrupted input, \" + name + \" value too big\");",
                "+        }",
                "+    }",
                "+",
                "     /**",
                "@@ -406,3 +416,4 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements",
                "                                              final int[] base, final int[] perm, final char[] length,",
                "-                                             final int minLen, final int maxLen, final int alphaSize) {",
                "+                                             final int minLen, final int maxLen, final int alphaSize)",
                "+        throws IOException {",
                "         for (int i = minLen, pp = 0; i <= maxLen; i++) {",
                "@@ -421,3 +432,5 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements",
                "         for (int i = 0; i < alphaSize; i++) {",
                "-            base[length[i] + 1]++;",
                "+            final int l = length[i];",
                "+            checkBounds(l, MAX_ALPHA_SIZE - 1, \"length\");",
                "+            base[l + 1]++;",
                "         }",
                "@@ -476,2 +489,5 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements",
                "         final int nSelectors = bsR(bin, 15);",
                "+        checkBounds(alphaSize, MAX_ALPHA_SIZE, \"alphaSize\");",
                "+        checkBounds(nGroups, N_GROUPS, \"nGroups\");",
                "+        checkBounds(nSelectors, MAX_SELECTORS, \"nSelectors\");",
                "@@ -492,2 +508,3 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements",
                "             int v = selectorMtf[i] & 0xff;",
                "+            checkBounds(v, N_GROUPS - 1, \"selectorMtf\");",
                "             final byte tmp = pos[v];",
                "@@ -524,3 +541,3 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements",
                "     private void createHuffmanDecodingTables(final int alphaSize,",
                "-                                             final int nGroups) {",
                "+                                             final int nGroups) throws IOException {",
                "         final Data dataShadow = this.data;",
                "@@ -581,5 +598,6 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements",
                "         final int eob = this.nInUse + 1;",
                "-        int nextSym = getAndMoveToFrontDecode0(0);",
                "+        int nextSym = getAndMoveToFrontDecode0();",
                "         int lastShadow = -1;",
                "         int zt = selector[groupNo] & 0xff;",
                "+        checkBounds(zt, N_GROUPS - 1, \"zt\");",
                "         int[] base_zt = base[zt];",
                "@@ -604,3 +622,5 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements",
                "                         groupPos = G_SIZE - 1;",
                "-                        zt = selector[++groupNo] & 0xff;",
                "+                        checkBounds(++groupNo, MAX_SELECTORS - 1, \"groupNo\");",
                "+                        zt = selector[groupNo] & 0xff;",
                "+                        checkBounds(zt, N_GROUPS - 1, \"zt\");",
                "                         base_zt = base[zt];",
                "@@ -614,11 +634,16 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements",
                "                     int zn = minLens_zt;",
                "+                    checkBounds(zn, MAX_ALPHA_SIZE - 1, \"zn\");",
                "                     int zvec = bsR(bin, zn);",
                "                     while(zvec > limit_zt[zn]) {",
                "-                        zn++;",
                "+                        checkBounds(++zn, MAX_ALPHA_SIZE - 1, \"zn\");",
                "                         zvec = (zvec << 1) | bsR(bin, 1);",
                "                     }",
                "-                    nextSym = perm_zt[zvec - base_zt[zn]];",
                "+                    final int tmp = zvec - base_zt[zn];",
                "+                    checkBounds(tmp, MAX_ALPHA_SIZE - 1, \"zvec\");",
                "+                    nextSym = perm_zt[tmp];",
                "                 }",
                "-                final byte ch = seqToUnseq[yy[0]];",
                "+                final int yy_0 = yy[0];",
                "+                checkBounds(yy_0, 255, \"yy\");",
                "+                final byte ch = seqToUnseq[yy_0];",
                "                 unzftab[ch & 0xff] += s + 1;",
                "@@ -636,4 +661,6 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements",
                "                 }",
                "+                checkBounds(nextSym, 256, \"nextSym\");",
                "                 final char tmp = yy[nextSym - 1];",
                "+                checkBounds(tmp, 255, \"yy\");",
                "                 unzftab[seqToUnseq[tmp] & 0xff]++;",
                "@@ -658,3 +685,5 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements",
                "                     groupPos = G_SIZE - 1;",
                "-                    zt = selector[++groupNo] & 0xff;",
                "+                    checkBounds(++groupNo, MAX_SELECTORS - 1, \"groupNo\");",
                "+                    zt = selector[groupNo] & 0xff;",
                "+                    checkBounds(zt, N_GROUPS - 1, \"zt\");",
                "                     base_zt = base[zt];",
                "@@ -668,8 +697,11 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements",
                "                 int zn = minLens_zt;",
                "+                checkBounds(zn, MAX_ALPHA_SIZE - 1, \"zn\");",
                "                 int zvec = bsR(bin, zn);",
                "                 while(zvec > limit_zt[zn]) {",
                "-                    zn++;",
                "+                    checkBounds(++zn, MAX_ALPHA_SIZE - 1, \"zn\");",
                "                     zvec = (zvec << 1) | bsR(bin, 1);",
                "                 }",
                "-                nextSym = perm_zt[zvec - base_zt[zn]];",
                "+                final int idx = zvec - base_zt[zn];",
                "+                checkBounds(idx, MAX_ALPHA_SIZE - 1, \"zvec\");",
                "+                nextSym = perm_zt[idx];",
                "             }",
                "@@ -680,14 +712,18 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements",
                "-    private int getAndMoveToFrontDecode0(final int groupNo) throws IOException {",
                "+    private int getAndMoveToFrontDecode0() throws IOException {",
                "         final Data dataShadow = this.data;",
                "-        final int zt = dataShadow.selector[groupNo] & 0xff;",
                "+        final int zt = dataShadow.selector[0] & 0xff;",
                "+        checkBounds(zt, N_GROUPS - 1, \"zt\");",
                "         final int[] limit_zt = dataShadow.limit[zt];",
                "         int zn = dataShadow.minLens[zt];",
                "+        checkBounds(zn, MAX_ALPHA_SIZE - 1, \"zn\");",
                "         int zvec = bsR(bin, zn);",
                "         while (zvec > limit_zt[zn]) {",
                "-            zn++;",
                "+            checkBounds(++zn, MAX_ALPHA_SIZE - 1, \"zn\");",
                "             zvec = (zvec << 1) | bsR(bin, 1);",
                "         }",
                "+        final int tmp = zvec - dataShadow.base[zt][zn];",
                "+        checkBounds(tmp, MAX_ALPHA_SIZE - 1, \"zvec\");",
                "-        return dataShadow.perm[zt][zvec - dataShadow.base[zt][zn]];",
                "+        return dataShadow.perm[zt][tmp];",
                "     }",
                "@@ -711,3 +747,5 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements",
                "         for (int i = 0, lastShadow = this.last; i <= lastShadow; i++) {",
                "-            tt[cftab[ll8[i] & 0xff]++] = i;",
                "+            final int tmp = cftab[ll8[i] & 0xff]++;",
                "+            checkBounds(tmp, this.last, \"tt index\");",
                "+            tt[tmp] = i;",
                "         }",
                "@@ -735,2 +773,3 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements",
                "             int su_ch2Shadow = this.data.ll8[this.su_tPos] & 0xff;",
                "+            checkBounds(this.su_tPos, this.data.tt.length - 1, \"su_tPos\");",
                "             this.su_tPos = this.data.tt[this.su_tPos];",
                "@@ -760,2 +799,3 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements",
                "             this.su_ch2 = su_ch2Shadow;",
                "+            checkBounds(this.su_tPos, this.data.tt.length - 1, \"su_tPos\");",
                "             this.su_tPos = this.data.tt[this.su_tPos];",
                "@@ -779,2 +819,3 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements",
                "             this.su_z = (char) (this.data.ll8[this.su_tPos] & 0xff);",
                "+            checkBounds(this.su_tPos, this.data.tt.length - 1, \"su_tPos\");",
                "             this.su_tPos = this.data.tt[this.su_tPos];",
                "@@ -817,2 +858,3 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements",
                "         } else if (++this.su_count >= 4) {",
                "+            checkBounds(this.su_tPos, this.data.ll8.length - 1, \"su_tPos\");",
                "             this.su_z = (char) (this.data.ll8[this.su_tPos] & 0xff);"
            ],
            "changed_files": [
                "src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "COMPRESS-424": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.16-RC1",
                "1.16.1-RC1",
                "1.17-RC1",
                "1.18-RC1",
                "1.19-RC1",
                "1.20-RC1",
                "1.20-RC2",
                "1.21-RC1",
                "commons-compress-1.22",
                "commons-compress-1.22-RC1",
                "commons-compress-1.23.0-RC1",
                "commons-compress-1.24.0-RC1",
                "commons-compress-1.25.0-RC1",
                "commons-compress-1.26.0-RC1",
                "commons-compress-1.26.1-RC1",
                "commons-compress-1.26.2-RC1",
                "rel/1.16",
                "rel/1.16.1",
                "rel/1.17",
                "rel/1.18",
                "rel/1.19",
                "rel/1.20",
                "rel/1.21",
                "rel/1.22",
                "rel/commons-compress-1.23.0",
                "rel/commons-compress-1.24.0",
                "rel/commons-compress-1.25.0",
                "rel/commons-compress-1.26.0",
                "rel/commons-compress-1.26.1",
                "rel/commons-compress-1.26.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: COMPRESS-424",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9db5028656f9be41ae5809f88ddd4c8ac0b48364",
            "repository": "https://github.com/apache/commons-compress",
            "timestamp": 1514383657,
            "hunks": 13,
            "message": "COMPRESS-435 Replaces instanceof checks with a type marker in LZ77 support code. Submitted-By: BELUGA BEHR",
            "diff": [
                "diff --git a/src/changes/changes.xml b/src/changes/changes.xml",
                "index 9bd0a5243..aad1964dc 100644",
                "--- a/src/changes/changes.xml",
                "+++ b/src/changes/changes.xml",
                "@@ -58,2 +58,6 @@ The <action> type attribute can be add,update,fix,remove.",
                "       </action>",
                "+      <action issue=\"COMPRESS-435\" type=\"update\" date=\"2017-12-27\"",
                "+              due-to=\"BELUGA BEHR\">",
                "+        Replaces instanceof checks with a type marker in LZ77 support code.",
                "+      </action>",
                "     </release>",
                "diff --git a/src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java b/src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java",
                "index 9326023a1..2cce3a1ea 100644",
                "--- a/src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java",
                "+++ b/src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java",
                "@@ -118,9 +118,12 @@ public class BlockLZ4CompressorOutputStream extends CompressorOutputStream {",
                "                 public void accept(LZ77Compressor.Block block) throws IOException {",
                "-                    //System.err.println(block);",
                "-                    if (block instanceof LZ77Compressor.LiteralBlock) {",
                "+                    switch (block.getType()) {",
                "+                    case LITERAL:",
                "                         addLiteralBlock((LZ77Compressor.LiteralBlock) block);",
                "-                    } else if (block instanceof LZ77Compressor.BackReference) {",
                "+                        break;",
                "+                    case BACK_REFERENCE:",
                "                         addBackReference((LZ77Compressor.BackReference) block);",
                "-                    } else if (block instanceof LZ77Compressor.EOD) {",
                "+                        break;",
                "+                    case EOD:",
                "                         writeFinalLiteralBlock();",
                "+                        break;",
                "                     }",
                "diff --git a/src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java b/src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java",
                "index 537925937..082336a93 100644",
                "--- a/src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java",
                "+++ b/src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java",
                "@@ -86,6 +86,11 @@ public class LZ77Compressor {",
                "-    /**",
                "-     * Base class representing things the compressor may emit.",
                "-     */",
                "-    public static abstract class Block { }",
                "+    /** Base class representing blocks the compressor may emit. */",
                "+    public static abstract class Block {",
                "+        /** Enumeration of the block types the compressor may emit. */",
                "+        public static enum BlockType {",
                "+            LITERAL, BACK_REFERENCE, EOD",
                "+        }",
                "+        abstract public BlockType getType();",
                "+    }",
                "+",
                "     /**",
                "@@ -130,3 +135,6 @@ public class LZ77Compressor {",
                "         }",
                "-",
                "+        @Override",
                "+        public BlockType getType() {",
                "+            return BlockType.LITERAL;",
                "+        }",
                "         @Override",
                "@@ -136,2 +144,3 @@ public class LZ77Compressor {",
                "     }",
                "+",
                "     /**",
                "@@ -159,3 +168,6 @@ public class LZ77Compressor {",
                "         }",
                "-",
                "+        @Override",
                "+        public BlockType getType() {",
                "+            return BlockType.BACK_REFERENCE;",
                "+        }",
                "         @Override",
                "@@ -165,8 +177,9 @@ public class LZ77Compressor {",
                "     }",
                "-    /**",
                "-     * A simple \"we are done\" marker.",
                "-     */",
                "-    public static final class EOD extends Block { }",
                "-    private static final EOD THE_EOD = new EOD();",
                "+    /** A simple \"we are done\" marker. */",
                "+    private static final Block THE_EOD = new Block() {",
                "+        @Override",
                "+        public BlockType getType() {",
                "+            return BlockType.EOD;",
                "+        } };",
                "diff --git a/src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java b/src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java",
                "index 5705bec1f..93a9d80f9 100644",
                "--- a/src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java",
                "+++ b/src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java",
                "@@ -104,7 +104,11 @@ public class SnappyCompressorOutputStream extends CompressorOutputStream {",
                "                 public void accept(LZ77Compressor.Block block) throws IOException {",
                "-                    //System.err.println(block);",
                "-                    if (block instanceof LZ77Compressor.LiteralBlock) {",
                "+                    switch (block.getType()) {",
                "+                    case LITERAL:",
                "                         writeLiteralBlock((LZ77Compressor.LiteralBlock) block);",
                "-                    } else if (block instanceof LZ77Compressor.BackReference) {",
                "+                        break;",
                "+                    case BACK_REFERENCE:",
                "                         writeBackReference((LZ77Compressor.BackReference) block);",
                "+                        break;",
                "+                    case EOD:",
                "+                        break;",
                "                     }"
            ],
            "changed_files": [
                "src/changes/changes.xml",
                "src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java",
                "src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java",
                "src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "COMPRESS-435": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.16-RC1",
                "1.16.1-RC1",
                "1.17-RC1",
                "1.18-RC1",
                "1.19-RC1",
                "1.20-RC1",
                "1.20-RC2",
                "1.21-RC1",
                "commons-compress-1.22",
                "commons-compress-1.22-RC1",
                "commons-compress-1.23.0-RC1",
                "commons-compress-1.24.0-RC1",
                "commons-compress-1.25.0-RC1",
                "commons-compress-1.26.0-RC1",
                "commons-compress-1.26.1-RC1",
                "commons-compress-1.26.2-RC1",
                "rel/1.16",
                "rel/1.16.1",
                "rel/1.17",
                "rel/1.18",
                "rel/1.19",
                "rel/1.20",
                "rel/1.21",
                "rel/1.22",
                "rel/commons-compress-1.23.0",
                "rel/commons-compress-1.24.0",
                "rel/commons-compress-1.25.0",
                "rel/commons-compress-1.26.0",
                "rel/commons-compress-1.26.1",
                "rel/commons-compress-1.26.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: COMPRESS-435",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9190a2debf0f48fd03453b0edf44601612957463",
            "repository": "https://github.com/apache/commons-compress",
            "timestamp": 1514465864,
            "hunks": 1,
            "message": "bad extension in example",
            "diff": [
                "diff --git a/src/site/xdoc/examples.xml b/src/site/xdoc/examples.xml",
                "index cced8a8ab..83b1b7c9a 100644",
                "--- a/src/site/xdoc/examples.xml",
                "+++ b/src/site/xdoc/examples.xml",
                "@@ -892,3 +892,3 @@ in.close();",
                " <source><![CDATA[",
                "-InputStream fin = Files.newInputStream(Paths.get(\"archive.tar.br\"));",
                "+InputStream fin = Files.newInputStream(Paths.get(\"archive.tar.zstd\"));",
                " BufferedInputStream in = new BufferedInputStream(fin);"
            ],
            "changed_files": [
                "src/site/xdoc/examples.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.16-RC1",
                "1.16.1-RC1",
                "1.17-RC1",
                "1.18-RC1",
                "1.19-RC1",
                "1.20-RC1",
                "1.20-RC2",
                "1.21-RC1",
                "commons-compress-1.22",
                "commons-compress-1.22-RC1",
                "commons-compress-1.23.0-RC1",
                "commons-compress-1.24.0-RC1",
                "commons-compress-1.25.0-RC1",
                "commons-compress-1.26.0-RC1",
                "commons-compress-1.26.1-RC1",
                "commons-compress-1.26.2-RC1",
                "rel/1.16",
                "rel/1.16.1",
                "rel/1.17",
                "rel/1.18",
                "rel/1.19",
                "rel/1.20",
                "rel/1.21",
                "rel/1.22",
                "rel/commons-compress-1.23.0",
                "rel/commons-compress-1.24.0",
                "rel/commons-compress-1.25.0",
                "rel/commons-compress-1.26.0",
                "rel/commons-compress-1.26.1",
                "rel/commons-compress-1.26.2"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "48adbc5b44cb0d69d62b1725fcb085da8c5effff",
            "repository": "https://github.com/apache/commons-compress",
            "timestamp": 1514628594,
            "hunks": 1,
            "message": "update zstd dependency",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index bdaa7a7bf..09e4af1c2 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -78,3 +78,3 @@ Zstandard and ar, cpio, jar, tar, zip, dump, 7z, arj.",
                "       <artifactId>zstd-jni</artifactId>",
                "-      <version>1.3.1-1</version>",
                "+      <version>1.3.3-1</version>",
                "       <optional>true</optional>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.16-RC1",
                "1.16.1-RC1",
                "1.17-RC1",
                "1.18-RC1",
                "1.19-RC1",
                "1.20-RC1",
                "1.20-RC2",
                "1.21-RC1",
                "commons-compress-1.22",
                "commons-compress-1.22-RC1",
                "commons-compress-1.23.0-RC1",
                "commons-compress-1.24.0-RC1",
                "commons-compress-1.25.0-RC1",
                "commons-compress-1.26.0-RC1",
                "commons-compress-1.26.1-RC1",
                "commons-compress-1.26.2-RC1",
                "rel/1.16",
                "rel/1.16.1",
                "rel/1.17",
                "rel/1.18",
                "rel/1.19",
                "rel/1.20",
                "rel/1.21",
                "rel/1.22",
                "rel/commons-compress-1.23.0",
                "rel/commons-compress-1.24.0",
                "rel/commons-compress-1.25.0",
                "rel/commons-compress-1.26.0",
                "rel/commons-compress-1.26.1",
                "rel/commons-compress-1.26.2"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "0691adfaa9eb67a0f7e7f8c6804c55468be0e2e4",
            "repository": "https://github.com/apache/commons-compress",
            "timestamp": 1514628162,
            "hunks": 3,
            "message": "update zstd and xz dependencies",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index bdaa7a7bf..2b83e320b 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -78,3 +78,3 @@ Zstandard and ar, cpio, jar, tar, zip, dump, 7z, arj.",
                "       <artifactId>zstd-jni</artifactId>",
                "-      <version>1.3.1-1</version>",
                "+      <version>1.3.3-1</version>",
                "       <optional>true</optional>",
                "@@ -90,3 +90,3 @@ Zstandard and ar, cpio, jar, tar, zip, dump, 7z, arj.",
                "       <artifactId>xz</artifactId>",
                "-      <version>1.6</version>",
                "+      <version>1.7</version>",
                "       <optional>true</optional>",
                "diff --git a/src/changes/changes.xml b/src/changes/changes.xml",
                "index 8d3bf9317..2834c9206 100644",
                "--- a/src/changes/changes.xml",
                "+++ b/src/changes/changes.xml",
                "@@ -74,2 +74,6 @@ The <action> type attribute can be add,update,fix,remove.",
                "       </action>",
                "+      <action type=\"update\" date=\"2017-12-30\">",
                "+        Updated XZ for Java dependency to 1.7 in order to pick up bug",
                "+        fix to LZMA2InputStream's available method.",
                "+      </action>",
                "     </release>"
            ],
            "changed_files": [
                "pom.xml",
                "src/changes/changes.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.16-RC1",
                "1.16.1-RC1",
                "1.17-RC1",
                "1.18-RC1",
                "1.19-RC1",
                "1.20-RC1",
                "1.20-RC2",
                "1.21-RC1",
                "commons-compress-1.22",
                "commons-compress-1.22-RC1",
                "commons-compress-1.23.0-RC1",
                "commons-compress-1.24.0-RC1",
                "commons-compress-1.25.0-RC1",
                "commons-compress-1.26.0-RC1",
                "commons-compress-1.26.1-RC1",
                "commons-compress-1.26.2-RC1",
                "rel/1.16",
                "rel/1.16.1",
                "rel/1.17",
                "rel/1.18",
                "rel/1.19",
                "rel/1.20",
                "rel/1.21",
                "rel/1.22",
                "rel/commons-compress-1.23.0",
                "rel/commons-compress-1.24.0",
                "rel/commons-compress-1.25.0",
                "rel/commons-compress-1.26.0",
                "rel/commons-compress-1.26.1",
                "rel/commons-compress-1.26.2"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "6a80b208569f3d32e39224690a126e52ce06ad14",
            "repository": "https://github.com/apache/commons-compress",
            "timestamp": 1514632937,
            "hunks": 1,
            "message": "we don't check for XZ or Brotli in the outputstream case either",
            "diff": [
                "diff --git a/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java b/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java",
                "index 0f03d30aa..5c6063eff 100644",
                "--- a/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java",
                "+++ b/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java",
                "@@ -692,5 +692,2 @@ public class CompressorStreamFactory implements CompressorStreamProvider {",
                "             if (ZSTANDARD.equalsIgnoreCase(name)) {",
                "-                if (!ZstdUtils.isZstdCompressionAvailable()) {",
                "-                    throw new CompressorException(\"Zstandard compression is not available.\");",
                "-                }",
                "                 return new ZstdCompressorOutputStream(out);"
            ],
            "changed_files": [
                "src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.16-RC1",
                "1.16.1-RC1",
                "1.17-RC1",
                "1.18-RC1",
                "1.19-RC1",
                "1.20-RC1",
                "1.20-RC2",
                "1.21-RC1",
                "commons-compress-1.22",
                "commons-compress-1.22-RC1",
                "commons-compress-1.23.0-RC1",
                "commons-compress-1.24.0-RC1",
                "commons-compress-1.25.0-RC1",
                "commons-compress-1.26.0-RC1",
                "commons-compress-1.26.1-RC1",
                "commons-compress-1.26.2-RC1",
                "rel/1.16",
                "rel/1.16.1",
                "rel/1.17",
                "rel/1.18",
                "rel/1.19",
                "rel/1.20",
                "rel/1.21",
                "rel/1.22",
                "rel/commons-compress-1.23.0",
                "rel/commons-compress-1.24.0",
                "rel/commons-compress-1.25.0",
                "rel/commons-compress-1.26.0",
                "rel/commons-compress-1.26.1",
                "rel/commons-compress-1.26.2"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "de9665f3cbaee56c5089392fbee0a6b81689ed8d",
            "repository": "https://github.com/apache/commons-compress",
            "timestamp": 1514633088,
            "hunks": 5,
            "message": "improve error message if an 3rd party library is missing",
            "diff": [
                "diff --git a/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java b/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java",
                "index 5c6063eff..e6a44005b 100644",
                "--- a/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java",
                "+++ b/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java",
                "@@ -203,2 +203,10 @@ public class CompressorStreamFactory implements CompressorStreamProvider {",
                "+    private static final String YOU_NEED_BROTLI_DEC = youNeed(\"Google Brotli Dec\", \"https://github.com/google/brotli/\");",
                "+    private static final String YOU_NEED_XZ_JAVA = youNeed(\"XZ for Java\", \"https://tukaani.org/xz/java.html\");",
                "+    private static final String YOU_NEED_ZSTD_JNI = youNeed(\"Zstd JNI\", \"https://github.com/luben/zstd-jni\");",
                "+",
                "+    private static String youNeed(String name, String url) {",
                "+        return \" In addition to Apache Commons Compress you need the \" + name + \" library - see \" + url;",
                "+    }",
                "+",
                "     /**",
                "@@ -564,3 +572,3 @@ public class CompressorStreamFactory implements CompressorStreamProvider {",
                "                 if (!BrotliUtils.isBrotliCompressionAvailable()) {",
                "-                    throw new CompressorException(\"Brotli compression is not available.\");",
                "+                    throw new CompressorException(\"Brotli compression is not available.\" + YOU_NEED_BROTLI_DEC);",
                "                 }",
                "@@ -571,3 +579,3 @@ public class CompressorStreamFactory implements CompressorStreamProvider {",
                "                 if (!XZUtils.isXZCompressionAvailable()) {",
                "-                    throw new CompressorException(\"XZ compression is not available.\");",
                "+                    throw new CompressorException(\"XZ compression is not available.\" + YOU_NEED_XZ_JAVA);",
                "                 }",
                "@@ -578,3 +586,3 @@ public class CompressorStreamFactory implements CompressorStreamProvider {",
                "                 if (!ZstdUtils.isZstdCompressionAvailable()) {",
                "-                    throw new CompressorException(\"Zstandard compression is not available.\");",
                "+                    throw new CompressorException(\"Zstandard compression is not available.\" + YOU_NEED_ZSTD_JNI);",
                "                 }",
                "@@ -585,3 +593,3 @@ public class CompressorStreamFactory implements CompressorStreamProvider {",
                "                 if (!LZMAUtils.isLZMACompressionAvailable()) {",
                "-                    throw new CompressorException(\"LZMA compression is not available\");",
                "+                    throw new CompressorException(\"LZMA compression is not available\" + YOU_NEED_XZ_JAVA);",
                "                 }"
            ],
            "changed_files": [
                "src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.16-RC1",
                "1.16.1-RC1",
                "1.17-RC1",
                "1.18-RC1",
                "1.19-RC1",
                "1.20-RC1",
                "1.20-RC2",
                "1.21-RC1",
                "commons-compress-1.22",
                "commons-compress-1.22-RC1",
                "commons-compress-1.23.0-RC1",
                "commons-compress-1.24.0-RC1",
                "commons-compress-1.25.0-RC1",
                "commons-compress-1.26.0-RC1",
                "commons-compress-1.26.1-RC1",
                "commons-compress-1.26.2-RC1",
                "rel/1.16",
                "rel/1.16.1",
                "rel/1.17",
                "rel/1.18",
                "rel/1.19",
                "rel/1.20",
                "rel/1.21",
                "rel/1.22",
                "rel/commons-compress-1.23.0",
                "rel/commons-compress-1.24.0",
                "rel/commons-compress-1.25.0",
                "rel/commons-compress-1.26.0",
                "rel/commons-compress-1.26.1",
                "rel/commons-compress-1.26.2"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "79c1753add68280b0cdc1018047786fb68d02c73",
            "repository": "https://github.com/apache/commons-compress",
            "timestamp": 1514465324,
            "hunks": 1,
            "message": "mention ZSTANDARD as supported format in factory's javadoc",
            "diff": [
                "diff --git a/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java b/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java",
                "index 3a1f2dc60..b81b45101 100644",
                "--- a/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java",
                "+++ b/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java",
                "@@ -527,3 +527,3 @@ public class CompressorStreamFactory implements CompressorStreamProvider {",
                "      *            {@value #SNAPPY_RAW}, {@value #SNAPPY_FRAMED}, {@value #Z},",
                "-     *            {@value #LZ4_BLOCK}, {@value #LZ4_FRAMED}",
                "+     *            {@value #LZ4_BLOCK}, {@value #LZ4_FRAMED}, {@value #ZSTANDARD}",
                "      *            or {@value #DEFLATE}"
            ],
            "changed_files": [
                "src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.16-RC1",
                "1.16.1-RC1",
                "1.17-RC1",
                "1.18-RC1",
                "1.19-RC1",
                "1.20-RC1",
                "1.20-RC2",
                "1.21-RC1",
                "commons-compress-1.22",
                "commons-compress-1.22-RC1",
                "commons-compress-1.23.0-RC1",
                "commons-compress-1.24.0-RC1",
                "commons-compress-1.25.0-RC1",
                "commons-compress-1.26.0-RC1",
                "commons-compress-1.26.1-RC1",
                "commons-compress-1.26.2-RC1",
                "rel/1.16",
                "rel/1.16.1",
                "rel/1.17",
                "rel/1.18",
                "rel/1.19",
                "rel/1.20",
                "rel/1.21",
                "rel/1.22",
                "rel/commons-compress-1.23.0",
                "rel/commons-compress-1.24.0",
                "rel/commons-compress-1.25.0",
                "rel/commons-compress-1.26.0",
                "rel/commons-compress-1.26.1",
                "rel/commons-compress-1.26.2"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "810ba6f292cb4eca0d843555c1e8985d9df977c4",
            "repository": "https://github.com/apache/commons-compress",
            "timestamp": 1514465839,
            "hunks": 1,
            "message": "use the more conventional \"zstd\" as abbreviation of Zstandard",
            "diff": [
                "diff --git a/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java b/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java",
                "index b81b45101..234bf5ef9 100644",
                "--- a/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java",
                "+++ b/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java",
                "@@ -200,3 +200,3 @@ public class CompressorStreamFactory implements CompressorStreamProvider {",
                "      */",
                "-    public static final String ZSTANDARD = \"zst\";",
                "+    public static final String ZSTANDARD = \"zstd\";"
            ],
            "changed_files": [
                "src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.16-RC1",
                "1.16.1-RC1",
                "1.17-RC1",
                "1.18-RC1",
                "1.19-RC1",
                "1.20-RC1",
                "1.20-RC2",
                "1.21-RC1",
                "commons-compress-1.22",
                "commons-compress-1.22-RC1",
                "commons-compress-1.23.0-RC1",
                "commons-compress-1.24.0-RC1",
                "commons-compress-1.25.0-RC1",
                "commons-compress-1.26.0-RC1",
                "commons-compress-1.26.1-RC1",
                "commons-compress-1.26.2-RC1",
                "rel/1.16",
                "rel/1.16.1",
                "rel/1.17",
                "rel/1.18",
                "rel/1.19",
                "rel/1.20",
                "rel/1.21",
                "rel/1.22",
                "rel/commons-compress-1.23.0",
                "rel/commons-compress-1.24.0",
                "rel/commons-compress-1.25.0",
                "rel/commons-compress-1.26.0",
                "rel/commons-compress-1.26.1",
                "rel/commons-compress-1.26.2"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "ecd1fbe0f3857617f75d5e197aba3d25a3f7944f",
            "repository": "https://github.com/apache/commons-compress",
            "timestamp": 1514628543,
            "hunks": 3,
            "message": "Revert \"update zstd and xz dependencies\" - XZ now requires Java8 This reverts commit 0691adfaa9eb67a0f7e7f8c6804c55468be0e2e4.",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 2b83e320b..bdaa7a7bf 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -78,3 +78,3 @@ Zstandard and ar, cpio, jar, tar, zip, dump, 7z, arj.",
                "       <artifactId>zstd-jni</artifactId>",
                "-      <version>1.3.3-1</version>",
                "+      <version>1.3.1-1</version>",
                "       <optional>true</optional>",
                "@@ -90,3 +90,3 @@ Zstandard and ar, cpio, jar, tar, zip, dump, 7z, arj.",
                "       <artifactId>xz</artifactId>",
                "-      <version>1.7</version>",
                "+      <version>1.6</version>",
                "       <optional>true</optional>",
                "diff --git a/src/changes/changes.xml b/src/changes/changes.xml",
                "index 2834c9206..8d3bf9317 100644",
                "--- a/src/changes/changes.xml",
                "+++ b/src/changes/changes.xml",
                "@@ -74,6 +74,2 @@ The <action> type attribute can be add,update,fix,remove.",
                "       </action>",
                "-      <action type=\"update\" date=\"2017-12-30\">",
                "-        Updated XZ for Java dependency to 1.7 in order to pick up bug",
                "-        fix to LZMA2InputStream's available method.",
                "-      </action>",
                "     </release>"
            ],
            "changed_files": [
                "pom.xml",
                "src/changes/changes.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.16-RC1",
                "1.16.1-RC1",
                "1.17-RC1",
                "1.18-RC1",
                "1.19-RC1",
                "1.20-RC1",
                "1.20-RC2",
                "1.21-RC1",
                "commons-compress-1.22",
                "commons-compress-1.22-RC1",
                "commons-compress-1.23.0-RC1",
                "commons-compress-1.24.0-RC1",
                "commons-compress-1.25.0-RC1",
                "commons-compress-1.26.0-RC1",
                "commons-compress-1.26.1-RC1",
                "commons-compress-1.26.2-RC1",
                "rel/1.16",
                "rel/1.16.1",
                "rel/1.17",
                "rel/1.18",
                "rel/1.19",
                "rel/1.20",
                "rel/1.21",
                "rel/1.22",
                "rel/commons-compress-1.23.0",
                "rel/commons-compress-1.24.0",
                "rel/commons-compress-1.25.0",
                "rel/commons-compress-1.26.0",
                "rel/commons-compress-1.26.1",
                "rel/commons-compress-1.26.2"
            ],
            "matched_rules": []
        }
    ]
}
