{
    "advisory_record": {
        "cve_id": "CVE-2018-1259",
        "description": "Spring Data Commons, versions 1.13 prior to 1.13.12 and 2.0 prior to 2.0.7, used in combination with XMLBeam 1.4.14 or earlier versions, contains a property binder vulnerability caused by improper restriction of XML external entity references as underlying library XMLBeam does not restrict external reference expansion. An unauthenticated remote malicious user can supply specially crafted request parameters against Spring Data's projection-based request payload binding to access arbitrary files on the system.",
        "reserved_timestamp": 1512518400,
        "published_timestamp": 1525824000,
        "updated_timestamp": 1658512672,
        "repository_url": null,
        "references": {
            "": 32,
            "https://access.redhat.com/support/": 10,
            "https://access.redhat.com/downloads/": 8,
            "https://access.redhat.com/errata/": 6,
            "https://access.redhat.com/labs/": 6,
            "https://access.redhat.com/errata/RHSA-2018:1809": 4,
            "https://access.redhat.com/errata/RHSA-2018:3768": 4,
            "https://pivotal.io/security/cve-2018-1259": 4,
            "https://access.redhat.com/management/": 4,
            "https://access.redhat.com/": 4,
            "https://access.redhat.com/products/red-hat-enterprise-linux/": 4,
            "https://access.redhat.com/products/red-hat-openshift-container-platform": 4,
            "https://access.redhat.com/products/red-hat-ansible-automation-platform/": 4,
            "https://access.redhat.com/products/": 4,
            "https://access.redhat.com/documentation": 4,
            "https://access.redhat.com/product-life-cycles/": 4,
            "https://access.redhat.com/security": 4,
            "https://access.redhat.com/security/security-updates/#/security-advisories": 4,
            "https://access.redhat.com/security/security-updates/#/cve": 4,
            "https://access.redhat.com/support/contact/": 4,
            "https://status.redhat.com": 4,
            "https://www.oracle.com/security-alerts/cpujul2022.html": 2,
            "https://jira.spring.io/browse/DATACMNS-1292": 2,
            "https://access.redhat.com/downloads/content/package-browser": 2,
            "https://catalog.redhat.com/software/containers/explore/": 2,
            "https://access.redhat.com/articles/1202803": 2,
            "https://access.redhat.com/search/?q=*&p=1&rows=10&documentKind=Solution": 2,
            "https://access.redhat.com/search/?q=*&p=1&rows=10&documentKind=Article": 2,
            "https://access.redhat.com/documentation/en/red_hat_enterprise_linux": 2,
            "https://access.redhat.com/documentation/en/openshift_container_platform": 2,
            "https://access.redhat.com/documentation/en/red_hat_ansible_automation_platform": 2,
            "https://access.redhat.com/documentation/": 2,
            "https://access.redhat.com/security/": 2,
            "https://access.redhat.com/security/vulnerabilities": 2,
            "https://access.redhat.com/security/data": 2,
            "https://access.redhat.com/security/security-updates/#/security-labs": 2,
            "https://access.redhat.com/security/updates/backporting/": 2,
            "https://access.redhat.com/support/cases/": 2,
            "https://access.redhat.com/support/cases/#/troubleshoot": 2,
            "https://access.redhat.com/community": 2,
            "https://access.redhat.com/community/": 2,
            "https://access.redhat.com/discussions/": 2,
            "https://access.redhat.com/announcements/": 2,
            "https://access.redhat.com/accelerators/": 2,
            "https://access.redhat.com/jbossnetwork/restricted/listSoftware.html": 2,
            "https://cloud.redhat.com/insights": 2,
            "https://access.redhat.com/changeLanguage?language=en": 2,
            "https://access.redhat.com/changeLanguage?language=fr": 2,
            "https://access.redhat.com/changeLanguage?language=ko": 2,
            "https://access.redhat.com/changeLanguage?language=ja": 2,
            "https://access.redhat.com/changeLanguage?language=zh_CN": 2,
            "https://access.redhat.com/products/red-hat-satellite/": 2,
            "https://access.redhat.com/products/red-hat-subscription-management/": 2,
            "https://access.redhat.com/products/red-hat-insights/": 2,
            "https://access.redhat.com/products/red-hat-openstack-platform/": 2,
            "https://access.redhat.com/products/red-hat-openshift-container-platform/": 2,
            "https://access.redhat.com/products/red-hat-openshift-ai/": 2,
            "https://access.redhat.com/products/openshift-dedicated-red-hat/": 2,
            "https://access.redhat.com/products/red-hat-advanced-cluster-security-for-kubernetes/": 2,
            "https://access.redhat.com/products/red-hat-advanced-cluster-management-for-kubernetes/": 2,
            "https://access.redhat.com/products/red-hat-quay/": 2,
            "https://access.redhat.com/products/red-hat-openshift-dev-spaces": 2,
            "https://access.redhat.com/products/red-hat-openshift-service-aws": 2,
            "https://access.redhat.com/products/red-hat-storage/": 2,
            "https://access.redhat.com/products/red-hat-hyperconverged-infrastructure/": 2,
            "https://access.redhat.com/products/red-hat-ceph-storage/": 2,
            "https://access.redhat.com/products/red-hat-openshift-data-foundation": 2,
            "https://access.redhat.com/products/red-hat-runtimes/": 2,
            "https://access.redhat.com/products/red-hat-jboss-enterprise-application-platform/": 2,
            "https://access.redhat.com/products/red-hat-data-grid/": 2,
            "https://access.redhat.com/products/red-hat-jboss-web-server/": 2,
            "https://access.redhat.com/products/red-hat-build-of-keycloak/": 2,
            "https://access.redhat.com/products/spring-boot/": 2,
            "https://access.redhat.com/products/nodejs/": 2,
            "https://access.redhat.com/products/quarkus/": 2,
            "https://access.redhat.com/products/red-hat-application-foundations/": 2,
            "https://access.redhat.com/products/red-hat-fuse/": 2,
            "https://access.redhat.com/products/red-hat-amq/": 2,
            "https://access.redhat.com/products/red-hat-3scale/": 2,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1578578": 2,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1578902": 2,
            "https://www.redhat.com/security/data/cve/CVE-2018-1257.html": 2,
            "https://www.redhat.com/security/data/cve/CVE-2018-1259.html": 2,
            "https://access.redhat.com/security/updates/classification/#important": 2,
            "https://access.redhat.com/security/team/contact/": 2,
            "https://redhat.com/en": 2,
            "https://twitter.com/RedHat": 2,
            "https://access.redhat.com/management": 2,
            "https://access.redhat.com/support": 2,
            "https://access.redhat.com/support/customer-service": 2,
            "https://access.redhat.com/articles/33844": 2,
            "https://access.redhat.com/help/login_assistance": 2,
            "https://www.redhat.com/en/trust": 2,
            "https://www.redhat.com/en/about/browser-support": 2,
            "https://www.redhat.com/en/about/digital-accessibility": 2,
            "https://access.redhat.com/recognition/": 2,
            "https://access.redhat.com/help/colophon/": 2,
            "https://www.redhat.com/": 2,
            "http://developers.redhat.com/": 2,
            "https://connect.redhat.com/": 2,
            "https://cloud.redhat.com/": 2,
            "https://access.redhat.com/subscription-value": 2,
            "https://www.redhat.com/about/": 2,
            "http://jobs.redhat.com": 2,
            "https://redhat.com/en/about/company": 2,
            "https://redhat.com/en/jobs": 2,
            "https://redhat.com/en/events": 2,
            "https://redhat.com/en/about/office-locations": 2,
            "https://redhat.com/en/contact": 2,
            "https://redhat.com/en/blog": 2,
            "https://redhat.com/en/about/our-culture/diversity-equity-inclusion": 2,
            "https://coolstuff.redhat.com/": 2,
            "https://www.redhat.com/en/summit": 2,
            "https://redhat.com/en/about/privacy-policy": 2,
            "https://redhat.com/en/about/terms-use": 2,
            "https://redhat.com/en/about/all-policies-guidelines": 2,
            "https://redhat.com/en/about/digital-accessibility": 2,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1584376": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-1260.html": 1,
            "https://access.redhat.com/jbossnetwork/restricted/listSoftware.html?product=catRhoar.spring.boot&downloadType=distributions&version=1.5.13": 1,
            "https://access.redhat.com/documentation/en-us/red_hat_openshift_application_runtimes/1/html-single/red_hat_openshift_application_runtimes_release_notes/": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1503055": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1508110": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1508123": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1579611": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1591072": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1595332": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1607591": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1607731": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1611059": 1,
            "https://bugzilla.redhat.com/show_bug.cgi?id=1612644": 1,
            "https://www.redhat.com/security/data/cve/CVE-2016-5002.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2016-5003.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2017-12196.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-1288.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-1336.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-8014.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-8018.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-8039.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-8041.html": 1,
            "https://www.redhat.com/security/data/cve/CVE-2018-12537.html": 1,
            "https://access.redhat.com/jbossnetwork/restricted/listSoftware.html?product=jboss.fuse&downloadType=distributions&version=7.2.0": 1,
            "https://access.redhat.com/documentation/en-us/red_hat_fuse/7.2/": 1,
            "https://access.redhat.com/articles/2939351": 1
        },
        "affected_products": [
            "Spring",
            "Data",
            "Spring Data Commons",
            "XMLBeam",
            "Commons"
        ],
        "versions": {
            "status": "affected",
            "version": "1.13 prior to 1.13.12; 2.0 prior to 2.0.7"
        },
        "files": [
            "XMLBeam",
            "XML",
            "projection-based"
        ],
        "keywords": [
            "spring",
            "restrict",
            "supply",
            "projection",
            "data",
            "library",
            "binder",
            "expansion",
            "file",
            "access",
            "parameter",
            "entity",
            "reference",
            "craft",
            "combination",
            "vulnerability",
            "commons",
            "request",
            "contain",
            "user",
            "system",
            "base",
            "xmlbeam",
            "payload",
            "property",
            "bind",
            "restriction",
            "cause",
            "version"
        ],
        "files_extension": [],
        "has_fixing_commit": false
    },
    "commits": [
        {
            "commit_id": "a387355b70ef7b6727ba9a833fe98e61337c8600",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1516793432,
            "hunks": 6,
            "message": "DATACMNS-1249 - Fix line endings to LF.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/geo/Box.java b/src/main/java/org/springframework/data/geo/Box.java",
                "index 7794d73a7..7dd1b7481 100644",
                "--- a/src/main/java/org/springframework/data/geo/Box.java",
                "+++ b/src/main/java/org/springframework/data/geo/Box.java",
                "@@ -1,127 +1,127 @@",
                "-/*",
                "- * Copyright 2010-2014 the original author or authors.",
                "- *",
                "- * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "- * you may not use this file except in compliance with the License.",
                "- * You may obtain a copy of the License at",
                "- *",
                "- *      http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- * See the License for the specific language governing permissions and",
                "- * limitations under the License.",
                "- */",
                "-package org.springframework.data.geo;",
                "-",
                "-import org.springframework.lang.Nullable;",
                "-import org.springframework.util.Assert;",
                "-",
                "-/**",
                "- * Represents a geospatial box value",
                "- * ",
                "- * @author Mark Pollack",
                "- * @author Oliver Gierke",
                "- * @author Thomas Darimont",
                "- * @since 1.8",
                "- */",
                "-public class Box implements Shape {",
                "-",
                "-\tprivate static final long serialVersionUID = 8198095179084040711L;",
                "-",
                "-\tprivate final Point first;",
                "-\tprivate final Point second;",
                "-",
                "-\t/**",
                "-\t * Creates a new Box spanning from the given first to the second {@link Point}.",
                "-\t * ",
                "-\t * @param first must not be {@literal null}.",
                "-\t * @param second must not be {@literal null}.",
                "-\t */",
                "-\tpublic Box(Point first, Point second) {",
                "-",
                "-\t\tAssert.notNull(first, \"First point must not be null!\");",
                "-\t\tAssert.notNull(second, \"Second point must not be null!\");",
                "-",
                "-\t\tthis.first = first;",
                "-\t\tthis.second = second;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Creates a new Box from the given {@code first} to the {@code second} point represented as the {@literal double[]}.",
                "-\t * ",
                "-\t * @param first must not be {@literal null} and contain exactly 2 doubles.",
                "-\t * @param second must not be {@literal null} and contain exactly 2 doubles.",
                "-\t */",
                "-\tpublic Box(double[] first, double[] second) {",
                "-",
                "-\t\tAssert.isTrue(first.length == 2, \"Point array has to have 2 elements!\");",
                "-\t\tAssert.isTrue(second.length == 2, \"Point array has to have 2 elements!\");",
                "-",
                "-\t\tthis.first = new Point(first[0], first[1]);",
                "-\t\tthis.second = new Point(second[0], second[1]);",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Returns the first {@link Point} making up the {@link Box}.",
                "-\t * ",
                "-\t * @return",
                "-\t */",
                "-\tpublic Point getFirst() {",
                "-\t\treturn first;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Returns the second {@link Point} making up the {@link Box}.",
                "-\t * ",
                "-\t * @return",
                "-\t */",
                "-\tpublic Point getSecond() {",
                "-\t\treturn second;",
                "-\t}",
                "-",
                "-\t/*",
                "-\t * (non-Javadoc)",
                "-\t * @see java.lang.Object#toString()",
                "-\t */",
                "-\t@Override",
                "-\tpublic String toString() {",
                "-\t\treturn String.format(\"Box [%s, %s]\", first, second);",
                "-\t}",
                "-",
                "-\t/*",
                "-\t * (non-Javadoc)",
                "-\t * @see java.lang.Object#hashCode()",
                "-\t */",
                "-\t@Override",
                "-\tpublic int hashCode() {",
                "-",
                "-\t\tint result = 31;",
                "-",
                "-\t\tresult += 17 * first.hashCode();",
                "-\t\tresult += 17 * second.hashCode();",
                "-",
                "-\t\treturn result;",
                "-\t}",
                "-",
                "-\t/*",
                "-\t * (non-Javadoc)",
                "-\t * @see java.lang.Object#equals(java.lang.Object)",
                "-\t */",
                "-\t@Override",
                "-\tpublic boolean equals(@Nullable Object obj) {",
                "-",
                "-\t\tif (this == obj) {",
                "-\t\t\treturn true;",
                "-\t\t}",
                "-",
                "-\t\tif (!(obj instanceof Box)) {",
                "-\t\t\treturn false;",
                "-\t\t}",
                "-",
                "-\t\tBox that = (Box) obj;",
                "-",
                "-\t\treturn this.first.equals(that.first) && this.second.equals(that.second);",
                "-\t}",
                "-}",
                "+/*",
                "+ * Copyright 2010-2014 the original author or authors.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.springframework.data.geo;",
                "+",
                "+import org.springframework.lang.Nullable;",
                "+import org.springframework.util.Assert;",
                "+",
                "+/**",
                "+ * Represents a geospatial box value",
                "+ * ",
                "+ * @author Mark Pollack",
                "+ * @author Oliver Gierke",
                "+ * @author Thomas Darimont",
                "+ * @since 1.8",
                "+ */",
                "+public class Box implements Shape {",
                "+",
                "+\tprivate static final long serialVersionUID = 8198095179084040711L;",
                "+",
                "+\tprivate final Point first;",
                "+\tprivate final Point second;",
                "+",
                "+\t/**",
                "+\t * Creates a new Box spanning from the given first to the second {@link Point}.",
                "+\t * ",
                "+\t * @param first must not be {@literal null}.",
                "+\t * @param second must not be {@literal null}.",
                "+\t */",
                "+\tpublic Box(Point first, Point second) {",
                "+",
                "+\t\tAssert.notNull(first, \"First point must not be null!\");",
                "+\t\tAssert.notNull(second, \"Second point must not be null!\");",
                "+",
                "+\t\tthis.first = first;",
                "+\t\tthis.second = second;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Creates a new Box from the given {@code first} to the {@code second} point represented as the {@literal double[]}.",
                "+\t * ",
                "+\t * @param first must not be {@literal null} and contain exactly 2 doubles.",
                "+\t * @param second must not be {@literal null} and contain exactly 2 doubles.",
                "+\t */",
                "+\tpublic Box(double[] first, double[] second) {",
                "+",
                "+\t\tAssert.isTrue(first.length == 2, \"Point array has to have 2 elements!\");",
                "+\t\tAssert.isTrue(second.length == 2, \"Point array has to have 2 elements!\");",
                "+",
                "+\t\tthis.first = new Point(first[0], first[1]);",
                "+\t\tthis.second = new Point(second[0], second[1]);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Returns the first {@link Point} making up the {@link Box}.",
                "+\t * ",
                "+\t * @return",
                "+\t */",
                "+\tpublic Point getFirst() {",
                "+\t\treturn first;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Returns the second {@link Point} making up the {@link Box}.",
                "+\t * ",
                "+\t * @return",
                "+\t */",
                "+\tpublic Point getSecond() {",
                "+\t\treturn second;",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see java.lang.Object#toString()",
                "+\t */",
                "+\t@Override",
                "+\tpublic String toString() {",
                "+\t\treturn String.format(\"Box [%s, %s]\", first, second);",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see java.lang.Object#hashCode()",
                "+\t */",
                "+\t@Override",
                "+\tpublic int hashCode() {",
                "+",
                "+\t\tint result = 31;",
                "+",
                "+\t\tresult += 17 * first.hashCode();",
                "+\t\tresult += 17 * second.hashCode();",
                "+",
                "+\t\treturn result;",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see java.lang.Object#equals(java.lang.Object)",
                "+\t */",
                "+\t@Override",
                "+\tpublic boolean equals(@Nullable Object obj) {",
                "+",
                "+\t\tif (this == obj) {",
                "+\t\t\treturn true;",
                "+\t\t}",
                "+",
                "+\t\tif (!(obj instanceof Box)) {",
                "+\t\t\treturn false;",
                "+\t\t}",
                "+",
                "+\t\tBox that = (Box) obj;",
                "+",
                "+\t\treturn this.first.equals(that.first) && this.second.equals(that.second);",
                "+\t}",
                "+}",
                "diff --git a/src/main/java/org/springframework/data/geo/Circle.java b/src/main/java/org/springframework/data/geo/Circle.java",
                "index 6ef02c064..29ff24c08 100644",
                "--- a/src/main/java/org/springframework/data/geo/Circle.java",
                "+++ b/src/main/java/org/springframework/data/geo/Circle.java",
                "@@ -1,104 +1,104 @@",
                "-/*",
                "- * Copyright 2010-2014 the original author or authors.",
                "- *",
                "- * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "- * you may not use this file except in compliance with the License.",
                "- * You may obtain a copy of the License at",
                "- *",
                "- *      http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- * See the License for the specific language governing permissions and",
                "- * limitations under the License.",
                "- */",
                "-package org.springframework.data.geo;",
                "-",
                "-import lombok.EqualsAndHashCode;",
                "-",
                "-import org.springframework.data.annotation.PersistenceConstructor;",
                "-import org.springframework.util.Assert;",
                "-",
                "-/**",
                "- * Represents a geospatial circle value",
                "- * ",
                "- * @author Mark Pollack",
                "- * @author Oliver Gierke",
                "- * @author Thomas Darimont",
                "- * @since 1.8",
                "- */",
                "-@EqualsAndHashCode",
                "-public class Circle implements Shape {",
                "-",
                "-\tprivate static final long serialVersionUID = 5215611530535947924L;",
                "-",
                "-\tprivate final Point center;",
                "-\tprivate final Distance radius;",
                "-",
                "-\t/**",
                "-\t * Creates a new {@link Circle} from the given {@link Point} and radius.",
                "-\t * ",
                "-\t * @param center must not be {@literal null}.",
                "-\t * @param radius must not be {@literal null} and it's value greater or equal to zero.",
                "-\t */",
                "-\t@PersistenceConstructor",
                "-\tpublic Circle(Point center, Distance radius) {",
                "-",
                "-\t\tAssert.notNull(center, \"Center point must not be null!\");",
                "-\t\tAssert.notNull(radius, \"Radius must not be null!\");",
                "-\t\tAssert.isTrue(radius.getValue() >= 0, \"Radius must not be negative!\");",
                "-",
                "-\t\tthis.center = center;",
                "-\t\tthis.radius = radius;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Creates a new {@link Circle} from the given {@link Point} and radius.",
                "-\t * ",
                "-\t * @param center must not be {@literal null}.",
                "-\t * @param radius's value must be greater or equal to zero.",
                "-\t */",
                "-\tpublic Circle(Point center, double radius) {",
                "-\t\tthis(center, new Distance(radius));",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Creates a new {@link Circle} from the given coordinates and radius as {@link Distance} with a",
                "-\t * {@link Metrics#NEUTRAL}.",
                "-\t * ",
                "-\t * @param centerX",
                "-\t * @param centerY",
                "-\t * @param radius must be greater or equal to zero.",
                "-\t */",
                "-\tpublic Circle(double centerX, double centerY, double radius) {",
                "-\t\tthis(new Point(centerX, centerY), new Distance(radius));",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Returns the center of the {@link Circle}.",
                "-\t * ",
                "-\t * @return will never be {@literal null}.",
                "-\t */",
                "-\tpublic Point getCenter() {",
                "-\t\treturn center;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Returns the radius of the {@link Circle}.",
                "-\t * ",
                "-\t * @return",
                "-\t */",
                "-\tpublic Distance getRadius() {",
                "-\t\treturn radius;",
                "-\t}",
                "-",
                "-\t/*",
                "-\t * (non-Javadoc)",
                "-\t * @see java.lang.Object#toString()",
                "-\t */",
                "-\t@Override",
                "-\tpublic String toString() {",
                "-\t\treturn String.format(\"Circle: [center=%s, radius=%s]\", center, radius);",
                "-\t}",
                "-}",
                "+/*",
                "+ * Copyright 2010-2014 the original author or authors.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.springframework.data.geo;",
                "+",
                "+import lombok.EqualsAndHashCode;",
                "+",
                "+import org.springframework.data.annotation.PersistenceConstructor;",
                "+import org.springframework.util.Assert;",
                "+",
                "+/**",
                "+ * Represents a geospatial circle value",
                "+ * ",
                "+ * @author Mark Pollack",
                "+ * @author Oliver Gierke",
                "+ * @author Thomas Darimont",
                "+ * @since 1.8",
                "+ */",
                "+@EqualsAndHashCode",
                "+public class Circle implements Shape {",
                "+",
                "+\tprivate static final long serialVersionUID = 5215611530535947924L;",
                "+",
                "+\tprivate final Point center;",
                "+\tprivate final Distance radius;",
                "+",
                "+\t/**",
                "+\t * Creates a new {@link Circle} from the given {@link Point} and radius.",
                "+\t * ",
                "+\t * @param center must not be {@literal null}.",
                "+\t * @param radius must not be {@literal null} and it's value greater or equal to zero.",
                "+\t */",
                "+\t@PersistenceConstructor",
                "+\tpublic Circle(Point center, Distance radius) {",
                "+",
                "+\t\tAssert.notNull(center, \"Center point must not be null!\");",
                "+\t\tAssert.notNull(radius, \"Radius must not be null!\");",
                "+\t\tAssert.isTrue(radius.getValue() >= 0, \"Radius must not be negative!\");",
                "+",
                "+\t\tthis.center = center;",
                "+\t\tthis.radius = radius;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Creates a new {@link Circle} from the given {@link Point} and radius.",
                "+\t * ",
                "+\t * @param center must not be {@literal null}.",
                "+\t * @param radius's value must be greater or equal to zero.",
                "+\t */",
                "+\tpublic Circle(Point center, double radius) {",
                "+\t\tthis(center, new Distance(radius));",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Creates a new {@link Circle} from the given coordinates and radius as {@link Distance} with a",
                "+\t * {@link Metrics#NEUTRAL}.",
                "+\t * ",
                "+\t * @param centerX",
                "+\t * @param centerY",
                "+\t * @param radius must be greater or equal to zero.",
                "+\t */",
                "+\tpublic Circle(double centerX, double centerY, double radius) {",
                "+\t\tthis(new Point(centerX, centerY), new Distance(radius));",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Returns the center of the {@link Circle}.",
                "+\t * ",
                "+\t * @return will never be {@literal null}.",
                "+\t */",
                "+\tpublic Point getCenter() {",
                "+\t\treturn center;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Returns the radius of the {@link Circle}.",
                "+\t * ",
                "+\t * @return",
                "+\t */",
                "+\tpublic Distance getRadius() {",
                "+\t\treturn radius;",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see java.lang.Object#toString()",
                "+\t */",
                "+\t@Override",
                "+\tpublic String toString() {",
                "+\t\treturn String.format(\"Circle: [center=%s, radius=%s]\", center, radius);",
                "+\t}",
                "+}",
                "diff --git a/src/main/java/org/springframework/data/geo/Point.java b/src/main/java/org/springframework/data/geo/Point.java",
                "index e5bf6a865..480f6adba 100644",
                "--- a/src/main/java/org/springframework/data/geo/Point.java",
                "+++ b/src/main/java/org/springframework/data/geo/Point.java",
                "@@ -1,137 +1,137 @@",
                "-/*",
                "- * Copyright 2010-2014 the original author or authors.",
                "- *",
                "- * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "- * you may not use this file except in compliance with the License.",
                "- * You may obtain a copy of the License at",
                "- *",
                "- *      http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- * See the License for the specific language governing permissions and",
                "- * limitations under the License.",
                "- */",
                "-package org.springframework.data.geo;",
                "-",
                "-import java.io.Serializable;",
                "-import java.util.Locale;",
                "-",
                "-import org.springframework.data.annotation.PersistenceConstructor;",
                "-import org.springframework.lang.Nullable;",
                "-import org.springframework.util.Assert;",
                "-",
                "-/**",
                "- * Represents a geospatial point value.",
                "- * ",
                "- * @author Mark Pollack",
                "- * @author Oliver Gierke",
                "- * @author Thomas Darimont",
                "- * @since 1.8",
                "- */",
                "-public class Point implements Serializable {",
                "-",
                "-\tprivate static final long serialVersionUID = 3583151228933783558L;",
                "-",
                "-\tprivate final double x;",
                "-\tprivate final double y;",
                "-",
                "-\t/**",
                "-\t * Creates a {@link Point} from the given {@code x}, {@code y} coordinate.",
                "-\t * ",
                "-\t * @param x",
                "-\t * @param y",
                "-\t */",
                "-\t@PersistenceConstructor",
                "-\tpublic Point(double x, double y) {",
                "-\t\tthis.x = x;",
                "-\t\tthis.y = y;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Creates a {@link Point} from the given {@link Point} coordinate.",
                "-\t * ",
                "-\t * @param point must not be {@literal null}.",
                "-\t */",
                "-\tpublic Point(Point point) {",
                "-",
                "-\t\tAssert.notNull(point, \"Source point must not be null!\");",
                "-",
                "-\t\tthis.x = point.x;",
                "-\t\tthis.y = point.y;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Returns the x-coordinate of the {@link Point}.",
                "-\t * ",
                "-\t * @return",
                "-\t */",
                "-\tpublic double getX() {",
                "-\t\treturn x;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Returns the y-coordinate of the {@link Point}.",
                "-\t * ",
                "-\t * @return",
                "-\t */",
                "-\tpublic double getY() {",
                "-\t\treturn y;",
                "-\t}",
                "-",
                "-\t/*",
                "-\t * (non-Javadoc)",
                "-\t * @see java.lang.Object#hashCode()",
                "-\t */",
                "-\t@Override",
                "-\tpublic int hashCode() {",
                "-",
                "-\t\tint result = 1;",
                "-",
                "-\t\tlong temp = Double.doubleToLongBits(x);",
                "-\t\tresult = 31 * result + (int) (temp ^ temp >>> 32);",
                "-",
                "-\t\ttemp = Double.doubleToLongBits(y);",
                "-\t\tresult = 31 * result + (int) (temp ^ temp >>> 32);",
                "-",
                "-\t\treturn result;",
                "-\t}",
                "-",
                "-\t/*",
                "-\t * (non-Javadoc)",
                "-\t * @see java.lang.Object#equals(java.lang.Object)",
                "-\t */",
                "-\t@Override",
                "-\tpublic boolean equals(@Nullable Object obj) {",
                "-",
                "-\t\tif (this == obj) {",
                "-\t\t\treturn true;",
                "-\t\t}",
                "-",
                "-\t\tif (!(obj instanceof Point)) {",
                "-\t\t\treturn false;",
                "-\t\t}",
                "-",
                "-\t\tPoint other = (Point) obj;",
                "-",
                "-\t\tif (Double.doubleToLongBits(x) != Double.doubleToLongBits(other.x)) {",
                "-\t\t\treturn false;",
                "-\t\t}",
                "-",
                "-\t\tif (Double.doubleToLongBits(y) != Double.doubleToLongBits(other.y)) {",
                "-\t\t\treturn false;",
                "-\t\t}",
                "-",
                "-\t\treturn true;",
                "-\t}",
                "-",
                "-\t/*",
                "-\t * (non-Javadoc)",
                "-\t * @see java.lang.Object#toString()",
                "-\t */",
                "-\t@Override",
                "-\tpublic String toString() {",
                "-\t\treturn String.format(Locale.ENGLISH, \"Point [x=%f, y=%f]\", x, y);",
                "-\t}",
                "-}",
                "+/*",
                "+ * Copyright 2010-2014 the original author or authors.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.springframework.data.geo;",
                "+",
                "+import java.io.Serializable;",
                "+import java.util.Locale;",
                "+",
                "+import org.springframework.data.annotation.PersistenceConstructor;",
                "+import org.springframework.lang.Nullable;",
                "+import org.springframework.util.Assert;",
                "+",
                "+/**",
                "+ * Represents a geospatial point value.",
                "+ * ",
                "+ * @author Mark Pollack",
                "+ * @author Oliver Gierke",
                "+ * @author Thomas Darimont",
                "+ * @since 1.8",
                "+ */",
                "+public class Point implements Serializable {",
                "+",
                "+\tprivate static final long serialVersionUID = 3583151228933783558L;",
                "+",
                "+\tprivate final double x;",
                "+\tprivate final double y;",
                "+",
                "+\t/**",
                "+\t * Creates a {@link Point} from the given {@code x}, {@code y} coordinate.",
                "+\t * ",
                "+\t * @param x",
                "+\t * @param y",
                "+\t */",
                "+\t@PersistenceConstructor",
                "+\tpublic Point(double x, double y) {",
                "+\t\tthis.x = x;",
                "+\t\tthis.y = y;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Creates a {@link Point} from the given {@link Point} coordinate.",
                "+\t * ",
                "+\t * @param point must not be {@literal null}.",
                "+\t */",
                "+\tpublic Point(Point point) {",
                "+",
                "+\t\tAssert.notNull(point, \"Source point must not be null!\");",
                "+",
                "+\t\tthis.x = point.x;",
                "+\t\tthis.y = point.y;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Returns the x-coordinate of the {@link Point}.",
                "+\t * ",
                "+\t * @return",
                "+\t */",
                "+\tpublic double getX() {",
                "+\t\treturn x;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Returns the y-coordinate of the {@link Point}.",
                "+\t * ",
                "+\t * @return",
                "+\t */",
                "+\tpublic double getY() {",
                "+\t\treturn y;",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see java.lang.Object#hashCode()",
                "+\t */",
                "+\t@Override",
                "+\tpublic int hashCode() {",
                "+",
                "+\t\tint result = 1;",
                "+",
                "+\t\tlong temp = Double.doubleToLongBits(x);",
                "+\t\tresult = 31 * result + (int) (temp ^ temp >>> 32);",
                "+",
                "+\t\ttemp = Double.doubleToLongBits(y);",
                "+\t\tresult = 31 * result + (int) (temp ^ temp >>> 32);",
                "+",
                "+\t\treturn result;",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see java.lang.Object#equals(java.lang.Object)",
                "+\t */",
                "+\t@Override",
                "+\tpublic boolean equals(@Nullable Object obj) {",
                "+",
                "+\t\tif (this == obj) {",
                "+\t\t\treturn true;",
                "+\t\t}",
                "+",
                "+\t\tif (!(obj instanceof Point)) {",
                "+\t\t\treturn false;",
                "+\t\t}",
                "+",
                "+\t\tPoint other = (Point) obj;",
                "+",
                "+\t\tif (Double.doubleToLongBits(x) != Double.doubleToLongBits(other.x)) {",
                "+\t\t\treturn false;",
                "+\t\t}",
                "+",
                "+\t\tif (Double.doubleToLongBits(y) != Double.doubleToLongBits(other.y)) {",
                "+\t\t\treturn false;",
                "+\t\t}",
                "+",
                "+\t\treturn true;",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see java.lang.Object#toString()",
                "+\t */",
                "+\t@Override",
                "+\tpublic String toString() {",
                "+\t\treturn String.format(Locale.ENGLISH, \"Point [x=%f, y=%f]\", x, y);",
                "+\t}",
                "+}",
                "diff --git a/src/main/java/org/springframework/data/util/AnnotationDetectionFieldCallback.java b/src/main/java/org/springframework/data/util/AnnotationDetectionFieldCallback.java",
                "index a7cadfbdf..3813f0222 100755",
                "--- a/src/main/java/org/springframework/data/util/AnnotationDetectionFieldCallback.java",
                "+++ b/src/main/java/org/springframework/data/util/AnnotationDetectionFieldCallback.java",
                "@@ -1,138 +1,138 @@",
                "-/*",
                "- * Copyright 2012-2017 the original author or authors.",
                "- *",
                "- * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "- * you may not use this file except in compliance with the License.",
                "- * You may obtain a copy of the License at",
                "- *",
                "- *      http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- * See the License for the specific language governing permissions and",
                "- * limitations under the License.",
                "- */",
                "-package org.springframework.data.util;",
                "-",
                "-import java.lang.annotation.Annotation;",
                "-import java.lang.reflect.Field;",
                "-",
                "-import org.springframework.core.annotation.AnnotatedElementUtils;",
                "-import org.springframework.lang.Nullable;",
                "-import org.springframework.util.Assert;",
                "-import org.springframework.util.ReflectionUtils;",
                "-import org.springframework.util.ReflectionUtils.FieldCallback;",
                "-",
                "-/**",
                "- * A {@link FieldCallback} that will inspect each field for a given annotation. This field's type can then be accessed",
                "- * afterwards.",
                "- * ",
                "- * @author Oliver Gierke",
                "- * @author Christoph Strobl",
                "- */",
                "-public class AnnotationDetectionFieldCallback implements FieldCallback {",
                "-",
                "-\tprivate final Class<? extends Annotation> annotationType;",
                "-\tprivate @Nullable Field field;",
                "-",
                "-\t/**",
                "-\t * Creates a new {@link AnnotationDetectionFieldCallback} scanning for an annotation of the given type.",
                "-\t * ",
                "-\t * @param annotationType must not be {@literal null}.",
                "-\t */",
                "-\tpublic AnnotationDetectionFieldCallback(Class<? extends Annotation> annotationType) {",
                "-",
                "-\t\tAssert.notNull(annotationType, \"AnnotationType must not be null!\");",
                "-",
                "-\t\tthis.annotationType = annotationType;",
                "-\t}",
                "-",
                "-\t/*",
                "-\t * (non-Javadoc)",
                "-\t * @see org.springframework.util.ReflectionUtils.FieldCallback#doWith(java.lang.reflect.Field)",
                "-\t */",
                "-\tpublic void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {",
                "-",
                "-\t\tif (this.field != null) {",
                "-\t\t\treturn;",
                "-\t\t}",
                "-",
                "-\t\tif (AnnotatedElementUtils.findMergedAnnotation(field, annotationType) != null) {",
                "-",
                "-\t\t\tReflectionUtils.makeAccessible(field);",
                "-\t\t\tthis.field = field;",
                "-\t\t}",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Returns the detected field.",
                "-\t * ",
                "-\t * @return the field",
                "-\t */",
                "-\t@Nullable",
                "-\tpublic Field getField() {",
                "-\t\treturn field;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Returns the field that was detected.",
                "-\t * ",
                "-\t * @return",
                "-\t * @throws IllegalStateException in case no field with the configured annotation was found.",
                "-\t */",
                "-\tpublic Field getRequiredField() {",
                "-",
                "-\t\tField field = this.field;",
                "-",
                "-\t\tif (field == null) {",
                "-\t\t\tthrow new IllegalStateException(String.format(\"No field found for annotation %s!\", annotationType));",
                "-\t\t}",
                "-",
                "-\t\treturn field;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Returns the type of the field.",
                "-\t * ",
                "-\t * @return",
                "-\t */",
                "-\t@Nullable",
                "-\tpublic Class<?> getType() {",
                "-",
                "-\t\tField field = this.field;",
                "-",
                "-\t\treturn field == null ? null : field.getType();",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Returns the type of the field or throws an {@link IllegalArgumentException} if no field could be found.",
                "-\t * ",
                "-\t * @return",
                "-\t * @throws IllegalStateException in case no field with the configured annotation was found.",
                "-\t */",
                "-\tpublic Class<?> getRequiredType() {",
                "-\t\treturn getRequiredField().getType();",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Retrieves the value of the field by reflection.",
                "-\t * ",
                "-\t * @param source must not be {@literal null}.",
                "-\t * @return",
                "-\t */",
                "-\t@Nullable",
                "-\t@SuppressWarnings(\"unchecked\")",
                "-\tpublic <T> T getValue(Object source) {",
                "-",
                "-\t\tAssert.notNull(source, \"Source object must not be null!\");",
                "-",
                "-\t\tField field = this.field;",
                "-",
                "-\t\tif (field == null) {",
                "-\t\t\treturn null;",
                "-\t\t}",
                "-",
                "-\t\treturn (T) ReflectionUtils.getField(field, source);",
                "-\t}",
                "-}",
                "+/*",
                "+ * Copyright 2012-2017 the original author or authors.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.springframework.data.util;",
                "+",
                "+import java.lang.annotation.Annotation;",
                "+import java.lang.reflect.Field;",
                "+",
                "+import org.springframework.core.annotation.AnnotatedElementUtils;",
                "+import org.springframework.lang.Nullable;",
                "+import org.springframework.util.Assert;",
                "+import org.springframework.util.ReflectionUtils;",
                "+import org.springframework.util.ReflectionUtils.FieldCallback;",
                "+",
                "+/**",
                "+ * A {@link FieldCallback} that will inspect each field for a given annotation. This field's type can then be accessed",
                "+ * afterwards.",
                "+ * ",
                "+ * @author Oliver Gierke",
                "+ * @author Christoph Strobl",
                "+ */",
                "+public class AnnotationDetectionFieldCallback implements FieldCallback {",
                "+",
                "+\tprivate final Class<? extends Annotation> annotationType;",
                "+\tprivate @Nullable Field field;",
                "+",
                "+\t/**",
                "+\t * Creates a new {@link AnnotationDetectionFieldCallback} scanning for an annotation of the given type.",
                "+\t * ",
                "+\t * @param annotationType must not be {@literal null}.",
                "+\t */",
                "+\tpublic AnnotationDetectionFieldCallback(Class<? extends Annotation> annotationType) {",
                "+",
                "+\t\tAssert.notNull(annotationType, \"AnnotationType must not be null!\");",
                "+",
                "+\t\tthis.annotationType = annotationType;",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see org.springframework.util.ReflectionUtils.FieldCallback#doWith(java.lang.reflect.Field)",
                "+\t */",
                "+\tpublic void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {",
                "+",
                "+\t\tif (this.field != null) {",
                "+\t\t\treturn;",
                "+\t\t}",
                "+",
                "+\t\tif (AnnotatedElementUtils.findMergedAnnotation(field, annotationType) != null) {",
                "+",
                "+\t\t\tReflectionUtils.makeAccessible(field);",
                "+\t\t\tthis.field = field;",
                "+\t\t}",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Returns the detected field.",
                "+\t * ",
                "+\t * @return the field",
                "+\t */",
                "+\t@Nullable",
                "+\tpublic Field getField() {",
                "+\t\treturn field;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Returns the field that was detected.",
                "+\t * ",
                "+\t * @return",
                "+\t * @throws IllegalStateException in case no field with the configured annotation was found.",
                "+\t */",
                "+\tpublic Field getRequiredField() {",
                "+",
                "+\t\tField field = this.field;",
                "+",
                "+\t\tif (field == null) {",
                "+\t\t\tthrow new IllegalStateException(String.format(\"No field found for annotation %s!\", annotationType));",
                "+\t\t}",
                "+",
                "+\t\treturn field;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Returns the type of the field.",
                "+\t * ",
                "+\t * @return",
                "+\t */",
                "+\t@Nullable",
                "+\tpublic Class<?> getType() {",
                "+",
                "+\t\tField field = this.field;",
                "+",
                "+\t\treturn field == null ? null : field.getType();",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Returns the type of the field or throws an {@link IllegalArgumentException} if no field could be found.",
                "+\t * ",
                "+\t * @return",
                "+\t * @throws IllegalStateException in case no field with the configured annotation was found.",
                "+\t */",
                "+\tpublic Class<?> getRequiredType() {",
                "+\t\treturn getRequiredField().getType();",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Retrieves the value of the field by reflection.",
                "+\t * ",
                "+\t * @param source must not be {@literal null}.",
                "+\t * @return",
                "+\t */",
                "+\t@Nullable",
                "+\t@SuppressWarnings(\"unchecked\")",
                "+\tpublic <T> T getValue(Object source) {",
                "+",
                "+\t\tAssert.notNull(source, \"Source object must not be null!\");",
                "+",
                "+\t\tField field = this.field;",
                "+",
                "+\t\tif (field == null) {",
                "+\t\t\treturn null;",
                "+\t\t}",
                "+",
                "+\t\treturn (T) ReflectionUtils.getField(field, source);",
                "+\t}",
                "+}",
                "diff --git a/src/main/java/org/springframework/data/util/Version.java b/src/main/java/org/springframework/data/util/Version.java",
                "index df38cbad2..b9cfb2798 100644",
                "--- a/src/main/java/org/springframework/data/util/Version.java",
                "+++ b/src/main/java/org/springframework/data/util/Version.java",
                "@@ -1,222 +1,222 @@",
                "-/*",
                "- * Copyright 2013-2015 the original author or authors.",
                "- *",
                "- * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "- * you may not use this file except in compliance with the License.",
                "- * You may obtain a copy of the License at",
                "- *",
                "- *      http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- * See the License for the specific language governing permissions and",
                "- * limitations under the License.",
                "- */",
                "-package org.springframework.data.util;",
                "-",
                "-import java.util.ArrayList;",
                "-import java.util.List;",
                "-",
                "-import org.springframework.lang.Nullable;",
                "-import org.springframework.util.Assert;",
                "-import org.springframework.util.StringUtils;",
                "-",
                "-/**",
                "- * Value object to represent a Version consisting of major, minor and bugfix part.",
                "- * ",
                "- * @author Oliver Gierke",
                "- */",
                "-public class Version implements Comparable<Version> {",
                "-",
                "-\tprivate static final String VERSION_PARSE_ERROR = \"Invalid version string! Could not parse segment %s within %s.\";",
                "-",
                "-\tprivate final int major;",
                "-\tprivate final int minor;",
                "-\tprivate final int bugfix;",
                "-\tprivate final int build;",
                "-",
                "-\t/**",
                "-\t * Creates a new {@link Version} from the given integer values. At least one value has to be given but a maximum of 4.",
                "-\t * ",
                "-\t * @param parts must not be {@literal null} or empty.",
                "-\t */",
                "-\tpublic Version(int... parts) {",
                "-",
                "-\t\tAssert.notNull(parts, \"Parts must not be null!\");",
                "-\t\tAssert.isTrue(parts.length > 0 && parts.length < 5,",
                "-\t\t\t\tString.format(\"Invalid parts length. 0 < %s < 5\", parts.length));",
                "-",
                "-\t\tthis.major = parts[0];",
                "-\t\tthis.minor = parts.length > 1 ? parts[1] : 0;",
                "-\t\tthis.bugfix = parts.length > 2 ? parts[2] : 0;",
                "-\t\tthis.build = parts.length > 3 ? parts[3] : 0;",
                "-",
                "-\t\tAssert.isTrue(major >= 0, \"Major version must be greater or equal zero!\");",
                "-\t\tAssert.isTrue(minor >= 0, \"Minor version must be greater or equal zero!\");",
                "-\t\tAssert.isTrue(bugfix >= 0, \"Bugfix version must be greater or equal zero!\");",
                "-\t\tAssert.isTrue(build >= 0, \"Build version must be greater or equal zero!\");",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Parses the given string representation of a version into a {@link Version} object.",
                "-\t * ",
                "-\t * @param version must not be {@literal null} or empty.",
                "-\t * @return",
                "-\t */",
                "-\tpublic static Version parse(String version) {",
                "-",
                "-\t\tAssert.hasText(version, \"Version must not be null o empty!\");",
                "-",
                "-\t\tString[] parts = version.trim().split(\"\\\\.\");",
                "-\t\tint[] intParts = new int[parts.length];",
                "-",
                "-\t\tfor (int i = 0; i < parts.length; i++) {",
                "-",
                "-\t\t\tString input = i == parts.length - 1 ? parts[i].replaceAll(\"\\\\D.*\", \"\") : parts[i];",
                "-",
                "-\t\t\tif (StringUtils.hasText(input)) {",
                "-\t\t\t\ttry {",
                "-\t\t\t\t\tintParts[i] = Integer.parseInt(input);",
                "-\t\t\t\t} catch (IllegalArgumentException o_O) {",
                "-\t\t\t\t\tthrow new IllegalArgumentException(String.format(VERSION_PARSE_ERROR, input, version), o_O);",
                "-\t\t\t\t}",
                "-\t\t\t}",
                "-\t\t}",
                "-",
                "-\t\treturn new Version(intParts);",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Returns whether the current {@link Version} is greater (newer) than the given one.",
                "-\t * ",
                "-\t * @param version",
                "-\t * @return",
                "-\t */",
                "-\tpublic boolean isGreaterThan(Version version) {",
                "-\t\treturn compareTo(version) > 0;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Returns whether the current {@link Version} is greater (newer) or the same as the given one.",
                "-\t * ",
                "-\t * @param version",
                "-\t * @return",
                "-\t */",
                "-\tpublic boolean isGreaterThanOrEqualTo(Version version) {",
                "-\t\treturn compareTo(version) >= 0;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Returns whether the current {@link Version} is the same as the given one.",
                "-\t * ",
                "-\t * @param version",
                "-\t * @return",
                "-\t */",
                "-\tpublic boolean is(Version version) {",
                "-\t\treturn equals(version);",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Returns whether the current {@link Version} is less (older) than the given one.",
                "-\t * ",
                "-\t * @param version",
                "-\t * @return",
                "-\t */",
                "-\tpublic boolean isLessThan(Version version) {",
                "-\t\treturn compareTo(version) < 0;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Returns whether the current {@link Version} is less (older) or equal to the current one.",
                "-\t * ",
                "-\t * @param version",
                "-\t * @return",
                "-\t */",
                "-\tpublic boolean isLessThanOrEqualTo(Version version) {",
                "-\t\treturn compareTo(version) <= 0;",
                "-\t}",
                "-",
                "-\t/*",
                "-\t * (non-Javadoc)",
                "-\t * @see java.lang.Comparable#compareTo(java.lang.Object)",
                "-\t */",
                "-\tpublic int compareTo(@SuppressWarnings(\"null\") Version that) {",
                "-",
                "-\t\tif (major != that.major) {",
                "-\t\t\treturn major - that.major;",
                "-\t\t}",
                "-",
                "-\t\tif (minor != that.minor) {",
                "-\t\t\treturn minor - that.minor;",
                "-\t\t}",
                "-",
                "-\t\tif (bugfix != that.bugfix) {",
                "-\t\t\treturn bugfix - that.bugfix;",
                "-\t\t}",
                "-",
                "-\t\tif (build != that.build) {",
                "-\t\t\treturn build - that.build;",
                "-\t\t}",
                "-",
                "-\t\treturn 0;",
                "-\t}",
                "-",
                "-\t/*",
                "-\t * (non-Javadoc)",
                "-\t * @see java.lang.Object#equals(java.lang.Object)",
                "-\t */",
                "-\t@Override",
                "-\tpublic boolean equals(@Nullable Object obj) {",
                "-",
                "-\t\tif (this == obj) {",
                "-\t\t\treturn true;",
                "-\t\t}",
                "-",
                "-\t\tif (!(obj instanceof Version)) {",
                "-\t\t\treturn false;",
                "-\t\t}",
                "-",
                "-\t\tVersion that = (Version) obj;",
                "-",
                "-\t\treturn this.major == that.major && this.minor == that.minor && this.bugfix == that.bugfix",
                "-\t\t\t\t&& this.build == that.build;",
                "-\t}",
                "-",
                "-\t/*",
                "-\t * (non-Javadoc)",
                "-\t * @see java.lang.Object#hashCode()",
                "-\t */",
                "-\t@Override",
                "-\tpublic int hashCode() {",
                "-",
                "-\t\tint result = 17;",
                "-\t\tresult += 31 * major;",
                "-\t\tresult += 31 * minor;",
                "-\t\tresult += 31 * bugfix;",
                "-\t\tresult += 31 * build;",
                "-\t\treturn result;",
                "-\t}",
                "-",
                "-\t/*",
                "-\t * (non-Javadoc)",
                "-\t * @see java.lang.Object#toString()",
                "-\t */",
                "-\t@Override",
                "-\tpublic String toString() {",
                "-",
                "-\t\tList<Integer> digits = new ArrayList<>();",
                "-\t\tdigits.add(major);",
                "-\t\tdigits.add(minor);",
                "-",
                "-\t\tif (build != 0 || bugfix != 0) {",
                "-\t\t\tdigits.add(bugfix);",
                "-\t\t}",
                "-",
                "-\t\tif (build != 0) {",
                "-\t\t\tdigits.add(build);",
                "-\t\t}",
                "-",
                "-\t\treturn StringUtils.collectionToDelimitedString(digits, \".\");",
                "-\t}",
                "-}",
                "+/*",
                "+ * Copyright 2013-2015 the original author or authors.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.springframework.data.util;",
                "+",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+",
                "+import org.springframework.lang.Nullable;",
                "+import org.springframework.util.Assert;",
                "+import org.springframework.util.StringUtils;",
                "+",
                "+/**",
                "+ * Value object to represent a Version consisting of major, minor and bugfix part.",
                "+ * ",
                "+ * @author Oliver Gierke",
                "+ */",
                "+public class Version implements Comparable<Version> {",
                "+",
                "+\tprivate static final String VERSION_PARSE_ERROR = \"Invalid version string! Could not parse segment %s within %s.\";",
                "+",
                "+\tprivate final int major;",
                "+\tprivate final int minor;",
                "+\tprivate final int bugfix;",
                "+\tprivate final int build;",
                "+",
                "+\t/**",
                "+\t * Creates a new {@link Version} from the given integer values. At least one value has to be given but a maximum of 4.",
                "+\t * ",
                "+\t * @param parts must not be {@literal null} or empty.",
                "+\t */",
                "+\tpublic Version(int... parts) {",
                "+",
                "+\t\tAssert.notNull(parts, \"Parts must not be null!\");",
                "+\t\tAssert.isTrue(parts.length > 0 && parts.length < 5,",
                "+\t\t\t\tString.format(\"Invalid parts length. 0 < %s < 5\", parts.length));",
                "+",
                "+\t\tthis.major = parts[0];",
                "+\t\tthis.minor = parts.length > 1 ? parts[1] : 0;",
                "+\t\tthis.bugfix = parts.length > 2 ? parts[2] : 0;",
                "+\t\tthis.build = parts.length > 3 ? parts[3] : 0;",
                "+",
                "+\t\tAssert.isTrue(major >= 0, \"Major version must be greater or equal zero!\");",
                "+\t\tAssert.isTrue(minor >= 0, \"Minor version must be greater or equal zero!\");",
                "+\t\tAssert.isTrue(bugfix >= 0, \"Bugfix version must be greater or equal zero!\");",
                "+\t\tAssert.isTrue(build >= 0, \"Build version must be greater or equal zero!\");",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Parses the given string representation of a version into a {@link Version} object.",
                "+\t * ",
                "+\t * @param version must not be {@literal null} or empty.",
                "+\t * @return",
                "+\t */",
                "+\tpublic static Version parse(String version) {",
                "+",
                "+\t\tAssert.hasText(version, \"Version must not be null o empty!\");",
                "+",
                "+\t\tString[] parts = version.trim().split(\"\\\\.\");",
                "+\t\tint[] intParts = new int[parts.length];",
                "+",
                "+\t\tfor (int i = 0; i < parts.length; i++) {",
                "+",
                "+\t\t\tString input = i == parts.length - 1 ? parts[i].replaceAll(\"\\\\D.*\", \"\") : parts[i];",
                "+",
                "+\t\t\tif (StringUtils.hasText(input)) {",
                "+\t\t\t\ttry {",
                "+\t\t\t\t\tintParts[i] = Integer.parseInt(input);",
                "+\t\t\t\t} catch (IllegalArgumentException o_O) {",
                "+\t\t\t\t\tthrow new IllegalArgumentException(String.format(VERSION_PARSE_ERROR, input, version), o_O);",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t}",
                "+",
                "+\t\treturn new Version(intParts);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Returns whether the current {@link Version} is greater (newer) than the given one.",
                "+\t * ",
                "+\t * @param version",
                "+\t * @return",
                "+\t */",
                "+\tpublic boolean isGreaterThan(Version version) {",
                "+\t\treturn compareTo(version) > 0;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Returns whether the current {@link Version} is greater (newer) or the same as the given one.",
                "+\t * ",
                "+\t * @param version",
                "+\t * @return",
                "+\t */",
                "+\tpublic boolean isGreaterThanOrEqualTo(Version version) {",
                "+\t\treturn compareTo(version) >= 0;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Returns whether the current {@link Version} is the same as the given one.",
                "+\t * ",
                "+\t * @param version",
                "+\t * @return",
                "+\t */",
                "+\tpublic boolean is(Version version) {",
                "+\t\treturn equals(version);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Returns whether the current {@link Version} is less (older) than the given one.",
                "+\t * ",
                "+\t * @param version",
                "+\t * @return",
                "+\t */",
                "+\tpublic boolean isLessThan(Version version) {",
                "+\t\treturn compareTo(version) < 0;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Returns whether the current {@link Version} is less (older) or equal to the current one.",
                "+\t * ",
                "+\t * @param version",
                "+\t * @return",
                "+\t */",
                "+\tpublic boolean isLessThanOrEqualTo(Version version) {",
                "+\t\treturn compareTo(version) <= 0;",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see java.lang.Comparable#compareTo(java.lang.Object)",
                "+\t */",
                "+\tpublic int compareTo(@SuppressWarnings(\"null\") Version that) {",
                "+",
                "+\t\tif (major != that.major) {",
                "+\t\t\treturn major - that.major;",
                "+\t\t}",
                "+",
                "+\t\tif (minor != that.minor) {",
                "+\t\t\treturn minor - that.minor;",
                "+\t\t}",
                "+",
                "+\t\tif (bugfix != that.bugfix) {",
                "+\t\t\treturn bugfix - that.bugfix;",
                "+\t\t}",
                "+",
                "+\t\tif (build != that.build) {",
                "+\t\t\treturn build - that.build;",
                "+\t\t}",
                "+",
                "+\t\treturn 0;",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see java.lang.Object#equals(java.lang.Object)",
                "+\t */",
                "+\t@Override",
                "+\tpublic boolean equals(@Nullable Object obj) {",
                "+",
                "+\t\tif (this == obj) {",
                "+\t\t\treturn true;",
                "+\t\t}",
                "+",
                "+\t\tif (!(obj instanceof Version)) {",
                "+\t\t\treturn false;",
                "+\t\t}",
                "+",
                "+\t\tVersion that = (Version) obj;",
                "+",
                "+\t\treturn this.major == that.major && this.minor == that.minor && this.bugfix == that.bugfix",
                "+\t\t\t\t&& this.build == that.build;",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see java.lang.Object#hashCode()",
                "+\t */",
                "+\t@Override",
                "+\tpublic int hashCode() {",
                "+",
                "+\t\tint result = 17;",
                "+\t\tresult += 31 * major;",
                "+\t\tresult += 31 * minor;",
                "+\t\tresult += 31 * bugfix;",
                "+\t\tresult += 31 * build;",
                "+\t\treturn result;",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see java.lang.Object#toString()",
                "+\t */",
                "+\t@Override",
                "+\tpublic String toString() {",
                "+",
                "+\t\tList<Integer> digits = new ArrayList<>();",
                "+\t\tdigits.add(major);",
                "+\t\tdigits.add(minor);",
                "+",
                "+\t\tif (build != 0 || bugfix != 0) {",
                "+\t\t\tdigits.add(bugfix);",
                "+\t\t}",
                "+",
                "+\t\tif (build != 0) {",
                "+\t\t\tdigits.add(build);",
                "+\t\t}",
                "+",
                "+\t\treturn StringUtils.collectionToDelimitedString(digits, \".\");",
                "+\t}",
                "+}",
                "diff --git a/src/main/resources/org/springframework/data/domain/jaxb/atom.xsd b/src/main/resources/org/springframework/data/domain/jaxb/atom.xsd",
                "index fc606ba37..1a904830b 100644",
                "--- a/src/main/resources/org/springframework/data/domain/jaxb/atom.xsd",
                "+++ b/src/main/resources/org/springframework/data/domain/jaxb/atom.xsd",
                "@@ -1,240 +1,240 @@",
                "-<?xml version=\"1.0\" encoding=\"utf-8\" ?>",
                "-<xs:schema targetNamespace=\"http://www.w3.org/2005/Atom\" elementFormDefault=\"qualified\" ",
                "-\tattributeFormDefault=\"unqualified\"",
                "-\txmlns:atom=\"http://www.w3.org/2005/Atom\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">",
                "-\t<xs:annotation>",
                "-\t\t<xs:documentation>",
                "-\t\t\t\tThis version of the Atom schema is based on version 1.0 of the format specifications,",
                "-\t\t\t\tfound here http://www.atomenabled.org/developers/syndication/atom-format-spec.php.",
                "-\t\t\t</xs:documentation>",
                "-\t</xs:annotation>",
                "-\t<xs:import namespace=\"http://www.w3.org/XML/1998/namespace\" schemaLocation=\"http://www.w3.org/2001/03/xml.xsd\" />",
                "-\t<xs:annotation>",
                "-\t\t<xs:documentation>",
                "-\t\t\tAn Atom document may have two root elements, feed and entry, as defined in section 2.",
                "-\t\t</xs:documentation>",
                "-\t</xs:annotation>",
                "-\t<xs:element name=\"feed\" type=\"atom:feedType\"/>",
                "-\t<xs:element name=\"entry\" type=\"atom:entryType\"/>",
                "-\t<xs:complexType name=\"textType\" mixed=\"true\">",
                "-\t\t<xs:annotation>",
                "-\t\t\t<xs:documentation>",
                "-\t\t\t\tThe Atom text construct is defined in section 3.1 of the format spec.",
                "-\t\t\t</xs:documentation>",
                "-\t\t</xs:annotation>",
                "-\t\t<xs:sequence>",
                "-\t\t\t<xs:any namespace=\"http://www.w3.org/1999/xhtml\" minOccurs=\"0\"/>",
                "-\t\t</xs:sequence>",
                "-\t\t<xs:attribute name=\"type\" >",
                "-\t\t\t<xs:simpleType>",
                "-\t\t\t\t<xs:restriction base=\"xs:token\">",
                "-\t\t\t\t\t<xs:enumeration value=\"text\"/>",
                "-\t\t\t\t\t<xs:enumeration value=\"html\"/>",
                "-\t\t\t\t\t<xs:enumeration value=\"xhtml\"/>",
                "-\t\t\t\t</xs:restriction>",
                "-\t\t\t</xs:simpleType>",
                "-\t\t</xs:attribute>",
                "-\t\t<xs:attributeGroup ref=\"atom:commonAttributes\"/>",
                "-\t</xs:complexType>",
                "-\t<xs:complexType name=\"personType\">",
                "-\t\t<xs:annotation>",
                "-\t\t\t<xs:documentation>",
                "-\t\t\t\tThe Atom person construct is defined in section 3.2 of the format spec.",
                "-\t\t\t</xs:documentation>",
                "-\t\t</xs:annotation>",
                "-\t\t<xs:choice minOccurs=\"1\" maxOccurs=\"unbounded\">",
                "-\t\t\t<xs:element name=\"name\" type=\"xs:string\" minOccurs=\"1\" maxOccurs=\"1\" />",
                "-\t\t\t<xs:element name=\"uri\" type=\"atom:uriType\" minOccurs=\"0\" maxOccurs=\"1\" />",
                "-\t\t\t<xs:element name=\"email\" type=\"atom:emailType\" minOccurs=\"0\" maxOccurs=\"1\" />",
                "-\t\t\t<xs:any namespace=\"##other\"/>",
                "-\t\t</xs:choice>",
                "-\t\t<xs:attributeGroup ref=\"atom:commonAttributes\"/>",
                "-\t</xs:complexType>",
                "-\t<xs:simpleType name=\"emailType\">",
                "-\t\t<xs:annotation>",
                "-\t\t\t<xs:documentation>",
                "-\t\t\t\tSchema definition for an email address.",
                "-\t\t\t</xs:documentation>",
                "-\t\t</xs:annotation>",
                "-\t\t<xs:restriction base=\"xs:normalizedString\">",
                "-\t\t\t<xs:pattern value=\"\\w+@(\\w+\\.)+\\w+\" />",
                "-\t\t</xs:restriction>",
                "-\t</xs:simpleType>",
                "-\t<xs:complexType name=\"feedType\">",
                "-\t\t<xs:annotation>",
                "-\t\t\t<xs:documentation>",
                "-\t\t\t\tThe Atom feed construct is defined in section 4.1.1 of the format spec.",
                "-\t\t\t</xs:documentation>",
                "-\t\t</xs:annotation>",
                "-\t\t<xs:choice minOccurs=\"3\" maxOccurs=\"unbounded\">",
                "-\t\t\t<xs:element name=\"author\" type=\"atom:personType\" minOccurs=\"0\" maxOccurs=\"unbounded\" />",
                "-\t\t\t<xs:element name=\"category\" type=\"atom:categoryType\" minOccurs=\"0\" maxOccurs=\"unbounded\" />",
                "-\t\t\t<xs:element name=\"contributor\" type=\"atom:personType\" minOccurs=\"0\" maxOccurs=\"unbounded\" />",
                "-\t\t\t<xs:element name=\"generator\" type=\"atom:generatorType\" minOccurs=\"0\" maxOccurs=\"1\" />",
                "-\t\t\t<xs:element name=\"icon\" type=\"atom:iconType\" minOccurs=\"0\" maxOccurs=\"1\" />",
                "-\t\t\t<xs:element name=\"id\" type=\"atom:idType\" minOccurs=\"1\" maxOccurs=\"1\" />",
                "-\t\t\t<xs:element name=\"link\" type=\"atom:linkType\" minOccurs=\"0\" maxOccurs=\"unbounded\" />",
                "-\t\t\t<xs:element name=\"logo\" type=\"atom:logoType\" minOccurs=\"0\" maxOccurs=\"1\" />",
                "-\t\t\t<xs:element name=\"rights\" type=\"atom:textType\" minOccurs=\"0\" maxOccurs=\"1\" />",
                "-\t\t\t<xs:element name=\"subtitle\" type=\"atom:textType\" minOccurs=\"0\" maxOccurs=\"1\" />",
                "-\t\t\t<xs:element name=\"title\" type=\"atom:textType\" minOccurs=\"1\" maxOccurs=\"1\" />",
                "-\t\t\t<xs:element name=\"updated\" type=\"atom:dateTimeType\" minOccurs=\"1\" maxOccurs=\"1\" />",
                "-\t\t\t<xs:element name=\"entry\" type=\"atom:entryType\" minOccurs=\"0\" maxOccurs=\"unbounded\" />",
                "-\t\t\t<xs:any namespace=\"##other\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>",
                "-\t\t</xs:choice>",
                "-\t\t<xs:attributeGroup ref=\"atom:commonAttributes\"/>",
                "-\t</xs:complexType>",
                "-\t<xs:complexType name=\"entryType\">",
                "-\t\t<xs:annotation>",
                "-\t\t\t<xs:documentation>",
                "-\t\t\t\tThe Atom entry construct is defined in section 4.1.2 of the format spec.",
                "-\t\t\t</xs:documentation>",
                "-\t\t</xs:annotation>",
                "-\t\t<xs:choice maxOccurs=\"unbounded\">",
                "-\t\t\t<xs:element name=\"author\" type=\"atom:personType\" minOccurs=\"0\" maxOccurs=\"unbounded\" />",
                "-\t\t\t<xs:element name=\"category\" type=\"atom:categoryType\" minOccurs=\"0\" maxOccurs=\"unbounded\" />",
                "-\t\t\t<xs:element name=\"content\" type=\"atom:contentType\" minOccurs=\"0\" maxOccurs=\"1\" />",
                "-\t\t\t<xs:element name=\"contributor\" type=\"atom:personType\" minOccurs=\"0\" maxOccurs=\"unbounded\" />",
                "-\t\t\t<xs:element name=\"id\" type=\"atom:idType\" minOccurs=\"1\" maxOccurs=\"1\" />",
                "-\t\t\t<xs:element name=\"link\" type=\"atom:linkType\" minOccurs=\"0\" maxOccurs=\"unbounded\" />",
                "-\t\t\t<xs:element name=\"published\" type=\"atom:dateTimeType\" minOccurs=\"0\" maxOccurs=\"1\" />",
                "-\t\t\t<xs:element name=\"rights\" type=\"atom:textType\" minOccurs=\"0\" maxOccurs=\"1\" />",
                "-\t\t\t<xs:element name=\"source\" type=\"atom:textType\" minOccurs=\"0\" maxOccurs=\"1\" />",
                "-\t\t\t<xs:element name=\"summary\" type=\"atom:textType\" minOccurs=\"0\" maxOccurs=\"1\" />",
                "-\t\t\t<xs:element name=\"title\" type=\"atom:textType\" minOccurs=\"1\" maxOccurs=\"1\" />",
                "-\t\t\t<xs:element name=\"updated\" type=\"atom:dateTimeType\" minOccurs=\"1\" maxOccurs=\"1\" />",
                "-\t\t\t<xs:any namespace=\"##other\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>",
                "-\t\t</xs:choice>",
                "-\t\t<xs:attributeGroup ref=\"atom:commonAttributes\"/>",
                "-\t</xs:complexType>",
                "-\t<xs:complexType name=\"contentType\" mixed=\"true\">",
                "-\t\t<xs:annotation>",
                "-\t\t\t<xs:documentation>",
                "-\t\t\t\tThe Atom content construct is defined in section 4.1.3 of the format spec.",
                "-\t\t\t</xs:documentation>",
                "-\t\t</xs:annotation>",
                "-\t\t<xs:sequence>",
                "-\t\t\t<xs:any namespace=\"##other\" minOccurs=\"0\" maxOccurs=\"unbounded\" />",
                "-\t\t</xs:sequence>",
                "-\t\t<xs:attribute name=\"type\" type=\"xs:string\"/>",
                "-\t\t<xs:attribute name=\"src\" type=\"xs:anyURI\"/>",
                "-\t\t<xs:attributeGroup ref=\"atom:commonAttributes\"/>",
                "-\t</xs:complexType>",
                "-\t<xs:complexType name=\"categoryType\">",
                "-\t\t<xs:annotation>",
                "-\t\t\t<xs:documentation>",
                "-\t\t\t\tThe Atom cagegory construct is defined in section 4.2.2 of the format spec.",
                "-\t\t\t</xs:documentation>",
                "-\t\t</xs:annotation>",
                "-\t\t<xs:attribute name=\"term\" type=\"xs:string\" use=\"required\"/>",
                "-\t\t<xs:attribute name=\"scheme\" type=\"xs:anyURI\" use=\"optional\"/>",
                "-\t\t<xs:attribute name=\"label\" type=\"xs:string\" use=\"optional\"/>",
                "-\t\t<xs:attributeGroup ref=\"atom:commonAttributes\" />",
                "-\t</xs:complexType>",
                "-\t<xs:complexType name=\"generatorType\">",
                "-\t\t<xs:annotation>",
                "-\t\t\t<xs:documentation>",
                "-\t\t\t\tThe Atom generator element is defined in section 4.2.4 of the format spec.",
                "-\t\t\t</xs:documentation>",
                "-\t\t</xs:annotation>",
                "-\t\t<xs:simpleContent>",
                "-\t\t\t<xs:extension base=\"xs:string\">",
                "-\t\t\t\t<xs:attribute name=\"uri\" use=\"optional\" type=\"xs:anyURI\" />",
                "-\t\t\t\t<xs:attribute name=\"version\" use=\"optional\" type=\"xs:string\" />",
                "-\t\t\t\t<xs:attributeGroup ref=\"atom:commonAttributes\"/>",
                "-\t\t\t</xs:extension>",
                "-\t\t</xs:simpleContent>",
                "-\t</xs:complexType>",
                "-\t<xs:complexType name=\"iconType\">",
                "-\t\t<xs:annotation>",
                "-\t\t\t<xs:documentation>",
                "-\t\t\t\tThe Atom icon construct is defined in section 4.2.5 of the format spec.",
                "-\t\t\t</xs:documentation>",
                "-\t\t</xs:annotation>",
                "-\t\t<xs:simpleContent>",
                "-\t\t\t<xs:extension base=\"xs:anyURI\">",
                "-\t\t\t\t<xs:attributeGroup ref=\"atom:commonAttributes\"/>",
                "-\t\t\t</xs:extension>",
                "-\t\t</xs:simpleContent>",
                "-\t</xs:complexType>",
                "-\t<xs:complexType name=\"idType\">",
                "-\t\t<xs:annotation>",
                "-\t\t\t<xs:documentation>",
                "-\t\t\t\tThe Atom id construct is defined in section 4.2.6 of the format spec.",
                "-\t\t\t</xs:documentation>",
                "-\t\t</xs:annotation>",
                "-\t\t<xs:simpleContent>",
                "-\t\t\t<xs:extension base=\"xs:anyURI\">",
                "-\t\t\t\t<xs:attributeGroup ref=\"atom:commonAttributes\"/>",
                "-\t\t\t</xs:extension>",
                "-\t\t</xs:simpleContent>",
                "-\t</xs:complexType>",
                "-\t<xs:complexType name=\"linkType\" mixed=\"true\">",
                "-\t\t<xs:annotation>",
                "-\t\t\t<xs:documentation>",
                "-\t\t\t\tThe Atom link construct is defined in section 3.4 of the format spec.",
                "-\t\t\t</xs:documentation>",
                "-\t\t</xs:annotation>",
                "-\t\t<xs:attribute name=\"href\" use=\"required\" type=\"xs:anyURI\" />",
                "-\t\t<xs:attribute name=\"rel\" type=\"xs:string\" use=\"optional\"/>",
                "-\t\t<xs:attribute name=\"type\" use=\"optional\" type=\"xs:string\" />",
                "-\t\t<xs:attribute name=\"hreflang\" use=\"optional\" type=\"xs:NMTOKEN\" />",
                "-\t\t<xs:attribute name=\"title\" use=\"optional\" type=\"xs:string\" />",
                "-\t\t<xs:attribute name=\"length\" use=\"optional\" type=\"xs:positiveInteger\" />",
                "-\t\t<xs:attributeGroup ref=\"atom:commonAttributes\"/>",
                "-\t</xs:complexType>",
                "-\t<xs:complexType name=\"logoType\">",
                "-\t\t<xs:annotation>",
                "-\t\t\t<xs:documentation>",
                "-\t\t\t\tThe Atom logo construct is defined in section 4.2.8 of the format spec.",
                "-\t\t\t</xs:documentation>",
                "-\t\t</xs:annotation>",
                "-\t\t<xs:simpleContent>",
                "-\t\t\t<xs:extension base=\"xs:anyURI\">",
                "-\t\t\t\t<xs:attributeGroup ref=\"atom:commonAttributes\"/>",
                "-\t\t\t</xs:extension>",
                "-\t\t</xs:simpleContent>",
                "-\t</xs:complexType>",
                "-\t<xs:complexType name=\"sourceType\">",
                "-\t\t<xs:annotation>",
                "-\t\t\t<xs:documentation>",
                "-\t\t\t\tThe Atom source construct is defined in section 4.2.11 of the format spec.",
                "-\t\t\t</xs:documentation>",
                "-\t\t</xs:annotation>",
                "-\t\t<xs:choice maxOccurs=\"unbounded\">",
                "-\t\t\t<xs:element name=\"author\" type=\"atom:personType\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>",
                "-\t\t\t<xs:element name=\"category\" type=\"atom:categoryType\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>",
                "-\t\t\t<xs:element name=\"contributor\" type=\"atom:personType\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>",
                "-\t\t\t<xs:element name=\"generator\" type=\"atom:generatorType\" minOccurs=\"0\" maxOccurs=\"1\"/>",
                "-\t\t\t<xs:element name=\"icon\" type=\"atom:iconType\" minOccurs=\"0\" maxOccurs=\"1\"/>",
                "-\t\t\t<xs:element name=\"id\" type=\"atom:idType\" minOccurs=\"0\" maxOccurs=\"1\"/>",
                "-\t\t\t<xs:element name=\"link\" type=\"atom:linkType\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>",
                "-\t\t\t<xs:element name=\"logo\" type=\"atom:logoType\" minOccurs=\"0\" maxOccurs=\"1\"/>",
                "-\t\t\t<xs:element name=\"rights\" type=\"atom:textType\" minOccurs=\"0\" maxOccurs=\"1\"/>",
                "-\t\t\t<xs:element name=\"subtitle\" type=\"atom:textType\" minOccurs=\"0\" maxOccurs=\"1\"/>",
                "-\t\t\t<xs:element name=\"title\" type=\"atom:textType\" minOccurs=\"0\" maxOccurs=\"1\"/>",
                "-\t\t\t<xs:element name=\"updated\" type=\"atom:dateTimeType\" minOccurs=\"0\" maxOccurs=\"1\"/>",
                "-\t\t\t<xs:any namespace=\"##other\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>",
                "-\t\t</xs:choice>",
                "-\t\t<xs:attributeGroup ref=\"atom:commonAttributes\"/>",
                "-\t</xs:complexType>",
                "-\t<xs:complexType name=\"uriType\">",
                "-\t\t<xs:simpleContent>",
                "-\t\t\t<xs:extension base=\"xs:anyURI\">",
                "-\t\t\t\t<xs:attributeGroup ref=\"atom:commonAttributes\"/>",
                "-\t\t\t</xs:extension>",
                "-\t\t</xs:simpleContent>",
                "-\t</xs:complexType>",
                "-\t<xs:complexType name=\"dateTimeType\">",
                "-\t\t<xs:simpleContent>",
                "-\t\t\t<xs:extension base=\"xs:dateTime\">",
                "-\t\t\t\t<xs:attributeGroup ref=\"atom:commonAttributes\"/>",
                "-\t\t\t</xs:extension>",
                "-\t\t</xs:simpleContent>",
                "-\t</xs:complexType>",
                "-\t<xs:attributeGroup name=\"commonAttributes\">",
                "-\t\t<xs:attribute ref=\"xml:base\" />",
                "-\t\t<xs:attribute ref=\"xml:lang\" />",
                "-\t\t<xs:anyAttribute namespace=\"##other\"/>",
                "-\t</xs:attributeGroup>",
                "+<?xml version=\"1.0\" encoding=\"utf-8\" ?>",
                "+<xs:schema targetNamespace=\"http://www.w3.org/2005/Atom\" elementFormDefault=\"qualified\" ",
                "+\tattributeFormDefault=\"unqualified\"",
                "+\txmlns:atom=\"http://www.w3.org/2005/Atom\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">",
                "+\t<xs:annotation>",
                "+\t\t<xs:documentation>",
                "+\t\t\t\tThis version of the Atom schema is based on version 1.0 of the format specifications,",
                "+\t\t\t\tfound here http://www.atomenabled.org/developers/syndication/atom-format-spec.php.",
                "+\t\t\t</xs:documentation>",
                "+\t</xs:annotation>",
                "+\t<xs:import namespace=\"http://www.w3.org/XML/1998/namespace\" schemaLocation=\"http://www.w3.org/2001/03/xml.xsd\" />",
                "+\t<xs:annotation>",
                "+\t\t<xs:documentation>",
                "+\t\t\tAn Atom document may have two root elements, feed and entry, as defined in section 2.",
                "+\t\t</xs:documentation>",
                "+\t</xs:annotation>",
                "+\t<xs:element name=\"feed\" type=\"atom:feedType\"/>",
                "+\t<xs:element name=\"entry\" type=\"atom:entryType\"/>",
                "+\t<xs:complexType name=\"textType\" mixed=\"true\">",
                "+\t\t<xs:annotation>",
                "+\t\t\t<xs:documentation>",
                "+\t\t\t\tThe Atom text construct is defined in section 3.1 of the format spec.",
                "+\t\t\t</xs:documentation>",
                "+\t\t</xs:annotation>",
                "+\t\t<xs:sequence>",
                "+\t\t\t<xs:any namespace=\"http://www.w3.org/1999/xhtml\" minOccurs=\"0\"/>",
                "+\t\t</xs:sequence>",
                "+\t\t<xs:attribute name=\"type\" >",
                "+\t\t\t<xs:simpleType>",
                "+\t\t\t\t<xs:restriction base=\"xs:token\">",
                "+\t\t\t\t\t<xs:enumeration value=\"text\"/>",
                "+\t\t\t\t\t<xs:enumeration value=\"html\"/>",
                "+\t\t\t\t\t<xs:enumeration value=\"xhtml\"/>",
                "+\t\t\t\t</xs:restriction>",
                "+\t\t\t</xs:simpleType>",
                "+\t\t</xs:attribute>",
                "+\t\t<xs:attributeGroup ref=\"atom:commonAttributes\"/>",
                "+\t</xs:complexType>",
                "+\t<xs:complexType name=\"personType\">",
                "+\t\t<xs:annotation>",
                "+\t\t\t<xs:documentation>",
                "+\t\t\t\tThe Atom person construct is defined in section 3.2 of the format spec.",
                "+\t\t\t</xs:documentation>",
                "+\t\t</xs:annotation>",
                "+\t\t<xs:choice minOccurs=\"1\" maxOccurs=\"unbounded\">",
                "+\t\t\t<xs:element name=\"name\" type=\"xs:string\" minOccurs=\"1\" maxOccurs=\"1\" />",
                "+\t\t\t<xs:element name=\"uri\" type=\"atom:uriType\" minOccurs=\"0\" maxOccurs=\"1\" />",
                "+\t\t\t<xs:element name=\"email\" type=\"atom:emailType\" minOccurs=\"0\" maxOccurs=\"1\" />",
                "+\t\t\t<xs:any namespace=\"##other\"/>",
                "+\t\t</xs:choice>",
                "+\t\t<xs:attributeGroup ref=\"atom:commonAttributes\"/>",
                "+\t</xs:complexType>",
                "+\t<xs:simpleType name=\"emailType\">",
                "+\t\t<xs:annotation>",
                "+\t\t\t<xs:documentation>",
                "+\t\t\t\tSchema definition for an email address.",
                "+\t\t\t</xs:documentation>",
                "+\t\t</xs:annotation>",
                "+\t\t<xs:restriction base=\"xs:normalizedString\">",
                "+\t\t\t<xs:pattern value=\"\\w+@(\\w+\\.)+\\w+\" />",
                "+\t\t</xs:restriction>",
                "+\t</xs:simpleType>",
                "+\t<xs:complexType name=\"feedType\">",
                "+\t\t<xs:annotation>",
                "+\t\t\t<xs:documentation>",
                "+\t\t\t\tThe Atom feed construct is defined in section 4.1.1 of the format spec.",
                "+\t\t\t</xs:documentation>",
                "+\t\t</xs:annotation>",
                "+\t\t<xs:choice minOccurs=\"3\" maxOccurs=\"unbounded\">",
                "+\t\t\t<xs:element name=\"author\" type=\"atom:personType\" minOccurs=\"0\" maxOccurs=\"unbounded\" />",
                "+\t\t\t<xs:element name=\"category\" type=\"atom:categoryType\" minOccurs=\"0\" maxOccurs=\"unbounded\" />",
                "+\t\t\t<xs:element name=\"contributor\" type=\"atom:personType\" minOccurs=\"0\" maxOccurs=\"unbounded\" />",
                "+\t\t\t<xs:element name=\"generator\" type=\"atom:generatorType\" minOccurs=\"0\" maxOccurs=\"1\" />",
                "+\t\t\t<xs:element name=\"icon\" type=\"atom:iconType\" minOccurs=\"0\" maxOccurs=\"1\" />",
                "+\t\t\t<xs:element name=\"id\" type=\"atom:idType\" minOccurs=\"1\" maxOccurs=\"1\" />",
                "+\t\t\t<xs:element name=\"link\" type=\"atom:linkType\" minOccurs=\"0\" maxOccurs=\"unbounded\" />",
                "+\t\t\t<xs:element name=\"logo\" type=\"atom:logoType\" minOccurs=\"0\" maxOccurs=\"1\" />",
                "+\t\t\t<xs:element name=\"rights\" type=\"atom:textType\" minOccurs=\"0\" maxOccurs=\"1\" />",
                "+\t\t\t<xs:element name=\"subtitle\" type=\"atom:textType\" minOccurs=\"0\" maxOccurs=\"1\" />",
                "+\t\t\t<xs:element name=\"title\" type=\"atom:textType\" minOccurs=\"1\" maxOccurs=\"1\" />",
                "+\t\t\t<xs:element name=\"updated\" type=\"atom:dateTimeType\" minOccurs=\"1\" maxOccurs=\"1\" />",
                "+\t\t\t<xs:element name=\"entry\" type=\"atom:entryType\" minOccurs=\"0\" maxOccurs=\"unbounded\" />",
                "+\t\t\t<xs:any namespace=\"##other\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>",
                "+\t\t</xs:choice>",
                "+\t\t<xs:attributeGroup ref=\"atom:commonAttributes\"/>",
                "+\t</xs:complexType>",
                "+\t<xs:complexType name=\"entryType\">",
                "+\t\t<xs:annotation>",
                "+\t\t\t<xs:documentation>",
                "+\t\t\t\tThe Atom entry construct is defined in section 4.1.2 of the format spec.",
                "+\t\t\t</xs:documentation>",
                "+\t\t</xs:annotation>",
                "+\t\t<xs:choice maxOccurs=\"unbounded\">",
                "+\t\t\t<xs:element name=\"author\" type=\"atom:personType\" minOccurs=\"0\" maxOccurs=\"unbounded\" />",
                "+\t\t\t<xs:element name=\"category\" type=\"atom:categoryType\" minOccurs=\"0\" maxOccurs=\"unbounded\" />",
                "+\t\t\t<xs:element name=\"content\" type=\"atom:contentType\" minOccurs=\"0\" maxOccurs=\"1\" />",
                "+\t\t\t<xs:element name=\"contributor\" type=\"atom:personType\" minOccurs=\"0\" maxOccurs=\"unbounded\" />",
                "+\t\t\t<xs:element name=\"id\" type=\"atom:idType\" minOccurs=\"1\" maxOccurs=\"1\" />",
                "+\t\t\t<xs:element name=\"link\" type=\"atom:linkType\" minOccurs=\"0\" maxOccurs=\"unbounded\" />",
                "+\t\t\t<xs:element name=\"published\" type=\"atom:dateTimeType\" minOccurs=\"0\" maxOccurs=\"1\" />",
                "+\t\t\t<xs:element name=\"rights\" type=\"atom:textType\" minOccurs=\"0\" maxOccurs=\"1\" />",
                "+\t\t\t<xs:element name=\"source\" type=\"atom:textType\" minOccurs=\"0\" maxOccurs=\"1\" />",
                "+\t\t\t<xs:element name=\"summary\" type=\"atom:textType\" minOccurs=\"0\" maxOccurs=\"1\" />",
                "+\t\t\t<xs:element name=\"title\" type=\"atom:textType\" minOccurs=\"1\" maxOccurs=\"1\" />",
                "+\t\t\t<xs:element name=\"updated\" type=\"atom:dateTimeType\" minOccurs=\"1\" maxOccurs=\"1\" />",
                "+\t\t\t<xs:any namespace=\"##other\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>",
                "+\t\t</xs:choice>",
                "+\t\t<xs:attributeGroup ref=\"atom:commonAttributes\"/>",
                "+\t</xs:complexType>",
                "+\t<xs:complexType name=\"contentType\" mixed=\"true\">",
                "+\t\t<xs:annotation>",
                "+\t\t\t<xs:documentation>",
                "+\t\t\t\tThe Atom content construct is defined in section 4.1.3 of the format spec.",
                "+\t\t\t</xs:documentation>",
                "+\t\t</xs:annotation>",
                "+\t\t<xs:sequence>",
                "+\t\t\t<xs:any namespace=\"##other\" minOccurs=\"0\" maxOccurs=\"unbounded\" />",
                "+\t\t</xs:sequence>",
                "+\t\t<xs:attribute name=\"type\" type=\"xs:string\"/>",
                "+\t\t<xs:attribute name=\"src\" type=\"xs:anyURI\"/>",
                "+\t\t<xs:attributeGroup ref=\"atom:commonAttributes\"/>",
                "+\t</xs:complexType>",
                "+\t<xs:complexType name=\"categoryType\">",
                "+\t\t<xs:annotation>",
                "+\t\t\t<xs:documentation>",
                "+\t\t\t\tThe Atom cagegory construct is defined in section 4.2.2 of the format spec.",
                "+\t\t\t</xs:documentation>",
                "+\t\t</xs:annotation>",
                "+\t\t<xs:attribute name=\"term\" type=\"xs:string\" use=\"required\"/>",
                "+\t\t<xs:attribute name=\"scheme\" type=\"xs:anyURI\" use=\"optional\"/>",
                "+\t\t<xs:attribute name=\"label\" type=\"xs:string\" use=\"optional\"/>",
                "+\t\t<xs:attributeGroup ref=\"atom:commonAttributes\" />",
                "+\t</xs:complexType>",
                "+\t<xs:complexType name=\"generatorType\">",
                "+\t\t<xs:annotation>",
                "+\t\t\t<xs:documentation>",
                "+\t\t\t\tThe Atom generator element is defined in section 4.2.4 of the format spec.",
                "+\t\t\t</xs:documentation>",
                "+\t\t</xs:annotation>",
                "+\t\t<xs:simpleContent>",
                "+\t\t\t<xs:extension base=\"xs:string\">",
                "+\t\t\t\t<xs:attribute name=\"uri\" use=\"optional\" type=\"xs:anyURI\" />",
                "+\t\t\t\t<xs:attribute name=\"version\" use=\"optional\" type=\"xs:string\" />",
                "+\t\t\t\t<xs:attributeGroup ref=\"atom:commonAttributes\"/>",
                "+\t\t\t</xs:extension>",
                "+\t\t</xs:simpleContent>",
                "+\t</xs:complexType>",
                "+\t<xs:complexType name=\"iconType\">",
                "+\t\t<xs:annotation>",
                "+\t\t\t<xs:documentation>",
                "+\t\t\t\tThe Atom icon construct is defined in section 4.2.5 of the format spec.",
                "+\t\t\t</xs:documentation>",
                "+\t\t</xs:annotation>",
                "+\t\t<xs:simpleContent>",
                "+\t\t\t<xs:extension base=\"xs:anyURI\">",
                "+\t\t\t\t<xs:attributeGroup ref=\"atom:commonAttributes\"/>",
                "+\t\t\t</xs:extension>",
                "+\t\t</xs:simpleContent>",
                "+\t</xs:complexType>",
                "+\t<xs:complexType name=\"idType\">",
                "+\t\t<xs:annotation>",
                "+\t\t\t<xs:documentation>",
                "+\t\t\t\tThe Atom id construct is defined in section 4.2.6 of the format spec.",
                "+\t\t\t</xs:documentation>",
                "+\t\t</xs:annotation>",
                "+\t\t<xs:simpleContent>",
                "+\t\t\t<xs:extension base=\"xs:anyURI\">",
                "+\t\t\t\t<xs:attributeGroup ref=\"atom:commonAttributes\"/>",
                "+\t\t\t</xs:extension>",
                "+\t\t</xs:simpleContent>",
                "+\t</xs:complexType>",
                "+\t<xs:complexType name=\"linkType\" mixed=\"true\">",
                "+\t\t<xs:annotation>",
                "+\t\t\t<xs:documentation>",
                "+\t\t\t\tThe Atom link construct is defined in section 3.4 of the format spec.",
                "+\t\t\t</xs:documentation>",
                "+\t\t</xs:annotation>",
                "+\t\t<xs:attribute name=\"href\" use=\"required\" type=\"xs:anyURI\" />",
                "+\t\t<xs:attribute name=\"rel\" type=\"xs:string\" use=\"optional\"/>",
                "+\t\t<xs:attribute name=\"type\" use=\"optional\" type=\"xs:string\" />",
                "+\t\t<xs:attribute name=\"hreflang\" use=\"optional\" type=\"xs:NMTOKEN\" />",
                "+\t\t<xs:attribute name=\"title\" use=\"optional\" type=\"xs:string\" />",
                "+\t\t<xs:attribute name=\"length\" use=\"optional\" type=\"xs:positiveInteger\" />",
                "+\t\t<xs:attributeGroup ref=\"atom:commonAttributes\"/>",
                "+\t</xs:complexType>",
                "+\t<xs:complexType name=\"logoType\">",
                "+\t\t<xs:annotation>",
                "+\t\t\t<xs:documentation>",
                "+\t\t\t\tThe Atom logo construct is defined in section 4.2.8 of the format spec.",
                "+\t\t\t</xs:documentation>",
                "+\t\t</xs:annotation>",
                "+\t\t<xs:simpleContent>",
                "+\t\t\t<xs:extension base=\"xs:anyURI\">",
                "+\t\t\t\t<xs:attributeGroup ref=\"atom:commonAttributes\"/>",
                "+\t\t\t</xs:extension>",
                "+\t\t</xs:simpleContent>",
                "+\t</xs:complexType>",
                "+\t<xs:complexType name=\"sourceType\">",
                "+\t\t<xs:annotation>",
                "+\t\t\t<xs:documentation>",
                "+\t\t\t\tThe Atom source construct is defined in section 4.2.11 of the format spec.",
                "+\t\t\t</xs:documentation>",
                "+\t\t</xs:annotation>",
                "+\t\t<xs:choice maxOccurs=\"unbounded\">",
                "+\t\t\t<xs:element name=\"author\" type=\"atom:personType\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>",
                "+\t\t\t<xs:element name=\"category\" type=\"atom:categoryType\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>",
                "+\t\t\t<xs:element name=\"contributor\" type=\"atom:personType\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>",
                "+\t\t\t<xs:element name=\"generator\" type=\"atom:generatorType\" minOccurs=\"0\" maxOccurs=\"1\"/>",
                "+\t\t\t<xs:element name=\"icon\" type=\"atom:iconType\" minOccurs=\"0\" maxOccurs=\"1\"/>",
                "+\t\t\t<xs:element name=\"id\" type=\"atom:idType\" minOccurs=\"0\" maxOccurs=\"1\"/>",
                "+\t\t\t<xs:element name=\"link\" type=\"atom:linkType\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>",
                "+\t\t\t<xs:element name=\"logo\" type=\"atom:logoType\" minOccurs=\"0\" maxOccurs=\"1\"/>",
                "+\t\t\t<xs:element name=\"rights\" type=\"atom:textType\" minOccurs=\"0\" maxOccurs=\"1\"/>",
                "+\t\t\t<xs:element name=\"subtitle\" type=\"atom:textType\" minOccurs=\"0\" maxOccurs=\"1\"/>",
                "+\t\t\t<xs:element name=\"title\" type=\"atom:textType\" minOccurs=\"0\" maxOccurs=\"1\"/>",
                "+\t\t\t<xs:element name=\"updated\" type=\"atom:dateTimeType\" minOccurs=\"0\" maxOccurs=\"1\"/>",
                "+\t\t\t<xs:any namespace=\"##other\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>",
                "+\t\t</xs:choice>",
                "+\t\t<xs:attributeGroup ref=\"atom:commonAttributes\"/>",
                "+\t</xs:complexType>",
                "+\t<xs:complexType name=\"uriType\">",
                "+\t\t<xs:simpleContent>",
                "+\t\t\t<xs:extension base=\"xs:anyURI\">",
                "+\t\t\t\t<xs:attributeGroup ref=\"atom:commonAttributes\"/>",
                "+\t\t\t</xs:extension>",
                "+\t\t</xs:simpleContent>",
                "+\t</xs:complexType>",
                "+\t<xs:complexType name=\"dateTimeType\">",
                "+\t\t<xs:simpleContent>",
                "+\t\t\t<xs:extension base=\"xs:dateTime\">",
                "+\t\t\t\t<xs:attributeGroup ref=\"atom:commonAttributes\"/>",
                "+\t\t\t</xs:extension>",
                "+\t\t</xs:simpleContent>",
                "+\t</xs:complexType>",
                "+\t<xs:attributeGroup name=\"commonAttributes\">",
                "+\t\t<xs:attribute ref=\"xml:base\" />",
                "+\t\t<xs:attribute ref=\"xml:lang\" />",
                "+\t\t<xs:anyAttribute namespace=\"##other\"/>",
                "+\t</xs:attributeGroup>",
                " </xs:schema>",
                "\\ No newline at end of file"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/geo/Box.java",
                "src/main/java/org/springframework/data/geo/Circle.java",
                "src/main/java/org/springframework/data/geo/Point.java",
                "src/main/java/org/springframework/data/util/AnnotationDetectionFieldCallback.java",
                "src/main/java/org/springframework/data/util/Version.java",
                "src/main/resources/org/springframework/data/domain/jaxb/atom.xsd"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "e9eacfceca9db74dcffc6f1a07a20a4dcf71a4c1"
                ],
                [
                    "no-tag",
                    "4d9329fab8f009586dfe6e2527332f63899c0d01"
                ]
            ],
            "tags": [
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.3.RELEASE",
                "2.0.4.RELEASE",
                "2.0.5.RELEASE",
                "2.0.6.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: XML",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: version",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8da1b6b556197ff815ba976a932348614b253747",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1512132570,
            "hunks": 1,
            "message": "DATACMNS-1227 - Add documentation section about JSONPath- and XPath-based web data binding.",
            "diff": [
                "diff --git a/src/main/asciidoc/repositories.adoc b/src/main/asciidoc/repositories.adoc",
                "index 1ff2e847e..845b5ca8c 100644",
                "--- a/src/main/asciidoc/repositories.adoc",
                "+++ b/src/main/asciidoc/repositories.adoc",
                "@@ -1196,2 +1196,39 @@ You see that the assembler produced the correct URI and also picks up the defaul",
                "+[[core.web.binding]]",
                "+==== Web databinding support",
                "+",
                "+Spring Data projections \u00e2\u0080\u0093 generally described in <<projections>> \u00e2\u0080\u0093 can be used to bind incoming request payloads by either using http://goessner.net/articles/JsonPath/[JSONPath] expressions (requires https://github.com/json-path/JsonPath[Jayway JasonPath] or https://www.w3.org/TR/xpath-31/[XPath] expressions (requires https://xmlbeam.org/[XmlBeam]).",
                "+",
                "+.HTTP payload binding using JSONPath or XPath expressions",
                "+====",
                "+[source, java]",
                "+----",
                "+@ProjectedPayload",
                "+public interface UserPayload {",
                "+",
                "+  @XBRead(\"//firstname\")",
                "+  @JsonPath(\"$..firstname\")",
                "+  String getFirstname();",
                "+",
                "+  @XBRead(\"/lastname\")",
                "+  @JsonPath({ \"$.lastname\", \"$.user.lastname\" })",
                "+  String getLastname();",
                "+}",
                "+----",
                "+====",
                "+",
                "+The type above can be used as Spring MVC handler method argument or via `ParameterizedTypeReference` on one of ``RestTemplate``'s methods.",
                "+The method declarations above would try to find `firstname` anywhere in the given document.",
                "+The `lastname` XML looup is performed on the top-level of the incoming document.",
                "+The JSON variant of that tries a top-level `lastname` first but also tries `lastname` nested in a `user` sub-document in case the former doesn't return a value.",
                "+That way changes if the structure of the source document can be mitigated easily without having to touch clients calling the exposed methods (usually a drawback of class-based payload binding).",
                "+",
                "+Nested projections are supported as described in <<projections>>.",
                "+If the method returns a complex, non-interface type, a Jackson `ObjectMapper` is used to map the final value.",
                "+",
                "+For Spring MVC, the necessary converters are registered automatically, as soon as `@EnableSpringDataWebSupport` is active and the required dependencies are available on the classpath.",
                "+For usage with `RestTemplate` register a `ProjectingJackson2HttpMessageConverter` (JSON) or `XmlBeamHttpMessageConverter` manually.",
                "+",
                "+For more information, see the https://github.com/spring-projects/spring-data-examples/tree/master/web/projection[web projection example] in the canonical https://github.com/spring-projects/spring-data-examples[Spring Data Examples repository].",
                "+",
                " [[core.web.type-safe]]"
            ],
            "changed_files": [
                "src/main/asciidoc/repositories.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "b4ae96de1ba9e4b704712d960eeb14336a4ed86d"
                ],
                [
                    "no-tag",
                    "0cbe0da3dbc82cd2a2c748806b13d5f75ba05b08"
                ]
            ],
            "tags": [
                "2.1.0.M1",
                "2.1.0.M2",
                "2.1.0.M3",
                "2.1.0.RC1",
                "2.1.0.RC2",
                "2.1.0.RELEASE",
                "2.1.1.RELEASE",
                "2.1.10.RELEASE",
                "2.1.11.RELEASE",
                "2.1.12.RELEASE",
                "2.1.13.RELEASE",
                "2.1.14.RELEASE",
                "2.1.15.RELEASE",
                "2.1.16.RELEASE",
                "2.1.17.RELEASE",
                "2.1.18.RELEASE",
                "2.1.19.RELEASE",
                "2.1.2.RELEASE",
                "2.1.20.RELEASE",
                "2.1.21.RELEASE",
                "2.1.3.RELEASE",
                "2.1.4.RELEASE",
                "2.1.5.RELEASE",
                "2.1.6.RELEASE",
                "2.1.7.RELEASE",
                "2.1.8.RELEASE",
                "2.1.9.RELEASE",
                "2.2.0.M1",
                "2.2.0.M2",
                "2.2.0.M3",
                "2.2.0.M4",
                "2.2.0.RC1",
                "2.2.0.RC2",
                "2.2.0.RC3",
                "2.2.0.RELEASE",
                "2.2.1.RELEASE",
                "2.2.10.RELEASE",
                "2.2.11.RELEASE",
                "2.2.12.RELEASE",
                "2.2.13.RELEASE",
                "2.2.2.RELEASE",
                "2.2.3.RELEASE",
                "2.2.4.RELEASE",
                "2.2.5.RELEASE",
                "2.2.6.RELEASE",
                "2.2.7.RELEASE",
                "2.2.8.RELEASE",
                "2.2.9.RELEASE",
                "2.3.0.M1",
                "2.3.0.M2",
                "2.3.0.M3",
                "2.3.0.M4",
                "2.3.0.RC1",
                "2.3.0.RC2",
                "2.3.0.RELEASE",
                "2.3.1.RELEASE",
                "2.3.2.RELEASE",
                "2.3.3.RELEASE",
                "2.3.4.RELEASE",
                "2.3.5.RELEASE",
                "2.3.6.RELEASE",
                "2.3.7.RELEASE",
                "2.3.8.RELEASE",
                "2.3.9.RELEASE",
                "2.4.0",
                "2.4.0-M1",
                "2.4.0-M2",
                "2.4.0-RC1",
                "2.4.0-RC2",
                "2.4.1",
                "2.4.10",
                "2.4.11",
                "2.4.12",
                "2.4.13",
                "2.4.14",
                "2.4.15",
                "2.4.2",
                "2.4.3",
                "2.4.4",
                "2.4.5",
                "2.4.6",
                "2.4.7",
                "2.4.8",
                "2.4.9",
                "2.5.0",
                "2.5.0-M1",
                "2.5.0-M2",
                "2.5.0-M3",
                "2.5.0-M4",
                "2.5.0-M5",
                "2.5.0-RC1",
                "2.5.1",
                "2.5.10",
                "2.5.11",
                "2.5.12",
                "2.5.2",
                "2.5.3",
                "2.5.4",
                "2.5.5",
                "2.5.6",
                "2.5.7",
                "2.5.8",
                "2.5.9",
                "2.6.0",
                "2.6.0-M1",
                "2.6.0-M2",
                "2.6.0-M3",
                "2.6.0-RC1",
                "2.6.1",
                "2.6.10",
                "2.6.2",
                "2.6.3",
                "2.6.4",
                "2.6.5",
                "2.6.6",
                "2.6.7",
                "2.6.8",
                "2.6.9",
                "2.7.0",
                "2.7.0-M1",
                "2.7.0-M2",
                "2.7.0-M3",
                "2.7.0-M4",
                "2.7.0-RC1",
                "2.7.1",
                "2.7.10",
                "2.7.11",
                "2.7.12",
                "2.7.13",
                "2.7.14",
                "2.7.15",
                "2.7.16",
                "2.7.17",
                "2.7.18",
                "2.7.2",
                "2.7.3",
                "2.7.4",
                "2.7.5",
                "2.7.6",
                "2.7.7",
                "2.7.8",
                "2.7.9",
                "3.0.0",
                "3.0.0-M1",
                "3.0.0-M2",
                "3.0.0-M3",
                "3.0.0-M4",
                "3.0.0-M5",
                "3.0.0-M6",
                "3.0.0-RC1",
                "3.0.0-RC2",
                "3.0.1",
                "3.0.10",
                "3.0.11",
                "3.0.12",
                "3.0.2",
                "3.0.3",
                "3.0.4",
                "3.0.5",
                "3.0.6",
                "3.0.7",
                "3.0.8",
                "3.0.9",
                "3.1.0",
                "3.1.0-M1",
                "3.1.0-M2",
                "3.1.0-M3",
                "3.1.0-RC1",
                "3.1.1",
                "3.1.10",
                "3.1.11",
                "3.1.12",
                "3.1.2",
                "3.1.3",
                "3.1.4",
                "3.1.5",
                "3.1.6",
                "3.1.7",
                "3.1.8",
                "3.1.9",
                "3.2.0",
                "3.2.0-M1",
                "3.2.0-M2",
                "3.2.0-M3",
                "3.2.0-RC1",
                "3.2.1",
                "3.2.2",
                "3.2.3",
                "3.2.4",
                "3.2.5",
                "3.2.6",
                "3.2.7",
                "3.3.0",
                "3.3.0-M1",
                "3.3.0-M2",
                "3.3.0-RC1",
                "3.3.1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: XML",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: bind, base",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "dcb8166bbc2b9e620e6fd65771194f52cce311e9",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1515582148,
            "hunks": 5,
            "message": "DATACMNS-1235 - Polishing. Introduced BeanLookup to easily create a Lazy<T>-based lookup of a unique bean by type on a ListableBeanFactory. This is in support of making it easy for downstream Spring Data modules to consume the EntityPathResolver declared in an ApplicationContext using XML configuration. QuerydslWebConfiguration now uses a plain ObjectProvider to access the bean defined falling back to our default. Original pull request: #265.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/util/BeanLookup.java b/src/main/java/org/springframework/data/util/BeanLookup.java",
                "new file mode 100644",
                "index 000000000..fb27687e0",
                "--- /dev/null",
                "+++ b/src/main/java/org/springframework/data/util/BeanLookup.java",
                "@@ -0,0 +1,80 @@",
                "+/*",
                "+ * Copyright 2018 the original author or authors.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.springframework.data.util;",
                "+",
                "+import lombok.experimental.UtilityClass;",
                "+",
                "+import java.util.Map;",
                "+",
                "+import javax.annotation.Nullable;",
                "+",
                "+import org.springframework.beans.factory.BeanFactory;",
                "+import org.springframework.beans.factory.ListableBeanFactory;",
                "+import org.springframework.beans.factory.NoUniqueBeanDefinitionException;",
                "+import org.springframework.util.Assert;",
                "+",
                "+/**",
                "+ * Simple helper to allow lenient lookup of beans of a given type from a {@link ListableBeanFactory}. This is not user",
                "+ * facing API but a mere helper for Spring Data configuration code.",
                "+ * ",
                "+ * @author Oliver Gierke",
                "+ * @since 2.1",
                "+ * @soundtrack Dave Matthews Band - Bartender (DMB Live 25)",
                "+ */",
                "+@UtilityClass",
                "+public class BeanLookup {",
                "+",
                "+\t/**",
                "+\t * Returns a {@link Lazy} for the unique bean of the given type from the given {@link BeanFactory} (which needs to be",
                "+\t * a {@link ListableBeanFactory}). The lookup will produce a {@link NoUniqueBeanDefinitionException} in case multiple",
                "+\t * beans of the given type are available in the given {@link BeanFactory}.",
                "+\t * ",
                "+\t * @param type must not be {@literal null}.",
                "+\t * @param beanFactory the {@link BeanFactory} to lookup the bean from.",
                "+\t * @return a {@link Lazy} for the unique bean of the given type or the instance provided by the fallback in case no",
                "+\t *         bean of the given type can be found.",
                "+\t */",
                "+\tpublic static <T> Lazy<T> lazyIfAvailable(Class<T> type, BeanFactory beanFactory) {",
                "+",
                "+\t\tAssert.notNull(type, \"Type must not be null!\");",
                "+\t\tAssert.isInstanceOf(ListableBeanFactory.class, beanFactory);",
                "+",
                "+\t\treturn Lazy.of(() -> lookupBean(type, (ListableBeanFactory) beanFactory));",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Looks up the unique bean of the given type from the given {@link ListableBeanFactory}.",
                "+\t * ",
                "+\t * @param type must not be {@literal null}.",
                "+\t * @param beanFactory must not be {@literal null}.",
                "+\t * @return",
                "+\t */",
                "+\t@Nullable",
                "+\tprivate static <T> T lookupBean(Class<T> type, ListableBeanFactory beanFactory) {",
                "+",
                "+\t\tMap<String, T> names = beanFactory.getBeansOfType(type, false, false);",
                "+",
                "+\t\tswitch (names.size()) {",
                "+",
                "+\t\t\tcase 0:",
                "+\t\t\t\treturn null;",
                "+\t\t\tcase 1:",
                "+\t\t\t\treturn names.values().iterator().next();",
                "+\t\t\tdefault:",
                "+\t\t\t\tthrow new NoUniqueBeanDefinitionException(type, names.keySet());",
                "+\t\t}",
                "+\t}",
                "+}",
                "diff --git a/src/main/java/org/springframework/data/web/config/QuerydslWebConfiguration.java b/src/main/java/org/springframework/data/web/config/QuerydslWebConfiguration.java",
                "index 92fa995b2..ff34420eb 100644",
                "--- a/src/main/java/org/springframework/data/web/config/QuerydslWebConfiguration.java",
                "+++ b/src/main/java/org/springframework/data/web/config/QuerydslWebConfiguration.java",
                "@@ -21,2 +21,3 @@ import java.util.Optional;",
                " import org.springframework.beans.factory.ObjectFactory;",
                "+import org.springframework.beans.factory.ObjectProvider;",
                " import org.springframework.beans.factory.annotation.Autowired;",
                "@@ -27,2 +28,3 @@ import org.springframework.context.annotation.Lazy;",
                " import org.springframework.core.convert.ConversionService;",
                "+import org.springframework.data.querydsl.EntityPathResolver;",
                " import org.springframework.data.querydsl.SimpleEntityPathResolver;",
                "@@ -47,2 +49,3 @@ public class QuerydslWebConfiguration implements WebMvcConfigurer {",
                " \t@Autowired @Qualifier(\"mvcConversionService\") ObjectFactory<ConversionService> conversionService;",
                "+\t@Autowired ObjectProvider<EntityPathResolver> resolver;",
                "@@ -63,3 +66,3 @@ public class QuerydslWebConfiguration implements WebMvcConfigurer {",
                " \tpublic QuerydslBindingsFactory querydslBindingsFactory() {",
                "-\t\treturn new QuerydslBindingsFactory(SimpleEntityPathResolver.INSTANCE);",
                "+\t\treturn new QuerydslBindingsFactory(resolver.getIfUnique(() -> SimpleEntityPathResolver.INSTANCE));",
                " \t}"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/util/BeanLookup.java",
                "src/main/java/org/springframework/data/web/config/QuerydslWebConfiguration.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "265": "Additional implementations of EntityPathResolver for supporting Querydsls packageSuffix [DATACMNS-1235] #1674"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.1.0.M1",
                "2.1.0.M2",
                "2.1.0.M3",
                "2.1.0.RC1",
                "2.1.0.RC2",
                "2.1.0.RELEASE",
                "2.1.1.RELEASE",
                "2.1.10.RELEASE",
                "2.1.11.RELEASE",
                "2.1.12.RELEASE",
                "2.1.13.RELEASE",
                "2.1.14.RELEASE",
                "2.1.15.RELEASE",
                "2.1.16.RELEASE",
                "2.1.17.RELEASE",
                "2.1.18.RELEASE",
                "2.1.19.RELEASE",
                "2.1.2.RELEASE",
                "2.1.20.RELEASE",
                "2.1.21.RELEASE",
                "2.1.3.RELEASE",
                "2.1.4.RELEASE",
                "2.1.5.RELEASE",
                "2.1.6.RELEASE",
                "2.1.7.RELEASE",
                "2.1.8.RELEASE",
                "2.1.9.RELEASE",
                "2.2.0.M1",
                "2.2.0.M2",
                "2.2.0.M3",
                "2.2.0.M4",
                "2.2.0.RC1",
                "2.2.0.RC2",
                "2.2.0.RC3",
                "2.2.0.RELEASE",
                "2.2.1.RELEASE",
                "2.2.10.RELEASE",
                "2.2.11.RELEASE",
                "2.2.12.RELEASE",
                "2.2.13.RELEASE",
                "2.2.2.RELEASE",
                "2.2.3.RELEASE",
                "2.2.4.RELEASE",
                "2.2.5.RELEASE",
                "2.2.6.RELEASE",
                "2.2.7.RELEASE",
                "2.2.8.RELEASE",
                "2.2.9.RELEASE",
                "2.3.0.M1",
                "2.3.0.M2",
                "2.3.0.M3",
                "2.3.0.M4",
                "2.3.0.RC1",
                "2.3.0.RC2",
                "2.3.0.RELEASE",
                "2.3.1.RELEASE",
                "2.3.2.RELEASE",
                "2.3.3.RELEASE",
                "2.3.4.RELEASE",
                "2.3.5.RELEASE",
                "2.3.6.RELEASE",
                "2.3.7.RELEASE",
                "2.3.8.RELEASE",
                "2.3.9.RELEASE",
                "2.4.0",
                "2.4.0-M1",
                "2.4.0-M2",
                "2.4.0-RC1",
                "2.4.0-RC2",
                "2.4.1",
                "2.4.10",
                "2.4.11",
                "2.4.12",
                "2.4.13",
                "2.4.14",
                "2.4.15",
                "2.4.2",
                "2.4.3",
                "2.4.4",
                "2.4.5",
                "2.4.6",
                "2.4.7",
                "2.4.8",
                "2.4.9",
                "2.5.0",
                "2.5.0-M1",
                "2.5.0-M2",
                "2.5.0-M3",
                "2.5.0-M4",
                "2.5.0-M5",
                "2.5.0-RC1",
                "2.5.1",
                "2.5.10",
                "2.5.11",
                "2.5.12",
                "2.5.2",
                "2.5.3",
                "2.5.4",
                "2.5.5",
                "2.5.6",
                "2.5.7",
                "2.5.8",
                "2.5.9",
                "2.6.0",
                "2.6.0-M1",
                "2.6.0-M2",
                "2.6.0-M3",
                "2.6.0-RC1",
                "2.6.1",
                "2.6.10",
                "2.6.2",
                "2.6.3",
                "2.6.4",
                "2.6.5",
                "2.6.6",
                "2.6.7",
                "2.6.8",
                "2.6.9",
                "2.7.0",
                "2.7.0-M1",
                "2.7.0-M2",
                "2.7.0-M3",
                "2.7.0-M4",
                "2.7.0-RC1",
                "2.7.1",
                "2.7.10",
                "2.7.11",
                "2.7.12",
                "2.7.13",
                "2.7.14",
                "2.7.15",
                "2.7.16",
                "2.7.17",
                "2.7.18",
                "2.7.2",
                "2.7.3",
                "2.7.4",
                "2.7.5",
                "2.7.6",
                "2.7.7",
                "2.7.8",
                "2.7.9",
                "3.0.0",
                "3.0.0-M1",
                "3.0.0-M2",
                "3.0.0-M3",
                "3.0.0-M4",
                "3.0.0-M5",
                "3.0.0-M6",
                "3.0.0-RC1",
                "3.0.0-RC2",
                "3.0.1",
                "3.0.10",
                "3.0.11",
                "3.0.12",
                "3.0.2",
                "3.0.3",
                "3.0.4",
                "3.0.5",
                "3.0.6",
                "3.0.7",
                "3.0.8",
                "3.0.9",
                "3.1.0",
                "3.1.0-M1",
                "3.1.0-M2",
                "3.1.0-M3",
                "3.1.0-RC1",
                "3.1.1",
                "3.1.10",
                "3.1.11",
                "3.1.12",
                "3.1.2",
                "3.1.3",
                "3.1.4",
                "3.1.5",
                "3.1.6",
                "3.1.7",
                "3.1.8",
                "3.1.9",
                "3.2.0",
                "3.2.0-M1",
                "3.2.0-M2",
                "3.2.0-M3",
                "3.2.0-RC1",
                "3.2.1",
                "3.2.2",
                "3.2.3",
                "3.2.4",
                "3.2.5",
                "3.2.6",
                "3.2.7",
                "3.3.0",
                "3.3.0-M1",
                "3.3.0-M2",
                "3.3.0-RC1",
                "3.3.1"
            ],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: XML",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: access, entity, request, base",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 265",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "506fe37aea97a497b955cd38d8b40240560cabd5",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1508330936,
            "hunks": 8,
            "message": "DATACMNS-1200 - Polishing. Throw MappingInstantiationException from KotlinClassGeneratingEntityInstantiator if instantiation fails to align behavior with ClassGeneratingEntityInstantiator. Report Kotlin constructor instead of Java constructor if available. Original pull request: #255.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/convert/KotlinClassGeneratingEntityInstantiator.java b/src/main/java/org/springframework/data/convert/KotlinClassGeneratingEntityInstantiator.java",
                "index 1bdb23a3a..05b7d5cd3 100644",
                "--- a/src/main/java/org/springframework/data/convert/KotlinClassGeneratingEntityInstantiator.java",
                "+++ b/src/main/java/org/springframework/data/convert/KotlinClassGeneratingEntityInstantiator.java",
                "@@ -22,2 +22,3 @@ import kotlin.reflect.jvm.ReflectJvmMapping;",
                " import java.lang.reflect.Constructor;",
                "+import java.util.Arrays;",
                " import java.util.List;",
                "@@ -29,2 +30,3 @@ import org.springframework.data.mapping.PreferredConstructor;",
                " import org.springframework.data.mapping.PreferredConstructor.Parameter;",
                "+import org.springframework.data.mapping.model.MappingInstantiationException;",
                " import org.springframework.data.mapping.model.ParameterValueProvider;",
                "@@ -199,3 +201,13 @@ public class KotlinClassGeneratingEntityInstantiator extends ClassGeneratingEnti",
                "-\t\t\tPreferredConstructor<? extends T, P> preferredConstructor = entity.getPersistenceConstructor();",
                "+\t\t\tObject[] params = extractInvocationArguments(entity.getPersistenceConstructor(), provider);",
                "+",
                "+\t\t\ttry {",
                "+\t\t\t\treturn (T) instantiator.newInstance(params);",
                "+\t\t\t} catch (Exception e) {",
                "+\t\t\t\tthrow new MappingInstantiationException(entity, Arrays.asList(params), e);",
                "+\t\t\t}",
                "+\t\t}",
                "+",
                "+\t\tprivate <P extends PersistentProperty<P>, T> Object[] extractInvocationArguments(",
                "+\t\t\t\t@Nullable PreferredConstructor<? extends T, P> preferredConstructor, ParameterValueProvider<P> provider) {",
                "@@ -239,3 +251,3 @@ public class KotlinClassGeneratingEntityInstantiator extends ClassGeneratingEnti",
                "-\t\t\treturn (T) instantiator.newInstance(params);",
                "+\t\t\treturn params;",
                " \t\t}",
                "diff --git a/src/main/java/org/springframework/data/mapping/model/MappingInstantiationException.java b/src/main/java/org/springframework/data/mapping/model/MappingInstantiationException.java",
                "index 68e7a8299..37bbe9961 100644",
                "--- a/src/main/java/org/springframework/data/mapping/model/MappingInstantiationException.java",
                "+++ b/src/main/java/org/springframework/data/mapping/model/MappingInstantiationException.java",
                "@@ -17,2 +17,5 @@ package org.springframework.data.mapping.model;",
                "+import kotlin.reflect.KFunction;",
                "+import kotlin.reflect.jvm.ReflectJvmMapping;",
                "+",
                " import java.lang.reflect.Constructor;",
                "@@ -24,2 +27,3 @@ import org.springframework.data.mapping.PersistentEntity;",
                " import org.springframework.data.mapping.PreferredConstructor;",
                "+import org.springframework.data.util.ReflectionUtils;",
                " import org.springframework.lang.Nullable;",
                "@@ -90,3 +94,3 @@ public class MappingInstantiationException extends RuntimeException {",
                " \t\t\treturn String.format(TEXT_TEMPLATE, it.getType().getName(),",
                "-\t\t\t\t\tconstructor.map(c -> c.getConstructor().toString()).orElse(\"NO_CONSTRUCTOR\"), //",
                "+\t\t\t\t\tconstructor.map(c -> toString(c)).orElse(\"NO_CONSTRUCTOR\"), //",
                " \t\t\t\t\tString.join(\",\", toStringArgs));",
                "@@ -96,2 +100,18 @@ public class MappingInstantiationException extends RuntimeException {",
                "+\tprivate static String toString(PreferredConstructor<?, ?> preferredConstructor) {",
                "+",
                "+\t\tConstructor<?> constructor = preferredConstructor.getConstructor();",
                "+",
                "+\t\tif (ReflectionUtils.isSupportedKotlinClass(constructor.getDeclaringClass())) {",
                "+",
                "+\t\t\tKFunction<?> kotlinFunction = ReflectJvmMapping.getKotlinFunction(constructor);",
                "+",
                "+\t\t\tif (kotlinFunction != null) {",
                "+\t\t\t\treturn kotlinFunction.toString();",
                "+\t\t\t}",
                "+\t\t}",
                "+",
                "+\t\treturn constructor.toString();",
                "+\t}",
                "+",
                " \t/**"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/convert/KotlinClassGeneratingEntityInstantiator.java",
                "src/main/java/org/springframework/data/mapping/model/MappingInstantiationException.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "255": "Absent parameters cause NPE in ClassGeneratingEntityInstantiator [DATACMNS-1200] #1640"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "c6d880309d8ae5fd8180e70d3c6a2e418eca268b"
                ]
            ],
            "tags": [
                "2.1.0.M1",
                "2.1.0.M2",
                "2.1.0.M3",
                "2.1.0.RC1",
                "2.1.0.RC2",
                "2.1.0.RELEASE",
                "2.1.1.RELEASE",
                "2.1.10.RELEASE",
                "2.1.11.RELEASE",
                "2.1.12.RELEASE",
                "2.1.13.RELEASE",
                "2.1.14.RELEASE",
                "2.1.15.RELEASE",
                "2.1.16.RELEASE",
                "2.1.17.RELEASE",
                "2.1.18.RELEASE",
                "2.1.19.RELEASE",
                "2.1.2.RELEASE",
                "2.1.20.RELEASE",
                "2.1.21.RELEASE",
                "2.1.3.RELEASE",
                "2.1.4.RELEASE",
                "2.1.5.RELEASE",
                "2.1.6.RELEASE",
                "2.1.7.RELEASE",
                "2.1.8.RELEASE",
                "2.1.9.RELEASE",
                "2.2.0.M1",
                "2.2.0.M2",
                "2.2.0.M3",
                "2.2.0.M4",
                "2.2.0.RC1",
                "2.2.0.RC2",
                "2.2.0.RC3",
                "2.2.0.RELEASE",
                "2.2.1.RELEASE",
                "2.2.10.RELEASE",
                "2.2.11.RELEASE",
                "2.2.12.RELEASE",
                "2.2.13.RELEASE",
                "2.2.2.RELEASE",
                "2.2.3.RELEASE",
                "2.2.4.RELEASE",
                "2.2.5.RELEASE",
                "2.2.6.RELEASE",
                "2.2.7.RELEASE",
                "2.2.8.RELEASE",
                "2.2.9.RELEASE",
                "2.3.0.M1",
                "2.3.0.M2",
                "2.3.0.M3",
                "2.3.0.M4",
                "2.3.0.RC1",
                "2.3.0.RC2",
                "2.3.0.RELEASE",
                "2.3.1.RELEASE",
                "2.3.2.RELEASE",
                "2.3.3.RELEASE",
                "2.3.4.RELEASE",
                "2.3.5.RELEASE",
                "2.3.6.RELEASE",
                "2.3.7.RELEASE",
                "2.3.8.RELEASE",
                "2.3.9.RELEASE",
                "2.4.0",
                "2.4.0-M1",
                "2.4.0-M2",
                "2.4.0-RC1",
                "2.4.0-RC2",
                "2.4.1",
                "2.4.10",
                "2.4.11",
                "2.4.12",
                "2.4.13",
                "2.4.14",
                "2.4.15",
                "2.4.2",
                "2.4.3",
                "2.4.4",
                "2.4.5",
                "2.4.6",
                "2.4.7",
                "2.4.8",
                "2.4.9",
                "2.5.0",
                "2.5.0-M1",
                "2.5.0-M2",
                "2.5.0-M3",
                "2.5.0-M4",
                "2.5.0-M5",
                "2.5.0-RC1",
                "2.5.1",
                "2.5.10",
                "2.5.11",
                "2.5.12",
                "2.5.2",
                "2.5.3",
                "2.5.4",
                "2.5.5",
                "2.5.6",
                "2.5.7",
                "2.5.8",
                "2.5.9",
                "2.6.0",
                "2.6.0-M1",
                "2.6.0-M2",
                "2.6.0-M3",
                "2.6.0-RC1",
                "2.6.1",
                "2.6.10",
                "2.6.2",
                "2.6.3",
                "2.6.4",
                "2.6.5",
                "2.6.6",
                "2.6.7",
                "2.6.8",
                "2.6.9",
                "2.7.0",
                "2.7.0-M1",
                "2.7.0-M2",
                "2.7.0-M3",
                "2.7.0-M4",
                "2.7.0-RC1",
                "2.7.1",
                "2.7.10",
                "2.7.11",
                "2.7.12",
                "2.7.13",
                "2.7.14",
                "2.7.15",
                "2.7.16",
                "2.7.17",
                "2.7.18",
                "2.7.2",
                "2.7.3",
                "2.7.4",
                "2.7.5",
                "2.7.6",
                "2.7.7",
                "2.7.8",
                "2.7.9",
                "3.0.0",
                "3.0.0-M1",
                "3.0.0-M2",
                "3.0.0-M3",
                "3.0.0-M4",
                "3.0.0-M5",
                "3.0.0-M6",
                "3.0.0-RC1",
                "3.0.0-RC2",
                "3.0.1",
                "3.0.10",
                "3.0.11",
                "3.0.12",
                "3.0.2",
                "3.0.3",
                "3.0.4",
                "3.0.5",
                "3.0.6",
                "3.0.7",
                "3.0.8",
                "3.0.9",
                "3.1.0",
                "3.1.0-M1",
                "3.1.0-M2",
                "3.1.0-M3",
                "3.1.0-RC1",
                "3.1.1",
                "3.1.10",
                "3.1.11",
                "3.1.12",
                "3.1.2",
                "3.1.3",
                "3.1.4",
                "3.1.5",
                "3.1.6",
                "3.1.7",
                "3.1.8",
                "3.1.9",
                "3.2.0",
                "3.2.0-M1",
                "3.2.0-M2",
                "3.2.0-M3",
                "3.2.0-RC1",
                "3.2.1",
                "3.2.2",
                "3.2.3",
                "3.2.4",
                "3.2.5",
                "3.2.6",
                "3.2.7",
                "3.3.0",
                "3.3.0-M1",
                "3.3.0-M2",
                "3.3.0-RC1",
                "3.3.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: entity, request",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: entity",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 255",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "26da224081795d6f75144af755c12fd93fdba1bf",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1508407866,
            "hunks": 4,
            "message": "DATACMNS-1200 - Polishing. Left-over whitepspace. Original pull request: #255.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/convert/ClassGeneratingEntityInstantiator.java b/src/main/java/org/springframework/data/convert/ClassGeneratingEntityInstantiator.java",
                "index a2092ba2e..07d7b550a 100644",
                "--- a/src/main/java/org/springframework/data/convert/ClassGeneratingEntityInstantiator.java",
                "+++ b/src/main/java/org/springframework/data/convert/ClassGeneratingEntityInstantiator.java",
                "@@ -413,6 +413,6 @@ public class ClassGeneratingEntityInstantiator implements EntityInstantiator {",
                " \t\t\t\t\tif (parameterTypes[i].isPrimitive()) {",
                "-\t\t\t\t\t\t",
                "+",
                " \t\t\t\t\t\tmv.visitInsn(DUP);",
                " \t\t\t\t\t\tString parameterName = parameters.size() > i ? parameters.get(i).getName() : null;",
                "-\t\t\t\t\t\t",
                "+",
                " \t\t\t\t\t\tinsertAssertNotNull(mv, parameterName == null ? String.format(\"at index %d\", i) : parameterName);",
                "@@ -448,3 +448,3 @@ public class ClassGeneratingEntityInstantiator implements EntityInstantiator {",
                " \t\t/**",
                "-\t\t * Insert not {@literal null} assertion for a parameter.",
                "+\t\t * Insert not-{@literal null} assertion for a parameter.",
                " \t\t * ",
                "@@ -453,3 +453,3 @@ public class ClassGeneratingEntityInstantiator implements EntityInstantiator {",
                " \t\t */",
                "-\t\tprivate void insertAssertNotNull(MethodVisitor mv, String parameterName) {",
                "+\t\tprivate static void insertAssertNotNull(MethodVisitor mv, String parameterName) {"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/convert/ClassGeneratingEntityInstantiator.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "255": "Absent parameters cause NPE in ClassGeneratingEntityInstantiator [DATACMNS-1200] #1640"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "d2008ea3b7792d3f40301c0020c77827ad6359ed"
                ]
            ],
            "tags": [
                "2.0.1.RELEASE",
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.2.RELEASE",
                "2.0.3.RELEASE",
                "2.0.4.RELEASE",
                "2.0.5.RELEASE",
                "2.0.6.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: entity",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 255",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "edd8c5b8a337cec89e1c16a1e0d4f06825fffa73",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1508855466,
            "hunks": 1,
            "message": "DATACMNS-1201 - Support generated property accessors for types in default packages. We now support generated property accessors for types that reside in the default package. Original pull request: #256.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/mapping/model/ClassGeneratingPropertyAccessorFactory.java b/src/main/java/org/springframework/data/mapping/model/ClassGeneratingPropertyAccessorFactory.java",
                "index 658142a1a..e55fd8901 100644",
                "--- a/src/main/java/org/springframework/data/mapping/model/ClassGeneratingPropertyAccessorFactory.java",
                "+++ b/src/main/java/org/springframework/data/mapping/model/ClassGeneratingPropertyAccessorFactory.java",
                "@@ -135,3 +135,6 @@ public class ClassGeneratingPropertyAccessorFactory implements PersistentPropert",
                " \tprivate static boolean isTypeInjectable(PersistentEntity<?, ?> entity) {",
                "-\t\treturn entity.getType().getClassLoader() != null && !entity.getType().getPackage().getName().startsWith(\"java\");",
                "+",
                "+\t\tClass<?> type = entity.getType();",
                "+\t\treturn type.getClassLoader() != null",
                "+\t\t\t\t&& (type.getPackage() == null || !type.getPackage().getName().startsWith(\"java\"));",
                " \t}"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/mapping/model/ClassGeneratingPropertyAccessorFactory.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "256": "ClassGeneratingPropertyAccessorFactory.isTypeInjectable(\u2026) fails with NPE for entities in default packages [DATACMNS-1201] #1641"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "14a56dee00c1651573c41b601b653c88af3a3c69"
                ],
                [
                    "no-tag",
                    "a13fc238d3c1c7c46403c89001759debeed7c8ec"
                ]
            ],
            "tags": [
                "2.0.1.RELEASE",
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.2.RELEASE",
                "2.0.3.RELEASE",
                "2.0.4.RELEASE",
                "2.0.5.RELEASE",
                "2.0.6.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: access, request, property",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: access, property",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 256",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fdafe96c5ccb305783c5f2074208ebbe54e9bbc0",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1508332358,
            "hunks": 3,
            "message": "DATACMNS-1200 - Fix entity instantiation of Kotlin types using primitives with default values. We now determine initial values for primitive parameters in Kotlin constructors that are absent (null) and defaulted. We default all Java primitive types to their initial zero value to prevent possible NullPointerExceptions. Kotlin defaulting uses a bitmask to determine which parameter should be defaulted but still requires the appropriate type. Previously, null values were attempted to cast/unbox and caused NullPointerException even though they had default values through Kotlin assigned. Original pull request: #255.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/convert/KotlinClassGeneratingEntityInstantiator.java b/src/main/java/org/springframework/data/convert/KotlinClassGeneratingEntityInstantiator.java",
                "index 05b7d5cd3..9b35c17e1 100644",
                "--- a/src/main/java/org/springframework/data/convert/KotlinClassGeneratingEntityInstantiator.java",
                "+++ b/src/main/java/org/springframework/data/convert/KotlinClassGeneratingEntityInstantiator.java",
                "@@ -231,3 +231,5 @@ public class KotlinClassGeneratingEntityInstantiator extends ClassGeneratingEnti",
                "-\t\t\t\tObject param = provider.getParameterValue(parameters.get(i));",
                "+\t\t\t\tParameter<Object, P> parameter = parameters.get(i);",
                "+\t\t\t\tClass<Object> type = parameter.getType().getType();",
                "+\t\t\t\tObject param = provider.getParameterValue(parameter);",
                "@@ -236,6 +238,8 @@ public class KotlinClassGeneratingEntityInstantiator extends ClassGeneratingEnti",
                " \t\t\t\t// what about null and parameter is mandatory? What if parameter is non-null?",
                "-\t\t\t\tif (kParameter.isOptional()) {",
                "+\t\t\t\tif (kParameter.isOptional() && param == null) {",
                "-\t\t\t\t\tif (param == null) {",
                "-\t\t\t\t\t\tdefaulting[slot] = defaulting[slot] | (1 << (i - offset));",
                "+\t\t\t\t\tdefaulting[slot] = defaulting[slot] | (1 << (i - offset));",
                "+",
                "+\t\t\t\t\tif (type.isPrimitive()) {",
                "+\t\t\t\t\t\tparam = getPrimitiveDefault(type);",
                " \t\t\t\t\t}",
                "@@ -253,2 +257,39 @@ public class KotlinClassGeneratingEntityInstantiator extends ClassGeneratingEnti",
                " \t\t}",
                "+",
                "+\t\tprivate static Object getPrimitiveDefault(Class<?> type) {",
                "+",
                "+\t\t\tif (type == Byte.TYPE || type == Byte.class) {",
                "+\t\t\t\treturn (byte) 0;",
                "+\t\t\t}",
                "+",
                "+\t\t\tif (type == Short.TYPE || type == Short.class) {",
                "+\t\t\t\treturn (short) 0;",
                "+\t\t\t}",
                "+",
                "+\t\t\tif (type == Integer.TYPE || type == Integer.class) {",
                "+\t\t\t\treturn 0;",
                "+\t\t\t}",
                "+",
                "+\t\t\tif (type == Long.TYPE || type == Long.class) {",
                "+\t\t\t\treturn 0L;",
                "+\t\t\t}",
                "+",
                "+\t\t\tif (type == Float.TYPE || type == Float.class) {",
                "+\t\t\t\treturn 0F;",
                "+\t\t\t}",
                "+",
                "+\t\t\tif (type == Double.TYPE || type == Double.class) {",
                "+\t\t\t\treturn 0D;",
                "+\t\t\t}",
                "+",
                "+\t\t\tif (type == Character.TYPE || type == Character.class) {",
                "+\t\t\t\treturn '\\u0000';",
                "+\t\t\t}",
                "+",
                "+\t\t\tif (type == Boolean.TYPE) {",
                "+\t\t\t\treturn Boolean.FALSE;",
                "+\t\t\t}",
                "+",
                "+\t\t\tthrow new IllegalArgumentException(String.format(\"Primitive type %s not supported!\", type));",
                "+\t\t}",
                " \t}"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/convert/KotlinClassGeneratingEntityInstantiator.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "255": "Absent parameters cause NPE in ClassGeneratingEntityInstantiator [DATACMNS-1200] #1640"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "cf5af6a971a0abf4b85e180463f1c389ecc57ba1"
                ]
            ],
            "tags": [
                "2.0.1.RELEASE",
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.2.RELEASE",
                "2.0.3.RELEASE",
                "2.0.4.RELEASE",
                "2.0.5.RELEASE",
                "2.0.6.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: entity, cause, request, parameter",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: entity",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 255",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f45e2be383c66bbd8ea63f3cc1744ff4d58f3f31",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1508329625,
            "hunks": 4,
            "message": "DATACMNS-1200 - Guard casts to primitive type in ClassGeneratingEntityInstantiator. We now insert assertions for primitive types before passing these to the actual constructor to prevent NullPointerExceptions. We also output the index/parameter name if the parameter was null. Original pull request: #255.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/convert/ClassGeneratingEntityInstantiator.java b/src/main/java/org/springframework/data/convert/ClassGeneratingEntityInstantiator.java",
                "index 144b3e005..a2092ba2e 100644",
                "--- a/src/main/java/org/springframework/data/convert/ClassGeneratingEntityInstantiator.java",
                "+++ b/src/main/java/org/springframework/data/convert/ClassGeneratingEntityInstantiator.java",
                "@@ -25,2 +25,3 @@ import java.util.Arrays;",
                " import java.util.HashMap;",
                "+import java.util.List;",
                " import java.util.Map;",
                "@@ -401,2 +402,3 @@ public class ClassGeneratingEntityInstantiator implements EntityInstantiator {",
                " \t\t\t\tClass<?>[] parameterTypes = ctor.getParameterTypes();",
                "+\t\t\t\tList<? extends Parameter<Object, ?>> parameters = constructor.getParameters();",
                "@@ -411,2 +413,7 @@ public class ClassGeneratingEntityInstantiator implements EntityInstantiator {",
                " \t\t\t\t\tif (parameterTypes[i].isPrimitive()) {",
                "+\t\t\t\t\t\t",
                "+\t\t\t\t\t\tmv.visitInsn(DUP);",
                "+\t\t\t\t\t\tString parameterName = parameters.size() > i ? parameters.get(i).getName() : null;",
                "+\t\t\t\t\t\t",
                "+\t\t\t\t\t\tinsertAssertNotNull(mv, parameterName == null ? String.format(\"at index %d\", i) : parameterName);",
                " \t\t\t\t\t\tinsertUnboxInsns(mv, Type.getType(parameterTypes[i]).toString().charAt(0), \"\");",
                "@@ -440,2 +447,16 @@ public class ClassGeneratingEntityInstantiator implements EntityInstantiator {",
                "+\t\t/**",
                "+\t\t * Insert not {@literal null} assertion for a parameter.",
                "+\t\t * ",
                "+\t\t * @param mv the method visitor into which instructions should be inserted",
                "+\t\t * @param parameterName name of the parameter to create the appropriate assertion message.",
                "+\t\t */",
                "+\t\tprivate void insertAssertNotNull(MethodVisitor mv, String parameterName) {",
                "+",
                "+\t\t\t// Assert.notNull(property)",
                "+\t\t\tmv.visitLdcInsn(String.format(\"Parameter %s must not be null!\", parameterName));",
                "+\t\t\tmv.visitMethodInsn(INVOKESTATIC, \"org/springframework/util/Assert\", \"notNull\",",
                "+\t\t\t\t\tString.format(\"(%s%s)V\", String.format(\"L%s;\", JAVA_LANG_OBJECT), \"Ljava/lang/String;\"), false);",
                "+\t\t}",
                "+",
                " \t\t/**"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/convert/ClassGeneratingEntityInstantiator.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "255": "Absent parameters cause NPE in ClassGeneratingEntityInstantiator [DATACMNS-1200] #1640"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "78bd8fb0f7e7595f029f05f96c036737ed1b5dfc"
                ]
            ],
            "tags": [
                "2.0.1.RELEASE",
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.2.RELEASE",
                "2.0.3.RELEASE",
                "2.0.4.RELEASE",
                "2.0.5.RELEASE",
                "2.0.6.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: entity, request, parameter",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: entity",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 255",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "27279295a8684fe3e97c3609d5fd28a36ebbf560",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1505450722,
            "hunks": 11,
            "message": "DATACMNS-1158 - ProjectionFactory is now configurable by module implementations. Introduced RepositoryFactorySupport.getProjectionFactory(\u00e2\u0080\u00a6) to create a ProjectionFactory to be used for repository instances created. The default implementation uses the SpelAwareProxyProjectionFactory. The ProjectionInformation implementation is now a named class so it can be used for more specialized implementations. Original pull request: #243. Related issue: DATAJPA-1173.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/projection/SpelAwareProxyProjectionFactory.java b/src/main/java/org/springframework/data/projection/SpelAwareProxyProjectionFactory.java",
                "index f3b60a9c6..449a6a0ed 100644",
                "--- a/src/main/java/org/springframework/data/projection/SpelAwareProxyProjectionFactory.java",
                "+++ b/src/main/java/org/springframework/data/projection/SpelAwareProxyProjectionFactory.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright 2015-2016 the original author or authors.",
                "+ * Copyright 2015-2017 the original author or authors.",
                "  *",
                "@@ -41,2 +41,3 @@ import org.springframework.util.ReflectionUtils;",
                "  * @author Mark Paluch",
                "+ * @author Jens Schauder",
                "  * @since 1.10",
                "@@ -65,25 +66,3 @@ public class SpelAwareProxyProjectionFactory extends ProxyProjectionFactory impl",
                " \tprotected ProjectionInformation createProjectionInformation(Class<?> projectionType) {",
                "-",
                "-\t\treturn new DefaultProjectionInformation(projectionType) {",
                "-",
                "-\t\t\t/* ",
                "-\t\t\t * (non-Javadoc)",
                "-\t\t\t * @see org.springframework.data.projection.DefaultProjectionInformation#isInputProperty(java.beans.PropertyDescriptor)",
                "-\t\t\t */",
                "-\t\t\t@Override",
                "-\t\t\tprotected boolean isInputProperty(PropertyDescriptor descriptor) {",
                "-",
                "-\t\t\t\tif (!super.isInputProperty(descriptor)) {",
                "-\t\t\t\t\treturn false;",
                "-\t\t\t\t}",
                "-",
                "-\t\t\t\tMethod readMethod = descriptor.getReadMethod();",
                "-",
                "-\t\t\t\tif (readMethod == null) {",
                "-\t\t\t\t\treturn false;",
                "-\t\t\t\t}",
                "-",
                "-\t\t\t\treturn AnnotationUtils.findAnnotation(readMethod, Value.class) == null;",
                "-\t\t\t}",
                "-\t\t};",
                "+\t\treturn new SpelAwareProjectionInformation(projectionType);",
                " \t}",
                "@@ -123,2 +102,29 @@ public class SpelAwareProxyProjectionFactory extends ProxyProjectionFactory impl",
                " \t}",
                "+",
                "+\tprotected static class SpelAwareProjectionInformation extends DefaultProjectionInformation {",
                "+",
                "+\t\tprotected SpelAwareProjectionInformation(Class<?> projectionType) {",
                "+\t\t\tsuper(projectionType);",
                "+\t\t}",
                "+",
                "+\t\t/*",
                "+\t\t * (non-Javadoc)",
                "+\t\t * @see org.springframework.data.projection.DefaultProjectionInformation#isInputProperty(java.beans.PropertyDescriptor)",
                "+\t\t */",
                "+\t\t@Override",
                "+\t\tprotected boolean isInputProperty(PropertyDescriptor descriptor) {",
                "+",
                "+\t\t\tif (!super.isInputProperty(descriptor)) {",
                "+\t\t\t\treturn false;",
                "+\t\t\t}",
                "+",
                "+\t\t\tMethod readMethod = descriptor.getReadMethod();",
                "+",
                "+\t\t\tif (readMethod == null) {",
                "+\t\t\t\treturn false;",
                "+\t\t\t}",
                "+",
                "+\t\t\treturn AnnotationUtils.findAnnotation(readMethod, Value.class) == null;",
                "+\t\t}",
                "+\t}",
                " }",
                "diff --git a/src/main/java/org/springframework/data/repository/core/support/RepositoryFactorySupport.java b/src/main/java/org/springframework/data/repository/core/support/RepositoryFactorySupport.java",
                "index 738389e2c..a27049135 100644",
                "--- a/src/main/java/org/springframework/data/repository/core/support/RepositoryFactorySupport.java",
                "+++ b/src/main/java/org/springframework/data/repository/core/support/RepositoryFactorySupport.java",
                "@@ -36,2 +36,3 @@ import org.aopalliance.intercept.MethodInterceptor;",
                " import org.aopalliance.intercept.MethodInvocation;",
                "+import org.jetbrains.annotations.NotNull;",
                " import org.springframework.aop.framework.ProxyFactory;",
                "@@ -47,2 +48,3 @@ import org.springframework.core.convert.TypeDescriptor;",
                " import org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor;",
                "+import org.springframework.data.projection.ProjectionFactory;",
                " import org.springframework.data.projection.SpelAwareProxyProjectionFactory;",
                "@@ -79,2 +81,3 @@ import org.springframework.util.ConcurrentReferenceHashMap.ReferenceType;",
                "  * @author Christoph Strobl",
                "+ * @author Jens Schauder",
                "  */",
                "@@ -314,3 +317,6 @@ public abstract class RepositoryFactorySupport implements BeanClassLoaderAware,",
                " \t\tresult.addAdvice(new DefaultMethodInvokingMethodInterceptor());",
                "-\t\tresult.addAdvice(new QueryExecutorMethodInterceptor(information));",
                "+\t\tresult.addAdvice(new QueryExecutorMethodInterceptor( //",
                "+\t\t\t\tinformation, //",
                "+\t\t\t\tgetProjectionFactory(classLoader, beanFactory) //",
                "+\t\t));",
                "@@ -322,2 +328,12 @@ public abstract class RepositoryFactorySupport implements BeanClassLoaderAware,",
                "+\t@NotNull",
                "+\tprotected ProjectionFactory getProjectionFactory(ClassLoader classLoader, BeanFactory beanFactory) {",
                "+",
                "+\t\tSpelAwareProxyProjectionFactory factory = new SpelAwareProxyProjectionFactory();",
                "+\t\tfactory.setBeanClassLoader(classLoader);",
                "+\t\tfactory.setBeanFactory(beanFactory);",
                "+",
                "+\t\treturn factory;",
                "+\t}",
                "+",
                " \t/**",
                "@@ -503,3 +519,4 @@ public abstract class RepositoryFactorySupport implements BeanClassLoaderAware,",
                " \t\t */",
                "-\t\tpublic QueryExecutorMethodInterceptor(RepositoryInformation repositoryInformation) {",
                "+\t\tpublic QueryExecutorMethodInterceptor(RepositoryInformation repositoryInformation,",
                "+\t\t\t\tProjectionFactory projectionFactory) {",
                "@@ -517,14 +534,16 @@ public abstract class RepositoryFactorySupport implements BeanClassLoaderAware,",
                "-\t\t\tthis.queries = lookupStrategy.map(it -> {",
                "-",
                "-\t\t\t\tSpelAwareProxyProjectionFactory factory = new SpelAwareProxyProjectionFactory();",
                "-\t\t\t\tfactory.setBeanClassLoader(classLoader);",
                "-\t\t\t\tfactory.setBeanFactory(beanFactory);",
                "+\t\t\tthis.queries = lookupStrategy.map( //",
                "+\t\t\t\t\tit -> mapMethodsToQuery(repositoryInformation, projectionFactory, it) //",
                "+\t\t\t).orElse(Collections.emptyMap());",
                "+\t\t}",
                "-\t\t\t\treturn repositoryInformation.getQueryMethods().stream()//",
                "-\t\t\t\t\t\t.map(method -> Pair.of(method, it.resolveQuery(method, repositoryInformation, factory, namedQueries)))//",
                "-\t\t\t\t\t\t.peek(pair -> invokeListeners(pair.getSecond()))//",
                "-\t\t\t\t\t\t.collect(Pair.toMap());",
                "+\t\tprivate Map<Method, RepositoryQuery> mapMethodsToQuery(RepositoryInformation repositoryInformation,",
                "+\t\t\t\tProjectionFactory projectionFactory, QueryLookupStrategy lookupStrategy) {",
                "-\t\t\t}).orElse(Collections.emptyMap());",
                "+\t\t\treturn repositoryInformation.getQueryMethods().stream() //",
                "+\t\t\t\t\t.map(method -> Pair.of( //",
                "+\t\t\t\t\t\t\tmethod, //",
                "+\t\t\t\t\t\t\tlookupStrategy.resolveQuery(method, repositoryInformation, projectionFactory, namedQueries))) //",
                "+\t\t\t\t\t.peek(pair -> invokeListeners(pair.getSecond())) //",
                "+\t\t\t\t\t.collect(Pair.toMap());",
                " \t\t}"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/projection/SpelAwareProxyProjectionFactory.java",
                "src/main/java/org/springframework/data/repository/core/support/RepositoryFactorySupport.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "243": "Rename PersistentProperty.getPersistentEntityType() to a plural name since it returns an Iterable. [DATACMNS-1161] #1602"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "300f3cfd661d8533618d433d28d922ba057bdeea"
                ],
                [
                    "no-tag",
                    "3765feb91713725118c69d2155e22fd1c4d3e8e9"
                ]
            ],
            "tags": [
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.2.RELEASE",
                "2.0.3.RELEASE",
                "2.0.4.RELEASE",
                "2.0.5.RELEASE",
                "2.0.6.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: projection, request",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: projection",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 243",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "309cdc5e43b98f9bfe8d361703f8416919c7c9d2",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1510642356,
            "hunks": 4,
            "message": "DATACMNS-1210 - Fix concurrency issue in BasicPersitentEntity. Make sure to use concurrent collection implementations for properties holding mutable state. Especially the ones making use of computeIfAbsent(\u00e2\u0080\u00a6). Usage of ConcurrentReferenceHashMap allows us to move on without additional changes as it allows to store null values, whereas ConcurrentHashMap would require us to store explicit NullValue placeholders for such cases, potentially causing trouble in downstream store specific projects. JMH Benchmarks done with the Spring Data MongoDB mapping layer showed a potential performance loss of up to 5%. However a comparison between ConcurrentReferenceHashMap and ConcurrentHashMap did not show any significant difference in performance. Original pull request: #259.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/mapping/model/BasicPersistentEntity.java b/src/main/java/org/springframework/data/mapping/model/BasicPersistentEntity.java",
                "index 144894528..667b0d57f 100644",
                "--- a/src/main/java/org/springframework/data/mapping/model/BasicPersistentEntity.java",
                "+++ b/src/main/java/org/springframework/data/mapping/model/BasicPersistentEntity.java",
                "@@ -22,3 +22,13 @@ import java.io.Serializable;",
                " import java.lang.annotation.Annotation;",
                "-import java.util.*;",
                "+import java.util.ArrayList;",
                "+import java.util.Collections;",
                "+import java.util.Comparator;",
                "+import java.util.HashSet;",
                "+import java.util.Iterator;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+import java.util.Optional;",
                "+import java.util.Set;",
                "+import java.util.TreeSet;",
                "+import java.util.concurrent.ConcurrentHashMap;",
                " import java.util.stream.Collectors;",
                "@@ -32,3 +42,4 @@ import org.springframework.lang.Nullable;",
                " import org.springframework.util.Assert;",
                "-import org.springframework.util.LinkedMultiValueMap;",
                "+import org.springframework.util.CollectionUtils;",
                "+import org.springframework.util.ConcurrentReferenceHashMap;",
                " import org.springframework.util.MultiValueMap;",
                "@@ -95,5 +106,6 @@ public class BasicPersistentEntity<T, P extends PersistentProperty<P>> implement",
                "-\t\tthis.propertyCache = new HashMap<>();",
                "-\t\tthis.annotationCache = new HashMap<>();",
                "-\t\tthis.propertyAnnotationCache = new LinkedMultiValueMap<>();",
                "+\t\tthis.propertyCache = new ConcurrentReferenceHashMap<>();",
                "+\t\tthis.annotationCache = new ConcurrentReferenceHashMap<>();",
                "+\t\tthis.propertyAnnotationCache = CollectionUtils",
                "+\t\t\t\t.toMultiValueMap(new ConcurrentReferenceHashMap<Class<? extends Annotation>, List<P>>());",
                " \t\tthis.propertyAccessorFactory = BeanWrapperPropertyAccessorFactory.INSTANCE;",
                "@@ -195,5 +207,3 @@ public class BasicPersistentEntity<T, P extends PersistentProperty<P>> implement",
                "-\t\tif (!propertyCache.containsKey(property.getName())) {",
                "-\t\t\tpropertyCache.put(property.getName(), property);",
                "-\t\t}",
                "+\t\tpropertyCache.computeIfAbsent(property.getName(), key -> property);"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/mapping/model/BasicPersistentEntity.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "259": "Thread-safetey issue in annotation detection in BasicPersistentEntity [DATACMNS-1210] #1649"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.1.0.M1",
                "2.1.0.M2",
                "2.1.0.M3",
                "2.1.0.RC1",
                "2.1.0.RC2",
                "2.1.0.RELEASE",
                "2.1.1.RELEASE",
                "2.1.10.RELEASE",
                "2.1.11.RELEASE",
                "2.1.12.RELEASE",
                "2.1.13.RELEASE",
                "2.1.14.RELEASE",
                "2.1.15.RELEASE",
                "2.1.16.RELEASE",
                "2.1.17.RELEASE",
                "2.1.18.RELEASE",
                "2.1.19.RELEASE",
                "2.1.2.RELEASE",
                "2.1.20.RELEASE",
                "2.1.21.RELEASE",
                "2.1.3.RELEASE",
                "2.1.4.RELEASE",
                "2.1.5.RELEASE",
                "2.1.6.RELEASE",
                "2.1.7.RELEASE",
                "2.1.8.RELEASE",
                "2.1.9.RELEASE",
                "2.2.0.M1",
                "2.2.0.M2",
                "2.2.0.M3",
                "2.2.0.M4",
                "2.2.0.RC1",
                "2.2.0.RC2",
                "2.2.0.RC3",
                "2.2.0.RELEASE",
                "2.2.1.RELEASE",
                "2.2.10.RELEASE",
                "2.2.11.RELEASE",
                "2.2.12.RELEASE",
                "2.2.13.RELEASE",
                "2.2.2.RELEASE",
                "2.2.3.RELEASE",
                "2.2.4.RELEASE",
                "2.2.5.RELEASE",
                "2.2.6.RELEASE",
                "2.2.7.RELEASE",
                "2.2.8.RELEASE",
                "2.2.9.RELEASE",
                "2.3.0.M1",
                "2.3.0.M2",
                "2.3.0.M3",
                "2.3.0.M4",
                "2.3.0.RC1",
                "2.3.0.RC2",
                "2.3.0.RELEASE",
                "2.3.1.RELEASE",
                "2.3.2.RELEASE",
                "2.3.3.RELEASE",
                "2.3.4.RELEASE",
                "2.3.5.RELEASE",
                "2.3.6.RELEASE",
                "2.3.7.RELEASE",
                "2.3.8.RELEASE",
                "2.3.9.RELEASE",
                "2.4.0",
                "2.4.0-M1",
                "2.4.0-M2",
                "2.4.0-RC1",
                "2.4.0-RC2",
                "2.4.1",
                "2.4.10",
                "2.4.11",
                "2.4.12",
                "2.4.13",
                "2.4.14",
                "2.4.15",
                "2.4.2",
                "2.4.3",
                "2.4.4",
                "2.4.5",
                "2.4.6",
                "2.4.7",
                "2.4.8",
                "2.4.9",
                "2.5.0",
                "2.5.0-M1",
                "2.5.0-M2",
                "2.5.0-M3",
                "2.5.0-M4",
                "2.5.0-M5",
                "2.5.0-RC1",
                "2.5.1",
                "2.5.10",
                "2.5.11",
                "2.5.12",
                "2.5.2",
                "2.5.3",
                "2.5.4",
                "2.5.5",
                "2.5.6",
                "2.5.7",
                "2.5.8",
                "2.5.9",
                "2.6.0",
                "2.6.0-M1",
                "2.6.0-M2",
                "2.6.0-M3",
                "2.6.0-RC1",
                "2.6.1",
                "2.6.10",
                "2.6.2",
                "2.6.3",
                "2.6.4",
                "2.6.5",
                "2.6.6",
                "2.6.7",
                "2.6.8",
                "2.6.9",
                "2.7.0",
                "2.7.0-M1",
                "2.7.0-M2",
                "2.7.0-M3",
                "2.7.0-M4",
                "2.7.0-RC1",
                "2.7.1",
                "2.7.10",
                "2.7.11",
                "2.7.12",
                "2.7.13",
                "2.7.14",
                "2.7.15",
                "2.7.16",
                "2.7.17",
                "2.7.18",
                "2.7.2",
                "2.7.3",
                "2.7.4",
                "2.7.5",
                "2.7.6",
                "2.7.7",
                "2.7.8",
                "2.7.9",
                "3.0.0",
                "3.0.0-M1",
                "3.0.0-M2",
                "3.0.0-M3",
                "3.0.0-M4",
                "3.0.0-M5",
                "3.0.0-M6",
                "3.0.0-RC1",
                "3.0.0-RC2",
                "3.0.1",
                "3.0.10",
                "3.0.11",
                "3.0.12",
                "3.0.2",
                "3.0.3",
                "3.0.4",
                "3.0.5",
                "3.0.6",
                "3.0.7",
                "3.0.8",
                "3.0.9",
                "3.1.0",
                "3.1.0-M1",
                "3.1.0-M2",
                "3.1.0-M3",
                "3.1.0-RC1",
                "3.1.1",
                "3.1.10",
                "3.1.11",
                "3.1.12",
                "3.1.2",
                "3.1.3",
                "3.1.4",
                "3.1.5",
                "3.1.6",
                "3.1.7",
                "3.1.8",
                "3.1.9",
                "3.2.0",
                "3.2.0-M1",
                "3.2.0-M2",
                "3.2.0-M3",
                "3.2.0-RC1",
                "3.2.1",
                "3.2.2",
                "3.2.3",
                "3.2.4",
                "3.2.5",
                "3.2.6",
                "3.2.7",
                "3.3.0",
                "3.3.0-M1",
                "3.3.0-M2",
                "3.3.0-RC1",
                "3.3.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: entity, reference, request",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: entity",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 259",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4d454405136d57899d009cfebb23f46d5b376808",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1509093638,
            "hunks": 17,
            "message": "DATACMNS-1180 - Fixed accessor lookup for generic properties. In AbstractPersistentProperty, we now resolve the potentially generic return and parameter types of getters and setters. To achieve that Property has now been made aware of the actual owning type.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/mapping/context/AbstractMappingContext.java b/src/main/java/org/springframework/data/mapping/context/AbstractMappingContext.java",
                "index 218eb0342..0d3a6504c 100644",
                "--- a/src/main/java/org/springframework/data/mapping/context/AbstractMappingContext.java",
                "+++ b/src/main/java/org/springframework/data/mapping/context/AbstractMappingContext.java",
                "@@ -515,2 +515,3 @@ public abstract class AbstractMappingContext<E extends MutablePersistentEntity<?",
                " \t\t\tString fieldName = field.getName();",
                "+\t\t\tTypeInformation<?> type = entity.getTypeInformation();",
                "@@ -519,4 +520,4 @@ public abstract class AbstractMappingContext<E extends MutablePersistentEntity<?",
                " \t\t\tProperty property = Optional.ofNullable(descriptors.get(fieldName))//",
                "-\t\t\t\t\t.map(it -> Property.of(field, it))//",
                "-\t\t\t\t\t.orElseGet(() -> Property.of(field));",
                "+\t\t\t\t\t.map(it -> Property.of(type, field, it))//",
                "+\t\t\t\t\t.orElseGet(() -> Property.of(type, field));",
                "@@ -537,3 +538,3 @@ public abstract class AbstractMappingContext<E extends MutablePersistentEntity<?",
                " \t\t\t\t\t.filter(Property::supportsStandalone) //",
                "-\t\t\t\t\t.map(Property::of) //",
                "+\t\t\t\t\t.map(it -> Property.of(entity.getTypeInformation(), it)) //",
                " \t\t\t\t\t.filter(PersistentPropertyFilter.INSTANCE::matches) //",
                "diff --git a/src/main/java/org/springframework/data/mapping/model/Property.java b/src/main/java/org/springframework/data/mapping/model/Property.java",
                "index 125c028e3..f8f7f6b74 100644",
                "--- a/src/main/java/org/springframework/data/mapping/model/Property.java",
                "+++ b/src/main/java/org/springframework/data/mapping/model/Property.java",
                "@@ -28,2 +28,3 @@ import org.springframework.data.util.Lazy;",
                " import org.springframework.data.util.Optionals;",
                "+import org.springframework.data.util.TypeInformation;",
                " import org.springframework.lang.Nullable;",
                "@@ -51,4 +52,5 @@ public class Property {",
                "-\tprivate Property(Optional<Field> field, Optional<PropertyDescriptor> descriptor) {",
                "+\tprivate Property(TypeInformation<?> type, Optional<Field> field, Optional<PropertyDescriptor> descriptor) {",
                "+\t\tAssert.notNull(type, \"Type must not be null!\");",
                " \t\tAssert.isTrue(Optionals.isAnyPresent(field, descriptor), \"Either field or descriptor has to be given!\");",
                "@@ -58,3 +60,6 @@ public class Property {",
                "-\t\tthis.rawType = withFieldOrDescriptor(Field::getType, PropertyDescriptor::getPropertyType);",
                "+\t\tthis.rawType = withFieldOrDescriptor( //",
                "+\t\t\t\tit -> type.getRequiredProperty(it.getName()).getType(), //",
                "+\t\t\t\tit -> type.getRequiredProperty(it.getName()).getType() //",
                "+\t\t);",
                " \t\tthis.hashCode = Lazy.of(() -> withFieldOrDescriptor(Object::hashCode));",
                "@@ -65,3 +70,3 @@ public class Property {",
                " \t\t\t\t.filter(it -> getType() != null)//",
                "-\t\t\t\t.filter(it -> getType().isAssignableFrom(it.getReturnType()));",
                "+\t\t\t\t.filter(it -> getType().isAssignableFrom(type.getReturnType(it).getType()));",
                "@@ -69,3 +74,3 @@ public class Property {",
                " \t\t\t\t.filter(it -> getType() != null)//",
                "-\t\t\t\t.filter(it -> it.getParameterTypes()[0].isAssignableFrom(getType()));",
                "+\t\t\t\t.filter(it -> type.getParameterTypes(it).get(0).getType().isAssignableFrom(getType()));",
                " \t}",
                "@@ -75,2 +80,3 @@ public class Property {",
                " \t *",
                "+\t * @param type the owning type, must not be {@literal null}.",
                " \t * @param field must not be {@literal null}.",
                "@@ -78,3 +84,3 @@ public class Property {",
                " \t */",
                "-\tpublic static Property of(Field field) {",
                "+\tpublic static Property of(TypeInformation<?> type, Field field) {",
                "@@ -82,3 +88,3 @@ public class Property {",
                "-\t\treturn new Property(Optional.of(field), Optional.empty());",
                "+\t\treturn new Property(type, Optional.of(field), Optional.empty());",
                " \t}",
                "@@ -88,2 +94,3 @@ public class Property {",
                " \t *",
                "+\t * @param type the owning type, must not be {@literal null}.",
                " \t * @param field must not be {@literal null}.",
                "@@ -92,3 +99,3 @@ public class Property {",
                " \t */",
                "-\tpublic static Property of(Field field, PropertyDescriptor descriptor) {",
                "+\tpublic static Property of(TypeInformation<?> type, Field field, PropertyDescriptor descriptor) {",
                "@@ -97,3 +104,3 @@ public class Property {",
                "-\t\treturn new Property(Optional.of(field), Optional.of(descriptor));",
                "+\t\treturn new Property(type, Optional.of(field), Optional.of(descriptor));",
                " \t}",
                "@@ -104,2 +111,3 @@ public class Property {",
                " \t *",
                "+\t * @param type the owning type, must not be {@literal null}.",
                " \t * @param descriptor must not be {@literal null}.",
                "@@ -108,3 +116,3 @@ public class Property {",
                " \t */",
                "-\tpublic static Property of(PropertyDescriptor descriptor) {",
                "+\tpublic static Property of(TypeInformation<?> type, PropertyDescriptor descriptor) {",
                "@@ -112,3 +120,3 @@ public class Property {",
                "-\t\treturn new Property(Optional.empty(), Optional.of(descriptor));",
                "+\t\treturn new Property(type, Optional.empty(), Optional.of(descriptor));",
                " \t}"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/mapping/context/AbstractMappingContext.java",
                "src/main/java/org/springframework/data/mapping/model/Property.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "ce8d923382145d651780aa5e480c294dcc9ce6b3"
                ],
                [
                    "no-tag",
                    "baee26e5e727aa9328cd850d232bcea497b55647"
                ]
            ],
            "tags": [
                "2.0.1.RELEASE",
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.2.RELEASE",
                "2.0.3.RELEASE",
                "2.0.4.RELEASE",
                "2.0.5.RELEASE",
                "2.0.6.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: access, property, parameter",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: property",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "408b9abd88cb62657498199c313b80f04a5fa8f3",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1515582012,
            "hunks": 5,
            "message": "DATACMNS-1235 - Polishing. Original pull request: #265.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/querydsl/SimpleEntityPathResolver.java b/src/main/java/org/springframework/data/querydsl/SimpleEntityPathResolver.java",
                "index 3ca1737f4..2268bbda2 100644",
                "--- a/src/main/java/org/springframework/data/querydsl/SimpleEntityPathResolver.java",
                "+++ b/src/main/java/org/springframework/data/querydsl/SimpleEntityPathResolver.java",
                "@@ -21,2 +21,3 @@ import java.util.Optional;",
                "+import org.springframework.util.Assert;",
                " import org.springframework.util.ClassUtils;",
                "@@ -42,3 +43,11 @@ public class SimpleEntityPathResolver implements EntityPathResolver {",
                "+\t/**",
                "+\t * Creates a new {@link SimpleEntityPathResolver} with the given query package suffix.",
                "+\t * ",
                "+\t * @param querySuffix must not be {@literal null}.",
                "+\t */",
                " \tpublic SimpleEntityPathResolver(String querySuffix) {",
                "+",
                "+\t\tAssert.notNull(querySuffix, \"Query suffix must not be null!\");",
                "+",
                " \t\tthis.querySuffix = querySuffix;",
                "@@ -104,3 +113,5 @@ public class SimpleEntityPathResolver implements EntityPathResolver {",
                " \t\tString simpleClassName = ClassUtils.getShortName(domainClass);",
                "-\t\treturn String.format(\"%s%s.Q%s%s\", domainClass.getPackage().getName(), querySuffix, getClassBase(simpleClassName),",
                "+\t\tString packageName = domainClass.getPackage().getName();",
                "+",
                "+\t\treturn String.format(\"%s%s.Q%s%s\", packageName, querySuffix, getClassBase(simpleClassName),",
                " \t\t\t\tdomainClass.getSimpleName());",
                "@@ -118,7 +129,3 @@ public class SimpleEntityPathResolver implements EntityPathResolver {",
                "-\t\tif (parts.length < 2) {",
                "-\t\t\treturn \"\";",
                "-\t\t}",
                "-",
                "-\t\treturn parts[0] + \"_\";",
                "+\t\treturn parts.length < 2 ? \"\" : parts[0] + \"_\";",
                " \t}"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/querydsl/SimpleEntityPathResolver.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "265": "Additional implementations of EntityPathResolver for supporting Querydsls packageSuffix [DATACMNS-1235] #1674"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.1.0.M1",
                "2.1.0.M2",
                "2.1.0.M3",
                "2.1.0.RC1",
                "2.1.0.RC2",
                "2.1.0.RELEASE",
                "2.1.1.RELEASE",
                "2.1.10.RELEASE",
                "2.1.11.RELEASE",
                "2.1.12.RELEASE",
                "2.1.13.RELEASE",
                "2.1.14.RELEASE",
                "2.1.15.RELEASE",
                "2.1.16.RELEASE",
                "2.1.17.RELEASE",
                "2.1.18.RELEASE",
                "2.1.19.RELEASE",
                "2.1.2.RELEASE",
                "2.1.20.RELEASE",
                "2.1.21.RELEASE",
                "2.1.3.RELEASE",
                "2.1.4.RELEASE",
                "2.1.5.RELEASE",
                "2.1.6.RELEASE",
                "2.1.7.RELEASE",
                "2.1.8.RELEASE",
                "2.1.9.RELEASE",
                "2.2.0.M1",
                "2.2.0.M2",
                "2.2.0.M3",
                "2.2.0.M4",
                "2.2.0.RC1",
                "2.2.0.RC2",
                "2.2.0.RC3",
                "2.2.0.RELEASE",
                "2.2.1.RELEASE",
                "2.2.10.RELEASE",
                "2.2.11.RELEASE",
                "2.2.12.RELEASE",
                "2.2.13.RELEASE",
                "2.2.2.RELEASE",
                "2.2.3.RELEASE",
                "2.2.4.RELEASE",
                "2.2.5.RELEASE",
                "2.2.6.RELEASE",
                "2.2.7.RELEASE",
                "2.2.8.RELEASE",
                "2.2.9.RELEASE",
                "2.3.0.M1",
                "2.3.0.M2",
                "2.3.0.M3",
                "2.3.0.M4",
                "2.3.0.RC1",
                "2.3.0.RC2",
                "2.3.0.RELEASE",
                "2.3.1.RELEASE",
                "2.3.2.RELEASE",
                "2.3.3.RELEASE",
                "2.3.4.RELEASE",
                "2.3.5.RELEASE",
                "2.3.6.RELEASE",
                "2.3.7.RELEASE",
                "2.3.8.RELEASE",
                "2.3.9.RELEASE",
                "2.4.0",
                "2.4.0-M1",
                "2.4.0-M2",
                "2.4.0-RC1",
                "2.4.0-RC2",
                "2.4.1",
                "2.4.10",
                "2.4.11",
                "2.4.12",
                "2.4.13",
                "2.4.14",
                "2.4.15",
                "2.4.2",
                "2.4.3",
                "2.4.4",
                "2.4.5",
                "2.4.6",
                "2.4.7",
                "2.4.8",
                "2.4.9",
                "2.5.0",
                "2.5.0-M1",
                "2.5.0-M2",
                "2.5.0-M3",
                "2.5.0-M4",
                "2.5.0-M5",
                "2.5.0-RC1",
                "2.5.1",
                "2.5.10",
                "2.5.11",
                "2.5.12",
                "2.5.2",
                "2.5.3",
                "2.5.4",
                "2.5.5",
                "2.5.6",
                "2.5.7",
                "2.5.8",
                "2.5.9",
                "2.6.0",
                "2.6.0-M1",
                "2.6.0-M2",
                "2.6.0-M3",
                "2.6.0-RC1",
                "2.6.1",
                "2.6.10",
                "2.6.2",
                "2.6.3",
                "2.6.4",
                "2.6.5",
                "2.6.6",
                "2.6.7",
                "2.6.8",
                "2.6.9",
                "2.7.0",
                "2.7.0-M1",
                "2.7.0-M2",
                "2.7.0-M3",
                "2.7.0-M4",
                "2.7.0-RC1",
                "2.7.1",
                "2.7.10",
                "2.7.11",
                "2.7.12",
                "2.7.13",
                "2.7.14",
                "2.7.15",
                "2.7.16",
                "2.7.17",
                "2.7.18",
                "2.7.2",
                "2.7.3",
                "2.7.4",
                "2.7.5",
                "2.7.6",
                "2.7.7",
                "2.7.8",
                "2.7.9",
                "3.0.0",
                "3.0.0-M1",
                "3.0.0-M2",
                "3.0.0-M3",
                "3.0.0-M4",
                "3.0.0-M5",
                "3.0.0-M6",
                "3.0.0-RC1",
                "3.0.0-RC2",
                "3.0.1",
                "3.0.10",
                "3.0.11",
                "3.0.12",
                "3.0.2",
                "3.0.3",
                "3.0.4",
                "3.0.5",
                "3.0.6",
                "3.0.7",
                "3.0.8",
                "3.0.9",
                "3.1.0",
                "3.1.0-M1",
                "3.1.0-M2",
                "3.1.0-M3",
                "3.1.0-RC1",
                "3.1.1",
                "3.1.10",
                "3.1.11",
                "3.1.12",
                "3.1.2",
                "3.1.3",
                "3.1.4",
                "3.1.5",
                "3.1.6",
                "3.1.7",
                "3.1.8",
                "3.1.9",
                "3.2.0",
                "3.2.0-M1",
                "3.2.0-M2",
                "3.2.0-M3",
                "3.2.0-RC1",
                "3.2.1",
                "3.2.2",
                "3.2.3",
                "3.2.4",
                "3.2.5",
                "3.2.6",
                "3.2.7",
                "3.3.0",
                "3.3.0-M1",
                "3.3.0-M2",
                "3.3.0-RC1",
                "3.3.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: entity",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 265",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9ae4216650d5192d53270fc8e4d91b5257af7afc",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1513177827,
            "hunks": 4,
            "message": "DATACMNS-1235 - Support for package suffix in SimpleEntityPathResolver. SimpleEntityPathResolver is now a normal class and takes a package suffix in the constructor. Original pull request: #265.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/querydsl/SimpleEntityPathResolver.java b/src/main/java/org/springframework/data/querydsl/SimpleEntityPathResolver.java",
                "index 1cfdc6a01..3ca1737f4 100644",
                "--- a/src/main/java/org/springframework/data/querydsl/SimpleEntityPathResolver.java",
                "+++ b/src/main/java/org/springframework/data/querydsl/SimpleEntityPathResolver.java",
                "@@ -31,6 +31,5 @@ import com.querydsl.core.types.EntityPath;",
                "  * @author Oliver Gierke",
                "+ * @author Jens Schauder",
                "  */",
                "-public enum SimpleEntityPathResolver implements EntityPathResolver {",
                "-",
                "-\tINSTANCE;",
                "+public class SimpleEntityPathResolver implements EntityPathResolver {",
                "@@ -39,2 +38,10 @@ public enum SimpleEntityPathResolver implements EntityPathResolver {",
                "+\tpublic static final SimpleEntityPathResolver INSTANCE = new SimpleEntityPathResolver(\"\");",
                "+",
                "+\tprivate final String querySuffix;",
                "+",
                "+\tpublic SimpleEntityPathResolver(String querySuffix) {",
                "+\t\tthis.querySuffix = querySuffix;",
                "+\t}",
                "+",
                " \t/**",
                "@@ -97,3 +104,3 @@ public enum SimpleEntityPathResolver implements EntityPathResolver {",
                " \t\tString simpleClassName = ClassUtils.getShortName(domainClass);",
                "-\t\treturn String.format(\"%s.Q%s%s\", domainClass.getPackage().getName(), getClassBase(simpleClassName),",
                "+\t\treturn String.format(\"%s%s.Q%s%s\", domainClass.getPackage().getName(), querySuffix, getClassBase(simpleClassName),",
                " \t\t\t\tdomainClass.getSimpleName());"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/querydsl/SimpleEntityPathResolver.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "265": "Additional implementations of EntityPathResolver for supporting Querydsls packageSuffix [DATACMNS-1235] #1674"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.1.0.M1",
                "2.1.0.M2",
                "2.1.0.M3",
                "2.1.0.RC1",
                "2.1.0.RC2",
                "2.1.0.RELEASE",
                "2.1.1.RELEASE",
                "2.1.10.RELEASE",
                "2.1.11.RELEASE",
                "2.1.12.RELEASE",
                "2.1.13.RELEASE",
                "2.1.14.RELEASE",
                "2.1.15.RELEASE",
                "2.1.16.RELEASE",
                "2.1.17.RELEASE",
                "2.1.18.RELEASE",
                "2.1.19.RELEASE",
                "2.1.2.RELEASE",
                "2.1.20.RELEASE",
                "2.1.21.RELEASE",
                "2.1.3.RELEASE",
                "2.1.4.RELEASE",
                "2.1.5.RELEASE",
                "2.1.6.RELEASE",
                "2.1.7.RELEASE",
                "2.1.8.RELEASE",
                "2.1.9.RELEASE",
                "2.2.0.M1",
                "2.2.0.M2",
                "2.2.0.M3",
                "2.2.0.M4",
                "2.2.0.RC1",
                "2.2.0.RC2",
                "2.2.0.RC3",
                "2.2.0.RELEASE",
                "2.2.1.RELEASE",
                "2.2.10.RELEASE",
                "2.2.11.RELEASE",
                "2.2.12.RELEASE",
                "2.2.13.RELEASE",
                "2.2.2.RELEASE",
                "2.2.3.RELEASE",
                "2.2.4.RELEASE",
                "2.2.5.RELEASE",
                "2.2.6.RELEASE",
                "2.2.7.RELEASE",
                "2.2.8.RELEASE",
                "2.2.9.RELEASE",
                "2.3.0.M1",
                "2.3.0.M2",
                "2.3.0.M3",
                "2.3.0.M4",
                "2.3.0.RC1",
                "2.3.0.RC2",
                "2.3.0.RELEASE",
                "2.3.1.RELEASE",
                "2.3.2.RELEASE",
                "2.3.3.RELEASE",
                "2.3.4.RELEASE",
                "2.3.5.RELEASE",
                "2.3.6.RELEASE",
                "2.3.7.RELEASE",
                "2.3.8.RELEASE",
                "2.3.9.RELEASE",
                "2.4.0",
                "2.4.0-M1",
                "2.4.0-M2",
                "2.4.0-RC1",
                "2.4.0-RC2",
                "2.4.1",
                "2.4.10",
                "2.4.11",
                "2.4.12",
                "2.4.13",
                "2.4.14",
                "2.4.15",
                "2.4.2",
                "2.4.3",
                "2.4.4",
                "2.4.5",
                "2.4.6",
                "2.4.7",
                "2.4.8",
                "2.4.9",
                "2.5.0",
                "2.5.0-M1",
                "2.5.0-M2",
                "2.5.0-M3",
                "2.5.0-M4",
                "2.5.0-M5",
                "2.5.0-RC1",
                "2.5.1",
                "2.5.10",
                "2.5.11",
                "2.5.12",
                "2.5.2",
                "2.5.3",
                "2.5.4",
                "2.5.5",
                "2.5.6",
                "2.5.7",
                "2.5.8",
                "2.5.9",
                "2.6.0",
                "2.6.0-M1",
                "2.6.0-M2",
                "2.6.0-M3",
                "2.6.0-RC1",
                "2.6.1",
                "2.6.10",
                "2.6.2",
                "2.6.3",
                "2.6.4",
                "2.6.5",
                "2.6.6",
                "2.6.7",
                "2.6.8",
                "2.6.9",
                "2.7.0",
                "2.7.0-M1",
                "2.7.0-M2",
                "2.7.0-M3",
                "2.7.0-M4",
                "2.7.0-RC1",
                "2.7.1",
                "2.7.10",
                "2.7.11",
                "2.7.12",
                "2.7.13",
                "2.7.14",
                "2.7.15",
                "2.7.16",
                "2.7.17",
                "2.7.18",
                "2.7.2",
                "2.7.3",
                "2.7.4",
                "2.7.5",
                "2.7.6",
                "2.7.7",
                "2.7.8",
                "2.7.9",
                "3.0.0",
                "3.0.0-M1",
                "3.0.0-M2",
                "3.0.0-M3",
                "3.0.0-M4",
                "3.0.0-M5",
                "3.0.0-M6",
                "3.0.0-RC1",
                "3.0.0-RC2",
                "3.0.1",
                "3.0.10",
                "3.0.11",
                "3.0.12",
                "3.0.2",
                "3.0.3",
                "3.0.4",
                "3.0.5",
                "3.0.6",
                "3.0.7",
                "3.0.8",
                "3.0.9",
                "3.1.0",
                "3.1.0-M1",
                "3.1.0-M2",
                "3.1.0-M3",
                "3.1.0-RC1",
                "3.1.1",
                "3.1.10",
                "3.1.11",
                "3.1.12",
                "3.1.2",
                "3.1.3",
                "3.1.4",
                "3.1.5",
                "3.1.6",
                "3.1.7",
                "3.1.8",
                "3.1.9",
                "3.2.0",
                "3.2.0-M1",
                "3.2.0-M2",
                "3.2.0-M3",
                "3.2.0-RC1",
                "3.2.1",
                "3.2.2",
                "3.2.3",
                "3.2.4",
                "3.2.5",
                "3.2.6",
                "3.2.7",
                "3.3.0",
                "3.3.0-M1",
                "3.3.0-M2",
                "3.3.0-RC1",
                "3.3.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: entity, request",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: entity",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 265",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "24c1b823c6dc7729623f9f3b3697d64246d7dfa3",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1510677831,
            "hunks": 3,
            "message": "DATACMNS-1210 - Polishing. More fixes of imports. Removed obsolete generics in constructor expressions. Removed a couple of compiler warnings in test cases. Removed assumption for test case to only run on JDK 9. Original pull request: #259.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/mapping/model/BasicPersistentEntity.java b/src/main/java/org/springframework/data/mapping/model/BasicPersistentEntity.java",
                "index 667b0d57f..a7c0e6b23 100644",
                "--- a/src/main/java/org/springframework/data/mapping/model/BasicPersistentEntity.java",
                "+++ b/src/main/java/org/springframework/data/mapping/model/BasicPersistentEntity.java",
                "@@ -32,3 +32,2 @@ import java.util.Set;",
                " import java.util.TreeSet;",
                "-import java.util.concurrent.ConcurrentHashMap;",
                " import java.util.stream.Collectors;",
                "@@ -37,3 +36,15 @@ import org.springframework.core.annotation.AnnotatedElementUtils;",
                " import org.springframework.data.annotation.TypeAlias;",
                "-import org.springframework.data.mapping.*;",
                "+import org.springframework.data.mapping.Alias;",
                "+import org.springframework.data.mapping.Association;",
                "+import org.springframework.data.mapping.AssociationHandler;",
                "+import org.springframework.data.mapping.IdentifierAccessor;",
                "+import org.springframework.data.mapping.MappingException;",
                "+import org.springframework.data.mapping.PersistentEntity;",
                "+import org.springframework.data.mapping.PersistentProperty;",
                "+import org.springframework.data.mapping.PersistentPropertyAccessor;",
                "+import org.springframework.data.mapping.PreferredConstructor;",
                "+import org.springframework.data.mapping.PropertyHandler;",
                "+import org.springframework.data.mapping.SimpleAssociationHandler;",
                "+import org.springframework.data.mapping.SimplePropertyHandler;",
                "+import org.springframework.data.mapping.TargetAwareIdentifierAccessor;",
                " import org.springframework.data.util.Lazy;",
                "@@ -108,4 +119,3 @@ public class BasicPersistentEntity<T, P extends PersistentProperty<P>> implement",
                " \t\tthis.annotationCache = new ConcurrentReferenceHashMap<>();",
                "-\t\tthis.propertyAnnotationCache = CollectionUtils",
                "-\t\t\t\t.toMultiValueMap(new ConcurrentReferenceHashMap<Class<? extends Annotation>, List<P>>());",
                "+\t\tthis.propertyAnnotationCache = CollectionUtils.toMultiValueMap(new ConcurrentReferenceHashMap<>());",
                " \t\tthis.propertyAccessorFactory = BeanWrapperPropertyAccessorFactory.INSTANCE;"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/mapping/model/BasicPersistentEntity.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "259": "Thread-safetey issue in annotation detection in BasicPersistentEntity [DATACMNS-1210] #1649"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.1.0.M1",
                "2.1.0.M2",
                "2.1.0.M3",
                "2.1.0.RC1",
                "2.1.0.RC2",
                "2.1.0.RELEASE",
                "2.1.1.RELEASE",
                "2.1.10.RELEASE",
                "2.1.11.RELEASE",
                "2.1.12.RELEASE",
                "2.1.13.RELEASE",
                "2.1.14.RELEASE",
                "2.1.15.RELEASE",
                "2.1.16.RELEASE",
                "2.1.17.RELEASE",
                "2.1.18.RELEASE",
                "2.1.19.RELEASE",
                "2.1.2.RELEASE",
                "2.1.20.RELEASE",
                "2.1.21.RELEASE",
                "2.1.3.RELEASE",
                "2.1.4.RELEASE",
                "2.1.5.RELEASE",
                "2.1.6.RELEASE",
                "2.1.7.RELEASE",
                "2.1.8.RELEASE",
                "2.1.9.RELEASE",
                "2.2.0.M1",
                "2.2.0.M2",
                "2.2.0.M3",
                "2.2.0.M4",
                "2.2.0.RC1",
                "2.2.0.RC2",
                "2.2.0.RC3",
                "2.2.0.RELEASE",
                "2.2.1.RELEASE",
                "2.2.10.RELEASE",
                "2.2.11.RELEASE",
                "2.2.12.RELEASE",
                "2.2.13.RELEASE",
                "2.2.2.RELEASE",
                "2.2.3.RELEASE",
                "2.2.4.RELEASE",
                "2.2.5.RELEASE",
                "2.2.6.RELEASE",
                "2.2.7.RELEASE",
                "2.2.8.RELEASE",
                "2.2.9.RELEASE",
                "2.3.0.M1",
                "2.3.0.M2",
                "2.3.0.M3",
                "2.3.0.M4",
                "2.3.0.RC1",
                "2.3.0.RC2",
                "2.3.0.RELEASE",
                "2.3.1.RELEASE",
                "2.3.2.RELEASE",
                "2.3.3.RELEASE",
                "2.3.4.RELEASE",
                "2.3.5.RELEASE",
                "2.3.6.RELEASE",
                "2.3.7.RELEASE",
                "2.3.8.RELEASE",
                "2.3.9.RELEASE",
                "2.4.0",
                "2.4.0-M1",
                "2.4.0-M2",
                "2.4.0-RC1",
                "2.4.0-RC2",
                "2.4.1",
                "2.4.10",
                "2.4.11",
                "2.4.12",
                "2.4.13",
                "2.4.14",
                "2.4.15",
                "2.4.2",
                "2.4.3",
                "2.4.4",
                "2.4.5",
                "2.4.6",
                "2.4.7",
                "2.4.8",
                "2.4.9",
                "2.5.0",
                "2.5.0-M1",
                "2.5.0-M2",
                "2.5.0-M3",
                "2.5.0-M4",
                "2.5.0-M5",
                "2.5.0-RC1",
                "2.5.1",
                "2.5.10",
                "2.5.11",
                "2.5.12",
                "2.5.2",
                "2.5.3",
                "2.5.4",
                "2.5.5",
                "2.5.6",
                "2.5.7",
                "2.5.8",
                "2.5.9",
                "2.6.0",
                "2.6.0-M1",
                "2.6.0-M2",
                "2.6.0-M3",
                "2.6.0-RC1",
                "2.6.1",
                "2.6.10",
                "2.6.2",
                "2.6.3",
                "2.6.4",
                "2.6.5",
                "2.6.6",
                "2.6.7",
                "2.6.8",
                "2.6.9",
                "2.7.0",
                "2.7.0-M1",
                "2.7.0-M2",
                "2.7.0-M3",
                "2.7.0-M4",
                "2.7.0-RC1",
                "2.7.1",
                "2.7.10",
                "2.7.11",
                "2.7.12",
                "2.7.13",
                "2.7.14",
                "2.7.15",
                "2.7.16",
                "2.7.17",
                "2.7.18",
                "2.7.2",
                "2.7.3",
                "2.7.4",
                "2.7.5",
                "2.7.6",
                "2.7.7",
                "2.7.8",
                "2.7.9",
                "3.0.0",
                "3.0.0-M1",
                "3.0.0-M2",
                "3.0.0-M3",
                "3.0.0-M4",
                "3.0.0-M5",
                "3.0.0-M6",
                "3.0.0-RC1",
                "3.0.0-RC2",
                "3.0.1",
                "3.0.10",
                "3.0.11",
                "3.0.12",
                "3.0.2",
                "3.0.3",
                "3.0.4",
                "3.0.5",
                "3.0.6",
                "3.0.7",
                "3.0.8",
                "3.0.9",
                "3.1.0",
                "3.1.0-M1",
                "3.1.0-M2",
                "3.1.0-M3",
                "3.1.0-RC1",
                "3.1.1",
                "3.1.10",
                "3.1.11",
                "3.1.12",
                "3.1.2",
                "3.1.3",
                "3.1.4",
                "3.1.5",
                "3.1.6",
                "3.1.7",
                "3.1.8",
                "3.1.9",
                "3.2.0",
                "3.2.0-M1",
                "3.2.0-M2",
                "3.2.0-M3",
                "3.2.0-RC1",
                "3.2.1",
                "3.2.2",
                "3.2.3",
                "3.2.4",
                "3.2.5",
                "3.2.6",
                "3.2.7",
                "3.3.0",
                "3.3.0-M1",
                "3.3.0-M2",
                "3.3.0-RC1",
                "3.3.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: entity",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 259",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d0d0d72c980fc5b5bde949ae051b433f8daf5c9f",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1507824272,
            "hunks": 8,
            "message": "DATACMNS-1196 - Fixed generics lookup for nested generics in ParameterizedTypeInformation. We now eagerly resolve a generics declaration chain, which we previously - erroneously - expected GenericTypeResolver to do for us. Simplified TypeVariableTypeInformation implementation. Renamed ParameterizedTypeUnitTests to ParameterizedTypeInformationUnitTests.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/util/ParameterizedTypeInformation.java b/src/main/java/org/springframework/data/util/ParameterizedTypeInformation.java",
                "index 88a8a2fc4..798de32e0 100644",
                "--- a/src/main/java/org/springframework/data/util/ParameterizedTypeInformation.java",
                "+++ b/src/main/java/org/springframework/data/util/ParameterizedTypeInformation.java",
                "@@ -54,31 +54,2 @@ class ParameterizedTypeInformation<T> extends ParentTypeAwareTypeInformation<T>",
                "-\t/**",
                "-\t * Resolves the type variables to be used. Uses the parent's type variable map but overwrites variables locally",
                "-\t * declared.",
                "-\t * ",
                "-\t * @param type must not be {@literal null}.",
                "-\t * @param resolvedType must not be {@literal null}.",
                "-\t * @param parent must not be {@literal null}.",
                "-\t * @return",
                "-\t */",
                "-\tprivate static Map<TypeVariable<?>, Type> calculateTypeVariables(ParameterizedType type, Class<?> resolvedType,",
                "-\t\t\tTypeDiscoverer<?> parent) {",
                "-",
                "-\t\tTypeVariable<?>[] typeParameters = resolvedType.getTypeParameters();",
                "-\t\tType[] arguments = type.getActualTypeArguments();",
                "-",
                "-\t\tMap<TypeVariable<?>, Type> localTypeVariables = new HashMap<TypeVariable<?>, Type>(parent.getTypeVariableMap());",
                "-",
                "-\t\tfor (int i = 0; i < typeParameters.length; i++) {",
                "-",
                "-\t\t\tType value = arguments[i];",
                "-",
                "-\t\t\tif (!(value instanceof TypeVariable)) {",
                "-\t\t\t\tlocalTypeVariables.put(typeParameters[i], value);",
                "-\t\t\t}",
                "-\t\t}",
                "-",
                "-\t\treturn localTypeVariables;",
                "-\t}",
                "-",
                " \t/*",
                "@@ -270,2 +241,45 @@ class ParameterizedTypeInformation<T> extends ParentTypeAwareTypeInformation<T>",
                " \t}",
                "+",
                "+\t/**",
                "+\t * Resolves the type variables to be used. Uses the parent's type variable map but overwrites variables locally",
                "+\t * declared.",
                "+\t * ",
                "+\t * @param type must not be {@literal null}.",
                "+\t * @param resolvedType must not be {@literal null}.",
                "+\t * @param parent must not be {@literal null}.",
                "+\t * @return will never be {@literal null}.",
                "+\t */",
                "+\tprivate static Map<TypeVariable<?>, Type> calculateTypeVariables(ParameterizedType type, Class<?> resolvedType,",
                "+\t\t\tTypeDiscoverer<?> parent) {",
                "+",
                "+\t\tTypeVariable<?>[] typeParameters = resolvedType.getTypeParameters();",
                "+\t\tType[] arguments = type.getActualTypeArguments();",
                "+",
                "+\t\tMap<TypeVariable<?>, Type> localTypeVariables = new HashMap<TypeVariable<?>, Type>(parent.getTypeVariableMap());",
                "+",
                "+\t\tfor (int i = 0; i < typeParameters.length; i++) {",
                "+\t\t\tlocalTypeVariables.put(typeParameters[i], flattenTypeVariable(arguments[i], localTypeVariables));",
                "+\t\t}",
                "+",
                "+\t\treturn localTypeVariables;",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Recursively resolves the type bound to the given {@link Type} in case it's a {@link TypeVariable} and there's an",
                "+\t * entry in the given type variables.",
                "+\t * ",
                "+\t * @param source must not be {@literal null}.",
                "+\t * @param variables must not be {@literal null}.",
                "+\t * @return will never be {@literal null}.",
                "+\t */",
                "+\tprivate static Type flattenTypeVariable(Type source, Map<TypeVariable<?>, Type> variables) {",
                "+",
                "+\t\tif (!(source instanceof TypeVariable)) {",
                "+\t\t\treturn source;",
                "+\t\t}",
                "+",
                "+\t\tType value = variables.get(source);",
                "+",
                "+\t\treturn value == null ? source : flattenTypeVariable(value, variables);",
                "+\t}",
                " }",
                "diff --git a/src/main/java/org/springframework/data/util/TypeDiscoverer.java b/src/main/java/org/springframework/data/util/TypeDiscoverer.java",
                "index f131ce2ab..b096ff842 100644",
                "--- a/src/main/java/org/springframework/data/util/TypeDiscoverer.java",
                "+++ b/src/main/java/org/springframework/data/util/TypeDiscoverer.java",
                "@@ -136,3 +136,3 @@ class TypeDiscoverer<S> implements TypeInformation<S> {",
                " \t\t\tTypeVariable<?> variable = (TypeVariable<?>) fieldType;",
                "-\t\t\treturn new TypeVariableTypeInformation(variable, type, this);",
                "+\t\t\treturn new TypeVariableTypeInformation(variable, this);",
                " \t\t}",
                "diff --git a/src/main/java/org/springframework/data/util/TypeVariableTypeInformation.java b/src/main/java/org/springframework/data/util/TypeVariableTypeInformation.java",
                "index 1314cc4e3..cc3db7a04 100644",
                "--- a/src/main/java/org/springframework/data/util/TypeVariableTypeInformation.java",
                "+++ b/src/main/java/org/springframework/data/util/TypeVariableTypeInformation.java",
                "@@ -19,3 +19,2 @@ import static org.springframework.util.ObjectUtils.*;",
                "-import java.lang.reflect.ParameterizedType;",
                " import java.lang.reflect.Type;",
                "@@ -34,6 +33,5 @@ class TypeVariableTypeInformation<T> extends ParentTypeAwareTypeInformation<T> {",
                " \tprivate final TypeVariable<?> variable;",
                "-\tprivate final Type owningType;",
                " \t/**",
                "-\t * Creates a bew {@link TypeVariableTypeInformation} for the given {@link TypeVariable} owning {@link Type} and parent",
                "+\t * Creates a new {@link TypeVariableTypeInformation} for the given {@link TypeVariable} owning {@link Type} and parent",
                " \t * {@link TypeDiscoverer}.",
                "@@ -44,3 +42,3 @@ class TypeVariableTypeInformation<T> extends ParentTypeAwareTypeInformation<T> {",
                " \t */",
                "-\tpublic TypeVariableTypeInformation(TypeVariable<?> variable, Type owningType, TypeDiscoverer<?> parent) {",
                "+\tpublic TypeVariableTypeInformation(TypeVariable<?> variable, TypeDiscoverer<?> parent) {",
                "@@ -51,40 +49,2 @@ class TypeVariableTypeInformation<T> extends ParentTypeAwareTypeInformation<T> {",
                " \t\tthis.variable = variable;",
                "-\t\tthis.owningType = owningType;",
                "-\t}",
                "-",
                "-\t/*",
                "-\t * (non-Javadoc)",
                "-\t * @see org.springframework.data.util.TypeDiscoverer#getType()",
                "-\t */",
                "-\t@Override",
                "-\tpublic Class<T> getType() {",
                "-",
                "-\t\tint index = getIndex(variable);",
                "-",
                "-\t\tif (owningType instanceof ParameterizedType && index != -1) {",
                "-\t\t\tType fieldType = ((ParameterizedType) owningType).getActualTypeArguments()[index];",
                "-\t\t\treturn resolveType(fieldType);",
                "-\t\t}",
                "-",
                "-\t\treturn resolveType(variable);",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Returns the index of the type parameter binding the given {@link TypeVariable}.",
                "-\t * ",
                "-\t * @param variable",
                "-\t * @return",
                "-\t */",
                "-\tprivate int getIndex(TypeVariable<?> variable) {",
                "-",
                "-\t\tClass<?> rawType = resolveType(owningType);",
                "-\t\tTypeVariable<?>[] typeParameters = rawType.getTypeParameters();",
                "-",
                "-\t\tfor (int i = 0; i < typeParameters.length; i++) {",
                "-\t\t\tif (variable.equals(typeParameters[i])) {",
                "-\t\t\t\treturn i;",
                "-\t\t\t}",
                "-\t\t}",
                "-",
                "-\t\treturn -1;",
                " \t}"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/util/ParameterizedTypeInformation.java",
                "src/main/java/org/springframework/data/util/TypeDiscoverer.java",
                "src/main/java/org/springframework/data/util/TypeVariableTypeInformation.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "8ce79c18105bc0504d454d5f9db75b0da851b884"
                ],
                [
                    "no-tag",
                    "691573d14314be50e53abe287b65fd01f08c7146"
                ]
            ],
            "tags": [
                "1.13.10.RELEASE",
                "1.13.11.RELEASE",
                "1.13.12.RELEASE",
                "1.13.13.RELEASE",
                "1.13.14.RELEASE",
                "1.13.15.RELEASE",
                "1.13.16.RELEASE",
                "1.13.17.RELEASE",
                "1.13.18.RELEASE",
                "1.13.19.RELEASE",
                "1.13.20.RELEASE",
                "1.13.21.RELEASE",
                "1.13.22.RELEASE",
                "1.13.23.RELEASE",
                "1.13.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: parameter",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: parameter",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "06116b7726883781b610ca70d60b595c208f5cbd",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1515657582,
            "hunks": 11,
            "message": "DATACMNS-1206 - Polishing. Convert type array to string to construct the exception message. Slight Javadoc tweaks. Reduce method visibility. Simplify hasDefaultGetter check. Remove superfluous throws declaration. Strip trailing whitespaces. Ignore property descriptors without getter (e.g. indexed properties). Original pull request: #263.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java b/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "index 294717dfc..b32b2da1e 100644",
                "--- a/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "+++ b/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "@@ -119,3 +119,3 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                "-\t\treturn method == null ? false : method.isDefault();",
                "+\t\treturn method != null && method.isDefault();",
                " \t}",
                "@@ -138,6 +138,6 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                " \t\t * Creates a new {@link PropertyDescriptorSource} for the given type.",
                "-\t\t * ",
                "+\t\t *",
                " \t\t * @param type must not be {@literal null}.",
                " \t\t */",
                "-\t\tpublic PropertyDescriptorSource(Class<?> type) {",
                "+\t\tPropertyDescriptorSource(Class<?> type) {",
                "@@ -154,3 +154,3 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                " \t\t */",
                "-\t\tpublic List<PropertyDescriptor> getDescriptors() {",
                "+\t\tList<PropertyDescriptor> getDescriptors() {",
                " \t\t\treturn collectDescriptors().distinct().collect(StreamUtils.toUnmodifiableList());",
                "@@ -180,5 +180,5 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                " \t\t/**",
                "-\t\t * Returns a Stream of {@link PropertyDescriptor} ordered following the given {@link MethodsMetadata} only returning",
                "-\t\t * methods seen by the given {@link MethodsMetadata}.",
                "-\t\t * ",
                "+\t\t * Returns a {@link Stream} of {@link PropertyDescriptor} ordered following the given {@link MethodsMetadata} only",
                "+\t\t * returning methods seen by the given {@link MethodsMetadata}.",
                "+\t\t *",
                " \t\t * @param source must not be {@literal null}.",
                "@@ -196,3 +196,4 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                "-\t\t\treturn source.filter(descriptor -> orderedMethods.containsKey(descriptor.getReadMethod().getName()))",
                "+\t\t\treturn source.filter(descriptor -> descriptor.getReadMethod() != null)",
                "+\t\t\t\t\t.filter(descriptor -> orderedMethods.containsKey(descriptor.getReadMethod().getName()))",
                " \t\t\t\t\t.sorted(Comparator.comparingInt(left -> orderedMethods.get(left.getReadMethod().getName())));",
                "@@ -202,3 +203,3 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                " \t\t * Returns a {@link Stream} of interfaces using the given {@link MethodsMetadata} as primary source for ordering.",
                "-\t\t * ",
                "+\t\t *",
                " \t\t * @param metadata must not be {@literal null}.",
                "@@ -211,4 +212,4 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                " \t\t/**",
                "-\t\t * Returns a Stream of interfaces using the given type as primary source for ordering.",
                "-\t\t * ",
                "+\t\t * Returns a {@link Stream} of interfaces using the given type as primary source for ordering.",
                "+\t\t *",
                " \t\t * @return",
                "@@ -245,3 +246,3 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                " \t\t * Find the type with the given name in the given array of {@link Class}.",
                "-\t\t * ",
                "+\t\t *",
                " \t\t * @param name must not be {@literal null} or empty.",
                "@@ -255,3 +256,4 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                " \t\t\t\t\t.findFirst()",
                "-\t\t\t\t\t.orElseThrow(() -> new IllegalStateException(String.format(\"Did not find type %s in %s!\", name, types)));",
                "+\t\t\t\t\t.orElseThrow(() -> new IllegalStateException(",
                "+\t\t\t\t\t\t\tString.format(\"Did not find type %s in %s!\", name, Arrays.toString(types))));",
                " \t\t}",
                "diff --git a/src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java b/src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java",
                "index 39e249693..17404360d 100644",
                "--- a/src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java",
                "+++ b/src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java",
                "@@ -45,2 +45,3 @@ import org.springframework.util.Assert;",
                "  * @author Mark Paluch",
                "+ * @author Oliver Gierke",
                "  * @since 2.1"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "263": "Introduce abstraction to detect declared methods in declaration order [DATACMNS-1206] #1645"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.1.0.M1",
                "2.1.0.M2",
                "2.1.0.M3",
                "2.1.0.RC1",
                "2.1.0.RC2",
                "2.1.0.RELEASE",
                "2.1.1.RELEASE",
                "2.1.10.RELEASE",
                "2.1.11.RELEASE",
                "2.1.12.RELEASE",
                "2.1.13.RELEASE",
                "2.1.14.RELEASE",
                "2.1.15.RELEASE",
                "2.1.16.RELEASE",
                "2.1.17.RELEASE",
                "2.1.18.RELEASE",
                "2.1.19.RELEASE",
                "2.1.2.RELEASE",
                "2.1.20.RELEASE",
                "2.1.21.RELEASE",
                "2.1.3.RELEASE",
                "2.1.4.RELEASE",
                "2.1.5.RELEASE",
                "2.1.6.RELEASE",
                "2.1.7.RELEASE",
                "2.1.8.RELEASE",
                "2.1.9.RELEASE",
                "2.2.0.M1",
                "2.2.0.M2",
                "2.2.0.M3",
                "2.2.0.M4",
                "2.2.0.RC1",
                "2.2.0.RC2",
                "2.2.0.RC3",
                "2.2.0.RELEASE",
                "2.2.1.RELEASE",
                "2.2.10.RELEASE",
                "2.2.11.RELEASE",
                "2.2.12.RELEASE",
                "2.2.13.RELEASE",
                "2.2.2.RELEASE",
                "2.2.3.RELEASE",
                "2.2.4.RELEASE",
                "2.2.5.RELEASE",
                "2.2.6.RELEASE",
                "2.2.7.RELEASE",
                "2.2.8.RELEASE",
                "2.2.9.RELEASE",
                "2.3.0.M1",
                "2.3.0.M2",
                "2.3.0.M3",
                "2.3.0.M4",
                "2.3.0.RC1",
                "2.3.0.RC2",
                "2.3.0.RELEASE",
                "2.3.1.RELEASE",
                "2.3.2.RELEASE",
                "2.3.3.RELEASE",
                "2.3.4.RELEASE",
                "2.3.5.RELEASE",
                "2.3.6.RELEASE",
                "2.3.7.RELEASE",
                "2.3.8.RELEASE",
                "2.3.9.RELEASE",
                "2.4.0",
                "2.4.0-M1",
                "2.4.0-M2",
                "2.4.0-RC1",
                "2.4.0-RC2",
                "2.4.1",
                "2.4.10",
                "2.4.11",
                "2.4.12",
                "2.4.13",
                "2.4.14",
                "2.4.15",
                "2.4.2",
                "2.4.3",
                "2.4.4",
                "2.4.5",
                "2.4.6",
                "2.4.7",
                "2.4.8",
                "2.4.9",
                "2.5.0",
                "2.5.0-M1",
                "2.5.0-M2",
                "2.5.0-M3",
                "2.5.0-M4",
                "2.5.0-M5",
                "2.5.0-RC1",
                "2.5.1",
                "2.5.10",
                "2.5.11",
                "2.5.12",
                "2.5.2",
                "2.5.3",
                "2.5.4",
                "2.5.5",
                "2.5.6",
                "2.5.7",
                "2.5.8",
                "2.5.9",
                "2.6.0",
                "2.6.0-M1",
                "2.6.0-M2",
                "2.6.0-M3",
                "2.6.0-RC1",
                "2.6.1",
                "2.6.10",
                "2.6.2",
                "2.6.3",
                "2.6.4",
                "2.6.5",
                "2.6.6",
                "2.6.7",
                "2.6.8",
                "2.6.9",
                "2.7.0",
                "2.7.0-M1",
                "2.7.0-M2",
                "2.7.0-M3",
                "2.7.0-M4",
                "2.7.0-RC1",
                "2.7.1",
                "2.7.10",
                "2.7.11",
                "2.7.12",
                "2.7.13",
                "2.7.14",
                "2.7.15",
                "2.7.16",
                "2.7.17",
                "2.7.18",
                "2.7.2",
                "2.7.3",
                "2.7.4",
                "2.7.5",
                "2.7.6",
                "2.7.7",
                "2.7.8",
                "2.7.9",
                "3.0.0",
                "3.0.0-M1",
                "3.0.0-M2",
                "3.0.0-M3",
                "3.0.0-M4",
                "3.0.0-M5",
                "3.0.0-M6",
                "3.0.0-RC1",
                "3.0.0-RC2",
                "3.0.1",
                "3.0.10",
                "3.0.11",
                "3.0.12",
                "3.0.2",
                "3.0.3",
                "3.0.4",
                "3.0.5",
                "3.0.6",
                "3.0.7",
                "3.0.8",
                "3.0.9",
                "3.1.0",
                "3.1.0-M1",
                "3.1.0-M2",
                "3.1.0-M3",
                "3.1.0-RC1",
                "3.1.1",
                "3.1.10",
                "3.1.11",
                "3.1.12",
                "3.1.2",
                "3.1.3",
                "3.1.4",
                "3.1.5",
                "3.1.6",
                "3.1.7",
                "3.1.8",
                "3.1.9",
                "3.2.0",
                "3.2.0-M1",
                "3.2.0-M2",
                "3.2.0-M3",
                "3.2.0-RC1",
                "3.2.1",
                "3.2.2",
                "3.2.3",
                "3.2.4",
                "3.2.5",
                "3.2.6",
                "3.2.7",
                "3.3.0",
                "3.3.0-M1",
                "3.3.0-M2",
                "3.3.0-RC1",
                "3.3.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request, property",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: projection",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 263",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5edcdefe58838b23ec5081fc084f335694919ff8",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1509053472,
            "hunks": 6,
            "message": "DATACMNS-1180 - Polishing. Avoid premature resolution of type in TypeDiscoverer.createInfo(\u00e2\u0080\u00a6) and thereby simplify constructor in ParameterizedTypeInformation.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/util/ParameterizedTypeInformation.java b/src/main/java/org/springframework/data/util/ParameterizedTypeInformation.java",
                "index 798de32e0..707fe4b09 100644",
                "--- a/src/main/java/org/springframework/data/util/ParameterizedTypeInformation.java",
                "+++ b/src/main/java/org/springframework/data/util/ParameterizedTypeInformation.java",
                "@@ -48,5 +48,5 @@ class ParameterizedTypeInformation<T> extends ParentTypeAwareTypeInformation<T>",
                " \t */",
                "-\tpublic ParameterizedTypeInformation(ParameterizedType type, Class<?> resolvedType, TypeDiscoverer<?> parent) {",
                "+\tpublic ParameterizedTypeInformation(ParameterizedType type, TypeDiscoverer<?> parent) {",
                "-\t\tsuper(type, parent, calculateTypeVariables(type, resolvedType, parent));",
                "+\t\tsuper(type, parent, calculateTypeVariables(type, parent));",
                " \t\tthis.type = type;",
                "@@ -247,3 +247,2 @@ class ParameterizedTypeInformation<T> extends ParentTypeAwareTypeInformation<T>",
                " \t * @param type must not be {@literal null}.",
                "-\t * @param resolvedType must not be {@literal null}.",
                " \t * @param parent must not be {@literal null}.",
                "@@ -251,5 +250,5 @@ class ParameterizedTypeInformation<T> extends ParentTypeAwareTypeInformation<T>",
                " \t */",
                "-\tprivate static Map<TypeVariable<?>, Type> calculateTypeVariables(ParameterizedType type, Class<?> resolvedType,",
                "-\t\t\tTypeDiscoverer<?> parent) {",
                "+\tprivate static Map<TypeVariable<?>, Type> calculateTypeVariables(ParameterizedType type, TypeDiscoverer<?> parent) {",
                "+\t\tClass<?> resolvedType = parent.resolveType(type);",
                " \t\tTypeVariable<?>[] typeParameters = resolvedType.getTypeParameters();",
                "diff --git a/src/main/java/org/springframework/data/util/TypeDiscoverer.java b/src/main/java/org/springframework/data/util/TypeDiscoverer.java",
                "index b096ff842..e85f37b15 100644",
                "--- a/src/main/java/org/springframework/data/util/TypeDiscoverer.java",
                "+++ b/src/main/java/org/springframework/data/util/TypeDiscoverer.java",
                "@@ -116,3 +116,3 @@ class TypeDiscoverer<S> implements TypeInformation<S> {",
                " \t */",
                "-\t@SuppressWarnings({ \"rawtypes\", \"unchecked\", \"deprecation\" })",
                "+\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })",
                " \tprotected TypeInformation<?> createInfo(Type fieldType) {",
                "@@ -127,7 +127,5 @@ class TypeDiscoverer<S> implements TypeInformation<S> {",
                "-\t\tClass<S> resolveType = resolveType(fieldType);",
                "-",
                " \t\tif (fieldType instanceof ParameterizedType) {",
                " \t\t\tParameterizedType parameterizedType = (ParameterizedType) fieldType;",
                "-\t\t\treturn new ParameterizedTypeInformation(parameterizedType, resolveType, this);",
                "+\t\t\treturn new ParameterizedTypeInformation(parameterizedType, this);",
                " \t\t}"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/util/ParameterizedTypeInformation.java",
                "src/main/java/org/springframework/data/util/TypeDiscoverer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "48db42ced878f3e3e4a77b5d23ec321dfefef29e"
                ],
                [
                    "no-tag",
                    "25333d2d40cab5eba03a58bbc86b809165ddb086"
                ]
            ],
            "tags": [
                "1.13.10.RELEASE",
                "1.13.11.RELEASE",
                "1.13.12.RELEASE",
                "1.13.13.RELEASE",
                "1.13.14.RELEASE",
                "1.13.15.RELEASE",
                "1.13.16.RELEASE",
                "1.13.17.RELEASE",
                "1.13.18.RELEASE",
                "1.13.19.RELEASE",
                "1.13.20.RELEASE",
                "1.13.21.RELEASE",
                "1.13.22.RELEASE",
                "1.13.23.RELEASE",
                "1.13.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: parameter",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: parameter",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5eb10a081765337974bf2906e4477483d2906c66",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1515749504,
            "hunks": 29,
            "message": "DATACMNS-1206 - Polishing. Moved PropertyDescriptor lookup into dedicated subclass to group functionality around the type and MethodsMetadata instances. Extracted individual stream handling steps into dedicated methods for better understandability. Moved MethodsMetadataReader into classreading package for symmetry with Spring Framework's metadata arrangement. Removed manually declared getters in DefaultMethodsMetadataReader in favor of Lombok getters. Inlined MethodsMetadataReadingVisitor into DefaultMethodsMetadataReader as it's only used there. Original pull request: #263.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java b/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "index 17fe50f30..294717dfc 100644",
                "--- a/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "+++ b/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "@@ -17,2 +17,4 @@ package org.springframework.data.projection;",
                "+import lombok.extern.slf4j.Slf4j;",
                "+",
                " import java.beans.PropertyDescriptor;",
                "@@ -20,3 +22,2 @@ import java.io.IOException;",
                " import java.lang.reflect.Method;",
                "-import java.util.ArrayList;",
                " import java.util.Arrays;",
                "@@ -31,7 +32,7 @@ import java.util.stream.Stream;",
                " import org.springframework.beans.BeanUtils;",
                "-import org.springframework.core.type.ClassMetadata;",
                " import org.springframework.core.type.MethodMetadata;",
                " import org.springframework.data.type.MethodsMetadata;",
                "-import org.springframework.data.type.MethodsMetadataReader;",
                "+import org.springframework.data.type.classreading.MethodsMetadataReader;",
                " import org.springframework.data.type.classreading.MethodsMetadataReaderFactory;",
                "+import org.springframework.data.util.StreamUtils;",
                " import org.springframework.util.Assert;",
                "@@ -63,3 +64,3 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                " \t\tthis.projectionType = type;",
                "-\t\tthis.properties = collectDescriptors(type);",
                "+\t\tthis.properties = new PropertyDescriptorSource(type).getDescriptors();",
                " \t}",
                "@@ -109,100 +110,168 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                " \t/**",
                "-\t * Collects {@link PropertyDescriptor}s for all properties exposed by the given type and all its super interfaces.",
                "+\t * Returns whether the given {@link PropertyDescriptor} has a getter that is a Java 8 default method.",
                " \t *",
                "-\t * @param type must not be {@literal null}.",
                "+\t * @param descriptor must not be {@literal null}.",
                " \t * @return",
                " \t */",
                "-\tprivate static List<PropertyDescriptor> collectDescriptors(Class<?> type) {",
                "+\tprivate static boolean hasDefaultGetter(PropertyDescriptor descriptor) {",
                "-\t\tList<PropertyDescriptor> result = new ArrayList<>();",
                "+\t\tMethod method = descriptor.getReadMethod();",
                "-\t\tOptional<MethodsMetadata> metadata = getMetadata(type);",
                "-\t\tStream<PropertyDescriptor> stream = Arrays.stream(BeanUtils.getPropertyDescriptors(type))//",
                "-\t\t\t\t.filter(it -> !hasDefaultGetter(it));",
                "+\t\treturn method == null ? false : method.isDefault();",
                "+\t}",
                "-\t\tStream<PropertyDescriptor> streamToUse = metadata.map(DefaultProjectionInformation::getMethodOrder)",
                "-\t\t\t\t.filter(it -> !it.isEmpty()) //",
                "-\t\t\t\t.map(it -> stream.filter(descriptor -> it.containsKey(descriptor.getReadMethod().getName()))",
                "-\t\t\t\t\t\t.sorted(Comparator.comparingInt(left -> it.get(left.getReadMethod().getName())))) //",
                "-\t\t\t\t.orElse(stream);",
                "+\t/**",
                "+\t * Internal helper to detect {@link PropertyDescriptor} instances for a given type.",
                "+\t *",
                "+\t * @author Mark Paluch",
                "+\t * @author Oliver Gierke",
                "+\t * @since 2.1",
                "+\t * @soundtrack The Meters - Cissy Strut (Here Comes The Meter Man)",
                "+\t */",
                "+\t@Slf4j",
                "+\tprivate static class PropertyDescriptorSource {",
                "-\t\tresult.addAll(streamToUse.collect(Collectors.toList()));",
                "+\t\tprivate final Class<?> type;",
                "+\t\tprivate final Optional<MethodsMetadata> metadata;",
                "-\t\tif (metadata.isPresent()) {",
                "+\t\t/**",
                "+\t\t * Creates a new {@link PropertyDescriptorSource} for the given type.",
                "+\t\t * ",
                "+\t\t * @param type must not be {@literal null}.",
                "+\t\t */",
                "+\t\tpublic PropertyDescriptorSource(Class<?> type) {",
                "-\t\t\tStream<String> interfaceNames = metadata.map(ClassMetadata::getInterfaceNames) //",
                "-\t\t\t\t\t.map(Arrays::stream) //",
                "-\t\t\t\t\t.orElse(Stream.empty());",
                "+\t\t\tAssert.notNull(type, \"Type must not be null!\");",
                "-\t\t\tresult.addAll(interfaceNames.map(it -> loadClass(it, type.getClassLoader())) //",
                "-\t\t\t\t\t.map(DefaultProjectionInformation::collectDescriptors) //",
                "-\t\t\t\t\t.flatMap(List::stream) //",
                "-\t\t\t\t\t.collect(Collectors.toList()));",
                "-\t\t} else {",
                "+\t\t\tthis.type = type;",
                "+\t\t\tthis.metadata = getMetadata(type);",
                "+\t\t}",
                "-\t\t\tfor (Class<?> interfaze : type.getInterfaces()) {",
                "-\t\t\t\tresult.addAll(collectDescriptors(interfaze));",
                "-\t\t\t}",
                "+\t\t/**",
                "+\t\t * Returns {@link PropertyDescriptor}s for all properties exposed by the given type and all its super interfaces.",
                "+\t\t *",
                "+\t\t * @return",
                "+\t\t */",
                "+\t\tpublic List<PropertyDescriptor> getDescriptors() {",
                "+\t\t\treturn collectDescriptors().distinct().collect(StreamUtils.toUnmodifiableList());",
                " \t\t}",
                "-\t\treturn result.stream().distinct().collect(Collectors.toList());",
                "-\t}",
                "+\t\t/**",
                "+\t\t * Recursively collects {@link PropertyDescriptor}s for all properties exposed by the given type and all its super",
                "+\t\t * interfaces.",
                "+\t\t *",
                "+\t\t * @return",
                "+\t\t */",
                "+\t\tprivate Stream<PropertyDescriptor> collectDescriptors() {",
                "+",
                "+\t\t\tStream<PropertyDescriptor> allButDefaultGetters = Arrays.stream(BeanUtils.getPropertyDescriptors(type)) //",
                "+\t\t\t\t\t.filter(it -> !hasDefaultGetter(it));",
                "+",
                "+\t\t\tStream<PropertyDescriptor> ownDescriptors = metadata.map(it -> filterAndOrder(allButDefaultGetters, it))",
                "+\t\t\t\t\t.orElse(allButDefaultGetters);",
                "-\tprivate static Class<?> loadClass(String className, ClassLoader classLoader) {",
                "+\t\t\tStream<PropertyDescriptor> superTypeDescriptors = metadata.map(this::fromMetadata) //",
                "+\t\t\t\t\t.orElseGet(this::fromType) //",
                "+\t\t\t\t\t.flatMap(it -> new PropertyDescriptorSource(it).collectDescriptors());",
                "-\t\ttry {",
                "-\t\t\treturn ClassUtils.forName(className, classLoader);",
                "-\t\t} catch (ClassNotFoundException e) {",
                "-\t\t\tthrow new IllegalArgumentException(String.format(\"Cannot load class %s\", className));",
                "+\t\t\treturn Stream.concat(ownDescriptors, superTypeDescriptors);",
                " \t\t}",
                "-\t}",
                "-\t/**",
                "-\t * Returns a {@link Map} containing method name to its positional index according to {@link MethodsMetadata}.",
                "-\t *",
                "-\t * @param metadata",
                "-\t * @return",
                "-\t */",
                "-\tprivate static Map<String, Integer> getMethodOrder(MethodsMetadata metadata) {",
                "+\t\t/**",
                "+\t\t * Returns a Stream of {@link PropertyDescriptor} ordered following the given {@link MethodsMetadata} only returning",
                "+\t\t * methods seen by the given {@link MethodsMetadata}.",
                "+\t\t * ",
                "+\t\t * @param source must not be {@literal null}.",
                "+\t\t * @param metadata must not be {@literal null}.",
                "+\t\t * @return",
                "+\t\t */",
                "+\t\tprivate static Stream<PropertyDescriptor> filterAndOrder(Stream<PropertyDescriptor> source,",
                "+\t\t\t\tMethodsMetadata metadata) {",
                "+",
                "+\t\t\tMap<String, Integer> orderedMethods = getMethodOrder(metadata);",
                "+",
                "+\t\t\tif (orderedMethods.isEmpty()) {",
                "+\t\t\t\treturn source;",
                "+\t\t\t}",
                "-\t\tList<String> methods = metadata.getMethods() //",
                "-\t\t\t\t.stream() //",
                "-\t\t\t\t.map(MethodMetadata::getMethodName) //",
                "-\t\t\t\t.distinct() //",
                "-\t\t\t\t.collect(Collectors.toList());",
                "+\t\t\treturn source.filter(descriptor -> orderedMethods.containsKey(descriptor.getReadMethod().getName()))",
                "+\t\t\t\t\t.sorted(Comparator.comparingInt(left -> orderedMethods.get(left.getReadMethod().getName())));",
                "+\t\t}",
                "-\t\treturn IntStream.range(0, methods.size()) //",
                "-\t\t\t\t.boxed() //",
                "-\t\t\t\t.collect(Collectors.toMap(methods::get, i -> i));",
                "-\t}",
                "+\t\t/**",
                "+\t\t * Returns a {@link Stream} of interfaces using the given {@link MethodsMetadata} as primary source for ordering.",
                "+\t\t * ",
                "+\t\t * @param metadata must not be {@literal null}.",
                "+\t\t * @return",
                "+\t\t */",
                "+\t\tprivate Stream<Class<?>> fromMetadata(MethodsMetadata metadata) {",
                "+\t\t\treturn Arrays.stream(metadata.getInterfaceNames()).map(it -> findType(it, type.getInterfaces()));",
                "+\t\t}",
                "-\t/**",
                "-\t * Attempts to obtain {@link MethodsMetadata} from {@link Class}. Returns {@link Optional} containing",
                "-\t * {@link MethodsMetadata} if metadata was read successfully, {@link Optional#empty()} otherwise.",
                "-\t *",
                "-\t * @param type must not be {@literal null}.",
                "-\t * @return the optional {@link MethodsMetadata}.",
                "-\t */",
                "-\tprivate static Optional<MethodsMetadata> getMetadata(Class<?> type) {",
                "+\t\t/**",
                "+\t\t * Returns a Stream of interfaces using the given type as primary source for ordering.",
                "+\t\t * ",
                "+\t\t * @return",
                "+\t\t */",
                "+\t\tprivate Stream<Class<?>> fromType() {",
                "+\t\t\treturn Arrays.stream(type.getInterfaces());",
                "+\t\t}",
                "-\t\ttry {",
                "+\t\t/**",
                "+\t\t * Attempts to obtain {@link MethodsMetadata} from {@link Class}. Returns {@link Optional} containing",
                "+\t\t * {@link MethodsMetadata} if metadata was read successfully, {@link Optional#empty()} otherwise.",
                "+\t\t *",
                "+\t\t * @param type must not be {@literal null}.",
                "+\t\t * @return the optional {@link MethodsMetadata}.",
                "+\t\t */",
                "+\t\tprivate static Optional<MethodsMetadata> getMetadata(Class<?> type) {",
                "-\t\t\tMethodsMetadataReaderFactory factory = new MethodsMetadataReaderFactory(type.getClassLoader());",
                "-\t\t\tMethodsMetadataReader metadataReader = factory.getMetadataReader(ClassUtils.getQualifiedName(type));",
                "-\t\t\treturn Optional.of(metadataReader.getMethodsMetadata());",
                "-\t\t} catch (IOException e) {",
                "-\t\t\treturn Optional.empty();",
                "+\t\t\ttry {",
                "+",
                "+\t\t\t\tMethodsMetadataReaderFactory factory = new MethodsMetadataReaderFactory(type.getClassLoader());",
                "+\t\t\t\tMethodsMetadataReader metadataReader = factory.getMetadataReader(ClassUtils.getQualifiedName(type));",
                "+",
                "+\t\t\t\treturn Optional.of(metadataReader.getMethodsMetadata());",
                "+",
                "+\t\t\t} catch (IOException e) {",
                "+",
                "+\t\t\t\tLOG.info(\"Couldn't read class metadata for {}. Input property calculation might fail!\", type);",
                "+",
                "+\t\t\t\treturn Optional.empty();",
                "+\t\t\t}",
                " \t\t}",
                "-\t}",
                "-\t/**",
                "-\t * Returns whether the given {@link PropertyDescriptor} has a getter that is a Java 8 default method.",
                "-\t *",
                "-\t * @param descriptor must not be {@literal null}.",
                "-\t * @return",
                "-\t */",
                "-\tprivate static boolean hasDefaultGetter(PropertyDescriptor descriptor) {",
                "+\t\t/**",
                "+\t\t * Find the type with the given name in the given array of {@link Class}.",
                "+\t\t * ",
                "+\t\t * @param name must not be {@literal null} or empty.",
                "+\t\t * @param types must not be {@literal null}.",
                "+\t\t * @return",
                "+\t\t */",
                "+\t\tprivate static Class<?> findType(String name, Class<?>[] types) {",
                "+",
                "+\t\t\treturn Arrays.stream(types) //",
                "+\t\t\t\t\t.filter(it -> name.equals(it.getName())) //",
                "+\t\t\t\t\t.findFirst()",
                "+\t\t\t\t\t.orElseThrow(() -> new IllegalStateException(String.format(\"Did not find type %s in %s!\", name, types)));",
                "+\t\t}",
                "-\t\tMethod method = descriptor.getReadMethod();",
                "-\t\treturn method == null ? false : method.isDefault();",
                "+\t\t/**",
                "+\t\t * Returns a {@link Map} containing method name to its positional index according to {@link MethodsMetadata}.",
                "+\t\t *",
                "+\t\t * @param metadata",
                "+\t\t * @return",
                "+\t\t */",
                "+\t\tprivate static Map<String, Integer> getMethodOrder(MethodsMetadata metadata) {",
                "+",
                "+\t\t\tList<String> methods = metadata.getMethods() //",
                "+\t\t\t\t\t.stream() //",
                "+\t\t\t\t\t.map(MethodMetadata::getMethodName) //",
                "+\t\t\t\t\t.distinct() //",
                "+\t\t\t\t\t.collect(Collectors.toList());",
                "+",
                "+\t\t\treturn IntStream.range(0, methods.size()) //",
                "+\t\t\t\t\t.boxed() //",
                "+\t\t\t\t\t.collect(Collectors.toMap(methods::get, i -> i));",
                "+\t\t}",
                " \t}",
                "diff --git a/src/main/java/org/springframework/data/type/MethodsMetadata.java b/src/main/java/org/springframework/data/type/MethodsMetadata.java",
                "index 74fc84988..d9bc3d601 100644",
                "--- a/src/main/java/org/springframework/data/type/MethodsMetadata.java",
                "+++ b/src/main/java/org/springframework/data/type/MethodsMetadata.java",
                "@@ -21,2 +21,3 @@ import org.springframework.core.type.ClassMetadata;",
                " import org.springframework.core.type.MethodMetadata;",
                "+import org.springframework.data.type.classreading.MethodsMetadataReader;",
                "diff --git a/src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java b/src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java",
                "index d201637a8..39e249693 100644",
                "--- a/src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java",
                "+++ b/src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java",
                "@@ -17,2 +17,4 @@ package org.springframework.data.type.classreading;",
                "+import lombok.Getter;",
                "+",
                " import java.io.BufferedInputStream;",
                "@@ -20,4 +22,9 @@ import java.io.IOException;",
                " import java.io.InputStream;",
                "+import java.util.Collections;",
                "+import java.util.Set;",
                " import org.springframework.asm.ClassReader;",
                "+import org.springframework.asm.MethodVisitor;",
                "+import org.springframework.asm.Opcodes;",
                "+import org.springframework.asm.Type;",
                " import org.springframework.core.NestedIOException;",
                "@@ -26,5 +33,9 @@ import org.springframework.core.type.AnnotationMetadata;",
                " import org.springframework.core.type.ClassMetadata;",
                "+import org.springframework.core.type.MethodMetadata;",
                "+import org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor;",
                "+import org.springframework.core.type.classreading.MethodMetadataReadingVisitor;",
                " import org.springframework.data.type.MethodsMetadata;",
                "-import org.springframework.data.type.MethodsMetadataReader;",
                "+import org.springframework.data.util.StreamUtils;",
                " import org.springframework.lang.Nullable;",
                "+import org.springframework.util.Assert;",
                "@@ -36,2 +47,3 @@ import org.springframework.lang.Nullable;",
                "  */",
                "+@Getter",
                " class DefaultMethodsMetadataReader implements MethodsMetadataReader {",
                "@@ -45,54 +57,93 @@ class DefaultMethodsMetadataReader implements MethodsMetadataReader {",
                "+\t\tMethodsMetadataReadingVisitor visitor = new MethodsMetadataReadingVisitor(classLoader);",
                "+\t\tcreateClassReader(resource).accept(visitor, ClassReader.SKIP_DEBUG);",
                "+",
                " \t\tthis.resource = resource;",
                "+\t\tthis.classMetadata = visitor;",
                "+\t\tthis.annotationMetadata = visitor;",
                "+\t\tthis.methodsMetadata = visitor;",
                "+\t}",
                "-\t\tClassReader classReader;",
                "+\tprivate static ClassReader createClassReader(Resource resource) throws IOException {",
                "+",
                "+\t\ttry (InputStream is = new BufferedInputStream(resource.getInputStream())) {",
                "+",
                "+\t\t\treturn new ClassReader(is);",
                "-\t\ttry (InputStream is = new BufferedInputStream(getResource().getInputStream())) {",
                "-\t\t\tclassReader = new ClassReader(is);",
                " \t\t} catch (IllegalArgumentException ex) {",
                " \t\t\tthrow new NestedIOException(\"ASM ClassReader failed to parse class file - \"",
                "-\t\t\t\t\t+ \"probably due to a new Java class file version that isn't supported yet: \" + getResource(), ex);",
                "+\t\t\t\t\t+ \"probably due to a new Java class file version that isn't supported yet: \" + resource, ex);",
                " \t\t}",
                "-",
                "-\t\tMethodsMetadataReadingVisitor visitor = new MethodsMetadataReadingVisitor(classLoader);",
                "-\t\tclassReader.accept(visitor, ClassReader.SKIP_DEBUG);",
                "-",
                "-\t\tclassMetadata = visitor;",
                "-\t\tannotationMetadata = visitor;",
                "-\t\tmethodsMetadata = visitor;",
                " \t}",
                "-\t/*",
                "-\t * (non-Javadoc)",
                "-\t * @see org.springframework.core.type.classreading.MetadataReader#getResource()",
                "+\t/**",
                "+\t * ASM class visitor which looks for the class name and implemented types as well as for the methods defined in the",
                "+\t * class, exposing them through the {@link MethodsMetadata} interface.",
                "+\t *",
                "+\t * @author Mark Paluch",
                "+\t * @since 2.1",
                "+\t * @see ClassMetadata",
                "+\t * @see MethodMetadata",
                "+\t * @see MethodMetadataReadingVisitor",
                " \t */",
                "-\t@Override",
                "-\tpublic Resource getResource() {",
                "-\t\treturn resource;",
                "-\t}",
                "+\tprivate static class MethodsMetadataReadingVisitor extends AnnotationMetadataReadingVisitor",
                "+\t\t\timplements MethodsMetadata {",
                "-\t/*",
                "-\t * (non-Javadoc)",
                "-\t * @see org.springframework.core.type.classreading.MetadataReader#getClassMetadata()",
                "-\t */",
                "-\t@Override",
                "-\tpublic ClassMetadata getClassMetadata() {",
                "-\t\treturn classMetadata;",
                "-\t}",
                "+\t\t/**",
                "+\t\t * Construct a new {@link MethodsMetadataReadingVisitor} given {@link ClassLoader}.",
                "+\t\t *",
                "+\t\t * @param classLoader may be {@literal null}.",
                "+\t\t */",
                "+\t\tMethodsMetadataReadingVisitor(@Nullable ClassLoader classLoader) {",
                "+\t\t\tsuper(classLoader);",
                "+\t\t}",
                "-\t/*",
                "-\t * (non-Javadoc)",
                "-\t * @see org.springframework.core.type.classreading.MetadataReader#getAnnotationMetadata()",
                "-\t */",
                "-\t@Override",
                "-\tpublic AnnotationMetadata getAnnotationMetadata() {",
                "-\t\treturn annotationMetadata;",
                "-\t}",
                "+\t\t/*",
                "+\t\t * (non-Javadoc)",
                "+\t\t * @see org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor#visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])",
                "+\t\t */",
                "+\t\t@Override",
                "+\t\t@SuppressWarnings(\"null\")",
                "+\t\tpublic MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {",
                "-\t/* (non-Javadoc)",
                "-\t * @see org.springframework.data.util.ClassMetadataReader#getMethodsMetadata()",
                "-\t */",
                "-\t@Override",
                "-\tpublic MethodsMetadata getMethodsMetadata() {",
                "-\t\treturn methodsMetadata;",
                "+\t\t\t// Skip bridge methods - we're only interested in original user methods.",
                "+\t\t\t// On JDK 8, we'd otherwise run into double detection of the same method...",
                "+\t\t\tif ((access & Opcodes.ACC_BRIDGE) != 0) {",
                "+\t\t\t\treturn super.visitMethod(access, name, desc, signature, exceptions);",
                "+\t\t\t}",
                "+",
                "+\t\t\t// Skip constructors",
                "+\t\t\tif (name.equals(\"<init>\")) {",
                "+\t\t\t\treturn super.visitMethod(access, name, desc, signature, exceptions);",
                "+\t\t\t}",
                "+",
                "+\t\t\tMethodMetadataReadingVisitor visitor = new MethodMetadataReadingVisitor(name, access, getClassName(),",
                "+\t\t\t\t\tType.getReturnType(desc).getClassName(), this.classLoader, this.methodMetadataSet);",
                "+",
                "+\t\t\tthis.methodMetadataSet.add(visitor);",
                "+\t\t\treturn visitor;",
                "+\t\t}",
                "+",
                "+\t\t/*",
                "+\t\t * (non-Javadoc)",
                "+\t\t * @see org.springframework.data.util.MethodsMetadata#getMethods()",
                "+\t\t */",
                "+\t\t@Override",
                "+\t\tpublic Set<MethodMetadata> getMethods() {",
                "+\t\t\treturn Collections.unmodifiableSet(methodMetadataSet);",
                "+\t\t}",
                "+",
                "+\t\t/*",
                "+\t\t * (non-Javadoc)",
                "+\t\t * @see org.springframework.data.util.MethodsMetadata#getMethods(String)",
                "+\t\t */",
                "+\t\t@Override",
                "+\t\tpublic Set<MethodMetadata> getMethods(String name) {",
                "+",
                "+\t\t\tAssert.hasText(name, \"Method name must not be null or empty\");",
                "+",
                "+\t\t\treturn methodMetadataSet.stream() //",
                "+\t\t\t\t\t.filter(it -> it.getMethodName().equals(name)) //",
                "+\t\t\t\t\t.collect(StreamUtils.toUnmodifiableSet());",
                "+\t\t}",
                " \t}",
                "diff --git a/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReader.java b/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReader.java",
                "new file mode 100644",
                "index 000000000..f5797e473",
                "--- /dev/null",
                "+++ b/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReader.java",
                "@@ -0,0 +1,34 @@",
                "+/*",
                "+ * Copyright 2018 the original author or authors.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.springframework.data.type.classreading;",
                "+",
                "+import org.springframework.core.type.classreading.MetadataReader;",
                "+import org.springframework.data.type.MethodsMetadata;",
                "+",
                "+/**",
                "+ * Extension to {@link MetadataReader} for accessing class metadata and method metadata as read by an ASM",
                "+ * {@link org.springframework.asm.ClassReader}.",
                "+ *",
                "+ * @author Mark Paluch",
                "+ * @since 2.1",
                "+ */",
                "+public interface MethodsMetadataReader extends MetadataReader {",
                "+",
                "+\t/**",
                "+\t * @return the {@link MethodsMetadata} for methods in the class file.",
                "+\t */",
                "+\tMethodsMetadata getMethodsMetadata();",
                "+}",
                "diff --git a/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReaderFactory.java b/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReaderFactory.java",
                "index 6f4d249e0..d8a4f7921 100644",
                "--- a/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReaderFactory.java",
                "+++ b/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReaderFactory.java",
                "@@ -23,3 +23,2 @@ import org.springframework.core.type.classreading.SimpleMetadataReaderFactory;",
                " import org.springframework.data.type.MethodsMetadata;",
                "-import org.springframework.data.type.MethodsMetadataReader;",
                " import org.springframework.lang.Nullable;",
                "diff --git a/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReadingVisitor.java b/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReadingVisitor.java",
                "deleted file mode 100644",
                "index db3826c7c..000000000",
                "--- a/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReadingVisitor.java",
                "+++ /dev/null",
                "@@ -1,107 +0,0 @@",
                "-/*",
                "- * Copyright 2018 the original author or authors.",
                "- *",
                "- * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "- * you may not use this file except in compliance with the License.",
                "- * You may obtain a copy of the License at",
                "- *",
                "- *      http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- * See the License for the specific language governing permissions and",
                "- * limitations under the License.",
                "- */",
                "-package org.springframework.data.type.classreading;",
                "-",
                "-import java.util.Collections;",
                "-import java.util.LinkedHashSet;",
                "-import java.util.Set;",
                "-",
                "-import org.springframework.asm.MethodVisitor;",
                "-import org.springframework.asm.Opcodes;",
                "-import org.springframework.asm.Type;",
                "-import org.springframework.core.type.ClassMetadata;",
                "-import org.springframework.core.type.MethodMetadata;",
                "-import org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor;",
                "-import org.springframework.core.type.classreading.MethodMetadataReadingVisitor;",
                "-import org.springframework.data.type.MethodsMetadata;",
                "-import org.springframework.lang.Nullable;",
                "-import org.springframework.util.Assert;",
                "-",
                "-/**",
                "- * ASM class visitor which looks for the class name and implemented types as well as for the methods defined in the",
                "- * class, exposing them through the {@link MethodsMetadata} interface.",
                "- *",
                "- * @author Mark Paluch",
                "- * @since 2.1",
                "- * @see ClassMetadata",
                "- * @see MethodMetadata",
                "- * @see MethodMetadataReadingVisitor",
                "- */",
                "-class MethodsMetadataReadingVisitor extends AnnotationMetadataReadingVisitor implements MethodsMetadata {",
                "-",
                "-\t/**",
                "-\t * Construct a new {@link MethodsMetadataReadingVisitor} given {@link ClassLoader}.",
                "-\t *",
                "-\t * @param classLoader may be {@literal null}.",
                "-\t */",
                "-\tMethodsMetadataReadingVisitor(@Nullable ClassLoader classLoader) {",
                "-\t\tsuper(classLoader);",
                "-\t}",
                "-",
                "-\t/*",
                "-\t * (non-Javadoc)",
                "-\t * @see org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor#visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])",
                "-\t */",
                "-\t@Override",
                "-\tpublic MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {",
                "-",
                "-\t\t// Skip bridge methods - we're only interested in original user methods.",
                "-\t\t// On JDK 8, we'd otherwise run into double detection of the same method...",
                "-\t\tif ((access & Opcodes.ACC_BRIDGE) != 0) {",
                "-\t\t\treturn super.visitMethod(access, name, desc, signature, exceptions);",
                "-\t\t}",
                "-",
                "-\t\t// Skip constructors",
                "-\t\tif (name.equals(\"<init>\")) {",
                "-\t\t\treturn super.visitMethod(access, name, desc, signature, exceptions);",
                "-\t\t}",
                "-",
                "-\t\tMethodMetadataReadingVisitor visitor = new MethodMetadataReadingVisitor(name, access, getClassName(),",
                "-\t\t\t\tType.getReturnType(desc).getClassName(), this.classLoader, this.methodMetadataSet);",
                "-",
                "-\t\tthis.methodMetadataSet.add(visitor);",
                "-\t\treturn visitor;",
                "-\t}",
                "-",
                "-\t/*",
                "-\t * (non-Javadoc)",
                "-\t * @see org.springframework.data.util.MethodsMetadata#getMethods()",
                "-\t */",
                "-\t@Override",
                "-\tpublic Set<MethodMetadata> getMethods() {",
                "-\t\treturn Collections.unmodifiableSet(methodMetadataSet);",
                "-\t}",
                "-",
                "-\t/*",
                "-\t * (non-Javadoc)",
                "-\t * @see org.springframework.data.util.MethodsMetadata#getMethods(String)",
                "-\t */",
                "-\t@Override",
                "-\tpublic Set<MethodMetadata> getMethods(String name) {",
                "-",
                "-\t\tAssert.hasText(name, \"Method name must not be null or empty\");",
                "-",
                "-\t\tSet<MethodMetadata> result = new LinkedHashSet<>(4);",
                "-",
                "-\t\tfor (MethodMetadata metadata : methodMetadataSet) {",
                "-\t\t\tif (metadata.getMethodName().equals(name)) {",
                "-\t\t\t\tresult.add(metadata);",
                "-\t\t\t}",
                "-\t\t}",
                "-",
                "-\t\treturn Collections.unmodifiableSet(result);",
                "-\t}",
                "-}"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "src/main/java/org/springframework/data/type/MethodsMetadata.java",
                "src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java",
                "src/main/java/org/springframework/data/type/classreading/MethodsMetadataReader.java",
                "src/main/java/org/springframework/data/type/classreading/MethodsMetadataReaderFactory.java",
                "src/main/java/org/springframework/data/type/classreading/MethodsMetadataReadingVisitor.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "263": "Introduce abstraction to detect declared methods in declaration order [DATACMNS-1206] #1645"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.1.0.M1",
                "2.1.0.M2",
                "2.1.0.M3",
                "2.1.0.RC1",
                "2.1.0.RC2",
                "2.1.0.RELEASE",
                "2.1.1.RELEASE",
                "2.1.10.RELEASE",
                "2.1.11.RELEASE",
                "2.1.12.RELEASE",
                "2.1.13.RELEASE",
                "2.1.14.RELEASE",
                "2.1.15.RELEASE",
                "2.1.16.RELEASE",
                "2.1.17.RELEASE",
                "2.1.18.RELEASE",
                "2.1.19.RELEASE",
                "2.1.2.RELEASE",
                "2.1.20.RELEASE",
                "2.1.21.RELEASE",
                "2.1.3.RELEASE",
                "2.1.4.RELEASE",
                "2.1.5.RELEASE",
                "2.1.6.RELEASE",
                "2.1.7.RELEASE",
                "2.1.8.RELEASE",
                "2.1.9.RELEASE",
                "2.2.0.M1",
                "2.2.0.M2",
                "2.2.0.M3",
                "2.2.0.M4",
                "2.2.0.RC1",
                "2.2.0.RC2",
                "2.2.0.RC3",
                "2.2.0.RELEASE",
                "2.2.1.RELEASE",
                "2.2.10.RELEASE",
                "2.2.11.RELEASE",
                "2.2.12.RELEASE",
                "2.2.13.RELEASE",
                "2.2.2.RELEASE",
                "2.2.3.RELEASE",
                "2.2.4.RELEASE",
                "2.2.5.RELEASE",
                "2.2.6.RELEASE",
                "2.2.7.RELEASE",
                "2.2.8.RELEASE",
                "2.2.9.RELEASE",
                "2.3.0.M1",
                "2.3.0.M2",
                "2.3.0.M3",
                "2.3.0.M4",
                "2.3.0.RC1",
                "2.3.0.RC2",
                "2.3.0.RELEASE",
                "2.3.1.RELEASE",
                "2.3.2.RELEASE",
                "2.3.3.RELEASE",
                "2.3.4.RELEASE",
                "2.3.5.RELEASE",
                "2.3.6.RELEASE",
                "2.3.7.RELEASE",
                "2.3.8.RELEASE",
                "2.3.9.RELEASE",
                "2.4.0",
                "2.4.0-M1",
                "2.4.0-M2",
                "2.4.0-RC1",
                "2.4.0-RC2",
                "2.4.1",
                "2.4.10",
                "2.4.11",
                "2.4.12",
                "2.4.13",
                "2.4.14",
                "2.4.15",
                "2.4.2",
                "2.4.3",
                "2.4.4",
                "2.4.5",
                "2.4.6",
                "2.4.7",
                "2.4.8",
                "2.4.9",
                "2.5.0",
                "2.5.0-M1",
                "2.5.0-M2",
                "2.5.0-M3",
                "2.5.0-M4",
                "2.5.0-M5",
                "2.5.0-RC1",
                "2.5.1",
                "2.5.10",
                "2.5.11",
                "2.5.12",
                "2.5.2",
                "2.5.3",
                "2.5.4",
                "2.5.5",
                "2.5.6",
                "2.5.7",
                "2.5.8",
                "2.5.9",
                "2.6.0",
                "2.6.0-M1",
                "2.6.0-M2",
                "2.6.0-M3",
                "2.6.0-RC1",
                "2.6.1",
                "2.6.10",
                "2.6.2",
                "2.6.3",
                "2.6.4",
                "2.6.5",
                "2.6.6",
                "2.6.7",
                "2.6.8",
                "2.6.9",
                "2.7.0",
                "2.7.0-M1",
                "2.7.0-M2",
                "2.7.0-M3",
                "2.7.0-M4",
                "2.7.0-RC1",
                "2.7.1",
                "2.7.10",
                "2.7.11",
                "2.7.12",
                "2.7.13",
                "2.7.14",
                "2.7.15",
                "2.7.16",
                "2.7.17",
                "2.7.18",
                "2.7.2",
                "2.7.3",
                "2.7.4",
                "2.7.5",
                "2.7.6",
                "2.7.7",
                "2.7.8",
                "2.7.9",
                "3.0.0",
                "3.0.0-M1",
                "3.0.0-M2",
                "3.0.0-M3",
                "3.0.0-M4",
                "3.0.0-M5",
                "3.0.0-M6",
                "3.0.0-RC1",
                "3.0.0-RC2",
                "3.0.1",
                "3.0.10",
                "3.0.11",
                "3.0.12",
                "3.0.2",
                "3.0.3",
                "3.0.4",
                "3.0.5",
                "3.0.6",
                "3.0.7",
                "3.0.8",
                "3.0.9",
                "3.1.0",
                "3.1.0-M1",
                "3.1.0-M2",
                "3.1.0-M3",
                "3.1.0-RC1",
                "3.1.1",
                "3.1.10",
                "3.1.11",
                "3.1.12",
                "3.1.2",
                "3.1.3",
                "3.1.4",
                "3.1.5",
                "3.1.6",
                "3.1.7",
                "3.1.8",
                "3.1.9",
                "3.2.0",
                "3.2.0-M1",
                "3.2.0-M2",
                "3.2.0-M3",
                "3.2.0-RC1",
                "3.2.1",
                "3.2.2",
                "3.2.3",
                "3.2.4",
                "3.2.5",
                "3.2.6",
                "3.2.7",
                "3.3.0",
                "3.3.0-M1",
                "3.3.0-M2",
                "3.3.0-RC1",
                "3.3.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request, property",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: projection",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 263",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9e013d3c14ea27a4707e36979340e25d9fa03809",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1511972706,
            "hunks": 17,
            "message": "DATACMNS-1206 - Add API to read methods in declaration order. We now provide MethodsMetadataReader to read method metadata from a class file. MethodMetadata is read for all user-declared methods except for constructors (which are technically methods, too). MethodsMetadataReaderFactory factory = new MethodsMetadataReaderFactory(); MethodsMetadataReader metadataReader = factory.getMetadataReader(\"com.acme.Foo\"); MethodsMetadata metadata = metadataReader.getMethodsMetadata(); This new API is now used by DefaultProjectionInformation to make sure the order of input properties is based on the declaration order in the projection interfaces. Previously that order could not be guaranteed to be stable. Original pull request: #263.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java b/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "index 66786f99a..17fe50f30 100644",
                "--- a/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "+++ b/src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "@@ -18,2 +18,3 @@ package org.springframework.data.projection;",
                " import java.beans.PropertyDescriptor;",
                "+import java.io.IOException;",
                " import java.lang.reflect.Method;",
                "@@ -21,7 +22,18 @@ import java.util.ArrayList;",
                " import java.util.Arrays;",
                "+import java.util.Comparator;",
                " import java.util.List;",
                "+import java.util.Map;",
                "+import java.util.Optional;",
                " import java.util.stream.Collectors;",
                "+import java.util.stream.IntStream;",
                "+import java.util.stream.Stream;",
                " import org.springframework.beans.BeanUtils;",
                "+import org.springframework.core.type.ClassMetadata;",
                "+import org.springframework.core.type.MethodMetadata;",
                "+import org.springframework.data.type.MethodsMetadata;",
                "+import org.springframework.data.type.MethodsMetadataReader;",
                "+import org.springframework.data.type.classreading.MethodsMetadataReaderFactory;",
                " import org.springframework.util.Assert;",
                "+import org.springframework.util.ClassUtils;",
                "@@ -33,2 +45,3 @@ import org.springframework.util.Assert;",
                "  * @author Christoph Strobl",
                "+ * @author Mark Paluch",
                "  * @since 1.12",
                "@@ -45,3 +58,3 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                " \t */",
                "-\tpublic DefaultProjectionInformation(Class<?> type) {",
                "+\tDefaultProjectionInformation(Class<?> type) {",
                "@@ -104,8 +117,30 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                " \t\tList<PropertyDescriptor> result = new ArrayList<>();",
                "-\t\tresult.addAll(Arrays.stream(BeanUtils.getPropertyDescriptors(type))//",
                "-\t\t\t\t.filter(it -> !hasDefaultGetter(it))//",
                "-\t\t\t\t.collect(Collectors.toList()));",
                "-\t\tfor (Class<?> interfaze : type.getInterfaces()) {",
                "-\t\t\tresult.addAll(collectDescriptors(interfaze));",
                "+\t\tOptional<MethodsMetadata> metadata = getMetadata(type);",
                "+\t\tStream<PropertyDescriptor> stream = Arrays.stream(BeanUtils.getPropertyDescriptors(type))//",
                "+\t\t\t\t.filter(it -> !hasDefaultGetter(it));",
                "+",
                "+\t\tStream<PropertyDescriptor> streamToUse = metadata.map(DefaultProjectionInformation::getMethodOrder)",
                "+\t\t\t\t.filter(it -> !it.isEmpty()) //",
                "+\t\t\t\t.map(it -> stream.filter(descriptor -> it.containsKey(descriptor.getReadMethod().getName()))",
                "+\t\t\t\t\t\t.sorted(Comparator.comparingInt(left -> it.get(left.getReadMethod().getName())))) //",
                "+\t\t\t\t.orElse(stream);",
                "+",
                "+\t\tresult.addAll(streamToUse.collect(Collectors.toList()));",
                "+",
                "+\t\tif (metadata.isPresent()) {",
                "+",
                "+\t\t\tStream<String> interfaceNames = metadata.map(ClassMetadata::getInterfaceNames) //",
                "+\t\t\t\t\t.map(Arrays::stream) //",
                "+\t\t\t\t\t.orElse(Stream.empty());",
                "+",
                "+\t\t\tresult.addAll(interfaceNames.map(it -> loadClass(it, type.getClassLoader())) //",
                "+\t\t\t\t\t.map(DefaultProjectionInformation::collectDescriptors) //",
                "+\t\t\t\t\t.flatMap(List::stream) //",
                "+\t\t\t\t\t.collect(Collectors.toList()));",
                "+\t\t} else {",
                "+",
                "+\t\t\tfor (Class<?> interfaze : type.getInterfaces()) {",
                "+\t\t\t\tresult.addAll(collectDescriptors(interfaze));",
                "+\t\t\t}",
                " \t\t}",
                "@@ -115,2 +150,49 @@ class DefaultProjectionInformation implements ProjectionInformation {",
                "+\tprivate static Class<?> loadClass(String className, ClassLoader classLoader) {",
                "+",
                "+\t\ttry {",
                "+\t\t\treturn ClassUtils.forName(className, classLoader);",
                "+\t\t} catch (ClassNotFoundException e) {",
                "+\t\t\tthrow new IllegalArgumentException(String.format(\"Cannot load class %s\", className));",
                "+\t\t}",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Returns a {@link Map} containing method name to its positional index according to {@link MethodsMetadata}.",
                "+\t *",
                "+\t * @param metadata",
                "+\t * @return",
                "+\t */",
                "+\tprivate static Map<String, Integer> getMethodOrder(MethodsMetadata metadata) {",
                "+",
                "+\t\tList<String> methods = metadata.getMethods() //",
                "+\t\t\t\t.stream() //",
                "+\t\t\t\t.map(MethodMetadata::getMethodName) //",
                "+\t\t\t\t.distinct() //",
                "+\t\t\t\t.collect(Collectors.toList());",
                "+",
                "+\t\treturn IntStream.range(0, methods.size()) //",
                "+\t\t\t\t.boxed() //",
                "+\t\t\t\t.collect(Collectors.toMap(methods::get, i -> i));",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Attempts to obtain {@link MethodsMetadata} from {@link Class}. Returns {@link Optional} containing",
                "+\t * {@link MethodsMetadata} if metadata was read successfully, {@link Optional#empty()} otherwise.",
                "+\t *",
                "+\t * @param type must not be {@literal null}.",
                "+\t * @return the optional {@link MethodsMetadata}.",
                "+\t */",
                "+\tprivate static Optional<MethodsMetadata> getMetadata(Class<?> type) {",
                "+",
                "+\t\ttry {",
                "+",
                "+\t\t\tMethodsMetadataReaderFactory factory = new MethodsMetadataReaderFactory(type.getClassLoader());",
                "+\t\t\tMethodsMetadataReader metadataReader = factory.getMetadataReader(ClassUtils.getQualifiedName(type));",
                "+\t\t\treturn Optional.of(metadataReader.getMethodsMetadata());",
                "+\t\t} catch (IOException e) {",
                "+\t\t\treturn Optional.empty();",
                "+\t\t}",
                "+\t}",
                "+",
                " \t/**",
                "diff --git a/src/main/java/org/springframework/data/type/MethodsMetadata.java b/src/main/java/org/springframework/data/type/MethodsMetadata.java",
                "new file mode 100644",
                "index 000000000..74fc84988",
                "--- /dev/null",
                "+++ b/src/main/java/org/springframework/data/type/MethodsMetadata.java",
                "@@ -0,0 +1,51 @@",
                "+/*",
                "+ * Copyright 2018 the original author or authors.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.springframework.data.type;",
                "+",
                "+import java.util.Set;",
                "+",
                "+import org.springframework.core.type.ClassMetadata;",
                "+import org.springframework.core.type.MethodMetadata;",
                "+",
                "+/**",
                "+ * Interface that defines abstract metadata of a specific class, in a form that does not require that class to be loaded",
                "+ * yet.",
                "+ *",
                "+ * @author Mark Paluch",
                "+ * @since 2.1",
                "+ * @see MethodMetadata",
                "+ * @see ClassMetadata",
                "+ * @see MethodsMetadataReader#getMethodsMetadata()",
                "+ */",
                "+public interface MethodsMetadata extends ClassMetadata {",
                "+",
                "+\t/**",
                "+\t * Return all methods.",
                "+\t *",
                "+\t * @return the methods declared in the class ordered as found in the class file. Order does not necessarily reflect",
                "+\t *         the declaration order in the source file.",
                "+\t */",
                "+\tSet<MethodMetadata> getMethods();",
                "+",
                "+\t/**",
                "+\t * Return all methods matching method {@code name}.",
                "+\t *",
                "+\t * @param name name of the method, must not be {@literal null} or empty.",
                "+\t * @return the methods matching method {@code name } declared in the class ordered as found in the class file. Order",
                "+\t *         does not necessarily reflect the declaration order in the source file.",
                "+\t */",
                "+\tSet<MethodMetadata> getMethods(String name);",
                "+}",
                "diff --git a/src/main/java/org/springframework/data/type/MethodsMetadataReader.java b/src/main/java/org/springframework/data/type/MethodsMetadataReader.java",
                "new file mode 100644",
                "index 000000000..f21d64a99",
                "--- /dev/null",
                "+++ b/src/main/java/org/springframework/data/type/MethodsMetadataReader.java",
                "@@ -0,0 +1,33 @@",
                "+/*",
                "+ * Copyright 2018 the original author or authors.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.springframework.data.type;",
                "+",
                "+import org.springframework.core.type.classreading.MetadataReader;",
                "+",
                "+/**",
                "+ * Extension to {@link MetadataReader} for accessing class metadata and method metadata as read by an ASM",
                "+ * {@link org.springframework.asm.ClassReader}.",
                "+ *",
                "+ * @author Mark Paluch",
                "+ * @since 2.1",
                "+ */",
                "+public interface MethodsMetadataReader extends MetadataReader {",
                "+",
                "+\t/**",
                "+\t * @return the metadata for methods in the class file.",
                "+\t */",
                "+\tMethodsMetadata getMethodsMetadata();",
                "+}",
                "diff --git a/src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java b/src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java",
                "new file mode 100644",
                "index 000000000..d201637a8",
                "--- /dev/null",
                "+++ b/src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java",
                "@@ -0,0 +1,99 @@",
                "+/*",
                "+ * Copyright 2018 the original author or authors.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.springframework.data.type.classreading;",
                "+",
                "+import java.io.BufferedInputStream;",
                "+import java.io.IOException;",
                "+import java.io.InputStream;",
                "+",
                "+import org.springframework.asm.ClassReader;",
                "+import org.springframework.core.NestedIOException;",
                "+import org.springframework.core.io.Resource;",
                "+import org.springframework.core.type.AnnotationMetadata;",
                "+import org.springframework.core.type.ClassMetadata;",
                "+import org.springframework.data.type.MethodsMetadata;",
                "+import org.springframework.data.type.MethodsMetadataReader;",
                "+import org.springframework.lang.Nullable;",
                "+",
                "+/**",
                "+ * {@link MethodsMetadataReader} implementation based on an ASM {@link org.springframework.asm.ClassReader}.",
                "+ *",
                "+ * @author Mark Paluch",
                "+ * @since 2.1",
                "+ */",
                "+class DefaultMethodsMetadataReader implements MethodsMetadataReader {",
                "+",
                "+\tprivate final Resource resource;",
                "+\tprivate final ClassMetadata classMetadata;",
                "+\tprivate final AnnotationMetadata annotationMetadata;",
                "+\tprivate final MethodsMetadata methodsMetadata;",
                "+",
                "+\tDefaultMethodsMetadataReader(Resource resource, @Nullable ClassLoader classLoader) throws IOException {",
                "+",
                "+\t\tthis.resource = resource;",
                "+",
                "+\t\tClassReader classReader;",
                "+",
                "+\t\ttry (InputStream is = new BufferedInputStream(getResource().getInputStream())) {",
                "+\t\t\tclassReader = new ClassReader(is);",
                "+\t\t} catch (IllegalArgumentException ex) {",
                "+\t\t\tthrow new NestedIOException(\"ASM ClassReader failed to parse class file - \"",
                "+\t\t\t\t\t+ \"probably due to a new Java class file version that isn't supported yet: \" + getResource(), ex);",
                "+\t\t}",
                "+",
                "+\t\tMethodsMetadataReadingVisitor visitor = new MethodsMetadataReadingVisitor(classLoader);",
                "+\t\tclassReader.accept(visitor, ClassReader.SKIP_DEBUG);",
                "+",
                "+\t\tclassMetadata = visitor;",
                "+\t\tannotationMetadata = visitor;",
                "+\t\tmethodsMetadata = visitor;",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see org.springframework.core.type.classreading.MetadataReader#getResource()",
                "+\t */",
                "+\t@Override",
                "+\tpublic Resource getResource() {",
                "+\t\treturn resource;",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see org.springframework.core.type.classreading.MetadataReader#getClassMetadata()",
                "+\t */",
                "+\t@Override",
                "+\tpublic ClassMetadata getClassMetadata() {",
                "+\t\treturn classMetadata;",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see org.springframework.core.type.classreading.MetadataReader#getAnnotationMetadata()",
                "+\t */",
                "+\t@Override",
                "+\tpublic AnnotationMetadata getAnnotationMetadata() {",
                "+\t\treturn annotationMetadata;",
                "+\t}",
                "+",
                "+\t/* (non-Javadoc)",
                "+\t * @see org.springframework.data.util.ClassMetadataReader#getMethodsMetadata()",
                "+\t */",
                "+\t@Override",
                "+\tpublic MethodsMetadata getMethodsMetadata() {",
                "+\t\treturn methodsMetadata;",
                "+\t}",
                "+}",
                "diff --git a/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReaderFactory.java b/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReaderFactory.java",
                "new file mode 100644",
                "index 000000000..6f4d249e0",
                "--- /dev/null",
                "+++ b/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReaderFactory.java",
                "@@ -0,0 +1,76 @@",
                "+/*",
                "+ * Copyright 2018 the original author or authors.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.springframework.data.type.classreading;",
                "+",
                "+import java.io.IOException;",
                "+",
                "+import org.springframework.core.io.Resource;",
                "+import org.springframework.core.io.ResourceLoader;",
                "+import org.springframework.core.type.classreading.SimpleMetadataReaderFactory;",
                "+import org.springframework.data.type.MethodsMetadata;",
                "+import org.springframework.data.type.MethodsMetadataReader;",
                "+import org.springframework.lang.Nullable;",
                "+",
                "+/**",
                "+ * Extension of {@link SimpleMetadataReaderFactory} that reads {@link MethodsMetadata}, creating a new ASM",
                "+ * {@link MethodsMetadataReader} for every request.",
                "+ *",
                "+ * @author Mark Paluch",
                "+ * @since 2.1",
                "+ */",
                "+public class MethodsMetadataReaderFactory extends SimpleMetadataReaderFactory {",
                "+",
                "+\t/**",
                "+\t * Create a new {@link MethodsMetadataReaderFactory} for the default class loader.",
                "+\t */",
                "+\tpublic MethodsMetadataReaderFactory() {}",
                "+",
                "+\t/**",
                "+\t * Create a new {@link MethodsMetadataReaderFactory} for the given {@link ResourceLoader}.",
                "+\t *",
                "+\t * @param resourceLoader the Spring {@link ResourceLoader} to use (also determines the {@link ClassLoader} to use).",
                "+\t */",
                "+\tpublic MethodsMetadataReaderFactory(@Nullable ResourceLoader resourceLoader) {",
                "+\t\tsuper(resourceLoader);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Create a new {@link MethodsMetadataReaderFactory} for the given {@link ClassLoader}.",
                "+\t *",
                "+\t * @param classLoader the class loader to use.",
                "+\t */",
                "+\tpublic MethodsMetadataReaderFactory(@Nullable ClassLoader classLoader) {",
                "+\t\tsuper(classLoader);",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(java.lang.String)",
                "+\t */",
                "+\t@Override",
                "+\tpublic MethodsMetadataReader getMetadataReader(String className) throws IOException {",
                "+\t\treturn (MethodsMetadataReader) super.getMetadataReader(className);",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)",
                "+\t */",
                "+\t@Override",
                "+\tpublic MethodsMetadataReader getMetadataReader(Resource resource) throws IOException {",
                "+\t\treturn new DefaultMethodsMetadataReader(resource, getResourceLoader().getClassLoader());",
                "+\t}",
                "+}",
                "diff --git a/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReadingVisitor.java b/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReadingVisitor.java",
                "new file mode 100644",
                "index 000000000..db3826c7c",
                "--- /dev/null",
                "+++ b/src/main/java/org/springframework/data/type/classreading/MethodsMetadataReadingVisitor.java",
                "@@ -0,0 +1,107 @@",
                "+/*",
                "+ * Copyright 2018 the original author or authors.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.springframework.data.type.classreading;",
                "+",
                "+import java.util.Collections;",
                "+import java.util.LinkedHashSet;",
                "+import java.util.Set;",
                "+",
                "+import org.springframework.asm.MethodVisitor;",
                "+import org.springframework.asm.Opcodes;",
                "+import org.springframework.asm.Type;",
                "+import org.springframework.core.type.ClassMetadata;",
                "+import org.springframework.core.type.MethodMetadata;",
                "+import org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor;",
                "+import org.springframework.core.type.classreading.MethodMetadataReadingVisitor;",
                "+import org.springframework.data.type.MethodsMetadata;",
                "+import org.springframework.lang.Nullable;",
                "+import org.springframework.util.Assert;",
                "+",
                "+/**",
                "+ * ASM class visitor which looks for the class name and implemented types as well as for the methods defined in the",
                "+ * class, exposing them through the {@link MethodsMetadata} interface.",
                "+ *",
                "+ * @author Mark Paluch",
                "+ * @since 2.1",
                "+ * @see ClassMetadata",
                "+ * @see MethodMetadata",
                "+ * @see MethodMetadataReadingVisitor",
                "+ */",
                "+class MethodsMetadataReadingVisitor extends AnnotationMetadataReadingVisitor implements MethodsMetadata {",
                "+",
                "+\t/**",
                "+\t * Construct a new {@link MethodsMetadataReadingVisitor} given {@link ClassLoader}.",
                "+\t *",
                "+\t * @param classLoader may be {@literal null}.",
                "+\t */",
                "+\tMethodsMetadataReadingVisitor(@Nullable ClassLoader classLoader) {",
                "+\t\tsuper(classLoader);",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see org.springframework.core.type.classreading.AnnotationMetadataReadingVisitor#visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])",
                "+\t */",
                "+\t@Override",
                "+\tpublic MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {",
                "+",
                "+\t\t// Skip bridge methods - we're only interested in original user methods.",
                "+\t\t// On JDK 8, we'd otherwise run into double detection of the same method...",
                "+\t\tif ((access & Opcodes.ACC_BRIDGE) != 0) {",
                "+\t\t\treturn super.visitMethod(access, name, desc, signature, exceptions);",
                "+\t\t}",
                "+",
                "+\t\t// Skip constructors",
                "+\t\tif (name.equals(\"<init>\")) {",
                "+\t\t\treturn super.visitMethod(access, name, desc, signature, exceptions);",
                "+\t\t}",
                "+",
                "+\t\tMethodMetadataReadingVisitor visitor = new MethodMetadataReadingVisitor(name, access, getClassName(),",
                "+\t\t\t\tType.getReturnType(desc).getClassName(), this.classLoader, this.methodMetadataSet);",
                "+",
                "+\t\tthis.methodMetadataSet.add(visitor);",
                "+\t\treturn visitor;",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see org.springframework.data.util.MethodsMetadata#getMethods()",
                "+\t */",
                "+\t@Override",
                "+\tpublic Set<MethodMetadata> getMethods() {",
                "+\t\treturn Collections.unmodifiableSet(methodMetadataSet);",
                "+\t}",
                "+",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see org.springframework.data.util.MethodsMetadata#getMethods(String)",
                "+\t */",
                "+\t@Override",
                "+\tpublic Set<MethodMetadata> getMethods(String name) {",
                "+",
                "+\t\tAssert.hasText(name, \"Method name must not be null or empty\");",
                "+",
                "+\t\tSet<MethodMetadata> result = new LinkedHashSet<>(4);",
                "+",
                "+\t\tfor (MethodMetadata metadata : methodMetadataSet) {",
                "+\t\t\tif (metadata.getMethodName().equals(name)) {",
                "+\t\t\t\tresult.add(metadata);",
                "+\t\t\t}",
                "+\t\t}",
                "+",
                "+\t\treturn Collections.unmodifiableSet(result);",
                "+\t}",
                "+}",
                "diff --git a/src/main/java/org/springframework/data/type/classreading/package-info.java b/src/main/java/org/springframework/data/type/classreading/package-info.java",
                "new file mode 100644",
                "index 000000000..fe6d22de4",
                "--- /dev/null",
                "+++ b/src/main/java/org/springframework/data/type/classreading/package-info.java",
                "@@ -0,0 +1,6 @@",
                "+/**",
                "+ * Support classes for reading annotation and class-level metadata.",
                "+ */",
                "+@org.springframework.lang.NonNullApi",
                "+@org.springframework.lang.NonNullFields",
                "+package org.springframework.data.type.classreading;",
                "diff --git a/src/main/java/org/springframework/data/type/package-info.java b/src/main/java/org/springframework/data/type/package-info.java",
                "new file mode 100644",
                "index 000000000..b887b66b2",
                "--- /dev/null",
                "+++ b/src/main/java/org/springframework/data/type/package-info.java",
                "@@ -0,0 +1,5 @@",
                "+/**",
                "+ * Core support package for type introspection.",
                "+ */",
                "+@org.springframework.lang.NonNullApi",
                "+package org.springframework.data.type;"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/projection/DefaultProjectionInformation.java",
                "src/main/java/org/springframework/data/type/MethodsMetadata.java",
                "src/main/java/org/springframework/data/type/MethodsMetadataReader.java",
                "src/main/java/org/springframework/data/type/classreading/DefaultMethodsMetadataReader.java",
                "src/main/java/org/springframework/data/type/classreading/MethodsMetadataReaderFactory.java",
                "src/main/java/org/springframework/data/type/classreading/MethodsMetadataReadingVisitor.java",
                "src/main/java/org/springframework/data/type/classreading/package-info.java",
                "src/main/java/org/springframework/data/type/package-info.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "263": "Introduce abstraction to detect declared methods in declaration order [DATACMNS-1206] #1645"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.1.0.M1",
                "2.1.0.M2",
                "2.1.0.M3",
                "2.1.0.RC1",
                "2.1.0.RC2",
                "2.1.0.RELEASE",
                "2.1.1.RELEASE",
                "2.1.10.RELEASE",
                "2.1.11.RELEASE",
                "2.1.12.RELEASE",
                "2.1.13.RELEASE",
                "2.1.14.RELEASE",
                "2.1.15.RELEASE",
                "2.1.16.RELEASE",
                "2.1.17.RELEASE",
                "2.1.18.RELEASE",
                "2.1.19.RELEASE",
                "2.1.2.RELEASE",
                "2.1.20.RELEASE",
                "2.1.21.RELEASE",
                "2.1.3.RELEASE",
                "2.1.4.RELEASE",
                "2.1.5.RELEASE",
                "2.1.6.RELEASE",
                "2.1.7.RELEASE",
                "2.1.8.RELEASE",
                "2.1.9.RELEASE",
                "2.2.0.M1",
                "2.2.0.M2",
                "2.2.0.M3",
                "2.2.0.M4",
                "2.2.0.RC1",
                "2.2.0.RC2",
                "2.2.0.RC3",
                "2.2.0.RELEASE",
                "2.2.1.RELEASE",
                "2.2.10.RELEASE",
                "2.2.11.RELEASE",
                "2.2.12.RELEASE",
                "2.2.13.RELEASE",
                "2.2.2.RELEASE",
                "2.2.3.RELEASE",
                "2.2.4.RELEASE",
                "2.2.5.RELEASE",
                "2.2.6.RELEASE",
                "2.2.7.RELEASE",
                "2.2.8.RELEASE",
                "2.2.9.RELEASE",
                "2.3.0.M1",
                "2.3.0.M2",
                "2.3.0.M3",
                "2.3.0.M4",
                "2.3.0.RC1",
                "2.3.0.RC2",
                "2.3.0.RELEASE",
                "2.3.1.RELEASE",
                "2.3.2.RELEASE",
                "2.3.3.RELEASE",
                "2.3.4.RELEASE",
                "2.3.5.RELEASE",
                "2.3.6.RELEASE",
                "2.3.7.RELEASE",
                "2.3.8.RELEASE",
                "2.3.9.RELEASE",
                "2.4.0",
                "2.4.0-M1",
                "2.4.0-M2",
                "2.4.0-RC1",
                "2.4.0-RC2",
                "2.4.1",
                "2.4.10",
                "2.4.11",
                "2.4.12",
                "2.4.13",
                "2.4.14",
                "2.4.15",
                "2.4.2",
                "2.4.3",
                "2.4.4",
                "2.4.5",
                "2.4.6",
                "2.4.7",
                "2.4.8",
                "2.4.9",
                "2.5.0",
                "2.5.0-M1",
                "2.5.0-M2",
                "2.5.0-M3",
                "2.5.0-M4",
                "2.5.0-M5",
                "2.5.0-RC1",
                "2.5.1",
                "2.5.10",
                "2.5.11",
                "2.5.12",
                "2.5.2",
                "2.5.3",
                "2.5.4",
                "2.5.5",
                "2.5.6",
                "2.5.7",
                "2.5.8",
                "2.5.9",
                "2.6.0",
                "2.6.0-M1",
                "2.6.0-M2",
                "2.6.0-M3",
                "2.6.0-RC1",
                "2.6.1",
                "2.6.10",
                "2.6.2",
                "2.6.3",
                "2.6.4",
                "2.6.5",
                "2.6.6",
                "2.6.7",
                "2.6.8",
                "2.6.9",
                "2.7.0",
                "2.7.0-M1",
                "2.7.0-M2",
                "2.7.0-M3",
                "2.7.0-M4",
                "2.7.0-RC1",
                "2.7.1",
                "2.7.10",
                "2.7.11",
                "2.7.12",
                "2.7.13",
                "2.7.14",
                "2.7.15",
                "2.7.16",
                "2.7.17",
                "2.7.18",
                "2.7.2",
                "2.7.3",
                "2.7.4",
                "2.7.5",
                "2.7.6",
                "2.7.7",
                "2.7.8",
                "2.7.9",
                "3.0.0",
                "3.0.0-M1",
                "3.0.0-M2",
                "3.0.0-M3",
                "3.0.0-M4",
                "3.0.0-M5",
                "3.0.0-M6",
                "3.0.0-RC1",
                "3.0.0-RC2",
                "3.0.1",
                "3.0.10",
                "3.0.11",
                "3.0.12",
                "3.0.2",
                "3.0.3",
                "3.0.4",
                "3.0.5",
                "3.0.6",
                "3.0.7",
                "3.0.8",
                "3.0.9",
                "3.1.0",
                "3.1.0-M1",
                "3.1.0-M2",
                "3.1.0-M3",
                "3.1.0-RC1",
                "3.1.1",
                "3.1.10",
                "3.1.11",
                "3.1.12",
                "3.1.2",
                "3.1.3",
                "3.1.4",
                "3.1.5",
                "3.1.6",
                "3.1.7",
                "3.1.8",
                "3.1.9",
                "3.2.0",
                "3.2.0-M1",
                "3.2.0-M2",
                "3.2.0-M3",
                "3.2.0-RC1",
                "3.2.1",
                "3.2.2",
                "3.2.3",
                "3.2.4",
                "3.2.5",
                "3.2.6",
                "3.2.7",
                "3.3.0",
                "3.3.0-M1",
                "3.3.0-M2",
                "3.3.0-RC1",
                "3.3.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: user, base, file, projection, request",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: projection",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 263",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "111f43634f7a6961962346560e34700fb9ff70cc",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1514556150,
            "hunks": 2,
            "message": "DATACMNS-563 - PagedResourcesAssembler now correctly forwards one-index settings to PageMetadata. Original pull request: #267.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/web/PagedResourcesAssembler.java b/src/main/java/org/springframework/data/web/PagedResourcesAssembler.java",
                "index ac859ff6a..89cd8468f 100644",
                "--- a/src/main/java/org/springframework/data/web/PagedResourcesAssembler.java",
                "+++ b/src/main/java/org/springframework/data/web/PagedResourcesAssembler.java",
                "@@ -292,6 +292,7 @@ public class PagedResourcesAssembler<T> implements ResourceAssembler<Page<T>, Pa",
                " \t */",
                "-\tprivate static <T> PageMetadata asPageMetadata(Page<T> page) {",
                "+\tprivate <T> PageMetadata asPageMetadata(Page<T> page) {",
                " \t\tAssert.notNull(page, \"Page must not be null!\");",
                "-\t\treturn new PageMetadata(page.getSize(), page.getNumber(), page.getTotalElements(), page.getTotalPages());",
                "+\t\tboolean isOneIndexedParameters = pageableResolver.isOneIndexedParameters();",
                "+\t\treturn new PageMetadata(page.getSize(), isOneIndexedParameters ? page.getNumber() + 1 : page.getNumber(), page.getTotalElements(), page.getTotalPages());",
                " \t}"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/web/PagedResourcesAssembler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "267": "When true setOneIndexedParameters still behaves as false in the links of the json response [DATACMNS-563] #1032"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "7c0ec77e40c9c5861fd36d3e5f2f6954a2208d46"
                ],
                [
                    "no-tag",
                    "da163fc9e4eb2bd33326b1fc51df467551726d7f"
                ]
            ],
            "tags": [
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.3.RELEASE",
                "2.0.4.RELEASE",
                "2.0.5.RELEASE",
                "2.0.6.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 267",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "38d39a47e9ee5fae880c69c898f037cb96b712e2",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1495294116,
            "hunks": 2,
            "message": "DATACMNS-1193 - Fixed typo in JavaDoc and reference documentation of PageableDefaults. Original pull request: #218.",
            "diff": [
                "diff --git a/src/main/asciidoc/repositories.adoc b/src/main/asciidoc/repositories.adoc",
                "index 75ec69119..cab553b6c 100644",
                "--- a/src/main/asciidoc/repositories.adoc",
                "+++ b/src/main/asciidoc/repositories.adoc",
                "@@ -938,3 +938,3 @@ you have to populate `foo_page` and `bar_page` etc.",
                "-The default `Pageable` handed into the method is equivalent to a `new PageRequest(0, 20)` but can be customized using the `@PageableDefaults` annotation on the `Pageable` parameter.",
                "+The default `Pageable` handed into the method is equivalent to a `new PageRequest(0, 20)` but can be customized using the `@PageableDefault` annotation on the `Pageable` parameter.",
                "diff --git a/src/main/java/org/springframework/data/web/PageableHandlerMethodArgumentResolver.java b/src/main/java/org/springframework/data/web/PageableHandlerMethodArgumentResolver.java",
                "index 78c127e4e..97aab148c 100644",
                "--- a/src/main/java/org/springframework/data/web/PageableHandlerMethodArgumentResolver.java",
                "+++ b/src/main/java/org/springframework/data/web/PageableHandlerMethodArgumentResolver.java",
                "@@ -91,3 +91,3 @@ public class PageableHandlerMethodArgumentResolver implements PageableArgumentRe",
                " \t * Configures the {@link Pageable} to be used as fallback in case no {@link PageableDefault} or",
                "-\t * {@link PageableDefaults} (the latter only supported in legacy mode) can be found at the method parameter to be",
                "+\t * {@link PageableDefault} (the latter only supported in legacy mode) can be found at the method parameter to be",
                " \t * resolved."
            ],
            "changed_files": [
                "src/main/asciidoc/repositories.adoc",
                "src/main/java/org/springframework/data/web/PageableHandlerMethodArgumentResolver.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "218": "Small documentation improvements [DATACMNS-1085] #1529"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "47c2a40228196ba1fc99ca9cdec8618ad3418dc6"
                ],
                [
                    "no-tag",
                    "e9b1ec73246e1966d714a3bffc2413d45ca50262"
                ],
                [
                    "no-tag",
                    "aabd9d986013d709f5999ad4180c13bf452e13ef"
                ]
            ],
            "tags": [
                "1.13.10.RELEASE",
                "1.13.11.RELEASE",
                "1.13.12.RELEASE",
                "1.13.13.RELEASE",
                "1.13.14.RELEASE",
                "1.13.15.RELEASE",
                "1.13.16.RELEASE",
                "1.13.17.RELEASE",
                "1.13.18.RELEASE",
                "1.13.19.RELEASE",
                "1.13.20.RELEASE",
                "1.13.21.RELEASE",
                "1.13.22.RELEASE",
                "1.13.23.RELEASE",
                "1.13.8.RELEASE",
                "1.13.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: reference, request",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 218",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d14133bfdcd19b96b43ac1fe4d4f0aa4ec3106b3",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1516206661,
            "hunks": 4,
            "message": "DATACMNS-1245 - Consider Kotlin metadata annotation for Kotlin class kind retrieval. We now inspect Kotlin's Metadata annotation to determine the kind of a Kotlin class. Previously we used Kotlins internal API to introspect classes. Because this API is not public and can be changed at any time we rely on Kotlins annotations as they are supposed to not change in near future. Original pull request: #269.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/util/ReflectionUtils.java b/src/main/java/org/springframework/data/util/ReflectionUtils.java",
                "index d8963b542..ecee6b1d2 100644",
                "--- a/src/main/java/org/springframework/data/util/ReflectionUtils.java",
                "+++ b/src/main/java/org/springframework/data/util/ReflectionUtils.java",
                "@@ -25,4 +25,2 @@ import kotlin.reflect.KType;",
                " import kotlin.reflect.jvm.ReflectJvmMapping;",
                "-import kotlin.reflect.jvm.internal.impl.load.kotlin.header.KotlinClassHeader.Kind;",
                "-import kotlin.reflect.jvm.internal.impl.load.kotlin.reflect.ReflectKotlinClass;",
                " import lombok.NonNull;",
                "@@ -65,2 +63,3 @@ public class ReflectionUtils {",
                " \t\t\tBeanUtils.class.getClassLoader());",
                "+\tprivate static final int KOTLIN_KIND_CLASS = 1;",
                "@@ -370,5 +369,4 @@ public class ReflectionUtils {",
                " \t/**",
                "-\t * Return {@literal true} if the specified class is a supported Kotlin class. Currently supported are only",
                "-\t * {@link Kind#CLASS regular Kotlin classes}. Other class types (synthetic, SAM, lambdas) are not supported via",
                "-\t * reflection.",
                "+\t * Return {@literal true} if the specified class is a supported Kotlin class. Currently supported are only regular",
                "+\t * Kotlin classes. Other class types (synthetic, SAM, lambdas) are not supported via reflection.",
                " \t *",
                "@@ -383,5 +381,6 @@ public class ReflectionUtils {",
                "-\t\tReflectKotlinClass kotlinClass = ReflectKotlinClass.Factory.create(type);",
                "-",
                "-\t\treturn kotlinClass == null ? false : kotlinClass.getClassHeader().getKind() == Kind.CLASS;",
                "+\t\treturn Arrays.stream(type.getDeclaredAnnotations()) //",
                "+\t\t\t\t.filter(annotation -> annotation.annotationType().getName().equals(\"kotlin.Metadata\")) //",
                "+\t\t\t\t.map(annotation -> AnnotationUtils.getValue(annotation, \"k\")) //",
                "+\t\t\t\t.anyMatch(it -> Integer.valueOf(KOTLIN_KIND_CLASS).equals(it));",
                " \t}"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/util/ReflectionUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "269": "Consider Kotlin metadata annotation for Kotlin class kind retrieval [DATACMNS-1245] #1685"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "7c61bdf2c8f283ce9ea6da07998b7894649a2f92"
                ]
            ],
            "tags": [
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.3.RELEASE",
                "2.0.4.RELEASE",
                "2.0.5.RELEASE",
                "2.0.6.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: cause, request",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 269",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c93e647eebe7e8f8072e8032de10117c982bb38a",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1514631615,
            "hunks": 4,
            "message": "DATACMNS-563 - Polishing. Removed obsolete generics. Rearranged some code for better readability. Original pull request: #267.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/web/PagedResourcesAssembler.java b/src/main/java/org/springframework/data/web/PagedResourcesAssembler.java",
                "index 89cd8468f..0b00f5309 100644",
                "--- a/src/main/java/org/springframework/data/web/PagedResourcesAssembler.java",
                "+++ b/src/main/java/org/springframework/data/web/PagedResourcesAssembler.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright 2013-2015 the original author or authors.",
                "+ * Copyright 2013-2017 the original author or authors.",
                "  *",
                "@@ -49,2 +49,3 @@ import org.springframework.web.util.UriComponentsBuilder;",
                "  * @author Nick Williams",
                "+ * @author Marcel Overdijk",
                "  */",
                "@@ -292,7 +293,9 @@ public class PagedResourcesAssembler<T> implements ResourceAssembler<Page<T>, Pa",
                " \t */",
                "-\tprivate <T> PageMetadata asPageMetadata(Page<T> page) {",
                "+\tprivate PageMetadata asPageMetadata(Page<?> page) {",
                " \t\tAssert.notNull(page, \"Page must not be null!\");",
                "-\t\tboolean isOneIndexedParameters = pageableResolver.isOneIndexedParameters();",
                "-\t\treturn new PageMetadata(page.getSize(), isOneIndexedParameters ? page.getNumber() + 1 : page.getNumber(), page.getTotalElements(), page.getTotalPages());",
                "+",
                "+\t\tint number = pageableResolver.isOneIndexedParameters() ? page.getNumber() + 1 : page.getNumber();",
                "+",
                "+\t\treturn new PageMetadata(page.getSize(), number, page.getTotalElements(), page.getTotalPages());",
                " \t}"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/web/PagedResourcesAssembler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "267": "When true setOneIndexedParameters still behaves as false in the links of the json response [DATACMNS-563] #1032"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "eb2163a29e797f6a38e188e0485a74b3ecbd7620"
                ]
            ],
            "tags": [
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.3.RELEASE",
                "2.0.4.RELEASE",
                "2.0.5.RELEASE",
                "2.0.6.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 267",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "65772eb5157f5e94a730e08ab6b869c0b8619197",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1511517227,
            "hunks": 11,
            "message": "DATACMNS-1158 - Polishing. Some code reorganization, polishing of nullable annotations, JavaDoc. Original pull request: #243. Related issue: DATAJPA-1173.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/repository/core/support/RepositoryFactorySupport.java b/src/main/java/org/springframework/data/repository/core/support/RepositoryFactorySupport.java",
                "index a27049135..20778cc8e 100644",
                "--- a/src/main/java/org/springframework/data/repository/core/support/RepositoryFactorySupport.java",
                "+++ b/src/main/java/org/springframework/data/repository/core/support/RepositoryFactorySupport.java",
                "@@ -36,3 +36,2 @@ import org.aopalliance.intercept.MethodInterceptor;",
                " import org.aopalliance.intercept.MethodInvocation;",
                "-import org.jetbrains.annotations.NotNull;",
                " import org.springframework.aop.framework.ProxyFactory;",
                "@@ -317,6 +316,5 @@ public abstract class RepositoryFactorySupport implements BeanClassLoaderAware,",
                " \t\tresult.addAdvice(new DefaultMethodInvokingMethodInterceptor());",
                "-\t\tresult.addAdvice(new QueryExecutorMethodInterceptor( //",
                "-\t\t\t\tinformation, //",
                "-\t\t\t\tgetProjectionFactory(classLoader, beanFactory) //",
                "-\t\t));",
                "+",
                "+\t\tProjectionFactory projectionFactory = getProjectionFactory(classLoader, beanFactory);",
                "+\t\tresult.addAdvice(new QueryExecutorMethodInterceptor(information, projectionFactory));",
                "@@ -328,3 +326,9 @@ public abstract class RepositoryFactorySupport implements BeanClassLoaderAware,",
                "-\t@NotNull",
                "+\t/**",
                "+\t * Returns the {@link ProjectionFactory} to be used with the repository instances created.",
                "+\t * ",
                "+\t * @param classLoader will never be {@literal null}.",
                "+\t * @param beanFactory will never be {@literal null}.",
                "+\t * @return will never be {@literal null}.",
                "+\t */",
                " \tprotected ProjectionFactory getProjectionFactory(ClassLoader classLoader, BeanFactory beanFactory) {",
                "@@ -534,5 +538,5 @@ public abstract class RepositoryFactorySupport implements BeanClassLoaderAware,",
                "-\t\t\tthis.queries = lookupStrategy.map( //",
                "-\t\t\t\t\tit -> mapMethodsToQuery(repositoryInformation, projectionFactory, it) //",
                "-\t\t\t).orElse(Collections.emptyMap());",
                "+\t\t\tthis.queries = lookupStrategy //",
                "+\t\t\t\t\t.map(it -> mapMethodsToQuery(repositoryInformation, it, projectionFactory)) //",
                "+\t\t\t\t\t.orElse(Collections.emptyMap());",
                " \t\t}",
                "@@ -540,8 +544,6 @@ public abstract class RepositoryFactorySupport implements BeanClassLoaderAware,",
                " \t\tprivate Map<Method, RepositoryQuery> mapMethodsToQuery(RepositoryInformation repositoryInformation,",
                "-\t\t\t\tProjectionFactory projectionFactory, QueryLookupStrategy lookupStrategy) {",
                "+\t\t\t\tQueryLookupStrategy lookupStrategy, ProjectionFactory projectionFactory) {",
                " \t\t\treturn repositoryInformation.getQueryMethods().stream() //",
                "-\t\t\t\t\t.map(method -> Pair.of( //",
                "-\t\t\t\t\t\t\tmethod, //",
                "-\t\t\t\t\t\t\tlookupStrategy.resolveQuery(method, repositoryInformation, projectionFactory, namedQueries))) //",
                "+\t\t\t\t\t.map(method -> lookupQuery(method, repositoryInformation, lookupStrategy, projectionFactory)) //",
                " \t\t\t\t\t.peek(pair -> invokeListeners(pair.getSecond())) //",
                "@@ -550,2 +552,7 @@ public abstract class RepositoryFactorySupport implements BeanClassLoaderAware,",
                "+\t\tprivate Pair<Method, RepositoryQuery> lookupQuery(Method method, RepositoryInformation information,",
                "+\t\t\t\tQueryLookupStrategy strategy, ProjectionFactory projectionFactory) {",
                "+\t\t\treturn Pair.of(method, strategy.resolveQuery(method, information, projectionFactory, namedQueries));",
                "+\t\t}",
                "+",
                " \t\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })",
                "@@ -582,2 +589,3 @@ public abstract class RepositoryFactorySupport implements BeanClassLoaderAware,",
                "+\t\t@Nullable",
                " \t\tprivate Object doInvoke(MethodInvocation invocation) throws Throwable {",
                "@@ -605,3 +613,2 @@ public abstract class RepositoryFactorySupport implements BeanClassLoaderAware,",
                "-",
                " \t/**",
                "diff --git a/src/main/java/org/springframework/data/util/Pair.java b/src/main/java/org/springframework/data/util/Pair.java",
                "index 602b43d29..6346b710a 100644",
                "--- a/src/main/java/org/springframework/data/util/Pair.java",
                "+++ b/src/main/java/org/springframework/data/util/Pair.java",
                "@@ -26,2 +26,3 @@ import java.util.stream.Collector;",
                " import java.util.stream.Collectors;",
                "+import java.util.stream.Stream;",
                "@@ -74,2 +75,7 @@ public final class Pair<S, T> {",
                "+\t/**",
                "+\t * A collector to create a {@link Map} from a {@link Stream} of {@link Pair}s.",
                "+\t *",
                "+\t * @return",
                "+\t */",
                " \tpublic static <S, T> Collector<Pair<S, T>, ?, Map<S, T>> toMap() {"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/repository/core/support/RepositoryFactorySupport.java",
                "src/main/java/org/springframework/data/util/Pair.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "243": "Rename PersistentProperty.getPersistentEntityType() to a plural name since it returns an Iterable. [DATACMNS-1161] #1602"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "3c96e4e079c0ba02024d43a15388d49cbf5f4614"
                ]
            ],
            "tags": [
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.2.RELEASE",
                "2.0.3.RELEASE",
                "2.0.4.RELEASE",
                "2.0.5.RELEASE",
                "2.0.6.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 243",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "634d8cbbd6c713ec7bdcb5f2a8cbfbc5a30ab634",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1507906395,
            "hunks": 5,
            "message": "DATACMNS-1197 - Resolve Kotlin interface properties for nullability inspection. We now resolve Kotlin interface properties to inspect these for nullability. Kotlin-reflect does not resolve interface property accessors yet so we need to handle this aspect ourselves. Related ticket: https://youtrack.jetbrains.com/issue/KT-20768. Original pull request: #254.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/util/ReflectionUtils.java b/src/main/java/org/springframework/data/util/ReflectionUtils.java",
                "index 36103ef86..430661857 100644",
                "--- a/src/main/java/org/springframework/data/util/ReflectionUtils.java",
                "+++ b/src/main/java/org/springframework/data/util/ReflectionUtils.java",
                "@@ -17,3 +17,8 @@ package org.springframework.data.util;",
                "+import kotlin.jvm.JvmClassMappingKt;",
                "+import kotlin.reflect.KCallable;",
                "+import kotlin.reflect.KClass;",
                " import kotlin.reflect.KFunction;",
                "+import kotlin.reflect.KMutableProperty;",
                "+import kotlin.reflect.KProperty;",
                " import kotlin.reflect.KType;",
                "@@ -404,7 +409,33 @@ public class ReflectionUtils {",
                " \t\tif (isSupportedKotlinClass(parameter.getDeclaringClass())) {",
                "+\t\t\treturn KotlinReflectionUtils.isNullable(parameter);",
                "+\t\t}",
                "+",
                "+\t\treturn !parameter.getParameterType().isPrimitive();",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Reflection utility methods specific to Kotlin reflection.",
                "+\t */",
                "+\tstatic class KotlinReflectionUtils {",
                "+",
                "+\t\t/**",
                "+\t\t * Returns {@literal} whether the given {@link MethodParameter} is nullable. Its declaring method can reference a",
                "+\t\t * Kotlin function, property or interface property.",
                "+\t\t *",
                "+\t\t * @return {@literal true} if {@link MethodParameter} is nullable.",
                "+\t\t * @since 2.0.1",
                "+\t\t */",
                "+\t\tstatic boolean isNullable(MethodParameter parameter) {",
                "-\t\t\tKFunction<?> kotlinFunction = ReflectJvmMapping.getKotlinFunction(parameter.getMethod());",
                "+\t\t\tMethod method = parameter.getMethod();",
                "+\t\t\tKFunction<?> kotlinFunction = ReflectJvmMapping.getKotlinFunction(method);",
                " \t\t\tif (kotlinFunction == null) {",
                "-\t\t\t\tthrow new IllegalArgumentException(String.format(\"Cannot resolve %s to a Kotlin function!\", parameter));",
                "+",
                "+\t\t\t\t// Fallback to own lookup because there's no public Kotlin API for that kind of lookup until",
                "+\t\t\t\t// https://youtrack.jetbrains.com/issue/KT-20768 gets resolved.",
                "+\t\t\t\tOptional<? extends KFunction> first = findKFunction(method);",
                "+",
                "+\t\t\t\tkotlinFunction = first.orElseThrow(",
                "+\t\t\t\t\t\t() -> new IllegalArgumentException(String.format(\"Cannot resolve %s to a Kotlin function!\", parameter)));",
                " \t\t\t}",
                "@@ -417,3 +448,43 @@ public class ReflectionUtils {",
                "-\t\treturn !parameter.getParameterType().isPrimitive();",
                "+\t\t/**",
                "+\t\t * Lookup a {@link Method} to a {@link KFunction}.",
                "+\t\t * ",
                "+\t\t * @param method the JVM {@link Method} to look up.",
                "+\t\t * @return {@link Optional} wrapping a possibly existing {@link KFunction}.",
                "+\t\t */",
                "+\t\tprivate static Optional<? extends KFunction> findKFunction(Method method) {",
                "+",
                "+\t\t\tKClass<?> kotlinClass = JvmClassMappingKt.getKotlinClass(method.getDeclaringClass());",
                "+",
                "+\t\t\treturn kotlinClass.getMembers() //",
                "+\t\t\t\t\t.stream() //",
                "+\t\t\t\t\t.flatMap(KotlinReflectionUtils::toKFunctionStream) //",
                "+\t\t\t\t\t.filter(it -> {",
                "+",
                "+\t\t\t\t\t\tMethod javaMethod = ReflectJvmMapping.getJavaMethod(it);",
                "+\t\t\t\t\t\treturn javaMethod != null && javaMethod.equals(method);",
                "+\t\t\t\t\t}) //",
                "+\t\t\t\t\t.findFirst();",
                "+\t\t}",
                "+",
                "+\t\tprivate static Stream<? extends KFunction> toKFunctionStream(KCallable<?> it) {",
                "+",
                "+\t\t\tif (it instanceof KMutableProperty<?>) {",
                "+",
                "+\t\t\t\tKMutableProperty property = (KMutableProperty<?>) it;",
                "+\t\t\t\treturn Stream.of(property.getGetter(), property.getSetter());",
                "+\t\t\t}",
                "+",
                "+\t\t\tif (it instanceof KProperty<?>) {",
                "+",
                "+\t\t\t\tKProperty<?> property = (KProperty<?>) it;",
                "+\t\t\t\treturn Stream.of(property.getGetter());",
                "+\t\t\t}",
                "+",
                "+\t\t\tif (it instanceof KFunction<?>) {",
                "+\t\t\t\treturn Stream.of((KFunction<?>) it);",
                "+\t\t\t}",
                "+",
                "+\t\t\treturn Stream.empty();",
                "+\t\t}",
                " \t}"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/util/ReflectionUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "254": "Adding kotlin property to (extension) interface yields IllegalArgumentException on invocation [DATACMNS-1197] #1637"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "5cf4ba2e5f47ebb7301109d28e195c04c3a0f1cd"
                ]
            ],
            "tags": [
                "2.1.0.M1",
                "2.1.0.M2",
                "2.1.0.M3",
                "2.1.0.RC1",
                "2.1.0.RC2",
                "2.1.0.RELEASE",
                "2.1.1.RELEASE",
                "2.1.10.RELEASE",
                "2.1.11.RELEASE",
                "2.1.12.RELEASE",
                "2.1.13.RELEASE",
                "2.1.14.RELEASE",
                "2.1.15.RELEASE",
                "2.1.16.RELEASE",
                "2.1.17.RELEASE",
                "2.1.18.RELEASE",
                "2.1.19.RELEASE",
                "2.1.2.RELEASE",
                "2.1.20.RELEASE",
                "2.1.21.RELEASE",
                "2.1.3.RELEASE",
                "2.1.4.RELEASE",
                "2.1.5.RELEASE",
                "2.1.6.RELEASE",
                "2.1.7.RELEASE",
                "2.1.8.RELEASE",
                "2.1.9.RELEASE",
                "2.2.0.M1",
                "2.2.0.M2",
                "2.2.0.M3",
                "2.2.0.M4",
                "2.2.0.RC1",
                "2.2.0.RC2",
                "2.2.0.RC3",
                "2.2.0.RELEASE",
                "2.2.1.RELEASE",
                "2.2.10.RELEASE",
                "2.2.11.RELEASE",
                "2.2.12.RELEASE",
                "2.2.13.RELEASE",
                "2.2.2.RELEASE",
                "2.2.3.RELEASE",
                "2.2.4.RELEASE",
                "2.2.5.RELEASE",
                "2.2.6.RELEASE",
                "2.2.7.RELEASE",
                "2.2.8.RELEASE",
                "2.2.9.RELEASE",
                "2.3.0.M1",
                "2.3.0.M2",
                "2.3.0.M3",
                "2.3.0.M4",
                "2.3.0.RC1",
                "2.3.0.RC2",
                "2.3.0.RELEASE",
                "2.3.1.RELEASE",
                "2.3.2.RELEASE",
                "2.3.3.RELEASE",
                "2.3.4.RELEASE",
                "2.3.5.RELEASE",
                "2.3.6.RELEASE",
                "2.3.7.RELEASE",
                "2.3.8.RELEASE",
                "2.3.9.RELEASE",
                "2.4.0",
                "2.4.0-M1",
                "2.4.0-M2",
                "2.4.0-RC1",
                "2.4.0-RC2",
                "2.4.1",
                "2.4.10",
                "2.4.11",
                "2.4.12",
                "2.4.13",
                "2.4.14",
                "2.4.15",
                "2.4.2",
                "2.4.3",
                "2.4.4",
                "2.4.5",
                "2.4.6",
                "2.4.7",
                "2.4.8",
                "2.4.9",
                "2.5.0",
                "2.5.0-M1",
                "2.5.0-M2",
                "2.5.0-M3",
                "2.5.0-M4",
                "2.5.0-M5",
                "2.5.0-RC1",
                "2.5.1",
                "2.5.10",
                "2.5.11",
                "2.5.12",
                "2.5.2",
                "2.5.3",
                "2.5.4",
                "2.5.5",
                "2.5.6",
                "2.5.7",
                "2.5.8",
                "2.5.9",
                "2.6.0",
                "2.6.0-M1",
                "2.6.0-M2",
                "2.6.0-M3",
                "2.6.0-RC1",
                "2.6.1",
                "2.6.10",
                "2.6.2",
                "2.6.3",
                "2.6.4",
                "2.6.5",
                "2.6.6",
                "2.6.7",
                "2.6.8",
                "2.6.9",
                "2.7.0",
                "2.7.0-M1",
                "2.7.0-M2",
                "2.7.0-M3",
                "2.7.0-M4",
                "2.7.0-RC1",
                "2.7.1",
                "2.7.10",
                "2.7.11",
                "2.7.12",
                "2.7.13",
                "2.7.14",
                "2.7.15",
                "2.7.16",
                "2.7.17",
                "2.7.18",
                "2.7.2",
                "2.7.3",
                "2.7.4",
                "2.7.5",
                "2.7.6",
                "2.7.7",
                "2.7.8",
                "2.7.9",
                "3.0.0",
                "3.0.0-M1",
                "3.0.0-M2",
                "3.0.0-M3",
                "3.0.0-M4",
                "3.0.0-M5",
                "3.0.0-M6",
                "3.0.0-RC1",
                "3.0.0-RC2",
                "3.0.1",
                "3.0.10",
                "3.0.11",
                "3.0.12",
                "3.0.2",
                "3.0.3",
                "3.0.4",
                "3.0.5",
                "3.0.6",
                "3.0.7",
                "3.0.8",
                "3.0.9",
                "3.1.0",
                "3.1.0-M1",
                "3.1.0-M2",
                "3.1.0-M3",
                "3.1.0-RC1",
                "3.1.1",
                "3.1.10",
                "3.1.11",
                "3.1.12",
                "3.1.2",
                "3.1.3",
                "3.1.4",
                "3.1.5",
                "3.1.6",
                "3.1.7",
                "3.1.8",
                "3.1.9",
                "3.2.0",
                "3.2.0-M1",
                "3.2.0-M2",
                "3.2.0-M3",
                "3.2.0-RC1",
                "3.2.1",
                "3.2.2",
                "3.2.3",
                "3.2.4",
                "3.2.5",
                "3.2.6",
                "3.2.7",
                "3.3.0",
                "3.3.0-M1",
                "3.3.0-M2",
                "3.3.0-RC1",
                "3.3.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: access, request, property",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 254",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "32536067f17d2066c86633376cf0e02864bbe7a7",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1507908718,
            "hunks": 10,
            "message": "DATACMNS-1197 - Polishing. Some cleanups in KorlinReflectionUtils. Removed compiler warnings about nullability and raw types. Original pull request: #254.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/util/ReflectionUtils.java b/src/main/java/org/springframework/data/util/ReflectionUtils.java",
                "index 430661857..d8963b542 100644",
                "--- a/src/main/java/org/springframework/data/util/ReflectionUtils.java",
                "+++ b/src/main/java/org/springframework/data/util/ReflectionUtils.java",
                "@@ -25,3 +25,2 @@ import kotlin.reflect.KType;",
                " import kotlin.reflect.jvm.ReflectJvmMapping;",
                "-import kotlin.reflect.jvm.internal.impl.load.kotlin.header.KotlinClassHeader;",
                " import kotlin.reflect.jvm.internal.impl.load.kotlin.header.KotlinClassHeader.Kind;",
                "@@ -386,9 +385,3 @@ public class ReflectionUtils {",
                "-\t\tif (kotlinClass == null) {",
                "-\t\t\treturn false;",
                "-\t\t}",
                "-",
                "-\t\tKotlinClassHeader classHeader = kotlinClass.getClassHeader();",
                "-",
                "-\t\treturn classHeader.getKind() == Kind.CLASS;",
                "+\t\treturn kotlinClass == null ? false : kotlinClass.getClassHeader().getKind() == Kind.CLASS;",
                " \t}",
                "@@ -430,2 +423,7 @@ public class ReflectionUtils {",
                " \t\t\tMethod method = parameter.getMethod();",
                "+",
                "+\t\t\tif (method == null) {",
                "+\t\t\t\tthrow new IllegalStateException(String.format(\"Cannot obtain method from parameter %s!\", parameter));",
                "+\t\t\t}",
                "+",
                " \t\t\tKFunction<?> kotlinFunction = ReflectJvmMapping.getKotlinFunction(method);",
                "@@ -436,9 +434,9 @@ public class ReflectionUtils {",
                " \t\t\t\t// https://youtrack.jetbrains.com/issue/KT-20768 gets resolved.",
                "-\t\t\t\tOptional<? extends KFunction> first = findKFunction(method);",
                "-",
                "-\t\t\t\tkotlinFunction = first.orElseThrow(",
                "-\t\t\t\t\t\t() -> new IllegalArgumentException(String.format(\"Cannot resolve %s to a Kotlin function!\", parameter)));",
                "+\t\t\t\tkotlinFunction = findKFunction(method)//",
                "+\t\t\t\t\t\t.orElseThrow(() -> new IllegalArgumentException(",
                "+\t\t\t\t\t\t\t\tString.format(\"Cannot resolve %s to a Kotlin function!\", parameter)));",
                " \t\t\t}",
                "-\t\t\tKType type = parameter.getParameterIndex() == -1 ? kotlinFunction.getReturnType()",
                "+\t\t\tKType type = parameter.getParameterIndex() == -1 //",
                "+\t\t\t\t\t? kotlinFunction.getReturnType() //",
                " \t\t\t\t\t: kotlinFunction.getParameters().get(parameter.getParameterIndex() + 1).getType();",
                "@@ -454,3 +452,3 @@ public class ReflectionUtils {",
                " \t\t */",
                "-\t\tprivate static Optional<? extends KFunction> findKFunction(Method method) {",
                "+\t\tprivate static Optional<? extends KFunction<?>> findKFunction(Method method) {",
                "@@ -461,7 +459,3 @@ public class ReflectionUtils {",
                " \t\t\t\t\t.flatMap(KotlinReflectionUtils::toKFunctionStream) //",
                "-\t\t\t\t\t.filter(it -> {",
                "-",
                "-\t\t\t\t\t\tMethod javaMethod = ReflectJvmMapping.getJavaMethod(it);",
                "-\t\t\t\t\t\treturn javaMethod != null && javaMethod.equals(method);",
                "-\t\t\t\t\t}) //",
                "+\t\t\t\t\t.filter(it -> isSame(it, method)) //",
                " \t\t\t\t\t.findFirst();",
                "@@ -469,3 +463,3 @@ public class ReflectionUtils {",
                "-\t\tprivate static Stream<? extends KFunction> toKFunctionStream(KCallable<?> it) {",
                "+\t\tprivate static Stream<? extends KFunction<?>> toKFunctionStream(KCallable<?> it) {",
                "@@ -473,3 +467,3 @@ public class ReflectionUtils {",
                "-\t\t\t\tKMutableProperty property = (KMutableProperty<?>) it;",
                "+\t\t\t\tKMutableProperty<?> property = (KMutableProperty<?>) it;",
                " \t\t\t\treturn Stream.of(property.getGetter(), property.getSetter());",
                "@@ -489,2 +483,8 @@ public class ReflectionUtils {",
                " \t\t}",
                "+",
                "+\t\tprivate static boolean isSame(KFunction<?> function, Method method) {",
                "+",
                "+\t\t\tMethod javaMethod = ReflectJvmMapping.getJavaMethod(function);",
                "+\t\t\treturn javaMethod != null && javaMethod.equals(method);",
                "+\t\t}",
                " \t}"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/util/ReflectionUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "254": "Adding kotlin property to (extension) interface yields IllegalArgumentException on invocation [DATACMNS-1197] #1637"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "d1fc97ea75c887a03cac05b558c758508674a32e"
                ]
            ],
            "tags": [
                "2.1.0.M1",
                "2.1.0.M2",
                "2.1.0.M3",
                "2.1.0.RC1",
                "2.1.0.RC2",
                "2.1.0.RELEASE",
                "2.1.1.RELEASE",
                "2.1.10.RELEASE",
                "2.1.11.RELEASE",
                "2.1.12.RELEASE",
                "2.1.13.RELEASE",
                "2.1.14.RELEASE",
                "2.1.15.RELEASE",
                "2.1.16.RELEASE",
                "2.1.17.RELEASE",
                "2.1.18.RELEASE",
                "2.1.19.RELEASE",
                "2.1.2.RELEASE",
                "2.1.20.RELEASE",
                "2.1.21.RELEASE",
                "2.1.3.RELEASE",
                "2.1.4.RELEASE",
                "2.1.5.RELEASE",
                "2.1.6.RELEASE",
                "2.1.7.RELEASE",
                "2.1.8.RELEASE",
                "2.1.9.RELEASE",
                "2.2.0.M1",
                "2.2.0.M2",
                "2.2.0.M3",
                "2.2.0.M4",
                "2.2.0.RC1",
                "2.2.0.RC2",
                "2.2.0.RC3",
                "2.2.0.RELEASE",
                "2.2.1.RELEASE",
                "2.2.10.RELEASE",
                "2.2.11.RELEASE",
                "2.2.12.RELEASE",
                "2.2.13.RELEASE",
                "2.2.2.RELEASE",
                "2.2.3.RELEASE",
                "2.2.4.RELEASE",
                "2.2.5.RELEASE",
                "2.2.6.RELEASE",
                "2.2.7.RELEASE",
                "2.2.8.RELEASE",
                "2.2.9.RELEASE",
                "2.3.0.M1",
                "2.3.0.M2",
                "2.3.0.M3",
                "2.3.0.M4",
                "2.3.0.RC1",
                "2.3.0.RC2",
                "2.3.0.RELEASE",
                "2.3.1.RELEASE",
                "2.3.2.RELEASE",
                "2.3.3.RELEASE",
                "2.3.4.RELEASE",
                "2.3.5.RELEASE",
                "2.3.6.RELEASE",
                "2.3.7.RELEASE",
                "2.3.8.RELEASE",
                "2.3.9.RELEASE",
                "2.4.0",
                "2.4.0-M1",
                "2.4.0-M2",
                "2.4.0-RC1",
                "2.4.0-RC2",
                "2.4.1",
                "2.4.10",
                "2.4.11",
                "2.4.12",
                "2.4.13",
                "2.4.14",
                "2.4.15",
                "2.4.2",
                "2.4.3",
                "2.4.4",
                "2.4.5",
                "2.4.6",
                "2.4.7",
                "2.4.8",
                "2.4.9",
                "2.5.0",
                "2.5.0-M1",
                "2.5.0-M2",
                "2.5.0-M3",
                "2.5.0-M4",
                "2.5.0-M5",
                "2.5.0-RC1",
                "2.5.1",
                "2.5.10",
                "2.5.11",
                "2.5.12",
                "2.5.2",
                "2.5.3",
                "2.5.4",
                "2.5.5",
                "2.5.6",
                "2.5.7",
                "2.5.8",
                "2.5.9",
                "2.6.0",
                "2.6.0-M1",
                "2.6.0-M2",
                "2.6.0-M3",
                "2.6.0-RC1",
                "2.6.1",
                "2.6.10",
                "2.6.2",
                "2.6.3",
                "2.6.4",
                "2.6.5",
                "2.6.6",
                "2.6.7",
                "2.6.8",
                "2.6.9",
                "2.7.0",
                "2.7.0-M1",
                "2.7.0-M2",
                "2.7.0-M3",
                "2.7.0-M4",
                "2.7.0-RC1",
                "2.7.1",
                "2.7.10",
                "2.7.11",
                "2.7.12",
                "2.7.13",
                "2.7.14",
                "2.7.15",
                "2.7.16",
                "2.7.17",
                "2.7.18",
                "2.7.2",
                "2.7.3",
                "2.7.4",
                "2.7.5",
                "2.7.6",
                "2.7.7",
                "2.7.8",
                "2.7.9",
                "3.0.0",
                "3.0.0-M1",
                "3.0.0-M2",
                "3.0.0-M3",
                "3.0.0-M4",
                "3.0.0-M5",
                "3.0.0-M6",
                "3.0.0-RC1",
                "3.0.0-RC2",
                "3.0.1",
                "3.0.10",
                "3.0.11",
                "3.0.12",
                "3.0.2",
                "3.0.3",
                "3.0.4",
                "3.0.5",
                "3.0.6",
                "3.0.7",
                "3.0.8",
                "3.0.9",
                "3.1.0",
                "3.1.0-M1",
                "3.1.0-M2",
                "3.1.0-M3",
                "3.1.0-RC1",
                "3.1.1",
                "3.1.10",
                "3.1.11",
                "3.1.12",
                "3.1.2",
                "3.1.3",
                "3.1.4",
                "3.1.5",
                "3.1.6",
                "3.1.7",
                "3.1.8",
                "3.1.9",
                "3.2.0",
                "3.2.0-M1",
                "3.2.0-M2",
                "3.2.0-M3",
                "3.2.0-RC1",
                "3.2.1",
                "3.2.2",
                "3.2.3",
                "3.2.4",
                "3.2.5",
                "3.2.6",
                "3.2.7",
                "3.3.0",
                "3.3.0-M1",
                "3.3.0-M2",
                "3.3.0-RC1",
                "3.3.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 254",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b3e1601bc65ff9c9fc47db5cd87e662d00b5f35b",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1508408700,
            "hunks": 1,
            "message": "DATACMNS-1198 - Added PropertyPath.getLeafType() to expose leaf-property type.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/mapping/PropertyPath.java b/src/main/java/org/springframework/data/mapping/PropertyPath.java",
                "index 920488699..7596792ed 100644",
                "--- a/src/main/java/org/springframework/data/mapping/PropertyPath.java",
                "+++ b/src/main/java/org/springframework/data/mapping/PropertyPath.java",
                "@@ -134,2 +134,11 @@ public class PropertyPath implements Streamable<PropertyPath> {",
                "+\t/**",
                "+\t * Returns the type of the leaf property of the current {@link PropertyPath}.",
                "+\t * ",
                "+\t * @return will never be {@literal null}.",
                "+\t */",
                "+\tpublic Class<?> getLeafType() {",
                "+\t\treturn getLeafProperty().getType();",
                "+\t}",
                "+",
                " \t/**"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/mapping/PropertyPath.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.1.0.M1",
                "2.1.0.M2",
                "2.1.0.M3",
                "2.1.0.RC1",
                "2.1.0.RC2",
                "2.1.0.RELEASE",
                "2.1.1.RELEASE",
                "2.1.10.RELEASE",
                "2.1.11.RELEASE",
                "2.1.12.RELEASE",
                "2.1.13.RELEASE",
                "2.1.14.RELEASE",
                "2.1.15.RELEASE",
                "2.1.16.RELEASE",
                "2.1.17.RELEASE",
                "2.1.18.RELEASE",
                "2.1.19.RELEASE",
                "2.1.2.RELEASE",
                "2.1.20.RELEASE",
                "2.1.21.RELEASE",
                "2.1.3.RELEASE",
                "2.1.4.RELEASE",
                "2.1.5.RELEASE",
                "2.1.6.RELEASE",
                "2.1.7.RELEASE",
                "2.1.8.RELEASE",
                "2.1.9.RELEASE",
                "2.2.0.M1",
                "2.2.0.M2",
                "2.2.0.M3",
                "2.2.0.M4",
                "2.2.0.RC1",
                "2.2.0.RC2",
                "2.2.0.RC3",
                "2.2.0.RELEASE",
                "2.2.1.RELEASE",
                "2.2.10.RELEASE",
                "2.2.11.RELEASE",
                "2.2.12.RELEASE",
                "2.2.13.RELEASE",
                "2.2.2.RELEASE",
                "2.2.3.RELEASE",
                "2.2.4.RELEASE",
                "2.2.5.RELEASE",
                "2.2.6.RELEASE",
                "2.2.7.RELEASE",
                "2.2.8.RELEASE",
                "2.2.9.RELEASE",
                "2.3.0.M1",
                "2.3.0.M2",
                "2.3.0.M3",
                "2.3.0.M4",
                "2.3.0.RC1",
                "2.3.0.RC2",
                "2.3.0.RELEASE",
                "2.3.1.RELEASE",
                "2.3.2.RELEASE",
                "2.3.3.RELEASE",
                "2.3.4.RELEASE",
                "2.3.5.RELEASE",
                "2.3.6.RELEASE",
                "2.3.7.RELEASE",
                "2.3.8.RELEASE",
                "2.3.9.RELEASE",
                "2.4.0",
                "2.4.0-M1",
                "2.4.0-M2",
                "2.4.0-RC1",
                "2.4.0-RC2",
                "2.4.1",
                "2.4.10",
                "2.4.11",
                "2.4.12",
                "2.4.13",
                "2.4.14",
                "2.4.15",
                "2.4.2",
                "2.4.3",
                "2.4.4",
                "2.4.5",
                "2.4.6",
                "2.4.7",
                "2.4.8",
                "2.4.9",
                "2.5.0",
                "2.5.0-M1",
                "2.5.0-M2",
                "2.5.0-M3",
                "2.5.0-M4",
                "2.5.0-M5",
                "2.5.0-RC1",
                "2.5.1",
                "2.5.10",
                "2.5.11",
                "2.5.12",
                "2.5.2",
                "2.5.3",
                "2.5.4",
                "2.5.5",
                "2.5.6",
                "2.5.7",
                "2.5.8",
                "2.5.9",
                "2.6.0",
                "2.6.0-M1",
                "2.6.0-M2",
                "2.6.0-M3",
                "2.6.0-RC1",
                "2.6.1",
                "2.6.10",
                "2.6.2",
                "2.6.3",
                "2.6.4",
                "2.6.5",
                "2.6.6",
                "2.6.7",
                "2.6.8",
                "2.6.9",
                "2.7.0",
                "2.7.0-M1",
                "2.7.0-M2",
                "2.7.0-M3",
                "2.7.0-M4",
                "2.7.0-RC1",
                "2.7.1",
                "2.7.10",
                "2.7.11",
                "2.7.12",
                "2.7.13",
                "2.7.14",
                "2.7.15",
                "2.7.16",
                "2.7.17",
                "2.7.18",
                "2.7.2",
                "2.7.3",
                "2.7.4",
                "2.7.5",
                "2.7.6",
                "2.7.7",
                "2.7.8",
                "2.7.9",
                "3.0.0",
                "3.0.0-M1",
                "3.0.0-M2",
                "3.0.0-M3",
                "3.0.0-M4",
                "3.0.0-M5",
                "3.0.0-M6",
                "3.0.0-RC1",
                "3.0.0-RC2",
                "3.0.1",
                "3.0.10",
                "3.0.11",
                "3.0.12",
                "3.0.2",
                "3.0.3",
                "3.0.4",
                "3.0.5",
                "3.0.6",
                "3.0.7",
                "3.0.8",
                "3.0.9",
                "3.1.0",
                "3.1.0-M1",
                "3.1.0-M2",
                "3.1.0-M3",
                "3.1.0-RC1",
                "3.1.1",
                "3.1.10",
                "3.1.11",
                "3.1.12",
                "3.1.2",
                "3.1.3",
                "3.1.4",
                "3.1.5",
                "3.1.6",
                "3.1.7",
                "3.1.8",
                "3.1.9",
                "3.2.0",
                "3.2.0-M1",
                "3.2.0-M2",
                "3.2.0-M3",
                "3.2.0-RC1",
                "3.2.1",
                "3.2.2",
                "3.2.3",
                "3.2.4",
                "3.2.5",
                "3.2.6",
                "3.2.7",
                "3.3.0",
                "3.3.0-M1",
                "3.3.0-M2",
                "3.3.0-RC1",
                "3.3.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: property",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: property",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "58b0cc9c0a6b6049fe7c4b9dd74544e43f531efa",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1515658114,
            "hunks": 3,
            "message": "DATACMNS-1243 - Add converters from LocalDateTime to Instant and back. This allows usage of Instant for AuditAware. Original pull request: #268.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/convert/Jsr310Converters.java b/src/main/java/org/springframework/data/convert/Jsr310Converters.java",
                "index 4137e3e5a..0f1c92d5d 100644",
                "--- a/src/main/java/org/springframework/data/convert/Jsr310Converters.java",
                "+++ b/src/main/java/org/springframework/data/convert/Jsr310Converters.java",
                "@@ -28,2 +28,3 @@ import java.time.Period;",
                " import java.time.ZoneId;",
                "+import java.time.ZoneOffset;",
                " import java.util.ArrayList;",
                "@@ -72,2 +73,4 @@ public abstract class Jsr310Converters {",
                " \t\tconverters.add(InstantToDateConverter.INSTANCE);",
                "+\t\tconverters.add(LocalDateTimeToInstantConverter.INSTANCE);",
                "+\t\tconverters.add(InstantToLocalDateTimeConverter.INSTANCE);",
                " \t\tconverters.add(ZoneIdToStringConverter.INSTANCE);",
                "@@ -180,2 +183,24 @@ public abstract class Jsr310Converters {",
                "+\tpublic static enum LocalDateTimeToInstantConverter implements Converter<LocalDateTime, Instant> {",
                "+",
                "+\t\tINSTANCE;",
                "+",
                "+\t\t@Nonnull",
                "+\t\t@Override",
                "+\t\tpublic Instant convert(LocalDateTime source) {",
                "+\t\t\treturn source.atZone(systemDefault()).toInstant();",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tpublic static enum InstantToLocalDateTimeConverter implements Converter<Instant, LocalDateTime> {",
                "+",
                "+\t\tINSTANCE;",
                "+",
                "+\t\t@Nonnull",
                "+\t\t@Override",
                "+\t\tpublic LocalDateTime convert(Instant source) {",
                "+\t\t\treturn LocalDateTime.ofInstant(source, systemDefault());",
                "+\t\t}",
                "+\t}",
                "+",
                " \t@WritingConverter"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/convert/Jsr310Converters.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "268": "Add converters Instant <-> LocalDateTime [DATACMNS-1243] #1682"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "0e9f150fa8d1b426986630fcbc063b91b19ca276"
                ],
                [
                    "no-tag",
                    "63577569bda1919c92f39aeabe08e52fbf83a0bf"
                ]
            ],
            "tags": [
                "2.1.0.M1",
                "2.1.0.M2",
                "2.1.0.M3",
                "2.1.0.RC1",
                "2.1.0.RC2",
                "2.1.0.RELEASE",
                "2.1.1.RELEASE",
                "2.1.10.RELEASE",
                "2.1.11.RELEASE",
                "2.1.12.RELEASE",
                "2.1.13.RELEASE",
                "2.1.14.RELEASE",
                "2.1.15.RELEASE",
                "2.1.16.RELEASE",
                "2.1.17.RELEASE",
                "2.1.18.RELEASE",
                "2.1.19.RELEASE",
                "2.1.2.RELEASE",
                "2.1.20.RELEASE",
                "2.1.21.RELEASE",
                "2.1.3.RELEASE",
                "2.1.4.RELEASE",
                "2.1.5.RELEASE",
                "2.1.6.RELEASE",
                "2.1.7.RELEASE",
                "2.1.8.RELEASE",
                "2.1.9.RELEASE",
                "2.2.0.M1",
                "2.2.0.M2",
                "2.2.0.M3",
                "2.2.0.M4",
                "2.2.0.RC1",
                "2.2.0.RC2",
                "2.2.0.RC3",
                "2.2.0.RELEASE",
                "2.2.1.RELEASE",
                "2.2.10.RELEASE",
                "2.2.11.RELEASE",
                "2.2.12.RELEASE",
                "2.2.13.RELEASE",
                "2.2.2.RELEASE",
                "2.2.3.RELEASE",
                "2.2.4.RELEASE",
                "2.2.5.RELEASE",
                "2.2.6.RELEASE",
                "2.2.7.RELEASE",
                "2.2.8.RELEASE",
                "2.2.9.RELEASE",
                "2.3.0.M1",
                "2.3.0.M2",
                "2.3.0.M3",
                "2.3.0.M4",
                "2.3.0.RC1",
                "2.3.0.RC2",
                "2.3.0.RELEASE",
                "2.3.1.RELEASE",
                "2.3.2.RELEASE",
                "2.3.3.RELEASE",
                "2.3.4.RELEASE",
                "2.3.5.RELEASE",
                "2.3.6.RELEASE",
                "2.3.7.RELEASE",
                "2.3.8.RELEASE",
                "2.3.9.RELEASE",
                "2.4.0",
                "2.4.0-M1",
                "2.4.0-M2",
                "2.4.0-RC1",
                "2.4.0-RC2",
                "2.4.1",
                "2.4.10",
                "2.4.11",
                "2.4.12",
                "2.4.13",
                "2.4.14",
                "2.4.15",
                "2.4.2",
                "2.4.3",
                "2.4.4",
                "2.4.5",
                "2.4.6",
                "2.4.7",
                "2.4.8",
                "2.4.9",
                "2.5.0",
                "2.5.0-M1",
                "2.5.0-M2",
                "2.5.0-M3",
                "2.5.0-M4",
                "2.5.0-M5",
                "2.5.0-RC1",
                "2.5.1",
                "2.5.10",
                "2.5.11",
                "2.5.12",
                "2.5.2",
                "2.5.3",
                "2.5.4",
                "2.5.5",
                "2.5.6",
                "2.5.7",
                "2.5.8",
                "2.5.9",
                "2.6.0",
                "2.6.0-M1",
                "2.6.0-M2",
                "2.6.0-M3",
                "2.6.0-RC1",
                "2.6.1",
                "2.6.10",
                "2.6.2",
                "2.6.3",
                "2.6.4",
                "2.6.5",
                "2.6.6",
                "2.6.7",
                "2.6.8",
                "2.6.9",
                "2.7.0",
                "2.7.0-M1",
                "2.7.0-M2",
                "2.7.0-M3",
                "2.7.0-M4",
                "2.7.0-RC1",
                "2.7.1",
                "2.7.10",
                "2.7.11",
                "2.7.12",
                "2.7.13",
                "2.7.14",
                "2.7.15",
                "2.7.16",
                "2.7.17",
                "2.7.18",
                "2.7.2",
                "2.7.3",
                "2.7.4",
                "2.7.5",
                "2.7.6",
                "2.7.7",
                "2.7.8",
                "2.7.9",
                "3.0.0",
                "3.0.0-M1",
                "3.0.0-M2",
                "3.0.0-M3",
                "3.0.0-M4",
                "3.0.0-M5",
                "3.0.0-M6",
                "3.0.0-RC1",
                "3.0.0-RC2",
                "3.0.1",
                "3.0.10",
                "3.0.11",
                "3.0.12",
                "3.0.2",
                "3.0.3",
                "3.0.4",
                "3.0.5",
                "3.0.6",
                "3.0.7",
                "3.0.8",
                "3.0.9",
                "3.1.0",
                "3.1.0-M1",
                "3.1.0-M2",
                "3.1.0-M3",
                "3.1.0-RC1",
                "3.1.1",
                "3.1.10",
                "3.1.11",
                "3.1.12",
                "3.1.2",
                "3.1.3",
                "3.1.4",
                "3.1.5",
                "3.1.6",
                "3.1.7",
                "3.1.8",
                "3.1.9",
                "3.2.0",
                "3.2.0-M1",
                "3.2.0-M2",
                "3.2.0-M3",
                "3.2.0-RC1",
                "3.2.1",
                "3.2.2",
                "3.2.3",
                "3.2.4",
                "3.2.5",
                "3.2.6",
                "3.2.7",
                "3.3.0",
                "3.3.0-M1",
                "3.3.0-M2",
                "3.3.0-RC1",
                "3.3.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 268",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "69562532a6a078f4293d9e197778ed8fed7b0950",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1507729088,
            "hunks": 13,
            "message": "DATACMNS-1190 - Polishing the polishing. Slight rewording. Extracted path to Spring Framework JavaDoc into variable. Original pull request: #253.",
            "diff": [
                "diff --git a/src/main/asciidoc/repositories.adoc b/src/main/asciidoc/repositories.adoc",
                "index 1af4f9a7c..1ff2e847e 100644",
                "--- a/src/main/asciidoc/repositories.adoc",
                "+++ b/src/main/asciidoc/repositories.adoc",
                "@@ -1,2 +1,3 @@",
                "-:spring-framework-docs: http://docs.spring.io/spring/docs/{springVersion}/spring-framework-reference/",
                "+:spring-framework-docs: http://docs.spring.io/spring/docs/{springVersion}/spring-framework-reference",
                "+:spring-framework-javadoc: https://docs.spring.io/spring/docs/{springVersion}/javadoc-api",
                "@@ -229,3 +230,4 @@ Alternatively query methods can choose not to use a wrapper type at all.",
                " The absence of a query result will then be indicated by returning `null`.",
                "-Repository methods returning collections, wrappers, and streams are guaranteed never to return `null` but rather the corresponding empty representation.",
                "+Repository methods returning collections, collection alternatives, wrappers, and streams are guaranteed never to return `null` but rather the corresponding empty representation.",
                "+See <<repository-query-return-types>> for details.",
                "@@ -234,17 +236,11 @@ Repository methods returning collections, wrappers, and streams are guaranteed n",
                "-You can express null-safe repository methods by using link:{spring-framework-docs}core.html#null-safety[Spring Framework's annotations].",
                "-They provide a tooling-friendly approach and opt-in for `null` checks during runtime:",
                "+You can express nullability constraints for repository methods using link:{spring-framework-docs}/core.html#null-safety[Spring Framework's nullability annotations].",
                "+They provide a tooling-friendly approach and opt-in `null` checks during runtime:",
                "-* https://docs.spring.io/spring-framework/docs/{springVersion}/javadoc-api/org/springframework/lang/NonNull.html[`@NonNull`]",
                "- annotation where a specific parameter or return value cannot be `null`",
                "+* {spring-framework-javadoc}/org/springframework/lang/NonNullApi.html[`@NonNullApi`] \u00e2\u0080\u0093 to be used on the package level to declare that the default behavior for parameters and return values is to not accept or produce `null` values.",
                "+* {spring-framework-javadoc}/org/springframework/lang/NonNull.html[`@NonNull`] \u00e2\u0080\u0093 to be used on a parameter or return value that must not be `null`",
                "  (not needed on parameter and return value where `@NonNullApi` applies).",
                "-",
                "-* https://docs.spring.io/spring-framework/docs/{springVersion}/javadoc-api/org/springframework/lang/Nullable.html[`@Nullable`]",
                "- annotation where a specific parameter or return value can be `null`.",
                "-",
                "-* https://docs.spring.io/spring-framework/docs/{springVersion}/javadoc-api/org/springframework/lang/NonNullApi.html[`@NonNullApi`]",
                "- annotation at package level declares non-null as the default behavior for parameters and return values.",
                "+* {spring-framework-javadoc}/org/springframework/lang/Nullable.html[`@Nullable`] \u00e2\u0080\u0093 to be used on a parameter or return value that can be `null`.",
                " Spring annotations are meta-annotated with https://jcp.org/en/jsr/detail?id=305[JSR 305] annotations (a dormant but widely spread JSR). JSR 305 meta-annotations allow tooling vendors like https://www.jetbrains.com/help/idea/nullable-and-notnull-annotations.html[IDEA], http://help.eclipse.org/oxygen/index.jsp?topic=/org.eclipse.jdt.doc.user/tasks/task-using_external_null_annotations.htm[Eclipse], or link:https://kotlinlang.org/docs/reference/java-interop.html#null-safety-and-platform-types[Kotlin] to provide null-safety support in a generic way, without having to hard-code support for Spring annotations.",
                "-",
                " To enable runtime checking of nullability constraints for query methods, you need to activate non-nullability on package level using Spring\u00e2\u0080\u0099s `@NonNullApi` in `package-info.java`:",
                "@@ -262,4 +258,3 @@ Once non-null defaulting is in place, repository query method invocations will g",
                " Exceptions will be thrown in case a query execution result violates the defined constraint, i.e. the method would return `null` for some reason but is declared as non-nullable (the default with the annotation defined on the package the repository resides in).",
                "-If you want to opt-in to nullable results again, use selectively `@Nullable` on a method.",
                "-",
                "+If you want to opt-in to nullable results again, selectively use `@Nullable` that a method.",
                " Using the aforementioned result wrapper types will continue to work as expected, i.e. an empty result will be translated into the value representing absence.",
                "@@ -270,3 +265,3 @@ Using the aforementioned result wrapper types will continue to work as expected,",
                " ----",
                "-package com.acme;",
                "+package com.acme;                                                       <1>",
                "@@ -276,13 +271,14 @@ interface UserRepository extends Repository<User, Long> {",
                "-  User getByEmailAddress(EmailAddress emailAddress);                    <1>",
                "+  User getByEmailAddress(EmailAddress emailAddress);                    <2>",
                "   @Nullable",
                "-  User findByEmailAddess(@Nullable EmailAddress emailAdress);           <2>",
                "+  User findByEmailAddress(@Nullable EmailAddress emailAdress);          <3>",
                "-  Optional<User> findOptionalByEmailAddress(EmailAddress emailAddress); <3>",
                "+  Optional<User> findOptionalByEmailAddress(EmailAddress emailAddress); <4>",
                " }",
                " ----",
                "-<1> Will throw an `EmptyResultDataAccessException` in case the query executed does not produce a result. Will throw an `IllegalArgumentException` in case the `emailAddress` handed to the method is `null`.",
                "-<2> Will return `null` in case the query executed does not produce a result. Also accepts `null` as value for `emailAddress`.",
                "-<3> Will return `Optional.empty()` in case the query executed does not produce a result. Will throw an `IllegalArgumentException` in case the `emailAddress` handed to the method is `null`.",
                "+<1> The repository resides in a package (or sub-package) for which we've defined non-null behavior (see above).",
                "+<2> Will throw an `EmptyResultDataAccessException` in case the query executed does not produce a result. Will throw an `IllegalArgumentException` in case the `emailAddress` handed to the method is `null`.",
                "+<3> Will return `null` in case the query executed does not produce a result. Also accepts `null` as value for `emailAddress`.",
                "+<4> Will return `Optional.empty()` in case the query executed does not produce a result. Will throw an `IllegalArgumentException` in case the `emailAddress` handed to the method is `null`.",
                " ====",
                "@@ -294,3 +290,3 @@ Kotlin has the definition of https://kotlinlang.org/docs/reference/null-safety.h",
                "  baked into the language.",
                "-Kotlin code compiles to bytecode which does not express nullability constraints using method signatures but rather compiled-in metadata. Make sure to include `kotlin-reflect` to enable introspection of Kotlin's nullability constraints.",
                "+Kotlin code compiles to bytecode which does not express nullability constraints using method signatures but rather compiled-in metadata. Make sure to include the `kotlin-reflect` JAR in your project to enable introspection of Kotlin's nullability constraints.",
                " Spring Data repositories use the language mechanism to define those constraints to apply the same runtime checks:",
                "@@ -303,5 +299,5 @@ interface UserRepository : Repository<User, String> {",
                "-  fun findByUsername(username: String): User         <1>",
                "+  fun findByUsername(username: String): User     <1>",
                "-  fun findByFirstname(firstname: String?): User?     <2>",
                "+  fun findByFirstname(firstname: String?): User? <2>",
                " }",
                "@@ -584,3 +580,3 @@ NOTE: Not all Spring Data modules currently support `Stream<T>` as a return type",
                "-Repository queries can be executed asynchronously using link:{spring-framework-docs}integration.html#scheduling[Spring's asynchronous method execution capability]. This means the method will return immediately upon invocation and the actual query execution will occur in a task that has been submitted to a Spring TaskExecutor.",
                "+Repository queries can be executed asynchronously using link:{spring-framework-docs}/integration.html#scheduling[Spring's asynchronous method execution capability]. This means the method will return immediately upon invocation and the actual query execution will occur in a task that has been submitted to a Spring TaskExecutor."
            ],
            "changed_files": [
                "src/main/asciidoc/repositories.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "253": "Add documentation section about ways to enforce nullability constraints in repositories [DATACMNS-1190] #1630"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "bddeba77e72bf274cea2aa68badb51088a3b348c"
                ]
            ],
            "tags": [
                "2.0.1.RELEASE",
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.2.RELEASE",
                "2.0.3.RELEASE",
                "2.0.4.RELEASE",
                "2.0.5.RELEASE",
                "2.0.6.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 253",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "875cb11db168f85fb9855779036130377052923e",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1510649797,
            "hunks": 1,
            "message": "DATACMNS-1208 - AbstractMappingContext.hasPersistentEntityFor(\u00e2\u0080\u00a6) now properly considers cached absence. AbstractMappingContext.hasPersistentEntityFor(\u00e2\u0080\u00a6) now also properly consideres the empty Optional as non-presence as that is held to allow to distinguish between a type completely unkown to the context, or already known but not considered a persistent entity. Related pull request: #258.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/mapping/context/AbstractMappingContext.java b/src/main/java/org/springframework/data/mapping/context/AbstractMappingContext.java",
                "index 0d3a6504c..c0906df35 100644",
                "--- a/src/main/java/org/springframework/data/mapping/context/AbstractMappingContext.java",
                "+++ b/src/main/java/org/springframework/data/mapping/context/AbstractMappingContext.java",
                "@@ -183,3 +183,5 @@ public abstract class AbstractMappingContext<E extends MutablePersistentEntity<?",
                "-\t\treturn persistentEntities.containsKey(ClassTypeInformation.from(type));",
                "+\t\tOptional<E> entity = persistentEntities.get(ClassTypeInformation.from(type));",
                "+",
                "+\t\treturn entity == null ? false : entity.isPresent();",
                " \t}"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/mapping/context/AbstractMappingContext.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "258": "AbstractMappingContext.hasPersistentEntity(\u2026) does not consider cached abscence [DATACMNS-1208] #1647"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "d8cea8ba1cb76e45b323773f44dd66d9da98e3f2"
                ]
            ],
            "tags": [
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.2.RELEASE",
                "2.0.3.RELEASE",
                "2.0.4.RELEASE",
                "2.0.5.RELEASE",
                "2.0.6.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: entity, request",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 258",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e1f1e9c2dbe873c553466c11bdb8ee3d991c61e3",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1507713171,
            "hunks": 13,
            "message": "DATACMNS-1190 - Polishing. Remove existing section on Null-safety. Augment Null handling section with bits of the previous documentation, explicitly describe annotations expressing null-constraints, include full-qualified imports, mention kotlin-reflect dependency for Kotlin metadata introspection. Align callouts, add links, slightly improve wording, typos. Extend year range in copyright header. Original pull request: #253.",
            "diff": [
                "diff --git a/src/main/asciidoc/index.adoc b/src/main/asciidoc/index.adoc",
                "index 4e83ef265..7394c9508 100644",
                "--- a/src/main/asciidoc/index.adoc",
                "+++ b/src/main/asciidoc/index.adoc",
                "@@ -1,3 +1,3 @@",
                " = Spring Data Commons - Reference Documentation",
                "-Oliver Gierke; Thomas Darimont; Christoph Strobl; Mark Pollack; Thomas Risberg;",
                "+Oliver Gierke; Thomas Darimont; Christoph Strobl; Mark Pollack; Thomas Risberg; Mark Paluch;",
                " :revnumber: {version}",
                "@@ -7,3 +7,3 @@ Oliver Gierke; Thomas Darimont; Christoph Strobl; Mark Pollack; Thomas Risberg;",
                "-(C) 2008-2015 The original authors.",
                "+(C) 2008-2017 The original authors.",
                "diff --git a/src/main/asciidoc/repositories.adoc b/src/main/asciidoc/repositories.adoc",
                "index 47df8416c..1af4f9a7c 100644",
                "--- a/src/main/asciidoc/repositories.adoc",
                "+++ b/src/main/asciidoc/repositories.adoc",
                "@@ -229,3 +229,3 @@ Alternatively query methods can choose not to use a wrapper type at all.",
                " The absence of a query result will then be indicated by returning `null`.",
                "-Repository methods returning collection like values will never return null but an empty value.",
                "+Repository methods returning collections, wrappers, and streams are guaranteed never to return `null` but rather the corresponding empty representation.",
                "@@ -234,6 +234,20 @@ Repository methods returning collection like values will never return null but a",
                "-To properly validate nullability constraints on a repository method at runtime, annotations can be defined to define whether query methods are supposed to return `null`.",
                "-To enable this, non-nullability needs to be activated on the package level, e.g. using Spring's `@NonNullApi` in `package-info.java`:",
                "+You can express null-safe repository methods by using link:{spring-framework-docs}core.html#null-safety[Spring Framework's annotations].",
                "+They provide a tooling-friendly approach and opt-in for `null` checks during runtime:",
                "-.Declaring non-nullablity in `package-info.java`",
                "+* https://docs.spring.io/spring-framework/docs/{springVersion}/javadoc-api/org/springframework/lang/NonNull.html[`@NonNull`]",
                "+ annotation where a specific parameter or return value cannot be `null`",
                "+ (not needed on parameter and return value where `@NonNullApi` applies).",
                "+",
                "+* https://docs.spring.io/spring-framework/docs/{springVersion}/javadoc-api/org/springframework/lang/Nullable.html[`@Nullable`]",
                "+ annotation where a specific parameter or return value can be `null`.",
                "+",
                "+* https://docs.spring.io/spring-framework/docs/{springVersion}/javadoc-api/org/springframework/lang/NonNullApi.html[`@NonNullApi`]",
                "+ annotation at package level declares non-null as the default behavior for parameters and return values.",
                "+",
                "+Spring annotations are meta-annotated with https://jcp.org/en/jsr/detail?id=305[JSR 305] annotations (a dormant but widely spread JSR). JSR 305 meta-annotations allow tooling vendors like https://www.jetbrains.com/help/idea/nullable-and-notnull-annotations.html[IDEA], http://help.eclipse.org/oxygen/index.jsp?topic=/org.eclipse.jdt.doc.user/tasks/task-using_external_null_annotations.htm[Eclipse], or link:https://kotlinlang.org/docs/reference/java-interop.html#null-safety-and-platform-types[Kotlin] to provide null-safety support in a generic way, without having to hard-code support for Spring annotations.",
                "+",
                "+To enable runtime checking of nullability constraints for query methods, you need to activate non-nullability on package level using Spring\u00e2\u0080\u0099s `@NonNullApi` in `package-info.java`:",
                "+",
                "+.Declaring non-nullability in `package-info.java`",
                " ====",
                "@@ -241,3 +255,3 @@ To enable this, non-nullability needs to be activated on the package level, e.g.",
                " ----",
                "-@NonNullApi",
                "+@org.springframework.lang.NonNullApi",
                " package com.acme;",
                "@@ -246,4 +260,6 @@ package com.acme;",
                "-Once that is in place, repository query method will get runtime execution validation of the nullability constraints and exceptions will be thrown in case a query execution result violates the defined constrained, i.e. the method would return `null` for some reason but is declared as non-nullable (the default with the annotation defined on the package the repository resides in).",
                "-If you want to opt-in to nullable results again, e.g. `@Nullable` can be used on a method selectively.",
                "+Once non-null defaulting is in place, repository query method invocations will get validated at runtime for nullability constraints.",
                "+Exceptions will be thrown in case a query execution result violates the defined constraint, i.e. the method would return `null` for some reason but is declared as non-nullable (the default with the annotation defined on the package the repository resides in).",
                "+If you want to opt-in to nullable results again, use selectively `@Nullable` on a method.",
                "+",
                " Using the aforementioned result wrapper types will continue to work as expected, i.e. an empty result will be translated into the value representing absence.",
                "@@ -256,8 +272,10 @@ package com.acme;",
                "+import org.springframework.lang.Nullable;",
                "+",
                " interface UserRepository extends Repository<User, Long> {",
                "-  User getByEmailAddress(EmailAddress emailAddress); <1>",
                "+  User getByEmailAddress(EmailAddress emailAddress);                    <1>",
                "   @Nullable",
                "-  User findByEmailAddess(@Nullable EmailAddress emailAdress); <2>",
                "+  User findByEmailAddess(@Nullable EmailAddress emailAdress);           <2>",
                "@@ -274,4 +292,6 @@ interface UserRepository extends Repository<User, Long> {",
                "-Kotlin has the definition of nullability constraints baked into the language.",
                "-Spring Data repositories using the language mechanism to define those constraints will automatically get the same runtime checks applied:",
                "+Kotlin has the definition of https://kotlinlang.org/docs/reference/null-safety.html[nullability constraints]",
                "+ baked into the language.",
                "+Kotlin code compiles to bytecode which does not express nullability constraints using method signatures but rather compiled-in metadata. Make sure to include `kotlin-reflect` to enable introspection of Kotlin's nullability constraints.",
                "+Spring Data repositories use the language mechanism to define those constraints to apply the same runtime checks:",
                "@@ -283,9 +303,9 @@ interface UserRepository : Repository<User, String> {",
                "-  fun findByUsername(username: String): User <1>",
                "+  fun findByUsername(username: String): User         <1>",
                "-  fun findByFirstname(firstname: String?): User? <2>",
                "+  fun findByFirstname(firstname: String?): User?     <2>",
                " }",
                " ----",
                "-<1> The method defines both the parameter as non-nullable (the Kotlin default) as well as the result. The Kotlin compiler will already reject method invocations trying to hand `null` into the method. In case the query execution yields an empty result, an `EmptyResultDataAccessException` will be thrown.",
                "-<2> This method accepts `null` as parameter for `firstname` and return `null` in case the query execution does not produce a result.",
                "+<1> The method defines both, the parameter as non-nullable (the Kotlin default) as well as the result. The Kotlin compiler will already reject method invocations trying to hand `null` into the method. In case the query execution yields an empty result, an `EmptyResultDataAccessException` will be thrown.",
                "+<2> This method accepts `null` as parameter for `firstname` and returns `null` in case the query execution does not produce a result.",
                " ====",
                "@@ -944,66 +964,2 @@ The methods will be called every time one of a Spring Data repository's `save(",
                "-[[core.nullability-validation]]",
                "-== Null-safety",
                "-",
                "-Repository methods let you improve null-safety to deal with `null` values at compile time rather than bumping into the famous `NullPointerException` at runtime. This makes your applications safer through clean nullability declarations, expressing \"value or no value\" semantics without paying the cost of a wrapper like `Optional`.",
                "-",
                "-You can express null-safe repository methods by using Spring Framework's annotations. They provide a tooling-friendly approach and opt-in for `null` checks during runtime:",
                "-",
                "-* `@NonNullApi` annotations at package level declare non-null as the default behavior",
                "-",
                "-* `@Nullable` annotations where specific parameters or return values can be `null`.",
                "-",
                "-Both annotations are meta-annotated with https://jcp.org/en/jsr/detail?id=305[JSR-305] meta-annotations (a dormant JSR but supported by tools like IDEA, Eclipse, Findbugs, etc.) to provide useful warnings to Java developers.",
                "-",
                "-Make sure to include a JAR file containing JSR-305's `@Nonnull` annotation on your class path if you intend to use own meta-annotations.",
                "-",
                "-NOTE: Invocations of repository query methods in the scope of null-declarations, either declared on package-level or with Kotlin, are validated during runtime. Passing a `null` value to a query method parameter that is not-nullable is rejected with an exception. A query method that yields no result and is not-nullable throws `EmptyResultDataAccessException` instead of returning `null`.",
                "-",
                "-.Activating non-null defaults for a package",
                "-====",
                "-[source, java]",
                "-----",
                "-@org.springframework.lang.NonNullApi",
                "-package com.example;",
                "-----",
                "-====",
                "-",
                "-.Declaring nullability for parameters and return values",
                "-====",
                "-[source, java]",
                "-----",
                "-package com.example;                                                   <1>",
                "-",
                "-interface UserRepository extends Repository<User, String> {",
                "-",
                "-  List<User> findByLastname(@Nullable String firstname);               <2>",
                "-",
                "-  @Nullable",
                "-  User findByFirstnameAndLastname(String firstname, String lastname);  <3>",
                "-}",
                "-----",
                "-<1> `@NonNullApi` on package-level declares that all API within this package",
                "-defaults to non-null.",
                "-<2> `@Nullable` allows `null` usage on particular parameters. Each nullable parameter",
                "-must be annotated.",
                "-<3>  Methods that may return `null` are annotated with `@Nullable`.",
                "-====",
                "-",
                "-If you declare your repository interfaces with Kotlin, then you can use Kotlin's https://kotlinlang.org/docs/reference/null-safety.html[null-safety] to express nullability.",
                "-",
                "-.Declaring nullability for parameters and return values in Kotlin",
                "-====",
                "-[source, java]",
                "-----",
                "-interface UserRepository : Repository<User, String> {",
                "-",
                "-  fun findByLastname(username: String?): List<User>",
                "-",
                "-  fun findByFirstnameAndLastname(firstname: String, lastname: String): User?",
                "-}",
                "-----",
                "-====",
                "-",
                "-NOTE: Kotlin code compiles to bytecode which does not express nullability declarations using method signatures but rather compiled-in metadata. Make sure to include `kotlin-reflect` to enable introspection of Kotlin's nullability declarations.",
                "-",
                " [[core.extensions]]"
            ],
            "changed_files": [
                "src/main/asciidoc/index.adoc",
                "src/main/asciidoc/repositories.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "253": "Add documentation section about ways to enforce nullability constraints in repositories [DATACMNS-1190] #1630"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "a814b114e6ceef35da894fc839774892837aefab"
                ]
            ],
            "tags": [
                "2.1.0.M1",
                "2.1.0.M2",
                "2.1.0.M3",
                "2.1.0.RC1",
                "2.1.0.RC2",
                "2.1.0.RELEASE",
                "2.1.1.RELEASE",
                "2.1.10.RELEASE",
                "2.1.11.RELEASE",
                "2.1.12.RELEASE",
                "2.1.13.RELEASE",
                "2.1.14.RELEASE",
                "2.1.15.RELEASE",
                "2.1.16.RELEASE",
                "2.1.17.RELEASE",
                "2.1.18.RELEASE",
                "2.1.19.RELEASE",
                "2.1.2.RELEASE",
                "2.1.20.RELEASE",
                "2.1.21.RELEASE",
                "2.1.3.RELEASE",
                "2.1.4.RELEASE",
                "2.1.5.RELEASE",
                "2.1.6.RELEASE",
                "2.1.7.RELEASE",
                "2.1.8.RELEASE",
                "2.1.9.RELEASE",
                "2.2.0.M1",
                "2.2.0.M2",
                "2.2.0.M3",
                "2.2.0.M4",
                "2.2.0.RC1",
                "2.2.0.RC2",
                "2.2.0.RC3",
                "2.2.0.RELEASE",
                "2.2.1.RELEASE",
                "2.2.10.RELEASE",
                "2.2.11.RELEASE",
                "2.2.12.RELEASE",
                "2.2.13.RELEASE",
                "2.2.2.RELEASE",
                "2.2.3.RELEASE",
                "2.2.4.RELEASE",
                "2.2.5.RELEASE",
                "2.2.6.RELEASE",
                "2.2.7.RELEASE",
                "2.2.8.RELEASE",
                "2.2.9.RELEASE",
                "2.3.0.M1",
                "2.3.0.M2",
                "2.3.0.M3",
                "2.3.0.M4",
                "2.3.0.RC1",
                "2.3.0.RC2",
                "2.3.0.RELEASE",
                "2.3.1.RELEASE",
                "2.3.2.RELEASE",
                "2.3.3.RELEASE",
                "2.3.4.RELEASE",
                "2.3.5.RELEASE",
                "2.3.6.RELEASE",
                "2.3.7.RELEASE",
                "2.3.8.RELEASE",
                "2.3.9.RELEASE",
                "2.4.0",
                "2.4.0-M1",
                "2.4.0-M2",
                "2.4.0-RC1",
                "2.4.0-RC2",
                "2.4.1",
                "2.4.10",
                "2.4.11",
                "2.4.12",
                "2.4.13",
                "2.4.14",
                "2.4.15",
                "2.4.2",
                "2.4.3",
                "2.4.4",
                "2.4.5",
                "2.4.6",
                "2.4.7",
                "2.4.8",
                "2.4.9",
                "2.5.0",
                "2.5.0-M1",
                "2.5.0-M2",
                "2.5.0-M3",
                "2.5.0-M4",
                "2.5.0-M5",
                "2.5.0-RC1",
                "2.5.1",
                "2.5.10",
                "2.5.11",
                "2.5.12",
                "2.5.2",
                "2.5.3",
                "2.5.4",
                "2.5.5",
                "2.5.6",
                "2.5.7",
                "2.5.8",
                "2.5.9",
                "2.6.0",
                "2.6.0-M1",
                "2.6.0-M2",
                "2.6.0-M3",
                "2.6.0-RC1",
                "2.6.1",
                "2.6.10",
                "2.6.2",
                "2.6.3",
                "2.6.4",
                "2.6.5",
                "2.6.6",
                "2.6.7",
                "2.6.8",
                "2.6.9",
                "2.7.0",
                "2.7.0-M1",
                "2.7.0-M2",
                "2.7.0-M3",
                "2.7.0-M4",
                "2.7.0-RC1",
                "2.7.1",
                "2.7.10",
                "2.7.11",
                "2.7.12",
                "2.7.13",
                "2.7.14",
                "2.7.15",
                "2.7.16",
                "2.7.17",
                "2.7.18",
                "2.7.2",
                "2.7.3",
                "2.7.4",
                "2.7.5",
                "2.7.6",
                "2.7.7",
                "2.7.8",
                "2.7.9",
                "3.0.0",
                "3.0.0-M1",
                "3.0.0-M2",
                "3.0.0-M3",
                "3.0.0-M4",
                "3.0.0-M5",
                "3.0.0-M6",
                "3.0.0-RC1",
                "3.0.0-RC2",
                "3.0.1",
                "3.0.10",
                "3.0.11",
                "3.0.12",
                "3.0.2",
                "3.0.3",
                "3.0.4",
                "3.0.5",
                "3.0.6",
                "3.0.7",
                "3.0.8",
                "3.0.9",
                "3.1.0",
                "3.1.0-M1",
                "3.1.0-M2",
                "3.1.0-M3",
                "3.1.0-RC1",
                "3.1.1",
                "3.1.10",
                "3.1.11",
                "3.1.12",
                "3.1.2",
                "3.1.3",
                "3.1.4",
                "3.1.5",
                "3.1.6",
                "3.1.7",
                "3.1.8",
                "3.1.9",
                "3.2.0",
                "3.2.0-M1",
                "3.2.0-M2",
                "3.2.0-M3",
                "3.2.0-RC1",
                "3.2.1",
                "3.2.2",
                "3.2.3",
                "3.2.4",
                "3.2.5",
                "3.2.6",
                "3.2.7",
                "3.3.0",
                "3.3.0-M1",
                "3.3.0-M2",
                "3.3.0-RC1",
                "3.3.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 253",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "cb549e6f581c69da8374e24f460eb4621d2f5b30",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1517478898,
            "hunks": 2,
            "message": "DATACMNS-1243 - Polishing. Imports and author tags. Original pull request: #268.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/convert/Jsr310Converters.java b/src/main/java/org/springframework/data/convert/Jsr310Converters.java",
                "index ced95c486..d104ceec1 100644",
                "--- a/src/main/java/org/springframework/data/convert/Jsr310Converters.java",
                "+++ b/src/main/java/org/springframework/data/convert/Jsr310Converters.java",
                "@@ -28,3 +28,2 @@ import java.time.Period;",
                " import java.time.ZoneId;",
                "-import java.time.ZoneOffset;",
                " import java.util.ArrayList;",
                "@@ -44,2 +43,3 @@ import org.springframework.util.ClassUtils;",
                "  * @author Barak Schoster",
                "+ * @author Jens Schauder",
                "  */"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/convert/Jsr310Converters.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "268": "Add converters Instant <-> LocalDateTime [DATACMNS-1243] #1682"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "24a9493fa62faee6735831a505014e61c28ec39e"
                ],
                [
                    "no-tag",
                    "66224b3cb10da49ec069b76f6f5091d1612a1157"
                ]
            ],
            "tags": [
                "1.13.11.RELEASE",
                "1.13.12.RELEASE",
                "1.13.13.RELEASE",
                "1.13.14.RELEASE",
                "1.13.15.RELEASE",
                "1.13.16.RELEASE",
                "1.13.17.RELEASE",
                "1.13.18.RELEASE",
                "1.13.19.RELEASE",
                "1.13.20.RELEASE",
                "1.13.21.RELEASE",
                "1.13.22.RELEASE",
                "1.13.23.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 268",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "456a901b4d74cb3d6c3a3ea1b827a0fdbc5648a6",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1507279262,
            "hunks": 1,
            "message": "DATACMNS-1190 - Added section on how to enforce nullability constraints on repositories. Original pull request: #253.",
            "diff": [
                "diff --git a/src/main/asciidoc/repositories.adoc b/src/main/asciidoc/repositories.adoc",
                "index f09925252..47df8416c 100644",
                "--- a/src/main/asciidoc/repositories.adoc",
                "+++ b/src/main/asciidoc/repositories.adoc",
                "@@ -216,2 +216,78 @@ NOTE: Note, that the intermediate repository interface is annotated with `@NoRep",
                "+[[repositories.nullability]]",
                "+=== Null handling of repository methods",
                "+",
                "+As of Spring Data 2.0, repository CRUD methods that return an individual aggregate instance use Java 8's `Optional` to indicate the potential absence of a value.",
                "+Besides that, Spring Data supports to return other wrapper types on query methods:",
                "+",
                "+* `com.google.common.base.Optional`",
                "+* `scala.Option`",
                "+* `io.vavr.control.Option`",
                "+* `javaslang.control.Option` (deprecated as Javaslang is deprecated)",
                "+",
                "+Alternatively query methods can choose not to use a wrapper type at all.",
                "+The absence of a query result will then be indicated by returning `null`.",
                "+Repository methods returning collection like values will never return null but an empty value.",
                "+",
                "+[[repositories.nullability.annotations]]",
                "+==== Nullability annotations",
                "+",
                "+To properly validate nullability constraints on a repository method at runtime, annotations can be defined to define whether query methods are supposed to return `null`.",
                "+To enable this, non-nullability needs to be activated on the package level, e.g. using Spring's `@NonNullApi` in `package-info.java`:",
                "+",
                "+.Declaring non-nullablity in `package-info.java`",
                "+====",
                "+[source, java]",
                "+----",
                "+@NonNullApi",
                "+package com.acme;",
                "+----",
                "+====",
                "+",
                "+Once that is in place, repository query method will get runtime execution validation of the nullability constraints and exceptions will be thrown in case a query execution result violates the defined constrained, i.e. the method would return `null` for some reason but is declared as non-nullable (the default with the annotation defined on the package the repository resides in).",
                "+If you want to opt-in to nullable results again, e.g. `@Nullable` can be used on a method selectively.",
                "+Using the aforementioned result wrapper types will continue to work as expected, i.e. an empty result will be translated into the value representing absence.",
                "+",
                "+.Using different nullability constraints",
                "+====",
                "+[source, java]",
                "+----",
                "+package com.acme;",
                "+",
                "+interface UserRepository extends Repository<User, Long> {",
                "+",
                "+  User getByEmailAddress(EmailAddress emailAddress); <1>",
                "+",
                "+  @Nullable",
                "+  User findByEmailAddess(@Nullable EmailAddress emailAdress); <2>",
                "+",
                "+  Optional<User> findOptionalByEmailAddress(EmailAddress emailAddress); <3>",
                "+}",
                "+----",
                "+<1> Will throw an `EmptyResultDataAccessException` in case the query executed does not produce a result. Will throw an `IllegalArgumentException` in case the `emailAddress` handed to the method is `null`.",
                "+<2> Will return `null` in case the query executed does not produce a result. Also accepts `null` as value for `emailAddress`.",
                "+<3> Will return `Optional.empty()` in case the query executed does not produce a result. Will throw an `IllegalArgumentException` in case the `emailAddress` handed to the method is `null`.",
                "+====",
                "+",
                "+[[repositories.nullability.kotlin]]",
                "+==== Nullability in Kotlin-based repositories",
                "+",
                "+Kotlin has the definition of nullability constraints baked into the language.",
                "+Spring Data repositories using the language mechanism to define those constraints will automatically get the same runtime checks applied:",
                "+",
                "+.Using nullability constraints on Kotlin repositories",
                "+====",
                "+[source, kotlin]",
                "+----",
                "+interface UserRepository : Repository<User, String> {",
                "+",
                "+  fun findByUsername(username: String): User <1>",
                "+",
                "+  fun findByFirstname(firstname: String?): User? <2>",
                "+}",
                "+----",
                "+<1> The method defines both the parameter as non-nullable (the Kotlin default) as well as the result. The Kotlin compiler will already reject method invocations trying to hand `null` into the method. In case the query execution yields an empty result, an `EmptyResultDataAccessException` will be thrown.",
                "+<2> This method accepts `null` as parameter for `firstname` and return `null` in case the query execution does not produce a result.",
                "+====",
                "+",
                " [[repositories.multiple-modules]]"
            ],
            "changed_files": [
                "src/main/asciidoc/repositories.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "253": "Add documentation section about ways to enforce nullability constraints in repositories [DATACMNS-1190] #1630"
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "757f7adf24aa58538c0c44a08651b80dad21e350"
                ]
            ],
            "tags": [
                "2.1.0.M1",
                "2.1.0.M2",
                "2.1.0.M3",
                "2.1.0.RC1",
                "2.1.0.RC2",
                "2.1.0.RELEASE",
                "2.1.1.RELEASE",
                "2.1.10.RELEASE",
                "2.1.11.RELEASE",
                "2.1.12.RELEASE",
                "2.1.13.RELEASE",
                "2.1.14.RELEASE",
                "2.1.15.RELEASE",
                "2.1.16.RELEASE",
                "2.1.17.RELEASE",
                "2.1.18.RELEASE",
                "2.1.19.RELEASE",
                "2.1.2.RELEASE",
                "2.1.20.RELEASE",
                "2.1.21.RELEASE",
                "2.1.3.RELEASE",
                "2.1.4.RELEASE",
                "2.1.5.RELEASE",
                "2.1.6.RELEASE",
                "2.1.7.RELEASE",
                "2.1.8.RELEASE",
                "2.1.9.RELEASE",
                "2.2.0.M1",
                "2.2.0.M2",
                "2.2.0.M3",
                "2.2.0.M4",
                "2.2.0.RC1",
                "2.2.0.RC2",
                "2.2.0.RC3",
                "2.2.0.RELEASE",
                "2.2.1.RELEASE",
                "2.2.10.RELEASE",
                "2.2.11.RELEASE",
                "2.2.12.RELEASE",
                "2.2.13.RELEASE",
                "2.2.2.RELEASE",
                "2.2.3.RELEASE",
                "2.2.4.RELEASE",
                "2.2.5.RELEASE",
                "2.2.6.RELEASE",
                "2.2.7.RELEASE",
                "2.2.8.RELEASE",
                "2.2.9.RELEASE",
                "2.3.0.M1",
                "2.3.0.M2",
                "2.3.0.M3",
                "2.3.0.M4",
                "2.3.0.RC1",
                "2.3.0.RC2",
                "2.3.0.RELEASE",
                "2.3.1.RELEASE",
                "2.3.2.RELEASE",
                "2.3.3.RELEASE",
                "2.3.4.RELEASE",
                "2.3.5.RELEASE",
                "2.3.6.RELEASE",
                "2.3.7.RELEASE",
                "2.3.8.RELEASE",
                "2.3.9.RELEASE",
                "2.4.0",
                "2.4.0-M1",
                "2.4.0-M2",
                "2.4.0-RC1",
                "2.4.0-RC2",
                "2.4.1",
                "2.4.10",
                "2.4.11",
                "2.4.12",
                "2.4.13",
                "2.4.14",
                "2.4.15",
                "2.4.2",
                "2.4.3",
                "2.4.4",
                "2.4.5",
                "2.4.6",
                "2.4.7",
                "2.4.8",
                "2.4.9",
                "2.5.0",
                "2.5.0-M1",
                "2.5.0-M2",
                "2.5.0-M3",
                "2.5.0-M4",
                "2.5.0-M5",
                "2.5.0-RC1",
                "2.5.1",
                "2.5.10",
                "2.5.11",
                "2.5.12",
                "2.5.2",
                "2.5.3",
                "2.5.4",
                "2.5.5",
                "2.5.6",
                "2.5.7",
                "2.5.8",
                "2.5.9",
                "2.6.0",
                "2.6.0-M1",
                "2.6.0-M2",
                "2.6.0-M3",
                "2.6.0-RC1",
                "2.6.1",
                "2.6.10",
                "2.6.2",
                "2.6.3",
                "2.6.4",
                "2.6.5",
                "2.6.6",
                "2.6.7",
                "2.6.8",
                "2.6.9",
                "2.7.0",
                "2.7.0-M1",
                "2.7.0-M2",
                "2.7.0-M3",
                "2.7.0-M4",
                "2.7.0-RC1",
                "2.7.1",
                "2.7.10",
                "2.7.11",
                "2.7.12",
                "2.7.13",
                "2.7.14",
                "2.7.15",
                "2.7.16",
                "2.7.17",
                "2.7.18",
                "2.7.2",
                "2.7.3",
                "2.7.4",
                "2.7.5",
                "2.7.6",
                "2.7.7",
                "2.7.8",
                "2.7.9",
                "3.0.0",
                "3.0.0-M1",
                "3.0.0-M2",
                "3.0.0-M3",
                "3.0.0-M4",
                "3.0.0-M5",
                "3.0.0-M6",
                "3.0.0-RC1",
                "3.0.0-RC2",
                "3.0.1",
                "3.0.10",
                "3.0.11",
                "3.0.12",
                "3.0.2",
                "3.0.3",
                "3.0.4",
                "3.0.5",
                "3.0.6",
                "3.0.7",
                "3.0.8",
                "3.0.9",
                "3.1.0",
                "3.1.0-M1",
                "3.1.0-M2",
                "3.1.0-M3",
                "3.1.0-RC1",
                "3.1.1",
                "3.1.10",
                "3.1.11",
                "3.1.12",
                "3.1.2",
                "3.1.3",
                "3.1.4",
                "3.1.5",
                "3.1.6",
                "3.1.7",
                "3.1.8",
                "3.1.9",
                "3.2.0",
                "3.2.0-M1",
                "3.2.0-M2",
                "3.2.0-M3",
                "3.2.0-RC1",
                "3.2.1",
                "3.2.2",
                "3.2.3",
                "3.2.4",
                "3.2.5",
                "3.2.6",
                "3.2.7",
                "3.3.0",
                "3.3.0-M1",
                "3.3.0-M2",
                "3.3.0-RC1",
                "3.3.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 253",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4bd8a3cfc3a242cd3d433937ece7a4905efce4c8",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1508409653,
            "hunks": 1,
            "message": "DATACMNS-1199 - Added PropertyPath.nested(\u00e2\u0080\u00a6). This allows to obtain a nested property path based on a currently available one.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/mapping/PropertyPath.java b/src/main/java/org/springframework/data/mapping/PropertyPath.java",
                "index 7596792ed..f5e6f1e1f 100644",
                "--- a/src/main/java/org/springframework/data/mapping/PropertyPath.java",
                "+++ b/src/main/java/org/springframework/data/mapping/PropertyPath.java",
                "@@ -197,2 +197,17 @@ public class PropertyPath implements Streamable<PropertyPath> {",
                "+\t/**",
                "+\t * Returns the {@link PropertyPath} for the path nested under the current property.",
                "+\t *",
                "+\t * @param path must not be {@literal null} or empty.",
                "+\t * @return will never be {@literal null}.",
                "+\t */",
                "+\tpublic PropertyPath nested(String path) {",
                "+",
                "+\t\tAssert.hasText(path, \"Path must not be null or empty!\");",
                "+",
                "+\t\tString lookup = toDotPath().concat(\".\").concat(path);",
                "+",
                "+\t\treturn PropertyPath.from(lookup, owningType);",
                "+\t}",
                "+",
                " \t/*"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/mapping/PropertyPath.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.1.0.M1",
                "2.1.0.M2",
                "2.1.0.M3",
                "2.1.0.RC1",
                "2.1.0.RC2",
                "2.1.0.RELEASE",
                "2.1.1.RELEASE",
                "2.1.10.RELEASE",
                "2.1.11.RELEASE",
                "2.1.12.RELEASE",
                "2.1.13.RELEASE",
                "2.1.14.RELEASE",
                "2.1.15.RELEASE",
                "2.1.16.RELEASE",
                "2.1.17.RELEASE",
                "2.1.18.RELEASE",
                "2.1.19.RELEASE",
                "2.1.2.RELEASE",
                "2.1.20.RELEASE",
                "2.1.21.RELEASE",
                "2.1.3.RELEASE",
                "2.1.4.RELEASE",
                "2.1.5.RELEASE",
                "2.1.6.RELEASE",
                "2.1.7.RELEASE",
                "2.1.8.RELEASE",
                "2.1.9.RELEASE",
                "2.2.0.M1",
                "2.2.0.M2",
                "2.2.0.M3",
                "2.2.0.M4",
                "2.2.0.RC1",
                "2.2.0.RC2",
                "2.2.0.RC3",
                "2.2.0.RELEASE",
                "2.2.1.RELEASE",
                "2.2.10.RELEASE",
                "2.2.11.RELEASE",
                "2.2.12.RELEASE",
                "2.2.13.RELEASE",
                "2.2.2.RELEASE",
                "2.2.3.RELEASE",
                "2.2.4.RELEASE",
                "2.2.5.RELEASE",
                "2.2.6.RELEASE",
                "2.2.7.RELEASE",
                "2.2.8.RELEASE",
                "2.2.9.RELEASE",
                "2.3.0.M1",
                "2.3.0.M2",
                "2.3.0.M3",
                "2.3.0.M4",
                "2.3.0.RC1",
                "2.3.0.RC2",
                "2.3.0.RELEASE",
                "2.3.1.RELEASE",
                "2.3.2.RELEASE",
                "2.3.3.RELEASE",
                "2.3.4.RELEASE",
                "2.3.5.RELEASE",
                "2.3.6.RELEASE",
                "2.3.7.RELEASE",
                "2.3.8.RELEASE",
                "2.3.9.RELEASE",
                "2.4.0",
                "2.4.0-M1",
                "2.4.0-M2",
                "2.4.0-RC1",
                "2.4.0-RC2",
                "2.4.1",
                "2.4.10",
                "2.4.11",
                "2.4.12",
                "2.4.13",
                "2.4.14",
                "2.4.15",
                "2.4.2",
                "2.4.3",
                "2.4.4",
                "2.4.5",
                "2.4.6",
                "2.4.7",
                "2.4.8",
                "2.4.9",
                "2.5.0",
                "2.5.0-M1",
                "2.5.0-M2",
                "2.5.0-M3",
                "2.5.0-M4",
                "2.5.0-M5",
                "2.5.0-RC1",
                "2.5.1",
                "2.5.10",
                "2.5.11",
                "2.5.12",
                "2.5.2",
                "2.5.3",
                "2.5.4",
                "2.5.5",
                "2.5.6",
                "2.5.7",
                "2.5.8",
                "2.5.9",
                "2.6.0",
                "2.6.0-M1",
                "2.6.0-M2",
                "2.6.0-M3",
                "2.6.0-RC1",
                "2.6.1",
                "2.6.10",
                "2.6.2",
                "2.6.3",
                "2.6.4",
                "2.6.5",
                "2.6.6",
                "2.6.7",
                "2.6.8",
                "2.6.9",
                "2.7.0",
                "2.7.0-M1",
                "2.7.0-M2",
                "2.7.0-M3",
                "2.7.0-M4",
                "2.7.0-RC1",
                "2.7.1",
                "2.7.10",
                "2.7.11",
                "2.7.12",
                "2.7.13",
                "2.7.14",
                "2.7.15",
                "2.7.16",
                "2.7.17",
                "2.7.18",
                "2.7.2",
                "2.7.3",
                "2.7.4",
                "2.7.5",
                "2.7.6",
                "2.7.7",
                "2.7.8",
                "2.7.9",
                "3.0.0",
                "3.0.0-M1",
                "3.0.0-M2",
                "3.0.0-M3",
                "3.0.0-M4",
                "3.0.0-M5",
                "3.0.0-M6",
                "3.0.0-RC1",
                "3.0.0-RC2",
                "3.0.1",
                "3.0.10",
                "3.0.11",
                "3.0.12",
                "3.0.2",
                "3.0.3",
                "3.0.4",
                "3.0.5",
                "3.0.6",
                "3.0.7",
                "3.0.8",
                "3.0.9",
                "3.1.0",
                "3.1.0-M1",
                "3.1.0-M2",
                "3.1.0-M3",
                "3.1.0-RC1",
                "3.1.1",
                "3.1.10",
                "3.1.11",
                "3.1.12",
                "3.1.2",
                "3.1.3",
                "3.1.4",
                "3.1.5",
                "3.1.6",
                "3.1.7",
                "3.1.8",
                "3.1.9",
                "3.2.0",
                "3.2.0-M1",
                "3.2.0-M2",
                "3.2.0-M3",
                "3.2.0-RC1",
                "3.2.1",
                "3.2.2",
                "3.2.3",
                "3.2.4",
                "3.2.5",
                "3.2.6",
                "3.2.7",
                "3.3.0",
                "3.3.0-M1",
                "3.3.0-M2",
                "3.3.0-RC1",
                "3.3.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: property, base",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: property",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "05de55ffba261ddfa19208593d5090d743ae85d9",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1513803548,
            "hunks": 9,
            "message": "DATACMNS-1237 - Register additional ProxyingHandlerMethodArgumentResolver as first resolver. We now deploy a custom BeanPostProcessor to customize RequestMappingHandlerAdapter instances by prepending a ProxyingHandlerMethodArgumentResolver (requiring a @ModelAttribute) to the list of resolved HandlerMethodArgumentResolvers to make sure the settings defined in the annotation are applied but the projecting way of data binding is still used.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/web/ProxyingHandlerMethodArgumentResolver.java b/src/main/java/org/springframework/data/web/ProxyingHandlerMethodArgumentResolver.java",
                "index 2831b502a..9ab8a76f6 100644",
                "--- a/src/main/java/org/springframework/data/web/ProxyingHandlerMethodArgumentResolver.java",
                "+++ b/src/main/java/org/springframework/data/web/ProxyingHandlerMethodArgumentResolver.java",
                "@@ -25,2 +25,3 @@ import org.springframework.beans.factory.BeanFactory;",
                " import org.springframework.beans.factory.BeanFactoryAware;",
                "+import org.springframework.beans.factory.ObjectFactory;",
                " import org.springframework.core.MethodParameter;",
                "@@ -31,2 +32,3 @@ import org.springframework.util.ClassUtils;",
                " import org.springframework.web.bind.WebDataBinder;",
                "+import org.springframework.web.bind.annotation.ModelAttribute;",
                " import org.springframework.web.bind.support.WebDataBinderFactory;",
                "@@ -48,3 +50,15 @@ public class ProxyingHandlerMethodArgumentResolver extends ModelAttributeMethodP",
                " \tprivate final SpelAwareProxyProjectionFactory proxyFactory;",
                "-\tprivate final ConversionService conversionService;",
                "+\tprivate final ObjectFactory<ConversionService> conversionService;",
                "+",
                "+\t/**",
                "+\t * Creates a new {@link PageableHandlerMethodArgumentResolver} using the given {@link ConversionService} and the",
                "+\t * {@link ModelAttribute} annotation not required.",
                "+\t * ",
                "+\t * @param conversionService must not be {@literal null}.",
                "+\t * @deprecated use {@link #ProxyingHandlerMethodArgumentResolver(ObjectFactory, boolean)} instead.",
                "+\t */",
                "+\t@Deprecated",
                "+\tpublic ProxyingHandlerMethodArgumentResolver(final ConversionService conversionService) {",
                "+\t\tthis(() -> conversionService, true);",
                "+\t}",
                "@@ -55,5 +69,6 @@ public class ProxyingHandlerMethodArgumentResolver extends ModelAttributeMethodP",
                " \t */",
                "-\tpublic ProxyingHandlerMethodArgumentResolver(ConversionService conversionService) {",
                "+\tpublic ProxyingHandlerMethodArgumentResolver(ObjectFactory<ConversionService> conversionService,",
                "+\t\t\tboolean annotationNotRequired) {",
                "-\t\tsuper(true);",
                "+\t\tsuper(annotationNotRequired);",
                "@@ -88,2 +103,6 @@ public class ProxyingHandlerMethodArgumentResolver extends ModelAttributeMethodP",
                "+\t\tif (!super.supportsParameter(parameter)) {",
                "+\t\t\treturn false;",
                "+\t\t}",
                "+",
                " \t\tClass<?> type = parameter.getParameterType();",
                "@@ -118,3 +137,3 @@ public class ProxyingHandlerMethodArgumentResolver extends ModelAttributeMethodP",
                "-\t\tMapDataBinder binder = new MapDataBinder(parameter.getParameterType(), conversionService);",
                "+\t\tMapDataBinder binder = new MapDataBinder(parameter.getParameterType(), conversionService.getObject());",
                " \t\tbinder.bind(new MutablePropertyValues(request.getParameterMap()));",
                "diff --git a/src/main/java/org/springframework/data/web/config/EnableSpringDataWebSupport.java b/src/main/java/org/springframework/data/web/config/EnableSpringDataWebSupport.java",
                "index c8493c335..ff3aa6ec2 100644",
                "--- a/src/main/java/org/springframework/data/web/config/EnableSpringDataWebSupport.java",
                "+++ b/src/main/java/org/springframework/data/web/config/EnableSpringDataWebSupport.java",
                "@@ -105,2 +105,4 @@ public @interface EnableSpringDataWebSupport {",
                "+\t\t\timports.add(ProjectingArgumentResolverRegistrar.class.getName());",
                "+",
                " \t\t\timports.add(resourceLoader//",
                "diff --git a/src/main/java/org/springframework/data/web/config/ProjectingArgumentResolverRegistrar.java b/src/main/java/org/springframework/data/web/config/ProjectingArgumentResolverRegistrar.java",
                "new file mode 100644",
                "index 000000000..99e4b4b7b",
                "--- /dev/null",
                "+++ b/src/main/java/org/springframework/data/web/config/ProjectingArgumentResolverRegistrar.java",
                "@@ -0,0 +1,143 @@",
                "+/*",
                "+ * Copyright 2017 the original author or authors.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.springframework.data.web.config;",
                "+",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+",
                "+import org.springframework.beans.BeansException;",
                "+import org.springframework.beans.factory.BeanClassLoaderAware;",
                "+import org.springframework.beans.factory.BeanFactory;",
                "+import org.springframework.beans.factory.BeanFactoryAware;",
                "+import org.springframework.beans.factory.ObjectFactory;",
                "+import org.springframework.beans.factory.annotation.Qualifier;",
                "+import org.springframework.beans.factory.config.BeanPostProcessor;",
                "+import org.springframework.context.annotation.Bean;",
                "+import org.springframework.context.annotation.Configuration;",
                "+import org.springframework.core.convert.ConversionService;",
                "+import org.springframework.data.web.ProxyingHandlerMethodArgumentResolver;",
                "+import org.springframework.lang.Nullable;",
                "+import org.springframework.web.method.support.HandlerMethodArgumentResolver;",
                "+import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;",
                "+",
                "+/**",
                "+ * Configuration class to register a {@link BeanPostProcessor} to augment {@link RequestMappingHandlerAdapter} with a",
                "+ * {@link ProxyingHandlerMethodArgumentResolver}.",
                "+ * ",
                "+ * @author Oliver Gierke",
                "+ * @soundtrack Apparat With Soap & Skin - Goodbye (Dark Theme Song - https://www.youtube.com/watch?v=66VnOdk6oto)",
                "+ */",
                "+@Configuration",
                "+public class ProjectingArgumentResolverRegistrar {",
                "+",
                "+\t/**",
                "+\t * Registers a {@link BeanPostProcessor} to modify {@link RequestMappingHandlerAdapter} beans in the application",
                "+\t * context to get a {@link ProxyingHandlerMethodArgumentResolver} configured as first",
                "+\t * {@link HandlerMethodArgumentResolver}.",
                "+\t * ",
                "+\t * @param conversionService the Spring MVC {@link ConversionService} in a lazy fashion, so that its initialization is",
                "+\t *          not triggered yet.",
                "+\t * @return",
                "+\t */",
                "+\t@Bean",
                "+\tpublic static ProjectingArgumentResolverBeanPostProcessor projectingArgumentResolverBeanPostProcessor(",
                "+\t\t\t@Qualifier(\"mvcConversionService\") ObjectFactory<ConversionService> conversionService) {",
                "+\t\treturn new ProjectingArgumentResolverBeanPostProcessor(conversionService);",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * A {@link BeanPostProcessor} to modify {@link RequestMappingHandlerAdapter} beans in the application context to get",
                "+\t * a {@link ProxyingHandlerMethodArgumentResolver} configured as first {@link HandlerMethodArgumentResolver}.",
                "+\t *",
                "+\t * @author Oliver Gierke",
                "+\t * @soundtrack Apparat With Soap & Skin - Goodbye (Dark Theme Song - https://www.youtube.com/watch?v=66VnOdk6oto)",
                "+\t */",
                "+\tprivate static class ProjectingArgumentResolverBeanPostProcessor",
                "+\t\t\timplements BeanPostProcessor, BeanFactoryAware, BeanClassLoaderAware {",
                "+",
                "+\t\tprivate ProxyingHandlerMethodArgumentResolver resolver;",
                "+",
                "+\t\t/**",
                "+\t\t * A {@link BeanPostProcessor} to modify {@link RequestMappingHandlerAdapter} beans in the application context to",
                "+\t\t * get a {@link ProxyingHandlerMethodArgumentResolver} configured as first {@link HandlerMethodArgumentResolver}.",
                "+\t\t * ",
                "+\t\t * @param conversionService the Spring MVC {@link ConversionService} in a lazy fashion, so that its initialization",
                "+\t\t *          is not triggered yet.",
                "+\t\t */",
                "+\t\tpublic ProjectingArgumentResolverBeanPostProcessor(",
                "+\t\t\t\t@Qualifier(\"mvcConversionService\") ObjectFactory<ConversionService> conversionService) {",
                "+\t\t\tthis.resolver = new ProxyingHandlerMethodArgumentResolver(conversionService, false);",
                "+\t\t}",
                "+",
                "+\t\t/* ",
                "+\t\t * (non-Javadoc)",
                "+\t\t * @see org.springframework.beans.factory.BeanFactoryAware#setBeanFactory(org.springframework.beans.factory.BeanFactory)",
                "+\t\t */",
                "+\t\t@Override",
                "+\t\tpublic void setBeanFactory(BeanFactory beanFactory) throws BeansException {",
                "+\t\t\tthis.resolver.setBeanFactory(beanFactory);",
                "+\t\t}",
                "+",
                "+\t\t/* ",
                "+\t\t * (non-Javadoc)",
                "+\t\t * @see org.springframework.beans.factory.BeanClassLoaderAware#setBeanClassLoader(java.lang.ClassLoader)",
                "+\t\t */",
                "+\t\t@Override",
                "+\t\tpublic void setBeanClassLoader(ClassLoader classLoader) {",
                "+\t\t\tthis.resolver.setBeanClassLoader(classLoader);",
                "+\t\t}",
                "+",
                "+\t\t/* ",
                "+\t\t * (non-Javadoc)",
                "+\t\t * @see org.springframework.beans.factory.config.BeanPostProcessor#postProcessBeforeInitialization(java.lang.Object, java.lang.String)",
                "+\t\t */",
                "+\t\t@Nullable",
                "+\t\t@Override",
                "+\t\tpublic Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {",
                "+\t\t\treturn bean;",
                "+\t\t}",
                "+",
                "+\t\t/* ",
                "+\t\t * (non-Javadoc)",
                "+\t\t * @see org.springframework.beans.factory.config.BeanPostProcessor#postProcessAfterInitialization(java.lang.Object, java.lang.String)",
                "+\t\t */",
                "+\t\t@Nullable",
                "+\t\t@Override",
                "+\t\tpublic Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {",
                "+",
                "+\t\t\tif (!RequestMappingHandlerAdapter.class.isInstance(bean)) {",
                "+\t\t\t\treturn bean;",
                "+\t\t\t}",
                "+",
                "+\t\t\tRequestMappingHandlerAdapter adapter = (RequestMappingHandlerAdapter) bean;",
                "+\t\t\tList<HandlerMethodArgumentResolver> currentResolvers = adapter.getArgumentResolvers();",
                "+",
                "+\t\t\tif (currentResolvers == null) {",
                "+\t\t\t\tthrow new IllegalStateException(",
                "+\t\t\t\t\t\tString.format(\"No HandlerMethodArgumentResolvers found in RequestMappingHandlerAdapter %s!\", beanName));",
                "+\t\t\t}",
                "+",
                "+\t\t\tList<HandlerMethodArgumentResolver> newResolvers = new ArrayList<HandlerMethodArgumentResolver>(",
                "+\t\t\t\t\tcurrentResolvers.size() + 1);",
                "+\t\t\tnewResolvers.add(resolver);",
                "+\t\t\tnewResolvers.addAll(currentResolvers);",
                "+",
                "+\t\t\tadapter.setArgumentResolvers(newResolvers);",
                "+",
                "+\t\t\treturn adapter;",
                "+\t\t}",
                "+\t}",
                "+}",
                "diff --git a/src/main/java/org/springframework/data/web/config/SpringDataWebConfiguration.java b/src/main/java/org/springframework/data/web/config/SpringDataWebConfiguration.java",
                "index 799d04257..c7beccf48 100644",
                "--- a/src/main/java/org/springframework/data/web/config/SpringDataWebConfiguration.java",
                "+++ b/src/main/java/org/springframework/data/web/config/SpringDataWebConfiguration.java",
                "@@ -142,4 +142,3 @@ public class SpringDataWebConfiguration implements WebMvcConfigurer, BeanClassLo",
                "-\t\tProxyingHandlerMethodArgumentResolver resolver = new ProxyingHandlerMethodArgumentResolver(",
                "-\t\t\t\tconversionService.getObject());",
                "+\t\tProxyingHandlerMethodArgumentResolver resolver = new ProxyingHandlerMethodArgumentResolver(conversionService, true);",
                " \t\tresolver.setBeanFactory(context);"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/web/ProxyingHandlerMethodArgumentResolver.java",
                "src/main/java/org/springframework/data/web/config/EnableSpringDataWebSupport.java",
                "src/main/java/org/springframework/data/web/config/ProjectingArgumentResolverRegistrar.java",
                "src/main/java/org/springframework/data/web/config/SpringDataWebConfiguration.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "2985ff31ac4407e3c31bd5dce774c448450b53b2"
                ],
                [
                    "no-tag",
                    "d978c9e7b5e40b17c0c79fbdce7343afa04ca5fd"
                ]
            ],
            "tags": [
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.3.RELEASE",
                "2.0.4.RELEASE",
                "2.0.5.RELEASE",
                "2.0.6.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: bind, request",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e537f5c4b959e566c2677b573d174d2aa442b24c",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1511993556,
            "hunks": 39,
            "message": "DATACMNS-1224 - Polishing of nullability annotations. Refactored code to properly check for null fields in Eclipse. Added warning suppressions where suitable.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/domain/AbstractAggregateRoot.java b/src/main/java/org/springframework/data/domain/AbstractAggregateRoot.java",
                "index a6a89fbf6..9f4606715 100644",
                "--- a/src/main/java/org/springframework/data/domain/AbstractAggregateRoot.java",
                "+++ b/src/main/java/org/springframework/data/domain/AbstractAggregateRoot.java",
                "@@ -77,2 +77,3 @@ public class AbstractAggregateRoot<A extends AbstractAggregateRoot<A>> {",
                " \t */",
                "+\t@SuppressWarnings(\"unchecked\")",
                " \tprotected final A andEventsFrom(A aggregate) {",
                "@@ -94,2 +95,3 @@ public class AbstractAggregateRoot<A extends AbstractAggregateRoot<A>> {",
                " \t */",
                "+\t@SuppressWarnings(\"unchecked\")",
                " \tprotected final A andEvent(Object event) {",
                "diff --git a/src/main/java/org/springframework/data/mapping/model/AbstractPersistentProperty.java b/src/main/java/org/springframework/data/mapping/model/AbstractPersistentProperty.java",
                "index 35a096dac..d20605d5b 100644",
                "--- a/src/main/java/org/springframework/data/mapping/model/AbstractPersistentProperty.java",
                "+++ b/src/main/java/org/springframework/data/mapping/model/AbstractPersistentProperty.java",
                "@@ -58,2 +58,3 @@ public abstract class AbstractPersistentProperty<P extends PersistentProperty<P>",
                "+\t@SuppressWarnings(\"null\") //",
                " \tprivate final @Getter(value = AccessLevel.PROTECTED, onMethod = @__(@SuppressWarnings(\"null\"))) Property property;",
                "diff --git a/src/main/java/org/springframework/data/projection/DefaultMethodInvokingMethodInterceptor.java b/src/main/java/org/springframework/data/projection/DefaultMethodInvokingMethodInterceptor.java",
                "index bebb10fbe..297419cb4 100644",
                "--- a/src/main/java/org/springframework/data/projection/DefaultMethodInvokingMethodInterceptor.java",
                "+++ b/src/main/java/org/springframework/data/projection/DefaultMethodInvokingMethodInterceptor.java",
                "@@ -135,4 +135,4 @@ public class DefaultMethodInvokingMethodInterceptor implements MethodInterceptor",
                "-\t\t\t\treturn getLookup(method.getDeclaringClass()).findSpecial(method.getDeclaringClass(), method.getName(),",
                "-\t\t\t\t\t\tmethodType, method.getDeclaringClass());",
                "+\t\t\t\treturn getLookup(method.getDeclaringClass(), privateLookupIn).findSpecial(method.getDeclaringClass(),",
                "+\t\t\t\t\t\tmethod.getName(), methodType, method.getDeclaringClass());",
                " \t\t\t}",
                "@@ -148,10 +148,10 @@ public class DefaultMethodInvokingMethodInterceptor implements MethodInterceptor",
                "-\t\t\tprivate Lookup getLookup(Class<?> declaringClass) {",
                "-",
                "-\t\t\t\tLookup lookup = MethodHandles.lookup();",
                "+\t\t\tprivate Lookup getLookup(Class<?> declaringClass, @Nullable Method privateLookupIn) {",
                " \t\t\t\tif (privateLookupIn == null) {",
                "-\t\t\t\t\treturn lookup;",
                "+\t\t\t\t\treturn MethodHandles.lookup();",
                " \t\t\t\t}",
                "+\t\t\t\tLookup lookup = MethodHandles.lookup();",
                "+",
                " \t\t\t\ttry {",
                "diff --git a/src/main/java/org/springframework/data/repository/core/support/MethodInvocationValidator.java b/src/main/java/org/springframework/data/repository/core/support/MethodInvocationValidator.java",
                "index 29bea7947..37ad2373b 100644",
                "--- a/src/main/java/org/springframework/data/repository/core/support/MethodInvocationValidator.java",
                "+++ b/src/main/java/org/springframework/data/repository/core/support/MethodInvocationValidator.java",
                "@@ -72,3 +72,3 @@ public class MethodInvocationValidator implements MethodInterceptor {",
                " \t@Override",
                "-\tpublic Object invoke(MethodInvocation invocation) throws Throwable {",
                "+\tpublic Object invoke(@SuppressWarnings(\"null\") MethodInvocation invocation) throws Throwable {",
                "diff --git a/src/main/java/org/springframework/data/repository/init/AbstractRepositoryPopulatorFactoryBean.java b/src/main/java/org/springframework/data/repository/init/AbstractRepositoryPopulatorFactoryBean.java",
                "index 3e1c85832..27d2c3997 100644",
                "--- a/src/main/java/org/springframework/data/repository/init/AbstractRepositoryPopulatorFactoryBean.java",
                "+++ b/src/main/java/org/springframework/data/repository/init/AbstractRepositoryPopulatorFactoryBean.java",
                "@@ -17,2 +17,4 @@ package org.springframework.data.repository.init;",
                "+import javax.annotation.Nonnull;",
                "+",
                " import org.springframework.beans.factory.FactoryBean;",
                "@@ -39,3 +41,3 @@ public abstract class AbstractRepositoryPopulatorFactoryBean",
                "-\tprivate @Nullable Resource[] resources;",
                "+\tprivate Resource[] resources = new Resource[0];",
                " \tprivate @Nullable RepositoryPopulator populator;",
                "@@ -66,2 +68,3 @@ public abstract class AbstractRepositoryPopulatorFactoryBean",
                " \t */",
                "+\t@Nonnull",
                " \t@Override",
                "@@ -80,3 +83,6 @@ public abstract class AbstractRepositoryPopulatorFactoryBean",
                " \t\tinitializer.setResources(resources);",
                "-\t\tinitializer.setApplicationEventPublisher(context);",
                "+",
                "+\t\tif (context != null) {",
                "+\t\t\tinitializer.setApplicationEventPublisher(context);",
                "+\t\t}",
                "@@ -93,3 +99,10 @@ public abstract class AbstractRepositoryPopulatorFactoryBean",
                "+\t\tRepositoryPopulator populator = this.populator;",
                "+",
                "+\t\tif (populator == null) {",
                "+\t\t\tthrow new IllegalStateException(\"RepositoryPopulator was not properly initialized!\");",
                "+\t\t}",
                "+",
                " \t\tif (event.getApplicationContext().equals(context)) {",
                "+",
                " \t\t\tRepositories repositories = new Repositories(event.getApplicationContext());",
                "@@ -101,2 +114,6 @@ public abstract class AbstractRepositoryPopulatorFactoryBean",
                "+\t/*",
                "+\t * (non-Javadoc)",
                "+\t * @see org.springframework.beans.factory.config.AbstractFactoryBean#afterPropertiesSet()",
                "+\t */",
                " \t@Override",
                "diff --git a/src/main/java/org/springframework/data/repository/init/UnmarshallerRepositoryPopulatorFactoryBean.java b/src/main/java/org/springframework/data/repository/init/UnmarshallerRepositoryPopulatorFactoryBean.java",
                "index afb50223d..a72efb254 100644",
                "--- a/src/main/java/org/springframework/data/repository/init/UnmarshallerRepositoryPopulatorFactoryBean.java",
                "+++ b/src/main/java/org/springframework/data/repository/init/UnmarshallerRepositoryPopulatorFactoryBean.java",
                "@@ -46,2 +46,9 @@ public class UnmarshallerRepositoryPopulatorFactoryBean extends AbstractReposito",
                " \tprotected ResourceReader getResourceReader() {",
                "+",
                "+\t\tUnmarshaller unmarshaller = this.unmarshaller;",
                "+",
                "+\t\tif (unmarshaller == null) {",
                "+\t\t\tthrow new IllegalStateException(\"No Unmarshaller configured!\");",
                "+\t\t}",
                "+",
                " \t\treturn new UnmarshallingResourceReader(unmarshaller);",
                "diff --git a/src/main/java/org/springframework/data/repository/query/ReturnedType.java b/src/main/java/org/springframework/data/repository/query/ReturnedType.java",
                "index 7921ec18b..2e11fc34c 100644",
                "--- a/src/main/java/org/springframework/data/repository/query/ReturnedType.java",
                "+++ b/src/main/java/org/springframework/data/repository/query/ReturnedType.java",
                "@@ -292,3 +292,2 @@ public abstract class ReturnedType {",
                "-\t\t@SuppressWarnings({ \"unchecked\", \"rawtypes\" })",
                " \t\tprivate List<String> detectConstructorParameterNames(Class<?> type) {",
                "diff --git a/src/main/java/org/springframework/data/repository/query/parser/AbstractQueryCreator.java b/src/main/java/org/springframework/data/repository/query/parser/AbstractQueryCreator.java",
                "index a10a3a029..c3687cf55 100644",
                "--- a/src/main/java/org/springframework/data/repository/query/parser/AbstractQueryCreator.java",
                "+++ b/src/main/java/org/springframework/data/repository/query/parser/AbstractQueryCreator.java",
                "@@ -25,2 +25,3 @@ import org.springframework.data.repository.query.ParametersParameterAccessor;",
                " import org.springframework.data.repository.query.parser.PartTree.OrPart;",
                "+import org.springframework.lang.Nullable;",
                " import org.springframework.util.Assert;",
                "@@ -103,2 +104,3 @@ public abstract class AbstractQueryCreator<T, S> {",
                " \t */",
                "+\t@Nullable",
                " \tprivate S createCriteria(PartTree tree) {",
                "@@ -110,7 +112,12 @@ public abstract class AbstractQueryCreator<T, S> {",
                "-\t\t\tS criteria = null;",
                "+\t\t\tIterator<Part> parts = node.iterator();",
                "-\t\t\tfor (Part part : node) {",
                "+\t\t\tif (!parts.hasNext()) {",
                "+\t\t\t\tthrow new IllegalStateException(String.format(\"No part found in PartTree %s!\", tree));",
                "+\t\t\t}",
                "+",
                "+\t\t\tS criteria = create(parts.next(), iterator);",
                "-\t\t\t\tcriteria = criteria == null ? create(part, iterator) : and(part, criteria, iterator);",
                "+\t\t\twhile (parts.hasNext()) {",
                "+\t\t\t\tcriteria = and(parts.next(), criteria, iterator);",
                " \t\t\t}",
                "@@ -154,3 +161,3 @@ public abstract class AbstractQueryCreator<T, S> {",
                " \t *",
                "-\t * @param criteria will never be {@literal null}.",
                "+\t * @param criteria can be {@literal null}.",
                " \t * @param sort must not be {@literal null}.",
                "@@ -158,3 +165,3 @@ public abstract class AbstractQueryCreator<T, S> {",
                " \t */",
                "-\tprotected abstract T complete(S criteria, Sort sort);",
                "+\tprotected abstract T complete(@Nullable S criteria, Sort sort);",
                " }",
                "diff --git a/src/main/java/org/springframework/data/repository/query/parser/Part.java b/src/main/java/org/springframework/data/repository/query/parser/Part.java",
                "index f5c9d9387..b6da98f80 100644",
                "--- a/src/main/java/org/springframework/data/repository/query/parser/Part.java",
                "+++ b/src/main/java/org/springframework/data/repository/query/parser/Part.java",
                "@@ -237,6 +237,2 @@ public class Part {",
                "-\t\t\tif (keywords == null) {",
                "-\t\t\t\treturn true;",
                "-\t\t\t}",
                "-",
                " \t\t\tfor (String keyword : keywords) {",
                "diff --git a/src/main/java/org/springframework/data/repository/query/spi/EvaluationContextExtension.java b/src/main/java/org/springframework/data/repository/query/spi/EvaluationContextExtension.java",
                "index 0679c2919..9513ef58b 100644",
                "--- a/src/main/java/org/springframework/data/repository/query/spi/EvaluationContextExtension.java",
                "+++ b/src/main/java/org/springframework/data/repository/query/spi/EvaluationContextExtension.java",
                "@@ -21,2 +21,3 @@ import org.springframework.data.repository.query.ExtensionAwareEvaluationContext",
                " import org.springframework.expression.EvaluationContext;",
                "+import org.springframework.lang.Nullable;",
                "@@ -61,2 +62,3 @@ public interface EvaluationContextExtension {",
                " \t */",
                "+\t@Nullable",
                " \tObject getRootObject();",
                "diff --git a/src/main/java/org/springframework/data/repository/query/spi/EvaluationContextExtensionSupport.java b/src/main/java/org/springframework/data/repository/query/spi/EvaluationContextExtensionSupport.java",
                "index 875c74be6..21e041fe2 100644",
                "--- a/src/main/java/org/springframework/data/repository/query/spi/EvaluationContextExtensionSupport.java",
                "+++ b/src/main/java/org/springframework/data/repository/query/spi/EvaluationContextExtensionSupport.java",
                "@@ -20,2 +20,4 @@ import java.util.Map;",
                "+import org.springframework.lang.Nullable;",
                "+",
                " /**",
                "@@ -51,2 +53,3 @@ public abstract class EvaluationContextExtensionSupport implements EvaluationCon",
                " \t */",
                "+\t@Nullable",
                " \t@Override",
                "diff --git a/src/main/java/org/springframework/data/repository/query/spi/Function.java b/src/main/java/org/springframework/data/repository/query/spi/Function.java",
                "index 97b3006a5..592b19f9a 100644",
                "--- a/src/main/java/org/springframework/data/repository/query/spi/Function.java",
                "+++ b/src/main/java/org/springframework/data/repository/query/spi/Function.java",
                "@@ -23,2 +23,3 @@ import java.util.List;",
                " import org.springframework.core.convert.TypeDescriptor;",
                "+import org.springframework.lang.Nullable;",
                " import org.springframework.util.Assert;",
                "@@ -38,3 +39,3 @@ public class Function {",
                " \tprivate final Method method;",
                "-\tprivate final Object target;",
                "+\tprivate final @Nullable Object target;",
                "@@ -58,3 +59,3 @@ public class Function {",
                " \t */",
                "-\tpublic Function(Method method, Object target) {",
                "+\tpublic Function(Method method, @Nullable Object target) {",
                "@@ -156,3 +157,2 @@ public class Function {",
                " \t * @param other the {@code Function} to compare {@code this} with.",
                "-\t *",
                " \t * @return {@code true} iff name and argument list are the same.",
                "diff --git a/src/main/java/org/springframework/data/transaction/ChainedTransactionManager.java b/src/main/java/org/springframework/data/transaction/ChainedTransactionManager.java",
                "index d47c21337..1a2eebf7e 100644",
                "--- a/src/main/java/org/springframework/data/transaction/ChainedTransactionManager.java",
                "+++ b/src/main/java/org/springframework/data/transaction/ChainedTransactionManager.java",
                "@@ -27,2 +27,3 @@ import org.slf4j.Logger;",
                " import org.slf4j.LoggerFactory;",
                "+import org.springframework.lang.Nullable;",
                " import org.springframework.transaction.CannotCreateTransactionException;",
                "@@ -88,3 +89,3 @@ public class ChainedTransactionManager implements PlatformTransactionManager {",
                " \t */",
                "-\tpublic MultiTransactionStatus getTransaction(TransactionDefinition definition) throws TransactionException {",
                "+\tpublic MultiTransactionStatus getTransaction(@Nullable TransactionDefinition definition) throws TransactionException {",
                "@@ -92,2 +93,6 @@ public class ChainedTransactionManager implements PlatformTransactionManager {",
                "+\t\tif (definition == null) {",
                "+\t\t\treturn mts;",
                "+\t\t}",
                "+",
                " \t\tif (!synchronizationManager.isSynchronizationActive()) {",
                "diff --git a/src/main/java/org/springframework/data/util/NullableUtils.java b/src/main/java/org/springframework/data/util/NullableUtils.java",
                "index 97a32b411..dc47e6cee 100644",
                "--- a/src/main/java/org/springframework/data/util/NullableUtils.java",
                "+++ b/src/main/java/org/springframework/data/util/NullableUtils.java",
                "@@ -264,3 +264,3 @@ public class NullableUtils {",
                "-\t@SuppressWarnings(\"unchecked\")",
                "+\t@SuppressWarnings({ \"unchecked\", \"rawtypes\" })",
                " \tprivate static <T> Optional<Class<T>> findClass(String className) {",
                "diff --git a/src/main/java/org/springframework/data/web/config/SpringDataWebConfiguration.java b/src/main/java/org/springframework/data/web/config/SpringDataWebConfiguration.java",
                "index 73c9e7c53..799d04257 100644",
                "--- a/src/main/java/org/springframework/data/web/config/SpringDataWebConfiguration.java",
                "+++ b/src/main/java/org/springframework/data/web/config/SpringDataWebConfiguration.java",
                "@@ -143,3 +143,3 @@ public class SpringDataWebConfiguration implements WebMvcConfigurer, BeanClassLo",
                " \t\tProxyingHandlerMethodArgumentResolver resolver = new ProxyingHandlerMethodArgumentResolver(",
                "-\t\t\t\tgetRequiredConversionService());",
                "+\t\t\t\tconversionService.getObject());",
                " \t\tresolver.setBeanFactory(context);",
                "@@ -182,13 +182,2 @@ public class SpringDataWebConfiguration implements WebMvcConfigurer, BeanClassLo",
                "-\tprivate ConversionService getRequiredConversionService() {",
                "-",
                "-\t\tConversionService conversionService = this.conversionService.getObject();",
                "-",
                "-\t\tif (conversionService == null) {",
                "-\t\t\tthrow new IllegalStateException(\"No ConversionService configured!\");",
                "-\t\t}",
                "-",
                "-\t\treturn conversionService;",
                "-\t}",
                "-",
                " \tprivate void forwardBeanClassLoader(BeanClassLoaderAware target) {",
                "diff --git a/src/main/java/org/springframework/data/web/querydsl/QuerydslPredicateArgumentResolver.java b/src/main/java/org/springframework/data/web/querydsl/QuerydslPredicateArgumentResolver.java",
                "index fe97d48d1..272f0397f 100644",
                "--- a/src/main/java/org/springframework/data/web/querydsl/QuerydslPredicateArgumentResolver.java",
                "+++ b/src/main/java/org/springframework/data/web/querydsl/QuerydslPredicateArgumentResolver.java",
                "@@ -92,2 +92,3 @@ public class QuerydslPredicateArgumentResolver implements HandlerMethodArgumentR",
                " \t */",
                "+\t@Nullable",
                " \t@Override",
                "@@ -151,2 +152,6 @@ public class QuerydslPredicateArgumentResolver implements HandlerMethodArgumentR",
                "+\t\tif (actualType == null) {",
                "+\t\t\tthrow new IllegalArgumentException(String.format(\"Could not determine domain type from %s!\", source));",
                "+\t\t}",
                "+",
                " \t\tif (source != actualType) {"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/domain/AbstractAggregateRoot.java",
                "src/main/java/org/springframework/data/mapping/model/AbstractPersistentProperty.java",
                "src/main/java/org/springframework/data/projection/DefaultMethodInvokingMethodInterceptor.java",
                "src/main/java/org/springframework/data/repository/core/support/MethodInvocationValidator.java",
                "src/main/java/org/springframework/data/repository/init/AbstractRepositoryPopulatorFactoryBean.java",
                "src/main/java/org/springframework/data/repository/init/UnmarshallerRepositoryPopulatorFactoryBean.java",
                "src/main/java/org/springframework/data/repository/query/ReturnedType.java",
                "src/main/java/org/springframework/data/repository/query/parser/AbstractQueryCreator.java",
                "src/main/java/org/springframework/data/repository/query/parser/Part.java",
                "src/main/java/org/springframework/data/repository/query/spi/EvaluationContextExtension.java",
                "src/main/java/org/springframework/data/repository/query/spi/EvaluationContextExtensionSupport.java",
                "src/main/java/org/springframework/data/repository/query/spi/Function.java",
                "src/main/java/org/springframework/data/transaction/ChainedTransactionManager.java",
                "src/main/java/org/springframework/data/util/NullableUtils.java",
                "src/main/java/org/springframework/data/web/config/SpringDataWebConfiguration.java",
                "src/main/java/org/springframework/data/web/querydsl/QuerydslPredicateArgumentResolver.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "34cadd0b9bc0d5a2b195391b35102ee58c1db293"
                ]
            ],
            "tags": [
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.3.RELEASE",
                "2.0.4.RELEASE",
                "2.0.5.RELEASE",
                "2.0.6.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: projection, property",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "480294bb5c50add969ea7b47df5c6e789cad9caa",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1517583982,
            "hunks": 6,
            "message": "DATACMNS-1252 - Improved Vavr collection handling to convert between collection types. If a query method now uses e.g. a Vavr Set as return type, we now also use a potential source List as input for the LinkedHashSet, even if that changes the characteristics (duplicate policy etc.) of the result. This is consistent with our general handling of collections as we're using a Spring ConversionService for collection mapping anyway. In general the new conversion algorithm is driven by the expected target type first: - i.v.c.Seq -> i.v.c.List - i.v.c.Set -> i.v.c.LinkedHashSet - i.v.c.Map -> i.v.c.LinkedHashMap If none of the declared types is assignable we fall back to the previous algorithm choosing an implementation as close as possible to the original source value: - j.u.List -> i.v.c.List - j.u.Set  -> i.v.c.LinkedHashSet - j.u.Map  -> i.v.c.LinkedHashMap Applied the same fixes to the deprecated Javaslang support. Removed some obsolete full qualifications of types.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/repository/util/JavaslangCollections.java b/src/main/java/org/springframework/data/repository/util/JavaslangCollections.java",
                "index 074fd1c93..7e9b5597b 100644",
                "--- a/src/main/java/org/springframework/data/repository/util/JavaslangCollections.java",
                "+++ b/src/main/java/org/springframework/data/repository/util/JavaslangCollections.java",
                "@@ -111,3 +111,20 @@ class JavaslangCollections {",
                " \t\t\t@Override",
                "-\t\t\tpublic Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {",
                "+\t\t\tpublic Object convert(Object source, TypeDescriptor sourceDescriptor, TypeDescriptor targetDescriptor) {",
                "+",
                "+\t\t\t\tClass<?> targetType = targetDescriptor.getType();",
                "+",
                "+\t\t\t\tif (javaslang.collection.Seq.class.isAssignableFrom(targetType)) {",
                "+\t\t\t\t\treturn ReflectionUtils.invokeMethod(LIST_FACTORY_METHOD, null, source);",
                "+\t\t\t\t}",
                "+",
                "+\t\t\t\tif (javaslang.collection.Set.class.isAssignableFrom(targetType)) {",
                "+\t\t\t\t\treturn ReflectionUtils.invokeMethod(SET_FACTORY_METHOD, null, source);",
                "+\t\t\t\t}",
                "+",
                "+\t\t\t\tif (javaslang.collection.Map.class.isAssignableFrom(targetType)) {",
                "+\t\t\t\t\treturn ReflectionUtils.invokeMethod(MAP_FACTORY_METHOD, null, source);",
                "+\t\t\t\t}",
                "+",
                "+\t\t\t\t// No dedicated type asked for, probably Traversable.",
                "+\t\t\t\t// Try to stay as close to the source value.",
                "@@ -117,3 +134,3 @@ class JavaslangCollections {",
                "-\t\t\t\tif (source instanceof java.util.Set) {",
                "+\t\t\t\tif (source instanceof Set) {",
                " \t\t\t\t\treturn ReflectionUtils.invokeMethod(SET_FACTORY_METHOD, null, source);",
                "@@ -121,3 +138,3 @@ class JavaslangCollections {",
                "-\t\t\t\tif (source instanceof java.util.Map) {",
                "+\t\t\t\tif (source instanceof Map) {",
                " \t\t\t\t\treturn ReflectionUtils.invokeMethod(MAP_FACTORY_METHOD, null, source);",
                "diff --git a/src/main/java/org/springframework/data/repository/util/VavrCollections.java b/src/main/java/org/springframework/data/repository/util/VavrCollections.java",
                "index e1de51c96..872e164bc 100644",
                "--- a/src/main/java/org/springframework/data/repository/util/VavrCollections.java",
                "+++ b/src/main/java/org/springframework/data/repository/util/VavrCollections.java",
                "@@ -112,3 +112,20 @@ class VavrCollections {",
                " \t\t\t@Override",
                "-\t\t\tpublic Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {",
                "+\t\t\tpublic Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetDescriptor) {",
                "+",
                "+\t\t\t\tClass<?> targetType = targetDescriptor.getType();",
                "+",
                "+\t\t\t\tif (io.vavr.collection.Seq.class.isAssignableFrom(targetType)) {",
                "+\t\t\t\t\treturn ReflectionUtils.invokeMethod(LIST_FACTORY_METHOD, null, source);",
                "+\t\t\t\t}",
                "+",
                "+\t\t\t\tif (io.vavr.collection.Set.class.isAssignableFrom(targetType)) {",
                "+\t\t\t\t\treturn ReflectionUtils.invokeMethod(SET_FACTORY_METHOD, null, source);",
                "+\t\t\t\t}",
                "+",
                "+\t\t\t\tif (io.vavr.collection.Map.class.isAssignableFrom(targetType)) {",
                "+\t\t\t\t\treturn ReflectionUtils.invokeMethod(MAP_FACTORY_METHOD, null, source);",
                "+\t\t\t\t}",
                "+",
                "+\t\t\t\t// No dedicated type asked for, probably Traversable.",
                "+\t\t\t\t// Try to stay as close to the source value.",
                "@@ -118,3 +135,3 @@ class VavrCollections {",
                "-\t\t\t\tif (source instanceof java.util.Set) {",
                "+\t\t\t\tif (source instanceof Set) {",
                " \t\t\t\t\treturn ReflectionUtils.invokeMethod(SET_FACTORY_METHOD, null, source);",
                "@@ -122,3 +139,3 @@ class VavrCollections {",
                "-\t\t\t\tif (source instanceof java.util.Map) {",
                "+\t\t\t\tif (source instanceof Map) {",
                " \t\t\t\t\treturn ReflectionUtils.invokeMethod(MAP_FACTORY_METHOD, null, source);"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/repository/util/JavaslangCollections.java",
                "src/main/java/org/springframework/data/repository/util/VavrCollections.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "30033b22bc17c7832b24ef448a67301f4621b9a8"
                ],
                [
                    "no-tag",
                    "d5f57f2e5966e97c66413ea80e02d87244b9981a"
                ]
            ],
            "tags": [
                "1.13.11.RELEASE",
                "1.13.12.RELEASE",
                "1.13.13.RELEASE",
                "1.13.14.RELEASE",
                "1.13.15.RELEASE",
                "1.13.16.RELEASE",
                "1.13.17.RELEASE",
                "1.13.18.RELEASE",
                "1.13.19.RELEASE",
                "1.13.20.RELEASE",
                "1.13.21.RELEASE",
                "1.13.22.RELEASE",
                "1.13.23.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: version",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e79d70cb13ec44d068da223fdffa387ab0e1ba7f",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1510910219,
            "hunks": 2,
            "message": "DATACMNS-1215 - Fixed repository lookup for proxy domain classes. We now consistently use the user class for repository (metadata) lookup in Repositories.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/repository/support/Repositories.java b/src/main/java/org/springframework/data/repository/support/Repositories.java",
                "index 42692124c..63398ab30 100644",
                "--- a/src/main/java/org/springframework/data/repository/support/Repositories.java",
                "+++ b/src/main/java/org/springframework/data/repository/support/Repositories.java",
                "@@ -123,3 +123,5 @@ public class Repositories implements Iterable<Class<?>> {",
                "-\t\treturn repositoryFactoryInfos.containsKey(domainClass);",
                "+\t\tClass<?> userClass = ClassUtils.getUserClass(domainClass);",
                "+",
                "+\t\treturn repositoryFactoryInfos.containsKey(userClass);",
                " \t}",
                "@@ -136,3 +138,5 @@ public class Repositories implements Iterable<Class<?>> {",
                "-\t\tString repositoryBeanName = repositoryBeanNames.get(domainClass);",
                "+\t\tClass<?> userClass = ClassUtils.getUserClass(domainClass);",
                "+\t\tString repositoryBeanName = repositoryBeanNames.get(userClass);",
                "+",
                " \t\treturn repositoryBeanName == null || beanFactory == null ? null : beanFactory.getBean(repositoryBeanName);"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/repository/support/Repositories.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "1e5aad94cfcaad39b5eab009556c9cb39c005ab4"
                ],
                [
                    "no-tag",
                    "0237760345faa011bdc6639ec838790be3d41e9b"
                ]
            ],
            "tags": [
                "1.13.10.RELEASE",
                "1.13.11.RELEASE",
                "1.13.12.RELEASE",
                "1.13.13.RELEASE",
                "1.13.14.RELEASE",
                "1.13.15.RELEASE",
                "1.13.16.RELEASE",
                "1.13.17.RELEASE",
                "1.13.18.RELEASE",
                "1.13.19.RELEASE",
                "1.13.20.RELEASE",
                "1.13.21.RELEASE",
                "1.13.22.RELEASE",
                "1.13.23.RELEASE",
                "1.13.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: user",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c777363f3d0974ad33720bd837f0b1401f2bc7da",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1516292563,
            "hunks": 7,
            "message": "DATACMNS-1246 - Minor optimization in QueryExecutorMethodInterceptor. We now prevent the superfluous creation of a MethodParameter and TypeDescriptor instance in repository method execution in case the value to be returned already is an instance of the expected method return type.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/repository/core/support/QueryExecutionResultHandler.java b/src/main/java/org/springframework/data/repository/core/support/QueryExecutionResultHandler.java",
                "index 284e8e8f1..c0f38e352 100644",
                "--- a/src/main/java/org/springframework/data/repository/core/support/QueryExecutionResultHandler.java",
                "+++ b/src/main/java/org/springframework/data/repository/core/support/QueryExecutionResultHandler.java",
                "@@ -17,2 +17,3 @@ package org.springframework.data.repository.core.support;",
                "+import java.lang.reflect.Method;",
                " import java.util.Map;",
                "@@ -21,2 +22,3 @@ import java.util.Optional;",
                " import org.springframework.core.CollectionFactory;",
                "+import org.springframework.core.MethodParameter;",
                " import org.springframework.core.convert.TypeDescriptor;",
                "@@ -52,2 +54,22 @@ class QueryExecutionResultHandler {",
                "+\t/**",
                "+\t * Post-processes the given result of a query invocation to match the return type of the given method.",
                "+\t *",
                "+\t * @param result can be {@literal null}.",
                "+\t * @param metho must not be {@literal null}.",
                "+\t * @return",
                "+\t */",
                "+\t@Nullable",
                "+\tpublic Object postProcessInvocationResult(@Nullable Object result, Method method) {",
                "+",
                "+\t\tif (method.getReturnType().isInstance(result)) {",
                "+\t\t\treturn result;",
                "+\t\t}",
                "+",
                "+\t\tMethodParameter parameter = new MethodParameter(method, -1);",
                "+\t\tTypeDescriptor methodReturnTypeDescriptor = TypeDescriptor.nested(parameter, 0);",
                "+",
                "+\t\treturn postProcessInvocationResult(result, methodReturnTypeDescriptor);",
                "+\t}",
                "+",
                " \t/**",
                "@@ -60,3 +82,3 @@ class QueryExecutionResultHandler {",
                " \t@Nullable",
                "-\tpublic Object postProcessInvocationResult(@Nullable Object result, @Nullable TypeDescriptor returnTypeDescriptor) {",
                "+\tObject postProcessInvocationResult(@Nullable Object result, @Nullable TypeDescriptor returnTypeDescriptor) {",
                "diff --git a/src/main/java/org/springframework/data/repository/core/support/RepositoryFactorySupport.java b/src/main/java/org/springframework/data/repository/core/support/RepositoryFactorySupport.java",
                "index dbdc42c2a..22ff9a0ee 100644",
                "--- a/src/main/java/org/springframework/data/repository/core/support/RepositoryFactorySupport.java",
                "+++ b/src/main/java/org/springframework/data/repository/core/support/RepositoryFactorySupport.java",
                "@@ -43,5 +43,3 @@ import org.springframework.beans.factory.BeanFactory;",
                " import org.springframework.beans.factory.BeanFactoryAware;",
                "-import org.springframework.core.MethodParameter;",
                " import org.springframework.core.ResolvableType;",
                "-import org.springframework.core.convert.TypeDescriptor;",
                " import org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor;",
                "@@ -581,8 +579,3 @@ public abstract class RepositoryFactorySupport implements BeanClassLoaderAware,",
                "-\t\t\t// Looking up the TypeDescriptor for the return type - yes, this way o.O",
                "-\t\t\tMethod method = invocation.getMethod();",
                "-\t\t\tMethodParameter parameter = new MethodParameter(method, -1);",
                "-\t\t\tTypeDescriptor methodReturnTypeDescriptor = TypeDescriptor.nested(parameter, 0);",
                "-",
                "-\t\t\treturn resultHandler.postProcessInvocationResult(result, methodReturnTypeDescriptor);",
                "+\t\t\treturn resultHandler.postProcessInvocationResult(result, invocation.getMethod());",
                " \t\t}"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/repository/core/support/QueryExecutionResultHandler.java",
                "src/main/java/org/springframework/data/repository/core/support/RepositoryFactorySupport.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "b7e7615c75f4e5866a040cdcea8c5a9465420636"
                ],
                [
                    "no-tag",
                    "69cb5c6653abd2ef242321d32c3a4697323571fc"
                ]
            ],
            "tags": [
                "2.1.0.M1",
                "2.1.0.M2",
                "2.1.0.M3",
                "2.1.0.RC1",
                "2.1.0.RC2",
                "2.1.0.RELEASE",
                "2.1.1.RELEASE",
                "2.1.10.RELEASE",
                "2.1.11.RELEASE",
                "2.1.12.RELEASE",
                "2.1.13.RELEASE",
                "2.1.14.RELEASE",
                "2.1.15.RELEASE",
                "2.1.16.RELEASE",
                "2.1.17.RELEASE",
                "2.1.18.RELEASE",
                "2.1.19.RELEASE",
                "2.1.2.RELEASE",
                "2.1.20.RELEASE",
                "2.1.21.RELEASE",
                "2.1.3.RELEASE",
                "2.1.4.RELEASE",
                "2.1.5.RELEASE",
                "2.1.6.RELEASE",
                "2.1.7.RELEASE",
                "2.1.8.RELEASE",
                "2.1.9.RELEASE",
                "2.2.0.M1",
                "2.2.0.M2",
                "2.2.0.M3",
                "2.2.0.M4",
                "2.2.0.RC1",
                "2.2.0.RC2",
                "2.2.0.RC3",
                "2.2.0.RELEASE",
                "2.2.1.RELEASE",
                "2.2.10.RELEASE",
                "2.2.11.RELEASE",
                "2.2.12.RELEASE",
                "2.2.13.RELEASE",
                "2.2.2.RELEASE",
                "2.2.3.RELEASE",
                "2.2.4.RELEASE",
                "2.2.5.RELEASE",
                "2.2.6.RELEASE",
                "2.2.7.RELEASE",
                "2.2.8.RELEASE",
                "2.2.9.RELEASE",
                "2.3.0.M1",
                "2.3.0.M2",
                "2.3.0.M3",
                "2.3.0.M4",
                "2.3.0.RC1",
                "2.3.0.RC2",
                "2.3.0.RELEASE",
                "2.3.1.RELEASE",
                "2.3.2.RELEASE",
                "2.3.3.RELEASE",
                "2.3.4.RELEASE",
                "2.3.5.RELEASE",
                "2.3.6.RELEASE",
                "2.3.7.RELEASE",
                "2.3.8.RELEASE",
                "2.3.9.RELEASE",
                "2.4.0",
                "2.4.0-M1",
                "2.4.0-M2",
                "2.4.0-RC1",
                "2.4.0-RC2",
                "2.4.1",
                "2.4.10",
                "2.4.11",
                "2.4.12",
                "2.4.13",
                "2.4.14",
                "2.4.15",
                "2.4.2",
                "2.4.3",
                "2.4.4",
                "2.4.5",
                "2.4.6",
                "2.4.7",
                "2.4.8",
                "2.4.9",
                "2.5.0",
                "2.5.0-M1",
                "2.5.0-M2",
                "2.5.0-M3",
                "2.5.0-M4",
                "2.5.0-M5",
                "2.5.0-RC1",
                "2.5.1",
                "2.5.10",
                "2.5.11",
                "2.5.12",
                "2.5.2",
                "2.5.3",
                "2.5.4",
                "2.5.5",
                "2.5.6",
                "2.5.7",
                "2.5.8",
                "2.5.9",
                "2.6.0",
                "2.6.0-M1",
                "2.6.0-M2",
                "2.6.0-M3",
                "2.6.0-RC1",
                "2.6.1",
                "2.6.10",
                "2.6.2",
                "2.6.3",
                "2.6.4",
                "2.6.5",
                "2.6.6",
                "2.6.7",
                "2.6.8",
                "2.6.9",
                "2.7.0",
                "2.7.0-M1",
                "2.7.0-M2",
                "2.7.0-M3",
                "2.7.0-M4",
                "2.7.0-RC1",
                "2.7.1",
                "2.7.10",
                "2.7.11",
                "2.7.12",
                "2.7.13",
                "2.7.14",
                "2.7.15",
                "2.7.16",
                "2.7.17",
                "2.7.18",
                "2.7.2",
                "2.7.3",
                "2.7.4",
                "2.7.5",
                "2.7.6",
                "2.7.7",
                "2.7.8",
                "2.7.9",
                "3.0.0",
                "3.0.0-M1",
                "3.0.0-M2",
                "3.0.0-M3",
                "3.0.0-M4",
                "3.0.0-M5",
                "3.0.0-M6",
                "3.0.0-RC1",
                "3.0.0-RC2",
                "3.0.1",
                "3.0.10",
                "3.0.11",
                "3.0.12",
                "3.0.2",
                "3.0.3",
                "3.0.4",
                "3.0.5",
                "3.0.6",
                "3.0.7",
                "3.0.8",
                "3.0.9",
                "3.1.0",
                "3.1.0-M1",
                "3.1.0-M2",
                "3.1.0-M3",
                "3.1.0-RC1",
                "3.1.1",
                "3.1.10",
                "3.1.11",
                "3.1.12",
                "3.1.2",
                "3.1.3",
                "3.1.4",
                "3.1.5",
                "3.1.6",
                "3.1.7",
                "3.1.8",
                "3.1.9",
                "3.2.0",
                "3.2.0-M1",
                "3.2.0-M2",
                "3.2.0-M3",
                "3.2.0-RC1",
                "3.2.1",
                "3.2.2",
                "3.2.3",
                "3.2.4",
                "3.2.5",
                "3.2.6",
                "3.2.7",
                "3.3.0",
                "3.3.0-M1",
                "3.3.0-M2",
                "3.3.0-RC1",
                "3.3.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: parameter",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6199fed1c13d228f8a6c8c479f6273f869261f96",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1510846146,
            "hunks": 1,
            "message": "DATACMNS-1214 - Fixed AbstractMappingContext.getPersistentEntity(PersistentProperty) to now return null for non-entities. Previously, a call to AbstractMappingContext.getPersistentEntity(PersistentProperty) would've added potentially leniently added the type of the given PersistentProperty, no matter whether it's actually considered to be an entity in the first place. We now defensively check for whether the given property is to be considered an entity (taking potentially registered converters into account) before the potentially entity-creating by-type lookup.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/mapping/context/AbstractMappingContext.java b/src/main/java/org/springframework/data/mapping/context/AbstractMappingContext.java",
                "index 2cc249242..387d5ce9a 100644",
                "--- a/src/main/java/org/springframework/data/mapping/context/AbstractMappingContext.java",
                "+++ b/src/main/java/org/springframework/data/mapping/context/AbstractMappingContext.java",
                "@@ -197,2 +197,6 @@ public abstract class AbstractMappingContext<E extends MutablePersistentEntity<?",
                "+\t\tif (!persistentProperty.isEntity()) {",
                "+\t\t\treturn null;",
                "+\t\t}",
                "+",
                " \t\tTypeInformation<?> typeInfo = persistentProperty.getTypeInformation();"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/mapping/context/AbstractMappingContext.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "39c67e3fefd54d77834949b1b2037fb103e3ad61"
                ],
                [
                    "no-tag",
                    "e2bac30be45692a4a5b98faa7ce6461f0c915c38"
                ]
            ],
            "tags": [
                "1.13.10.RELEASE",
                "1.13.11.RELEASE",
                "1.13.12.RELEASE",
                "1.13.13.RELEASE",
                "1.13.14.RELEASE",
                "1.13.15.RELEASE",
                "1.13.16.RELEASE",
                "1.13.17.RELEASE",
                "1.13.18.RELEASE",
                "1.13.19.RELEASE",
                "1.13.20.RELEASE",
                "1.13.21.RELEASE",
                "1.13.22.RELEASE",
                "1.13.23.RELEASE",
                "1.13.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: entity, property",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b7a9b09b7cc8a4aebdf3e86c332a29afd04b3d27",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1507646144,
            "hunks": 4,
            "message": "DATACMNS-901 - AbstractMappingContext publishes entity added events outside the write lock. Previously, the publication of the event that indicated a PersistentEntity having been added to it took place before the write lock over the entities had been released. We now keep the lock smaller and publish the addition event *after* the lock has been released.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/mapping/context/AbstractMappingContext.java b/src/main/java/org/springframework/data/mapping/context/AbstractMappingContext.java",
                "index 274ebb8ed..2cc249242 100644",
                "--- a/src/main/java/org/springframework/data/mapping/context/AbstractMappingContext.java",
                "+++ b/src/main/java/org/springframework/data/mapping/context/AbstractMappingContext.java",
                "@@ -308,2 +308,3 @@ public abstract class AbstractMappingContext<E extends MutablePersistentEntity<?",
                " \t\tClass<?> type = typeInformation.getType();",
                "+\t\tE entity = null;",
                "@@ -313,3 +314,3 @@ public abstract class AbstractMappingContext<E extends MutablePersistentEntity<?",
                "-\t\t\tfinal E entity = createPersistentEntity(typeInformation);",
                "+\t\t\tentity = createPersistentEntity(typeInformation);",
                "@@ -342,9 +343,2 @@ public abstract class AbstractMappingContext<E extends MutablePersistentEntity<?",
                "-\t\t\t// Inform listeners",
                "-\t\t\tif (null != applicationEventPublisher) {",
                "-\t\t\t\tapplicationEventPublisher.publishEvent(new MappingContextEvent<E, P>(this, entity));",
                "-\t\t\t}",
                "-",
                "-\t\t\treturn entity;",
                "-",
                " \t\t} catch (BeansException e) {",
                "@@ -354,2 +348,9 @@ public abstract class AbstractMappingContext<E extends MutablePersistentEntity<?",
                " \t\t}",
                "+",
                "+\t\t// Inform listeners",
                "+\t\tif (applicationEventPublisher != null && entity != null) {",
                "+\t\t\tapplicationEventPublisher.publishEvent(new MappingContextEvent<E, P>(this, entity));",
                "+\t\t}",
                "+",
                "+\t\treturn entity;",
                " \t}"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/mapping/context/AbstractMappingContext.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "efdfee50fe9e2d5049e1588c85b34bc7df21272c"
                ],
                [
                    "no-tag",
                    "370b37fbfdd9923eed5cb0a05d073d7d7789e7c7"
                ],
                [
                    "no-tag",
                    "ccd8e2a2095505ae8d6c93418bdb423e09128e1c"
                ]
            ],
            "tags": [
                "1.13.10.RELEASE",
                "1.13.11.RELEASE",
                "1.13.12.RELEASE",
                "1.13.13.RELEASE",
                "1.13.14.RELEASE",
                "1.13.15.RELEASE",
                "1.13.16.RELEASE",
                "1.13.17.RELEASE",
                "1.13.18.RELEASE",
                "1.13.19.RELEASE",
                "1.13.20.RELEASE",
                "1.13.21.RELEASE",
                "1.13.22.RELEASE",
                "1.13.23.RELEASE",
                "1.13.8.RELEASE",
                "1.13.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: entity",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "91954e1f0dd6208274765e7cebfcbeae56f2fcb7",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1512138023,
            "hunks": 1,
            "message": "DATACMNS-1229 - Upgrade to XmlBeam 1.4.14.",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 00c23bef1..1382fe3be 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -22,3 +22,3 @@",
                " \t\t<scala>2.11.7</scala>",
                "-\t\t<xmlbeam>1.4.12</xmlbeam>",
                "+\t\t<xmlbeam>1.4.14</xmlbeam>",
                " \t</properties>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "9f220d5c159cc78b0d701829b3074366a4e8fa08"
                ],
                [
                    "no-tag",
                    "4a5454652e4e9743c42c773d745b593caee0afdb"
                ]
            ],
            "tags": [
                "1.13.10.RELEASE",
                "1.13.11.RELEASE",
                "1.13.12.RELEASE",
                "1.13.13.RELEASE",
                "1.13.14.RELEASE",
                "1.13.15.RELEASE",
                "1.13.16.RELEASE",
                "1.13.17.RELEASE",
                "1.13.18.RELEASE",
                "1.13.19.RELEASE",
                "1.13.20.RELEASE",
                "1.13.21.RELEASE",
                "1.13.22.RELEASE",
                "1.13.23.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: xmlbeam",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "95959fbe67ced7bed56e778ebc98f38893ed093b",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1511795554,
            "hunks": 1,
            "message": "DATACMNS-1202 - Release version 2.0.2 (Kay SR2).",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 1d44da3a5..fb7704519 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -7,3 +7,3 @@",
                " \t<artifactId>spring-data-commons</artifactId>",
                "-\t<version>2.0.2.BUILD-SNAPSHOT</version>",
                "+\t<version>2.0.2.RELEASE</version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.2.RELEASE",
                "2.0.3.RELEASE",
                "2.0.4.RELEASE",
                "2.0.5.RELEASE",
                "2.0.6.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: version",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "53116d64e3a36c13264b05ab287fefa1c2c4c826",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1511792226,
            "hunks": 1,
            "message": "DATACMNS-1195 - Release version 1.13.9 (Ingalls SR9).",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 799e12dbf..83c874505 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -7,3 +7,3 @@",
                " \t<artifactId>spring-data-commons</artifactId>",
                "-\t<version>1.13.9.BUILD-SNAPSHOT</version>",
                "+\t<version>1.13.9.RELEASE</version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.13.10.RELEASE",
                "1.13.11.RELEASE",
                "1.13.12.RELEASE",
                "1.13.13.RELEASE",
                "1.13.14.RELEASE",
                "1.13.15.RELEASE",
                "1.13.16.RELEASE",
                "1.13.17.RELEASE",
                "1.13.18.RELEASE",
                "1.13.19.RELEASE",
                "1.13.20.RELEASE",
                "1.13.21.RELEASE",
                "1.13.22.RELEASE",
                "1.13.23.RELEASE",
                "1.13.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: version",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "73f4ff3dcfbec11d5562102d8f716c0b9b1583bb",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1507732962,
            "hunks": 1,
            "message": "DATACMNS-1155 - Release version 1.13.8 (Ingalls SR8).",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index f4044a405..6a333549b 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -7,3 +7,3 @@",
                " \t<artifactId>spring-data-commons</artifactId>",
                "-\t<version>1.13.8.BUILD-SNAPSHOT</version>",
                "+\t<version>1.13.8.RELEASE</version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.13.10.RELEASE",
                "1.13.11.RELEASE",
                "1.13.12.RELEASE",
                "1.13.13.RELEASE",
                "1.13.14.RELEASE",
                "1.13.15.RELEASE",
                "1.13.16.RELEASE",
                "1.13.17.RELEASE",
                "1.13.18.RELEASE",
                "1.13.19.RELEASE",
                "1.13.20.RELEASE",
                "1.13.21.RELEASE",
                "1.13.22.RELEASE",
                "1.13.23.RELEASE",
                "1.13.8.RELEASE",
                "1.13.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: version",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "4a2df6299ba32cc850e484276878baae1bd75165",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1515582370,
            "hunks": 10,
            "message": "DATACMNS-1241 - Improved Lazy. Expanded generics to make sure we can take Functions and Suppliers of sub- and supertypes properly. Added factory method to create a Lazy from a fixed value. Added method to access Optional result. Added methods to allow chaining Lazy instances via \u00e2\u0080\u00a6.or(\u00e2\u0080\u00a6). Reduced visibility of \u00e2\u0080\u00a6.orElseGet(\u00e2\u0080\u00a6) as it basically equates to \u00e2\u0080\u00a6.or(\u00e2\u0080\u00a6).get(Optional)(). More unit tests.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/util/Lazy.java b/src/main/java/org/springframework/data/util/Lazy.java",
                "index 789f966f7..840c2d285 100644",
                "--- a/src/main/java/org/springframework/data/util/Lazy.java",
                "+++ b/src/main/java/org/springframework/data/util/Lazy.java",
                "@@ -20,2 +20,3 @@ import lombok.RequiredArgsConstructor;",
                "+import java.util.Optional;",
                " import java.util.function.Function;",
                "@@ -39,3 +40,3 @@ public class Lazy<T> implements Supplier<T> {",
                "-\tprivate final Supplier<T> supplier;",
                "+\tprivate final Supplier<? extends T> supplier;",
                " \tprivate @Nullable T value = null;",
                "@@ -50,3 +51,3 @@ public class Lazy<T> implements Supplier<T> {",
                " \t */",
                "-\tpublic static <T> Lazy<T> of(Supplier<T> supplier) {",
                "+\tpublic static <T> Lazy<T> of(Supplier<? extends T> supplier) {",
                " \t\treturn new Lazy<>(supplier);",
                "@@ -54,2 +55,16 @@ public class Lazy<T> implements Supplier<T> {",
                "+\t/**",
                "+\t * Creates a new {@link Lazy} to return the given value.",
                "+\t *",
                "+\t * @param <T> the type of the value to return eventually.",
                "+\t * @param value the value to return.",
                "+\t * @return",
                "+\t */",
                "+\tpublic static <T> Lazy<T> of(T value) {",
                "+",
                "+\t\tAssert.notNull(value, \"Value must not be null!\");",
                "+",
                "+\t\treturn new Lazy<>(() -> value);",
                "+\t}",
                "+",
                " \t/**",
                "@@ -71,2 +86,38 @@ public class Lazy<T> implements Supplier<T> {",
                "+\t/**",
                "+\t * Returns the {@link Optional} value created by the configured {@link Supplier}, allowing the absence of values in",
                "+\t * contrast to {@link #get()}. Will return the calculated instance for subsequent lookups.",
                "+\t * ",
                "+\t * @return",
                "+\t */",
                "+\tpublic Optional<T> getOptional() {",
                "+\t\treturn Optional.ofNullable(getNullable());",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Returns a new Lazy that will consume the given supplier in case the current one does not yield in a result.",
                "+\t * ",
                "+\t * @param supplier must not be {@literal null}.",
                "+\t * @return",
                "+\t */",
                "+\tpublic Lazy<T> or(Supplier<? extends T> supplier) {",
                "+",
                "+\t\tAssert.notNull(supplier, \"Supplier must not be null!\");",
                "+",
                "+\t\treturn Lazy.of(() -> orElseGet(supplier));",
                "+\t}",
                "+",
                "+\t/**",
                "+\t * Returns a new Lazy that will return the given value in case the current one does not yield in a result.",
                "+\t * ",
                "+\t * @param supplier must not be {@literal null}.",
                "+\t * @return",
                "+\t */",
                "+\tpublic Lazy<T> or(T value) {",
                "+",
                "+\t\tAssert.notNull(value, \"Value must not be null!\");",
                "+",
                "+\t\treturn Lazy.of(() -> orElse(value));",
                "+\t}",
                "+",
                " \t/**",
                "@@ -80,3 +131,6 @@ public class Lazy<T> implements Supplier<T> {",
                " \tpublic T orElse(@Nullable T value) {",
                "-\t\treturn orElseGet(() -> value);",
                "+",
                "+\t\tT nullable = getNullable();",
                "+",
                "+\t\treturn nullable == null ? value : nullable;",
                " \t}",
                "@@ -91,3 +145,3 @@ public class Lazy<T> implements Supplier<T> {",
                " \t@Nullable",
                "-\tpublic T orElseGet(Supplier<T> supplier) {",
                "+\tprivate T orElseGet(Supplier<? extends T> supplier) {",
                "@@ -95,5 +149,5 @@ public class Lazy<T> implements Supplier<T> {",
                "-\t\tT nullable = getNullable();",
                "+\t\tT value = getNullable();",
                "-\t\treturn nullable == null ? supplier.get() : nullable;",
                "+\t\treturn value == null ? supplier.get() : value;",
                " \t}",
                "@@ -106,3 +160,3 @@ public class Lazy<T> implements Supplier<T> {",
                " \t */",
                "-\tpublic <S> Lazy<S> map(Function<T, S> function) {",
                "+\tpublic <S> Lazy<S> map(Function<? super T, ? extends S> function) {",
                "@@ -119,3 +173,3 @@ public class Lazy<T> implements Supplier<T> {",
                " \t */",
                "-\tpublic <S> Lazy<S> flatMap(Function<T, Lazy<S>> function) {",
                "+\tpublic <S> Lazy<S> flatMap(Function<? super T, Lazy<? extends S>> function) {"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/util/Lazy.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.1.0.M1",
                "2.1.0.M2",
                "2.1.0.M3",
                "2.1.0.RC1",
                "2.1.0.RC2",
                "2.1.0.RELEASE",
                "2.1.1.RELEASE",
                "2.1.10.RELEASE",
                "2.1.11.RELEASE",
                "2.1.12.RELEASE",
                "2.1.13.RELEASE",
                "2.1.14.RELEASE",
                "2.1.15.RELEASE",
                "2.1.16.RELEASE",
                "2.1.17.RELEASE",
                "2.1.18.RELEASE",
                "2.1.19.RELEASE",
                "2.1.2.RELEASE",
                "2.1.20.RELEASE",
                "2.1.21.RELEASE",
                "2.1.3.RELEASE",
                "2.1.4.RELEASE",
                "2.1.5.RELEASE",
                "2.1.6.RELEASE",
                "2.1.7.RELEASE",
                "2.1.8.RELEASE",
                "2.1.9.RELEASE",
                "2.2.0.M1",
                "2.2.0.M2",
                "2.2.0.M3",
                "2.2.0.M4",
                "2.2.0.RC1",
                "2.2.0.RC2",
                "2.2.0.RC3",
                "2.2.0.RELEASE",
                "2.2.1.RELEASE",
                "2.2.10.RELEASE",
                "2.2.11.RELEASE",
                "2.2.12.RELEASE",
                "2.2.13.RELEASE",
                "2.2.2.RELEASE",
                "2.2.3.RELEASE",
                "2.2.4.RELEASE",
                "2.2.5.RELEASE",
                "2.2.6.RELEASE",
                "2.2.7.RELEASE",
                "2.2.8.RELEASE",
                "2.2.9.RELEASE",
                "2.3.0.M1",
                "2.3.0.M2",
                "2.3.0.M3",
                "2.3.0.M4",
                "2.3.0.RC1",
                "2.3.0.RC2",
                "2.3.0.RELEASE",
                "2.3.1.RELEASE",
                "2.3.2.RELEASE",
                "2.3.3.RELEASE",
                "2.3.4.RELEASE",
                "2.3.5.RELEASE",
                "2.3.6.RELEASE",
                "2.3.7.RELEASE",
                "2.3.8.RELEASE",
                "2.3.9.RELEASE",
                "2.4.0",
                "2.4.0-M1",
                "2.4.0-M2",
                "2.4.0-RC1",
                "2.4.0-RC2",
                "2.4.1",
                "2.4.10",
                "2.4.11",
                "2.4.12",
                "2.4.13",
                "2.4.14",
                "2.4.15",
                "2.4.2",
                "2.4.3",
                "2.4.4",
                "2.4.5",
                "2.4.6",
                "2.4.7",
                "2.4.8",
                "2.4.9",
                "2.5.0",
                "2.5.0-M1",
                "2.5.0-M2",
                "2.5.0-M3",
                "2.5.0-M4",
                "2.5.0-M5",
                "2.5.0-RC1",
                "2.5.1",
                "2.5.10",
                "2.5.11",
                "2.5.12",
                "2.5.2",
                "2.5.3",
                "2.5.4",
                "2.5.5",
                "2.5.6",
                "2.5.7",
                "2.5.8",
                "2.5.9",
                "2.6.0",
                "2.6.0-M1",
                "2.6.0-M2",
                "2.6.0-M3",
                "2.6.0-RC1",
                "2.6.1",
                "2.6.10",
                "2.6.2",
                "2.6.3",
                "2.6.4",
                "2.6.5",
                "2.6.6",
                "2.6.7",
                "2.6.8",
                "2.6.9",
                "2.7.0",
                "2.7.0-M1",
                "2.7.0-M2",
                "2.7.0-M3",
                "2.7.0-M4",
                "2.7.0-RC1",
                "2.7.1",
                "2.7.10",
                "2.7.11",
                "2.7.12",
                "2.7.13",
                "2.7.14",
                "2.7.15",
                "2.7.16",
                "2.7.17",
                "2.7.18",
                "2.7.2",
                "2.7.3",
                "2.7.4",
                "2.7.5",
                "2.7.6",
                "2.7.7",
                "2.7.8",
                "2.7.9",
                "3.0.0",
                "3.0.0-M1",
                "3.0.0-M2",
                "3.0.0-M3",
                "3.0.0-M4",
                "3.0.0-M5",
                "3.0.0-M6",
                "3.0.0-RC1",
                "3.0.0-RC2",
                "3.0.1",
                "3.0.10",
                "3.0.11",
                "3.0.12",
                "3.0.2",
                "3.0.3",
                "3.0.4",
                "3.0.5",
                "3.0.6",
                "3.0.7",
                "3.0.8",
                "3.0.9",
                "3.1.0",
                "3.1.0-M1",
                "3.1.0-M2",
                "3.1.0-M3",
                "3.1.0-RC1",
                "3.1.1",
                "3.1.10",
                "3.1.11",
                "3.1.12",
                "3.1.2",
                "3.1.3",
                "3.1.4",
                "3.1.5",
                "3.1.6",
                "3.1.7",
                "3.1.8",
                "3.1.9",
                "3.2.0",
                "3.2.0-M1",
                "3.2.0-M2",
                "3.2.0-M3",
                "3.2.0-RC1",
                "3.2.1",
                "3.2.2",
                "3.2.3",
                "3.2.4",
                "3.2.5",
                "3.2.6",
                "3.2.7",
                "3.3.0",
                "3.3.0-M1",
                "3.3.0-M2",
                "3.3.0-RC1",
                "3.3.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: access",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "fdcc0d677fce5a068bfe24d59c65a4ff049d91b9",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1509110711,
            "hunks": 1,
            "message": "DATACMNS-1185 - Release version 2.0.1 (Kay SR1).",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index fc97a25ae..a7b625565 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -7,3 +7,3 @@",
                " \t<artifactId>spring-data-commons</artifactId>",
                "-\t<version>2.0.1.BUILD-SNAPSHOT</version>",
                "+\t<version>2.0.1.RELEASE</version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.1.RELEASE",
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.2.RELEASE",
                "2.0.3.RELEASE",
                "2.0.4.RELEASE",
                "2.0.5.RELEASE",
                "2.0.6.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: version",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "8ddb7cefe1fb0ba075dbbdc7035ab7e2a5c75c19",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1516789148,
            "hunks": 1,
            "message": "DATACMNS-1219 - Release version 1.13.10 (Ingalls SR10).",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 3cf2b0425..4d14f8b85 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -7,3 +7,3 @@",
                " \t<artifactId>spring-data-commons</artifactId>",
                "-\t<version>1.13.10.BUILD-SNAPSHOT</version>",
                "+\t<version>1.13.10.RELEASE</version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.13.10.RELEASE",
                "1.13.11.RELEASE",
                "1.13.12.RELEASE",
                "1.13.13.RELEASE",
                "1.13.14.RELEASE",
                "1.13.15.RELEASE",
                "1.13.16.RELEASE",
                "1.13.17.RELEASE",
                "1.13.18.RELEASE",
                "1.13.19.RELEASE",
                "1.13.20.RELEASE",
                "1.13.21.RELEASE",
                "1.13.22.RELEASE",
                "1.13.23.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: version",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "5662c8e731e8c477927c7584017fbb72abd8e015",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1516796484,
            "hunks": 1,
            "message": "DATACMNS-1220 - Release version 2.0.3 (Kay SR3).",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index f40ee5b1c..6ad54036f 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -7,3 +7,3 @@",
                " \t<artifactId>spring-data-commons</artifactId>",
                "-\t<version>2.0.3.BUILD-SNAPSHOT</version>",
                "+\t<version>2.0.3.RELEASE</version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.3.RELEASE",
                "2.0.4.RELEASE",
                "2.0.5.RELEASE",
                "2.0.6.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: version",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "c652b487d6eb56c292490ff8fa1bc92920023568",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1512132579,
            "hunks": 3,
            "message": "DATACMNS-1227 - Polishing.",
            "diff": [
                "diff --git a/src/main/asciidoc/repositories.adoc b/src/main/asciidoc/repositories.adoc",
                "index 845b5ca8c..413e50510 100644",
                "--- a/src/main/asciidoc/repositories.adoc",
                "+++ b/src/main/asciidoc/repositories.adoc",
                "@@ -483,3 +483,3 @@ Although this should work for most cases, it is possible for the algorithm to se",
                "-To resolve this ambiguity you can use `_` inside your method name to manually define traversal points. So our method name would end up like so:",
                "+To resolve this ambiguity you can use `\\_` inside your method name to manually define traversal points. So our method name would end up like so:",
                "@@ -1055,3 +1055,3 @@ The configuration setup shown above will register a few basic components:",
                " - A `DomainClassConverter` to enable Spring MVC to resolve instances of repository managed domain classes from request parameters or path variables.",
                "-- `HandlerMethodArgumentResolver` implementations to let Spring MVC resolve Pageable and Sort instances from request parameters.",
                "+- `HandlerMethodArgumentResolver` implementations to let Spring MVC resolve `Pageable` and `Sort` instances from request parameters.",
                "@@ -1356,3 +1356,3 @@ be read and deserialized via a Jackson `ObjectMapper`.",
                "-The type to which the JSON object will be unmarshalled to will be determined by inspecting the `_class` attribute of the JSON document. The infrastructure will eventually select the appropriate repository to handle the object just deserialized.",
                "+The type to which the JSON object will be unmarshalled to will be determined by inspecting the `\\_class` attribute of the JSON document. The infrastructure will eventually select the appropriate repository to handle the object just deserialized."
            ],
            "changed_files": [
                "src/main/asciidoc/repositories.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "210f046ab5185e2e467eb16895c29945a188e709"
                ],
                [
                    "no-tag",
                    "8972d4b8bc201d936c4e1b562c9638a39321a7eb"
                ]
            ],
            "tags": [
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.3.RELEASE",
                "2.0.4.RELEASE",
                "2.0.5.RELEASE",
                "2.0.6.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6bb7e2b061bb400b13d246f6f9fc098be4f6c7d9",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1513347198,
            "hunks": 6,
            "message": "DATACMNS-1236 - Fix inconsistent Pageable nullability Javadoc. Fix Javadoc to reflect Pageable's non-nullability. Also, remove pageable field in favor of using Chunk's Pageable getter.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/domain/PageImpl.java b/src/main/java/org/springframework/data/domain/PageImpl.java",
                "index b57b21ce1..f9e6f473f 100644",
                "--- a/src/main/java/org/springframework/data/domain/PageImpl.java",
                "+++ b/src/main/java/org/springframework/data/domain/PageImpl.java",
                "@@ -27,2 +27,3 @@ import org.springframework.lang.Nullable;",
                "  * @author Oliver Gierke",
                "+ * @author Mark Paluch",
                "  */",
                "@@ -33,3 +34,2 @@ public class PageImpl<T> extends Chunk<T> implements Page<T> {",
                " \tprivate final long total;",
                "-\tprivate final Pageable pageable;",
                "@@ -39,5 +39,5 @@ public class PageImpl<T> extends Chunk<T> implements Page<T> {",
                " \t * @param content the content of this page, must not be {@literal null}.",
                "-\t * @param pageable the paging information, can be {@literal null}.",
                "+\t * @param pageable the paging information, must not be {@literal null}.",
                " \t * @param total the total amount of items available. The total might be adapted considering the length of the content",
                "-\t *          given, if it is going to be the content of the last page. This is in place to mitigate inconsistencies",
                "+\t *          given, if it is going to be the content of the last page. This is in place to mitigate inconsistencies.",
                " \t */",
                "@@ -47,3 +47,2 @@ public class PageImpl<T> extends Chunk<T> implements Page<T> {",
                "-\t\tthis.pageable = pageable;",
                " \t\tthis.total = pageable.toOptional().filter(it -> !content.isEmpty())//",
                "@@ -106,3 +105,3 @@ public class PageImpl<T> extends Chunk<T> implements Page<T> {",
                " \tpublic <U> Page<U> map(Function<? super T, ? extends U> converter) {",
                "-\t\treturn new PageImpl<>(getConvertedContent(converter), pageable, total);",
                "+\t\treturn new PageImpl<>(getConvertedContent(converter), getPageable(), total);",
                " \t}"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/domain/PageImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "e30928dcf0576532fd477abcf960d62c8661ee94"
                ]
            ],
            "tags": [
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.3.RELEASE",
                "2.0.4.RELEASE",
                "2.0.5.RELEASE",
                "2.0.6.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e7f6c62ca1a813ba0cbc3be7c9080538b71a21ce",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1514630091,
            "hunks": 1,
            "message": "DATACMNS-1238 - Optimize setting Environment on ClassPathScanningCandidateComponentProvider. In CustomRepositoryImplementationDetector, we now immediately hand the Environment to the constructor of ClassPathScanningCandidateComponentProvider instead of setting it afterwards. This prevents a default StandardEnvironment from being created in the previously used constructor.",
            "diff": [
                "diff --git a/src/main/java/org/springframework/data/repository/config/CustomRepositoryImplementationDetector.java b/src/main/java/org/springframework/data/repository/config/CustomRepositoryImplementationDetector.java",
                "index 8447247ca..260caa697 100644",
                "--- a/src/main/java/org/springframework/data/repository/config/CustomRepositoryImplementationDetector.java",
                "+++ b/src/main/java/org/springframework/data/repository/config/CustomRepositoryImplementationDetector.java",
                "@@ -111,4 +111,4 @@ public class CustomRepositoryImplementationDetector {",
                " \t\t// Build classpath scanner and lookup bean definition",
                "-\t\tClassPathScanningCandidateComponentProvider provider = new ClassPathScanningCandidateComponentProvider(false);",
                "-\t\tprovider.setEnvironment(environment);",
                "+\t\tClassPathScanningCandidateComponentProvider provider = new ClassPathScanningCandidateComponentProvider(false,",
                "+\t\t\t\tenvironment);",
                " \t\tprovider.setResourceLoader(resourceLoader);"
            ],
            "changed_files": [
                "src/main/java/org/springframework/data/repository/config/CustomRepositoryImplementationDetector.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "9a5cd29e3c162b80351fc39c233e2c4b15d00a23"
                ],
                [
                    "no-tag",
                    "d05312327a8f82a7b39bb3f54532c1871517fe12"
                ]
            ],
            "tags": [
                "2.1.0.M1",
                "2.1.0.M2",
                "2.1.0.M3",
                "2.1.0.RC1",
                "2.1.0.RC2",
                "2.1.0.RELEASE",
                "2.1.1.RELEASE",
                "2.1.10.RELEASE",
                "2.1.11.RELEASE",
                "2.1.12.RELEASE",
                "2.1.13.RELEASE",
                "2.1.14.RELEASE",
                "2.1.15.RELEASE",
                "2.1.16.RELEASE",
                "2.1.17.RELEASE",
                "2.1.18.RELEASE",
                "2.1.19.RELEASE",
                "2.1.2.RELEASE",
                "2.1.20.RELEASE",
                "2.1.21.RELEASE",
                "2.1.3.RELEASE",
                "2.1.4.RELEASE",
                "2.1.5.RELEASE",
                "2.1.6.RELEASE",
                "2.1.7.RELEASE",
                "2.1.8.RELEASE",
                "2.1.9.RELEASE",
                "2.2.0.M1",
                "2.2.0.M2",
                "2.2.0.M3",
                "2.2.0.M4",
                "2.2.0.RC1",
                "2.2.0.RC2",
                "2.2.0.RC3",
                "2.2.0.RELEASE",
                "2.2.1.RELEASE",
                "2.2.10.RELEASE",
                "2.2.11.RELEASE",
                "2.2.12.RELEASE",
                "2.2.13.RELEASE",
                "2.2.2.RELEASE",
                "2.2.3.RELEASE",
                "2.2.4.RELEASE",
                "2.2.5.RELEASE",
                "2.2.6.RELEASE",
                "2.2.7.RELEASE",
                "2.2.8.RELEASE",
                "2.2.9.RELEASE",
                "2.3.0.M1",
                "2.3.0.M2",
                "2.3.0.M3",
                "2.3.0.M4",
                "2.3.0.RC1",
                "2.3.0.RC2",
                "2.3.0.RELEASE",
                "2.3.1.RELEASE",
                "2.3.2.RELEASE",
                "2.3.3.RELEASE",
                "2.3.4.RELEASE",
                "2.3.5.RELEASE",
                "2.3.6.RELEASE",
                "2.3.7.RELEASE",
                "2.3.8.RELEASE",
                "2.3.9.RELEASE",
                "2.4.0",
                "2.4.0-M1",
                "2.4.0-M2",
                "2.4.0-RC1",
                "2.4.0-RC2",
                "2.4.1",
                "2.4.10",
                "2.4.11",
                "2.4.12",
                "2.4.13",
                "2.4.14",
                "2.4.15",
                "2.4.2",
                "2.4.3",
                "2.4.4",
                "2.4.5",
                "2.4.6",
                "2.4.7",
                "2.4.8",
                "2.4.9",
                "2.5.0",
                "2.5.0-M1",
                "2.5.0-M2",
                "2.5.0-M3",
                "2.5.0-M4",
                "2.5.0-M5",
                "2.5.0-RC1",
                "2.5.1",
                "2.5.10",
                "2.5.11",
                "2.5.12",
                "2.5.2",
                "2.5.3",
                "2.5.4",
                "2.5.5",
                "2.5.6",
                "2.5.7",
                "2.5.8",
                "2.5.9",
                "2.6.0",
                "2.6.0-M1",
                "2.6.0-M2",
                "2.6.0-M3",
                "2.6.0-RC1",
                "2.6.1",
                "2.6.10",
                "2.6.2",
                "2.6.3",
                "2.6.4",
                "2.6.5",
                "2.6.6",
                "2.6.7",
                "2.6.8",
                "2.6.9",
                "2.7.0",
                "2.7.0-M1",
                "2.7.0-M2",
                "2.7.0-M3",
                "2.7.0-M4",
                "2.7.0-RC1",
                "2.7.1",
                "2.7.10",
                "2.7.11",
                "2.7.12",
                "2.7.13",
                "2.7.14",
                "2.7.15",
                "2.7.16",
                "2.7.17",
                "2.7.18",
                "2.7.2",
                "2.7.3",
                "2.7.4",
                "2.7.5",
                "2.7.6",
                "2.7.7",
                "2.7.8",
                "2.7.9",
                "3.0.0",
                "3.0.0-M1",
                "3.0.0-M2",
                "3.0.0-M3",
                "3.0.0-M4",
                "3.0.0-M5",
                "3.0.0-M6",
                "3.0.0-RC1",
                "3.0.0-RC2",
                "3.0.1",
                "3.0.10",
                "3.0.11",
                "3.0.12",
                "3.0.2",
                "3.0.3",
                "3.0.4",
                "3.0.5",
                "3.0.6",
                "3.0.7",
                "3.0.8",
                "3.0.9",
                "3.1.0",
                "3.1.0-M1",
                "3.1.0-M2",
                "3.1.0-M3",
                "3.1.0-RC1",
                "3.1.1",
                "3.1.10",
                "3.1.11",
                "3.1.12",
                "3.1.2",
                "3.1.3",
                "3.1.4",
                "3.1.5",
                "3.1.6",
                "3.1.7",
                "3.1.8",
                "3.1.9",
                "3.2.0",
                "3.2.0-M1",
                "3.2.0-M2",
                "3.2.0-M3",
                "3.2.0-RC1",
                "3.2.1",
                "3.2.2",
                "3.2.3",
                "3.2.4",
                "3.2.5",
                "3.2.6",
                "3.2.7",
                "3.3.0",
                "3.3.0-M1",
                "3.3.0-M2",
                "3.3.0-RC1",
                "3.3.1"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "000596f8d7825de7a58db10497b9997c17ac533b",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1507741209,
            "hunks": 1,
            "message": "DATACMNS-1155 - Prepare next development iteration.",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 6a333549b..735521f66 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -7,3 +7,3 @@",
                " \t<artifactId>spring-data-commons</artifactId>",
                "-\t<version>1.13.8.RELEASE</version>",
                "+\t<version>1.13.9.BUILD-SNAPSHOT</version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "9a858d547a25fe04a2d491925d8964aab11eef27"
                ]
            ],
            "tags": [
                "1.13.10.RELEASE",
                "1.13.11.RELEASE",
                "1.13.12.RELEASE",
                "1.13.13.RELEASE",
                "1.13.14.RELEASE",
                "1.13.15.RELEASE",
                "1.13.16.RELEASE",
                "1.13.17.RELEASE",
                "1.13.18.RELEASE",
                "1.13.19.RELEASE",
                "1.13.20.RELEASE",
                "1.13.21.RELEASE",
                "1.13.22.RELEASE",
                "1.13.23.RELEASE",
                "1.13.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c859f56bf150a1c43bdad5b37bebc5ca892f8eac",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1511561272,
            "hunks": 2,
            "message": "DATACMNS-1218 - Upgraded to Vavr 0.9.2.",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 70269842b..3d07f3db9 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -19,3 +19,3 @@",
                " \t\t<javaslang>2.0.6</javaslang>",
                "-\t\t<vavr>0.9.1</vavr>",
                "+\t\t<vavr>0.9.2</vavr>",
                " \t\t<scala>2.11.7</scala>",
                "@@ -165,3 +165,3 @@",
                " \t\t</dependency>",
                "-\t\t",
                "+",
                " \t\t<dependency>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "c3a12097ca942e66019295936631c1f5407f8450"
                ],
                [
                    "no-tag",
                    "c7edaa7ee63979bd562eac10fc089081c6a83e00"
                ]
            ],
            "tags": [
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.2.RELEASE",
                "2.0.3.RELEASE",
                "2.0.4.RELEASE",
                "2.0.5.RELEASE",
                "2.0.6.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "91fd1a4cafffc22530d11713044e8fdad64d8106",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1507741214,
            "hunks": 2,
            "message": "DATACMNS-1155 - After release cleanups.",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 735521f66..2ddfe86b1 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -14,3 +14,3 @@",
                " \t\t<artifactId>spring-data-parent</artifactId>",
                "-\t\t<version>1.9.8.RELEASE</version>",
                "+\t\t<version>1.9.9.BUILD-SNAPSHOT</version>",
                " \t</parent>",
                "@@ -315,4 +315,4 @@",
                " \t\t<repository>",
                "-\t\t\t<id>spring-libs-release</id>",
                "-\t\t\t<url>https://repo.spring.io/libs-release</url>",
                "+\t\t\t<id>spring-libs-snapshot</id>",
                "+\t\t\t<url>https://repo.spring.io/libs-snapshot</url>",
                " \t\t</repository>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "d33fadd702d02cf8d60ad1339161bc4fea82ef03"
                ]
            ],
            "tags": [
                "1.13.10.RELEASE",
                "1.13.11.RELEASE",
                "1.13.12.RELEASE",
                "1.13.13.RELEASE",
                "1.13.14.RELEASE",
                "1.13.15.RELEASE",
                "1.13.16.RELEASE",
                "1.13.17.RELEASE",
                "1.13.18.RELEASE",
                "1.13.19.RELEASE",
                "1.13.20.RELEASE",
                "1.13.21.RELEASE",
                "1.13.22.RELEASE",
                "1.13.23.RELEASE",
                "1.13.9.RELEASE"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2fe0d62250b2f7e10d9235ef54dc951e3970c33b",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1516789109,
            "hunks": 2,
            "message": "DATACMNS-1219 - Prepare 1.13.10 (Ingalls SR10).",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 1382fe3be..3cf2b0425 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -14,3 +14,3 @@",
                " \t\t<artifactId>spring-data-parent</artifactId>",
                "-\t\t<version>1.9.10.BUILD-SNAPSHOT</version>",
                "+\t\t<version>1.9.10.RELEASE</version>",
                " \t</parent>",
                "@@ -315,4 +315,4 @@",
                " \t\t<repository>",
                "-\t\t\t<id>spring-libs-snapshot</id>",
                "-\t\t\t<url>https://repo.spring.io/libs-snapshot</url>",
                "+\t\t\t<id>spring-libs-release</id>",
                "+\t\t\t<url>https://repo.spring.io/libs-release</url>",
                " \t\t</repository>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.13.10.RELEASE",
                "1.13.11.RELEASE",
                "1.13.12.RELEASE",
                "1.13.13.RELEASE",
                "1.13.14.RELEASE",
                "1.13.15.RELEASE",
                "1.13.16.RELEASE",
                "1.13.17.RELEASE",
                "1.13.18.RELEASE",
                "1.13.19.RELEASE",
                "1.13.20.RELEASE",
                "1.13.21.RELEASE",
                "1.13.22.RELEASE",
                "1.13.23.RELEASE"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "81c1d129af6135c0fd48891188d5dfda687d975e",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1516790428,
            "hunks": 1,
            "message": "DATACMNS-1219 - Prepare next development iteration.",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 4d14f8b85..e826b554d 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -7,3 +7,3 @@",
                " \t<artifactId>spring-data-commons</artifactId>",
                "-\t<version>1.13.10.RELEASE</version>",
                "+\t<version>1.13.11.BUILD-SNAPSHOT</version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.13.11.RELEASE",
                "1.13.12.RELEASE",
                "1.13.13.RELEASE",
                "1.13.14.RELEASE",
                "1.13.15.RELEASE",
                "1.13.16.RELEASE",
                "1.13.17.RELEASE",
                "1.13.18.RELEASE",
                "1.13.19.RELEASE",
                "1.13.20.RELEASE",
                "1.13.21.RELEASE",
                "1.13.22.RELEASE",
                "1.13.23.RELEASE"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "9b3be379d8ba4bcbb44de2ae992b7ec22e0dd966",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1511795481,
            "hunks": 2,
            "message": "DATACMNS-1202 - Prepare 2.0.2 (Kay SR2).",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 3d07f3db9..1d44da3a5 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -14,3 +14,3 @@",
                " \t\t<artifactId>spring-data-parent</artifactId>",
                "-\t\t<version>2.0.2.BUILD-SNAPSHOT</version>",
                "+\t\t<version>2.0.2.RELEASE</version>",
                " \t</parent>",
                "@@ -405,4 +405,4 @@",
                " \t\t<repository>",
                "-\t\t\t<id>spring-libs-snapshot</id>",
                "-\t\t\t<url>https://repo.spring.io/libs-snapshot</url>",
                "+\t\t\t<id>spring-libs-release</id>",
                "+\t\t\t<url>https://repo.spring.io/libs-release</url>",
                " \t\t</repository>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.2.RELEASE",
                "2.0.3.RELEASE",
                "2.0.4.RELEASE",
                "2.0.5.RELEASE",
                "2.0.6.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "2f3041f61f4edec8d4099d6554b692a307323992",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1509110664,
            "hunks": 2,
            "message": "DATACMNS-1185 - Prepare 2.0.1 (Kay SR1).",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index d780b4bb1..fc97a25ae 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -14,3 +14,3 @@",
                " \t\t<artifactId>spring-data-parent</artifactId>",
                "-\t\t<version>2.0.1.BUILD-SNAPSHOT</version>",
                "+\t\t<version>2.0.1.RELEASE</version>",
                " \t</parent>",
                "@@ -405,4 +405,4 @@",
                " \t\t<repository>",
                "-\t\t\t<id>spring-libs-snapshot</id>",
                "-\t\t\t<url>https://repo.spring.io/libs-snapshot</url>",
                "+\t\t\t<id>spring-libs-release</id>",
                "+\t\t\t<url>https://repo.spring.io/libs-release</url>",
                " \t\t</repository>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.1.RELEASE",
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.2.RELEASE",
                "2.0.3.RELEASE",
                "2.0.4.RELEASE",
                "2.0.5.RELEASE",
                "2.0.6.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "a46757efb92a45f03d6b258ad3d529874f6fdfe5",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1507732867,
            "hunks": 2,
            "message": "DATACMNS-1155 - Prepare 1.13.8 (Ingalls SR8).",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index fb3a647d2..f4044a405 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -14,3 +14,3 @@",
                " \t\t<artifactId>spring-data-parent</artifactId>",
                "-\t\t<version>1.9.8.BUILD-SNAPSHOT</version>",
                "+\t\t<version>1.9.8.RELEASE</version>",
                " \t</parent>",
                "@@ -315,4 +315,4 @@",
                " \t\t<repository>",
                "-\t\t\t<id>spring-libs-snapshot</id>",
                "-\t\t\t<url>https://repo.spring.io/libs-snapshot</url>",
                "+\t\t\t<id>spring-libs-release</id>",
                "+\t\t\t<url>https://repo.spring.io/libs-release</url>",
                " \t\t</repository>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.13.10.RELEASE",
                "1.13.11.RELEASE",
                "1.13.12.RELEASE",
                "1.13.13.RELEASE",
                "1.13.14.RELEASE",
                "1.13.15.RELEASE",
                "1.13.16.RELEASE",
                "1.13.17.RELEASE",
                "1.13.18.RELEASE",
                "1.13.19.RELEASE",
                "1.13.20.RELEASE",
                "1.13.21.RELEASE",
                "1.13.22.RELEASE",
                "1.13.23.RELEASE",
                "1.13.8.RELEASE",
                "1.13.9.RELEASE"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "09e0fda4bd807c9bef7a1464759ddfb0ce25ccc8",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1509112248,
            "hunks": 2,
            "message": "DATACMNS-1185 - After release cleanups.",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 123ecf821..70269842b 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -14,3 +14,3 @@",
                " \t\t<artifactId>spring-data-parent</artifactId>",
                "-\t\t<version>2.0.1.RELEASE</version>",
                "+\t\t<version>2.0.2.BUILD-SNAPSHOT</version>",
                " \t</parent>",
                "@@ -405,4 +405,4 @@",
                " \t\t<repository>",
                "-\t\t\t<id>spring-libs-release</id>",
                "-\t\t\t<url>https://repo.spring.io/libs-release</url>",
                "+\t\t\t<id>spring-libs-snapshot</id>",
                "+\t\t\t<url>https://repo.spring.io/libs-snapshot</url>",
                " \t\t</repository>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.2.RELEASE",
                "2.0.3.RELEASE",
                "2.0.4.RELEASE",
                "2.0.5.RELEASE",
                "2.0.6.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "d519028ccd0b889dbf868c23b933c3a1ec504b03",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1511792169,
            "hunks": 2,
            "message": "DATACMNS-1195 - Prepare 1.13.9 (Ingalls SR9).",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index b44dd43fc..799e12dbf 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -14,3 +14,3 @@",
                " \t\t<artifactId>spring-data-parent</artifactId>",
                "-\t\t<version>1.9.9.BUILD-SNAPSHOT</version>",
                "+\t\t<version>1.9.9.RELEASE</version>",
                " \t</parent>",
                "@@ -315,4 +315,4 @@",
                " \t\t<repository>",
                "-\t\t\t<id>spring-libs-snapshot</id>",
                "-\t\t\t<url>https://repo.spring.io/libs-snapshot</url>",
                "+\t\t\t<id>spring-libs-release</id>",
                "+\t\t\t<url>https://repo.spring.io/libs-release</url>",
                " \t\t</repository>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.13.10.RELEASE",
                "1.13.11.RELEASE",
                "1.13.12.RELEASE",
                "1.13.13.RELEASE",
                "1.13.14.RELEASE",
                "1.13.15.RELEASE",
                "1.13.16.RELEASE",
                "1.13.17.RELEASE",
                "1.13.18.RELEASE",
                "1.13.19.RELEASE",
                "1.13.20.RELEASE",
                "1.13.21.RELEASE",
                "1.13.22.RELEASE",
                "1.13.23.RELEASE",
                "1.13.9.RELEASE"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "81c6ccbe87c71361982eeb13b3905b59e6629b7f",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1511794597,
            "hunks": 1,
            "message": "DATACMNS-1195 - Prepare next development iteration.",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 83c874505..b3201c9b1 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -7,3 +7,3 @@",
                " \t<artifactId>spring-data-commons</artifactId>",
                "-\t<version>1.13.9.RELEASE</version>",
                "+\t<version>1.13.10.BUILD-SNAPSHOT</version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.13.10.RELEASE",
                "1.13.11.RELEASE",
                "1.13.12.RELEASE",
                "1.13.13.RELEASE",
                "1.13.14.RELEASE",
                "1.13.15.RELEASE",
                "1.13.16.RELEASE",
                "1.13.17.RELEASE",
                "1.13.18.RELEASE",
                "1.13.19.RELEASE",
                "1.13.20.RELEASE",
                "1.13.21.RELEASE",
                "1.13.22.RELEASE",
                "1.13.23.RELEASE"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "8d732bca19bb83081f67f715884b34295ca9faed",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1516797970,
            "hunks": 2,
            "message": "DATACMNS-1220 - After release cleanups.",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 4deafc350..444f62eb2 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -14,3 +14,3 @@",
                " \t\t<artifactId>spring-data-parent</artifactId>",
                "-\t\t<version>2.0.3.RELEASE</version>",
                "+\t\t<version>2.0.4.BUILD-SNAPSHOT</version>",
                " \t</parent>",
                "@@ -405,4 +405,4 @@",
                " \t\t<repository>",
                "-\t\t\t<id>spring-libs-release</id>",
                "-\t\t\t<url>https://repo.spring.io/libs-release</url>",
                "+\t\t\t<id>spring-libs-snapshot</id>",
                "+\t\t\t<url>https://repo.spring.io/libs-snapshot</url>",
                " \t\t</repository>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.4.RELEASE",
                "2.0.5.RELEASE",
                "2.0.6.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "fc61460738d36f8c864e03196ef9dfddebec906d",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1511794599,
            "hunks": 2,
            "message": "DATACMNS-1195 - After release cleanups.",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index b3201c9b1..00c23bef1 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -14,3 +14,3 @@",
                " \t\t<artifactId>spring-data-parent</artifactId>",
                "-\t\t<version>1.9.9.RELEASE</version>",
                "+\t\t<version>1.9.10.BUILD-SNAPSHOT</version>",
                " \t</parent>",
                "@@ -315,4 +315,4 @@",
                " \t\t<repository>",
                "-\t\t\t<id>spring-libs-release</id>",
                "-\t\t\t<url>https://repo.spring.io/libs-release</url>",
                "+\t\t\t<id>spring-libs-snapshot</id>",
                "+\t\t\t<url>https://repo.spring.io/libs-snapshot</url>",
                " \t\t</repository>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.13.10.RELEASE",
                "1.13.11.RELEASE",
                "1.13.12.RELEASE",
                "1.13.13.RELEASE",
                "1.13.14.RELEASE",
                "1.13.15.RELEASE",
                "1.13.16.RELEASE",
                "1.13.17.RELEASE",
                "1.13.18.RELEASE",
                "1.13.19.RELEASE",
                "1.13.20.RELEASE",
                "1.13.21.RELEASE",
                "1.13.22.RELEASE",
                "1.13.23.RELEASE"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "f005ff0b1125c61a08d9c81ffe5d89c43017eb52",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1511797372,
            "hunks": 1,
            "message": "DATACMNS-1202 - Prepare next development iteration.",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index fb7704519..86902f8ae 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -7,3 +7,3 @@",
                " \t<artifactId>spring-data-commons</artifactId>",
                "-\t<version>2.0.2.RELEASE</version>",
                "+\t<version>2.0.3.BUILD-SNAPSHOT</version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.3.RELEASE",
                "2.0.4.RELEASE",
                "2.0.5.RELEASE",
                "2.0.6.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "d43274edfda5c5626a2cbcc1c01e1926c97bf9c8",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1516790429,
            "hunks": 2,
            "message": "DATACMNS-1219 - After release cleanups.",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index e826b554d..43cec825c 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -14,3 +14,3 @@",
                " \t\t<artifactId>spring-data-parent</artifactId>",
                "-\t\t<version>1.9.10.RELEASE</version>",
                "+\t\t<version>1.9.11.BUILD-SNAPSHOT</version>",
                " \t</parent>",
                "@@ -315,4 +315,4 @@",
                " \t\t<repository>",
                "-\t\t\t<id>spring-libs-release</id>",
                "-\t\t\t<url>https://repo.spring.io/libs-release</url>",
                "+\t\t\t<id>spring-libs-snapshot</id>",
                "+\t\t\t<url>https://repo.spring.io/libs-snapshot</url>",
                " \t\t</repository>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.13.11.RELEASE",
                "1.13.12.RELEASE",
                "1.13.13.RELEASE",
                "1.13.14.RELEASE",
                "1.13.15.RELEASE",
                "1.13.16.RELEASE",
                "1.13.17.RELEASE",
                "1.13.18.RELEASE",
                "1.13.19.RELEASE",
                "1.13.20.RELEASE",
                "1.13.21.RELEASE",
                "1.13.22.RELEASE",
                "1.13.23.RELEASE"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "5909b760263857f35a96b0b34d2aa5a6bce944bd",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1516796439,
            "hunks": 2,
            "message": "DATACMNS-1220 - Prepare 2.0.3 (Kay SR3).",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 4d9c76b93..f40ee5b1c 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -14,3 +14,3 @@",
                " \t\t<artifactId>spring-data-parent</artifactId>",
                "-\t\t<version>2.0.3.BUILD-SNAPSHOT</version>",
                "+\t\t<version>2.0.3.RELEASE</version>",
                " \t</parent>",
                "@@ -405,4 +405,4 @@",
                " \t\t<repository>",
                "-\t\t\t<id>spring-libs-snapshot</id>",
                "-\t\t\t<url>https://repo.spring.io/libs-snapshot</url>",
                "+\t\t\t<id>spring-libs-release</id>",
                "+\t\t\t<url>https://repo.spring.io/libs-release</url>",
                " \t\t</repository>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.3.RELEASE",
                "2.0.4.RELEASE",
                "2.0.5.RELEASE",
                "2.0.6.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "0d25b9cc45339c130efbac527f99c8cc0c46f7ff",
            "repository": "https://github.com/spring-projects/spring-data-commons",
            "timestamp": 1509112244,
            "hunks": 1,
            "message": "DATACMNS-1185 - Prepare next development iteration.",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index a7b625565..123ecf821 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -7,3 +7,3 @@",
                " \t<artifactId>spring-data-commons</artifactId>",
                "-\t<version>2.0.1.RELEASE</version>",
                "+\t<version>2.0.2.BUILD-SNAPSHOT</version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.10.RELEASE",
                "2.0.11.RELEASE",
                "2.0.12.RELEASE",
                "2.0.13.RELEASE",
                "2.0.14.RELEASE",
                "2.0.2.RELEASE",
                "2.0.3.RELEASE",
                "2.0.4.RELEASE",
                "2.0.5.RELEASE",
                "2.0.6.RELEASE",
                "2.0.7.RELEASE",
                "2.0.8.RELEASE",
                "2.0.9.RELEASE"
            ],
            "matched_rules": []
        }
    ]
}
