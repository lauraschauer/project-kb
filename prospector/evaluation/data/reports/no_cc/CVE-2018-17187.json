{
    "advisory_record": {
        "cve_id": "CVE-2018-17187",
        "description": "The Apache Qpid Proton-J transport includes an optional wrapper layer to perform TLS, enabled by use of the 'transport.ssl(...)' methods. Unless a verification mode was explicitly configured, client and server modes previously defaulted as documented to not verifying a peer certificate, with options to configure this explicitly or select a certificate verification mode with or without hostname verification being performed. The latter hostname verifying mode was not implemented in Apache Qpid Proton-J versions 0.3 to 0.29.0, with attempts to use it resulting in an exception. This left only the option to verify the certificate is trusted, leaving such a client vulnerable to Man In The Middle (MITM) attack. Uses of the Proton-J protocol engine which do not utilise the optional transport TLS wrapper are not impacted, e.g. usage within Qpid JMS. Uses of Proton-J utilising the optional transport TLS wrapper layer that wish to enable hostname verification must be upgraded to version 0.30.0 or later and utilise the VerifyMode#VERIFY_PEER_NAME configuration, which is now the default for client mode usage unless configured otherwise.",
        "reserved_timestamp": 1537315200,
        "published_timestamp": 1542121200,
        "updated_timestamp": 1542365821,
        "repository_url": null,
        "references": {
            "": 212,
            "https://github.co/hiddenchars": 9,
            "https://issues.apache.org/jira/browse/PROTON-1962": 7,
            "https://qpid.apache.org/cves/CVE-2018-17187.html": 7,
            "https://access.redhat.com/support/": 6,
            "https://access.redhat.com/downloads/": 5,
            "https://mail-archives.apache.org/mod_mbox/qpid-users/201811.mbox/%3CCAFitrpQSV73Vz7rJYfLJK7gvEymZSCR5ooWUeU8j4jzRydk-eg%40mail.gmail.com%3E": 4,
            "https://access.redhat.com/labs/": 4,
            "commit::0cb8ca03cec42120dcfc434561592d89a89a805e": 3,
            "https://access.redhat.com/errata/": 3,
            "http://www.securityfocus.com/bid/105935": 2,
            "commit::ccdcf32932f04b387da9d4dbd810da29cae223aa": 2,
            "https://git-wip-us.apache.org/repos/asf?p=qpid-proton-j.git;h=0cb8ca0": 2,
            "https://access.redhat.com/support/policy/updates/jboss_notes": 2,
            "https://docs.atlassian.com/jira/jcore-docs-0820/": 2,
            "http://www.atlassian.com/software/jira": 2,
            "http://www.apache.org/": 2,
            "https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax": 2,
            "https://access.redhat.com/management/": 2,
            "https://access.redhat.com/": 2,
            "https://access.redhat.com/documentation": 2,
            "https://access.redhat.com/product-life-cycles/": 2,
            "https://access.redhat.com/security": 2,
            "https://access.redhat.com/security/security-updates/#/security-advisories": 2,
            "https://access.redhat.com/security/security-updates/#/cve": 2,
            "https://access.redhat.com/support/contact/": 2,
            "https://access.redhat.com/support/policy/updates/red_hat_build_of_quarkus_notes": 2,
            "https://access.redhat.com/articles/7060671": 2,
            "https://status.redhat.com": 2,
            "https://issues.apache.org/jira/secure/MyJiraHome.jspa": 1,
            "https://selfserve.apache.org/jira-account.html": 1,
            "https://www.atlassian.com/software/jira": 1,
            "http://www.atlassian.com/": 1,
            "https://cwiki.apache.org/confluence/display/qpid/Index": 1,
            "http://www.apache.org/licenses/": 1,
            "http://www.apache.org/foundation/sponsorship.html": 1,
            "http://www.apache.org/foundation/thanks.html": 1,
            "http://www.apache.org/licenses/LICENSE-2.0": 1,
            "https://github.com/features/actions": 1,
            "https://github.com/features/packages": 1,
            "https://github.com/features/security": 1,
            "https://github.com/features/codespaces": 1,
            "https://github.com/features/copilot": 1,
            "https://github.com/features/code-review": 1,
            "https://github.com/features/issues": 1,
            "https://github.com/features/discussions": 1,
            "https://github.com/features": 1,
            "https://docs.github.com": 1,
            "https://skills.github.com": 1,
            "https://github.blog": 1,
            "https://github.com/enterprise": 1,
            "https://github.com/team": 1,
            "https://github.com/enterprise/startups": 1,
            "https://github.com/solutions/industries/healthcare": 1,
            "https://github.com/solutions/industries/financial-services": 1,
            "https://github.com/solutions/industries/manufacturing": 1,
            "https://github.com/solutions/ci-cd": 1,
            "https://github.com/solutions/devops": 1,
            "https://github.com/solutions/devsecops": 1,
            "https://resources.github.com/learn/pathways": 1,
            "https://resources.github.com": 1,
            "https://github.com/customer-stories": 1,
            "https://partner.github.com": 1,
            "https://github.com/readme": 1,
            "https://github.com/topics": 1,
            "https://github.com/trending": 1,
            "https://github.com/collections": 1,
            "https://github.com/enterprise/advanced-security": 1,
            "https://github.com/pricing": 1,
            "commit::31f5fc97bbf60a73ba913b7dc16851cf7e2a150b": 1,
            "https://github.com": 1,
            "https://docs.github.com/site-policy/github-terms/github-terms-of-service": 1,
            "https://docs.github.com/site-policy/privacy-policies/github-privacy-statement": 1,
            "https://github.com/security": 1,
            "https://www.githubstatus.com/": 1,
            "https://docs.github.com/": 1,
            "https://support.github.com?tags=dotcom-footer": 1,
            "https://access.redhat.com/products/red-hat-enterprise-linux/": 1,
            "https://access.redhat.com/products/red-hat-openshift-container-platform": 1,
            "https://access.redhat.com/products/red-hat-ansible-automation-platform/": 1,
            "https://access.redhat.com/products/": 1,
            "https://access.redhat.com/downloads/content/package-browser": 1,
            "https://catalog.redhat.com/software/containers/explore/": 1,
            "https://access.redhat.com/articles/1202803": 1,
            "https://access.redhat.com/search/?q=*&p=1&rows=10&documentKind=Solution": 1,
            "https://access.redhat.com/search/?q=*&p=1&rows=10&documentKind=Article": 1,
            "https://access.redhat.com/documentation/en/red_hat_enterprise_linux": 1,
            "https://access.redhat.com/documentation/en/openshift_container_platform": 1,
            "https://access.redhat.com/documentation/en/red_hat_ansible_automation_platform": 1,
            "https://access.redhat.com/documentation/": 1,
            "https://access.redhat.com/security/": 1,
            "https://access.redhat.com/security/vulnerabilities": 1,
            "https://access.redhat.com/security/data": 1,
            "https://access.redhat.com/security/security-updates/#/security-labs": 1,
            "https://access.redhat.com/security/updates/backporting/": 1,
            "https://access.redhat.com/support/cases/": 1,
            "https://access.redhat.com/support/cases/#/troubleshoot": 1,
            "https://access.redhat.com/community": 1,
            "https://access.redhat.com/community/": 1,
            "https://access.redhat.com/discussions/": 1,
            "https://access.redhat.com/announcements/": 1,
            "https://access.redhat.com/accelerators/": 1,
            "https://access.redhat.com/jbossnetwork/restricted/listSoftware.html": 1,
            "https://cloud.redhat.com/insights": 1,
            "https://access.redhat.com/changeLanguage?language=en": 1,
            "https://access.redhat.com/changeLanguage?language=ko": 1,
            "https://access.redhat.com/changeLanguage?language=ja": 1,
            "https://access.redhat.com/changeLanguage?language=zh_CN": 1,
            "https://access.redhat.com/product-life-cycles": 1,
            "https://access.redhat.com/articles/7019023": 1,
            "https://access.redhat.com/articles/6200982": 1,
            "https://access.redhat.com/search/#/knowledgebase": 1,
            "https://access.redhat.com/search/#/discussions": 1,
            "https://access.redhat.com/support/policy/updates/jboss_eap_xp_notes": 1,
            "https://access.redhat.com/articles/7037218": 1,
            "https://github.com/nodejs/Release": 1,
            "https://access.redhat.com/articles/4544981": 1,
            "https://access.redhat.com/support/policy/updates/jboss_notes#p_rhbocamel": 1,
            "https://access.redhat.com/solutions/6342381": 1,
            "https://access.redhat.com/solutions/5941551": 1,
            "https://access.redhat.com/support/policy/updates/service-interconnect": 1,
            "https://access.redhat.com/articles/6975608": 1,
            "https://access.redhat.com/articles/6999674": 1,
            "https://access.redhat.com/articles/6371801": 1,
            "https://redhat.com/en": 1,
            "https://twitter.com/RedHat": 1,
            "https://access.redhat.com/management": 1,
            "https://access.redhat.com/support": 1,
            "https://access.redhat.com/support/customer-service": 1,
            "https://access.redhat.com/articles/33844": 1,
            "https://access.redhat.com/help/login_assistance": 1,
            "https://www.redhat.com/en/trust": 1,
            "https://www.redhat.com/en/about/browser-support": 1,
            "https://www.redhat.com/en/about/digital-accessibility": 1,
            "https://access.redhat.com/recognition/": 1,
            "https://access.redhat.com/help/colophon/": 1,
            "https://www.redhat.com/": 1,
            "http://developers.redhat.com/": 1,
            "https://connect.redhat.com/": 1,
            "https://cloud.redhat.com/": 1,
            "https://access.redhat.com/subscription-value": 1,
            "https://www.redhat.com/about/": 1,
            "http://jobs.redhat.com": 1,
            "https://redhat.com/en/about/company": 1,
            "https://redhat.com/en/jobs": 1,
            "https://redhat.com/en/events": 1,
            "https://redhat.com/en/about/office-locations": 1,
            "https://redhat.com/en/contact": 1,
            "https://redhat.com/en/blog": 1,
            "https://redhat.com/en/about/our-culture/diversity-equity-inclusion": 1,
            "https://coolstuff.redhat.com/": 1,
            "https://www.redhat.com/en/summit": 1,
            "https://redhat.com/en/about/privacy-policy": 1,
            "https://redhat.com/en/about/terms-use": 1,
            "https://redhat.com/en/about/all-policies-guidelines": 1,
            "https://redhat.com/en/about/digital-accessibility": 1
        },
        "affected_products": [
            "Man",
            "MITM",
            "Apache Qpid Proton-J",
            "Apache",
            "Qpid",
            "JMS",
            "Middle",
            "Proton",
            "TLS"
        ],
        "versions": {
            "status": "affected",
            "version": "Apache Qpid Proton-J 0.3 to 0.29.0"
        },
        "files": [
            "MITM",
            "ssl",
            "TLS",
            "VerifyMode#VERIFY_PEER_NAME",
            "transport",
            "JMS"
        ],
        "keywords": [
            "attempt",
            "impact",
            "proton",
            "verification",
            "result",
            "certificate",
            "attack",
            "method",
            "protocol",
            "wish",
            "verifying",
            "enable",
            "wrapper",
            "option",
            "hostname",
            "mitm",
            "utilise",
            "select",
            "layer",
            "engine",
            "client",
            "upgrade",
            "apache",
            "server",
            "document",
            "peer",
            "version",
            "transport",
            "qpid",
            "default",
            "exception",
            "leave",
            "trust",
            "implement",
            "middle",
            "configure",
            "configuration",
            "mode",
            "perform",
            "verify",
            "usage",
            "include"
        ],
        "files_extension": [],
        "has_fixing_commit": true
    },
    "commits": [
        {
            "commit_id": "31f5fc97bbf60a73ba913b7dc16851cf7e2a150b",
            "repository": "https://github.com/apache/qpid-proton-j",
            "timestamp": 1541099596,
            "hunks": 74,
            "message": "PROTON-19 Optimization for the codec and transport hot paths Write a cachded encoded value for Accepted states as that does not change and can be easy syntheszied.  Also write the descriptor codes directly in the fast path encoders since we know the type and value without needing to dip back into the generic encoder write methods.",
            "diff": [
                "diff --git a/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathAcceptedType.java b/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathAcceptedType.java",
                "index d9eb991a..9e5e96db 100644",
                "--- a/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathAcceptedType.java",
                "+++ b/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathAcceptedType.java",
                "@@ -24,3 +24,2 @@ import org.apache.qpid.proton.amqp.messaging.Accepted;",
                " import org.apache.qpid.proton.codec.AMQPType;",
                "-import org.apache.qpid.proton.codec.FastPathDescribedTypeConstructor;",
                " import org.apache.qpid.proton.codec.DecodeException;",
                "@@ -30,2 +29,3 @@ import org.apache.qpid.proton.codec.EncoderImpl;",
                " import org.apache.qpid.proton.codec.EncodingCodes;",
                "+import org.apache.qpid.proton.codec.FastPathDescribedTypeConstructor;",
                " import org.apache.qpid.proton.codec.TypeEncoding;",
                "@@ -35,5 +35,14 @@ public class FastPathAcceptedType implements AMQPType<Accepted>, FastPathDescrib",
                "+    private static final byte DESCRIPTOR_CODE = 0x24;",
                "+",
                "     private static final Object[] DESCRIPTORS =",
                "     {",
                "-        UnsignedLong.valueOf(0x0000000000000024L), Symbol.valueOf(\"amqp:accepted:list\"),",
                "+        UnsignedLong.valueOf(DESCRIPTOR_CODE), Symbol.valueOf(\"amqp:accepted:list\"),",
                "+    };",
                "+",
                "+    private static final byte[] ACCEPTED_ENCODED_BYTES = new byte[] {",
                "+        EncodingCodes.DESCRIBED_TYPE_INDICATOR,",
                "+        EncodingCodes.SMALLULONG,",
                "+        DESCRIPTOR_CODE,",
                "+        EncodingCodes.LIST0",
                "     };",
                "@@ -110,5 +119,3 @@ public class FastPathAcceptedType implements AMQPType<Accepted>, FastPathDescrib",
                "         WritableBuffer buffer = getEncoder().getBuffer();",
                "-        buffer.put(EncodingCodes.DESCRIBED_TYPE_INDICATOR);",
                "-        getEncoder().writeUnsignedLong(acceptedType.getDescriptor());",
                "-        buffer.put(EncodingCodes.LIST0);",
                "+        buffer.put(ACCEPTED_ENCODED_BYTES, 0, ACCEPTED_ENCODED_BYTES.length);",
                "     }",
                "diff --git a/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathAmqpSequenceType.java b/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathAmqpSequenceType.java",
                "index 611ec106..6a4ebd4e 100644",
                "--- a/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathAmqpSequenceType.java",
                "+++ b/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathAmqpSequenceType.java",
                "@@ -24,3 +24,2 @@ import org.apache.qpid.proton.amqp.messaging.AmqpSequence;",
                " import org.apache.qpid.proton.codec.AMQPType;",
                "-import org.apache.qpid.proton.codec.FastPathDescribedTypeConstructor;",
                " import org.apache.qpid.proton.codec.Decoder;",
                "@@ -29,2 +28,3 @@ import org.apache.qpid.proton.codec.EncoderImpl;",
                " import org.apache.qpid.proton.codec.EncodingCodes;",
                "+import org.apache.qpid.proton.codec.FastPathDescribedTypeConstructor;",
                " import org.apache.qpid.proton.codec.TypeEncoding;",
                "@@ -34,5 +34,7 @@ public class FastPathAmqpSequenceType implements AMQPType<AmqpSequence>, FastPat",
                "+    private static final byte DESCRIPTOR_CODE = 0x76;",
                "+",
                "     private static final Object[] DESCRIPTORS =",
                "     {",
                "-        UnsignedLong.valueOf(0x0000000000000076L), Symbol.valueOf(\"amqp:amqp-sequence:list\"),",
                "+        UnsignedLong.valueOf(DESCRIPTOR_CODE), Symbol.valueOf(\"amqp:amqp-sequence:list\"),",
                "     };",
                "@@ -92,3 +94,4 @@ public class FastPathAmqpSequenceType implements AMQPType<AmqpSequence>, FastPat",
                "         buffer.put(EncodingCodes.DESCRIBED_TYPE_INDICATOR);",
                "-        getEncoder().writeUnsignedLong(sequenceType.getDescriptor());",
                "+        buffer.put(EncodingCodes.SMALLULONG);",
                "+        buffer.put(DESCRIPTOR_CODE);",
                "         getEncoder().writeObject(sequence.getValue());",
                "diff --git a/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathAmqpValueType.java b/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathAmqpValueType.java",
                "index 7120481e..b9d4ee78 100644",
                "--- a/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathAmqpValueType.java",
                "+++ b/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathAmqpValueType.java",
                "@@ -24,3 +24,2 @@ import org.apache.qpid.proton.amqp.messaging.AmqpValue;",
                " import org.apache.qpid.proton.codec.AMQPType;",
                "-import org.apache.qpid.proton.codec.FastPathDescribedTypeConstructor;",
                " import org.apache.qpid.proton.codec.Decoder;",
                "@@ -29,2 +28,3 @@ import org.apache.qpid.proton.codec.EncoderImpl;",
                " import org.apache.qpid.proton.codec.EncodingCodes;",
                "+import org.apache.qpid.proton.codec.FastPathDescribedTypeConstructor;",
                " import org.apache.qpid.proton.codec.TypeEncoding;",
                "@@ -34,5 +34,7 @@ public class FastPathAmqpValueType implements AMQPType<AmqpValue>, FastPathDescr",
                "+    private static final byte DESCRIPTOR_CODE = 0x77;",
                "+",
                "     private static final Object[] DESCRIPTORS =",
                "     {",
                "-        UnsignedLong.valueOf(0x0000000000000077L), Symbol.valueOf(\"amqp:amqp-value:*\"),",
                "+        UnsignedLong.valueOf(DESCRIPTOR_CODE), Symbol.valueOf(\"amqp:amqp-value:*\"),",
                "     };",
                "@@ -92,3 +94,4 @@ public class FastPathAmqpValueType implements AMQPType<AmqpValue>, FastPathDescr",
                "         buffer.put(EncodingCodes.DESCRIBED_TYPE_INDICATOR);",
                "-        getEncoder().writeUnsignedLong(valueType.getDescriptor());",
                "+        buffer.put(EncodingCodes.SMALLULONG);",
                "+        buffer.put(DESCRIPTOR_CODE);",
                "         getEncoder().writeObject(value.getValue());",
                "diff --git a/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathApplicationPropertiesType.java b/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathApplicationPropertiesType.java",
                "index 4eed5e7d..08078f32 100644",
                "--- a/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathApplicationPropertiesType.java",
                "+++ b/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathApplicationPropertiesType.java",
                "@@ -24,3 +24,2 @@ import org.apache.qpid.proton.amqp.messaging.ApplicationProperties;",
                " import org.apache.qpid.proton.codec.AMQPType;",
                "-import org.apache.qpid.proton.codec.FastPathDescribedTypeConstructor;",
                " import org.apache.qpid.proton.codec.Decoder;",
                "@@ -29,2 +28,3 @@ import org.apache.qpid.proton.codec.EncoderImpl;",
                " import org.apache.qpid.proton.codec.EncodingCodes;",
                "+import org.apache.qpid.proton.codec.FastPathDescribedTypeConstructor;",
                " import org.apache.qpid.proton.codec.MapType;",
                "@@ -35,5 +35,7 @@ public class FastPathApplicationPropertiesType implements AMQPType<ApplicationPr",
                "+    private static final byte DESCRIPTOR_CODE = 0x74;",
                "+",
                "     private static final Object[] DESCRIPTORS =",
                "     {",
                "-        UnsignedLong.valueOf(0x0000000000000074L), Symbol.valueOf(\"amqp:application-properties:map\"),",
                "+        UnsignedLong.valueOf(DESCRIPTOR_CODE), Symbol.valueOf(\"amqp:application-properties:map\"),",
                "     };",
                "@@ -94,3 +96,4 @@ public class FastPathApplicationPropertiesType implements AMQPType<ApplicationPr",
                "         buffer.put(EncodingCodes.DESCRIBED_TYPE_INDICATOR);",
                "-        getEncoder().writeUnsignedLong(propertiesType.getDescriptor());",
                "+        buffer.put(EncodingCodes.SMALLULONG);",
                "+        buffer.put(DESCRIPTOR_CODE);",
                "diff --git a/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathDataType.java b/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathDataType.java",
                "index 75a7543f..a3cfb2a4 100644",
                "--- a/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathDataType.java",
                "+++ b/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathDataType.java",
                "@@ -24,3 +24,2 @@ import org.apache.qpid.proton.amqp.messaging.Data;",
                " import org.apache.qpid.proton.codec.AMQPType;",
                "-import org.apache.qpid.proton.codec.FastPathDescribedTypeConstructor;",
                " import org.apache.qpid.proton.codec.Decoder;",
                "@@ -29,2 +28,3 @@ import org.apache.qpid.proton.codec.EncoderImpl;",
                " import org.apache.qpid.proton.codec.EncodingCodes;",
                "+import org.apache.qpid.proton.codec.FastPathDescribedTypeConstructor;",
                " import org.apache.qpid.proton.codec.TypeEncoding;",
                "@@ -34,5 +34,7 @@ public class FastPathDataType implements AMQPType<Data>, FastPathDescribedTypeCo",
                "+    private static final byte DESCRIPTOR_CODE = 0x75;",
                "+",
                "     private static final Object[] DESCRIPTORS =",
                "     {",
                "-        UnsignedLong.valueOf(0x0000000000000075L), Symbol.valueOf(\"amqp:data:binary\"),",
                "+        UnsignedLong.valueOf(DESCRIPTOR_CODE), Symbol.valueOf(\"amqp:data:binary\"),",
                "     };",
                "@@ -92,3 +94,4 @@ public class FastPathDataType implements AMQPType<Data>, FastPathDescribedTypeCo",
                "         buffer.put(EncodingCodes.DESCRIBED_TYPE_INDICATOR);",
                "-        getEncoder().writeUnsignedLong(dataType.getDescriptor());",
                "+        buffer.put(EncodingCodes.SMALLULONG);",
                "+        buffer.put(DESCRIPTOR_CODE);",
                "         getEncoder().writeBinary(data.getValue());",
                "diff --git a/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathDeliveryAnnotationsType.java b/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathDeliveryAnnotationsType.java",
                "index 4252393f..acf91dcb 100644",
                "--- a/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathDeliveryAnnotationsType.java",
                "+++ b/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathDeliveryAnnotationsType.java",
                "@@ -35,5 +35,7 @@ public class FastPathDeliveryAnnotationsType implements AMQPType<DeliveryAnnotat",
                "+    private static final byte DESCRIPTOR_CODE = 0x71;",
                "+",
                "     private static final Object[] DESCRIPTORS =",
                "     {",
                "-        UnsignedLong.valueOf(0x0000000000000071L), Symbol.valueOf(\"amqp:delivery-annotations:map\"),",
                "+        UnsignedLong.valueOf(DESCRIPTOR_CODE), Symbol.valueOf(\"amqp:delivery-annotations:map\"),",
                "     };",
                "@@ -95,3 +97,4 @@ public class FastPathDeliveryAnnotationsType implements AMQPType<DeliveryAnnotat",
                "         buffer.put(EncodingCodes.DESCRIBED_TYPE_INDICATOR);",
                "-        getEncoder().writeUnsignedLong(annotationsType.getDescriptor());",
                "+        buffer.put(EncodingCodes.SMALLULONG);",
                "+        buffer.put(DESCRIPTOR_CODE);",
                "diff --git a/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathFooterType.java b/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathFooterType.java",
                "index d1b0d409..88f690f4 100644",
                "--- a/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathFooterType.java",
                "+++ b/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathFooterType.java",
                "@@ -35,5 +35,7 @@ public class FastPathFooterType implements AMQPType<Footer>, FastPathDescribedTy",
                "+    private static final byte DESCRIPTOR_CODE = 0x78;",
                "+",
                "     private static final Object[] DESCRIPTORS =",
                "     {",
                "-        UnsignedLong.valueOf(0x0000000000000078L), Symbol.valueOf(\"amqp:footer:map\"),",
                "+        UnsignedLong.valueOf(DESCRIPTOR_CODE), Symbol.valueOf(\"amqp:footer:map\"),",
                "     };",
                "@@ -94,3 +96,4 @@ public class FastPathFooterType implements AMQPType<Footer>, FastPathDescribedTy",
                "         buffer.put(EncodingCodes.DESCRIBED_TYPE_INDICATOR);",
                "-        getEncoder().writeUnsignedLong(footerType.getDescriptor());",
                "+        buffer.put(EncodingCodes.SMALLULONG);",
                "+        buffer.put(DESCRIPTOR_CODE);",
                "diff --git a/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathHeaderType.java b/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathHeaderType.java",
                "index 06d80266..2562e575 100644",
                "--- a/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathHeaderType.java",
                "+++ b/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathHeaderType.java",
                "@@ -24,3 +24,2 @@ import org.apache.qpid.proton.amqp.messaging.Header;",
                " import org.apache.qpid.proton.codec.AMQPType;",
                "-import org.apache.qpid.proton.codec.FastPathDescribedTypeConstructor;",
                " import org.apache.qpid.proton.codec.DecodeException;",
                "@@ -30,2 +29,3 @@ import org.apache.qpid.proton.codec.EncoderImpl;",
                " import org.apache.qpid.proton.codec.EncodingCodes;",
                "+import org.apache.qpid.proton.codec.FastPathDescribedTypeConstructor;",
                " import org.apache.qpid.proton.codec.TypeEncoding;",
                "@@ -35,5 +35,7 @@ public class FastPathHeaderType implements AMQPType<Header>, FastPathDescribedTy",
                "+    private static final byte DESCRIPTOR_CODE = 0x70;",
                "+",
                "     private static final Object[] DESCRIPTORS =",
                "     {",
                "-        UnsignedLong.valueOf(0x0000000000000070L), Symbol.valueOf(\"amqp:header:list\"),",
                "+        UnsignedLong.valueOf(DESCRIPTOR_CODE), Symbol.valueOf(\"amqp:header:list\"),",
                "     };",
                "@@ -142,7 +144,8 @@ public class FastPathHeaderType implements AMQPType<Header>, FastPathDescribedTy",
                "         buffer.put(EncodingCodes.DESCRIBED_TYPE_INDICATOR);",
                "-        getEncoder().writeUnsignedLong(headerType.getDescriptor());",
                "+        buffer.put(EncodingCodes.SMALLULONG);",
                "+        buffer.put(DESCRIPTOR_CODE);",
                "+        buffer.put(encodingCode);",
                "         // Optimized step, no other data to be written.",
                "-        if (count == 0 || encodingCode == EncodingCodes.LIST0) {",
                "-            buffer.put(EncodingCodes.LIST0);",
                "+        if (encodingCode == EncodingCodes.LIST0) {",
                "             return;",
                "@@ -154,6 +157,4 @@ public class FastPathHeaderType implements AMQPType<Header>, FastPathDescribedTy",
                "             fieldWidth = 1;",
                "-            buffer.put(EncodingCodes.LIST8);",
                "         } else {",
                "             fieldWidth = 4;",
                "-            buffer.put(EncodingCodes.LIST32);",
                "         }",
                "diff --git a/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathMessageAnnotationsType.java b/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathMessageAnnotationsType.java",
                "index 6d320042..195e4b55 100644",
                "--- a/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathMessageAnnotationsType.java",
                "+++ b/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathMessageAnnotationsType.java",
                "@@ -24,3 +24,2 @@ import org.apache.qpid.proton.amqp.messaging.MessageAnnotations;",
                " import org.apache.qpid.proton.codec.AMQPType;",
                "-import org.apache.qpid.proton.codec.FastPathDescribedTypeConstructor;",
                " import org.apache.qpid.proton.codec.Decoder;",
                "@@ -29,2 +28,3 @@ import org.apache.qpid.proton.codec.EncoderImpl;",
                " import org.apache.qpid.proton.codec.EncodingCodes;",
                "+import org.apache.qpid.proton.codec.FastPathDescribedTypeConstructor;",
                " import org.apache.qpid.proton.codec.MapType;",
                "@@ -35,5 +35,7 @@ public class FastPathMessageAnnotationsType implements AMQPType<MessageAnnotatio",
                "+    private static final byte DESCRIPTOR_CODE = 0x72;",
                "+",
                "     private static final Object[] DESCRIPTORS =",
                "     {",
                "-        UnsignedLong.valueOf(0x0000000000000072L), Symbol.valueOf(\"amqp:message-annotations:map\"),",
                "+        UnsignedLong.valueOf(DESCRIPTOR_CODE), Symbol.valueOf(\"amqp:message-annotations:map\"),",
                "     };",
                "@@ -95,3 +97,4 @@ public class FastPathMessageAnnotationsType implements AMQPType<MessageAnnotatio",
                "         buffer.put(EncodingCodes.DESCRIBED_TYPE_INDICATOR);",
                "-        getEncoder().writeUnsignedLong(annotationsType.getDescriptor());",
                "+        buffer.put(EncodingCodes.SMALLULONG);",
                "+        buffer.put(DESCRIPTOR_CODE);",
                "diff --git a/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathPropertiesType.java b/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathPropertiesType.java",
                "index e071ea90..3d5c7c49 100644",
                "--- a/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathPropertiesType.java",
                "+++ b/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathPropertiesType.java",
                "@@ -24,3 +24,2 @@ import org.apache.qpid.proton.amqp.messaging.Properties;",
                " import org.apache.qpid.proton.codec.AMQPType;",
                "-import org.apache.qpid.proton.codec.FastPathDescribedTypeConstructor;",
                " import org.apache.qpid.proton.codec.DecodeException;",
                "@@ -30,2 +29,3 @@ import org.apache.qpid.proton.codec.EncoderImpl;",
                " import org.apache.qpid.proton.codec.EncodingCodes;",
                "+import org.apache.qpid.proton.codec.FastPathDescribedTypeConstructor;",
                " import org.apache.qpid.proton.codec.TypeEncoding;",
                "@@ -35,5 +35,7 @@ public class FastPathPropertiesType implements AMQPType<Properties>, FastPathDes",
                "+    private static final byte DESCRIPTOR_CODE = 0x73;",
                "+",
                "     private static final Object[] DESCRIPTORS =",
                "     {",
                "-        UnsignedLong.valueOf(0x0000000000000073L), Symbol.valueOf(\"amqp:properties:list\"),",
                "+        UnsignedLong.valueOf(DESCRIPTOR_CODE), Symbol.valueOf(\"amqp:properties:list\"),",
                "     };",
                "@@ -166,7 +168,8 @@ public class FastPathPropertiesType implements AMQPType<Properties>, FastPathDes",
                "         buffer.put(EncodingCodes.DESCRIBED_TYPE_INDICATOR);",
                "-        getEncoder().writeUnsignedLong(propertiesType.getDescriptor());",
                "+        buffer.put(EncodingCodes.SMALLULONG);",
                "+        buffer.put(DESCRIPTOR_CODE);",
                "+        buffer.put(encodingCode);",
                "         // Optimized step, no other data to be written.",
                "-        if (count == 0 || encodingCode == EncodingCodes.LIST0) {",
                "-            buffer.put(EncodingCodes.LIST0);",
                "+        if (encodingCode == EncodingCodes.LIST0) {",
                "             return;",
                "@@ -178,6 +181,4 @@ public class FastPathPropertiesType implements AMQPType<Properties>, FastPathDes",
                "             fieldWidth = 1;",
                "-            buffer.put(EncodingCodes.LIST8);",
                "         } else {",
                "             fieldWidth = 4;",
                "-            buffer.put(EncodingCodes.LIST32);",
                "         }",
                "diff --git a/proton-j/src/main/java/org/apache/qpid/proton/codec/transport/FastPathDispositionType.java b/proton-j/src/main/java/org/apache/qpid/proton/codec/transport/FastPathDispositionType.java",
                "index c329aa7e..4424cfab 100644",
                "--- a/proton-j/src/main/java/org/apache/qpid/proton/codec/transport/FastPathDispositionType.java",
                "+++ b/proton-j/src/main/java/org/apache/qpid/proton/codec/transport/FastPathDispositionType.java",
                "@@ -28,3 +28,2 @@ import org.apache.qpid.proton.amqp.transport.Role;",
                " import org.apache.qpid.proton.codec.AMQPType;",
                "-import org.apache.qpid.proton.codec.FastPathDescribedTypeConstructor;",
                " import org.apache.qpid.proton.codec.DecodeException;",
                "@@ -34,2 +33,3 @@ import org.apache.qpid.proton.codec.EncoderImpl;",
                " import org.apache.qpid.proton.codec.EncodingCodes;",
                "+import org.apache.qpid.proton.codec.FastPathDescribedTypeConstructor;",
                " import org.apache.qpid.proton.codec.TypeEncoding;",
                "@@ -39,5 +39,15 @@ public class FastPathDispositionType implements AMQPType<Disposition>, FastPathD",
                "+    private static final byte DESCRIPTOR_CODE = 0x15;",
                "+    private static final byte ACCEPTED_DESCRIPTOR_CODE = 0x24;",
                "+",
                "     private static final Object[] DESCRIPTORS =",
                "     {",
                "-        UnsignedLong.valueOf(0x0000000000000015L), Symbol.valueOf(\"amqp:disposition:list\"),",
                "+        UnsignedLong.valueOf(DESCRIPTOR_CODE), Symbol.valueOf(\"amqp:disposition:list\"),",
                "+    };",
                "+",
                "+    private static final byte[] ACCEPTED_ENCODED_BYTES = new byte[] {",
                "+        EncodingCodes.DESCRIBED_TYPE_INDICATOR,",
                "+        EncodingCodes.SMALLULONG,",
                "+        ACCEPTED_DESCRIPTOR_CODE,",
                "+        EncodingCodes.LIST0",
                "     };",
                "@@ -150,3 +160,5 @@ public class FastPathDispositionType implements AMQPType<Disposition>, FastPathD",
                "         buffer.put(EncodingCodes.DESCRIBED_TYPE_INDICATOR);",
                "-        getEncoder().writeUnsignedLong(dispositionType.getDescriptor());",
                "+        buffer.put(EncodingCodes.SMALLULONG);",
                "+        buffer.put(DESCRIPTOR_CODE);",
                "+        buffer.put(encodingCode);",
                "@@ -156,6 +168,4 @@ public class FastPathDispositionType implements AMQPType<Disposition>, FastPathD",
                "             fieldWidth = 1;",
                "-            buffer.put(EncodingCodes.LIST8);",
                "         } else {",
                "             fieldWidth = 4;",
                "-            buffer.put(EncodingCodes.LIST32);",
                "         }",
                "@@ -206,3 +216,7 @@ public class FastPathDispositionType implements AMQPType<Disposition>, FastPathD",
                "             case 4:",
                "-                getEncoder().writeObject(disposition.getState());",
                "+                if (Accepted.getInstance().equals(disposition.getState())) {",
                "+                    getEncoder().getBuffer().put(ACCEPTED_ENCODED_BYTES, 0, ACCEPTED_ENCODED_BYTES.length);",
                "+                } else {",
                "+                    getEncoder().writeObject(disposition.getState());",
                "+                }",
                "                 break;",
                "diff --git a/proton-j/src/main/java/org/apache/qpid/proton/codec/transport/FastPathFlowType.java b/proton-j/src/main/java/org/apache/qpid/proton/codec/transport/FastPathFlowType.java",
                "index 6f500be6..7ed89e42 100644",
                "--- a/proton-j/src/main/java/org/apache/qpid/proton/codec/transport/FastPathFlowType.java",
                "+++ b/proton-j/src/main/java/org/apache/qpid/proton/codec/transport/FastPathFlowType.java",
                "@@ -24,3 +24,2 @@ import org.apache.qpid.proton.amqp.transport.Flow;",
                " import org.apache.qpid.proton.codec.AMQPType;",
                "-import org.apache.qpid.proton.codec.FastPathDescribedTypeConstructor;",
                " import org.apache.qpid.proton.codec.DecodeException;",
                "@@ -30,2 +29,3 @@ import org.apache.qpid.proton.codec.EncoderImpl;",
                " import org.apache.qpid.proton.codec.EncodingCodes;",
                "+import org.apache.qpid.proton.codec.FastPathDescribedTypeConstructor;",
                " import org.apache.qpid.proton.codec.TypeEncoding;",
                "@@ -35,5 +35,7 @@ public class FastPathFlowType implements AMQPType<Flow>, FastPathDescribedTypeCo",
                "+    private static final byte DESCRIPTOR_CODE = 0x13;",
                "+",
                "     private static final Object[] DESCRIPTORS =",
                "     {",
                "-        UnsignedLong.valueOf(0x0000000000000013L), Symbol.valueOf(\"amqp:flow:list\"),",
                "+        UnsignedLong.valueOf(DESCRIPTOR_CODE), Symbol.valueOf(\"amqp:flow:list\"),",
                "     };",
                "@@ -161,3 +163,5 @@ public class FastPathFlowType implements AMQPType<Flow>, FastPathDescribedTypeCo",
                "         buffer.put(EncodingCodes.DESCRIBED_TYPE_INDICATOR);",
                "-        getEncoder().writeUnsignedLong(flowType.getDescriptor());",
                "+        buffer.put(EncodingCodes.SMALLULONG);",
                "+        buffer.put(DESCRIPTOR_CODE);",
                "+        buffer.put(encodingCode);",
                "@@ -167,6 +171,4 @@ public class FastPathFlowType implements AMQPType<Flow>, FastPathDescribedTypeCo",
                "             fieldWidth = 1;",
                "-            buffer.put(EncodingCodes.LIST8);",
                "         } else {",
                "             fieldWidth = 4;",
                "-            buffer.put(EncodingCodes.LIST32);",
                "         }",
                "diff --git a/proton-j/src/main/java/org/apache/qpid/proton/codec/transport/FastPathTransferType.java b/proton-j/src/main/java/org/apache/qpid/proton/codec/transport/FastPathTransferType.java",
                "index 79842db6..d27e59cd 100644",
                "--- a/proton-j/src/main/java/org/apache/qpid/proton/codec/transport/FastPathTransferType.java",
                "+++ b/proton-j/src/main/java/org/apache/qpid/proton/codec/transport/FastPathTransferType.java",
                "@@ -27,3 +27,2 @@ import org.apache.qpid.proton.amqp.transport.Transfer;",
                " import org.apache.qpid.proton.codec.AMQPType;",
                "-import org.apache.qpid.proton.codec.FastPathDescribedTypeConstructor;",
                " import org.apache.qpid.proton.codec.DecodeException;",
                "@@ -33,2 +32,3 @@ import org.apache.qpid.proton.codec.EncoderImpl;",
                " import org.apache.qpid.proton.codec.EncodingCodes;",
                "+import org.apache.qpid.proton.codec.FastPathDescribedTypeConstructor;",
                " import org.apache.qpid.proton.codec.TypeEncoding;",
                "@@ -41,5 +41,7 @@ public class FastPathTransferType implements AMQPType<Transfer>, FastPathDescrib",
                "+    private static final byte DESCRIPTOR_CODE = 0x14;",
                "+",
                "     private static final Object[] DESCRIPTORS =",
                "     {",
                "-        UnsignedLong.valueOf(0x0000000000000014L), Symbol.valueOf(\"amqp:transfer:list\"),",
                "+        UnsignedLong.valueOf(DESCRIPTOR_CODE), Symbol.valueOf(\"amqp:transfer:list\"),",
                "     };",
                "@@ -168,3 +170,5 @@ public class FastPathTransferType implements AMQPType<Transfer>, FastPathDescrib",
                "         buffer.put(EncodingCodes.DESCRIBED_TYPE_INDICATOR);",
                "-        getEncoder().writeUnsignedLong(transferType.getDescriptor());",
                "+        buffer.put(EncodingCodes.SMALLULONG);",
                "+        buffer.put(DESCRIPTOR_CODE);",
                "+        buffer.put(encodingCode);",
                "@@ -174,6 +178,4 @@ public class FastPathTransferType implements AMQPType<Transfer>, FastPathDescrib",
                "             fieldWidth = 1;",
                "-            buffer.put(EncodingCodes.LIST8);",
                "         } else {",
                "             fieldWidth = 4;",
                "-            buffer.put(EncodingCodes.LIST32);",
                "         }"
            ],
            "changed_files": [
                "proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathAcceptedType.java",
                "proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathAmqpSequenceType.java",
                "proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathAmqpValueType.java",
                "proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathApplicationPropertiesType.java",
                "proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathDataType.java",
                "proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathDeliveryAnnotationsType.java",
                "proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathFooterType.java",
                "proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathHeaderType.java",
                "proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathMessageAnnotationsType.java",
                "proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathPropertiesType.java",
                "proton-j/src/main/java/org/apache/qpid/proton/codec/transport/FastPathDispositionType.java",
                "proton-j/src/main/java/org/apache/qpid/proton/codec/transport/FastPathFlowType.java",
                "proton-j/src/main/java/org/apache/qpid/proton/codec/transport/FastPathTransferType.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PROTON-19": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "0.30.0",
                "0.31.0",
                "0.32.0",
                "0.33.0",
                "0.33.1",
                "0.33.10",
                "0.33.2",
                "0.33.3",
                "0.33.4",
                "0.33.5",
                "0.33.6",
                "0.33.7",
                "0.33.8",
                "0.33.9",
                "0.34.0",
                "0.34.1"
            ],
            "matched_rules": [
                {
                    "id": "XREF_BUG",
                    "message": "The commit and the advisory (including referenced pages) mention the same bug tracking ticket: PROTON-19",
                    "relevance": 32
                },
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 1 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: transport",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: transport",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: proton-j/src/main/java/org/apache/qpid/proton/codec/transport/FastPathTransferType.java, proton-j/src/main/java/org/apache/qpid/proton/codec/transport/FastPathDispositionType.java, proton-j/src/main/java/org/apache/qpid/proton/codec/transport/FastPathFlowType.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: method, transport",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: transport",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PROTON-19",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0cb8ca03cec42120dcfc434561592d89a89a805e",
            "repository": "https://github.com/apache/qpid-proton-j",
            "timestamp": 1541506629,
            "hunks": 28,
            "message": "PROTON-1962: update some defaults and related handling",
            "diff": [
                "diff --git a/proton-j/src/main/java/org/apache/qpid/proton/engine/SslDomain.java b/proton-j/src/main/java/org/apache/qpid/proton/engine/SslDomain.java",
                "index 279d9349..06a35175 100644",
                "--- a/proton-j/src/main/java/org/apache/qpid/proton/engine/SslDomain.java",
                "+++ b/proton-j/src/main/java/org/apache/qpid/proton/engine/SslDomain.java",
                "@@ -51,3 +51,5 @@ public interface SslDomain",
                "      *",
                "-     * {@link #ANONYMOUS_PEER} is configured by default.",
                "+     * {@link #VERIFY_PEER_NAME} is used by default in {@link Mode#CLIENT client}",
                "+     * mode if not configured otherwise, with {@link #ANONYMOUS_PEER} used for",
                "+     * {@link Mode#SERVER server} mode if not configured otherwise.",
                "      */",
                "@@ -56,6 +58,13 @@ public interface SslDomain",
                "         /**",
                "-         * will only connect to those peers that provide a valid identifying certificate signed",
                "-         * by a trusted CA and are using an authenticated cipher",
                "+         * Requires peers provide a valid identifying certificate signed by",
                "+         * a trusted certificate. Does not verify hostname details of the",
                "+         * peer certificate, use {@link #VERIFY_PEER_NAME} for this instead.",
                "          */",
                "         VERIFY_PEER,",
                "+        /**",
                "+         * Requires peers provide a valid identifying certificate signed",
                "+         * by a trusted certificate, including verifying hostname details",
                "+         * of the certificate using peer details provided when configuring",
                "+         * TLS via {@link Transport#ssl(SslDomain, SslPeerDetails)}.",
                "+         */",
                "         VERIFY_PEER_NAME,",
                "diff --git a/proton-j/src/main/java/org/apache/qpid/proton/engine/Transport.java b/proton-j/src/main/java/org/apache/qpid/proton/engine/Transport.java",
                "index f8de042c..66cde843 100644",
                "--- a/proton-j/src/main/java/org/apache/qpid/proton/engine/Transport.java",
                "+++ b/proton-j/src/main/java/org/apache/qpid/proton/engine/Transport.java",
                "@@ -196,11 +196,17 @@ public interface Transport extends Endpoint",
                "      * @param sslDomain the SSL settings to use",
                "-     * @param sslPeerDetails may be null, in which case SSL session resume will not be attempted",
                "+     * @param sslPeerDetails peer details, used for SNI, hostname verification, etc when connecting. May be null.",
                "      * @return an {@link Ssl} object representing the SSL session.",
                "+     * @throws IllegalArgumentException if the sslDomain requests hostname verification but sslPeerDetails are null.",
                "+     * @throws IllegalStateException if the sslDomain has not been initialised.",
                "      */",
                "-    Ssl ssl(SslDomain sslDomain, SslPeerDetails sslPeerDetails);",
                "+    Ssl ssl(SslDomain sslDomain, SslPeerDetails sslPeerDetails) throws IllegalArgumentException;",
                "     /**",
                "-     * As per {@link #ssl(SslDomain, SslPeerDetails)} but no attempt is made to resume a previous SSL session.",
                "+     * Equivalent to {@link #ssl(SslDomain, SslPeerDetails)} but passing null for SslPeerDetails, meaning no SNI detail",
                "+     * is sent, hostname verification isn't supported etc when connecting.",
                "+     *",
                "+     * @throws IllegalArgumentException if the sslDomain requests hostname verification.",
                "+     * @throws IllegalStateException if the sslDomain has not been initialised.",
                "      */",
                "-    Ssl ssl(SslDomain sslDomain);",
                "+    Ssl ssl(SslDomain sslDomain) throws IllegalArgumentException;",
                "diff --git a/proton-j/src/main/java/org/apache/qpid/proton/engine/impl/ssl/SimpleSslTransportWrapper.java b/proton-j/src/main/java/org/apache/qpid/proton/engine/impl/ssl/SimpleSslTransportWrapper.java",
                "index a30e88b0..f2454b3c 100644",
                "--- a/proton-j/src/main/java/org/apache/qpid/proton/engine/impl/ssl/SimpleSslTransportWrapper.java",
                "+++ b/proton-j/src/main/java/org/apache/qpid/proton/engine/impl/ssl/SimpleSslTransportWrapper.java",
                "@@ -362,5 +362,11 @@ public class SimpleSslTransportWrapper implements SslTransportWrapper",
                "         } catch (SSLException e) {",
                "-            _logger.log(Level.WARNING, e.getMessage());",
                "+            if(_logger.isLoggable(Level.FINEST)){",
                "+                _logger.log(Level.FINEST, e.getMessage(), e);",
                "+            } else {",
                "+                _logger.log(Level.WARNING, e.getMessage());",
                "+            }",
                "             _inputBuffer.position(_inputBuffer.limit());",
                "             _tail_closed = true;",
                "+",
                "+            throw new TransportException(e);",
                "         } finally {",
                "diff --git a/proton-j/src/main/java/org/apache/qpid/proton/engine/impl/ssl/SslDomainImpl.java b/proton-j/src/main/java/org/apache/qpid/proton/engine/impl/ssl/SslDomainImpl.java",
                "index 3928b056..fddde1a8 100644",
                "--- a/proton-j/src/main/java/org/apache/qpid/proton/engine/impl/ssl/SslDomainImpl.java",
                "+++ b/proton-j/src/main/java/org/apache/qpid/proton/engine/impl/ssl/SslDomainImpl.java",
                "@@ -21,3 +21,2 @@ package org.apache.qpid.proton.engine.impl.ssl;",
                " import javax.net.ssl.SSLContext;",
                "-import org.apache.qpid.proton.ProtonUnsupportedOperationException;",
                " import org.apache.qpid.proton.engine.ProtonJSslDomain;",
                "@@ -29,3 +28,3 @@ public class SslDomainImpl implements SslDomain, ProtonSslEngineProvider, Proton",
                "     private Mode _mode;",
                "-    private VerifyMode _verifyMode = VerifyMode.ANONYMOUS_PEER;",
                "+    private VerifyMode _verifyMode;",
                "     private String _certificateFile;",
                "@@ -96,6 +95,2 @@ public class SslDomainImpl implements SslDomain, ProtonSslEngineProvider, Proton",
                "     {",
                "-        if(verifyMode == VerifyMode.VERIFY_PEER_NAME)",
                "-        {",
                "-            throw new ProtonUnsupportedOperationException();",
                "-        }",
                "         _verifyMode = verifyMode;",
                "@@ -107,2 +102,7 @@ public class SslDomainImpl implements SslDomain, ProtonSslEngineProvider, Proton",
                "     {",
                "+        if(_verifyMode == null)",
                "+        {",
                "+           return _mode == Mode.SERVER ? VerifyMode.ANONYMOUS_PEER : VerifyMode.VERIFY_PEER_NAME;",
                "+        }",
                "+",
                "         return _verifyMode;",
                "diff --git a/proton-j/src/main/java/org/apache/qpid/proton/engine/impl/ssl/SslEngineFacadeFactory.java b/proton-j/src/main/java/org/apache/qpid/proton/engine/impl/ssl/SslEngineFacadeFactory.java",
                "index 309e0dc9..6a730df1 100644",
                "--- a/proton-j/src/main/java/org/apache/qpid/proton/engine/impl/ssl/SslEngineFacadeFactory.java",
                "+++ b/proton-j/src/main/java/org/apache/qpid/proton/engine/impl/ssl/SslEngineFacadeFactory.java",
                "@@ -55,2 +55,3 @@ import javax.net.ssl.SSLContext;",
                " import javax.net.ssl.SSLEngine;",
                "+import javax.net.ssl.SSLParameters;",
                " import javax.net.ssl.TrustManager;",
                "@@ -234,2 +235,9 @@ public class SslEngineFacadeFactory",
                "             }",
                "+",
                "+            if(domain.getPeerAuthentication() == SslDomain.VerifyMode.VERIFY_PEER_NAME)",
                "+            {",
                "+                SSLParameters sslParameters = sslEngine.getSSLParameters();",
                "+                sslParameters.setEndpointIdentificationAlgorithm(\"HTTPS\");",
                "+                sslEngine.setSSLParameters(sslParameters);",
                "+            }",
                "         }",
                "diff --git a/proton-j/src/main/java/org/apache/qpid/proton/engine/impl/ssl/SslImpl.java b/proton-j/src/main/java/org/apache/qpid/proton/engine/impl/ssl/SslImpl.java",
                "index de993510..24d7c438 100644",
                "--- a/proton-j/src/main/java/org/apache/qpid/proton/engine/impl/ssl/SslImpl.java",
                "+++ b/proton-j/src/main/java/org/apache/qpid/proton/engine/impl/ssl/SslImpl.java",
                "@@ -27,2 +27,3 @@ import org.apache.qpid.proton.engine.Ssl;",
                " import org.apache.qpid.proton.engine.SslDomain;",
                "+import org.apache.qpid.proton.engine.SslDomain.VerifyMode;",
                " import org.apache.qpid.proton.engine.SslPeerDetails;",
                "@@ -56,2 +57,10 @@ public class SslImpl implements Ssl, TransportLayer",
                "         _peerDetails = peerDetails;",
                "+",
                "+        if(_domain.getMode() == null) {",
                "+            throw new IllegalStateException(\"Client/server mode must be configured, SslDomain must have init called.\");",
                "+        }",
                "+",
                "+        if(_peerDetails == null && _domain.getPeerAuthentication() == VerifyMode.VERIFY_PEER_NAME) {",
                "+            throw new IllegalArgumentException(\"Peer hostname verification is enabled, but no peer details were provided\");",
                "+        }",
                "     }",
                "diff --git a/proton-j/src/main/java/org/apache/qpid/proton/reactor/impl/IOHandler.java b/proton-j/src/main/java/org/apache/qpid/proton/reactor/impl/IOHandler.java",
                "index 81b85ff1..5d58182d 100644",
                "--- a/proton-j/src/main/java/org/apache/qpid/proton/reactor/impl/IOHandler.java",
                "+++ b/proton-j/src/main/java/org/apache/qpid/proton/reactor/impl/IOHandler.java",
                "@@ -39,2 +39,3 @@ import org.apache.qpid.proton.engine.Sasl;",
                " import org.apache.qpid.proton.engine.Transport;",
                "+import org.apache.qpid.proton.engine.TransportException;",
                " import org.apache.qpid.proton.engine.impl.TransportImpl;",
                "@@ -234,3 +235,3 @@ public class IOHandler extends BaseHandler {",
                "                     }",
                "-                } catch (IOException e) {",
                "+                } catch (IOException | TransportException e) {",
                "                     ErrorCondition condition = new ErrorCondition();",
                "diff --git a/tests/python/proton_tests/ssl.py b/tests/python/proton_tests/ssl.py",
                "index 1a057806..518ef4dd 100644",
                "--- a/tests/python/proton_tests/ssl.py",
                "+++ b/tests/python/proton_tests/ssl.py",
                "@@ -27,2 +27,3 @@ import sys",
                " from proton import *",
                "+from org.apache.qpid.proton.engine import TransportException",
                " from .common import Skipped, pump",
                "@@ -84,2 +85,21 @@ class SslTest(common.Test):",
                "+    def _pump_with_failing_negotiation(self, client, server, onesided = False):",
                "+        # Exception once for client/server transport",
                "+        try:",
                "+            self._pump( client, server )",
                "+            assert False, \"Expected exception did not occur!\"",
                "+        except TransportException:",
                "+            pass",
                "+",
                "+        if(onesided != True):",
                "+            # Exception once for server/client transport",
                "+            try:",
                "+                self._pump( client, server )",
                "+                assert False, \"Expected exception did not occur!\"",
                "+            except TransportException:",
                "+                pass",
                "+",
                "+        # Ensure both are processed to completion",
                "+        self._pump( client, server )",
                "+",
                "     def _do_handshake(self, client, server):",
                "@@ -156,2 +176,4 @@ class SslTest(common.Test):",
                "         server = SslTest.SslTestConnection( self.server_domain, mode=Transport.SERVER )",
                "+",
                "+        self.client_domain.set_peer_authentication( SSLDomain.ANONYMOUS_PEER )",
                "         client = SslTest.SslTestConnection( self.client_domain )",
                "@@ -237,3 +259,3 @@ class SslTest(common.Test):",
                "         server.connection.open()",
                "-        self._pump( client, server )",
                "+        self._pump_with_failing_negotiation(client, server)",
                "         assert client.transport.closed",
                "@@ -262,3 +284,3 @@ class SslTest(common.Test):",
                "         server.connection.open()",
                "-        self._pump( client, server )",
                "+        self._pump_with_failing_negotiation(client, server)",
                "         assert client.transport.closed",
                "@@ -337,3 +359,3 @@ class SslTest(common.Test):",
                "         server.connection.open()",
                "-        self._pump( client, server )",
                "+        self._pump_with_failing_negotiation(client, server)",
                "         assert client.transport.closed",
                "@@ -432,3 +454,3 @@ class SslTest(common.Test):",
                "         server.connection.open()",
                "-        self._pump( client, server )",
                "+        self._pump_with_failing_negotiation(client, server, onesided = True)",
                "         assert client.transport.closed",
                "@@ -481,2 +503,3 @@ class SslTest(common.Test):",
                "         transport = Transport()",
                "+        self.client_domain.set_peer_authentication( SSLDomain.VERIFY_PEER )",
                "         ssl1 = SSL(transport, self.client_domain)"
            ],
            "changed_files": [
                "proton-j/src/main/java/org/apache/qpid/proton/engine/SslDomain.java",
                "proton-j/src/main/java/org/apache/qpid/proton/engine/Transport.java",
                "proton-j/src/main/java/org/apache/qpid/proton/engine/impl/ssl/SimpleSslTransportWrapper.java",
                "proton-j/src/main/java/org/apache/qpid/proton/engine/impl/ssl/SslDomainImpl.java",
                "proton-j/src/main/java/org/apache/qpid/proton/engine/impl/ssl/SslEngineFacadeFactory.java",
                "proton-j/src/main/java/org/apache/qpid/proton/engine/impl/ssl/SslImpl.java",
                "proton-j/src/main/java/org/apache/qpid/proton/reactor/impl/IOHandler.java",
                "tests/python/proton_tests/ssl.py"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PROTON-1962": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "0.30.0",
                "0.31.0",
                "0.32.0",
                "0.33.0",
                "0.33.1",
                "0.33.10",
                "0.33.2",
                "0.33.3",
                "0.33.4",
                "0.33.5",
                "0.33.6",
                "0.33.7",
                "0.33.8",
                "0.33.9",
                "0.34.0",
                "0.34.1"
            ],
            "matched_rules": [
                {
                    "id": "XREF_BUG",
                    "message": "The commit and the advisory (including referenced pages) mention the same bug tracking ticket: PROTON-1962",
                    "relevance": 32
                },
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 3 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: ssl, TLS, transport",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: proton-j/src/main/java/org/apache/qpid/proton/engine/impl/ssl/SimpleSslTransportWrapper.java, proton-j/src/main/java/org/apache/qpid/proton/engine/Transport.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: default",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: wrapper, engine, transport",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PROTON-1962",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "50b507ff2d93155579dda6c1b6ab5b60bde0beee",
            "repository": "https://github.com/apache/qpid-proton-j",
            "timestamp": 1539595748,
            "hunks": 8,
            "message": "NO-JIRA: trivial code cleanups. This closes #18.",
            "diff": [
                "diff --git a/examples/reactor/src/main/java/org/apache/qpid/proton/example/reactor/GoodbyeWorld.java b/examples/reactor/src/main/java/org/apache/qpid/proton/example/reactor/GoodbyeWorld.java",
                "index 6a69ba16..8795256a 100644",
                "--- a/examples/reactor/src/main/java/org/apache/qpid/proton/example/reactor/GoodbyeWorld.java",
                "+++ b/examples/reactor/src/main/java/org/apache/qpid/proton/example/reactor/GoodbyeWorld.java",
                "@@ -52,3 +52,3 @@ public class GoodbyeWorld extends BaseHandler {",
                "     public void onReactorFinal(Event e) {",
                "-        System.out.println(\"Goodbye, World!\");;",
                "+        System.out.println(\"Goodbye, World!\");",
                "     }",
                "diff --git a/proton-j/src/main/java/org/apache/qpid/proton/codec/BigIntegerType.java b/proton-j/src/main/java/org/apache/qpid/proton/codec/BigIntegerType.java",
                "index f74e80b4..cdaa535b 100644",
                "--- a/proton-j/src/main/java/org/apache/qpid/proton/codec/BigIntegerType.java",
                "+++ b/proton-j/src/main/java/org/apache/qpid/proton/codec/BigIntegerType.java",
                "@@ -37,4 +37,4 @@ public class BigIntegerType extends AbstractPrimitiveType<BigInteger> {",
                "     private static final BigInteger BIG_BYTE_MAX = BigInteger.valueOf(Byte.MAX_VALUE);",
                "-    private static final BigInteger BIG_LONG_MIN = BigInteger.valueOf(Long.MIN_VALUE);;",
                "-    private static final BigInteger BIG_LONG_MAX = BigInteger.valueOf(Long.MAX_VALUE);;",
                "+    private static final BigInteger BIG_LONG_MIN = BigInteger.valueOf(Long.MIN_VALUE);",
                "+    private static final BigInteger BIG_LONG_MAX = BigInteger.valueOf(Long.MAX_VALUE);",
                "diff --git a/proton-j/src/main/java/org/apache/qpid/proton/engine/EndpointState.java b/proton-j/src/main/java/org/apache/qpid/proton/engine/EndpointState.java",
                "index c11da6c4..d04feef3 100644",
                "--- a/proton-j/src/main/java/org/apache/qpid/proton/engine/EndpointState.java",
                "+++ b/proton-j/src/main/java/org/apache/qpid/proton/engine/EndpointState.java",
                "@@ -30,3 +30,3 @@ public enum EndpointState",
                "     ACTIVE,",
                "-    CLOSED;",
                "+    CLOSED,",
                " }",
                "diff --git a/proton-j/src/main/java/org/apache/qpid/proton/engine/impl/SaslImpl.java b/proton-j/src/main/java/org/apache/qpid/proton/engine/impl/SaslImpl.java",
                "index ec7bffc4..fecf7e6b 100644",
                "--- a/proton-j/src/main/java/org/apache/qpid/proton/engine/impl/SaslImpl.java",
                "+++ b/proton-j/src/main/java/org/apache/qpid/proton/engine/impl/SaslImpl.java",
                "@@ -73,3 +73,3 @@ public class SaslImpl implements Sasl, SaslFrameBody.SaslFrameBodyHandler<Void>,",
                "-    enum Role { CLIENT, SERVER };",
                "+    enum Role { CLIENT, SERVER }",
                "@@ -91,4 +91,4 @@ public class SaslImpl implements Sasl, SaslFrameBody.SaslFrameBodyHandler<Void>,",
                "      * @param maxFrameSize the size of the input and output buffers",
                "-     * returned by {@link SaslTransportWrapper#getInputBuffer()} and",
                "-     * {@link SaslTransportWrapper#getOutputBuffer()}.",
                "+     * {@link SaslTransportWrapper#_inputBuffer} and",
                "+     * {@link SaslTransportWrapper#_outputBuffer}.",
                "      */",
                "diff --git a/proton-j/src/main/java/org/apache/qpid/proton/engine/impl/TransportImpl.java b/proton-j/src/main/java/org/apache/qpid/proton/engine/impl/TransportImpl.java",
                "index e07edbbf..1a02cf36 100644",
                "--- a/proton-j/src/main/java/org/apache/qpid/proton/engine/impl/TransportImpl.java",
                "+++ b/proton-j/src/main/java/org/apache/qpid/proton/engine/impl/TransportImpl.java",
                "@@ -1,2 +1,2 @@",
                "-/**",
                "+/*",
                "  * Licensed to the Apache Software Foundation (ASF) under one or more",
                "diff --git a/proton-j/src/main/java/org/apache/qpid/proton/engine/impl/ssl/DefaultSslEngineFacade.java b/proton-j/src/main/java/org/apache/qpid/proton/engine/impl/ssl/DefaultSslEngineFacade.java",
                "index 8c381267..12338139 100644",
                "--- a/proton-j/src/main/java/org/apache/qpid/proton/engine/impl/ssl/DefaultSslEngineFacade.java",
                "+++ b/proton-j/src/main/java/org/apache/qpid/proton/engine/impl/ssl/DefaultSslEngineFacade.java",
                "@@ -38,3 +38,3 @@ class DefaultSslEngineFacade implements ProtonSslEngine",
                "      * than that provided by {@link SSLSession#getApplicationBufferSize()} otherwise",
                "-     * {@link Status#BUFFER_OVERFLOW} will result on {@link SSLEngine#unwrap()}.",
                "+     * {@link Status#BUFFER_OVERFLOW} will result on {@link SSLEngine#unwrap}.",
                "      * Sun's own example uses 50, so we use the same.",
                "diff --git a/proton-j/src/main/java/org/apache/qpid/proton/engine/impl/ssl/SslEngineFacadeFactory.java b/proton-j/src/main/java/org/apache/qpid/proton/engine/impl/ssl/SslEngineFacadeFactory.java",
                "index 6a730df1..71788fb0 100644",
                "--- a/proton-j/src/main/java/org/apache/qpid/proton/engine/impl/ssl/SslEngineFacadeFactory.java",
                "+++ b/proton-j/src/main/java/org/apache/qpid/proton/engine/impl/ssl/SslEngineFacadeFactory.java",
                "@@ -249,3 +249,3 @@ public class SslEngineFacadeFactory",
                "-        boolean useClientMode = mode == SslDomain.Mode.CLIENT ? true : false;",
                "+        boolean useClientMode = mode == SslDomain.Mode.CLIENT;",
                "         sslEngine.setUseClientMode(useClientMode);"
            ],
            "changed_files": [
                "examples/reactor/src/main/java/org/apache/qpid/proton/example/reactor/GoodbyeWorld.java",
                "proton-j/src/main/java/org/apache/qpid/proton/codec/BigIntegerType.java",
                "proton-j/src/main/java/org/apache/qpid/proton/engine/EndpointState.java",
                "proton-j/src/main/java/org/apache/qpid/proton/engine/impl/SaslImpl.java",
                "proton-j/src/main/java/org/apache/qpid/proton/engine/impl/TransportImpl.java",
                "proton-j/src/main/java/org/apache/qpid/proton/engine/impl/ssl/DefaultSslEngineFacade.java",
                "proton-j/src/main/java/org/apache/qpid/proton/engine/impl/ssl/SslEngineFacadeFactory.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "18": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "0.30.0",
                "0.31.0",
                "0.32.0",
                "0.33.0",
                "0.33.1",
                "0.33.10",
                "0.33.2",
                "0.33.3",
                "0.33.4",
                "0.33.5",
                "0.33.6",
                "0.33.7",
                "0.33.8",
                "0.33.9",
                "0.34.0",
                "0.34.1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: ssl",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: proton-j/src/main/java/org/apache/qpid/proton/engine/impl/TransportImpl.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: engine, default, transport",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 18",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "19bf22f7e9b88e73db4b195f674d1527dbd713f3",
            "repository": "https://github.com/apache/qpid-proton-j",
            "timestamp": 1540910864,
            "hunks": 10,
            "message": "PROTON-1938: align TransportImpl set/getCondition behaviour, plus stop the closed method replacing an existing ErrorCondition",
            "diff": [
                "diff --git a/proton-j/src/main/java/org/apache/qpid/proton/engine/impl/TransportImpl.java b/proton-j/src/main/java/org/apache/qpid/proton/engine/impl/TransportImpl.java",
                "index 8947fa31..e07edbbf 100644",
                "--- a/proton-j/src/main/java/org/apache/qpid/proton/engine/impl/TransportImpl.java",
                "+++ b/proton-j/src/main/java/org/apache/qpid/proton/engine/impl/TransportImpl.java",
                "@@ -127,3 +127,3 @@ public class TransportImpl extends EndpointImpl",
                "     private boolean _head_closed = false;",
                "-    private ErrorCondition _condition = null;",
                "+    private boolean _conditionSet;",
                "@@ -252,3 +252,15 @@ public class TransportImpl extends EndpointImpl",
                "     {",
                "-        return _condition;",
                "+        // Get the ErrorCondition, but only return it if its condition field is populated.",
                "+        // This somewhat retains prior TransportImpl behaviour of returning null when no",
                "+        // condition had been set (by TransportImpl itself) rather than the 'empty' ErrorCondition",
                "+        // object historically used in the other areas.",
                "+        ErrorCondition errorCondition = super.getCondition();",
                "+        return errorCondition.getCondition() != null ? errorCondition : null;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setCondition(ErrorCondition error)",
                "+    {",
                "+        super.setCondition(error);",
                "+        _conditionSet = error != null && error.getCondition() != null;",
                "     }",
                "@@ -846,3 +858,3 @@ public class TransportImpl extends EndpointImpl",
                "     {",
                "-        if (!_isOpenSent && (_condition != null ||",
                "+        if (!_isOpenSent && (_conditionSet ||",
                "              (_connectionEndpoint != null &&",
                "@@ -1044,3 +1056,3 @@ public class TransportImpl extends EndpointImpl",
                "     {",
                "-        if ((_condition != null ||",
                "+        if ((_conditionSet ||",
                "              (_connectionEndpoint != null &&",
                "@@ -1055,3 +1067,3 @@ public class TransportImpl extends EndpointImpl",
                "                 if (_connectionEndpoint == null) {",
                "-                    localError = _condition;",
                "+                    localError = getCondition();",
                "                 } else {",
                "@@ -1060,3 +1072,3 @@ public class TransportImpl extends EndpointImpl",
                "-                if(localError.getCondition() != null)",
                "+                if(localError != null && localError.getCondition() != null)",
                "                 {",
                "@@ -1421,12 +1433,12 @@ public class TransportImpl extends EndpointImpl",
                "         if (!_closeReceived || error != null) {",
                "-            if (error == null) {",
                "-                _condition = new ErrorCondition(ConnectionError.FRAMING_ERROR,",
                "-                                               \"connection aborted\");",
                "-            } else {",
                "-                _condition = new ErrorCondition(ConnectionError.FRAMING_ERROR,",
                "-                                                error.toString());",
                "+            // Set an error condition, but only if one was not already set",
                "+            if(!_conditionSet) {",
                "+                String description =  error == null ? \"connection aborted\" : error.toString();",
                "+                setCondition(new ErrorCondition(ConnectionError.FRAMING_ERROR, description));",
                "             }",
                "+",
                "             _head_closed = true;",
                "         }",
                "-        if (_condition != null && !postedTransportError) {",
                "+",
                "+        if (_conditionSet && !postedTransportError) {",
                "             put(Event.Type.TRANSPORT_ERROR, this);",
                "@@ -1434,2 +1446,3 @@ public class TransportImpl extends EndpointImpl",
                "         }",
                "+",
                "         if (!postedTailClosed) {"
            ],
            "changed_files": [
                "proton-j/src/main/java/org/apache/qpid/proton/engine/impl/TransportImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PROTON-1938": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "0.30.0",
                "0.31.0",
                "0.32.0",
                "0.33.0",
                "0.33.1",
                "0.33.10",
                "0.33.2",
                "0.33.3",
                "0.33.4",
                "0.33.5",
                "0.33.6",
                "0.33.7",
                "0.33.8",
                "0.33.9",
                "0.34.0",
                "0.34.1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: proton-j/src/main/java/org/apache/qpid/proton/engine/impl/TransportImpl.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: method, transport",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: engine, transport",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PROTON-1938",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c8fd87e09177f49bd8f8ce7744d2f83af3510b3b",
            "repository": "https://github.com/apache/qpid-proton-j",
            "timestamp": 1542140810,
            "hunks": 175,
            "message": "PROTON-1963 Optimize hot path for encoder and decoder classes Optimize the hot paths in the encoder and decoder to deal directly with the primitive types and allow inlining of the normal encodings lookup path.  Also cleans up some type encoding to use the read with defaults methods.",
            "diff": [
                "diff --git a/proton-j/src/main/java/org/apache/qpid/proton/codec/DecoderImpl.java b/proton-j/src/main/java/org/apache/qpid/proton/codec/DecoderImpl.java",
                "index 2d4989bb..a85b0fff 100644",
                "--- a/proton-j/src/main/java/org/apache/qpid/proton/codec/DecoderImpl.java",
                "+++ b/proton-j/src/main/java/org/apache/qpid/proton/codec/DecoderImpl.java",
                "@@ -22,2 +22,14 @@ package org.apache.qpid.proton.codec;",
                "+import java.lang.reflect.Array;",
                "+import java.nio.ByteBuffer;",
                "+import java.nio.charset.CharsetDecoder;",
                "+import java.nio.charset.StandardCharsets;",
                "+import java.util.Collection;",
                "+import java.util.Collections;",
                "+import java.util.Date;",
                "+import java.util.HashMap;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+import java.util.UUID;",
                "+",
                " import org.apache.qpid.proton.ProtonException;",
                "@@ -34,8 +46,2 @@ import org.apache.qpid.proton.amqp.UnsignedShort;",
                "-import java.lang.reflect.Array;",
                "-import java.nio.ByteBuffer;",
                "-import java.nio.charset.CharsetDecoder;",
                "-import java.nio.charset.StandardCharsets;",
                "-import java.util.*;",
                "-",
                " public class DecoderImpl implements ByteBufferDecoder",
                "@@ -92,3 +98,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "             {",
                "-                descriptor = readUnsignedLong();",
                "+                descriptor = readUnsignedLong(null);",
                "             }",
                "@@ -96,3 +102,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "             {",
                "-                descriptor = readSymbol();",
                "+                descriptor = readSymbol(null);",
                "             }",
                "@@ -112,3 +118,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "-            TypeConstructor<?> nestedEncoding = readConstructor();",
                "+            TypeConstructor<?> nestedEncoding = readConstructor(false);",
                "             DescribedTypeConstructor<?> dtc = _dynamicTypeConstructors.get(descriptor);",
                "@@ -118,2 +124,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "                 {",
                "+                    @Override",
                "                     public DescribedType newInstance(final Object described)",
                "@@ -123,2 +130,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+                    @Override",
                "                     public Class<?> getTypeClass()",
                "@@ -138,2 +146,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public void register(final Object descriptor, final FastPathDescribedTypeConstructor<?> btc)",
                "@@ -143,2 +152,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public void register(final Object descriptor, final DescribedTypeConstructor dtc)",
                "@@ -159,2 +169,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public Boolean readBoolean()",
                "@@ -164,2 +175,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public Boolean readBoolean(final Boolean defaultVal)",
                "@@ -175,3 +187,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "             case EncodingCodes.BOOLEAN:",
                "-                return (Boolean) _constructors[EncodingCodes.BOOLEAN & 0xff].readValue();",
                "+                return readRawByte() == 0 ? Boolean.FALSE : Boolean.TRUE;",
                "             case EncodingCodes.NULL:",
                "@@ -183,2 +195,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public boolean readBoolean(final boolean defaultVal)",
                "@@ -194,3 +207,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "             case EncodingCodes.BOOLEAN:",
                "-                return (Boolean) _constructors[EncodingCodes.BOOLEAN & 0xff].readValue();",
                "+                return readRawByte() != 0;",
                "             case EncodingCodes.NULL:",
                "@@ -202,2 +215,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public Byte readByte()",
                "@@ -207,2 +221,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public Byte readByte(final Byte defaultVal)",
                "@@ -213,3 +228,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "             case EncodingCodes.BYTE:",
                "-                return (Byte) _constructors[EncodingCodes.BYTE & 0xff].readValue();",
                "+                return (Byte) readRawByte();",
                "             case EncodingCodes.NULL:",
                "@@ -221,5 +236,6 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public byte readByte(final byte defaultVal)",
                "     {",
                "-        TypeConstructor constructor = readConstructor();",
                "+        TypeConstructor<?> constructor = readConstructor();",
                "         if(constructor instanceof ByteType.ByteEncoding)",
                "@@ -242,2 +258,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public Short readShort()",
                "@@ -247,2 +264,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public Short readShort(final Short defaultVal)",
                "@@ -254,3 +272,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "             case EncodingCodes.SHORT:",
                "-                return (Short) _constructors[EncodingCodes.SHORT & 0xff].readValue();",
                "+                return Short.valueOf(readRawShort());",
                "             case EncodingCodes.NULL:",
                "@@ -262,6 +280,6 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public short readShort(final short defaultVal)",
                "     {",
                "-",
                "-        TypeConstructor constructor = readConstructor();",
                "+        TypeConstructor<?> constructor = readConstructor();",
                "         if(constructor instanceof ShortType.ShortEncoding)",
                "@@ -284,2 +302,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public Integer readInteger()",
                "@@ -289,2 +308,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public Integer readInteger(final Integer defaultVal)",
                "@@ -296,5 +316,5 @@ public class DecoderImpl implements ByteBufferDecoder",
                "             case EncodingCodes.SMALLINT:",
                "-                return (Integer) _constructors[EncodingCodes.SMALLINT & 0xff].readValue();",
                "+                return Integer.valueOf(readRawByte());",
                "             case EncodingCodes.INT:",
                "-                return (Integer) _constructors[EncodingCodes.INT & 0xff].readValue();",
                "+                return Integer.valueOf(readRawInt());",
                "             case EncodingCodes.NULL:",
                "@@ -306,6 +326,6 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public int readInteger(final int defaultVal)",
                "     {",
                "-",
                "-        TypeConstructor constructor = readConstructor();",
                "+        TypeConstructor<?> constructor = readConstructor();",
                "         if(constructor instanceof IntegerType.IntegerEncoding)",
                "@@ -328,2 +348,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public Long readLong()",
                "@@ -333,2 +354,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public Long readLong(final Long defaultVal)",
                "@@ -340,5 +362,5 @@ public class DecoderImpl implements ByteBufferDecoder",
                "             case EncodingCodes.SMALLLONG:",
                "-                return (Long) _constructors[EncodingCodes.SMALLLONG & 0xff].readValue();",
                "+                return Long.valueOf(readRawByte());",
                "             case EncodingCodes.LONG:",
                "-                return (Long) _constructors[EncodingCodes.LONG & 0xff].readValue();",
                "+                return Long.valueOf(readRawLong());",
                "             case EncodingCodes.NULL:",
                "@@ -350,6 +372,6 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public long readLong(final long defaultVal)",
                "     {",
                "-",
                "-        TypeConstructor constructor = readConstructor();",
                "+        TypeConstructor<?> constructor = readConstructor();",
                "         if(constructor instanceof LongType.LongEncoding)",
                "@@ -372,2 +394,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public UnsignedByte readUnsignedByte()",
                "@@ -377,2 +400,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public UnsignedByte readUnsignedByte(final UnsignedByte defaultVal)",
                "@@ -384,3 +408,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "             case EncodingCodes.UBYTE:",
                "-                return (UnsignedByte) _constructors[EncodingCodes.UBYTE & 0xff].readValue();",
                "+                return UnsignedByte.valueOf(readRawByte());",
                "             case EncodingCodes.NULL:",
                "@@ -392,2 +416,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public UnsignedShort readUnsignedShort()",
                "@@ -397,2 +422,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public UnsignedShort readUnsignedShort(final UnsignedShort defaultVal)",
                "@@ -404,3 +430,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "             case EncodingCodes.USHORT:",
                "-                return (UnsignedShort) _constructors[EncodingCodes.USHORT & 0xff].readValue();",
                "+                return UnsignedShort.valueOf(readRawShort());",
                "             case EncodingCodes.NULL:",
                "@@ -412,2 +438,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public UnsignedInteger readUnsignedInteger()",
                "@@ -417,2 +444,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public UnsignedInteger readUnsignedInteger(final UnsignedInteger defaultVal)",
                "@@ -426,5 +454,5 @@ public class DecoderImpl implements ByteBufferDecoder",
                "             case EncodingCodes.SMALLUINT:",
                "-                return (UnsignedInteger) _constructors[EncodingCodes.SMALLUINT & 0xff].readValue();",
                "+                return UnsignedInteger.valueOf(((int) readRawByte()) & 0xff);",
                "             case EncodingCodes.UINT:",
                "-                return (UnsignedInteger) _constructors[EncodingCodes.UINT & 0xff].readValue();",
                "+                return UnsignedInteger.valueOf(readRawInt());",
                "             case EncodingCodes.NULL:",
                "@@ -436,2 +464,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public UnsignedLong readUnsignedLong()",
                "@@ -441,2 +470,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public UnsignedLong readUnsignedLong(final UnsignedLong defaultVal)",
                "@@ -450,5 +480,5 @@ public class DecoderImpl implements ByteBufferDecoder",
                "             case EncodingCodes.SMALLULONG:",
                "-                return (UnsignedLong) _constructors[EncodingCodes.SMALLULONG & 0xff].readValue();",
                "+                return UnsignedLong.valueOf(((long) readRawByte())&0xffl);",
                "             case EncodingCodes.ULONG:",
                "-                return (UnsignedLong) _constructors[EncodingCodes.ULONG & 0xff].readValue();",
                "+                return UnsignedLong.valueOf(readRawLong());",
                "             case EncodingCodes.NULL:",
                "@@ -460,2 +490,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public Character readCharacter()",
                "@@ -465,2 +496,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public Character readCharacter(final Character defaultVal)",
                "@@ -472,3 +504,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "             case EncodingCodes.CHAR:",
                "-                return (Character) _constructors[EncodingCodes.CHAR & 0xff].readValue();",
                "+                return Character.valueOf((char) (readRawInt() & 0xffff));",
                "             case EncodingCodes.NULL:",
                "@@ -480,2 +512,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public char readCharacter(final char defaultVal)",
                "@@ -487,3 +520,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "             case EncodingCodes.CHAR:",
                "-                return (Character) _constructors[EncodingCodes.CHAR & 0xff].readValue();",
                "+                return (char) (readRawInt() & 0xffff);",
                "             case EncodingCodes.NULL:",
                "@@ -495,2 +528,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public Float readFloat()",
                "@@ -500,2 +534,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public Float readFloat(final Float defaultVal)",
                "@@ -507,3 +542,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "             case EncodingCodes.FLOAT:",
                "-                return (Float) _constructors[EncodingCodes.FLOAT & 0xff].readValue();",
                "+                return Float.valueOf(readRawFloat());",
                "             case EncodingCodes.NULL:",
                "@@ -515,6 +550,6 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public float readFloat(final float defaultVal)",
                "     {",
                "-",
                "-        TypeConstructor constructor = readConstructor();",
                "+        TypeConstructor<?> constructor = readConstructor();",
                "         if(constructor instanceof FloatType.FloatEncoding)",
                "@@ -537,2 +572,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public Double readDouble()",
                "@@ -542,2 +578,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public Double readDouble(final Double defaultVal)",
                "@@ -549,3 +586,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "             case EncodingCodes.DOUBLE:",
                "-                return (Double) _constructors[EncodingCodes.DOUBLE & 0xff].readValue();",
                "+                return Double.valueOf(readRawDouble());",
                "             case EncodingCodes.NULL:",
                "@@ -557,6 +594,6 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public double readDouble(final double defaultVal)",
                "     {",
                "-",
                "-        TypeConstructor constructor = readConstructor();",
                "+        TypeConstructor<?> constructor = readConstructor();",
                "         if(constructor instanceof DoubleType.DoubleEncoding)",
                "@@ -579,2 +616,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public UUID readUUID()",
                "@@ -584,2 +622,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public UUID readUUID(final UUID defaultVal)",
                "@@ -591,3 +630,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "             case EncodingCodes.UUID:",
                "-                return (UUID) _constructors[EncodingCodes.UUID & 0xff].readValue();",
                "+                return new UUID(readRawLong(), readRawLong());",
                "             case EncodingCodes.NULL:",
                "@@ -599,2 +638,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public Decimal32 readDecimal32()",
                "@@ -604,2 +644,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public Decimal32 readDecimal32(final Decimal32 defaultValue)",
                "@@ -619,2 +660,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public Decimal64 readDecimal64()",
                "@@ -624,2 +666,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public Decimal64 readDecimal64(final Decimal64 defaultValue)",
                "@@ -639,2 +682,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public Decimal128 readDecimal128()",
                "@@ -644,2 +688,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public Decimal128 readDecimal128(final Decimal128 defaultValue)",
                "@@ -659,2 +704,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public Date readTimestamp()",
                "@@ -664,2 +710,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public Date readTimestamp(final Date defaultValue)",
                "@@ -671,3 +718,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "             case EncodingCodes.TIMESTAMP:",
                "-                return (Date) _constructors[EncodingCodes.TIMESTAMP & 0xff].readValue();",
                "+                return new Date(readRawLong());",
                "             case EncodingCodes.NULL:",
                "@@ -679,2 +726,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public Binary readBinary()",
                "@@ -684,2 +732,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public Binary readBinary(final Binary defaultValue)",
                "@@ -701,2 +750,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public Symbol readSymbol()",
                "@@ -706,2 +756,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public Symbol readSymbol(final Symbol defaultValue)",
                "@@ -723,2 +774,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public String readString()",
                "@@ -728,2 +780,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public String readString(final String defaultValue)",
                "@@ -745,2 +798,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     @SuppressWarnings(\"rawtypes\")",
                "@@ -765,2 +819,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public <T> void readList(final ListProcessor<T> processor)",
                "@@ -770,2 +825,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     @SuppressWarnings(\"rawtypes\")",
                "@@ -788,2 +844,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public <T> T[] readArray(final Class<T> clazz)",
                "@@ -793,2 +850,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public Object[] readArray()",
                "@@ -799,2 +857,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public boolean[] readBooleanArray()",
                "@@ -804,2 +863,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public byte[] readByteArray()",
                "@@ -809,2 +869,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public short[] readShortArray()",
                "@@ -814,2 +875,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public int[] readIntegerArray()",
                "@@ -819,2 +881,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public long[] readLongArray()",
                "@@ -824,2 +887,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public float[] readFloatArray()",
                "@@ -829,2 +893,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public double[] readDoubleArray()",
                "@@ -834,2 +899,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public char[] readCharacterArray()",
                "@@ -839,2 +905,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public <T> T[] readMultiple(final Class<T> clazz)",
                "@@ -869,2 +936,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public Object[] readMultiple()",
                "@@ -888,2 +956,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public byte[] readByteMultiple()",
                "@@ -893,2 +962,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public short[] readShortMultiple()",
                "@@ -898,2 +968,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public int[] readIntegerMultiple()",
                "@@ -903,2 +974,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public long[] readLongMultiple()",
                "@@ -908,2 +980,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public float[] readFloatMultiple()",
                "@@ -913,2 +986,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public double[] readDoubleMultiple()",
                "@@ -918,2 +992,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public char[] readCharacterMultiple()",
                "@@ -923,2 +998,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public Object readObject()",
                "@@ -934,3 +1010,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "-        TypeConstructor constructor = readConstructor();",
                "+        TypeConstructor<?> constructor = readConstructor();",
                "         if(constructor== null)",
                "@@ -947,2 +1023,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public Object readObject(final Object defaultValue)",
                "@@ -1006,2 +1083,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public void setByteBuffer(final ByteBuffer buffer)",
                "@@ -1047,2 +1125,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+        @Override",
                "         public Object getDescriptor()",
                "@@ -1052,2 +1131,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+        @Override",
                "         public Object getDescribed()",
                "@@ -1072,2 +1152,3 @@ public class DecoderImpl implements ByteBufferDecoder",
                "+    @Override",
                "     public int getByteBufferRemaining() {",
                "diff --git a/proton-j/src/main/java/org/apache/qpid/proton/codec/EncoderImpl.java b/proton-j/src/main/java/org/apache/qpid/proton/codec/EncoderImpl.java",
                "index 512805b8..164a77d6 100644",
                "--- a/proton-j/src/main/java/org/apache/qpid/proton/codec/EncoderImpl.java",
                "+++ b/proton-j/src/main/java/org/apache/qpid/proton/codec/EncoderImpl.java",
                "@@ -159,40 +159,48 @@ public final class EncoderImpl implements ByteBufferEncoder",
                "-    private AMQPType getTypeFromClass(final Class clazz, Object instance)",
                "+    private AMQPType<?> getTypeFromClass(final Class<?> clazz, final Object instance)",
                "     {",
                "-        AMQPType amqpType = _typeRegistry.get(clazz);",
                "+        AMQPType<?> amqpType = _typeRegistry.get(clazz);",
                "         if(amqpType == null)",
                "         {",
                "-            if(clazz.isArray())",
                "+            amqpType = deduceTypeFromClass(clazz, instance);",
                "+        }",
                "+",
                "+        return amqpType;",
                "+    }",
                "+",
                "+    private AMQPType<?> deduceTypeFromClass(final Class<?> clazz, final Object instance) {",
                "+        AMQPType<?> amqpType = null;",
                "+",
                "+        if(clazz.isArray())",
                "+        {",
                "+            amqpType = _arrayType;",
                "+        }",
                "+        else",
                "+        {",
                "+            if(List.class.isAssignableFrom(clazz))",
                "             {",
                "-                amqpType = _arrayType;",
                "+                amqpType = _listType;",
                "             }",
                "-            else",
                "+            else if(Map.class.isAssignableFrom(clazz))",
                "             {",
                "-                if(List.class.isAssignableFrom(clazz))",
                "-                {",
                "-                    amqpType = _listType;",
                "-                }",
                "-                else if(Map.class.isAssignableFrom(clazz))",
                "-                {",
                "-                    amqpType = _mapType;",
                "-                }",
                "-                else if(DescribedType.class.isAssignableFrom(clazz))",
                "+                amqpType = _mapType;",
                "+            }",
                "+            else if(DescribedType.class.isAssignableFrom(clazz))",
                "+            {",
                "+                amqpType = _describedTypesClassRegistry.get(clazz);",
                "+                if(amqpType == null && instance != null)",
                "                 {",
                "-                    amqpType = _describedTypesClassRegistry.get(clazz);",
                "-                    if(amqpType == null && instance != null)",
                "+                    Object descriptor = ((DescribedType) instance).getDescriptor();",
                "+                    amqpType = _describedDescriptorRegistry.get(descriptor);",
                "+                    if(amqpType == null)",
                "                     {",
                "-                        Object descriptor = ((DescribedType) instance).getDescriptor();",
                "-                        amqpType = _describedDescriptorRegistry.get(descriptor);",
                "-                        if(amqpType == null)",
                "-                        {",
                "-                            amqpType = new DynamicDescribedType(this, descriptor);",
                "-                            _describedDescriptorRegistry.put(descriptor, amqpType);",
                "-                        }",
                "+                        amqpType = new DynamicDescribedType(this, descriptor);",
                "+                        _describedDescriptorRegistry.put(descriptor, amqpType);",
                "                     }",
                "-",
                "-                    return amqpType;",
                "                 }",
                "+",
                "+                return amqpType;",
                "             }",
                "-            _typeRegistry.put(clazz, amqpType);",
                "         }",
                "+        _typeRegistry.put(clazz, amqpType);",
                "@@ -214,3 +222,3 @@ public final class EncoderImpl implements ByteBufferEncoder",
                "     {",
                "-        AMQPType type = _describedDescriptorRegistry.get(descriptor);",
                "+        AMQPType<?> type = _describedDescriptorRegistry.get(descriptor);",
                "         if(type == null)",
                "@@ -515,3 +523,2 @@ public final class EncoderImpl implements ByteBufferEncoder",
                "         }",
                "-",
                "     }",
                "@@ -555,3 +562,2 @@ public final class EncoderImpl implements ByteBufferEncoder",
                "         }",
                "-",
                "     }",
                "@@ -717,2 +723,3 @@ public final class EncoderImpl implements ByteBufferEncoder",
                "+    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })",
                "     @Override",
                "@@ -720,27 +727,9 @@ public final class EncoderImpl implements ByteBufferEncoder",
                "     {",
                "-        if (o == null)",
                "+        if (o != null)",
                "         {",
                "-            getBuffer().put(EncodingCodes.NULL);",
                "-            return;",
                "-        }",
                "-",
                "-        AMQPType type = _typeRegistry.get(o.getClass());",
                "+            AMQPType type = _typeRegistry.get(o.getClass());",
                "-        if(type == null)",
                "-        {",
                "-            if(o.getClass().isArray())",
                "-            {",
                "-                writeArrayType(o);",
                "-            }",
                "-            else if(o instanceof List)",
                "-            {",
                "-                writeList((List)o);",
                "-            }",
                "-            else if(o instanceof Map)",
                "+            if(type != null)",
                "             {",
                "-                writeMap((Map)o);",
                "-            }",
                "-            else if(o instanceof DescribedType)",
                "-            {",
                "-                writeDescribedType((DescribedType)o);",
                "+                type.write(o);",
                "             }",
                "@@ -748,4 +737,3 @@ public final class EncoderImpl implements ByteBufferEncoder",
                "             {",
                "-                throw new IllegalArgumentException(",
                "-                    \"Do not know how to write Objects of class \" + o.getClass().getName());",
                "+                writeUnregisteredType(o);",
                "             }",
                "@@ -754,3 +742,28 @@ public final class EncoderImpl implements ByteBufferEncoder",
                "         {",
                "-            type.write(o);",
                "+            _buffer.put(EncodingCodes.NULL);",
                "+        }",
                "+    }",
                "+",
                "+    private void writeUnregisteredType(final Object o)",
                "+    {",
                "+        if(o.getClass().isArray())",
                "+        {",
                "+            writeArrayType(o);",
                "+        }",
                "+        else if(o instanceof List)",
                "+        {",
                "+            writeList((List<?>)o);",
                "+        }",
                "+        else if(o instanceof Map)",
                "+        {",
                "+            writeMap((Map<?, ?>)o);",
                "+        }",
                "+        else if(o instanceof DescribedType)",
                "+        {",
                "+            writeDescribedType((DescribedType)o);",
                "+        }",
                "+        else",
                "+        {",
                "+            throw new IllegalArgumentException(",
                "+                \"Do not know how to write Objects of class \" + o.getClass().getName());",
                "         }",
                "@@ -845,3 +858,3 @@ public final class EncoderImpl implements ByteBufferEncoder",
                "-    AMQPType getNullTypeEncoder()",
                "+    AMQPType<?> getNullTypeEncoder()",
                "     {",
                "diff --git a/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathHeaderType.java b/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathHeaderType.java",
                "index 2562e575..b60d53e5 100644",
                "--- a/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathHeaderType.java",
                "+++ b/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathHeaderType.java",
                "@@ -30,2 +30,3 @@ import org.apache.qpid.proton.codec.EncodingCodes;",
                " import org.apache.qpid.proton.codec.FastPathDescribedTypeConstructor;",
                "+import org.apache.qpid.proton.codec.ReadableBuffer;",
                " import org.apache.qpid.proton.codec.TypeEncoding;",
                "@@ -59,2 +60,3 @@ public class FastPathHeaderType implements AMQPType<Header>, FastPathDescribedTy",
                "         DecoderImpl decoder = getDecoder();",
                "+        ReadableBuffer buffer = decoder.getBuffer();",
                "         byte typeCode = decoder.getBuffer().get();",
                "@@ -69,8 +71,8 @@ public class FastPathHeaderType implements AMQPType<Header>, FastPathDescribedTy",
                "             case EncodingCodes.LIST8:",
                "-                size = ((int)decoder.getBuffer().get()) & 0xff;",
                "-                count = ((int)decoder.getBuffer().get()) & 0xff;",
                "+                size = buffer.get() & 0xff;",
                "+                count = buffer.get() & 0xff;",
                "                 break;",
                "             case EncodingCodes.LIST32:",
                "-                size = decoder.getBuffer().getInt();",
                "-                count = decoder.getBuffer().getInt();",
                "+                size = buffer.getInt();",
                "+                count = buffer.getInt();",
                "                 break;",
                "@@ -85,15 +87,15 @@ public class FastPathHeaderType implements AMQPType<Header>, FastPathDescribedTy",
                "                 case 0:",
                "-                    header.setDurable(decoder.readBoolean());",
                "+                    header.setDurable(decoder.readBoolean(null));",
                "                     break;",
                "                 case 1:",
                "-                    header.setPriority(decoder.readUnsignedByte());",
                "+                    header.setPriority(decoder.readUnsignedByte(null));",
                "                     break;",
                "                 case 2:",
                "-                    header.setTtl(decoder.readUnsignedInteger());",
                "+                    header.setTtl(decoder.readUnsignedInteger(null));",
                "                     break;",
                "                 case 3:",
                "-                    header.setFirstAcquirer(decoder.readBoolean());",
                "+                    header.setFirstAcquirer(decoder.readBoolean(null));",
                "                     break;",
                "                 case 4:",
                "-                    header.setDeliveryCount(decoder.readUnsignedInteger());",
                "+                    header.setDeliveryCount(decoder.readUnsignedInteger(null));",
                "                     break;",
                "diff --git a/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathPropertiesType.java b/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathPropertiesType.java",
                "index 3d5c7c49..22b30d14 100644",
                "--- a/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathPropertiesType.java",
                "+++ b/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathPropertiesType.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+  * Licensed to the Apache Software Foundation (ASF) under one or more",
                "  * contributor license agreements.  See the NOTICE file distributed with",
                "@@ -30,2 +30,3 @@ import org.apache.qpid.proton.codec.EncodingCodes;",
                " import org.apache.qpid.proton.codec.FastPathDescribedTypeConstructor;",
                "+import org.apache.qpid.proton.codec.ReadableBuffer;",
                " import org.apache.qpid.proton.codec.TypeEncoding;",
                "@@ -59,2 +60,3 @@ public class FastPathPropertiesType implements AMQPType<Properties>, FastPathDes",
                "         DecoderImpl decoder = getDecoder();",
                "+        ReadableBuffer buffer = decoder.getBuffer();",
                "         byte typeCode = decoder.getBuffer().get();",
                "@@ -69,8 +71,8 @@ public class FastPathPropertiesType implements AMQPType<Properties>, FastPathDes",
                "             case EncodingCodes.LIST8:",
                "-                size = ((int)decoder.getBuffer().get()) & 0xff;",
                "-                count = ((int)decoder.getBuffer().get()) & 0xff;",
                "+                size = buffer.get() & 0xff;",
                "+                count = buffer.get() & 0xff;",
                "                 break;",
                "             case EncodingCodes.LIST32:",
                "-                size = decoder.getBuffer().getInt();",
                "-                count = decoder.getBuffer().getInt();",
                "+                size = buffer.getInt();",
                "+                count = buffer.getInt();",
                "                 break;",
                "@@ -88,12 +90,12 @@ public class FastPathPropertiesType implements AMQPType<Properties>, FastPathDes",
                "                 case 1:",
                "-                    properties.setUserId(decoder.readBinary());",
                "+                    properties.setUserId(decoder.readBinary(null));",
                "                     break;",
                "                 case 2:",
                "-                    properties.setTo(decoder.readString());",
                "+                    properties.setTo(decoder.readString(null));",
                "                     break;",
                "                 case 3:",
                "-                    properties.setSubject(decoder.readString());",
                "+                    properties.setSubject(decoder.readString(null));",
                "                     break;",
                "                 case 4:",
                "-                    properties.setReplyTo(decoder.readString());",
                "+                    properties.setReplyTo(decoder.readString(null));",
                "                     break;",
                "@@ -103,21 +105,21 @@ public class FastPathPropertiesType implements AMQPType<Properties>, FastPathDes",
                "                 case 6:",
                "-                    properties.setContentType(decoder.readSymbol());",
                "+                    properties.setContentType(decoder.readSymbol(null));",
                "                     break;",
                "                 case 7:",
                "-                    properties.setContentEncoding(decoder.readSymbol());",
                "+                    properties.setContentEncoding(decoder.readSymbol(null));",
                "                     break;",
                "                 case 8:",
                "-                    properties.setAbsoluteExpiryTime(decoder.readTimestamp());",
                "+                    properties.setAbsoluteExpiryTime(decoder.readTimestamp(null));",
                "                     break;",
                "                 case 9:",
                "-                    properties.setCreationTime(decoder.readTimestamp());",
                "+                    properties.setCreationTime(decoder.readTimestamp(null));",
                "                     break;",
                "                 case 10:",
                "-                    properties.setGroupId(decoder.readString());",
                "+                    properties.setGroupId(decoder.readString(null));",
                "                     break;",
                "                 case 11:",
                "-                    properties.setGroupSequence(decoder.readUnsignedInteger());",
                "+                    properties.setGroupSequence(decoder.readUnsignedInteger(null));",
                "                     break;",
                "                 case 12:",
                "-                    properties.setReplyToGroupId(decoder.readString());",
                "+                    properties.setReplyToGroupId(decoder.readString(null));",
                "                     break;",
                "@@ -302,4 +304,3 @@ public class FastPathPropertiesType implements AMQPType<Properties>, FastPathDes",
                "         FastPathPropertiesType type = new FastPathPropertiesType(encoder);",
                "-        for(Object descriptor : DESCRIPTORS)",
                "-        {",
                "+        for(Object descriptor : DESCRIPTORS) {",
                "             decoder.register(descriptor, (FastPathDescribedTypeConstructor<?>) type);",
                "diff --git a/proton-j/src/main/java/org/apache/qpid/proton/codec/transport/FastPathDispositionType.java b/proton-j/src/main/java/org/apache/qpid/proton/codec/transport/FastPathDispositionType.java",
                "index 4424cfab..32bed2b3 100644",
                "--- a/proton-j/src/main/java/org/apache/qpid/proton/codec/transport/FastPathDispositionType.java",
                "+++ b/proton-j/src/main/java/org/apache/qpid/proton/codec/transport/FastPathDispositionType.java",
                "@@ -126,6 +126,6 @@ public class FastPathDispositionType implements AMQPType<Disposition>, FastPathD",
                "                 case 1:",
                "-                    disposition.setFirst(decoder.readUnsignedInteger());",
                "+                    disposition.setFirst(decoder.readUnsignedInteger(null));",
                "                     break;",
                "                 case 2:",
                "-                    disposition.setLast(decoder.readUnsignedInteger());",
                "+                    disposition.setLast(decoder.readUnsignedInteger(null));",
                "                     break;",
                "diff --git a/proton-j/src/main/java/org/apache/qpid/proton/codec/transport/FastPathFlowType.java b/proton-j/src/main/java/org/apache/qpid/proton/codec/transport/FastPathFlowType.java",
                "index 7ed89e42..534ab0c1 100644",
                "--- a/proton-j/src/main/java/org/apache/qpid/proton/codec/transport/FastPathFlowType.java",
                "+++ b/proton-j/src/main/java/org/apache/qpid/proton/codec/transport/FastPathFlowType.java",
                "@@ -111,24 +111,24 @@ public class FastPathFlowType implements AMQPType<Flow>, FastPathDescribedTypeCo",
                "                 case 0:",
                "-                    flow.setNextIncomingId(decoder.readUnsignedInteger());",
                "+                    flow.setNextIncomingId(decoder.readUnsignedInteger(null));",
                "                     break;",
                "                 case 1:",
                "-                    flow.setIncomingWindow(decoder.readUnsignedInteger());",
                "+                    flow.setIncomingWindow(decoder.readUnsignedInteger(null));",
                "                     break;",
                "                 case 2:",
                "-                    flow.setNextOutgoingId(decoder.readUnsignedInteger());",
                "+                    flow.setNextOutgoingId(decoder.readUnsignedInteger(null));",
                "                     break;",
                "                 case 3:",
                "-                    flow.setOutgoingWindow(decoder.readUnsignedInteger());",
                "+                    flow.setOutgoingWindow(decoder.readUnsignedInteger(null));",
                "                     break;",
                "                 case 4:",
                "-                    flow.setHandle(decoder.readUnsignedInteger());",
                "+                    flow.setHandle(decoder.readUnsignedInteger(null));",
                "                     break;",
                "                 case 5:",
                "-                    flow.setDeliveryCount(decoder.readUnsignedInteger());",
                "+                    flow.setDeliveryCount(decoder.readUnsignedInteger(null));",
                "                     break;",
                "                 case 6:",
                "-                    flow.setLinkCredit(decoder.readUnsignedInteger());",
                "+                    flow.setLinkCredit(decoder.readUnsignedInteger(null));",
                "                     break;",
                "                 case 7:",
                "-                    flow.setAvailable(decoder.readUnsignedInteger());",
                "+                    flow.setAvailable(decoder.readUnsignedInteger(null));",
                "                     break;",
                "diff --git a/proton-j/src/main/java/org/apache/qpid/proton/codec/transport/FastPathTransferType.java b/proton-j/src/main/java/org/apache/qpid/proton/codec/transport/FastPathTransferType.java",
                "index d27e59cd..b37c5b69 100644",
                "--- a/proton-j/src/main/java/org/apache/qpid/proton/codec/transport/FastPathTransferType.java",
                "+++ b/proton-j/src/main/java/org/apache/qpid/proton/codec/transport/FastPathTransferType.java",
                "@@ -92,15 +92,15 @@ public class FastPathTransferType implements AMQPType<Transfer>, FastPathDescrib",
                "                 case 0:",
                "-                    transfer.setHandle(decoder.readUnsignedInteger());",
                "+                    transfer.setHandle(decoder.readUnsignedInteger(null));",
                "                     break;",
                "                 case 1:",
                "-                    transfer.setDeliveryId(decoder.readUnsignedInteger());",
                "+                    transfer.setDeliveryId(decoder.readUnsignedInteger(null));",
                "                     break;",
                "                 case 2:",
                "-                    transfer.setDeliveryTag(decoder.readBinary());",
                "+                    transfer.setDeliveryTag(decoder.readBinary(null));",
                "                     break;",
                "                 case 3:",
                "-                    transfer.setMessageFormat(decoder.readUnsignedInteger());",
                "+                    transfer.setMessageFormat(decoder.readUnsignedInteger(null));",
                "                     break;",
                "                 case 4:",
                "-                    transfer.setSettled(decoder.readBoolean());",
                "+                    transfer.setSettled(decoder.readBoolean(null));",
                "                     break;"
            ],
            "changed_files": [
                "proton-j/src/main/java/org/apache/qpid/proton/codec/DecoderImpl.java",
                "proton-j/src/main/java/org/apache/qpid/proton/codec/EncoderImpl.java",
                "proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathHeaderType.java",
                "proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathPropertiesType.java",
                "proton-j/src/main/java/org/apache/qpid/proton/codec/transport/FastPathDispositionType.java",
                "proton-j/src/main/java/org/apache/qpid/proton/codec/transport/FastPathFlowType.java",
                "proton-j/src/main/java/org/apache/qpid/proton/codec/transport/FastPathTransferType.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PROTON-1963": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "0.31.0",
                "0.32.0",
                "0.33.0",
                "0.33.1",
                "0.33.10",
                "0.33.2",
                "0.33.3",
                "0.33.4",
                "0.33.5",
                "0.33.6",
                "0.33.7",
                "0.33.8",
                "0.33.9",
                "0.34.0",
                "0.34.1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: proton-j/src/main/java/org/apache/qpid/proton/codec/transport/FastPathTransferType.java, proton-j/src/main/java/org/apache/qpid/proton/codec/transport/FastPathDispositionType.java, proton-j/src/main/java/org/apache/qpid/proton/codec/transport/FastPathFlowType.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: default, method",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: transport",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PROTON-1963",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "65172034332dfdf971a198a9c711cc1a9f39cdeb",
            "repository": "https://github.com/apache/qpid-proton-j",
            "timestamp": 1534868519,
            "hunks": 6,
            "message": "PROTON-1916: Makes StringsBenchmark::encodeStringMessage GC free. This closes #15.",
            "diff": [
                "diff --git a/tests/performance-jmh/src/main/java/org/apache/qpid/proton/message/StringsBenchmark.java b/tests/performance-jmh/src/main/java/org/apache/qpid/proton/message/StringsBenchmark.java",
                "index 77f70a8c..d0d72848 100644",
                "--- a/tests/performance-jmh/src/main/java/org/apache/qpid/proton/message/StringsBenchmark.java",
                "+++ b/tests/performance-jmh/src/main/java/org/apache/qpid/proton/message/StringsBenchmark.java",
                "@@ -20,2 +20,4 @@ package org.apache.qpid.proton.message;",
                " import org.apache.qpid.proton.amqp.messaging.AmqpValue;",
                "+import org.apache.qpid.proton.codec.WritableBuffer;",
                "+import org.apache.qpid.proton.codec.WritableBuffer.ByteBufferWrapper;",
                " import org.openjdk.jmh.annotations.Benchmark;",
                "@@ -41,3 +43,3 @@ public class StringsBenchmark extends MessageBenchmark",
                "     private Message message;",
                "-    private byte[] buffer = new byte[8096];",
                "+    private WritableBuffer buffer;",
                "@@ -50,2 +52,3 @@ public class StringsBenchmark extends MessageBenchmark",
                "         initStringMessage();",
                "+        initWritableBuffer();",
                "         encode();",
                "@@ -69,2 +72,7 @@ public class StringsBenchmark extends MessageBenchmark",
                "+    private void initWritableBuffer()",
                "+    {",
                "+        buffer = ByteBufferWrapper.allocate(8096);",
                "+    }",
                "+",
                "     @Benchmark",
                "@@ -92,5 +100,6 @@ public class StringsBenchmark extends MessageBenchmark",
                "     @Benchmark",
                "-    public byte[] encodeStringMessage()",
                "+    public WritableBuffer encodeStringMessage()",
                "     {",
                "-        message.encode(buffer, 0, buffer.length);",
                "+        buffer.position(0);",
                "+        message.encode(buffer);",
                "         return buffer;"
            ],
            "changed_files": [
                "tests/performance-jmh/src/main/java/org/apache/qpid/proton/message/StringsBenchmark.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PROTON-1916": ""
            },
            "ghissue_refs": {
                "15": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "0.30.0",
                "0.31.0",
                "0.32.0",
                "0.33.0",
                "0.33.1",
                "0.33.10",
                "0.33.2",
                "0.33.3",
                "0.33.4",
                "0.33.5",
                "0.33.6",
                "0.33.7",
                "0.33.8",
                "0.33.9",
                "0.34.0",
                "0.34.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: perform",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PROTON-1916",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 15",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5217e35eda03a4b5773c07e6b0728edc6f95d8bf",
            "repository": "https://github.com/apache/qpid-proton-j",
            "timestamp": 1541521198,
            "hunks": 2,
            "message": "PROTON-1941: throw BOE in the BB wrapper, preserve historic encoding behaviour for compatibility",
            "diff": [
                "diff --git a/proton-j/src/main/java/org/apache/qpid/proton/codec/WritableBuffer.java b/proton-j/src/main/java/org/apache/qpid/proton/codec/WritableBuffer.java",
                "index 034a23e0..1dcae282 100644",
                "--- a/proton-j/src/main/java/org/apache/qpid/proton/codec/WritableBuffer.java",
                "+++ b/proton-j/src/main/java/org/apache/qpid/proton/codec/WritableBuffer.java",
                "@@ -147,5 +147,7 @@ public interface WritableBuffer {",
                "             if (_buf.remaining() < remaining) {",
                "-                throw new IndexOutOfBoundsException(String.format(",
                "+                IndexOutOfBoundsException cause = new IndexOutOfBoundsException(String.format(",
                "                     \"Requested min remaining bytes(%d) exceeds remaining(%d) in underlying ByteBuffer: %s\",",
                "                     remaining, _buf.remaining(), _buf));",
                "+",
                "+                throw (BufferOverflowException) new BufferOverflowException().initCause(cause);",
                "             }"
            ],
            "changed_files": [
                "proton-j/src/main/java/org/apache/qpid/proton/codec/WritableBuffer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PROTON-1941": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "0.30.0",
                "0.31.0",
                "0.32.0",
                "0.33.0",
                "0.33.1",
                "0.33.10",
                "0.33.2",
                "0.33.3",
                "0.33.4",
                "0.33.5",
                "0.33.6",
                "0.33.7",
                "0.33.8",
                "0.33.9",
                "0.34.0",
                "0.34.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: wrapper",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PROTON-1941",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "391af064e2d50dfd29700f160166e86d8f4cba19",
            "repository": "https://github.com/apache/qpid-proton-j",
            "timestamp": 1542138793,
            "hunks": 6,
            "message": "PROTON-1963 Refactor string encoding size calculation Assume ASCII by default when calculating the string size in UTF8 to allow for inlining of this method in most cases and fallback to a multi-byte calculation only when non-ASCII chars are detected.",
            "diff": [
                "diff --git a/proton-j/src/main/java/org/apache/qpid/proton/codec/StringType.java b/proton-j/src/main/java/org/apache/qpid/proton/codec/StringType.java",
                "index 7687ca4d..85448b3e 100644",
                "--- a/proton-j/src/main/java/org/apache/qpid/proton/codec/StringType.java",
                "+++ b/proton-j/src/main/java/org/apache/qpid/proton/codec/StringType.java",
                "@@ -86,13 +86,28 @@ public class StringType extends AbstractPrimitiveType<String>",
                "     {",
                "-        int len = s.length();",
                "-        final int length = len;",
                "-        for (int i = 0; i < length; i++)",
                "+        final int stringLength = s.length();",
                "+",
                "+        // ASCII Optimized length case",
                "+        int utf8len = stringLength;",
                "+        int processed = 0;",
                "+        for (; processed < stringLength && s.charAt(processed) < 0x80; processed++) {}",
                "+",
                "+        if (processed < stringLength)",
                "+        {",
                "+            // Non-ASCII length remainder",
                "+            utf8len = extendedCalculateUTF8Length(s, processed, stringLength, utf8len);",
                "+        }",
                "+",
                "+        return utf8len;",
                "+    }",
                "+",
                "+    static int extendedCalculateUTF8Length(final String s, int index, int length, int utf8len) {",
                "+        for (; index < length; index++)",
                "         {",
                "-            int c = s.charAt(i);",
                "+            int c = s.charAt(index);",
                "             if ((c & 0xFF80) != 0)         /* U+0080..    */",
                "             {",
                "-                len++;",
                "+                utf8len++;",
                "                 if(((c & 0xF800) != 0))    /* U+0800..    */",
                "                 {",
                "-                    len++;",
                "+                    utf8len++;",
                "                     // surrogate pairs should always combine to create a code point with a 4 octet representation",
                "@@ -100,3 +115,3 @@ public class StringType extends AbstractPrimitiveType<String>",
                "                     {",
                "-                        i++;",
                "+                        index++;",
                "                     }",
                "@@ -105,3 +120,4 @@ public class StringType extends AbstractPrimitiveType<String>",
                "         }",
                "-        return len;",
                "+",
                "+        return utf8len;",
                "     }"
            ],
            "changed_files": [
                "proton-j/src/main/java/org/apache/qpid/proton/codec/StringType.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PROTON-1963": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "0.31.0",
                "0.32.0",
                "0.33.0",
                "0.33.1",
                "0.33.10",
                "0.33.2",
                "0.33.3",
                "0.33.4",
                "0.33.5",
                "0.33.6",
                "0.33.7",
                "0.33.8",
                "0.33.9",
                "0.34.0",
                "0.34.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: default, method",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PROTON-1963",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "589504d76e0a9567dcacca43695d4af414cd2e58",
            "repository": "https://github.com/apache/qpid-proton-j",
            "timestamp": 1542143552,
            "hunks": 35,
            "message": "PROTON-1963 Improve performance of some fast path codec types For the fast path types that configure their map type encoding with a key type use a single lookup for the type to reduce overhead on each write. For the map based types do an in-place decode using the known key types and other structural expectations to improve decode performance. For the fast path data section type use the known structure of the type and avoid looking up encodings to improve performance of decodes.",
            "diff": [
                "diff --git a/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathApplicationPropertiesType.java b/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathApplicationPropertiesType.java",
                "index 08078f32..5ebb9eab 100644",
                "--- a/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathApplicationPropertiesType.java",
                "+++ b/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathApplicationPropertiesType.java",
                "@@ -19,3 +19,6 @@ package org.apache.qpid.proton.codec.messaging;",
                " import java.util.Collection;",
                "+import java.util.LinkedHashMap;",
                "+import java.util.Map;",
                "+import org.apache.qpid.proton.ProtonException;",
                " import org.apache.qpid.proton.amqp.Symbol;",
                "@@ -24,2 +27,4 @@ import org.apache.qpid.proton.amqp.messaging.ApplicationProperties;",
                " import org.apache.qpid.proton.codec.AMQPType;",
                "+import org.apache.qpid.proton.codec.ArrayType;",
                "+import org.apache.qpid.proton.codec.DecodeException;",
                " import org.apache.qpid.proton.codec.Decoder;",
                "@@ -30,2 +35,6 @@ import org.apache.qpid.proton.codec.FastPathDescribedTypeConstructor;",
                " import org.apache.qpid.proton.codec.MapType;",
                "+import org.apache.qpid.proton.codec.PrimitiveTypeEncoding;",
                "+import org.apache.qpid.proton.codec.ReadableBuffer;",
                "+import org.apache.qpid.proton.codec.StringType;",
                "+import org.apache.qpid.proton.codec.TypeConstructor;",
                " import org.apache.qpid.proton.codec.TypeEncoding;",
                "@@ -37,4 +46,3 @@ public class FastPathApplicationPropertiesType implements AMQPType<ApplicationPr",
                "-    private static final Object[] DESCRIPTORS =",
                "-    {",
                "+    private static final Object[] DESCRIPTORS = {",
                "         UnsignedLong.valueOf(DESCRIPTOR_CODE), Symbol.valueOf(\"amqp:application-properties:map\"),",
                "@@ -43,2 +51,3 @@ public class FastPathApplicationPropertiesType implements AMQPType<ApplicationPr",
                "     private final ApplicationPropertiesType propertiesType;",
                "+    private final StringType stringType;",
                "@@ -46,2 +55,3 @@ public class FastPathApplicationPropertiesType implements AMQPType<ApplicationPr",
                "         this.propertiesType = new ApplicationPropertiesType(encoder);",
                "+        this.stringType = (StringType) encoder.getTypeFromClass(String.class);",
                "     }",
                "@@ -83,3 +93,62 @@ public class FastPathApplicationPropertiesType implements AMQPType<ApplicationPr",
                "     public ApplicationProperties readValue() {",
                "-        return new ApplicationProperties(getDecoder().readMap());",
                "+        DecoderImpl decoder = getDecoder();",
                "+        ReadableBuffer buffer = decoder.getBuffer();",
                "+",
                "+        final int size;",
                "+        final int count;",
                "+",
                "+        byte encodingCode = buffer.get();",
                "+",
                "+        switch (encodingCode) {",
                "+            case EncodingCodes.MAP8:",
                "+                size = buffer.get() & 0xFF;",
                "+                count = buffer.get() & 0xFF;",
                "+                break;",
                "+            case EncodingCodes.MAP32:",
                "+                size = buffer.getInt();",
                "+                count = buffer.getInt();",
                "+                break;",
                "+            case EncodingCodes.NULL:",
                "+                return new ApplicationProperties(null);",
                "+            default:",
                "+                throw new ProtonException(\"Expected Map type but found encoding: \" + encodingCode);",
                "+        }",
                "+",
                "+        if (count > buffer.remaining()) {",
                "+            throw new IllegalArgumentException(\"Map element count \" + count + \" is specified to be greater than the \" +",
                "+                                               \"amount of data available (\"+ buffer.remaining() + \")\");",
                "+        }",
                "+",
                "+        TypeConstructor<?> valueConstructor = null;",
                "+",
                "+        Map<String, Object> map = new LinkedHashMap<>(count);",
                "+        for (int i = 0; i < count / 2; i++) {",
                "+            String key = decoder.readString(null);",
                "+            if (key == null) {",
                "+                throw new DecodeException(\"String key in ApplicationProperties cannot be null\");",
                "+            }",
                "+",
                "+            boolean arrayType = false;",
                "+            byte code = buffer.get(buffer.position());",
                "+            switch (code)",
                "+            {",
                "+                case EncodingCodes.ARRAY8:",
                "+                case EncodingCodes.ARRAY32:",
                "+                    arrayType = true;",
                "+            }",
                "+",
                "+            valueConstructor = findNextDecoder(decoder, buffer, valueConstructor);",
                "+",
                "+            final Object value;",
                "+",
                "+            if (arrayType) {",
                "+                value = ((ArrayType.ArrayEncoding) valueConstructor).readValueArray();",
                "+            } else {",
                "+                value = valueConstructor.readValue();",
                "+            }",
                "+",
                "+            map.put(key, value);",
                "+        }",
                "+",
                "+        return new ApplicationProperties(map);",
                "     }",
                "@@ -101,3 +170,3 @@ public class FastPathApplicationPropertiesType implements AMQPType<ApplicationPr",
                "-        mapType.setKeyEncoding(getEncoder().getTypeFromClass(String.class));",
                "+        mapType.setKeyEncoding(stringType);",
                "         mapType.write(val.getValue());",
                "@@ -108,4 +177,3 @@ public class FastPathApplicationPropertiesType implements AMQPType<ApplicationPr",
                "         FastPathApplicationPropertiesType type = new FastPathApplicationPropertiesType(encoder);",
                "-        for(Object descriptor : DESCRIPTORS)",
                "-        {",
                "+        for (Object descriptor : DESCRIPTORS) {",
                "             decoder.register(descriptor, type);",
                "@@ -114,2 +182,27 @@ public class FastPathApplicationPropertiesType implements AMQPType<ApplicationPr",
                "     }",
                "+",
                "+    private static TypeConstructor<?> findNextDecoder(DecoderImpl decoder, ReadableBuffer buffer, TypeConstructor<?> previousConstructor) {",
                "+        if (previousConstructor == null) {",
                "+            return decoder.readConstructor();",
                "+        } else {",
                "+            byte encodingCode = buffer.get(buffer.position());",
                "+            if (encodingCode == EncodingCodes.DESCRIBED_TYPE_INDICATOR || !(previousConstructor instanceof PrimitiveTypeEncoding<?>)) {",
                "+                previousConstructor = decoder.readConstructor();",
                "+            } else {",
                "+                PrimitiveTypeEncoding<?> primitiveConstructor = (PrimitiveTypeEncoding<?>) previousConstructor;",
                "+                if (encodingCode != primitiveConstructor.getEncodingCode()) {",
                "+                    previousConstructor = decoder.readConstructor();",
                "+                } else {",
                "+                    // consume the encoding code byte for real",
                "+                    encodingCode = buffer.get();",
                "+                }",
                "+            }",
                "+        }",
                "+",
                "+        if (previousConstructor == null) {",
                "+            throw new DecodeException(\"Unknown constructor found in Map encoding: \");",
                "+        }",
                "+",
                "+        return previousConstructor;",
                "+    }",
                " }",
                "diff --git a/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathDataType.java b/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathDataType.java",
                "index a3cfb2a4..acc6d77d 100644",
                "--- a/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathDataType.java",
                "+++ b/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathDataType.java",
                "@@ -20,2 +20,4 @@ import java.util.Collection;",
                "+import org.apache.qpid.proton.ProtonException;",
                "+import org.apache.qpid.proton.amqp.Binary;",
                " import org.apache.qpid.proton.amqp.Symbol;",
                "@@ -29,2 +31,3 @@ import org.apache.qpid.proton.codec.EncodingCodes;",
                " import org.apache.qpid.proton.codec.FastPathDescribedTypeConstructor;",
                "+import org.apache.qpid.proton.codec.ReadableBuffer;",
                " import org.apache.qpid.proton.codec.TypeEncoding;",
                "@@ -82,3 +85,29 @@ public class FastPathDataType implements AMQPType<Data>, FastPathDescribedTypeCo",
                "     public Data readValue() {",
                "-        return new Data(getDecoder().readBinary());",
                "+        ReadableBuffer buffer = getDecoder().getBuffer();",
                "+        byte encodingCode = buffer.get();",
                "+",
                "+        int size = 0;",
                "+",
                "+        switch (encodingCode) {",
                "+            case EncodingCodes.VBIN8:",
                "+                size = buffer.get() & 0xFF;",
                "+                break;",
                "+            case EncodingCodes.VBIN32:",
                "+                size = buffer.getInt();",
                "+                break;",
                "+            case EncodingCodes.NULL:",
                "+                return new Data(null);",
                "+            default:",
                "+                throw new ProtonException(\"Expected Binary type but found encoding: \" + encodingCode);",
                "+        }",
                "+",
                "+        if (size > buffer.remaining()) {",
                "+            throw new IllegalArgumentException(\"Binary data size \" + size + \" is specified to be greater than the \" +",
                "+                                               \"amount of data available (\"+ buffer.remaining()+\")\");",
                "+        }",
                "+",
                "+        byte[] data = new byte[size];",
                "+        buffer.get(data, 0, size);",
                "+",
                "+        return new Data(new Binary(data));",
                "     }",
                "diff --git a/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathDeliveryAnnotationsType.java b/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathDeliveryAnnotationsType.java",
                "index acf91dcb..1bbc3212 100644",
                "--- a/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathDeliveryAnnotationsType.java",
                "+++ b/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathDeliveryAnnotationsType.java",
                "@@ -19,3 +19,6 @@ package org.apache.qpid.proton.codec.messaging;",
                " import java.util.Collection;",
                "+import java.util.LinkedHashMap;",
                "+import java.util.Map;",
                "+import org.apache.qpid.proton.ProtonException;",
                " import org.apache.qpid.proton.amqp.Symbol;",
                "@@ -24,2 +27,4 @@ import org.apache.qpid.proton.amqp.messaging.DeliveryAnnotations;",
                " import org.apache.qpid.proton.codec.AMQPType;",
                "+import org.apache.qpid.proton.codec.ArrayType;",
                "+import org.apache.qpid.proton.codec.DecodeException;",
                " import org.apache.qpid.proton.codec.Decoder;",
                "@@ -30,2 +35,6 @@ import org.apache.qpid.proton.codec.FastPathDescribedTypeConstructor;",
                " import org.apache.qpid.proton.codec.MapType;",
                "+import org.apache.qpid.proton.codec.PrimitiveTypeEncoding;",
                "+import org.apache.qpid.proton.codec.ReadableBuffer;",
                "+import org.apache.qpid.proton.codec.SymbolType;",
                "+import org.apache.qpid.proton.codec.TypeConstructor;",
                " import org.apache.qpid.proton.codec.TypeEncoding;",
                "@@ -37,4 +46,3 @@ public class FastPathDeliveryAnnotationsType implements AMQPType<DeliveryAnnotat",
                "-    private static final Object[] DESCRIPTORS =",
                "-    {",
                "+    private static final Object[] DESCRIPTORS = {",
                "         UnsignedLong.valueOf(DESCRIPTOR_CODE), Symbol.valueOf(\"amqp:delivery-annotations:map\"),",
                "@@ -43,2 +51,3 @@ public class FastPathDeliveryAnnotationsType implements AMQPType<DeliveryAnnotat",
                "     private final DeliveryAnnotationsType annotationsType;",
                "+    private final SymbolType symbolType;",
                "@@ -46,2 +55,3 @@ public class FastPathDeliveryAnnotationsType implements AMQPType<DeliveryAnnotat",
                "         this.annotationsType = new DeliveryAnnotationsType(encoder);",
                "+        this.symbolType = (SymbolType) encoder.getTypeFromClass(Symbol.class);",
                "     }",
                "@@ -81,6 +91,64 @@ public class FastPathDeliveryAnnotationsType implements AMQPType<DeliveryAnnotat",
                "-    @SuppressWarnings(\"unchecked\")",
                "     @Override",
                "     public DeliveryAnnotations readValue() {",
                "-        return new DeliveryAnnotations(getDecoder().readMap());",
                "+        DecoderImpl decoder = getDecoder();",
                "+        ReadableBuffer buffer = decoder.getBuffer();",
                "+",
                "+        final int size;",
                "+        final int count;",
                "+",
                "+        byte encodingCode = buffer.get();",
                "+",
                "+        switch (encodingCode) {",
                "+            case EncodingCodes.MAP8:",
                "+                size = buffer.get() & 0xFF;",
                "+                count = buffer.get() & 0xFF;",
                "+                break;",
                "+            case EncodingCodes.MAP32:",
                "+                size = buffer.getInt();",
                "+                count = buffer.getInt();",
                "+                break;",
                "+            case EncodingCodes.NULL:",
                "+                return new DeliveryAnnotations(null);",
                "+            default:",
                "+                throw new ProtonException(\"Expected Map type but found encoding: \" + encodingCode);",
                "+        }",
                "+",
                "+        if (count > buffer.remaining()) {",
                "+            throw new IllegalArgumentException(\"Map element count \" + count + \" is specified to be greater than the \" +",
                "+                                               \"amount of data available (\" + buffer.remaining() + \")\");",
                "+        }",
                "+",
                "+        TypeConstructor<?> valueConstructor = null;",
                "+",
                "+        Map<Symbol, Object> map = new LinkedHashMap<>(count);",
                "+        for(int i = 0; i < count / 2; i++) {",
                "+            Symbol key = decoder.readSymbol(null);",
                "+            if (key == null) {",
                "+                throw new DecodeException(\"String key in DeliveryAnnotations cannot be null\");",
                "+            }",
                "+",
                "+            boolean arrayType = false;",
                "+            byte code = buffer.get(buffer.position());",
                "+            switch (code)",
                "+            {",
                "+                case EncodingCodes.ARRAY8:",
                "+                case EncodingCodes.ARRAY32:",
                "+                    arrayType = true;",
                "+            }",
                "+",
                "+            valueConstructor = findNextDecoder(decoder, buffer, valueConstructor);",
                "+",
                "+            final Object value;",
                "+",
                "+            if (arrayType) {",
                "+                value = ((ArrayType.ArrayEncoding) valueConstructor).readValueArray();",
                "+            } else {",
                "+                value = valueConstructor.readValue();",
                "+            }",
                "+",
                "+            map.put(key, value);",
                "+        }",
                "+",
                "+        return new DeliveryAnnotations(map);",
                "     }",
                "@@ -102,3 +170,3 @@ public class FastPathDeliveryAnnotationsType implements AMQPType<DeliveryAnnotat",
                "-        mapType.setKeyEncoding(getEncoder().getTypeFromClass(Symbol.class));",
                "+        mapType.setKeyEncoding(symbolType);",
                "         mapType.write(val.getValue());",
                "@@ -109,4 +177,3 @@ public class FastPathDeliveryAnnotationsType implements AMQPType<DeliveryAnnotat",
                "         FastPathDeliveryAnnotationsType type = new FastPathDeliveryAnnotationsType(encoder);",
                "-        for(Object descriptor : DESCRIPTORS)",
                "-        {",
                "+        for(Object descriptor : DESCRIPTORS) {",
                "             decoder.register(descriptor, type);",
                "@@ -115,2 +182,27 @@ public class FastPathDeliveryAnnotationsType implements AMQPType<DeliveryAnnotat",
                "     }",
                "+",
                "+    private static TypeConstructor<?> findNextDecoder(DecoderImpl decoder, ReadableBuffer buffer, TypeConstructor<?> previousConstructor) {",
                "+        if (previousConstructor == null) {",
                "+            return decoder.readConstructor();",
                "+        } else {",
                "+            byte encodingCode = buffer.get(buffer.position());",
                "+            if (encodingCode == EncodingCodes.DESCRIBED_TYPE_INDICATOR || !(previousConstructor instanceof PrimitiveTypeEncoding<?>)) {",
                "+                previousConstructor = decoder.readConstructor();",
                "+            } else {",
                "+                PrimitiveTypeEncoding<?> primitiveConstructor = (PrimitiveTypeEncoding<?>) previousConstructor;",
                "+                if (encodingCode != primitiveConstructor.getEncodingCode()) {",
                "+                    previousConstructor = decoder.readConstructor();",
                "+                } else {",
                "+                    // consume the encoding code byte for real",
                "+                    encodingCode = buffer.get();",
                "+                }",
                "+            }",
                "+        }",
                "+",
                "+        if (previousConstructor == null) {",
                "+            throw new DecodeException(\"Unknown constructor found in Map encoding: \");",
                "+        }",
                "+",
                "+        return previousConstructor;",
                "+    }",
                " }",
                "diff --git a/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathMessageAnnotationsType.java b/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathMessageAnnotationsType.java",
                "index 195e4b55..49cc09e0 100644",
                "--- a/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathMessageAnnotationsType.java",
                "+++ b/proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathMessageAnnotationsType.java",
                "@@ -19,3 +19,6 @@ package org.apache.qpid.proton.codec.messaging;",
                " import java.util.Collection;",
                "+import java.util.LinkedHashMap;",
                "+import java.util.Map;",
                "+import org.apache.qpid.proton.ProtonException;",
                " import org.apache.qpid.proton.amqp.Symbol;",
                "@@ -24,2 +27,4 @@ import org.apache.qpid.proton.amqp.messaging.MessageAnnotations;",
                " import org.apache.qpid.proton.codec.AMQPType;",
                "+import org.apache.qpid.proton.codec.ArrayType;",
                "+import org.apache.qpid.proton.codec.DecodeException;",
                " import org.apache.qpid.proton.codec.Decoder;",
                "@@ -30,2 +35,6 @@ import org.apache.qpid.proton.codec.FastPathDescribedTypeConstructor;",
                " import org.apache.qpid.proton.codec.MapType;",
                "+import org.apache.qpid.proton.codec.PrimitiveTypeEncoding;",
                "+import org.apache.qpid.proton.codec.ReadableBuffer;",
                "+import org.apache.qpid.proton.codec.SymbolType;",
                "+import org.apache.qpid.proton.codec.TypeConstructor;",
                " import org.apache.qpid.proton.codec.TypeEncoding;",
                "@@ -37,4 +46,3 @@ public class FastPathMessageAnnotationsType implements AMQPType<MessageAnnotatio",
                "-    private static final Object[] DESCRIPTORS =",
                "-    {",
                "+    private static final Object[] DESCRIPTORS = {",
                "         UnsignedLong.valueOf(DESCRIPTOR_CODE), Symbol.valueOf(\"amqp:message-annotations:map\"),",
                "@@ -43,2 +51,3 @@ public class FastPathMessageAnnotationsType implements AMQPType<MessageAnnotatio",
                "     private final MessageAnnotationsType annotationsType;",
                "+    private final SymbolType symbolType;",
                "@@ -46,2 +55,3 @@ public class FastPathMessageAnnotationsType implements AMQPType<MessageAnnotatio",
                "         this.annotationsType = new MessageAnnotationsType(encoder);",
                "+        this.symbolType = (SymbolType) encoder.getTypeFromClass(Symbol.class);",
                "     }",
                "@@ -81,6 +91,64 @@ public class FastPathMessageAnnotationsType implements AMQPType<MessageAnnotatio",
                "-    @SuppressWarnings(\"unchecked\")",
                "     @Override",
                "     public MessageAnnotations readValue() {",
                "-        return new MessageAnnotations(getDecoder().readMap());",
                "+        DecoderImpl decoder = getDecoder();",
                "+        ReadableBuffer buffer = decoder.getBuffer();",
                "+",
                "+        final int size;",
                "+        final int count;",
                "+",
                "+        byte encodingCode = buffer.get();",
                "+",
                "+        switch (encodingCode) {",
                "+            case EncodingCodes.MAP8:",
                "+                size = buffer.get() & 0xFF;",
                "+                count = buffer.get() & 0xFF;",
                "+                break;",
                "+            case EncodingCodes.MAP32:",
                "+                size = buffer.getInt();",
                "+                count = buffer.getInt();",
                "+                break;",
                "+            case EncodingCodes.NULL:",
                "+                return new MessageAnnotations(null);",
                "+            default:",
                "+                throw new ProtonException(\"Expected Map type but found encoding: \" + encodingCode);",
                "+        }",
                "+",
                "+        if (count > buffer.remaining()) {",
                "+            throw new IllegalArgumentException(\"Map element count \"+count+\" is specified to be greater than the amount of data available (\"+",
                "+                                               decoder.getByteBufferRemaining()+\")\");",
                "+        }",
                "+",
                "+        TypeConstructor<?> valueConstructor = null;",
                "+",
                "+        Map<Symbol, Object> map = new LinkedHashMap<>(count);",
                "+        for(int i = 0; i < count / 2; i++) {",
                "+            Symbol key = decoder.readSymbol(null);",
                "+            if (key == null) {",
                "+                throw new DecodeException(\"String key in DeliveryAnnotations cannot be null\");",
                "+            }",
                "+",
                "+            boolean arrayType = false;",
                "+            byte code = buffer.get(buffer.position());",
                "+            switch (code)",
                "+            {",
                "+                case EncodingCodes.ARRAY8:",
                "+                case EncodingCodes.ARRAY32:",
                "+                    arrayType = true;",
                "+            }",
                "+",
                "+            valueConstructor = findNextDecoder(decoder, buffer, valueConstructor);",
                "+",
                "+            final Object value;",
                "+",
                "+            if (arrayType) {",
                "+                value = ((ArrayType.ArrayEncoding) valueConstructor).readValueArray();",
                "+            } else {",
                "+                value = valueConstructor.readValue();",
                "+            }",
                "+",
                "+            map.put(key, value);",
                "+        }",
                "+",
                "+        return new MessageAnnotations(map);",
                "     }",
                "@@ -102,3 +170,3 @@ public class FastPathMessageAnnotationsType implements AMQPType<MessageAnnotatio",
                "-        mapType.setKeyEncoding(getEncoder().getTypeFromClass(Symbol.class));",
                "+        mapType.setKeyEncoding(symbolType);",
                "         mapType.write(val.getValue());",
                "@@ -109,4 +177,3 @@ public class FastPathMessageAnnotationsType implements AMQPType<MessageAnnotatio",
                "         FastPathMessageAnnotationsType type = new FastPathMessageAnnotationsType(encoder);",
                "-        for(Object descriptor : DESCRIPTORS)",
                "-        {",
                "+        for(Object descriptor : DESCRIPTORS) {",
                "             decoder.register(descriptor, type);",
                "@@ -115,2 +182,27 @@ public class FastPathMessageAnnotationsType implements AMQPType<MessageAnnotatio",
                "     }",
                "+",
                "+    private static TypeConstructor<?> findNextDecoder(DecoderImpl decoder, ReadableBuffer buffer, TypeConstructor<?> previousConstructor) {",
                "+        if (previousConstructor == null) {",
                "+            return decoder.readConstructor();",
                "+        } else {",
                "+            byte encodingCode = buffer.get(buffer.position());",
                "+            if (encodingCode == EncodingCodes.DESCRIBED_TYPE_INDICATOR || !(previousConstructor instanceof PrimitiveTypeEncoding<?>)) {",
                "+                previousConstructor = decoder.readConstructor();",
                "+            } else {",
                "+                PrimitiveTypeEncoding<?> primitiveConstructor = (PrimitiveTypeEncoding<?>) previousConstructor;",
                "+                if (encodingCode != primitiveConstructor.getEncodingCode()) {",
                "+                    previousConstructor = decoder.readConstructor();",
                "+                } else {",
                "+                    // consume the encoding code byte for real",
                "+                    encodingCode = buffer.get();",
                "+                }",
                "+            }",
                "+        }",
                "+",
                "+        if (previousConstructor == null) {",
                "+            throw new DecodeException(\"Unknown constructor found in Map encoding: \");",
                "+        }",
                "+",
                "+        return previousConstructor;",
                "+    }",
                " }"
            ],
            "changed_files": [
                "proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathApplicationPropertiesType.java",
                "proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathDataType.java",
                "proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathDeliveryAnnotationsType.java",
                "proton-j/src/main/java/org/apache/qpid/proton/codec/messaging/FastPathMessageAnnotationsType.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PROTON-1963": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "0.31.0",
                "0.32.0",
                "0.33.0",
                "0.33.1",
                "0.33.10",
                "0.33.2",
                "0.33.3",
                "0.33.4",
                "0.33.5",
                "0.33.6",
                "0.33.7",
                "0.33.8",
                "0.33.9",
                "0.34.0",
                "0.34.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: perform, configure",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PROTON-1963",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8b71119a2bffea23a1758f2ed7520dee068b2370",
            "repository": "https://github.com/apache/qpid-proton-j",
            "timestamp": 1541525069,
            "hunks": 8,
            "message": "[maven-release-plugin] prepare release 0.30.0",
            "diff": [
                "diff --git a/apache-qpid-proton-j/pom.xml b/apache-qpid-proton-j/pom.xml",
                "index a1d5b73a..6f130f64 100644",
                "--- a/apache-qpid-proton-j/pom.xml",
                "+++ b/apache-qpid-proton-j/pom.xml",
                "@@ -20,3 +20,3 @@",
                "     <artifactId>proton-j-parent</artifactId>",
                "-    <version>0.30.0-SNAPSHOT</version>",
                "+    <version>0.30.0</version>",
                "     <relativePath>../pom.xml</relativePath>",
                "diff --git a/examples/engine/pom.xml b/examples/engine/pom.xml",
                "index b41b9c6f..a41bef25 100644",
                "--- a/examples/engine/pom.xml",
                "+++ b/examples/engine/pom.xml",
                "@@ -21,3 +21,3 @@",
                "     <artifactId>proton-j-parent</artifactId>",
                "-    <version>0.30.0-SNAPSHOT</version>",
                "+    <version>0.30.0</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/examples/reactor/pom.xml b/examples/reactor/pom.xml",
                "index ecffa6ac..f8fa188a 100644",
                "--- a/examples/reactor/pom.xml",
                "+++ b/examples/reactor/pom.xml",
                "@@ -21,3 +21,3 @@",
                "     <artifactId>proton-j-parent</artifactId>",
                "-    <version>0.30.0-SNAPSHOT</version>",
                "+    <version>0.30.0</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/pom.xml b/pom.xml",
                "index a18a5d47..1df29ece 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -28,3 +28,3 @@",
                "   <artifactId>proton-j-parent</artifactId>",
                "-  <version>0.30.0-SNAPSHOT</version>",
                "+  <version>0.30.0</version>",
                "   <packaging>pom</packaging>",
                "@@ -196,3 +196,3 @@",
                "     <url>https://git-wip-us.apache.org/repos/asf?p=qpid-proton-j.git</url>",
                "-    <tag>HEAD</tag>",
                "+    <tag>0.30.0</tag>",
                "   </scm>",
                "diff --git a/proton-j/pom.xml b/proton-j/pom.xml",
                "index f9c42d85..4e46be46 100644",
                "--- a/proton-j/pom.xml",
                "+++ b/proton-j/pom.xml",
                "@@ -21,3 +21,3 @@",
                "     <artifactId>proton-j-parent</artifactId>",
                "-    <version>0.30.0-SNAPSHOT</version>",
                "+    <version>0.30.0</version>",
                "   </parent>",
                "diff --git a/tests/performance-jmh/pom.xml b/tests/performance-jmh/pom.xml",
                "index 084e590d..6b07e059 100644",
                "--- a/tests/performance-jmh/pom.xml",
                "+++ b/tests/performance-jmh/pom.xml",
                "@@ -21,3 +21,3 @@",
                "         <artifactId>proton-j-parent</artifactId>",
                "-        <version>0.30.0-SNAPSHOT</version>",
                "+        <version>0.30.0</version>",
                "         <relativePath>../../pom.xml</relativePath>",
                "diff --git a/tests/pom.xml b/tests/pom.xml",
                "index 4a79109a..d3eba70f 100644",
                "--- a/tests/pom.xml",
                "+++ b/tests/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <artifactId>proton-j-parent</artifactId>",
                "-    <version>0.30.0-SNAPSHOT</version>",
                "+    <version>0.30.0</version>",
                "   </parent>"
            ],
            "changed_files": [
                "apache-qpid-proton-j/pom.xml",
                "examples/engine/pom.xml",
                "examples/reactor/pom.xml",
                "pom.xml",
                "proton-j/pom.xml",
                "tests/performance-jmh/pom.xml",
                "tests/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "0.30.0",
                "0.31.0",
                "0.32.0",
                "0.33.0",
                "0.33.1",
                "0.33.10",
                "0.33.2",
                "0.33.3",
                "0.33.4",
                "0.33.5",
                "0.33.6",
                "0.33.7",
                "0.33.8",
                "0.33.9",
                "0.34.0",
                "0.34.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: engine, perform",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "a9988721e544ed75150441adc26a9a2dbabebab9",
            "repository": "https://github.com/apache/qpid-proton-j",
            "timestamp": 1541525105,
            "hunks": 8,
            "message": "[maven-release-plugin] prepare for next development iteration",
            "diff": [
                "diff --git a/apache-qpid-proton-j/pom.xml b/apache-qpid-proton-j/pom.xml",
                "index 6f130f64..340012b2 100644",
                "--- a/apache-qpid-proton-j/pom.xml",
                "+++ b/apache-qpid-proton-j/pom.xml",
                "@@ -20,3 +20,3 @@",
                "     <artifactId>proton-j-parent</artifactId>",
                "-    <version>0.30.0</version>",
                "+    <version>0.31.0-SNAPSHOT</version>",
                "     <relativePath>../pom.xml</relativePath>",
                "diff --git a/examples/engine/pom.xml b/examples/engine/pom.xml",
                "index a41bef25..e4d55929 100644",
                "--- a/examples/engine/pom.xml",
                "+++ b/examples/engine/pom.xml",
                "@@ -21,3 +21,3 @@",
                "     <artifactId>proton-j-parent</artifactId>",
                "-    <version>0.30.0</version>",
                "+    <version>0.31.0-SNAPSHOT</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/examples/reactor/pom.xml b/examples/reactor/pom.xml",
                "index f8fa188a..083c8314 100644",
                "--- a/examples/reactor/pom.xml",
                "+++ b/examples/reactor/pom.xml",
                "@@ -21,3 +21,3 @@",
                "     <artifactId>proton-j-parent</artifactId>",
                "-    <version>0.30.0</version>",
                "+    <version>0.31.0-SNAPSHOT</version>",
                "     <relativePath>../../pom.xml</relativePath>",
                "diff --git a/pom.xml b/pom.xml",
                "index 1df29ece..7c356590 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -28,3 +28,3 @@",
                "   <artifactId>proton-j-parent</artifactId>",
                "-  <version>0.30.0</version>",
                "+  <version>0.31.0-SNAPSHOT</version>",
                "   <packaging>pom</packaging>",
                "@@ -196,3 +196,3 @@",
                "     <url>https://git-wip-us.apache.org/repos/asf?p=qpid-proton-j.git</url>",
                "-    <tag>0.30.0</tag>",
                "+    <tag>HEAD</tag>",
                "   </scm>",
                "diff --git a/proton-j/pom.xml b/proton-j/pom.xml",
                "index 4e46be46..3239904e 100644",
                "--- a/proton-j/pom.xml",
                "+++ b/proton-j/pom.xml",
                "@@ -21,3 +21,3 @@",
                "     <artifactId>proton-j-parent</artifactId>",
                "-    <version>0.30.0</version>",
                "+    <version>0.31.0-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/tests/performance-jmh/pom.xml b/tests/performance-jmh/pom.xml",
                "index 6b07e059..f2a18191 100644",
                "--- a/tests/performance-jmh/pom.xml",
                "+++ b/tests/performance-jmh/pom.xml",
                "@@ -21,3 +21,3 @@",
                "         <artifactId>proton-j-parent</artifactId>",
                "-        <version>0.30.0</version>",
                "+        <version>0.31.0-SNAPSHOT</version>",
                "         <relativePath>../../pom.xml</relativePath>",
                "diff --git a/tests/pom.xml b/tests/pom.xml",
                "index d3eba70f..d3231d3b 100644",
                "--- a/tests/pom.xml",
                "+++ b/tests/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <artifactId>proton-j-parent</artifactId>",
                "-    <version>0.30.0</version>",
                "+    <version>0.31.0-SNAPSHOT</version>",
                "   </parent>"
            ],
            "changed_files": [
                "apache-qpid-proton-j/pom.xml",
                "examples/engine/pom.xml",
                "examples/reactor/pom.xml",
                "pom.xml",
                "proton-j/pom.xml",
                "tests/performance-jmh/pom.xml",
                "tests/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "0.31.0",
                "0.32.0",
                "0.33.0",
                "0.33.1",
                "0.33.10",
                "0.33.2",
                "0.33.3",
                "0.33.4",
                "0.33.5",
                "0.33.6",
                "0.33.7",
                "0.33.8",
                "0.33.9",
                "0.34.0",
                "0.34.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: engine, perform",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "2951b4051466a4c0ee888a5f8fa012c62ed138d3",
            "repository": "https://github.com/apache/qpid-proton-j",
            "timestamp": 1540911876,
            "hunks": 0,
            "message": "PROTON-1938: cleanup PR, alternate change made in 19bf22f7e9b88e73db4b195f674d1527dbd713f3. This closes #16",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {
                "PROTON-1938": ""
            },
            "ghissue_refs": {
                "16": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "0.30.0",
                "0.31.0",
                "0.32.0",
                "0.33.0",
                "0.33.1",
                "0.33.10",
                "0.33.2",
                "0.33.3",
                "0.33.4",
                "0.33.5",
                "0.33.6",
                "0.33.7",
                "0.33.8",
                "0.33.9",
                "0.34.0",
                "0.34.1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PROTON-1938",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 16",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "83609c4752fbdaa1ddfa032285e5caa09b61f480",
            "repository": "https://github.com/apache/qpid-proton-j",
            "timestamp": 1541508799,
            "hunks": 7,
            "message": "PROTON-1958: use a per-Timer counter value such that its Tasks naturally order if their deadlines are equal",
            "diff": [
                "diff --git a/proton-j/src/main/java/org/apache/qpid/proton/reactor/impl/TaskImpl.java b/proton-j/src/main/java/org/apache/qpid/proton/reactor/impl/TaskImpl.java",
                "index 11bb6b82..d360ee7d 100644",
                "--- a/proton-j/src/main/java/org/apache/qpid/proton/reactor/impl/TaskImpl.java",
                "+++ b/proton-j/src/main/java/org/apache/qpid/proton/reactor/impl/TaskImpl.java",
                "@@ -23,4 +23,2 @@ package org.apache.qpid.proton.reactor.impl;",
                "-import java.util.concurrent.atomic.AtomicInteger;",
                "-",
                " import org.apache.qpid.proton.engine.Record;",
                "@@ -34,3 +32,2 @@ public class TaskImpl implements Task, Comparable<TaskImpl> {",
                "     private boolean cancelled = false;",
                "-    private final AtomicInteger count = new AtomicInteger();",
                "     private Record attachments = new RecordImpl();",
                "@@ -38,5 +35,5 @@ public class TaskImpl implements Task, Comparable<TaskImpl> {",
                "-    public TaskImpl(long deadline) {",
                "+    public TaskImpl(long deadline, int counter) {",
                "         this.deadline = deadline;",
                "-        this.counter = count.getAndIncrement();",
                "+        this.counter = counter;",
                "     }",
                "diff --git a/proton-j/src/main/java/org/apache/qpid/proton/reactor/impl/Timer.java b/proton-j/src/main/java/org/apache/qpid/proton/reactor/impl/Timer.java",
                "index b8df19d1..03511961 100644",
                "--- a/proton-j/src/main/java/org/apache/qpid/proton/reactor/impl/Timer.java",
                "+++ b/proton-j/src/main/java/org/apache/qpid/proton/reactor/impl/Timer.java",
                "@@ -24,2 +24,3 @@ package org.apache.qpid.proton.reactor.impl;",
                " import java.util.PriorityQueue;",
                "+import java.util.concurrent.atomic.AtomicInteger;",
                "@@ -34,2 +35,3 @@ public class Timer {",
                "     private PriorityQueue<TaskImpl> tasks = new PriorityQueue<TaskImpl>();",
                "+    private AtomicInteger counter = new AtomicInteger();",
                "@@ -40,3 +42,3 @@ public class Timer {",
                "     Task schedule(long deadline) {",
                "-        TaskImpl task = new TaskImpl(deadline);",
                "+        TaskImpl task = new TaskImpl(deadline, counter.incrementAndGet());",
                "         tasks.add(task);"
            ],
            "changed_files": [
                "proton-j/src/main/java/org/apache/qpid/proton/reactor/impl/TaskImpl.java",
                "proton-j/src/main/java/org/apache/qpid/proton/reactor/impl/Timer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PROTON-1958": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "0.30.0",
                "0.31.0",
                "0.32.0",
                "0.33.0",
                "0.33.1",
                "0.33.10",
                "0.33.2",
                "0.33.3",
                "0.33.4",
                "0.33.5",
                "0.33.6",
                "0.33.7",
                "0.33.8",
                "0.33.9",
                "0.34.0",
                "0.34.1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PROTON-1958",
                    "relevance": 2
                }
            ]
        }
    ]
}
