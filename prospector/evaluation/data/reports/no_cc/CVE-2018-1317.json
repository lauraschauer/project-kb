{
    "advisory_record": {
        "cve_id": "CVE-2018-1317",
        "description": "In Apache Zeppelin prior to 0.8.0 the cron scheduler was enabled by default and could allow users to run paragraphs as other users without authentication.",
        "reserved_timestamp": 1512604800,
        "published_timestamp": 1556030720,
        "updated_timestamp": 1556100359,
        "repository_url": null,
        "references": {
            "": 24,
            "https://lists.apache.org/thread.html/ff6b995a5a3ba8db4d6b14b4d9dd487e7bf2e3bdd5b375b64a25fd06%40%3Cusers.zeppelin.apache.org%3E": 2,
            "http://www.openwall.com/lists/oss-security/2019/04/23/1": 2,
            "https://zeppelin.apache.org/releases/zeppelin-release-0.8.0.html": 2,
            "http://www.securityfocus.com/bid/108047": 2,
            "https://github.com/apache/zeppelin": 1,
            "http://www.apache.org/foundation/how-it-works.html": 1,
            "http://www.apache.org/licenses/": 1,
            "http://www.apache.org/foundation/sponsorship.html": 1,
            "http://www.apache.org/foundation/thanks.html": 1,
            "https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12316221&version=12339144": 1
        },
        "affected_products": [
            "Zeppelin",
            "Apache",
            "Apache Zeppelin"
        ],
        "versions": {
            "status": "affected",
            "version": "prior to 0.8.0"
        },
        "files": [],
        "keywords": [
            "default",
            "user",
            "cron",
            "enable",
            "allow",
            "apache",
            "scheduler",
            "zeppelin",
            "paragraph",
            "authentication"
        ],
        "files_extension": [],
        "has_fixing_commit": false
    },
    "commits": [
        {
            "commit_id": "5e7d2b472cdfe2d215fb528559c7484a3abd455f",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1510301123,
            "hunks": 15,
            "message": "ZEPPELIN-3040. Allow to specify portRange for interpreter process thrift service ### What is this PR for? This PR is trying to add new configuration zeppelin.interpreter.portRange which control the portRange of interpreter process. This is required by some users for security reason. ### What type of PR is it? [Improvement | Feature] ### Todos * [ ] - Task ### What is the Jira issue? * https://issues.apache.org/jira/browse/ZEPPELIN-3040 ### How should this be tested? Manually test. Set zeppelin.interpreter.portRange and launch python interpreter, verify it is in the proper portRange. ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Jeff Zhang <zjffdu@apache.org> Closes #2666 from zjffdu/ZEPPELIN-3040-0.7 and squashes the following commits: cd1ca62 [Jeff Zhang] ZEPPELIN-3040. Allow to specify portRange for interpreter process thrift service",
            "diff": [
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "index a9c86c4ef..e8b2ebd1f 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "@@ -63,2 +63,3 @@ public class RemoteInterpreter extends Interpreter {",
                "   private int port;",
                "+  private String portRange;",
                "   private String userName;",
                "@@ -74,3 +75,3 @@ public class RemoteInterpreter extends Interpreter {",
                "       ApplicationEventListener appListener, String userName, Boolean isUserImpersonate,",
                "-      int outputLimit) {",
                "+      int outputLimit, String portRange) {",
                "     super(property);",
                "@@ -90,2 +91,3 @@ public class RemoteInterpreter extends Interpreter {",
                "     this.outputLimit = outputLimit;",
                "+    this.portRange = portRange;",
                "   }",
                "@@ -186,3 +188,3 @@ public class RemoteInterpreter extends Interpreter {",
                "           remoteProcess = new RemoteInterpreterManagedProcess(",
                "-              interpreterRunner, interpreterPath, localRepoPath, env, connectTimeout,",
                "+              interpreterRunner, interpreterPath, localRepoPath, portRange, env, connectTimeout,",
                "               remoteInterpreterProcessListener, applicationEventListener);",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterManagedProcess.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterManagedProcess.java",
                "index f5d73ede8..d638f3711 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterManagedProcess.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterManagedProcess.java",
                "@@ -44,2 +44,3 @@ public class RemoteInterpreterManagedProcess extends RemoteInterpreterProcess",
                "   private int port = -1;",
                "+  private String portRange;",
                "   private final String interpreterDir;",
                "@@ -53,2 +54,3 @@ public class RemoteInterpreterManagedProcess extends RemoteInterpreterProcess",
                "       String localRepoDir,",
                "+      String portRange,",
                "       Map<String, String> env,",
                "@@ -63,2 +65,3 @@ public class RemoteInterpreterManagedProcess extends RemoteInterpreterProcess",
                "     this.localRepoDir = localRepoDir;",
                "+    this.portRange = portRange;",
                "@@ -69,2 +72,3 @@ public class RemoteInterpreterManagedProcess extends RemoteInterpreterProcess",
                "                                   String localRepoDir,",
                "+                                  String portRange,",
                "                                   Map<String, String> env,",
                "@@ -78,2 +82,3 @@ public class RemoteInterpreterManagedProcess extends RemoteInterpreterProcess",
                "     this.localRepoDir = localRepoDir;",
                "+    this.portRange = portRange;",
                "   }",
                "@@ -94,3 +99,3 @@ public class RemoteInterpreterManagedProcess extends RemoteInterpreterProcess",
                "     try {",
                "-      port = RemoteInterpreterUtils.findRandomAvailablePortOnAllLocalInterfaces();",
                "+      port = RemoteInterpreterUtils.findRandomAvailablePortOnAllLocalInterfaces(portRange);",
                "     } catch (IOException e1) {",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterUtils.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterUtils.java",
                "index 2937e2d4c..bdf98ff5a 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterUtils.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterUtils.java",
                "@@ -19,2 +19,3 @@ package org.apache.zeppelin.interpreter.remote;",
                "+import org.apache.commons.lang.StringUtils;",
                " import org.slf4j.Logger;",
                "@@ -42,2 +43,43 @@ public class RemoteInterpreterUtils {",
                "+  /**",
                "+   * start:end",
                "+   *",
                "+   * @param portRange",
                "+   * @return",
                "+   * @throws IOException",
                "+   */",
                "+  public static int findRandomAvailablePortOnAllLocalInterfaces(String portRange)",
                "+      throws IOException {",
                "+",
                "+    // ':' is the default value which means no constraints on the portRange",
                "+    if (StringUtils.isBlank(portRange) || portRange.equals(\":\")) {",
                "+      int port;",
                "+      try (ServerSocket socket = new ServerSocket(0);) {",
                "+        port = socket.getLocalPort();",
                "+        socket.close();",
                "+      }",
                "+      return port;",
                "+    }",
                "+    // valid user registered port https://en.wikipedia.org/wiki/Registered_port",
                "+    int start = 1024;",
                "+    int end = 65535;",
                "+    String[] ports = portRange.split(\":\", -1);",
                "+    if (!ports[0].isEmpty()) {",
                "+      start = Integer.parseInt(ports[0]);",
                "+    }",
                "+    if (!ports[1].isEmpty()) {",
                "+      end = Integer.parseInt(ports[1]);",
                "+    }",
                "+    for (int i = start; i <= end; ++i) {",
                "+      try {",
                "+        ServerSocket socket = new ServerSocket(i);",
                "+        socket.close();",
                "+        return socket.getLocalPort();",
                "+      } catch (Exception e) {",
                "+        // ignore this",
                "+      }",
                "+    }",
                "+    throw new IOException(\"No available port in the portRange: \" + portRange);",
                "+  }",
                "+",
                "   public static boolean checkIfRemoteEndpointAccessible(String host, int port) {",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "index 242a89096..d2df6d8b9 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "@@ -494,2 +494,5 @@ public class ZeppelinConfiguration extends XMLConfiguration {",
                "+  public String getInterpreterPortRange() {",
                "+    return getString(ConfVars.ZEPPELIN_INTERPRETER_PORTRANGE);",
                "+  }",
                "@@ -641,3 +644,5 @@ public class ZeppelinConfiguration extends XMLConfiguration {",
                "     ZEPPELIN_SERVER_STRICT_TRANSPORT(\"zeppelin.server.strict.transport\", \"max-age=631138519\"),",
                "-    ZEPPELIN_SERVER_X_XSS_PROTECTION(\"zeppelin.server.xxss.protection\", \"1\");",
                "+    ZEPPELIN_SERVER_X_XSS_PROTECTION(\"zeppelin.server.xxss.protection\", \"1\"),",
                "+",
                "+    ZEPPELIN_INTERPRETER_PORTRANGE(\"zeppelin.interpreter.portRange\", \":\");",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java",
                "index 2091dfd1e..accbfcf58 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java",
                "@@ -318,3 +318,4 @@ public class InterpreterFactory implements InterpreterGroupFactory {",
                "             remoteInterpreterProcessListener, appEventListener, userName, isUserImpersonate,",
                "-            conf.getInt(ConfVars.ZEPPELIN_INTERPRETER_OUTPUT_LIMIT));",
                "+            conf.getInt(ConfVars.ZEPPELIN_INTERPRETER_OUTPUT_LIMIT),",
                "+            conf.getInterpreterPortRange());",
                "     remoteInterpreter.addEnv(env);"
            ],
            "changed_files": [
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterManagedProcess.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterUtils.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3040": ""
            },
            "ghissue_refs": {
                "2666": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "382479fd502b5872fe0f7914d9901c4473069cc2"
                ]
            ],
            "tags": [],
            "matched_rules": [
                {
                    "id": "SEC_KEYWORDS_IN_MESSAGE",
                    "message": "The commit message contains some security-related keywords: security",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: allow, user",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3040",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2666",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "afd2bca46c778e9e84deb7ba5e4f5b258735022b",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1509280912,
            "hunks": 71,
            "message": "ZEPPELIN-3013. Only parse paragraph text when text is updated ### What is this PR for? Before this PR, each time when paragraph use interpreter, it would parse the text to get the interpreter component which is inefficient. This PR would do it when `setText` is called. ### What type of PR is it? [ Improvement | Refactoring] ### Todos * [ ] - Task ### What is the Jira issue? * https://issues.apache.org/jira/browse/ZEPPELIN-3013 ### How should this be tested? * Unit test is added ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Jeff Zhang <zjffdu@apache.org> Closes #2635 from zjffdu/ZEPPELIN-3013 and squashes the following commits: 71c7edf [Jeff Zhang] minor change c33d4ce [Jeff Zhang] ZEPPELIN-3013. Only parse paragraph text when text is updated",
            "diff": [
                "diff --git a/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java b/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "index aa5b0fb9d..e3fb00491 100644",
                "--- a/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "+++ b/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "@@ -1517,3 +1517,3 @@ public class NotebookServer extends WebSocketServlet",
                "     }",
                "-    return paragraph.getCurrentRepl().getInterpreterGroup();",
                "+    return paragraph.getBindedInterpreter().getInterpreterGroup();",
                "   }",
                "@@ -1782,3 +1782,3 @@ public class NotebookServer extends WebSocketServlet",
                "     if (!(Strings.isNullOrEmpty(p.getText()) ||",
                "-        p.getText().trim().equals(p.getMagic())) &&",
                "+        Strings.isNullOrEmpty(p.getScriptText())) &&",
                "         isTheLastParagraph) {",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/Helium.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/Helium.java",
                "index e5f2e3b35..0af15abda 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/Helium.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/Helium.java",
                "@@ -22,3 +22,2 @@ import org.apache.commons.lang3.StringUtils;",
                " import org.apache.zeppelin.interpreter.Interpreter;",
                "-import org.apache.zeppelin.interpreter.InterpreterGroup;",
                " import org.apache.zeppelin.interpreter.InterpreterSettingManager;",
                "@@ -343,3 +342,3 @@ public class Helium {",
                "-    Interpreter intp = paragraph.getCurrentRepl();",
                "+    Interpreter intp = paragraph.getBindedInterpreter();",
                "     if (intp == null) {",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/HeliumApplicationFactory.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/HeliumApplicationFactory.java",
                "index f4dfae37a..bdb361413 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/HeliumApplicationFactory.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/HeliumApplicationFactory.java",
                "@@ -80,3 +80,3 @@ public class HeliumApplicationFactory implements ApplicationEventListener, Noteb",
                "         // get interpreter process",
                "-        Interpreter intp = paragraph.getRepl(paragraph.getRequiredReplName());",
                "+        Interpreter intp = paragraph.getBindedInterpreter();",
                "         ManagedInterpreterGroup intpGroup = (ManagedInterpreterGroup) intp.getInterpreterGroup();",
                "@@ -202,3 +202,3 @@ public class HeliumApplicationFactory implements ApplicationEventListener, Noteb",
                "         appStatusChange(paragraph, appsToUnload.getId(), ApplicationState.Status.UNLOADING);",
                "-        Interpreter intp = paragraph.getCurrentRepl();",
                "+        Interpreter intp = paragraph.getBindedInterpreter();",
                "         if (intp == null) {",
                "@@ -282,3 +282,3 @@ public class HeliumApplicationFactory implements ApplicationEventListener, Noteb",
                "-        Interpreter intp = paragraph.getCurrentRepl();",
                "+        Interpreter intp = paragraph.getBindedInterpreter();",
                "         if (intp == null) {",
                "@@ -419,3 +419,3 @@ public class HeliumApplicationFactory implements ApplicationEventListener, Noteb",
                "     for (Paragraph p : note.getParagraphs()) {",
                "-      Interpreter currentInterpreter = p.getCurrentRepl();",
                "+      Interpreter currentInterpreter = p.getBindedInterpreter();",
                "       List<InterpreterInfo> infos = setting.getInterpreterInfos();",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "index 5b88c12d7..0596cc525 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "@@ -843,2 +843,9 @@ public class InterpreterSetting {",
                "   }",
                "+",
                "+  public void waitForReady() throws InterruptedException {",
                "+    while (getStatus().equals(",
                "+        org.apache.zeppelin.interpreter.InterpreterSetting.Status.DOWNLOADING_DEPENDENCIES)) {",
                "+      Thread.sleep(200);",
                "+    }",
                "+  }",
                " }",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroup.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroup.java",
                "index 2c1e6316c..219204f04 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroup.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroup.java",
                "@@ -58,3 +58,3 @@ public class ManagedInterpreterGroup extends InterpreterGroup {",
                "     if (remoteInterpreterProcess == null) {",
                "-      LOGGER.info(\"Create InterperterProcess for InterpreterGroup: \" + getId());",
                "+      LOGGER.info(\"Create InterpreterProcess for InterpreterGroup: \" + getId());",
                "       remoteInterpreterProcess = interpreterSetting.createInterpreterProcess();",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "index 1ab459e74..a2e3e9b40 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "@@ -164,3 +164,3 @@ public class RemoteInterpreter extends Interpreter {",
                "       if (!isCreated) {",
                "-        RemoteInterpreterProcess interpreterProcess = getOrCreateInterpreterProcess();",
                "+        this.interpreterProcess = getOrCreateInterpreterProcess();",
                "         interpreterProcess.callRemoteFunction(new RemoteInterpreterProcess.RemoteFunction<Void>() {",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "index 5124f5d44..9fb0f0e05 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "@@ -31,2 +31,3 @@ import org.apache.commons.lang.StringUtils;",
                " import org.apache.zeppelin.common.JsonSerializable;",
                "+import org.apache.zeppelin.completer.CompletionType;",
                " import org.apache.zeppelin.conf.ZeppelinConfiguration;",
                "@@ -226,3 +227,3 @@ public class Note implements ParagraphJobListener, JsonSerializable {",
                "-  void setInterpreterFactory(InterpreterFactory factory) {",
                "+  public void setInterpreterFactory(InterpreterFactory factory) {",
                "     this.factory = factory;",
                "@@ -237,7 +238,2 @@ public class Note implements ParagraphJobListener, JsonSerializable {",
                "     this.interpreterSettingManager = interpreterSettingManager;",
                "-    synchronized (paragraphs) {",
                "-      for (Paragraph p : paragraphs) {",
                "-        p.setInterpreterSettingManager(interpreterSettingManager);",
                "-      }",
                "-    }",
                "   }",
                "@@ -307,4 +303,3 @@ public class Note implements ParagraphJobListener, JsonSerializable {",
                "     // Keep paragraph original ID",
                "-    final Paragraph newParagraph = new Paragraph(srcParagraph.getId(), this, this, factory,",
                "-        interpreterSettingManager);",
                "+    final Paragraph newParagraph = new Paragraph(srcParagraph.getId(), this, this, factory);",
                "@@ -351,3 +346,3 @@ public class Note implements ParagraphJobListener, JsonSerializable {",
                "   private Paragraph createParagraph(int index, AuthenticationInfo authenticationInfo) {",
                "-    Paragraph p = new Paragraph(this, this, factory, interpreterSettingManager);",
                "+    Paragraph p = new Paragraph(this, this, factory);",
                "     p.setAuthenticationInfo(authenticationInfo);",
                "@@ -572,10 +567,10 @@ public class Note implements ParagraphJobListener, JsonSerializable {",
                "     if (paragraphs.size() > 0) {",
                "-      String magic;",
                "+      String replName;",
                "       if (index == 0) {",
                "-        magic = paragraphs.get(0).getMagic();",
                "+        replName = paragraphs.get(0).getIntpText();",
                "       } else {",
                "-        magic = paragraphs.get(index - 1).getMagic();",
                "+        replName = paragraphs.get(index - 1).getIntpText();",
                "       }",
                "-      if (StringUtils.isNotEmpty(magic)) {",
                "-        p.setText(magic + \"\\n\");",
                "+      if (p.isValidInterpreter(replName) && StringUtils.isNotEmpty(replName)) {",
                "+        p.setText(\"%\" + replName + \"\\n\");",
                "       }",
                "@@ -622,40 +617,3 @@ public class Note implements ParagraphJobListener, JsonSerializable {",
                "     p.setListener(jobListenerFactory.getParagraphJobListener(this));",
                "-    ",
                "-    if (p.isBlankParagraph()) {",
                "-      logger.info(\"skip to run blank paragraph. {}\", p.getId());",
                "-      p.setStatus(Job.Status.FINISHED);",
                "-      return true;",
                "-    }",
                "-",
                "-    p.clearRuntimeInfo(null);",
                "-    String requiredReplName = p.getRequiredReplName();",
                "-    Interpreter intp = factory.getInterpreter(p.getUser(), getId(), requiredReplName);",
                "-",
                "-    if (intp == null) {",
                "-      String intpExceptionMsg =",
                "-          p.getJobName() + \"'s Interpreter \" + requiredReplName + \" not found\";",
                "-      RuntimeException intpException = new RuntimeException(intpExceptionMsg);",
                "-      InterpreterResult intpResult =",
                "-          new InterpreterResult(InterpreterResult.Code.ERROR, intpException.getMessage());",
                "-      p.setReturn(intpResult, intpException);",
                "-      p.setStatus(Job.Status.ERROR);",
                "-      throw intpException;",
                "-    }",
                "-    if (p.getConfig().get(\"enabled\") == null || (Boolean) p.getConfig().get(\"enabled\")) {",
                "-      p.setAuthenticationInfo(p.getAuthenticationInfo());",
                "-      intp.getScheduler().submit(p);",
                "-    }",
                "-",
                "-    if (blocking) {",
                "-      while (!p.getStatus().isCompleted()) {",
                "-        try {",
                "-          Thread.sleep(100);",
                "-        } catch (InterruptedException e) {",
                "-          throw new RuntimeException(e);",
                "-        }",
                "-      }",
                "-      return p.getStatus() == Status.FINISHED;",
                "-    } else {",
                "-      return true;",
                "-    }",
                "+    return p.execute(blocking);",
                "   }",
                "@@ -692,2 +650,19 @@ public class Note implements ParagraphJobListener, JsonSerializable {",
                "+  public List<InterpreterCompletion> getInterpreterCompletion() {",
                "+    List<InterpreterCompletion> completion = new LinkedList();",
                "+    for (InterpreterSetting intp : interpreterSettingManager.getInterpreterSettings(getId())) {",
                "+      List<InterpreterInfo> intInfo = intp.getInterpreterInfos();",
                "+      if (intInfo.size() > 1) {",
                "+        for (InterpreterInfo info : intInfo) {",
                "+          String name = intp.getName() + \".\" + info.getName();",
                "+          completion.add(new InterpreterCompletion(name, name, CompletionType.setting.name()));",
                "+        }",
                "+      } else {",
                "+        completion.add(new InterpreterCompletion(intp.getName(), intp.getName(),",
                "+            CompletionType.setting.name()));",
                "+      }",
                "+    }",
                "+    return completion;",
                "+  }",
                "+",
                "   public List<Paragraph> getParagraphs() {",
                "@@ -922,2 +897,6 @@ public class Note implements ParagraphJobListener, JsonSerializable {",
                "+  boolean hasInterpreterBinded() {",
                "+    return !interpreterSettingManager.getInterpreterSettings(getId()).isEmpty();",
                "+  }",
                "+",
                "   public String toJson() {",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "index eaef494d2..e304e4a1d 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "@@ -30,2 +30,4 @@ import java.security.SecureRandom;",
                " import java.util.Set;",
                "+import java.util.regex.Matcher;",
                "+import java.util.regex.Pattern;",
                "@@ -33,3 +35,2 @@ import org.apache.commons.lang.StringUtils;",
                " import org.apache.zeppelin.common.JsonSerializable;",
                "-import org.apache.zeppelin.completer.CompletionType;",
                " import org.apache.zeppelin.display.AngularObject;",
                "@@ -45,3 +46,2 @@ import org.apache.zeppelin.interpreter.InterpreterException;",
                " import org.apache.zeppelin.interpreter.InterpreterFactory;",
                "-import org.apache.zeppelin.interpreter.InterpreterInfo;",
                " import org.apache.zeppelin.interpreter.InterpreterOption;",
                "@@ -54,3 +54,3 @@ import org.apache.zeppelin.interpreter.InterpreterResultMessageOutput;",
                " import org.apache.zeppelin.interpreter.InterpreterSetting;",
                "-import org.apache.zeppelin.interpreter.InterpreterSettingManager;",
                "+import org.apache.zeppelin.interpreter.ManagedInterpreterGroup;",
                " import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;",
                "@@ -75,7 +75,7 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "-  private static final long serialVersionUID = -6328572073497992016L;",
                "-",
                "   private static Logger logger = LoggerFactory.getLogger(Paragraph.class);",
                "-  private transient InterpreterFactory factory;",
                "-  private transient InterpreterSettingManager interpreterSettingManager;",
                "+  private static Pattern REPL_PATTERN = Pattern.compile(\"(\\\\s*)%([\\\\w\\\\.]+).*\", Pattern.DOTALL);",
                "+",
                "+  private transient InterpreterFactory interpreterFactory;",
                "+  private transient Interpreter interpreter;",
                "   private transient Note note;",
                "@@ -84,8 +84,11 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "-  String title;",
                "-  String text;",
                "-  String user;",
                "-  Date dateUpdated;",
                "-  private Map<String, Object> config; // paragraph configs like isOpen, colWidth, etc",
                "-  public GUI settings;          // form and parameter settings",
                "+  private String title;",
                "+  private String text;  // text is composed of intpText and scriptText.",
                "+  private transient String intpText;",
                "+  private transient String scriptText;",
                "+  private String user;",
                "+  private Date dateUpdated;",
                "+  // paragraph configs like isOpen, colWidth, etc",
                "+  private Map<String, Object> config = new HashMap<>();",
                "+  public GUI settings = new GUI();          // form and parameter settings",
                "@@ -107,4 +110,2 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "     super(generateId(), null);",
                "-    config = new HashMap<>();",
                "-    settings = new GUI();",
                "   }",
                "@@ -112,28 +113,12 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "   public Paragraph(String paragraphId, Note note, JobListener listener,",
                "-      InterpreterFactory factory, InterpreterSettingManager interpreterSettingManager) {",
                "+      InterpreterFactory interpreterFactory) {",
                "     super(paragraphId, generateId(), listener);",
                "     this.note = note;",
                "-    this.factory = factory;",
                "-    this.interpreterSettingManager = interpreterSettingManager;",
                "-    title = null;",
                "-    text = null;",
                "-    authenticationInfo = null;",
                "-    user = null;",
                "-    dateUpdated = null;",
                "-    settings = new GUI();",
                "-    config = new HashMap<>();",
                "-  }",
                "-",
                "-  public Paragraph(Note note, JobListener listener, InterpreterFactory factory,",
                "-      InterpreterSettingManager interpreterSettingManager) {",
                "+    this.interpreterFactory = interpreterFactory;",
                "+  }",
                "+",
                "+  public Paragraph(Note note, JobListener listener, InterpreterFactory interpreterFactory) {",
                "     super(generateId(), listener);",
                "     this.note = note;",
                "-    this.factory = factory;",
                "-    this.interpreterSettingManager = interpreterSettingManager;",
                "-    title = null;",
                "-    text = null;",
                "-    authenticationInfo = null;",
                "-    dateUpdated = null;",
                "-    settings = new GUI();",
                "-    config = new HashMap<>();",
                "+    this.interpreterFactory = interpreterFactory;",
                "   }",
                "@@ -162,2 +147,4 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "     Paragraph p = new Paragraph();",
                "+    p.interpreterFactory = interpreterFactory;",
                "+    p.note = note;",
                "     p.settings.setParams(Maps.newHashMap(settings.getParams()));",
                "@@ -165,2 +152,5 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "     p.setConfig(Maps.newHashMap(config));",
                "+    if (getAuthenticationInfo() != null) {",
                "+      p.setAuthenticationInfo(getAuthenticationInfo());",
                "+    }",
                "     p.setTitle(getTitle());",
                "@@ -191,4 +181,19 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "   public void setText(String newText) {",
                "+    // strip white space from the beginning",
                "     this.text = newText;",
                "     this.dateUpdated = new Date();",
                "+    // parse text to get interpreter component",
                "+    if (this.text != null) {",
                "+      Matcher matcher = REPL_PATTERN.matcher(this.text);",
                "+      if (matcher.matches()) {",
                "+        String headingSpace = matcher.group(1);",
                "+        this.intpText = matcher.group(2);",
                "+        this.interpreter = interpreterFactory.getInterpreter(user, note.getId(), intpText);",
                "+        this.scriptText = this.text.substring(headingSpace.length() + intpText.length() + 1).trim();",
                "+      } else {",
                "+        this.intpText = \"\";",
                "+        this.interpreter = interpreterFactory.getInterpreter(user, note.getId(), \"\");",
                "+        this.scriptText = this.text;",
                "+      }",
                "+    }",
                "   }",
                "@@ -212,2 +217,10 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "+  public String getIntpText() {",
                "+    return intpText;",
                "+  }",
                "+",
                "+  public String getScriptText() {",
                "+    return scriptText;",
                "+  }",
                "+",
                "   public void setNote(Note note) {",
                "@@ -225,74 +238,8 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "-  public String getRequiredReplName() {",
                "-    return getRequiredReplName(text != null ? text.trim() : text);",
                "+  public Interpreter getBindedInterpreter() {",
                "+    return this.interpreterFactory.getInterpreter(user, note.getId(), intpText);",
                "   }",
                "-  public static String getRequiredReplName(String text) {",
                "-    if (text == null) {",
                "-      return null;",
                "-    }",
                "-",
                "-    if (!text.startsWith(\"%\")) {",
                "-      return null;",
                "-    }",
                "-",
                "-    // get script head",
                "-    int scriptHeadIndex = 0;",
                "-    for (int i = 0; i < text.length(); i++) {",
                "-      char ch = text.charAt(i);",
                "-      if (Character.isWhitespace(ch) || ch == '(' || ch == '\\n') {",
                "-        break;",
                "-      }",
                "-      scriptHeadIndex = i;",
                "-    }",
                "-    if (scriptHeadIndex < 1) {",
                "-      return null;",
                "-    }",
                "-    String head = text.substring(1, scriptHeadIndex + 1);",
                "-    return head;",
                "-  }",
                "-",
                "-  public String getScriptBody() {",
                "-    return getScriptBody(text);",
                "-  }",
                "-",
                "-  public static String getScriptBody(String text) {",
                "-    if (text == null) {",
                "-      return null;",
                "-    }",
                "-",
                "-    String magic = getRequiredReplName(text);",
                "-    if (magic == null) {",
                "-      return text;",
                "-    }",
                "-",
                "-    if (magic.length() + 1 >= text.length()) {",
                "-      return \"\";",
                "-    }",
                "-    return text.substring(magic.length() + 1).trim();",
                "-  }",
                "-",
                "-  public Interpreter getRepl(String name) {",
                "-    return factory.getInterpreter(user, note.getId(), name);",
                "-  }",
                "-",
                "-  public Interpreter getCurrentRepl() {",
                "-    return getRepl(getRequiredReplName());",
                "-  }",
                "-",
                "-  public List<InterpreterCompletion> getInterpreterCompletion() {",
                "-    List<InterpreterCompletion> completion = new LinkedList();",
                "-    for (InterpreterSetting intp : interpreterSettingManager.getInterpreterSettings(note.getId())) {",
                "-      List<InterpreterInfo> intInfo = intp.getInterpreterInfos();",
                "-      if (intInfo.size() > 1) {",
                "-        for (InterpreterInfo info : intInfo) {",
                "-          String name = intp.getName() + \".\" + info.getName();",
                "-          completion.add(new InterpreterCompletion(name, name, CompletionType.setting.name()));",
                "-        }",
                "-      } else {",
                "-        completion.add(new InterpreterCompletion(intp.getName(), intp.getName(),",
                "-            CompletionType.setting.name()));",
                "-      }",
                "-    }",
                "-    return completion;",
                "+  public void setInterpreter(Interpreter interpreter) {",
                "+    this.interpreter = interpreter;",
                "   }",
                "@@ -302,6 +249,5 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "     if (lines.length > 0 && lines[0].startsWith(\"%\") && cursor <= lines[0].trim().length()) {",
                "-",
                "       int idx = lines[0].indexOf(' ');",
                "       if (idx < 0 || (idx > 0 && cursor <= idx)) {",
                "-        return getInterpreterCompletion();",
                "+        return note.getInterpreterCompletion();",
                "       }",
                "@@ -311,5 +257,2 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "-    String replName = getRequiredReplName(trimmedBuffer);",
                "-",
                "-    String body = getScriptBody(trimmedBuffer);",
                "     InterpreterContext interpreterContext = getInterpreterContextWithoutRunner(null);",
                "@@ -317,4 +260,7 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "     try {",
                "-      Interpreter repl = getRepl(replName);",
                "-      return repl.completion(body, cursor, interpreterContext);",
                "+      if (this.interpreter != null) {",
                "+        return this.interpreter.completion(scriptText, cursor, interpreterContext);",
                "+      } else {",
                "+        return null;",
                "+      }",
                "     } catch (InterpreterException e) {",
                "@@ -330,6 +276,14 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "-    String replName = getRequiredReplName(trimmedBuffer);",
                "-    if (replName != null && cursor > replName.length()) {",
                "-      String body = trimmedBuffer.substring(replName.length() + 1);",
                "-      cursor -= replName.length() + 1 + body.indexOf(body.trim());",
                "+    // parse text to get interpreter component",
                "+    String repl = null;",
                "+    if (trimmedBuffer != null) {",
                "+      Matcher matcher = REPL_PATTERN.matcher(trimmedBuffer);",
                "+      if (matcher.matches()) {",
                "+        repl = matcher.group(2);",
                "+      }",
                "+    }",
                "+",
                "+    if (repl != null && cursor > repl.length()) {",
                "+      String body = trimmedBuffer.substring(repl.length() + 1);",
                "+      cursor -= repl.length() + 1 + body.indexOf(body.trim());",
                "     }",
                "@@ -340,7 +294,3 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "   public void setInterpreterFactory(InterpreterFactory factory) {",
                "-    this.factory = factory;",
                "-  }",
                "-",
                "-  public void setInterpreterSettingManager(InterpreterSettingManager interpreterSettingManager) {",
                "-    this.interpreterSettingManager = interpreterSettingManager;",
                "+    this.interpreterFactory = factory;",
                "   }",
                "@@ -362,10 +312,8 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "   public int progress() {",
                "-    String replName = getRequiredReplName();",
                "-",
                "     try {",
                "-      Interpreter repl = getRepl(replName);",
                "-      if (repl == null) {",
                "+      if (this.interpreter != null) {",
                "+        return this.interpreter.getProgress(getInterpreterContext(null));",
                "+      } else {",
                "         return 0;",
                "       }",
                "-      return repl.getProgress(getInterpreterContext(null));",
                "     } catch (InterpreterException e) {",
                "@@ -390,5 +338,43 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "   public boolean isBlankParagraph() {",
                "-    return Strings.isNullOrEmpty(getText()) || getText().trim().equals(getMagic());",
                "+    return Strings.isNullOrEmpty(scriptText);",
                "   }",
                "+  public boolean execute(boolean blocking) {",
                "+    if (isBlankParagraph()) {",
                "+      logger.info(\"skip to run blank paragraph. {}\", getId());",
                "+      setStatus(Job.Status.FINISHED);",
                "+      return true;",
                "+    }",
                "+",
                "+    clearRuntimeInfo(null);",
                "+    this.interpreter = getBindedInterpreter();",
                "+",
                "+    if (interpreter == null) {",
                "+      String intpExceptionMsg =",
                "+          getJobName() + \"'s Interpreter \" + getIntpText() + \" not found\";",
                "+      RuntimeException intpException = new RuntimeException(intpExceptionMsg);",
                "+      InterpreterResult intpResult =",
                "+          new InterpreterResult(InterpreterResult.Code.ERROR, intpException.getMessage());",
                "+      setReturn(intpResult, intpException);",
                "+      setStatus(Job.Status.ERROR);",
                "+      throw intpException;",
                "+    }",
                "+    if (getConfig().get(\"enabled\") == null || (Boolean) getConfig().get(\"enabled\")) {",
                "+      setAuthenticationInfo(getAuthenticationInfo());",
                "+      interpreter.getScheduler().submit(this);",
                "+    }",
                "+",
                "+    if (blocking) {",
                "+      while (!getStatus().isCompleted()) {",
                "+        try {",
                "+          Thread.sleep(100);",
                "+        } catch (InterruptedException e) {",
                "+          throw new RuntimeException(e);",
                "+        }",
                "+      }",
                "+      return getStatus() == Status.FINISHED;",
                "+    } else {",
                "+      return true;",
                "+    }",
                "+  }",
                "@@ -396,21 +382,19 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "   protected Object jobRun() throws Throwable {",
                "-    String replName = getRequiredReplName();",
                "-    Interpreter repl = getRepl(replName);",
                "-    logger.info(\"run paragraph {} using {} \" + repl, getId(), replName);",
                "-    if (repl == null) {",
                "-      logger.error(\"Can not find interpreter name \" + repl);",
                "-      throw new RuntimeException(\"Can not find interpreter for \" + getRequiredReplName());",
                "-    }",
                "-    //TODO(zjffdu) check interpreter setting status in interpreter setting itself",
                "-    InterpreterSetting intp = getInterpreterSettingById(repl.getInterpreterGroup().getId());",
                "-    while (intp.getStatus().equals(",
                "-        org.apache.zeppelin.interpreter.InterpreterSetting.Status.DOWNLOADING_DEPENDENCIES)) {",
                "-      Thread.sleep(200);",
                "-    }",
                "-    if (this.noteHasUser() && this.noteHasInterpreters()) {",
                "-      if (intp != null && interpreterHasUser(intp)",
                "-          && isUserAuthorizedToAccessInterpreter(intp.getOption()) == false) {",
                "-        logger.error(\"{} has no permission for {} \", authenticationInfo.getUser(), repl);",
                "+    logger.info(\"Run paragraph {} using {} \", getId(), intpText);",
                "+    this.interpreter = getBindedInterpreter();",
                "+    if (this.interpreter == null) {",
                "+      logger.error(\"Can not find interpreter name \" + intpText);",
                "+      throw new RuntimeException(\"Can not find interpreter for \" + intpText);",
                "+    }",
                "+    InterpreterSetting interpreterSetting = ((ManagedInterpreterGroup)",
                "+        interpreter.getInterpreterGroup()).getInterpreterSetting();",
                "+    if (interpreterSetting != null) {",
                "+      interpreterSetting.waitForReady();",
                "+    }",
                "+    if (this.hasUser() && this.note.hasInterpreterBinded()) {",
                "+      if (interpreterSetting != null && interpreterHasUser(interpreterSetting)",
                "+          && isUserAuthorizedToAccessInterpreter(interpreterSetting.getOption()) == false) {",
                "+        logger.error(\"{} has no permission for {} \", authenticationInfo.getUser(), intpText);",
                "         return new InterpreterResult(Code.ERROR,",
                "-            authenticationInfo.getUser() + \" has no permission for \" + getRequiredReplName());",
                "+            authenticationInfo.getUser() + \" has no permission for \" + intpText);",
                "       }",
                "@@ -422,16 +406,13 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "-    String script = getScriptBody();",
                "     // inject form",
                "-    if (repl.getFormType() == FormType.NATIVE) {",
                "+    String script = this.scriptText;",
                "+    if (interpreter.getFormType() == FormType.NATIVE) {",
                "       settings.clear();",
                "-    } else if (repl.getFormType() == FormType.SIMPLE) {",
                "-      String scriptBody = getScriptBody();",
                "-      // inputs will be built from script body",
                "-      LinkedHashMap<String, Input> inputs = Input.extractSimpleQueryForm(scriptBody);",
                "-",
                "+    } else if (interpreter.getFormType() == FormType.SIMPLE) {",
                "+      // inputs will be built from script scriptText",
                "+      LinkedHashMap<String, Input> inputs = Input.extractSimpleQueryForm(this.scriptText);",
                "       final AngularObjectRegistry angularRegistry =",
                "-          repl.getInterpreterGroup().getAngularObjectRegistry();",
                "-",
                "-      scriptBody = extractVariablesFromAngularRegistry(scriptBody, inputs, angularRegistry);",
                "-",
                "+          interpreter.getInterpreterGroup().getAngularObjectRegistry();",
                "+      String scriptBody = extractVariablesFromAngularRegistry(this.scriptText, inputs,",
                "+          angularRegistry);",
                "       settings.setForms(inputs);",
                "@@ -443,3 +424,3 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "       InterpreterContext.set(context);",
                "-      InterpreterResult ret = repl.interpret(script, context);",
                "+      InterpreterResult ret = interpreter.interpret(script, context);",
                "@@ -467,3 +448,3 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "-  private boolean noteHasUser() {",
                "+  private boolean hasUser() {",
                "     return this.user != null;",
                "@@ -471,8 +452,5 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "-  private boolean noteHasInterpreters() {",
                "-    return !interpreterSettingManager.getInterpreterSettings(note.getId()).isEmpty();",
                "-  }",
                "-",
                "-  private boolean interpreterHasUser(InterpreterSetting intp) {",
                "-    return intp.getOption().permissionIsSet() && intp.getOption().getOwners() != null;",
                "+  private boolean interpreterHasUser(InterpreterSetting interpreterSetting) {",
                "+    return interpreterSetting.getOption().permissionIsSet() &&",
                "+        interpreterSetting.getOption().getOwners() != null;",
                "   }",
                "@@ -484,20 +462,8 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "-  private InterpreterSetting getInterpreterSettingById(String id) {",
                "-    InterpreterSetting setting = null;",
                "-    for (InterpreterSetting i : interpreterSettingManager.getInterpreterSettings(note.getId())) {",
                "-      if (id.startsWith(i.getId())) {",
                "-        setting = i;",
                "-        break;",
                "-      }",
                "-    }",
                "-    return setting;",
                "-  }",
                "-",
                "   @Override",
                "   protected boolean jobAbort() {",
                "-    Interpreter repl = getRepl(getRequiredReplName());",
                "-    if (repl == null) {",
                "+    if (interpreter == null) {",
                "       return true;",
                "     }",
                "-    Scheduler scheduler = repl.getScheduler();",
                "+    Scheduler scheduler = interpreter.getScheduler();",
                "     if (scheduler == null) {",
                "@@ -511,3 +477,3 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "       try {",
                "-        repl.cancel(getInterpreterContextWithoutRunner(null));",
                "+        interpreter.cancel(getInterpreterContextWithoutRunner(null));",
                "       } catch (InterpreterException e) {",
                "@@ -562,9 +528,5 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "-    if (!interpreterSettingManager.getInterpreterSettings(note.getId()).isEmpty()) {",
                "-      InterpreterSetting intpGroup =",
                "-          interpreterSettingManager.getInterpreterSettings(note.getId()).get(0);",
                "-      registry = intpGroup.getOrCreateInterpreterGroup(getUser(), note.getId())",
                "-          .getAngularObjectRegistry();",
                "-      resourcePool = intpGroup.getOrCreateInterpreterGroup(getUser(), note.getId())",
                "-          .getResourcePool();",
                "+    if (this.interpreter != null) {",
                "+      registry = this.interpreter.getInterpreterGroup().getAngularObjectRegistry();",
                "+      resourcePool = this.interpreter.getInterpreterGroup().getResourcePool();",
                "     }",
                "@@ -585,3 +547,3 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "     InterpreterContext interpreterContext =",
                "-        new InterpreterContext(note.getId(), getId(), getRequiredReplName(), this.getTitle(),",
                "+        new InterpreterContext(note.getId(), getId(), intpText, this.getTitle(),",
                "             this.getText(), this.getAuthenticationInfo(), this.getConfig(), this.settings, registry,",
                "@@ -595,9 +557,5 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "-    if (!interpreterSettingManager.getInterpreterSettings(note.getId()).isEmpty()) {",
                "-      InterpreterSetting intpGroup =",
                "-          interpreterSettingManager.getInterpreterSettings(note.getId()).get(0);",
                "-      registry = intpGroup.getOrCreateInterpreterGroup(getUser(), note.getId())",
                "-          .getAngularObjectRegistry();",
                "-      resourcePool = intpGroup.getOrCreateInterpreterGroup(getUser(), note.getId())",
                "-          .getResourcePool();",
                "+    if (this.interpreter != null) {",
                "+      registry = this.interpreter.getInterpreterGroup().getAngularObjectRegistry();",
                "+      resourcePool = this.interpreter.getInterpreterGroup().getResourcePool();",
                "     }",
                "@@ -619,3 +577,3 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "     InterpreterContext interpreterContext =",
                "-        new InterpreterContext(note.getId(), getId(), getRequiredReplName(), this.getTitle(),",
                "+        new InterpreterContext(note.getId(), getId(), intpText, this.getTitle(),",
                "             this.getText(), this.getAuthenticationInfo(), this.getConfig(), this.settings, registry,",
                "@@ -730,18 +688,4 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "-  public String getMagic() {",
                "-    String magic = StringUtils.EMPTY;",
                "-    String text = getText();",
                "-    if (text != null && text.startsWith(\"%\")) {",
                "-      magic = text.split(\"\\\\s+\")[0];",
                "-      if (isValidInterpreter(magic.substring(1))) {",
                "-        return magic;",
                "-      } else {",
                "-        return StringUtils.EMPTY;",
                "-      }",
                "-    }",
                "-    return magic;",
                "-  }",
                "-",
                "-  private boolean isValidInterpreter(String replName) {",
                "-    return factory.getInterpreter(user, note.getId(), replName) != null;",
                "+  public boolean isValidInterpreter(String replName) {",
                "+    return interpreterFactory.getInterpreter(user, note.getId(), replName) != null;",
                "   }",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepo.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepo.java",
                "index 3fe5dab8a..63395f9a7 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepo.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepo.java",
                "@@ -170,4 +170,2 @@ public class VFSNotebookRepo implements NotebookRepo {",
                "     Note note = Note.fromJson(json);",
                "-//    note.setReplLoader(replLoader);",
                "-//    note.jobListenerFactory = jobListenerFactory;"
            ],
            "changed_files": [
                "zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/Helium.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/HeliumApplicationFactory.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroup.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepo.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3013": ""
            },
            "ghissue_refs": {
                "2635": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: paragraph",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: paragraph",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3013",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2635",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9812e26bced75033b5795ee0fb8d8c08df9c83b5",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1506063600,
            "hunks": 284,
            "message": "ZEPPELIN-2685. Improvement on Interpreter class ### What is this PR for? Follow up of #2577. Main changes on Interpreter * Add throw `InterpreterException` which is checked exception for the abstract methods of `Interpreter`, this would enforce the interpreter implementation to throw `InterpreterException`. * field name refactoring.      * `property` -> `properties`      * `getProperty()` --> `getProperties()` * Introduce launcher layer for interpreter launching. Currently we only use shell script to launch interpreter, but it could be any other service or component to launch interpreter, such as livy server , other 3rd party tools or even we may create a separate module for interpreter launcher      * abstract cass `InterpreterLauncher`      * For now, only 2 implementation: `ShellScriptLauncher` & `SparkInterpreterLauncher`. We could add method in class `Interpreter` to allow interpreter to specify its own launcher class, but it could be future work. ### What type of PR is it? [Improvement | Refactoring] ### Todos * [ ] - Task ### What is the Jira issue? * https://issues.apache.org/jira/browse/ZEPPELIN-2685 ### How should this be tested? Unit test is covered. `ShellScriptLauncherTest` & `SparkInterpreterLauncherTest` ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Jeff Zhang <zjffdu@apache.org> Closes #2592 from zjffdu/ZEPPELIN-2685 and squashes the following commits: 17dc2f1 [Jeff Zhang] address comments e545cc3 [Jeff Zhang] ZEPPELIN-2685. Improvement on Interpreter class",
            "diff": [
                "diff --git a/bin/common.sh b/bin/common.sh",
                "index d425cb1ab..6447ec8da 100644",
                "--- a/bin/common.sh",
                "+++ b/bin/common.sh",
                "@@ -124,3 +124,3 @@ export JAVA_OPTS",
                " JAVA_INTP_OPTS=\"${ZEPPELIN_INTP_JAVA_OPTS} -Dfile.encoding=${ZEPPELIN_ENCODING}\"",
                "-if [[ -z \"${SPARK_YARN_CLUSTER}\" ]]; then",
                "+if [[ -z \"${ZEPPELIN_SPARK_YARN_CLUSTER}\" ]]; then",
                "     JAVA_INTP_OPTS+=\" -Dlog4j.configuration=file://${ZEPPELIN_CONF_DIR}/log4j.properties\"",
                "diff --git a/bin/interpreter.sh b/bin/interpreter.sh",
                "index 5245e2560..d27b0767b 100755",
                "--- a/bin/interpreter.sh",
                "+++ b/bin/interpreter.sh",
                "@@ -150,2 +150,3 @@ if [[ \"${INTERPRETER_ID}\" == \"spark\" ]]; then",
                "     ZEPPELIN_INTP_CLASSPATH+=\":${HADOOP_CONF_DIR}\"",
                "+    export HADOOP_CONF_DIR=${HADOOP_CONF_DIR}",
                "   else",
                "diff --git a/elasticsearch/src/main/java/org/apache/zeppelin/elasticsearch/ElasticsearchInterpreter.java b/elasticsearch/src/main/java/org/apache/zeppelin/elasticsearch/ElasticsearchInterpreter.java",
                "index 33448df3d..6251b9251 100644",
                "--- a/elasticsearch/src/main/java/org/apache/zeppelin/elasticsearch/ElasticsearchInterpreter.java",
                "+++ b/elasticsearch/src/main/java/org/apache/zeppelin/elasticsearch/ElasticsearchInterpreter.java",
                "@@ -114,3 +114,3 @@ public class ElasticsearchInterpreter extends Interpreter {",
                "   public void open() {",
                "-    logger.info(\"Properties: {}\", getProperty());",
                "+    logger.info(\"Properties: {}\", getProperties());",
                "@@ -125,3 +125,3 @@ public class ElasticsearchInterpreter extends Interpreter {",
                "       logger.error(\"Unable to parse \" + ELASTICSEARCH_RESULT_SIZE + \" : \" +",
                "-          property.get(ELASTICSEARCH_RESULT_SIZE), e);",
                "+          getProperty(ELASTICSEARCH_RESULT_SIZE), e);",
                "     }",
                "@@ -130,6 +130,6 @@ public class ElasticsearchInterpreter extends Interpreter {",
                "       if (StringUtils.isEmpty(clientType) || \"transport\".equals(clientType)) {",
                "-        elsClient = new TransportBasedClient(getProperty());",
                "+        elsClient = new TransportBasedClient(getProperties());",
                "       }",
                "       else if (\"http\".equals(clientType)) {",
                "-        elsClient = new HttpBasedClient(getProperty());",
                "+        elsClient = new HttpBasedClient(getProperties());",
                "       }",
                "diff --git a/file/src/main/java/org/apache/zeppelin/file/FileInterpreter.java b/file/src/main/java/org/apache/zeppelin/file/FileInterpreter.java",
                "index d7aad192e..cf8367273 100644",
                "--- a/file/src/main/java/org/apache/zeppelin/file/FileInterpreter.java",
                "+++ b/file/src/main/java/org/apache/zeppelin/file/FileInterpreter.java",
                "@@ -22,2 +22,3 @@ import org.apache.zeppelin.interpreter.Interpreter;",
                " import org.apache.zeppelin.interpreter.InterpreterContext;",
                "+import org.apache.zeppelin.interpreter.InterpreterException;",
                " import org.apache.zeppelin.interpreter.InterpreterResult;",
                "@@ -88,3 +89,3 @@ public abstract class FileInterpreter extends Interpreter {",
                "-  public abstract String listAll(String path);",
                "+  public abstract String listAll(String path) throws InterpreterException;",
                "diff --git a/file/src/main/java/org/apache/zeppelin/file/HDFSFileInterpreter.java b/file/src/main/java/org/apache/zeppelin/file/HDFSFileInterpreter.java",
                "index 244101c9b..d715ed93a 100644",
                "--- a/file/src/main/java/org/apache/zeppelin/file/HDFSFileInterpreter.java",
                "+++ b/file/src/main/java/org/apache/zeppelin/file/HDFSFileInterpreter.java",
                "@@ -204,3 +204,3 @@ public class HDFSFileInterpreter extends FileInterpreter {",
                "-  public String listAll(String path) {",
                "+  public String listAll(String path) throws InterpreterException {",
                "     String all = \"\";",
                "diff --git a/flink/src/main/java/org/apache/zeppelin/flink/FlinkInterpreter.java b/flink/src/main/java/org/apache/zeppelin/flink/FlinkInterpreter.java",
                "index 710eace66..19c77de91 100644",
                "--- a/flink/src/main/java/org/apache/zeppelin/flink/FlinkInterpreter.java",
                "+++ b/flink/src/main/java/org/apache/zeppelin/flink/FlinkInterpreter.java",
                "@@ -19,3 +19,2 @@ package org.apache.zeppelin.flink;",
                "-import java.lang.reflect.InvocationTargetException;",
                " import java.io.BufferedReader;",
                "@@ -36,6 +35,4 @@ import org.apache.flink.runtime.messages.JobManagerMessages;",
                " import org.apache.flink.runtime.minicluster.LocalFlinkMiniCluster;",
                "-import org.apache.flink.runtime.util.EnvironmentInformation;",
                " import org.apache.zeppelin.interpreter.Interpreter;",
                " import org.apache.zeppelin.interpreter.InterpreterContext;",
                "-import org.apache.zeppelin.interpreter.InterpreterPropertyBuilder;",
                " import org.apache.zeppelin.interpreter.InterpreterResult;",
                "@@ -48,7 +45,4 @@ import org.slf4j.LoggerFactory;",
                " import scala.Console;",
                "-import scala.None;",
                "-import scala.Option;",
                " import scala.Some;",
                " import scala.collection.JavaConversions;",
                "-import scala.collection.immutable.Nil;",
                " import scala.concurrent.duration.FiniteDuration;",
                "@@ -82,3 +76,3 @@ public class FlinkInterpreter extends Interpreter {",
                "     flinkConf = new org.apache.flink.configuration.Configuration();",
                "-    Properties intpProperty = getProperty();",
                "+    Properties intpProperty = getProperties();",
                "     for (Object k : intpProperty.keySet()) {",
                "diff --git a/groovy/src/main/java/org/apache/zeppelin/groovy/GObject.java b/groovy/src/main/java/org/apache/zeppelin/groovy/GObject.java",
                "index ce7d00f64..babda8f76 100644",
                "--- a/groovy/src/main/java/org/apache/zeppelin/groovy/GObject.java",
                "+++ b/groovy/src/main/java/org/apache/zeppelin/groovy/GObject.java",
                "@@ -318,3 +318,3 @@ public class GObject extends groovy.lang.GroovyObjectSupport {",
                "     if (paragraphId.equals(context.getParagraphId())) {",
                "-      throw new InterpreterException(\"Can not run current Paragraph\");",
                "+      throw new RuntimeException(\"Can not run current Paragraph\");",
                "     }",
                "@@ -323,3 +323,3 @@ public class GObject extends groovy.lang.GroovyObjectSupport {",
                "     if (runners.size() <= 0) {",
                "-      throw new InterpreterException(\"Paragraph \" + paragraphId + \" not found \" + runners.size());",
                "+      throw new RuntimeException(\"Paragraph \" + paragraphId + \" not found \" + runners.size());",
                "     }",
                "@@ -340,3 +340,3 @@ public class GObject extends groovy.lang.GroovyObjectSupport {",
                "     if (runners.size() <= 0) {",
                "-      throw new InterpreterException(\"Note \" + noteId + \" not found \" + runners.size());",
                "+      throw new RuntimeException(\"Note \" + noteId + \" not found \" + runners.size());",
                "     }",
                "diff --git a/groovy/src/main/java/org/apache/zeppelin/groovy/GroovyInterpreter.java b/groovy/src/main/java/org/apache/zeppelin/groovy/GroovyInterpreter.java",
                "index 8c83ef783..01e97e6bd 100644",
                "--- a/groovy/src/main/java/org/apache/zeppelin/groovy/GroovyInterpreter.java",
                "+++ b/groovy/src/main/java/org/apache/zeppelin/groovy/GroovyInterpreter.java",
                "@@ -19,4 +19,2 @@ package org.apache.zeppelin.groovy;",
                "-import java.io.ByteArrayOutputStream;",
                "-import java.io.IOException;",
                " import java.io.StringWriter;",
                "@@ -28,6 +26,4 @@ import org.apache.zeppelin.interpreter.Interpreter;",
                " import org.apache.zeppelin.interpreter.InterpreterContext;",
                "-import org.apache.zeppelin.interpreter.InterpreterPropertyBuilder;",
                " import org.apache.zeppelin.interpreter.InterpreterResult;",
                " import org.apache.zeppelin.interpreter.InterpreterResult.Code;",
                "-import org.apache.zeppelin.interpreter.InterpreterResult.Type;",
                " import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;",
                "@@ -42,3 +38,2 @@ import groovy.lang.Script;",
                " import org.codehaus.groovy.control.CompilerConfiguration;",
                "-import org.codehaus.groovy.runtime.ResourceGroovyMethods;",
                " import org.codehaus.groovy.runtime.StackTraceUtils;",
                "@@ -169,3 +164,3 @@ public class GroovyInterpreter extends Interpreter {",
                "       //put predefined bindings",
                "-      bindings.put(\"g\", new GObject(log, out, this.getProperty(), contextInterpreter, bindings));",
                "+      bindings.put(\"g\", new GObject(log, out, this.getProperties(), contextInterpreter, bindings));",
                "       bindings.put(\"out\", new PrintWriter(out, true));",
                "diff --git a/hbase/src/main/java/org/apache/zeppelin/hbase/HbaseInterpreter.java b/hbase/src/main/java/org/apache/zeppelin/hbase/HbaseInterpreter.java",
                "index 74d3ed1ae..63c192833 100644",
                "--- a/hbase/src/main/java/org/apache/zeppelin/hbase/HbaseInterpreter.java",
                "+++ b/hbase/src/main/java/org/apache/zeppelin/hbase/HbaseInterpreter.java",
                "@@ -70,3 +70,3 @@ public class HbaseInterpreter extends Interpreter {",
                "   @Override",
                "-  public void open() {",
                "+  public void open() throws InterpreterException {",
                "     this.scriptingContainer  = new ScriptingContainer(LocalContextScope.SINGLETON);",
                "@@ -90,3 +90,3 @@ public class HbaseInterpreter extends Interpreter {",
                "       logger.info(\"Absolute Ruby Source:\" + abs_ruby_src.toString());",
                "-      // hirb.rb:41 requires the following system property to be set.",
                "+      // hirb.rb:41 requires the following system properties to be set.",
                "       Properties sysProps = System.getProperties();",
                "diff --git a/helium-dev/src/main/java/org/apache/zeppelin/helium/DevInterpreter.java b/helium-dev/src/main/java/org/apache/zeppelin/helium/DevInterpreter.java",
                "index 7d1c361de..ba1a564dd 100644",
                "--- a/helium-dev/src/main/java/org/apache/zeppelin/helium/DevInterpreter.java",
                "+++ b/helium-dev/src/main/java/org/apache/zeppelin/helium/DevInterpreter.java",
                "@@ -76,3 +76,4 @@ public class DevInterpreter extends Interpreter {",
                "   @Override",
                "-  public InterpreterResult interpret(String st, InterpreterContext context) {",
                "+  public InterpreterResult interpret(String st, InterpreterContext context)",
                "+      throws InterpreterException {",
                "     this.context = context;",
                "diff --git a/ignite/src/main/java/org/apache/zeppelin/ignite/IgniteSqlInterpreter.java b/ignite/src/main/java/org/apache/zeppelin/ignite/IgniteSqlInterpreter.java",
                "index 41803bb31..6af8eb549 100644",
                "--- a/ignite/src/main/java/org/apache/zeppelin/ignite/IgniteSqlInterpreter.java",
                "+++ b/ignite/src/main/java/org/apache/zeppelin/ignite/IgniteSqlInterpreter.java",
                "@@ -95,3 +95,3 @@ public class IgniteSqlInterpreter extends Interpreter {",
                "   @Override",
                "-  public void close() {",
                "+  public void close() throws InterpreterException {",
                "     try {",
                "diff --git a/jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java b/jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java",
                "index 2c5258cfd..f3dfddcbf 100644",
                "--- a/jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java",
                "+++ b/jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java",
                "@@ -47,4 +47,2 @@ import org.apache.hadoop.security.alias.CredentialProvider;",
                " import org.apache.hadoop.security.alias.CredentialProviderFactory;",
                "-import org.apache.thrift.transport.TTransportException;",
                "-import org.apache.zeppelin.interpreter.Interpreter;",
                " import org.apache.zeppelin.interpreter.InterpreterContext;",
                "@@ -174,3 +172,3 @@ public class JDBCInterpreter extends KerberosInterpreter {",
                "     super.open();",
                "-    for (String propertyKey : property.stringPropertyNames()) {",
                "+    for (String propertyKey : properties.stringPropertyNames()) {",
                "       logger.debug(\"propertyKey: {}\", propertyKey);",
                "@@ -187,3 +185,3 @@ public class JDBCInterpreter extends KerberosInterpreter {",
                "         }",
                "-        prefixProperties.put(keyValue[1].trim(), property.getProperty(propertyKey));",
                "+        prefixProperties.put(keyValue[1].trim(), getProperty(propertyKey));",
                "       }",
                "@@ -213,4 +211,4 @@ public class JDBCInterpreter extends KerberosInterpreter {",
                "   protected boolean isKerboseEnabled() {",
                "-    if (!isEmpty(property.getProperty(\"zeppelin.jdbc.auth.type\"))) {",
                "-      UserGroupInformation.AuthenticationMethod authType = JDBCSecurityImpl.getAuthtype(property);",
                "+    if (!isEmpty(getProperty(\"zeppelin.jdbc.auth.type\"))) {",
                "+      UserGroupInformation.AuthenticationMethod authType = JDBCSecurityImpl.getAuthtype(properties);",
                "       if (authType.equals(KERBEROS)) {",
                "@@ -358,3 +356,3 @@ public class JDBCInterpreter extends KerberosInterpreter {",
                "   private void setUserProperty(String propertyKey, InterpreterContext interpreterContext)",
                "-      throws SQLException, IOException {",
                "+      throws SQLException, IOException, InterpreterException {",
                "@@ -426,6 +424,7 @@ public class JDBCInterpreter extends KerberosInterpreter {",
                "-    if (isEmpty(property.getProperty(\"zeppelin.jdbc.auth.type\"))) {",
                "+    if (isEmpty(getProperty(\"zeppelin.jdbc.auth.type\"))) {",
                "       connection = getConnectionFromPool(url, user, propertyKey, properties);",
                "     } else {",
                "-      UserGroupInformation.AuthenticationMethod authType = JDBCSecurityImpl.getAuthtype(property);",
                "+      UserGroupInformation.AuthenticationMethod authType =",
                "+          JDBCSecurityImpl.getAuthtype(getProperties());",
                "@@ -433,3 +432,3 @@ public class JDBCInterpreter extends KerberosInterpreter {",
                "-      JDBCSecurityImpl.createSecureConfiguration(property, authType);",
                "+      JDBCSecurityImpl.createSecureConfiguration(getProperties(), authType);",
                "       switch (authType) {",
                "@@ -437,3 +436,3 @@ public class JDBCInterpreter extends KerberosInterpreter {",
                "           if (user == null || \"false\".equalsIgnoreCase(",
                "-              property.getProperty(\"zeppelin.jdbc.auth.kerberos.proxy.enable\"))) {",
                "+              getProperty(\"zeppelin.jdbc.auth.kerberos.proxy.enable\"))) {",
                "             connection = getConnectionFromPool(connectionUrl, user, propertyKey, properties);",
                "@@ -499,3 +498,3 @@ public class JDBCInterpreter extends KerberosInterpreter {",
                "-  private String getPassword(Properties properties) throws IOException {",
                "+  private String getPassword(Properties properties) throws IOException, InterpreterException {",
                "     if (isNotEmpty(properties.getProperty(PASSWORD_KEY))) {",
                "@@ -852,3 +851,3 @@ public class JDBCInterpreter extends KerberosInterpreter {",
                "   public List<InterpreterCompletion> completion(String buf, int cursor,",
                "-      InterpreterContext interpreterContext) {",
                "+      InterpreterContext interpreterContext) throws InterpreterException {",
                "     List<InterpreterCompletion> candidates = new ArrayList<>();",
                "diff --git a/livy/src/main/java/org/apache/zeppelin/livy/BaseLivyInterpreter.java b/livy/src/main/java/org/apache/zeppelin/livy/BaseLivyInterpreter.java",
                "index b7253485c..03a269eea 100644",
                "--- a/livy/src/main/java/org/apache/zeppelin/livy/BaseLivyInterpreter.java",
                "+++ b/livy/src/main/java/org/apache/zeppelin/livy/BaseLivyInterpreter.java",
                "@@ -133,3 +133,3 @@ public abstract class BaseLivyInterpreter extends Interpreter {",
                "   @Override",
                "-  public void open() {",
                "+  public void open() throws InterpreterException {",
                "     try {",
                "@@ -230,3 +230,3 @@ public abstract class BaseLivyInterpreter extends Interpreter {",
                "       Map<String, String> conf = new HashMap<>();",
                "-      for (Map.Entry<Object, Object> entry : property.entrySet()) {",
                "+      for (Map.Entry<Object, Object> entry : getProperties().entrySet()) {",
                "         if (entry.getKey().toString().startsWith(\"livy.spark.\") &&",
                "@@ -460,4 +460,4 @@ public abstract class BaseLivyInterpreter extends Interpreter {",
                "   private RestTemplate createRestTemplate() {",
                "-    String keytabLocation = property.getProperty(\"zeppelin.livy.keytab\");",
                "-    String principal = property.getProperty(\"zeppelin.livy.principal\");",
                "+    String keytabLocation = getProperty(\"zeppelin.livy.keytab\");",
                "+    String principal = getProperty(\"zeppelin.livy.principal\");",
                "     boolean isSpnegoEnabled = StringUtils.isNotEmpty(keytabLocation) &&",
                "@@ -467,4 +467,4 @@ public abstract class BaseLivyInterpreter extends Interpreter {",
                "     if (livyURL.startsWith(\"https:\")) {",
                "-      String keystoreFile = property.getProperty(\"zeppelin.livy.ssl.trustStore\");",
                "-      String password = property.getProperty(\"zeppelin.livy.ssl.trustStorePassword\");",
                "+      String keystoreFile = getProperty(\"zeppelin.livy.ssl.trustStore\");",
                "+      String password = getProperty(\"zeppelin.livy.ssl.trustStorePassword\");",
                "       if (StringUtils.isBlank(keystoreFile)) {",
                "diff --git a/livy/src/main/java/org/apache/zeppelin/livy/LivySparkSQLInterpreter.java b/livy/src/main/java/org/apache/zeppelin/livy/LivySparkSQLInterpreter.java",
                "index 20d044811..486e31c2c 100644",
                "--- a/livy/src/main/java/org/apache/zeppelin/livy/LivySparkSQLInterpreter.java",
                "+++ b/livy/src/main/java/org/apache/zeppelin/livy/LivySparkSQLInterpreter.java",
                "@@ -61,3 +61,3 @@ public class LivySparkSQLInterpreter extends BaseLivyInterpreter {",
                "   @Override",
                "-  public void open() {",
                "+  public void open() throws InterpreterException {",
                "     this.sparkInterpreter = getSparkInterpreter();",
                "@@ -95,3 +95,3 @@ public class LivySparkSQLInterpreter extends BaseLivyInterpreter {",
                "-  private LivySparkInterpreter getSparkInterpreter() {",
                "+  private LivySparkInterpreter getSparkInterpreter() throws InterpreterException {",
                "     LazyOpenInterpreter lazy = null;",
                "diff --git a/pig/src/main/java/org/apache/zeppelin/pig/PigInterpreter.java b/pig/src/main/java/org/apache/zeppelin/pig/PigInterpreter.java",
                "index 893741651..0f2d59bb9 100644",
                "--- a/pig/src/main/java/org/apache/zeppelin/pig/PigInterpreter.java",
                "+++ b/pig/src/main/java/org/apache/zeppelin/pig/PigInterpreter.java",
                "@@ -20,3 +20,2 @@ package org.apache.zeppelin.pig;",
                " import org.apache.commons.io.output.ByteArrayOutputStream;",
                "-import org.apache.commons.lang.StringUtils;",
                " import org.apache.commons.lang.exception.ExceptionUtils;",
                "@@ -62,3 +61,3 @@ public class PigInterpreter extends BasePigInterpreter {",
                "       pigServer = new PigServer(execType);",
                "-      for (Map.Entry entry : getProperty().entrySet()) {",
                "+      for (Map.Entry entry : getProperties().entrySet()) {",
                "         if (!entry.getKey().toString().startsWith(\"zeppelin.\")) {",
                "diff --git a/pig/src/main/java/org/apache/zeppelin/pig/PigQueryInterpreter.java b/pig/src/main/java/org/apache/zeppelin/pig/PigQueryInterpreter.java",
                "index d3bc4325c..da3d50e09 100644",
                "--- a/pig/src/main/java/org/apache/zeppelin/pig/PigQueryInterpreter.java",
                "+++ b/pig/src/main/java/org/apache/zeppelin/pig/PigQueryInterpreter.java",
                "@@ -57,3 +57,3 @@ public class PigQueryInterpreter extends BasePigInterpreter {",
                "   @Override",
                "-  public void open() {",
                "+  public void open() throws InterpreterException {",
                "     pigServer = getPigInterpreter().getPigServer();",
                "@@ -161,3 +161,3 @@ public class PigQueryInterpreter extends BasePigInterpreter {",
                "-  private PigInterpreter getPigInterpreter() {",
                "+  private PigInterpreter getPigInterpreter() throws InterpreterException {",
                "     LazyOpenInterpreter lazy = null;",
                "diff --git a/python/src/main/java/org/apache/zeppelin/python/IPythonInterpreter.java b/python/src/main/java/org/apache/zeppelin/python/IPythonInterpreter.java",
                "index 193c3434c..1c2ced501 100644",
                "--- a/python/src/main/java/org/apache/zeppelin/python/IPythonInterpreter.java",
                "+++ b/python/src/main/java/org/apache/zeppelin/python/IPythonInterpreter.java",
                "@@ -32,2 +32,3 @@ import org.apache.zeppelin.interpreter.Interpreter;",
                " import org.apache.zeppelin.interpreter.InterpreterContext;",
                "+import org.apache.zeppelin.interpreter.InterpreterException;",
                " import org.apache.zeppelin.interpreter.InterpreterResult;",
                "@@ -114,3 +115,3 @@ public class IPythonInterpreter extends Interpreter implements ExecuteResultHand",
                "   @Override",
                "-  public void open() {",
                "+  public void open() throws InterpreterException {",
                "     try {",
                "@@ -120,9 +121,10 @@ public class IPythonInterpreter extends Interpreter implements ExecuteResultHand",
                "       }",
                "-      pythonExecutable = getProperty().getProperty(\"zeppelin.python\", \"python\");",
                "+      pythonExecutable = getProperty(\"zeppelin.python\", \"python\");",
                "       LOGGER.info(\"Python Exec: \" + pythonExecutable);",
                "+",
                "       ipythonLaunchTimeout = Long.parseLong(",
                "-          getProperty().getProperty(\"zeppelin.ipython.launch.timeout\", \"30000\"));",
                "+          getProperty(\"zeppelin.ipython.launch.timeout\", \"30000\"));",
                "       this.zeppelinContext = new PythonZeppelinContext(",
                "           getInterpreterGroup().getInterpreterHookRegistry(),",
                "-          Integer.parseInt(getProperty().getProperty(\"zeppelin.python.maxResult\", \"1000\")));",
                "+          Integer.parseInt(getProperty(\"zeppelin.python.maxResult\", \"1000\")));",
                "       int ipythonPort = RemoteInterpreterUtils.findRandomAvailablePortOnAllLocalInterfaces();",
                "@@ -245,12 +247,3 @@ public class IPythonInterpreter extends Interpreter implements ExecuteResultHand",
                "-    Map<String, String> envs = EnvironmentUtils.getProcEnvironment();",
                "-    if (envs.containsKey(\"PYTHONPATH\")) {",
                "-      if (additionalPythonPath != null) {",
                "-        envs.put(\"PYTHONPATH\", additionalPythonPath + \":\" + envs.get(\"PYTHONPATH\"));",
                "-      }",
                "-    } else {",
                "-      envs.put(\"PYTHONPATH\", additionalPythonPath);",
                "-    }",
                "-",
                "-    LOGGER.info(\"PYTHONPATH: \" + envs.get(\"PYTHONPATH\"));",
                "+    Map<String, String> envs = setupIPythonEnv();",
                "     executor.execute(cmd, envs, this);",
                "@@ -286,2 +279,14 @@ public class IPythonInterpreter extends Interpreter implements ExecuteResultHand",
                "+  protected Map<String, String> setupIPythonEnv() throws IOException {",
                "+    Map<String, String> envs = EnvironmentUtils.getProcEnvironment();",
                "+    if (envs.containsKey(\"PYTHONPATH\")) {",
                "+      if (additionalPythonPath != null) {",
                "+        envs.put(\"PYTHONPATH\", additionalPythonPath + \":\" + envs.get(\"PYTHONPATH\"));",
                "+      }",
                "+    } else {",
                "+      envs.put(\"PYTHONPATH\", additionalPythonPath);",
                "+    }",
                "+    return envs;",
                "+  }",
                "+",
                "   @Override",
                "diff --git a/python/src/main/java/org/apache/zeppelin/python/PythonCondaInterpreter.java b/python/src/main/java/org/apache/zeppelin/python/PythonCondaInterpreter.java",
                "index 0d122f571..887beb8ce 100644",
                "--- a/python/src/main/java/org/apache/zeppelin/python/PythonCondaInterpreter.java",
                "+++ b/python/src/main/java/org/apache/zeppelin/python/PythonCondaInterpreter.java",
                "@@ -69,3 +69,4 @@ public class PythonCondaInterpreter extends Interpreter {",
                "   @Override",
                "-  public InterpreterResult interpret(String st, InterpreterContext context) {",
                "+  public InterpreterResult interpret(String st, InterpreterContext context)",
                "+      throws InterpreterException {",
                "     InterpreterOutput out = context.out;",
                "@@ -128,3 +129,3 @@ public class PythonCondaInterpreter extends Interpreter {",
                "   private void changePythonEnvironment(String envName)",
                "-      throws IOException, InterruptedException {",
                "+      throws IOException, InterruptedException, InterpreterException {",
                "     PythonInterpreter python = getPythonInterpreter();",
                "@@ -149,3 +150,3 @@ public class PythonCondaInterpreter extends Interpreter {",
                "-  private void restartPythonProcess() {",
                "+  private void restartPythonProcess() throws InterpreterException {",
                "     PythonInterpreter python = getPythonInterpreter();",
                "@@ -155,3 +156,3 @@ public class PythonCondaInterpreter extends Interpreter {",
                "-  protected PythonInterpreter getPythonInterpreter() {",
                "+  protected PythonInterpreter getPythonInterpreter() throws InterpreterException {",
                "     LazyOpenInterpreter lazy = null;",
                "@@ -215,3 +216,3 @@ public class PythonCondaInterpreter extends Interpreter {",
                "   private InterpreterResult runCondaActivate(String envName)",
                "-      throws IOException, InterruptedException {",
                "+      throws IOException, InterruptedException, InterpreterException {",
                "@@ -228,3 +229,3 @@ public class PythonCondaInterpreter extends Interpreter {",
                "   private InterpreterResult runCondaDeactivate()",
                "-      throws IOException, InterruptedException {",
                "+      throws IOException, InterruptedException, InterpreterException {",
                "@@ -377,6 +378,12 @@ public class PythonCondaInterpreter extends Interpreter {",
                "   public Scheduler getScheduler() {",
                "-    PythonInterpreter pythonInterpreter = getPythonInterpreter();",
                "-    if (pythonInterpreter != null) {",
                "-      return pythonInterpreter.getScheduler();",
                "-    } else {",
                "+    PythonInterpreter pythonInterpreter = null;",
                "+    try {",
                "+      pythonInterpreter = getPythonInterpreter();",
                "+      if (pythonInterpreter != null) {",
                "+        return pythonInterpreter.getScheduler();",
                "+      } else {",
                "+        return null;",
                "+      }",
                "+    } catch (InterpreterException e) {",
                "+      e.printStackTrace();",
                "       return null;",
                "diff --git a/python/src/main/java/org/apache/zeppelin/python/PythonDockerInterpreter.java b/python/src/main/java/org/apache/zeppelin/python/PythonDockerInterpreter.java",
                "index cb0f62078..22f6c2ee9 100644",
                "--- a/python/src/main/java/org/apache/zeppelin/python/PythonDockerInterpreter.java",
                "+++ b/python/src/main/java/org/apache/zeppelin/python/PythonDockerInterpreter.java",
                "@@ -58,3 +58,4 @@ public class PythonDockerInterpreter extends Interpreter {",
                "   @Override",
                "-  public InterpreterResult interpret(String st, InterpreterContext context) {",
                "+  public InterpreterResult interpret(String st, InterpreterContext context)",
                "+      throws InterpreterException {",
                "     File pythonScript = new File(getPythonInterpreter().getScriptPath());",
                "@@ -107,3 +108,3 @@ public class PythonDockerInterpreter extends Interpreter {",
                "-  public void setPythonCommand(String cmd) {",
                "+  public void setPythonCommand(String cmd) throws InterpreterException {",
                "     PythonInterpreter python = getPythonInterpreter();",
                "@@ -142,6 +143,12 @@ public class PythonDockerInterpreter extends Interpreter {",
                "   public Scheduler getScheduler() {",
                "-    PythonInterpreter pythonInterpreter = getPythonInterpreter();",
                "-    if (pythonInterpreter != null) {",
                "-      return pythonInterpreter.getScheduler();",
                "-    } else {",
                "+    PythonInterpreter pythonInterpreter = null;",
                "+    try {",
                "+      pythonInterpreter = getPythonInterpreter();",
                "+      if (pythonInterpreter != null) {",
                "+        return pythonInterpreter.getScheduler();",
                "+      } else {",
                "+        return null;",
                "+      }",
                "+    } catch (InterpreterException e) {",
                "+      e.printStackTrace();",
                "       return null;",
                "@@ -150,3 +157,3 @@ public class PythonDockerInterpreter extends Interpreter {",
                "-  private void restartPythonProcess() {",
                "+  private void restartPythonProcess() throws InterpreterException {",
                "     PythonInterpreter python = getPythonInterpreter();",
                "@@ -156,3 +163,3 @@ public class PythonDockerInterpreter extends Interpreter {",
                "-  protected PythonInterpreter getPythonInterpreter() {",
                "+  protected PythonInterpreter getPythonInterpreter() throws InterpreterException {",
                "     LazyOpenInterpreter lazy = null;",
                "@@ -175,3 +182,3 @@ public class PythonDockerInterpreter extends Interpreter {",
                "-  public boolean pull(InterpreterOutput out, String image) {",
                "+  public boolean pull(InterpreterOutput out, String image) throws InterpreterException {",
                "     int exit = 0;",
                "diff --git a/python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java b/python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java",
                "index 50f6a8b9c..4f897c8d6 100644",
                "--- a/python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java",
                "+++ b/python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java",
                "@@ -59,3 +59,2 @@ import org.slf4j.LoggerFactory;",
                " import py4j.GatewayServer;",
                "-import py4j.commands.Command;",
                "@@ -103,3 +102,3 @@ public class PythonInterpreter extends Interpreter implements ExecuteResultHandl",
                "     } catch (IOException e) {",
                "-      throw new InterpreterException(e);",
                "+      throw new RuntimeException(e);",
                "     }",
                "@@ -118,3 +117,3 @@ public class PythonInterpreter extends Interpreter implements ExecuteResultHandl",
                "-  private void createPythonScript() {",
                "+  private void createPythonScript() throws InterpreterException {",
                "     File out = new File(scriptPath);",
                "@@ -133,3 +132,3 @@ public class PythonInterpreter extends Interpreter implements ExecuteResultHandl",
                "-  private void copyFile(File out, String sourceFile) {",
                "+  private void copyFile(File out, String sourceFile) throws InterpreterException {",
                "     ClassLoader classLoader = getClass().getClassLoader();",
                "@@ -146,3 +145,4 @@ public class PythonInterpreter extends Interpreter implements ExecuteResultHandl",
                "-  private void createGatewayServerAndStartScript() throws UnknownHostException {",
                "+  private void createGatewayServerAndStartScript()",
                "+      throws UnknownHostException, InterpreterException {",
                "     createPythonScript();",
                "@@ -221,3 +221,3 @@ public class PythonInterpreter extends Interpreter implements ExecuteResultHandl",
                "   @Override",
                "-  public void open() {",
                "+  public void open() throws InterpreterException {",
                "     // try IPythonInterpreter first. If it is not available, we will fallback to the original",
                "@@ -225,3 +225,3 @@ public class PythonInterpreter extends Interpreter implements ExecuteResultHandl",
                "     iPythonInterpreter = getIPythonInterpreter();",
                "-    if (getProperty().getProperty(\"zeppelin.python.useIPython\", \"true\").equals(\"true\") &&",
                "+    if (getProperty(\"zeppelin.python.useIPython\", \"true\").equals(\"true\") &&",
                "       iPythonInterpreter.checkIPythonPrerequisite()) {",
                "@@ -371,3 +371,4 @@ public class PythonInterpreter extends Interpreter implements ExecuteResultHandl",
                "   @Override",
                "-  public InterpreterResult interpret(String cmd, InterpreterContext contextInterpreter) {",
                "+  public InterpreterResult interpret(String cmd, InterpreterContext contextInterpreter)",
                "+      throws InterpreterException {",
                "     if (iPythonInterpreter != null) {",
                "@@ -553,3 +554,7 @@ public class PythonInterpreter extends Interpreter implements ExecuteResultHandl",
                "-    interpret(bootstrapCode, context);",
                "+    try {",
                "+      interpret(bootstrapCode, context);",
                "+    } catch (InterpreterException e) {",
                "+      throw new IOException(e);",
                "+    }",
                "   }",
                "diff --git a/python/src/main/java/org/apache/zeppelin/python/PythonInterpreterPandasSql.java b/python/src/main/java/org/apache/zeppelin/python/PythonInterpreterPandasSql.java",
                "index e73d7b36b..54984c3ce 100644",
                "--- a/python/src/main/java/org/apache/zeppelin/python/PythonInterpreterPandasSql.java",
                "+++ b/python/src/main/java/org/apache/zeppelin/python/PythonInterpreterPandasSql.java",
                "@@ -24,2 +24,3 @@ import org.apache.zeppelin.interpreter.Interpreter;",
                " import org.apache.zeppelin.interpreter.InterpreterContext;",
                "+import org.apache.zeppelin.interpreter.InterpreterException;",
                " import org.apache.zeppelin.interpreter.InterpreterResult;",
                "@@ -44,3 +45,3 @@ public class PythonInterpreterPandasSql extends Interpreter {",
                "-  PythonInterpreter getPythonInterpreter() {",
                "+  PythonInterpreter getPythonInterpreter() throws InterpreterException {",
                "     LazyOpenInterpreter lazy = null;",
                "@@ -64,3 +65,3 @@ public class PythonInterpreterPandasSql extends Interpreter {",
                "   @Override",
                "-  public void open() {",
                "+  public void open() throws InterpreterException {",
                "     LOG.info(\"Open Python SQL interpreter instance: {}\", this.toString());",
                "@@ -78,3 +79,3 @@ public class PythonInterpreterPandasSql extends Interpreter {",
                "   @Override",
                "-  public void close() {",
                "+  public void close() throws InterpreterException {",
                "     LOG.info(\"Close Python SQL interpreter instance: {}\", this.toString());",
                "@@ -85,3 +86,4 @@ public class PythonInterpreterPandasSql extends Interpreter {",
                "   @Override",
                "-  public InterpreterResult interpret(String st, InterpreterContext context) {",
                "+  public InterpreterResult interpret(String st, InterpreterContext context)",
                "+      throws InterpreterException {",
                "     LOG.info(\"Running SQL query: '{}' over Pandas DataFrame\", st);",
                "diff --git a/scalding/src/main/java/org/apache/zeppelin/scalding/ScaldingInterpreter.java b/scalding/src/main/java/org/apache/zeppelin/scalding/ScaldingInterpreter.java",
                "index 7156c37e9..d3ebadaf0 100644",
                "--- a/scalding/src/main/java/org/apache/zeppelin/scalding/ScaldingInterpreter.java",
                "+++ b/scalding/src/main/java/org/apache/zeppelin/scalding/ScaldingInterpreter.java",
                "@@ -71,3 +71,3 @@ public class ScaldingInterpreter extends Interpreter {",
                "     numOpenInstances = numOpenInstances + 1;",
                "-    String maxOpenInstancesStr = property.getProperty(MAX_OPEN_INSTANCES,",
                "+    String maxOpenInstancesStr = getProperty(MAX_OPEN_INSTANCES,",
                "             MAX_OPEN_INSTANCES_DEFAULT);",
                "@@ -85,4 +85,4 @@ public class ScaldingInterpreter extends Interpreter {",
                "     logger.info(\"Opening instance {}\", numOpenInstances);",
                "-    logger.info(\"property: {}\", property);",
                "-    String argsString = property.getProperty(ARGS_STRING, ARGS_STRING_DEFAULT);",
                "+    logger.info(\"property: {}\", getProperties());",
                "+    String argsString = getProperty(ARGS_STRING, ARGS_STRING_DEFAULT);",
                "     String[] args;",
                "@@ -123,3 +123,3 @@ public class ScaldingInterpreter extends Interpreter {",
                "     InterpreterResult interpreterResult = new InterpreterResult(Code.ERROR);",
                "-    if (property.getProperty(ARGS_STRING).contains(\"hdfs\")) {",
                "+    if (getProperty(ARGS_STRING).contains(\"hdfs\")) {",
                "       UserGroupInformation ugi = null;",
                "diff --git a/shell/src/main/java/org/apache/zeppelin/shell/ShellInterpreter.java b/shell/src/main/java/org/apache/zeppelin/shell/ShellInterpreter.java",
                "index dbae6c9bf..b7c0043dd 100644",
                "--- a/shell/src/main/java/org/apache/zeppelin/shell/ShellInterpreter.java",
                "+++ b/shell/src/main/java/org/apache/zeppelin/shell/ShellInterpreter.java",
                "@@ -176,4 +176,4 @@ public class ShellInterpreter extends KerberosInterpreter {",
                "-  public void createSecureConfiguration() {",
                "-    Properties properties = getProperty();",
                "+  public void createSecureConfiguration() throws InterpreterException {",
                "+    Properties properties = getProperties();",
                "     CommandLine cmdLine = CommandLine.parse(shell);",
                "diff --git a/spark/src/main/java/org/apache/zeppelin/spark/IPySparkInterpreter.java b/spark/src/main/java/org/apache/zeppelin/spark/IPySparkInterpreter.java",
                "index 56b3823b5..a0505692d 100644",
                "--- a/spark/src/main/java/org/apache/zeppelin/spark/IPySparkInterpreter.java",
                "+++ b/spark/src/main/java/org/apache/zeppelin/spark/IPySparkInterpreter.java",
                "@@ -23,2 +23,3 @@ import org.apache.zeppelin.interpreter.Interpreter;",
                " import org.apache.zeppelin.interpreter.InterpreterContext;",
                "+import org.apache.zeppelin.interpreter.InterpreterException;",
                " import org.apache.zeppelin.interpreter.LazyOpenInterpreter;",
                "@@ -29,2 +30,4 @@ import org.slf4j.LoggerFactory;",
                "+import java.io.IOException;",
                "+import java.util.Map;",
                " import java.util.Properties;",
                "@@ -45,4 +48,5 @@ public class IPySparkInterpreter extends IPythonInterpreter {",
                "   @Override",
                "-  public void open() {",
                "-    property.setProperty(\"zeppelin.python\", PySparkInterpreter.getPythonExec(property));",
                "+  public void open() throws InterpreterException {",
                "+    setProperty(\"zeppelin.python\",",
                "+        PySparkInterpreter.getPythonExec(getProperties()));",
                "     sparkInterpreter = getSparkInterpreter();",
                "@@ -59,3 +63,14 @@ public class IPySparkInterpreter extends IPythonInterpreter {",
                "-  private SparkInterpreter getSparkInterpreter() {",
                "+  @Override",
                "+  protected Map<String, String> setupIPythonEnv() throws IOException {",
                "+    Map<String, String> env = super.setupIPythonEnv();",
                "+    // set PYSPARK_PYTHON",
                "+    SparkConf conf = sparkInterpreter.getSparkContext().getConf();",
                "+    if (conf.contains(\"spark.pyspark.python\")) {",
                "+      env.put(\"PYSPARK_PYTHON\", conf.get(\"spark.pyspark.python\"));",
                "+    }",
                "+    return env;",
                "+  }",
                "+",
                "+  private SparkInterpreter getSparkInterpreter() throws InterpreterException {",
                "     LazyOpenInterpreter lazy = null;",
                "diff --git a/spark/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java b/spark/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java",
                "index dd32059a2..5df4ec6b0 100644",
                "--- a/spark/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java",
                "+++ b/spark/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java",
                "@@ -88,3 +88,3 @@ public class PySparkInterpreter extends Interpreter implements ExecuteResultHand",
                "     } catch (IOException e) {",
                "-      throw new InterpreterException(e);",
                "+      throw new RuntimeException(e);",
                "     }",
                "@@ -92,3 +92,3 @@ public class PySparkInterpreter extends Interpreter implements ExecuteResultHand",
                "-  private void createPythonScript() {",
                "+  private void createPythonScript() throws InterpreterException {",
                "     ClassLoader classLoader = getClass().getClassLoader();",
                "@@ -114,6 +114,6 @@ public class PySparkInterpreter extends Interpreter implements ExecuteResultHand",
                "   @Override",
                "-  public void open() {",
                "+  public void open() throws InterpreterException {",
                "     // try IPySparkInterpreter first",
                "     iPySparkInterpreter = getIPySparkInterpreter();",
                "-    if (property.getProperty(\"zeppelin.pyspark.useIPython\", \"true\").equals(\"true\") &&",
                "+    if (getProperty(\"zeppelin.pyspark.useIPython\", \"true\").equals(\"true\") &&",
                "         iPySparkInterpreter.checkIPythonPrerequisite()) {",
                "@@ -134,4 +134,3 @@ public class PySparkInterpreter extends Interpreter implements ExecuteResultHand",
                "     iPySparkInterpreter = null;",
                "-",
                "-    if (property.getProperty(\"zeppelin.pyspark.useIPython\", \"true\").equals(\"true\")) {",
                "+    if (getProperty(\"zeppelin.pyspark.useIPython\", \"true\").equals(\"true\")) {",
                "       // don't print it when it is in testing, just for easy output check in test.",
                "@@ -204,3 +203,3 @@ public class PySparkInterpreter extends Interpreter implements ExecuteResultHand",
                "-  private Map setupPySparkEnv() throws IOException {",
                "+  private Map setupPySparkEnv() throws IOException, InterpreterException {",
                "     Map env = EnvironmentUtils.getProcEnvironment();",
                "@@ -231,2 +230,7 @@ public class PySparkInterpreter extends Interpreter implements ExecuteResultHand",
                "     LOGGER.info(\"PYTHONPATH: \" + env.get(\"PYTHONPATH\"));",
                "+",
                "+    // set PYSPARK_PYTHON",
                "+    if (getSparkConf().contains(\"spark.pyspark.python\")) {",
                "+      env.put(\"PYSPARK_PYTHON\", getSparkConf().get(\"spark.pyspark.python\"));",
                "+    }",
                "     return env;",
                "@@ -248,3 +252,3 @@ public class PySparkInterpreter extends Interpreter implements ExecuteResultHand",
                "-  private void createGatewayServerAndStartScript() {",
                "+  private void createGatewayServerAndStartScript() throws InterpreterException {",
                "     // create python script",
                "@@ -257,3 +261,3 @@ public class PySparkInterpreter extends Interpreter implements ExecuteResultHand",
                "-    String pythonExec = getPythonExec(property);",
                "+    String pythonExec = getPythonExec(getProperties());",
                "     LOGGER.info(\"pythonExec: \" + pythonExec);",
                "@@ -297,3 +301,3 @@ public class PySparkInterpreter extends Interpreter implements ExecuteResultHand",
                "-  private int findRandomOpenPortOnAllLocalInterfaces() {",
                "+  private int findRandomOpenPortOnAllLocalInterfaces() throws InterpreterException {",
                "     int port;",
                "@@ -396,3 +400,4 @@ public class PySparkInterpreter extends Interpreter implements ExecuteResultHand",
                "   @Override",
                "-  public InterpreterResult interpret(String st, InterpreterContext context) {",
                "+  public InterpreterResult interpret(String st, InterpreterContext context)",
                "+      throws InterpreterException {",
                "     SparkInterpreter sparkInterpreter = getSparkInterpreter();",
                "@@ -502,3 +507,3 @@ public class PySparkInterpreter extends Interpreter implements ExecuteResultHand",
                "   @Override",
                "-  public void cancel(InterpreterContext context) {",
                "+  public void cancel(InterpreterContext context) throws InterpreterException {",
                "     if (iPySparkInterpreter != null) {",
                "@@ -522,3 +527,3 @@ public class PySparkInterpreter extends Interpreter implements ExecuteResultHand",
                "   @Override",
                "-  public int getProgress(InterpreterContext context) {",
                "+  public int getProgress(InterpreterContext context) throws InterpreterException {",
                "     if (iPySparkInterpreter != null) {",
                "@@ -533,3 +538,3 @@ public class PySparkInterpreter extends Interpreter implements ExecuteResultHand",
                "   public List<InterpreterCompletion> completion(String buf, int cursor,",
                "-      InterpreterContext interpreterContext) {",
                "+      InterpreterContext interpreterContext) throws InterpreterException {",
                "     if (iPySparkInterpreter != null) {",
                "@@ -634,3 +639,3 @@ public class PySparkInterpreter extends Interpreter implements ExecuteResultHand",
                "-  private SparkInterpreter getSparkInterpreter() {",
                "+  private SparkInterpreter getSparkInterpreter() throws InterpreterException {",
                "     LazyOpenInterpreter lazy = null;",
                "@@ -668,3 +673,3 @@ public class PySparkInterpreter extends Interpreter implements ExecuteResultHand",
                "-  public SparkZeppelinContext getZeppelinContext() {",
                "+  public SparkZeppelinContext getZeppelinContext() throws InterpreterException {",
                "     SparkInterpreter sparkIntp = getSparkInterpreter();",
                "@@ -677,3 +682,3 @@ public class PySparkInterpreter extends Interpreter implements ExecuteResultHand",
                "-  public JavaSparkContext getJavaSparkContext() {",
                "+  public JavaSparkContext getJavaSparkContext() throws InterpreterException {",
                "     SparkInterpreter intp = getSparkInterpreter();",
                "@@ -686,3 +691,3 @@ public class PySparkInterpreter extends Interpreter implements ExecuteResultHand",
                "-  public Object getSparkSession() {",
                "+  public Object getSparkSession() throws InterpreterException {",
                "     SparkInterpreter intp = getSparkInterpreter();",
                "@@ -695,3 +700,3 @@ public class PySparkInterpreter extends Interpreter implements ExecuteResultHand",
                "-  public SparkConf getSparkConf() {",
                "+  public SparkConf getSparkConf() throws InterpreterException {",
                "     JavaSparkContext sc = getJavaSparkContext();",
                "@@ -704,3 +709,3 @@ public class PySparkInterpreter extends Interpreter implements ExecuteResultHand",
                "-  public SQLContext getSQLContext() {",
                "+  public SQLContext getSQLContext() throws InterpreterException {",
                "     SparkInterpreter intp = getSparkInterpreter();",
                "diff --git a/spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java b/spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java",
                "index 18da0344f..5a5110f9f 100644",
                "--- a/spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java",
                "+++ b/spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java",
                "@@ -355,3 +355,3 @@ public class SparkInterpreter extends Interpreter {",
                "     if (master == null) {",
                "-      master = getProperty().getProperty(\"spark.master\", \"local[*]\");",
                "+      master = getProperty(\"spark.master\", \"local[*]\");",
                "     }",
                "@@ -378,3 +378,3 @@ public class SparkInterpreter extends Interpreter {",
                "-    Properties intpProperty = getProperty();",
                "+    Properties intpProperty = getProperties();",
                "     for (Object k : intpProperty.keySet()) {",
                "@@ -511,3 +511,3 @@ public class SparkInterpreter extends Interpreter {",
                "-    Properties intpProperty = getProperty();",
                "+    Properties intpProperty = getProperties();",
                "     for (Object k : intpProperty.keySet()) {",
                "@@ -545,5 +545,5 @@ public class SparkInterpreter extends Interpreter {",
                "   @Override",
                "-  public void open() {",
                "+  public void open() throws InterpreterException {",
                "     this.enableSupportedVersionCheck = java.lang.Boolean.parseBoolean(",
                "-            property.getProperty(\"zeppelin.spark.enableSupportedVersionCheck\", \"true\"));",
                "+        getProperty(\"zeppelin.spark.enableSupportedVersionCheck\", \"true\"));",
                "@@ -553,7 +553,7 @@ public class SparkInterpreter extends Interpreter {",
                "     }",
                "-    if (getProperty().containsKey(\"spark.yarn.keytab\") &&",
                "-            getProperty().containsKey(\"spark.yarn.principal\")) {",
                "+    if (getProperties().containsKey(\"spark.yarn.keytab\") &&",
                "+            getProperties().containsKey(\"spark.yarn.principal\")) {",
                "       try {",
                "-        String keytab = getProperty().getProperty(\"spark.yarn.keytab\");",
                "-        String principal = getProperty().getProperty(\"spark.yarn.principal\");",
                "+        String keytab = getProperties().getProperty(\"spark.yarn.keytab\");",
                "+        String principal = getProperties().getProperty(\"spark.yarn.principal\");",
                "         UserGroupInformation.loginUserFromKeytab(principal, keytab);",
                "@@ -965,3 +965,3 @@ public class SparkInterpreter extends Interpreter {",
                "     infos.put(\"url\", sparkUrl);",
                "-    String uiEnabledProp = property.getProperty(\"spark.ui.enabled\", \"true\");",
                "+    String uiEnabledProp = getProperty(\"spark.ui.enabled\", \"true\");",
                "     java.lang.Boolean uiEnabled = java.lang.Boolean.parseBoolean(",
                "diff --git a/spark/src/main/java/org/apache/zeppelin/spark/SparkRInterpreter.java b/spark/src/main/java/org/apache/zeppelin/spark/SparkRInterpreter.java",
                "index ca52f790f..1bdd4dc07 100644",
                "--- a/spark/src/main/java/org/apache/zeppelin/spark/SparkRInterpreter.java",
                "+++ b/spark/src/main/java/org/apache/zeppelin/spark/SparkRInterpreter.java",
                "@@ -56,3 +56,3 @@ public class SparkRInterpreter extends Interpreter {",
                "   @Override",
                "-  public void open() {",
                "+  public void open() throws InterpreterException {",
                "     String rCmdPath = getProperty(\"zeppelin.R.cmd\");",
                "@@ -107,3 +107,4 @@ public class SparkRInterpreter extends Interpreter {",
                "   @Override",
                "-  public InterpreterResult interpret(String lines, InterpreterContext interpreterContext) {",
                "+  public InterpreterResult interpret(String lines, InterpreterContext interpreterContext)",
                "+      throws InterpreterException {",
                "@@ -222,3 +223,3 @@ public class SparkRInterpreter extends Interpreter {",
                "-  private SparkInterpreter getSparkInterpreter() {",
                "+  private SparkInterpreter getSparkInterpreter() throws InterpreterException {",
                "     LazyOpenInterpreter lazy = null;",
                "diff --git a/spark/src/main/java/org/apache/zeppelin/spark/SparkSqlInterpreter.java b/spark/src/main/java/org/apache/zeppelin/spark/SparkSqlInterpreter.java",
                "index 134a65f39..9709f9eea 100644",
                "--- a/spark/src/main/java/org/apache/zeppelin/spark/SparkSqlInterpreter.java",
                "+++ b/spark/src/main/java/org/apache/zeppelin/spark/SparkSqlInterpreter.java",
                "@@ -61,3 +61,3 @@ public class SparkSqlInterpreter extends Interpreter {",
                "-  private SparkInterpreter getSparkInterpreter() {",
                "+  private SparkInterpreter getSparkInterpreter() throws InterpreterException {",
                "     LazyOpenInterpreter lazy = null;",
                "@@ -88,3 +88,4 @@ public class SparkSqlInterpreter extends Interpreter {",
                "   @Override",
                "-  public InterpreterResult interpret(String st, InterpreterContext context) {",
                "+  public InterpreterResult interpret(String st, InterpreterContext context)",
                "+      throws InterpreterException {",
                "     SQLContext sqlc = null;",
                "@@ -136,3 +137,3 @@ public class SparkSqlInterpreter extends Interpreter {",
                "   @Override",
                "-  public void cancel(InterpreterContext context) {",
                "+  public void cancel(InterpreterContext context) throws InterpreterException {",
                "     SparkInterpreter sparkInterpreter = getSparkInterpreter();",
                "@@ -151,3 +152,3 @@ public class SparkSqlInterpreter extends Interpreter {",
                "   @Override",
                "-  public int getProgress(InterpreterContext context) {",
                "+  public int getProgress(InterpreterContext context) throws InterpreterException {",
                "     SparkInterpreter sparkInterpreter = getSparkInterpreter();",
                "diff --git a/spark/src/main/java/org/apache/zeppelin/spark/SparkZeppelinContext.java b/spark/src/main/java/org/apache/zeppelin/spark/SparkZeppelinContext.java",
                "index 413c69071..09b8d440c 100644",
                "--- a/spark/src/main/java/org/apache/zeppelin/spark/SparkZeppelinContext.java",
                "+++ b/spark/src/main/java/org/apache/zeppelin/spark/SparkZeppelinContext.java",
                "@@ -81,3 +81,3 @@ public class SparkZeppelinContext extends BaseZeppelinContext {",
                "     if (supportedClasses.isEmpty()) {",
                "-      throw new InterpreterException(\"Can not load Dataset/DataFrame/SchemaRDD class\");",
                "+      throw new RuntimeException(\"Can not load Dataset/DataFrame/SchemaRDD class\");",
                "     }",
                "@@ -114,3 +114,3 @@ public class SparkZeppelinContext extends BaseZeppelinContext {",
                "       sc.clearJobGroup();",
                "-      throw new InterpreterException(e);",
                "+      throw new RuntimeException(e);",
                "     }",
                "@@ -131,3 +131,3 @@ public class SparkZeppelinContext extends BaseZeppelinContext {",
                "         | IllegalArgumentException | InvocationTargetException e) {",
                "-      throw new InterpreterException(e);",
                "+      throw new RuntimeException(e);",
                "     }",
                "@@ -167,3 +167,3 @@ public class SparkZeppelinContext extends BaseZeppelinContext {",
                "         | IllegalArgumentException | InvocationTargetException e) {",
                "-      throw new InterpreterException(e);",
                "+      throw new RuntimeException(e);",
                "     }",
                "diff --git a/spark/src/main/java/org/apache/zeppelin/spark/ZeppelinR.java b/spark/src/main/java/org/apache/zeppelin/spark/ZeppelinR.java",
                "index b46001aa0..130d84997 100644",
                "--- a/spark/src/main/java/org/apache/zeppelin/spark/ZeppelinR.java",
                "+++ b/spark/src/main/java/org/apache/zeppelin/spark/ZeppelinR.java",
                "@@ -119,3 +119,3 @@ public class ZeppelinR implements ExecuteResultHandler {",
                "     } catch (IOException e) {",
                "-      throw new InterpreterException(e);",
                "+      throw new RuntimeException(e);",
                "     }",
                "@@ -127,3 +127,3 @@ public class ZeppelinR implements ExecuteResultHandler {",
                "    */",
                "-  public void open() throws IOException {",
                "+  public void open() throws IOException, InterpreterException {",
                "     createRScript();",
                "@@ -172,3 +172,3 @@ public class ZeppelinR implements ExecuteResultHandler {",
                "    */",
                "-  public Object eval(String expr) {",
                "+  public Object eval(String expr) throws InterpreterException {",
                "     synchronized (this) {",
                "@@ -184,3 +184,3 @@ public class ZeppelinR implements ExecuteResultHandler {",
                "    */",
                "-  public void set(String key, Object value) {",
                "+  public void set(String key, Object value) throws InterpreterException {",
                "     synchronized (this) {",
                "@@ -196,3 +196,3 @@ public class ZeppelinR implements ExecuteResultHandler {",
                "    */",
                "-  public Object get(String key) {",
                "+  public Object get(String key) throws InterpreterException {",
                "     synchronized (this) {",
                "@@ -208,3 +208,3 @@ public class ZeppelinR implements ExecuteResultHandler {",
                "    */",
                "-  public String getS0(String key) {",
                "+  public String getS0(String key) throws InterpreterException {",
                "     synchronized (this) {",
                "@@ -219,3 +219,3 @@ public class ZeppelinR implements ExecuteResultHandler {",
                "    */",
                "-  private Object request() throws RuntimeException {",
                "+  private Object request() throws RuntimeException, InterpreterException {",
                "     if (!rScriptRunning) {",
                "@@ -334,3 +334,3 @@ public class ZeppelinR implements ExecuteResultHandler {",
                "    */",
                "-  private void createRScript() {",
                "+  private void createRScript() throws InterpreterException {",
                "     ClassLoader classLoader = getClass().getClassLoader();",
                "diff --git a/zeppelin-interpreter/pom.xml b/zeppelin-interpreter/pom.xml",
                "index 00184dacf..3bb50c732 100644",
                "--- a/zeppelin-interpreter/pom.xml",
                "+++ b/zeppelin-interpreter/pom.xml",
                "@@ -68,2 +68,7 @@",
                "+    <dependency>",
                "+      <groupId>commons-configuration</groupId>",
                "+      <artifactId>commons-configuration</artifactId>",
                "+    </dependency>",
                "+",
                "     <dependency>",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "new file mode 100644",
                "index 000000000..3a82bc589",
                "--- /dev/null",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "@@ -0,0 +1,847 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.conf;",
                "+",
                "+import org.apache.commons.configuration.ConfigurationException;",
                "+import org.apache.commons.configuration.XMLConfiguration;",
                "+import org.apache.commons.configuration.tree.ConfigurationNode;",
                "+import org.apache.commons.lang.StringUtils;",
                "+import org.apache.zeppelin.util.Util;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+import java.io.File;",
                "+import java.net.URL;",
                "+import java.util.Arrays;",
                "+import java.util.HashMap;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+",
                "+/**",
                "+ * Zeppelin configuration.",
                "+ *",
                "+ */",
                "+public class ZeppelinConfiguration extends XMLConfiguration {",
                "+  private static final String ZEPPELIN_SITE_XML = \"zeppelin-site.xml\";",
                "+  private static final long serialVersionUID = 4749305895693848035L;",
                "+  private static final Logger LOG = LoggerFactory.getLogger(ZeppelinConfiguration.class);",
                "+",
                "+  private static final String HELIUM_PACKAGE_DEFAULT_URL =",
                "+      \"https://s3.amazonaws.com/helium-package/helium.json\";",
                "+  private static ZeppelinConfiguration conf;",
                "+",
                "+  public ZeppelinConfiguration(URL url) throws ConfigurationException {",
                "+    setDelimiterParsingDisabled(true);",
                "+    load(url);",
                "+  }",
                "+",
                "+  public ZeppelinConfiguration() {",
                "+    ConfVars[] vars = ConfVars.values();",
                "+    for (ConfVars v : vars) {",
                "+      if (v.getType() == ConfVars.VarType.BOOLEAN) {",
                "+        this.setProperty(v.getVarName(), v.getBooleanValue());",
                "+      } else if (v.getType() == ConfVars.VarType.LONG) {",
                "+        this.setProperty(v.getVarName(), v.getLongValue());",
                "+      } else if (v.getType() == ConfVars.VarType.INT) {",
                "+        this.setProperty(v.getVarName(), v.getIntValue());",
                "+      } else if (v.getType() == ConfVars.VarType.FLOAT) {",
                "+        this.setProperty(v.getVarName(), v.getFloatValue());",
                "+      } else if (v.getType() == ConfVars.VarType.STRING) {",
                "+        this.setProperty(v.getVarName(), v.getStringValue());",
                "+      } else {",
                "+        throw new RuntimeException(\"Unsupported VarType\");",
                "+      }",
                "+    }",
                "+",
                "+  }",
                "+",
                "+",
                "+  /**",
                "+   * Load from resource.",
                "+   *url = ZeppelinConfiguration.class.getResource(ZEPPELIN_SITE_XML);",
                "+   * @throws ConfigurationException",
                "+   */",
                "+  public static synchronized ZeppelinConfiguration create() {",
                "+    if (conf != null) {",
                "+      return conf;",
                "+    }",
                "+",
                "+    ClassLoader classLoader = Thread.currentThread().getContextClassLoader();",
                "+    URL url;",
                "+",
                "+    url = ZeppelinConfiguration.class.getResource(ZEPPELIN_SITE_XML);",
                "+    if (url == null) {",
                "+      ClassLoader cl = ZeppelinConfiguration.class.getClassLoader();",
                "+      if (cl != null) {",
                "+        url = cl.getResource(ZEPPELIN_SITE_XML);",
                "+      }",
                "+    }",
                "+    if (url == null) {",
                "+      url = classLoader.getResource(ZEPPELIN_SITE_XML);",
                "+    }",
                "+",
                "+    if (url == null) {",
                "+      LOG.warn(\"Failed to load configuration, proceeding with a default\");",
                "+      conf = new ZeppelinConfiguration();",
                "+    } else {",
                "+      try {",
                "+        LOG.info(\"Load configuration from \" + url);",
                "+        conf = new ZeppelinConfiguration(url);",
                "+      } catch (ConfigurationException e) {",
                "+        LOG.warn(\"Failed to load configuration from \" + url + \" proceeding with a default\", e);",
                "+        conf = new ZeppelinConfiguration();",
                "+      }",
                "+    }",
                "+",
                "+    LOG.info(\"Server Host: \" + conf.getServerAddress());",
                "+    if (conf.useSsl() == false) {",
                "+      LOG.info(\"Server Port: \" + conf.getServerPort());",
                "+    } else {",
                "+      LOG.info(\"Server SSL Port: \" + conf.getServerSslPort());",
                "+    }",
                "+    LOG.info(\"Context Path: \" + conf.getServerContextPath());",
                "+    LOG.info(\"Zeppelin Version: \" + Util.getVersion());",
                "+",
                "+    return conf;",
                "+  }",
                "+",
                "+",
                "+  private String getStringValue(String name, String d) {",
                "+    List<ConfigurationNode> properties = getRootNode().getChildren();",
                "+    if (properties == null || properties.isEmpty()) {",
                "+      return d;",
                "+    }",
                "+    for (ConfigurationNode p : properties) {",
                "+      if (p.getChildren(\"name\") != null && !p.getChildren(\"name\").isEmpty()",
                "+          && name.equals(p.getChildren(\"name\").get(0).getValue())) {",
                "+        return (String) p.getChildren(\"value\").get(0).getValue();",
                "+      }",
                "+    }",
                "+    return d;",
                "+  }",
                "+",
                "+  private int getIntValue(String name, int d) {",
                "+    List<ConfigurationNode> properties = getRootNode().getChildren();",
                "+    if (properties == null || properties.isEmpty()) {",
                "+      return d;",
                "+    }",
                "+    for (ConfigurationNode p : properties) {",
                "+      if (p.getChildren(\"name\") != null && !p.getChildren(\"name\").isEmpty()",
                "+          && name.equals(p.getChildren(\"name\").get(0).getValue())) {",
                "+        return Integer.parseInt((String) p.getChildren(\"value\").get(0).getValue());",
                "+      }",
                "+    }",
                "+    return d;",
                "+  }",
                "+",
                "+  private long getLongValue(String name, long d) {",
                "+    List<ConfigurationNode> properties = getRootNode().getChildren();",
                "+    if (properties == null || properties.isEmpty()) {",
                "+      return d;",
                "+    }",
                "+    for (ConfigurationNode p : properties) {",
                "+      if (p.getChildren(\"name\") != null && !p.getChildren(\"name\").isEmpty()",
                "+          && name.equals(p.getChildren(\"name\").get(0).getValue())) {",
                "+        return Long.parseLong((String) p.getChildren(\"value\").get(0).getValue());",
                "+      }",
                "+    }",
                "+    return d;",
                "+  }",
                "+",
                "+  private float getFloatValue(String name, float d) {",
                "+    List<ConfigurationNode> properties = getRootNode().getChildren();",
                "+    if (properties == null || properties.isEmpty()) {",
                "+      return d;",
                "+    }",
                "+    for (ConfigurationNode p : properties) {",
                "+      if (p.getChildren(\"name\") != null && !p.getChildren(\"name\").isEmpty()",
                "+          && name.equals(p.getChildren(\"name\").get(0).getValue())) {",
                "+        return Float.parseFloat((String) p.getChildren(\"value\").get(0).getValue());",
                "+      }",
                "+    }",
                "+    return d;",
                "+  }",
                "+",
                "+  private boolean getBooleanValue(String name, boolean d) {",
                "+    List<ConfigurationNode> properties = getRootNode().getChildren();",
                "+    if (properties == null || properties.isEmpty()) {",
                "+      return d;",
                "+    }",
                "+    for (ConfigurationNode p : properties) {",
                "+      if (p.getChildren(\"name\") != null && !p.getChildren(\"name\").isEmpty()",
                "+          && name.equals(p.getChildren(\"name\").get(0).getValue())) {",
                "+        return Boolean.parseBoolean((String) p.getChildren(\"value\").get(0).getValue());",
                "+      }",
                "+    }",
                "+    return d;",
                "+  }",
                "+",
                "+  public String getString(ConfVars c) {",
                "+    return getString(c.name(), c.getVarName(), c.getStringValue());",
                "+  }",
                "+",
                "+  public String getString(String envName, String propertyName, String defaultValue) {",
                "+    if (System.getenv(envName) != null) {",
                "+      return System.getenv(envName);",
                "+    }",
                "+    if (System.getProperty(propertyName) != null) {",
                "+      return System.getProperty(propertyName);",
                "+    }",
                "+",
                "+    return getStringValue(propertyName, defaultValue);",
                "+  }",
                "+",
                "+  public int getInt(ConfVars c) {",
                "+    return getInt(c.name(), c.getVarName(), c.getIntValue());",
                "+  }",
                "+",
                "+  public int getInt(String envName, String propertyName, int defaultValue) {",
                "+    if (System.getenv(envName) != null) {",
                "+      return Integer.parseInt(System.getenv(envName));",
                "+    }",
                "+",
                "+    if (System.getProperty(propertyName) != null) {",
                "+      return Integer.parseInt(System.getProperty(propertyName));",
                "+    }",
                "+    return getIntValue(propertyName, defaultValue);",
                "+  }",
                "+",
                "+  public long getLong(ConfVars c) {",
                "+    return getLong(c.name(), c.getVarName(), c.getLongValue());",
                "+  }",
                "+",
                "+  public long getLong(String envName, String propertyName, long defaultValue) {",
                "+    if (System.getenv(envName) != null) {",
                "+      return Long.parseLong(System.getenv(envName));",
                "+    }",
                "+",
                "+    if (System.getProperty(propertyName) != null) {",
                "+      return Long.parseLong(System.getProperty(propertyName));",
                "+    }",
                "+    return getLongValue(propertyName, defaultValue);",
                "+  }",
                "+",
                "+  public float getFloat(ConfVars c) {",
                "+    return getFloat(c.name(), c.getVarName(), c.getFloatValue());",
                "+  }",
                "+",
                "+  public float getFloat(String envName, String propertyName, float defaultValue) {",
                "+    if (System.getenv(envName) != null) {",
                "+      return Float.parseFloat(System.getenv(envName));",
                "+    }",
                "+    if (System.getProperty(propertyName) != null) {",
                "+      return Float.parseFloat(System.getProperty(propertyName));",
                "+    }",
                "+    return getFloatValue(propertyName, defaultValue);",
                "+  }",
                "+",
                "+  public boolean getBoolean(ConfVars c) {",
                "+    return getBoolean(c.name(), c.getVarName(), c.getBooleanValue());",
                "+  }",
                "+",
                "+  public boolean getBoolean(String envName, String propertyName, boolean defaultValue) {",
                "+    if (System.getenv(envName) != null) {",
                "+      return Boolean.parseBoolean(System.getenv(envName));",
                "+    }",
                "+",
                "+    if (System.getProperty(propertyName) != null) {",
                "+      return Boolean.parseBoolean(System.getProperty(propertyName));",
                "+    }",
                "+    return getBooleanValue(propertyName, defaultValue);",
                "+  }",
                "+",
                "+  public boolean useSsl() {",
                "+    return getBoolean(ConfVars.ZEPPELIN_SSL);",
                "+  }",
                "+",
                "+  public int getServerSslPort() {",
                "+    return getInt(ConfVars.ZEPPELIN_SSL_PORT);",
                "+  }",
                "+",
                "+  public boolean useClientAuth() {",
                "+    return getBoolean(ConfVars.ZEPPELIN_SSL_CLIENT_AUTH);",
                "+  }",
                "+",
                "+  public String getServerAddress() {",
                "+    return getString(ConfVars.ZEPPELIN_ADDR);",
                "+  }",
                "+",
                "+  public int getServerPort() {",
                "+    return getInt(ConfVars.ZEPPELIN_PORT);",
                "+  }",
                "+",
                "+  public String getServerContextPath() {",
                "+    return getString(ConfVars.ZEPPELIN_SERVER_CONTEXT_PATH);",
                "+  }",
                "+",
                "+  public String getKeyStorePath() {",
                "+    String path = getString(ConfVars.ZEPPELIN_SSL_KEYSTORE_PATH);",
                "+    if (path != null && path.startsWith(\"/\") || isWindowsPath(path)) {",
                "+      return path;",
                "+    } else {",
                "+      return getRelativeDir(",
                "+          String.format(\"%s/%s\",",
                "+              getConfDir(),",
                "+              path));",
                "+    }",
                "+  }",
                "+",
                "+  public String getKeyStoreType() {",
                "+    return getString(ConfVars.ZEPPELIN_SSL_KEYSTORE_TYPE);",
                "+  }",
                "+",
                "+  public String getKeyStorePassword() {",
                "+    return getString(ConfVars.ZEPPELIN_SSL_KEYSTORE_PASSWORD);",
                "+  }",
                "+",
                "+  public String getKeyManagerPassword() {",
                "+    String password = getString(ConfVars.ZEPPELIN_SSL_KEY_MANAGER_PASSWORD);",
                "+    if (password == null) {",
                "+      return getKeyStorePassword();",
                "+    } else {",
                "+      return password;",
                "+    }",
                "+  }",
                "+",
                "+  public String getTrustStorePath() {",
                "+    String path = getString(ConfVars.ZEPPELIN_SSL_TRUSTSTORE_PATH);",
                "+    if (path == null) {",
                "+      path = getKeyStorePath();",
                "+    }",
                "+    if (path != null && path.startsWith(\"/\") || isWindowsPath(path)) {",
                "+      return path;",
                "+    } else {",
                "+      return getRelativeDir(",
                "+          String.format(\"%s/%s\",",
                "+              getConfDir(),",
                "+              path));",
                "+    }",
                "+  }",
                "+",
                "+  public String getTrustStoreType() {",
                "+    String type = getString(ConfVars.ZEPPELIN_SSL_TRUSTSTORE_TYPE);",
                "+    if (type == null) {",
                "+      return getKeyStoreType();",
                "+    } else {",
                "+      return type;",
                "+    }",
                "+  }",
                "+",
                "+  public String getTrustStorePassword() {",
                "+    String password = getString(ConfVars.ZEPPELIN_SSL_TRUSTSTORE_PASSWORD);",
                "+    if (password == null) {",
                "+      return getKeyStorePassword();",
                "+    } else {",
                "+      return password;",
                "+    }",
                "+  }",
                "+",
                "+  public String getNotebookDir() {",
                "+    return getString(ConfVars.ZEPPELIN_NOTEBOOK_DIR);",
                "+  }",
                "+",
                "+  public String getUser() {",
                "+    return getString(ConfVars.ZEPPELIN_NOTEBOOK_S3_USER);",
                "+  }",
                "+",
                "+  public String getBucketName() {",
                "+    return getString(ConfVars.ZEPPELIN_NOTEBOOK_S3_BUCKET);",
                "+  }",
                "+",
                "+  public String getEndpoint() {",
                "+    return getString(ConfVars.ZEPPELIN_NOTEBOOK_S3_ENDPOINT);",
                "+  }",
                "+",
                "+  public String getS3KMSKeyID() {",
                "+    return getString(ConfVars.ZEPPELIN_NOTEBOOK_S3_KMS_KEY_ID);",
                "+  }",
                "+",
                "+  public String getS3KMSKeyRegion() {",
                "+    return getString(ConfVars.ZEPPELIN_NOTEBOOK_S3_KMS_KEY_REGION);",
                "+  }",
                "+",
                "+  public String getS3EncryptionMaterialsProviderClass() {",
                "+    return getString(ConfVars.ZEPPELIN_NOTEBOOK_S3_EMP);",
                "+  }",
                "+",
                "+  public boolean isS3ServerSideEncryption() {",
                "+    return getBoolean(ConfVars.ZEPPELIN_NOTEBOOK_S3_SSE);",
                "+  }",
                "+",
                "+  public String getMongoUri() {",
                "+    return getString(ConfVars.ZEPPELIN_NOTEBOOK_MONGO_URI);",
                "+  }",
                "+",
                "+  public String getMongoDatabase() {",
                "+    return getString(ConfVars.ZEPPELIN_NOTEBOOK_MONGO_DATABASE);",
                "+  }",
                "+",
                "+  public String getMongoCollection() {",
                "+    return getString(ConfVars.ZEPPELIN_NOTEBOOK_MONGO_COLLECTION);",
                "+  }",
                "+",
                "+  public boolean getMongoAutoimport() {",
                "+    return getBoolean(ConfVars.ZEPPELIN_NOTEBOOK_MONGO_AUTOIMPORT);",
                "+  }",
                "+",
                "+  public String getInterpreterListPath() {",
                "+    return getRelativeDir(String.format(\"%s/interpreter-list\", getConfDir()));",
                "+  }",
                "+",
                "+  public String getInterpreterDir() {",
                "+    return getRelativeDir(ConfVars.ZEPPELIN_INTERPRETER_DIR);",
                "+  }",
                "+",
                "+  public String getInterpreterJson() {",
                "+    return getString(ConfVars.ZEPPELIN_INTERPRETER_JSON);",
                "+  }",
                "+",
                "+  public String getInterpreterSettingPath() {",
                "+    return getRelativeDir(String.format(\"%s/interpreter.json\", getConfDir()));",
                "+  }",
                "+",
                "+  public String getHeliumConfPath() {",
                "+    return getRelativeDir(String.format(\"%s/helium.json\", getConfDir()));",
                "+  }",
                "+",
                "+  public String getHeliumRegistry() {",
                "+    return getRelativeDir(ConfVars.ZEPPELIN_HELIUM_REGISTRY);",
                "+  }",
                "+",
                "+  public String getHeliumNodeInstallerUrl() {",
                "+    return getString(ConfVars.ZEPPELIN_HELIUM_NODE_INSTALLER_URL);",
                "+  }",
                "+",
                "+  public String getHeliumNpmInstallerUrl() {",
                "+    return getString(ConfVars.ZEPPELIN_HELIUM_NPM_INSTALLER_URL);",
                "+  }",
                "+",
                "+  public String getHeliumYarnInstallerUrl() {",
                "+    return getString(ConfVars.ZEPPELIN_HELIUM_YARNPKG_INSTALLER_URL);",
                "+  }",
                "+",
                "+  public String getNotebookAuthorizationPath() {",
                "+    return getRelativeDir(String.format(\"%s/notebook-authorization.json\", getConfDir()));",
                "+  }",
                "+",
                "+  public Boolean credentialsPersist() {",
                "+    return getBoolean(ConfVars.ZEPPELIN_CREDENTIALS_PERSIST);",
                "+  }",
                "+",
                "+  public String getCredentialsEncryptKey() {",
                "+    return getString(ConfVars.ZEPPELIN_CREDENTIALS_ENCRYPT_KEY);",
                "+  }",
                "+",
                "+  public String getCredentialsPath() {",
                "+    return getRelativeDir(String.format(\"%s/credentials.json\", getConfDir()));",
                "+  }",
                "+",
                "+  public String getShiroPath() {",
                "+    String shiroPath = getRelativeDir(String.format(\"%s/shiro.ini\", getConfDir()));",
                "+    return new File(shiroPath).exists() ? shiroPath : StringUtils.EMPTY;",
                "+  }",
                "+",
                "+  public String getInterpreterRemoteRunnerPath() {",
                "+    return getRelativeDir(ConfVars.ZEPPELIN_INTERPRETER_REMOTE_RUNNER);",
                "+  }",
                "+",
                "+  public String getInterpreterLocalRepoPath() {",
                "+    return getRelativeDir(ConfVars.ZEPPELIN_INTERPRETER_LOCALREPO);",
                "+  }",
                "+",
                "+  public String getInterpreterMvnRepoPath() {",
                "+    return getString(ConfVars.ZEPPELIN_INTERPRETER_DEP_MVNREPO);",
                "+  }",
                "+",
                "+  public String getRelativeDir(ConfVars c) {",
                "+    return getRelativeDir(getString(c));",
                "+  }",
                "+",
                "+  public String getRelativeDir(String path) {",
                "+    if (path != null && path.startsWith(\"/\") || isWindowsPath(path)) {",
                "+      return path;",
                "+    } else {",
                "+      return getString(ConfVars.ZEPPELIN_HOME) + \"/\" + path;",
                "+    }",
                "+  }",
                "+",
                "+  public String getCallbackPortRange() {",
                "+    return getString(ConfVars.ZEPPELIN_INTERPRETER_CALLBACK_PORTRANGE);",
                "+  }",
                "+",
                "+  public boolean isWindowsPath(String path){",
                "+    return path.matches(\"^[A-Za-z]:\\\\\\\\.*\");",
                "+  }",
                "+",
                "+  public boolean isAnonymousAllowed() {",
                "+    return getBoolean(ConfVars.ZEPPELIN_ANONYMOUS_ALLOWED);",
                "+  }",
                "+",
                "+  public boolean isNotebokPublic() {",
                "+    return getBoolean(ConfVars.ZEPPELIN_NOTEBOOK_PUBLIC);",
                "+  }",
                "+",
                "+  public String getConfDir() {",
                "+    return getRelativeDir(ConfVars.ZEPPELIN_CONF_DIR);",
                "+  }",
                "+",
                "+  public List<String> getAllowedOrigins()",
                "+  {",
                "+    if (getString(ConfVars.ZEPPELIN_ALLOWED_ORIGINS).isEmpty()) {",
                "+      return Arrays.asList(new String[0]);",
                "+    }",
                "+",
                "+    return Arrays.asList(getString(ConfVars.ZEPPELIN_ALLOWED_ORIGINS).toLowerCase().split(\",\"));",
                "+  }",
                "+",
                "+  public String getWebsocketMaxTextMessageSize() {",
                "+    return getString(ConfVars.ZEPPELIN_WEBSOCKET_MAX_TEXT_MESSAGE_SIZE);",
                "+  }",
                "+",
                "+  public String getJettyName() {",
                "+    return getString(ConfVars.ZEPPELIN_SERVER_JETTY_NAME);",
                "+  }",
                "+",
                "+",
                "+  public String getXFrameOptions() {",
                "+    return getString(ConfVars.ZEPPELIN_SERVER_XFRAME_OPTIONS);",
                "+  }",
                "+",
                "+  public String getXxssProtection() {",
                "+    return getString(ConfVars.ZEPPELIN_SERVER_X_XSS_PROTECTION);",
                "+  }",
                "+",
                "+  public String getStrictTransport() {",
                "+    return getString(ConfVars.ZEPPELIN_SERVER_STRICT_TRANSPORT);",
                "+  }",
                "+",
                "+",
                "+  public Map<String, String> dumpConfigurations(ZeppelinConfiguration conf,",
                "+                                                ConfigurationKeyPredicate predicate) {",
                "+    Map<String, String> configurations = new HashMap<>();",
                "+",
                "+    for (ConfVars v : ConfVars.values()) {",
                "+      String key = v.getVarName();",
                "+",
                "+      if (!predicate.apply(key)) {",
                "+        continue;",
                "+      }",
                "+",
                "+      ConfVars.VarType type = v.getType();",
                "+      Object value = null;",
                "+      if (type == ConfVars.VarType.BOOLEAN) {",
                "+        value = conf.getBoolean(v);",
                "+      } else if (type == ConfVars.VarType.LONG) {",
                "+        value = conf.getLong(v);",
                "+      } else if (type == ConfVars.VarType.INT) {",
                "+        value = conf.getInt(v);",
                "+      } else if (type == ConfVars.VarType.FLOAT) {",
                "+        value = conf.getFloat(v);",
                "+      } else if (type == ConfVars.VarType.STRING) {",
                "+        value = conf.getString(v);",
                "+      }",
                "+",
                "+      if (value != null) {",
                "+        configurations.put(key, value.toString());",
                "+      }",
                "+    }",
                "+    return configurations;",
                "+  }",
                "+",
                "+  /**",
                "+   * Predication whether key/value pair should be included or not",
                "+   */",
                "+  public interface ConfigurationKeyPredicate {",
                "+    boolean apply(String key);",
                "+  }",
                "+",
                "+  /**",
                "+   * Wrapper class.",
                "+   */",
                "+  public static enum ConfVars {",
                "+    ZEPPELIN_HOME(\"zeppelin.home\", \"./\"),",
                "+    ZEPPELIN_ADDR(\"zeppelin.server.addr\", \"0.0.0.0\"),",
                "+    ZEPPELIN_PORT(\"zeppelin.server.port\", 8080),",
                "+    ZEPPELIN_SERVER_CONTEXT_PATH(\"zeppelin.server.context.path\", \"/\"),",
                "+    ZEPPELIN_SSL(\"zeppelin.ssl\", false),",
                "+    ZEPPELIN_SSL_PORT(\"zeppelin.server.ssl.port\", 8443),",
                "+    ZEPPELIN_SSL_CLIENT_AUTH(\"zeppelin.ssl.client.auth\", false),",
                "+    ZEPPELIN_SSL_KEYSTORE_PATH(\"zeppelin.ssl.keystore.path\", \"keystore\"),",
                "+    ZEPPELIN_SSL_KEYSTORE_TYPE(\"zeppelin.ssl.keystore.type\", \"JKS\"),",
                "+    ZEPPELIN_SSL_KEYSTORE_PASSWORD(\"zeppelin.ssl.keystore.password\", \"\"),",
                "+    ZEPPELIN_SSL_KEY_MANAGER_PASSWORD(\"zeppelin.ssl.key.manager.password\", null),",
                "+    ZEPPELIN_SSL_TRUSTSTORE_PATH(\"zeppelin.ssl.truststore.path\", null),",
                "+    ZEPPELIN_SSL_TRUSTSTORE_TYPE(\"zeppelin.ssl.truststore.type\", null),",
                "+    ZEPPELIN_SSL_TRUSTSTORE_PASSWORD(\"zeppelin.ssl.truststore.password\", null),",
                "+    ZEPPELIN_WAR(\"zeppelin.war\", \"zeppelin-web/dist\"),",
                "+    ZEPPELIN_WAR_TEMPDIR(\"zeppelin.war.tempdir\", \"webapps\"),",
                "+    ZEPPELIN_INTERPRETERS(\"zeppelin.interpreters\", \"org.apache.zeppelin.spark.SparkInterpreter,\"",
                "+        + \"org.apache.zeppelin.spark.PySparkInterpreter,\"",
                "+        + \"org.apache.zeppelin.rinterpreter.RRepl,\"",
                "+        + \"org.apache.zeppelin.rinterpreter.KnitR,\"",
                "+        + \"org.apache.zeppelin.spark.SparkRInterpreter,\"",
                "+        + \"org.apache.zeppelin.spark.SparkSqlInterpreter,\"",
                "+        + \"org.apache.zeppelin.spark.DepInterpreter,\"",
                "+        + \"org.apache.zeppelin.markdown.Markdown,\"",
                "+        + \"org.apache.zeppelin.angular.AngularInterpreter,\"",
                "+        + \"org.apache.zeppelin.shell.ShellInterpreter,\"",
                "+        + \"org.apache.zeppelin.livy.LivySparkInterpreter,\"",
                "+        + \"org.apache.zeppelin.livy.LivySparkSQLInterpreter,\"",
                "+        + \"org.apache.zeppelin.livy.LivyPySparkInterpreter,\"",
                "+        + \"org.apache.zeppelin.livy.LivyPySpark3Interpreter,\"",
                "+        + \"org.apache.zeppelin.livy.LivySparkRInterpreter,\"",
                "+        + \"org.apache.zeppelin.alluxio.AlluxioInterpreter,\"",
                "+        + \"org.apache.zeppelin.file.HDFSFileInterpreter,\"",
                "+        + \"org.apache.zeppelin.pig.PigInterpreter,\"",
                "+        + \"org.apache.zeppelin.pig.PigQueryInterpreter,\"",
                "+        + \"org.apache.zeppelin.flink.FlinkInterpreter,\"",
                "+        + \"org.apache.zeppelin.python.PythonInterpreter,\"",
                "+        + \"org.apache.zeppelin.python.PythonInterpreterPandasSql,\"",
                "+        + \"org.apache.zeppelin.python.PythonCondaInterpreter,\"",
                "+        + \"org.apache.zeppelin.python.PythonDockerInterpreter,\"",
                "+        + \"org.apache.zeppelin.ignite.IgniteInterpreter,\"",
                "+        + \"org.apache.zeppelin.ignite.IgniteSqlInterpreter,\"",
                "+        + \"org.apache.zeppelin.lens.LensInterpreter,\"",
                "+        + \"org.apache.zeppelin.cassandra.CassandraInterpreter,\"",
                "+        + \"org.apache.zeppelin.geode.GeodeOqlInterpreter,\"",
                "+        + \"org.apache.zeppelin.kylin.KylinInterpreter,\"",
                "+        + \"org.apache.zeppelin.elasticsearch.ElasticsearchInterpreter,\"",
                "+        + \"org.apache.zeppelin.scalding.ScaldingInterpreter,\"",
                "+        + \"org.apache.zeppelin.jdbc.JDBCInterpreter,\"",
                "+        + \"org.apache.zeppelin.hbase.HbaseInterpreter,\"",
                "+        + \"org.apache.zeppelin.bigquery.BigQueryInterpreter,\"",
                "+        + \"org.apache.zeppelin.beam.BeamInterpreter,\"",
                "+        + \"org.apache.zeppelin.scio.ScioInterpreter,\"",
                "+        + \"org.apache.zeppelin.groovy.GroovyInterpreter,\"",
                "+        + \"org.apache.zeppelin.neo4j.Neo4jCypherInterpreter\"",
                "+        ),",
                "+    ZEPPELIN_INTERPRETER_JSON(\"zeppelin.interpreter.setting\", \"interpreter-setting.json\"),",
                "+    ZEPPELIN_INTERPRETER_DIR(\"zeppelin.interpreter.dir\", \"interpreter\"),",
                "+    ZEPPELIN_INTERPRETER_LOCALREPO(\"zeppelin.interpreter.localRepo\", \"local-repo\"),",
                "+    ZEPPELIN_INTERPRETER_DEP_MVNREPO(\"zeppelin.interpreter.dep.mvnRepo\",",
                "+        \"http://repo1.maven.org/maven2/\"),",
                "+    ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT(\"zeppelin.interpreter.connect.timeout\", 30000),",
                "+    ZEPPELIN_INTERPRETER_MAX_POOL_SIZE(\"zeppelin.interpreter.max.poolsize\", 10),",
                "+    ZEPPELIN_INTERPRETER_GROUP_ORDER(\"zeppelin.interpreter.group.order\", \"spark,md,angular,sh,\"",
                "+        + \"livy,alluxio,file,psql,flink,python,ignite,lens,cassandra,geode,kylin,elasticsearch,\"",
                "+        + \"scalding,jdbc,hbase,bigquery,beam,pig,scio,groovy,neo4j\"),",
                "+    ZEPPELIN_INTERPRETER_OUTPUT_LIMIT(\"zeppelin.interpreter.output.limit\", 1024 * 100),",
                "+    ZEPPELIN_ENCODING(\"zeppelin.encoding\", \"UTF-8\"),",
                "+    ZEPPELIN_NOTEBOOK_DIR(\"zeppelin.notebook.dir\", \"notebook\"),",
                "+    // use specified notebook (id) as homescreen",
                "+    ZEPPELIN_NOTEBOOK_HOMESCREEN(\"zeppelin.notebook.homescreen\", null),",
                "+    // whether homescreen notebook will be hidden from notebook list or not",
                "+    ZEPPELIN_NOTEBOOK_HOMESCREEN_HIDE(\"zeppelin.notebook.homescreen.hide\", false),",
                "+    ZEPPELIN_NOTEBOOK_S3_BUCKET(\"zeppelin.notebook.s3.bucket\", \"zeppelin\"),",
                "+    ZEPPELIN_NOTEBOOK_S3_ENDPOINT(\"zeppelin.notebook.s3.endpoint\", \"s3.amazonaws.com\"),",
                "+    ZEPPELIN_NOTEBOOK_S3_USER(\"zeppelin.notebook.s3.user\", \"user\"),",
                "+    ZEPPELIN_NOTEBOOK_S3_EMP(\"zeppelin.notebook.s3.encryptionMaterialsProvider\", null),",
                "+    ZEPPELIN_NOTEBOOK_S3_KMS_KEY_ID(\"zeppelin.notebook.s3.kmsKeyID\", null),",
                "+    ZEPPELIN_NOTEBOOK_S3_KMS_KEY_REGION(\"zeppelin.notebook.s3.kmsKeyRegion\", null),",
                "+    ZEPPELIN_NOTEBOOK_S3_SSE(\"zeppelin.notebook.s3.sse\", false),",
                "+    ZEPPELIN_NOTEBOOK_AZURE_CONNECTION_STRING(\"zeppelin.notebook.azure.connectionString\", null),",
                "+    ZEPPELIN_NOTEBOOK_AZURE_SHARE(\"zeppelin.notebook.azure.share\", \"zeppelin\"),",
                "+    ZEPPELIN_NOTEBOOK_AZURE_USER(\"zeppelin.notebook.azure.user\", \"user\"),",
                "+    ZEPPELIN_NOTEBOOK_MONGO_DATABASE(\"zeppelin.notebook.mongo.database\", \"zeppelin\"),",
                "+    ZEPPELIN_NOTEBOOK_MONGO_COLLECTION(\"zeppelin.notebook.mongo.collection\", \"notes\"),",
                "+    ZEPPELIN_NOTEBOOK_MONGO_URI(\"zeppelin.notebook.mongo.uri\", \"mongodb://localhost\"),",
                "+    ZEPPELIN_NOTEBOOK_MONGO_AUTOIMPORT(\"zeppelin.notebook.mongo.autoimport\", false),",
                "+    ZEPPELIN_NOTEBOOK_STORAGE(\"zeppelin.notebook.storage\",",
                "+        \"org.apache.zeppelin.notebook.repo.GitNotebookRepo\"),",
                "+    ZEPPELIN_NOTEBOOK_ONE_WAY_SYNC(\"zeppelin.notebook.one.way.sync\", false),",
                "+    // whether by default note is public or private",
                "+    ZEPPELIN_NOTEBOOK_PUBLIC(\"zeppelin.notebook.public\", true),",
                "+    ZEPPELIN_INTERPRETER_REMOTE_RUNNER(\"zeppelin.interpreter.remoterunner\",",
                "+        System.getProperty(\"os.name\")",
                "+                .startsWith(\"Windows\") ? \"bin/interpreter.cmd\" : \"bin/interpreter.sh\"),",
                "+    // Decide when new note is created, interpreter settings will be binded automatically or not.",
                "+    ZEPPELIN_NOTEBOOK_AUTO_INTERPRETER_BINDING(\"zeppelin.notebook.autoInterpreterBinding\", true),",
                "+    ZEPPELIN_CONF_DIR(\"zeppelin.conf.dir\", \"conf\"),",
                "+    ZEPPELIN_DEP_LOCALREPO(\"zeppelin.dep.localrepo\", \"local-repo\"),",
                "+    ZEPPELIN_HELIUM_REGISTRY(\"zeppelin.helium.registry\", \"helium,\" + HELIUM_PACKAGE_DEFAULT_URL),",
                "+    ZEPPELIN_HELIUM_NODE_INSTALLER_URL(\"zeppelin.helium.node.installer.url\",",
                "+            \"https://nodejs.org/dist/\"),",
                "+    ZEPPELIN_HELIUM_NPM_INSTALLER_URL(\"zeppelin.helium.npm.installer.url\",",
                "+            \"http://registry.npmjs.org/\"),",
                "+    ZEPPELIN_HELIUM_YARNPKG_INSTALLER_URL(\"zeppelin.helium.yarnpkg.installer.url\",",
                "+            \"https://github.com/yarnpkg/yarn/releases/download/\"),",
                "+    // Allows a way to specify a ',' separated list of allowed origins for rest and websockets",
                "+    // i.e. http://localhost:8080",
                "+    ZEPPELIN_ALLOWED_ORIGINS(\"zeppelin.server.allowed.origins\", \"*\"),",
                "+    ZEPPELIN_ANONYMOUS_ALLOWED(\"zeppelin.anonymous.allowed\", true),",
                "+    ZEPPELIN_CREDENTIALS_PERSIST(\"zeppelin.credentials.persist\", true),",
                "+    ZEPPELIN_CREDENTIALS_ENCRYPT_KEY(\"zeppelin.credentials.encryptKey\", null),",
                "+    ZEPPELIN_WEBSOCKET_MAX_TEXT_MESSAGE_SIZE(\"zeppelin.websocket.max.text.message.size\", \"1024000\"),",
                "+    ZEPPELIN_SERVER_DEFAULT_DIR_ALLOWED(\"zeppelin.server.default.dir.allowed\", false),",
                "+    ZEPPELIN_SERVER_XFRAME_OPTIONS(\"zeppelin.server.xframe.options\", \"SAMEORIGIN\"),",
                "+    ZEPPELIN_SERVER_JETTY_NAME(\"zeppelin.server.jetty.name\", null),",
                "+    ZEPPELIN_SERVER_STRICT_TRANSPORT(\"zeppelin.server.strict.transport\", \"max-age=631138519\"),",
                "+    ZEPPELIN_SERVER_X_XSS_PROTECTION(\"zeppelin.server.xxss.protection\", \"1\"),",
                "+",
                "+    ZEPPELIN_SERVER_KERBEROS_KEYTAB(\"zeppelin.server.kerberos.keytab\", \"\"),",
                "+    ZEPPELIN_SERVER_KERBEROS_PRINCIPAL(\"zeppelin.server.kerberos.principal\", \"\"),",
                "+",
                "+    ZEPPELIN_INTERPRETER_CALLBACK_PORTRANGE(\"zeppelin.interpreter.callback.portRange\", \":\");",
                "+",
                "+    private String varName;",
                "+    @SuppressWarnings(\"rawtypes\")",
                "+    private Class varClass;",
                "+    private String stringValue;",
                "+    private VarType type;",
                "+    private int intValue;",
                "+    private float floatValue;",
                "+    private boolean booleanValue;",
                "+    private long longValue;",
                "+",
                "+",
                "+    ConfVars(String varName, String varValue) {",
                "+      this.varName = varName;",
                "+      this.varClass = String.class;",
                "+      this.stringValue = varValue;",
                "+      this.intValue = -1;",
                "+      this.floatValue = -1;",
                "+      this.longValue = -1;",
                "+      this.booleanValue = false;",
                "+      this.type = VarType.STRING;",
                "+    }",
                "+",
                "+    ConfVars(String varName, int intValue) {",
                "+      this.varName = varName;",
                "+      this.varClass = Integer.class;",
                "+      this.stringValue = null;",
                "+      this.intValue = intValue;",
                "+      this.floatValue = -1;",
                "+      this.longValue = -1;",
                "+      this.booleanValue = false;",
                "+      this.type = VarType.INT;",
                "+    }",
                "+",
                "+    ConfVars(String varName, long longValue) {",
                "+      this.varName = varName;",
                "+      this.varClass = Integer.class;",
                "+      this.stringValue = null;",
                "+      this.intValue = -1;",
                "+      this.floatValue = -1;",
                "+      this.longValue = longValue;",
                "+      this.booleanValue = false;",
                "+      this.type = VarType.LONG;",
                "+    }",
                "+",
                "+    ConfVars(String varName, float floatValue) {",
                "+      this.varName = varName;",
                "+      this.varClass = Float.class;",
                "+      this.stringValue = null;",
                "+      this.intValue = -1;",
                "+      this.longValue = -1;",
                "+      this.floatValue = floatValue;",
                "+      this.booleanValue = false;",
                "+      this.type = VarType.FLOAT;",
                "+    }",
                "+",
                "+    ConfVars(String varName, boolean booleanValue) {",
                "+      this.varName = varName;",
                "+      this.varClass = Boolean.class;",
                "+      this.stringValue = null;",
                "+      this.intValue = -1;",
                "+      this.longValue = -1;",
                "+      this.floatValue = -1;",
                "+      this.booleanValue = booleanValue;",
                "+      this.type = VarType.BOOLEAN;",
                "+    }",
                "+",
                "+    public String getVarName() {",
                "+      return varName;",
                "+    }",
                "+",
                "+    @SuppressWarnings(\"rawtypes\")",
                "+    public Class getVarClass() {",
                "+      return varClass;",
                "+    }",
                "+",
                "+    public int getIntValue() {",
                "+      return intValue;",
                "+    }",
                "+",
                "+    public long getLongValue() {",
                "+      return longValue;",
                "+    }",
                "+",
                "+    public float getFloatValue() {",
                "+      return floatValue;",
                "+    }",
                "+",
                "+    public String getStringValue() {",
                "+      return stringValue;",
                "+    }",
                "+",
                "+    public boolean getBooleanValue() {",
                "+      return booleanValue;",
                "+    }",
                "+",
                "+    public VarType getType() {",
                "+      return type;",
                "+    }",
                "+",
                "+    enum VarType {",
                "+      STRING {",
                "+        @Override",
                "+        void checkType(String value) throws Exception {}",
                "+      },",
                "+      INT {",
                "+        @Override",
                "+        void checkType(String value) throws Exception {",
                "+          Integer.valueOf(value);",
                "+        }",
                "+      },",
                "+      LONG {",
                "+        @Override",
                "+        void checkType(String value) throws Exception {",
                "+          Long.valueOf(value);",
                "+        }",
                "+      },",
                "+      FLOAT {",
                "+        @Override",
                "+        void checkType(String value) throws Exception {",
                "+          Float.valueOf(value);",
                "+        }",
                "+      },",
                "+      BOOLEAN {",
                "+        @Override",
                "+        void checkType(String value) throws Exception {",
                "+          Boolean.valueOf(value);",
                "+        }",
                "+      };",
                "+",
                "+      boolean isType(String value) {",
                "+        try {",
                "+          checkType(value);",
                "+        } catch (Exception e) {",
                "+          LOG.error(\"Exception in ZeppelinConfiguration while isType\", e);",
                "+          return false;",
                "+        }",
                "+        return true;",
                "+      }",
                "+",
                "+      String typeString() {",
                "+        return name().toUpperCase();",
                "+      }",
                "+",
                "+      abstract void checkType(String value) throws Exception;",
                "+    }",
                "+  }",
                "+}",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/BaseZeppelinContext.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/BaseZeppelinContext.java",
                "index 12376f0dd..950396225 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/BaseZeppelinContext.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/BaseZeppelinContext.java",
                "@@ -170,3 +170,3 @@ public abstract class BaseZeppelinContext {",
                "     } catch (IOException e) {",
                "-      throw new InterpreterException(e);",
                "+      throw new RuntimeException(e);",
                "     }",
                "@@ -231,3 +231,3 @@ public abstract class BaseZeppelinContext {",
                "     if (paragraphId.equals(context.getParagraphId()) && checkCurrentParagraph) {",
                "-      throw new InterpreterException(\"Can not run current Paragraph\");",
                "+      throw new RuntimeException(\"Can not run current Paragraph\");",
                "     }",
                "@@ -238,3 +238,3 @@ public abstract class BaseZeppelinContext {",
                "     if (runners.size() <= 0) {",
                "-      throw new InterpreterException(\"Paragraph \" + paragraphId + \" not found \" + runners.size());",
                "+      throw new RuntimeException(\"Paragraph \" + paragraphId + \" not found \" + runners.size());",
                "     }",
                "@@ -257,3 +257,3 @@ public abstract class BaseZeppelinContext {",
                "     if (runners.size() <= 0) {",
                "-      throw new InterpreterException(\"Note \" + noteId + \" not found \" + runners.size());",
                "+      throw new RuntimeException(\"Note \" + noteId + \" not found \" + runners.size());",
                "     }",
                "@@ -348,3 +348,3 @@ public abstract class BaseZeppelinContext {",
                "     if (idx >= runners.size()) {",
                "-      throw new InterpreterException(\"Index out of bound\");",
                "+      throw new RuntimeException(\"Index out of bound\");",
                "     }",
                "@@ -353,3 +353,3 @@ public abstract class BaseZeppelinContext {",
                "     if (runner.getParagraphId().equals(context.getParagraphId()) && checkCurrentParagraph) {",
                "-      throw new InterpreterException(\"Can not run current Paragraph: \" + runner.getParagraphId());",
                "+      throw new RuntimeException(\"Can not run current Paragraph: \" + runner.getParagraphId());",
                "     }",
                "@@ -379,3 +379,3 @@ public abstract class BaseZeppelinContext {",
                "       } else {",
                "-        throw new InterpreterException(\"Paragraph \" + idOrIdx + \" not found\");",
                "+        throw new RuntimeException(\"Paragraph \" + idOrIdx + \" not found\");",
                "       }",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/ClassloaderInterpreter.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/ClassloaderInterpreter.java",
                "index a1dafd972..f8afa4573 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/ClassloaderInterpreter.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/ClassloaderInterpreter.java",
                "@@ -53,3 +53,4 @@ public class ClassloaderInterpreter",
                "   @Override",
                "-  public InterpreterResult interpret(String st, InterpreterContext context) {",
                "+  public InterpreterResult interpret(String st, InterpreterContext context)",
                "+      throws InterpreterException {",
                "     ClassLoader oldcl = Thread.currentThread().getContextClassLoader();",
                "@@ -70,3 +71,3 @@ public class ClassloaderInterpreter",
                "   @Override",
                "-  public void open() {",
                "+  public void open() throws InterpreterException {",
                "     ClassLoader oldcl = Thread.currentThread().getContextClassLoader();",
                "@@ -84,3 +85,3 @@ public class ClassloaderInterpreter",
                "   @Override",
                "-  public void close() {",
                "+  public void close() throws InterpreterException {",
                "     ClassLoader oldcl = Thread.currentThread().getContextClassLoader();",
                "@@ -98,3 +99,3 @@ public class ClassloaderInterpreter",
                "   @Override",
                "-  public void cancel(InterpreterContext context) {",
                "+  public void cancel(InterpreterContext context) throws InterpreterException {",
                "     ClassLoader oldcl = Thread.currentThread().getContextClassLoader();",
                "@@ -112,3 +113,3 @@ public class ClassloaderInterpreter",
                "   @Override",
                "-  public FormType getFormType() {",
                "+  public FormType getFormType() throws InterpreterException {",
                "     ClassLoader oldcl = Thread.currentThread().getContextClassLoader();",
                "@@ -117,4 +118,2 @@ public class ClassloaderInterpreter",
                "       return intp.getFormType();",
                "-    } catch (Exception e) {",
                "-      throw new InterpreterException(e);",
                "     } finally {",
                "@@ -126,3 +125,3 @@ public class ClassloaderInterpreter",
                "   @Override",
                "-  public int getProgress(InterpreterContext context) {",
                "+  public int getProgress(InterpreterContext context) throws InterpreterException {",
                "     ClassLoader oldcl = Thread.currentThread().getContextClassLoader();",
                "@@ -145,4 +144,2 @@ public class ClassloaderInterpreter",
                "       return intp.getScheduler();",
                "-    } catch (Exception e) {",
                "-      throw new InterpreterException(e);",
                "     } finally {",
                "@@ -155,3 +152,3 @@ public class ClassloaderInterpreter",
                "   public List<InterpreterCompletion> completion(String buf, int cursor,",
                "-      InterpreterContext interpreterContext) {",
                "+      InterpreterContext interpreterContext) throws InterpreterException {",
                "     ClassLoader oldcl = Thread.currentThread().getContextClassLoader();",
                "@@ -161,4 +158,2 @@ public class ClassloaderInterpreter",
                "       return completion;",
                "-    } catch (Exception e) {",
                "-      throw new InterpreterException(e);",
                "     } finally {",
                "@@ -176,4 +171,2 @@ public class ClassloaderInterpreter",
                "       return intp.getClassName();",
                "-    } catch (Exception e) {",
                "-      throw new InterpreterException(e);",
                "     } finally {",
                "@@ -190,4 +183,2 @@ public class ClassloaderInterpreter",
                "       intp.setInterpreterGroup(interpreterGroup);",
                "-    } catch (Exception e) {",
                "-      throw new InterpreterException(e);",
                "     } finally {",
                "@@ -204,4 +195,2 @@ public class ClassloaderInterpreter",
                "       return intp.getInterpreterGroup();",
                "-    } catch (Exception e) {",
                "-      throw new InterpreterException(e);",
                "     } finally {",
                "@@ -218,4 +207,2 @@ public class ClassloaderInterpreter",
                "       intp.setClassloaderUrls(urls);",
                "-    } catch (Exception e) {",
                "-      throw new InterpreterException(e);",
                "     } finally {",
                "@@ -232,4 +219,2 @@ public class ClassloaderInterpreter",
                "       return intp.getClassloaderUrls();",
                "-    } catch (Exception e) {",
                "-      throw new InterpreterException(e);",
                "     } finally {",
                "@@ -241,3 +226,3 @@ public class ClassloaderInterpreter",
                "   @Override",
                "-  public void setProperty(Properties property) {",
                "+  public void setProperties(Properties properties) {",
                "     ClassLoader oldcl = Thread.currentThread().getContextClassLoader();",
                "@@ -245,5 +230,3 @@ public class ClassloaderInterpreter",
                "     try {",
                "-      intp.setProperty(property);",
                "-    } catch (Exception e) {",
                "-      throw new InterpreterException(e);",
                "+      intp.setProperties(properties);",
                "     } finally {",
                "@@ -255,3 +238,3 @@ public class ClassloaderInterpreter",
                "   @Override",
                "-  public Properties getProperty() {",
                "+  public Properties getProperties() {",
                "     ClassLoader oldcl = Thread.currentThread().getContextClassLoader();",
                "@@ -259,5 +242,3 @@ public class ClassloaderInterpreter",
                "     try {",
                "-      return intp.getProperty();",
                "-    } catch (Exception e) {",
                "-      throw new InterpreterException(e);",
                "+      return intp.getProperties();",
                "     } finally {",
                "@@ -274,4 +255,2 @@ public class ClassloaderInterpreter",
                "       return intp.getProperty(key);",
                "-    } catch (Exception e) {",
                "-      throw new InterpreterException(e);",
                "     } finally {",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/Interpreter.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/Interpreter.java",
                "index 05599a01a..386de4178 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/Interpreter.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/Interpreter.java",
                "@@ -33,2 +33,3 @@ import org.apache.zeppelin.annotation.Experimental;",
                " import org.apache.zeppelin.annotation.ZeppelinApi;",
                "+import org.apache.zeppelin.interpreter.launcher.InterpreterLauncher;",
                " import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;",
                "@@ -57,3 +58,3 @@ public abstract class Interpreter {",
                "   @ZeppelinApi",
                "-  public abstract void open();",
                "+  public abstract void open() throws InterpreterException;",
                "@@ -64,3 +65,3 @@ public abstract class Interpreter {",
                "   @ZeppelinApi",
                "-  public abstract void close();",
                "+  public abstract void close() throws InterpreterException;",
                "@@ -70,3 +71,4 @@ public abstract class Interpreter {",
                "   @ZeppelinApi",
                "-  public InterpreterResult executePrecode(InterpreterContext interpreterContext) {",
                "+  public InterpreterResult executePrecode(InterpreterContext interpreterContext)",
                "+      throws InterpreterException {",
                "     String simpleName = this.getClass().getSimpleName();",
                "@@ -85,3 +87,5 @@ public abstract class Interpreter {",
                "   @ZeppelinApi",
                "-  public abstract InterpreterResult interpret(String st, InterpreterContext context);",
                "+  public abstract InterpreterResult interpret(String st,",
                "+                                              InterpreterContext context)",
                "+      throws InterpreterException;",
                "@@ -91,3 +95,3 @@ public abstract class Interpreter {",
                "   @ZeppelinApi",
                "-  public abstract void cancel(InterpreterContext context);",
                "+  public abstract void cancel(InterpreterContext context) throws InterpreterException;",
                "@@ -101,3 +105,3 @@ public abstract class Interpreter {",
                "   @ZeppelinApi",
                "-  public abstract FormType getFormType();",
                "+  public abstract FormType getFormType() throws InterpreterException;",
                "@@ -109,3 +113,3 @@ public abstract class Interpreter {",
                "   @ZeppelinApi",
                "-  public abstract int getProgress(InterpreterContext context);",
                "+  public abstract int getProgress(InterpreterContext context) throws InterpreterException;",
                "@@ -122,3 +126,3 @@ public abstract class Interpreter {",
                "   public List<InterpreterCompletion> completion(String buf, int cursor,",
                "-      InterpreterContext interpreterContext)  {",
                "+      InterpreterContext interpreterContext) throws InterpreterException {",
                "     return null;",
                "@@ -146,12 +150,12 @@ public abstract class Interpreter {",
                "   private URL[] classloaderUrls;",
                "-  protected Properties property;",
                "-  private String userName;",
                "+  protected Properties properties;",
                "+  protected String userName;",
                "   @ZeppelinApi",
                "-  public Interpreter(Properties property) {",
                "-    this.property = property;",
                "+  public Interpreter(Properties properties) {",
                "+    this.properties = properties;",
                "   }",
                "-  public void setProperty(Properties property) {",
                "-    this.property = property;",
                "+  public void setProperties(Properties properties) {",
                "+    this.properties = properties;",
                "   }",
                "@@ -159,5 +163,5 @@ public abstract class Interpreter {",
                "   @ZeppelinApi",
                "-  public Properties getProperty() {",
                "+  public Properties getProperties() {",
                "     Properties p = new Properties();",
                "-    p.putAll(property);",
                "+    p.putAll(properties);",
                "@@ -185,7 +189,18 @@ public abstract class Interpreter {",
                "   public String getProperty(String key) {",
                "-    logger.debug(\"key: {}, value: {}\", key, getProperty().getProperty(key));",
                "+    logger.debug(\"key: {}, value: {}\", key, getProperties().getProperty(key));",
                "-    return getProperty().getProperty(key);",
                "+    return getProperties().getProperty(key);",
                "   }",
                "+  @ZeppelinApi",
                "+  public String getProperty(String key, String defaultValue) {",
                "+    logger.debug(\"key: {}, value: {}\", key, getProperties().getProperty(key, defaultValue));",
                "+",
                "+    return getProperties().getProperty(key, defaultValue);",
                "+  }",
                "+",
                "+  @ZeppelinApi",
                "+  public void setProperty(String key, String value) {",
                "+    properties.setProperty(key, value);",
                "+  }",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterException.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterException.java",
                "index ebd184ecf..8b8a22976 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterException.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterException.java",
                "@@ -19,2 +19,3 @@ package org.apache.zeppelin.interpreter;",
                "+",
                " /**",
                "@@ -23,3 +24,3 @@ package org.apache.zeppelin.interpreter;",
                "  */",
                "-public class InterpreterException extends RuntimeException {",
                "+public class InterpreterException extends Exception {",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/LazyOpenInterpreter.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/LazyOpenInterpreter.java",
                "index 96f88eeb5..8e55c3120 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/LazyOpenInterpreter.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/LazyOpenInterpreter.java",
                "@@ -46,4 +46,4 @@ public class LazyOpenInterpreter",
                "   @Override",
                "-  public void setProperty(Properties property) {",
                "-    intp.setProperty(property);",
                "+  public void setProperties(Properties properties) {",
                "+    intp.setProperties(properties);",
                "   }",
                "@@ -51,4 +51,4 @@ public class LazyOpenInterpreter",
                "   @Override",
                "-  public Properties getProperty() {",
                "-    return intp.getProperty();",
                "+  public Properties getProperties() {",
                "+    return intp.getProperties();",
                "   }",
                "@@ -61,3 +61,3 @@ public class LazyOpenInterpreter",
                "   @Override",
                "-  public synchronized void open() {",
                "+  public synchronized void open() throws InterpreterException {",
                "     if (opened == true) {",
                "@@ -75,3 +75,4 @@ public class LazyOpenInterpreter",
                "   @Override",
                "-  public InterpreterResult executePrecode(InterpreterContext interpreterContext) {",
                "+  public InterpreterResult executePrecode(InterpreterContext interpreterContext)",
                "+      throws InterpreterException {",
                "     return intp.executePrecode(interpreterContext);",
                "@@ -80,3 +81,3 @@ public class LazyOpenInterpreter",
                "   @Override",
                "-  public void close() {",
                "+  public void close() throws InterpreterException {",
                "     synchronized (intp) {",
                "@@ -96,3 +97,4 @@ public class LazyOpenInterpreter",
                "   @Override",
                "-  public InterpreterResult interpret(String st, InterpreterContext context) {",
                "+  public InterpreterResult interpret(String st, InterpreterContext context)",
                "+      throws InterpreterException {",
                "     open();",
                "@@ -107,3 +109,3 @@ public class LazyOpenInterpreter",
                "   @Override",
                "-  public void cancel(InterpreterContext context) {",
                "+  public void cancel(InterpreterContext context) throws InterpreterException {",
                "     open();",
                "@@ -113,3 +115,3 @@ public class LazyOpenInterpreter",
                "   @Override",
                "-  public FormType getFormType() {",
                "+  public FormType getFormType() throws InterpreterException {",
                "     return intp.getFormType();",
                "@@ -118,3 +120,3 @@ public class LazyOpenInterpreter",
                "   @Override",
                "-  public int getProgress(InterpreterContext context) {",
                "+  public int getProgress(InterpreterContext context) throws InterpreterException {",
                "     if (opened) {",
                "@@ -133,3 +135,3 @@ public class LazyOpenInterpreter",
                "   public List<InterpreterCompletion> completion(String buf, int cursor,",
                "-      InterpreterContext interpreterContext) {",
                "+      InterpreterContext interpreterContext) throws InterpreterException {",
                "     open();",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/launcher/InterpreterClient.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/launcher/InterpreterClient.java",
                "new file mode 100644",
                "index 000000000..b991079fe",
                "--- /dev/null",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/launcher/InterpreterClient.java",
                "@@ -0,0 +1,26 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.interpreter.launcher;",
                "+",
                "+/**",
                "+ * Interface to InterpreterClient which is created by InterpreterLauncher. This is the component",
                "+ * that is used to for the communication fromzeppelin-server process to zeppelin interpreter process",
                "+ */",
                "+public interface InterpreterClient {",
                "+",
                "+}",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/launcher/InterpreterLaunchContext.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/launcher/InterpreterLaunchContext.java",
                "new file mode 100644",
                "index 000000000..db8f8dd2f",
                "--- /dev/null",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/launcher/InterpreterLaunchContext.java",
                "@@ -0,0 +1,68 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.interpreter.launcher;",
                "+",
                "+import org.apache.zeppelin.conf.ZeppelinConfiguration;",
                "+import org.apache.zeppelin.interpreter.InterpreterOption;",
                "+import org.apache.zeppelin.interpreter.InterpreterRunner;",
                "+",
                "+import java.util.Properties;",
                "+",
                "+/**",
                "+ * Context class for Interpreter Launch",
                "+ */",
                "+public class InterpreterLaunchContext {",
                "+",
                "+  private Properties properties;",
                "+  private InterpreterOption option;",
                "+  private InterpreterRunner runner;",
                "+  private String interpreterGroupId;",
                "+  private String interpreterGroupName;",
                "+",
                "+  public InterpreterLaunchContext(Properties properties,",
                "+                                  InterpreterOption option,",
                "+                                  InterpreterRunner runner,",
                "+                                  String interpreterGroupId,",
                "+                                  String interpreterGroupName) {",
                "+    this.properties = properties;",
                "+    this.option = option;",
                "+    this.runner = runner;",
                "+    this.interpreterGroupId = interpreterGroupId;",
                "+    this.interpreterGroupName = interpreterGroupName;",
                "+  }",
                "+",
                "+  public Properties getProperties() {",
                "+    return properties;",
                "+  }",
                "+",
                "+  public InterpreterOption getOption() {",
                "+    return option;",
                "+  }",
                "+",
                "+  public InterpreterRunner getRunner() {",
                "+    return runner;",
                "+  }",
                "+",
                "+  public String getInterpreterGroupId() {",
                "+    return interpreterGroupId;",
                "+  }",
                "+",
                "+  public String getInterpreterGroupName() {",
                "+    return interpreterGroupName;",
                "+  }",
                "+}",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/launcher/InterpreterLauncher.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/launcher/InterpreterLauncher.java",
                "new file mode 100644",
                "index 000000000..5d0acf351",
                "--- /dev/null",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/launcher/InterpreterLauncher.java",
                "@@ -0,0 +1,38 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.interpreter.launcher;",
                "+",
                "+import org.apache.zeppelin.conf.ZeppelinConfiguration;",
                "+",
                "+import java.io.IOException;",
                "+import java.util.Properties;",
                "+",
                "+/**",
                "+ * Component to Launch interpreter process.",
                "+ */",
                "+public abstract class InterpreterLauncher {",
                "+",
                "+  protected ZeppelinConfiguration zConf;",
                "+  protected Properties properties;",
                "+",
                "+  public InterpreterLauncher(ZeppelinConfiguration zConf) {",
                "+    this.zConf = zConf;",
                "+  }",
                "+",
                "+  public abstract  InterpreterClient launch(InterpreterLaunchContext context) throws IOException;",
                "+}",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterContextRunner.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterContextRunner.java",
                "index 8d16ec52b..74b8db6d9 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterContextRunner.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterContextRunner.java",
                "@@ -35,3 +35,3 @@ public class RemoteInterpreterContextRunner extends InterpreterContextRunner {",
                "     // code should not reach here",
                "-    throw new InterpreterException(\"Assert\");",
                "+    throw new RuntimeException(\"Assert\");",
                "   }",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java",
                "index 7f476e802..cb0488cc0 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java",
                "@@ -209,3 +209,7 @@ public class RemoteInterpreterServer",
                "         for (Interpreter interpreter : session) {",
                "-          interpreter.close();",
                "+          try {",
                "+            interpreter.close();",
                "+          } catch (InterpreterException e) {",
                "+            logger.warn(\"Fail to close interpreter\", e);",
                "+          }",
                "         }",
                "@@ -358,3 +362,7 @@ public class RemoteInterpreterServer",
                "     Interpreter intp = getInterpreter(sessionId, className);",
                "-    intp.open();",
                "+    try {",
                "+      intp.open();",
                "+    } catch (InterpreterException e) {",
                "+      throw new TException(\"Fail to open interpreter\", e);",
                "+    }",
                "   }",
                "@@ -390,3 +398,7 @@ public class RemoteInterpreterServer",
                "         if (inp.getClassName().equals(className)) {",
                "-          inp.close();",
                "+          try {",
                "+            inp.close();",
                "+          } catch (InterpreterException e) {",
                "+            logger.warn(\"Fail to close interpreter\", e);",
                "+          }",
                "           it.remove();",
                "@@ -657,3 +669,7 @@ public class RemoteInterpreterServer",
                "     } else {",
                "-      intp.cancel(convert(interpreterContext, null));",
                "+      try {",
                "+        intp.cancel(convert(interpreterContext, null));",
                "+      } catch (InterpreterException e) {",
                "+        throw new TException(\"Fail to cancel\", e);",
                "+      }",
                "     }",
                "@@ -674,3 +690,7 @@ public class RemoteInterpreterServer",
                "       }",
                "-      return intp.getProgress(convert(interpreterContext, null));",
                "+      try {",
                "+        return intp.getProgress(convert(interpreterContext, null));",
                "+      } catch (InterpreterException e) {",
                "+        throw new TException(\"Fail to getProgress\", e);",
                "+      }",
                "     }",
                "@@ -682,3 +702,7 @@ public class RemoteInterpreterServer",
                "     Interpreter intp = getInterpreter(sessionId, className);",
                "-    return intp.getFormType().toString();",
                "+    try {",
                "+      return intp.getFormType().toString();",
                "+    } catch (InterpreterException e) {",
                "+      throw new TException(e);",
                "+    }",
                "   }",
                "@@ -690,4 +714,7 @@ public class RemoteInterpreterServer",
                "     Interpreter intp = getInterpreter(sessionId, className);",
                "-    List completion = intp.completion(buf, cursor, convert(remoteInterpreterContext, null));",
                "-    return completion;",
                "+    try {",
                "+      return intp.completion(buf, cursor, convert(remoteInterpreterContext, null));",
                "+    } catch (InterpreterException e) {",
                "+      throw new TException(\"Fail to get completion\", e);",
                "+    }",
                "   }",
                "diff --git a/zeppelin-server/src/main/java/org/apache/zeppelin/rest/InterpreterRestApi.java b/zeppelin-server/src/main/java/org/apache/zeppelin/rest/InterpreterRestApi.java",
                "index c1dba5c41..e2a10e62b 100644",
                "--- a/zeppelin-server/src/main/java/org/apache/zeppelin/rest/InterpreterRestApi.java",
                "+++ b/zeppelin-server/src/main/java/org/apache/zeppelin/rest/InterpreterRestApi.java",
                "@@ -125,3 +125,3 @@ public class InterpreterRestApi {",
                "       return new JsonResponse<>(Status.OK, \"\", interpreterSetting).build();",
                "-    } catch (InterpreterException | IOException e) {",
                "+    } catch (IOException e) {",
                "       logger.error(\"Exception in InterpreterRestApi while creating \", e);",
                "diff --git a/zeppelin-zengine/pom.xml b/zeppelin-zengine/pom.xml",
                "index c67df6b44..d1a227052 100644",
                "--- a/zeppelin-zengine/pom.xml",
                "+++ b/zeppelin-zengine/pom.xml",
                "@@ -72,7 +72,2 @@",
                "-    <dependency>",
                "-      <groupId>commons-configuration</groupId>",
                "-      <artifactId>commons-configuration</artifactId>",
                "-    </dependency>",
                "-",
                "     <dependency>",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java",
                "index f02091944..723323983 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java",
                "@@ -79,3 +79,3 @@ public class InterpreterFactory {",
                "       }",
                "-      throw new InterpreterException(replName + \" interpreter not found\");",
                "+      return null;",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "index 5af01dc4a..a82d5bf0e 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "@@ -20,3 +20,2 @@ package org.apache.zeppelin.interpreter;",
                " import com.google.common.annotations.VisibleForTesting;",
                "-import com.google.common.base.Joiner;",
                " import com.google.common.base.Preconditions;",
                "@@ -36,8 +35,11 @@ import org.apache.zeppelin.display.AngularObjectRegistryListener;",
                " import org.apache.zeppelin.helium.ApplicationEventListener;",
                "+import org.apache.zeppelin.interpreter.launcher.InterpreterLaunchContext;",
                "+import org.apache.zeppelin.interpreter.launcher.InterpreterLauncher;",
                "+import org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher;",
                "+import org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher;",
                " import org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry;",
                " import org.apache.zeppelin.interpreter.remote.RemoteInterpreter;",
                "-import org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess;",
                "+import org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller;",
                " import org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess;",
                " import org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener;",
                "-import org.apache.zeppelin.interpreter.remote.RemoteInterpreterRunningProcess;",
                " import org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils;",
                "@@ -48,3 +50,3 @@ import java.io.File;",
                " import java.io.FileNotFoundException;",
                "-import java.io.FilenameFilter;",
                "+import java.io.IOException;",
                " import java.lang.reflect.Constructor;",
                "@@ -60,3 +62,2 @@ import java.util.List;",
                " import java.util.Map;",
                "-import java.util.NoSuchElementException;",
                " import java.util.Properties;",
                "@@ -134,2 +135,6 @@ public class InterpreterSetting {",
                "+  // TODO(zjffdu) ShellScriptLauncher is the only launcher implemention for now. It could be other",
                "+  // launcher in future when we have other launcher implementation. e.g. third party launcher",
                "+  // service like livy",
                "+  private transient InterpreterLauncher launcher;",
                "   ///////////////////////////////////////////////////////////////////////////////////////////",
                "@@ -245,2 +250,3 @@ public class InterpreterSetting {",
                "   void postProcessing() {",
                "+//    createLauncher();",
                "     this.status = Status.READY;",
                "@@ -268,2 +274,10 @@ public class InterpreterSetting {",
                "+  private void createLauncher() {",
                "+    if (group.equals(\"spark\")) {",
                "+      this.launcher = new SparkInterpreterLauncher(this.conf);",
                "+    } else {",
                "+      this.launcher = new ShellScriptLauncher(this.conf);",
                "+    }",
                "+  }",
                "+",
                "   public AngularObjectRegistryListener getAngularObjectRegistryListener() {",
                "@@ -628,148 +642,13 @@ public class InterpreterSetting {",
                "   }",
                "-  ",
                "-  RemoteInterpreterProcess createInterpreterProcess() {",
                "-    RemoteInterpreterProcess remoteInterpreterProcess = null;",
                "-    int connectTimeout =",
                "-        conf.getInt(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT);",
                "-    String localRepoPath = conf.getInterpreterLocalRepoPath() + \"/\" + id;",
                "-    if (option.isExistingProcess()) {",
                "-      // TODO(zjffdu) remove the existing process approach seems no one is using this.",
                "-      // use the existing process",
                "-      remoteInterpreterProcess = new RemoteInterpreterRunningProcess(",
                "-          connectTimeout,",
                "-          remoteInterpreterProcessListener,",
                "-          appEventListener,",
                "-          option.getHost(),",
                "-          option.getPort());",
                "-    } else {",
                "-      // create new remote process",
                "-      remoteInterpreterProcess = new RemoteInterpreterManagedProcess(",
                "-          interpreterRunner != null ? interpreterRunner.getPath() :",
                "-              conf.getInterpreterRemoteRunnerPath(), conf.getCallbackPortRange(),",
                "-          interpreterDir, localRepoPath,",
                "-          getEnvFromInterpreterProperty(), connectTimeout,",
                "-          remoteInterpreterProcessListener, appEventListener, group);",
                "-    }",
                "-    return remoteInterpreterProcess;",
                "-  }",
                "-",
                "-  private boolean isSparkConf(String key, String value) {",
                "-    return !StringUtils.isEmpty(key) && key.startsWith(\"spark.\") && !StringUtils.isEmpty(value);",
                "-  }",
                "-",
                "-  private Map<String, String> getEnvFromInterpreterProperty() {",
                "-    Map<String, String> env = new HashMap<String, String>();",
                "-    Properties javaProperties = getJavaProperties();",
                "-    Properties sparkProperties = new Properties();",
                "-    String sparkMaster = getSparkMaster();",
                "-    for (String key : javaProperties.stringPropertyNames()) {",
                "-      if (RemoteInterpreterUtils.isEnvString(key)) {",
                "-        env.put(key, javaProperties.getProperty(key));",
                "-      }",
                "-      if (isSparkConf(key, javaProperties.getProperty(key))) {",
                "-        sparkProperties.setProperty(key, toShellFormat(javaProperties.getProperty(key)));",
                "-      }",
                "-    }",
                "-",
                "-    setupPropertiesForPySpark(sparkProperties);",
                "-    setupPropertiesForSparkR(sparkProperties, System.getenv(\"SPARK_HOME\"));",
                "-    if (isYarnMode() && getDeployMode().equals(\"cluster\")) {",
                "-      env.put(\"SPARK_YARN_CLUSTER\", \"true\");",
                "-    }",
                "-",
                "-    StringBuilder sparkConfBuilder = new StringBuilder();",
                "-    if (sparkMaster != null) {",
                "-      sparkConfBuilder.append(\" --master \" + sparkMaster);",
                "-    }",
                "-    if (isYarnMode() && getDeployMode().equals(\"cluster\")) {",
                "-      sparkConfBuilder.append(\" --files \" + conf.getConfDir() + \"/log4j_yarn_cluster.properties\");",
                "-    }",
                "-    for (String name : sparkProperties.stringPropertyNames()) {",
                "-      sparkConfBuilder.append(\" --conf \" + name + \"=\" + sparkProperties.getProperty(name));",
                "-    }",
                "-",
                "-    env.put(\"ZEPPELIN_SPARK_CONF\", sparkConfBuilder.toString());",
                "-    LOGGER.debug(\"getEnvFromInterpreterProperty: \" + env);",
                "-    return env;",
                "-  }",
                "-",
                "-  private void setupPropertiesForPySpark(Properties sparkProperties) {",
                "-    if (isYarnMode()) {",
                "-      sparkProperties.setProperty(\"spark.yarn.isPython\", \"true\");",
                "-    }",
                "-  }",
                "-  private void mergeSparkProperty(Properties sparkProperties, String propertyName,",
                "-                                  String propertyValue) {",
                "-    if (sparkProperties.containsKey(propertyName)) {",
                "-      String oldPropertyValue = sparkProperties.getProperty(propertyName);",
                "-      sparkProperties.setProperty(propertyName, oldPropertyValue + \",\" + propertyValue);",
                "-    } else {",
                "-      sparkProperties.setProperty(propertyName, propertyValue);",
                "-    }",
                "-  }",
                "-",
                "-  private void setupPropertiesForSparkR(Properties sparkProperties,",
                "-                                        String sparkHome) {",
                "-    File sparkRBasePath = null;",
                "-    if (sparkHome == null) {",
                "-      if (!getSparkMaster().startsWith(\"local\")) {",
                "-        throw new RuntimeException(\"SPARK_HOME is not specified for non-local mode\");",
                "-      }",
                "-      String zeppelinHome = conf.getString(ZeppelinConfiguration.ConfVars.ZEPPELIN_HOME);",
                "-      sparkRBasePath = new File(zeppelinHome,",
                "-          \"interpreter\" + File.separator + \"spark\" + File.separator + \"R\");",
                "-    } else {",
                "-      sparkRBasePath = new File(sparkHome, \"R\" + File.separator + \"lib\");",
                "-    }",
                "-",
                "-    File sparkRPath = new File(sparkRBasePath, \"sparkr.zip\");",
                "-    if (sparkRPath.exists() && sparkRPath.isFile()) {",
                "-      mergeSparkProperty(sparkProperties, \"spark.yarn.dist.archives\", sparkRPath.getAbsolutePath());",
                "-    } else {",
                "-      LOGGER.warn(\"sparkr.zip is not found, SparkR may not work.\");",
                "-    }",
                "-  }",
                "-",
                "-  private String getSparkMaster() {",
                "-    String master = getJavaProperties().getProperty(\"master\");",
                "-    if (master == null) {",
                "-      master = getJavaProperties().getProperty(\"spark.master\", \"local[*]\");",
                "-    }",
                "-    return master;",
                "-  }",
                "-",
                "-  private String getDeployMode() {",
                "-    String master = getSparkMaster();",
                "-    if (master.equals(\"yarn-client\")) {",
                "-      return \"client\";",
                "-    } else if (master.equals(\"yarn-cluster\")) {",
                "-      return \"cluster\";",
                "-    } else if (master.startsWith(\"local\")) {",
                "-      return \"client\";",
                "-    } else {",
                "-      String deployMode = getJavaProperties().getProperty(\"spark.submit.deployMode\");",
                "-      if (deployMode == null) {",
                "-        throw new RuntimeException(\"master is set as yarn, but spark.submit.deployMode \" +",
                "-            \"is not specified\");",
                "-      }",
                "-      if (!deployMode.equals(\"client\") && !deployMode.equals(\"cluster\")) {",
                "-        throw new RuntimeException(\"Invalid value for spark.submit.deployMode: \" + deployMode);",
                "-      }",
                "-      return deployMode;",
                "-    }",
                "-  }",
                "-",
                "-  private boolean isYarnMode() {",
                "-    return getSparkMaster().startsWith(\"yarn\");",
                "-  }",
                "-",
                "-  private String toShellFormat(String value) {",
                "-    if (value.contains(\"\\'\") && value.contains(\"\\\"\")) {",
                "-      throw new RuntimeException(\"Spark property value could not contain both \\\" and '\");",
                "-    } else if (value.contains(\"\\'\")) {",
                "-      return \"\\\"\" + value + \"\\\"\";",
                "-    } else {",
                "-      return \"\\'\" + value + \"\\'\";",
                "+  synchronized RemoteInterpreterProcess createInterpreterProcess() throws IOException {",
                "+    if (launcher == null) {",
                "+      createLauncher();",
                "     }",
                "+    InterpreterLaunchContext launchContext = new",
                "+        InterpreterLaunchContext(getJavaProperties(), option, interpreterRunner, id, name);",
                "+    RemoteInterpreterProcess process = (RemoteInterpreterProcess) launcher.launch(launchContext);",
                "+    process.setRemoteInterpreterEventPoller(",
                "+        new RemoteInterpreterEventPoller(remoteInterpreterProcessListener, appEventListener));",
                "+    return process;",
                "   }",
                "@@ -817,4 +696,3 @@ public class InterpreterSetting {",
                "-  private ManagedInterpreterGroup createInterpreterGroup(String groupId)",
                "-      throws InterpreterException {",
                "+  private ManagedInterpreterGroup createInterpreterGroup(String groupId) {",
                "     AngularObjectRegistry angularObjectRegistry;",
                "@@ -940,3 +818,4 @@ public class InterpreterSetting {",
                "         } else {",
                "-          throw new RuntimeException(\"Can not convert this type of property: \" + value.getClass());",
                "+          throw new RuntimeException(\"Can not convert this type of property: \" +",
                "+              value.getClass());",
                "         }",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java",
                "index 9dfce219e..f34195d70 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java",
                "@@ -746,3 +746,3 @@ public class InterpreterSettingManager {",
                "   /**",
                "-   * Change interpreter property and restart",
                "+   * Change interpreter properties and restart",
                "    */",
                "@@ -750,3 +750,4 @@ public class InterpreterSettingManager {",
                "                                     Map<String, InterpreterProperty> properties,",
                "-                                    List<Dependency> dependencies) throws IOException {",
                "+                                    List<Dependency> dependencies)",
                "+      throws InterpreterException, IOException {",
                "     synchronized (interpreterSettings) {",
                "@@ -763,3 +764,3 @@ public class InterpreterSettingManager {",
                "           loadFromFile();",
                "-          throw e;",
                "+          throw new IOException(e);",
                "         }",
                "@@ -772,3 +773,3 @@ public class InterpreterSettingManager {",
                "   // restart in note page",
                "-  public void restart(String settingId, String noteId, String user) {",
                "+  public void restart(String settingId, String noteId, String user) throws InterpreterException {",
                "     InterpreterSetting intpSetting = interpreterSettings.get(settingId);",
                "@@ -796,3 +797,3 @@ public class InterpreterSettingManager {",
                "-  public void restart(String id) {",
                "+  public void restart(String id) throws InterpreterException {",
                "     restart(id, \"\", \"anonymous\");",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroup.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroup.java",
                "index 1d7d916b6..ff9cb1c47 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroup.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroup.java",
                "@@ -27,2 +27,3 @@ import org.slf4j.LoggerFactory;",
                "+import java.io.IOException;",
                " import java.util.Collection;",
                "@@ -54,3 +55,3 @@ public class ManagedInterpreterGroup extends InterpreterGroup {",
                "-  public synchronized RemoteInterpreterProcess getOrCreateInterpreterProcess() {",
                "+  public synchronized RemoteInterpreterProcess getOrCreateInterpreterProcess() throws IOException {",
                "     if (remoteInterpreterProcess == null) {",
                "@@ -114,3 +115,7 @@ public class ManagedInterpreterGroup extends InterpreterGroup {",
                "-      interpreter.close();",
                "+      try {",
                "+        interpreter.close();",
                "+      } catch (InterpreterException e) {",
                "+        LOGGER.warn(\"Fail to close interpreter \" + interpreter.getClassName(), e);",
                "+      }",
                "       //TODO(zjffdu) move the close of schedule to Interpreter",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/ShellScriptLauncher.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/ShellScriptLauncher.java",
                "new file mode 100644",
                "index 000000000..f419967de",
                "--- /dev/null",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/ShellScriptLauncher.java",
                "@@ -0,0 +1,82 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+",
                "+package org.apache.zeppelin.interpreter.launcher;",
                "+",
                "+import org.apache.zeppelin.conf.ZeppelinConfiguration;",
                "+import org.apache.zeppelin.interpreter.InterpreterOption;",
                "+import org.apache.zeppelin.interpreter.InterpreterRunner;",
                "+import org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess;",
                "+import org.apache.zeppelin.interpreter.remote.RemoteInterpreterRunningProcess;",
                "+import org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+import java.util.HashMap;",
                "+import java.util.Map;",
                "+import java.util.Properties;",
                "+",
                "+/**",
                "+ * Interpreter Launcher which use shell script to launch the interpreter process.",
                "+ *",
                "+ */",
                "+public class ShellScriptLauncher extends InterpreterLauncher {",
                "+",
                "+  private static final Logger LOGGER = LoggerFactory.getLogger(ShellScriptLauncher.class);",
                "+",
                "+  public ShellScriptLauncher(ZeppelinConfiguration zConf) {",
                "+    super(zConf);",
                "+  }",
                "+",
                "+  @Override",
                "+  public InterpreterClient launch(InterpreterLaunchContext context) {",
                "+    LOGGER.info(\"Launching Interpreter: \" + context.getInterpreterGroupName());",
                "+    this.properties = context.getProperties();",
                "+    InterpreterOption option = context.getOption();",
                "+    InterpreterRunner runner = context.getRunner();",
                "+    String groupName = context.getInterpreterGroupName();",
                "+",
                "+    int connectTimeout =",
                "+        zConf.getInt(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT);",
                "+    if (option.isExistingProcess()) {",
                "+      return new RemoteInterpreterRunningProcess(",
                "+          connectTimeout,",
                "+          option.getHost(),",
                "+          option.getPort());",
                "+    } else {",
                "+      // create new remote process",
                "+      String localRepoPath = zConf.getInterpreterLocalRepoPath() + \"/\"",
                "+          + context.getInterpreterGroupId();",
                "+      return new RemoteInterpreterManagedProcess(",
                "+          runner != null ? runner.getPath() : zConf.getInterpreterRemoteRunnerPath(),",
                "+          zConf.getCallbackPortRange(),",
                "+          zConf.getInterpreterDir() + \"/\" + groupName, localRepoPath,",
                "+          buildEnvFromProperties(), connectTimeout, groupName);",
                "+    }",
                "+  }",
                "+",
                "+  protected Map<String, String> buildEnvFromProperties() {",
                "+    Map<String, String> env = new HashMap<>();",
                "+    for (Object key : properties.keySet()) {",
                "+      if (RemoteInterpreterUtils.isEnvString((String) key)) {",
                "+        env.put((String) key, properties.getProperty((String) key));",
                "+      }",
                "+    }",
                "+    return env;",
                "+  }",
                "+}",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/SparkInterpreterLauncher.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/SparkInterpreterLauncher.java",
                "new file mode 100644",
                "index 000000000..32a0530af",
                "--- /dev/null",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/SparkInterpreterLauncher.java",
                "@@ -0,0 +1,205 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.interpreter.launcher;",
                "+",
                "+import org.apache.commons.lang3.StringUtils;",
                "+import org.apache.zeppelin.conf.ZeppelinConfiguration;",
                "+import org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+import java.io.File;",
                "+import java.util.HashMap;",
                "+import java.util.Map;",
                "+import java.util.Properties;",
                "+",
                "+/**",
                "+ * Spark specific launcher.",
                "+ */",
                "+public class SparkInterpreterLauncher extends ShellScriptLauncher {",
                "+",
                "+  private static final Logger LOGGER = LoggerFactory.getLogger(SparkInterpreterLauncher.class);",
                "+",
                "+  public SparkInterpreterLauncher(ZeppelinConfiguration zConf) {",
                "+    super(zConf);",
                "+  }",
                "+",
                "+  @Override",
                "+  protected Map<String, String> buildEnvFromProperties() {",
                "+    Map<String, String> env = new HashMap<String, String>();",
                "+    Properties sparkProperties = new Properties();",
                "+    String sparkMaster = getSparkMaster(properties);",
                "+    for (String key : properties.stringPropertyNames()) {",
                "+      if (RemoteInterpreterUtils.isEnvString(key)) {",
                "+        env.put(key, properties.getProperty(key));",
                "+      }",
                "+      if (isSparkConf(key, properties.getProperty(key))) {",
                "+        sparkProperties.setProperty(key, toShellFormat(properties.getProperty(key)));",
                "+      }",
                "+    }",
                "+",
                "+    setupPropertiesForPySpark(sparkProperties);",
                "+    setupPropertiesForSparkR(sparkProperties);",
                "+    if (isYarnMode() && getDeployMode().equals(\"cluster\")) {",
                "+      env.put(\"ZEPPELIN_SPARK_YARN_CLUSTER\", \"true\");",
                "+    }",
                "+",
                "+    StringBuilder sparkConfBuilder = new StringBuilder();",
                "+    if (sparkMaster != null) {",
                "+      sparkConfBuilder.append(\" --master \" + sparkMaster);",
                "+    }",
                "+    if (isYarnMode() && getDeployMode().equals(\"cluster\")) {",
                "+      sparkConfBuilder.append(\" --files \" + zConf.getConfDir() + \"/log4j_yarn_cluster.properties\");",
                "+    }",
                "+    for (String name : sparkProperties.stringPropertyNames()) {",
                "+      sparkConfBuilder.append(\" --conf \" + name + \"=\" + sparkProperties.getProperty(name));",
                "+    }",
                "+",
                "+    env.put(\"ZEPPELIN_SPARK_CONF\", sparkConfBuilder.toString());",
                "+",
                "+    // set these env in the order of",
                "+    // 1. interpreter-setting",
                "+    // 2. zeppelin-env.sh",
                "+    // It is encouraged to set env in interpreter setting, but just for backward compatability,",
                "+    // we also fallback to zeppelin-env.sh if it is not specified in interpreter setting.",
                "+    for (String envName : new String[]{\"SPARK_HOME\", \"SPARK_CONF_DIR\", \"HADOOP_CONF_DIR\"})  {",
                "+      String envValue = getEnv(envName);",
                "+      if (envValue != null) {",
                "+        env.put(envName, envValue);",
                "+      }",
                "+    }",
                "+    LOGGER.debug(\"buildEnvFromProperties: \" + env);",
                "+    return env;",
                "+",
                "+  }",
                "+",
                "+",
                "+  /**",
                "+   * get environmental variable in the following order",
                "+   *",
                "+   * 1. interpreter setting",
                "+   * 2. zeppelin-env.sh",
                "+   *",
                "+   */",
                "+  private String getEnv(String envName) {",
                "+    String env = properties.getProperty(envName);",
                "+    if (env == null) {",
                "+      env = System.getenv(envName);",
                "+    }",
                "+    return env;",
                "+  }",
                "+",
                "+  private boolean isSparkConf(String key, String value) {",
                "+    return !StringUtils.isEmpty(key) && key.startsWith(\"spark.\") && !StringUtils.isEmpty(value);",
                "+  }",
                "+",
                "+  private void setupPropertiesForPySpark(Properties sparkProperties) {",
                "+    if (isYarnMode()) {",
                "+      sparkProperties.setProperty(\"spark.yarn.isPython\", \"true\");",
                "+    }",
                "+  }",
                "+",
                "+  private void mergeSparkProperty(Properties sparkProperties, String propertyName,",
                "+                                  String propertyValue) {",
                "+    if (sparkProperties.containsKey(propertyName)) {",
                "+      String oldPropertyValue = sparkProperties.getProperty(propertyName);",
                "+      sparkProperties.setProperty(propertyName, oldPropertyValue + \",\" + propertyValue);",
                "+    } else {",
                "+      sparkProperties.setProperty(propertyName, propertyValue);",
                "+    }",
                "+  }",
                "+",
                "+  private void setupPropertiesForSparkR(Properties sparkProperties) {",
                "+    String sparkHome = getEnv(\"SPARK_HOME\");",
                "+    File sparkRBasePath = null;",
                "+    if (sparkHome == null) {",
                "+      if (!getSparkMaster(properties).startsWith(\"local\")) {",
                "+        throw new RuntimeException(\"SPARK_HOME is not specified in interpreter-setting\" +",
                "+            \" for non-local mode, if you specify it in zeppelin-env.sh, please move that into \" +",
                "+            \" interpreter setting\");",
                "+      }",
                "+      String zeppelinHome = zConf.getString(ZeppelinConfiguration.ConfVars.ZEPPELIN_HOME);",
                "+      sparkRBasePath = new File(zeppelinHome,",
                "+          \"interpreter\" + File.separator + \"spark\" + File.separator + \"R\");",
                "+    } else {",
                "+      sparkRBasePath = new File(sparkHome, \"R\" + File.separator + \"lib\");",
                "+    }",
                "+",
                "+    File sparkRPath = new File(sparkRBasePath, \"sparkr.zip\");",
                "+    if (sparkRPath.exists() && sparkRPath.isFile()) {",
                "+      mergeSparkProperty(sparkProperties, \"spark.yarn.dist.archives\", sparkRPath.getAbsolutePath());",
                "+    } else {",
                "+      LOGGER.warn(\"sparkr.zip is not found, SparkR may not work.\");",
                "+    }",
                "+  }",
                "+",
                "+  /**",
                "+   * Order to look for spark master",
                "+   * 1. master in interpreter setting",
                "+   * 2. spark.master interpreter setting",
                "+   * 3. use local[*]",
                "+   * @param properties",
                "+   * @return",
                "+   */",
                "+  private String getSparkMaster(Properties properties) {",
                "+    String master = properties.getProperty(\"master\");",
                "+    if (master == null) {",
                "+      master = properties.getProperty(\"spark.master\");",
                "+      if (master == null) {",
                "+        master = \"local[*]\";",
                "+      }",
                "+    }",
                "+    return master;",
                "+  }",
                "+",
                "+  private String getDeployMode() {",
                "+    String master = getSparkMaster(properties);",
                "+    if (master.equals(\"yarn-client\")) {",
                "+      return \"client\";",
                "+    } else if (master.equals(\"yarn-cluster\")) {",
                "+      return \"cluster\";",
                "+    } else if (master.startsWith(\"local\")) {",
                "+      return \"client\";",
                "+    } else {",
                "+      String deployMode = properties.getProperty(\"spark.submit.deployMode\");",
                "+      if (deployMode == null) {",
                "+        throw new RuntimeException(\"master is set as yarn, but spark.submit.deployMode \" +",
                "+            \"is not specified\");",
                "+      }",
                "+      if (!deployMode.equals(\"client\") && !deployMode.equals(\"cluster\")) {",
                "+        throw new RuntimeException(\"Invalid value for spark.submit.deployMode: \" + deployMode);",
                "+      }",
                "+      return deployMode;",
                "+    }",
                "+  }",
                "+",
                "+  private boolean isYarnMode() {",
                "+    return getSparkMaster(properties).startsWith(\"yarn\");",
                "+  }",
                "+",
                "+  private String toShellFormat(String value) {",
                "+    if (value.contains(\"\\'\") && value.contains(\"\\\"\")) {",
                "+      throw new RuntimeException(\"Spark property value could not contain both \\\" and '\");",
                "+    } else if (value.contains(\"\\'\")) {",
                "+      return \"\\\"\" + value + \"\\\"\";",
                "+    } else {",
                "+      return \"\\'\" + value + \"\\'\";",
                "+    }",
                "+  }",
                "+",
                "+}",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/InterpreterContextRunnerPool.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/InterpreterContextRunnerPool.java",
                "index 064abd537..765382457 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/InterpreterContextRunnerPool.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/InterpreterContextRunnerPool.java",
                "@@ -84,3 +84,3 @@ public class InterpreterContextRunnerPool {",
                "-      throw new InterpreterException(\"Can not run paragraph \" + paragraphId + \" on \" + noteId);",
                "+      throw new RuntimeException(\"Can not run paragraph \" + paragraphId + \" on \" + noteId);",
                "     }",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "index 54bf9e12d..b479799e2 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "@@ -30,2 +30,3 @@ import org.apache.zeppelin.interpreter.InterpreterContext;",
                " import org.apache.zeppelin.interpreter.InterpreterContextRunner;",
                "+import org.apache.zeppelin.interpreter.InterpreterException;",
                " import org.apache.zeppelin.interpreter.InterpreterResult;",
                "@@ -44,2 +45,3 @@ import org.slf4j.LoggerFactory;",
                "+import java.io.IOException;",
                " import java.util.ArrayList;",
                "@@ -92,3 +94,3 @@ public class RemoteInterpreter extends Interpreter {",
                "-  public synchronized RemoteInterpreterProcess getOrCreateInterpreterProcess() {",
                "+  public synchronized RemoteInterpreterProcess getOrCreateInterpreterProcess() throws IOException {",
                "     if (this.interpreterProcess != null) {",
                "@@ -115,3 +117,3 @@ public class RemoteInterpreter extends Interpreter {",
                "   @Override",
                "-  public void open() {",
                "+  public void open() throws InterpreterException {",
                "     synchronized (this) {",
                "@@ -125,3 +127,7 @@ public class RemoteInterpreter extends Interpreter {",
                "                                         .getOrCreateSession(userName, sessionId)) {",
                "-          ((RemoteInterpreter) interpreter).internal_create();",
                "+          try {",
                "+            ((RemoteInterpreter) interpreter).internal_create();",
                "+          } catch (IOException e) {",
                "+            throw new InterpreterException(e);",
                "+          }",
                "         }",
                "@@ -149,3 +155,3 @@ public class RemoteInterpreter extends Interpreter {",
                "-  private void internal_create() {",
                "+  private void internal_create() throws IOException {",
                "     synchronized (this) {",
                "@@ -158,3 +164,3 @@ public class RemoteInterpreter extends Interpreter {",
                "             client.createInterpreter(getInterpreterGroup().getId(), sessionId,",
                "-                className, (Map) property, userName);",
                "+                className, (Map) getProperties(), userName);",
                "             return null;",
                "@@ -169,5 +175,10 @@ public class RemoteInterpreter extends Interpreter {",
                "   @Override",
                "-  public void close() {",
                "+  public void close() throws InterpreterException {",
                "     if (isOpened) {",
                "-      RemoteInterpreterProcess interpreterProcess = getOrCreateInterpreterProcess();",
                "+      RemoteInterpreterProcess interpreterProcess = null;",
                "+      try {",
                "+        interpreterProcess = getOrCreateInterpreterProcess();",
                "+      } catch (IOException e) {",
                "+        throw new InterpreterException(e);",
                "+      }",
                "       interpreterProcess.callRemoteFunction(new RemoteInterpreterProcess.RemoteFunction<Void>() {",
                "@@ -186,3 +197,4 @@ public class RemoteInterpreter extends Interpreter {",
                "   @Override",
                "-  public InterpreterResult interpret(final String st, final InterpreterContext context) {",
                "+  public InterpreterResult interpret(final String st, final InterpreterContext context)",
                "+      throws InterpreterException {",
                "     if (LOGGER.isDebugEnabled()) {",
                "@@ -192,3 +204,8 @@ public class RemoteInterpreter extends Interpreter {",
                "     final FormType form = getFormType();",
                "-    RemoteInterpreterProcess interpreterProcess = getOrCreateInterpreterProcess();",
                "+    RemoteInterpreterProcess interpreterProcess = null;",
                "+    try {",
                "+      interpreterProcess = getOrCreateInterpreterProcess();",
                "+    } catch (IOException e) {",
                "+      throw new InterpreterException(e);",
                "+    }",
                "     InterpreterContextRunnerPool interpreterContextRunnerPool = interpreterProcess",
                "@@ -240,3 +257,3 @@ public class RemoteInterpreter extends Interpreter {",
                "   @Override",
                "-  public void cancel(final InterpreterContext context) {",
                "+  public void cancel(final InterpreterContext context) throws InterpreterException {",
                "     if (!isOpened) {",
                "@@ -245,3 +262,8 @@ public class RemoteInterpreter extends Interpreter {",
                "     }",
                "-    RemoteInterpreterProcess interpreterProcess = getOrCreateInterpreterProcess();",
                "+    RemoteInterpreterProcess interpreterProcess = null;",
                "+    try {",
                "+      interpreterProcess = getOrCreateInterpreterProcess();",
                "+    } catch (IOException e) {",
                "+      throw new InterpreterException(e);",
                "+    }",
                "     interpreterProcess.callRemoteFunction(new RemoteInterpreterProcess.RemoteFunction<Void>() {",
                "@@ -256,3 +278,3 @@ public class RemoteInterpreter extends Interpreter {",
                "   @Override",
                "-  public FormType getFormType() {",
                "+  public FormType getFormType() throws InterpreterException {",
                "     if (formType != null) {",
                "@@ -267,3 +289,8 @@ public class RemoteInterpreter extends Interpreter {",
                "     }",
                "-    RemoteInterpreterProcess interpreterProcess = getOrCreateInterpreterProcess();",
                "+    RemoteInterpreterProcess interpreterProcess = null;",
                "+    try {",
                "+      interpreterProcess = getOrCreateInterpreterProcess();",
                "+    } catch (IOException e) {",
                "+      throw new InterpreterException(e);",
                "+    }",
                "     FormType type = interpreterProcess.callRemoteFunction(",
                "@@ -279,4 +306,5 @@ public class RemoteInterpreter extends Interpreter {",
                "+",
                "   @Override",
                "-  public int getProgress(final InterpreterContext context) {",
                "+  public int getProgress(final InterpreterContext context) throws InterpreterException {",
                "     if (!isOpened) {",
                "@@ -285,3 +313,8 @@ public class RemoteInterpreter extends Interpreter {",
                "     }",
                "-    RemoteInterpreterProcess interpreterProcess = getOrCreateInterpreterProcess();",
                "+    RemoteInterpreterProcess interpreterProcess = null;",
                "+    try {",
                "+      interpreterProcess = getOrCreateInterpreterProcess();",
                "+    } catch (IOException e) {",
                "+      throw new InterpreterException(e);",
                "+    }",
                "     return interpreterProcess.callRemoteFunction(",
                "@@ -298,3 +331,4 @@ public class RemoteInterpreter extends Interpreter {",
                "   public List<InterpreterCompletion> completion(final String buf, final int cursor,",
                "-                                                final InterpreterContext interpreterContext) {",
                "+                                                final InterpreterContext interpreterContext)",
                "+      throws InterpreterException {",
                "     if (!isOpened) {",
                "@@ -303,3 +337,8 @@ public class RemoteInterpreter extends Interpreter {",
                "     }",
                "-    RemoteInterpreterProcess interpreterProcess = getOrCreateInterpreterProcess();",
                "+    RemoteInterpreterProcess interpreterProcess = null;",
                "+    try {",
                "+      interpreterProcess = getOrCreateInterpreterProcess();",
                "+    } catch (IOException e) {",
                "+      throw new InterpreterException(e);",
                "+    }",
                "     return interpreterProcess.callRemoteFunction(",
                "@@ -319,3 +358,8 @@ public class RemoteInterpreter extends Interpreter {",
                "     }",
                "-    RemoteInterpreterProcess interpreterProcess = getOrCreateInterpreterProcess();",
                "+    RemoteInterpreterProcess interpreterProcess = null;",
                "+    try {",
                "+      interpreterProcess = getOrCreateInterpreterProcess();",
                "+    } catch (IOException e) {",
                "+      throw new RuntimeException(e);",
                "+    }",
                "     return interpreterProcess.callRemoteFunction(",
                "@@ -333,3 +377,3 @@ public class RemoteInterpreter extends Interpreter {",
                "     int maxConcurrency = Integer.parseInt(",
                "-        property.getProperty(\"zeppelin.interpreter.max.poolsize\",",
                "+        getProperty(\"zeppelin.interpreter.max.poolsize\",",
                "             ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_MAX_POOL_SIZE.getIntValue() + \"\"));",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterManagedProcess.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterManagedProcess.java",
                "index d21a9623d..6e26e58f8 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterManagedProcess.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterManagedProcess.java",
                "@@ -19,2 +19,3 @@ package org.apache.zeppelin.interpreter.remote;",
                "+import com.google.common.annotations.VisibleForTesting;",
                " import org.apache.commons.exec.CommandLine;",
                "@@ -75,7 +76,4 @@ public class RemoteInterpreterManagedProcess extends RemoteInterpreterProcess",
                "       int connectTimeout,",
                "-      RemoteInterpreterProcessListener listener,",
                "-      ApplicationEventListener appListener,",
                "       String interpreterGroupName) {",
                "-    super(new RemoteInterpreterEventPoller(listener, appListener),",
                "-        connectTimeout);",
                "+    super(connectTimeout);",
                "     this.interpreterRunner = intpRunner;",
                "@@ -88,19 +86,2 @@ public class RemoteInterpreterManagedProcess extends RemoteInterpreterProcess",
                "-  RemoteInterpreterManagedProcess(String intpRunner,",
                "-                                  String intpDir,",
                "-                                  String localRepoDir,",
                "-                                  Map<String, String> env,",
                "-                                  RemoteInterpreterEventPoller remoteInterpreterEventPoller,",
                "-                                  int connectTimeout,",
                "-                                  String interpreterGroupName) {",
                "-    super(remoteInterpreterEventPoller,",
                "-        connectTimeout);",
                "-    this.interpreterRunner = intpRunner;",
                "-    this.portRange = \":\";",
                "-    this.env = env;",
                "-    this.interpreterDir = intpDir;",
                "-    this.localRepoDir = localRepoDir;",
                "-    this.interpreterGroupName = interpreterGroupName;",
                "-  }",
                "-",
                "   @Override",
                "@@ -126,3 +107,3 @@ public class RemoteInterpreterManagedProcess extends RemoteInterpreterProcess",
                "     } catch (IOException e1) {",
                "-      throw new InterpreterException(e1);",
                "+      throw new RuntimeException(e1);",
                "     }",
                "@@ -208,3 +189,3 @@ public class RemoteInterpreterManagedProcess extends RemoteInterpreterProcess",
                "       running.set(false);",
                "-      throw new InterpreterException(e);",
                "+      throw new RuntimeException(e);",
                "     }",
                "@@ -219,3 +200,3 @@ public class RemoteInterpreterManagedProcess extends RemoteInterpreterProcess",
                "         callbackServer.stop();",
                "-        throw new InterpreterException(\"Cannot run interpreter\");",
                "+        throw new RuntimeException(new String(cmdOut.toByteArray()));",
                "       }",
                "@@ -229,3 +210,3 @@ public class RemoteInterpreterManagedProcess extends RemoteInterpreterProcess",
                "     // shutdown EventPoller first.",
                "-    this.remoteInterpreterEventPoller.shutdown();",
                "+    this.getRemoteInterpreterEventPoller().shutdown();",
                "     if (callbackServer.isServing()) {",
                "@@ -268,2 +249,27 @@ public class RemoteInterpreterManagedProcess extends RemoteInterpreterProcess",
                "+  @VisibleForTesting",
                "+  public Map<String, String> getEnv() {",
                "+    return env;",
                "+  }",
                "+",
                "+  @VisibleForTesting",
                "+  public String getLocalRepoDir() {",
                "+    return localRepoDir;",
                "+  }",
                "+",
                "+  @VisibleForTesting",
                "+  public String getInterpreterDir() {",
                "+    return interpreterDir;",
                "+  }",
                "+",
                "+  @VisibleForTesting",
                "+  public String getInterpreterGroupName() {",
                "+    return interpreterGroupName;",
                "+  }",
                "+",
                "+  @VisibleForTesting",
                "+  public String getInterpreterRunner() {",
                "+    return interpreterRunner;",
                "+  }",
                "+",
                "   public boolean isRunning() {",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcess.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcess.java",
                "index e45f15b10..88cc4894b 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcess.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcess.java",
                "@@ -23,2 +23,3 @@ import org.apache.zeppelin.helium.ApplicationEventListener;",
                " import org.apache.zeppelin.interpreter.InterpreterException;",
                "+import org.apache.zeppelin.interpreter.launcher.InterpreterClient;",
                " import org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService.Client;",
                "@@ -30,3 +31,3 @@ import org.slf4j.LoggerFactory;",
                "  */",
                "-public abstract class RemoteInterpreterProcess {",
                "+public abstract class RemoteInterpreterProcess implements InterpreterClient {",
                "   private static final Logger logger = LoggerFactory.getLogger(RemoteInterpreterProcess.class);",
                "@@ -34,3 +35,3 @@ public abstract class RemoteInterpreterProcess {",
                "   private GenericObjectPool<Client> clientPool;",
                "-  protected final RemoteInterpreterEventPoller remoteInterpreterEventPoller;",
                "+  private RemoteInterpreterEventPoller remoteInterpreterEventPoller;",
                "   private final InterpreterContextRunnerPool interpreterContextRunnerPool;",
                "@@ -39,14 +40,4 @@ public abstract class RemoteInterpreterProcess {",
                "   public RemoteInterpreterProcess(",
                "-      int connectTimeout,",
                "-      RemoteInterpreterProcessListener listener,",
                "-      ApplicationEventListener appListener) {",
                "-    this(new RemoteInterpreterEventPoller(listener, appListener),",
                "-        connectTimeout);",
                "-    this.remoteInterpreterEventPoller.setInterpreterProcess(this);",
                "-  }",
                "-",
                "-  RemoteInterpreterProcess(RemoteInterpreterEventPoller remoteInterpreterEventPoller,",
                "-                           int connectTimeout) {",
                "+      int connectTimeout) {",
                "     this.interpreterContextRunnerPool = new InterpreterContextRunnerPool();",
                "-    this.remoteInterpreterEventPoller = remoteInterpreterEventPoller;",
                "     this.connectTimeout = connectTimeout;",
                "@@ -58,2 +49,6 @@ public abstract class RemoteInterpreterProcess {",
                "+  public void setRemoteInterpreterEventPoller(RemoteInterpreterEventPoller eventPoller) {",
                "+    this.remoteInterpreterEventPoller = eventPoller;",
                "+  }",
                "+",
                "   public abstract String getHost();",
                "@@ -149,5 +144,5 @@ public abstract class RemoteInterpreterProcess {",
                "       broken = true;",
                "-      throw new InterpreterException(e);",
                "+      throw new RuntimeException(e);",
                "     } catch (Exception e1) {",
                "-      throw new InterpreterException(e1);",
                "+      throw new RuntimeException(e1);",
                "     } finally {",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterRunningProcess.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterRunningProcess.java",
                "index bb176bea5..d8715a0d4 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterRunningProcess.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterRunningProcess.java",
                "@@ -32,4 +32,2 @@ public class RemoteInterpreterRunningProcess extends RemoteInterpreterProcess {",
                "       int connectTimeout,",
                "-      RemoteInterpreterProcessListener listener,",
                "-      ApplicationEventListener appListener,",
                "       String host,",
                "@@ -37,3 +35,3 @@ public class RemoteInterpreterRunningProcess extends RemoteInterpreterProcess {",
                "   ) {",
                "-    super(connectTimeout, listener, appListener);",
                "+    super(connectTimeout);",
                "     this.host = host;",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "index 03c50468c..b5dda6734 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "@@ -629,3 +629,3 @@ public class Note implements ParagraphJobListener, JsonSerializable {",
                "           p.getJobName() + \"'s Interpreter \" + requiredReplName + \" not found\";",
                "-      InterpreterException intpException = new InterpreterException(intpExceptionMsg);",
                "+      RuntimeException intpException = new RuntimeException(intpExceptionMsg);",
                "       InterpreterResult intpResult =",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java",
                "index 4652fcd80..77fd04ca7 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java",
                "@@ -894,3 +894,7 @@ public class Notebook implements NoteEventListener {",
                "             .getInterpreterSettings(note.getId())) {",
                "-          notebook.getInterpreterSettingManager().restart(setting.getId());",
                "+          try {",
                "+            notebook.getInterpreterSettingManager().restart(setting.getId());",
                "+          } catch (InterpreterException e) {",
                "+            logger.error(\"Fail to restart interpreter: \" + setting.getId(), e);",
                "+          }",
                "         }",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "index 68ce794b9..701943a82 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "@@ -314,11 +314,10 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "     String body = getScriptBody(trimmedBuffer);",
                "-    Interpreter repl = getRepl(replName);",
                "-    if (repl == null) {",
                "-      return null;",
                "-    }",
                "-",
                "     InterpreterContext interpreterContext = getInterpreterContextWithoutRunner(null);",
                "-    List completion = repl.completion(body, cursor, interpreterContext);",
                "-    return completion;",
                "+    try {",
                "+      Interpreter repl = getRepl(replName);",
                "+      return repl.completion(body, cursor, interpreterContext);",
                "+    } catch (InterpreterException e) {",
                "+      throw new RuntimeException(\"Fail to get completion\", e);",
                "+    }",
                "   }",
                "@@ -364,7 +363,11 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "     String replName = getRequiredReplName();",
                "-    Interpreter repl = getRepl(replName);",
                "-    if (repl != null) {",
                "+",
                "+    try {",
                "+      Interpreter repl = getRepl(replName);",
                "+      if (repl == null) {",
                "+        return 0;",
                "+      }",
                "       return repl.getProgress(getInterpreterContext(null));",
                "-    } else {",
                "-      return 0;",
                "+    } catch (InterpreterException e) {",
                "+      throw new RuntimeException(\"Fail to get progress\", e);",
                "     }",
                "@@ -496,6 +499,4 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "     if (repl == null) {",
                "-      // when interpreters are already destroyed",
                "       return true;",
                "     }",
                "-",
                "     Scheduler scheduler = repl.getScheduler();",
                "@@ -509,3 +510,7 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "     } else {",
                "-      repl.cancel(getInterpreterContextWithoutRunner(null));",
                "+      try {",
                "+        repl.cancel(getInterpreterContextWithoutRunner(null));",
                "+      } catch (InterpreterException e) {",
                "+        throw new RuntimeException(e);",
                "+      }",
                "     }",
                "@@ -740,8 +745,3 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "   private boolean isValidInterpreter(String replName) {",
                "-    try {",
                "-      return factory.getInterpreter(user, note.getId(), replName) != null;",
                "-    } catch (InterpreterException e) {",
                "-      // ignore this exception, it would be recaught when running paragraph.",
                "-      return false;",
                "-    }",
                "+    return factory.getInterpreter(user, note.getId(), replName) != null;",
                "   }"
            ],
            "changed_files": [
                "bin/common.sh",
                "bin/interpreter.sh",
                "elasticsearch/src/main/java/org/apache/zeppelin/elasticsearch/ElasticsearchInterpreter.java",
                "file/src/main/java/org/apache/zeppelin/file/FileInterpreter.java",
                "file/src/main/java/org/apache/zeppelin/file/HDFSFileInterpreter.java",
                "flink/src/main/java/org/apache/zeppelin/flink/FlinkInterpreter.java",
                "groovy/src/main/java/org/apache/zeppelin/groovy/GObject.java",
                "groovy/src/main/java/org/apache/zeppelin/groovy/GroovyInterpreter.java",
                "hbase/src/main/java/org/apache/zeppelin/hbase/HbaseInterpreter.java",
                "helium-dev/src/main/java/org/apache/zeppelin/helium/DevInterpreter.java",
                "ignite/src/main/java/org/apache/zeppelin/ignite/IgniteSqlInterpreter.java",
                "jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java",
                "livy/src/main/java/org/apache/zeppelin/livy/BaseLivyInterpreter.java",
                "livy/src/main/java/org/apache/zeppelin/livy/LivySparkSQLInterpreter.java",
                "pig/src/main/java/org/apache/zeppelin/pig/PigInterpreter.java",
                "pig/src/main/java/org/apache/zeppelin/pig/PigQueryInterpreter.java",
                "python/src/main/java/org/apache/zeppelin/python/IPythonInterpreter.java",
                "python/src/main/java/org/apache/zeppelin/python/PythonCondaInterpreter.java",
                "python/src/main/java/org/apache/zeppelin/python/PythonDockerInterpreter.java",
                "python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java",
                "python/src/main/java/org/apache/zeppelin/python/PythonInterpreterPandasSql.java",
                "scalding/src/main/java/org/apache/zeppelin/scalding/ScaldingInterpreter.java",
                "shell/src/main/java/org/apache/zeppelin/shell/ShellInterpreter.java",
                "spark/src/main/java/org/apache/zeppelin/spark/IPySparkInterpreter.java",
                "spark/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java",
                "spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java",
                "spark/src/main/java/org/apache/zeppelin/spark/SparkRInterpreter.java",
                "spark/src/main/java/org/apache/zeppelin/spark/SparkSqlInterpreter.java",
                "spark/src/main/java/org/apache/zeppelin/spark/SparkZeppelinContext.java",
                "spark/src/main/java/org/apache/zeppelin/spark/ZeppelinR.java",
                "zeppelin-interpreter/pom.xml",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/BaseZeppelinContext.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/ClassloaderInterpreter.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/Interpreter.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterException.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/LazyOpenInterpreter.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/launcher/InterpreterClient.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/launcher/InterpreterLaunchContext.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/launcher/InterpreterLauncher.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterContextRunner.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java",
                "zeppelin-server/src/main/java/org/apache/zeppelin/rest/InterpreterRestApi.java",
                "zeppelin-zengine/pom.xml",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroup.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/ShellScriptLauncher.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/SparkInterpreterLauncher.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/InterpreterContextRunnerPool.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterManagedProcess.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcess.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterRunningProcess.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-2685": ""
            },
            "ghissue_refs": {
                "2577": "ZEPPELIN-2685. Improvement on Interpreter class #2592",
                "2592": "[HOTFIX] fix build spark and R interpreters #2630 [HotFix] - Incorrect interpreter dir #2632"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: allow",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: paragraph",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-2685",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2577, 2592",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "84cb4b5fb9b7c19bbaac367f8d833ef66a06b0f0",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1508317679,
            "hunks": 9,
            "message": "ZEPPELIN-277 Add Tab as Autocomplete for Notebook non-md paragraphs ### What is this PR for? This PR will add tab as auto complete invoker if paragraph is non-md and user has not pressed the tab as a first character in the line ### What type of PR is it? [Improvement] ### What is the Jira issue? * https://issues.apache.org/jira/browse/ZEPPELIN-277 * https://issues.apache.org/jira/browse/ZEPPELIN-2736 ### How should this be tested? - Build: mvn clean package -Denforcer.skip -DskipTests -Drat.skip - Open a paragraph - Press tab with following options: first character, after space ### Questions: * Does the licenses files need an update? no * Is there breaking changes for older versions? no * Does this needs documentation? no Author: Malay Majithia <malay.majithia@gmail.com> Author: Lee moon soo <moon@apache.org> Closes #2542 from malayhm/ZEPPELIN-277 and squashes the following commits: 436f22d [Malay Majithia] Added Tab auto completion flag for python sql and r b37e084 [Malay Majithia] Fixed lint error 18fc814 [Malay Majithia] Merge branch 'master' into ZEPPELIN-277 b09730e [Malay Majithia] Merge branch 'master' into ZEPPELIN-277 63d69e1 [Malay Majithia] Merge branch 'ZEPPELIN-277' of github.com:malayhm/zeppelin into ZEPPELIN-277 a75f0fe [Malay Majithia] Improved the first character check logic 2ec879d [Malay Majithia] Merge pull request #1 from Leemoonsoo/ZEPPELIN-277-completion-key 77afdba [Lee moon soo] fix style 77b47b6 [Malay Majithia] If all the previous line characters are tab, don't show autocomplete on tab 46f612a [Malay Majithia] ZEPPELIN-277 Add Tab as Autocomplete for Notebook non-md paragraphs 865c0a6 [Lee moon soo] Set python and spark interpreter completionKey 05d5860 [Lee moon soo] Update doc 973068b [Lee moon soo] apply tab completion based on editor.completionKey 5f4d81c [Malay Majithia] If all the previous line characters are tab, don't show autocomplete on tab 655ba88 [Malay Majithia] ZEPPELIN-277 Add Tab as Autocomplete for Notebook non-md paragraphs",
            "diff": [
                "diff --git a/python/src/main/resources/interpreter-setting.json b/python/src/main/resources/interpreter-setting.json",
                "index bc1a746ef..d6b353803 100644",
                "--- a/python/src/main/resources/interpreter-setting.json",
                "+++ b/python/src/main/resources/interpreter-setting.json",
                "@@ -46,3 +46,4 @@",
                "       \"language\": \"python\",",
                "-      \"editOnDblClick\": false",
                "+      \"editOnDblClick\": false,",
                "+      \"completionKey\": \"TAB\"",
                "     }",
                "@@ -57,3 +58,4 @@",
                "       \"language\": \"sql\",",
                "-      \"editOnDblClick\": false",
                "+      \"editOnDblClick\": false,",
                "+      \"completionKey\": \"TAB\"",
                "     }",
                "diff --git a/r/src/main/resources/interpreter-setting.json b/r/src/main/resources/interpreter-setting.json",
                "index b7dcaf7fa..c5997a344 100644",
                "--- a/r/src/main/resources/interpreter-setting.json",
                "+++ b/r/src/main/resources/interpreter-setting.json",
                "@@ -26,2 +26,7 @@",
                "       }",
                "+    },",
                "+    \"editor\": {",
                "+      \"language\": \"r\",",
                "+      \"editOnDblClick\": false,",
                "+      \"completionKey\": \"TAB\"",
                "     }",
                "diff --git a/spark/src/main/resources/interpreter-setting.json b/spark/src/main/resources/interpreter-setting.json",
                "index 7c13c49a1..4aeda6c9d 100644",
                "--- a/spark/src/main/resources/interpreter-setting.json",
                "+++ b/spark/src/main/resources/interpreter-setting.json",
                "@@ -73,3 +73,4 @@",
                "       \"language\": \"scala\",",
                "-      \"editOnDblClick\": false",
                "+      \"editOnDblClick\": false,",
                "+      \"completionKey\": \"TAB\"",
                "     }",
                "@@ -112,3 +113,4 @@",
                "       \"language\": \"sql\",",
                "-      \"editOnDblClick\": false",
                "+      \"editOnDblClick\": false,",
                "+      \"completionKey\": \"TAB\"",
                "     }",
                "@@ -137,3 +139,4 @@",
                "       \"language\": \"scala\",",
                "-      \"editOnDblClick\": false",
                "+      \"editOnDblClick\": false,",
                "+      \"completionKey\": \"TAB\"",
                "     }",
                "@@ -162,3 +165,4 @@",
                "       \"language\": \"python\",",
                "-      \"editOnDblClick\": false",
                "+      \"editOnDblClick\": false,",
                "+      \"completionKey\": \"TAB\"",
                "     }",
                "diff --git a/zeppelin-web/src/app/notebook/paragraph/paragraph.controller.js b/zeppelin-web/src/app/notebook/paragraph/paragraph.controller.js",
                "index edc808f21..7d95d3b32 100644",
                "--- a/zeppelin-web/src/app/notebook/paragraph/paragraph.controller.js",
                "+++ b/zeppelin-web/src/app/notebook/paragraph/paragraph.controller.js",
                "@@ -187,2 +187,7 @@ function ParagraphCtrl ($scope, $rootScope, $route, $window, $routeParams, $loca",
                "+  const isTabCompletion = function() {",
                "+    const completionKey = $scope.paragraph.config.editorSetting.completionKey",
                "+    return completionKey === 'TAB'",
                "+  }",
                "+",
                "   $scope.$on('updateParagraphOutput', function (event, data) {",
                "@@ -853,2 +858,29 @@ function ParagraphCtrl ($scope, $rootScope, $route, $window, $routeParams, $loca",
                "+      // Show autocomplete on tab",
                "+      $scope.editor.commands.addCommand({",
                "+        name: 'tabAutocomplete',",
                "+        bindKey: {",
                "+          win: 'tab',",
                "+          mac: 'tab',",
                "+          sender: 'editor|cli'",
                "+        },",
                "+        exec: function(env, args, request) {",
                "+          let iCursor = $scope.editor.getCursorPosition()",
                "+          let currentLine = $scope.editor.session.getLine(iCursor.row)",
                "+          let isAllTabs = currentLine.substring(0, iCursor.column - 1).split('').every(function(char) {",
                "+            return (char === '\\t' || char === ' ')",
                "+          })",
                "+",
                "+          // If user has pressed tab on first line char or if isTabCompletion() is false, keep existing behavior",
                "+          // If user has pressed tab anywhere in between and editor mode is not %md, show autocomplete",
                "+          if (!isAllTabs && iCursor.column && isTabCompletion()) {",
                "+            $scope.editor.execCommand('startAutocomplete')",
                "+          } else {",
                "+            ace.config.loadModule('ace/ext/language_tools', function () {",
                "+              $scope.editor.insertSnippet('\\t')",
                "+            })",
                "+          }",
                "+        }",
                "+      })",
                "+",
                "       let keyBindingEditorFocusAction = function (scrollValue) {"
            ],
            "changed_files": [
                "python/src/main/resources/interpreter-setting.json",
                "r/src/main/resources/interpreter-setting.json",
                "spark/src/main/resources/interpreter-setting.json",
                "zeppelin-web/src/app/notebook/paragraph/paragraph.controller.js"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-277": "",
                "ZEPPELIN-2736": ""
            },
            "ghissue_refs": {
                "2542": "",
                "1": "Sync versions with spark ZEPL/zeppelin#394 Buffer append output results + fix extra incorrect results #1283 [Zeppelin-1496] Apply Zeppelin-Web Good Practice Guide #1 to the code #1469 ZEPPELIN-1692: Ability to access Spark jobs UI from the paragraph #1663 [ZEPPELIN-3778] Cluster synchronize notes & authorization #3387"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: paragraph, user",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: paragraph",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-277, ZEPPELIN-2736",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2542, 1",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6caf587e17fb6858e769fb2121b8cd66090ff759",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1513767082,
            "hunks": 21,
            "message": "[ZEPPELIN-3090] Support KnoxSSO Authentication ### What is this PR for? Zeppelin to support KnoxSSO Authentication method. ### What type of PR is it? [Bug Fix | Improvement] ### What is the Jira issue? * [https://issues.apache.org/jira/browse/ZEPPELIN-3090](https://issues.apache.org/jira/browse/ZEPPELIN-3090) ### How should this be tested? This will require new shiro conf ``` knoxJwtRealm = org.apache.zeppelin.realm.jwt.KnoxJwtRealm knoxJwtRealm.providerUrl = https://domain.example.com/ knoxJwtRealm.login = gateway/knoxsso/knoxauth/login.html knoxJwtRealm.logout = gateway/knoxssout/api/v1/webssout knoxJwtRealm.redirectParam = originalUrl knoxJwtRealm.cookieName = hadoop-jwt knoxJwtRealm.publicKeyPath = /etc/zeppelin/conf/knox-sso.pem knoxJwtRealm.groupPrincipalMapping = group.principal.mapping knoxJwtRealm.principalMapping = principal.mapping ``` Refer screenshot section for demo ### Screenshots (if appropriate) ![after](https://user-images.githubusercontent.com/674497/33554955-ae8d1874-d924-11e7-88fa-0f06a1b28519.gif) ### Questions: * Does the licenses files need update? yes * Is there breaking changes for older versions? no * Does this needs documentation? yes Author: Prabhjyot Singh <prabhjyotsingh@gmail.com> Author: prabhjyotsingh <prabhjyotsingh@gmail.com> Closes #2694 from prabhjyotsingh/KNOX_SSO and squashes the following commits: 05ed844ac [Prabhjyot Singh] Add unit test case 187b5678f [Prabhjyot Singh] fix failing \"  PersonalizeActionsIT.testGraphAction:263 The output of graph mode is not changed\" test. 51f13521c [Prabhjyot Singh] Merge remote-tracking branch 'origin/master' into KNOX_SSO 153176450 [Prabhjyot Singh] Add more validation to KnoxAuthenticationFilter. 123349fc5 [Prabhjyot Singh] remove System.out.println, and some of the redundent lines, added more comment c79979acf [Prabhjyot Singh] Check for expired/deleted SSO cookie c9a137f76 [Prabhjyot Singh] Merge remote-tracking branch 'origin/master' into KNOX_SSO dbca0107a [Prabhjyot Singh] Add documentation for KNOX SSO 99541765d [Prabhjyot Singh] use default config 547c7b391 [Prabhjyot Singh] updating LICENSE 067a3e620 [prabhjyotsingh] fix \"javax.servlet.ServletException: java.lang.NullPointerException\" 564005ff5 [Prabhjyot Singh] remove \"hadoop-common.version\" dependency 355b475c5 [Prabhjyot Singh] knox sso",
            "diff": [
                "diff --git a/conf/shiro.ini.template b/conf/shiro.ini.template",
                "index b30635966..81b31a2b9 100644",
                "--- a/conf/shiro.ini.template",
                "+++ b/conf/shiro.ini.template",
                "@@ -58,2 +58,15 @@ user3 = password4, role2",
                "+## A same for configuring Knox SSO Realm",
                "+#knoxJwtRealm = org.apache.zeppelin.realm.jwt.KnoxJwtRealm",
                "+#knoxJwtRealm.providerUrl = https://domain.example.com/",
                "+#knoxJwtRealm.login = gateway/knoxsso/knoxauth/login.html",
                "+#knoxJwtRealm.logout = gateway/knoxssout/api/v1/webssout",
                "+#knoxJwtRealm.redirectParam = originalUrl",
                "+#knoxJwtRealm.cookieName = hadoop-jwt",
                "+#knoxJwtRealm.publicKeyPath = /etc/zeppelin/conf/knox-sso.pem",
                "+#",
                "+#knoxJwtRealm.groupPrincipalMapping = group.principal.mapping",
                "+#knoxJwtRealm.principalMapping = principal.mapping",
                "+#authc = org.apache.zeppelin.realm.jwt.KnoxAuthenticationFilter",
                "+",
                " sessionManager = org.apache.shiro.web.session.mgt.DefaultWebSessionManager",
                "diff --git a/zeppelin-server/pom.xml b/zeppelin-server/pom.xml",
                "index 925c637fc..296d58f01 100644",
                "--- a/zeppelin-server/pom.xml",
                "+++ b/zeppelin-server/pom.xml",
                "@@ -39,3 +39,2 @@",
                "     <jersey.version>2.22.2</jersey.version>",
                "-    <hadoop-common.version>2.6.0</hadoop-common.version>",
                "     <quartz.scheduler.version>2.2.1</quartz.scheduler.version>",
                "@@ -216,2 +215,8 @@",
                "+    <dependency>",
                "+      <groupId>com.nimbusds</groupId>",
                "+      <artifactId>nimbus-jose-jwt</artifactId>",
                "+      <version>4.41.2</version>",
                "+    </dependency>",
                "+",
                "     <dependency>",
                "diff --git a/zeppelin-server/src/main/java/org/apache/zeppelin/realm/jwt/JWTAuthenticationToken.java b/zeppelin-server/src/main/java/org/apache/zeppelin/realm/jwt/JWTAuthenticationToken.java",
                "new file mode 100644",
                "index 000000000..2214125c7",
                "--- /dev/null",
                "+++ b/zeppelin-server/src/main/java/org/apache/zeppelin/realm/jwt/JWTAuthenticationToken.java",
                "@@ -0,0 +1,59 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.zeppelin.realm.jwt;",
                "+",
                "+import org.apache.shiro.authc.AuthenticationToken;",
                "+",
                "+/**",
                "+ * Created for org.apache.zeppelin.server",
                "+ */",
                "+public class JWTAuthenticationToken implements AuthenticationToken {",
                "+",
                "+  private Object userId;",
                "+  private String token;",
                "+",
                "+  public JWTAuthenticationToken(Object userId, String token) {",
                "+    this.userId = userId;",
                "+    this.token = token;",
                "+  }",
                "+",
                "+  @Override",
                "+  public Object getPrincipal() {",
                "+    return getUserId();",
                "+  }",
                "+",
                "+  @Override",
                "+  public Object getCredentials() {",
                "+    return getToken();",
                "+  }",
                "+",
                "+  public Object getUserId() {",
                "+    return userId;",
                "+  }",
                "+",
                "+  public void setUserId(long userId) {",
                "+    this.userId = userId;",
                "+  }",
                "+",
                "+  public String getToken() {",
                "+    return token;",
                "+  }",
                "+",
                "+  public void setToken(String token) {",
                "+    this.token = token;",
                "+  }",
                "+}",
                "diff --git a/zeppelin-server/src/main/java/org/apache/zeppelin/realm/jwt/KnoxAuthenticationFilter.java b/zeppelin-server/src/main/java/org/apache/zeppelin/realm/jwt/KnoxAuthenticationFilter.java",
                "new file mode 100644",
                "index 000000000..de19664f8",
                "--- /dev/null",
                "+++ b/zeppelin-server/src/main/java/org/apache/zeppelin/realm/jwt/KnoxAuthenticationFilter.java",
                "@@ -0,0 +1,71 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.zeppelin.realm.jwt;",
                "+",
                "+import org.apache.shiro.web.filter.authc.FormAuthenticationFilter;",
                "+import org.apache.shiro.web.servlet.ShiroHttpServletRequest;",
                "+import org.apache.zeppelin.utils.SecurityUtils;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+import javax.servlet.ServletRequest;",
                "+import javax.servlet.ServletResponse;",
                "+import javax.servlet.http.Cookie;",
                "+",
                "+/**",
                "+ * Created for org.apache.zeppelin.server",
                "+ */",
                "+public class KnoxAuthenticationFilter extends FormAuthenticationFilter {",
                "+",
                "+  private static final Logger LOGGER = LoggerFactory.getLogger(KnoxAuthenticationFilter.class);",
                "+",
                "+  protected boolean isAccessAllowed(ServletRequest request,",
                "+                                    ServletResponse response, Object mappedValue) {",
                "+",
                "+    //Check with existing shiro authentication logic",
                "+    //https://github.com/apache/shiro/blob/shiro-root-1.3.2/web/src/main/java/org/apache/shiro/",
                "+    // web/filter/authc/AuthenticatingFilter.java#L123-L124",
                "+    Boolean accessAllowed = super.isAccessAllowed(request, response, mappedValue) ||",
                "+      !isLoginRequest(request, response) && isPermissive(mappedValue);",
                "+",
                "+    if (accessAllowed) {",
                "+      accessAllowed = false;",
                "+      KnoxJwtRealm knoxJwtRealm = null;",
                "+      for (Object realm : SecurityUtils.getRealmsList()) {",
                "+        if (realm instanceof KnoxJwtRealm) {",
                "+          knoxJwtRealm = (KnoxJwtRealm) realm;",
                "+          break;",
                "+        }",
                "+      }",
                "+      if (knoxJwtRealm != null) {",
                "+        for (Cookie cookie : ((ShiroHttpServletRequest) request).getCookies()) {",
                "+          if (cookie.getName().equals(knoxJwtRealm.getCookieName())) {",
                "+            if (knoxJwtRealm.validateToken(cookie.getValue())) {",
                "+              accessAllowed = true;",
                "+            }",
                "+            break;",
                "+          }",
                "+        }",
                "+      } else {",
                "+        LOGGER.error(\"Looks like this filter is enabled without enabling KnoxJwtRealm, please refer\"",
                "+            + \" to https://zeppelin.apache.org/docs/latest/security/shiroauthentication.html\"",
                "+            + \"#knox-sso\");",
                "+      }",
                "+    }",
                "+    return accessAllowed;",
                "+  }",
                "+}",
                "diff --git a/zeppelin-server/src/main/java/org/apache/zeppelin/realm/jwt/KnoxJwtRealm.java b/zeppelin-server/src/main/java/org/apache/zeppelin/realm/jwt/KnoxJwtRealm.java",
                "new file mode 100644",
                "index 000000000..c3e9b77cc",
                "--- /dev/null",
                "+++ b/zeppelin-server/src/main/java/org/apache/zeppelin/realm/jwt/KnoxJwtRealm.java",
                "@@ -0,0 +1,289 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.zeppelin.realm.jwt;",
                "+",
                "+import com.nimbusds.jose.JWSObject;",
                "+import com.nimbusds.jose.JWSVerifier;",
                "+import com.nimbusds.jose.crypto.RSASSAVerifier;",
                "+import com.nimbusds.jwt.SignedJWT;",
                "+import java.io.ByteArrayInputStream;",
                "+import java.io.File;",
                "+import java.io.IOException;",
                "+import java.io.UnsupportedEncodingException;",
                "+import java.security.PublicKey;",
                "+import java.security.cert.CertificateException;",
                "+import java.security.cert.CertificateFactory;",
                "+import java.security.cert.X509Certificate;",
                "+import java.security.interfaces.RSAPublicKey;",
                "+import java.text.ParseException;",
                "+import java.util.HashSet;",
                "+import java.util.List;",
                "+import java.util.Set;",
                "+import javax.servlet.ServletException;",
                "+import org.apache.commons.io.FileUtils;",
                "+import org.apache.hadoop.conf.Configuration;",
                "+import org.apache.hadoop.security.Groups;",
                "+import org.apache.shiro.authc.AuthenticationInfo;",
                "+import org.apache.shiro.authc.AuthenticationToken;",
                "+import org.apache.shiro.authc.SimpleAccount;",
                "+import org.apache.shiro.authz.AuthorizationInfo;",
                "+import org.apache.shiro.authz.SimpleAuthorizationInfo;",
                "+import org.apache.shiro.realm.AuthorizingRealm;",
                "+import org.apache.shiro.subject.PrincipalCollection;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+/**",
                "+ * Created for org.apache.zeppelin.server",
                "+ */",
                "+public class KnoxJwtRealm extends AuthorizingRealm {",
                "+",
                "+  private static final Logger LOGGER = LoggerFactory.getLogger(KnoxJwtRealm.class);",
                "+",
                "+  private String providerUrl;",
                "+  private String redirectParam;",
                "+  private String cookieName;",
                "+  private String publicKeyPath;",
                "+  private String login;",
                "+  private String logout;",
                "+",
                "+  private String principalMapping;",
                "+  private String groupPrincipalMapping;",
                "+",
                "+  private SimplePrincipalMapper mapper = new SimplePrincipalMapper();",
                "+  /**",
                "+   * Configuration object needed by for hadoop classes",
                "+   */",
                "+  private Configuration hadoopConfig;",
                "+",
                "+  /**",
                "+   * Hadoop Groups implementation.",
                "+   */",
                "+  private Groups hadoopGroups;",
                "+",
                "+  @Override",
                "+  protected void onInit() {",
                "+    super.onInit();",
                "+    if (principalMapping != null && !principalMapping.isEmpty()",
                "+        || groupPrincipalMapping != null && !groupPrincipalMapping.isEmpty()) {",
                "+      try {",
                "+        mapper.loadMappingTable(principalMapping, groupPrincipalMapping);",
                "+      } catch (PrincipalMappingException e) {",
                "+        LOGGER.error(\"PrincipalMappingException in onInit\", e);",
                "+      }",
                "+    }",
                "+",
                "+    try {",
                "+      hadoopConfig = new Configuration();",
                "+      hadoopGroups = new Groups(hadoopConfig);",
                "+    } catch (final Exception e) {",
                "+      LOGGER.error(\"Exception in onInit\", e);",
                "+    }",
                "+",
                "+  }",
                "+",
                "+  @Override",
                "+  public boolean supports(AuthenticationToken token) {",
                "+    return token != null && token instanceof JWTAuthenticationToken;",
                "+  }",
                "+",
                "+",
                "+  @Override",
                "+  protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) {",
                "+    JWTAuthenticationToken upToken = (JWTAuthenticationToken) token;",
                "+",
                "+    if (validateToken(upToken.getToken())) {",
                "+      try {",
                "+        SimpleAccount account = new SimpleAccount(getName(upToken), upToken.getToken(), getName());",
                "+        account.addRole(mapGroupPrincipals(getName(upToken)));",
                "+        return account;",
                "+      } catch (ParseException e) {",
                "+        LOGGER.error(\"ParseException in doGetAuthenticationInfo\", e);",
                "+      }",
                "+    }",
                "+    return null;",
                "+  }",
                "+",
                "+  private String getName(JWTAuthenticationToken upToken) throws ParseException {",
                "+    SignedJWT signed = SignedJWT.parse(upToken.getToken());",
                "+    String userName = signed.getJWTClaimsSet().getSubject();",
                "+    return userName;",
                "+  }",
                "+",
                "+  protected boolean validateToken(String token) {",
                "+    try {",
                "+      SignedJWT signed = SignedJWT.parse(token);",
                "+      return validateSignature(signed);",
                "+    } catch (ParseException ex) {",
                "+      LOGGER.info(\"ParseException in validateToken\", ex);",
                "+      return false;",
                "+    }",
                "+  }",
                "+",
                "+  public static RSAPublicKey parseRSAPublicKey(String pem)",
                "+      throws IOException, ServletException {",
                "+    String PEM_HEADER = \"-----BEGIN CERTIFICATE-----\\n\";",
                "+    String PEM_FOOTER = \"\\n-----END CERTIFICATE-----\";",
                "+    String fullPem = PEM_HEADER + pem + PEM_FOOTER;",
                "+    PublicKey key = null;",
                "+    try {",
                "+      CertificateFactory fact = CertificateFactory.getInstance(\"X.509\");",
                "+      ByteArrayInputStream is = new ByteArrayInputStream(",
                "+          FileUtils.readFileToString(new File(pem)).getBytes(\"UTF8\"));",
                "+      X509Certificate cer = (X509Certificate) fact.generateCertificate(is);",
                "+      key = cer.getPublicKey();",
                "+    } catch (CertificateException ce) {",
                "+      String message = null;",
                "+      if (pem.startsWith(PEM_HEADER)) {",
                "+        message = \"CertificateException - be sure not to include PEM header \"",
                "+            + \"and footer in the PEM configuration element.\";",
                "+      } else {",
                "+        message = \"CertificateException - PEM may be corrupt\";",
                "+      }",
                "+      throw new ServletException(message, ce);",
                "+    } catch (UnsupportedEncodingException uee) {",
                "+      throw new ServletException(uee);",
                "+    } catch (IOException e) {",
                "+      throw new IOException(e);",
                "+    }",
                "+    return (RSAPublicKey) key;",
                "+  }",
                "+",
                "+  protected boolean validateSignature(SignedJWT jwtToken) {",
                "+    boolean valid = false;",
                "+    if (JWSObject.State.SIGNED == jwtToken.getState()) {",
                "+",
                "+      if (jwtToken.getSignature() != null) {",
                "+",
                "+        try {",
                "+          RSAPublicKey publicKey = parseRSAPublicKey(publicKeyPath);",
                "+          JWSVerifier verifier = new RSASSAVerifier(publicKey);",
                "+          if (verifier != null && jwtToken.verify(verifier)) {",
                "+            valid = true;",
                "+          }",
                "+        } catch (Exception e) {",
                "+          LOGGER.info(\"Exception in validateSignature\", e);",
                "+        }",
                "+      }",
                "+    }",
                "+    return valid;",
                "+  }",
                "+",
                "+  @Override",
                "+  protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {",
                "+    Set<String> roles = mapGroupPrincipals(principals.toString());",
                "+    return new SimpleAuthorizationInfo(roles);",
                "+  }",
                "+",
                "+  /**",
                "+   * Query the Hadoop implementation of {@link Groups} to retrieve groups for",
                "+   * provided user.",
                "+   */",
                "+  public Set<String> mapGroupPrincipals(final String mappedPrincipalName) {",
                "+    /* return the groups as seen by Hadoop */",
                "+    Set<String> groups = null;",
                "+    try {",
                "+      hadoopGroups.refresh();",
                "+      final List<String> groupList = hadoopGroups",
                "+          .getGroups(mappedPrincipalName);",
                "+",
                "+      if (LOGGER.isDebugEnabled()) {",
                "+        LOGGER.debug(String.format(\"group found %s, %s\",",
                "+            mappedPrincipalName, groupList.toString()));",
                "+      }",
                "+",
                "+      groups = new HashSet<>(groupList);",
                "+",
                "+    } catch (final IOException e) {",
                "+      if (e.toString().contains(\"No groups found for user\")) {",
                "+        /* no groups found move on */",
                "+        LOGGER.info(String.format(\"No groups found for user %s\", mappedPrincipalName));",
                "+",
                "+      } else {",
                "+        /* Log the error and return empty group */",
                "+        LOGGER.info(String.format(\"errorGettingUserGroups for %s\", mappedPrincipalName));",
                "+      }",
                "+      groups = new HashSet();",
                "+    }",
                "+    return groups;",
                "+  }",
                "+",
                "+  public String getProviderUrl() {",
                "+    return providerUrl;",
                "+  }",
                "+",
                "+  public void setProviderUrl(String providerUrl) {",
                "+    this.providerUrl = providerUrl;",
                "+  }",
                "+",
                "+  public String getRedirectParam() {",
                "+    return redirectParam;",
                "+  }",
                "+",
                "+  public void setRedirectParam(String redirectParam) {",
                "+    this.redirectParam = redirectParam;",
                "+  }",
                "+",
                "+  public String getCookieName() {",
                "+    return cookieName;",
                "+  }",
                "+",
                "+  public void setCookieName(String cookieName) {",
                "+    this.cookieName = cookieName;",
                "+  }",
                "+",
                "+  public String getPublicKeyPath() {",
                "+    return publicKeyPath;",
                "+  }",
                "+",
                "+  public void setPublicKeyPath(String publicKeyPath) {",
                "+    this.publicKeyPath = publicKeyPath;",
                "+  }",
                "+",
                "+  public String getLogin() {",
                "+    return login;",
                "+  }",
                "+",
                "+  public void setLogin(String login) {",
                "+    this.login = login;",
                "+  }",
                "+",
                "+  public String getLogout() {",
                "+    return logout;",
                "+  }",
                "+",
                "+  public void setLogout(String logout) {",
                "+    this.logout = logout;",
                "+  }",
                "+",
                "+  public String getPrincipalMapping() {",
                "+    return principalMapping;",
                "+  }",
                "+",
                "+  public void setPrincipalMapping(String principalMapping) {",
                "+    this.principalMapping = principalMapping;",
                "+  }",
                "+",
                "+  public String getGroupPrincipalMapping() {",
                "+    return groupPrincipalMapping;",
                "+  }",
                "+",
                "+  public void setGroupPrincipalMapping(String groupPrincipalMapping) {",
                "+    this.groupPrincipalMapping = groupPrincipalMapping;",
                "+  }",
                "+}",
                "+",
                "diff --git a/zeppelin-server/src/main/java/org/apache/zeppelin/realm/jwt/PrincipalMapper.java b/zeppelin-server/src/main/java/org/apache/zeppelin/realm/jwt/PrincipalMapper.java",
                "new file mode 100644",
                "index 000000000..d96efa466",
                "--- /dev/null",
                "+++ b/zeppelin-server/src/main/java/org/apache/zeppelin/realm/jwt/PrincipalMapper.java",
                "@@ -0,0 +1,51 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.zeppelin.realm.jwt;",
                "+",
                "+/***",
                "+ * ",
                "+ */",
                "+public interface PrincipalMapper {",
                "+",
                "+  /**",
                "+   * Load the internal principal mapping table from the provided",
                "+   * string value which conforms to the following semicolon delimited format:",
                "+   * actual[,another-actual]=mapped;...",
                "+   * @param principalMapping",
                "+   */",
                "+  public abstract void loadMappingTable(String principalMapping, String groupMapping)",
                "+      throws PrincipalMappingException;",
                "+",
                "+  /**",
                "+   * Acquire a mapped principal name from the mapping table",
                "+   * as appropriate. Otherwise, the provided principalName",
                "+   * will be used.",
                "+   * @param principalName",
                "+   * @return principal name to be used in the assertion",
                "+   */",
                "+  public abstract String mapUserPrincipal(String principalName);",
                "+",
                "+  /**",
                "+   * Acquire array of group principal names from the mapping table",
                "+   * as appropriate. Otherwise, return null.",
                "+   * @param principalName",
                "+   * @return group principal names to be used in the assertion",
                "+   */",
                "+  public abstract String[] mapGroupPrincipal(String principalName);",
                "+}",
                "+",
                "diff --git a/zeppelin-server/src/main/java/org/apache/zeppelin/realm/jwt/PrincipalMappingException.java b/zeppelin-server/src/main/java/org/apache/zeppelin/realm/jwt/PrincipalMappingException.java",
                "new file mode 100644",
                "index 000000000..c3ca02f74",
                "--- /dev/null",
                "+++ b/zeppelin-server/src/main/java/org/apache/zeppelin/realm/jwt/PrincipalMappingException.java",
                "@@ -0,0 +1,34 @@",
                "+/**",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ * http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.zeppelin.realm.jwt;",
                "+",
                "+/***",
                "+ * {@link System}",
                "+ */",
                "+public class PrincipalMappingException extends Exception {",
                "+",
                "+  public PrincipalMappingException(String message) {",
                "+    super(message);",
                "+  }",
                "+",
                "+  public PrincipalMappingException(String message, Exception e) {",
                "+    super(message, e);",
                "+  }",
                "+",
                "+",
                "+}",
                "diff --git a/zeppelin-server/src/main/java/org/apache/zeppelin/realm/jwt/SimplePrincipalMapper.java b/zeppelin-server/src/main/java/org/apache/zeppelin/realm/jwt/SimplePrincipalMapper.java",
                "new file mode 100644",
                "index 000000000..b1948102e",
                "--- /dev/null",
                "+++ b/zeppelin-server/src/main/java/org/apache/zeppelin/realm/jwt/SimplePrincipalMapper.java",
                "@@ -0,0 +1,126 @@",
                "+/**",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ * http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.zeppelin.realm.jwt;",
                "+",
                "+import java.util.Arrays;",
                "+import java.util.HashMap;",
                "+import java.util.StringTokenizer;",
                "+",
                "+",
                "+/***",
                "+ * ",
                "+ */",
                "+public class SimplePrincipalMapper implements PrincipalMapper {",
                "+",
                "+  public HashMap<String, String[]> principalMappings = null;",
                "+  public HashMap<String, String[]> groupMappings = null;",
                "+",
                "+  public SimplePrincipalMapper() {",
                "+  }",
                "+",
                "+  /* (non-Javadoc)",
                "+   * @see org.apache.hadoop.gateway.filter.PrincipalMapper#loadMappingTable(java.lang.String)",
                "+   */",
                "+  @Override",
                "+  public void loadMappingTable(String principalMapping, String groupMapping)",
                "+      throws PrincipalMappingException {",
                "+    if (principalMapping != null) {",
                "+      principalMappings = parseMapping(principalMapping);",
                "+      groupMappings = parseMapping(groupMapping);",
                "+    }",
                "+  }",
                "+",
                "+  private HashMap<String, String[]> parseMapping(String mappings)",
                "+      throws PrincipalMappingException {",
                "+    if (mappings == null) {",
                "+      return null;",
                "+    }",
                "+    HashMap<String, String[]> table = new HashMap<>();",
                "+    try {",
                "+      StringTokenizer t = new StringTokenizer(mappings, \";\");",
                "+      if (t.hasMoreTokens()) {",
                "+        do {",
                "+          String mapping = t.nextToken();",
                "+          String principals = mapping.substring(0, mapping.indexOf('='));",
                "+          String value = mapping.substring(mapping.indexOf('=') + 1);",
                "+          String[] v = value.split(\",\");",
                "+          String[] p = principals.split(\",\");",
                "+          for (int i = 0; i < p.length; i++) {",
                "+            table.put(p[i], v);",
                "+          }",
                "+        } while (t.hasMoreTokens());",
                "+      }",
                "+      return table;",
                "+    } catch (Exception e) {",
                "+      // do not leave table in an unknown state - clear it instead",
                "+      // no principal mapping will occur",
                "+      table.clear();",
                "+      throw new PrincipalMappingException(",
                "+          \"Unable to load mappings from provided string: \" + mappings",
                "+              + \" - no principal mapping will be provided.\", e);",
                "+    }",
                "+  }",
                "+",
                "+  /* (non-Javadoc)",
                "+   * @see org.apache.hadoop.gateway.filter.PrincipalMapper#mapPrincipal(java.lang.String)",
                "+   */",
                "+  @Override",
                "+  public String mapUserPrincipal(String principalName) {",
                "+    String[] p = null;",
                "+    if (principalMappings != null) {",
                "+      p = principalMappings.get(principalName);",
                "+    }",
                "+    if (p == null) {",
                "+      return principalName;",
                "+    }",
                "+",
                "+    return p[0];",
                "+  }",
                "+",
                "+  /* (non-Javadoc)",
                "+   * @see org.apache.hadoop.gateway.filter.PrincipalMapper#mapPrincipal(java.lang.String)",
                "+   */",
                "+  @Override",
                "+  public String[] mapGroupPrincipal(String principalName) {",
                "+    String[] groups = null;",
                "+    String[] wildCardGroups = null;",
                "+",
                "+    if (groupMappings != null) {",
                "+      groups = groupMappings.get(principalName);",
                "+      wildCardGroups = groupMappings.get(\"*\");",
                "+      if (groups != null && wildCardGroups != null) {",
                "+        groups = concat(groups, wildCardGroups);",
                "+      } else if (wildCardGroups != null) {",
                "+        return wildCardGroups;",
                "+      }",
                "+    }",
                "+",
                "+    return groups;",
                "+  }",
                "+",
                "+  /**",
                "+   * @param groups",
                "+   * @param wildCardGroups",
                "+   * @return",
                "+   */",
                "+  public static <T> T[] concat(T[] groups, T[] wildCardGroups) {",
                "+    T[] result = Arrays.copyOf(groups, groups.length + wildCardGroups.length);",
                "+    System.arraycopy(wildCardGroups, 0, result, groups.length, wildCardGroups.length);",
                "+    return result;",
                "+  }",
                "+}",
                "diff --git a/zeppelin-server/src/main/java/org/apache/zeppelin/rest/LoginRestApi.java b/zeppelin-server/src/main/java/org/apache/zeppelin/rest/LoginRestApi.java",
                "index bd96684d9..3a084cf9e 100644",
                "--- a/zeppelin-server/src/main/java/org/apache/zeppelin/rest/LoginRestApi.java",
                "+++ b/zeppelin-server/src/main/java/org/apache/zeppelin/rest/LoginRestApi.java",
                "@@ -18,3 +18,24 @@ package org.apache.zeppelin.rest;",
                "-import org.apache.shiro.authc.*;",
                "+import java.util.Collection;",
                "+import java.util.HashMap;",
                "+import java.util.HashSet;",
                "+import java.util.Iterator;",
                "+import java.util.Map;",
                "+import javax.ws.rs.FormParam;",
                "+import javax.ws.rs.GET;",
                "+import javax.ws.rs.POST;",
                "+import javax.ws.rs.Path;",
                "+import javax.ws.rs.Produces;",
                "+import javax.ws.rs.core.Context;",
                "+import javax.ws.rs.core.Cookie;",
                "+import javax.ws.rs.core.HttpHeaders;",
                "+import javax.ws.rs.core.Response;",
                "+import javax.ws.rs.core.Response.Status;",
                "+import org.apache.shiro.authc.AuthenticationException;",
                "+import org.apache.shiro.authc.AuthenticationToken;",
                "+import org.apache.shiro.authc.IncorrectCredentialsException;",
                "+import org.apache.shiro.authc.LockedAccountException;",
                "+import org.apache.shiro.authc.UnknownAccountException;",
                "+import org.apache.shiro.authc.UsernamePasswordToken;",
                "+import org.apache.shiro.realm.Realm;",
                " import org.apache.shiro.subject.Subject;",
                "@@ -22,2 +43,4 @@ import org.apache.zeppelin.annotation.ZeppelinApi;",
                " import org.apache.zeppelin.notebook.NotebookAuthorization;",
                "+import org.apache.zeppelin.realm.jwt.JWTAuthenticationToken;",
                "+import org.apache.zeppelin.realm.jwt.KnoxJwtRealm;",
                " import org.apache.zeppelin.server.JsonResponse;",
                "@@ -28,11 +51,2 @@ import org.slf4j.LoggerFactory;",
                "-import javax.ws.rs.FormParam;",
                "-import javax.ws.rs.POST;",
                "-import javax.ws.rs.Path;",
                "-import javax.ws.rs.Produces;",
                "-import javax.ws.rs.core.Response;",
                "-import java.util.HashMap;",
                "-import java.util.HashSet;",
                "-import java.util.Map;",
                "-",
                " /**",
                "@@ -44,2 +58,3 @@ import java.util.Map;",
                " public class LoginRestApi {",
                "+",
                "   private static final Logger LOG = LoggerFactory.getLogger(LoginRestApi.class);",
                "@@ -54,2 +69,100 @@ public class LoginRestApi {",
                "+  @GET",
                "+  @ZeppelinApi",
                "+  public Response getLogin(@Context HttpHeaders headers) {",
                "+    JsonResponse response = null;",
                "+    if (isKnoxSSOEnabled()) {",
                "+      KnoxJwtRealm knoxJwtRealm = getJTWRealm();",
                "+      Cookie cookie = headers.getCookies().get(knoxJwtRealm.getCookieName());",
                "+      if (cookie != null && cookie.getValue() != null) {",
                "+        Subject currentUser = org.apache.shiro.SecurityUtils.getSubject();",
                "+        if (!currentUser.isAuthenticated()) {",
                "+          JWTAuthenticationToken token = new JWTAuthenticationToken(null, cookie.getValue());",
                "+          response = procedeToLogin(currentUser, token);",
                "+        }",
                "+      }",
                "+      if (response == null) {",
                "+        Map<String, String> data = new HashMap<>();",
                "+        data.put(\"redirectURL\", constructKnoxUrl(knoxJwtRealm, knoxJwtRealm.getLogin()));",
                "+        response = new JsonResponse(Status.OK, \"\", data);",
                "+      }",
                "+      return response.build();",
                "+    }",
                "+    return new JsonResponse(Status.METHOD_NOT_ALLOWED).build();",
                "+  }",
                "+",
                "+  private KnoxJwtRealm getJTWRealm() {",
                "+    Collection realmsList = SecurityUtils.getRealmsList();",
                "+    if (realmsList != null) {",
                "+      for (Iterator<Realm> iterator = realmsList.iterator(); iterator.hasNext(); ) {",
                "+        Realm realm = iterator.next();",
                "+        String name = realm.getClass().getName();",
                "+",
                "+        LOG.debug(\"RealmClass.getName: \" + name);",
                "+",
                "+        if (name.equals(\"org.apache.zeppelin.realm.jwt.KnoxJwtRealm\")) {",
                "+          return (KnoxJwtRealm) realm;",
                "+        }",
                "+      }",
                "+    }",
                "+    return null;",
                "+  }",
                "+",
                "+  private boolean isKnoxSSOEnabled() {",
                "+    Collection realmsList = SecurityUtils.getRealmsList();",
                "+    if (realmsList != null) {",
                "+      for (Iterator<Realm> iterator = realmsList.iterator(); iterator.hasNext(); ) {",
                "+        Realm realm = iterator.next();",
                "+        String name = realm.getClass().getName();",
                "+        LOG.debug(\"RealmClass.getName: \" + name);",
                "+        if (name.equals(\"org.apache.zeppelin.realm.jwt.KnoxJwtRealm\")) {",
                "+          return true;",
                "+        }",
                "+      }",
                "+    }",
                "+    return false;",
                "+  }",
                "+",
                "+  private JsonResponse procedeToLogin(Subject currentUser, AuthenticationToken token) {",
                "+    JsonResponse response = null;",
                "+    try {",
                "+      currentUser.getSession().stop();",
                "+      currentUser.getSession(true);",
                "+      currentUser.login(token);",
                "+",
                "+      HashSet<String> roles = SecurityUtils.getRoles();",
                "+      String principal = SecurityUtils.getPrincipal();",
                "+      String ticket;",
                "+      if (\"anonymous\".equals(principal)) {",
                "+        ticket = \"anonymous\";",
                "+      } else {",
                "+        ticket = TicketContainer.instance.getTicket(principal);",
                "+      }",
                "+",
                "+      Map<String, String> data = new HashMap<>();",
                "+      data.put(\"principal\", principal);",
                "+      data.put(\"roles\", roles.toString());",
                "+      data.put(\"ticket\", ticket);",
                "+",
                "+      response = new JsonResponse(Response.Status.OK, \"\", data);",
                "+      //if no exception, that's it, we're done!",
                "+",
                "+      //set roles for user in NotebookAuthorization module",
                "+      NotebookAuthorization.getInstance().setRoles(principal, roles);",
                "+    } catch (UnknownAccountException uae) {",
                "+      //username wasn't in the system, show them an error message?",
                "+      LOG.error(\"Exception in login: \", uae);",
                "+    } catch (IncorrectCredentialsException ice) {",
                "+      //password didn't match, try again?",
                "+      LOG.error(\"Exception in login: \", ice);",
                "+    } catch (LockedAccountException lae) {",
                "+      //account for that username is locked - can't login.  Show them a message?",
                "+      LOG.error(\"Exception in login: \", lae);",
                "+    } catch (AuthenticationException ae) {",
                "+      //unexpected condition - error?",
                "+      LOG.error(\"Exception in login: \", ae);",
                "+    }",
                "+    return response;",
                "+  }",
                "+",
                "   /**",
                "@@ -65,3 +178,3 @@ public class LoginRestApi {",
                "   public Response postLogin(@FormParam(\"userName\") String userName,",
                "-                            @FormParam(\"password\") String password) {",
                "+      @FormParam(\"password\") String password) {",
                "     JsonResponse response = null;",
                "@@ -73,41 +186,6 @@ public class LoginRestApi {",
                "     if (!currentUser.isAuthenticated()) {",
                "-      try {",
                "-        UsernamePasswordToken token = new UsernamePasswordToken(userName, password);",
                "-        //      token.setRememberMe(true);",
                "-",
                "-        currentUser.getSession().stop();",
                "-        currentUser.getSession(true);",
                "-        currentUser.login(token);",
                "-",
                "-        HashSet<String> roles = SecurityUtils.getRoles();",
                "-        String principal = SecurityUtils.getPrincipal();",
                "-        String ticket;",
                "-        if (\"anonymous\".equals(principal))",
                "-          ticket = \"anonymous\";",
                "-        else",
                "-          ticket = TicketContainer.instance.getTicket(principal);",
                "-        Map<String, String> data = new HashMap<>();",
                "-        data.put(\"principal\", principal);",
                "-        data.put(\"roles\", roles.toString());",
                "-        data.put(\"ticket\", ticket);",
                "-",
                "-        response = new JsonResponse(Response.Status.OK, \"\", data);",
                "-        //if no exception, that's it, we're done!",
                "-        ",
                "-        //set roles for user in NotebookAuthorization module",
                "-        NotebookAuthorization.getInstance().setRoles(principal, roles);",
                "-      } catch (UnknownAccountException uae) {",
                "-        //username wasn't in the system, show them an error message?",
                "-        LOG.error(\"Exception in login: \", uae);",
                "-      } catch (IncorrectCredentialsException ice) {",
                "-        //password didn't match, try again?",
                "-        LOG.error(\"Exception in login: \", ice);",
                "-      } catch (LockedAccountException lae) {",
                "-        //account for that username is locked - can't login.  Show them a message?",
                "-        LOG.error(\"Exception in login: \", lae);",
                "-      } catch (AuthenticationException ae) {",
                "-        //unexpected condition - error?",
                "-        LOG.error(\"Exception in login: \", ae);",
                "-      }",
                "+      UsernamePasswordToken token = new UsernamePasswordToken(userName, password);",
                "+",
                "+      response = procedeToLogin(currentUser, token);",
                "     }",
                "@@ -131,3 +209,11 @@ public class LoginRestApi {",
                "     currentUser.logout();",
                "-    response = new JsonResponse(Response.Status.UNAUTHORIZED, \"\", \"\");",
                "+    if (isKnoxSSOEnabled()) {",
                "+      KnoxJwtRealm knoxJwtRealm = getJTWRealm();",
                "+      Map<String, String> data = new HashMap<>();",
                "+      data.put(\"redirectURL\", constructKnoxUrl(knoxJwtRealm, knoxJwtRealm.getLogout()));",
                "+      response = new JsonResponse(Status.UNAUTHORIZED, \"\", data);",
                "+    } else {",
                "+      response = new JsonResponse(Status.UNAUTHORIZED, \"\", \"\");",
                "+",
                "+    }",
                "     LOG.warn(response.toString());",
                "@@ -136,2 +222,11 @@ public class LoginRestApi {",
                "+  private String constructKnoxUrl(KnoxJwtRealm knoxJwtRealm, String path) {",
                "+    StringBuilder redirectURL = new StringBuilder(knoxJwtRealm.getProviderUrl());",
                "+    redirectURL.append(path);",
                "+    if (knoxJwtRealm.getRedirectParam() != null) {",
                "+      redirectURL.append(\"?\").append(knoxJwtRealm.getRedirectParam()).append(\"=\");",
                "+    }",
                "+    return redirectURL.toString();",
                "+  }",
                "+",
                " }",
                "diff --git a/zeppelin-web/src/app/app.js b/zeppelin-web/src/app/app.js",
                "index 5a4c01615..ed89dd8ab 100644",
                "--- a/zeppelin-web/src/app/app.js",
                "+++ b/zeppelin-web/src/app/app.js",
                "@@ -185,8 +185,12 @@ function auth () {",
                "     zeppelinWebApp.run(function ($rootScope) {",
                "-      $rootScope.ticket = angular.fromJson(response.data).body",
                "-",
                "-      $rootScope.ticket.screenUsername = $rootScope.ticket.principal",
                "-      if ($rootScope.ticket.principal.indexOf('#Pac4j') === 0) {",
                "-        let re = ', name=(.*?),'",
                "-        $rootScope.ticket.screenUsername = $rootScope.ticket.principal.match(re)[1]",
                "+      let res = angular.fromJson(response.data).body",
                "+      if (res['redirectURL']) {",
                "+        window.location.href = res['redirectURL'] + window.location.href",
                "+      } else {",
                "+        $rootScope.ticket = res",
                "+        $rootScope.ticket.screenUsername = $rootScope.ticket.principal",
                "+        if ($rootScope.ticket.principal.indexOf('#Pac4j') === 0) {",
                "+          let re = ', name=(.*?),'",
                "+          $rootScope.ticket.screenUsername = $rootScope.ticket.principal.match(re)[1]",
                "+        }",
                "       }",
                "diff --git a/zeppelin-web/src/components/navbar/navbar.controller.js b/zeppelin-web/src/components/navbar/navbar.controller.js",
                "index e92813b6d..6f2974edb 100644",
                "--- a/zeppelin-web/src/components/navbar/navbar.controller.js",
                "+++ b/zeppelin-web/src/components/navbar/navbar.controller.js",
                "@@ -88,3 +88,3 @@ function NavCtrl ($scope, $rootScope, $http, $routeParams, $location,",
                "-  function logout () {",
                "+  function logout() {",
                "     let logoutURL = baseUrlSrv.getRestApiBase() + '/login/logout'",
                "@@ -93,3 +93,10 @@ function NavCtrl ($scope, $rootScope, $http, $routeParams, $location,",
                "     logoutURL = logoutURL.replace('//', '//false:false@')",
                "-    $http.post(logoutURL).error(function () {",
                "+",
                "+    $http.post(logoutURL).then(function () {}, function (response) {",
                "+      if (response.data) {",
                "+        let res = angular.fromJson(response.data).body",
                "+        if (res['redirectURL']) {",
                "+          window.location.href = res['redirectURL'] + window.location.href",
                "+        }",
                "+      }",
                "       // force authcBasic (if configured) to logout"
            ],
            "changed_files": [
                "conf/shiro.ini.template",
                "zeppelin-server/pom.xml",
                "zeppelin-server/src/main/java/org/apache/zeppelin/realm/jwt/JWTAuthenticationToken.java",
                "zeppelin-server/src/main/java/org/apache/zeppelin/realm/jwt/KnoxAuthenticationFilter.java",
                "zeppelin-server/src/main/java/org/apache/zeppelin/realm/jwt/KnoxJwtRealm.java",
                "zeppelin-server/src/main/java/org/apache/zeppelin/realm/jwt/PrincipalMapper.java",
                "zeppelin-server/src/main/java/org/apache/zeppelin/realm/jwt/PrincipalMappingException.java",
                "zeppelin-server/src/main/java/org/apache/zeppelin/realm/jwt/SimplePrincipalMapper.java",
                "zeppelin-server/src/main/java/org/apache/zeppelin/rest/LoginRestApi.java",
                "zeppelin-web/src/app/app.js",
                "zeppelin-web/src/components/navbar/navbar.controller.js"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3090": ""
            },
            "ghissue_refs": {
                "2694": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: authentication, default, user",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: authentication",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3090",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2694",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "13f8e6cc65ffa629e24b6947cbd2ee63ba8159f2",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1510449521,
            "hunks": 18,
            "message": "ZEPPELIN-3085 Introduce generic ConfInterpreter for more fine-grained control of interpreter setting ### What is this PR for? Zeppelin's interpreter setting is shared by all the users and notes, if you want to have different setting you have to create new interpreter, e.g. you can create `spark_jar1` for running spark with dependency jar1 and `spark_jar2` for running spark with dependency jar2. This approach works, but not so convenient. `ConfInterpreter` can provide more fine-grained control on interpreter setting and more flexibility. `ConfInterpreter` is a generic interpreter that could be used by any interpreters. The input format should be property file format. In the first paragraph, we use ConfInterpreter to make custom configuration of spark interpreter (set app name, yarn-client mode & add spark-csv dependencies). Then you can run the second paragraph which use spark-csv. ![conf_interpreter](https://user-images.githubusercontent.com/164491/33419465-74a3fae8-d5e5-11e7-8b25-76407804d979.png) It can be used to make custom setting for any interpreter. `ConfInterpreter` would run in the zeppelin server side, it would update the interpreter properties before you launch the interpreter process, so it needs to run before interpreter process launched. And when interpreter process is launched is determined by interpreter mode setting. So users needs to understand the interpreter mode setting of zeppelin and be aware when interpreter process is launched. E.g. If we set spark interpreter setting as isolated per note. Under this setting, each note will launch one interpreter process. In this scenario, user need to put `ConfInterpreter` as the first paragraph as the above example. Otherwise the customized setting can not be applied (The paragraph using ConfInterpreter will report ERROR). ### What type of PR is it? [Feature | Documentation] ### Todos * [ ] - Task ### What is the Jira issue? * https://issues.apache.org/jira/browse/ZEPPELIN-3085 ### How should this be tested? * Unit test, System test is added, also manually verified it. ### Screenshots (if appropriate) ![conf_interpreter](https://user-images.githubusercontent.com/164491/33419465-74a3fae8-d5e5-11e7-8b25-76407804d979.png) ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Jeff Zhang <zjffdu@apache.org> Closes #2692 from zjffdu/ZEPPELIN-3085 and squashes the following commits: 87ce20f [Jeff Zhang] ZEPPELIN-3085. Introduce generic ConfInterpreter for more fine-grained control of interpreter setting",
            "diff": [
                "diff --git a/docs/assets/themes/zeppelin/img/screenshots/conf_interpreter.png b/docs/assets/themes/zeppelin/img/screenshots/conf_interpreter.png",
                "new file mode 100644",
                "index 000000000..156c3575c",
                "Binary files /dev/null and b/docs/assets/themes/zeppelin/img/screenshots/conf_interpreter.png differ",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ConfInterpreter.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ConfInterpreter.java",
                "new file mode 100644",
                "index 000000000..d50c57b4d",
                "--- /dev/null",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ConfInterpreter.java",
                "@@ -0,0 +1,92 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.interpreter;",
                "+",
                "+import org.apache.commons.lang.exception.ExceptionUtils;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+import java.io.IOException;",
                "+import java.io.StringReader;",
                "+import java.util.Properties;",
                "+",
                "+/**",
                "+ * Special Interpreter for Interpreter Configuration customization. It is attached to each",
                "+ * InterpreterGroup implicitly by Zeppelin.",
                "+ */",
                "+public class ConfInterpreter extends Interpreter {",
                "+",
                "+  private static Logger LOGGER = LoggerFactory.getLogger(ConfInterpreter.class);",
                "+",
                "+  private String interpreterGroupId;",
                "+  private InterpreterSetting interpreterSetting;",
                "+",
                "+",
                "+  public ConfInterpreter(Properties properties,",
                "+                         String interpreterGroupId,",
                "+                         InterpreterSetting interpreterSetting) {",
                "+    super(properties);",
                "+    this.interpreterGroupId = interpreterGroupId;",
                "+    this.interpreterSetting = interpreterSetting;",
                "+  }",
                "+",
                "+  @Override",
                "+  public void open() throws InterpreterException {",
                "+",
                "+  }",
                "+",
                "+  @Override",
                "+  public void close() throws InterpreterException {",
                "+",
                "+  }",
                "+",
                "+  @Override",
                "+  public InterpreterResult interpret(String st, InterpreterContext context)",
                "+      throws InterpreterException {",
                "+",
                "+    try {",
                "+      Properties finalProperties = new Properties();",
                "+      finalProperties.putAll(getProperties());",
                "+      Properties newProperties = new Properties();",
                "+      newProperties.load(new StringReader(st));",
                "+      finalProperties.putAll(newProperties);",
                "+      LOGGER.debug(\"Properties for InterpreterGroup: \" + interpreterGroupId + \" is \"",
                "+          + finalProperties);",
                "+      interpreterSetting.setInterpreterGroupProperties(interpreterGroupId, finalProperties);",
                "+      return new InterpreterResult(InterpreterResult.Code.SUCCESS);",
                "+    } catch (IOException e) {",
                "+      LOGGER.error(\"Fail to update interpreter setting\", e);",
                "+      return new InterpreterResult(InterpreterResult.Code.ERROR, ExceptionUtils.getStackTrace(e));",
                "+    }",
                "+  }",
                "+",
                "+  @Override",
                "+  public void cancel(InterpreterContext context) throws InterpreterException {",
                "+",
                "+  }",
                "+",
                "+  @Override",
                "+  public FormType getFormType() throws InterpreterException {",
                "+    return null;",
                "+  }",
                "+",
                "+  @Override",
                "+  public int getProgress(InterpreterContext context) throws InterpreterException {",
                "+    return 0;",
                "+  }",
                "+}",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "index 26fcd8e93..d5ff947ad 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "@@ -140,5 +140,7 @@ public class InterpreterSetting {",
                "   private transient InterpreterLauncher launcher;",
                "-  ///////////////////////////////////////////////////////////////////////////////////////////",
                "   private transient LifecycleManager lifecycleManager;",
                "+  ///////////////////////////////////////////////////////////////////////////////////////////",
                "+",
                "+",
                "@@ -650,3 +652,3 @@ public class InterpreterSetting {",
                "   // together (one session). We don't support to create single interpreter yet.",
                "-  List<Interpreter> createInterpreters(String user, String sessionId) {",
                "+  List<Interpreter> createInterpreters(String user, String interpreterGroupId, String sessionId) {",
                "     List<Interpreter> interpreters = new ArrayList<>();",
                "@@ -654,4 +656,3 @@ public class InterpreterSetting {",
                "     for (InterpreterInfo info : interpreterInfos) {",
                "-      Interpreter interpreter = null;",
                "-      interpreter = new RemoteInterpreter(getJavaProperties(), sessionId,",
                "+      Interpreter interpreter = new RemoteInterpreter(getJavaProperties(), sessionId,",
                "           info.getClassName(), user, lifecycleManager);",
                "@@ -665,2 +666,3 @@ public class InterpreterSetting {",
                "     }",
                "+    interpreters.add(new ConfInterpreter(getJavaProperties(), interpreterGroupId, this));",
                "     return interpreters;",
                "@@ -668,3 +670,4 @@ public class InterpreterSetting {",
                "-  synchronized RemoteInterpreterProcess createInterpreterProcess() throws IOException {",
                "+  synchronized RemoteInterpreterProcess createInterpreterProcess(Properties properties)",
                "+      throws IOException {",
                "     if (launcher == null) {",
                "@@ -673,3 +676,3 @@ public class InterpreterSetting {",
                "     InterpreterLaunchContext launchContext = new",
                "-        InterpreterLaunchContext(getJavaProperties(), option, interpreterRunner, id, group, name);",
                "+        InterpreterLaunchContext(properties, option, interpreterRunner, id, group, name);",
                "     RemoteInterpreterProcess process = (RemoteInterpreterProcess) launcher.launch(launchContext);",
                "@@ -718,2 +721,7 @@ public class InterpreterSetting {",
                "     }",
                "+    //TODO(zjffdu) It requires user can not create interpreter with name `conf`,",
                "+    // conf is a reserved word of interpreter name",
                "+    if (replName.equals(\"conf\")) {",
                "+      return ConfInterpreter.class.getName();",
                "+    }",
                "     return null;",
                "@@ -730,2 +738,25 @@ public class InterpreterSetting {",
                "+  /**",
                "+   * Throw exception when interpreter process has already launched",
                "+   *",
                "+   * @param interpreterGroupId",
                "+   * @param properties",
                "+   * @throws IOException",
                "+   */",
                "+  public void setInterpreterGroupProperties(String interpreterGroupId, Properties properties)",
                "+      throws IOException {",
                "+    ManagedInterpreterGroup interpreterGroup = this.interpreterGroups.get(interpreterGroupId);",
                "+    for (List<Interpreter> session : interpreterGroup.sessions.values()) {",
                "+      for (Interpreter intp : session) {",
                "+        if (!intp.getProperties().equals(properties) &&",
                "+            interpreterGroup.getRemoteInterpreterProcess() != null &&",
                "+            interpreterGroup.getRemoteInterpreterProcess().isRunning()) {",
                "+          throw new IOException(\"Can not change interpreter properties when interpreter process \" +",
                "+              \"has already been launched\");",
                "+        }",
                "+        intp.setProperties(properties);",
                "+      }",
                "+    }",
                "+  }",
                "+",
                "   private void loadInterpreterDependencies() {",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroup.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroup.java",
                "index 219204f04..2378f140d 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroup.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroup.java",
                "@@ -30,2 +30,3 @@ import java.util.Collection;",
                " import java.util.List;",
                "+import java.util.Properties;",
                "@@ -56,6 +57,7 @@ public class ManagedInterpreterGroup extends InterpreterGroup {",
                "-  public synchronized RemoteInterpreterProcess getOrCreateInterpreterProcess() throws IOException {",
                "+  public synchronized RemoteInterpreterProcess getOrCreateInterpreterProcess(Properties properties)",
                "+      throws IOException {",
                "     if (remoteInterpreterProcess == null) {",
                "       LOGGER.info(\"Create InterpreterProcess for InterpreterGroup: \" + getId());",
                "-      remoteInterpreterProcess = interpreterSetting.createInterpreterProcess();",
                "+      remoteInterpreterProcess = interpreterSetting.createInterpreterProcess(properties);",
                "     }",
                "@@ -133,3 +135,3 @@ public class ManagedInterpreterGroup extends InterpreterGroup {",
                "     } else {",
                "-      List<Interpreter> interpreters = interpreterSetting.createInterpreters(user, sessionId);",
                "+      List<Interpreter> interpreters = interpreterSetting.createInterpreters(user, id, sessionId);",
                "       for (Interpreter interpreter : interpreters) {",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "index 4ad36cf1b..6defd9ba8 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "@@ -27,2 +27,3 @@ import org.apache.zeppelin.display.GUI;",
                " import org.apache.zeppelin.display.Input;",
                "+import org.apache.zeppelin.interpreter.ConfInterpreter;",
                " import org.apache.zeppelin.interpreter.Interpreter;",
                "@@ -103,3 +104,3 @@ public class RemoteInterpreter extends Interpreter {",
                "     ManagedInterpreterGroup intpGroup = getInterpreterGroup();",
                "-    this.interpreterProcess = intpGroup.getOrCreateInterpreterProcess();",
                "+    this.interpreterProcess = intpGroup.getOrCreateInterpreterProcess(properties);",
                "     synchronized (interpreterProcess) {",
                "@@ -132,3 +133,5 @@ public class RemoteInterpreter extends Interpreter {",
                "           try {",
                "-            ((RemoteInterpreter) interpreter).internal_create();",
                "+            if (!(interpreter instanceof ConfInterpreter)) {",
                "+              ((RemoteInterpreter) interpreter).internal_create();",
                "+            }",
                "           } catch (IOException e) {",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "index 5ec132931..32b9b7326 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "@@ -353,2 +353,3 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "     }",
                "+    setStatus(Status.READY);",
                "     if (getConfig().get(\"enabled\") == null || (Boolean) getConfig().get(\"enabled\")) {"
            ],
            "changed_files": [
                "docs/assets/themes/zeppelin/img/screenshots/conf_interpreter.png",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ConfInterpreter.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroup.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3085": ""
            },
            "ghissue_refs": {
                "2692": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: paragraph, user",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: paragraph",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3085",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2692",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "951544a74a58fafeafd4f6f974ef4db20c188513",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1510645855,
            "hunks": 1,
            "message": "[ZEPPELIN-3049] Add the notebook id and user name to the paragraph running log ### What is this PR for? Add the notebook id and user name to the paragraph running log so that Zeppelin administrators can check who ran which notebook's paragraph. ### What type of PR is it? [Improvement] ### Todos ### What is the Jira issue? * https://issues.apache.org/jira/browse/ZEPPELIN-3049 ### How should this be tested? * Tested manually * I confirmed that the following logs are printed:     * `INFO [2017-11-14 17:19:36,917] ({pool-2-thread-2} Paragraph.java[jobRun]:381) - Run paragraph [paragraph_id: 20171114-171822_2006383248, interpreter: md, note_id: 2CZQ23DM7, user: user1]`     * `INFO [2017-11-14 17:50:59,803] ({pool-2-thread-2} Paragraph.java[jobRun]:381) - Run paragraph [paragraph_id: 20171101-170859_1328485804, interpreter: md, note_id: 2CYVGQ2WW, user: anonymous]` ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Keiji Yoshida <kjmrknsn@gmail.com> Closes #2667 from kjmrknsn/ZEPPELIN-3049 and squashes the following commits: 63b73fe [Keiji Yoshida] [ZEPPELIN-3049] Add the notebook id and user name to the paragraph running log",
            "diff": [
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "index a38b22255..6a0c27af2 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "@@ -380,3 +380,4 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "   protected Object jobRun() throws Throwable {",
                "-    logger.info(\"Run paragraph {} using {} \", getId(), intpText);",
                "+    logger.info(\"Run paragraph [paragraph_id: {}, interpreter: {}, note_id: {}, user: {}]\",",
                "+            getId(), intpText, note.getId(), authenticationInfo.getUser());",
                "     this.interpreter = getBindedInterpreter();"
            ],
            "changed_files": [
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3049": ""
            },
            "ghissue_refs": {
                "2667": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: paragraph, user",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: paragraph",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3049",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2667",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f7df879cc4d5a147030c0e7880bb1cba4f359979",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1515716351,
            "hunks": 15,
            "message": "ZEPPELIN-3105 Notebook not running via REST API after Zeppelin Restart ### What is this PR for? Fixes regression introduced with [ZEPPELIN-3013](https://issues.apache.org/jira/browse/ZEPPELIN-3013). Executing Notebook and Paragraph via Rest API was not possible anymore, because some parsing was introduced paragraph.setText(...). The setter was not invoked after deserialization, thus transient variables paragraph.intpText and paragraph.scriptText were not set. This PR fixes that by invoking paragraph.parseText() after deserialization. Also a test was added, and AbstractTestRestApi.shutdown() method was overloaded to support the use case of not deleting the interpreter.json during server restart within one test case. ### What type of PR is it? [Bug Fix] ### Todos - ### What is the Jira issue? https://issues.apache.org/jira/browse/ZEPPELIN-3105 ### How should this be tested? Refer to the test case added, org.apache.zeppelin.rest.NotebookRestApiTest.testRunWithServerRestart() ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? - no * Is there breaking changes for older versions? - no * Does this needs documentation? - no Author: Andreas Weise <a.weise@avm.de> Closes #2706 from weand/ZEPPELIN-3105 and squashes the following commits: 50865b1 [Andreas Weise] Merge remote-tracking branch 'origin/master' into ZEPPELIN-3105 d46182f [Andreas Weise] Merge branch 'master' of https://github.com/apache/zeppelin.git into ZEPPELIN-3105 02e1f08 [Andreas Weise] Merge branch 'master' of https://github.com/apache/zeppelin.git into ZEPPELIN-3105 ff43983 [Andreas Weise] Merge branch 'master' of https://github.com/apache/zeppelin.git into ZEPPELIN-3105 ea8f3ea [Andreas Weise] ZEPPELIN-3105 Notebook not running via REST API after Zeppelin Restart 591ec8d [Andreas Weise] ZEPPELIN-3105 Notebook not running via REST API after Zeppelin Restart",
            "diff": [
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "index 19f396ecd..281c4dec0 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "@@ -22,3 +22,9 @@ import static java.lang.String.format;",
                " import java.io.IOException;",
                "-import java.util.*;",
                "+import java.util.Date;",
                "+import java.util.HashMap;",
                "+import java.util.Iterator;",
                "+import java.util.LinkedHashMap;",
                "+import java.util.LinkedList;",
                "+import java.util.List;",
                "+import java.util.Map;",
                " import java.util.concurrent.ScheduledFuture;",
                "@@ -27,4 +33,2 @@ import java.util.concurrent.TimeUnit;",
                "-import com.google.common.annotations.VisibleForTesting;",
                "-import com.google.gson.GsonBuilder;",
                " import org.apache.commons.lang.StringUtils;",
                "@@ -36,3 +40,9 @@ import org.apache.zeppelin.display.AngularObjectRegistry;",
                " import org.apache.zeppelin.display.Input;",
                "-import org.apache.zeppelin.interpreter.*;",
                "+import org.apache.zeppelin.interpreter.InterpreterFactory;",
                "+import org.apache.zeppelin.interpreter.InterpreterGroup;",
                "+import org.apache.zeppelin.interpreter.InterpreterInfo;",
                "+import org.apache.zeppelin.interpreter.InterpreterResult;",
                "+import org.apache.zeppelin.interpreter.InterpreterResultMessage;",
                "+import org.apache.zeppelin.interpreter.InterpreterSetting;",
                "+import org.apache.zeppelin.interpreter.InterpreterSettingManager;",
                " import org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry;",
                "@@ -49,4 +59,6 @@ import org.slf4j.LoggerFactory;",
                "+import com.google.common.annotations.VisibleForTesting;",
                " import com.google.common.base.Preconditions;",
                " import com.google.gson.Gson;",
                "+import com.google.gson.GsonBuilder;",
                "@@ -62,3 +74,4 @@ public class Note implements ParagraphJobListener, JsonSerializable {",
                "       .registerTypeAdapter(Date.class, new NotebookImportDeserializer())",
                "-      .registerTypeAdapterFactory(Input.TypeAdapterFactory).create();",
                "+      .registerTypeAdapterFactory(Input.TypeAdapterFactory)",
                "+      .create();",
                "@@ -936,2 +949,3 @@ public class Note implements ParagraphJobListener, JsonSerializable {",
                "+  @Override",
                "   public String toJson() {",
                "@@ -943,3 +957,3 @@ public class Note implements ParagraphJobListener, JsonSerializable {",
                "     convertOldInput(note);",
                "-    note.resetRuntimeInfos();",
                "+    note.postProcessParagraphs();",
                "     return note;",
                "@@ -947,5 +961,6 @@ public class Note implements ParagraphJobListener, JsonSerializable {",
                "-  public void resetRuntimeInfos() {",
                "+  public void postProcessParagraphs() {",
                "     for (Paragraph p : paragraphs) {",
                "       p.clearRuntimeInfos();",
                "+      p.parseText();",
                "     }",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "index 32b9b7326..20f9ff863 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "@@ -20,2 +20,3 @@ package org.apache.zeppelin.notebook;",
                " import java.io.IOException;",
                "+import java.security.SecureRandom;",
                " import java.util.ArrayList;",
                "@@ -28,3 +29,2 @@ import java.util.List;",
                " import java.util.Map;",
                "-import java.security.SecureRandom;",
                " import java.util.Set;",
                "@@ -33,3 +33,2 @@ import java.util.regex.Pattern;",
                "-import org.apache.commons.lang.StringUtils;",
                " import org.apache.zeppelin.common.JsonSerializable;",
                "@@ -184,2 +183,6 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "     this.dateUpdated = new Date();",
                "+    parseText();",
                "+  }",
                "+",
                "+  public void parseText() {",
                "     // parse text to get interpreter component",
                "@@ -824,2 +827,3 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "+  @Override",
                "   public String toJson() {"
            ],
            "changed_files": [
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3105": "",
                "ZEPPELIN-3013": ""
            },
            "ghissue_refs": {
                "2706": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: paragraph",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: paragraph",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3105, ZEPPELIN-3013",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2706",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e998f5e067daf71a0bbadcabc012d8e644c2b3e1",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1507282351,
            "hunks": 11,
            "message": "[ZEPPELIN-2970] Enhance Authentication decrypting key generation ### What is this PR for? Overview : The random number generator implemented by nextInt() cannot withstand a cryptographic attack. In the file IdHashes.java similar issues were on line numbers 74 Comments : Use of SecureRandom is recommended ### What type of PR is it? [Refactoring] ### What is the Jira issue? * [https://issues.apache.org/jira/browse/ZEPPELIN-2970](https://issues.apache.org/jira/browse/ZEPPELIN-2970) ### How should this be tested? CI should be green Author: Prabhjyot Singh <prabhjyotsingh@gmail.com> Closes #2606 from prabhjyotsingh/ZEPPELIN-2970 and squashes the following commits: e1a9d3a5f [Prabhjyot Singh] Change all \"java.util.Random\" to \"java.security.SecureRandom\" f3f22e803 [Prabhjyot Singh] use SecureRandom instead of Random",
            "diff": [
                "diff --git a/python/src/main/java/org/apache/zeppelin/python/IPythonClient.java b/python/src/main/java/org/apache/zeppelin/python/IPythonClient.java",
                "index 40b9afdac..05fe4ba47 100644",
                "--- a/python/src/main/java/org/apache/zeppelin/python/IPythonClient.java",
                "+++ b/python/src/main/java/org/apache/zeppelin/python/IPythonClient.java",
                "@@ -42,3 +42,3 @@ import java.util.Iterator;",
                " import java.util.List;",
                "-import java.util.Random;",
                "+import java.security.SecureRandom;",
                " import java.util.concurrent.TimeUnit;",
                "@@ -57,3 +57,3 @@ public class IPythonClient {",
                "-  private Random random = new Random();",
                "+  private SecureRandom random = new SecureRandom();",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterGroup.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterGroup.java",
                "index 5428cdbb5..6acd601b8 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterGroup.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterGroup.java",
                "@@ -28,3 +28,3 @@ import java.util.List;",
                " import java.util.Map;",
                "-import java.util.Random;",
                "+import java.security.SecureRandom;",
                " import java.util.concurrent.ConcurrentHashMap;",
                "@@ -72,3 +72,3 @@ public class InterpreterGroup {",
                "   private static String generateId() {",
                "-    return \"InterpreterGroup_\" + System.currentTimeMillis() + \"_\" + new Random().nextInt();",
                "+    return \"InterpreterGroup_\" + System.currentTimeMillis() + \"_\" + new SecureRandom().nextInt();",
                "   }",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/util/IdHashes.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/util/IdHashes.java",
                "index 14c03a11c..052aaefd2 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/util/IdHashes.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/util/IdHashes.java",
                "@@ -22,3 +22,3 @@ import java.util.ArrayList;",
                " import java.util.List;",
                "-import java.util.Random;",
                "+import java.security.SecureRandom;",
                "@@ -73,3 +73,3 @@ public class IdHashes {",
                "   public static String generateId() {",
                "-    return encode(System.currentTimeMillis() + new Random().nextInt());",
                "+    return encode(System.currentTimeMillis() + new SecureRandom().nextInt());",
                "   }",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "index 161dc307a..68ce794b9 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "@@ -28,3 +28,3 @@ import java.util.List;",
                " import java.util.Map;",
                "-import java.util.Random;",
                "+import java.security.SecureRandom;",
                " import java.util.Set;",
                "@@ -141,4 +141,3 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "   private static String generateId() {",
                "-    return \"paragraph_\" + System.currentTimeMillis() + \"_\" + new Random(System.currentTimeMillis())",
                "-        .nextInt();",
                "+    return \"paragraph_\" + System.currentTimeMillis() + \"_\" + new SecureRandom().nextInt();",
                "   }",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/utility/IdHashes.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/utility/IdHashes.java",
                "index 98aaac8a7..7b0d804de 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/utility/IdHashes.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/utility/IdHashes.java",
                "@@ -20,5 +20,5 @@ package org.apache.zeppelin.notebook.utility;",
                " import java.math.BigInteger;",
                "+import java.security.SecureRandom;",
                " import java.util.ArrayList;",
                " import java.util.List;",
                "-import java.util.Random;",
                "@@ -73,3 +73,3 @@ public class IdHashes {",
                "   public static String generateId() {",
                "-    return encode(System.currentTimeMillis() + new Random().nextInt());",
                "+    return encode(System.currentTimeMillis() + new SecureRandom().nextInt());",
                "   }"
            ],
            "changed_files": [
                "python/src/main/java/org/apache/zeppelin/python/IPythonClient.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterGroup.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/util/IdHashes.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/utility/IdHashes.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-2970": ""
            },
            "ghissue_refs": {
                "2606": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: authentication",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: paragraph",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-2970",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2606",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6353732095af880944b8c09eacc3ab7eaf64e7e0",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1516003852,
            "hunks": 16,
            "message": "[ZEPPELIN-2826] support for carriage return '\\r', on result window This PR implements carriage return '\\r' on result window, currently since HTML treats \"\\n\", \"\\r\" and \"\\r\\n\"  equally. [Improvement] * [ZEPPELIN-2826](https://issues.apache.org/jira/browse/ZEPPELIN-2826) Here is a sample code to test it ``` %python import time,sys end_val = 10 bar_length = 20 for i in xrange(0, end_val + 1):     time.sleep(0.5)     percent = float(i) / end_val     hashes = '#' * int(round(percent * bar_length))     spaces = ' ' * (bar_length - len(hashes))     sys.stdout.write(\"\\rPercent: [{0}] {1}%\".format(hashes + spaces, int(round(percent * 100))))     #print \"Percent: [{0}] {1}%\".format(hashes + spaces, int(round(percent * 100))) ``` ![after2](https://user-images.githubusercontent.com/674497/34886813-55e6e2d8-f7ea-11e7-9e40-24ded6631d75.gif) * Does the licenses files need update? N/A * Is there breaking changes for older versions? N/A * Does this needs documentation? N/A Author: Jeff Zhang <zjffdu@apache.org> Author: Prabhjyot Singh <prabhjyotsingh@gmail.com> Author: prabhjyotsingh <prabhjyotsingh@gmail.com> Closes #2729 from prabhjyotsingh/ZEPPELIN-2826 and squashes the following commits: e76ba5086 [Jeff Zhang] Adjust size in InterpreterOutput 7851c130c [prabhjyotsingh] Fix if PARAGRAPH_APPEND_OUTPUT contained html/xml 4511eec3a [Prabhjyot Singh] ZEPPELIN-2826: support for carriage return '\\r', on result Change-Id: Ic237212e802eb610689aadc22472e67a3d14a520",
            "diff": [
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterOutput.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterOutput.java",
                "index d89dad0cd..d61621ba1 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterOutput.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterOutput.java",
                "@@ -22,4 +22,6 @@ import org.slf4j.LoggerFactory;",
                "-import java.io.*;",
                "-import java.net.URISyntaxException;",
                "+import java.io.ByteArrayOutputStream;",
                "+import java.io.File;",
                "+import java.io.IOException;",
                "+import java.io.OutputStream;",
                " import java.net.URL;",
                "@@ -29,3 +31,2 @@ import java.util.LinkedList;",
                " import java.util.List;",
                "-import java.util.concurrent.ConcurrentHashMap;",
                "@@ -38,2 +39,3 @@ public class InterpreterOutput extends OutputStream {",
                "   private final int NEW_LINE_CHAR = '\\n';",
                "+  private final int LINE_FEED_CHAR = '\\r';",
                "@@ -49,2 +51,3 @@ public class InterpreterOutput extends OutputStream {",
                "   private int size = 0;",
                "+  private int lastCRIndex = -1;",
                "@@ -86,2 +89,3 @@ public class InterpreterOutput extends OutputStream {",
                "       size = 0;",
                "+      lastCRIndex = -1;",
                "@@ -148,2 +152,3 @@ public class InterpreterOutput extends OutputStream {",
                "     size = 0;",
                "+    lastCRIndex = -1;",
                "     truncated = false;",
                "@@ -206,2 +211,10 @@ public class InterpreterOutput extends OutputStream {",
                "+      if (b == LINE_FEED_CHAR) {",
                "+        if (lastCRIndex == -1) {",
                "+          lastCRIndex = size;",
                "+        }",
                "+        // reset size to index of last carriage return",
                "+        size = lastCRIndex;",
                "+      }",
                "+",
                "       if (startOfTheNewLine) {",
                "diff --git a/zeppelin-web/src/app/notebook/paragraph/paragraph.controller.js b/zeppelin-web/src/app/notebook/paragraph/paragraph.controller.js",
                "index d3ed3466e..fb99e636c 100644",
                "--- a/zeppelin-web/src/app/notebook/paragraph/paragraph.controller.js",
                "+++ b/zeppelin-web/src/app/notebook/paragraph/paragraph.controller.js",
                "@@ -14,8 +14,7 @@",
                "-import { SpellResult, } from '../../spell'",
                "-import {",
                "-  ParagraphStatus, isParagraphRunning,",
                "-} from './paragraph.status'",
                "+import {SpellResult} from '../../spell'",
                "+import {isParagraphRunning, ParagraphStatus} from './paragraph.status'",
                " import moment from 'moment'",
                "+",
                " require('moment-duration-format')",
                "@@ -1471,2 +1470,26 @@ function ParagraphCtrl ($scope, $rootScope, $route, $window, $routeParams, $loca",
                "+  $scope.$on('appendParagraphOutput', function (event, data) {",
                "+    if (data.paragraphId === $scope.paragraph.id) {",
                "+      if (!$scope.paragraph.results) {",
                "+        $scope.paragraph.results = {}",
                "+",
                "+        if (!$scope.paragraph.results.msg) {",
                "+          $scope.paragraph.results.msg = []",
                "+        }",
                "+",
                "+        $scope.paragraph.results.msg[data.index] = {",
                "+          data: data.data,",
                "+          type: data.type",
                "+        }",
                "+",
                "+        $rootScope.$broadcast(",
                "+          'updateResult',",
                "+          $scope.paragraph.results.msg[data.index],",
                "+          $scope.paragraph.config.results[data.index],",
                "+          $scope.paragraph,",
                "+          data.index)",
                "+      }",
                "+    }",
                "+  })",
                "+",
                "   $scope.$on('keyEvent', function (event, keyEvent) {",
                "diff --git a/zeppelin-web/src/app/notebook/paragraph/result/result.controller.js b/zeppelin-web/src/app/notebook/paragraph/result/result.controller.js",
                "index 646d09d05..7979325c4 100644",
                "--- a/zeppelin-web/src/app/notebook/paragraph/result/result.controller.js",
                "+++ b/zeppelin-web/src/app/notebook/paragraph/result/result.controller.js",
                "@@ -24,7 +24,4 @@ import ScatterchartVisualization from '../../../visualization/builtins/visualiza",
                " import NetworkVisualization from '../../../visualization/builtins/visualization-d3network'",
                "-import {",
                "-  DefaultDisplayType,",
                "-  SpellResult,",
                "-} from '../../../spell'",
                "-import { ParagraphStatus, } from '../paragraph.status'",
                "+import {DefaultDisplayType, SpellResult} from '../../../spell'",
                "+import {ParagraphStatus} from '../paragraph.status'",
                "@@ -321,3 +318,3 @@ function ResultCtrl ($scope, $rootScope, $route, $window, $routeParams, $locatio",
                "       } else if (type === DefaultDisplayType.TEXT) {",
                "-        renderText(targetElemId, data)",
                "+        renderText(targetElemId, data, refresh)",
                "       } else if (type === DefaultDisplayType.ELEMENT) {",
                "@@ -466,3 +463,22 @@ function ResultCtrl ($scope, $rootScope, $route, $window, $routeParams, $locatio",
                "-  const renderText = function (targetElemId, data) {",
                "+  const checkAndReplaceCarriageReturn = function (str) {",
                "+    if (/\\r/.test(str)) {",
                "+      let newGenerated = ''",
                "+      let strArr = str.split('\\n')",
                "+      for (let str of strArr) {",
                "+        if (/\\r/.test(str)) {",
                "+          let splitCR = str.split('\\r')",
                "+          newGenerated += splitCR[splitCR.length - 1] + '\\n'",
                "+        } else {",
                "+          newGenerated += str + '\\n'",
                "+        }",
                "+      }",
                "+      // remove last \"\\n\" character",
                "+      return newGenerated.slice(0, -1)",
                "+    } else {",
                "+      return str",
                "+    }",
                "+  }",
                "+",
                "+  const renderText = function (targetElemId, data, refresh) {",
                "     const elem = angular.element(`#${targetElemId}`)",
                "@@ -474,5 +490,12 @@ function ResultCtrl ($scope, $rootScope, $route, $window, $routeParams, $locatio",
                "         if (generated) {",
                "+          generated = checkAndReplaceCarriageReturn(generated)",
                "           const escaped = AnsiUpConverter.ansi_to_html(generated)",
                "           const divDOM = angular.element('<div></div>').innerHTML = escaped",
                "-          elem.append(divDOM)",
                "+          if (refresh) {",
                "+            elem.html(divDOM)",
                "+          } else {",
                "+            elem.append(divDOM)",
                "+          }",
                "+        } else if (refresh) {",
                "+          elem.html('')",
                "         }",
                "@@ -505,5 +528,6 @@ function ResultCtrl ($scope, $rootScope, $route, $window, $routeParams, $locatio",
                "     while (textResultQueueForAppend.length > 0) {",
                "-      const line = textResultQueueForAppend.pop()",
                "-      elem.append(angular.element('<div></div>').text(line))",
                "-",
                "+      const line = checkAndReplaceCarriageReturn(textResultQueueForAppend.pop())",
                "+      const escaped = AnsiUpConverter.ansi_to_html(line)",
                "+      const divDOM = angular.element('<div></div>').innerHTML = escaped",
                "+      elem.append(divDOM)",
                "       if ($scope.keepScrollDown) {"
            ],
            "changed_files": [
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterOutput.java",
                "zeppelin-web/src/app/notebook/paragraph/paragraph.controller.js",
                "zeppelin-web/src/app/notebook/paragraph/result/result.controller.js"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-2826": ""
            },
            "ghissue_refs": {
                "2729": "[ZEPPELIN-3988] Paragraph Text output includes \\r\\n is not displayed correctly. #3302"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: paragraph, user",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: paragraph",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-2826",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2729",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "49ccc29b652acca94e4e819b0b5eb106f05aba6c",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1507424914,
            "hunks": 8,
            "message": "ZEPPELIN-3005. Refine the error message when interpreter is not binded to note ### What is this PR for? More user-friendly error message. ### What type of PR is it? [Improvement] ### Todos * [ ] - Task ### What is the Jira issue? * https://issues.apache.org/jira/browse/ZEPPELIN-3005 ### How should this be tested? Unit test added ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Jeff Zhang <zjffdu@apache.org> Closes #2629 from zjffdu/ZEPPELIN-3005 and squashes the following commits: 134c960 [Jeff Zhang] ZEPPELIN-3005. Refine the error message when interpreter is not binded to note",
            "diff": [
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java",
                "index 723323983..911c2855f 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java",
                "@@ -78,6 +78,6 @@ public class InterpreterFactory {",
                "         }",
                "+        throw new RuntimeException(\"No such interpreter: \" + replName);",
                "       }",
                "-      return null;",
                "-",
                "-    } else {",
                "+      throw new RuntimeException(\"Interpreter \" + group + \" is not binded to this note\");",
                "+    } else if (replNameSplit.length == 1){",
                "       // first assume replName is 'name' of interpreter. ('groupName' is ommitted)",
                "@@ -92,3 +92,3 @@ public class InterpreterFactory {",
                "-      // next, assume replName is 'group' of interpreter ('name' is ommitted)",
                "+      // next, assume replName is 'group' of interpreter ('name' is omitted)",
                "       // search interpreter group and return first interpreter.",
                "@@ -98,9 +98,5 @@ public class InterpreterFactory {",
                "         return setting.getDefaultInterpreter(user, noteId);",
                "-      }",
                "-",
                "-      // Support the legacy way to use it",
                "-      for (InterpreterSetting s : settings) {",
                "-        if (s.getGroup().equals(replName)) {",
                "-          return setting.getDefaultInterpreter(user, noteId);",
                "-        }",
                "+      } else {",
                "+        throw new RuntimeException(\"Either no interpreter named \" + replName + \" or it is not \" +",
                "+            \"binded to this note\");",
                "       }",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroup.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroup.java",
                "index a8ae33849..2c1e6316c 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroup.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroup.java",
                "@@ -84,3 +84,4 @@ public class ManagedInterpreterGroup extends InterpreterGroup {",
                "   public synchronized void close(String sessionId) {",
                "-    LOGGER.info(\"Close Session: \" + sessionId);",
                "+    LOGGER.info(\"Close Session: \" + sessionId + \" for interpreter setting: \" +",
                "+        interpreterSetting.getName());",
                "     close(sessions.remove(sessionId));",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/scheduler/RemoteScheduler.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/scheduler/RemoteScheduler.java",
                "index ac9d53639..982b84a97 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/scheduler/RemoteScheduler.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/scheduler/RemoteScheduler.java",
                "@@ -323,3 +323,3 @@ public class RemoteScheduler implements Scheduler {",
                "       } else if (job.getException() != null) {",
                "-        logger.debug(\"Job ABORT, \" + job.getId());",
                "+        logger.debug(\"Job ABORT, \" + job.getId() + \", \" + job.getErrorMessage());",
                "         job.setStatus(Status.ERROR);",
                "@@ -327,6 +327,6 @@ public class RemoteScheduler implements Scheduler {",
                "           && ((InterpreterResult) jobResult).code() == Code.ERROR) {",
                "-        logger.debug(\"Job Error, \" + job.getId());",
                "+        logger.debug(\"Job Error, \" + job.getId() + \", \" + job.getErrorMessage());",
                "         job.setStatus(Status.ERROR);",
                "       } else {",
                "-        logger.debug(\"Job Finished, \" + job.getId());",
                "+        logger.debug(\"Job Finished, \" + job.getId() + \", Result: \" + job.getReturn());",
                "         job.setStatus(Status.FINISHED);"
            ],
            "changed_files": [
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroup.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/scheduler/RemoteScheduler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3005": ""
            },
            "ghissue_refs": {
                "2629": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: user",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: scheduler",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3005",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2629",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fbb35f92ada1361148c63ad42bf6a5a231328b1a",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1515732447,
            "hunks": 50,
            "message": "ZEPPELIN-2742. Unify Zeppelin's Config Storage ### What is this PR for? This PR is for unifying the config storage of zeppelin. Currently we store it as local file, this PR introduce an interface `ConfigStorage` and one implementation based on hadoop filesystem api. User could add others in future. ### What type of PR is it? [ Improvement  | Refactoring] ### Todos * [ ] - Task ### What is the Jira issue? * https://issues.apache.org/jira/browse/ZEPPELIN-2742 ### How should this be tested? Unit test is added and manually tested ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Jeff Zhang <zjffdu@apache.org> Closes #2712 from zjffdu/ZEPPELIN-2742 and squashes the following commits: a06a99d [Jeff Zhang] address comments fedd329 [Jeff Zhang] ZEPPELIN-2742. Unify Zeppelin's Storage Layer",
            "diff": [
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "index 748bb8d55..17e3e5bfd 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "@@ -255,2 +255,6 @@ public class ZeppelinConfiguration extends XMLConfiguration {",
                "+  public String getZeppelinHome() {",
                "+    return getString(ConfVars.ZEPPELIN_HOME);",
                "+  }",
                "+",
                "   public boolean useSsl() {",
                "@@ -419,3 +423,3 @@ public class ZeppelinConfiguration extends XMLConfiguration {",
                "   public String getInterpreterSettingPath() {",
                "-    return getRelativeDir(String.format(\"%s/interpreter.json\", getConfDir()));",
                "+    return getConfigFSDir() + \"/interpreter.json\";",
                "   }",
                "@@ -443,3 +447,3 @@ public class ZeppelinConfiguration extends XMLConfiguration {",
                "   public String getNotebookAuthorizationPath() {",
                "-    return getRelativeDir(String.format(\"%s/notebook-authorization.json\", getConfDir()));",
                "+    return getConfigFSDir() + \"/notebook-authorization.json\";",
                "   }",
                "@@ -511,2 +515,12 @@ public class ZeppelinConfiguration extends XMLConfiguration {",
                "+  public String getConfigFSDir() {",
                "+    String fsConfigDir = getString(ConfVars.ZEPPELIN_CONFIG_FS_DIR);",
                "+    if (StringUtils.isBlank(fsConfigDir)) {",
                "+      LOG.warn(ConfVars.ZEPPELIN_CONFIG_FS_DIR.varName + \" is not specified, fall back to local \" +",
                "+          \"conf directory \" + ConfVars.ZEPPELIN_CONF_DIR.varName);",
                "+      return \"file://\" + getConfDir();",
                "+    }",
                "+    return fsConfigDir;",
                "+  }",
                "+",
                "   public List<String> getAllowedOrigins()",
                "@@ -695,2 +709,5 @@ public class ZeppelinConfiguration extends XMLConfiguration {",
                "     ZEPPELIN_CONF_DIR(\"zeppelin.conf.dir\", \"conf\"),",
                "+    ZEPPELIN_CONFIG_FS_DIR(\"zeppelin.config.fs.dir\", \"\"),",
                "+    ZEPPELIN_CONFIG_STORAGE_CLASS(\"zeppelin.config.storage.class\",",
                "+        \"org.apache.zeppelin.storage.FileSystemConfigStorage\"),",
                "     ZEPPELIN_DEP_LOCALREPO(\"zeppelin.dep.localrepo\", \"local-repo\"),",
                "diff --git a/zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java b/zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java",
                "index f8625c235..9f3f60741 100644",
                "--- a/zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java",
                "+++ b/zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java",
                "@@ -55,2 +55,4 @@ import org.apache.zeppelin.search.SearchService;",
                " import org.apache.zeppelin.socket.NotebookServer;",
                "+import org.apache.zeppelin.storage.ConfigStorage;",
                "+import org.apache.zeppelin.storage.FileSystemConfigStorage;",
                " import org.apache.zeppelin.user.Credentials;",
                "@@ -84,2 +86,3 @@ public class ZeppelinServer extends Application {",
                "   private InterpreterFactory replFactory;",
                "+  private ConfigStorage configStorage;",
                "   private SearchService noteSearchService;",
                "@@ -128,3 +131,3 @@ public class ZeppelinServer extends Application {",
                "     this.noteSearchService = new LuceneSearch();",
                "-    this.notebookAuthorization = NotebookAuthorization.init(conf);",
                "+    this.notebookAuthorization = NotebookAuthorization.getInstance();",
                "     this.credentials = new Credentials(",
                "@@ -136,2 +139,3 @@ public class ZeppelinServer extends Application {",
                "             noteSearchService, notebookAuthorization, credentials);",
                "+    this.configStorage = ConfigStorage.getInstance(conf);",
                "diff --git a/zeppelin-zengine/pom.xml b/zeppelin-zengine/pom.xml",
                "index a549372a1..b68152f24 100644",
                "--- a/zeppelin-zengine/pom.xml",
                "+++ b/zeppelin-zengine/pom.xml",
                "@@ -318,5 +318,2 @@",
                "           </systemProperties>",
                "-          <environmentVariables>",
                "-            <!--<ZEPPELIN_HOME>..</ZEPPELIN_HOME>-->",
                "-          </environmentVariables>",
                "         </configuration>",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java",
                "index 42f82fad2..a6583cbc3 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java",
                "@@ -46,7 +46,10 @@ import org.apache.zeppelin.resource.ResourceSet;",
                " import org.apache.zeppelin.util.ReflectionUtils;",
                "+import org.apache.zeppelin.storage.ConfigStorage;",
                "+import org.apache.zeppelin.storage.FileSystemConfigStorage;",
                " import org.slf4j.Logger;",
                " import org.slf4j.LoggerFactory;",
                "-import org.sonatype.aether.repository.Authentication;",
                "+import org.sonatype.aether.RepositoryException;",
                " import org.sonatype.aether.repository.Proxy;",
                " import org.sonatype.aether.repository.RemoteRepository;",
                "+import org.sonatype.aether.repository.Authentication;",
                "@@ -57,3 +60,2 @@ import java.io.InputStream;",
                " import java.io.InputStreamReader;",
                "-import java.lang.reflect.InvocationTargetException;",
                " import java.lang.reflect.Type;",
                "@@ -77,2 +79,3 @@ import java.util.Map;",
                "+",
                " /**",
                "@@ -92,3 +95,2 @@ public class InterpreterSettingManager {",
                "   private final Path interpreterDirPath;",
                "-  private final Path interpreterSettingPath;",
                "@@ -125,2 +127,5 @@ public class InterpreterSettingManager {",
                "   private RecoveryStorage recoveryStorage;",
                "+  private ConfigStorage configStorage;",
                "+",
                "+",
                "@@ -135,6 +140,6 @@ public class InterpreterSettingManager {",
                "         remoteInterpreterProcessListener,",
                "-        appEventListener);",
                "+        appEventListener,",
                "+        ConfigStorage.getInstance(zeppelinConfiguration));",
                "   }",
                "-  @VisibleForTesting",
                "   public InterpreterSettingManager(ZeppelinConfiguration conf,",
                "@@ -144,3 +149,4 @@ public class InterpreterSettingManager {",
                "                                          remoteInterpreterProcessListener,",
                "-                                   ApplicationEventListener appEventListener) throws IOException {",
                "+                                   ApplicationEventListener appEventListener,",
                "+                                   ConfigStorage configStorage) throws IOException {",
                "     this.conf = conf;",
                "@@ -149,4 +155,2 @@ public class InterpreterSettingManager {",
                "     LOGGER.debug(\"InterpreterRootPath: {}\", interpreterDirPath);",
                "-    this.interpreterSettingPath = Paths.get(conf.getInterpreterSettingPath());",
                "-    LOGGER.debug(\"InterpreterSettingPath: {}\", interpreterSettingPath);",
                "     this.dependencyResolver = new DependencyResolver(",
                "@@ -161,3 +165,2 @@ public class InterpreterSettingManager {",
                "     this.appEventListener = appEventListener;",
                "-",
                "     this.recoveryStorage = ReflectionUtils.createClazzInstance(conf.getRecoveryStorageClass(),",
                "@@ -167,3 +170,2 @@ public class InterpreterSettingManager {",
                "     LOGGER.info(\"Using RecoveryStorage: \" + this.recoveryStorage.getClass().getName());",
                "-",
                "     this.lifecycleManager = ReflectionUtils.createClazzInstance(conf.getLifecycleManagerClass(),",
                "@@ -173,2 +175,4 @@ public class InterpreterSettingManager {",
                "+    this.configStorage = configStorage;",
                "+",
                "     init();",
                "@@ -192,6 +196,7 @@ public class InterpreterSettingManager {",
                "    */",
                "-  private void loadFromFile() {",
                "-    if (!Files.exists(interpreterSettingPath)) {",
                "+  private void loadFromFile() throws IOException {",
                "+    InterpreterInfoSaving infoSaving =",
                "+        configStorage.loadInterpreterSettings();",
                "+    if (infoSaving == null) {",
                "       // nothing to read",
                "-      LOGGER.warn(\"Interpreter Setting file {} doesn't exist\", interpreterSettingPath);",
                "       for (InterpreterSetting interpreterSettingTemplate : interpreterSettingTemplates.values()) {",
                "@@ -204,67 +209,61 @@ public class InterpreterSettingManager {",
                "-    try {",
                "-      InterpreterInfoSaving infoSaving = InterpreterInfoSaving.loadFromFile(interpreterSettingPath);",
                "-      //TODO(zjffdu) still ugly (should move all to InterpreterInfoSaving)",
                "-      for (InterpreterSetting savedInterpreterSetting : infoSaving.interpreterSettings.values()) {",
                "-        savedInterpreterSetting.setProperties(InterpreterSetting.convertInterpreterProperties(",
                "-            savedInterpreterSetting.getProperties()",
                "-        ));",
                "-        initInterpreterSetting(savedInterpreterSetting);",
                "-",
                "-        InterpreterSetting interpreterSettingTemplate =",
                "-            interpreterSettingTemplates.get(savedInterpreterSetting.getGroup());",
                "-        // InterpreterSettingTemplate is from interpreter-setting.json which represent the latest",
                "-        // InterpreterSetting, while InterpreterSetting is from interpreter.json which represent",
                "-        // the user saved interpreter setting",
                "-        if (interpreterSettingTemplate != null) {",
                "-          savedInterpreterSetting.setInterpreterDir(interpreterSettingTemplate.getInterpreterDir());",
                "-          // merge properties from interpreter-setting.json and interpreter.json",
                "-          Map<String, InterpreterProperty> mergedProperties =",
                "-              new HashMap<>(InterpreterSetting.convertInterpreterProperties(",
                "-                  interpreterSettingTemplate.getProperties()));",
                "-          Map<String, InterpreterProperty> savedProperties = InterpreterSetting",
                "-              .convertInterpreterProperties(savedInterpreterSetting.getProperties());",
                "-          for (Map.Entry<String, InterpreterProperty> entry : savedProperties.entrySet()) {",
                "-            // only merge properties whose value is not empty",
                "-            if (entry.getValue().getValue() != null && !",
                "-                StringUtils.isBlank(entry.getValue().toString())) {",
                "-              mergedProperties.put(entry.getKey(), entry.getValue());",
                "-            }",
                "+    //TODO(zjffdu) still ugly (should move all to InterpreterInfoSaving)",
                "+    for (InterpreterSetting savedInterpreterSetting : infoSaving.interpreterSettings.values()) {",
                "+      savedInterpreterSetting.setProperties(InterpreterSetting.convertInterpreterProperties(",
                "+          savedInterpreterSetting.getProperties()",
                "+      ));",
                "+      initInterpreterSetting(savedInterpreterSetting);",
                "+",
                "+      InterpreterSetting interpreterSettingTemplate =",
                "+          interpreterSettingTemplates.get(savedInterpreterSetting.getGroup());",
                "+      // InterpreterSettingTemplate is from interpreter-setting.json which represent the latest",
                "+      // InterpreterSetting, while InterpreterSetting is from interpreter.json which represent",
                "+      // the user saved interpreter setting",
                "+      if (interpreterSettingTemplate != null) {",
                "+        savedInterpreterSetting.setInterpreterDir(interpreterSettingTemplate.getInterpreterDir());",
                "+        // merge properties from interpreter-setting.json and interpreter.json",
                "+        Map<String, InterpreterProperty> mergedProperties =",
                "+            new HashMap<>(InterpreterSetting.convertInterpreterProperties(",
                "+                interpreterSettingTemplate.getProperties()));",
                "+        Map<String, InterpreterProperty> savedProperties = InterpreterSetting",
                "+            .convertInterpreterProperties(savedInterpreterSetting.getProperties());",
                "+        for (Map.Entry<String, InterpreterProperty> entry : savedProperties.entrySet()) {",
                "+          // only merge properties whose value is not empty",
                "+          if (entry.getValue().getValue() != null && !",
                "+              StringUtils.isBlank(entry.getValue().toString())) {",
                "+            mergedProperties.put(entry.getKey(), entry.getValue());",
                "           }",
                "-          savedInterpreterSetting.setProperties(mergedProperties);",
                "-          // merge InterpreterInfo",
                "-          savedInterpreterSetting.setInterpreterInfos(",
                "-              interpreterSettingTemplate.getInterpreterInfos());",
                "-          savedInterpreterSetting.setInterpreterRunner(",
                "-              interpreterSettingTemplate.getInterpreterRunner());",
                "-        } else {",
                "-          LOGGER.warn(\"No InterpreterSetting Template found for InterpreterSetting: \"",
                "-              + savedInterpreterSetting.getGroup());",
                "         }",
                "+        savedInterpreterSetting.setProperties(mergedProperties);",
                "+        // merge InterpreterInfo",
                "+        savedInterpreterSetting.setInterpreterInfos(",
                "+            interpreterSettingTemplate.getInterpreterInfos());",
                "+        savedInterpreterSetting.setInterpreterRunner(",
                "+            interpreterSettingTemplate.getInterpreterRunner());",
                "+      } else {",
                "+        LOGGER.warn(\"No InterpreterSetting Template found for InterpreterSetting: \"",
                "+            + savedInterpreterSetting.getGroup());",
                "+      }",
                "-        // Overwrite the default InterpreterSetting we registered from InterpreterSetting Templates",
                "-        // remove it first",
                "-        for (InterpreterSetting setting : interpreterSettings.values()) {",
                "-          if (setting.getName().equals(savedInterpreterSetting.getName())) {",
                "-            interpreterSettings.remove(setting.getId());",
                "-          }",
                "+      // Overwrite the default InterpreterSetting we registered from InterpreterSetting Templates",
                "+      // remove it first",
                "+      for (InterpreterSetting setting : interpreterSettings.values()) {",
                "+        if (setting.getName().equals(savedInterpreterSetting.getName())) {",
                "+          interpreterSettings.remove(setting.getId());",
                "         }",
                "-        savedInterpreterSetting.postProcessing();",
                "-        LOGGER.info(\"Create Interpreter Setting {} from interpreter.json\",",
                "-            savedInterpreterSetting.getName());",
                "-        interpreterSettings.put(savedInterpreterSetting.getId(), savedInterpreterSetting);",
                "       }",
                "+      savedInterpreterSetting.postProcessing();",
                "+      LOGGER.info(\"Create Interpreter Setting {} from interpreter.json\",",
                "+          savedInterpreterSetting.getName());",
                "+      interpreterSettings.put(savedInterpreterSetting.getId(), savedInterpreterSetting);",
                "+    }",
                "-      interpreterBindings.putAll(infoSaving.interpreterBindings);",
                "+    interpreterBindings.putAll(infoSaving.interpreterBindings);",
                "-      if (infoSaving.interpreterRepositories != null) {",
                "-        for (RemoteRepository repo : infoSaving.interpreterRepositories) {",
                "-          if (!dependencyResolver.getRepos().contains(repo)) {",
                "-            this.interpreterRepositories.add(repo);",
                "-          }",
                "+    if (infoSaving.interpreterRepositories != null) {",
                "+      for (RemoteRepository repo : infoSaving.interpreterRepositories) {",
                "+        if (!dependencyResolver.getRepos().contains(repo)) {",
                "+          this.interpreterRepositories.add(repo);",
                "         }",
                "       }",
                "-    } catch (IOException e) {",
                "-      LOGGER.error(\"Fail to load interpreter setting configuration file: \"",
                "-              + interpreterSettingPath, e);",
                "     }",
                "@@ -278,3 +277,3 @@ public class InterpreterSettingManager {",
                "       info.interpreterRepositories = interpreterRepositories;",
                "-      info.saveToFile(interpreterSettingPath);",
                "+      configStorage.save(info);",
                "     }",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/FileSystemStorage.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/FileSystemStorage.java",
                "index 6f3d3f97f..75c0bc3ea 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/FileSystemStorage.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/FileSystemStorage.java",
                "@@ -42,2 +42,4 @@ public class FileSystemStorage {",
                "     this.hadoopConf = new Configuration();",
                "+    // disable checksum for local file system. because interpreter.json may be updated by",
                "+    // no hadoop filesystem api",
                "     this.hadoopConf.set(\"fs.file.impl\", RawLocalFileSystem.class.getName());",
                "@@ -76,2 +78,12 @@ public class FileSystemStorage {",
                "+  public boolean exists(final Path path) throws IOException {",
                "+    return callHdfsOperation(new HdfsOperation<Boolean>() {",
                "+",
                "+      @Override",
                "+      public Boolean call() throws IOException {",
                "+        return fs.exists(path);",
                "+      }",
                "+    });",
                "+  }",
                "+",
                "   public void tryMkDir(final Path dir) throws IOException {",
                "@@ -151,3 +163,2 @@ public class FileSystemStorage {",
                "     if (isSecurityEnabled) {",
                "-      UserGroupInformation.getLoginUser().reloginFromKeytab();",
                "       try {",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/NotebookAuthorization.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/NotebookAuthorization.java",
                "index 5cf8192bb..f73b49e3a 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/NotebookAuthorization.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/NotebookAuthorization.java",
                "@@ -37,2 +37,3 @@ import org.apache.zeppelin.conf.ZeppelinConfiguration;",
                " import org.apache.zeppelin.conf.ZeppelinConfiguration.ConfVars;",
                "+import org.apache.zeppelin.storage.ConfigStorage;",
                " import org.apache.zeppelin.user.AuthenticationInfo;",
                "@@ -63,4 +64,4 @@ public class NotebookAuthorization {",
                "   private static ZeppelinConfiguration conf;",
                "-  private static Gson gson;",
                "-  private static String filePath;",
                "+",
                "+  private static ConfigStorage configStorage;",
                "@@ -72,7 +73,4 @@ public class NotebookAuthorization {",
                "       conf = config;",
                "-      filePath = conf.getNotebookAuthorizationPath();",
                "-      GsonBuilder builder = new GsonBuilder();",
                "-      builder.setPrettyPrinting();",
                "-      gson = builder.create();",
                "       try {",
                "+        configStorage = ConfigStorage.getInstance(config);",
                "         loadFromFile();",
                "@@ -95,22 +93,6 @@ public class NotebookAuthorization {",
                "   private static void loadFromFile() throws IOException {",
                "-    File settingFile = new File(filePath);",
                "-    LOG.info(settingFile.getAbsolutePath());",
                "-    if (!settingFile.exists()) {",
                "-      // nothing to read",
                "-      return;",
                "-    }",
                "-    FileInputStream fis = new FileInputStream(settingFile);",
                "-    InputStreamReader isr = new InputStreamReader(fis);",
                "-    BufferedReader bufferedReader = new BufferedReader(isr);",
                "-    StringBuilder sb = new StringBuilder();",
                "-    String line;",
                "-    while ((line = bufferedReader.readLine()) != null) {",
                "-      sb.append(line);",
                "+    NotebookAuthorizationInfoSaving info = configStorage.loadNotebookAuthorization();",
                "+    if (info != null) {",
                "+      authInfo = info.authInfo;",
                "     }",
                "-    isr.close();",
                "-    fis.close();",
                "-",
                "-    String json = sb.toString();",
                "-    NotebookAuthorizationInfoSaving info = NotebookAuthorizationInfoSaving.fromJson(json);",
                "-    authInfo = info.authInfo;",
                "   }",
                "@@ -135,4 +117,2 @@ public class NotebookAuthorization {",
                "   private void saveToFile() {",
                "-    String jsonString;",
                "-",
                "     synchronized (authInfo) {",
                "@@ -140,18 +120,7 @@ public class NotebookAuthorization {",
                "       info.authInfo = authInfo;",
                "-      jsonString = gson.toJson(info);",
                "-    }",
                "-",
                "-    try {",
                "-      File settingFile = new File(filePath);",
                "-      if (!settingFile.exists()) {",
                "-        settingFile.createNewFile();",
                "+      try {",
                "+        configStorage.save(info);",
                "+      } catch (IOException e) {",
                "+        LOG.error(\"Error saving notebook authorization file\", e);",
                "       }",
                "-",
                "-      FileOutputStream fos = new FileOutputStream(settingFile, false);",
                "-      OutputStreamWriter out = new OutputStreamWriter(fos);",
                "-      out.append(jsonString);",
                "-      out.close();",
                "-      fos.close();",
                "-    } catch (IOException e) {",
                "-      LOG.error(\"Error saving notebook authorization file: \" + e.getMessage());",
                "     }",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/storage/ConfigStorage.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/storage/ConfigStorage.java",
                "new file mode 100644",
                "index 000000000..3dc935fd0",
                "--- /dev/null",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/storage/ConfigStorage.java",
                "@@ -0,0 +1,78 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+",
                "+package org.apache.zeppelin.storage;",
                "+",
                "+import org.apache.zeppelin.conf.ZeppelinConfiguration;",
                "+import org.apache.zeppelin.helium.HeliumConf;",
                "+import org.apache.zeppelin.interpreter.InterpreterInfoSaving;",
                "+import org.apache.zeppelin.notebook.NotebookAuthorizationInfoSaving;",
                "+import org.apache.zeppelin.user.Credentials;",
                "+import org.apache.zeppelin.user.CredentialsInfoSaving;",
                "+import org.apache.zeppelin.util.ReflectionUtils;",
                "+",
                "+import java.io.IOException;",
                "+",
                "+/**",
                "+ * Interface for storing zeppelin configuration.",
                "+ *",
                "+ * 1. interpreter-setting.json",
                "+ * 2. helium.json",
                "+ * 3. notebook-authorization.json",
                "+ * 4. credentials.json",
                "+ *",
                "+ */",
                "+public abstract class ConfigStorage {",
                "+",
                "+  private static ConfigStorage instance;",
                "+",
                "+  protected ZeppelinConfiguration zConf;",
                "+",
                "+  public static synchronized ConfigStorage getInstance(ZeppelinConfiguration zConf)",
                "+      throws IOException {",
                "+    if (instance == null) {",
                "+      instance = createConfigStorage(zConf);",
                "+    }",
                "+    return instance;",
                "+  }",
                "+",
                "+  private static ConfigStorage createConfigStorage(ZeppelinConfiguration zConf) throws IOException {",
                "+    String configStorageClass =",
                "+        zConf.getString(ZeppelinConfiguration.ConfVars.ZEPPELIN_CONFIG_STORAGE_CLASS);",
                "+    return ReflectionUtils.createClazzInstance(configStorageClass,",
                "+        new Class[] {ZeppelinConfiguration.class}, new Object[] {zConf});",
                "+  }",
                "+",
                "+",
                "+  public ConfigStorage(ZeppelinConfiguration zConf) {",
                "+    this.zConf = zConf;",
                "+  }",
                "+",
                "+  public abstract void save(InterpreterInfoSaving settingInfos) throws IOException;",
                "+",
                "+  public abstract InterpreterInfoSaving loadInterpreterSettings() throws IOException;",
                "+",
                "+  public abstract void save(NotebookAuthorizationInfoSaving authorizationInfoSaving)",
                "+      throws IOException;",
                "+",
                "+  public abstract NotebookAuthorizationInfoSaving loadNotebookAuthorization() throws IOException;",
                "+",
                "+  public abstract String loadCredentials() throws IOException;",
                "+",
                "+  public abstract void saveCredentials(String credentials) throws IOException;",
                "+}",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/storage/FileSystemConfigStorage.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/storage/FileSystemConfigStorage.java",
                "new file mode 100644",
                "index 000000000..2460e4de6",
                "--- /dev/null",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/storage/FileSystemConfigStorage.java",
                "@@ -0,0 +1,122 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+",
                "+package org.apache.zeppelin.storage;",
                "+",
                "+import com.google.gson.JsonObject;",
                "+import com.google.gson.JsonParser;",
                "+import org.apache.hadoop.fs.Path;",
                "+import org.apache.zeppelin.conf.ZeppelinConfiguration;",
                "+import org.apache.zeppelin.helium.HeliumConf;",
                "+import org.apache.zeppelin.interpreter.InterpreterInfoSaving;",
                "+import org.apache.zeppelin.interpreter.InterpreterSetting;",
                "+import org.apache.zeppelin.notebook.FileSystemStorage;",
                "+import org.apache.zeppelin.notebook.NotebookAuthorizationInfoSaving;",
                "+import org.apache.zeppelin.user.CredentialsInfoSaving;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+import java.io.IOException;",
                "+",
                "+/**",
                "+ * It could be used either local file system or hadoop distributed file system,",
                "+ * because FileSystem support both local file system and hdfs.",
                "+ *",
                "+ */",
                "+public class FileSystemConfigStorage extends ConfigStorage {",
                "+",
                "+  private static final Logger LOGGER = LoggerFactory.getLogger(FileSystemConfigStorage.class);",
                "+",
                "+  private FileSystemStorage fs;",
                "+  private Path interpreterSettingPath;",
                "+  private Path authorizationPath;",
                "+  private Path credentialPath;",
                "+",
                "+  public FileSystemConfigStorage(ZeppelinConfiguration zConf) throws IOException {",
                "+    super(zConf);",
                "+    this.fs = FileSystemStorage.get(zConf);",
                "+    this.fs.tryMkDir(new Path(zConf.getConfigFSDir()));",
                "+    this.interpreterSettingPath = fs.makeQualified(new Path(zConf.getInterpreterSettingPath()));",
                "+    this.authorizationPath = fs.makeQualified(new Path(zConf.getNotebookAuthorizationPath()));",
                "+    this.credentialPath = fs.makeQualified(new Path(zConf.getCredentialsPath()));",
                "+  }",
                "+",
                "+  @Override",
                "+  public void save(InterpreterInfoSaving settingInfos) throws IOException {",
                "+    LOGGER.info(\"Save Interpreter Settings to \" + interpreterSettingPath);",
                "+    fs.writeFile(settingInfos.toJson(), interpreterSettingPath, false);",
                "+  }",
                "+",
                "+  @Override",
                "+  public InterpreterInfoSaving loadInterpreterSettings() throws IOException {",
                "+    if (!fs.exists(interpreterSettingPath)) {",
                "+      LOGGER.warn(\"Interpreter Setting file {} is not existed\", interpreterSettingPath);",
                "+      return null;",
                "+    }",
                "+    LOGGER.info(\"Load Interpreter Setting from file: \" + interpreterSettingPath);",
                "+    String json = fs.readFile(interpreterSettingPath);",
                "+    //TODO(zjffdu) This kind of post processing is ugly.",
                "+    JsonParser jsonParser = new JsonParser();",
                "+    JsonObject jsonObject = jsonParser.parse(json).getAsJsonObject();",
                "+    InterpreterInfoSaving infoSaving = InterpreterInfoSaving.fromJson(json);",
                "+    for (InterpreterSetting interpreterSetting : infoSaving.interpreterSettings.values()) {",
                "+      // Always use separate interpreter process",
                "+      // While we decided to turn this feature on always (without providing",
                "+      // enable/disable option on GUI).",
                "+      // previously created setting should turn this feature on here.",
                "+      interpreterSetting.getOption();",
                "+      interpreterSetting.convertPermissionsFromUsersToOwners(",
                "+          jsonObject.getAsJsonObject(\"interpreterSettings\")",
                "+              .getAsJsonObject(interpreterSetting.getId()));",
                "+    }",
                "+    return infoSaving;",
                "+  }",
                "+",
                "+  public void save(NotebookAuthorizationInfoSaving authorizationInfoSaving) throws IOException {",
                "+    LOGGER.info(\"Save notebook authorization to file: \" + authorizationPath);",
                "+    fs.writeFile(authorizationInfoSaving.toJson(), authorizationPath, false);",
                "+  }",
                "+",
                "+  @Override",
                "+  public NotebookAuthorizationInfoSaving loadNotebookAuthorization() throws IOException {",
                "+    if (!fs.exists(authorizationPath)) {",
                "+      LOGGER.warn(\"Interpreter Setting file {} is not existed\", authorizationPath);",
                "+      return null;",
                "+    }",
                "+    LOGGER.info(\"Load notebook authorization from file: \" + authorizationPath);",
                "+    String json = this.fs.readFile(authorizationPath);",
                "+    return NotebookAuthorizationInfoSaving.fromJson(json);",
                "+  }",
                "+",
                "+  @Override",
                "+  public String loadCredentials() throws IOException {",
                "+    if (!fs.exists(credentialPath)) {",
                "+      LOGGER.warn(\"Credential file {} is not existed\", authorizationPath);",
                "+      return null;",
                "+    }",
                "+    LOGGER.info(\"Load Credential from file: \" + authorizationPath);",
                "+    return this.fs.readFile(credentialPath);",
                "+  }",
                "+",
                "+  @Override",
                "+  public void saveCredentials(String credentials) throws IOException {",
                "+    LOGGER.info(\"Save Credentials to file: \" + credentialPath);",
                "+    fs.writeFile(credentials, credentialPath, false);",
                "+  }",
                "+",
                "+}",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/user/Credentials.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/user/Credentials.java",
                "new file mode 100644",
                "index 000000000..61f7fff12",
                "--- /dev/null",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/user/Credentials.java",
                "@@ -0,0 +1,184 @@",
                "+/*",
                "+* Licensed to the Apache Software Foundation (ASF) under one or more",
                "+* contributor license agreements.  See the NOTICE file distributed with",
                "+* this work for additional information regarding copyright ownership.",
                "+* The ASF licenses this file to You under the Apache License, Version 2.0",
                "+* (the \"License\"); you may not use this file except in compliance with",
                "+* the License.  You may obtain a copy of the License at",
                "+*",
                "+*    http://www.apache.org/licenses/LICENSE-2.0",
                "+*",
                "+* Unless required by applicable law or agreed to in writing, software",
                "+* distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+* See the License for the specific language governing permissions and",
                "+* limitations under the License.",
                "+*/",
                "+",
                "+package org.apache.zeppelin.user;",
                "+",
                "+",
                "+import com.google.gson.Gson;",
                "+import com.google.gson.GsonBuilder;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+import java.io.BufferedReader;",
                "+import java.io.File;",
                "+import java.io.FileInputStream;",
                "+import java.io.FileOutputStream;",
                "+import java.io.IOException;",
                "+import java.io.InputStreamReader;",
                "+import java.io.OutputStreamWriter;",
                "+import java.nio.file.Files;",
                "+import java.nio.file.attribute.PosixFilePermission;",
                "+import java.util.EnumSet;",
                "+import java.util.HashMap;",
                "+import java.util.Map;",
                "+import java.util.Set;",
                "+",
                "+import static java.nio.file.attribute.PosixFilePermission.OWNER_READ;",
                "+import static java.nio.file.attribute.PosixFilePermission.OWNER_WRITE;",
                "+",
                "+/**",
                "+ * Class defining credentials for data source authorization",
                "+ */",
                "+public class Credentials {",
                "+  private static final Logger LOG = LoggerFactory.getLogger(Credentials.class);",
                "+",
                "+  private Map<String, UserCredentials> credentialsMap;",
                "+  private Gson gson;",
                "+  private Boolean credentialsPersist = true;",
                "+  File credentialsFile;",
                "+",
                "+  private Encryptor encryptor;",
                "+  ",
                "+  /**",
                "+   * Wrapper fro user credentials. It can load credentials from a file if credentialsPath is",
                "+   * supplied, and will encrypt the file if an encryptKey is supplied.",
                "+   *",
                "+   * @param credentialsPersist",
                "+   * @param credentialsPath",
                "+   * @param encryptKey",
                "+   */",
                "+  public Credentials(Boolean credentialsPersist, String credentialsPath, String encryptKey) {",
                "+    if (encryptKey != null) {",
                "+      this.encryptor = new Encryptor(encryptKey);",
                "+    }",
                "+",
                "+    this.credentialsPersist = credentialsPersist;",
                "+    if (credentialsPath != null) {",
                "+      credentialsFile = new File(credentialsPath);",
                "+    }",
                "+    credentialsMap = new HashMap<>();",
                "+",
                "+    if (credentialsPersist) {",
                "+      GsonBuilder builder = new GsonBuilder();",
                "+      builder.setPrettyPrinting();",
                "+      gson = builder.create();",
                "+      loadFromFile();",
                "+    }",
                "+  }",
                "+",
                "+  public UserCredentials getUserCredentials(String username) {",
                "+    UserCredentials uc = credentialsMap.get(username);",
                "+    if (uc == null) {",
                "+      uc = new UserCredentials();",
                "+    }",
                "+    return uc;",
                "+  }",
                "+",
                "+  public void putUserCredentials(String username, UserCredentials uc) throws IOException {",
                "+    credentialsMap.put(username, uc);",
                "+    saveCredentials();",
                "+  }",
                "+",
                "+  public UserCredentials removeUserCredentials(String username) throws IOException {",
                "+    UserCredentials uc;",
                "+    uc = credentialsMap.remove(username);",
                "+    saveCredentials();",
                "+    return uc;",
                "+  }",
                "+",
                "+  public boolean removeCredentialEntity(String username, String entity) throws IOException {",
                "+    UserCredentials uc = credentialsMap.get(username);",
                "+    if (uc != null && uc.existUsernamePassword(entity) == false) {",
                "+      return false;",
                "+    }",
                "+",
                "+    uc.removeUsernamePassword(entity);",
                "+    saveCredentials();",
                "+    return true;",
                "+  }",
                "+",
                "+  public void saveCredentials() throws IOException {",
                "+    if (credentialsPersist) {",
                "+      saveToFile();",
                "+    }",
                "+  }",
                "+",
                "+  private void loadFromFile() {",
                "+    LOG.info(credentialsFile.getAbsolutePath());",
                "+    if (!credentialsFile.exists()) {",
                "+      // nothing to read",
                "+      return;",
                "+    }",
                "+",
                "+    try {",
                "+      FileInputStream fis = new FileInputStream(credentialsFile);",
                "+      InputStreamReader isr = new InputStreamReader(fis);",
                "+      BufferedReader bufferedReader = new BufferedReader(isr);",
                "+      StringBuilder sb = new StringBuilder();",
                "+      String line;",
                "+      while ((line = bufferedReader.readLine()) != null) {",
                "+        sb.append(line);",
                "+      }",
                "+      isr.close();",
                "+      fis.close();",
                "+",
                "+      String json = sb.toString();",
                "+",
                "+      if (encryptor != null) {",
                "+        json = encryptor.decrypt(json);",
                "+      }",
                "+",
                "+      CredentialsInfoSaving info = CredentialsInfoSaving.fromJson(json);",
                "+      this.credentialsMap = info.credentialsMap;",
                "+    } catch (IOException e) {",
                "+      LOG.error(\"Error loading credentials file\", e);",
                "+      e.printStackTrace();",
                "+    }",
                "+  }",
                "+",
                "+  private void saveToFile() throws IOException {",
                "+    String jsonString;",
                "+",
                "+    synchronized (credentialsMap) {",
                "+      CredentialsInfoSaving info = new CredentialsInfoSaving();",
                "+      info.credentialsMap = credentialsMap;",
                "+      jsonString = gson.toJson(info);",
                "+    }",
                "+",
                "+    try {",
                "+      if (!credentialsFile.exists()) {",
                "+        credentialsFile.createNewFile();",
                "+",
                "+        Set<PosixFilePermission> permissions = EnumSet.of(OWNER_READ, OWNER_WRITE);",
                "+        Files.setPosixFilePermissions(credentialsFile.toPath(), permissions);",
                "+      }",
                "+",
                "+      FileOutputStream fos = new FileOutputStream(credentialsFile, false);",
                "+      OutputStreamWriter out = new OutputStreamWriter(fos);",
                "+",
                "+      if (encryptor != null) {",
                "+        jsonString = encryptor.encrypt(jsonString);",
                "+      }",
                "+",
                "+      out.append(jsonString);",
                "+      out.close();",
                "+      fos.close();",
                "+    } catch (IOException e) {",
                "+      LOG.error(\"Error saving credentials file\", e);",
                "+    }",
                "+  }",
                "+}",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/user/CredentialsInfoSaving.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/user/CredentialsInfoSaving.java",
                "new file mode 100644",
                "index 000000000..48bb24df0",
                "--- /dev/null",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/user/CredentialsInfoSaving.java",
                "@@ -0,0 +1,40 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.user;",
                "+",
                "+import com.google.gson.Gson;",
                "+import org.apache.zeppelin.common.JsonSerializable;",
                "+",
                "+import java.util.Map;",
                "+",
                "+/**",
                "+ * Helper class to save credentials",
                "+ */",
                "+public class CredentialsInfoSaving implements JsonSerializable {",
                "+  private static final Gson gson = new Gson();",
                "+",
                "+  public Map<String, UserCredentials> credentialsMap;",
                "+",
                "+  public String toJson() {",
                "+    return gson.toJson(this);",
                "+  }",
                "+",
                "+  public static CredentialsInfoSaving fromJson(String json) {",
                "+    return gson.fromJson(json, CredentialsInfoSaving.class);",
                "+  }",
                "+}",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/user/Encryptor.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/user/Encryptor.java",
                "new file mode 100644",
                "index 000000000..ee240906d",
                "--- /dev/null",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/user/Encryptor.java",
                "@@ -0,0 +1,77 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.user;",
                "+",
                "+import org.bouncycastle.crypto.BufferedBlockCipher;",
                "+import org.bouncycastle.crypto.InvalidCipherTextException;",
                "+import org.bouncycastle.crypto.engines.AESEngine;",
                "+import org.bouncycastle.crypto.paddings.PaddedBufferedBlockCipher;",
                "+import org.bouncycastle.crypto.paddings.ZeroBytePadding;",
                "+import org.bouncycastle.crypto.params.KeyParameter;",
                "+import org.bouncycastle.util.encoders.Base64;",
                "+",
                "+import java.io.IOException;",
                "+",
                "+/**",
                "+ * Encrypt/decrypt arrays of bytes!",
                "+ */",
                "+public class Encryptor {",
                "+  private final BufferedBlockCipher encryptCipher;",
                "+  private final BufferedBlockCipher decryptCipher;",
                "+",
                "+  public Encryptor(String encryptKey) {",
                "+    encryptCipher = new PaddedBufferedBlockCipher(new AESEngine(), new ZeroBytePadding());",
                "+    encryptCipher.init(true, new KeyParameter(encryptKey.getBytes()));",
                "+",
                "+    decryptCipher = new PaddedBufferedBlockCipher(new AESEngine(), new ZeroBytePadding());",
                "+    decryptCipher.init(false, new KeyParameter(encryptKey.getBytes()));",
                "+  }",
                "+",
                "+",
                "+  public String encrypt(String inputString) throws IOException {",
                "+    byte[] input = inputString.getBytes();",
                "+    byte[] result = new byte[encryptCipher.getOutputSize(input.length)];",
                "+    int size = encryptCipher.processBytes(input, 0, input.length, result, 0);",
                "+",
                "+    try {",
                "+      size += encryptCipher.doFinal(result, size);",
                "+",
                "+      byte[] out = new byte[size];",
                "+      System.arraycopy(result, 0, out, 0, size);",
                "+      return new String(Base64.encode(out));",
                "+    } catch (InvalidCipherTextException e) {",
                "+      throw new IOException(\"Cannot encrypt: \" + e.getMessage(), e);",
                "+    }",
                "+  }",
                "+",
                "+  public String decrypt(String base64Input) throws IOException {",
                "+    byte[] input = Base64.decode(base64Input);",
                "+    byte[] result = new byte[decryptCipher.getOutputSize(input.length)];",
                "+    int size = decryptCipher.processBytes(input, 0, input.length, result, 0);",
                "+",
                "+    try {",
                "+      size += decryptCipher.doFinal(result, size);",
                "+",
                "+      byte[] out = new byte[size];",
                "+      System.arraycopy(result, 0, out, 0, size);",
                "+      return new String(out);",
                "+    } catch (InvalidCipherTextException e) {",
                "+      throw new IOException(\"Cannot decrypt: \" + e.getMessage(), e);",
                "+    }",
                "+  }",
                "+}"
            ],
            "changed_files": [
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java",
                "zeppelin-zengine/pom.xml",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/FileSystemStorage.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/NotebookAuthorization.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/storage/ConfigStorage.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/storage/FileSystemConfigStorage.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/user/Credentials.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/user/CredentialsInfoSaving.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/user/Encryptor.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-2742": ""
            },
            "ghissue_refs": {
                "2712": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: user",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: user",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-2742",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2712",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "abc197c2df8f2972f94a16003cdac04d08202e7b",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1507424914,
            "hunks": 18,
            "message": "[ZEPPELIN-2368]. Option to run all paragraphs *sequentially* ### What is this PR for? This PR change the \"run all paragraphs\" to be sequentially running. ### What type of PR is it? [Improvement] ### Todos * [ ] - Task ### What is the Jira issue? * https://issues.apache.org/jira/browse/ZEPPELIN-2368 ### How should this be tested? * First time? Setup Travis CI as described on https://zeppelin.apache.org/contribution/contributions.html#continuous-integration * Strongly recommended: add automated unit tests for any new or changed behavior * Outline any manual steps to test the PR here. ### Screenshots (if appropriate) ![sequential](https://user-images.githubusercontent.com/164491/31705273-5d77a476-b3aa-11e7-921e-6f039ee1e376.gif) ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Jeff Zhang <zjffdu@apache.org> Closes #2627 from zjffdu/ZEPPELIN-2368 and squashes the following commits: f701d5b [Jeff Zhang] [ZEPPELIN-2368]. Option to run all paragraphs *sequentially*",
            "diff": [
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "index cb249d8c6..f2804756a 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "@@ -713,3 +713,3 @@ public class ZeppelinConfiguration extends XMLConfiguration {",
                "     ZEPPELIN_INTERPRETER_LIFECYCLE_MANAGER_TIMEOUT_THRESHOLD(",
                "-        \"zeppelin.interpreter.lifecyclemanager.timeout.threshold\", 360000L);",
                "+        \"zeppelin.interpreter.lifecyclemanager.timeout.threshold\", 3600000L);",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/Job.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/Job.java",
                "index 191902a1c..8e25f7b1f 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/Job.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/Job.java",
                "@@ -65,2 +65,6 @@ public abstract class Job {",
                "     }",
                "+",
                "+    public boolean isCompleted() {",
                "+      return this == FINISHED || this == ERROR || this == ABORT;",
                "+    }",
                "   }",
                "diff --git a/zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java b/zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java",
                "index 42234fe29..883598437 100644",
                "--- a/zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java",
                "+++ b/zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java",
                "@@ -652,3 +652,3 @@ public class NotebookRestApi {",
                "     try {",
                "-      note.runAll(subject);",
                "+      note.runAll(subject, true);",
                "     } catch (Exception ex) {",
                "diff --git a/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java b/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "index f9a8ba13f..aa5b0fb9d 100644",
                "--- a/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "+++ b/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "@@ -1680,3 +1680,6 @@ public class NotebookServer extends WebSocketServlet",
                "-      persistAndExecuteSingleParagraph(conn, note, p);",
                "+      if (!persistAndExecuteSingleParagraph(conn, note, p, true)) {",
                "+        // stop execution when one paragraph fails.",
                "+        break;",
                "+      }",
                "     }",
                "@@ -1772,3 +1775,3 @@ public class NotebookServer extends WebSocketServlet",
                "-    persistAndExecuteSingleParagraph(conn, note, p);",
                "+    persistAndExecuteSingleParagraph(conn, note, p, false);",
                "   }",
                "@@ -1804,7 +1807,8 @@ public class NotebookServer extends WebSocketServlet",
                "-  private void persistAndExecuteSingleParagraph(NotebookSocket conn,",
                "-                                                Note note, Paragraph p) throws IOException {",
                "+  private boolean persistAndExecuteSingleParagraph(NotebookSocket conn,",
                "+                                                Note note, Paragraph p,",
                "+                                                boolean blocking) throws IOException {",
                "     addNewParagraphIfLastParagraphIsExecuted(note, p);",
                "     if (!persistNoteWithAuthInfo(conn, note, p)) {",
                "-      return;",
                "+      return false;",
                "     }",
                "@@ -1812,3 +1816,3 @@ public class NotebookServer extends WebSocketServlet",
                "     try {",
                "-      note.run(p.getId());",
                "+      return note.run(p.getId(), blocking);",
                "     } catch (Exception ex) {",
                "@@ -1820,2 +1824,3 @@ public class NotebookServer extends WebSocketServlet",
                "       }",
                "+      return false;",
                "     }",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java",
                "index f27f83dba..fb869547d 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java",
                "@@ -805,3 +805,3 @@ public class InterpreterSettingManager {",
                "   public void restart(String id) throws InterpreterException {",
                "-    restart(id, \"\", \"anonymous\");",
                "+    interpreterSettings.get(id).close();",
                "   }",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "index c89eee5c7..5124f5d44 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "@@ -594,6 +594,6 @@ public class Note implements ParagraphJobListener, JsonSerializable {",
                "     authenticationInfo.setUser(cronExecutingUser);",
                "-    runAll(authenticationInfo);",
                "+    runAll(authenticationInfo, true);",
                "   }",
                "-  public void runAll(AuthenticationInfo authenticationInfo) {",
                "+  public void runAll(AuthenticationInfo authenticationInfo, boolean blocking) {",
                "     for (Paragraph p : getParagraphs()) {",
                "@@ -603,3 +603,6 @@ public class Note implements ParagraphJobListener, JsonSerializable {",
                "       p.setAuthenticationInfo(authenticationInfo);",
                "-      run(p.getId());",
                "+      if (!run(p.getId(), blocking)) {",
                "+        logger.warn(\"Skip running the remain notes because paragraph {} fails\", p.getId());",
                "+        break;",
                "+      }",
                "     }",
                "@@ -607,2 +610,6 @@ public class Note implements ParagraphJobListener, JsonSerializable {",
                "+  public boolean run(String paragraphId) {",
                "+    return run(paragraphId, false);",
                "+  }",
                "+",
                "   /**",
                "@@ -612,3 +619,3 @@ public class Note implements ParagraphJobListener, JsonSerializable {",
                "    */",
                "-  public void run(String paragraphId) {",
                "+  public boolean run(String paragraphId, boolean blocking) {",
                "     Paragraph p = getParagraph(paragraphId);",
                "@@ -619,3 +626,3 @@ public class Note implements ParagraphJobListener, JsonSerializable {",
                "       p.setStatus(Job.Status.FINISHED);",
                "-      return;",
                "+      return true;",
                "     }",
                "@@ -640,2 +647,15 @@ public class Note implements ParagraphJobListener, JsonSerializable {",
                "     }",
                "+",
                "+    if (blocking) {",
                "+      while (!p.getStatus().isCompleted()) {",
                "+        try {",
                "+          Thread.sleep(100);",
                "+        } catch (InterruptedException e) {",
                "+          throw new RuntimeException(e);",
                "+        }",
                "+      }",
                "+      return p.getStatus() == Status.FINISHED;",
                "+    } else {",
                "+      return true;",
                "+    }",
                "   }",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "index 701943a82..eaef494d2 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "@@ -648,3 +648,3 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "     public void run() {",
                "-      note.run(getParagraphId());",
                "+      note.run(getParagraphId(), false);",
                "     }"
            ],
            "changed_files": [
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/Job.java",
                "zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java",
                "zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-2368": ""
            },
            "ghissue_refs": {
                "2627": "Run all paragraphs sequentially #2619"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: paragraph, user",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: scheduler, paragraph",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-2368",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2627",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0f81b6d6132471ddf0e91cc3738da1ff365604f8",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1510170135,
            "hunks": 5,
            "message": "[ZEPPELIN-3012] Interpreter Permissions not working properly for groups ### What is this PR for? This fixes issues when using Zeppelin with permissions for users belonging to more than one roles / groups. Constructor of org.apache.zeppelin.user.AuthenticationInfo didn't consider that the roles String will contain spaces, in case there is more than one role, e.g. 'role1, role2'. This change fixes the issue, by invoking trim() on each role. ### What type of PR is it? [Bug Fix] ### Todos ### What is the Jira issue? https://issues.apache.org/jira/browse/ZEPPELIN-3012 ### How should this be tested? * Enable shiro.ini, including 'admin' user * Login with 'admin' and enable Interpreter Permissions for any Interpreter, granting access to 'role2' * Try to use this Interpreter with 'user1', who belongs to role2. ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? no * Is there breaking changes for older versions? no * Does this needs documentation? no Author: Andreas Weise <a.weise@avm.de> Closes #2647 from weand/ZEPPELIN-3012 and squashes the following commits: 53a515a [Andreas Weise] [ZEPPELIN-3012] Interpreter Permissions not working properly for groups f46c11f [Andreas Weise] [ZEPPELIN-3012] Interpreter Permissions not working properly for groups b6103e3 [Andreas Weise] [ZEPPELIN-3012] Interpreter Permissions not working properly for groups [fix codestyle] 1e5d2b7 [Andreas Weise] [ZEPPELIN-3012] Interpreter Permissions not working properly for groups",
            "diff": [
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/user/AuthenticationInfo.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/user/AuthenticationInfo.java",
                "index d00d1605e..fe9cba60a 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/user/AuthenticationInfo.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/user/AuthenticationInfo.java",
                "@@ -22,5 +22,4 @@ package org.apache.zeppelin.user;",
                " import java.util.ArrayList;",
                "-import java.util.Arrays;",
                " import java.util.List;",
                "-import com.google.gson.Gson;",
                "+",
                " import org.apache.commons.lang.StringUtils;",
                "@@ -30,2 +29,4 @@ import org.slf4j.LoggerFactory;",
                "+import com.google.gson.Gson;",
                "+",
                " /***",
                "@@ -59,4 +60,7 @@ public class AuthenticationInfo implements JsonSerializable {",
                "     if (StringUtils.isNotBlank(roles) && roles.length() > 2) {",
                "-      String[] r = roles.substring(1, roles.length() - 1).split(\",\");",
                "-      this.roles = Arrays.asList(r);",
                "+      this.roles = new ArrayList<>();",
                "+      for (final String role : roles.substring(1, roles.length() - 1)",
                "+          .split(\",\")) {",
                "+        this.roles.add(role.trim());",
                "+      }",
                "     }",
                "@@ -122,2 +126,3 @@ public class AuthenticationInfo implements JsonSerializable {",
                "+  @Override",
                "   public String toJson() {"
            ],
            "changed_files": [
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/user/AuthenticationInfo.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3012": ""
            },
            "ghissue_refs": {
                "2647": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: authentication, enable, user",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: user, authentication",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3012",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2647",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "38ba2d47569300dd2a31bc9141d7439b0d370091",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1512028514,
            "hunks": 12,
            "message": "[Zeppelin-2571] & [Zeppelin-465] Run paragraphs: from first/current to current/last ### What is this PR for? This pr add the ability to run all paragraphs from the first to the current and from the current to the last. This makes it easier to update the data if changes are made in one of the related paragraphs. ### What type of PR is it? Feature ### What is the Jira issue? [ZEPPELIN-2571](https://issues.apache.org/jira/browse/ZEPPELIN-2571) - (Add a \"Run to here\" option on paragraphs) [ZEPPELIN-465](https://issues.apache.org/jira/browse/ZEPPELIN-465)     - (Capability to run all cells below the current cell) ### How should this be tested? 1. Click on the \"Run: from first to this\" or \"Run: from this to last\" in the dropdown menu. Paragraphs from the first/current to the current/last will be started in order. 2. Press the key combination: CTRL + SHIFT + ENTER. A window will appear with the choice of the desired action. ![capture2](https://user-images.githubusercontent.com/25951039/33269914-58eff828-d393-11e7-9ebf-6437ec11c8f2.PNG) Choose one of two actions. The selected action will be performed. ### Screenshots (if appropriate) ![capture1_edit](https://user-images.githubusercontent.com/25951039/33269915-5951b19e-d393-11e7-831b-42d4523908ae.png) ### Questions: * Does the licenses files need update? no * Is there breaking changes for older versions? no * Does this needs documentation? no Author: tinkoff-dwh <tinkoff.dwh@gmail.com> Closes #2688 from tinkoff-dwh/ZEPPELIN-2571&465 and squashes the following commits: 304c196 [tinkoff-dwh] [ZEPPELIN-2517]&[ZEPPELIN-465] fix shortcut description 3d57b30 [tinkoff-dwh] [ZEPPELIN-2517]&[ZEPPELIN-465] save paragraph's focus 70f130c [tinkoff-dwh] [Zeppelin-2517]&[Zeppelin-465] some text change 8ca1df2 [tinkoff-dwh] [Zeppelin-2517]&[Zeppelin-465] line reduction a7a4158 [tinkoff-dwh] [ZEPPELIN-2517]&[ZEPPELIN-465] logic change 9fbcdb6 [tinkoff-dwh] [ZEPPELIN-2517]&[ZEPPELIN-465] add keyboard shortcut bfc3891 [tinkoff-dwh] [ZEPPELIN-2517]&[ZEPPELIN-465] Run paragraphs from 1st to this. From this to last",
            "diff": [
                "diff --git a/zeppelin-web/src/app/notebook/notebook.controller.js b/zeppelin-web/src/app/notebook/notebook.controller.js",
                "index 48fc6e715..1fa63231e 100644",
                "--- a/zeppelin-web/src/app/notebook/notebook.controller.js",
                "+++ b/zeppelin-web/src/app/notebook/notebook.controller.js",
                "@@ -166,3 +166,3 @@ function NotebookCtrl ($scope, $route, $routeParams, $location, $rootScope,",
                "       if (jQuery.contains(angular.element('#' + paragraphId + '_container')[0], clickEvent.target)) {",
                "-        $scope.$broadcast('focusParagraph', paragraphId, 0, true)",
                "+        $scope.$broadcast('focusParagraph', paragraphId, 0, null, true)",
                "         break",
                "@@ -514,3 +514,3 @@ function NotebookCtrl ($scope, $route, $routeParams, $location, $rootScope,",
                "         // we need `$timeout` since angular DOM might not be initialized",
                "-        $timeout(() => { $scope.$broadcast('focusParagraph', para.id, 0, false) })",
                "+        $timeout(() => { $scope.$broadcast('focusParagraph', para.id, 0, null, false) })",
                "       }",
                "@@ -1190,2 +1190,88 @@ function NotebookCtrl ($scope, $route, $routeParams, $location, $rootScope,",
                "+  $scope.$on('runAllAbove', function (event, paragraph, isNeedConfirm) {",
                "+    let allParagraphs = $scope.note.paragraphs",
                "+    let toRunParagraphs = []",
                "+",
                "+    for (let i = 0; allParagraphs[i] !== paragraph; i++) {",
                "+      if (i === allParagraphs.length - 1) { return } // if paragraph not in array of all paragraphs",
                "+      toRunParagraphs.push(allParagraphs[i])",
                "+    }",
                "+",
                "+    const paragraphs = toRunParagraphs.map(p => {",
                "+      return {",
                "+        id: p.id,",
                "+        title: p.title,",
                "+        paragraph: p.text,",
                "+        config: p.config,",
                "+        params: p.settings.params",
                "+      }",
                "+    })",
                "+",
                "+    if (!isNeedConfirm) {",
                "+      websocketMsgSrv.runAllParagraphs($scope.note.id, paragraphs)",
                "+    } else {",
                "+      BootstrapDialog.confirm({",
                "+        closable: true,",
                "+        title: '',",
                "+        message: 'Run all above?',",
                "+        callback: function (result) {",
                "+          if (result) {",
                "+            websocketMsgSrv.runAllParagraphs($scope.note.id, paragraphs)",
                "+          }",
                "+        }",
                "+      })",
                "+    }",
                "+",
                "+    $scope.saveCursorPosition(paragraph)",
                "+  })",
                "+",
                "+  $scope.$on('runAllBelowAndCurrent', function (event, paragraph, isNeedConfirm) {",
                "+    let allParagraphs = $scope.note.paragraphs",
                "+    let toRunParagraphs = []",
                "+",
                "+    for (let i = allParagraphs.length - 1; allParagraphs[i] !== paragraph; i--) {",
                "+      if (i < 0) { return } // if paragraph not in array of all paragraphs",
                "+      toRunParagraphs.push(allParagraphs[i])",
                "+    }",
                "+",
                "+    toRunParagraphs.push(paragraph)",
                "+    toRunParagraphs.reverse()",
                "+",
                "+    const paragraphs = toRunParagraphs.map(p => {",
                "+      return {",
                "+        id: p.id,",
                "+        title: p.title,",
                "+        paragraph: p.text,",
                "+        config: p.config,",
                "+        params: p.settings.params",
                "+      }",
                "+    })",
                "+",
                "+    if (!isNeedConfirm) {",
                "+      websocketMsgSrv.runAllParagraphs($scope.note.id, paragraphs)",
                "+    } else {",
                "+      BootstrapDialog.confirm({",
                "+        closable: true,",
                "+        title: '',",
                "+        message: 'Run current and all below?',",
                "+        callback: function (result) {",
                "+          if (result) {",
                "+            websocketMsgSrv.runAllParagraphs($scope.note.id, paragraphs)",
                "+          }",
                "+        }",
                "+      })",
                "+    }",
                "+",
                "+    $scope.saveCursorPosition(paragraph)",
                "+  })",
                "+",
                "+  $scope.saveCursorPosition = function (paragraph) {",
                "+    let angParagEditor = angular",
                "+      .element('#' + paragraph.id + '_paragraphColumn_main')",
                "+      .scope().editor",
                "+    let col = angParagEditor.selection.lead.column",
                "+    let row = angParagEditor.selection.lead.row",
                "+    $scope.$broadcast('focusParagraph', paragraph.id, row + 1, col)",
                "+  }",
                "+",
                "   $scope.$on('setConnectedStatus', function (event, param) {",
                "diff --git a/zeppelin-web/src/app/notebook/paragraph/paragraph-control.html b/zeppelin-web/src/app/notebook/paragraph/paragraph-control.html",
                "index d6599725c..0b4ca1e4d 100644",
                "--- a/zeppelin-web/src/app/notebook/paragraph/paragraph-control.html",
                "+++ b/zeppelin-web/src/app/notebook/paragraph/paragraph-control.html",
                "@@ -142,2 +142,20 @@ limitations under the License.",
                "         </li>",
                "+        <li>",
                "+          <a ng-click=\"runAllToThis(paragraph)\" ng-hide=\"$first\">",
                "+            <span class=\"icon-action-redo shortcut-icon\"",
                "+                  style=\"position: relative; transform: rotate(-90deg); left: -4px;\">",
                "+            </span>",
                "+            <span class=\"shortcut-keys\">Ctrl+Shift+Enter</span>",
                "+            Run all above",
                "+          </a>",
                "+        </li>",
                "+        <li>",
                "+          <a ng-click=\"runAllFromThis(paragraph)\" ng-hide=\"$last\">",
                "+            <span class=\"icon-action-undo shortcut-icon\"",
                "+                  style=\"position: relative; transform: rotate(-90deg); left: -4px;\">",
                "+            </span>",
                "+            <span class=\"shortcut-keys\">Ctrl+Shift+Enter</span>",
                "+             Run all below",
                "+          </a>",
                "+        </li>",
                "         <li>",
                "diff --git a/zeppelin-web/src/app/notebook/paragraph/paragraph.controller.js b/zeppelin-web/src/app/notebook/paragraph/paragraph.controller.js",
                "index c5788416a..d3ed3466e 100644",
                "--- a/zeppelin-web/src/app/notebook/paragraph/paragraph.controller.js",
                "+++ b/zeppelin-web/src/app/notebook/paragraph/paragraph.controller.js",
                "@@ -473,2 +473,39 @@ function ParagraphCtrl ($scope, $rootScope, $route, $window, $routeParams, $loca",
                "+  $scope.runAllToThis = function(paragraph) {",
                "+    $scope.$emit('runAllAbove', paragraph, true)",
                "+  }",
                "+",
                "+  $scope.runAllFromThis = function(paragraph) {",
                "+    $scope.$emit('runAllBelowAndCurrent', paragraph, true)",
                "+  }",
                "+",
                "+  $scope.runAllToOrFromThis = function (paragraph) {",
                "+    BootstrapDialog.show({",
                "+      message: 'Run paragraphs:',",
                "+      title: '',",
                "+      buttons: [{",
                "+        label: 'Close',",
                "+        action: function(dialog) {",
                "+          dialog.close()",
                "+        }",
                "+      },",
                "+      {",
                "+        label: 'Run all above',",
                "+        cssClass: 'btn-primary',",
                "+        action: function(dialog) {",
                "+          $scope.$emit('runAllAbove', paragraph, false)",
                "+          dialog.close()",
                "+        }",
                "+      },",
                "+      {",
                "+        label: 'Run current and all below',",
                "+        cssClass: 'btn-primary',",
                "+        action: function(dialog) {",
                "+          $scope.$emit('runAllBelowAndCurrent', paragraph, false)",
                "+          dialog.close()",
                "+        }",
                "+      }]",
                "+    })",
                "+  }",
                "+",
                "   $scope.turnOnAutoRun = function (paragraph) {",
                "@@ -1448,4 +1485,6 @@ function ParagraphCtrl ($scope, $rootScope, $route, $window, $routeParams, $loca",
                "         $timeout(() => $scope.$emit('moveFocusToNextParagraph', paragraphId))",
                "-      } else if (keyEvent.shiftKey && keyCode === 13) { // Shift + Enter",
                "+      } else if (!keyEvent.ctrlKey && keyEvent.shiftKey && keyCode === 13) { // Shift + Enter",
                "         $scope.runParagraphFromShortcut($scope.getEditorValue())",
                "+      } else if (keyEvent.ctrlKey && keyEvent.shiftKey && keyCode === 13) { // Ctrl + Shift + Enter",
                "+        $scope.runAllToOrFromThis($scope.paragraph)",
                "       } else if (keyEvent.ctrlKey && keyEvent.altKey && keyCode === 67) { // Ctrl + Alt + c",
                "@@ -1502,3 +1541,6 @@ function ParagraphCtrl ($scope, $rootScope, $route, $window, $routeParams, $loca",
                "-  $scope.$on('focusParagraph', function (event, paragraphId, cursorPos, mouseEvent) {",
                "+  $scope.$on('focusParagraph', function (event, paragraphId, cursorPosRow, cursorPosCol, mouseEvent) {",
                "+    if (cursorPosCol === null || cursorPosCol === undefined) {",
                "+      cursorPosCol = 0",
                "+    }",
                "     if ($scope.paragraph.id === paragraphId) {",
                "@@ -1510,10 +1552,10 @@ function ParagraphCtrl ($scope, $rootScope, $route, $window, $routeParams, $loca",
                "           let row",
                "-          if (cursorPos >= 0) {",
                "-            row = cursorPos",
                "-            $scope.editor.gotoLine(row, 0)",
                "+          if (cursorPosRow >= 0) {",
                "+            row = cursorPosRow",
                "+            $scope.editor.gotoLine(row, cursorPosCol)",
                "           } else {",
                "             row = $scope.editor.session.getLength()",
                "-            $scope.editor.gotoLine(row, 0)",
                "+            $scope.editor.gotoLine(row, cursorPosCol)",
                "           }",
                "-          $scope.scrollToCursor($scope.paragraph.id, 0)",
                "+          $scope.scrollToCursor($scope.paragraph.id, cursorPosCol)",
                "         }",
                "diff --git a/zeppelin-web/src/app/notebook/shortcut.html b/zeppelin-web/src/app/notebook/shortcut.html",
                "index c4b4009ee..9bc55973a 100644",
                "--- a/zeppelin-web/src/app/notebook/shortcut.html",
                "+++ b/zeppelin-web/src/app/notebook/shortcut.html",
                "@@ -39,2 +39,13 @@ limitations under the License.",
                "+          <tr>",
                "+            <td>",
                "+              <div class=\"col-md-8\">Run all above/below paragraphs</div>",
                "+            </td>",
                "+            <td>",
                "+              <div class=\"keys\">",
                "+                <kbd class=\"kbd-default\">Ctrl</kbd> + <kbd class=\"kbd-default\">Shift</kbd> + <kbd class=\"kbd-default\">Enter</kbd>",
                "+              </div>",
                "+            </td>",
                "+          </tr>",
                "+",
                "           <tr>"
            ],
            "changed_files": [
                "zeppelin-web/src/app/notebook/notebook.controller.js",
                "zeppelin-web/src/app/notebook/paragraph/paragraph-control.html",
                "zeppelin-web/src/app/notebook/paragraph/paragraph.controller.js",
                "zeppelin-web/src/app/notebook/shortcut.html"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-2571": "",
                "ZEPPELIN-465": "",
                "ZEPPELIN-2517": ""
            },
            "ghissue_refs": {
                "2688": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: paragraph, user",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: paragraph",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-2571, ZEPPELIN-465, ZEPPELIN-2517",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2688",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "50cfabdf9b4a55e1bb964376eb5eca22f6046913",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1510072438,
            "hunks": 150,
            "message": "[ZEPPELIN-1363] Note level dynamic form ### What is this PR for? Added dynamic forms for Note. All paragraphs has access to note forms. ### What type of PR is it? [Feature] ### What is the Jira issue? https://issues.apache.org/jira/browse/ZEPPELIN-1363 ### How should this be tested? Create global interpreter JDBC and Spark. Create note with 2 paragraphs ``` %pyspark print(\"Textbox paragraph \" + z.textbox('input', 'default')) print(\"Textbox note \" + z.noteTextbox('note_input', 'default_note')) print(\"Select paragraph \" +  z.select(\"sel\", [(\"1\",\"opt1\"), (\"2\",\"opt2\"), (\"3\",\"opt3\")])) print(\"Select note \" +  z.noteSelect(\"sel_note\", [(\"1\",\"noteOpt1\"), (\"2\",\"noteOpt2\"), (\"3\",\"noteOpt3\")])) options = [(\"key1\",\"Name1\"), (\"key2\",\"Name2\")] print(\"Checkbox paragraph \"+ \" and \".join(z.checkbox(\"chk\", options, [\"key1\"]))) print(\"Checkbox note \"+ \" and \".join(z.noteCheckbox(\"chk_note\", options, [\"key1\",\"key2\"]))) ``` ``` %jdbc select '$${checkbox:chk_note=key1|key2,key1|key2}   $${note_input} ${note_input=sameName}' ``` ### Screenshots (if appropriate) 1) native forms ![1](https://user-images.githubusercontent.com/25951039/32273062-b4d02526-bf22-11e7-9c95-f5aa3b41b8a0.gif) 2) remove ![2](https://user-images.githubusercontent.com/25951039/32273061-b4b0a926-bf22-11e7-8e5c-b26f37da7f61.gif) 3) simple forms ![3](https://user-images.githubusercontent.com/25951039/32273060-b48fff78-bf22-11e7-81be-e1afac00b709.gif) ### Questions: * Does the licenses files need update? no * Is there breaking changes for older versions? no * Does this needs documentation? no Author: tinkoff-dwh <tinkoff.dwh@gmail.com> Closes #2641 from tinkoff-dwh/ZEPPELIN-1363 and squashes the following commits: 3ee4826 [tinkoff-dwh] [ZEPPELIN-1363] autosave textbox f30033a [tinkoff-dwh] Merge remote-tracking branch 'upstream/master' into ZEPPELIN-1363 29eaca2 [tinkoff-dwh] [ZEPPELIN-1363] fix tests bf8194e [tinkoff-dwh] Merge remote-tracking branch 'upstream/master' into ZEPPELIN-1363 9b2f3e9 [tinkoff-dwh] [ZEPPELIN-1363] button to remove form c566462 [tinkoff-dwh] [ZEPPELIN-1363] note dynamic forms (simple; native: spark, python)",
            "diff": [
                "diff --git a/python/src/main/java/org/apache/zeppelin/python/IPythonInterpreter.java b/python/src/main/java/org/apache/zeppelin/python/IPythonInterpreter.java",
                "index 77e45b99c..2184c1f10 100644",
                "--- a/python/src/main/java/org/apache/zeppelin/python/IPythonInterpreter.java",
                "+++ b/python/src/main/java/org/apache/zeppelin/python/IPythonInterpreter.java",
                "@@ -305,2 +305,3 @@ public class IPythonInterpreter extends Interpreter implements ExecuteResultHand",
                "     zeppelinContext.setGui(context.getGui());",
                "+    zeppelinContext.setNoteGui(context.getNoteGui());",
                "     interpreterOutput.setInterpreterOutput(context.out);",
                "diff --git a/python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java b/python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java",
                "index 4f897c8d6..051e1fa69 100644",
                "--- a/python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java",
                "+++ b/python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java",
                "@@ -71,2 +71,3 @@ public class PythonInterpreter extends Interpreter implements ExecuteResultHandl",
                "+  private PythonZeppelinContext zeppelinContext;",
                "   private InterpreterContext context;",
                "@@ -225,2 +226,5 @@ public class PythonInterpreter extends Interpreter implements ExecuteResultHandl",
                "     iPythonInterpreter = getIPythonInterpreter();",
                "+    this.zeppelinContext = new PythonZeppelinContext(",
                "+        getInterpreterGroup().getInterpreterHookRegistry(),",
                "+        Integer.parseInt(getProperty(\"zeppelin.python.maxResult\", \"1000\")));",
                "     if (getProperty(\"zeppelin.python.useIPython\", \"true\").equals(\"true\") &&",
                "@@ -376,2 +380,3 @@ public class PythonInterpreter extends Interpreter implements ExecuteResultHandl",
                "     }",
                "+",
                "     if (cmd == null || cmd.isEmpty()) {",
                "@@ -382,2 +387,5 @@ public class PythonInterpreter extends Interpreter implements ExecuteResultHandl",
                "+    zeppelinContext.setGui(context.getGui());",
                "+    zeppelinContext.setNoteGui(context.getNoteGui());",
                "+",
                "     if (!pythonscriptRunning) {",
                "@@ -561,4 +569,4 @@ public class PythonInterpreter extends Interpreter implements ExecuteResultHandl",
                "-  public GUI getGui() {",
                "-    return context.getGui();",
                "+  public PythonZeppelinContext getZeppelinContext() {",
                "+    return zeppelinContext;",
                "   }",
                "diff --git a/python/src/main/resources/grpc/python/zeppelin_python.py b/python/src/main/resources/grpc/python/zeppelin_python.py",
                "index 0f5638fd4..1a9e8afa1 100644",
                "--- a/python/src/main/resources/grpc/python/zeppelin_python.py",
                "+++ b/python/src/main/resources/grpc/python/zeppelin_python.py",
                "@@ -36,13 +36,23 @@ class PyZeppelinContext(object):",
                "   def input(self, name, defaultValue=\"\"):",
                "-    return self.z.getGui().input(name, defaultValue)",
                "+    return self.z.input(name, defaultValue)",
                "+",
                "+  def textbox(self, name, defaultValue=\"\"):",
                "+    return self.z.textbox(name, defaultValue)",
                "+",
                "+  def noteTextbox(self, name, defaultValue=\"\"):",
                "+    return self.z.noteTextbox(name, defaultValue)",
                "   def select(self, name, options, defaultValue=\"\"):",
                "-    javaOptions = gateway.new_array(self.paramOption, len(options))",
                "-    i = 0",
                "-    for tuple in options:",
                "-      javaOptions[i] = self.paramOption(tuple[0], tuple[1])",
                "-      i += 1",
                "-    return self.z.getGui().select(name, defaultValue, javaOptions)",
                "+    return self.z.select(name, defaultValue, self.getParamOptions(options))",
                "+",
                "+  def noteSelect(self, name, options, defaultValue=\"\"):",
                "+    return self.z.noteSelect(name, defaultValue, self.getParamOptions(options))",
                "   def checkbox(self, name, options, defaultChecked=[]):",
                "+    return self.z.checkbox(name, self.getDefaultChecked(defaultChecked), self.getParamOptions(options))",
                "+",
                "+  def noteCheckbox(self, name, options, defaultChecked=[]):",
                "+    return self.z.noteCheckbox(name, self.getDefaultChecked(defaultChecked), self.getParamOptions(options))",
                "+",
                "+  def getParamOptions(self, options):",
                "     javaOptions = gateway.new_array(self.paramOption, len(options))",
                "@@ -52,6 +62,9 @@ class PyZeppelinContext(object):",
                "       i += 1",
                "-    javaDefaultCheck = self.javaList()",
                "+    return javaOptions",
                "+",
                "+  def getDefaultChecked(self, defaultChecked):",
                "+    javaDefaultChecked = self.javaList()",
                "     for check in defaultChecked:",
                "-      javaDefaultCheck.append(check)",
                "-    return self.z.getGui().checkbox(name, javaDefaultCheck, javaOptions)",
                "+      javaDefaultChecked.append(check)",
                "+    return javaDefaultChecked",
                "diff --git a/python/src/main/resources/python/zeppelin_python.py b/python/src/main/resources/python/zeppelin_python.py",
                "index 446201d22..519d1af45 100644",
                "--- a/python/src/main/resources/python/zeppelin_python.py",
                "+++ b/python/src/main/resources/python/zeppelin_python.py",
                "@@ -66,13 +66,23 @@ class PyZeppelinContext(object):",
                "   def input(self, name, defaultValue=\"\"):",
                "-    return self.z.getGui().input(name, defaultValue)",
                "+    return self.z.input(name, defaultValue)",
                "+",
                "+  def textbox(self, name, defaultValue=\"\"):",
                "+    return self.z.textbox(name, defaultValue)",
                "+",
                "+  def noteTextbox(self, name, defaultValue=\"\"):",
                "+    return self.z.noteTextbox(name, defaultValue)",
                "   def select(self, name, options, defaultValue=\"\"):",
                "-    javaOptions = gateway.new_array(self.paramOption, len(options))",
                "-    i = 0",
                "-    for tuple in options:",
                "-      javaOptions[i] = self.paramOption(tuple[0], tuple[1])",
                "-      i += 1",
                "-    return self.z.getGui().select(name, defaultValue, javaOptions)",
                "+    return self.z.select(name, defaultValue, self.getParamOptions(options))",
                "+",
                "+  def noteSelect(self, name, options, defaultValue=\"\"):",
                "+    return self.z.noteSelect(name, defaultValue, self.getParamOptions(options))",
                "   def checkbox(self, name, options, defaultChecked=[]):",
                "+    return self.z.checkbox(name, self.getDefaultChecked(defaultChecked), self.getParamOptions(options))",
                "+",
                "+  def noteCheckbox(self, name, options, defaultChecked=[]):",
                "+    return self.z.noteCheckbox(name, self.getDefaultChecked(defaultChecked), self.getParamOptions(options))",
                "+",
                "+  def getParamOptions(self, options):",
                "     javaOptions = gateway.new_array(self.paramOption, len(options))",
                "@@ -82,6 +92,9 @@ class PyZeppelinContext(object):",
                "       i += 1",
                "-    javaDefaultCheck = self.javaList()",
                "+    return javaOptions",
                "+",
                "+  def getDefaultChecked(self, defaultChecked):",
                "+    javaDefaultChecked = self.javaList()",
                "     for check in defaultChecked:",
                "-      javaDefaultCheck.append(check)",
                "-    return self.z.getGui().checkbox(name, javaDefaultCheck, javaOptions)",
                "+      javaDefaultChecked.append(check)",
                "+    return javaDefaultChecked",
                "@@ -208,3 +221,3 @@ intp.onPythonScriptInitialized(os.getpid())",
                " java_import(gateway.jvm, \"org.apache.zeppelin.display.Input\")",
                "-z = __zeppelin__ = PyZeppelinContext(intp)",
                "+z = __zeppelin__ = PyZeppelinContext(intp.getZeppelinContext())",
                " __zeppelin__._setup_matplotlib()",
                "diff --git a/spark/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java b/spark/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java",
                "index 5df4ec6b0..21a1649c2 100644",
                "--- a/spark/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java",
                "+++ b/spark/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java",
                "@@ -466,2 +466,3 @@ public class PySparkInterpreter extends Interpreter implements ExecuteResultHand",
                "     __zeppelin__.setGui(context.getGui());",
                "+    __zeppelin__.setNoteGui(context.getNoteGui());",
                "     pythonInterpretRequest = new PythonInterpretRequest(st, jobGroup, jobDesc);",
                "diff --git a/spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java b/spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java",
                "index 71a439f49..3e4da1918 100644",
                "--- a/spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java",
                "+++ b/spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java",
                "@@ -1146,2 +1146,3 @@ public class SparkInterpreter extends Interpreter {",
                "       z.setGui(context.getGui());",
                "+      z.setNoteGui(context.getNoteGui());",
                "       String jobDesc = \"Started by: \" + Utils.getUserName(context.getAuthenticationInfo());",
                "diff --git a/spark/src/main/java/org/apache/zeppelin/spark/SparkZeppelinContext.java b/spark/src/main/java/org/apache/zeppelin/spark/SparkZeppelinContext.java",
                "index 09b8d440c..92dc0b14b 100644",
                "--- a/spark/src/main/java/org/apache/zeppelin/spark/SparkZeppelinContext.java",
                "+++ b/spark/src/main/java/org/apache/zeppelin/spark/SparkZeppelinContext.java",
                "@@ -35,3 +35,2 @@ import java.util.*;",
                "-import static scala.collection.JavaConversions.asJavaCollection;",
                " import static scala.collection.JavaConversions.asJavaIterable;",
                "@@ -207,5 +206,40 @@ public class SparkZeppelinContext extends BaseZeppelinContext {",
                "       scala.collection.Iterable<Tuple2<Object, String>> options) {",
                "-    return scala.collection.JavaConversions.asScalaBuffer(",
                "-        gui.checkbox(name, asJavaCollection(defaultChecked),",
                "-            tuplesToParamOptions(options))).toSeq();",
                "+    List<Object> defaultCheckedList = Lists.newArrayList(asJavaIterable(defaultChecked).iterator());",
                "+    Collection<Object> checkbox = checkbox(name, defaultCheckedList, tuplesToParamOptions(options));",
                "+    List<Object> checkboxList = Arrays.asList(checkbox.toArray());",
                "+    return scala.collection.JavaConversions.asScalaBuffer(checkboxList).toSeq();",
                "+  }",
                "+",
                "+  @ZeppelinApi",
                "+  public Object noteSelect(String name, scala.collection.Iterable<Tuple2<Object, String>> options) {",
                "+    return noteSelect(name, \"\", options);",
                "+  }",
                "+",
                "+  @ZeppelinApi",
                "+  public Object noteSelect(String name, Object defaultValue,",
                "+                       scala.collection.Iterable<Tuple2<Object, String>> options) {",
                "+    return noteSelect(name, defaultValue, tuplesToParamOptions(options));",
                "+  }",
                "+",
                "+  @ZeppelinApi",
                "+  public scala.collection.Seq<Object> noteCheckbox(",
                "+      String name,",
                "+      scala.collection.Iterable<Tuple2<Object, String>> options) {",
                "+    List<Object> allChecked = new LinkedList<>();",
                "+    for (Tuple2<Object, String> option : asJavaIterable(options)) {",
                "+      allChecked.add(option._1());",
                "+    }",
                "+    return noteCheckbox(name, collectionAsScalaIterable(allChecked), options);",
                "+  }",
                "+",
                "+  @ZeppelinApi",
                "+  public scala.collection.Seq<Object> noteCheckbox(",
                "+      String name,",
                "+      scala.collection.Iterable<Object> defaultChecked,",
                "+      scala.collection.Iterable<Tuple2<Object, String>> options) {",
                "+    List<Object> defaultCheckedList = Lists.newArrayList(asJavaIterable(defaultChecked).iterator());",
                "+    Collection<Object> checkbox = noteCheckbox(name, defaultCheckedList,",
                "+        tuplesToParamOptions(options));",
                "+    List<Object> checkboxList = Arrays.asList(checkbox.toArray());",
                "+    return scala.collection.JavaConversions.asScalaBuffer(checkboxList).toSeq();",
                "   }",
                "diff --git a/spark/src/main/resources/python/zeppelin_pyspark.py b/spark/src/main/resources/python/zeppelin_pyspark.py",
                "index 347b543dc..c10855a16 100644",
                "--- a/spark/src/main/resources/python/zeppelin_pyspark.py",
                "+++ b/spark/src/main/resources/python/zeppelin_pyspark.py",
                "@@ -83,15 +83,28 @@ class PyZeppelinContext(dict):",
                "+  def textbox(self, name, defaultValue=\"\"):",
                "+    return self.z.textbox(name, defaultValue)",
                "+",
                "+  def noteTextbox(self, name, defaultValue=\"\"):",
                "+    return self.z.noteTextbox(name, defaultValue)",
                "+",
                "   def select(self, name, options, defaultValue=\"\"):",
                "     # auto_convert to ArrayList doesn't match the method signature on JVM side",
                "-    tuples = list(map(lambda items: self.__tupleToScalaTuple2(items), options))",
                "-    iterables = gateway.jvm.scala.collection.JavaConversions.collectionAsScalaIterable(tuples)",
                "-    return self.z.select(name, defaultValue, iterables)",
                "+    return self.z.select(name, defaultValue, self.getParamOptions(options))",
                "+",
                "+  def noteSelect(self, name, options, defaultValue=\"\"):",
                "+    return self.z.noteSelect(name, defaultValue, self.getParamOptions(options))",
                "   def checkbox(self, name, options, defaultChecked=None):",
                "-    if defaultChecked is None:",
                "-      defaultChecked = []",
                "-    optionTuples = list(map(lambda items: self.__tupleToScalaTuple2(items), options))",
                "-    optionIterables = gateway.jvm.scala.collection.JavaConversions.collectionAsScalaIterable(optionTuples)",
                "-    defaultCheckedIterables = gateway.jvm.scala.collection.JavaConversions.collectionAsScalaIterable(defaultChecked)",
                "-    checkedItems = gateway.jvm.scala.collection.JavaConversions.seqAsJavaList(self.z.checkbox(name, defaultCheckedIterables, optionIterables))",
                "+    optionsIterable = self.getParamOptions(options)",
                "+    defaultCheckedIterables = self.getDefaultChecked(defaultChecked)",
                "+    checkedItems = gateway.jvm.scala.collection.JavaConversions.seqAsJavaList(self.z.checkbox(name, defaultCheckedIterables, optionsIterable))",
                "+    result = []",
                "+    for checkedItem in checkedItems:",
                "+      result.append(checkedItem)",
                "+    return result;",
                "+",
                "+  def noteCheckbox(self, name, options, defaultChecked=None):",
                "+    optionsIterable = self.getParamOptions(options)",
                "+    defaultCheckedIterables = self.getDefaultChecked(defaultChecked)",
                "+    checkedItems = gateway.jvm.scala.collection.JavaConversions.seqAsJavaList(self.z.noteCheckbox(name, defaultCheckedIterables, optionsIterable))",
                "     result = []",
                "@@ -101,2 +114,11 @@ class PyZeppelinContext(dict):",
                "+  def getParamOptions(self, options):",
                "+    tuples = list(map(lambda items: self.__tupleToScalaTuple2(items), options))",
                "+    return gateway.jvm.scala.collection.JavaConversions.collectionAsScalaIterable(tuples)",
                "+",
                "+  def getDefaultChecked(self, defaultChecked):",
                "+    if defaultChecked is None:",
                "+      defaultChecked = []",
                "+    return gateway.jvm.scala.collection.JavaConversions.collectionAsScalaIterable(defaultChecked)",
                "+",
                "   def registerHook(self, event, cmd, replName=None):",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/Input.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/Input.java",
                "index 8a2cd932d..a6860dea5 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/Input.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/Input.java",
                "@@ -157,2 +157,4 @@ public class Input<T> implements Serializable {",
                "   private static final Pattern VAR_PTN = Pattern.compile(\"([_])?[$][{]([^=}]*([=][^}]*)?)[}]\");",
                "+  private static final Pattern VAR_NOTE_PTN =",
                "+      Pattern.compile(\"([_])?[$]{2}[{]([^=}]*([=][^}]*)?)[}]\");",
                "@@ -283,3 +285,4 @@ public class Input<T> implements Serializable {",
                "-  public static LinkedHashMap<String, Input> extractSimpleQueryForm(String script) {",
                "+  public static LinkedHashMap<String, Input> extractSimpleQueryForm(String script,",
                "+                                                                    boolean noteForm) {",
                "     LinkedHashMap<String, Input> forms = new LinkedHashMap<>();",
                "@@ -290,4 +293,9 @@ public class Input<T> implements Serializable {",
                "-    Matcher match = VAR_PTN.matcher(replaced);",
                "+    Pattern pattern = noteForm ? VAR_NOTE_PTN : VAR_PTN;",
                "+    Matcher match = pattern.matcher(replaced);",
                "     while (match.find()) {",
                "+      int first = match.start();",
                "+      if (!noteForm && first > 0 && replaced.charAt(first - 1) == '$') {",
                "+        continue;",
                "+      }",
                "       Input form = getInputForm(match);",
                "@@ -302,7 +310,14 @@ public class Input<T> implements Serializable {",
                "-  public static String getSimpleQuery(Map<String, Object> params, String script) {",
                "+  public static String getSimpleQuery(Map<String, Object> params, String script, boolean noteForm) {",
                "     String replaced = script;",
                "-    Matcher match = VAR_PTN.matcher(replaced);",
                "+    Pattern pattern = noteForm ? VAR_NOTE_PTN : VAR_PTN;",
                "+",
                "+    Matcher match = pattern.matcher(replaced);",
                "     while (match.find()) {",
                "+      int first = match.start();",
                "+",
                "+      if (!noteForm && first > 0 && replaced.charAt(first - 1) == '$') {",
                "+        continue;",
                "+      }",
                "       Input input = getInputForm(match);",
                "@@ -339,3 +354,3 @@ public class Input<T> implements Serializable {",
                "       replaced = match.replaceFirst(expanded);",
                "-      match = VAR_PTN.matcher(replaced);",
                "+      match = pattern.matcher(replaced);",
                "     }",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/BaseZeppelinContext.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/BaseZeppelinContext.java",
                "index 950396225..65bb06fe1 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/BaseZeppelinContext.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/BaseZeppelinContext.java",
                "@@ -47,2 +47,3 @@ public abstract class BaseZeppelinContext {",
                "   protected GUI gui;",
                "+  protected GUI noteGui;",
                "@@ -88,3 +89,3 @@ public abstract class BaseZeppelinContext {",
                "   public Object input(String name, Object defaultValue) {",
                "-    return textbox(name, defaultValue.toString());",
                "+    return textbox(name, defaultValue.toString(), false);",
                "   }",
                "@@ -93,3 +94,3 @@ public abstract class BaseZeppelinContext {",
                "   public Object textbox(String name) {",
                "-    return textbox(name, \"\");",
                "+    return textbox(name, \"\", false);",
                "   }",
                "@@ -98,7 +99,19 @@ public abstract class BaseZeppelinContext {",
                "   public Object textbox(String name, String defaultValue) {",
                "-    return gui.textbox(name, defaultValue);",
                "+    return textbox(name, defaultValue, false);",
                "+  }",
                "+",
                "+  @ZeppelinApi",
                "+  public Collection<Object> checkbox(String name, ParamOption[] options) {",
                "+    return checkbox(name, options, false);",
                "+  }",
                "+",
                "+  @ZeppelinApi",
                "+  public Collection<Object> checkbox(String name, List<Object> defaultChecked,",
                "+                                     ParamOption[] options) {",
                "+    return checkbox(name, defaultChecked, options, false);",
                "   }",
                "+  @ZeppelinApi",
                "   public Object select(String name, Object defaultValue, ParamOption[] paramOptions) {",
                "-    return gui.select(name, defaultValue, paramOptions);",
                "+    return select(name, defaultValue, paramOptions, false);",
                "   }",
                "@@ -106,3 +119,47 @@ public abstract class BaseZeppelinContext {",
                "   @ZeppelinApi",
                "-  public Collection<Object> checkbox(String name, ParamOption[] options) {",
                "+  public Object noteTextbox(String name) {",
                "+    return textbox(name, \"\");",
                "+  }",
                "+",
                "+  @ZeppelinApi",
                "+  public Object noteTextbox(String name, String defaultValue) {",
                "+    return textbox(name, defaultValue, true);",
                "+  }",
                "+",
                "+  @ZeppelinApi",
                "+  public Collection<Object> noteCheckbox(String name, ParamOption[] options) {",
                "+    return checkbox(name, options, true);",
                "+  }",
                "+",
                "+  @ZeppelinApi",
                "+  public Collection<Object> noteCheckbox(String name, List<Object> defaultChecked,",
                "+                                         ParamOption[] options) {",
                "+    return checkbox(name, defaultChecked, options, true);",
                "+  }",
                "+",
                "+  @ZeppelinApi",
                "+  public Object noteSelect(String name, Object defaultValue, ParamOption[] paramOptions) {",
                "+    return select(name, defaultValue, paramOptions, true);",
                "+  }",
                "+",
                "+",
                "+  private Object select(String name, Object defaultValue, ParamOption[] paramOptions,",
                "+                       boolean noteForm) {",
                "+    if (noteForm) {",
                "+      return noteGui.select(name, defaultValue, paramOptions);",
                "+    } else {",
                "+      return gui.select(name, defaultValue, paramOptions);",
                "+    }",
                "+  }",
                "+",
                "+  private Object textbox(String name, String defaultValue, boolean noteForm) {",
                "+    if (noteForm) {",
                "+      return noteGui.textbox(name, defaultValue);",
                "+    } else {",
                "+      return gui.textbox(name, defaultValue);",
                "+    }",
                "+  }",
                "+",
                "+  private Collection<Object> checkbox(String name, ParamOption[] options,",
                "+                                     boolean noteForm) {",
                "     List<Object> defaultValues = new LinkedList<>();",
                "@@ -111,10 +168,16 @@ public abstract class BaseZeppelinContext {",
                "     }",
                "-    return checkbox(name, defaultValues, options);",
                "+    if (noteForm) {",
                "+      return noteGui.checkbox(name, defaultValues, options);",
                "+    } else {",
                "+      return gui.checkbox(name, defaultValues, options);",
                "+    }",
                "   }",
                "-  @ZeppelinApi",
                "-  public Collection<Object> checkbox(String name,",
                "-                                     List<Object> defaultValues,",
                "-                                     ParamOption[] options) {",
                "-    return gui.checkbox(name, defaultValues, options);",
                "+  private Collection<Object> checkbox(String name, List<Object> defaultChecked,",
                "+                                      ParamOption[] options, boolean noteForm) {",
                "+    if (noteForm) {",
                "+      return noteGui.checkbox(name, defaultChecked, options);",
                "+    } else {",
                "+      return gui.checkbox(name, defaultChecked, options);",
                "+    }",
                "   }",
                "@@ -129,2 +192,11 @@ public abstract class BaseZeppelinContext {",
                "+",
                "+  public GUI getNoteGui() {",
                "+    return noteGui;",
                "+  }",
                "+",
                "+  public void setNoteGui(GUI noteGui) {",
                "+    this.noteGui = noteGui;",
                "+  }",
                "+",
                "   private void restartInterpreter() {",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterContext.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterContext.java",
                "index f5fc70be6..293f9bfa2 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterContext.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterContext.java",
                "@@ -60,2 +60,3 @@ public class InterpreterContext {",
                "   private GUI gui = new GUI();",
                "+  private GUI noteGui = new GUI();",
                "   private AngularObjectRegistry angularObjectRegistry;",
                "@@ -102,2 +103,3 @@ public class InterpreterContext {",
                "                             GUI gui,",
                "+                            GUI noteGui,",
                "                             AngularObjectRegistry angularObjectRegistry,",
                "@@ -108,3 +110,3 @@ public class InterpreterContext {",
                "     this(noteId, paragraphId, replName, paragraphTitle, paragraphText, authenticationInfo,",
                "-        config, gui, angularObjectRegistry, resourcePool, runners, out, null, null);",
                "+        config, gui, noteGui, angularObjectRegistry, resourcePool, runners, out, null, null);",
                "   }",
                "@@ -119,2 +121,3 @@ public class InterpreterContext {",
                "                             GUI gui,",
                "+                            GUI noteGui,",
                "                             AngularObjectRegistry angularObjectRegistry,",
                "@@ -134,2 +137,3 @@ public class InterpreterContext {",
                "     this.gui = gui;",
                "+    this.noteGui = noteGui;",
                "     this.angularObjectRegistry = angularObjectRegistry;",
                "@@ -150,2 +154,3 @@ public class InterpreterContext {",
                "                             GUI gui,",
                "+                            GUI noteGui,",
                "                             AngularObjectRegistry angularObjectRegistry,",
                "@@ -158,3 +163,3 @@ public class InterpreterContext {",
                "     this(noteId, paragraphId, replName, paragraphTitle, paragraphText, authenticationInfo,",
                "-        config, gui, angularObjectRegistry, resourcePool, contextRunners, output,",
                "+        config, gui, noteGui, angularObjectRegistry, resourcePool, contextRunners, output,",
                "         remoteWorksController, progressMap);",
                "@@ -195,2 +200,6 @@ public class InterpreterContext {",
                "+  public GUI getNoteGui() {",
                "+    return noteGui;",
                "+  }",
                "+",
                "   public AngularObjectRegistry getAngularObjectRegistry() {",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java",
                "index 86f35c6d2..c2a578c56 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java",
                "@@ -464,3 +464,4 @@ public class RemoteInterpreterServer",
                "         context.getConfig(),",
                "-        context.getGui());",
                "+        context.getGui(),",
                "+        context.getNoteGui());",
                "   }",
                "@@ -751,2 +752,3 @@ public class RemoteInterpreterServer",
                "         GUI.fromJson(ric.getGui()),",
                "+        GUI.fromJson(ric.getNoteGui()),",
                "         interpreterGroup.getAngularObjectRegistry(),",
                "@@ -882,3 +884,3 @@ public class RemoteInterpreterServer",
                "   private RemoteInterpreterResult convert(InterpreterResult result,",
                "-      Map<String, Object> config, GUI gui) {",
                "+      Map<String, Object> config, GUI gui, GUI noteGui) {",
                "@@ -895,3 +897,4 @@ public class RemoteInterpreterServer",
                "         gson.toJson(config),",
                "-        gui.toJson());",
                "+        gui.toJson(),",
                "+        noteGui.toJson());",
                "   }",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/CallbackInfo.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/CallbackInfo.java",
                "index b0c7e9acb..c36a7ac5b 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/CallbackInfo.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/CallbackInfo.java",
                "@@ -53,3 +53,3 @@ import org.slf4j.LoggerFactory;",
                " @SuppressWarnings({\"cast\", \"rawtypes\", \"serial\", \"unchecked\"})",
                "-@Generated(value = \"Autogenerated by Thrift Compiler (0.9.2)\", date = \"2017-6-17\")",
                "+@Generated(value = \"Autogenerated by Thrift Compiler (0.9.2)\", date = \"2017-10-22\")",
                " public class CallbackInfo implements org.apache.thrift.TBase<CallbackInfo, CallbackInfo._Fields>, java.io.Serializable, Cloneable, Comparable<CallbackInfo> {",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/InterpreterCompletion.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/InterpreterCompletion.java",
                "index 43713e9c3..2ec653ed4 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/InterpreterCompletion.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/InterpreterCompletion.java",
                "@@ -53,3 +53,3 @@ import org.slf4j.LoggerFactory;",
                " @SuppressWarnings({\"cast\", \"rawtypes\", \"serial\", \"unchecked\"})",
                "-@Generated(value = \"Autogenerated by Thrift Compiler (0.9.2)\", date = \"2017-3-27\")",
                "+@Generated(value = \"Autogenerated by Thrift Compiler (0.9.2)\", date = \"2017-10-22\")",
                " public class InterpreterCompletion implements org.apache.thrift.TBase<InterpreterCompletion, InterpreterCompletion._Fields>, java.io.Serializable, Cloneable, Comparable<InterpreterCompletion> {",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteApplicationResult.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteApplicationResult.java",
                "index cf8e50a00..0398bf962 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteApplicationResult.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteApplicationResult.java",
                "@@ -53,3 +53,3 @@ import org.slf4j.LoggerFactory;",
                " @SuppressWarnings({\"cast\", \"rawtypes\", \"serial\", \"unchecked\"})",
                "-@Generated(value = \"Autogenerated by Thrift Compiler (0.9.2)\", date = \"2017-3-27\")",
                "+@Generated(value = \"Autogenerated by Thrift Compiler (0.9.2)\", date = \"2017-10-22\")",
                " public class RemoteApplicationResult implements org.apache.thrift.TBase<RemoteApplicationResult, RemoteApplicationResult._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteApplicationResult> {",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterCallbackService.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterCallbackService.java",
                "index 6ef08f6b0..baa5a2d82 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterCallbackService.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterCallbackService.java",
                "@@ -53,3 +53,3 @@ import org.slf4j.LoggerFactory;",
                " @SuppressWarnings({\"cast\", \"rawtypes\", \"serial\", \"unchecked\"})",
                "-@Generated(value = \"Autogenerated by Thrift Compiler (0.9.2)\", date = \"2017-6-17\")",
                "+@Generated(value = \"Autogenerated by Thrift Compiler (0.9.2)\", date = \"2017-10-22\")",
                " public class RemoteInterpreterCallbackService {",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterContext.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterContext.java",
                "index d6619fcc3..cea7e6546 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterContext.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterContext.java",
                "@@ -53,3 +53,3 @@ import org.slf4j.LoggerFactory;",
                " @SuppressWarnings({\"cast\", \"rawtypes\", \"serial\", \"unchecked\"})",
                "-@Generated(value = \"Autogenerated by Thrift Compiler (0.9.2)\", date = \"2017-3-27\")",
                "+@Generated(value = \"Autogenerated by Thrift Compiler (0.9.2)\", date = \"2017-10-22\")",
                " public class RemoteInterpreterContext implements org.apache.thrift.TBase<RemoteInterpreterContext, RemoteInterpreterContext._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterContext> {",
                "@@ -65,3 +65,4 @@ public class RemoteInterpreterContext implements org.apache.thrift.TBase<RemoteI",
                "   private static final org.apache.thrift.protocol.TField GUI_FIELD_DESC = new org.apache.thrift.protocol.TField(\"gui\", org.apache.thrift.protocol.TType.STRING, (short)8);",
                "-  private static final org.apache.thrift.protocol.TField RUNNERS_FIELD_DESC = new org.apache.thrift.protocol.TField(\"runners\", org.apache.thrift.protocol.TType.STRING, (short)9);",
                "+  private static final org.apache.thrift.protocol.TField NOTE_GUI_FIELD_DESC = new org.apache.thrift.protocol.TField(\"noteGui\", org.apache.thrift.protocol.TType.STRING, (short)9);",
                "+  private static final org.apache.thrift.protocol.TField RUNNERS_FIELD_DESC = new org.apache.thrift.protocol.TField(\"runners\", org.apache.thrift.protocol.TType.STRING, (short)10);",
                "@@ -81,2 +82,3 @@ public class RemoteInterpreterContext implements org.apache.thrift.TBase<RemoteI",
                "   public String gui; // required",
                "+  public String noteGui; // required",
                "   public String runners; // required",
                "@@ -93,3 +95,4 @@ public class RemoteInterpreterContext implements org.apache.thrift.TBase<RemoteI",
                "     GUI((short)8, \"gui\"),",
                "-    RUNNERS((short)9, \"runners\");",
                "+    NOTE_GUI((short)9, \"noteGui\"),",
                "+    RUNNERS((short)10, \"runners\");",
                "@@ -124,3 +127,5 @@ public class RemoteInterpreterContext implements org.apache.thrift.TBase<RemoteI",
                "           return GUI;",
                "-        case 9: // RUNNERS",
                "+        case 9: // NOTE_GUI",
                "+          return NOTE_GUI;",
                "+        case 10: // RUNNERS",
                "           return RUNNERS;",
                "@@ -185,2 +190,4 @@ public class RemoteInterpreterContext implements org.apache.thrift.TBase<RemoteI",
                "         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));",
                "+    tmpMap.put(_Fields.NOTE_GUI, new org.apache.thrift.meta_data.FieldMetaData(\"noteGui\", org.apache.thrift.TFieldRequirementType.DEFAULT, ",
                "+        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));",
                "     tmpMap.put(_Fields.RUNNERS, new org.apache.thrift.meta_data.FieldMetaData(\"runners\", org.apache.thrift.TFieldRequirementType.DEFAULT, ",
                "@@ -203,2 +210,3 @@ public class RemoteInterpreterContext implements org.apache.thrift.TBase<RemoteI",
                "     String gui,",
                "+    String noteGui,",
                "     String runners)",
                "@@ -214,2 +222,3 @@ public class RemoteInterpreterContext implements org.apache.thrift.TBase<RemoteI",
                "     this.gui = gui;",
                "+    this.noteGui = noteGui;",
                "     this.runners = runners;",
                "@@ -245,2 +254,5 @@ public class RemoteInterpreterContext implements org.apache.thrift.TBase<RemoteI",
                "     }",
                "+    if (other.isSetNoteGui()) {",
                "+      this.noteGui = other.noteGui;",
                "+    }",
                "     if (other.isSetRunners()) {",
                "@@ -264,2 +276,3 @@ public class RemoteInterpreterContext implements org.apache.thrift.TBase<RemoteI",
                "     this.gui = null;",
                "+    this.noteGui = null;",
                "     this.runners = null;",
                "@@ -459,2 +472,26 @@ public class RemoteInterpreterContext implements org.apache.thrift.TBase<RemoteI",
                "+  public String getNoteGui() {",
                "+    return this.noteGui;",
                "+  }",
                "+",
                "+  public RemoteInterpreterContext setNoteGui(String noteGui) {",
                "+    this.noteGui = noteGui;",
                "+    return this;",
                "+  }",
                "+",
                "+  public void unsetNoteGui() {",
                "+    this.noteGui = null;",
                "+  }",
                "+",
                "+  /** Returns true if field noteGui is set (has been assigned a value) and false otherwise */",
                "+  public boolean isSetNoteGui() {",
                "+    return this.noteGui != null;",
                "+  }",
                "+",
                "+  public void setNoteGuiIsSet(boolean value) {",
                "+    if (!value) {",
                "+      this.noteGui = null;",
                "+    }",
                "+  }",
                "+",
                "   public String getRunners() {",
                "@@ -549,2 +586,10 @@ public class RemoteInterpreterContext implements org.apache.thrift.TBase<RemoteI",
                "+    case NOTE_GUI:",
                "+      if (value == null) {",
                "+        unsetNoteGui();",
                "+      } else {",
                "+        setNoteGui((String)value);",
                "+      }",
                "+      break;",
                "+",
                "     case RUNNERS:",
                "@@ -586,2 +631,5 @@ public class RemoteInterpreterContext implements org.apache.thrift.TBase<RemoteI",
                "+    case NOTE_GUI:",
                "+      return getNoteGui();",
                "+",
                "     case RUNNERS:",
                "@@ -616,2 +664,4 @@ public class RemoteInterpreterContext implements org.apache.thrift.TBase<RemoteI",
                "       return isSetGui();",
                "+    case NOTE_GUI:",
                "+      return isSetNoteGui();",
                "     case RUNNERS:",
                "@@ -707,2 +757,11 @@ public class RemoteInterpreterContext implements org.apache.thrift.TBase<RemoteI",
                "+    boolean this_present_noteGui = true && this.isSetNoteGui();",
                "+    boolean that_present_noteGui = true && that.isSetNoteGui();",
                "+    if (this_present_noteGui || that_present_noteGui) {",
                "+      if (!(this_present_noteGui && that_present_noteGui))",
                "+        return false;",
                "+      if (!this.noteGui.equals(that.noteGui))",
                "+        return false;",
                "+    }",
                "+",
                "     boolean this_present_runners = true && this.isSetRunners();",
                "@@ -763,2 +822,7 @@ public class RemoteInterpreterContext implements org.apache.thrift.TBase<RemoteI",
                "+    boolean present_noteGui = true && (isSetNoteGui());",
                "+    list.add(present_noteGui);",
                "+    if (present_noteGui)",
                "+      list.add(noteGui);",
                "+",
                "     boolean present_runners = true && (isSetRunners());",
                "@@ -859,2 +923,12 @@ public class RemoteInterpreterContext implements org.apache.thrift.TBase<RemoteI",
                "     }",
                "+    lastComparison = Boolean.valueOf(isSetNoteGui()).compareTo(other.isSetNoteGui());",
                "+    if (lastComparison != 0) {",
                "+      return lastComparison;",
                "+    }",
                "+    if (isSetNoteGui()) {",
                "+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noteGui, other.noteGui);",
                "+      if (lastComparison != 0) {",
                "+        return lastComparison;",
                "+      }",
                "+    }",
                "     lastComparison = Boolean.valueOf(isSetRunners()).compareTo(other.isSetRunners());",
                "@@ -953,2 +1027,10 @@ public class RemoteInterpreterContext implements org.apache.thrift.TBase<RemoteI",
                "     if (!first) sb.append(\", \");",
                "+    sb.append(\"noteGui:\");",
                "+    if (this.noteGui == null) {",
                "+      sb.append(\"null\");",
                "+    } else {",
                "+      sb.append(this.noteGui);",
                "+    }",
                "+    first = false;",
                "+    if (!first) sb.append(\", \");",
                "     sb.append(\"runners:\");",
                "@@ -1067,3 +1149,11 @@ public class RemoteInterpreterContext implements org.apache.thrift.TBase<RemoteI",
                "             break;",
                "-          case 9: // RUNNERS",
                "+          case 9: // NOTE_GUI",
                "+            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {",
                "+              struct.noteGui = iprot.readString();",
                "+              struct.setNoteGuiIsSet(true);",
                "+            } else { ",
                "+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);",
                "+            }",
                "+            break;",
                "+          case 10: // RUNNERS",
                "             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {",
                "@@ -1130,2 +1220,7 @@ public class RemoteInterpreterContext implements org.apache.thrift.TBase<RemoteI",
                "       }",
                "+      if (struct.noteGui != null) {",
                "+        oprot.writeFieldBegin(NOTE_GUI_FIELD_DESC);",
                "+        oprot.writeString(struct.noteGui);",
                "+        oprot.writeFieldEnd();",
                "+      }",
                "       if (struct.runners != null) {",
                "@@ -1177,6 +1272,9 @@ public class RemoteInterpreterContext implements org.apache.thrift.TBase<RemoteI",
                "       }",
                "-      if (struct.isSetRunners()) {",
                "+      if (struct.isSetNoteGui()) {",
                "         optionals.set(8);",
                "       }",
                "-      oprot.writeBitSet(optionals, 9);",
                "+      if (struct.isSetRunners()) {",
                "+        optionals.set(9);",
                "+      }",
                "+      oprot.writeBitSet(optionals, 10);",
                "       if (struct.isSetNoteId()) {",
                "@@ -1205,2 +1303,5 @@ public class RemoteInterpreterContext implements org.apache.thrift.TBase<RemoteI",
                "       }",
                "+      if (struct.isSetNoteGui()) {",
                "+        oprot.writeString(struct.noteGui);",
                "+      }",
                "       if (struct.isSetRunners()) {",
                "@@ -1213,3 +1314,3 @@ public class RemoteInterpreterContext implements org.apache.thrift.TBase<RemoteI",
                "       TTupleProtocol iprot = (TTupleProtocol) prot;",
                "-      BitSet incoming = iprot.readBitSet(9);",
                "+      BitSet incoming = iprot.readBitSet(10);",
                "       if (incoming.get(0)) {",
                "@@ -1247,2 +1348,6 @@ public class RemoteInterpreterContext implements org.apache.thrift.TBase<RemoteI",
                "       if (incoming.get(8)) {",
                "+        struct.noteGui = iprot.readString();",
                "+        struct.setNoteGuiIsSet(true);",
                "+      }",
                "+      if (incoming.get(9)) {",
                "         struct.runners = iprot.readString();",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEvent.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEvent.java",
                "index e25277537..c75a42f4c 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEvent.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEvent.java",
                "@@ -53,3 +53,3 @@ import org.slf4j.LoggerFactory;",
                " @SuppressWarnings({\"cast\", \"rawtypes\", \"serial\", \"unchecked\"})",
                "-@Generated(value = \"Autogenerated by Thrift Compiler (0.9.2)\", date = \"2017-3-27\")",
                "+@Generated(value = \"Autogenerated by Thrift Compiler (0.9.2)\", date = \"2017-10-22\")",
                " public class RemoteInterpreterEvent implements org.apache.thrift.TBase<RemoteInterpreterEvent, RemoteInterpreterEvent._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterEvent> {",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResult.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResult.java",
                "index b18bad53a..efe05aa13 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResult.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResult.java",
                "@@ -53,3 +53,3 @@ import org.slf4j.LoggerFactory;",
                " @SuppressWarnings({\"cast\", \"rawtypes\", \"serial\", \"unchecked\"})",
                "-@Generated(value = \"Autogenerated by Thrift Compiler (0.9.2)\", date = \"2017-3-27\")",
                "+@Generated(value = \"Autogenerated by Thrift Compiler (0.9.2)\", date = \"2017-10-22\")",
                " public class RemoteInterpreterResult implements org.apache.thrift.TBase<RemoteInterpreterResult, RemoteInterpreterResult._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterResult> {",
                "@@ -61,2 +61,3 @@ public class RemoteInterpreterResult implements org.apache.thrift.TBase<RemoteIn",
                "   private static final org.apache.thrift.protocol.TField GUI_FIELD_DESC = new org.apache.thrift.protocol.TField(\"gui\", org.apache.thrift.protocol.TType.STRING, (short)4);",
                "+  private static final org.apache.thrift.protocol.TField NOTE_GUI_FIELD_DESC = new org.apache.thrift.protocol.TField(\"noteGui\", org.apache.thrift.protocol.TType.STRING, (short)5);",
                "@@ -72,2 +73,3 @@ public class RemoteInterpreterResult implements org.apache.thrift.TBase<RemoteIn",
                "   public String gui; // required",
                "+  public String noteGui; // required",
                "@@ -78,3 +80,4 @@ public class RemoteInterpreterResult implements org.apache.thrift.TBase<RemoteIn",
                "     CONFIG((short)3, \"config\"),",
                "-    GUI((short)4, \"gui\");",
                "+    GUI((short)4, \"gui\"),",
                "+    NOTE_GUI((short)5, \"noteGui\");",
                "@@ -101,2 +104,4 @@ public class RemoteInterpreterResult implements org.apache.thrift.TBase<RemoteIn",
                "           return GUI;",
                "+        case 5: // NOTE_GUI",
                "+          return NOTE_GUI;",
                "         default:",
                "@@ -153,2 +158,4 @@ public class RemoteInterpreterResult implements org.apache.thrift.TBase<RemoteIn",
                "         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));",
                "+    tmpMap.put(_Fields.NOTE_GUI, new org.apache.thrift.meta_data.FieldMetaData(\"noteGui\", org.apache.thrift.TFieldRequirementType.DEFAULT, ",
                "+        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));",
                "     metaDataMap = Collections.unmodifiableMap(tmpMap);",
                "@@ -164,3 +171,4 @@ public class RemoteInterpreterResult implements org.apache.thrift.TBase<RemoteIn",
                "     String config,",
                "-    String gui)",
                "+    String gui,",
                "+    String noteGui)",
                "   {",
                "@@ -171,2 +179,3 @@ public class RemoteInterpreterResult implements org.apache.thrift.TBase<RemoteIn",
                "     this.gui = gui;",
                "+    this.noteGui = noteGui;",
                "   }",
                "@@ -193,2 +202,5 @@ public class RemoteInterpreterResult implements org.apache.thrift.TBase<RemoteIn",
                "     }",
                "+    if (other.isSetNoteGui()) {",
                "+      this.noteGui = other.noteGui;",
                "+    }",
                "   }",
                "@@ -205,2 +217,3 @@ public class RemoteInterpreterResult implements org.apache.thrift.TBase<RemoteIn",
                "     this.gui = null;",
                "+    this.noteGui = null;",
                "   }",
                "@@ -318,2 +331,26 @@ public class RemoteInterpreterResult implements org.apache.thrift.TBase<RemoteIn",
                "+  public String getNoteGui() {",
                "+    return this.noteGui;",
                "+  }",
                "+",
                "+  public RemoteInterpreterResult setNoteGui(String noteGui) {",
                "+    this.noteGui = noteGui;",
                "+    return this;",
                "+  }",
                "+",
                "+  public void unsetNoteGui() {",
                "+    this.noteGui = null;",
                "+  }",
                "+",
                "+  /** Returns true if field noteGui is set (has been assigned a value) and false otherwise */",
                "+  public boolean isSetNoteGui() {",
                "+    return this.noteGui != null;",
                "+  }",
                "+",
                "+  public void setNoteGuiIsSet(boolean value) {",
                "+    if (!value) {",
                "+      this.noteGui = null;",
                "+    }",
                "+  }",
                "+",
                "   public void setFieldValue(_Fields field, Object value) {",
                "@@ -352,2 +389,10 @@ public class RemoteInterpreterResult implements org.apache.thrift.TBase<RemoteIn",
                "+    case NOTE_GUI:",
                "+      if (value == null) {",
                "+        unsetNoteGui();",
                "+      } else {",
                "+        setNoteGui((String)value);",
                "+      }",
                "+      break;",
                "+",
                "     }",
                "@@ -369,2 +414,5 @@ public class RemoteInterpreterResult implements org.apache.thrift.TBase<RemoteIn",
                "+    case NOTE_GUI:",
                "+      return getNoteGui();",
                "+",
                "     }",
                "@@ -388,2 +436,4 @@ public class RemoteInterpreterResult implements org.apache.thrift.TBase<RemoteIn",
                "       return isSetGui();",
                "+    case NOTE_GUI:",
                "+      return isSetNoteGui();",
                "     }",
                "@@ -441,2 +491,11 @@ public class RemoteInterpreterResult implements org.apache.thrift.TBase<RemoteIn",
                "+    boolean this_present_noteGui = true && this.isSetNoteGui();",
                "+    boolean that_present_noteGui = true && that.isSetNoteGui();",
                "+    if (this_present_noteGui || that_present_noteGui) {",
                "+      if (!(this_present_noteGui && that_present_noteGui))",
                "+        return false;",
                "+      if (!this.noteGui.equals(that.noteGui))",
                "+        return false;",
                "+    }",
                "+",
                "     return true;",
                "@@ -468,2 +527,7 @@ public class RemoteInterpreterResult implements org.apache.thrift.TBase<RemoteIn",
                "+    boolean present_noteGui = true && (isSetNoteGui());",
                "+    list.add(present_noteGui);",
                "+    if (present_noteGui)",
                "+      list.add(noteGui);",
                "+",
                "     return list.hashCode();",
                "@@ -519,2 +583,12 @@ public class RemoteInterpreterResult implements org.apache.thrift.TBase<RemoteIn",
                "     }",
                "+    lastComparison = Boolean.valueOf(isSetNoteGui()).compareTo(other.isSetNoteGui());",
                "+    if (lastComparison != 0) {",
                "+      return lastComparison;",
                "+    }",
                "+    if (isSetNoteGui()) {",
                "+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noteGui, other.noteGui);",
                "+      if (lastComparison != 0) {",
                "+        return lastComparison;",
                "+      }",
                "+    }",
                "     return 0;",
                "@@ -570,2 +644,10 @@ public class RemoteInterpreterResult implements org.apache.thrift.TBase<RemoteIn",
                "     first = false;",
                "+    if (!first) sb.append(\", \");",
                "+    sb.append(\"noteGui:\");",
                "+    if (this.noteGui == null) {",
                "+      sb.append(\"null\");",
                "+    } else {",
                "+      sb.append(this.noteGui);",
                "+    }",
                "+    first = false;",
                "     sb.append(\")\");",
                "@@ -656,2 +738,10 @@ public class RemoteInterpreterResult implements org.apache.thrift.TBase<RemoteIn",
                "             break;",
                "+          case 5: // NOTE_GUI",
                "+            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {",
                "+              struct.noteGui = iprot.readString();",
                "+              struct.setNoteGuiIsSet(true);",
                "+            } else { ",
                "+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);",
                "+            }",
                "+            break;",
                "           default:",
                "@@ -698,2 +788,7 @@ public class RemoteInterpreterResult implements org.apache.thrift.TBase<RemoteIn",
                "       }",
                "+      if (struct.noteGui != null) {",
                "+        oprot.writeFieldBegin(NOTE_GUI_FIELD_DESC);",
                "+        oprot.writeString(struct.noteGui);",
                "+        oprot.writeFieldEnd();",
                "+      }",
                "       oprot.writeFieldStop();",
                "@@ -728,3 +823,6 @@ public class RemoteInterpreterResult implements org.apache.thrift.TBase<RemoteIn",
                "       }",
                "-      oprot.writeBitSet(optionals, 4);",
                "+      if (struct.isSetNoteGui()) {",
                "+        optionals.set(4);",
                "+      }",
                "+      oprot.writeBitSet(optionals, 5);",
                "       if (struct.isSetCode()) {",
                "@@ -747,2 +845,5 @@ public class RemoteInterpreterResult implements org.apache.thrift.TBase<RemoteIn",
                "       }",
                "+      if (struct.isSetNoteGui()) {",
                "+        oprot.writeString(struct.noteGui);",
                "+      }",
                "     }",
                "@@ -752,3 +853,3 @@ public class RemoteInterpreterResult implements org.apache.thrift.TBase<RemoteIn",
                "       TTupleProtocol iprot = (TTupleProtocol) prot;",
                "-      BitSet incoming = iprot.readBitSet(4);",
                "+      BitSet incoming = iprot.readBitSet(5);",
                "       if (incoming.get(0)) {",
                "@@ -779,2 +880,6 @@ public class RemoteInterpreterResult implements org.apache.thrift.TBase<RemoteIn",
                "       }",
                "+      if (incoming.get(4)) {",
                "+        struct.noteGui = iprot.readString();",
                "+        struct.setNoteGuiIsSet(true);",
                "+      }",
                "     }",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResultMessage.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResultMessage.java",
                "index a2aff2984..37b3a8725 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResultMessage.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResultMessage.java",
                "@@ -53,3 +53,3 @@ import org.slf4j.LoggerFactory;",
                " @SuppressWarnings({\"cast\", \"rawtypes\", \"serial\", \"unchecked\"})",
                "-@Generated(value = \"Autogenerated by Thrift Compiler (0.9.2)\", date = \"2017-3-27\")",
                "+@Generated(value = \"Autogenerated by Thrift Compiler (0.9.2)\", date = \"2017-10-22\")",
                " public class RemoteInterpreterResultMessage implements org.apache.thrift.TBase<RemoteInterpreterResultMessage, RemoteInterpreterResultMessage._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterResultMessage> {",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterService.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterService.java",
                "index def96fa93..ba13f64c4 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterService.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterService.java",
                "@@ -53,3 +53,3 @@ import org.slf4j.LoggerFactory;",
                " @SuppressWarnings({\"cast\", \"rawtypes\", \"serial\", \"unchecked\"})",
                "-@Generated(value = \"Autogenerated by Thrift Compiler (0.9.2)\", date = \"2017-3-27\")",
                "+@Generated(value = \"Autogenerated by Thrift Compiler (0.9.2)\", date = \"2017-10-22\")",
                " public class RemoteInterpreterService {",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/ZeppelinServerResourceParagraphRunner.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/ZeppelinServerResourceParagraphRunner.java",
                "index 78cb09056..17b6bd8cf 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/ZeppelinServerResourceParagraphRunner.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/ZeppelinServerResourceParagraphRunner.java",
                "@@ -53,3 +53,3 @@ import org.slf4j.LoggerFactory;",
                " @SuppressWarnings({\"cast\", \"rawtypes\", \"serial\", \"unchecked\"})",
                "-@Generated(value = \"Autogenerated by Thrift Compiler (0.9.2)\", date = \"2017-3-27\")",
                "+@Generated(value = \"Autogenerated by Thrift Compiler (0.9.2)\", date = \"2017-10-22\")",
                " public class ZeppelinServerResourceParagraphRunner implements org.apache.thrift.TBase<ZeppelinServerResourceParagraphRunner, ZeppelinServerResourceParagraphRunner._Fields>, java.io.Serializable, Cloneable, Comparable<ZeppelinServerResourceParagraphRunner> {",
                "diff --git a/zeppelin-interpreter/src/main/thrift/RemoteInterpreterService.thrift b/zeppelin-interpreter/src/main/thrift/RemoteInterpreterService.thrift",
                "index f20fb9038..559648a24 100644",
                "--- a/zeppelin-interpreter/src/main/thrift/RemoteInterpreterService.thrift",
                "+++ b/zeppelin-interpreter/src/main/thrift/RemoteInterpreterService.thrift",
                "@@ -29,3 +29,4 @@ struct RemoteInterpreterContext {",
                "   8: string gui,      // json serialized gui",
                "-  9: string runners   // json serialized runner",
                "+  9: string noteGui,      // json serialized note gui",
                "+  10: string runners   // json serialized runner",
                " }",
                "@@ -41,2 +42,3 @@ struct RemoteInterpreterResult {",
                "   4: string gui       // json serialized gui",
                "+  5: string noteGui       // json serialized note gui",
                " }",
                "diff --git a/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java b/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "index a3e871424..184735a62 100644",
                "--- a/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "+++ b/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "@@ -35,6 +35,3 @@ import org.apache.zeppelin.conf.ZeppelinConfiguration;",
                " import org.apache.zeppelin.conf.ZeppelinConfiguration.ConfVars;",
                "-import org.apache.zeppelin.display.AngularObject;",
                "-import org.apache.zeppelin.display.AngularObjectRegistry;",
                "-import org.apache.zeppelin.display.AngularObjectRegistryListener;",
                "-import org.apache.zeppelin.display.Input;",
                "+import org.apache.zeppelin.display.*;",
                " import org.apache.zeppelin.helium.ApplicationEventListener;",
                "@@ -358,2 +355,8 @@ public class NotebookServer extends WebSocketServlet",
                "           break;",
                "+        case SAVE_NOTE_FORMS:",
                "+          saveNoteForms(conn, userAndRoles, notebook, messagereceived);",
                "+          break;",
                "+        case REMOVE_NOTE_FORMS:",
                "+          removeNoteForms(conn, userAndRoles, notebook, messagereceived);",
                "+          break;",
                "         default:",
                "@@ -651,2 +654,4 @@ public class NotebookServer extends WebSocketServlet",
                "   public void broadcastParagraph(Note note, Paragraph p) {",
                "+    broadcastNoteForms(note);",
                "+",
                "     if (note.isPersonalizedMode()) {",
                "@@ -1229,3 +1234,2 @@ public class NotebookServer extends WebSocketServlet",
                "-",
                "     note.persist(subject);",
                "@@ -2532,2 +2536,51 @@ public class NotebookServer extends WebSocketServlet",
                "   }",
                "+",
                "+  public void broadcastNoteForms(Note note) {",
                "+    GUI formsSettings = new GUI();",
                "+    formsSettings.setForms(note.getNoteForms());",
                "+    formsSettings.setParams(note.getNoteParams());",
                "+",
                "+    broadcast(note.getId(), new Message(OP.SAVE_NOTE_FORMS).put(\"formsData\", formsSettings));",
                "+  }",
                "+",
                "+  private void saveNoteForms(NotebookSocket conn, HashSet<String> userAndRoles, Notebook notebook,",
                "+                             Message fromMessage) throws IOException {",
                "+    String noteId = (String) fromMessage.get(\"noteId\");",
                "+    Map<String, Object> noteParams = (Map<String, Object>) fromMessage.get(\"noteParams\");",
                "+",
                "+    if (!hasParagraphWriterPermission(conn, notebook, noteId,",
                "+        userAndRoles, fromMessage.principal, \"update\")) {",
                "+      return;",
                "+    }",
                "+",
                "+    Note note = notebook.getNote(noteId);",
                "+    if (note != null) {",
                "+      note.setNoteParams(noteParams);",
                "+",
                "+      AuthenticationInfo subject = new AuthenticationInfo(fromMessage.principal);",
                "+      note.persist(subject);",
                "+      broadcastNoteForms(note);",
                "+    }",
                "+  }",
                "+",
                "+  private void removeNoteForms(NotebookSocket conn, HashSet<String> userAndRoles, Notebook notebook,",
                "+                             Message fromMessage) throws IOException {",
                "+    String noteId = (String) fromMessage.get(\"noteId\");",
                "+    String formName = (String) fromMessage.get(\"formName\");",
                "+",
                "+    if (!hasParagraphWriterPermission(conn, notebook, noteId,",
                "+        userAndRoles, fromMessage.principal, \"update\")) {",
                "+      return;",
                "+    }",
                "+",
                "+    Note note = notebook.getNote(noteId);",
                "+    if (note != null) {",
                "+      note.getNoteForms().remove(formName);",
                "+      note.getNoteParams().remove(formName);",
                "+",
                "+      AuthenticationInfo subject = new AuthenticationInfo(fromMessage.principal);",
                "+      note.persist(subject);",
                "+      broadcastNoteForms(note);",
                "+    }",
                "+  }",
                " }",
                "diff --git a/zeppelin-web/src/app/notebook/dynamic-forms/dynamic-forms.css b/zeppelin-web/src/app/notebook/dynamic-forms/dynamic-forms.css",
                "new file mode 100644",
                "index 000000000..d15b24096",
                "--- /dev/null",
                "+++ b/zeppelin-web/src/app/notebook/dynamic-forms/dynamic-forms.css",
                "@@ -0,0 +1,24 @@",
                "+import './note-create.css'",
                "+",
                "+.dynamicForm {",
                "+  margin-right: 20px;",
                "+  margin-left: 20px;",
                "+}",
                "+",
                "+.dynamicForm.form-horizontal .form-group {",
                "+  margin-right: 0;",
                "+  margin-left:  0;",
                "+}",
                "+",
                "+.dynamicForm.form-horizontal .form-group label {",
                "+  padding-left: 0;",
                "+}",
                "+",
                "+.dynamicForm.form-horizontal .form-group .checkbox-item {",
                "+  padding-left: 0;",
                "+  padding-right: 10px;",
                "+}",
                "+",
                "+.dynamicForm.form-horizontal .form-group .checkbox-item input {",
                "+  margin-right: 2px;",
                "+}",
                "diff --git a/zeppelin-web/src/app/notebook/dynamic-forms/dynamic-forms.directive.html b/zeppelin-web/src/app/notebook/dynamic-forms/dynamic-forms.directive.html",
                "new file mode 100644",
                "index 000000000..4f3e7151d",
                "--- /dev/null",
                "+++ b/zeppelin-web/src/app/notebook/dynamic-forms/dynamic-forms.directive.html",
                "@@ -0,0 +1,86 @@",
                "+<!--",
                "+Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+you may not use this file except in compliance with the License.",
                "+You may obtain a copy of the License at",
                "+",
                "+    http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing, software",
                "+distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+See the License for the specific language governing permissions and",
                "+limitations under the License.",
                "+-->",
                "+<form id=\"{{id}}_form\" role=\"form\"",
                "+      ng-show=\"!hide\"",
                "+      class=\"dynamicForm form-horizontal row\">",
                "+  <div class=\"form-group col-sm-6 col-md-6 col-lg-4\"",
                "+       ng-repeat=\"formulaire in forms | toArray\"",
                "+       ng-init=\"loadForm(formulaire, params)\">",
                "+    <label class=\"control-label input-sm\" ng-class=\"{'disable': disable}\">{{formulaire.name}}</label>",
                "+    <a ng-if=\"removeaction\">",
                "+      <i class=\"fa fa-times\"",
                "+         ng-click=\"removeaction(formulaire.name)\"",
                "+         tooltip-placement=\"bottom\" uib-tooltip=\"Remove\">",
                "+      </i>",
                "+    </a>",
                "+    <div ng-if=\"actiononchange === true\">",
                "+      <input class=\"form-control input-sm\"",
                "+             ng-if=\"forms[formulaire.name].type == 'TextBox'\"",
                "+             ng-change=\"action()\"",
                "+             ng-model-options='{ debounce: 1000 }'",
                "+             ng-model=\"params[formulaire.name]\"",
                "+             ng-class=\"{'disable': disable}\"",
                "+             name=\"{{formulaire.name}}\" />",
                "+    </div>",
                "+    <div ng-if=\"!actiononchange\">",
                "+      <input class=\"form-control input-sm\"",
                "+             ng-if=\"forms[formulaire.name].type == 'TextBox'\"",
                "+             ng-enter=\"action()\"",
                "+             ng-model=\"params[formulaire.name]\"",
                "+             ng-class=\"{'disable': disable}\"",
                "+             name=\"{{formulaire.name}}\" />",
                "+    </div>",
                "+    <div ng-if=\"actiononchange === true\">",
                "+      <select class=\"form-control input-sm\"",
                "+              ng-if=\"forms[formulaire.name].type == 'Select'\"",
                "+              ng-change=\"action()\"",
                "+              ng-model=\"params[formulaire.name]\"",
                "+              ng-class=\"{'disable': disable}\"",
                "+              name=\"{{formulaire.name}}\"",
                "+              ng-options=\"option.value as (option.displayName||option.value) for option in forms[formulaire.name].options\">",
                "+      </select>",
                "+    </div>",
                "+    <div ng-if=\"!actiononchange\">",
                "+      <select class=\"form-control input-sm\"",
                "+              ng-if=\"forms[formulaire.name].type == 'Select'\"",
                "+              ng-enter=\"action()\"",
                "+              ng-model=\"params[formulaire.name]\"",
                "+              ng-class=\"{'disable': disable}\"",
                "+              name=\"{{formulaire.name}}\"",
                "+              ng-options=\"option.value as (option.displayName||option.value) for option in forms[formulaire.name].options\">",
                "+      </select>",
                "+    </div>",
                "+    <div ng-if=\"actiononchange === true &&",
                "+                  forms[formulaire.name].type == 'CheckBox'\">",
                "+      <label ng-repeat=\"option in forms[formulaire.name].options\"",
                "+             class=\"checkbox-item input-sm\">",
                "+        <input type=\"checkbox\"",
                "+               ng-checked=\"params[formulaire.name].indexOf(option.value) > -1\"",
                "+               ng-class=\"{'disable': disable}\"",
                "+               ng-click=\"toggleCheckbox(formulaire, option, params); action()\"/> {{option.displayName||option.value}}",
                "+      </label>",
                "+    </div>",
                "+    <div ng-if=\"!actiononchange &&",
                "+                  forms[formulaire.name].type == 'CheckBox'\">",
                "+      <label ng-repeat=\"option in forms[formulaire.name].options\"",
                "+             class=\"checkbox-item input-sm\">",
                "+        <input type=\"checkbox\"",
                "+               ng-checked=\"params[formulaire.name].indexOf(option.value) > -1\"",
                "+               ng-class=\"{'disable': disable}\"",
                "+               ng-enter=\"action()\"",
                "+               ng-click=\"toggleCheckbox(formulaire, option, params)\"/> {{option.displayName||option.value}}",
                "+      </label>",
                "+    </div>",
                "+  </div>",
                "+</form>",
                "diff --git a/zeppelin-web/src/app/notebook/dynamic-forms/dynamic-forms.directive.js b/zeppelin-web/src/app/notebook/dynamic-forms/dynamic-forms.directive.js",
                "new file mode 100644",
                "index 000000000..40a70eb94",
                "--- /dev/null",
                "+++ b/zeppelin-web/src/app/notebook/dynamic-forms/dynamic-forms.directive.js",
                "@@ -0,0 +1,62 @@",
                "+/*",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+import './dynamic-forms.css'",
                "+",
                "+angular.module('zeppelinWebApp').directive('dynamicForms', DynamicFormDirective)",
                "+",
                "+function DynamicFormDirective($templateRequest, $compile) {",
                "+  return {",
                "+    restrict: 'AE',",
                "+    scope: {",
                "+      id: '=id',",
                "+      hide: '=hide',",
                "+      disable: '=disable',",
                "+      actiononchange: '=actiononchange',",
                "+      forms: '=forms',",
                "+      params: '=params',",
                "+      action: '=action',",
                "+      removeaction: '=removeaction'",
                "+    },",
                "+",
                "+    link: function (scope, element, attrs, controller) {",
                "+      scope.loadForm = this.loadForm",
                "+      scope.toggleCheckbox = this.toggleCheckbox",
                "+      $templateRequest('app/notebook/dynamic-forms/dynamic-forms.directive.html').then(function (formsHtml) {",
                "+        let forms = angular.element(formsHtml)",
                "+        element.append(forms)",
                "+        $compile(forms)(scope)",
                "+      })",
                "+    },",
                "+",
                "+    loadForm: function (formulaire, params) {",
                "+      let value = formulaire.defaultValue",
                "+      if (params[formulaire.name]) {",
                "+        value = params[formulaire.name]",
                "+      }",
                "+",
                "+      params[formulaire.name] = value",
                "+    },",
                "+",
                "+    toggleCheckbox: function (formulaire, option, params) {",
                "+      let idx = params[formulaire.name].indexOf(option.value)",
                "+      if (idx > -1) {",
                "+        params[formulaire.name].splice(idx, 1)",
                "+      } else {",
                "+        params[formulaire.name].push(option.value)",
                "+      }",
                "+    }",
                "+",
                "+  }",
                "+}",
                "diff --git a/zeppelin-web/src/app/notebook/notebook.controller.js b/zeppelin-web/src/app/notebook/notebook.controller.js",
                "index 456e46313..d09a0b23b 100644",
                "--- a/zeppelin-web/src/app/notebook/notebook.controller.js",
                "+++ b/zeppelin-web/src/app/notebook/notebook.controller.js",
                "@@ -29,2 +29,5 @@ function NotebookCtrl ($scope, $route, $routeParams, $location, $rootScope,",
                "   $scope.note = null",
                "+  $scope.actionOnFormSelectionChange = true",
                "+  $scope.hideForms = false",
                "+  $scope.disableForms = false",
                "   $scope.editorToggled = false",
                "@@ -1369,2 +1372,22 @@ function NotebookCtrl ($scope, $route, $routeParams, $location, $rootScope,",
                "+  $scope.$on('saveNoteForms', function (event, data) {",
                "+    $scope.note.noteForms = data.formsData.forms",
                "+    $scope.note.noteParams = data.formsData.params",
                "+  })",
                "+",
                "+  $scope.isShowNoteForms = function() {",
                "+    if ($scope.note && !angular.equals({}, $scope.note.noteForms)) {",
                "+      return true",
                "+    }",
                "+    return false",
                "+  }",
                "+",
                "+  $scope.saveNoteForms = function () {",
                "+    websocketMsgSrv.saveNoteForms($scope.note)",
                "+  }",
                "+",
                "+  $scope.removeNoteForms = function (formName) {",
                "+    websocketMsgSrv.removeNoteForms($scope.note, formName)",
                "+  }",
                "+",
                "   $scope.$on('$destroy', function () {",
                "diff --git a/zeppelin-web/src/app/notebook/notebook.html b/zeppelin-web/src/app/notebook/notebook.html",
                "index 9441f6e17..f004e9b32 100644",
                "--- a/zeppelin-web/src/app/notebook/notebook.html",
                "+++ b/zeppelin-web/src/app/notebook/notebook.html",
                "@@ -121,2 +121,19 @@ limitations under the License.",
                "   <div class=\"note-jump\"></div>",
                "+  <div id=\"noteForms\" ng-if=\"isShowNoteForms()\" class=\"paragraph-space box\">",
                "+    <div>",
                "+      <h4>Note forms</h4>",
                "+    </div>",
                "+    <hr />",
                "+    <div>",
                "+      <dynamic-forms",
                "+        id=\"note.id\"",
                "+        hide=\"hideForms\"",
                "+        disable=\"disableForms\"",
                "+        actiononchange=\"actionOnFormSelectionChange\"",
                "+        forms=\"note.noteForms\"",
                "+        params=\"note.noteParams\"",
                "+        action=\"saveNoteForms\"",
                "+        removeaction=\"removeNoteForms\"></dynamic-forms>",
                "+    </div>",
                "+  </div>",
                "diff --git a/zeppelin-web/src/app/notebook/paragraph/paragraph-parameterized-query-form.html b/zeppelin-web/src/app/notebook/paragraph/paragraph-parameterized-query-form.html",
                "deleted file mode 100644",
                "index 249e7c105..000000000",
                "--- a/zeppelin-web/src/app/notebook/paragraph/paragraph-parameterized-query-form.html",
                "+++ /dev/null",
                "@@ -1,71 +0,0 @@",
                "-<!--",
                "-Licensed under the Apache License, Version 2.0 (the \"License\");",
                "-you may not use this file except in compliance with the License.",
                "-You may obtain a copy of the License at",
                "-",
                "-    http://www.apache.org/licenses/LICENSE-2.0",
                "-",
                "-Unless required by applicable law or agreed to in writing, software",
                "-distributed under the License is distributed on an \"AS IS\" BASIS,",
                "-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "-See the License for the specific language governing permissions and",
                "-limitations under the License.",
                "--->",
                "-<form id=\"{{paragraph.id}}_form\" role=\"form\"",
                "-      ng-show=\"!paragraph.config.tableHide\"",
                "-      class=\" paragraphForm form-horizontal row\">",
                "-  <div class=\"form-group col-sm-6 col-md-6 col-lg-4\"",
                "-       ng-repeat=\"formulaire in paragraph.settings.forms | toArray\"",
                "-       ng-init=\"loadForm(formulaire, paragraph.settings.params)\">",
                "-    <label class=\"control-label input-sm\" ng-class=\"{'disable': paragraph.status == 'RUNNING' || paragraph.status == 'PENDING' }\">{{formulaire.name}}</label>",
                "-    <div>",
                "-      <input class=\"form-control input-sm\"",
                "-             ng-if=\"paragraph.settings.forms[formulaire.name].type == 'TextBox'\"",
                "-             ng-enter=\"runParagraphFromButton(getEditorValue())\"",
                "-             ng-model=\"paragraph.settings.params[formulaire.name]\"",
                "-             ng-class=\"{'disable': paragraph.status == 'RUNNING' || paragraph.status == 'PENDING' }\"",
                "-             name=\"{{formulaire.name}}\" />",
                "-    </div>",
                "-    <div ng-if=\"paragraph.config.runOnSelectionChange == true\">",
                "-      <select class=\"form-control input-sm\"",
                "-             ng-if=\"paragraph.settings.forms[formulaire.name].type == 'Select'\"",
                "-             ng-change=\"runParagraphFromButton(getEditorValue())\"",
                "-             ng-model=\"paragraph.settings.params[formulaire.name]\"",
                "-             ng-class=\"{'disable': paragraph.status == 'RUNNING' || paragraph.status == 'PENDING' }\"",
                "-             name=\"{{formulaire.name}}\"",
                "-             ng-options=\"option.value as (option.displayName||option.value) for option in paragraph.settings.forms[formulaire.name].options\">",
                "-      </select>",
                "-    </div>",
                "-    <div ng-if=\"paragraph.config.runOnSelectionChange == false\">",
                "-      <select class=\"form-control input-sm\"",
                "-             ng-if=\"paragraph.settings.forms[formulaire.name].type == 'Select'\"",
                "-             ng-enter=\"runParagraphFromButton(getEditorValue())\"",
                "-             ng-model=\"paragraph.settings.params[formulaire.name]\"",
                "-             ng-class=\"{'disable': paragraph.status == 'RUNNING' || paragraph.status == 'PENDING' }\"",
                "-             name=\"{{formulaire.name}}\"",
                "-             ng-options=\"option.value as (option.displayName||option.value) for option in paragraph.settings.forms[formulaire.name].options\">",
                "-      </select>",
                "-    </div>",
                "-    <div ng-if=\"paragraph.config.runOnSelectionChange == true &&",
                "-                paragraph.settings.forms[formulaire.name].type == 'CheckBox'\">",
                "-      <label ng-repeat=\"option in paragraph.settings.forms[formulaire.name].options\"",
                "-             class=\"checkbox-item input-sm\">",
                "-        <input type=\"checkbox\"",
                "-               ng-class=\"{'disable': paragraph.status == 'RUNNING' || paragraph.status == 'PENDING' }\"",
                "-               ng-checked=\"paragraph.settings.params[formulaire.name].indexOf(option.value) > -1\"",
                "-               ng-click=\"toggleCheckbox(formulaire, option, false); runParagraphFromButton(getEditorValue())\"/> {{option.displayName||option.value}}",
                "-      </label>",
                "-    </div>",
                "-    <div ng-if=\"paragraph.config.runOnSelectionChange == false &&",
                "-                paragraph.settings.forms[formulaire.name].type == 'CheckBox'\">",
                "-      <label ng-repeat=\"option in paragraph.settings.forms[formulaire.name].options\"",
                "-             class=\"checkbox-item input-sm\">",
                "-        <input type=\"checkbox\"",
                "-               ng-class=\"{'disable': paragraph.status == 'RUNNING' || paragraph.status == 'PENDING' }\"",
                "-               ng-checked=\"paragraph.settings.params[formulaire.name].indexOf(option.value) > -1\"",
                "-               ng-enter=\"runParagraphFromButton(getEditorValue())\"",
                "-               ng-click=\"toggleCheckbox(formulaire, option, false)\"/> {{option.displayName||option.value}}",
                "-      </label>",
                "-    </div>",
                "-  </div>",
                "-</form>",
                "diff --git a/zeppelin-web/src/app/notebook/paragraph/paragraph.controller.js b/zeppelin-web/src/app/notebook/paragraph/paragraph.controller.js",
                "index 7d95d3b32..c5788416a 100644",
                "--- a/zeppelin-web/src/app/notebook/paragraph/paragraph.controller.js",
                "+++ b/zeppelin-web/src/app/notebook/paragraph/paragraph.controller.js",
                "@@ -468,5 +468,5 @@ function ParagraphCtrl ($scope, $rootScope, $route, $window, $routeParams, $loca",
                "-  $scope.runParagraphFromButton = function (paragraphText) {",
                "+  $scope.runParagraphFromButton = function () {",
                "     // we come here from the view, so we don't need to call `$digest()`",
                "-    $scope.runParagraph(paragraphText, false, false)",
                "+    $scope.runParagraph($scope.getEditorValue(), false, false)",
                "   }",
                "@@ -659,20 +659,2 @@ function ParagraphCtrl ($scope, $rootScope, $route, $window, $routeParams, $loca",
                "-  $scope.loadForm = function (formulaire, params) {",
                "-    let value = formulaire.defaultValue",
                "-    if (params[formulaire.name]) {",
                "-      value = params[formulaire.name]",
                "-    }",
                "-",
                "-    $scope.paragraph.settings.params[formulaire.name] = value",
                "-  }",
                "-",
                "-  $scope.toggleCheckbox = function (formulaire, option) {",
                "-    let idx = $scope.paragraph.settings.params[formulaire.name].indexOf(option.value)",
                "-    if (idx > -1) {",
                "-      $scope.paragraph.settings.params[formulaire.name].splice(idx, 1)",
                "-    } else {",
                "-      $scope.paragraph.settings.params[formulaire.name].push(option.value)",
                "-    }",
                "-  }",
                "-",
                "   $scope.aceChanged = function (_, editor) {",
                "diff --git a/zeppelin-web/src/app/notebook/paragraph/paragraph.controller.test.js b/zeppelin-web/src/app/notebook/paragraph/paragraph.controller.test.js",
                "index 29b203c3e..94230de7f 100644",
                "--- a/zeppelin-web/src/app/notebook/paragraph/paragraph.controller.test.js",
                "+++ b/zeppelin-web/src/app/notebook/paragraph/paragraph.controller.test.js",
                "@@ -36,3 +36,3 @@ describe('Controller: ParagraphCtrl', function () {",
                "     'closeTable', 'openTable', 'showTitle', 'hideTitle', 'setTitle', 'showLineNumbers', 'hideLineNumbers',",
                "-    'changeColWidth', 'columnWidthClass', 'toggleOutput', 'loadForm',",
                "+    'changeColWidth', 'columnWidthClass', 'toggleOutput',",
                "     'aceChanged', 'aceLoaded', 'getEditorValue', 'getProgress', 'getExecutionTime', 'isResultOutdated']",
                "diff --git a/zeppelin-web/src/app/notebook/paragraph/paragraph.css b/zeppelin-web/src/app/notebook/paragraph/paragraph.css",
                "index a0bf299ad..b17272bd2 100644",
                "--- a/zeppelin-web/src/app/notebook/paragraph/paragraph.css",
                "+++ b/zeppelin-web/src/app/notebook/paragraph/paragraph.css",
                "@@ -305,24 +305,2 @@ table.table-shortcut {",
                "-/*",
                "-  Paragraph Forms CSS",
                "-*/",
                "-",
                "-.paragraphForm.form-horizontal .form-group {",
                "-  margin-right: 0;",
                "-  margin-left:  0;",
                "-}",
                "-",
                "-.paragraphForm.form-horizontal .form-group label {",
                "-  padding-left: 0;",
                "-}",
                "-",
                "-.paragraphForm.form-horizontal .form-group .checkbox-item {",
                "-  padding-left: 0;",
                "-  padding-right: 10px;",
                "-}",
                "-",
                "-.paragraphForm.form-horizontal .form-group .checkbox-item input {",
                "-  margin-right: 2px;",
                "-}",
                "-",
                " /*",
                "diff --git a/zeppelin-web/src/app/notebook/paragraph/paragraph.html b/zeppelin-web/src/app/notebook/paragraph/paragraph.html",
                "index f80fb5339..10afd1754 100644",
                "--- a/zeppelin-web/src/app/notebook/paragraph/paragraph.html",
                "+++ b/zeppelin-web/src/app/notebook/paragraph/paragraph.html",
                "@@ -51,3 +51,12 @@ limitations under the License.",
                "     <div ng-include src=\"'app/notebook/paragraph/paragraph-progress-bar.html'\"></div>",
                "-    <div ng-include src=\"'app/notebook/paragraph/paragraph-parameterized-query-form.html'\"></div>",
                "+    <div>",
                "+      <dynamic-forms",
                "+        id=\"paragraph.id\"",
                "+        hide=\"paragraph.config.tableHide\"",
                "+        disable=\"paragraph.status == 'RUNNING' || paragraph.status == 'PENDING'\"",
                "+        actiononchange=\"paragraph.config.runOnSelectionChange\"",
                "+        forms=\"paragraph.settings.forms\"",
                "+        params=\"paragraph.settings.params\"",
                "+        action=\"runParagraphFromButton\"></dynamic-forms>",
                "+    </div>",
                "diff --git a/zeppelin-web/src/components/websocket/websocket-event.factory.js b/zeppelin-web/src/components/websocket/websocket-event.factory.js",
                "index d4bfadf6b..70d61ecd9 100644",
                "--- a/zeppelin-web/src/components/websocket/websocket-event.factory.js",
                "+++ b/zeppelin-web/src/components/websocket/websocket-event.factory.js",
                "@@ -144,2 +144,4 @@ function WebsocketEventFactory ($rootScope, $websocket, $location, baseUrlSrv) {",
                "       $rootScope.$broadcast('interpreterBindings', data)",
                "+    } else if (op === 'SAVE_NOTE_FORMS') {",
                "+      $rootScope.$broadcast('saveNoteForms', data)",
                "     } else if (op === 'ERROR_INFO') {",
                "diff --git a/zeppelin-web/src/components/websocket/websocket-message.service.js b/zeppelin-web/src/components/websocket/websocket-message.service.js",
                "index ab97fa8cb..cd65e1d31 100644",
                "--- a/zeppelin-web/src/components/websocket/websocket-message.service.js",
                "+++ b/zeppelin-web/src/components/websocket/websocket-message.service.js",
                "@@ -353,2 +353,20 @@ function WebsocketMessageService ($rootScope, websocketEvents) {",
                "+    saveNoteForms: function (note) {",
                "+      websocketEvents.sendNewEvent({op: 'SAVE_NOTE_FORMS',",
                "+        data: {",
                "+          noteId: note.id,",
                "+          noteParams: note.noteParams",
                "+        }",
                "+      })",
                "+    },",
                "+",
                "+    removeNoteForms: function (note, formName) {",
                "+      websocketEvents.sendNewEvent({op: 'REMOVE_NOTE_FORMS',",
                "+        data: {",
                "+          noteId: note.id,",
                "+          formName: formName",
                "+        }",
                "+      })",
                "+    }",
                "+",
                "   }",
                "diff --git a/zeppelin-web/src/index.js b/zeppelin-web/src/index.js",
                "index ed8f1d8f9..4c41336a1 100644",
                "--- a/zeppelin-web/src/index.js",
                "+++ b/zeppelin-web/src/index.js",
                "@@ -60,2 +60,3 @@ import './app/helium'",
                " import './app/helium/helium.service.js'",
                "+import './app/notebook/dynamic-forms/dynamic-forms.directive.js'",
                " import './components/array-ordering/array-ordering.service.js'",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "index 13fe46a1c..8964210c1 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "@@ -240,4 +240,6 @@ public class RemoteInterpreter extends Interpreter {",
                "             GUI currentGUI = context.getGui();",
                "+            GUI currentNoteGUI = context.getNoteGui();",
                "             if (form == FormType.NATIVE) {",
                "               GUI remoteGui = GUI.fromJson(remoteResult.getGui());",
                "+              GUI remoteNoteGui = GUI.fromJson(remoteResult.getNoteGui());",
                "               currentGUI.clear();",
                "@@ -245,2 +247,4 @@ public class RemoteInterpreter extends Interpreter {",
                "               currentGUI.setForms(remoteGui.getForms());",
                "+              currentNoteGUI.setParams(remoteNoteGui.getParams());",
                "+              currentNoteGUI.setForms(remoteNoteGui.getForms());",
                "             } else if (form == FormType.SIMPLE) {",
                "@@ -405,3 +409,4 @@ public class RemoteInterpreter extends Interpreter {",
                "         ic.getParagraphTitle(), ic.getParagraphText(), gson.toJson(ic.getAuthenticationInfo()),",
                "-        gson.toJson(ic.getConfig()), ic.getGui().toJson(), gson.toJson(ic.getRunners()));",
                "+        gson.toJson(ic.getConfig()), ic.getGui().toJson(), gson.toJson(ic.getNoteGui()),",
                "+        gson.toJson(ic.getRunners()));",
                "   }",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "index 9fb0f0e05..6e6673271 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "@@ -76,2 +76,5 @@ public class Note implements ParagraphJobListener, JsonSerializable {",
                "   private String id;",
                "+  private Map<String, Object> noteParams = new HashMap<>();",
                "+  private LinkedHashMap<String, Input> noteForms = new LinkedHashMap<>();",
                "+",
                "@@ -160,2 +163,18 @@ public class Note implements ParagraphJobListener, JsonSerializable {",
                "+  public Map<String, Object> getNoteParams() {",
                "+    return noteParams;",
                "+  }",
                "+",
                "+  public void setNoteParams(Map<String, Object> noteParams) {",
                "+    this.noteParams = noteParams;",
                "+  }",
                "+",
                "+  public LinkedHashMap<String, Input> getNoteForms() {",
                "+    return noteForms;",
                "+  }",
                "+",
                "+  public void setNoteForms(LinkedHashMap<String, Input> noteForms) {",
                "+    this.noteForms = noteForms;",
                "+  }",
                "+",
                "   public String getNameWithoutPath() {",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "index 6a0c27af2..10a854879 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "@@ -410,10 +410,24 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "     } else if (interpreter.getFormType() == FormType.SIMPLE) {",
                "-      // inputs will be built from script scriptText",
                "-      LinkedHashMap<String, Input> inputs = Input.extractSimpleQueryForm(this.scriptText);",
                "+      // inputs will be built from script body",
                "+      LinkedHashMap<String, Input> inputs = Input.extractSimpleQueryForm(script, false);",
                "+      LinkedHashMap<String, Input> noteInputs = Input.extractSimpleQueryForm(script, true);",
                "       final AngularObjectRegistry angularRegistry =",
                "           interpreter.getInterpreterGroup().getAngularObjectRegistry();",
                "-      String scriptBody = extractVariablesFromAngularRegistry(this.scriptText, inputs,",
                "-          angularRegistry);",
                "+      String scriptBody = extractVariablesFromAngularRegistry(script, inputs, angularRegistry);",
                "+",
                "       settings.setForms(inputs);",
                "-      script = Input.getSimpleQuery(settings.getParams(), scriptBody);",
                "+      if (!noteInputs.isEmpty()) {",
                "+        if (!note.getNoteForms().isEmpty()) {",
                "+          Map<String, Input> currentNoteForms =  note.getNoteForms();",
                "+          for (String s : noteInputs.keySet()) {",
                "+            if (!currentNoteForms.containsKey(s)) {",
                "+              currentNoteForms.put(s, noteInputs.get(s));",
                "+            }",
                "+          }",
                "+        } else {",
                "+          note.setNoteForms(noteInputs);",
                "+        }",
                "+      }",
                "+      script = Input.getSimpleQuery(note.getNoteParams(), scriptBody, true);",
                "+      script = Input.getSimpleQuery(settings.getParams(), script, false);",
                "     }",
                "@@ -425,2 +439,7 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "+      if (interpreter.getFormType() == FormType.NATIVE) {",
                "+        note.setNoteParams(context.getNoteGui().getParams());",
                "+        note.setNoteForms(context.getNoteGui().getForms());",
                "+      }",
                "+",
                "       if (Code.KEEP_PREVIOUS_RESULT == ret.code()) {",
                "@@ -547,4 +566,4 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "         new InterpreterContext(note.getId(), getId(), intpText, this.getTitle(),",
                "-            this.getText(), this.getAuthenticationInfo(), this.getConfig(), this.settings, registry,",
                "-            resourcePool, runners, output);",
                "+            this.getText(), this.getAuthenticationInfo(), this.getConfig(), this.settings,",
                "+            getNoteGui(), registry, resourcePool, runners, output);",
                "     return interpreterContext;",
                "@@ -577,4 +596,4 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "         new InterpreterContext(note.getId(), getId(), intpText, this.getTitle(),",
                "-            this.getText(), this.getAuthenticationInfo(), this.getConfig(), this.settings, registry,",
                "-            resourcePool, runners, output);",
                "+            this.getText(), this.getAuthenticationInfo(), this.getConfig(), this.settings,",
                "+            getNoteGui(), registry, resourcePool, runners, output);",
                "     return interpreterContext;",
                "@@ -583,3 +602,2 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "   public InterpreterContextRunner getInterpreterContextRunner() {",
                "-",
                "     return new ParagraphRunner(note, note.getId(), getId());",
                "@@ -745,2 +763,9 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "+  private GUI getNoteGui() {",
                "+    GUI gui = new GUI();",
                "+    gui.setParams(this.note.getNoteParams());",
                "+    gui.setForms(this.note.getNoteForms());",
                "+    return gui;",
                "+  }",
                "+",
                "   @Override",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/socket/Message.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/socket/Message.java",
                "index d99bd598f..82d96ae0d 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/socket/Message.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/socket/Message.java",
                "@@ -184,4 +184,6 @@ public class Message implements JsonSerializable {",
                "     PARAGRAPH_EXECUTED_BY_SPELL,  // [c-s] paragraph was executed by spell",
                "-    RUN_PARAGRAPH_USING_SPELL,     // [s-c] run paragraph using spell",
                "-    PARAS_INFO                    // [s-c] paragraph runtime infos",
                "+    RUN_PARAGRAPH_USING_SPELL,    // [s-c] run paragraph using spell",
                "+    PARAS_INFO,                   // [s-c] paragraph runtime infos",
                "+    SAVE_NOTE_FORMS,              // save note forms",
                "+    REMOVE_NOTE_FORMS             // remove note forms",
                "   }"
            ],
            "changed_files": [
                "python/src/main/java/org/apache/zeppelin/python/IPythonInterpreter.java",
                "python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java",
                "python/src/main/resources/grpc/python/zeppelin_python.py",
                "python/src/main/resources/python/zeppelin_python.py",
                "spark/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java",
                "spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java",
                "spark/src/main/java/org/apache/zeppelin/spark/SparkZeppelinContext.java",
                "spark/src/main/resources/python/zeppelin_pyspark.py",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/Input.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/BaseZeppelinContext.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterContext.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/CallbackInfo.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/InterpreterCompletion.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteApplicationResult.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterCallbackService.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterContext.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEvent.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResult.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResultMessage.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterService.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/ZeppelinServerResourceParagraphRunner.java",
                "zeppelin-interpreter/src/main/thrift/RemoteInterpreterService.thrift",
                "zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "zeppelin-web/src/app/notebook/dynamic-forms/dynamic-forms.css",
                "zeppelin-web/src/app/notebook/dynamic-forms/dynamic-forms.directive.html",
                "zeppelin-web/src/app/notebook/dynamic-forms/dynamic-forms.directive.js",
                "zeppelin-web/src/app/notebook/notebook.controller.js",
                "zeppelin-web/src/app/notebook/notebook.html",
                "zeppelin-web/src/app/notebook/paragraph/paragraph-parameterized-query-form.html",
                "zeppelin-web/src/app/notebook/paragraph/paragraph.controller.js",
                "zeppelin-web/src/app/notebook/paragraph/paragraph.controller.test.js",
                "zeppelin-web/src/app/notebook/paragraph/paragraph.css",
                "zeppelin-web/src/app/notebook/paragraph/paragraph.html",
                "zeppelin-web/src/components/websocket/websocket-event.factory.js",
                "zeppelin-web/src/components/websocket/websocket-message.service.js",
                "zeppelin-web/src/index.js",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/socket/Message.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-1363": ""
            },
            "ghissue_refs": {
                "2641": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: default, user, paragraph",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: paragraph",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-1363",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2641",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7241348cff4ef061fbc716f836d2d2d503477008",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1509525281,
            "hunks": 28,
            "message": "[ZEPPELIN-2813] revisions comparator ### What is this PR for? Sometimes need to see the difference between versions and to switch to another version and look for changes are not convenient (the page reloaded). This feature allows you to compare any two versions of the notebook. ### What type of PR is it? Feature ### What is the Jira issue? https://issues.apache.org/jira/browse/ZEPPELIN-2813 ### How should this be tested? 1 make some commits. \u00d0\u00a1change the contents of paragraphs (delete, add, edit) 2 open Revisions comparator 3 compare revisions and check diff ### Screenshots (if appropriate) ![comparator](https://user-images.githubusercontent.com/25951039/28702781-cf1cedce-7378-11e7-9034-7036f4440bf3.gif) ### Questions: * Does the licenses files need update? yes (updated) * Is there breaking changes for older versions? no * Does this needs documentation? no Author: tinkoff-dwh <tinkoff.dwh@gmail.com> Author: Tinkoff DWH <tinkoff.dwh@gmail.com> Closes #2506 from tinkoff-dwh/ZEPPELIN-2813 and squashes the following commits: acc624f [tinkoff-dwh] Merge remote-tracking branch 'upstream/master' into ZEPPELIN-2813 2fd89a8 [tinkoff-dwh] Merge remote-tracking branch 'origin/master' into ZEPPELIN-2813 8b8afcc [tinkoff-dwh] Docs edit efa7ce2 [tinkoff-dwh] Merge branch 'master' into ZEPPELIN-2813 f530524 [tinkoff-dwh] zep-2813 anim off 0e866b2 [tinkoff-dwh] zep_2813 color change 310760e [tinkoff-dwh] zep_2813 UI for REVISIONS COMPARATOR. 3d4f86c [tinkoff-dwh] Merge branch 'master' into ZEPPELIN-2813_refactoring_2 dc67f8f [tinkoff-dwh] [ZEPPELIN-2813] refactoring 514b3f5 [tinkoff-dwh] small fixes, added documentation 4ce5286 [tinkoff-dwh] Merge remote-tracking branch 'origin/master' into ZEPPELIN-2813 b949814 [Tinkoff DWH] [ZEPPELIN-2813] license a192b95 [Tinkoff DWH] [ZEPPELIN-2813] revisions comparator for note",
            "diff": [
                "diff --git a/docs/_includes/themes/zeppelin/_navigation.html b/docs/_includes/themes/zeppelin/_navigation.html",
                "index 215c94426..bccb5b469 100644",
                "--- a/docs/_includes/themes/zeppelin/_navigation.html",
                "+++ b/docs/_includes/themes/zeppelin/_navigation.html",
                "@@ -63,2 +63,3 @@",
                "                 <li><a href=\"{{BASE_PATH}}/usage/other_features/customizing_homepage.html\">Customizing Zeppelin Homepage</a></li>",
                "+                <li><a href=\"{{BASE_PATH}}/usage/other_features/notebook_actions.html\">Notebook Actions</a></li>",
                "                 <li role=\"separator\" class=\"divider\"></li>",
                "diff --git a/docs/assets/themes/zeppelin/img/docs-img/revisions-comparator-comboboxes.png b/docs/assets/themes/zeppelin/img/docs-img/revisions-comparator-comboboxes.png",
                "new file mode 100644",
                "index 000000000..7eae6a597",
                "Binary files /dev/null and b/docs/assets/themes/zeppelin/img/docs-img/revisions-comparator-comboboxes.png differ",
                "diff --git a/docs/assets/themes/zeppelin/img/docs-img/revisions-comparator-table.png b/docs/assets/themes/zeppelin/img/docs-img/revisions-comparator-table.png",
                "new file mode 100644",
                "index 000000000..6c7b8e6df",
                "Binary files /dev/null and b/docs/assets/themes/zeppelin/img/docs-img/revisions-comparator-table.png differ",
                "diff --git a/docs/assets/themes/zeppelin/img/docs-img/revisions_comparator_button.png b/docs/assets/themes/zeppelin/img/docs-img/revisions_comparator_button.png",
                "new file mode 100644",
                "index 000000000..168809cc4",
                "Binary files /dev/null and b/docs/assets/themes/zeppelin/img/docs-img/revisions_comparator_button.png differ",
                "diff --git a/docs/assets/themes/zeppelin/img/docs-img/revisions_comparator_diff.png b/docs/assets/themes/zeppelin/img/docs-img/revisions_comparator_diff.png",
                "new file mode 100644",
                "index 000000000..c1092e9c0",
                "Binary files /dev/null and b/docs/assets/themes/zeppelin/img/docs-img/revisions_comparator_diff.png differ",
                "diff --git a/docs/assets/themes/zeppelin/img/docs-img/revisions_comparator_paragraph.png b/docs/assets/themes/zeppelin/img/docs-img/revisions_comparator_paragraph.png",
                "new file mode 100644",
                "index 000000000..c559c458f",
                "Binary files /dev/null and b/docs/assets/themes/zeppelin/img/docs-img/revisions_comparator_paragraph.png differ",
                "diff --git a/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java b/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "index e3fb00491..a3e871424 100644",
                "--- a/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "+++ b/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "@@ -31,4 +31,2 @@ import javax.servlet.http.HttpServletRequest;",
                "-import com.google.common.base.Strings;",
                "-import com.google.common.collect.Sets;",
                " import org.apache.commons.lang.StringUtils;",
                "@@ -47,4 +45,4 @@ import org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener;",
                " import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;",
                "-import org.apache.zeppelin.notebook.JobListenerFactory;",
                " import org.apache.zeppelin.notebook.Folder;",
                "+import org.apache.zeppelin.notebook.JobListenerFactory;",
                " import org.apache.zeppelin.notebook.Note;",
                "@@ -79,3 +77,5 @@ import org.slf4j.LoggerFactory;",
                "+import com.google.common.base.Strings;",
                " import com.google.common.collect.Queues;",
                "+import com.google.common.collect.Sets;",
                " import com.google.gson.Gson;",
                "@@ -334,2 +334,5 @@ public class NotebookServer extends WebSocketServlet",
                "           break;",
                "+        case NOTE_REVISION_FOR_COMPARE:",
                "+          getNoteByRevisionForCompare(conn, notebook, messagereceived);",
                "+          break;",
                "         case LIST_NOTE_JOBS:",
                "@@ -1945,2 +1948,21 @@ public class NotebookServer extends WebSocketServlet",
                "+  private void getNoteByRevisionForCompare(NotebookSocket conn, Notebook notebook,",
                "+      Message fromMessage) throws IOException {",
                "+    String noteId = (String) fromMessage.get(\"noteId\");",
                "+    String revisionId = (String) fromMessage.get(\"revisionId\");",
                "+",
                "+    String position = (String) fromMessage.get(\"position\");",
                "+    AuthenticationInfo subject = new AuthenticationInfo(fromMessage.principal);",
                "+    Note revisionNote;",
                "+    if (revisionId.equals(\"Head\")) {",
                "+      revisionNote = notebook.getNote(noteId);",
                "+    } else {",
                "+      revisionNote = notebook.getNoteByRevision(noteId, revisionId, subject);",
                "+    }",
                "+",
                "+    conn.send(serializeMessage(",
                "+        new Message(OP.NOTE_REVISION_FOR_COMPARE).put(\"noteId\", noteId)",
                "+            .put(\"revisionId\", revisionId).put(\"position\", position).put(\"note\", revisionNote)));",
                "+  }",
                "+",
                "   /**",
                "diff --git a/zeppelin-web/bower.json b/zeppelin-web/bower.json",
                "index a68c2e9ec..2b5135f9b 100644",
                "--- a/zeppelin-web/bower.json",
                "+++ b/zeppelin-web/bower.json",
                "@@ -34,3 +34,4 @@",
                "     \"MathJax\": \"2.7.0\",",
                "-    \"ngclipboard\": \"^1.1.1\"",
                "+    \"ngclipboard\": \"^1.1.1\",",
                "+    \"jsdiff\": \"3.3.0\"",
                "   },",
                "diff --git a/zeppelin-web/karma.conf.js b/zeppelin-web/karma.conf.js",
                "index 1c7934629..8a03bec1c 100644",
                "--- a/zeppelin-web/karma.conf.js",
                "+++ b/zeppelin-web/karma.conf.js",
                "@@ -88,2 +88,3 @@ module.exports = function(config) {",
                "       'bower_components/ngclipboard/dist/ngclipboard.js',",
                "+      'bower_components/jsdiff/diff.js',",
                "       'bower_components/angular-mocks/angular-mocks.js',",
                "diff --git a/zeppelin-web/src/app/notebook/notebook-actionBar.html b/zeppelin-web/src/app/notebook/notebook-actionBar.html",
                "index b121fee52..0db4ff02c 100644",
                "--- a/zeppelin-web/src/app/notebook/notebook-actionBar.html",
                "+++ b/zeppelin-web/src/app/notebook/notebook-actionBar.html",
                "@@ -145,2 +145,8 @@ limitations under the License.",
                "         </ul>",
                "+        <button type=\"button\"",
                "+                class=\"btn btn-default btn-xs\"",
                "+                ng-click=\"toggleRevisionsComparator()\"",
                "+                tooltip-placement=\"bottom\" uib-tooltip=\"Compare revisions\">",
                "+          <i class=\"fa fa-exchange\"></i>",
                "+        </button>",
                "       </div>",
                "diff --git a/zeppelin-web/src/app/notebook/notebook.controller.js b/zeppelin-web/src/app/notebook/notebook.controller.js",
                "index bdd47c243..456e46313 100644",
                "--- a/zeppelin-web/src/app/notebook/notebook.controller.js",
                "+++ b/zeppelin-web/src/app/notebook/notebook.controller.js",
                "@@ -33,2 +33,3 @@ function NotebookCtrl ($scope, $route, $routeParams, $location, $rootScope,",
                "   $scope.showSetting = false",
                "+  $scope.showRevisionsComparator = false",
                "   $scope.looknfeelOption = ['default', 'simple', 'report']",
                "@@ -249,2 +250,11 @@ function NotebookCtrl ($scope, $route, $routeParams, $location, $rootScope,",
                "+  $scope.preVisibleRevisionsComparator = function() {",
                "+    $scope.mergeNoteRevisionsForCompare = null",
                "+    $scope.firstNoteRevisionForCompare = null",
                "+    $scope.secondNoteRevisionForCompare = null",
                "+    $scope.currentFirstRevisionForCompare = 'Choose...'",
                "+    $scope.currentSecondRevisionForCompare = 'Choose...'",
                "+    $scope.$apply()",
                "+  }",
                "+",
                "   $scope.$on('listRevisionHistory', function (event, data) {",
                "@@ -252,6 +262,8 @@ function NotebookCtrl ($scope, $route, $routeParams, $location, $rootScope,",
                "     $scope.noteRevisions = data.revisionList",
                "-    $scope.noteRevisions.splice(0, 0, {",
                "-      id: 'Head',",
                "-      message: 'Head'",
                "-    })",
                "+    if ($scope.noteRevisions.length === 0 || $scope.noteRevisions[0].id !== 'Head') {",
                "+      $scope.noteRevisions.splice(0, 0, {",
                "+        id: 'Head',",
                "+        message: 'Head'",
                "+      })",
                "+    }",
                "     if ($routeParams.revisionId) {",
                "@@ -581,2 +593,8 @@ function NotebookCtrl ($scope, $route, $routeParams, $location, $rootScope,",
                "+  $scope.closeAdditionalBoards = function() {",
                "+    $scope.closeSetting()",
                "+    $scope.closePermissions()",
                "+    $scope.closeRevisionsComparator()",
                "+  }",
                "+",
                "   $scope.openSetting = function () {",
                "@@ -630,4 +648,22 @@ function NotebookCtrl ($scope, $route, $routeParams, $location, $rootScope,",
                "     } else {",
                "+      $scope.closeAdditionalBoards()",
                "       $scope.openSetting()",
                "-      $scope.closePermissions()",
                "+      angular.element('html, body').animate({ scrollTop: 0 }, 'slow')",
                "+    }",
                "+  }",
                "+",
                "+  $scope.openRevisionsComparator = function () {",
                "+    $scope.showRevisionsComparator = true",
                "+  }",
                "+",
                "+  $scope.closeRevisionsComparator = function () {",
                "+    $scope.showRevisionsComparator = false",
                "+  }",
                "+",
                "+  $scope.toggleRevisionsComparator = function () {",
                "+    if ($scope.showRevisionsComparator) {",
                "+      $scope.closeRevisionsComparator()",
                "+    } else {",
                "+      $scope.closeAdditionalBoards()",
                "+      $scope.openRevisionsComparator()",
                "       angular.element('html, body').animate({ scrollTop: 0 }, 'slow')",
                "@@ -1066,4 +1102,4 @@ function NotebookCtrl ($scope, $route, $routeParams, $location, $rootScope,",
                "       } else {",
                "+        $scope.closeAdditionalBoards()",
                "         $scope.openPermissions()",
                "-        $scope.closeSetting()",
                "       }",
                "diff --git a/zeppelin-web/src/app/notebook/notebook.html b/zeppelin-web/src/app/notebook/notebook.html",
                "index 4b1c0b95c..9441f6e17 100644",
                "--- a/zeppelin-web/src/app/notebook/notebook.html",
                "+++ b/zeppelin-web/src/app/notebook/notebook.html",
                "@@ -16,2 +16,10 @@ limitations under the License.",
                " <div id=\"content\" class=\"notebookContent\">",
                "+  <!-- revisions comparator-->",
                "+  <div ng-if=\"showRevisionsComparator\" class=\"revisions-comparator\">",
                "+    <div>",
                "+      <h4>Revisions comparator</h4>",
                "+    </div>",
                "+    <hr />",
                "+    <revisions-comparator note-revisions=\"noteRevisions\"></revisions-comparator>",
                "+  </div>",
                "   <!-- settings -->",
                "diff --git a/zeppelin-web/src/app/notebook/revisions-comparator/revisions-comparator.component.js b/zeppelin-web/src/app/notebook/revisions-comparator/revisions-comparator.component.js",
                "new file mode 100644",
                "index 000000000..45db38a44",
                "--- /dev/null",
                "+++ b/zeppelin-web/src/app/notebook/revisions-comparator/revisions-comparator.component.js",
                "@@ -0,0 +1,181 @@",
                "+/*",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+import revisionsComparatorTemplate from './revisions-comparator.html'",
                "+import './revisions-comparator.css'",
                "+import moment from 'moment'",
                "+",
                "+function RevisionsComparatorController($scope, websocketMsgSrv, $routeParams) {",
                "+  'ngInject'",
                "+",
                "+  $scope.firstNoteRevisionForCompare = null",
                "+  $scope.secondNoteRevisionForCompare = null",
                "+  $scope.mergeNoteRevisionsForCompare = null",
                "+  $scope.currentParagraphDiffDisplay = null",
                "+  $scope.currentFirstRevisionForCompare = 'Choose...'",
                "+  $scope.currentSecondRevisionForCompare = 'Choose...'",
                "+",
                "+  $scope.getNoteRevisionForReview = function (revision, position) {",
                "+    if (position) {",
                "+      if (position === 'first') {",
                "+        $scope.currentFirstRevisionForCompare = revision.message",
                "+      } else {",
                "+        $scope.currentSecondRevisionForCompare = revision.message",
                "+      }",
                "+      websocketMsgSrv.getNoteByRevisionForCompare($routeParams.noteId, revision.id, position)",
                "+    }",
                "+  }",
                "+",
                "+  // compare revisions",
                "+  $scope.compareRevisions = function () {",
                "+    if ($scope.firstNoteRevisionForCompare && $scope.secondNoteRevisionForCompare) {",
                "+      let paragraphs1 = $scope.firstNoteRevisionForCompare.note.paragraphs",
                "+      let paragraphs2 = $scope.secondNoteRevisionForCompare.note.paragraphs",
                "+      let added = 'added'",
                "+      let deleted = 'deleted'",
                "+      let compared = 'compared'",
                "+      let merge = []",
                "+      for (let p1 of paragraphs1) {",
                "+        let p2 = null",
                "+        for (let p of paragraphs2) {",
                "+          if (p1.id === p.id) {",
                "+            p2 = p",
                "+            break",
                "+          }",
                "+        }",
                "+        if (p2 === null) {",
                "+          merge.push({paragraph: p1, firstString: (p1.text || '').split('\\n')[0], type: deleted})",
                "+        } else {",
                "+          let colorClass = ''",
                "+          let span = null",
                "+          let text1 = p1.text || ''",
                "+          let text2 = p2.text || ''",
                "+",
                "+          let diff = window.JsDiff.diffLines(text1, text2)",
                "+          let diffHtml = document.createDocumentFragment()",
                "+          let identical = true",
                "+          let identicalClass = 'color-black'",
                "+",
                "+          diff.forEach(function (part) {",
                "+            colorClass = part.added ? 'color-green-row' : part.removed ? 'color-red-row' : identicalClass",
                "+            span = document.createElement('span')",
                "+            span.className = colorClass",
                "+            if (identical && colorClass !== identicalClass) {",
                "+              identical = false",
                "+            }",
                "+",
                "+            let str = part.value",
                "+",
                "+            if (str[str.length - 1] !== '\\n') {",
                "+              str = str + '\\n'",
                "+            }",
                "+",
                "+            span.appendChild(document.createTextNode(str))",
                "+            diffHtml.appendChild(span)",
                "+          })",
                "+",
                "+          let pre = document.createElement('pre')",
                "+          pre.appendChild(diffHtml)",
                "+",
                "+          merge.push(",
                "+            {",
                "+              paragraph: p1,",
                "+              diff: pre.innerHTML,",
                "+              identical: identical,",
                "+              firstString: (p1.text || '').split('\\n')[0],",
                "+              type: compared",
                "+            })",
                "+        }",
                "+      }",
                "+",
                "+      for (let p2 of paragraphs2) {",
                "+        let p1 = null",
                "+        for (let p of paragraphs1) {",
                "+          if (p2.id === p.id) {",
                "+            p1 = p",
                "+            break",
                "+          }",
                "+        }",
                "+        if (p1 === null) {",
                "+          merge.push({paragraph: p2, firstString: (p2.text || '').split('\\n')[0], type: added})",
                "+        }",
                "+      }",
                "+",
                "+      merge.sort(function (a, b) {",
                "+        if (a.type === added) {",
                "+          return -1",
                "+        }",
                "+        if (a.type === compared) {",
                "+          return 1",
                "+        }",
                "+        if (a.type === deleted) {",
                "+          if (b.type === compared) {",
                "+            return -1",
                "+          } else {",
                "+            return 1",
                "+          }",
                "+        }",
                "+      })",
                "+",
                "+      $scope.mergeNoteRevisionsForCompare = merge",
                "+",
                "+      if ($scope.currentParagraphDiffDisplay !== null) {",
                "+        $scope.changeCurrentParagraphDiffDisplay($scope.currentParagraphDiffDisplay.paragraph.id)",
                "+      }",
                "+    }",
                "+  }",
                "+",
                "+  $scope.$on('noteRevisionForCompare', function (event, data) {",
                "+    console.debug('received note revision for compare %o', data)",
                "+    if (data.note && data.position) {",
                "+      if (data.position === 'first') {",
                "+        $scope.firstNoteRevisionForCompare = data",
                "+      } else {",
                "+        $scope.secondNoteRevisionForCompare = data",
                "+      }",
                "+",
                "+      if ($scope.firstNoteRevisionForCompare !== null && $scope.secondNoteRevisionForCompare !== null &&",
                "+        $scope.firstNoteRevisionForCompare.revisionId !== $scope.secondNoteRevisionForCompare.revisionId) {",
                "+        $scope.compareRevisions()",
                "+      }",
                "+    }",
                "+  })",
                "+",
                "+  $scope.formatRevisionDate = function (date) {",
                "+    return moment.unix(date).format('MMMM Do YYYY, h:mm:ss a')",
                "+  }",
                "+",
                "+  $scope.changeCurrentParagraphDiffDisplay = function (paragraphId) {",
                "+    for (let p of $scope.mergeNoteRevisionsForCompare) {",
                "+      if (p.paragraph.id === paragraphId) {",
                "+        $scope.currentParagraphDiffDisplay = p",
                "+        return",
                "+      }",
                "+    }",
                "+    $scope.currentParagraphDiffDisplay = null",
                "+  }",
                "+}",
                "+",
                "+export const RevisionsComparatorComponent = {",
                "+  template: revisionsComparatorTemplate,",
                "+  controller: RevisionsComparatorController,",
                "+  bindings: {",
                "+    noteRevisions: '<'",
                "+  }",
                "+}",
                "+",
                "+export const RevisionsComparatorModule = angular",
                "+  .module('zeppelinWebApp')",
                "+  .component('revisionsComparator', RevisionsComparatorComponent)",
                "+  .name",
                "diff --git a/zeppelin-web/src/app/notebook/revisions-comparator/revisions-comparator.css b/zeppelin-web/src/app/notebook/revisions-comparator/revisions-comparator.css",
                "new file mode 100644",
                "index 000000000..3ec60c496",
                "--- /dev/null",
                "+++ b/zeppelin-web/src/app/notebook/revisions-comparator/revisions-comparator.css",
                "@@ -0,0 +1,276 @@",
                "+/*",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+.revisions-comparator {",
                "+  background: white;",
                "+  padding: 10px 15px 15px 15px;",
                "+  margin-left: -10px;",
                "+  margin-right: -10px;",
                "+  font-family: 'Roboto', sans-serif;",
                "+  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);",
                "+  border-bottom: 1px solid #E5E5E5;",
                "+}",
                "+",
                "+.revisions-comparator-panel {",
                "+  transition-property: border, left, background-color;",
                "+  transition-duration: 250ms, 500ms, 200ms;",
                "+  transition-timing-function: ease-out;",
                "+  position: relative;",
                "+  left: 0;",
                "+  width: 95%;",
                "+  background-color: rgba(255, 255, 0, 0.10);",
                "+  border: 1px solid rgba(120, 129, 82, 0.08);",
                "+  margin-right: 15px;",
                "+  min-width: 270px;",
                "+}",
                "+",
                "+.revisions-comparator-panel:first-child {",
                "+  margin-top: 5px;",
                "+}",
                "+",
                "+.revisions-comparator-panel:last-child {",
                "+  margin-bottom: 5px;",
                "+}",
                "+",
                "+.revisions-comparator-panel:hover {",
                "+  border: 1px solid rgba(55, 54, 35, 0.35);",
                "+  background-color: rgba(255, 204, 0, 0.15);",
                "+}",
                "+",
                "+.revisions-comparator-panel-selected {",
                "+  background-color: rgba(252, 255, 0, 0.53) !important;",
                "+  border: 1px solid rgba(55, 54, 35, 0.49)",
                "+}",
                "+",
                "+.revisions-comparator-panel-heading {",
                "+  padding: 10px;",
                "+  cursor: pointer;",
                "+}",
                "+",
                "+.revisions-comparator-panel.ng-enter,",
                "+.revisions-comparator-panel.ng-enter.ng-enter-active ,",
                "+.revisions-comparator-panel.ng-leave,",
                "+.revisions-comparator-panel.ng-leave-active {",
                "+  transition-duration: 0s !important;",
                "+}",
                "+",
                "+.cursor-hand {",
                "+  cursor: pointer;",
                "+}",
                "+",
                "+.paragraphs-div {",
                "+  overflow: auto;",
                "+  height: 35vh;",
                "+}",
                "+",
                "+.paragraphs-div-border {",
                "+  border: 1px solid black;",
                "+  border-radius: 10px;",
                "+  padding: 10px;",
                "+}",
                "+",
                "+.commit-tree {",
                "+  width: 100%;",
                "+  margin-right: 0;",
                "+  margin-bottom: 10px;",
                "+  border: 2px solid grey;",
                "+  border-radius: 5px !important;",
                "+}",
                "+",
                "+.commit-rows {",
                "+  height: 30vh;",
                "+  overflow: auto;",
                "+  display: block;",
                "+  width: 100%;",
                "+}",
                "+",
                "+.commit-rows tr:nth-child(even) {",
                "+  background-color: rgba(128, 128, 128, 0.06);",
                "+}",
                "+",
                "+.commit-tree tr:hover {",
                "+  background-color: rgba(48, 113, 169, 0.21);",
                "+}",
                "+",
                "+.selected-revision {",
                "+  background-color: rgba(48, 113, 169, 0.47) !important;",
                "+}",
                "+",
                "+.commit-tree table {",
                "+  border-collapse: collapse;",
                "+  table-layout: fixed;",
                "+  padding: 2px;",
                "+  margin-bottom: 0px;",
                "+}",
                "+",
                "+.commit-tree tr {",
                "+  width: 100%;",
                "+}",
                "+",
                "+.commit-tree td:nth-child(1),",
                "+.commit-tree th:nth-child(1) {",
                "+  width: 10%;",
                "+}",
                "+",
                "+.commit-tree td:nth-child(2),",
                "+.commit-tree th:nth-child(2) {",
                "+  width: 20%;",
                "+}",
                "+",
                "+.commit-tree th{",
                "+  font-weight: normal;",
                "+  font-size: 1.2em;",
                "+  background-color: #317bb4;",
                "+  color: rgb(255, 255, 255);",
                "+  text-align: center;",
                "+}",
                "+",
                "+.commit-tree .commit-rows td{",
                "+  padding-left: 15px;",
                "+}",
                "+",
                "+.commit-tree thead tr {",
                "+  display: block;",
                "+  position: relative;",
                "+}",
                "+",
                "+.empty-code-panel {",
                "+  text-align: center;",
                "+  padding-top: 25%;",
                "+  font-size: 30px;",
                "+  color: grey;",
                "+}",
                "+",
                "+.empty-paragraph-message {",
                "+  font-size: 2em;",
                "+  color: grey;",
                "+  margin: 0 auto;",
                "+  text-align: center;",
                "+  display: table-cell;",
                "+  vertical-align: middle;",
                "+}",
                "+",
                "+.revisions-comparator-bar {",
                "+  margin-left: 25px;",
                "+",
                "+}",
                "+",
                "+.revisions-comparator-bar .btn-group {",
                "+  margin: 0 20px;",
                "+}",
                "+",
                "+.revisions-comparator-code-panel {",
                "+  display: block;",
                "+  clear: both;",
                "+  width: 95%;",
                "+  float: left;",
                "+  height: 70vh;",
                "+  overflow-y: auto;",
                "+}",
                "+",
                "+.revisions-comparator-code-panel-title {",
                "+  width: 50%;",
                "+  float: left;",
                "+  font-size: 14px;",
                "+  padding: 5px;",
                "+}",
                "+",
                "+.revisions-comparator-bar {",
                "+  width: 400px;",
                "+  padding-bottom: 10px;",
                "+}",
                "+",
                "+.revisions-comparator-status {",
                "+  font-size: 12px;",
                "+  padding-left: 10px;",
                "+}",
                "+",
                "+#diffPanel {",
                "+  height: 100%;",
                "+  padding-left: 10px;",
                "+  border: 2px solid grey;",
                "+  border-radius: 5px !important;",
                "+}",
                "+",
                "+#diffPanel .panel-group {",
                "+  height: inherit;",
                "+  overflow: auto;",
                "+}",
                "+",
                "+.revision-name-for-compare {",
                "+  cursor: default;",
                "+  overflow: hidden;",
                "+  vertical-align: bottom;",
                "+  display: inline-block;",
                "+  max-width: 100px;",
                "+  padding: 1px 5px;",
                "+}",
                "+",
                "+.revisions-comparator-caret {",
                "+  padding-bottom: 5px;",
                "+}",
                "+",
                "+.revisions-comparator-link, .revisions-comparator-link:hover,",
                "+.revisions-comparator-link:visited, .revisions-comparator-link:focus {",
                "+  text-decoration: none;",
                "+  outline: none;",
                "+  color: #000;",
                "+}",
                "+",
                "+.revisions-comparator-first-string {",
                "+  display: block;",
                "+  height: 2em;",
                "+  overflow: hidden;",
                "+  padding-top: 6px;",
                "+  padding-left: 5px;",
                "+  white-space: nowrap;",
                "+  text-overflow: ellipsis;",
                "+  font-size: 12px;",
                "+  color: grey;",
                "+}",
                "+",
                "+.revisions-comparator-dropdown {",
                "+  padding: 5px;",
                "+  font-size: 12px;",
                "+  border-radius: 3px;",
                "+}",
                "+",
                "+.color-green-row {",
                "+  background-color: rgba(0, 226, 0, 0.22);",
                "+  display: block;",
                "+  color: green;",
                "+}",
                "+",
                "+.color-red-row {",
                "+  background-color: rgba(226, 0, 0, 0.22);",
                "+  display: block;",
                "+  color: red;",
                "+}",
                "+",
                "+.color-green {",
                "+  color: green;",
                "+}",
                "+",
                "+.color-red {",
                "+  color: red;",
                "+}",
                "+",
                "+.color-black {",
                "+  color: black;",
                "+}",
                "+",
                "+.color-orange {",
                "+  color: orange;",
                "+}",
                "+",
                "diff --git a/zeppelin-web/src/app/notebook/revisions-comparator/revisions-comparator.html b/zeppelin-web/src/app/notebook/revisions-comparator/revisions-comparator.html",
                "new file mode 100644",
                "index 000000000..37cdc5fb6",
                "--- /dev/null",
                "+++ b/zeppelin-web/src/app/notebook/revisions-comparator/revisions-comparator.html",
                "@@ -0,0 +1,124 @@",
                "+<!--",
                "+Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+you may not use this file except in compliance with the License.",
                "+You may obtain a copy of the License at",
                "+",
                "+    http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing, software",
                "+distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+See the License for the specific language governing permissions and",
                "+limitations under the License.",
                "+-->",
                "+<div class=\"col-md-4\">",
                "+",
                "+  <div class=\"commit-tree\">",
                "+    <table class=\"table\">",
                "+      <thead>",
                "+      <tr>",
                "+        <th>Revision name</th>",
                "+        <th>Date</th>",
                "+      </tr>",
                "+      </thead>",
                "+      <tbody class=\"commit-rows\">",
                "+      <tr ng-repeat=\"revision in $ctrl.noteRevisions | orderBy:'time':true\"",
                "+          ng-class=\"{'cursor-hand': !$last, 'selected-revision': revision.message === currentSecondRevisionForCompare}\"",
                "+          ng-click=\"getNoteRevisionForReview($ctrl.noteRevisions[$index + 1], 'first'); getNoteRevisionForReview(revision, 'second')\">",
                "+        <td>{{revision.message}}</td>",
                "+        <td>{{formatRevisionDate(revision.time)}}</td>",
                "+      </tr>",
                "+      </tbody>",
                "+    </table>",
                "+  </div>",
                "+",
                "+  <div class=\"revisions-comparator-bar\">",
                "+    <div class=\"btn-group\">",
                "+      <button type=\"button\" ng-if=\"$ctrl.noteRevisions.length > 0\"",
                "+              class=\"btn btn-default revisions-comparator-dropdown dropdown-toggle\"",
                "+              data-toggle=\"dropdown\" id=\"firstRevisionDropdown\" title=\"{{currentFirstRevisionForCompare}}\">",
                "+        <div class=\"revision-name-for-compare\">{{currentFirstRevisionForCompare}}</div>",
                "+        <span class=\"caret revisions-comparator-caret\"></span>",
                "+      </button>",
                "+      <ul class=\"dropdown-menu dropdown-menu-left\" aria-labelledby=\"firstRevisionDropdown\">",
                "+        <li></li>",
                "+        <li ng-repeat=\"revision in $ctrl.noteRevisions | orderBy:'time':true\" class=\"revision\">",
                "+          <a style=\"cursor:pointer\" ng-click=\"getNoteRevisionForReview(revision, 'first')\">",
                "+          <span style=\"display: block;\">",
                "+            <strong>{{revision.message}}</strong>",
                "+          </span>",
                "+            <span class=\"revisionDate\">",
                "+            <em>{{formatRevisionDate(revision.time)}}</em>",
                "+          </span>",
                "+          </a>",
                "+        </li>",
                "+      </ul>",
                "+    </div>",
                "+    <span>compare with</span>",
                "+    <div class=\"btn-group\">",
                "+      <button type=\"button\" ng-if=\"$ctrl.noteRevisions.length > 0\"",
                "+              class=\"btn btn-default revisions-comparator-dropdown dropdown-toggle\"",
                "+              ng-disabled=\"firstNoteRevisionForCompare === null\"",
                "+              data-toggle=\"dropdown\" id=\"secondRevisionDropdown\" title=\"{{currentSecondRevisionForCompare}}\">",
                "+        <div class=\"revision-name-for-compare\">{{currentSecondRevisionForCompare}}</div>",
                "+        <span class=\"caret revisions-comparator-caret\"></span>",
                "+      </button>",
                "+      <ul class=\"dropdown-menu dropdown-menu-left\" aria-labelledby=\"secondRevisionDropdown\">",
                "+        <li ng-repeat=\"revision in $ctrl.noteRevisions | orderBy:'time':true\" class=\"revision\">",
                "+          <a style=\"cursor:pointer\" ng-click=\"getNoteRevisionForReview(revision, 'second')\">",
                "+          <span style=\"display: block;\">",
                "+            <strong>{{revision.message}}</strong>",
                "+          </span>",
                "+            <span class=\"revisionDate\">",
                "+            <em>{{formatRevisionDate(revision.time)}}</em>",
                "+          </span>",
                "+          </a>",
                "+        </li>",
                "+      </ul>",
                "+    </div>",
                "+  </div>",
                "+",
                "+  <div id=\"diffPanel\">",
                "+    <div class=\"panel-group\" style=\"margin-bottom: 0px\">",
                "+      <div class=\"paragraphs-div\">",
                "+        <div class=\"panel revisions-comparator-panel\" data-ng-repeat=\"p in mergeNoteRevisionsForCompare | orderBy:'time':true\"",
                "+             ng-class=\"{'revisions-comparator-panel-selected' : currentParagraphDiffDisplay.paragraph.id === p.paragraph.id}\">",
                "+          <div class=\"revisions-comparator-panel-heading\"",
                "+               ng-click=\"changeCurrentParagraphDiffDisplay(p.paragraph.id)\">",
                "+            <h4 class=\"panel-title\">",
                "+              {{p.paragraph.id}}<strong style=\"padding: 5px;\" ng-if=\"p.paragraph.title\">({{p.paragraph.title}})</strong>",
                "+              <i ng-if=\"p.type === 'added'\" class=\"revisions-comparator-status color-green\">added</i>",
                "+              <i ng-if=\"p.type === 'deleted'\" class=\"revisions-comparator-status color-red\">deleted</i>",
                "+              <i ng-if=\"p.type === 'compared' && !(p.identical)\" class=\"revisions-comparator-status color-orange\">there",
                "+                are differences</i>",
                "+              <i ng-if=\"p.type === 'compared' && p.identical\" class=\"revisions-comparator-status\">contents are",
                "+                identical</i>",
                "+              <i class=\"revisions-comparator-first-string\">{{p.firstString}}</i>",
                "+            </h4>",
                "+          </div>",
                "+        </div>",
                "+        <div style=\"display: table; width: 100%; height: 100%\"",
                "+             ng-if=\"currentSecondRevisionForCompare === 'Choose...'\">",
                "+          <div class=\"empty-paragraph-message\">",
                "+            Please select a revision",
                "+          </div>",
                "+        </div>",
                "+      </div>",
                "+    </div>",
                "+  </div>",
                "+</div>",
                "+",
                "+<div id=\"revisions-comparator-code-panel-id center-block\" class=\"panel col-md-8\">",
                "+  <span",
                "+    class=\"revisions-comparator-code-panel-title\">Revision: <strong>{{currentFirstRevisionForCompare}} --> {{currentSecondRevisionForCompare}}</strong></span>",
                "+  <pre ng-if=\"currentParagraphDiffDisplay.type === 'added'\"",
                "+       class=\"revisions-comparator-code-panel color-green-row\">{{currentParagraphDiffDisplay.paragraph.text}}</pre>",
                "+  <pre ng-if=\"currentParagraphDiffDisplay.type === 'deleted'\"",
                "+       class=\"revisions-comparator-code-panel color-red-row\">{{currentParagraphDiffDisplay.paragraph.text}}</pre>",
                "+  <pre ng-if=\"currentParagraphDiffDisplay.type === 'compared'\"",
                "+       class=\"revisions-comparator-code-panel\" ng-bind-html=\"currentParagraphDiffDisplay.diff\"></pre>",
                "+  <pre ng-if=\"currentParagraphDiffDisplay === null\"",
                "+       class=\"revisions-comparator-code-panel empty-code-panel\"><div>Nothing to display</div></pre>",
                "+</div>",
                "+",
                "+<div class=\"clearfix\"></div>",
                "diff --git a/zeppelin-web/src/components/websocket/websocket-event.factory.js b/zeppelin-web/src/components/websocket/websocket-event.factory.js",
                "index 10cfd9c21..d4bfadf6b 100644",
                "--- a/zeppelin-web/src/components/websocket/websocket-event.factory.js",
                "+++ b/zeppelin-web/src/components/websocket/websocket-event.factory.js",
                "@@ -140,2 +140,4 @@ function WebsocketEventFactory ($rootScope, $websocket, $location, baseUrlSrv) {",
                "       $rootScope.$broadcast('noteRevision', data)",
                "+    } else if (op === 'NOTE_REVISION_FOR_COMPARE') {",
                "+      $rootScope.$broadcast('noteRevisionForCompare', data)",
                "     } else if (op === 'INTERPRETER_BINDINGS') {",
                "diff --git a/zeppelin-web/src/components/websocket/websocket-message.service.js b/zeppelin-web/src/components/websocket/websocket-message.service.js",
                "index cafc61b1f..ab97fa8cb 100644",
                "--- a/zeppelin-web/src/components/websocket/websocket-message.service.js",
                "+++ b/zeppelin-web/src/components/websocket/websocket-message.service.js",
                "@@ -297,2 +297,13 @@ function WebsocketMessageService ($rootScope, websocketEvents) {",
                "+    getNoteByRevisionForCompare: function (noteId, revisionId, position) {",
                "+      websocketEvents.sendNewEvent({",
                "+        op: 'NOTE_REVISION_FOR_COMPARE',",
                "+        data: {",
                "+          noteId: noteId,",
                "+          revisionId: revisionId,",
                "+          position: position",
                "+        }",
                "+      })",
                "+    },",
                "+",
                "     getEditorSetting: function (paragraphId, replName) {",
                "diff --git a/zeppelin-web/src/index.html b/zeppelin-web/src/index.html",
                "index 4b43179bf..9a126f1b4 100644",
                "--- a/zeppelin-web/src/index.html",
                "+++ b/zeppelin-web/src/index.html",
                "@@ -167,2 +167,3 @@ limitations under the License.",
                "     <script src=\"bower_components/ngclipboard/dist/ngclipboard.js\"></script>",
                "+    <script src=\"bower_components/jsdiff/diff.js\"></script>",
                "     <!-- endbower -->",
                "diff --git a/zeppelin-web/src/index.js b/zeppelin-web/src/index.js",
                "index 3cf052bba..ed8f1d8f9 100644",
                "--- a/zeppelin-web/src/index.js",
                "+++ b/zeppelin-web/src/index.js",
                "@@ -44,2 +44,3 @@ import './app/credential/credential.controller.js'",
                " import './app/configuration/configuration.controller.js'",
                "+import './app/notebook/revisions-comparator/revisions-comparator.component.js'",
                " import './app/notebook/paragraph/paragraph.controller.js'",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/socket/Message.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/socket/Message.java",
                "index 06c83e134..d99bd598f 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/socket/Message.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/socket/Message.java",
                "@@ -154,2 +154,6 @@ public class Message implements JsonSerializable {",
                "                                   // @param revisionId",
                "+    NOTE_REVISION_FOR_COMPARE,    // [c-s] get certain revision of note for compare",
                "+                                  // @param noteId",
                "+                                  // @param revisionId",
                "+                                  // @param position",
                "     APP_APPEND_OUTPUT,            // [s-c] append output"
            ],
            "changed_files": [
                "docs/_includes/themes/zeppelin/_navigation.html",
                "docs/assets/themes/zeppelin/img/docs-img/revisions-comparator-comboboxes.png",
                "docs/assets/themes/zeppelin/img/docs-img/revisions-comparator-table.png",
                "docs/assets/themes/zeppelin/img/docs-img/revisions_comparator_button.png",
                "docs/assets/themes/zeppelin/img/docs-img/revisions_comparator_diff.png",
                "docs/assets/themes/zeppelin/img/docs-img/revisions_comparator_paragraph.png",
                "zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "zeppelin-web/bower.json",
                "zeppelin-web/karma.conf.js",
                "zeppelin-web/src/app/notebook/notebook-actionBar.html",
                "zeppelin-web/src/app/notebook/notebook.controller.js",
                "zeppelin-web/src/app/notebook/notebook.html",
                "zeppelin-web/src/app/notebook/revisions-comparator/revisions-comparator.component.js",
                "zeppelin-web/src/app/notebook/revisions-comparator/revisions-comparator.css",
                "zeppelin-web/src/app/notebook/revisions-comparator/revisions-comparator.html",
                "zeppelin-web/src/components/websocket/websocket-event.factory.js",
                "zeppelin-web/src/components/websocket/websocket-message.service.js",
                "zeppelin-web/src/index.html",
                "zeppelin-web/src/index.js",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/socket/Message.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-2813": ""
            },
            "ghissue_refs": {
                "2506": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: allow, paragraph, user",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: paragraph",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-2813",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2506",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3eeb2282b93c656bfe1379a32c9b46c82f00adbb",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1506508821,
            "hunks": 4,
            "message": "ZEPPELIN-1897 REST API - Update paragraph text/title via API ### What is this PR for? Support updating paragraph text/title via REST API https://issues.apache.org/jira/browse/ZEPPELIN-1897 ### What type of PR is it? Improvement ### Todos ### What is the Jira issue? [ZEPPELIN-1897] ### How should this be tested? 1. Create a note and paragraph 2. Hit REST API to update the paragraph, e.g. `curl -X PUT http://localhost:8080/api/notebook/NOTE_ID/paragraph/PARAGRAPH_ID -d '{\"text\": \"some updated text\"}'` ### Screenshots (if appropriate) ![update paragraph api](https://user-images.githubusercontent.com/7852/31032284-543af3dc-a553-11e7-89ce-f388a7097d74.gif) ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? Yes, doc update included in the change. Author: chilang <chilang@gmail.com> Closes #2604 from chilang/master and squashes the following commits: 9cc86de [chilang] ZEPPELIN-1897 REST API - Update paragraph",
            "diff": [
                "diff --git a/zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java b/zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java",
                "index c170a0990..42234fe29 100644",
                "--- a/zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java",
                "+++ b/zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java",
                "@@ -43,6 +43,3 @@ import org.apache.zeppelin.rest.exception.NotFoundException;",
                " import org.apache.zeppelin.rest.exception.ForbiddenException;",
                "-import org.apache.zeppelin.rest.message.CronRequest;",
                "-import org.apache.zeppelin.rest.message.NewNoteRequest;",
                "-import org.apache.zeppelin.rest.message.NewParagraphRequest;",
                "-import org.apache.zeppelin.rest.message.RunParagraphWithParametersRequest;",
                "+import org.apache.zeppelin.rest.message.*;",
                " import org.apache.zeppelin.search.SearchService;",
                "@@ -498,2 +495,33 @@ public class NotebookRestApi {",
                "+  /**",
                "+   * Update paragraph",
                "+   *",
                "+   * @param message json containing the \"text\" and optionally the \"title\" of the paragraph, e.g.",
                "+   *                {\"text\" : \"updated text\", \"title\" : \"Updated title\" }",
                "+   *",
                "+   */",
                "+  @PUT",
                "+  @Path(\"{noteId}/paragraph/{paragraphId}\")",
                "+  @ZeppelinApi",
                "+  public Response updateParagraph(@PathParam(\"noteId\") String noteId,",
                "+                                  @PathParam(\"paragraphId\") String paragraphId,",
                "+                                  String message) throws IOException {",
                "+    String user = SecurityUtils.getPrincipal();",
                "+    LOG.info(\"{} will update paragraph {} {}\", user, noteId, paragraphId);",
                "+",
                "+    Note note = notebook.getNote(noteId);",
                "+    checkIfNoteIsNotNull(note);",
                "+    checkIfUserCanWrite(noteId, \"Insufficient privileges you cannot update this paragraph\");",
                "+    Paragraph p = note.getParagraph(paragraphId);",
                "+    checkIfParagraphIsNotNull(p);",
                "+",
                "+    UpdateParagraphRequest updatedParagraph = gson.fromJson(message, UpdateParagraphRequest.class);",
                "+    p.setText(updatedParagraph.getText());",
                "+    if (updatedParagraph.getTitle() != null) { p.setTitle(updatedParagraph.getTitle()); }",
                "+    AuthenticationInfo subject = new AuthenticationInfo(user);",
                "+    note.persist(subject);",
                "+    notebookServer.broadcastParagraph(note, p);",
                "+    return new JsonResponse<>(Status.OK, \"\").build();",
                "+  }",
                "+",
                "   @PUT",
                "@@ -516,3 +544,2 @@ public class NotebookRestApi {",
                "     note.persist(subject);",
                "-",
                "     return new JsonResponse<>(Status.OK, \"\", p).build();",
                "diff --git a/zeppelin-server/src/main/java/org/apache/zeppelin/rest/message/UpdateParagraphRequest.java b/zeppelin-server/src/main/java/org/apache/zeppelin/rest/message/UpdateParagraphRequest.java",
                "new file mode 100644",
                "index 000000000..3b4a6f68c",
                "--- /dev/null",
                "+++ b/zeppelin-server/src/main/java/org/apache/zeppelin/rest/message/UpdateParagraphRequest.java",
                "@@ -0,0 +1,40 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.rest.message;",
                "+",
                "+/**",
                "+ * UpdateParagraphRequest",
                "+ */",
                "+public class UpdateParagraphRequest {",
                "+  String title;",
                "+  String text;",
                "+",
                "+  public UpdateParagraphRequest() {",
                "+",
                "+  }",
                "+",
                "+  public String getTitle() {",
                "+    return title;",
                "+  }",
                "+",
                "+  public String getText() {",
                "+    return text;",
                "+  }",
                "+",
                "+",
                "+}"
            ],
            "changed_files": [
                "zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java",
                "zeppelin-server/src/main/java/org/apache/zeppelin/rest/message/UpdateParagraphRequest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-1897": ""
            },
            "ghissue_refs": {
                "2604": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: paragraph, user",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: paragraph",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-1897",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2604",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "68bf5f8058f5f5a625c21935c97d449a56acef84",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1516808774,
            "hunks": 1,
            "message": "[ZEPPELIN-3189] NPE on paragraph run via API ### What is this PR for? Bugfix over NPE when running REST API command to run paragraph synchronously. ### What type of PR is it? [Bug Fix] ### Todos * [ ] - Task ### What is the Jira issue? https://issues.apache.org/jira/browse/ZEPPELIN-3189 ### How should this be tested? 1. Build Zep (mvn clean package -DskipTests) 2. Start Zep 3. Run curl command in shell (curl -i -X POST http://localhost:8080/api/notebook/run/{noteId}/{paragraphId} ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? N * Is there breaking changes for older versions? N * Does this needs documentation? N Author: Nelson Costa <nelson.costa85@gmail.com> Closes #2745 from necosta/zeppelin3189 and squashes the following commits: 9d1e2a569 [Nelson Costa] [ZEPPELIN-3189] NPE on paragraph run via API (cherry picked from commit e7e9e19cf1be6ada5b5e8d56fc2a7d8809f85f79) Signed-off-by: Lee moon soo <moon@apache.org>",
            "diff": [
                "diff --git a/zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java b/zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java",
                "index 883598437..2042c4c20 100644",
                "--- a/zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java",
                "+++ b/zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java",
                "@@ -799,2 +799,5 @@ public class NotebookRestApi {",
                "+    AuthenticationInfo subject = new AuthenticationInfo(SecurityUtils.getPrincipal());",
                "+    paragraph.setAuthenticationInfo(subject);",
                "+",
                "     paragraph.run();"
            ],
            "changed_files": [
                "zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3189": ""
            },
            "ghissue_refs": {
                "2745": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "e7e9e19cf1be6ada5b5e8d56fc2a7d8809f85f79"
                ]
            ],
            "tags": [
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: paragraph",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3189",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2745",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ed8755d3f664779ac14a62b6b1e49a26d4c6c69d",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1507763635,
            "hunks": 2,
            "message": "[Minor] Remove hardcoded key in zeppelinhub. ### What is this PR for? Hardcoded seed/key may cause security issue, so remove potential risk. ### What type of PR is it? [Improvement] ### Todos No. ### What is the Jira issue? No jira created. Author: Yanbo Liang <ybliang8@gmail.com> Closes #2621 from yanboliang/key and squashes the following commits: 251528306 [Yanbo Liang] Remove hardcoded key in zeppelinhub.",
            "diff": [
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/security/Authentication.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/security/Authentication.java",
                "index fd5142bd4..38d8b5005 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/security/Authentication.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/security/Authentication.java",
                "@@ -49,3 +49,2 @@ public class Authentication implements Runnable {",
                "   private static final String CIPHER_MODE = \"AES/CBC/PKCS5PADDING\";",
                "-  private static final String KEY = \"AbtEr99DxsWWbJkP\";",
                "   private static final int ivSize = 16;",
                "@@ -200,3 +199,3 @@ public class Authentication implements Runnable {",
                "       KeyGenerator kgen = KeyGenerator.getInstance(CIPHER_ALGORITHM);",
                "-      kgen.init(128, new SecureRandom(toBytes(KEY)));",
                "+      kgen.init(128, new SecureRandom());",
                "       SecretKey secretKey = kgen.generateKey();"
            ],
            "changed_files": [
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/security/Authentication.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2621": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "SEC_KEYWORDS_IN_MESSAGE",
                    "message": "The commit message contains some security-related keywords: security",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: authentication",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2621",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6a39c8d6ee85f6732986b7cd452f3d0f57830dda",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1516691533,
            "hunks": 7,
            "message": "ZEPPELIN-3184. Use hadoop-azure to replace azure-storage ### What is this PR for? So that user can use azure storage via hadoop filesystem. ### What type of PR is it? [ Improvement ] ### Todos * [ ] - Task ### What is the Jira issue? * https://issues.apache.org/jira/browse/ZEPPELIN-3184 ### How should this be tested? Travis CI Pass ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Jeff Zhang <zjffdu@apache.org> Closes #2744 from zjffdu/ZEPPELIN-3184 and squashes the following commits: 464a01d [Jeff Zhang] ZEPPELIN-3184. Use hadoop-azure to replace azure-storage",
            "diff": [
                "diff --git a/zeppelin-zengine/pom.xml b/zeppelin-zengine/pom.xml",
                "index b68152f24..08de7ad50 100644",
                "--- a/zeppelin-zengine/pom.xml",
                "+++ b/zeppelin-zengine/pom.xml",
                "@@ -42,3 +42,3 @@",
                "     <aws.sdk.s3.version>1.10.62</aws.sdk.s3.version>",
                "-    <azure.storage.version>4.0.0</azure.storage.version>",
                "+    <adl.sdk.version>2.1.4</adl.sdk.version>",
                "     <jackrabbit.webdav.version>1.5.2</jackrabbit.webdav.version>",
                "@@ -122,22 +122,2 @@",
                "-    <dependency>",
                "-      <groupId>com.microsoft.azure</groupId>",
                "-      <artifactId>azure-storage</artifactId>",
                "-      <version>${azure.storage.version}</version>",
                "-      <exclusions>",
                "-        <exclusion>",
                "-          <groupId>com.fasterxml.jackson.core</groupId>",
                "-          <artifactId>jackson-core</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>org.slf4j</groupId>",
                "-          <artifactId>slf4j-api</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>org.apache.commons</groupId>",
                "-          <artifactId>commons-lang3</artifactId>",
                "-        </exclusion>",
                "-      </exclusions>",
                "-    </dependency>",
                "-",
                "     <dependency>",
                "@@ -486,6 +466,2 @@",
                "           <exclusions>",
                "-            <!--<exclusion>-->",
                "-            <!--<groupId>com.sun.jersey</groupId>-->",
                "-            <!--<artifactId>jersey-core</artifactId>-->",
                "-            <!--</exclusion>-->",
                "             <exclusion>",
                "@@ -498,6 +474,2 @@",
                "             </exclusion>",
                "-            <!--<exclusion>-->",
                "-            <!--<groupId>com.sun.jersey</groupId>-->",
                "-            <!--<artifactId>jersey-server</artifactId>-->",
                "-            <!--</exclusion>-->",
                "             <exclusion>",
                "@@ -560,6 +532,2 @@",
                "             </exclusion>",
                "-            <!--<exclusion>-->",
                "-            <!--<groupId>com.sun.jersey</groupId>-->",
                "-            <!--<artifactId>jersey-json</artifactId>-->",
                "-            <!--</exclusion>-->",
                "             <exclusion>",
                "@@ -659,2 +627,65 @@",
                "         </dependency>",
                "+",
                "+        <dependency>",
                "+          <groupId>org.apache.hadoop</groupId>",
                "+          <artifactId>hadoop-azure</artifactId>",
                "+          <version>${hadoop.version}</version>",
                "+          <exclusions>",
                "+            <exclusion>",
                "+              <groupId>com.fasterxml.jackson.core</groupId>",
                "+              <artifactId>jackson-core</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>com.google.guava</groupId>",
                "+              <artifactId>guava</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>org.apache.commons</groupId>",
                "+              <artifactId>commons-lang3</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>com.jcraf</groupId>",
                "+              <artifactId>jsch</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>org.apache.commons</groupId>",
                "+              <artifactId>commons-compress</artifactId>",
                "+            </exclusion>",
                "+          </exclusions>",
                "+        </dependency>",
                "+        <dependency>",
                "+          <groupId>com.microsoft.azure</groupId>",
                "+          <artifactId>azure-data-lake-store-sdk</artifactId>",
                "+          <version>${adl.sdk.version}</version>",
                "+          <exclusions>",
                "+            <exclusion>",
                "+              <groupId>com.fasterxml.jackson.core</groupId>",
                "+              <artifactId>jackson-core</artifactId>",
                "+            </exclusion>",
                "+          </exclusions>",
                "+        </dependency>",
                "+        <dependency>",
                "+          <groupId>org.apache.hadoop</groupId>",
                "+          <artifactId>hadoop-aws</artifactId>",
                "+          <version>${hadoop.version}</version>",
                "+          <exclusions>",
                "+            <exclusion>",
                "+              <groupId>com.fasterxml.jackson.core</groupId>",
                "+              <artifactId>jackson-annotations</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>com.fasterxml.jackson.core</groupId>",
                "+              <artifactId>jackson-core</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>com.fasterxml.jackson.core</groupId>",
                "+              <artifactId>jackson-databind</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>joda-time</groupId>",
                "+              <artifactId>joda-time</artifactId>",
                "+            </exclusion>",
                "+          </exclusions>",
                "+        </dependency>",
                "+        ",
                "       </dependencies>",
                "@@ -684,2 +715,96 @@",
                "         </dependency>",
                "+",
                "+        <dependency>",
                "+          <groupId>org.apache.hadoop</groupId>",
                "+          <artifactId>hadoop-azure</artifactId>",
                "+          <version>${hadoop.version}</version>",
                "+          <exclusions>",
                "+            <exclusion>",
                "+              <groupId>com.fasterxml.jackson.core</groupId>",
                "+              <artifactId>jackson-core</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>com.google.guava</groupId>",
                "+              <artifactId>guava</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>com.jcraft</groupId>",
                "+              <artifactId>jsch</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>org.apache.commons</groupId>",
                "+              <artifactId>commons-compress</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>org.codehaus.jackson</groupId>",
                "+              <artifactId>jackson-mapper-asl</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>com.nimbusds</groupId>",
                "+              <artifactId>nimbus-jose-jwt</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>org.apache.zookeeper</groupId>",
                "+              <artifactId>zookeeper</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>org.eclipse.jetty</groupId>",
                "+              <artifactId>jetty-server</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>org.eclipse.jetty</groupId>",
                "+              <artifactId>jetty-servlet</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>org.codehaus.jackson</groupId>",
                "+              <artifactId>jackson-core-asl</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>com.fasterxml.jackson.core</groupId>",
                "+              <artifactId>jackson-databind</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>org.eclipse.jetty</groupId>",
                "+              <artifactId>jetty-util</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>com.sun.jersey</groupId>",
                "+              <artifactId>jersey-core</artifactId>",
                "+            </exclusion>",
                "+          </exclusions>",
                "+        </dependency>",
                "+        <dependency>",
                "+          <groupId>org.apache.hadoop</groupId>",
                "+          <artifactId>hadoop-azure-datalake</artifactId>",
                "+          <version>${hadoop.version}</version>",
                "+          <exclusions>",
                "+            <exclusion>",
                "+              <groupId>com.fasterxml.jackson.core</groupId>",
                "+              <artifactId>jackson-core</artifactId>",
                "+            </exclusion>",
                "+          </exclusions>",
                "+        </dependency>",
                "+        <dependency>",
                "+          <groupId>org.apache.hadoop</groupId>",
                "+          <artifactId>hadoop-aws</artifactId>",
                "+          <version>${hadoop.version}</version>",
                "+          <exclusions>",
                "+            <exclusion>",
                "+              <groupId>com.fasterxml.jackson.core</groupId>",
                "+              <artifactId>jackson-annotations</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>com.fasterxml.jackson.core</groupId>",
                "+              <artifactId>jackson-core</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>com.fasterxml.jackson.core</groupId>",
                "+              <artifactId>jackson-databind</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>joda-time</groupId>",
                "+              <artifactId>joda-time</artifactId>",
                "+            </exclusion>",
                "+          </exclusions>",
                "+        </dependency>",
                "       </dependencies>"
            ],
            "changed_files": [
                "zeppelin-zengine/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3184": ""
            },
            "ghissue_refs": {
                "2744": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: user",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3184",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2744",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e0fafac75c3e64bf48960501b2776933e9119c65",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1506448450,
            "hunks": 13,
            "message": "[ZEPPELIN-2761] - Neo4j Interpreter ### What is this PR for? This contribution would to introduce Neo4j Cypher intepreter and at the same time provides base APIs that enable other graph databases (or graph framworks such as GraphX or Giraph). ### What type of PR is it? [Feature] ### Todos * [x] - Provide base APIs to manage graph results (under: org.apache.zeppelin.interpreter.graph.*) * [x] - Create the Neo4j intepreter ### What is the Jira issue? [[ZEPPELIN-2761]](https://issues.apache.org/jira/browse/ZEPPELIN-2761) ### How should this be tested? Donwload and execute [Neo4j](https://neo4j.com/download/?ref=home) v3.x, you can also pull a [Docker image](https://neo4j.com/developer/docker/). In order to execute test cases, if you are running Java 7, you need to also provide an environment variable telling the tests where to find Java 8, because Neo4j-the-database needs it to run. ```bash export NEO4J_JAVA=<path/to/java/home> ``` Use this statement to create a dummy dataset ```bash %neo4j UNWIND range(1,100) as id CREATE (p:Person {id:id, name: \"Name \" + id, age: id % 3}) WITH collect(p) as people UNWIND people as p1 UNWIND range(1,10) as friend WITH p1, people[(p1.id + friend) % size(people)] as p2 CREATE (p1)-[:KNOWS {years: abs(p2.id - p2.id)}]->(p2) ``` Then you can write some simple queries like: ```bash %neo4j MATCH (p:Person)-[r:KNOWS]-(p1:Person) RETURN p, r, p1 LIMIT 10; ``` ```bash %neo4j MATCH (p:Person)-[r:KNOWS]-(p1:Person) RETURN p.id AS ID_A, p.name AS NAME_A, r.years AS YEARS, p1.id AS ID_B, p1.name AS NAME_B LIMIT 20; ``` ### Video ![zeppelin query examples](https://user-images.githubusercontent.com/1833335/28041473-daaa1f02-65c9-11e7-9445-c45478669d66.gif) ### Questions: * Does the licenses files need update? **Yes** * Is there breaking changes for older versions? **No** * Does this needs documentation? **Yes** Author: conker84 <santand@gmail.com> Closes #2478 from conker84/master and squashes the following commits: 5fb97ce [conker84] review by felixcheung 18/09 1e3d611 [conker84] Review by felixcheung (09/08) aaf618e [conker84] Review by 1ambda 26/07 b5c2c66 [conker84] Added docs 9eb568d [conker84] Final behavior after discussion 2f88e98 [conker84] Moved business logic to the connection manager 8e4690e [conker84] Create connection manager class 35b4e29 [conker84] First commit",
            "diff": [
                "diff --git a/docs/_includes/themes/zeppelin/_navigation.html b/docs/_includes/themes/zeppelin/_navigation.html",
                "index ecdccbd7f..215c94426 100644",
                "--- a/docs/_includes/themes/zeppelin/_navigation.html",
                "+++ b/docs/_includes/themes/zeppelin/_navigation.html",
                "@@ -139,2 +139,3 @@",
                "                 <li><a href=\"{{BASE_PATH}}/interpreter/markdown.html\">Markdown</a></li>",
                "+                <li><a href=\"{{BASE_PATH}}/interpreter/neo4j.html\">Neo4j</a></li>",
                "                 <li><a href=\"{{BASE_PATH}}/interpreter/pig.html\">Pig</a></li>",
                "diff --git a/docs/assets/themes/zeppelin/img/docs-img/neo4j-config.png b/docs/assets/themes/zeppelin/img/docs-img/neo4j-config.png",
                "new file mode 100644",
                "index 000000000..2de3699e8",
                "Binary files /dev/null and b/docs/assets/themes/zeppelin/img/docs-img/neo4j-config.png differ",
                "diff --git a/docs/assets/themes/zeppelin/img/docs-img/neo4j-dynamic-forms.png b/docs/assets/themes/zeppelin/img/docs-img/neo4j-dynamic-forms.png",
                "new file mode 100644",
                "index 000000000..177e0a5e7",
                "Binary files /dev/null and b/docs/assets/themes/zeppelin/img/docs-img/neo4j-dynamic-forms.png differ",
                "diff --git a/docs/assets/themes/zeppelin/img/docs-img/neo4j-graph.png b/docs/assets/themes/zeppelin/img/docs-img/neo4j-graph.png",
                "new file mode 100644",
                "index 000000000..396b960db",
                "Binary files /dev/null and b/docs/assets/themes/zeppelin/img/docs-img/neo4j-graph.png differ",
                "diff --git a/docs/assets/themes/zeppelin/img/docs-img/neo4j-interpreter-video.gif b/docs/assets/themes/zeppelin/img/docs-img/neo4j-interpreter-video.gif",
                "new file mode 100644",
                "index 000000000..28c191516",
                "Binary files /dev/null and b/docs/assets/themes/zeppelin/img/docs-img/neo4j-interpreter-video.gif differ",
                "diff --git a/neo4j/pom.xml b/neo4j/pom.xml",
                "new file mode 100644",
                "index 000000000..298726fb8",
                "--- /dev/null",
                "+++ b/neo4j/pom.xml",
                "@@ -0,0 +1,144 @@",
                "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "+<!--",
                "+  ~ Licensed to the Apache Software Foundation (ASF) under one or more",
                "+  ~ contributor license agreements.  See the NOTICE file distributed with",
                "+  ~ this work for additional information regarding copyright ownership.",
                "+  ~ The ASF licenses this file to You under the Apache License, Version 2.0",
                "+  ~ (the \"License\"); you may not use this file except in compliance with",
                "+  ~ the License.  You may obtain a copy of the License at",
                "+  ~",
                "+  ~    http://www.apache.org/licenses/LICENSE-2.0",
                "+  ~",
                "+  ~ Unless required by applicable law or agreed to in writing, software",
                "+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+  ~ See the License for the specific language governing permissions and",
                "+  ~ limitations under the License.",
                "+  -->",
                "+  ",
                "+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">",
                "+  <modelVersion>4.0.0</modelVersion>",
                "+",
                "+  <parent>",
                "+    <artifactId>zeppelin</artifactId>",
                "+    <groupId>org.apache.zeppelin</groupId>",
                "+    <version>0.8.0-SNAPSHOT</version>",
                "+    <relativePath>..</relativePath>",
                "+  </parent>",
                "+",
                "+  <groupId>org.apache.zeppelin</groupId>",
                "+  <artifactId>zeppelin-neo4j</artifactId>",
                "+  <packaging>jar</packaging>",
                "+  <version>0.8.0-SNAPSHOT</version>",
                "+  <name>Zeppelin: Neo4j interpreter</name>",
                "+  ",
                "+  <properties>",
                "+  \t<neo4j.driver.version>1.4.3</neo4j.driver.version>",
                "+  \t<test.neo4j.kernel.version>3.2.3</test.neo4j.kernel.version>",
                "+  \t<neo4j.version>3.2.3</neo4j.version>",
                "+  \t<jackson.version>2.8.9</jackson.version>",
                "+  </properties>",
                "+",
                "+  <dependencies>",
                "+    <dependency>",
                "+      <groupId>${project.groupId}</groupId>",
                "+      <artifactId>zeppelin-interpreter</artifactId>",
                "+      <version>${project.version}</version>",
                "+      <scope>provided</scope>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>com.fasterxml.jackson.core</groupId>",
                "+      <artifactId>jackson-databind</artifactId>",
                "+      <version>${jackson.version}</version>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.neo4j.driver</groupId>",
                "+      <artifactId>neo4j-java-driver</artifactId>",
                "+      <version>${neo4j.driver.version}</version>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.slf4j</groupId>",
                "+      <artifactId>slf4j-api</artifactId>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.slf4j</groupId>",
                "+      <artifactId>slf4j-log4j12</artifactId>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>junit</groupId>",
                "+      <artifactId>junit</artifactId>",
                "+      <scope>test</scope>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.neo4j.test</groupId>",
                "+      <artifactId>neo4j-harness</artifactId>",
                "+      <version>${neo4j.version}</version>",
                "+      <scope>test</scope>",
                "+    </dependency>",
                "+  </dependencies>",
                "+",
                "+  <build>",
                "+    <plugins>",
                "+      <plugin>",
                "+        <artifactId>maven-enforcer-plugin</artifactId>",
                "+        <version>1.3.1</version>            ",
                "+        <executions> ",
                "+          <execution> ",
                "+            <id>enforce</id> ",
                "+            <phase>none</phase> ",
                "+          </execution>",
                "+        </executions>",
                "+      </plugin>",
                "+",
                "+      <plugin>",
                "+        <artifactId>maven-dependency-plugin</artifactId>",
                "+        <version>2.8</version>",
                "+        <executions>",
                "+          <execution>",
                "+            <id>copy-dependencies</id>",
                "+            <phase>package</phase>",
                "+            <goals>",
                "+              <goal>copy-dependencies</goal>",
                "+            </goals>",
                "+            <configuration>",
                "+              <outputDirectory>${project.build.directory}/../../interpreter/neo4j</outputDirectory>",
                "+              <overWriteReleases>false</overWriteReleases>",
                "+              <overWriteSnapshots>false</overWriteSnapshots>",
                "+              <overWriteIfNewer>true</overWriteIfNewer>",
                "+              <includeScope>runtime</includeScope>",
                "+            </configuration>",
                "+          </execution>",
                "+          <execution>",
                "+            <id>copy-artifact</id>",
                "+            <phase>package</phase>",
                "+            <goals>",
                "+              <goal>copy</goal>",
                "+            </goals>",
                "+            <configuration>",
                "+              <outputDirectory>${project.build.directory}/../../interpreter/neo4j</outputDirectory>",
                "+              <overWriteReleases>false</overWriteReleases>",
                "+              <overWriteSnapshots>false</overWriteSnapshots>",
                "+              <overWriteIfNewer>true</overWriteIfNewer>",
                "+              <includeScope>runtime</includeScope>",
                "+              <artifactItems>",
                "+                <artifactItem>",
                "+                  <groupId>${project.groupId}</groupId>",
                "+                  <artifactId>${project.artifactId}</artifactId>",
                "+                  <version>${project.version}</version>",
                "+                  <type>${project.packaging}</type>",
                "+                </artifactItem>",
                "+              </artifactItems>              ",
                "+            </configuration>",
                "+          </execution>",
                "+        </executions>",
                "+      </plugin>",
                "+    </plugins>",
                "+  </build>",
                "+",
                "+</project>",
                "diff --git a/neo4j/src/main/java/org/apache/zeppelin/graph/neo4j/Neo4jConnectionManager.java b/neo4j/src/main/java/org/apache/zeppelin/graph/neo4j/Neo4jConnectionManager.java",
                "new file mode 100644",
                "index 000000000..7cd504ef2",
                "--- /dev/null",
                "+++ b/neo4j/src/main/java/org/apache/zeppelin/graph/neo4j/Neo4jConnectionManager.java",
                "@@ -0,0 +1,151 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.graph.neo4j;",
                "+",
                "+import java.util.HashMap;",
                "+import java.util.HashSet;",
                "+import java.util.Map;",
                "+import java.util.Properties;",
                "+import java.util.Set;",
                "+import java.util.regex.Matcher;",
                "+import java.util.regex.Pattern;",
                "+",
                "+import org.apache.commons.lang.StringUtils;",
                "+import org.apache.zeppelin.interpreter.InterpreterContext;",
                "+import org.apache.zeppelin.resource.Resource;",
                "+import org.apache.zeppelin.resource.ResourcePool;",
                "+import org.neo4j.driver.v1.AuthToken;",
                "+import org.neo4j.driver.v1.AuthTokens;",
                "+import org.neo4j.driver.v1.Config;",
                "+import org.neo4j.driver.v1.Driver;",
                "+import org.neo4j.driver.v1.GraphDatabase;",
                "+import org.neo4j.driver.v1.Session;",
                "+import org.neo4j.driver.v1.StatementResult;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+/**",
                "+ * Neo4j connection manager for Zeppelin.",
                "+ */",
                "+public class Neo4jConnectionManager {",
                "+  static final Logger LOGGER = LoggerFactory.getLogger(Neo4jConnectionManager.class);",
                "+  ",
                "+  public static final String NEO4J_SERVER_URL = \"neo4j.url\";",
                "+  public static final String NEO4J_AUTH_TYPE = \"neo4j.auth.type\";",
                "+  public static final String NEO4J_AUTH_USER = \"neo4j.auth.user\";",
                "+  public static final String NEO4J_AUTH_PASSWORD = \"neo4j.auth.password\";",
                "+  public static final String NEO4J_MAX_CONCURRENCY = \"neo4j.max.concurrency\";",
                "+",
                "+  private static final Pattern PROPERTY_PATTERN = Pattern.compile(\"\\\\{\\\\w+\\\\}\");",
                "+  private static final String REPLACE_CURLY_BRACKETS = \"\\\\{|\\\\}\";",
                "+",
                "+  private static final Pattern $_PATTERN = Pattern.compile(\"\\\\$\\\\w+\\\\}\");",
                "+  private static final String REPLACE_$ = \"\\\\$\";",
                "+",
                "+  private Driver driver = null;",
                "+",
                "+  private final String neo4jUrl;",
                "+",
                "+  private final Config config;",
                "+",
                "+  private final AuthToken authToken;",
                "+",
                "+  /**",
                "+   * ",
                "+   * Enum type for the AuthToken ",
                "+   *",
                "+   */",
                "+  public enum Neo4jAuthType {NONE, BASIC}",
                "+",
                "+  public Neo4jConnectionManager(Properties properties) {",
                "+    this.neo4jUrl = properties.getProperty(NEO4J_SERVER_URL);",
                "+    this.config = Config.build()",
                "+          .withMaxIdleSessions(Integer.parseInt(properties.getProperty(NEO4J_MAX_CONCURRENCY)))",
                "+          .toConfig();",
                "+    String authType = properties.getProperty(NEO4J_AUTH_TYPE);",
                "+    switch (Neo4jAuthType.valueOf(authType.toUpperCase())) {",
                "+      case BASIC:",
                "+        String username = properties.getProperty(NEO4J_AUTH_USER);",
                "+        String password = properties.getProperty(NEO4J_AUTH_PASSWORD);",
                "+        this.authToken = AuthTokens.basic(username, password);",
                "+        break;",
                "+      case NONE:",
                "+        LOGGER.debug(\"Creating NONE authentication\");",
                "+        this.authToken = AuthTokens.none();",
                "+        break;",
                "+      default:",
                "+        throw new RuntimeException(\"Neo4j authentication type not supported\");",
                "+    }",
                "+  }",
                "+",
                "+  private Driver getDriver() {",
                "+    if (driver == null) {",
                "+      driver = GraphDatabase.driver(this.neo4jUrl, this.authToken, this.config);",
                "+    }",
                "+    return driver;",
                "+  }",
                "+",
                "+  public void open() {",
                "+    getDriver();",
                "+  }",
                "+",
                "+  public void close() {",
                "+    getDriver().close();",
                "+  }",
                "+",
                "+  private Session getSession() {",
                "+    return getDriver().session();",
                "+  }",
                "+",
                "+  public StatementResult execute(String cypherQuery,",
                "+      InterpreterContext interpreterContext) {",
                "+    Map<String, Object> params = new HashMap<>();",
                "+    if (interpreterContext != null) {",
                "+      ResourcePool resourcePool = interpreterContext.getResourcePool();",
                "+      Set<String> keys = extractParams(cypherQuery, PROPERTY_PATTERN, REPLACE_CURLY_BRACKETS);",
                "+      keys.addAll(extractParams(cypherQuery, $_PATTERN, REPLACE_$));",
                "+      for (String key : keys) {",
                "+        Resource resource = resourcePool.get(key);",
                "+        if (resource != null) {",
                "+          params.put(key, resource.get());",
                "+        }",
                "+      }",
                "+    }",
                "+    LOGGER.debug(\"Executing cypher query {} with params {}\", cypherQuery, params);",
                "+    StatementResult result;",
                "+    try (Session session = getSession()) {",
                "+      result = params.isEmpty()",
                "+            ? getSession().run(cypherQuery) : getSession().run(cypherQuery, params);",
                "+    }",
                "+    return result;",
                "+  }",
                "+",
                "+  public StatementResult execute(String cypherQuery) {",
                "+    return execute(cypherQuery, null);",
                "+  }",
                "+",
                "+  private Set<String> extractParams(String cypherQuery, Pattern pattern, String replaceChar) {",
                "+    Matcher matcher = pattern.matcher(cypherQuery);",
                "+    Set<String> keys = new HashSet<>();",
                "+    while (matcher.find()) {",
                "+      keys.add(matcher.group().replaceAll(replaceChar, StringUtils.EMPTY));",
                "+    }",
                "+    return keys;",
                "+  }",
                "+",
                "+}",
                "diff --git a/neo4j/src/main/java/org/apache/zeppelin/graph/neo4j/Neo4jCypherInterpreter.java b/neo4j/src/main/java/org/apache/zeppelin/graph/neo4j/Neo4jCypherInterpreter.java",
                "new file mode 100644",
                "index 000000000..a62552255",
                "--- /dev/null",
                "+++ b/neo4j/src/main/java/org/apache/zeppelin/graph/neo4j/Neo4jCypherInterpreter.java",
                "@@ -0,0 +1,274 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.graph.neo4j;",
                "+",
                "+import java.util.ArrayList;",
                "+import java.util.Collection;",
                "+import java.util.HashSet;",
                "+import java.util.LinkedHashMap;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+import java.util.Map.Entry;",
                "+import java.util.Properties;",
                "+import java.util.Set;",
                "+",
                "+import org.apache.commons.lang.StringUtils;",
                "+import org.apache.zeppelin.graph.neo4j.utils.Neo4jConversionUtils;",
                "+import org.apache.zeppelin.interpreter.Interpreter;",
                "+import org.apache.zeppelin.interpreter.InterpreterContext;",
                "+import org.apache.zeppelin.interpreter.InterpreterResult;",
                "+import org.apache.zeppelin.interpreter.InterpreterResult.Code;",
                "+import org.apache.zeppelin.interpreter.graph.GraphResult;",
                "+import org.apache.zeppelin.scheduler.Scheduler;",
                "+import org.apache.zeppelin.scheduler.SchedulerFactory;",
                "+import org.neo4j.driver.internal.types.InternalTypeSystem;",
                "+import org.neo4j.driver.internal.util.Iterables;",
                "+import org.neo4j.driver.v1.Record;",
                "+import org.neo4j.driver.v1.StatementResult;",
                "+import org.neo4j.driver.v1.Value;",
                "+import org.neo4j.driver.v1.types.Node;",
                "+import org.neo4j.driver.v1.types.Relationship;",
                "+import org.neo4j.driver.v1.types.TypeSystem;",
                "+import org.neo4j.driver.v1.util.Pair;",
                "+",
                "+import com.fasterxml.jackson.databind.ObjectMapper;",
                "+",
                "+/**",
                "+ * Neo4j interpreter for Zeppelin.",
                "+ */",
                "+public class Neo4jCypherInterpreter extends Interpreter {",
                "+  private static final String TABLE = \"%table\";",
                "+  public static final String NEW_LINE = \"\\n\";",
                "+  public static final String TAB = \"\\t\";",
                "+",
                "+  private static final String MAP_KEY_TEMPLATE = \"%s.%s\";",
                "+",
                "+  private Map<String, String> labels;",
                "+",
                "+  private Set<String> types;",
                "+  ",
                "+  private final Neo4jConnectionManager neo4jConnectionManager;",
                "+  ",
                "+  private final ObjectMapper jsonMapper = new ObjectMapper();",
                "+",
                "+  public Neo4jCypherInterpreter(Properties properties) {",
                "+    super(properties);",
                "+    this.neo4jConnectionManager = new Neo4jConnectionManager(properties);",
                "+  }",
                "+",
                "+  @Override",
                "+  public void open() {",
                "+    this.neo4jConnectionManager.open();",
                "+  }",
                "+",
                "+  @Override",
                "+  public void close() {",
                "+    this.neo4jConnectionManager.close();",
                "+  }",
                "+",
                "+  public Map<String, String> getLabels(boolean refresh) {",
                "+    if (labels == null || refresh) {",
                "+      Map<String, String> old = labels == null ?",
                "+          new LinkedHashMap<String, String>() : new LinkedHashMap<>(labels);",
                "+      labels = new LinkedHashMap<>();",
                "+      StatementResult result = this.neo4jConnectionManager.execute(\"CALL db.labels()\");",
                "+      Set<String> colors = new HashSet<>();",
                "+      while (result.hasNext()) {",
                "+        Record record = result.next();",
                "+        String label = record.get(\"label\").asString();",
                "+        String color = old.get(label);",
                "+        while (color == null || colors.contains(color)) {",
                "+          color = Neo4jConversionUtils.getRandomLabelColor();",
                "+        }",
                "+        colors.add(color);",
                "+        labels.put(label, color);",
                "+      }",
                "+    }",
                "+    return labels;",
                "+  }",
                "+",
                "+  private Set<String> getTypes(boolean refresh) {",
                "+    if (types == null || refresh) {",
                "+      types = new HashSet<>();",
                "+      StatementResult result = this.neo4jConnectionManager.execute(\"CALL db.relationshipTypes()\");",
                "+      while (result.hasNext()) {",
                "+        Record record = result.next();",
                "+        types.add(record.get(\"relationshipType\").asString());",
                "+      }",
                "+    }",
                "+    return types;",
                "+  }",
                "+",
                "+  @Override",
                "+  public InterpreterResult interpret(String cypherQuery, InterpreterContext interpreterContext) {",
                "+    logger.info(\"Opening session\");",
                "+    if (StringUtils.isBlank(cypherQuery)) {",
                "+      return new InterpreterResult(Code.SUCCESS);",
                "+    }",
                "+    try {",
                "+      StatementResult result = this.neo4jConnectionManager.execute(cypherQuery,",
                "+              interpreterContext);",
                "+      Set<Node> nodes = new HashSet<>();",
                "+      Set<Relationship> relationships = new HashSet<>();",
                "+      List<String> columns = new ArrayList<>();",
                "+      List<List<String>> lines = new ArrayList<List<String>>();",
                "+      while (result.hasNext()) {",
                "+        Record record = result.next();",
                "+        List<Pair<String, Value>> fields = record.fields();",
                "+        List<String> line = new ArrayList<>();",
                "+        for (Pair<String, Value> field : fields) {",
                "+          if (field.value().hasType(InternalTypeSystem.TYPE_SYSTEM.NODE())) {",
                "+            nodes.add(field.value().asNode());",
                "+          } else if (field.value().hasType(InternalTypeSystem.TYPE_SYSTEM.RELATIONSHIP())) {",
                "+            relationships.add(field.value().asRelationship());",
                "+          } else if (field.value().hasType(InternalTypeSystem.TYPE_SYSTEM.PATH())) {",
                "+            nodes.addAll(Iterables.asList(field.value().asPath().nodes()));",
                "+            relationships.addAll(Iterables.asList(field.value().asPath().relationships()));",
                "+          } else {",
                "+            setTabularResult(field.key(), field.value(), columns, line,",
                "+                    InternalTypeSystem.TYPE_SYSTEM);",
                "+          }",
                "+        }",
                "+        if (!line.isEmpty()) {",
                "+          lines.add(line);",
                "+        }",
                "+      }",
                "+      if (!nodes.isEmpty()) {",
                "+        return renderGraph(nodes, relationships);",
                "+      } else {",
                "+        return renderTable(columns, lines);",
                "+      }",
                "+    } catch (Exception e) {",
                "+      logger.error(\"Exception while interpreting cypher query\", e);",
                "+      return new InterpreterResult(Code.ERROR, e.getMessage());",
                "+    }",
                "+  }",
                "+",
                "+  private void setTabularResult(String key, Object obj, List<String> columns, List<String> line,",
                "+      TypeSystem typeSystem) {",
                "+    if (obj instanceof Value) {",
                "+      Value value = (Value) obj;",
                "+      if (value.hasType(typeSystem.MAP())) {",
                "+        Map<String, Object> map = value.asMap();",
                "+        for (Entry<String, Object> entry : map.entrySet()) {",
                "+          setTabularResult(String.format(MAP_KEY_TEMPLATE, key, entry.getKey()), entry.getValue(),",
                "+                columns, line, typeSystem);",
                "+        }",
                "+      } else {",
                "+        addValueToLine(key, columns, line, value);",
                "+      }",
                "+    } else if (obj instanceof Map) {",
                "+      Map<String, Object> map = (Map<String, Object>) obj;",
                "+      for (Entry<String, Object> entry : map.entrySet()) {",
                "+        setTabularResult(String.format(MAP_KEY_TEMPLATE, key, entry.getKey()), entry.getValue(),",
                "+                columns, line, typeSystem);",
                "+      }",
                "+    } else {",
                "+      addValueToLine(key, columns, line, obj);",
                "+    }",
                "+  }",
                "+",
                "+  private void addValueToLine(String key, List<String> columns, List<String> line, Object value) {",
                "+    if (!columns.contains(key)) {",
                "+      columns.add(key);",
                "+    }",
                "+    int position = columns.indexOf(key);",
                "+    if (line.size() < columns.size()) {",
                "+      for (int i = line.size(); i < columns.size(); i++) {",
                "+        line.add(null);",
                "+      }",
                "+    }",
                "+    if (value != null) {",
                "+      if (value instanceof Value) {",
                "+        Value val = (Value) value;",
                "+        if (val.hasType(InternalTypeSystem.TYPE_SYSTEM.LIST())) {",
                "+          value = val.asList();",
                "+        } else if (val.hasType(InternalTypeSystem.TYPE_SYSTEM.MAP())) {",
                "+          value = val.asMap();",
                "+        }",
                "+      }",
                "+      if (value instanceof Collection) {",
                "+        try {",
                "+          value = jsonMapper.writer().writeValueAsString(value);",
                "+        } catch (Exception ignored) {}",
                "+      }",
                "+    }",
                "+    line.set(position, value == null ? null : value.toString());",
                "+  }",
                "+",
                "+  private InterpreterResult renderTable(List<String> cols, List<List<String>> lines) {",
                "+    logger.info(\"Executing renderTable method\");",
                "+    StringBuilder msg = null;",
                "+    if (cols.isEmpty()) {",
                "+      msg = new StringBuilder();",
                "+    } else {",
                "+      msg = new StringBuilder(TABLE);",
                "+      msg.append(NEW_LINE);",
                "+      msg.append(StringUtils.join(cols, TAB));",
                "+      msg.append(NEW_LINE);",
                "+      for (List<String> line : lines) {",
                "+        if (line.size() < cols.size()) {",
                "+          for (int i = line.size(); i < cols.size(); i++) {",
                "+            line.add(null);",
                "+          }",
                "+        }",
                "+        msg.append(StringUtils.join(line, TAB));",
                "+        msg.append(NEW_LINE);",
                "+      }",
                "+    }",
                "+    return new InterpreterResult(Code.SUCCESS, msg.toString());",
                "+  }",
                "+",
                "+  private InterpreterResult renderGraph(Set<Node> nodes,",
                "+      Set<Relationship> relationships) {",
                "+    logger.info(\"Executing renderGraph method\");",
                "+    List<org.apache.zeppelin.tabledata.Node> nodesList = new ArrayList<>();",
                "+    List<org.apache.zeppelin.tabledata.Relationship> relsList = new ArrayList<>();",
                "+    for (Relationship rel : relationships) {",
                "+      relsList.add(Neo4jConversionUtils.toZeppelinRelationship(rel));",
                "+    }",
                "+    Map<String, String> labels = getLabels(true);",
                "+    for (Node node : nodes) {",
                "+      nodesList.add(Neo4jConversionUtils.toZeppelinNode(node, labels));",
                "+    }",
                "+    return new GraphResult(Code.SUCCESS,",
                "+        new GraphResult.Graph(nodesList, relsList, labels, getTypes(true), true));",
                "+  }",
                "+",
                "+  @Override",
                "+  public Scheduler getScheduler() {",
                "+    return SchedulerFactory.singleton()",
                "+        .createOrGetParallelScheduler(Neo4jCypherInterpreter.class.getName() + this.hashCode(),",
                "+            Integer.parseInt(getProperty(Neo4jConnectionManager.NEO4J_MAX_CONCURRENCY)));",
                "+  }",
                "+",
                "+  @Override",
                "+  public int getProgress(InterpreterContext context) {",
                "+    return 0;",
                "+  }",
                "+",
                "+  @Override",
                "+  public FormType getFormType() {",
                "+    return FormType.SIMPLE;",
                "+  }",
                "+",
                "+  @Override",
                "+  public void cancel(InterpreterContext context) {",
                "+  }",
                "+",
                "+}",
                "diff --git a/neo4j/src/main/java/org/apache/zeppelin/graph/neo4j/utils/Neo4jConversionUtils.java b/neo4j/src/main/java/org/apache/zeppelin/graph/neo4j/utils/Neo4jConversionUtils.java",
                "new file mode 100644",
                "index 000000000..484940198",
                "--- /dev/null",
                "+++ b/neo4j/src/main/java/org/apache/zeppelin/graph/neo4j/utils/Neo4jConversionUtils.java",
                "@@ -0,0 +1,66 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.graph.neo4j.utils;",
                "+",
                "+import java.util.LinkedHashSet;",
                "+import java.util.Map;",
                "+import java.util.Set;",
                "+",
                "+import org.neo4j.driver.v1.types.Node;",
                "+import org.neo4j.driver.v1.types.Relationship;",
                "+",
                "+/**",
                "+ * Neo4jConversionUtils",
                "+ */",
                "+public class Neo4jConversionUtils {",
                "+  private Neo4jConversionUtils() {}",
                "+  ",
                "+  private static final String[] LETTERS = \"0123456789ABCDEF\".split(\"\");",
                "+",
                "+  public static final String COLOR_GREY = \"#D3D3D3\";",
                "+  ",
                "+  public static org.apache.zeppelin.tabledata.Node toZeppelinNode(Node n,",
                "+      Map<String, String> graphLabels) {",
                "+    Set<String> labels = new LinkedHashSet<>();",
                "+    String firstLabel = null;",
                "+    for (String label : n.labels()) {",
                "+      if (firstLabel == null) {",
                "+        firstLabel = label;",
                "+      }",
                "+      labels.add(label);",
                "+    }",
                "+    return new org.apache.zeppelin.tabledata.Node(n.id(), n.asMap(),",
                "+        labels);",
                "+  }",
                "+  ",
                "+  public static org.apache.zeppelin.tabledata.Relationship",
                "+  toZeppelinRelationship(Relationship r) {",
                "+    return new org.apache.zeppelin.tabledata.Relationship(r.id(), r.asMap(),",
                "+        r.startNodeId(), r.endNodeId(), r.type());",
                "+  }",
                "+",
                "+  public static String getRandomLabelColor() {",
                "+    char[] color = new char[7];",
                "+    color[0] = '#';",
                "+    for (int i = 1; i < color.length; i++) {",
                "+      color[i] = LETTERS[(int) Math.floor(Math.random() * 16)].charAt(0);",
                "+    }",
                "+    return new String(color);",
                "+  }",
                "+  ",
                "+}",
                "diff --git a/neo4j/src/main/resources/interpreter-setting.json b/neo4j/src/main/resources/interpreter-setting.json",
                "new file mode 100644",
                "index 000000000..8db4367cc",
                "--- /dev/null",
                "+++ b/neo4j/src/main/resources/interpreter-setting.json",
                "@@ -0,0 +1,42 @@",
                "+[",
                "+  {",
                "+    \"group\": \"neo4j\",",
                "+    \"name\": \"neo4j\",",
                "+    \"className\": \"org.apache.zeppelin.graph.neo4j.Neo4jCypherInterpreter\",",
                "+    \"properties\": {",
                "+      \"neo4j.url\": {",
                "+        \"envName\": null,",
                "+        \"propertyName\": \"neo4j.url\",",
                "+        \"defaultValue\": \"bolt://localhost:7687\",",
                "+        \"description\": \"The Neo4j's BOLT url.\"",
                "+      },",
                "+      \"neo4j.auth.type\": {",
                "+        \"envName\": null,",
                "+        \"propertyName\": \"neo4j.auth.type\",",
                "+        \"defaultValue\": \"BASIC\",",
                "+        \"description\": \"The Neo4j's authentication type (NONE, BASIC).\"",
                "+      },",
                "+      \"neo4j.auth.user\": {",
                "+        \"envName\": null,",
                "+        \"propertyName\": \"neo4j.auth.user\",",
                "+        \"defaultValue\": \"\",",
                "+        \"description\": \"The Neo4j user name.\"",
                "+      },",
                "+      \"neo4j.auth.password\": {",
                "+        \"envName\": null,",
                "+        \"propertyName\": \"neo4j.auth.password\",",
                "+        \"defaultValue\": \"\",",
                "+        \"description\": \"The Neo4j user password.\"",
                "+      },",
                "+      \"neo4j.max.concurrency\": {",
                "+        \"envName\": null,",
                "+        \"propertyName\": \"neo4j.max.concurrency\",",
                "+        \"defaultValue\": \"50\",",
                "+        \"description\": \"Max concurrency call from Zeppelin to Neo4j server.\"",
                "+      }",
                "+    },",
                "+    \"editor\": {",
                "+      \"editOnDblClick\": false",
                "+    }",
                "+  }",
                "+]",
                "diff --git a/pom.xml b/pom.xml",
                "index acfcd0572..7ff9acd7a 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -78,2 +78,3 @@",
                "     <module>scio</module>",
                "+    <module>neo4j</module>",
                "     <module>zeppelin-web</module>",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/graph/GraphResult.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/graph/GraphResult.java",
                "new file mode 100644",
                "index 000000000..df1b9a3ae",
                "--- /dev/null",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/graph/GraphResult.java",
                "@@ -0,0 +1,122 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.interpreter.graph;",
                "+",
                "+import java.util.Collection;",
                "+import java.util.Map;",
                "+import java.util.Set;",
                "+",
                "+import org.apache.zeppelin.interpreter.InterpreterResult;",
                "+import org.apache.zeppelin.tabledata.Node;",
                "+import org.apache.zeppelin.tabledata.Relationship;",
                "+",
                "+import com.google.gson.Gson;",
                "+",
                "+/**",
                "+ * The intepreter result template for Networks",
                "+ *",
                "+ */",
                "+public class GraphResult extends InterpreterResult {",
                "+",
                "+  /**",
                "+   * The Graph structure parsed from the front-end",
                "+   *",
                "+   */",
                "+  public static class Graph {",
                "+    private Collection<Node> nodes;",
                "+    ",
                "+    private Collection<Relationship> edges;",
                "+    ",
                "+    /**",
                "+     * The node types in the whole graph, and the related colors",
                "+     * ",
                "+     */",
                "+    private Map<String, String> labels;",
                "+    ",
                "+    /**",
                "+     * The relationship types in the whole graph",
                "+     * ",
                "+     */",
                "+    private Set<String> types;",
                "+",
                "+    /**",
                "+     * Is a directed graph",
                "+     */",
                "+    private boolean directed;",
                "+    ",
                "+    public Graph() {}",
                "+",
                "+    public Graph(Collection<Node> nodes, Collection<Relationship> edges,",
                "+        Map<String, String> labels, Set<String> types, boolean directed) {",
                "+      super();",
                "+      this.setNodes(nodes);",
                "+      this.setEdges(edges);",
                "+      this.setLabels(labels);",
                "+      this.setTypes(types);",
                "+      this.setDirected(directed);",
                "+    }",
                "+",
                "+    public Collection<Node> getNodes() {",
                "+      return nodes;",
                "+    }",
                "+",
                "+    public void setNodes(Collection<Node> nodes) {",
                "+      this.nodes = nodes;",
                "+    }",
                "+",
                "+    public Collection<Relationship> getEdges() {",
                "+      return edges;",
                "+    }",
                "+",
                "+    public void setEdges(Collection<Relationship> edges) {",
                "+      this.edges = edges;",
                "+    }",
                "+",
                "+    public Map<String, String> getLabels() {",
                "+      return labels;",
                "+    }",
                "+",
                "+    public void setLabels(Map<String, String> labels) {",
                "+      this.labels = labels;",
                "+    }",
                "+",
                "+    public Set<String> getTypes() {",
                "+      return types;",
                "+    }",
                "+    ",
                "+    public void setTypes(Set<String> types) {",
                "+      this.types = types;",
                "+    }",
                "+",
                "+    public boolean isDirected() {",
                "+      return directed;",
                "+    }",
                "+",
                "+    public void setDirected(boolean directed) {",
                "+      this.directed = directed;",
                "+    }",
                "+",
                "+  }",
                "+  ",
                "+  private static final Gson gson = new Gson();",
                "+",
                "+  public GraphResult(Code code, Graph graphObject) {",
                "+    super(code, Type.NETWORK, gson.toJson(graphObject));",
                "+  }",
                "+",
                "+}",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/tabledata/GraphEntity.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/tabledata/GraphEntity.java",
                "new file mode 100644",
                "index 000000000..320b14472",
                "--- /dev/null",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/tabledata/GraphEntity.java",
                "@@ -0,0 +1,74 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.tabledata;",
                "+",
                "+import java.util.Map;",
                "+",
                "+/**",
                "+ * The base network entity",
                "+ *",
                "+ */",
                "+public abstract class GraphEntity {",
                "+",
                "+  private long id;",
                "+",
                "+  /**",
                "+   * The data of the entity",
                "+   * ",
                "+   */",
                "+  private Map<String, Object> data;",
                "+",
                "+  /**",
                "+   * The primary type of the entity",
                "+   */",
                "+  private String label;",
                "+  ",
                "+  public GraphEntity() {}",
                "+",
                "+  public GraphEntity(long id, Map<String, Object> data, String label) {",
                "+    super();",
                "+    this.setId(id);",
                "+    this.setData(data);",
                "+    this.setLabel(label);",
                "+  }",
                "+",
                "+  public long getId() {",
                "+    return id;",
                "+  }",
                "+",
                "+  public void setId(long id) {",
                "+    this.id = id;",
                "+  }",
                "+",
                "+  public Map<String, Object> getData() {",
                "+    return data;",
                "+  }",
                "+",
                "+  public void setData(Map<String, Object> data) {",
                "+    this.data = data;",
                "+  }",
                "+",
                "+  public String getLabel() {",
                "+    return label;",
                "+  }",
                "+",
                "+  public void setLabel(String label) {",
                "+    this.label = label;",
                "+  }",
                "+",
                "+}",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/tabledata/Node.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/tabledata/Node.java",
                "new file mode 100644",
                "index 000000000..2efabc408",
                "--- /dev/null",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/tabledata/Node.java",
                "@@ -0,0 +1,49 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.tabledata;",
                "+",
                "+import java.util.Map;",
                "+import java.util.Set;",
                "+",
                "+/**",
                "+ * The Zeppelin Node Entity",
                "+ *",
                "+ */",
                "+public class Node extends GraphEntity {",
                "+",
                "+  /**",
                "+   * The labels (types) attached to a node",
                "+   */",
                "+  private Set<String> labels;",
                "+",
                "+  public Node() {}",
                "+",
                "+  ",
                "+  public Node(long id, Map<String, Object> data, Set<String> labels) {",
                "+    super(id, data, labels.iterator().next());",
                "+  }",
                "+",
                "+  public Set<String> getLabels() {",
                "+    return labels;",
                "+  }",
                "+",
                "+  public void setLabels(Set<String> labels) {",
                "+    this.labels = labels;",
                "+  }",
                "+ ",
                "+}",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/tabledata/Relationship.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/tabledata/Relationship.java",
                "new file mode 100644",
                "index 000000000..aa8ddb785",
                "--- /dev/null",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/tabledata/Relationship.java",
                "@@ -0,0 +1,63 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.tabledata;",
                "+",
                "+import java.util.Map;",
                "+",
                "+/**",
                "+ * The Zeppelin Relationship entity",
                "+ *",
                "+ */",
                "+public class Relationship extends GraphEntity {",
                "+",
                "+  /**",
                "+   * Source node ID",
                "+   */",
                "+  private long source;",
                "+",
                "+  /**",
                "+   * End node ID",
                "+   */",
                "+  private long target;",
                "+",
                "+  public Relationship() {}",
                "+",
                "+  public Relationship(long id, Map<String, Object> data, long source,",
                "+      long target, String label) {",
                "+    super(id, data, label);",
                "+    this.setSource(source);",
                "+    this.setTarget(target);",
                "+  }",
                "+",
                "+  public long getSource() {",
                "+    return source;",
                "+  }",
                "+",
                "+  public void setSource(long startNodeId) {",
                "+    this.source = startNodeId;",
                "+  }",
                "+",
                "+  public long getTarget() {",
                "+    return target;",
                "+  }",
                "+",
                "+  public void setTarget(long endNodeId) {",
                "+    this.target = endNodeId;",
                "+  }",
                "+",
                "+}",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "index a3deaaa5a..f329d47f6 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "@@ -629,3 +629,4 @@ public class ZeppelinConfiguration extends XMLConfiguration {",
                "         + \"org.apache.zeppelin.scio.ScioInterpreter,\"",
                "-        + \"org.apache.zeppelin.groovy.GroovyInterpreter\"",
                "+        + \"org.apache.zeppelin.groovy.GroovyInterpreter,\"",
                "+        + \"org.apache.zeppelin.neo4j.Neo4jCypherInterpreter\"",
                "         ),",
                "@@ -640,3 +641,3 @@ public class ZeppelinConfiguration extends XMLConfiguration {",
                "         + \"livy,alluxio,file,psql,flink,python,ignite,lens,cassandra,geode,kylin,elasticsearch,\"",
                "-        + \"scalding,jdbc,hbase,bigquery,beam,pig,scio,groovy\"),",
                "+        + \"scalding,jdbc,hbase,bigquery,beam,pig,scio,groovy,neo4j\"),",
                "     ZEPPELIN_INTERPRETER_OUTPUT_LIMIT(\"zeppelin.interpreter.output.limit\", 1024 * 100),"
            ],
            "changed_files": [
                "docs/_includes/themes/zeppelin/_navigation.html",
                "docs/assets/themes/zeppelin/img/docs-img/neo4j-config.png",
                "docs/assets/themes/zeppelin/img/docs-img/neo4j-dynamic-forms.png",
                "docs/assets/themes/zeppelin/img/docs-img/neo4j-graph.png",
                "docs/assets/themes/zeppelin/img/docs-img/neo4j-interpreter-video.gif",
                "neo4j/pom.xml",
                "neo4j/src/main/java/org/apache/zeppelin/graph/neo4j/Neo4jConnectionManager.java",
                "neo4j/src/main/java/org/apache/zeppelin/graph/neo4j/Neo4jCypherInterpreter.java",
                "neo4j/src/main/java/org/apache/zeppelin/graph/neo4j/utils/Neo4jConversionUtils.java",
                "neo4j/src/main/resources/interpreter-setting.json",
                "pom.xml",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/graph/GraphResult.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/tabledata/GraphEntity.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/tabledata/Node.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/tabledata/Relationship.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-2761": ""
            },
            "ghissue_refs": {
                "2478": "[ZEPPELIN-1604] Add Neo4j interpreter and Network visualization #1582"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: enable, user",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-2761",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2478",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "92662a8a4f41a51c2ad4b524d0cd3925b01108a4",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1516186431,
            "hunks": 1,
            "message": "[ZEPPELIN-3172] Support for carriage return '\\r', on result window This got introduced while trying to fix html/xml rendering https://github.com/apache/zeppelin/pull/2729/commits/7851c130cf62fc7ff2281d1cf2c6f25658829fe5 [Bug Fix] * [ ] - Task * [ZEPPELIN-3172] Here is a sample code to test it ``` %python import time,sys end_val = 10 bar_length = 20 for i in xrange(0, end_val + 1):     time.sleep(0.5)     percent = float(i) / end_val     hashes = '#' * int(round(percent * bar_length))     spaces = ' ' * (bar_length - len(hashes))     sys.stdout.write(\"\\rPercent: [{0}] {1}%\".format(hashes + spaces, int(round(percent * 100))))     #print \"Percent: [{0}] {1}%\".format(hashes + spaces, int(round(percent * 100))) ``` * Does the licenses files need update? N/A * Is there breaking changes for older versions? N/A * Does this needs documentation? N/A Author: Prabhjyot Singh <prabhjyotsingh@gmail.com> Closes #2732 from prabhjyotsingh/ZEPPELIN-3172 and squashes the following commits: 0b9dfc0d1 [Prabhjyot Singh] fix contained html/xml Change-Id: I6c2aae86ecab07f0690b29fe06dfe9b9e537b035",
            "diff": [
                "diff --git a/zeppelin-web/src/app/notebook/paragraph/result/result.controller.js b/zeppelin-web/src/app/notebook/paragraph/result/result.controller.js",
                "index 7979325c4..ec4eeda02 100644",
                "--- a/zeppelin-web/src/app/notebook/paragraph/result/result.controller.js",
                "+++ b/zeppelin-web/src/app/notebook/paragraph/result/result.controller.js",
                "@@ -528,6 +528,4 @@ function ResultCtrl ($scope, $rootScope, $route, $window, $routeParams, $locatio",
                "     while (textResultQueueForAppend.length > 0) {",
                "-      const line = checkAndReplaceCarriageReturn(textResultQueueForAppend.pop())",
                "-      const escaped = AnsiUpConverter.ansi_to_html(line)",
                "-      const divDOM = angular.element('<div></div>').innerHTML = escaped",
                "-      elem.append(divDOM)",
                "+      const line = elem.html() + AnsiUpConverter.ansi_to_html(textResultQueueForAppend.pop())",
                "+      elem.html(checkAndReplaceCarriageReturn(line))",
                "       if ($scope.keepScrollDown) {"
            ],
            "changed_files": [
                "zeppelin-web/src/app/notebook/paragraph/result/result.controller.js"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3172": ""
            },
            "ghissue_refs": {
                "2732": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: paragraph",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3172",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2732",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fc7c7b46e4875e51ada65a964a975fa3cde45c28",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1508743879,
            "hunks": 3,
            "message": "[ZEPPELIN-2999] Cannot create shell interpreter without timeout property ### What is this PR for? A user can not run any shell interpreter if \"shell.command.timeout.millisecs\" is not present in interpreter setting. ### What type of PR is it? [Improvement] ### What is the Jira issue? * [https://issues.apache.org/jira/browse/ZEPPELIN-2999](https://issues.apache.org/jira/browse/ZEPPELIN-2999) ### How should this be tested? * Remove \"shell.command.timeout.millisecs\" from sh interpreter settings and then try to run any sh paragraph, it should run without any error. ### Questions: * Does the licenses files need update? N/A * Is there breaking changes for older versions? N/A * Does this needs documentation? N/A Author: Prabhjyot Singh <prabhjyotsingh@gmail.com> Closes #2628 from prabhjyotsingh/ZEPPELIN-2999 and squashes the following commits: 4406157d2 [Prabhjyot Singh] use \"getProperty(String key, String defaultValue)\" instead of \"getProperty(String key)\" e2a62f63d [Prabhjyot Singh] ZEPPELIN-2999: Cannot create shell interpreter without timeout property",
            "diff": [
                "diff --git a/shell/src/main/java/org/apache/zeppelin/shell/ShellInterpreter.java b/shell/src/main/java/org/apache/zeppelin/shell/ShellInterpreter.java",
                "index b7c0043dd..970720554 100644",
                "--- a/shell/src/main/java/org/apache/zeppelin/shell/ShellInterpreter.java",
                "+++ b/shell/src/main/java/org/apache/zeppelin/shell/ShellInterpreter.java",
                "@@ -49,3 +49,6 @@ public class ShellInterpreter extends KerberosInterpreter {",
                "   private static final Logger LOGGER = LoggerFactory.getLogger(ShellInterpreter.class);",
                "+",
                "   private static final String TIMEOUT_PROPERTY = \"shell.command.timeout.millisecs\";",
                "+  private String DEFAULT_TIMEOUT_PROPERTY = \"60000\";",
                "+",
                "   private static final String DIRECTORY_USER_HOME = \"shell.working.directory.user.home\";",
                "@@ -100,3 +103,5 @@ public class ShellInterpreter extends KerberosInterpreter {",
                "         contextInterpreter.out, contextInterpreter.out));",
                "-      executor.setWatchdog(new ExecuteWatchdog(Long.valueOf(getProperty(TIMEOUT_PROPERTY))));",
                "+",
                "+      executor.setWatchdog(new ExecuteWatchdog(",
                "+          Long.valueOf(getProperty(TIMEOUT_PROPERTY, DEFAULT_TIMEOUT_PROPERTY))));",
                "       executors.put(contextInterpreter.getParagraphId(), executor);"
            ],
            "changed_files": [
                "shell/src/main/java/org/apache/zeppelin/shell/ShellInterpreter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-2999": ""
            },
            "ghissue_refs": {
                "2628": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: default, user, paragraph",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-2999",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2628",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "25d42e4e4f5a2f2e07a840ed667893f71ea9c121",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1516678532,
            "hunks": 4,
            "message": "[ZEPPELIN-3183] Add date format support for line chart as x-axis ### What is this PR for? Add date format support for line chart as x-axis ### What type of PR is it? [Improvement] ### What is the Jira issue? * [ZEPPELIN-3183](https://issues.apache.org/jira/browse/ZEPPELIN-3183) ### Screenshots (if appropriate) Before ![before](https://user-images.githubusercontent.com/674497/35231655-5cb7b5f6-ffbf-11e7-8dfa-541985946fcb.gif) After ![after](https://user-images.githubusercontent.com/674497/35231653-5c67d23e-ffbf-11e7-8ee8-33dedf137f73.gif) ### Questions: * Does the licenses files need update? N/A * Is there breaking changes for older versions? N/A * Does this needs documentation? N/A Author: Prabhjyot Singh <prabhjyotsingh@gmail.com> Author: Prabhjyot <prabhjyotsingh@gmail.com> Closes #2739 from prabhjyotsingh/ZEPPELIN-3183 and squashes the following commits: 02678b2 [Prabhjyot] make default date format to \"YYYY-MM-DD HH:mm:ss\" a0f7777 [Prabhjyot Singh] ZEPPELIN-3183: Add date format support for line chart",
            "diff": [
                "diff --git a/zeppelin-web/src/app/visualization/builtins/visualization-linechart.js b/zeppelin-web/src/app/visualization/builtins/visualization-linechart.js",
                "index 959efc8bd..6d47a9e8d 100644",
                "--- a/zeppelin-web/src/app/visualization/builtins/visualization-linechart.js",
                "+++ b/zeppelin-web/src/app/visualization/builtins/visualization-linechart.js",
                "@@ -16,2 +16,3 @@ import Nvd3ChartVisualization from './visualization-nvd3chart'",
                " import PivotTransformation from '../../tabledata/pivot'",
                "+import moment from 'moment'",
                "@@ -79,3 +80,12 @@ export default class LinechartVisualization extends Nvd3ChartVisualization {",
                "-    chart.xAxis.tickFormat(function (d) { return self.xAxisTickFormat(d, self.xLabels) })",
                "+    chart.xAxis.tickFormat(function (d) {",
                "+      if (self.config.isDateFormat) {",
                "+        if (self.config.dateFormat) {",
                "+          return moment(new Date(self.xAxisTickFormat(d, self.xLabels))).format(self.config.dateFormat)",
                "+        } else {",
                "+          return moment(new Date(self.xAxisTickFormat(d, self.xLabels))).format('YYYY-MM-DD HH:mm:ss')",
                "+        }",
                "+      }",
                "+      return self.xAxisTickFormat(d, self.xLabels)",
                "+    })",
                "     chart.yAxis.tickFormat(function (d) {",
                "@@ -133,2 +143,7 @@ export default class LinechartVisualization extends Nvd3ChartVisualization {",
                "     }",
                "+",
                "+    self.config.setDateFormat = function (format) {",
                "+      configObj.dateFormat = format",
                "+      self.emitConfig(configObj)",
                "+    }",
                "   }",
                "@@ -165,2 +180,18 @@ export default class LinechartVisualization extends Nvd3ChartVisualization {",
                "         </label>",
                "+        ",
                "+        <br/>        ",
                "+        <label>",
                "+          <input type=\"checkbox\"",
                "+               ng-model=\"config.isDateFormat\"",
                "+               ng-click=\"save()\" />",
                "+          Date format",
                "+        </label>",
                "+        <span ng-show=\"config.isDateFormat\">",
                "+          <input type=\"text\"",
                "+           placeholder=\"YYYY-MM-DD HH:mm:ss\"",
                "+           ng-model=\"config.dateFormat\"",
                "+           ng-enter=\"config.setDateFormat(config.dateFormat)\"",
                "+           ng-blur=\"config.setDateFormat(config.dateFormat)\"",
                "+            />",
                "+        </span>",
                "       </div>"
            ],
            "changed_files": [
                "zeppelin-web/src/app/visualization/builtins/visualization-linechart.js"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3183": ""
            },
            "ghissue_refs": {
                "2739": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: default, user",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3183",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2739",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "dd1be03dee9428ade92b8fd47d148c2325179d19",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1512476623,
            "hunks": 6,
            "message": "[Zeppelin-2964] Stop execution on schedule if the note has been moved to the trash ### What is this PR for? When you put the note (or folder) in the trash, the note continues to run on schedule. This PR fixes this. Now when you put the note into the trash, the task is removed, and when you restore the note, it runs again. ### What type of PR is it? Improvement ### What is the Jira issue? [ZEPPELIN-3007](https://issues.apache.org/jira/browse/ZEPPELIN-3007) ### How should this be tested? - Create a scheduled launch for the note. - Put the note in the trash. - Look through the logs. - Note must stop running. - Restore the note from the trash. - Running on a schedule should continue again. ### Questions: * Does the licenses files need update? no * Is there breaking changes for older versions? no * Does this needs documentation? no Author: tinkoff-dwh <tinkoff.dwh@gmail.com> Closes #2697 from tinkoff-dwh/ZEPPELIN-2964 and squashes the following commits: b12ae4c [tinkoff-dwh] [ZEPPELIN-2964] add if statement 3db4a8e [tinkoff-dwh] [ZEPPELIN-2964] restore cron together note/folder 3906b9e [tinkoff-dwh] [ZEPPELIN-2964] drop cron when note placed in the trash",
            "diff": [
                "diff --git a/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java b/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "index 184735a62..56aa50a3e 100644",
                "--- a/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "+++ b/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "@@ -1110,2 +1110,9 @@ public class NotebookServer extends WebSocketServlet",
                "     Note note = notebook.getNote(noteId);",
                "+",
                "+    // drop cron",
                "+    Map<String, Object> config = note.getConfig();",
                "+    if (config.get(\"cron\") != null) {",
                "+      notebook.removeCron(note.getId());",
                "+    }",
                "+",
                "     if (note != null && !note.isTrash()){",
                "@@ -1134,2 +1141,10 @@ public class NotebookServer extends WebSocketServlet",
                "+      List<Note> noteList = folder.getNotesRecursively();",
                "+      for (Note note: noteList) {",
                "+        Map<String, Object> config = note.getConfig();",
                "+        if (config.get(\"cron\") != null) {",
                "+          notebook.removeCron(note.getId());",
                "+        }",
                "+      }",
                "+",
                "       fromMessage.put(\"name\", trashFolderId);",
                "@@ -1149,2 +1164,9 @@ public class NotebookServer extends WebSocketServlet",
                "     Note note = notebook.getNote(noteId);",
                "+",
                "+    //restore cron",
                "+    Map<String, Object> config = note.getConfig();",
                "+    if (config.get(\"cron\") != null) {",
                "+      notebook.refreshCron(note.getId());",
                "+    }",
                "+",
                "     if (note != null && note.isTrash()) {",
                "@@ -1168,2 +1190,11 @@ public class NotebookServer extends WebSocketServlet",
                "+      //restore cron for each paragraph",
                "+      List<Note> noteList = folder.getNotesRecursively();",
                "+      for (Note note : noteList) {",
                "+        Map<String, Object> config = note.getConfig();",
                "+        if (config.get(\"cron\") != null) {",
                "+          notebook.refreshCron(note.getId());",
                "+        }",
                "+      }",
                "+",
                "       // if the folder had conflict when it had moved to trash before",
                "diff --git a/zeppelin-web/src/app/notebook/notebook-actionBar.html b/zeppelin-web/src/app/notebook/notebook-actionBar.html",
                "index f1d1dd595..573be001e 100644",
                "--- a/zeppelin-web/src/app/notebook/notebook-actionBar.html",
                "+++ b/zeppelin-web/src/app/notebook/notebook-actionBar.html",
                "@@ -257,3 +257,3 @@ limitations under the License.",
                "              tooltip-placement=\"bottom\" uib-tooltip=\"Run scheduler\"",
                "-             ng-disabled=\"revisionView\">",
                "+             ng-disabled=\"revisionView || isTrash(note)\">",
                "           <span class=\"fa fa-clock-o\"></span> {{getCronOptionNameFromValue(note.config.cron)}}",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java",
                "index d68cd4b75..ff0ac62b0 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java",
                "@@ -975,3 +975,3 @@ public class Notebook implements NoteEventListener {",
                "-  private void removeCron(String id) {",
                "+  public void removeCron(String id) {",
                "     try {"
            ],
            "changed_files": [
                "zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "zeppelin-web/src/app/notebook/notebook-actionBar.html",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3007": "",
                "ZEPPELIN-2964": ""
            },
            "ghissue_refs": {
                "2697": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: cron",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3007, ZEPPELIN-2964",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2697",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "346981b67731b4710a514e7006c573af751c1f8a",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1515484311,
            "hunks": 4,
            "message": "[ZEPPELIN-3129] Zepplin UI Doesnt logs out in IE Zepplin UI Doesn't logs out in IE/Edge, its Shows Logout Success and automatically reload the page But the User is still logged in. This happens when shiro is configured with \"authc\" however it works for \"authcBasic\". [Bug Fix] * [ZEPPELIN-3129](https://issues.apache.org/jira/browse/ZEPPELIN-3129) * Logout should work for all browsers and for both shiro configuration i.e. \"authc\" and \"authcBasic\" * Does the licenses files need update? N/A * Is there breaking changes for older versions? N/A * Does this needs documentation? N/A Author: Prabhjyot Singh <prabhjyotsingh@gmail.com> Closes #2721 from prabhjyotsingh/ZEPPELIN-3129 and squashes the following commits: a9f933c [Prabhjyot Singh] ZEPPELIN-3129: Zepplin UI Doesnt logs out in IE Change-Id: I4eb399ad2d2a89b69df01ff2ffa91fae6985a8f5",
            "diff": [
                "diff --git a/zeppelin-web/src/components/navbar/navbar.controller.js b/zeppelin-web/src/components/navbar/navbar.controller.js",
                "index 6f2974edb..7d7fada1d 100644",
                "--- a/zeppelin-web/src/components/navbar/navbar.controller.js",
                "+++ b/zeppelin-web/src/components/navbar/navbar.controller.js",
                "@@ -91,5 +91,2 @@ function NavCtrl ($scope, $rootScope, $http, $routeParams, $location,",
                "-    // for firefox and safari",
                "-    logoutURL = logoutURL.replace('//', '//false:false@')",
                "-",
                "     $http.post(logoutURL).then(function () {}, function (response) {",
                "@@ -101,3 +98,41 @@ function NavCtrl ($scope, $rootScope, $http, $routeParams, $location,",
                "       }",
                "+",
                "       // force authcBasic (if configured) to logout",
                "+      if (detectIE()) {",
                "+        let outcome",
                "+        try {",
                "+          outcome = document.execCommand('ClearAuthenticationCache')",
                "+        } catch (e) {",
                "+          console.log(e)",
                "+        }",
                "+        if (!outcome) {",
                "+          // Let's create an xmlhttp object",
                "+          outcome = (function (x) {",
                "+            if (x) {",
                "+              // the reason we use \"random\" value for password is",
                "+              // that browsers cache requests. changing",
                "+              // password effectively behaves like cache-busing.",
                "+              x.open('HEAD', location.href, true, 'logout',",
                "+                (new Date()).getTime().toString())",
                "+              x.send('')",
                "+              // x.abort()",
                "+              return 1 // this is **speculative** \"We are done.\"",
                "+            } else {",
                "+              // eslint-disable-next-line no-useless-return",
                "+              return",
                "+            }",
                "+          })(window.XMLHttpRequest ? new window.XMLHttpRequest()",
                "+            // eslint-disable-next-line no-undef",
                "+            : (window.ActiveXObject ? new ActiveXObject('Microsoft.XMLHTTP') : u))",
                "+        }",
                "+        if (!outcome) {",
                "+          let m = 'Your browser is too old or too weird to support log out functionality. Close all windows and ' +",
                "+            'restart the browser.'",
                "+          alert(m)",
                "+        }",
                "+      } else {",
                "+        // for firefox and safari",
                "+        logoutURL = logoutURL.replace('//', '//false:false@')",
                "+      }",
                "+",
                "       $http.post(logoutURL).error(function () {",
                "@@ -118,2 +153,28 @@ function NavCtrl ($scope, $rootScope, $http, $routeParams, $location,",
                "+  function detectIE() {",
                "+    let ua = window.navigator.userAgent",
                "+",
                "+    let msie = ua.indexOf('MSIE ')",
                "+    if (msie > 0) {",
                "+      // IE 10 or older => return version number",
                "+      return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10)",
                "+    }",
                "+",
                "+    let trident = ua.indexOf('Trident/')",
                "+    if (trident > 0) {",
                "+      // IE 11 => return version number",
                "+      let rv = ua.indexOf('rv:')",
                "+      return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10)",
                "+    }",
                "+",
                "+    let edge = ua.indexOf('Edge/')",
                "+    if (edge > 0) {",
                "+      // Edge (IE 12+) => return version number",
                "+      return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10)",
                "+    }",
                "+",
                "+    // other browser",
                "+    return false",
                "+  }",
                "+",
                "   function search (searchTerm) {"
            ],
            "changed_files": [
                "zeppelin-web/src/components/navbar/navbar.controller.js"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3129": ""
            },
            "ghissue_refs": {
                "2721": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: user",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3129",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2721",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7bff131a5bcc96754aaccce555b8d6d3917f445a",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1515438341,
            "hunks": 3,
            "message": "[ZEPPELIN-3127] Upgrade selenium version ### What is this PR for? We are currently using a very old selenium version (i.e. 2.48.2) this is to upgrade it to 3.8.1 ### What type of PR is it? [Improvement] ### What is the Jira issue? * [ZEPPELIN-3127](https://issues.apache.org/jira/browse/ZEPPELIN-3127) ### How should this be tested? * CI should be green ### Questions: * Does the licenses files need update? yes * Is there breaking changes for older versions? * Does this needs documentation? Author: prabhjyotsingh <prabhjyotsingh@gmail.com> Author: Prabhjyot Singh <prabhjyotsingh@gmail.com> Closes #2717 from prabhjyotsingh/ZEPPELIN-3127 and squashes the following commits: e78896356 [prabhjyotsingh] rollback to FF31 6c5be28a8 [Prabhjyot Singh] remove `endToEndTestEnabled (System.getenv(\"TEST_SELENIUM\"))` as with this PR selenium is in different profile. 01632943e [prabhjyotsingh] removing LogEntries as this is no longer required for Selenium-3.x aab48b857 [prabhjyotsingh] run only selenium for this matrix (4) 873ee324a [prabhjyotsingh] remove scala and set firefoxOptions.setHeadless(true); e7d3c8dce [Prabhjyot Singh] try FF56 a7ec96f2e [prabhjyotsingh] Fix scala not running cbb365aef [prabhjyotsingh] start/stop plugin 2689dff8c [prabhjyotsingh] fix dependencies issue 88c07bab1 [prabhjyotsingh] ZEPPELIN-3127: Upgrade selenium version 1ca024f84 [prabhjyotsingh] ZEPPELIN-3127: Upgrade selenium version (reverted from commit 65c11b8178a4ebe58ae84e4e074bbddb522900f7) 260056f18 [prabhjyotsingh] review comment (reverted from commit 52a16816e73a282439060aaf2cf0e80b1b3a8093) b28774430 [prabhjyotsingh] fix build (reverted from commit 840a5d78a33a1643a7424c8e94521510a5db1184) 840a5d78a [Prabhjyot Singh] fix build 52a16816e [Prabhjyot Singh] review comment 65c11b817 [prabhjyotsingh] ZEPPELIN-3127: Upgrade selenium version",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index 7db41bfe2..3d7859580 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -71,5 +71,7 @@ matrix:",
                "     # Test selenium with spark module for 1.6.3",
                "-    - jdk: \"oraclejdk7\"",
                "-      dist: precise",
                "-      env: PYTHON=\"2\" TEST_SELENIUM=\"true\" SCALA_VER=\"2.10\" SPARK_VER=\"1.6.3\" HADOOP_VER=\"2.6\" PROFILE=\"-Pweb-ci -Pspark-1.6 -Phadoop-2.6 -Phelium-dev -Pexamples\" BUILD_FLAG=\"package -DskipTests -DskipRat\" TEST_FLAG=\"verify -DskipRat\" TEST_PROJECTS=\"-pl .,zeppelin-interpreter,zeppelin-zengine,zeppelin-server,zeppelin-display,spark-dependencies,spark,python -Dtest=org.apache.zeppelin.AbstractFunctionalSuite -DfailIfNoTests=false\"",
                "+    - jdk: \"oraclejdk8\"",
                "+      dist: trusty",
                "+      addons:",
                "+        firefox: \"31.0\"",
                "+      env: PYTHON=\"2\" SCALA_VER=\"2.10\" SPARK_VER=\"1.6.3\" HADOOP_VER=\"2.6\" PROFILE=\"-Pweb-ci -Pspark-1.6 -Phadoop-2.6 -Phelium-dev -Pexamples -Pintegration\" BUILD_FLAG=\"package -DskipTests -DskipRat\" TEST_FLAG=\"verify -DskipRat\" TEST_PROJECTS=\"-pl .,zeppelin-integration -DfailIfNoTests=false\"",
                "diff --git a/pom.xml b/pom.xml",
                "index 641880e06..b6f93de00 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -767,2 +767,9 @@",
                "+    <profile>",
                "+      <id>integration</id>",
                "+      <modules>",
                "+        <module>zeppelin-integration</module>",
                "+      </modules>",
                "+    </profile>",
                "+",
                "     <profile>",
                "diff --git a/zeppelin-integration/pom.xml b/zeppelin-integration/pom.xml",
                "new file mode 100644",
                "index 000000000..e939a6351",
                "--- /dev/null",
                "+++ b/zeppelin-integration/pom.xml",
                "@@ -0,0 +1,220 @@",
                "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "+<!--",
                "+  ~ Licensed to the Apache Software Foundation (ASF) under one or more",
                "+  ~ contributor license agreements.  See the NOTICE file distributed with",
                "+  ~ this work for additional information regarding copyright ownership.",
                "+  ~ The ASF licenses this file to You under the Apache License, Version 2.0",
                "+  ~ (the \"License\"); you may not use this file except in compliance with",
                "+  ~ the License.  You may obtain a copy of the License at",
                "+  ~",
                "+  ~    http://www.apache.org/licenses/LICENSE-2.0",
                "+  ~",
                "+  ~ Unless required by applicable law or agreed to in writing, software",
                "+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+  ~ See the License for the specific language governing permissions and",
                "+  ~ limitations under the License.",
                "+  -->",
                "+",
                "+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"",
                "+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"",
                "+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">",
                "+  <modelVersion>4.0.0</modelVersion>",
                "+",
                "+  <parent>",
                "+    <artifactId>zeppelin</artifactId>",
                "+    <groupId>org.apache.zeppelin</groupId>",
                "+    <version>0.8.0-SNAPSHOT</version>",
                "+    <relativePath>..</relativePath>",
                "+  </parent>",
                "+",
                "+  <groupId>org.apache.zeppelin</groupId>",
                "+  <artifactId>zeppelin-integration</artifactId>",
                "+  <packaging>jar</packaging>",
                "+  <version>0.8.0-SNAPSHOT</version>",
                "+  <name>Zeppelin: Integration Test</name>",
                "+",
                "+  <!-- See https://github.com/eirslett/frontend-maven-plugin/issues/229 -->",
                "+  <prerequisites>",
                "+    <maven>3.1.0</maven>",
                "+  </prerequisites>",
                "+",
                "+  <properties>",
                "+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>",
                "+",
                "+    <!--test library versions-->",
                "+    <selenium.java.version>3.8.1</selenium.java.version>",
                "+    <commons.lang3.version>3.4</commons.lang3.version>",
                "+",
                "+    <!--plugin library versions-->",
                "+    <plugin.failsafe.version>2.16</plugin.failsafe.version>",
                "+  </properties>",
                "+",
                "+  <dependencies>",
                "+    <dependency>",
                "+      <groupId>com.google.code.gson</groupId>",
                "+      <artifactId>gson</artifactId>",
                "+      <version>2.8.2</version>",
                "+    </dependency>",
                "+    <dependency>",
                "+      <groupId>com.google.guava</groupId>",
                "+      <artifactId>guava</artifactId>",
                "+      <version>23.0</version>",
                "+    </dependency>",
                "+    <dependency>",
                "+      <groupId>org.seleniumhq.selenium</groupId>",
                "+      <artifactId>selenium-java</artifactId>",
                "+      <version>${selenium.java.version}</version>",
                "+      <exclusions>",
                "+        <exclusion>",
                "+          <groupId>com.google.code.gson</groupId>",
                "+          <artifactId>gson</artifactId>",
                "+        </exclusion>",
                "+      </exclusions>",
                "+      <scope>test</scope>",
                "+    </dependency>",
                "+    <dependency>",
                "+      <groupId>${project.groupId}</groupId>",
                "+      <artifactId>zeppelin-zengine</artifactId>",
                "+      <version>${project.version}</version>",
                "+      <exclusions>",
                "+        <exclusion>",
                "+          <groupId>com.google.guava</groupId>",
                "+          <artifactId>guava</artifactId>",
                "+        </exclusion>",
                "+        <exclusion>",
                "+          <groupId>com.google.code.gson</groupId>",
                "+          <artifactId>gson</artifactId>",
                "+        </exclusion>",
                "+        <exclusion>",
                "+          <groupId>org.apache.hadoop</groupId>",
                "+          <artifactId>hadoop-common</artifactId>",
                "+        </exclusion>",
                "+      </exclusions>",
                "+      <scope>test</scope>",
                "+    </dependency>",
                "+    ",
                "+    <dependency>",
                "+      <groupId>org.apache.commons</groupId>",
                "+      <artifactId>commons-lang3</artifactId>",
                "+      <version>${commons.lang3.version}</version>",
                "+    </dependency>",
                "+    <dependency>",
                "+      <groupId>org.rauschig</groupId>",
                "+      <artifactId>jarchivelib</artifactId>",
                "+      <version>0.7.1</version>",
                "+      <exclusions>",
                "+        <exclusion>",
                "+          <groupId>org.apache.commons</groupId>",
                "+          <artifactId>commons-compress</artifactId>",
                "+        </exclusion>",
                "+      </exclusions>",
                "+    </dependency>",
                "+    <dependency>",
                "+      <groupId>org.slf4j</groupId>",
                "+      <artifactId>slf4j-log4j12</artifactId>",
                "+    </dependency>",
                "+",
                "+    <!--test libraries-->",
                "+    <dependency>",
                "+      <groupId>junit</groupId>",
                "+      <artifactId>junit</artifactId>",
                "+      <scope>test</scope>",
                "+    </dependency>",
                "+  </dependencies>",
                "+",
                "+  <build>",
                "+    <plugins>",
                "+      <plugin>",
                "+        <artifactId>maven-failsafe-plugin</artifactId>",
                "+        <version>${plugin.failsafe.version}</version>",
                "+        <executions>",
                "+          <execution>",
                "+            <goals>",
                "+              <goal>integration-test</goal>",
                "+              <goal>verify</goal>",
                "+            </goals>",
                "+          </execution>",
                "+        </executions>",
                "+        <configuration>",
                "+          <argLine>-Xmx2048m</argLine>",
                "+        </configuration>",
                "+      </plugin>",
                "+      <plugin>",
                "+        <artifactId>maven-surefire-plugin</artifactId>",
                "+        <version>${plugin.surefire.version}</version>",
                "+        <configuration combine.children=\"append\">",
                "+          <argLine>-Xmx2g -Xms1g -Dfile.encoding=UTF-8</argLine>",
                "+          <excludes>",
                "+            <exclude>${tests.to.exclude}</exclude>",
                "+          </excludes>",
                "+          <environmentVariables>",
                "+            <ZEPPELIN_FORCE_STOP>1</ZEPPELIN_FORCE_STOP>",
                "+          </environmentVariables>",
                "+        </configuration>",
                "+      </plugin>",
                "+      <plugin>",
                "+        <groupId>org.apache.maven.plugins</groupId>",
                "+        <artifactId>maven-antrun-plugin</artifactId>",
                "+        <executions>",
                "+          <execution>",
                "+            <id>start-zeppelin</id>",
                "+            <phase>pre-integration-test</phase>",
                "+            <configuration>",
                "+              <target unless=\"skipTests\">",
                "+                <exec executable=\"./zeppelin-daemon.sh\" dir=\"${zeppelin.daemon.package.base}\"",
                "+                  spawn=\"true\">",
                "+                  <arg value=\"start\"/>",
                "+                </exec>",
                "+              </target>",
                "+            </configuration>",
                "+            <goals>",
                "+              <goal>run</goal>",
                "+            </goals>",
                "+          </execution>",
                "+          <execution>",
                "+            <id>stop-zeppelin</id>",
                "+            <phase>post-integration-test</phase>",
                "+            <configuration>",
                "+              <target unless=\"skipTests\">",
                "+                <exec executable=\"./zeppelin-daemon.sh\" dir=\"${zeppelin.daemon.package.base}\"",
                "+                  spawn=\"false\">",
                "+                  <arg value=\"stop\"/>",
                "+                </exec>",
                "+              </target>",
                "+            </configuration>",
                "+            <goals>",
                "+              <goal>run</goal>",
                "+            </goals>",
                "+          </execution>",
                "+        </executions>",
                "+      </plugin>",
                "+    </plugins>",
                "+  </build>",
                "+",
                "+  <profiles>",
                "+    <profile>",
                "+      <id>using-source-tree</id>",
                "+      <activation>",
                "+        <activeByDefault>true</activeByDefault>",
                "+      </activation>",
                "+      <properties>",
                "+        <zeppelin.daemon.package.base>",
                "+          ../bin",
                "+        </zeppelin.daemon.package.base>",
                "+      </properties>",
                "+    </profile>",
                "+    <profile>",
                "+      <id>using-packaged-distr</id>",
                "+      <activation>",
                "+        <activeByDefault>false</activeByDefault>",
                "+      </activation>",
                "+      <properties>",
                "+        <zeppelin.daemon.package.base>",
                "+          ../zeppelin-distribution/target/zeppelin-${project.version}/zeppelin-${project.version}/bin",
                "+        </zeppelin.daemon.package.base>",
                "+      </properties>",
                "+    </profile>",
                "+  </profiles>",
                "+",
                "+</project>"
            ],
            "changed_files": [
                ".travis.yml",
                "pom.xml",
                "zeppelin-integration/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3127": ""
            },
            "ghissue_refs": {
                "2717": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: enable",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3127",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2717",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5d09a7f836ebaddd40e644ef82d80320570364aa",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1513773544,
            "hunks": 1,
            "message": "ZEPPELIN-3112: Markdown interpreter fails with NPE ### What is this PR for? Since pegdown-parser is not thread-safe while trying to run multiple MarkDown paragraphs at once, sometimes it fails to render HTML. Ref: https://github.com/sirthias/pegdown/blob/master/src/main/java/org/pegdown/PegDownProcessor.java#L32 ### What type of PR is it? [Improvement] ### What is the Jira issue? * [ZEPPELIN-3112](https://issues.apache.org/jira/browse/ZEPPELIN-3112) ### How should this be tested? * This happens rarely, when you try to run all paragraph from UI which has more the 5-6 `%md` paragraph. This is hard to reproduce in 0.8.0, but can easily be done via 0.7.3. Also, have added a sample [notebook](https://issues.apache.org/jira/secure/attachment/12903037/Test%20MD%20fail.json) in the parent JIRA * Have added test case to verify. ### Questions: * Does the licenses files need update? N/A * Is there breaking changes for older versions? N/A * Does this needs documentation? N/A Author: Prabhjyot Singh <prabhjyotsingh@gmail.com> Closes #2711 from prabhjyotsingh/ZEPPELIN-3112 and squashes the following commits: e796e52cd [Prabhjyot Singh] ZEPPELIN-3112: call markdownToHtml in synchronized block",
            "diff": [
                "diff --git a/markdown/src/main/java/org/apache/zeppelin/markdown/PegdownParser.java b/markdown/src/main/java/org/apache/zeppelin/markdown/PegdownParser.java",
                "index baf18f0d7..fb99f0510 100644",
                "--- a/markdown/src/main/java/org/apache/zeppelin/markdown/PegdownParser.java",
                "+++ b/markdown/src/main/java/org/apache/zeppelin/markdown/PegdownParser.java",
                "@@ -43,4 +43,6 @@ public class PegdownParser implements MarkdownParser {",
                "     String html = \"\";",
                "-    String parsed = processor.markdownToHtml(markdownText);",
                "-",
                "+    String parsed;",
                "+    synchronized (processor) {",
                "+      parsed = processor.markdownToHtml(markdownText);",
                "+    }",
                "     if (null == parsed) {"
            ],
            "changed_files": [
                "markdown/src/main/java/org/apache/zeppelin/markdown/PegdownParser.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3112": ""
            },
            "ghissue_refs": {
                "2711": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: paragraph",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3112",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2711",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0274cfb7a4dd775c878461bf35431470f48b72b9",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1510810123,
            "hunks": 1,
            "message": "[ZEPPELIN-3054] Update conf/shiro.ini.template so that non-admin users can restart interpreters on a notebook page ### What is this PR for? On the default configuration of `conf/shiro.ini.template`, non admin users cannot restart interpreters on their notebook pages because the path `/api/interpreter/setting/restart/**` is not allowed to being accessed by non admin users. <img width=\"1741\" alt=\"screen shot 2017-11-16 at 14 07 05\" src=\"https://user-images.githubusercontent.com/31149688/32875326-b0d1bf66-cada-11e7-98b7-6fd058cff3f6.png\"> It is convenient that all authenticated users can restart interpreters on their notebook pages by default, so the following line should be inserted into conf/shiro.ini.template: ``` /api/interpreter/setting/restart/** = authc ``` ### What type of PR is it? [Improvement] ### Todos ### What is the Jira issue? https://issues.apache.org/jira/browse/ZEPPELIN-3054 ### How should this be tested? * Tested manually. I confirmed that non admin users can restart interpreters on a notebook page but still cannot access to the interpreter settings page by using `conf/shiro.ini.template`. ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? No. * Is there breaking changes for older versions? No. * Does this needs documentation? No. Author: Keiji Yoshida <kjmrknsn@gmail.com> Closes #2673 from kjmrknsn/ZEPPELIN-3054 and squashes the following commits: 37e736d [Keiji Yoshida] [ZEPPELIN-3054] Update conf/shiro.ini.template so that non-admin users can restart interpreters on a notebook page",
            "diff": [
                "diff --git a/conf/shiro.ini.template b/conf/shiro.ini.template",
                "index 756ba79b7..b30635966 100644",
                "--- a/conf/shiro.ini.template",
                "+++ b/conf/shiro.ini.template",
                "@@ -98,2 +98,5 @@ admin = *",
                " /api/version = anon",
                "+# Allow all authenticated users to restart interpreters on a notebook page.",
                "+# Comment out the following line if you would like to authorize only admin users to restart interpreters.",
                "+/api/interpreter/setting/restart/** = authc",
                " /api/interpreter/** = authc, roles[admin]"
            ],
            "changed_files": [
                "conf/shiro.ini.template"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3054": ""
            },
            "ghissue_refs": {
                "2673": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: allow, default, user",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3054",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2673",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "07d1fa2285a0ab0ca86bd5c8fc9f5eea2edb5409",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1509933265,
            "hunks": 6,
            "message": "[MINOR] overwrite get/set username method for LazyOpenInterpreter and RemoteI\u00e2\u0080\u00a6 ### What is this PR for? * Remove the username property in class RemoteInterpreter, instead reuse the username property in class Interpreter\u00ef\u00bc\u008c to avoid get null value with method getUserName in the super class Interpreter * Overwrite username get/set method  in class LazyOpenInterpreter ### What type of PR is it? [Improvement] ### Todos * [ ] - Task ### What is the Jira issue? * [ZEPPELIN-2981](https://issues.apache.org/jira/browse/ZEPPELIN-2981) ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? no * Is there breaking changes for older versions? no * Does this needs documentation? no Author: lei wang <lei1989@outlook.com> Closes #2652 from wary/InterpreterUserNameOverwrite and squashes the following commits: 6168f30 [lei wang] overwrite get/set username method for LazyOpenInterpreter and RemoteInterpreter",
            "diff": [
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/LazyOpenInterpreter.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/LazyOpenInterpreter.java",
                "index 8e55c3120..ffb814017 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/LazyOpenInterpreter.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/LazyOpenInterpreter.java",
                "@@ -195,2 +195,12 @@ public class LazyOpenInterpreter",
                "   }",
                "+",
                "+  @Override",
                "+  public void setUserName(String userName) {",
                "+    this.intp.setUserName(userName);",
                "+  }",
                "+",
                "+  @Override",
                "+  public String getUserName() {",
                "+    return this.intp.getUserName();",
                "+  }",
                " }",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "index a2e3e9b40..13fe46a1c 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "@@ -62,3 +62,2 @@ public class RemoteInterpreter extends Interpreter {",
                "   private String sessionId;",
                "-  private String userName;",
                "   private FormType formType;",
                "@@ -82,3 +81,3 @@ public class RemoteInterpreter extends Interpreter {",
                "     this.className = className;",
                "-    this.userName = userName;",
                "+    this.setUserName(userName);",
                "     this.lifecycleManager = lifecycleManager;",
                "@@ -107,3 +106,3 @@ public class RemoteInterpreter extends Interpreter {",
                "       if (!interpreterProcess.isRunning()) {",
                "-        interpreterProcess.start(userName, false);",
                "+        interpreterProcess.start(this.getUserName(), false);",
                "         interpreterProcess.getRemoteInterpreterEventPoller()",
                "@@ -131,3 +130,3 @@ public class RemoteInterpreter extends Interpreter {",
                "         for (Interpreter interpreter : getInterpreterGroup()",
                "-                                        .getOrCreateSession(userName, sessionId)) {",
                "+                                        .getOrCreateSession(this.getUserName(), sessionId)) {",
                "           try {",
                "@@ -170,3 +169,3 @@ public class RemoteInterpreter extends Interpreter {",
                "             client.createInterpreter(getInterpreterGroup().getId(), sessionId,",
                "-                className, (Map) getProperties(), userName);",
                "+                className, (Map) getProperties(), getUserName());",
                "             return null;"
            ],
            "changed_files": [
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/LazyOpenInterpreter.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-2981": ""
            },
            "ghissue_refs": {
                "2652": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: user",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-2981",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2652",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8ad8c7da6181b7a91f6c89c9927a71619f4ea619",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1516438964,
            "hunks": 15,
            "message": "ZEPPELIN-3179. Improve error message when IPython is not available ### What is this PR for? Minor change to improve the error message when IPython is not available. See the following screenshot. ### What type of PR is it? [ Improvement ] ### Todos * [ ] - Task ### What is the Jira issue? * https://issues.apache.org/jira/browse/ZEPPELIN-3179 ### How should this be tested? * Manually ![screen shot 2018-01-20 at 5 00 25 pm](https://user-images.githubusercontent.com/164491/35190572-baec39a6-fe9f-11e7-9f8c-f92f8ed01d38.png) ![screen shot 2018-01-20 at 5 00 19 pm](https://user-images.githubusercontent.com/164491/35190573-bb169890-fe9f-11e7-9702-9998485e4899.png)  verified ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Jeff Zhang <zjffdu@apache.org> Closes #2736 from zjffdu/ZEPPELIN-3179 and squashes the following commits: 0157e27 [Jeff Zhang] ZEPPELIN-3179. Improve error message when IPython is not available",
            "diff": [
                "diff --git a/python/src/main/java/org/apache/zeppelin/python/IPythonInterpreter.java b/python/src/main/java/org/apache/zeppelin/python/IPythonInterpreter.java",
                "index 5ae03f023..bd687befc 100644",
                "--- a/python/src/main/java/org/apache/zeppelin/python/IPythonInterpreter.java",
                "+++ b/python/src/main/java/org/apache/zeppelin/python/IPythonInterpreter.java",
                "@@ -27,2 +27,3 @@ import org.apache.commons.exec.PumpStreamHandler;",
                " import org.apache.commons.exec.environment.EnvironmentUtils;",
                "+import org.apache.commons.httpclient.util.ExceptionUtil;",
                " import org.apache.commons.io.FileUtils;",
                "@@ -30,2 +31,3 @@ import org.apache.commons.io.IOUtils;",
                " import org.apache.commons.lang.StringUtils;",
                "+import org.apache.commons.lang.exception.ExceptionUtils;",
                " import org.apache.zeppelin.interpreter.Interpreter;",
                "@@ -123,3 +125,7 @@ public class IPythonInterpreter extends Interpreter implements ExecuteResultHand",
                "       LOGGER.info(\"Python Exec: \" + pythonExecutable);",
                "-",
                "+      String checkPrerequisiteResult = checkIPythonPrerequisite(pythonExecutable);",
                "+      if (!StringUtils.isEmpty(checkPrerequisiteResult)) {",
                "+        throw new InterpreterException(\"IPython prerequisite is not meet: \" +",
                "+            checkPrerequisiteResult);",
                "+      }",
                "       ipythonLaunchTimeout = Long.parseLong(",
                "@@ -141,4 +147,11 @@ public class IPythonInterpreter extends Interpreter implements ExecuteResultHand",
                "-  public boolean checkIPythonPrerequisite() {",
                "-    ProcessBuilder processBuilder = new ProcessBuilder(\"pip\", \"freeze\");",
                "+  /**",
                "+   * non-empty return value mean the errors when checking ipython prerequisite.",
                "+   * empty value mean IPython prerequisite is meet.",
                "+   * ",
                "+   * @param pythonExec",
                "+   * @return",
                "+   */",
                "+  public String checkIPythonPrerequisite(String pythonExec) {",
                "+    ProcessBuilder processBuilder = new ProcessBuilder(pythonExec, \"-m\", \"pip\", \"freeze\");",
                "     try {",
                "@@ -152,5 +165,4 @@ public class IPythonInterpreter extends Interpreter implements ExecuteResultHand",
                "       if (ret != 0) {",
                "-        LOGGER.warn(\"Fail to run pip freeze.\\n\" +",
                "-            IOUtils.toString(new FileInputStream(stderrFile)));",
                "-        return false;",
                "+        return \"Fail to run pip freeze.\\n\" +",
                "+            IOUtils.toString(new FileInputStream(stderrFile));",
                "       }",
                "@@ -158,23 +170,19 @@ public class IPythonInterpreter extends Interpreter implements ExecuteResultHand",
                "       if (!freezeOutput.contains(\"jupyter-client=\")) {",
                "-        InterpreterContext.get().out.write(\"jupyter-client is not installed\\n\".getBytes());",
                "-        return false;",
                "+        return \"jupyter-client is not installed.\";",
                "       }",
                "       if (!freezeOutput.contains(\"ipykernel=\")) {",
                "-        InterpreterContext.get().out.write(\"ipkernel is not installed\\n\".getBytes());",
                "-        return false;",
                "+        return \"ipkernel is not installed\";",
                "       }",
                "       if (!freezeOutput.contains(\"ipython=\")) {",
                "-        InterpreterContext.get().out.write(\"ipython is not installed\\n\".getBytes());",
                "-        return false;",
                "+        return \"ipython is not installed\";",
                "       }",
                "       if (!freezeOutput.contains(\"grpcio=\")) {",
                "-        InterpreterContext.get().out.write(\"grpcio is not installed\\n\".getBytes());",
                "-        return false;",
                "+        return \"grpcio is not installed\";",
                "       }",
                "       LOGGER.info(\"IPython prerequisite is meet\");",
                "-      return true;",
                "     } catch (Exception e) {",
                "       LOGGER.warn(\"Fail to checkIPythonPrerequisite\", e);",
                "-      return false;",
                "+      return \"Fail to checkIPythonPrerequisite: \" + ExceptionUtils.getStackTrace(e);",
                "     }",
                "+    return \"\";",
                "   }",
                "diff --git a/python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java b/python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java",
                "index 051e1fa69..b13cb8afd 100644",
                "--- a/python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java",
                "+++ b/python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java",
                "@@ -46,2 +46,3 @@ import org.apache.commons.exec.environment.EnvironmentUtils;",
                " import org.apache.commons.io.IOUtils;",
                "+import org.apache.commons.lang.StringUtils;",
                " import org.apache.zeppelin.display.GUI;",
                "@@ -230,3 +231,3 @@ public class PythonInterpreter extends Interpreter implements ExecuteResultHandl",
                "     if (getProperty(\"zeppelin.python.useIPython\", \"true\").equals(\"true\") &&",
                "-      iPythonInterpreter.checkIPythonPrerequisite()) {",
                "+        StringUtils.isEmpty(iPythonInterpreter.checkIPythonPrerequisite(getPythonBindPath()))) {",
                "       try {",
                "diff --git a/spark/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java b/spark/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java",
                "index 21a1649c2..47ffe1430 100644",
                "--- a/spark/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java",
                "+++ b/spark/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java",
                "@@ -118,3 +118,4 @@ public class PySparkInterpreter extends Interpreter implements ExecuteResultHand",
                "     if (getProperty(\"zeppelin.pyspark.useIPython\", \"true\").equals(\"true\") &&",
                "-        iPySparkInterpreter.checkIPythonPrerequisite()) {",
                "+        StringUtils.isEmpty(",
                "+            iPySparkInterpreter.checkIPythonPrerequisite(getPythonExec(getProperties())))) {",
                "       try {"
            ],
            "changed_files": [
                "python/src/main/java/org/apache/zeppelin/python/IPythonInterpreter.java",
                "python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java",
                "spark/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3179": ""
            },
            "ghissue_refs": {
                "2736": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: user",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3179",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2736",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4f95555edca35f2576cdfe32c7467c5aad6583f8",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1511427948,
            "hunks": 24,
            "message": "ZEPPELIN-3072: Zeppelin UI becomes slow/unresponsive if there are too many notebooks Zeppelin UI becomes slow/unresponsive if there are too many notebooks Have attached a notebook directory in [JIRA](https://issues.apache.org/jira/secure/attachment/12898650/notebook.zip) with 500+ notebooks, now with these notebooks, every time user goes to homepage Zeppelin UI becomes unresponsive for few seconds. [Bug Fix | Improvement] * [x] - Fix search box * [x] - Order of notebook * [ZEPPELIN-3072](https://issues.apache.org/jira/browse/ZEPPELIN-3072)  Create 500+ notebook, or import it from [JIRA](https://issues.apache.org/jira/secure/attachment/12898650/notebook.zip), now observe UI it becomes slow/laggy while homepage is rendering. Before: ![before](https://user-images.githubusercontent.com/674497/33070354-c36acdfa-cedd-11e7-81f9-ff0b526622f3.gif) After: ![after](https://user-images.githubusercontent.com/674497/33070353-c3317988-cedd-11e7-9431-fcf596928c3b.gif) * Does the licenses files need update? N/A * Is there breaking changes for older versions? N/A * Does this needs documentation? N/A Author: prabhjyotsingh <prabhjyotsingh@gmail.com> Closes #2683 from prabhjyotsingh/ZEPPELIN-3072 and squashes the following commits: 06b8ef801 [prabhjyotsingh] add license file 483a3ff77 [prabhjyotsingh] navbar dropdown bug eb506ba9e [prabhjyotsingh] fix test 00ec295dc [prabhjyotsingh] fix sort and serch b4cbba891 [prabhjyotsingh] ZEPPELIN-3072: Zeppelin UI becomes slow/unresponsive if there are too many notebooks Change-Id: Ibc157312b726b9704cab088192a39e942d8da43d",
            "diff": [
                "diff --git a/zeppelin-web/bower.json b/zeppelin-web/bower.json",
                "index 2b5135f9b..3de9f5653 100644",
                "--- a/zeppelin-web/bower.json",
                "+++ b/zeppelin-web/bower.json",
                "@@ -35,3 +35,4 @@",
                "     \"ngclipboard\": \"^1.1.1\",",
                "-    \"jsdiff\": \"3.3.0\"",
                "+    \"jsdiff\": \"3.3.0\",",
                "+    \"ngInfiniteScroll\": \"^1.3.4\"",
                "   },",
                "diff --git a/zeppelin-web/karma.conf.js b/zeppelin-web/karma.conf.js",
                "index 8a03bec1c..3e573a98f 100644",
                "--- a/zeppelin-web/karma.conf.js",
                "+++ b/zeppelin-web/karma.conf.js",
                "@@ -89,2 +89,3 @@ module.exports = function(config) {",
                "       'bower_components/jsdiff/diff.js',",
                "+      'bower_components/ngInfiniteScroll/build/ng-infinite-scroll.js',",
                "       'bower_components/angular-mocks/angular-mocks.js',",
                "diff --git a/zeppelin-web/src/app/app.js b/zeppelin-web/src/app/app.js",
                "index d46d02685..5a4c01615 100644",
                "--- a/zeppelin-web/src/app/app.js",
                "+++ b/zeppelin-web/src/app/app.js",
                "@@ -46,2 +46,3 @@ const requiredModules = [",
                "   'angularViewportWatch',",
                "+  'infinite-scroll',",
                "   'ui.grid',",
                "diff --git a/zeppelin-web/src/app/home/home.controller.js b/zeppelin-web/src/app/home/home.controller.js",
                "index 2cf843955..d2823dd6f 100644",
                "--- a/zeppelin-web/src/app/home/home.controller.js",
                "+++ b/zeppelin-web/src/app/home/home.controller.js",
                "@@ -26,2 +26,3 @@ function HomeCtrl ($scope, noteListFactory, websocketMsgSrv, $rootScope, arrayOr",
                "   vm.noteActionService = noteActionService",
                "+  vm.numberOfNotesDisplayed = window.innerHeight / 20",
                "@@ -87,2 +88,6 @@ function HomeCtrl ($scope, noteListFactory, websocketMsgSrv, $rootScope, arrayOr",
                "+  $scope.loadMoreNotes = function () {",
                "+    vm.numberOfNotesDisplayed += 10",
                "+  }",
                "+",
                "   $scope.renameNote = function (nodeId, nodePath) {",
                "diff --git a/zeppelin-web/src/app/home/home.html b/zeppelin-web/src/app/home/home.html",
                "index 1ab971898..028575411 100644",
                "--- a/zeppelin-web/src/app/home/home.html",
                "+++ b/zeppelin-web/src/app/home/home.html",
                "@@ -42,3 +42,3 @@ limitations under the License.",
                "               <li class=\"filter-names\" ng-include=\"'components/note-name-filter/note-name-filter.html'\"></li>",
                "-              <li ng-repeat=\"note in home.notes.list | filter:query.q | orderBy:node:false:home.arrayOrderingSrv.noteComparator track by $index\">",
                "+              <li ng-repeat=\"note in home.notes.list | filter:query.q track by $index\">",
                "                 <i style=\"font-size: 10px;\" class=\"icon-doc\"></i>",
                "@@ -46,8 +46,8 @@ limitations under the License.",
                "               </li>",
                "-              <div ng-if=\"!query.q || query.q === ''\">",
                "-                <li ng-repeat=\"node in home.notes.root.children | orderBy:node:false:home.arrayOrderingSrv.noteComparator track by $index\"",
                "+              <div ng-if=\"!query.q || query.q === ''\" infinite-scroll=\"loadMoreNotes()\">",
                "+                <li ng-repeat=\"node in home.notes.root.children | limitTo:home.numberOfNotesDisplayed track by $index\"",
                "                     ng-include src=\"'app/home/notebook-template.html'\" ng-class=\"note_folder_renderer\"></li>",
                "               </div>",
                "-              <div ng-if=\"query.q\">",
                "-                <li ng-repeat=\"node in home.notes.flatList| filter:query.q | orderBy:home.arrayOrderingSrv.noteFlatListOrdering track by $index\"",
                "+              <div ng-if=\"query.q\" infinite-scroll=\"loadMoreNotes()\">",
                "+                <li ng-repeat=\"node in home.notes.flatList | filter:query.q | orderBy:home.arrayOrderingSrv.noteFlatListOrdering | limitTo:home.numberOfNotesDisplayed track by $index\"",
                "                     ng-include src=\"'app/home/notebook-template.html'\" ng-class=\"note_folder_renderer\"></li>",
                "diff --git a/zeppelin-web/src/app/home/notebook.html b/zeppelin-web/src/app/home/notebook.html",
                "index a6f2416a6..ff1eb75f2 100644",
                "--- a/zeppelin-web/src/app/home/notebook.html",
                "+++ b/zeppelin-web/src/app/home/notebook.html",
                "@@ -29,8 +29,8 @@ limitations under the License.",
                "          <li class=\"filter-names\" ng-include=\"'components/note-name-filter/note-name-filter.html'\"></li>",
                "-         <div ng-if=\"!query.q || query.q === ''\">",
                "-           <li ng-repeat=\"node in home.notes.root.children | orderBy:node:false:home.arrayOrderingSrv.noteComparator track by $index\"",
                "+         <div ng-if=\"!query.q || query.q === ''\" infinite-scroll=\"loadMoreNotes()\">",
                "+           <li ng-repeat=\"node in home.notes.root.children | limitTo:home.numberOfNotesDisplayed track by $index\"",
                "                ng-include src=\"'app/home/notebook-template.html'\" ng-class=\"note_folder_renderer\"></li>",
                "          </div>",
                "-         <div ng-if=\"query.q\">",
                "-           <li ng-repeat=\"node in home.notes.flatList | filter:query.q | orderBy:home.arrayOrderingSrv.noteFlatListOrdering track by $index\"",
                "+         <div ng-if=\"query.q\" infinite-scroll=\"loadMoreNotes()\">",
                "+           <li ng-repeat=\"node in home.notes.flatList | filter:query.q | orderBy:home.arrayOrderingSrv.noteFlatListOrdering | limitTo:home.numberOfNotesDisplayed track by $index\"",
                "                ng-include src=\"'app/home/notebook-template.html'\" ng-class=\"note_folder_renderer\"></li>",
                "diff --git a/zeppelin-web/src/components/array-ordering/array-ordering.service.js b/zeppelin-web/src/components/array-ordering/array-ordering.service.js",
                "index 850a5da1c..6fa1ad9c2 100644",
                "--- a/zeppelin-web/src/components/array-ordering/array-ordering.service.js",
                "+++ b/zeppelin-web/src/components/array-ordering/array-ordering.service.js",
                "@@ -37,4 +37,4 @@ function ArrayOrderingService(TRASH_FOLDER_ID) {",
                "   this.noteComparator = function (v1, v2) {",
                "-    let note1 = v1.value",
                "-    let note2 = v2.value",
                "+    let note1 = v1.value || v1",
                "+    let note2 = v2.value || v2",
                "diff --git a/zeppelin-web/src/components/navbar/expand-collapse/expand-collapse.directive.js b/zeppelin-web/src/components/navbar/expand-collapse/expand-collapse.directive.js",
                "index 95e068180..e4280e865 100644",
                "--- a/zeppelin-web/src/components/navbar/expand-collapse/expand-collapse.directive.js",
                "+++ b/zeppelin-web/src/components/navbar/expand-collapse/expand-collapse.directive.js",
                "@@ -23,7 +23,7 @@ function expandCollapseDirective() {",
                "       angular.element(element).click(function (event) {",
                "-        if (angular.element(element).find('.expandable:visible').length > 1) {",
                "-          angular.element(element).find('.expandable:visible').slideUp('slow')",
                "+        if (angular.element(element).next('.expandable:visible').length > 1) {",
                "+          angular.element(element).next('.expandable:visible').slideUp('slow')",
                "           angular.element(element).find('i.fa-folder-open').toggleClass('fa-folder fa-folder-open')",
                "         } else {",
                "-          angular.element(element).find('.expandable').first().slideToggle('200', function () {",
                "+          angular.element(element).next('.expandable').first().slideToggle('200', function () {",
                "             // do not toggle trash folder",
                "diff --git a/zeppelin-web/src/components/navbar/navbar-note-list-elem.html b/zeppelin-web/src/components/navbar/navbar-note-list-elem.html",
                "index ad1f771f2..911f1f1f3 100644",
                "--- a/zeppelin-web/src/components/navbar/navbar-note-list-elem.html",
                "+++ b/zeppelin-web/src/components/navbar/navbar-note-list-elem.html",
                "@@ -40,11 +40,11 @@ limitations under the License.",
                "       </div>",
                "-      <div class=\"expandable\" style=\"color: black;\">",
                "-        <ul>",
                "-          <li ng-repeat=\"node in node.children | orderBy:node:false:navbar.arrayOrderingSrv.noteComparator track by $index\"",
                "-              ng-class=\"{'active' : navbar.isActive(node.id)}\"",
                "-              ng-include=\"'components/navbar/navbar-note-list-elem.html'\">",
                "-          </li>",
                "-        </ul>",
                "-      </div>",
                "   </expand-collapse>",
                "+  <div class=\"expandable\" style=\"color: black;\">",
                "+    <ul>",
                "+      <li ng-repeat=\"node in node.children | orderBy:node:false:navbar.arrayOrderingSrv.noteComparator track by $index\"",
                "+          ng-class=\"{'active' : navbar.isActive(node.id)}\"",
                "+          ng-include=\"'components/navbar/navbar-note-list-elem.html'\">",
                "+      </li>",
                "+    </ul>",
                "+  </div>",
                " </li>",
                "diff --git a/zeppelin-web/src/components/navbar/navbar.controller.js b/zeppelin-web/src/components/navbar/navbar.controller.js",
                "index 0ac2f18bb..e92813b6d 100644",
                "--- a/zeppelin-web/src/components/navbar/navbar.controller.js",
                "+++ b/zeppelin-web/src/components/navbar/navbar.controller.js",
                "@@ -32,2 +32,3 @@ function NavCtrl ($scope, $rootScope, $http, $routeParams, $location,",
                "   vm.isFilterNote = isFilterNote",
                "+  vm.numberOfNotesDisplayed = 10",
                "@@ -155,2 +156,6 @@ function NavCtrl ($scope, $rootScope, $http, $routeParams, $location,",
                "+  $scope.loadMoreNotes = function () {",
                "+    vm.numberOfNotesDisplayed += 10",
                "+  }",
                "+",
                "   $scope.calculateTooltipPlacement = function (note) {",
                "diff --git a/zeppelin-web/src/components/navbar/navbar.html b/zeppelin-web/src/components/navbar/navbar.html",
                "index 597ed511e..59d65c993 100644",
                "--- a/zeppelin-web/src/components/navbar/navbar.html",
                "+++ b/zeppelin-web/src/components/navbar/navbar.html",
                "@@ -48,4 +48,4 @@ limitations under the License.",
                "               <li class=\"filter-names\" ng-include=\"'components/note-name-filter/note-name-filter.html'\"></li>",
                "-              <div ng-if=\"!query.q || query.q === ''\">",
                "-              <li ng-repeat=\"node in navbar.notes.root.children | orderBy:node:false:navbar.arrayOrderingSrv.noteComparator track by node.id\"",
                "+              <div ng-if=\"!query.q || query.q === ''\" infinite-scroll=\"loadMoreNotes()\">",
                "+              <li ng-repeat=\"node in navbar.notes.root.children | limitTo:navbar.numberOfNotesDisplayed track by node.id\"",
                "                   ng-class=\"{'active' : navbar.isActive(node.id)}\" ng-include=\"'components/navbar/navbar-note-list-elem.html'\">",
                "@@ -53,4 +53,4 @@ limitations under the License.",
                "             </div>",
                "-            <div ng-if=\"query.q\">",
                "-              <li ng-repeat=\"node in navbar.notes.flatList | filter : query.q | orderBy:navbar.arrayOrderingSrv.noteFlatListOrdering track by node.id\"",
                "+            <div ng-if=\"query.q\" infinite-scroll=\"myPagingFunction()\">",
                "+              <li ng-repeat=\"node in navbar.notes.flatList | filter : query.q | orderBy:navbar.arrayOrderingSrv.noteFlatListOrdering | limitTo:navbar.numberOfNotesDisplayed track by node.id\"",
                "                   ng-class=\"{'active' : navbar.isActive(node.id)}\" ng-include=\"'components/navbar/navbar-note-list-elem.html'\">",
                "diff --git a/zeppelin-web/src/components/note-list/note-list.factory.js b/zeppelin-web/src/components/note-list/note-list.factory.js",
                "index 21abbc046..5e2c51382 100644",
                "--- a/zeppelin-web/src/components/note-list/note-list.factory.js",
                "+++ b/zeppelin-web/src/components/note-list/note-list.factory.js",
                "@@ -16,3 +16,3 @@ angular.module('zeppelinWebApp').factory('noteListFactory', NoteListFactory)",
                "-function NoteListFactory(TRASH_FOLDER_ID) {",
                "+function NoteListFactory(arrayOrderingSrv, TRASH_FOLDER_ID) {",
                "   'ngInject'",
                "@@ -44,2 +44,3 @@ function NoteListFactory(TRASH_FOLDER_ID) {",
                "       }, notes.root)",
                "+      notes.root.children.sort(arrayOrderingSrv.noteComparator)",
                "     }",
                "diff --git a/zeppelin-web/src/components/note-list/note-list.factory.test.js b/zeppelin-web/src/components/note-list/note-list.factory.test.js",
                "index 58d5d420b..c16504c87 100644",
                "--- a/zeppelin-web/src/components/note-list/note-list.factory.test.js",
                "+++ b/zeppelin-web/src/components/note-list/note-list.factory.test.js",
                "@@ -40,35 +40,35 @@ describe('Factory: NoteList', function () {",
                "     expect(folderList.length).toBe(5)",
                "-    expect(folderList[0].name).toBe('A')",
                "-    expect(folderList[0].id).toBe('000001')",
                "-    expect(folderList[1].name).toBe('B')",
                "+    expect(folderList[3].name).toBe('A')",
                "+    expect(folderList[3].id).toBe('000001')",
                "+    expect(folderList[4].name).toBe('B')",
                "     expect(folderList[2].name).toBe('000003')",
                "-    expect(folderList[3].name).toBe('C')",
                "-    expect(folderList[3].id).toBe('C')",
                "-    expect(folderList[3].children.length).toBe(3)",
                "-    expect(folderList[3].children[0].name).toBe('CA')",
                "-    expect(folderList[3].children[0].id).toBe('000004')",
                "-    expect(folderList[3].children[0].children).toBeUndefined()",
                "-    expect(folderList[3].children[1].name).toBe('CB')",
                "-    expect(folderList[3].children[1].id).toBe('000005')",
                "-    expect(folderList[3].children[1].children).toBeUndefined()",
                "-    expect(folderList[3].children[2].name).toBe('CB')",
                "-    expect(folderList[3].children[2].id).toBe('C/CB')",
                "-    expect(folderList[3].children[2].children.length).toBe(3)",
                "-    expect(folderList[3].children[2].children[0].name).toBe('CBA')",
                "-    expect(folderList[3].children[2].children[0].id).toBe('000006')",
                "-    expect(folderList[3].children[2].children[0].children).toBeUndefined()",
                "-    expect(folderList[3].children[2].children[1].name).toBe('CBA')",
                "-    expect(folderList[3].children[2].children[1].id).toBe('000007')",
                "-    expect(folderList[3].children[2].children[1].children).toBeUndefined()",
                "-    expect(folderList[3].children[2].children[2].name).toBe('CBB')",
                "-    expect(folderList[3].children[2].children[2].id).toBe('000008')",
                "-    expect(folderList[3].children[2].children[2].children).toBeUndefined()",
                "-    expect(folderList[4].name).toBe('D')",
                "-    expect(folderList[4].id).toBe('D')",
                "-    expect(folderList[4].children.length).toBe(1)",
                "-    expect(folderList[4].children[0].name).toBe('D[A')",
                "-    expect(folderList[4].children[0].id).toBe('D/D[A')",
                "-    expect(folderList[4].children[0].children[0].name).toBe('DA]B')",
                "-    expect(folderList[4].children[0].children[0].id).toBe('000009')",
                "-    expect(folderList[4].children[0].children[0].children).toBeUndefined()",
                "+    expect(folderList[0].name).toBe('C')",
                "+    expect(folderList[0].id).toBe('C')",
                "+    expect(folderList[0].children.length).toBe(3)",
                "+    expect(folderList[0].children[0].name).toBe('CA')",
                "+    expect(folderList[0].children[0].id).toBe('000004')",
                "+    expect(folderList[0].children[0].children).toBeUndefined()",
                "+    expect(folderList[0].children[1].name).toBe('CB')",
                "+    expect(folderList[0].children[1].id).toBe('000005')",
                "+    expect(folderList[0].children[1].children).toBeUndefined()",
                "+    expect(folderList[0].children[2].name).toBe('CB')",
                "+    expect(folderList[0].children[2].id).toBe('C/CB')",
                "+    expect(folderList[0].children[2].children.length).toBe(3)",
                "+    expect(folderList[0].children[2].children[0].name).toBe('CBA')",
                "+    expect(folderList[0].children[2].children[0].id).toBe('000006')",
                "+    expect(folderList[0].children[2].children[0].children).toBeUndefined()",
                "+    expect(folderList[0].children[2].children[1].name).toBe('CBA')",
                "+    expect(folderList[0].children[2].children[1].id).toBe('000007')",
                "+    expect(folderList[0].children[2].children[1].children).toBeUndefined()",
                "+    expect(folderList[0].children[2].children[2].name).toBe('CBB')",
                "+    expect(folderList[0].children[2].children[2].id).toBe('000008')",
                "+    expect(folderList[0].children[2].children[2].children).toBeUndefined()",
                "+    expect(folderList[1].name).toBe('D')",
                "+    expect(folderList[1].id).toBe('D')",
                "+    expect(folderList[1].children.length).toBe(1)",
                "+    expect(folderList[1].children[0].name).toBe('D[A')",
                "+    expect(folderList[1].children[0].id).toBe('D/D[A')",
                "+    expect(folderList[1].children[0].children[0].name).toBe('DA]B')",
                "+    expect(folderList[1].children[0].children[0].id).toBe('000009')",
                "+    expect(folderList[1].children[0].children[0].children).toBeUndefined()",
                "   })",
                "diff --git a/zeppelin-web/src/index.html b/zeppelin-web/src/index.html",
                "index 9a126f1b4..15a5085f6 100644",
                "--- a/zeppelin-web/src/index.html",
                "+++ b/zeppelin-web/src/index.html",
                "@@ -168,2 +168,3 @@ limitations under the License.",
                "     <script src=\"bower_components/jsdiff/diff.js\"></script>",
                "+    <script src=\"bower_components/ngInfiniteScroll/build/ng-infinite-scroll.js\"></script>",
                "     <!-- endbower -->"
            ],
            "changed_files": [
                "zeppelin-web/bower.json",
                "zeppelin-web/karma.conf.js",
                "zeppelin-web/src/app/app.js",
                "zeppelin-web/src/app/home/home.controller.js",
                "zeppelin-web/src/app/home/home.html",
                "zeppelin-web/src/app/home/notebook.html",
                "zeppelin-web/src/components/array-ordering/array-ordering.service.js",
                "zeppelin-web/src/components/navbar/expand-collapse/expand-collapse.directive.js",
                "zeppelin-web/src/components/navbar/navbar-note-list-elem.html",
                "zeppelin-web/src/components/navbar/navbar.controller.js",
                "zeppelin-web/src/components/navbar/navbar.html",
                "zeppelin-web/src/components/note-list/note-list.factory.js",
                "zeppelin-web/src/components/note-list/note-list.factory.test.js",
                "zeppelin-web/src/index.html"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3072": ""
            },
            "ghissue_refs": {
                "2683": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: user",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3072",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2683",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "aa01d9e9af4b358fa00f82a0c5f2190ad7c3a02f",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1509516138,
            "hunks": 1,
            "message": "[ZEPPELIN-3022] The \"Default Interpreter\" select box on the \"Create new note\" modal dialog has no contents when it is opened via the \"Create new note\" link on ${ZEPPELIN_HOME}/webapps/webapp/app/home/notebook.html ### What is this PR for? The \"Default Interpreter\" select box on the \"Create new note\" modal dialog has no contents when it is opened via the \"Create new note\" link on $ {ZEPPELIN_HOME}/webapps/webapp/app/home/notebook.html. Fix $ {ZEPPELIN_HOME}/webapps/webapp/app/home/notebook.html so that NoteCreateCtrl.getInterpreterSettings() is invoked when the \"Create new note\" link is clicked. ### What type of PR is it? [Bug Fix] ### Todos ### What is the Jira issue? * https://issues.apache.org/jira/browse/ZEPPELIN-3022 ### How should this be tested? * Tested manually     * Before: \"Default Interpreter\" select box has no options         * <img width=\"1204\" alt=\"zeppelin-3022_before\" src=\"https://user-images.githubusercontent.com/31149688/32265997-daaad0ba-bf28-11e7-92d0-b0d53db25d7f.png\">     * After: \"Default Interpreter\" select box has options successfully         * <img width=\"1209\" alt=\"zeppelin-3022_after\" src=\"https://user-images.githubusercontent.com/31149688/32266019-fcf4a5e2-bf28-11e7-8be3-7b02ace2d613.png\"> ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Keiji Yoshida <kjmrknsn@gmail.com> Closes #2640 from kjmrknsn/ZEPPELIN-3022 and squashes the following commits: ef4031d [Keiji Yoshida] [ZEPPELIN-3022] The \"Default Interpreter\" select box on the \"Create new note\" modal dialog has no contents when it is opened via the \"Create new note\" link on ${ZEPPELIN_HOME}/webapps/webapp/app/home/notebook.html",
            "diff": [
                "diff --git a/zeppelin-web/src/app/home/notebook.html b/zeppelin-web/src/app/home/notebook.html",
                "index f276a222f..a6f2416a6 100644",
                "--- a/zeppelin-web/src/app/home/notebook.html",
                "+++ b/zeppelin-web/src/app/home/notebook.html",
                "@@ -25,3 +25,3 @@ limitations under the License.",
                "            <i style=\"font-size: 15px;\" class=\"fa fa-upload\"></i> Import note</a></h5>",
                "-         <h5><a href=\"\" data-toggle=\"modal\" data-target=\"#noteCreateModal\" style=\"text-decoration: none;\">",
                "+         <h5 ng-controller=\"NoteCreateCtrl as noteCreateCtrl\"><a href=\"\" data-toggle=\"modal\" data-target=\"#noteCreateModal\" style=\"text-decoration: none;\" ng-click=\"noteCreateCtrl.getInterpreterSettings();\">",
                "            <i style=\"font-size: 15px;\" class=\"icon-notebook\"></i> Create new note</a></h5>"
            ],
            "changed_files": [
                "zeppelin-web/src/app/home/notebook.html"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3022": ""
            },
            "ghissue_refs": {
                "2640": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: default, user",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3022",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2640",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c45128e79f619e6f2d927176a440ec44a2d588ed",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1508404914,
            "hunks": 7,
            "message": "[ZEPPELIN-2949] Allow custom Spark UI URL ### What is this PR for? Allow an override of default Spark logic in building the URL path and redirect the Zeppelin user directly to a configured reverse proxy path ### What type of PR is it? [Improvement] ### What is the Jira issue? * https://issues.apache.org/jira/browse/ZEPPELIN-2949 ### How should this be tested? * Set \"zeppelin.spark.uiWebUrl\" to http://localhost/spark-reverse-proxy-path * Run Spark code * Open Spark UI * Expected to be redirected to http://localhost/spark-reverse-proxy-path ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? N * Is there breaking changes for older versions? N * Does this needs documentation? N Author: Nelson Costa <nelson.costa85@gmail.com> Closes #2596 from necosta/zeppelin2949 and squashes the following commits: 2ae8f2d [Nelson Costa] [ZEPPELIN-2949] Last amendments 118339f [Nelson Costa] [ZEPPELIN-2949] Updated documentation 826bad4 [Nelson Costa] [ZEPPELIN-2949] Updated documentation 0a56299 [Nelson Costa] [ZEPPELIN-2949] Allow custom Spark UI URL",
            "diff": [
                "diff --git a/spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java b/spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java",
                "index 5a5110f9f..053682520 100644",
                "--- a/spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java",
                "+++ b/spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java",
                "@@ -28,3 +28,2 @@ import java.net.URL;",
                " import java.net.URLClassLoader;",
                "-import java.util.ArrayList;",
                " import java.util.LinkedList;",
                "@@ -32,3 +31,2 @@ import java.util.List;",
                " import java.util.Map;",
                "-import java.util.NoSuchElementException;",
                " import java.util.Properties;",
                "@@ -53,3 +51,2 @@ import org.apache.spark.ui.jobs.JobProgressListener;",
                " import org.apache.zeppelin.interpreter.BaseZeppelinContext;",
                "-import org.apache.zeppelin.interpreter.DefaultInterpreterProperty;",
                " import org.apache.zeppelin.interpreter.Interpreter;",
                "@@ -74,3 +71,2 @@ import org.slf4j.LoggerFactory;",
                "-import com.google.common.base.Joiner;",
                " import scala.Console;",
                "@@ -208,3 +204,3 @@ public class SparkInterpreter extends Interpreter {",
                "         if (sparkUrl != null) {",
                "-          jobUrl = sparkUrl + \"/jobs/job?id=\" + jobId;",
                "+          jobUrl = sparkUrl + \"/jobs/job/?id=\" + jobId;",
                "         }",
                "@@ -938,2 +934,7 @@ public class SparkInterpreter extends Interpreter {",
                "+    String sparkUrlProp = property.getProperty(\"zeppelin.spark.uiWebUrl\", \"\");",
                "+    if (!StringUtils.isBlank(sparkUrlProp)) {",
                "+      return sparkUrlProp;",
                "+    }",
                "+",
                "     if (sparkVersion.newerThanEquals(SparkVersion.SPARK_2_0_0)) {",
                "diff --git a/spark/src/main/resources/interpreter-setting.json b/spark/src/main/resources/interpreter-setting.json",
                "index 4aeda6c9d..485f6950d 100644",
                "--- a/spark/src/main/resources/interpreter-setting.json",
                "+++ b/spark/src/main/resources/interpreter-setting.json",
                "@@ -69,2 +69,9 @@",
                "         \"type\": \"checkbox\"",
                "+      },",
                "+      \"zeppelin.spark.uiWebUrl\": {",
                "+        \"envName\": null,",
                "+        \"propertyName\": \"zeppelin.spark.uiWebUrl\",",
                "+        \"defaultValue\": \"\",",
                "+        \"description\": \"Override Spark UI default URL\",",
                "+        \"type\": \"string\"",
                "       }"
            ],
            "changed_files": [
                "spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java",
                "spark/src/main/resources/interpreter-setting.json"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-2949": ""
            },
            "ghissue_refs": {
                "2596": "[HOTFIX] fix build spark and R interpreters #2630"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: allow, default, user",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-2949",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2596",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fc9d542b70d99ce334552af62f8730e2fde4c1d0",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1505110150,
            "hunks": 4,
            "message": "[ZEPPELIN-2924] Fix broken javascript source map ### What is this PR for? Fixed broken javascript source map. The coverage loader should be used only for test env. **that's really annoying because we can't set breakpoint and even can't see the original source code.** ### What type of PR is it? [Bug Fix] ### What is the Jira issue? [ZEPPELIN-2924](https://issues.apache.org/jira/browse/ZEPPELIN-2924) ### How should this be tested? 1. run the webapp as dev mode: `localhost:9000` 2. open the developer console and click any log message 3. check whether source is minified or not. 4. execute `yarn run test` in the terminal to check that coverage feature works well. ### Screenshots (if appropriate) #### Before ![image](https://user-images.githubusercontent.com/4968473/30260684-cc095240-9703-11e7-9fd6-fe5bd370a6bd.png) ![image](https://user-images.githubusercontent.com/4968473/30260690-d4f3494c-9703-11e7-854b-29d6020eaa3c.png) #### After ![image](https://user-images.githubusercontent.com/4968473/30260654-a27579d6-9703-11e7-9d2a-a37c7ae7b148.png) ![image](https://user-images.githubusercontent.com/4968473/30260655-a9c62802-9703-11e7-9d29-be10df0302d7.png) ### Questions: * Does the licenses files need update? - NO * Is there breaking changes for older versions? - NO * Does this needs documentation? - NO Author: 1ambda <1amb4a@gmail.com> Closes #2580 from 1ambda/ZEPPELIN-2924/fix-source-map-is-broken and squashes the following commits: 375e13945 [1ambda] fix: Use coverage loader only for test env",
            "diff": [
                "diff --git a/zeppelin-web/webpack.config.js b/zeppelin-web/webpack.config.js",
                "index 6fba4b1a3..3c349240c 100644",
                "--- a/zeppelin-web/webpack.config.js",
                "+++ b/zeppelin-web/webpack.config.js",
                "@@ -122,2 +122,3 @@ module.exports = function makeWebpackConfig () {",
                "    */",
                "+  config.devtool = 'eval-source-map';",
                "   if (isTest) {",
                "@@ -129,3 +130,2 @@ module.exports = function makeWebpackConfig () {",
                "   }",
                "-  config.devtool = 'source-map';",
                "@@ -198,10 +198,2 @@ module.exports = function makeWebpackConfig () {",
                "     }],",
                "-    postLoaders: [",
                "-      {",
                "-        // COVERAGE",
                "-        test: /\\.js$/,",
                "-        exclude: /(node_modules|bower_components|\\.test\\.js)/,",
                "-        loader: 'istanbul-instrumenter'",
                "-      }",
                "-    ]",
                "   };",
                "@@ -252,2 +244,13 @@ module.exports = function makeWebpackConfig () {",
                "   }",
                "+  ",
                "+  if (isTest) {",
                "+    config.module.postLoaders = [",
                "+      {",
                "+        // COVERAGE",
                "+        test: /\\.js$/,",
                "+        exclude: /(node_modules|bower_components|\\.test\\.js)/,",
                "+        loader: 'istanbul-instrumenter'",
                "+      }",
                "+    ]",
                "+  }"
            ],
            "changed_files": [
                "zeppelin-web/webpack.config.js"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-2924": ""
            },
            "ghissue_refs": {
                "2580": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: user",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-2924",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2580",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "717a8c1e796818ab2494a87afcaf811c42e016fa",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1510215388,
            "hunks": 8,
            "message": "[ZEPPELIN-2647] Bypass auth logic when a user logins as admin role ### What is this PR for? For administrator, make new admin role that assigned user can see all notebooks. ### What type of PR is it? Improvement ### What is the Jira issue? https://issues.apache.org/jira/browse/ZEPPELIN-2647 ### How should this be tested? 1. Set role name to use as admin through ZEPPELIN_OWNER_ROLE = <role name> or zeppelin.owner.role = <role name>. Default role name is admin 2. Login as user who is not assigned as admin and create notebook. 3. Logout the user and login another user who is assigned as admin, open the created notebook. ### Questions: * Does the licenses files need update? N * Is there breaking changes for older versions? Y/N * Does this needs documentation? Y Author: Yuta Hongo <yutago@gmail.com> Closes #2585 from yu74n/bypass-auth-logic and squashes the following commits: c706302 [Yuta Hongo] Use StringUtils isBlank() f6c6345 [Yuta Hongo] Remove description mentioned about private mode c6e1382 [Yuta Hongo] Disable admin role by default 0170b3f [Yuta Hongo] Check if admin role is valid or not 532a49f [Yuta Hongo] Set blank as default.owner.username default value 98a9de0 [Yuta Hongo] Rename property name 26b818c [Yuta Hongo] Make admin role to bypass auth logic",
            "diff": [
                "diff --git a/conf/zeppelin-site.xml.template b/conf/zeppelin-site.xml.template",
                "index 8a2a60e3b..b59d87837 100755",
                "--- a/conf/zeppelin-site.xml.template",
                "+++ b/conf/zeppelin-site.xml.template",
                "@@ -395,2 +395,8 @@",
                "+<property>",
                "+  <name>zeppelin.notebook.default.owner.username</name>",
                "+  <value></value>",
                "+  <description>Set owner role by default</description>",
                "+</property>",
                "+",
                " <property>",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "index 1bc242d01..f45e27b3e 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "@@ -718,3 +718,6 @@ public class ZeppelinConfiguration extends XMLConfiguration {",
                "     ZEPPELIN_INTERPRETER_LIFECYCLE_MANAGER_TIMEOUT_THRESHOLD(",
                "-        \"zeppelin.interpreter.lifecyclemanager.timeout.threshold\", 3600000L);",
                "+        \"zeppelin.interpreter.lifecyclemanager.timeout.threshold\", 3600000L),",
                "+",
                "+    ZEPPELIN_OWNER_ROLE(\"zeppelin.notebook.default.owner.username\", \"\");",
                "+",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/NotebookAuthorization.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/NotebookAuthorization.java",
                "index 69ba891a4..5f0f0667e 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/NotebookAuthorization.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/NotebookAuthorization.java",
                "@@ -26,3 +26,2 @@ import java.io.InputStreamReader;",
                " import java.io.OutputStreamWriter;",
                "-import java.util.Collections;",
                " import java.util.HashMap;",
                "@@ -37,2 +36,3 @@ import org.apache.commons.lang.StringUtils;",
                " import org.apache.zeppelin.conf.ZeppelinConfiguration;",
                "+import org.apache.zeppelin.conf.ZeppelinConfiguration.ConfVars;",
                " import org.apache.zeppelin.user.AuthenticationInfo;",
                "@@ -295,3 +295,3 @@ public class NotebookAuthorization {",
                "   public boolean isOwner(String noteId, Set<String> entities) {",
                "-    return isMember(entities, getOwners(noteId));",
                "+    return isMember(entities, getOwners(noteId)) || isAdmin(entities);",
                "   }",
                "@@ -299,3 +299,5 @@ public class NotebookAuthorization {",
                "   public boolean isWriter(String noteId, Set<String> entities) {",
                "-    return isMember(entities, getWriters(noteId)) || isMember(entities, getOwners(noteId));",
                "+    return isMember(entities, getWriters(noteId)) ||",
                "+           isMember(entities, getOwners(noteId)) ||",
                "+           isAdmin(entities);",
                "   }",
                "@@ -304,5 +306,6 @@ public class NotebookAuthorization {",
                "     return isMember(entities, getReaders(noteId)) ||",
                "-            isMember(entities, getOwners(noteId)) ||",
                "-            isMember(entities, getWriters(noteId)) ||",
                "-            isMember(entities, getRunners(noteId));",
                "+           isMember(entities, getOwners(noteId)) ||",
                "+           isMember(entities, getWriters(noteId)) ||",
                "+           isMember(entities, getRunners(noteId)) ||",
                "+           isAdmin(entities);",
                "   }",
                "@@ -311,4 +314,13 @@ public class NotebookAuthorization {",
                "     return isMember(entities, getRunners(noteId)) ||",
                "-            isMember(entities, getWriters(noteId)) ||",
                "-            isMember(entities, getOwners(noteId));",
                "+           isMember(entities, getWriters(noteId)) ||",
                "+           isMember(entities, getOwners(noteId)) ||",
                "+           isAdmin(entities);",
                "+  }",
                "+",
                "+  private boolean isAdmin(Set<String> entities) {",
                "+    String adminRole = conf.getString(ConfVars.ZEPPELIN_OWNER_ROLE);",
                "+    if (StringUtils.isBlank(adminRole)) {",
                "+      return false;",
                "+    }",
                "+    return entities.contains(adminRole);",
                "   }"
            ],
            "changed_files": [
                "conf/zeppelin-site.xml.template",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/NotebookAuthorization.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-2647": ""
            },
            "ghissue_refs": {
                "2585": "[ZEPPELIN-2647] Make admin role to bypass auth logic #2525 [ZEPPELIN-2647] Set admin user as owner when user create a notebook #2416"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: default, user",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-2647",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2585",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "36d726d6dece86567dc125bad679de9622489385",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1516582842,
            "hunks": 2,
            "message": "ZEPPELIN-3181. Enable impersonation support for kerberized cluster ### What is this PR for? This is to enable kerberos support for spark yarn mode in impersonation. Spark has one limitation that you can not specify keytab & proxyuser together. So this PR would run kinit before launching spark interpreter. so that user can enable impersonation for secured cluster. ### What type of PR is it? [Improvement | Feature] ### Todos * [ ] - Task ### What is the Jira issue? * https://issues.apache.org/jira/browse/ZEPPELIN-3181 ### How should this be tested? * Verified manually,  see the following screenshot. ### Screenshots (if appropriate) ![screen shot 2018-01-22 at 9 45 26 am](https://user-images.githubusercontent.com/164491/35201760-01462290-ff59-11e7-966b-b7b4e4df8b64.png) ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Jeff Zhang <zjffdu@apache.org> Closes #2737 from zjffdu/ZEPPELIN-3181 and squashes the following commits: 2ae5298 [Jeff Zhang] ZEPPELIN-3181. Enable kerberos support for Spark Yarn Cluster in impersonation mode",
            "diff": [
                "diff --git a/bin/interpreter.sh b/bin/interpreter.sh",
                "index 687d8a96d..de0ec94ae 100755",
                "--- a/bin/interpreter.sh",
                "+++ b/bin/interpreter.sh",
                "@@ -116,2 +116,7 @@ fi",
                " if [[ \"${INTERPRETER_ID}\" == \"spark\" ]]; then",
                "+",
                "+  // # run kinit",
                "+  if [[ -n \"${ZEPPELIN_SERVER_KERBEROS_KEYTAB}\" ]] && [[ -n \"${ZEPPELIN_SERVER_KERBEROS_PRINCIPAL}\" ]]; then",
                "+    kinit -kt ${ZEPPELIN_SERVER_KERBEROS_KEYTAB} ${ZEPPELIN_SERVER_KERBEROS_PRINCIPAL}",
                "+  fi",
                "   if [[ -n \"${SPARK_HOME}\" ]]; then",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/SparkInterpreterLauncher.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/SparkInterpreterLauncher.java",
                "index c462f0a08..3c5326f96 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/SparkInterpreterLauncher.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/SparkInterpreterLauncher.java",
                "@@ -91,2 +91,15 @@ public class SparkInterpreterLauncher extends ShellScriptLauncher {",
                "     }",
                "+",
                "+    String keytab = zConf.getString(ZeppelinConfiguration.ConfVars.ZEPPELIN_SERVER_KERBEROS_KEYTAB);",
                "+    String principal =",
                "+        zConf.getString(ZeppelinConfiguration.ConfVars.ZEPPELIN_SERVER_KERBEROS_PRINCIPAL);",
                "+",
                "+    if (!StringUtils.isBlank(keytab) && !StringUtils.isBlank(principal)) {",
                "+      env.put(\"ZEPPELIN_SERVER_KERBEROS_KEYTAB\", keytab);",
                "+      env.put(\"ZEPPELIN_SERVER_KERBEROS_PRINCIPAL\", principal);",
                "+      LOGGER.info(\"Run Spark under secure mode with keytab: \" + keytab +",
                "+          \", principal: \" + principal);",
                "+    } else {",
                "+      LOGGER.info(\"Run Spark under non-secure mode as no keytab and principal is specified\");",
                "+    }",
                "     LOGGER.debug(\"buildEnvFromProperties: \" + env);"
            ],
            "changed_files": [
                "bin/interpreter.sh",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/SparkInterpreterLauncher.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3181": ""
            },
            "ghissue_refs": {
                "2737": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: enable, user",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3181",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2737",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0d1dab2ab25e85b49b6a392e1bb5995ca691215c",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1511550002,
            "hunks": 1,
            "message": "ZEPPELIN-2984: allow enter from username ### What is this PR for? Allow an \"Enter\" keypress in the username field during login ### What type of PR is it? Improvement ### Todos * N/A ### What is the Jira issue? * https://issues.apache.org/jira/browse/ZEPPELIN-2984 ### How should this be tested? * Pull up login screen. Fill in username and password. Click in username field.   Press enter. We would expect the login handler to be called. * Pull up login screen. Fill in username and password. Press enter (while still   in password field). We would expect the login handler to be called just as   before. * Alternatively, use a password manager (e.g. LastPass). Save the password.   Pull up the login screen. Press Enter. We would expect the login handler to be   called. ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Gabe Fernando <gef756@gmail.com> Closes #2616 from gef756/dev-login-enter and squashes the following commits: 301d398 [Gabe Fernando] MRG: Merge remote-tracking branch 'origin/master' into dev-login-enter 2a1865a [Gabe Fernando] (ZEPPELIN-2984) ENH: allow enter from username",
            "diff": [
                "diff --git a/zeppelin-web/src/components/login/login.html b/zeppelin-web/src/components/login/login.html",
                "index d4a94a6f8..fd98bc8c4 100644",
                "--- a/zeppelin-web/src/components/login/login.html",
                "+++ b/zeppelin-web/src/components/login/login.html",
                "@@ -31,2 +31,3 @@ limitations under the License.",
                "             <input placeholder=\"User Name\" type=\"text\" class=\"form-control\" id=\"userName\"",
                "+                   ng-enter=\"login()\"",
                "                    ng-keypress=\"loginParams.errorText = ''\""
            ],
            "changed_files": [
                "zeppelin-web/src/components/login/login.html"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-2984": ""
            },
            "ghissue_refs": {
                "2616": "[Snyk] Upgrade xlsx from 0.14.5 to 0.18.5 Geetha7891/zeppelin#3 [Snyk] Upgrade xlsx from 0.14.5 to 0.18.5 zjffdu/zeppelin#14"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: allow, user",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-2984",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2616",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "53e6f743d434ff5ca787db26c8e3740cb16f9e5d",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1513894968,
            "hunks": 31,
            "message": "ZEPPELIN-3106. User impersonation in SPARK is not working ### What is this PR for? This PR is for trying to fix the impersonation of spark interpreter in master branch.  For spark impersonation, we don't need to ssh, just adding `--proxy-user` is enough. ### What type of PR is it? [Bug Fix] ### Todos * [ ] - Task ### What is the Jira issue? * https://issues.apache.org/jira/browse/ZEPPELIN-3106 ### How should this be tested? * Manually verified. ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Jeff Zhang <zjffdu@apache.org> Closes #2705 from zjffdu/ZEPPELIN-3106 and squashes the following commits: 2a6cb14 [Jeff Zhang] address comment d8a7d50 [Jeff Zhang] ZEPPELIN-3106. User impersonation in SPARK is not working",
            "diff": [
                "diff --git a/bin/interpreter.sh b/bin/interpreter.sh",
                "index f23ca823e..687d8a96d 100755",
                "--- a/bin/interpreter.sh",
                "+++ b/bin/interpreter.sh",
                "@@ -18,2 +18,3 @@",
                "+",
                " bin=$(dirname \"${BASH_SOURCE-$0}\")",
                "@@ -52,7 +53,2 @@ while getopts \"hc:p:r:d:l:v:u:g:\" o; do",
                "             ZEPPELIN_IMPERSONATE_USER=\"${OPTARG}\"",
                "-            if [[ -z \"$ZEPPELIN_IMPERSONATE_CMD\" ]]; then",
                "-              ZEPPELIN_IMPERSONATE_RUN_CMD=`echo \"ssh ${ZEPPELIN_IMPERSONATE_USER}@localhost\" `",
                "-            else",
                "-              ZEPPELIN_IMPERSONATE_RUN_CMD=$(eval \"echo ${ZEPPELIN_IMPERSONATE_CMD} \")",
                "-            fi",
                "             ;;",
                "@@ -98,2 +94,11 @@ ZEPPELIN_LOGFILE=\"${ZEPPELIN_LOG_DIR}/zeppelin-interpreter-${INTERPRETER_SETTING",
                "+if [[ -z \"$ZEPPELIN_IMPERSONATE_CMD\" ]]; then",
                "+    if [[ \"${INTERPRETER_ID}\" != \"spark\" || \"$ZEPPELIN_IMPERSONATE_SPARK_PROXY_USER\" == \"false\" ]]; then",
                "+        ZEPPELIN_IMPERSONATE_RUN_CMD=`echo \"ssh ${ZEPPELIN_IMPERSONATE_USER}@localhost\" `",
                "+    fi",
                "+else",
                "+    ZEPPELIN_IMPERSONATE_RUN_CMD=$(eval \"echo ${ZEPPELIN_IMPERSONATE_CMD} \")",
                "+fi",
                "+",
                "+",
                " if [[ ! -z \"$ZEPPELIN_IMPERSONATE_USER\" ]]; then",
                "@@ -197,3 +202,3 @@ addJarInDirForIntp \"${LOCAL_INTERPRETER_REPO}\"",
                "-if [[ ! -z \"$ZEPPELIN_IMPERSONATE_USER\" ]]; then",
                "+if [[ ! -z \"$ZEPPELIN_IMPERSONATE_USER\" && \"${INTERPRETER_ID}\" != \"spark\" ]]; then",
                "     suid=\"$(id -u ${ZEPPELIN_IMPERSONATE_USER})\"",
                "@@ -208,7 +213,3 @@ fi",
                " if [[ -n \"${SPARK_SUBMIT}\" ]]; then",
                "-    if [[ -n \"$ZEPPELIN_IMPERSONATE_USER\" ]] && [[ \"$ZEPPELIN_IMPERSONATE_SPARK_PROXY_USER\" != \"false\" ]];  then",
                "-       INTERPRETER_RUN_COMMAND+=' '` echo ${SPARK_SUBMIT} --class ${ZEPPELIN_SERVER} --driver-class-path \\\"${ZEPPELIN_INTP_CLASSPATH_OVERRIDES}:${ZEPPELIN_INTP_CLASSPATH}\\\" --driver-java-options \\\"${JAVA_INTP_OPTS}\\\" ${SPARK_SUBMIT_OPTIONS} ${ZEPPELIN_SPARK_CONF} --proxy-user ${ZEPPELIN_IMPERSONATE_USER} ${SPARK_APP_JAR} ${CALLBACK_HOST} ${PORT} ${INTP_PORT}`",
                "-    else",
                "-       INTERPRETER_RUN_COMMAND+=' '` echo ${SPARK_SUBMIT} --class ${ZEPPELIN_SERVER} --driver-class-path \\\"${ZEPPELIN_INTP_CLASSPATH_OVERRIDES}:${ZEPPELIN_INTP_CLASSPATH}\\\" --driver-java-options \\\"${JAVA_INTP_OPTS}\\\" ${SPARK_SUBMIT_OPTIONS} ${ZEPPELIN_SPARK_CONF} ${SPARK_APP_JAR} ${CALLBACK_HOST} ${PORT} ${INTP_PORT}`",
                "-    fi",
                "+    INTERPRETER_RUN_COMMAND+=' '` echo ${SPARK_SUBMIT} --class ${ZEPPELIN_SERVER} --driver-class-path \\\"${ZEPPELIN_INTP_CLASSPATH_OVERRIDES}:${ZEPPELIN_INTP_CLASSPATH}\\\" --driver-java-options \\\"${JAVA_INTP_OPTS}\\\" ${SPARK_SUBMIT_OPTIONS} ${ZEPPELIN_SPARK_CONF} ${SPARK_APP_JAR} ${CALLBACK_HOST} ${PORT} ${INTP_PORT}`",
                " else",
                "@@ -217,2 +218,3 @@ fi",
                "+",
                " if [[ ! -z \"$ZEPPELIN_IMPERSONATE_USER\" ]] && [[ -n \"${suid}\" || -z \"${SPARK_SUBMIT}\" ]]; then",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/launcher/InterpreterClient.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/launcher/InterpreterClient.java",
                "index 813dad868..26da27032 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/launcher/InterpreterClient.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/launcher/InterpreterClient.java",
                "@@ -28,3 +28,3 @@ public interface InterpreterClient {",
                "-  void start(String userName, Boolean isUserImpersonate);",
                "+  void start(String userName);",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/launcher/InterpreterLaunchContext.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/launcher/InterpreterLaunchContext.java",
                "index 6901e2c7a..28c40f25b 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/launcher/InterpreterLaunchContext.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/launcher/InterpreterLaunchContext.java",
                "@@ -32,2 +32,3 @@ public class InterpreterLaunchContext {",
                "   private InterpreterRunner runner;",
                "+  private String userName;",
                "   private String interpreterGroupId;",
                "@@ -40,2 +41,3 @@ public class InterpreterLaunchContext {",
                "                                   InterpreterRunner runner,",
                "+                                  String userName,",
                "                                   String interpreterGroupId,",
                "@@ -47,2 +49,3 @@ public class InterpreterLaunchContext {",
                "     this.runner = runner;",
                "+    this.userName = userName;",
                "     this.interpreterGroupId = interpreterGroupId;",
                "@@ -80,2 +83,6 @@ public class InterpreterLaunchContext {",
                "   }",
                "+",
                "+  public String getUserName() {",
                "+    return userName;",
                "+  }",
                " }",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "index 424aa27a1..397ae1084 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "@@ -701,2 +701,3 @@ public class InterpreterSetting {",
                "   synchronized RemoteInterpreterProcess createInterpreterProcess(String interpreterGroupId,",
                "+                                                                 String userName,",
                "                                                                  Properties properties)",
                "@@ -707,3 +708,3 @@ public class InterpreterSetting {",
                "     InterpreterLaunchContext launchContext = new",
                "-        InterpreterLaunchContext(properties, option, interpreterRunner,",
                "+        InterpreterLaunchContext(properties, option, interpreterRunner, userName,",
                "         interpreterGroupId, id, group, name);",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroup.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroup.java",
                "index 641c0ac23..d21a34d57 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroup.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroup.java",
                "@@ -62,6 +62,7 @@ public class ManagedInterpreterGroup extends InterpreterGroup {",
                "       LOGGER.info(\"Create InterpreterProcess for InterpreterGroup: \" + getId());",
                "-      remoteInterpreterProcess = interpreterSetting.createInterpreterProcess(id, properties);",
                "+      remoteInterpreterProcess = interpreterSetting.createInterpreterProcess(id, userName,",
                "+          properties);",
                "       synchronized (remoteInterpreterProcess) {",
                "         if (!remoteInterpreterProcess.isRunning()) {",
                "-          remoteInterpreterProcess.start(userName, false);",
                "+          remoteInterpreterProcess.start(userName);",
                "           remoteInterpreterProcess.getRemoteInterpreterEventPoller()",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/ShellScriptLauncher.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/ShellScriptLauncher.java",
                "index 6ddcacf27..e107fb7ed 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/ShellScriptLauncher.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/ShellScriptLauncher.java",
                "@@ -86,3 +86,3 @@ public class ShellScriptLauncher extends InterpreterLauncher {",
                "           zConf.getInterpreterDir() + \"/\" + groupName, localRepoPath,",
                "-          buildEnvFromProperties(), connectTimeout, name);",
                "+          buildEnvFromProperties(context), connectTimeout, name, option.isUserImpersonate());",
                "     }",
                "@@ -90,7 +90,7 @@ public class ShellScriptLauncher extends InterpreterLauncher {",
                "-  protected Map<String, String> buildEnvFromProperties() {",
                "+  protected Map<String, String> buildEnvFromProperties(InterpreterLaunchContext context) {",
                "     Map<String, String> env = new HashMap<>();",
                "-    for (Object key : properties.keySet()) {",
                "+    for (Object key : context.getProperties().keySet()) {",
                "       if (RemoteInterpreterUtils.isEnvString((String) key)) {",
                "-        env.put((String) key, properties.getProperty((String) key));",
                "+        env.put((String) key, context.getProperties().getProperty((String) key));",
                "       }",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/SparkInterpreterLauncher.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/SparkInterpreterLauncher.java",
                "index e8a9cdf88..c462f0a08 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/SparkInterpreterLauncher.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/SparkInterpreterLauncher.java",
                "@@ -43,3 +43,3 @@ public class SparkInterpreterLauncher extends ShellScriptLauncher {",
                "   @Override",
                "-  protected Map<String, String> buildEnvFromProperties() {",
                "+  protected Map<String, String> buildEnvFromProperties(InterpreterLaunchContext context) {",
                "     Map<String, String> env = new HashMap<String, String>();",
                "@@ -72,2 +72,7 @@ public class SparkInterpreterLauncher extends ShellScriptLauncher {",
                "     }",
                "+    String useProxyUserEnv = System.getenv(\"ZEPPELIN_IMPERSONATE_SPARK_PROXY_USER\");",
                "+    if (context.getOption().isUserImpersonate() && (StringUtils.isBlank(useProxyUserEnv) ||",
                "+        !useProxyUserEnv.equals(\"false\"))) {",
                "+      sparkConfBuilder.append(\" --proxy-user \" + context.getUserName());",
                "+    }",
                "@@ -196,8 +201,8 @@ public class SparkInterpreterLauncher extends ShellScriptLauncher {",
                "   private String toShellFormat(String value) {",
                "-    if (value.contains(\"\\'\") && value.contains(\"\\\"\")) {",
                "+    if (value.contains(\"'\") && value.contains(\"\\\"\")) {",
                "       throw new RuntimeException(\"Spark property value could not contain both \\\" and '\");",
                "-    } else if (value.contains(\"\\'\")) {",
                "+    } else if (value.contains(\"'\")) {",
                "       return \"\\\"\" + value + \"\\\"\";",
                "     } else {",
                "-      return \"\\'\" + value + \"\\'\";",
                "+      return \"'\" + value + \"'\";",
                "     }",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterManagedProcess.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterManagedProcess.java",
                "index 3dd5bfa34..b186e4815 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterManagedProcess.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterManagedProcess.java",
                "@@ -65,2 +65,3 @@ public class RemoteInterpreterManagedProcess extends RemoteInterpreterProcess",
                "   private final String interpreterSettingName;",
                "+  private final boolean isUserImpersonated;",
                "@@ -76,3 +77,4 @@ public class RemoteInterpreterManagedProcess extends RemoteInterpreterProcess",
                "       int connectTimeout,",
                "-      String interpreterSettingName) {",
                "+      String interpreterSettingName,",
                "+      boolean isUserImpersonated) {",
                "     super(connectTimeout);",
                "@@ -85,2 +87,3 @@ public class RemoteInterpreterManagedProcess extends RemoteInterpreterProcess",
                "     this.interpreterSettingName = interpreterSettingName;",
                "+    this.isUserImpersonated = isUserImpersonated;",
                "   }",
                "@@ -98,3 +101,3 @@ public class RemoteInterpreterManagedProcess extends RemoteInterpreterProcess",
                "   @Override",
                "-  public void start(String userName, Boolean isUserImpersonate) {",
                "+  public void start(String userName) {",
                "     // start server process",
                "@@ -163,3 +166,3 @@ public class RemoteInterpreterManagedProcess extends RemoteInterpreterProcess",
                "     cmdLine.addArgument(interpreterPortRange, false);",
                "-    if (isUserImpersonate && !userName.equals(\"anonymous\")) {",
                "+    if (isUserImpersonated && !userName.equals(\"anonymous\")) {",
                "       cmdLine.addArgument(\"-u\", false);",
                "@@ -274,2 +277,7 @@ public class RemoteInterpreterManagedProcess extends RemoteInterpreterProcess",
                "+  @VisibleForTesting",
                "+  public boolean isUserImpersonated() {",
                "+    return isUserImpersonated;",
                "+  }",
                "+",
                "   public boolean isRunning() {",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterRunningProcess.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterRunningProcess.java",
                "index 0e87e4f7d..69daa6f68 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterRunningProcess.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterRunningProcess.java",
                "@@ -60,3 +60,3 @@ public class RemoteInterpreterRunningProcess extends RemoteInterpreterProcess {",
                "   @Override",
                "-  public void start(String userName, Boolean isUserImpersonate) {",
                "+  public void start(String userName) {",
                "     // assume process is externally managed. nothing to do"
            ],
            "changed_files": [
                "bin/interpreter.sh",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/launcher/InterpreterClient.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/launcher/InterpreterLaunchContext.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroup.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/ShellScriptLauncher.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/SparkInterpreterLauncher.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterManagedProcess.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterRunningProcess.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3106": ""
            },
            "ghissue_refs": {
                "2705": "ZEPPELIN-3395 Fix impersonate spark interpreter without proxy-user option #2916"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: user",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3106",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2705",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "851dcb1a392a3b720501982c6c2c4a3d30468a7e",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1510076398,
            "hunks": 28,
            "message": "[ZEPPELIN-3038] Network visualization not show \"source\" and \"target\" node/edge properties ### What is this PR for? The Network visualization not show \"source\" and \"target\" node/edge properties when the graph is flattened to create the table representation. ### What type of PR is it? [Bug Fix] ### Todos * [x] - Fixed ### Screenshot Before: ![zeppelin before](https://user-images.githubusercontent.com/1833335/32510305-6ee266c8-c3f0-11e7-9e28-7ed1f304ebcb.PNG) After: ![zeppelin after](https://user-images.githubusercontent.com/1833335/32510324-8121cc3e-c3f0-11e7-9f1f-84bba563aebc.PNG) ### What is the Jira issue? [ZEPPELIN-3038](https://issues.apache.org/jira/browse/ZEPPELIN-3038) ### How should this be tested? Please use this [notebook](https://gist.github.com/conker84/9574127c2389d08164423894aa93b67f) ### Questions: * Does the licenses files need update? no * Is there breaking changes for older versions? no * Does this needs documentation? no Author: Andrea Santurbano <santand@gmail.com> Closes #2653 from conker84/network-fix and squashes the following commits: d4f19b6 [Andrea Santurbano] removed unused property 44100c6 [Andrea Santurbano] Removed semicolons 273c88f [Andrea Santurbano] added test on edges prevent double rendering 5eeabc2 [Andrea Santurbano] networkdata class now shows fields \"source\" and \"target\" + added test case moved the logic related to the visualization from networkdata to visualization-d3network added some optimization",
            "diff": [
                "diff --git a/zeppelin-web/src/app/tabledata/networkdata.js b/zeppelin-web/src/app/tabledata/networkdata.js",
                "index 7983d8272..70cd86ba5 100644",
                "--- a/zeppelin-web/src/app/tabledata/networkdata.js",
                "+++ b/zeppelin-web/src/app/tabledata/networkdata.js",
                "@@ -42,5 +42,3 @@ export default class NetworkData extends TableData {",
                "-    this.setNodesDefaults()",
                "-    this.setEdgesDefaults()",
                "-",
                "+    this.graph.edges = this.graph.edges || []",
                "     this.networkNodes = angular.equals({}, this.graph.labels || {})",
                "@@ -50,30 +48,30 @@ export default class NetworkData extends TableData {",
                "-    let rows = []",
                "-    let comment = ''",
                "-    let entities = this.graph.nodes.concat(this.graph.edges)",
                "-    let baseColumnNames = [{name: 'id', index: 0, aggr: 'sum'},",
                "-                       {name: 'label', index: 1, aggr: 'sum'}]",
                "-    let internalFieldsToJump = ['count', 'size', 'totalCount',",
                "-      'data', 'x', 'y', 'labels']",
                "-    let baseCols = _.map(baseColumnNames, function(col) { return col.name })",
                "-    let keys = _.map(entities, function(elem) { return Object.keys(elem.data || {}) })",
                "+    const rows = []",
                "+    const comment = ''",
                "+    const entities = this.graph.nodes.concat(this.graph.edges)",
                "+    const baseColumnNames = [{name: 'id', index: 0, aggr: 'sum'}]",
                "+    const containsLabelField = _.find(entities, (entity) => 'label' in entity) != null",
                "+    if (this.graph.labels || this.graph.types || containsLabelField) {",
                "+      baseColumnNames.push({name: 'label', index: 1, aggr: 'sum'})",
                "+    }",
                "+    const internalFieldsToJump = ['count', 'size', 'totalCount',",
                "+      'data', 'x', 'y', 'labels', 'source', 'target']",
                "+    const baseCols = _.map(baseColumnNames, (col) => col.name)",
                "+    let keys = _.map(entities, (elem) => Object.keys(elem.data || {}))",
                "     keys = _.flatten(keys)",
                "-    keys = _.uniq(keys).filter(function(key) {",
                "-      return baseCols.indexOf(key) === -1",
                "-    })",
                "-    let columnNames = baseColumnNames.concat(_.map(keys, function(elem, i) {",
                "+    keys = _.uniq(keys).filter((key) => baseCols.indexOf(key) === -1)",
                "+    const entityColumnNames = _.map(keys, (elem, i) => {",
                "       return {name: elem, index: i + baseColumnNames.length, aggr: 'sum'}",
                "-    }))",
                "+    })",
                "+    const columnNames = baseColumnNames.concat(entityColumnNames)",
                "     for (let i = 0; i < entities.length; i++) {",
                "-      let entity = entities[i]",
                "-      let col = []",
                "-      let col2 = []",
                "+      const entity = entities[i]",
                "+      const col = []",
                "       entity.data = entity.data || {}",
                "       for (let j = 0; j < columnNames.length; j++) {",
                "-        let name = columnNames[j].name",
                "-        let value = name in entity && internalFieldsToJump.indexOf(name) === -1",
                "+        const name = columnNames[j].name",
                "+        const value = name in entity && internalFieldsToJump.indexOf(name) === -1",
                "             ? entity[name] : entity.data[name]",
                "-        let parsedValue = value === null || value === undefined ? '' : value",
                "+        const parsedValue = value === null || value === undefined ? '' : value",
                "         col.push(parsedValue)",
                "-        col2.push({key: name, value: parsedValue})",
                "       }",
                "@@ -86,60 +84,2 @@ export default class NetworkData extends TableData {",
                "   }",
                "-",
                "-  setNodesDefaults() {",
                "-  }",
                "-",
                "-  setEdgesDefaults() {",
                "-    this.graph.edges",
                "-      .sort((a, b) => {",
                "-        if (a.source > b.source) {",
                "-          return 1",
                "-        } else if (a.source < b.source) {",
                "-          return -1",
                "-        } else if (a.target > b.target) {",
                "-          return 1",
                "-        } else if (a.target < b.target) {",
                "-          return -1",
                "-        } else {",
                "-          return 0",
                "-        }",
                "-      })",
                "-    this.graph.edges",
                "-      .forEach((edge, index) => {",
                "-        let prevEdge = this.graph.edges[index - 1]",
                "-        edge.count = (index > 0 && +edge.source === +prevEdge.source && +edge.target === +prevEdge.target",
                "-            ? prevEdge.count : 0) + 1",
                "-        edge.totalCount = this.graph.edges",
                "-          .filter((innerEdge) => +edge.source === +innerEdge.source && +edge.target === +innerEdge.target)",
                "-          .length",
                "-      })",
                "-    this.graph.edges",
                "-      .forEach((edge) => {",
                "-        if (typeof +edge.source === 'number') {",
                "-          edge.source = this.graph.nodes.filter((node) => +edge.source === +node.id)[0] || null",
                "-        }",
                "-        if (typeof +edge.target === 'number') {",
                "-          edge.target = this.graph.nodes.filter((node) => +edge.target === +node.id)[0] || null",
                "-        }",
                "-      })",
                "-  }",
                "-",
                "-  getNetworkProperties() {",
                "-    let baseCols = ['id', 'label']",
                "-    let properties = {}",
                "-    this.graph.nodes.forEach(function(node) {",
                "-      let hasLabel = 'label' in node && node.label !== ''",
                "-      if (!hasLabel) {",
                "-        return",
                "-      }",
                "-      let label = node.label",
                "-      let hasKey = hasLabel && label in properties",
                "-      let keys = _.uniq(Object.keys(node.data || {})",
                "-              .concat(hasKey ? properties[label].keys : baseCols))",
                "-      if (!hasKey) {",
                "-        properties[label] = {selected: 'label'}",
                "-      }",
                "-      properties[label].keys = keys",
                "-    })",
                "-    return properties",
                "-  }",
                " }",
                "diff --git a/zeppelin-web/src/app/tabledata/networkdata.test.js b/zeppelin-web/src/app/tabledata/networkdata.test.js",
                "index f8d98a89a..739ac19fe 100644",
                "--- a/zeppelin-web/src/app/tabledata/networkdata.test.js",
                "+++ b/zeppelin-web/src/app/tabledata/networkdata.test.js",
                "@@ -37,3 +37,3 @@ describe('NetworkData build', function() {",
                "-    expect(nd.columns.length).toBe(2)",
                "+    expect(nd.columns.length).toBe(1)",
                "     expect(nd.rows.length).toBe(3)",
                "@@ -42,4 +42,25 @@ describe('NetworkData build', function() {",
                "     expect(nd.graph.edges[0].id).toBe(jsonExpected.edges[0].id)",
                "-    expect(nd.graph.edges[0].source.id).toBe(jsonExpected.nodes[1].id)",
                "-    expect(nd.graph.edges[0].target.id).toBe(jsonExpected.nodes[0].id)",
                "+    expect(nd.graph.edges[0].source).toBe(jsonExpected.edges[0].source)",
                "+    expect(nd.graph.edges[0].target).toBe(jsonExpected.edges[0].target)",
                "+  })",
                "+",
                "+  it('should able to show data fields source and target', function() {",
                "+    let jsonExpected = {nodes: [{id: 1, data: {source: 'Source'}}, {id: 2, data: {target: 'Target'}}],",
                "+      edges: [{source: 2, target: 1, id: 1, data: {source: 'Source Edge Data', target: 'Target Edge Data'}}]}",
                "+    nd.loadParagraphResult({",
                "+      type: DatasetType.NETWORK,",
                "+      msg: JSON.stringify(jsonExpected)",
                "+    })",
                "+",
                "+    expect(nd.columns.length).toBe(3)",
                "+    expect(nd.rows.length).toBe(3)",
                "+    expect(nd.graph.nodes[0].id).toBe(jsonExpected.nodes[0].id)",
                "+    expect(nd.graph.nodes[1].id).toBe(jsonExpected.nodes[1].id)",
                "+    expect(nd.graph.edges[0].id).toBe(jsonExpected.edges[0].id)",
                "+    expect(nd.graph.edges[0].source).toBe(jsonExpected.edges[0].source)",
                "+    expect(nd.graph.edges[0].target).toBe(jsonExpected.edges[0].target)",
                "+    expect(nd.graph.nodes[0].data.source).toBe(jsonExpected.nodes[0].data.source)",
                "+    expect(nd.graph.nodes[1].data.target).toBe(jsonExpected.nodes[1].data.target)",
                "+    expect(nd.graph.edges[0].data.source).toBe(jsonExpected.edges[0].data.source)",
                "+    expect(nd.graph.edges[0].data.target).toBe(jsonExpected.edges[0].data.target)",
                "   })",
                "diff --git a/zeppelin-web/src/app/visualization/builtins/visualization-d3network.js b/zeppelin-web/src/app/visualization/builtins/visualization-d3network.js",
                "index 506b1c5f1..46ee25168 100644",
                "--- a/zeppelin-web/src/app/visualization/builtins/visualization-d3network.js",
                "+++ b/zeppelin-web/src/app/visualization/builtins/visualization-d3network.js",
                "@@ -57,8 +57,19 @@ export default class NetworkVisualization extends Visualization {",
                "     }",
                "-    console.log('Render Graph Visualization')",
                "+    if (!networkData.isRendered) {",
                "+      networkData.isRendered = true",
                "+    } else {",
                "+      return",
                "+    }",
                "+    console.log('Rendering the graph')",
                "-    let transformationConfig = this.transformation.getSetting().scope.config",
                "+    if (networkData.graph.edges.length &&",
                "+        !networkData.isDefaultSet) {",
                "+      networkData.isDefaultSet = true",
                "+      this._setEdgesDefaults(networkData.graph)",
                "+    }",
                "+",
                "+    const transformationConfig = this.transformation.getSetting().scope.config",
                "     console.log('cfg', transformationConfig)",
                "     if (transformationConfig && angular.equals({}, transformationConfig.properties)) {",
                "-      transformationConfig.properties = networkData.getNetworkProperties()",
                "+      transformationConfig.properties = this.getNetworkProperties(networkData.graph)",
                "     }",
                "@@ -67,11 +78,11 @@ export default class NetworkVisualization extends Visualization {",
                "-    let width = this.targetEl.width()",
                "-    let height = this.targetEl.height()",
                "-    let self = this",
                "-    let defaultOpacity = 0",
                "-    let nodeSize = 10",
                "-    let textOffset = 3",
                "-    let linkSize = 10",
                "+    const width = this.targetEl.width()",
                "+    const height = this.targetEl.height()",
                "+    const self = this",
                "+    const defaultOpacity = 0",
                "+    const nodeSize = 10",
                "+    const textOffset = 3",
                "+    const linkSize = 10",
                "-    let arcPath = (leftHand, d) => {",
                "+    const arcPath = (leftHand, d) => {",
                "       let start = leftHand ? d.source : d.target",
                "@@ -86,3 +97,3 @@ export default class NetworkVisualization extends Visualization {",
                "     // Use elliptical arc path segments to doubly-encode directionality.",
                "-    let tick = () => {",
                "+    const tick = () => {",
                "       // Links",
                "@@ -99,3 +110,3 @@ export default class NetworkVisualization extends Visualization {",
                "-    let setOpacity = (scale) => {",
                "+    const setOpacity = (scale) => {",
                "       let opacity = scale >= +transformationConfig.d3Graph.zoom.minScale ? 1 : 0",
                "@@ -107,3 +118,3 @@ export default class NetworkVisualization extends Visualization {",
                "-    let zoom = d3.behavior.zoom()",
                "+    const zoom = d3.behavior.zoom()",
                "       .scaleExtent([1, 10])",
                "@@ -137,9 +148,11 @@ export default class NetworkVisualization extends Visualization {",
                "-    let renderFooterOnClick = (entity, type) => {",
                "-      let footerId = this.containerId + '_footer'",
                "-      let obj = {id: entity.id, label: entity.defaultLabel || entity.label, type: type}",
                "-      let html = [this.$interpolate(['<li><b>{{type}}_id:</b>&nbsp{{id}}</li>',",
                "-        '<li><b>{{type}}_type:</b>&nbsp{{label}}</li>'].join(''))(obj)]",
                "+    const renderFooterOnClick = (entity, type) => {",
                "+      const footerId = this.containerId + '_footer'",
                "+      const obj = {id: entity.id, label: entity.defaultLabel || entity.label, type: type}",
                "+      let html = [`<li><b>${obj.type}_id:</b>&nbsp${obj.id}</li>`]",
                "+      if (obj.label) {",
                "+        html.push(`<li><b>${obj.type}_type:</b>&nbsp${obj.label}</li>`)",
                "+      }",
                "       html = html.concat(_.map(entity.data, (v, k) => {",
                "-        return this.$interpolate('<li><b>{{field}}:</b>&nbsp{{value}}</li>')({field: k, value: v})",
                "+        return `<li><b>${k}:</b>&nbsp${v}</li>`",
                "       }))",
                "@@ -151,3 +164,3 @@ export default class NetworkVisualization extends Visualization {",
                "-    let drag = d3.behavior.drag()",
                "+    const drag = d3.behavior.drag()",
                "       .origin((d) => d)",
                "@@ -173,3 +186,3 @@ export default class NetworkVisualization extends Visualization {",
                "-    let container = this.svg.append('g')",
                "+    const container = this.svg.append('g')",
                "     if (networkData.graph.directed) {",
                "@@ -190,3 +203,3 @@ export default class NetworkVisualization extends Visualization {",
                "     // Links",
                "-    let link = container.append('svg:g')",
                "+    const link = container.append('svg:g')",
                "       .on('click', () => {",
                "@@ -198,5 +211,5 @@ export default class NetworkVisualization extends Visualization {",
                "       .append('g')",
                "-    let getPathId = (d) => this.containerId + '_' + d.source.index + '_' + d.target.index + '_' + d.count",
                "-    let showLabel = (d) => this._showNodeLabel(d)",
                "-    let linkPath = link.append('svg:path')",
                "+    const getPathId = (d) => this.containerId + '_' + d.source.index + '_' + d.target.index + '_' + d.count",
                "+    const showLabel = (d) => this._showNodeLabel(d)",
                "+    const linkPath = link.append('svg:path')",
                "       .attr('class', 'link')",
                "@@ -204,3 +217,3 @@ export default class NetworkVisualization extends Visualization {",
                "       .attr('marker-end', `url(#arrowMarker-${this.containerId})`)",
                "-    let textPath = link.append('svg:path')",
                "+    const textPath = link.append('svg:path')",
                "       .attr('id', getPathId)",
                "@@ -220,3 +233,3 @@ export default class NetworkVisualization extends Visualization {",
                "     // Nodes",
                "-    let circle = container.append('svg:g')",
                "+    const circle = container.append('svg:g')",
                "       .on('click', () => {",
                "@@ -231,3 +244,3 @@ export default class NetworkVisualization extends Visualization {",
                "       .call(drag)",
                "-    let text = container.append('svg:g').selectAll('g')",
                "+    const text = container.append('svg:g').selectAll('g')",
                "       .data(self.force.nodes())",
                "@@ -254,4 +267,4 @@ export default class NetworkVisualization extends Visualization {",
                "   _showNodeLabel(d) {",
                "-    let transformationConfig = this.transformation.getSetting().scope.config",
                "-    let selectedLabel = (transformationConfig.properties[d.label] || {selected: 'label'}).selected",
                "+    const transformationConfig = this.transformation.getSetting().scope.config",
                "+    const selectedLabel = (transformationConfig.properties[d.label] || {selected: 'label'}).selected",
                "     return d.data[selectedLabel] || d[selectedLabel]",
                "@@ -262,2 +275,62 @@ export default class NetworkVisualization extends Visualization {",
                "   }",
                "+",
                "+  setNodesDefaults() {",
                "+  }",
                "+",
                "+  _setEdgesDefaults(graph) {",
                "+    graph.edges",
                "+      .sort((a, b) => {",
                "+        if (a.source > b.source) {",
                "+          return 1",
                "+        } else if (a.source < b.source) {",
                "+          return -1",
                "+        } else if (a.target > b.target) {",
                "+          return 1",
                "+        } else if (a.target < b.target) {",
                "+          return -1",
                "+        } else {",
                "+          return 0",
                "+        }",
                "+      })",
                "+    graph.edges",
                "+      .forEach((edge, index) => {",
                "+        let prevEdge = graph.edges[index - 1]",
                "+        edge.count = (index > 0 && +edge.source === +prevEdge.source && +edge.target === +prevEdge.target",
                "+            ? prevEdge.count : 0) + 1",
                "+        edge.totalCount = graph.edges",
                "+          .filter((innerEdge) => +edge.source === +innerEdge.source && +edge.target === +innerEdge.target)",
                "+          .length",
                "+      })",
                "+    graph.edges",
                "+      .forEach((edge) => {",
                "+        if (typeof +edge.source === 'number') {",
                "+          // edge.source = graph.nodes.filter((node) => +edge.source === +node.id)[0] || null",
                "+          edge.source = _.find(graph.nodes, (node) => +edge.source === +node.id)",
                "+        }",
                "+        if (typeof +edge.target === 'number') {",
                "+          // edge.target = graph.nodes.filter((node) => +edge.target === +node.id)[0] || null",
                "+          edge.target = _.find(graph.nodes, (node) => +edge.target === +node.id)",
                "+        }",
                "+      })",
                "+  }",
                "+",
                "+  getNetworkProperties(graph) {",
                "+    const baseCols = ['id', 'label']",
                "+    const properties = {}",
                "+    graph.nodes.forEach(function(node) {",
                "+      const hasLabel = 'label' in node && node.label !== ''",
                "+      if (!hasLabel) {",
                "+        return",
                "+      }",
                "+      const label = node.label",
                "+      const hasKey = hasLabel && label in properties",
                "+      const keys = _.uniq(Object.keys(node.data || {})",
                "+              .concat(hasKey ? properties[label].keys : baseCols))",
                "+      if (!hasKey) {",
                "+        properties[label] = {selected: 'label'}",
                "+      }",
                "+      properties[label].keys = keys",
                "+    })",
                "+    return properties",
                "+  }",
                " }"
            ],
            "changed_files": [
                "zeppelin-web/src/app/tabledata/networkdata.js",
                "zeppelin-web/src/app/tabledata/networkdata.test.js",
                "zeppelin-web/src/app/visualization/builtins/visualization-d3network.js"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3038": ""
            },
            "ghissue_refs": {
                "2653": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: user",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3038",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2653",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "83164c84313a4594baa3127c05f83411dd3f05d6",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1510659738,
            "hunks": 7,
            "message": "ZEPPELIN-3037 Configure Http Request Header Size Limit for Jetty ### What is this PR for? In some deployment scenarios it is necessary to increase jetty.request.header.size, which default value is 8192. This will reduce the chance of HTTP Error 413 Request entity too large. There should be a mechanism to configure this setting. ### What type of PR is it? [Feature] ### What is the Jira issue? * https://issues.apache.org/jira/browse/ZEPPELIN-3037 ### How should this be tested? * There is an integration test (automated unit test included) for testing this feature. * To test manually, after increasing setting, make any http request to zeppelin with a request header bigger than 8K , you should not get an HTTP Error 413 Request entity too large. ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? Yes. Author: byamthev <byamthev@gmail.com> Closes #2663 from byamthev/zeppelin3037 and squashes the following commits: 8ff2620 [byamthev] [ZEPPELIN-3037] Configure Http Request Header Size Limit for Jetty",
            "diff": [
                "diff --git a/conf/zeppelin-site.xml.template b/conf/zeppelin-site.xml.template",
                "index b59d87837..3c5bbeae5 100755",
                "--- a/conf/zeppelin-site.xml.template",
                "+++ b/conf/zeppelin-site.xml.template",
                "@@ -445,2 +445,11 @@",
                " -->",
                "+",
                "+<!--",
                "+<property>",
                "+    <name>zeppelin.server.jetty.request.header.size</name>",
                "+    <value>8192</value>",
                "+    <description>Http Request Header Size Limit (to prevent HTTP 413)</description>",
                "+</property>",
                "+-->",
                "+",
                " <!--",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "index f234ed469..438c661f8 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "@@ -527,2 +527,6 @@ public class ZeppelinConfiguration extends XMLConfiguration {",
                "+  public Integer getJettyRequestHeaderSize() {",
                "+    return getInt(ConfVars.ZEPPELIN_SERVER_JETTY_REQUEST_HEADER_SIZE);",
                "+  }",
                "+",
                "@@ -704,2 +708,3 @@ public class ZeppelinConfiguration extends XMLConfiguration {",
                "     ZEPPELIN_SERVER_JETTY_NAME(\"zeppelin.server.jetty.name\", null),",
                "+    ZEPPELIN_SERVER_JETTY_REQUEST_HEADER_SIZE(\"zeppelin.server.jetty.request.header.size\", 8192),",
                "     ZEPPELIN_SERVER_STRICT_TRANSPORT(\"zeppelin.server.strict.transport\", \"max-age=631138519\"),",
                "diff --git a/zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java b/zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java",
                "index f27bfbe27..0b66a437d 100644",
                "--- a/zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java",
                "+++ b/zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java",
                "@@ -58,8 +58,3 @@ import org.apache.zeppelin.utils.SecurityUtils;",
                " import org.eclipse.jetty.http.HttpVersion;",
                "-import org.eclipse.jetty.server.HttpConfiguration;",
                "-import org.eclipse.jetty.server.HttpConnectionFactory;",
                "-import org.eclipse.jetty.server.SecureRequestCustomizer;",
                "-import org.eclipse.jetty.server.Server;",
                "-import org.eclipse.jetty.server.ServerConnector;",
                "-import org.eclipse.jetty.server.SslConnectionFactory;",
                "+import org.eclipse.jetty.server.*;",
                " import org.eclipse.jetty.server.handler.ContextHandlerCollection;",
                "@@ -243,3 +238,2 @@ public class ZeppelinServer extends Application {",
                "       httpConfig.setOutputBufferSize(32768);",
                "-      httpConfig.setRequestHeaderSize(8192);",
                "       httpConfig.setResponseHeaderSize(8192);",
                "@@ -262,2 +256,3 @@ public class ZeppelinServer extends Application {",
                "+    configureRequestHeaderSize(conf, connector);",
                "     // Set some timeout options to make debugging easier.",
                "@@ -278,2 +273,10 @@ public class ZeppelinServer extends Application {",
                "+  private static void configureRequestHeaderSize(ZeppelinConfiguration conf,",
                "+                                                 ServerConnector connector) {",
                "+    HttpConnectionFactory cf = (HttpConnectionFactory)",
                "+            connector.getConnectionFactory(HttpVersion.HTTP_1_1.toString());",
                "+    int requestHeaderSize = conf.getJettyRequestHeaderSize();",
                "+    cf.getHttpConfiguration().setRequestHeaderSize(requestHeaderSize);",
                "+  }",
                "+",
                "   private static void setupNotebookServer(WebAppContext webapp,"
            ],
            "changed_files": [
                "conf/zeppelin-site.xml.template",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3037": ""
            },
            "ghissue_refs": {
                "2663": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: default",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3037",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2663",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7db9ab47224d29c5f53b81bb65383c3581f8817f",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1511186079,
            "hunks": 3,
            "message": "[ZEPPELIN-2995] \"auto-restart interpreter on cron execution\" should restart interpreter to specific note, not all interpreters ### What is this PR for? Make \"auto-restart interpreter on cron execution\" restart the interpreters which are specific to the note, not all interpreters. This issue was reported by https://github.com/apache/zeppelin/pull/1302#issuecomment-336521420. ### What type of PR is it? [Bug Fix] ### Todos ### What is the Jira issue? * https://issues.apache.org/jira/browse/ZEPPELIN-2995 ### How should this be tested? * Tested Manually.    * I confirmed that the \"auto-restart interpreter on cron execution\" feature restarted only the interpreters which were specific to the notebook. ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? No. * Is there breaking changes for older versions? No. * Does this needs documentation? No. Author: Keiji Yoshida <kjmrknsn@gmail.com> Closes #2681 from kjmrknsn/ZEPPELIN-2995 and squashes the following commits: 43765a5 [Keiji Yoshida] [ZEPPELIN-2995] \"auto-restart interpreter on cron execution\" should restart interpreter to specific note, not all interpreters",
            "diff": [
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java",
                "index 3baf4f16c..8de981e6e 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java",
                "@@ -903,6 +903,10 @@ public class Notebook implements NoteEventListener {",
                "       boolean releaseResource = false;",
                "+      String cronExecutingUser = null;",
                "       try {",
                "         Map<String, Object> config = note.getConfig();",
                "-        if (config != null && config.containsKey(\"releaseresource\")) {",
                "-          releaseResource = (boolean) note.getConfig().get(\"releaseresource\");",
                "+        if (config != null) {",
                "+          if (config.containsKey(\"releaseresource\")) {",
                "+            releaseResource = (boolean) config.get(\"releaseresource\");",
                "+          }",
                "+          cronExecutingUser = (String) config.get(\"cronExecutingUser\");",
                "         }",
                "@@ -915,3 +919,4 @@ public class Notebook implements NoteEventListener {",
                "           try {",
                "-            notebook.getInterpreterSettingManager().restart(setting.getId());",
                "+            notebook.getInterpreterSettingManager().restart(setting.getId(), noteId,",
                "+                    cronExecutingUser != null ? cronExecutingUser : \"anonymous\");",
                "           } catch (InterpreterException e) {"
            ],
            "changed_files": [
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-2995": ""
            },
            "ghissue_refs": {
                "2681": "[ZEPPELIN-1306] Interpreter restarts on a note. #1302"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: cron",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-2995",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2681",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2d36f848fc1936a1c8090cf1220b9cd8b089665b",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1515687044,
            "hunks": 8,
            "message": "[ZEPPELIN-3098] Livy Interpreter fails if row contains newline or tab ### What is this PR for? This PR fixes the issue of newlines and tabs breaking results in the SQL interpreter in Livy. The Livy interpreter will return incorrect results if a row contains \\n or \\t characters. In the case of the newline, the result will be: Line is missing from results if the \\n appears anywhere but the end of a cell `String index out of range: 17` if it appears at the end of a cell In the case of the tab, the result will be misaligned columns if the tab appears in the middle of a cell The output showing these error is attached to the Jira. I have changed the parsing and any newline or tab characters will be escaped ### What type of PR is it? Bug Fix ### What is the Jira issue? https://issues.apache.org/jira/browse/ZEPPELIN-3098 ### How should this be tested? Unittests have been added ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Alex Bush <alex.bush@coxauto.co.uk> Author: Alex Bush <bushnoh@users.noreply.github.com> Closes #2701 from bushnoh/zeppelin-3098 and squashes the following commits: 9f2f6e3 [Alex Bush] Merge pull request #3 from apache/master 14e120d [Alex Bush] Merge pull request #2 from apache/master 46981fd [Alex Bush] Merge pull request #1 from apache/master ee5a41b [Alex Bush] Merge remote-tracking branch 'upstream/master' 67a93b5 [Alex Bush] Merge branch 'master' of https://github.com/bushnoh/zeppelin 31cdbdc [Alex Bush] Added another comment explaining the regexp change d054af0 [Alex Bush] Force a dummy change for Travis 64a42be [Alex Bush] Fix for newline and tab in data",
            "diff": [
                "diff --git a/livy/src/main/java/org/apache/zeppelin/livy/LivySparkSQLInterpreter.java b/livy/src/main/java/org/apache/zeppelin/livy/LivySparkSQLInterpreter.java",
                "index b93626d45..7b2d7d666 100644",
                "--- a/livy/src/main/java/org/apache/zeppelin/livy/LivySparkSQLInterpreter.java",
                "+++ b/livy/src/main/java/org/apache/zeppelin/livy/LivySparkSQLInterpreter.java",
                "@@ -20,2 +20,3 @@ package org.apache.zeppelin.livy;",
                " import org.apache.commons.lang.StringUtils;",
                "+import static org.apache.commons.lang.StringEscapeUtils.escapeJavaScript;",
                " import org.apache.zeppelin.interpreter.*;",
                "@@ -28,3 +29,2 @@ import java.util.Properties;",
                "-",
                " /**",
                "@@ -168,3 +168,6 @@ public class LivySparkSQLInterpreter extends BaseLivyInterpreter {",
                "     List<String> rows = new ArrayList<>();",
                "-    String[] lines = output.split(\"\\n\");",
                "+    // Get first line by breaking on \\n. We can guarantee",
                "+    // that \\n marks the end of the first line, but not for",
                "+    // subsequent lines (as it could be in the cells)",
                "+    String firstLine = output.split(\"\\n\", 2)[0];",
                "     // at least 4 lines, even for empty sql output",
                "@@ -175,4 +178,4 @@ public class LivySparkSQLInterpreter extends BaseLivyInterpreter {",
                "-    // use the first line to determinte the position of feach cell",
                "-    String[] tokens = StringUtils.split(lines[0], \"\\\\+\");",
                "+    // use the first line to determine the position of each cell",
                "+    String[] tokens = StringUtils.split(firstLine, \"\\\\+\");",
                "     // pairs keeps the start/end position of each cell. We parse it from the first row",
                "@@ -188,10 +191,16 @@ public class LivySparkSQLInterpreter extends BaseLivyInterpreter {",
                "-    for (String line : lines) {",
                "+    // Use the header line to determine the position",
                "+    // of subsequent lines",
                "+    int lineStart = 0;",
                "+    int lineEnd = firstLine.length();",
                "+    while (lineEnd < output.length()) {",
                "       // Only match format \"|....|\"",
                "       // skip line like \"+---+---+\" and \"only showing top 1 row\"",
                "-      if (line.matches(\"^\\\\|.*\\\\|$\")) {",
                "+      String line = output.substring(lineStart, lineEnd);",
                "+      // Use the DOTALL regex mode to match newlines",
                "+      if (line.matches(\"(?s)^\\\\|.*\\\\|$\")) {",
                "         List<String> cells = new ArrayList<>();",
                "         for (Pair pair : pairs) {",
                "-          // strip the blank space around the cell",
                "-          cells.add(line.substring(pair.start, pair.end).trim());",
                "+          // strip the blank space around the cell and escape the string",
                "+          cells.add(escapeJavaScript(line.substring(pair.start, pair.end)).trim());",
                "         }",
                "@@ -199,2 +208,5 @@ public class LivySparkSQLInterpreter extends BaseLivyInterpreter {",
                "       }",
                "+      // Determine position of next line skipping newline",
                "+      lineStart += firstLine.length() + 1;",
                "+      lineEnd = lineStart + firstLine.length();",
                "     }"
            ],
            "changed_files": [
                "livy/src/main/java/org/apache/zeppelin/livy/LivySparkSQLInterpreter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3098": ""
            },
            "ghissue_refs": {
                "2701": "",
                "3": "[ZEPPELIN-7] Support yarn without SPARK_YARN_JAR #4 [ZEPPELIN-1495] Add Good Practice #4 #1463 [ZEPPELIN-1470] limiting results from jdbc #2428",
                "2": "minor doc update for running on YARN ZEPL/zeppelin#402 [ZEPPELIN-7] Support yarn without SPARK_YARN_JAR #4 Notebook Authorization #681 Buffer append output results + fix extra incorrect results #1283 [ZEPPELIN-682] New interpreter for Apache Beam (incubating)/DataFlow #1334 ZEPPELIN-1897 REST API - Update paragraph text/title via API #2604 [ZEPPELIN-3778] Cluster synchronize notes & authorization #3387",
                "1": "Sync versions with spark ZEPL/zeppelin#394 Buffer append output results + fix extra incorrect results #1283 [Zeppelin-1496] Apply Zeppelin-Web Good Practice Guide #1 to the code #1469 ZEPPELIN-1692: Ability to access Spark jobs UI from the paragraph #1663 [ZEPPELIN-3778] Cluster synchronize notes & authorization #3387"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: user",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3098",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2701, 3, 2, 1",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "862871f67afdc3a6357a759e1543f821bed7d7d2",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1506391968,
            "hunks": 4,
            "message": "ZEPPELIN-2953 Allow custom http header for livy interpreter ### What is this PR for? This PR is trying to allow user to add custom http headers when calling livy rest api. User just need to specify `zeppelin.livy.http.headers` in livy interpreter setting ### What type of PR is it? [Feature] ### Todos * [ ] - Task ### What is the Jira issue? * https://issues.apache.org/jira/browse/ZEPPELIN-2953 ### How should this be tested? Outline the steps to test the PR here. ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Jeff Zhang <zjffdu@apache.org> Closes #2600 from zjffdu/ZEPPELIN-2953 and squashes the following commits: 720d8d0 [Jeff Zhang] ZEPPELIN-2953 Allow custom http header for livy interpreter",
            "diff": [
                "diff --git a/livy/src/main/java/org/apache/zeppelin/livy/BaseLivyInterpreter.java b/livy/src/main/java/org/apache/zeppelin/livy/BaseLivyInterpreter.java",
                "index ccab09bfc..b7253485c 100644",
                "--- a/livy/src/main/java/org/apache/zeppelin/livy/BaseLivyInterpreter.java",
                "+++ b/livy/src/main/java/org/apache/zeppelin/livy/BaseLivyInterpreter.java",
                "@@ -64,2 +64,4 @@ import java.util.Set;",
                " import java.util.concurrent.ConcurrentHashMap;",
                "+import java.util.regex.Matcher;",
                "+import java.util.regex.Pattern;",
                "@@ -82,2 +84,3 @@ public abstract class BaseLivyInterpreter extends Interpreter {",
                "   private RestTemplate restTemplate;",
                "+  private Map<String, String> customHeaders = new HashMap<>();",
                "@@ -98,2 +101,29 @@ public abstract class BaseLivyInterpreter extends Interpreter {",
                "     this.restTemplate = createRestTemplate();",
                "+    if (!StringUtils.isBlank(property.getProperty(\"zeppelin.livy.http.headers\"))) {",
                "+      String[] headers = property.getProperty(\"zeppelin.livy.http.headers\").split(\";\");",
                "+      for (String header : headers) {",
                "+        String[] splits = header.split(\":\", -1);",
                "+        if (splits.length != 2) {",
                "+          throw new RuntimeException(\"Invalid format of http headers: \" + header +",
                "+              \", valid http header format is HEADER_NAME:HEADER_VALUE\");",
                "+        }",
                "+        customHeaders.put(splits[0].trim(), envSubstitute(splits[1].trim()));",
                "+      }",
                "+    }",
                "+  }",
                "+",
                "+  private String envSubstitute(String value) {",
                "+    String newValue = new String(value);",
                "+    Pattern pattern = Pattern.compile(\"\\\\$\\\\{(.*)\\\\}\");",
                "+    Matcher matcher = pattern.matcher(value);",
                "+    while (matcher.find()) {",
                "+      String env = matcher.group(1);",
                "+      newValue = newValue.replace(\"${\" + env + \"}\", System.getenv(env));",
                "+    }",
                "+    return newValue;",
                "+  }",
                "+",
                "+  // only for testing",
                "+  Map<String, String> getCustomHeaders() {",
                "+    return customHeaders;",
                "   }",
                "@@ -525,2 +555,5 @@ public abstract class BaseLivyInterpreter extends Interpreter {",
                "     headers.add(\"X-Requested-By\", \"zeppelin\");",
                "+    for (Map.Entry<String, String> entry : customHeaders.entrySet()) {",
                "+      headers.add(entry.getKey(), entry.getValue());",
                "+    }",
                "     ResponseEntity<String> response = null;"
            ],
            "changed_files": [
                "livy/src/main/java/org/apache/zeppelin/livy/BaseLivyInterpreter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-2953": ""
            },
            "ghissue_refs": {
                "2600": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: allow, user",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-2953",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2600",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f8cd64cb50028031ab321144697d98822a60c63f",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1513055734,
            "hunks": 6,
            "message": "[ZEPPELIN-3091] Correct aggregation functionality in charts ### What is this PR for? The aggregation functions interpret NaN columns as 1 which leads to incorrect output being shown in charts. This PR fixes this by correcting the sum, min, max and average aggregation method. ### What type of PR is it? Bug Fix ### Todos ### What is the Jira issue? https://issues.apache.org/jira/browse/ZEPPELIN-3091 ### How should this be tested? * Update the data field of a paragraph results with %table to contain null values, e.g. `\"data\": \"age\\tvalue\\n19\\t4\\n20\\t3\\n21\\t7\\n22\\t9\\n23\\t20\\n24\\t24\\n25\\t44\\n26\\t77\\n27\\t94\\n28\\t103\\n29\\t97\\n20\\t5\\n20\\tnull\\n\"` The \"null\" values should be ignored for sum, min, max but included for count (and hence average). ### Screenshots (if appropriate) ![correct_sum](https://user-images.githubusercontent.com/6438072/33609178-14e05988-d9ed-11e7-9f1b-99e0141c5153.png) ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Naman Mishra <namanmishra1991@gmail.com> Closes #2696 from namanmishra91/ZEPPELIN-3091 and squashes the following commits: d8a57c238 [Naman Mishra] Add test 38ad39c65 [Naman Mishra] Merge branch 'master' into ZEPPELIN-3091 568ae3f2a [Naman Mishra] Correct aggregation functionality in charts",
            "diff": [
                "diff --git a/zeppelin-web/src/app/tabledata/pivot.js b/zeppelin-web/src/app/tabledata/pivot.js",
                "index a0f61b219..da2990043 100644",
                "--- a/zeppelin-web/src/app/tabledata/pivot.js",
                "+++ b/zeppelin-web/src/app/tabledata/pivot.js",
                "@@ -140,4 +140,4 @@ export default class PivotTransformation extends Transformation {",
                "       sum: function (a, b) {",
                "-        let varA = (a !== undefined) ? (isNaN(a) ? 1 : parseFloat(a)) : 0",
                "-        let varB = (b !== undefined) ? (isNaN(b) ? 1 : parseFloat(b)) : 0",
                "+        let varA = (a !== undefined) ? (isNaN(a) ? 0 : parseFloat(a)) : 0",
                "+        let varB = (b !== undefined) ? (isNaN(b) ? 0 : parseFloat(b)) : 0",
                "         return varA + varB",
                "@@ -150,14 +150,26 @@ export default class PivotTransformation extends Transformation {",
                "       min: function (a, b) {",
                "-        let varA = (a !== undefined) ? (isNaN(a) ? 1 : parseFloat(a)) : 0",
                "-        let varB = (b !== undefined) ? (isNaN(b) ? 1 : parseFloat(b)) : 0",
                "-        return Math.min(varA, varB)",
                "+        let aIsValid = isValidNumber(a)",
                "+        let bIsValid = isValidNumber(b)",
                "+        if (!aIsValid) {",
                "+          return parseFloat(b)",
                "+        } else if (!bIsValid) {",
                "+          return parseFloat(a)",
                "+        } else {",
                "+          return Math.min(parseFloat(a), parseFloat(b))",
                "+        }",
                "       },",
                "       max: function (a, b) {",
                "-        let varA = (a !== undefined) ? (isNaN(a) ? 1 : parseFloat(a)) : 0",
                "-        let varB = (b !== undefined) ? (isNaN(b) ? 1 : parseFloat(b)) : 0",
                "-        return Math.max(varA, varB)",
                "+        let aIsValid = isValidNumber(a)",
                "+        let bIsValid = isValidNumber(b)",
                "+        if (!aIsValid) {",
                "+          return parseFloat(b)",
                "+        } else if (!bIsValid) {",
                "+          return parseFloat(a)",
                "+        } else {",
                "+          return Math.max(parseFloat(a), parseFloat(b))",
                "+        }",
                "       },",
                "       avg: function (a, b, c) {",
                "-        let varA = (a !== undefined) ? (isNaN(a) ? 1 : parseFloat(a)) : 0",
                "-        let varB = (b !== undefined) ? (isNaN(b) ? 1 : parseFloat(b)) : 0",
                "+        let varA = (a !== undefined) ? (isNaN(a) ? 0 : parseFloat(a)) : 0",
                "+        let varB = (b !== undefined) ? (isNaN(b) ? 0 : parseFloat(b)) : 0",
                "         return varA + varB",
                "@@ -166,2 +178,6 @@ export default class PivotTransformation extends Transformation {",
                "+    let isValidNumber = function(num) {",
                "+      return num !== undefined && !isNaN(num)",
                "+    }",
                "+",
                "     let aggrFuncDiv = {",
                "diff --git a/zeppelin-web/src/app/tabledata/tabledata.test.js b/zeppelin-web/src/app/tabledata/tabledata.test.js",
                "index 3de2fa3fb..e24b07339 100644",
                "--- a/zeppelin-web/src/app/tabledata/tabledata.test.js",
                "+++ b/zeppelin-web/src/app/tabledata/tabledata.test.js",
                "@@ -85,2 +85,47 @@ describe('PivotTransformation build', function() {",
                "   })",
                "+",
                "+  it('should aggregate values correctly', function() {",
                "+    let td = new TableData()",
                "+    td.loadParagraphResult({",
                "+      type: 'TABLE',",
                "+      msg: 'key\\tvalue\\na\\t10\\na\\tnull\\na\\t0\\na\\t1\\n'",
                "+    })",
                "+",
                "+    let config = {",
                "+      common: {",
                "+        pivot: {",
                "+          keys: [",
                "+            {",
                "+              'name': 'key',",
                "+              'index': 0.0,",
                "+            }",
                "+          ],",
                "+          groups: [],",
                "+          values: [",
                "+            {",
                "+              'name': 'value',",
                "+              'index': 1.0,",
                "+              'aggr': 'sum'",
                "+            }",
                "+          ]",
                "+        }",
                "+      }",
                "+    }",
                "+",
                "+    pt.setConfig(config)",
                "+    let transformed = pt.transform(td)",
                "+    expect(transformed.rows['a']['value(sum)'].value).toBe(11)",
                "+",
                "+    pt.config.common.pivot.values[0].aggr = 'max'",
                "+    transformed = pt.transform(td)",
                "+    expect(transformed.rows['a']['value(max)'].value).toBe(10)",
                "+",
                "+    pt.config.common.pivot.values[0].aggr = 'min'",
                "+    transformed = pt.transform(td)",
                "+    expect(transformed.rows['a']['value(min)'].value).toBe(0)",
                "+",
                "+    pt.config.common.pivot.values[0].aggr = 'count'",
                "+    transformed = pt.transform(td)",
                "+    expect(transformed.rows['a']['value(count)'].value).toBe(4)",
                "+  })",
                " })"
            ],
            "changed_files": [
                "zeppelin-web/src/app/tabledata/pivot.js",
                "zeppelin-web/src/app/tabledata/tabledata.test.js"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3091": ""
            },
            "ghissue_refs": {
                "2696": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: paragraph, user",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3091",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2696",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2d60d0b678ed72426bed0e90e3954b1d763044b6",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1511061011,
            "hunks": 1,
            "message": "[ZEPPELIN-3063] Notebook loses formatting when importing from 0.6.x Notebook loses formatting (shows table instead of the graph) when importing from 0.6.x if the respective paragraph doesn't have result in it. [Bug Fix] * [ZEPPELIN-3063](https://issues.apache.org/jira/browse/ZEPPELIN-3063) Before: ![before](https://user-images.githubusercontent.com/674497/32978117-8d4d581a-cc61-11e7-8b48-af389f4be90d.gif) After: ![after](https://user-images.githubusercontent.com/674497/32978119-95ca87c4-cc61-11e7-8276-9e1eab8711ef.gif) * Try importing [this](https://issues.apache.org/jira/secure/attachment/12898326/oldnotebook-0.6-clear.json) notebook, and then on running this notebook, the second paragraph should display BarChart instead of a table. Author: Prabhjyot <prabhjyotsingh@gmail.com> Author: prabhjyotsingh <prabhjyotsingh@gmail.com> Closes #2678 from prabhjyotsingh/ZEPPELIN-3063 and squashes the following commits: 3824eed01 [Prabhjyot] Add comment support for 0.6 1975c74e7 [prabhjyotsingh] ZEPPELIN-3063: Notebook loses formatting when importing from 0.6.x Change-Id: Ife7b557f9517fb6b076cd532354d2b431ed81a12",
            "diff": [
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java",
                "index c1dc46ca2..3baf4f16c 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java",
                "@@ -447,2 +447,21 @@ public class Notebook implements NoteEventListener {",
                "             }",
                "+            config.put(\"results\", results);",
                "+          }",
                "+        } else if (ret == null && p.getConfig() != null) {",
                "+          //ZEPPELIN-3063 Notebook loses formatting when importing from 0.6.x",
                "+          if (p.getConfig().get(\"graph\") != null && p.getConfig().get(\"graph\") instanceof Map",
                "+            && !((Map) p.getConfig().get(\"graph\")).get(\"mode\").equals(\"table\")) {",
                "+            Map<String, Object> config = p.getConfig();",
                "+            Object graph = config.remove(\"graph\");",
                "+            Object apps = config.remove(\"apps\");",
                "+            Object helium = config.remove(\"helium\");",
                "+",
                "+            List<Object> results = new LinkedList<>();",
                "+",
                "+            HashMap<Object, Object> res = new HashMap<>();",
                "+            res.put(\"graph\", graph);",
                "+            res.put(\"apps\", apps);",
                "+            res.put(\"helium\", helium);",
                "+            results.add(res);",
                "+",
                "             config.put(\"results\", results);"
            ],
            "changed_files": [
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3063": ""
            },
            "ghissue_refs": {
                "2678": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: paragraph, user",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3063",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2678",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "549bce6738ffd7f460867d3f5ee00a9e2ec14125",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1512458660,
            "hunks": 10,
            "message": "[ZEPPELIN-3014] NPE bug fix and Error message enhancement with Kylin Interpreter ### What is this PR for? A few sentences describing the overall goals of the pull request's commits. First time? Check out the contributing guide - https://zeppelin.apache.org/contribution/contributions.html ### What type of PR is it? Bug Fix ### Todos * [ ] - Task ### What is the Jira issue? * https://issues.apache.org/jira/browse/ZEPPELIN-3014 ### How should this be tested? *  Setup Travis CI as described on https://zeppelin.apache.org/contribution/contributions.html#continuous-integration * Use existing unit tests in kylin module. ### Screenshots (if appropriate) #### before: NPE when result set is empty ![image](https://user-images.githubusercontent.com/18542573/32154048-f1b8ba58-bcfb-11e7-98cc-98cdf484f2d5.png) #### after: no NPE when result set is empty, just an empty table ![image](https://user-images.githubusercontent.com/18542573/32154069-110215d0-bcfc-11e7-87e9-cc049001f1c7.png) #### before: when query fails, only error code is returned, no error message ![image](https://user-images.githubusercontent.com/18542573/32154088-29651938-bcfc-11e7-9e66-cd2cfccba054.png) #### after: when query fails, both error code and error message are displayed to users ![image](https://user-images.githubusercontent.com/18542573/32154096-3d3ab01c-bcfc-11e7-8cf3-d710d96b8c5a.png) ### Questions: * Does the licenses files need update? No. * Is there breaking changes for older versions? No. * Does this needs documentation? No. Author: Liu <jinxliu@ebay.com> Closes #2645 from jinxliu/kylin-intp-new and squashes the following commits: d5692bf [Liu] refactor 85b6424 [Liu] add test for empty result set 4596470 [Liu] ZEPPELIN-3014: NPE bug fix and Error message enhancement with Kylin Interpreter",
            "diff": [
                "diff --git a/kylin/src/main/java/org/apache/zeppelin/kylin/KylinErrorResponse.java b/kylin/src/main/java/org/apache/zeppelin/kylin/KylinErrorResponse.java",
                "new file mode 100644",
                "index 000000000..00439e8c6",
                "--- /dev/null",
                "+++ b/kylin/src/main/java/org/apache/zeppelin/kylin/KylinErrorResponse.java",
                "@@ -0,0 +1,63 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ * http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.kylin;",
                "+",
                "+import com.google.gson.Gson;",
                "+import com.google.gson.JsonSyntaxException;",
                "+import org.apache.zeppelin.common.JsonSerializable;",
                "+",
                "+/**",
                "+ * class for Kylin Error Response.",
                "+ */",
                "+class KylinErrorResponse implements JsonSerializable {",
                "+  private static final Gson gson = new Gson();",
                "+",
                "+  private String stacktrace;",
                "+  private String exception;",
                "+  private String url;",
                "+  private String code;",
                "+  private Object data;",
                "+  private String msg;",
                "+",
                "+  public KylinErrorResponse(String stacktrace, String exception, String url,",
                "+      String code, Object data, String msg) {",
                "+    this.stacktrace = stacktrace;",
                "+    this.exception = exception;",
                "+    this.url = url;",
                "+    this.code = code;",
                "+    this.data = data;",
                "+    this.msg = msg;",
                "+  }",
                "+",
                "+  public String getException() {",
                "+    return exception;",
                "+  }",
                "+",
                "+  public String toJson() {",
                "+    return gson.toJson(this);",
                "+  }",
                "+",
                "+  public static KylinErrorResponse fromJson(String json) {",
                "+    try {",
                "+      return gson.fromJson(json, KylinErrorResponse.class);",
                "+    } catch (JsonSyntaxException ex) {",
                "+      return null;",
                "+    }",
                "+  }",
                "+",
                "+}",
                "diff --git a/kylin/src/main/java/org/apache/zeppelin/kylin/KylinInterpreter.java b/kylin/src/main/java/org/apache/zeppelin/kylin/KylinInterpreter.java",
                "index 6b68d288e..c7cd689a7 100755",
                "--- a/kylin/src/main/java/org/apache/zeppelin/kylin/KylinInterpreter.java",
                "+++ b/kylin/src/main/java/org/apache/zeppelin/kylin/KylinInterpreter.java",
                "@@ -20,2 +20,3 @@ package org.apache.zeppelin.kylin;",
                " import org.apache.commons.codec.binary.Base64;",
                "+import org.apache.commons.io.IOUtils;",
                " import org.apache.http.HttpResponse;",
                "@@ -32,5 +33,3 @@ import org.slf4j.LoggerFactory;",
                "-import java.io.BufferedReader;",
                " import java.io.IOException;",
                "-import java.io.InputStreamReader;",
                " import java.util.List;",
                "@@ -168,24 +167,38 @@ public class KylinInterpreter extends Interpreter {",
                "   private InterpreterResult executeQuery(String sql) throws IOException {",
                "-",
                "     HttpResponse response = prepareRequest(sql);",
                "+    String result;",
                "-    if (response.getStatusLine().getStatusCode() != 200) {",
                "-      logger.error(\"failed to execute query: \" + response.getEntity().getContent().toString());",
                "-      return new InterpreterResult(InterpreterResult.Code.ERROR,",
                "-          \"Failed : HTTP error code \" + response.getStatusLine().getStatusCode());",
                "-    }",
                "-",
                "-    BufferedReader br = new BufferedReader(",
                "-        new InputStreamReader((response.getEntity().getContent())));",
                "-    StringBuilder sb = new StringBuilder();",
                "+    try {",
                "+      int code = response.getStatusLine().getStatusCode();",
                "+      result = IOUtils.toString(response.getEntity().getContent(), \"UTF-8\");",
                "+",
                "+      if (code != 200) {",
                "+        StringBuilder errorMessage = new StringBuilder(\"Failed : HTTP error code \" + code + \" .\");",
                "+        logger.error(\"Failed to execute query: \" + result);",
                "+",
                "+        KylinErrorResponse kylinErrorResponse = KylinErrorResponse.fromJson(result);",
                "+        if (kylinErrorResponse == null) {",
                "+          logger.error(\"Cannot get json from string: \" + result);",
                "+          // when code is 401, the response is html, not json",
                "+          if (code == 401) {",
                "+            errorMessage.append(\" Error message: Unauthorized. This request requires \"",
                "+                + \"HTTP authentication. Please make sure your have set your credentials \"",
                "+                + \"correctly.\");",
                "+          } else {",
                "+            errorMessage.append(\" Error message: \" + result + \" .\");",
                "+          }",
                "+        } else {",
                "+          String exception = kylinErrorResponse.getException();",
                "+          logger.error(\"The exception is \" + exception);",
                "+          errorMessage.append(\" Error message: \" + exception + \" .\");",
                "+        }",
                "-    String output;",
                "-    logger.info(\"Output from Server .... \\n\");",
                "-    while ((output = br.readLine()) != null) {",
                "-      logger.info(output);",
                "-      sb.append(output).append('\\n');",
                "+        return new InterpreterResult(InterpreterResult.Code.ERROR, errorMessage.toString());",
                "+      }",
                "+    } catch (NullPointerException | IOException e) {",
                "+      throw new IOException(e);",
                "     }",
                "-    InterpreterResult rett = new InterpreterResult(InterpreterResult.Code.SUCCESS, ",
                "-        formatResult(sb.toString()));",
                "-    return rett;",
                "+",
                "+    return new InterpreterResult(InterpreterResult.Code.SUCCESS,",
                "+        formatResult(result));",
                "   }",
                "@@ -207,12 +220,14 @@ public class KylinInterpreter extends Interpreter {",
                "-    String[] row = table.split(\"],\\\\[\");",
                "-    for (int i = 0; i < row.length; i++) {",
                "-      String[] col = row[i].split(\",(?=(?:[^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)\", -1);",
                "-      for (int j = 0; j < col.length; j++) {",
                "-        if (col[j] != null) {",
                "-          col[j] = col[j].replaceAll(\"^\\\"|\\\"$\", \"\");",
                "+    if (table != null && !table.isEmpty()) {",
                "+      String[] row = table.split(\"],\\\\[\");",
                "+      for (int i = 0; i < row.length; i++) {",
                "+        String[] col = row[i].split(\",(?=(?:[^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)\", -1);",
                "+        for (int j = 0; j < col.length; j++) {",
                "+          if (col[j] != null) {",
                "+            col[j] = col[j].replaceAll(\"^\\\"|\\\"$\", \"\");",
                "+          }",
                "+          res.append(col[j] + \" \\t\");",
                "         }",
                "-        res.append(col[j] + \" \\t\");",
                "+        res.append(\" \\n\");",
                "       }",
                "-      res.append(\" \\n\");",
                "     }"
            ],
            "changed_files": [
                "kylin/src/main/java/org/apache/zeppelin/kylin/KylinErrorResponse.java",
                "kylin/src/main/java/org/apache/zeppelin/kylin/KylinInterpreter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3014": ""
            },
            "ghissue_refs": {
                "2645": "[ZEPPELIN-3014] NPE bug fix and Error message enhancement with Kylin Interpreter #2634"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: user",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3014",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2645",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d38b2661eba7df12626ee958a4ec534f8492cdc3",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1510109920,
            "hunks": 2,
            "message": "[HotFix] No Error message displayed in frontend when no interpreter binded ### What is this PR for? It is bug of ZEPPELIN-3013. HotFix for the No Error message displayed in frontend when no interpreter binded ### What type of PR is it? [Hot Fix ] ### Todos * [ ] - Task ### How should this be tested? Verified manually ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Jeff Zhang <zjffdu@apache.org> Closes #2655 from zjffdu/HotFix_ZEPPELIN-3013 and squashes the following commits: 89754a0 [Jeff Zhang] [HotFix] No Error message displayed in frontend when no interpreter is binded",
            "diff": [
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "index e304e4a1d..a38b22255 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "@@ -190,3 +190,2 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "         this.intpText = matcher.group(2);",
                "-        this.interpreter = interpreterFactory.getInterpreter(user, note.getId(), intpText);",
                "         this.scriptText = this.text.substring(headingSpace.length() + intpText.length() + 1).trim();",
                "@@ -194,3 +193,2 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "         this.intpText = \"\";",
                "-        this.interpreter = interpreterFactory.getInterpreter(user, note.getId(), \"\");",
                "         this.scriptText = this.text;"
            ],
            "changed_files": [
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3013": ""
            },
            "ghissue_refs": {
                "2655": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: paragraph",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3013",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2655",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d5a3c74442ab9e979a9cc4fb5c76a3426c03051a",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1507873800,
            "hunks": 4,
            "message": "ZEPPELIN-2988. Zeppelin does not start new Livy session if yarn livy session application is killed ### What is this PR for? This PR will display a warning message when the livy session is dead. It won't restart it automatically, because livy session may be dead due to user code (like driver OOM). Restarting it automatically will hide the root cause and confuse users. ### What type of PR is it? [Improvement] ### Todos * [ ] - Task ### What is the Jira issue? * https://issues.apache.org/jira/browse/ZEPPELIN-2988 ### How should this be tested? * Manually tested ### Screenshots (if appropriate) ![image](https://user-images.githubusercontent.com/164491/31598273-4cac4afa-b212-11e7-8d82-7d870bd84c9b.png) ### Questions: * Does the licenses files need update? * Is there breaking changes for older versions? * Does this needs documentation? Author: Jeff Zhang <zjffdu@apache.org> Closes #2625 from zjffdu/ZEPPELIN-2988 and squashes the following commits: 0e4d281 [Jeff Zhang] ZEPPELIN-2988. Zeppelin does not start new Livy session if yarn livy session application is killed",
            "diff": [
                "diff --git a/livy/src/main/java/org/apache/zeppelin/livy/BaseLivyInterpreter.java b/livy/src/main/java/org/apache/zeppelin/livy/BaseLivyInterpreter.java",
                "index 03a269eea..2122f533f 100644",
                "--- a/livy/src/main/java/org/apache/zeppelin/livy/BaseLivyInterpreter.java",
                "+++ b/livy/src/main/java/org/apache/zeppelin/livy/BaseLivyInterpreter.java",
                "@@ -50,2 +50,3 @@ import org.springframework.security.kerberos.client.KerberosRestTemplate;",
                " import org.springframework.web.client.HttpClientErrorException;",
                "+import org.springframework.web.client.HttpServerErrorException;",
                " import org.springframework.web.client.RestClientException;",
                "@@ -292,2 +293,3 @@ public abstract class BaseLivyInterpreter extends Interpreter {",
                "       }",
                "+",
                "       // pull the statement status",
                "@@ -360,3 +362,3 @@ public abstract class BaseLivyInterpreter extends Interpreter {",
                "           \"<font color=\\\"red\\\">Previous livy session is expired, new livy session is created. \" +",
                "-              \"Paragraphs that depend on this paragraph need to be re-executed!\" + \"</font>\");",
                "+              \"Paragraphs that depend on this paragraph need to be re-executed!</font>\");",
                "       for (InterpreterResultMessage message : result.message()) {",
                "@@ -584,2 +586,11 @@ public abstract class BaseLivyInterpreter extends Interpreter {",
                "       }",
                "+      if (e instanceof HttpServerErrorException) {",
                "+        HttpServerErrorException errorException = (HttpServerErrorException) e;",
                "+        String errorResponse = errorException.getResponseBodyAsString();",
                "+        if (errorResponse.contains(\"Session is in state dead\")) {",
                "+          throw new LivyException(\"%html <font color=\\\"red\\\">Livy session is dead somehow, \" +",
                "+              \"please check log to see why it is dead, and then restart livy interpreter</font>\");",
                "+        }",
                "+        throw new LivyException(errorResponse, e);",
                "+      }",
                "       throw new LivyException(e);"
            ],
            "changed_files": [
                "livy/src/main/java/org/apache/zeppelin/livy/BaseLivyInterpreter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-2988": ""
            },
            "ghissue_refs": {
                "2625": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: user",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-2988",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2625",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7fbb5985ffd13dbdb76e708fcf8f5705b2df0a54",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1517278781,
            "hunks": 104,
            "message": "ZEPPELIN-3138. checkstyle for zeppelin-interpreter ### What is this PR for? Code Style improvement ### What type of PR is it? [Improvement] ### Todos * [ ] - Task ### What is the Jira issue? * https://issues.apache.org/jira/browse/ZEPPELIN-3138 ### How should this be tested? * CI pass ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? no * Is there breaking changes for older versions? no * Does this needs documentation? no Author: Jeff Zhang <zjffdu@apache.org> Closes #2753 from zjffdu/ZEPPELIN-3138 and squashes the following commits: c777161 [Jeff Zhang] ZEPPELIN-3138. checkstyle for zeppelin-interpreter",
            "diff": [
                "diff --git a/_tools/checkstyle.xml b/_tools/checkstyle.xml",
                "index d7eaaf943..aa53d3078 100644",
                "--- a/_tools/checkstyle.xml",
                "+++ b/_tools/checkstyle.xml",
                "@@ -60,5 +60,6 @@ limitations under the License.",
                "     </module>",
                "-    <module name=\"ImportOrder\"> Checks for out of order import statements",
                "-      <property name=\"severity\" value=\"warning\"/> <property name=\"groups\" value=\"com.google,junit,net,org,java,javax,*,org.apache.zeppelin\"/>",
                "-      This ensures that static imports go first <property name=\"option\" value=\"top\"/>",
                "+    <module name=\"ImportOrder\">",
                "+      <property name=\"severity\" value=\"warning\"/>",
                "+      <property name=\"groups\" value=\"com.google,junit,net,org,java,javax,*,org.apache.zeppelin\"/>",
                "+      <property name=\"option\" value=\"top\"/>",
                "       <property name=\"tokens\" value=\"STATIC_IMPORT, IMPORT\"/>",
                "@@ -80,7 +81,2 @@ limitations under the License.",
                "-    <module name=\"JavadocType\">",
                "-      <property name=\"scope\" value=\"protected\"/>",
                "-      <property name=\"severity\" value=\"error\"/>",
                "-    </module>",
                "-",
                "     <module name=\"JavadocStyle\">",
                "diff --git a/zeppelin-interpreter/pom.xml b/zeppelin-interpreter/pom.xml",
                "index da31f7872..80864f928 100644",
                "--- a/zeppelin-interpreter/pom.xml",
                "+++ b/zeppelin-interpreter/pom.xml",
                "@@ -241,2 +241,11 @@",
                "   <build>",
                "+    <plugins>",
                "+      <plugin>",
                "+        <groupId>org.apache.maven.plugins</groupId>",
                "+        <artifactId>maven-checkstyle-plugin</artifactId>",
                "+        <configuration>",
                "+          <skip>false</skip>",
                "+        </configuration>",
                "+      </plugin>",
                "+    </plugins>",
                "     <pluginManagement>",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "index 17e3e5bfd..a10732023 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "@@ -605,3 +605,3 @@ public class ZeppelinConfiguration extends XMLConfiguration {",
                "    */",
                "-  public static enum ConfVars {",
                "+  public enum ConfVars {",
                "     ZEPPELIN_HOME(\"zeppelin.home\", \"./\"),",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/dep/DependencyResolver.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/dep/DependencyResolver.java",
                "index c3ecdeedc..495c69bf5 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/dep/DependencyResolver.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/dep/DependencyResolver.java",
                "@@ -158,3 +158,4 @@ public class DependencyResolver extends AbstractDependencyResolver {",
                "   public List<ArtifactResult> getArtifactsWithDep(String dependency,",
                "-    Collection<String> excludes) throws RepositoryException {",
                "+                                                  Collection<String> excludes)",
                "+      throws RepositoryException {",
                "     Artifact artifact = new DefaultArtifact(dependency);",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/AngularObjectListener.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/AngularObjectListener.java",
                "index 880e48732..20f34af0e 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/AngularObjectListener.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/AngularObjectListener.java",
                "@@ -23,3 +23,3 @@ package org.apache.zeppelin.display;",
                " public interface AngularObjectListener {",
                "-  public void updated(AngularObject updatedObject);",
                "+  void updated(AngularObject updatedObject);",
                " }",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/AngularObjectRegistry.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/AngularObjectRegistry.java",
                "index a993992ae..930ed7c8d 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/AngularObjectRegistry.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/AngularObjectRegistry.java",
                "@@ -19,3 +19,2 @@ package org.apache.zeppelin.display;",
                "-import java.util.Collection;",
                " import java.util.HashMap;",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/AngularObjectRegistryListener.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/AngularObjectRegistryListener.java",
                "index 103336dbf..081bb43d8 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/AngularObjectRegistryListener.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/AngularObjectRegistryListener.java",
                "@@ -24,5 +24,5 @@ package org.apache.zeppelin.display;",
                " public interface AngularObjectRegistryListener {",
                "-  public void onAdd(String interpreterGroupId, AngularObject object);",
                "-  public void onUpdate(String interpreterGroupId, AngularObject object);",
                "-  public void onRemove(String interpreterGroupId, String name, String noteId, String paragraphId);",
                "+  void onAdd(String interpreterGroupId, AngularObject object);",
                "+  void onUpdate(String interpreterGroupId, AngularObject object);",
                "+  void onRemove(String interpreterGroupId, String name, String noteId, String paragraphId);",
                " }",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/Input.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/Input.java",
                "index a6860dea5..51e27d291 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/Input.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/Input.java",
                "@@ -20,8 +20,16 @@ package org.apache.zeppelin.display;",
                " import org.apache.commons.lang.StringUtils;",
                "-import org.apache.zeppelin.common.JsonSerializable;",
                "-import org.apache.zeppelin.display.ui.*;",
                "+import org.apache.zeppelin.display.ui.CheckBox;",
                "+import org.apache.zeppelin.display.ui.OptionInput;",
                " import org.apache.zeppelin.display.ui.OptionInput.ParamOption;",
                "+import org.apache.zeppelin.display.ui.Select;",
                "+import org.apache.zeppelin.display.ui.TextBox;",
                " import java.io.Serializable;",
                "-import java.util.*;",
                "+import java.util.ArrayList;",
                "+import java.util.Arrays;",
                "+import java.util.Collection;",
                "+import java.util.LinkedHashMap;",
                "+import java.util.LinkedList;",
                "+import java.util.List;",
                "+import java.util.Map;",
                " import java.util.regex.Matcher;",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/RuntimeTypeAdapterFactory.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/RuntimeTypeAdapterFactory.java",
                "index da05caa63..65b4f6b04 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/RuntimeTypeAdapterFactory.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/RuntimeTypeAdapterFactory.java",
                "@@ -19,3 +19,9 @@ package org.apache.zeppelin.display;",
                "-import com.google.gson.*;",
                "+import com.google.gson.Gson;",
                "+import com.google.gson.JsonElement;",
                "+import com.google.gson.JsonObject;",
                "+import com.google.gson.JsonParseException;",
                "+import com.google.gson.JsonPrimitive;",
                "+import com.google.gson.TypeAdapter;",
                "+import com.google.gson.TypeAdapterFactory;",
                " import com.google.gson.internal.Streams;",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/ui/CheckBox.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/ui/CheckBox.java",
                "index f9b4650f4..02a0ff444 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/ui/CheckBox.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/ui/CheckBox.java",
                "@@ -20,6 +20,3 @@ package org.apache.zeppelin.display.ui;",
                "-import java.awt.*;",
                "-import java.util.Arrays;",
                " import java.util.Collection;",
                "-import java.util.Collections;",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/Application.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/Application.java",
                "index 291899877..d138595fe 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/Application.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/Application.java",
                "@@ -19,3 +19,2 @@ package org.apache.zeppelin.helium;",
                " import org.apache.zeppelin.annotation.Experimental;",
                "-import org.apache.zeppelin.interpreter.InterpreterContext;",
                " import org.apache.zeppelin.resource.ResourceSet;",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/ApplicationContext.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/ApplicationContext.java",
                "index e0ea94cb0..8d3f67e99 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/ApplicationContext.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/ApplicationContext.java",
                "@@ -18,3 +18,2 @@ package org.apache.zeppelin.helium;",
                "-import org.apache.zeppelin.display.AngularObjectRegistry;",
                " import org.apache.zeppelin.interpreter.InterpreterOutput;",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/ApplicationEventListener.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/ApplicationEventListener.java",
                "index eda907ae8..ca971f5c3 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/ApplicationEventListener.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/ApplicationEventListener.java",
                "@@ -24,9 +24,9 @@ import org.apache.zeppelin.interpreter.InterpreterResult;",
                " public interface ApplicationEventListener {",
                "-  public void onOutputAppend(",
                "+  void onOutputAppend(",
                "       String noteId, String paragraphId, int index, String appId, String output);",
                "-  public void onOutputUpdated(",
                "+  void onOutputUpdated(",
                "       String noteId, String paragraphId, int index, String appId,",
                "       InterpreterResult.Type type, String output);",
                "-  public void onLoad(String noteId, String paragraphId, String appId, HeliumPackage pkg);",
                "-  public void onStatusChange(String noteId, String paragraphId, String appId, String status);",
                "+  void onLoad(String noteId, String paragraphId, String appId, HeliumPackage pkg);",
                "+  void onStatusChange(String noteId, String paragraphId, String appId, String status);",
                " }",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/ApplicationLoader.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/ApplicationLoader.java",
                "index ddd061cc6..241273a9a 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/ApplicationLoader.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/ApplicationLoader.java",
                "@@ -30,3 +30,7 @@ import java.net.URL;",
                " import java.net.URLClassLoader;",
                "-import java.util.*;",
                "+import java.util.Collections;",
                "+import java.util.HashMap;",
                "+import java.util.LinkedList;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "@@ -57,3 +61,3 @@ public class ApplicationLoader {",
                "-    public RunningApplication(HeliumPackage packageInfo, String noteId, String paragraphId) {",
                "+    RunningApplication(HeliumPackage packageInfo, String noteId, String paragraphId) {",
                "       this.packageInfo = packageInfo;",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/HeliumPackage.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/HeliumPackage.java",
                "index 759b99164..e9995c106 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/HeliumPackage.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/HeliumPackage.java",
                "@@ -21,3 +21,2 @@ import org.apache.zeppelin.annotation.Experimental;",
                " import org.apache.zeppelin.common.JsonSerializable;",
                "-import org.apache.zeppelin.dep.Repository;",
                "@@ -37,4 +36,5 @@ public class HeliumPackage implements JsonSerializable {",
                "   private String className;      // entry point",
                "-  private String [][] resources; // resource classnames that requires",
                "-                                 // [[ .. and .. and .. ] or [ .. and .. and ..] ..]",
                "+  // resource classnames that requires [[ .. and .. and .. ] or [ .. and .. and ..] ..]",
                "+  private String [][] resources;",
                "+",
                "   private String license;",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/Interpreter.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/Interpreter.java",
                "index 386de4178..52cc161cc 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/Interpreter.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/Interpreter.java",
                "@@ -20,11 +20,2 @@ package org.apache.zeppelin.interpreter;",
                "-import java.lang.reflect.Field;",
                "-import java.net.URL;",
                "-import java.util.Arrays;",
                "-import java.util.Collections;",
                "-import java.util.HashMap;",
                "-import java.util.List;",
                "-import java.util.Map;",
                "-import java.util.Properties;",
                "-",
                " import org.apache.commons.lang.StringUtils;",
                "@@ -33,3 +24,2 @@ import org.apache.zeppelin.annotation.Experimental;",
                " import org.apache.zeppelin.annotation.ZeppelinApi;",
                "-import org.apache.zeppelin.interpreter.launcher.InterpreterLauncher;",
                " import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;",
                "@@ -40,2 +30,11 @@ import org.slf4j.LoggerFactory;",
                "+import java.lang.reflect.Field;",
                "+import java.net.URL;",
                "+import java.util.Arrays;",
                "+import java.util.Collections;",
                "+import java.util.HashMap;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+import java.util.Properties;",
                "+",
                " /**",
                "@@ -373,3 +372,3 @@ public abstract class Interpreter {",
                "    */",
                "-  public static enum FormType {",
                "+  public enum FormType {",
                "     NATIVE, SIMPLE, NONE",
                "@@ -460,3 +459,3 @@ public abstract class Interpreter {",
                "    */",
                "-  public static enum SchedulingMode {",
                "+  public enum SchedulingMode {",
                "     FIFO, PARALLEL",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterHookListener.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterHookListener.java",
                "index c70212c7b..d0dbad17f 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterHookListener.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterHookListener.java",
                "@@ -26,3 +26,3 @@ public interface InterpreterHookListener {",
                "    */",
                "-  public void onPreExecute(String script);",
                "+  void onPreExecute(String script);",
                "@@ -31,3 +31,3 @@ public interface InterpreterHookListener {",
                "    */",
                "-  public void onPostExecute(String script);",
                "+  void onPostExecute(String script);",
                " }",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterOutputChangeListener.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterOutputChangeListener.java",
                "index a639e0c64..44bcd7cd0 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterOutputChangeListener.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterOutputChangeListener.java",
                "@@ -24,3 +24,3 @@ import java.io.File;",
                " public interface InterpreterOutputChangeListener {",
                "-  public void fileChanged(File file);",
                "+  void fileChanged(File file);",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterOutputListener.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterOutputListener.java",
                "index 42f6cfaef..a176ef299 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterOutputListener.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterOutputListener.java",
                "@@ -25,3 +25,3 @@ public interface InterpreterOutputListener {",
                "    */",
                "-  public void onUpdateAll(InterpreterOutput out);",
                "+  void onUpdateAll(InterpreterOutput out);",
                "@@ -33,3 +33,3 @@ public interface InterpreterOutputListener {",
                "    */",
                "-  public void onAppend(int index, InterpreterResultMessageOutput out, byte[] line);",
                "+  void onAppend(int index, InterpreterResultMessageOutput out, byte[] line);",
                "@@ -40,3 +40,3 @@ public interface InterpreterOutputListener {",
                "    */",
                "-  public void onUpdate(int index, InterpreterResultMessageOutput out);",
                "+  void onUpdate(int index, InterpreterResultMessageOutput out);",
                " }",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterResult.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterResult.java",
                "index b08a97e16..255b21ec7 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterResult.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterResult.java",
                "@@ -19,5 +19,2 @@ package org.apache.zeppelin.interpreter;",
                "-import java.io.IOException;",
                "-import java.io.Serializable;",
                "-",
                " import com.google.gson.Gson;",
                "@@ -27,3 +24,6 @@ import org.slf4j.LoggerFactory;",
                "-import java.util.*;",
                "+import java.io.IOException;",
                "+import java.io.Serializable;",
                "+import java.util.LinkedList;",
                "+import java.util.List;",
                "@@ -39,3 +39,3 @@ public class InterpreterResult implements Serializable, JsonSerializable {",
                "    */",
                "-  public static enum Code {",
                "+  public enum Code {",
                "     SUCCESS,",
                "@@ -49,3 +49,3 @@ public class InterpreterResult implements Serializable, JsonSerializable {",
                "    */",
                "-  public static enum Type {",
                "+  public enum Type {",
                "     TEXT,",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterResultMessageOutput.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterResultMessageOutput.java",
                "index 41e1fd0e1..da3136452 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterResultMessageOutput.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterResultMessageOutput.java",
                "@@ -21,3 +21,8 @@ import org.slf4j.LoggerFactory;",
                "-import java.io.*;",
                "+import java.io.ByteArrayOutputStream;",
                "+import java.io.File;",
                "+import java.io.FileInputStream;",
                "+import java.io.IOException;",
                "+import java.io.InputStream;",
                "+import java.io.OutputStream;",
                " import java.net.URL;",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterResultMessageOutputListener.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterResultMessageOutputListener.java",
                "index ba5acf941..7f14a3edb 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterResultMessageOutputListener.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterResultMessageOutputListener.java",
                "@@ -26,3 +26,3 @@ public interface InterpreterResultMessageOutputListener {",
                "    */",
                "-  public void onAppend(InterpreterResultMessageOutput out, byte[] line);",
                "+  void onAppend(InterpreterResultMessageOutput out, byte[] line);",
                "@@ -31,3 +31,3 @@ public interface InterpreterResultMessageOutputListener {",
                "    */",
                "-  public void onUpdate(InterpreterResultMessageOutput out);",
                "+  void onUpdate(InterpreterResultMessageOutput out);",
                " }",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/WrappedInterpreter.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/WrappedInterpreter.java",
                "index a12a9aa10..040b5469a 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/WrappedInterpreter.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/WrappedInterpreter.java",
                "@@ -23,3 +23,3 @@ package org.apache.zeppelin.interpreter;",
                " public interface WrappedInterpreter {",
                "-  public Interpreter getInnerInterpreter();",
                "+  Interpreter getInnerInterpreter();",
                " }",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteEventClientWrapper.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteEventClientWrapper.java",
                "index bf36cd635..e43365ceb 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteEventClientWrapper.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteEventClientWrapper.java",
                "@@ -12,5 +12,5 @@ public interface RemoteEventClientWrapper {",
                "-  public void onMetaInfosReceived(Map<String, String> infos);",
                "+  void onMetaInfosReceived(Map<String, String> infos);",
                "-  public void onParaInfosReceived(String noteId, String paragraphId,",
                "+  void onParaInfosReceived(String noteId, String paragraphId,",
                "                                             Map<String, String> infos);",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterContextRunner.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterContextRunner.java",
                "index 74b8db6d9..c0b1251d8 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterContextRunner.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterContextRunner.java",
                "@@ -20,3 +20,2 @@ package org.apache.zeppelin.interpreter.remote;",
                " import org.apache.zeppelin.interpreter.InterpreterContextRunner;",
                "-import org.apache.zeppelin.interpreter.InterpreterException;",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterEventClient.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterEventClient.java",
                "index 5f8ccb7ab..9ca8a32f5 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterEventClient.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterEventClient.java",
                "@@ -27,3 +27,7 @@ import org.apache.zeppelin.interpreter.thrift.RemoteInterpreterEventType;",
                " import org.apache.zeppelin.interpreter.thrift.ZeppelinServerResourceParagraphRunner;",
                "-import org.apache.zeppelin.resource.*;",
                "+import org.apache.zeppelin.resource.RemoteResource;",
                "+import org.apache.zeppelin.resource.Resource;",
                "+import org.apache.zeppelin.resource.ResourceId;",
                "+import org.apache.zeppelin.resource.ResourcePoolConnector;",
                "+import org.apache.zeppelin.resource.ResourceSet;",
                " import org.slf4j.Logger;",
                "@@ -358,2 +362,3 @@ public class RemoteInterpreterEventClient implements ResourcePoolConnector {",
                "         } catch (InterruptedException e) {",
                "+          // ignore exception",
                "         }",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java",
                "index c2a578c56..fca84498a 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java",
                "@@ -99,4 +99,4 @@ import java.util.concurrent.ConcurrentMap;",
                " public class RemoteInterpreterServer",
                "-  extends Thread",
                "-  implements RemoteInterpreterService.Iface, AngularObjectRegistryListener {",
                "+    extends Thread",
                "+    implements RemoteInterpreterService.Iface, AngularObjectRegistryListener {",
                "   Logger logger = LoggerFactory.getLogger(RemoteInterpreterServer.class);",
                "@@ -173,2 +173,3 @@ public class RemoteInterpreterServer",
                "         boolean interrupted = false;",
                "+",
                "         @Override",
                "@@ -302,3 +303,3 @@ public class RemoteInterpreterServer",
                "       Constructor<Interpreter> constructor =",
                "-          replClass.getConstructor(new Class[] {Properties.class});",
                "+          replClass.getConstructor(new Class[]{Properties.class});",
                "       Interpreter repl = constructor.newInstance(p);",
                "@@ -419,3 +420,4 @@ public class RemoteInterpreterServer",
                "   public RemoteInterpreterResult interpret(String noteId, String className, String st,",
                "-      RemoteInterpreterContext interpreterContext) throws TException {",
                "+                                           RemoteInterpreterContext interpreterContext)",
                "+      throws TException {",
                "     if (logger.isDebugEnabled()) {",
                "@@ -529,3 +531,3 @@ public class RemoteInterpreterServer",
                "-    public InterpretJob(",
                "+    InterpretJob(",
                "         String jobId,",
                "@@ -718,3 +720,6 @@ public class RemoteInterpreterServer",
                "   public List<InterpreterCompletion> completion(String sessionId,",
                "-      String className, String buf, int cursor, RemoteInterpreterContext remoteInterpreterContext)",
                "+                                                String className,",
                "+                                                String buf,",
                "+                                                int cursor,",
                "+                                                RemoteInterpreterContext remoteInterpreterContext)",
                "       throws TException {",
                "@@ -735,3 +740,3 @@ public class RemoteInterpreterServer",
                "     List<InterpreterContextRunner> runners = gson.fromJson(ric.getRunners(),",
                "-            new TypeToken<List<RemoteInterpreterContextRunner>>() {",
                "+        new TypeToken<List<RemoteInterpreterContextRunner>>() {",
                "         }.getType());",
                "@@ -750,3 +755,4 @@ public class RemoteInterpreterServer",
                "         (Map<String, Object>) gson.fromJson(ric.getConfig(),",
                "-            new TypeToken<Map<String, Object>>() {}.getType()),",
                "+            new TypeToken<Map<String, Object>>() {",
                "+            }.getType()),",
                "         GUI.fromJson(ric.getGui()),",
                "@@ -800,3 +806,3 @@ public class RemoteInterpreterServer",
                "-    public ParagraphRunner(RemoteInterpreterServer server, String noteId, String paragraphId) {",
                "+    ParagraphRunner(RemoteInterpreterServer server, String noteId, String paragraphId) {",
                "       super(noteId, paragraphId);",
                "@@ -811,3 +817,3 @@ public class RemoteInterpreterServer",
                "-  static class ZeppelinRemoteWorksController implements RemoteWorksController{",
                "+  static class ZeppelinRemoteWorksController implements RemoteWorksController {",
                "     Logger logger = LoggerFactory.getLogger(ZeppelinRemoteWorksController.class);",
                "@@ -817,3 +823,4 @@ public class RemoteInterpreterServer",
                "     private RemoteInterpreterServer server;",
                "-    public ZeppelinRemoteWorksController(",
                "+",
                "+    ZeppelinRemoteWorksController(",
                "         RemoteInterpreterServer server, Map<String, Object> remoteWorksResponsePool) {",
                "@@ -884,3 +891,3 @@ public class RemoteInterpreterServer",
                "   private RemoteInterpreterResult convert(InterpreterResult result,",
                "-      Map<String, Object> config, GUI gui, GUI noteGui) {",
                "+                                          Map<String, Object> config, GUI gui, GUI noteGui) {",
                "@@ -932,3 +939,2 @@ public class RemoteInterpreterServer",
                "-",
                "   @Override",
                "@@ -951,2 +957,3 @@ public class RemoteInterpreterServer",
                "    * Poll event from RemoteInterpreterEventPoller",
                "+   *",
                "    * @return",
                "@@ -961,4 +968,5 @@ public class RemoteInterpreterServer",
                "    * called when object is updated in client (web) side.",
                "+   *",
                "    * @param name",
                "-   * @param noteId noteId where the update issues",
                "+   * @param noteId      noteId where the update issues",
                "    * @param paragraphId paragraphId where the update issues",
                "@@ -1000,4 +1008,4 @@ public class RemoteInterpreterServer",
                "         value = gson.fromJson(object,",
                "-          new TypeToken<Map<String, Object>>() {",
                "-          }.getType());",
                "+            new TypeToken<Map<String, Object>>() {",
                "+            }.getType());",
                "       } catch (Exception e) {",
                "@@ -1052,3 +1060,3 @@ public class RemoteInterpreterServer",
                "   public void angularObjectRemove(String name, String noteId, String paragraphId) throws",
                "-          TException {",
                "+      TException {",
                "     AngularObjectRegistry registry = interpreterGroup.getAngularObjectRegistry();",
                "@@ -1064,4 +1072,5 @@ public class RemoteInterpreterServer",
                "    * Get payload of resource from remote",
                "+   *",
                "    * @param resourceId json serialized ResourceId",
                "-   * @param object java serialized of the object",
                "+   * @param object     java serialized of the object",
                "    * @throws TException",
                "@@ -1160,4 +1169,5 @@ public class RemoteInterpreterServer",
                "    * Get payload of resource from remote",
                "+   *",
                "    * @param invokeResourceMethodEventMessage json serialized InvokeResourcemethodEventMessage",
                "-   * @param object java serialized of the object",
                "+   * @param object                           java serialized of the object",
                "    * @throws TException",
                "@@ -1186,4 +1196,5 @@ public class RemoteInterpreterServer",
                "       Map<String, Map<String, AngularObject>> deserializedRegistry = gson",
                "-              .fromJson(registryAsString,",
                "-                      new TypeToken<Map<String, Map<String, AngularObject>>>() { }.getType());",
                "+          .fromJson(registryAsString,",
                "+              new TypeToken<Map<String, Map<String, AngularObject>>>() {",
                "+              }.getType());",
                "       interpreterGroup.getAngularObjectRegistry().setRegistry(deserializedRegistry);",
                "@@ -1195,4 +1206,4 @@ public class RemoteInterpreterServer",
                "   protected InterpreterOutput createAppOutput(final String noteId,",
                "-                                            final String paragraphId,",
                "-                                            final String appId) {",
                "+                                              final String paragraphId,",
                "+                                              final String appId) {",
                "     return new InterpreterOutput(new InterpreterOutputListener() {",
                "@@ -1324,3 +1335,3 @@ public class RemoteInterpreterServer",
                "-    public RunningApplication(HeliumPackage pkg,",
                "+    RunningApplication(HeliumPackage pkg,",
                "                               Application app,",
                "@@ -1333,3 +1344,5 @@ public class RemoteInterpreterServer",
                "     }",
                "-  };",
                "+  }",
                "+",
                "+  ;",
                " }",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/LocalResourcePool.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/LocalResourcePool.java",
                "index 5a0193c01..7ae22735e 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/LocalResourcePool.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/LocalResourcePool.java",
                "@@ -18,3 +18,5 @@ package org.apache.zeppelin.resource;",
                "-import java.util.*;",
                "+import java.util.Collections;",
                "+import java.util.HashMap;",
                "+import java.util.Map;",
                "@@ -37,2 +39,3 @@ public class LocalResourcePool implements ResourcePool {",
                "    * Get unique id of this resource pool",
                "+   *",
                "    * @return",
                "@@ -46,2 +49,3 @@ public class LocalResourcePool implements ResourcePool {",
                "    * Get resource",
                "+   *",
                "    * @return null if resource not found",
                "@@ -67,2 +71,3 @@ public class LocalResourcePool implements ResourcePool {",
                "    * Put resource into the pull",
                "+   *",
                "    * @param",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/Resource.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/Resource.java",
                "index b57d46b91..ec95ffbfa 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/Resource.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/Resource.java",
                "@@ -23,3 +23,8 @@ import org.slf4j.LoggerFactory;",
                "-import java.io.*;",
                "+import java.io.ByteArrayOutputStream;",
                "+import java.io.IOException;",
                "+import java.io.InputStream;",
                "+import java.io.ObjectInputStream;",
                "+import java.io.ObjectOutputStream;",
                "+import java.io.Serializable;",
                " import java.lang.reflect.Method;",
                "@@ -111,5 +116,6 @@ public class Resource implements JsonSerializable {",
                "    * Call a method of the object that this resource holds",
                "+   *",
                "    * @param methodName name of method to call",
                "    * @param paramTypes method parameter types",
                "-   * @param params method parameter values",
                "+   * @param params     method parameter values",
                "    * @return return value of the method",
                "@@ -117,3 +123,3 @@ public class Resource implements JsonSerializable {",
                "   public Object invokeMethod(",
                "-      String methodName, Class [] paramTypes, Object [] params) {",
                "+      String methodName, Class[] paramTypes, Object[] params) {",
                "     if (r != null) {",
                "@@ -126,3 +132,3 @@ public class Resource implements JsonSerializable {",
                "         return ret;",
                "-      }  catch (Exception e) {",
                "+      } catch (Exception e) {",
                "         logException(e);",
                "@@ -137,5 +143,6 @@ public class Resource implements JsonSerializable {",
                "    * Call a method of the object that this resource holds and save return value as a resource",
                "-   * @param methodName name of method to call",
                "-   * @param paramTypes method parameter types",
                "-   * @param params method parameter values",
                "+   *",
                "+   * @param methodName         name of method to call",
                "+   * @param paramTypes         method parameter types",
                "+   * @param params             method parameter values",
                "    * @param returnResourceName name of resource that return value will be saved",
                "@@ -144,3 +151,3 @@ public class Resource implements JsonSerializable {",
                "   public Resource invokeMethod(",
                "-      String methodName, Class [] paramTypes, Object [] params, String returnResourceName) {",
                "+      String methodName, Class[] paramTypes, Object[] params, String returnResourceName) {",
                "     if (r != null) {",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/ResourcePool.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/ResourcePool.java",
                "index a1c28de92..12b4d7ae2 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/ResourcePool.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/ResourcePool.java",
                "@@ -26,3 +26,3 @@ public interface ResourcePool {",
                "    */",
                "-  public String id();",
                "+  String id();",
                "@@ -33,3 +33,3 @@ public interface ResourcePool {",
                "    */",
                "-  public Resource get(String name);",
                "+  Resource get(String name);",
                "@@ -42,3 +42,3 @@ public interface ResourcePool {",
                "    */",
                "-  public Resource get(String noteId, String paragraphId, String name);",
                "+  Resource get(String noteId, String paragraphId, String name);",
                "@@ -48,3 +48,3 @@ public interface ResourcePool {",
                "    */",
                "-  public ResourceSet getAll();",
                "+  ResourceSet getAll();",
                "@@ -55,3 +55,3 @@ public interface ResourcePool {",
                "    */",
                "-  public void put(String name, Object object);",
                "+  void put(String name, Object object);",
                "@@ -67,3 +67,3 @@ public interface ResourcePool {",
                "    */",
                "-  public void put(String noteId, String paragraphId, String name, Object object);",
                "+  void put(String noteId, String paragraphId, String name, Object object);",
                "@@ -74,3 +74,3 @@ public interface ResourcePool {",
                "    */",
                "-  public Resource remove(String name);",
                "+  Resource remove(String name);",
                "@@ -83,3 +83,3 @@ public interface ResourcePool {",
                "    */",
                "-  public Resource remove(String noteId, String paragraphId, String name);",
                "+  Resource remove(String noteId, String paragraphId, String name);",
                " }",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/ResourcePoolConnector.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/ResourcePoolConnector.java",
                "index f270d9206..169229ba8 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/ResourcePoolConnector.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/ResourcePoolConnector.java",
                "@@ -26,3 +26,3 @@ public interface ResourcePoolConnector {",
                "    */",
                "-  public ResourceSet getAllResources();",
                "+  ResourceSet getAllResources();",
                "@@ -32,3 +32,3 @@ public interface ResourcePoolConnector {",
                "    */",
                "-  public Object readResource(ResourceId id);",
                "+  Object readResource(ResourceId id);",
                "@@ -38,3 +38,3 @@ public interface ResourcePoolConnector {",
                "    */",
                "-  public Object invokeMethod(",
                "+  Object invokeMethod(",
                "       ResourceId id,",
                "@@ -47,3 +47,3 @@ public interface ResourcePoolConnector {",
                "    */",
                "-  public Resource invokeMethod(",
                "+  Resource invokeMethod(",
                "       ResourceId id,",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/JobListener.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/JobListener.java",
                "index 9ee274654..3042941d7 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/JobListener.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/JobListener.java",
                "@@ -23,7 +23,7 @@ package org.apache.zeppelin.scheduler;",
                " public interface JobListener {",
                "-  public void onProgressUpdate(Job job, int progress);",
                "+  void onProgressUpdate(Job job, int progress);",
                "-  public void beforeStatusChange(Job job, Job.Status before, Job.Status after);",
                "+  void beforeStatusChange(Job job, Job.Status before, Job.Status after);",
                "-  public void afterStatusChange(Job job, Job.Status before, Job.Status after);",
                "+  void afterStatusChange(Job job, Job.Status before, Job.Status after);",
                " }",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/JobProgressPoller.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/JobProgressPoller.java",
                "index 8b8cda0af..3d6ce12f4 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/JobProgressPoller.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/JobProgressPoller.java",
                "@@ -62,3 +62,5 @@ public class JobProgressPoller extends Thread {",
                "       }",
                "-    } catch (InterruptedException ignored) {}",
                "+    } catch (InterruptedException ignored) {",
                "+      // just ignore this exception",
                "+    }",
                "   }",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/ParallelScheduler.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/ParallelScheduler.java",
                "index 36a67e3f9..6f67cd7c5 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/ParallelScheduler.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/ParallelScheduler.java",
                "@@ -138,3 +138,3 @@ public class ParallelScheduler implements Scheduler {",
                "-    public JobRunner(Scheduler scheduler, Job job) {",
                "+    JobRunner(Scheduler scheduler, Job job) {",
                "       this.scheduler = scheduler;",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/Scheduler.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/Scheduler.java",
                "index 90d43979c..30557274b 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/Scheduler.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/Scheduler.java",
                "@@ -25,13 +25,13 @@ import java.util.Collection;",
                " public interface Scheduler extends Runnable {",
                "-  public String getName();",
                "+  String getName();",
                "-  public Collection<Job> getJobsWaiting();",
                "+  Collection<Job> getJobsWaiting();",
                "-  public Collection<Job> getJobsRunning();",
                "+  Collection<Job> getJobsRunning();",
                "-  public void submit(Job job);",
                "+  void submit(Job job);",
                "-  public Job removeFromWaitingQueue(String jobId);",
                "+  Job removeFromWaitingQueue(String jobId);",
                "-  public void stop();",
                "+  void stop();",
                " }",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/SchedulerListener.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/SchedulerListener.java",
                "index 79232e61a..9a6b3eddf 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/SchedulerListener.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/SchedulerListener.java",
                "@@ -23,5 +23,5 @@ package org.apache.zeppelin.scheduler;",
                " public interface SchedulerListener {",
                "-  public void jobStarted(Scheduler scheduler, Job job);",
                "+  void jobStarted(Scheduler scheduler, Job job);",
                "-  public void jobFinished(Scheduler scheduler, Job job);",
                "+  void jobFinished(Scheduler scheduler, Job job);",
                " }",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/tabledata/ColumnDef.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/tabledata/ColumnDef.java",
                "index 75afc18c7..a2fac20a2 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/tabledata/ColumnDef.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/tabledata/ColumnDef.java",
                "@@ -27,3 +27,3 @@ public class ColumnDef implements Serializable {",
                "    */",
                "-  public static enum TYPE {",
                "+  public enum TYPE {",
                "     STRING,",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/tabledata/TableData.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/tabledata/TableData.java",
                "index 6e34f4773..ed254c5b8 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/tabledata/TableData.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/tabledata/TableData.java",
                "@@ -28,3 +28,3 @@ public interface TableData {",
                "    */",
                "-  public ColumnDef [] columns();",
                "+  ColumnDef [] columns();",
                "@@ -35,3 +35,3 @@ public interface TableData {",
                "    */",
                "-  public Iterator<Row> rows();",
                "+  Iterator<Row> rows();",
                " }",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/util/IdHashes.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/util/IdHashes.java",
                "index 052aaefd2..9d4e10f35 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/util/IdHashes.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/util/IdHashes.java",
                "@@ -29,4 +29,4 @@ public class IdHashes {",
                "   private static final char[] DICTIONARY = new char[] {'1', '2', '3', '4', '5', '6', '7', '8', '9',",
                "-    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'J', 'K', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'U', 'V',",
                "-    'W', 'X', 'Y', 'Z'};",
                "+      'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'J', 'K', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'U', 'V',",
                "+      'W', 'X', 'Y', 'Z'};"
            ],
            "changed_files": [
                "_tools/checkstyle.xml",
                "zeppelin-interpreter/pom.xml",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/dep/DependencyResolver.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/AngularObjectListener.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/AngularObjectRegistry.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/AngularObjectRegistryListener.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/Input.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/RuntimeTypeAdapterFactory.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/ui/CheckBox.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/Application.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/ApplicationContext.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/ApplicationEventListener.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/ApplicationLoader.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/HeliumPackage.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/Interpreter.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterHookListener.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterOutputChangeListener.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterOutputListener.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterResult.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterResultMessageOutput.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterResultMessageOutputListener.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/WrappedInterpreter.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteEventClientWrapper.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterContextRunner.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterEventClient.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/LocalResourcePool.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/Resource.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/ResourcePool.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/ResourcePoolConnector.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/JobListener.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/JobProgressPoller.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/ParallelScheduler.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/Scheduler.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/SchedulerListener.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/tabledata/ColumnDef.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/tabledata/TableData.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/util/IdHashes.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3138": ""
            },
            "ghissue_refs": {
                "2753": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: scheduler",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3138",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2753",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0418267a3d6eadac10292f00bad1830e93e3d423",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1515999234,
            "hunks": 1,
            "message": "ZEPPELIN-3166. R plotting resolution and image width is not proper ### What is this PR for? Change the resolution and image width, because the previous default value is not proper. By adding `fig.retina = 2` for high resolution. And use `40%` as default image width. ### What type of PR is it? [ Improvement ] ### Todos * [ ] - Task ### What is the Jira issue? * https://issues.apache.org/jira/browse/ZEPPELIN-3166 ### How should this be tested? * Manually verfifed ### Screenshots (if appropriate) Before ![screen shot 2018-01-15 at 2 27 01 pm](https://user-images.githubusercontent.com/164491/34930418-46680e38-fa04-11e7-9b73-b12bd61986f2.png) After ![screen shot 2018-01-15 at 2 27 11 pm](https://user-images.githubusercontent.com/164491/34930430-509204e0-fa04-11e7-927c-c9b4982f8373.png) ### Questions: * Does the licenses files need update? * Is there breaking changes for older versions? * Does this needs documentation? Author: Jeff Zhang <zjffdu@apache.org> Closes #2730 from zjffdu/ZEPPELIN-3166 and squashes the following commits: 97861c2 [Jeff Zhang] ZEPPELIN-3166. R plotting resolution and image width is not proper",
            "diff": [
                "diff --git a/spark/src/main/resources/interpreter-setting.json b/spark/src/main/resources/interpreter-setting.json",
                "index f98bd7212..f45c85c4c 100644",
                "--- a/spark/src/main/resources/interpreter-setting.json",
                "+++ b/spark/src/main/resources/interpreter-setting.json",
                "@@ -215,3 +215,3 @@",
                "         \"propertyName\": \"zeppelin.R.render.options\",",
                "-        \"defaultValue\": \"out.format = 'html', comment = NA, echo = FALSE, results = 'asis', message = F, warning = F\",",
                "+        \"defaultValue\": \"out.format = 'html', comment = NA, echo = FALSE, results = 'asis', message = F, warning = F, fig.retina = 2\",",
                "         \"description\": \"\","
            ],
            "changed_files": [
                "spark/src/main/resources/interpreter-setting.json"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3166": ""
            },
            "ghissue_refs": {
                "2730": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: default, user",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3166",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2730",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8ddaab07ca6fb6ff0a8991f55ba53d8122ce07d4",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1516845048,
            "hunks": 11,
            "message": "ZEPPELIN-3190. Should not use singleton for FileSystemStorage ### What is this PR for? For now, `FileSystemNotebookRepo`, `FileSystemConfigStorage`, `FileSystemRecoveryStorage` use `FileSystemStorage`, but the singleton pattern means that all the notebook, config and recovery need to be stored in the same storage which might not be proper for some users. So this PR is trying to use separate `FileSystemStorage` instance for `FileSystemNotebookRepo`, `FileSystemConfigStorage`, `FileSystemRecoveryStorage` ### What type of PR is it? [Bug Fix | Improvement] ### Todos * [ ] - Task ### What is the Jira issue? * https://issues.apache.org/jira/browse/ZEPPELIN-3190 ### How should this be tested? * Travis pass ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Jeff Zhang <zjffdu@apache.org> Closes #2746 from zjffdu/ZEPPELIN-3190 and squashes the following commits: 49611c2 [Jeff Zhang] ZEPPELIN-3190. Should not use singleton for FileSystemStorage",
            "diff": [
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java",
                "index a6583cbc3..bda1be60a 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java",
                "@@ -296,3 +296,2 @@ public class InterpreterSettingManager {",
                "         String interpreterDirString = interpreterDir.toString();",
                "-",
                "         /**",
                "@@ -306,3 +305,3 @@ public class InterpreterSettingManager {",
                "           if (!registerInterpreterFromResource(cl, interpreterDirString, interpreterJson)) {",
                "-            LOGGER.warn(\"No interpreter-setting.json found in \" + interpreterDirPath);",
                "+            LOGGER.warn(\"No interpreter-setting.json found in \" + interpreterDirString);",
                "           }",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/recovery/FileSystemRecoveryStorage.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/recovery/FileSystemRecoveryStorage.java",
                "index 5a0c8adf6..9b1b6cb66 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/recovery/FileSystemRecoveryStorage.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/recovery/FileSystemRecoveryStorage.java",
                "@@ -71,3 +71,5 @@ public class FileSystemRecoveryStorage extends RecoveryStorage {",
                "     this.zConf = zConf;",
                "-    this.fs = FileSystemStorage.get(zConf);",
                "+    this.fs = new FileSystemStorage(zConf, zConf.getRecoveryDir());",
                "+    LOGGER.info(\"Creating FileSystem: \" + this.fs.getFs().getClass().getName() +",
                "+        \" for Zeppelin Recovery.\");",
                "     this.recoveryDir = this.fs.makeQualified(new Path(zConf.getRecoveryDir()));",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/FileSystemStorage.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/FileSystemStorage.java",
                "index 75c0bc3ea..24bab570d 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/FileSystemStorage.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/FileSystemStorage.java",
                "@@ -32,4 +32,2 @@ public class FileSystemStorage {",
                "-  private static FileSystemStorage instance;",
                "-",
                "   private ZeppelinConfiguration zConf;",
                "@@ -39,3 +37,3 @@ public class FileSystemStorage {",
                "-  private FileSystemStorage(ZeppelinConfiguration zConf) throws IOException {",
                "+  public FileSystemStorage(ZeppelinConfiguration zConf, String path) throws IOException {",
                "     this.zConf = zConf;",
                "@@ -43,3 +41,3 @@ public class FileSystemStorage {",
                "     // disable checksum for local file system. because interpreter.json may be updated by",
                "-    // no hadoop filesystem api",
                "+    // non-hadoop filesystem api",
                "     this.hadoopConf.set(\"fs.file.impl\", RawLocalFileSystem.class.getName());",
                "@@ -60,4 +58,3 @@ public class FileSystemStorage {",
                "     try {",
                "-      this.fs = FileSystem.get(new URI(zConf.getNotebookDir()), this.hadoopConf);",
                "-      LOGGER.info(\"Creating FileSystem: \" + this.fs.getClass().getCanonicalName());",
                "+      this.fs = FileSystem.get(new URI(path), this.hadoopConf);",
                "     } catch (URISyntaxException e) {",
                "@@ -67,7 +64,4 @@ public class FileSystemStorage {",
                "-  public static synchronized FileSystemStorage get(ZeppelinConfiguration zConf) throws IOException {",
                "-    if (instance == null) {",
                "-      instance = new FileSystemStorage(zConf);",
                "-    }",
                "-    return instance;",
                "+  public FileSystem getFs() {",
                "+    return fs;",
                "   }",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/FileSystemNotebookRepo.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/FileSystemNotebookRepo.java",
                "index d8ec0e540..32bde374c 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/FileSystemNotebookRepo.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/FileSystemNotebookRepo.java",
                "@@ -44,3 +44,5 @@ public class FileSystemNotebookRepo implements NotebookRepo {",
                "   public FileSystemNotebookRepo(ZeppelinConfiguration zConf) throws IOException {",
                "-    this.fs = FileSystemStorage.get(zConf);",
                "+    this.fs = new FileSystemStorage(zConf, zConf.getNotebookDir());",
                "+    LOGGER.info(\"Creating FileSystem: \" + this.fs.getFs().getClass().getName() +",
                "+        \" for Zeppelin Notebook.\");",
                "     this.notebookDir = this.fs.makeQualified(new Path(zConf.getNotebookDir()));",
                "@@ -48,3 +50,2 @@ public class FileSystemNotebookRepo implements NotebookRepo {",
                "     this.fs.tryMkDir(notebookDir);",
                "-",
                "   }",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/storage/FileSystemConfigStorage.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/storage/FileSystemConfigStorage.java",
                "index 2460e4de6..4df816347 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/storage/FileSystemConfigStorage.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/storage/FileSystemConfigStorage.java",
                "@@ -51,4 +51,8 @@ public class FileSystemConfigStorage extends ConfigStorage {",
                "     super(zConf);",
                "-    this.fs = FileSystemStorage.get(zConf);",
                "-    this.fs.tryMkDir(new Path(zConf.getConfigFSDir()));",
                "+    this.fs = new FileSystemStorage(zConf, zConf.getConfigFSDir());",
                "+    LOGGER.info(\"Creating FileSystem: \" + this.fs.getFs().getClass().getName() +",
                "+        \" for Zeppelin Config\");",
                "+    Path configPath = this.fs.makeQualified(new Path(zConf.getConfigFSDir()));",
                "+    this.fs.tryMkDir(configPath);",
                "+    LOGGER.info(\"Using folder {} to store Zeppelin Config\", configPath);",
                "     this.interpreterSettingPath = fs.makeQualified(new Path(zConf.getInterpreterSettingPath()));"
            ],
            "changed_files": [
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/recovery/FileSystemRecoveryStorage.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/FileSystemStorage.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/FileSystemNotebookRepo.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/storage/FileSystemConfigStorage.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3190": ""
            },
            "ghissue_refs": {
                "2746": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: user",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3190",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2746",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6f8b29f5f53d0ea871e618365367587d2377a793",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1509497325,
            "hunks": 3,
            "message": "[ZEPPELIN-3062] Removes ctrl+s default behavior from notebook ### What is this PR for? As a programmer I habitually press CTRL + S out of fear for my sanity. Other web text editing tools (google docs, jupyter notebooks) ignore the base functionality of CTRL + S of saving the HTML page, and do nothing instead. This is a small change that will makes the user experience of Zeppelin notebooks much much better. ### What type of PR is it? Improvement ### Todos ### What is the Jira issue? https://issues.apache.org/jira/browse/ZEPPELIN-3062 ### How should this be tested? * I tested manually:   1. Ran `yarn run dev`   2. Went to `localhost:9000`   3. Created a new note, now anytime a user presses 'CTRL+S' in the scope of the note nothing happens, and the user can continue coding uninterrupted. ### Screenshots (if appropriate) ### Questions: Author: Tess <tesshbianchi@gmail.com> Closes #2677 from tessbianchi/ZEPPELIN-3062 and squashes the following commits: db80533 [Tess] Removes ctrl+s default behavior from notebook",
            "diff": [
                "diff --git a/zeppelin-web/src/app/notebook/notebook.controller.js b/zeppelin-web/src/app/notebook/notebook.controller.js",
                "index d09a0b23b..48fc6e715 100644",
                "--- a/zeppelin-web/src/app/notebook/notebook.controller.js",
                "+++ b/zeppelin-web/src/app/notebook/notebook.controller.js",
                "@@ -175,3 +175,3 @@ function NotebookCtrl ($scope, $route, $routeParams, $location, $rootScope,",
                "-  $scope.keyboardShortcut = function (keyEvent) {",
                "+  let keyboardShortcut = function (keyEvent) {",
                "     // handle keyevent",
                "@@ -182,4 +182,12 @@ function NotebookCtrl ($scope, $route, $routeParams, $location, $rootScope,",
                "+  $scope.keydownEvent = function (keyEvent) {",
                "+    if ((keyEvent.ctrlKey || keyEvent.metaKey) && String.fromCharCode(keyEvent.which).toLowerCase() === 's') {",
                "+      keyEvent.preventDefault()",
                "+    }",
                "+",
                "+    keyboardShortcut(keyEvent)",
                "+  }",
                "+",
                "   // register mouseevent handler for focus paragraph",
                "-  document.addEventListener('keydown', $scope.keyboardShortcut)",
                "+  document.addEventListener('keydown', $scope.keydownEvent)"
            ],
            "changed_files": [
                "zeppelin-web/src/app/notebook/notebook.controller.js"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3062": ""
            },
            "ghissue_refs": {
                "2677": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: default, user",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3062",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2677",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a75aa52b681b224a8543a42bc69bf6df66f99c60",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1513566884,
            "hunks": 16,
            "message": "[ZEPPELIN-3100] Upgrade node and npm version ### What is this PR for? Reducing total build time ### What type of PR is it? [Improvement] ### Todos * [x] - Upgrade node and npm version ### What is the Jira issue? * https://issues.apache.org/jira/browse/ZEPPELIN-3100 ### Screenshots (if appropriate) Before: <img width=\"378\" alt=\"screen shot 2017-12-11 at 5 57 46 pm\" src=\"https://user-images.githubusercontent.com/3612566/34105762-effa5f8c-e438-11e7-8290-952028e47133.png\"> After: <img width=\"378\" alt=\"screen shot 2017-12-11 at 5 57 46 pm\" src=\"https://user-images.githubusercontent.com/3612566/34106082-347d7e9a-e43a-11e7-9192-a028cacc1d33.png\"> ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Jongyoul Lee <jongyoul@gmail.com> Closes #2707 from jongyoul/ZEPPELIN-3100 and squashes the following commits: 3312c2d2 [Jongyoul Lee] Fixed rat f2697c14 [Jongyoul Lee] Upgraded node and npm version to reduce build time of web",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 7ff9acd7a..641880e06 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -93,5 +93,4 @@",
                "     <!-- frontend maven plugin related versions-->",
                "-    <node.version>v6.9.1</node.version>",
                "-    <yarn.version>v0.18.1</yarn.version>",
                "-    <npm.version>4.2.0</npm.version>",
                "+    <node.version>v8.9.3</node.version>",
                "+    <npm.version>5.5.1</npm.version>",
                "     <plugin.frontend.version>1.3</plugin.frontend.version>",
                "@@ -1011,2 +1010,3 @@",
                "               <exclude>**/e2e/**/**.spec.js</exclude>",
                "+              <exclude>package-lock.json</exclude>",
                "diff --git a/zeppelin-web/package-lock.json b/zeppelin-web/package-lock.json",
                "new file mode 100644",
                "index 000000000..443c7b770",
                "--- /dev/null",
                "+++ b/zeppelin-web/package-lock.json",
                "@@ -0,0 +1,11751 @@",
                "+{",
                "+  \"name\": \"zeppelin-web\",",
                "+  \"version\": \"0.0.0\",",
                "+  \"lockfileVersion\": 1,",
                "+  \"requires\": true,",
                "+  \"dependencies\": {",
                "+    \"@types/node\": {",
                "+      \"version\": \"6.0.92\",",
                "+      \"resolved\": \"https://registry.npmjs.org/@types/node/-/node-6.0.92.tgz\",",
                "+      \"integrity\": \"sha512-awEYSSTn7dauwVCYSx2CJaPTu0Z1Ht2oR1b2AD3CYao6ZRb+opb6EL43fzmD7eMFgMHzTBWSUzlWSD+S8xN0Nw==\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"@types/q\": {",
                "+      \"version\": \"0.0.32\",",
                "+      \"resolved\": \"https://registry.npmjs.org/@types/q/-/q-0.0.32.tgz\",",
                "+      \"integrity\": \"sha1-vShOV8hPEyXacCur/IKlMoGQwMU=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"@types/selenium-webdriver\": {",
                "+      \"version\": \"2.53.43\",",
                "+      \"resolved\": \"https://registry.npmjs.org/@types/selenium-webdriver/-/selenium-webdriver-2.53.43.tgz\",",
                "+      \"integrity\": \"sha512-UBYHWph6P3tutkbXpW6XYg9ZPbTKjw/YC2hGG1/GEvWwTbvezBUv3h+mmUFw79T3RFPnmedpiXdOBbXX+4l0jg==\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"CSSselect\": {",
                "+      \"version\": \"0.7.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/CSSselect/-/CSSselect-0.7.0.tgz\",",
                "+      \"integrity\": \"sha1-5AVMZ7RnRl88lQDA2gqnh4xLq9I=\",",
                "+      \"requires\": {",
                "+        \"CSSwhat\": \"0.4.7\",",
                "+        \"boolbase\": \"1.0.0\",",
                "+        \"domutils\": \"1.4.3\",",
                "+        \"nth-check\": \"1.0.1\"",
                "+      }",
                "+    },",
                "+    \"CSSwhat\": {",
                "+      \"version\": \"0.4.7\",",
                "+      \"resolved\": \"https://registry.npmjs.org/CSSwhat/-/CSSwhat-0.4.7.tgz\",",
                "+      \"integrity\": \"sha1-hn2g/zn3eGEyQsRM/qg/CqTr35s=\"",
                "+    },",
                "+    \"abbrev\": {",
                "+      \"version\": \"1.1.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/abbrev/-/abbrev-1.1.1.tgz\",",
                "+      \"integrity\": \"sha512-nne9/IiQ/hzIhY6pdDnbBtz7DjPTKrY00P/zvPSm5pOFkl6xuGrGnXn/VtTNNfNtAfZ9/1RtehkszU9qcTii0Q==\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"accepts\": {",
                "+      \"version\": \"1.3.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/accepts/-/accepts-1.3.4.tgz\",",
                "+      \"integrity\": \"sha1-hiRnWMfdbSGmR0/whKR0DsBesh8=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"mime-types\": \"2.1.17\",",
                "+        \"negotiator\": \"0.6.1\"",
                "+      }",
                "+    },",
                "+    \"acorn\": {",
                "+      \"version\": \"5.2.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/acorn/-/acorn-5.2.1.tgz\",",
                "+      \"integrity\": \"sha512-jG0u7c4Ly+3QkkW18V+NRDN+4bWHdln30NL1ZL2AvFZZmQe/BfopYCtghCKKVBUSetZ4QKcyA0pY6/4Gw8Pv8w==\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"acorn-jsx\": {",
                "+      \"version\": \"3.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-3.0.1.tgz\",",
                "+      \"integrity\": \"sha1-r9+UiPsezvyDSPb7IvRk4ypYs2s=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"acorn\": \"3.3.0\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"acorn\": {",
                "+          \"version\": \"3.3.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/acorn/-/acorn-3.3.0.tgz\",",
                "+          \"integrity\": \"sha1-ReN/s56No/JbruP/U2niu18iAXo=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"adm-zip\": {",
                "+      \"version\": \"0.4.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/adm-zip/-/adm-zip-0.4.4.tgz\",",
                "+      \"integrity\": \"sha1-ph7VrmkFw66lizplfSUDMJEFJzY=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"after\": {",
                "+      \"version\": \"0.8.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/after/-/after-0.8.1.tgz\",",
                "+      \"integrity\": \"sha1-q11PuIP1loFtNRX495HAr0ht1ic=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"agent-base\": {",
                "+      \"version\": \"2.1.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/agent-base/-/agent-base-2.1.1.tgz\",",
                "+      \"integrity\": \"sha1-1t4Q1a9hMtW9aSQn1G/FOFOQlMc=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"extend\": \"3.0.1\",",
                "+        \"semver\": \"5.0.3\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"semver\": {",
                "+          \"version\": \"5.0.3\",",
                "+          \"resolved\": \"https://registry.npmjs.org/semver/-/semver-5.0.3.tgz\",",
                "+          \"integrity\": \"sha1-d0Zt5YnNXTyV8TiqeLxWmjy10no=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"ajv\": {",
                "+      \"version\": \"4.11.8\",",
                "+      \"resolved\": \"https://registry.npmjs.org/ajv/-/ajv-4.11.8.tgz\",",
                "+      \"integrity\": \"sha1-gv+wKynmYq5TvcIK8VlHcGc5xTY=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"co\": \"4.6.0\",",
                "+        \"json-stable-stringify\": \"1.0.1\"",
                "+      }",
                "+    },",
                "+    \"ajv-keywords\": {",
                "+      \"version\": \"1.5.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/ajv-keywords/-/ajv-keywords-1.5.1.tgz\",",
                "+      \"integrity\": \"sha1-MU3QpLM2j609/NxU7eYXG4htrzw=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"align-text\": {",
                "+      \"version\": \"0.1.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/align-text/-/align-text-0.1.4.tgz\",",
                "+      \"integrity\": \"sha1-DNkKVhCT810KmSVsIrcGlDP60Rc=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"kind-of\": \"3.2.2\",",
                "+        \"longest\": \"1.0.1\",",
                "+        \"repeat-string\": \"1.6.1\"",
                "+      }",
                "+    },",
                "+    \"alphanum-sort\": {",
                "+      \"version\": \"1.0.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/alphanum-sort/-/alphanum-sort-1.0.2.tgz\",",
                "+      \"integrity\": \"sha1-l6ERlkmyEa0zaR2fn0hqjsn74KM=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"alter\": {",
                "+      \"version\": \"0.2.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/alter/-/alter-0.2.0.tgz\",",
                "+      \"integrity\": \"sha1-x1iICGF1cgNKrmJICvJrHU0cs80=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"stable\": \"0.1.6\"",
                "+      }",
                "+    },",
                "+    \"amdefine\": {",
                "+      \"version\": \"1.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/amdefine/-/amdefine-1.0.1.tgz\",",
                "+      \"integrity\": \"sha1-SlKCrBZHKek2Gbz9OtFR+BfOkfU=\"",
                "+    },",
                "+    \"angular\": {",
                "+      \"version\": \"1.5.11\",",
                "+      \"resolved\": \"https://registry.npmjs.org/angular/-/angular-1.5.11.tgz\",",
                "+      \"integrity\": \"sha1-jFunOG8VllyazzQp9ogVU6raMNY=\"",
                "+    },",
                "+    \"angular-ui-grid\": {",
                "+      \"version\": \"4.0.11\",",
                "+      \"resolved\": \"https://registry.npmjs.org/angular-ui-grid/-/angular-ui-grid-4.0.11.tgz\",",
                "+      \"integrity\": \"sha1-lqp1KkH2CiVMGeBSV2iehMZhhiY=\",",
                "+      \"requires\": {",
                "+        \"angular\": \"1.5.11\"",
                "+      }",
                "+    },",
                "+    \"angular-viewport-watch\": {",
                "+      \"version\": \"github:shahata/angular-viewport-watch#182923b3934e63817b6fc7b640ecb5c4a011f74c\"",
                "+    },",
                "+    \"ansi-escapes\": {",
                "+      \"version\": \"1.4.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-1.4.0.tgz\",",
                "+      \"integrity\": \"sha1-06ioOzGapneTZisT52HHkRQiMG4=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"ansi-regex\": {",
                "+      \"version\": \"2.1.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/ansi-regex/-/ansi-regex-2.1.1.tgz\",",
                "+      \"integrity\": \"sha1-w7M6te42DYbg5ijwRorn7yfWVN8=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"ansi-styles\": {",
                "+      \"version\": \"2.2.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/ansi-styles/-/ansi-styles-2.2.1.tgz\",",
                "+      \"integrity\": \"sha1-tDLdM1i2NM914eRmQ2gkBTPB3b4=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"ansi_up\": {",
                "+      \"version\": \"2.0.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/ansi_up/-/ansi_up-2.0.2.tgz\",",
                "+      \"integrity\": \"sha1-m1TeUIxcV59baWjmXBuGPgaAq5I=\"",
                "+    },",
                "+    \"anymatch\": {",
                "+      \"version\": \"1.3.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/anymatch/-/anymatch-1.3.2.tgz\",",
                "+      \"integrity\": \"sha512-0XNayC8lTHQ2OI8aljNCN3sSx6hsr/1+rlcDAotXJR7C1oZZHCNsfpbKwMjRA3Uqb5tF1Rae2oloTr4xpq+WjA==\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"micromatch\": \"2.3.11\",",
                "+        \"normalize-path\": \"2.1.1\"",
                "+      }",
                "+    },",
                "+    \"applause\": {",
                "+      \"version\": \"1.2.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/applause/-/applause-1.2.2.tgz\",",
                "+      \"integrity\": \"sha1-qEaFeegfZzl7tWNMKZU77c0PVsA=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"cson-parser\": \"1.3.5\",",
                "+        \"js-yaml\": \"3.7.0\",",
                "+        \"lodash\": \"3.10.1\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"lodash\": {",
                "+          \"version\": \"3.10.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/lodash/-/lodash-3.10.1.tgz\",",
                "+          \"integrity\": \"sha1-W/Rejkm6QYnhfUgnid/RW9FAt7Y=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"argparse\": {",
                "+      \"version\": \"1.0.9\",",
                "+      \"resolved\": \"https://registry.npmjs.org/argparse/-/argparse-1.0.9.tgz\",",
                "+      \"integrity\": \"sha1-c9g7wmP4bpf4zE9rrhsOkKfSLIY=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"sprintf-js\": \"1.0.3\"",
                "+      }",
                "+    },",
                "+    \"arr-diff\": {",
                "+      \"version\": \"2.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/arr-diff/-/arr-diff-2.0.0.tgz\",",
                "+      \"integrity\": \"sha1-jzuCf5Vai9ZpaX5KQlasPOrjVs8=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"arr-flatten\": \"1.1.0\"",
                "+      }",
                "+    },",
                "+    \"arr-flatten\": {",
                "+      \"version\": \"1.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/arr-flatten/-/arr-flatten-1.1.0.tgz\",",
                "+      \"integrity\": \"sha512-L3hKV5R/p5o81R7O02IGnwpDmkp6E982XhtbuwSe3O4qOtMMMtodicASA1Cny2U+aCXcNpml+m4dPsvsJ3jatg==\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"array-filter\": {",
                "+      \"version\": \"0.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/array-filter/-/array-filter-0.0.1.tgz\",",
                "+      \"integrity\": \"sha1-fajPLiZijtcygDWB/SH2fKzS7uw=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"array-find-index\": {",
                "+      \"version\": \"1.0.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/array-find-index/-/array-find-index-1.0.2.tgz\",",
                "+      \"integrity\": \"sha1-3wEKoSh+Fku9pvlyOwqWoexBh6E=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"array-flatten\": {",
                "+      \"version\": \"1.1.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz\",",
                "+      \"integrity\": \"sha1-ml9pkFGx5wczKPKgCJaLZOopVdI=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"array-map\": {",
                "+      \"version\": \"0.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/array-map/-/array-map-0.0.0.tgz\",",
                "+      \"integrity\": \"sha1-iKK6tz0c97zVwbEYoAP2b2ZfpmI=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"array-reduce\": {",
                "+      \"version\": \"0.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/array-reduce/-/array-reduce-0.0.0.tgz\",",
                "+      \"integrity\": \"sha1-FziZ0//Rx9k4PkR5Ul2+J4yrXys=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"array-slice\": {",
                "+      \"version\": \"0.2.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/array-slice/-/array-slice-0.2.3.tgz\",",
                "+      \"integrity\": \"sha1-3Tz7gO15c6dRF82sabC5nshhhvU=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"array-union\": {",
                "+      \"version\": \"1.0.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/array-union/-/array-union-1.0.2.tgz\",",
                "+      \"integrity\": \"sha1-mjRBDk9OPaI96jdb5b5w8kd47Dk=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"array-uniq\": \"1.0.3\"",
                "+      }",
                "+    },",
                "+    \"array-uniq\": {",
                "+      \"version\": \"1.0.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/array-uniq/-/array-uniq-1.0.3.tgz\",",
                "+      \"integrity\": \"sha1-r2rId6Jcx/dOBYiUdThY39sk/bY=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"array-unique\": {",
                "+      \"version\": \"0.2.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/array-unique/-/array-unique-0.2.1.tgz\",",
                "+      \"integrity\": \"sha1-odl8yvy8JiXMcPrc6zalDFiwGlM=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"arraybuffer.slice\": {",
                "+      \"version\": \"0.0.6\",",
                "+      \"resolved\": \"https://registry.npmjs.org/arraybuffer.slice/-/arraybuffer.slice-0.0.6.tgz\",",
                "+      \"integrity\": \"sha1-8zshWfBTKj8xB6JywMz70a0peco=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"arrify\": {",
                "+      \"version\": \"1.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/arrify/-/arrify-1.0.1.tgz\",",
                "+      \"integrity\": \"sha1-iYUI2iIm84DfkEcoRWhJwVAaSw0=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"asn1\": {",
                "+      \"version\": \"0.2.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/asn1/-/asn1-0.2.3.tgz\",",
                "+      \"integrity\": \"sha1-2sh4dxPJlmhJ/IGAd36+nB3fO4Y=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"assert\": {",
                "+      \"version\": \"1.4.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/assert/-/assert-1.4.1.tgz\",",
                "+      \"integrity\": \"sha1-mZEtWRg2tab1s0XA8H7vwI/GXZE=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"util\": \"0.10.3\"",
                "+      }",
                "+    },",
                "+    \"assert-plus\": {",
                "+      \"version\": \"1.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/assert-plus/-/assert-plus-1.0.0.tgz\",",
                "+      \"integrity\": \"sha1-8S4PPF13sLHN2RRpQuTpbB5N1SU=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"async\": {",
                "+      \"version\": \"0.2.10\",",
                "+      \"resolved\": \"https://registry.npmjs.org/async/-/async-0.2.10.tgz\",",
                "+      \"integrity\": \"sha1-trvgsGdLnXGXCMo43owjfLUmw9E=\"",
                "+    },",
                "+    \"async-each\": {",
                "+      \"version\": \"1.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/async-each/-/async-each-1.0.1.tgz\",",
                "+      \"integrity\": \"sha1-GdOGodntxufByF04iu28xW0zYC0=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"asynckit\": {",
                "+      \"version\": \"0.4.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz\",",
                "+      \"integrity\": \"sha1-x57Zf380y48robyXkLzDZkdLS3k=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"autoprefixer\": {",
                "+      \"version\": \"6.7.7\",",
                "+      \"resolved\": \"https://registry.npmjs.org/autoprefixer/-/autoprefixer-6.7.7.tgz\",",
                "+      \"integrity\": \"sha1-Hb0cg1ZY41zj+ZhAmdsAWFx4IBQ=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"browserslist\": \"1.7.7\",",
                "+        \"caniuse-db\": \"1.0.30000782\",",
                "+        \"normalize-range\": \"0.1.2\",",
                "+        \"num2fraction\": \"1.2.2\",",
                "+        \"postcss\": \"5.2.18\",",
                "+        \"postcss-value-parser\": \"3.3.0\"",
                "+      }",
                "+    },",
                "+    \"aws-sign2\": {",
                "+      \"version\": \"0.7.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/aws-sign2/-/aws-sign2-0.7.0.tgz\",",
                "+      \"integrity\": \"sha1-tG6JCTSpWR8tL2+G1+ap8bP+dqg=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"aws4\": {",
                "+      \"version\": \"1.6.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/aws4/-/aws4-1.6.0.tgz\",",
                "+      \"integrity\": \"sha1-g+9cqGCysy5KDe7e6MdxudtXRx4=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"babel-cli\": {",
                "+      \"version\": \"6.26.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-cli/-/babel-cli-6.26.0.tgz\",",
                "+      \"integrity\": \"sha1-UCq1SHTX24itALiHoGODzgPQAvE=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-core\": \"6.26.0\",",
                "+        \"babel-polyfill\": \"6.26.0\",",
                "+        \"babel-register\": \"6.26.0\",",
                "+        \"babel-runtime\": \"6.26.0\",",
                "+        \"chokidar\": \"1.7.0\",",
                "+        \"commander\": \"2.12.2\",",
                "+        \"convert-source-map\": \"1.5.1\",",
                "+        \"fs-readdir-recursive\": \"1.1.0\",",
                "+        \"glob\": \"7.1.2\",",
                "+        \"lodash\": \"4.17.4\",",
                "+        \"output-file-sync\": \"1.1.2\",",
                "+        \"path-is-absolute\": \"1.0.1\",",
                "+        \"slash\": \"1.0.0\",",
                "+        \"source-map\": \"0.5.7\",",
                "+        \"v8flags\": \"2.1.1\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"commander\": {",
                "+          \"version\": \"2.12.2\",",
                "+          \"resolved\": \"https://registry.npmjs.org/commander/-/commander-2.12.2.tgz\",",
                "+          \"integrity\": \"sha512-BFnaq5ZOGcDN7FlrtBT4xxkgIToalIIxwjxLWVJ8bGTpe1LroqMiqQXdA7ygc7CRvaYS+9zfPGFnJqFSayx+AA==\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"glob\": {",
                "+          \"version\": \"7.1.2\",",
                "+          \"resolved\": \"https://registry.npmjs.org/glob/-/glob-7.1.2.tgz\",",
                "+          \"integrity\": \"sha512-MJTUg1kjuLeQCJ+ccE4Vpa6kKVXkPYJ2mOCQyUuKLcLQsdrMCpBPUi8qVE6+YuaJkozeA9NusTAw3hLr8Xe5EQ==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"fs.realpath\": \"1.0.0\",",
                "+            \"inflight\": \"1.0.6\",",
                "+            \"inherits\": \"2.0.3\",",
                "+            \"minimatch\": \"3.0.4\",",
                "+            \"once\": \"1.4.0\",",
                "+            \"path-is-absolute\": \"1.0.1\"",
                "+          }",
                "+        },",
                "+        \"minimatch\": {",
                "+          \"version\": \"3.0.4\",",
                "+          \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-3.0.4.tgz\",",
                "+          \"integrity\": \"sha512-yJHVQEhyqPLUTgt9B83PXu6W3rx4MvvHvSUvToogpwoGDOUQ+yDrR0HRot+yOCdCO7u4hX3pWft6kWBBcqh0UA==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"brace-expansion\": \"1.1.8\"",
                "+          }",
                "+        },",
                "+        \"source-map\": {",
                "+          \"version\": \"0.5.7\",",
                "+          \"resolved\": \"https://registry.npmjs.org/source-map/-/source-map-0.5.7.tgz\",",
                "+          \"integrity\": \"sha1-igOdLRAh0i0eoUyA2OpGi6LvP8w=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"babel-code-frame\": {",
                "+      \"version\": \"6.26.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-code-frame/-/babel-code-frame-6.26.0.tgz\",",
                "+      \"integrity\": \"sha1-Y/1D99weO7fONZR9uP42mj9Yx0s=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"chalk\": \"1.1.3\",",
                "+        \"esutils\": \"2.0.2\",",
                "+        \"js-tokens\": \"3.0.2\"",
                "+      }",
                "+    },",
                "+    \"babel-core\": {",
                "+      \"version\": \"6.26.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-core/-/babel-core-6.26.0.tgz\",",
                "+      \"integrity\": \"sha1-rzL3izGm/O8RnIew/Y2XU/A6C7g=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-code-frame\": \"6.26.0\",",
                "+        \"babel-generator\": \"6.26.0\",",
                "+        \"babel-helpers\": \"6.24.1\",",
                "+        \"babel-messages\": \"6.23.0\",",
                "+        \"babel-register\": \"6.26.0\",",
                "+        \"babel-runtime\": \"6.26.0\",",
                "+        \"babel-template\": \"6.26.0\",",
                "+        \"babel-traverse\": \"6.26.0\",",
                "+        \"babel-types\": \"6.26.0\",",
                "+        \"babylon\": \"6.18.0\",",
                "+        \"convert-source-map\": \"1.5.1\",",
                "+        \"debug\": \"2.6.9\",",
                "+        \"json5\": \"0.5.1\",",
                "+        \"lodash\": \"4.17.4\",",
                "+        \"minimatch\": \"3.0.4\",",
                "+        \"path-is-absolute\": \"1.0.1\",",
                "+        \"private\": \"0.1.8\",",
                "+        \"slash\": \"1.0.0\",",
                "+        \"source-map\": \"0.5.7\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"minimatch\": {",
                "+          \"version\": \"3.0.4\",",
                "+          \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-3.0.4.tgz\",",
                "+          \"integrity\": \"sha512-yJHVQEhyqPLUTgt9B83PXu6W3rx4MvvHvSUvToogpwoGDOUQ+yDrR0HRot+yOCdCO7u4hX3pWft6kWBBcqh0UA==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"brace-expansion\": \"1.1.8\"",
                "+          }",
                "+        },",
                "+        \"source-map\": {",
                "+          \"version\": \"0.5.7\",",
                "+          \"resolved\": \"https://registry.npmjs.org/source-map/-/source-map-0.5.7.tgz\",",
                "+          \"integrity\": \"sha1-igOdLRAh0i0eoUyA2OpGi6LvP8w=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"babel-generator\": {",
                "+      \"version\": \"6.26.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-generator/-/babel-generator-6.26.0.tgz\",",
                "+      \"integrity\": \"sha1-rBriAHC3n248odMmlhMFN3TyDcU=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-messages\": \"6.23.0\",",
                "+        \"babel-runtime\": \"6.26.0\",",
                "+        \"babel-types\": \"6.26.0\",",
                "+        \"detect-indent\": \"4.0.0\",",
                "+        \"jsesc\": \"1.3.0\",",
                "+        \"lodash\": \"4.17.4\",",
                "+        \"source-map\": \"0.5.7\",",
                "+        \"trim-right\": \"1.0.1\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"source-map\": {",
                "+          \"version\": \"0.5.7\",",
                "+          \"resolved\": \"https://registry.npmjs.org/source-map/-/source-map-0.5.7.tgz\",",
                "+          \"integrity\": \"sha1-igOdLRAh0i0eoUyA2OpGi6LvP8w=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"babel-helper-builder-binary-assignment-operator-visitor\": {",
                "+      \"version\": \"6.24.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-helper-builder-binary-assignment-operator-visitor/-/babel-helper-builder-binary-assignment-operator-visitor-6.24.1.tgz\",",
                "+      \"integrity\": \"sha1-zORReto1b0IgvK6KAsKzRvmlZmQ=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-helper-explode-assignable-expression\": \"6.24.1\",",
                "+        \"babel-runtime\": \"6.26.0\",",
                "+        \"babel-types\": \"6.26.0\"",
                "+      }",
                "+    },",
                "+    \"babel-helper-call-delegate\": {",
                "+      \"version\": \"6.24.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-helper-call-delegate/-/babel-helper-call-delegate-6.24.1.tgz\",",
                "+      \"integrity\": \"sha1-7Oaqzdx25Bw0YfiL/Fdb0Nqi340=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-helper-hoist-variables\": \"6.24.1\",",
                "+        \"babel-runtime\": \"6.26.0\",",
                "+        \"babel-traverse\": \"6.26.0\",",
                "+        \"babel-types\": \"6.26.0\"",
                "+      }",
                "+    },",
                "+    \"babel-helper-define-map\": {",
                "+      \"version\": \"6.26.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-helper-define-map/-/babel-helper-define-map-6.26.0.tgz\",",
                "+      \"integrity\": \"sha1-pfVtq0GiX5fstJjH66ypgZ+Vvl8=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-helper-function-name\": \"6.24.1\",",
                "+        \"babel-runtime\": \"6.26.0\",",
                "+        \"babel-types\": \"6.26.0\",",
                "+        \"lodash\": \"4.17.4\"",
                "+      }",
                "+    },",
                "+    \"babel-helper-explode-assignable-expression\": {",
                "+      \"version\": \"6.24.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-helper-explode-assignable-expression/-/babel-helper-explode-assignable-expression-6.24.1.tgz\",",
                "+      \"integrity\": \"sha1-8luCz33BBDPFX3BZLVdGQArCLKo=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-runtime\": \"6.26.0\",",
                "+        \"babel-traverse\": \"6.26.0\",",
                "+        \"babel-types\": \"6.26.0\"",
                "+      }",
                "+    },",
                "+    \"babel-helper-function-name\": {",
                "+      \"version\": \"6.24.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-helper-function-name/-/babel-helper-function-name-6.24.1.tgz\",",
                "+      \"integrity\": \"sha1-00dbjAPtmCQqJbSDUasYOZ01gKk=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-helper-get-function-arity\": \"6.24.1\",",
                "+        \"babel-runtime\": \"6.26.0\",",
                "+        \"babel-template\": \"6.26.0\",",
                "+        \"babel-traverse\": \"6.26.0\",",
                "+        \"babel-types\": \"6.26.0\"",
                "+      }",
                "+    },",
                "+    \"babel-helper-get-function-arity\": {",
                "+      \"version\": \"6.24.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-helper-get-function-arity/-/babel-helper-get-function-arity-6.24.1.tgz\",",
                "+      \"integrity\": \"sha1-j3eCqpNAfEHTqlCQj4mwMbG2hT0=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-runtime\": \"6.26.0\",",
                "+        \"babel-types\": \"6.26.0\"",
                "+      }",
                "+    },",
                "+    \"babel-helper-hoist-variables\": {",
                "+      \"version\": \"6.24.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-helper-hoist-variables/-/babel-helper-hoist-variables-6.24.1.tgz\",",
                "+      \"integrity\": \"sha1-HssnaJydJVE+rbyZFKc/VAi+enY=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-runtime\": \"6.26.0\",",
                "+        \"babel-types\": \"6.26.0\"",
                "+      }",
                "+    },",
                "+    \"babel-helper-optimise-call-expression\": {",
                "+      \"version\": \"6.24.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-helper-optimise-call-expression/-/babel-helper-optimise-call-expression-6.24.1.tgz\",",
                "+      \"integrity\": \"sha1-96E0J7qfc/j0+pk8VKl4gtEkQlc=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-runtime\": \"6.26.0\",",
                "+        \"babel-types\": \"6.26.0\"",
                "+      }",
                "+    },",
                "+    \"babel-helper-regex\": {",
                "+      \"version\": \"6.26.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-helper-regex/-/babel-helper-regex-6.26.0.tgz\",",
                "+      \"integrity\": \"sha1-MlxZ+QL4LyS3T6zu0DY5VPZJXnI=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-runtime\": \"6.26.0\",",
                "+        \"babel-types\": \"6.26.0\",",
                "+        \"lodash\": \"4.17.4\"",
                "+      }",
                "+    },",
                "+    \"babel-helper-remap-async-to-generator\": {",
                "+      \"version\": \"6.24.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-helper-remap-async-to-generator/-/babel-helper-remap-async-to-generator-6.24.1.tgz\",",
                "+      \"integrity\": \"sha1-XsWBgnrXI/7N04HxySg5BnbkVRs=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-helper-function-name\": \"6.24.1\",",
                "+        \"babel-runtime\": \"6.26.0\",",
                "+        \"babel-template\": \"6.26.0\",",
                "+        \"babel-traverse\": \"6.26.0\",",
                "+        \"babel-types\": \"6.26.0\"",
                "+      }",
                "+    },",
                "+    \"babel-helper-replace-supers\": {",
                "+      \"version\": \"6.24.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-helper-replace-supers/-/babel-helper-replace-supers-6.24.1.tgz\",",
                "+      \"integrity\": \"sha1-v22/5Dk40XNpohPKiov3S2qQqxo=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-helper-optimise-call-expression\": \"6.24.1\",",
                "+        \"babel-messages\": \"6.23.0\",",
                "+        \"babel-runtime\": \"6.26.0\",",
                "+        \"babel-template\": \"6.26.0\",",
                "+        \"babel-traverse\": \"6.26.0\",",
                "+        \"babel-types\": \"6.26.0\"",
                "+      }",
                "+    },",
                "+    \"babel-helpers\": {",
                "+      \"version\": \"6.24.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-helpers/-/babel-helpers-6.24.1.tgz\",",
                "+      \"integrity\": \"sha1-NHHenK7DiOXIUOWX5Yom3fN2ArI=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-runtime\": \"6.26.0\",",
                "+        \"babel-template\": \"6.26.0\"",
                "+      }",
                "+    },",
                "+    \"babel-loader\": {",
                "+      \"version\": \"6.4.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-loader/-/babel-loader-6.4.1.tgz\",",
                "+      \"integrity\": \"sha1-CzQRLVsHSKjc2/Uaz2+b1C1QuMo=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"find-cache-dir\": \"0.1.1\",",
                "+        \"loader-utils\": \"0.2.17\",",
                "+        \"mkdirp\": \"0.5.1\",",
                "+        \"object-assign\": \"4.1.1\"",
                "+      }",
                "+    },",
                "+    \"babel-messages\": {",
                "+      \"version\": \"6.23.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-messages/-/babel-messages-6.23.0.tgz\",",
                "+      \"integrity\": \"sha1-8830cDhYA1sqKVHG7F7fbGLyYw4=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-runtime\": \"6.26.0\"",
                "+      }",
                "+    },",
                "+    \"babel-plugin-check-es2015-constants\": {",
                "+      \"version\": \"6.22.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-plugin-check-es2015-constants/-/babel-plugin-check-es2015-constants-6.22.0.tgz\",",
                "+      \"integrity\": \"sha1-NRV7EBQm/S/9PaP3XH0ekYNbv4o=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-runtime\": \"6.26.0\"",
                "+      }",
                "+    },",
                "+    \"babel-plugin-syntax-async-functions\": {",
                "+      \"version\": \"6.13.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-plugin-syntax-async-functions/-/babel-plugin-syntax-async-functions-6.13.0.tgz\",",
                "+      \"integrity\": \"sha1-ytnK0RkbWtY0vzCuCHI5HgZHvpU=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"babel-plugin-syntax-exponentiation-operator\": {",
                "+      \"version\": \"6.13.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-plugin-syntax-exponentiation-operator/-/babel-plugin-syntax-exponentiation-operator-6.13.0.tgz\",",
                "+      \"integrity\": \"sha1-nufoM3KQ2pUoggGmpX9BcDF4MN4=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"babel-plugin-syntax-trailing-function-commas\": {",
                "+      \"version\": \"6.22.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-plugin-syntax-trailing-function-commas/-/babel-plugin-syntax-trailing-function-commas-6.22.0.tgz\",",
                "+      \"integrity\": \"sha1-ugNgk3+NBuQBgKQ/4NVhb/9TLPM=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"babel-plugin-transform-async-to-generator\": {",
                "+      \"version\": \"6.24.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-plugin-transform-async-to-generator/-/babel-plugin-transform-async-to-generator-6.24.1.tgz\",",
                "+      \"integrity\": \"sha1-ZTbjeK/2yx1VF6wOQOs+n8jQh2E=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-helper-remap-async-to-generator\": \"6.24.1\",",
                "+        \"babel-plugin-syntax-async-functions\": \"6.13.0\",",
                "+        \"babel-runtime\": \"6.26.0\"",
                "+      }",
                "+    },",
                "+    \"babel-plugin-transform-es2015-arrow-functions\": {",
                "+      \"version\": \"6.22.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-plugin-transform-es2015-arrow-functions/-/babel-plugin-transform-es2015-arrow-functions-6.22.0.tgz\",",
                "+      \"integrity\": \"sha1-RSaSy3EdX3ncf4XkQM5BufJE0iE=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-runtime\": \"6.26.0\"",
                "+      }",
                "+    },",
                "+    \"babel-plugin-transform-es2015-block-scoped-functions\": {",
                "+      \"version\": \"6.22.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-plugin-transform-es2015-block-scoped-functions/-/babel-plugin-transform-es2015-block-scoped-functions-6.22.0.tgz\",",
                "+      \"integrity\": \"sha1-u8UbSflk1wy42OC5ToICRs46YUE=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-runtime\": \"6.26.0\"",
                "+      }",
                "+    },",
                "+    \"babel-plugin-transform-es2015-block-scoping\": {",
                "+      \"version\": \"6.26.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-plugin-transform-es2015-block-scoping/-/babel-plugin-transform-es2015-block-scoping-6.26.0.tgz\",",
                "+      \"integrity\": \"sha1-1w9SmcEwjQXBL0Y4E7CgnnOxiV8=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-runtime\": \"6.26.0\",",
                "+        \"babel-template\": \"6.26.0\",",
                "+        \"babel-traverse\": \"6.26.0\",",
                "+        \"babel-types\": \"6.26.0\",",
                "+        \"lodash\": \"4.17.4\"",
                "+      }",
                "+    },",
                "+    \"babel-plugin-transform-es2015-classes\": {",
                "+      \"version\": \"6.24.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-plugin-transform-es2015-classes/-/babel-plugin-transform-es2015-classes-6.24.1.tgz\",",
                "+      \"integrity\": \"sha1-WkxYpQyclGHlZLSyo7+ryXolhNs=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-helper-define-map\": \"6.26.0\",",
                "+        \"babel-helper-function-name\": \"6.24.1\",",
                "+        \"babel-helper-optimise-call-expression\": \"6.24.1\",",
                "+        \"babel-helper-replace-supers\": \"6.24.1\",",
                "+        \"babel-messages\": \"6.23.0\",",
                "+        \"babel-runtime\": \"6.26.0\",",
                "+        \"babel-template\": \"6.26.0\",",
                "+        \"babel-traverse\": \"6.26.0\",",
                "+        \"babel-types\": \"6.26.0\"",
                "+      }",
                "+    },",
                "+    \"babel-plugin-transform-es2015-computed-properties\": {",
                "+      \"version\": \"6.24.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-plugin-transform-es2015-computed-properties/-/babel-plugin-transform-es2015-computed-properties-6.24.1.tgz\",",
                "+      \"integrity\": \"sha1-b+Ko0WiV1WNPTNmZttNICjCBWbM=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-runtime\": \"6.26.0\",",
                "+        \"babel-template\": \"6.26.0\"",
                "+      }",
                "+    },",
                "+    \"babel-plugin-transform-es2015-destructuring\": {",
                "+      \"version\": \"6.23.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-plugin-transform-es2015-destructuring/-/babel-plugin-transform-es2015-destructuring-6.23.0.tgz\",",
                "+      \"integrity\": \"sha1-mXux8auWf2gtKwh2/jWNYOdlxW0=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-runtime\": \"6.26.0\"",
                "+      }",
                "+    },",
                "+    \"babel-plugin-transform-es2015-duplicate-keys\": {",
                "+      \"version\": \"6.24.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-plugin-transform-es2015-duplicate-keys/-/babel-plugin-transform-es2015-duplicate-keys-6.24.1.tgz\",",
                "+      \"integrity\": \"sha1-c+s9MQypaePvnskcU3QabxV2Qj4=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-runtime\": \"6.26.0\",",
                "+        \"babel-types\": \"6.26.0\"",
                "+      }",
                "+    },",
                "+    \"babel-plugin-transform-es2015-for-of\": {",
                "+      \"version\": \"6.23.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-plugin-transform-es2015-for-of/-/babel-plugin-transform-es2015-for-of-6.23.0.tgz\",",
                "+      \"integrity\": \"sha1-9HyVsrYT3x0+zC/bdXNiPHUkhpE=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-runtime\": \"6.26.0\"",
                "+      }",
                "+    },",
                "+    \"babel-plugin-transform-es2015-function-name\": {",
                "+      \"version\": \"6.24.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-plugin-transform-es2015-function-name/-/babel-plugin-transform-es2015-function-name-6.24.1.tgz\",",
                "+      \"integrity\": \"sha1-g0yJhTvDaxrw86TF26qU/Y6sqos=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-helper-function-name\": \"6.24.1\",",
                "+        \"babel-runtime\": \"6.26.0\",",
                "+        \"babel-types\": \"6.26.0\"",
                "+      }",
                "+    },",
                "+    \"babel-plugin-transform-es2015-literals\": {",
                "+      \"version\": \"6.22.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-plugin-transform-es2015-literals/-/babel-plugin-transform-es2015-literals-6.22.0.tgz\",",
                "+      \"integrity\": \"sha1-T1SgLWzWbPkVKAAZox0xklN3yi4=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-runtime\": \"6.26.0\"",
                "+      }",
                "+    },",
                "+    \"babel-plugin-transform-es2015-modules-amd\": {",
                "+      \"version\": \"6.24.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-plugin-transform-es2015-modules-amd/-/babel-plugin-transform-es2015-modules-amd-6.24.1.tgz\",",
                "+      \"integrity\": \"sha1-Oz5UAXI5hC1tGcMBHEvS8AoA0VQ=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-plugin-transform-es2015-modules-commonjs\": \"6.26.0\",",
                "+        \"babel-runtime\": \"6.26.0\",",
                "+        \"babel-template\": \"6.26.0\"",
                "+      }",
                "+    },",
                "+    \"babel-plugin-transform-es2015-modules-commonjs\": {",
                "+      \"version\": \"6.26.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-plugin-transform-es2015-modules-commonjs/-/babel-plugin-transform-es2015-modules-commonjs-6.26.0.tgz\",",
                "+      \"integrity\": \"sha1-DYOUApt9xqvhqX7xgeAHWN0uXYo=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-plugin-transform-strict-mode\": \"6.24.1\",",
                "+        \"babel-runtime\": \"6.26.0\",",
                "+        \"babel-template\": \"6.26.0\",",
                "+        \"babel-types\": \"6.26.0\"",
                "+      }",
                "+    },",
                "+    \"babel-plugin-transform-es2015-modules-systemjs\": {",
                "+      \"version\": \"6.24.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-plugin-transform-es2015-modules-systemjs/-/babel-plugin-transform-es2015-modules-systemjs-6.24.1.tgz\",",
                "+      \"integrity\": \"sha1-/4mhQrkRmpBhlfXxBuzzBdlAfSM=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-helper-hoist-variables\": \"6.24.1\",",
                "+        \"babel-runtime\": \"6.26.0\",",
                "+        \"babel-template\": \"6.26.0\"",
                "+      }",
                "+    },",
                "+    \"babel-plugin-transform-es2015-modules-umd\": {",
                "+      \"version\": \"6.24.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-plugin-transform-es2015-modules-umd/-/babel-plugin-transform-es2015-modules-umd-6.24.1.tgz\",",
                "+      \"integrity\": \"sha1-rJl+YoXNGO1hdq22B9YCNErThGg=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-plugin-transform-es2015-modules-amd\": \"6.24.1\",",
                "+        \"babel-runtime\": \"6.26.0\",",
                "+        \"babel-template\": \"6.26.0\"",
                "+      }",
                "+    },",
                "+    \"babel-plugin-transform-es2015-object-super\": {",
                "+      \"version\": \"6.24.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-plugin-transform-es2015-object-super/-/babel-plugin-transform-es2015-object-super-6.24.1.tgz\",",
                "+      \"integrity\": \"sha1-JM72muIcuDp/hgPa0CH1cusnj40=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-helper-replace-supers\": \"6.24.1\",",
                "+        \"babel-runtime\": \"6.26.0\"",
                "+      }",
                "+    },",
                "+    \"babel-plugin-transform-es2015-parameters\": {",
                "+      \"version\": \"6.24.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-plugin-transform-es2015-parameters/-/babel-plugin-transform-es2015-parameters-6.24.1.tgz\",",
                "+      \"integrity\": \"sha1-V6w1GrScrxSpfNE7CfZv3wpiXys=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-helper-call-delegate\": \"6.24.1\",",
                "+        \"babel-helper-get-function-arity\": \"6.24.1\",",
                "+        \"babel-runtime\": \"6.26.0\",",
                "+        \"babel-template\": \"6.26.0\",",
                "+        \"babel-traverse\": \"6.26.0\",",
                "+        \"babel-types\": \"6.26.0\"",
                "+      }",
                "+    },",
                "+    \"babel-plugin-transform-es2015-shorthand-properties\": {",
                "+      \"version\": \"6.24.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-plugin-transform-es2015-shorthand-properties/-/babel-plugin-transform-es2015-shorthand-properties-6.24.1.tgz\",",
                "+      \"integrity\": \"sha1-JPh11nIch2YbvZmkYi5R8U3jiqA=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-runtime\": \"6.26.0\",",
                "+        \"babel-types\": \"6.26.0\"",
                "+      }",
                "+    },",
                "+    \"babel-plugin-transform-es2015-spread\": {",
                "+      \"version\": \"6.22.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-plugin-transform-es2015-spread/-/babel-plugin-transform-es2015-spread-6.22.0.tgz\",",
                "+      \"integrity\": \"sha1-1taKmfia7cRTbIGlQujdnxdG+NE=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-runtime\": \"6.26.0\"",
                "+      }",
                "+    },",
                "+    \"babel-plugin-transform-es2015-sticky-regex\": {",
                "+      \"version\": \"6.24.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-plugin-transform-es2015-sticky-regex/-/babel-plugin-transform-es2015-sticky-regex-6.24.1.tgz\",",
                "+      \"integrity\": \"sha1-AMHNsaynERLN8M9hJsLta0V8zbw=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-helper-regex\": \"6.26.0\",",
                "+        \"babel-runtime\": \"6.26.0\",",
                "+        \"babel-types\": \"6.26.0\"",
                "+      }",
                "+    },",
                "+    \"babel-plugin-transform-es2015-template-literals\": {",
                "+      \"version\": \"6.22.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-plugin-transform-es2015-template-literals/-/babel-plugin-transform-es2015-template-literals-6.22.0.tgz\",",
                "+      \"integrity\": \"sha1-qEs0UPfp+PH2g51taH2oS7EjbY0=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-runtime\": \"6.26.0\"",
                "+      }",
                "+    },",
                "+    \"babel-plugin-transform-es2015-typeof-symbol\": {",
                "+      \"version\": \"6.23.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-plugin-transform-es2015-typeof-symbol/-/babel-plugin-transform-es2015-typeof-symbol-6.23.0.tgz\",",
                "+      \"integrity\": \"sha1-3sCfHN3/lLUqxz1QXITfWdzOs3I=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-runtime\": \"6.26.0\"",
                "+      }",
                "+    },",
                "+    \"babel-plugin-transform-es2015-unicode-regex\": {",
                "+      \"version\": \"6.24.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-plugin-transform-es2015-unicode-regex/-/babel-plugin-transform-es2015-unicode-regex-6.24.1.tgz\",",
                "+      \"integrity\": \"sha1-04sS9C6nMj9yk4fxinxa4frrNek=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-helper-regex\": \"6.26.0\",",
                "+        \"babel-runtime\": \"6.26.0\",",
                "+        \"regexpu-core\": \"2.0.0\"",
                "+      }",
                "+    },",
                "+    \"babel-plugin-transform-exponentiation-operator\": {",
                "+      \"version\": \"6.24.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-plugin-transform-exponentiation-operator/-/babel-plugin-transform-exponentiation-operator-6.24.1.tgz\",",
                "+      \"integrity\": \"sha1-KrDJx/MJj6SJB3cruBP+QejeOg4=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-helper-builder-binary-assignment-operator-visitor\": \"6.24.1\",",
                "+        \"babel-plugin-syntax-exponentiation-operator\": \"6.13.0\",",
                "+        \"babel-runtime\": \"6.26.0\"",
                "+      }",
                "+    },",
                "+    \"babel-plugin-transform-regenerator\": {",
                "+      \"version\": \"6.26.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-plugin-transform-regenerator/-/babel-plugin-transform-regenerator-6.26.0.tgz\",",
                "+      \"integrity\": \"sha1-4HA2lvveJ/Cj78rPi03KL3s6jy8=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"regenerator-transform\": \"0.10.1\"",
                "+      }",
                "+    },",
                "+    \"babel-plugin-transform-strict-mode\": {",
                "+      \"version\": \"6.24.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-plugin-transform-strict-mode/-/babel-plugin-transform-strict-mode-6.24.1.tgz\",",
                "+      \"integrity\": \"sha1-1fr3qleKZbvlkc9e2uBKDGcCB1g=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-runtime\": \"6.26.0\",",
                "+        \"babel-types\": \"6.26.0\"",
                "+      }",
                "+    },",
                "+    \"babel-polyfill\": {",
                "+      \"version\": \"6.26.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-polyfill/-/babel-polyfill-6.26.0.tgz\",",
                "+      \"integrity\": \"sha1-N5k3q8Z9eJWXCtxiHyhM2WbPIVM=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-runtime\": \"6.26.0\",",
                "+        \"core-js\": \"2.5.2\",",
                "+        \"regenerator-runtime\": \"0.10.5\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"regenerator-runtime\": {",
                "+          \"version\": \"0.10.5\",",
                "+          \"resolved\": \"https://registry.npmjs.org/regenerator-runtime/-/regenerator-runtime-0.10.5.tgz\",",
                "+          \"integrity\": \"sha1-M2w+/BIgrc7dosn6tntaeVWjNlg=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"babel-preset-env\": {",
                "+      \"version\": \"1.6.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-preset-env/-/babel-preset-env-1.6.1.tgz\",",
                "+      \"integrity\": \"sha512-W6VIyA6Ch9ePMI7VptNn2wBM6dbG0eSz25HEiL40nQXCsXGTGZSTZu1Iap+cj3Q0S5a7T9+529l/5Bkvd+afNA==\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-plugin-check-es2015-constants\": \"6.22.0\",",
                "+        \"babel-plugin-syntax-trailing-function-commas\": \"6.22.0\",",
                "+        \"babel-plugin-transform-async-to-generator\": \"6.24.1\",",
                "+        \"babel-plugin-transform-es2015-arrow-functions\": \"6.22.0\",",
                "+        \"babel-plugin-transform-es2015-block-scoped-functions\": \"6.22.0\",",
                "+        \"babel-plugin-transform-es2015-block-scoping\": \"6.26.0\",",
                "+        \"babel-plugin-transform-es2015-classes\": \"6.24.1\",",
                "+        \"babel-plugin-transform-es2015-computed-properties\": \"6.24.1\",",
                "+        \"babel-plugin-transform-es2015-destructuring\": \"6.23.0\",",
                "+        \"babel-plugin-transform-es2015-duplicate-keys\": \"6.24.1\",",
                "+        \"babel-plugin-transform-es2015-for-of\": \"6.23.0\",",
                "+        \"babel-plugin-transform-es2015-function-name\": \"6.24.1\",",
                "+        \"babel-plugin-transform-es2015-literals\": \"6.22.0\",",
                "+        \"babel-plugin-transform-es2015-modules-amd\": \"6.24.1\",",
                "+        \"babel-plugin-transform-es2015-modules-commonjs\": \"6.26.0\",",
                "+        \"babel-plugin-transform-es2015-modules-systemjs\": \"6.24.1\",",
                "+        \"babel-plugin-transform-es2015-modules-umd\": \"6.24.1\",",
                "+        \"babel-plugin-transform-es2015-object-super\": \"6.24.1\",",
                "+        \"babel-plugin-transform-es2015-parameters\": \"6.24.1\",",
                "+        \"babel-plugin-transform-es2015-shorthand-properties\": \"6.24.1\",",
                "+        \"babel-plugin-transform-es2015-spread\": \"6.22.0\",",
                "+        \"babel-plugin-transform-es2015-sticky-regex\": \"6.24.1\",",
                "+        \"babel-plugin-transform-es2015-template-literals\": \"6.22.0\",",
                "+        \"babel-plugin-transform-es2015-typeof-symbol\": \"6.23.0\",",
                "+        \"babel-plugin-transform-es2015-unicode-regex\": \"6.24.1\",",
                "+        \"babel-plugin-transform-exponentiation-operator\": \"6.24.1\",",
                "+        \"babel-plugin-transform-regenerator\": \"6.26.0\",",
                "+        \"browserslist\": \"2.10.0\",",
                "+        \"invariant\": \"2.2.2\",",
                "+        \"semver\": \"5.4.1\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"browserslist\": {",
                "+          \"version\": \"2.10.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/browserslist/-/browserslist-2.10.0.tgz\",",
                "+          \"integrity\": \"sha512-WyvzSLsuAVPOjbljXnyeWl14Ae+ukAT8MUuagKVzIDvwBxl4UAwD1xqtyQs2eWYPGUKMeC3Ol62goqYuKqTTcw==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"caniuse-lite\": \"1.0.30000782\",",
                "+            \"electron-to-chromium\": \"1.3.28\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"babel-register\": {",
                "+      \"version\": \"6.26.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-register/-/babel-register-6.26.0.tgz\",",
                "+      \"integrity\": \"sha1-btAhFz4vy0htestFxgCahW9kcHE=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-core\": \"6.26.0\",",
                "+        \"babel-runtime\": \"6.26.0\",",
                "+        \"core-js\": \"2.5.2\",",
                "+        \"home-or-tmp\": \"2.0.0\",",
                "+        \"lodash\": \"4.17.4\",",
                "+        \"mkdirp\": \"0.5.1\",",
                "+        \"source-map-support\": \"0.4.18\"",
                "+      }",
                "+    },",
                "+    \"babel-runtime\": {",
                "+      \"version\": \"6.26.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-runtime/-/babel-runtime-6.26.0.tgz\",",
                "+      \"integrity\": \"sha1-llxwWGaOgrVde/4E/yM3vItWR/4=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"core-js\": \"2.5.2\",",
                "+        \"regenerator-runtime\": \"0.11.1\"",
                "+      }",
                "+    },",
                "+    \"babel-template\": {",
                "+      \"version\": \"6.26.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-template/-/babel-template-6.26.0.tgz\",",
                "+      \"integrity\": \"sha1-3gPi0WOWsGn0bdn/+FIfsaDjXgI=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-runtime\": \"6.26.0\",",
                "+        \"babel-traverse\": \"6.26.0\",",
                "+        \"babel-types\": \"6.26.0\",",
                "+        \"babylon\": \"6.18.0\",",
                "+        \"lodash\": \"4.17.4\"",
                "+      }",
                "+    },",
                "+    \"babel-traverse\": {",
                "+      \"version\": \"6.26.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-traverse/-/babel-traverse-6.26.0.tgz\",",
                "+      \"integrity\": \"sha1-RqnL1+3MYsjlwGTi0tjQ9ANXZu4=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-code-frame\": \"6.26.0\",",
                "+        \"babel-messages\": \"6.23.0\",",
                "+        \"babel-runtime\": \"6.26.0\",",
                "+        \"babel-types\": \"6.26.0\",",
                "+        \"babylon\": \"6.18.0\",",
                "+        \"debug\": \"2.6.9\",",
                "+        \"globals\": \"9.18.0\",",
                "+        \"invariant\": \"2.2.2\",",
                "+        \"lodash\": \"4.17.4\"",
                "+      }",
                "+    },",
                "+    \"babel-types\": {",
                "+      \"version\": \"6.26.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babel-types/-/babel-types-6.26.0.tgz\",",
                "+      \"integrity\": \"sha1-o7Bz+Uq0nrb6Vc1lInozQ4BjJJc=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-runtime\": \"6.26.0\",",
                "+        \"esutils\": \"2.0.2\",",
                "+        \"lodash\": \"4.17.4\",",
                "+        \"to-fast-properties\": \"1.0.3\"",
                "+      }",
                "+    },",
                "+    \"babylon\": {",
                "+      \"version\": \"6.18.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/babylon/-/babylon-6.18.0.tgz\",",
                "+      \"integrity\": \"sha512-q/UEjfGJ2Cm3oKV71DJz9d25TPnq5rhBVL2Q4fA5wcC3jcrdn7+SssEybFIxwAvvP+YCsCYNKughoF33GxgycQ==\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"backo2\": {",
                "+      \"version\": \"1.0.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/backo2/-/backo2-1.0.2.tgz\",",
                "+      \"integrity\": \"sha1-MasayLEpNjRj41s+u2n038+6eUc=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"balanced-match\": {",
                "+      \"version\": \"1.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.0.tgz\",",
                "+      \"integrity\": \"sha1-ibTRmasr7kneFk6gK4nORi1xt2c=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"base64-arraybuffer\": {",
                "+      \"version\": \"0.1.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/base64-arraybuffer/-/base64-arraybuffer-0.1.2.tgz\",",
                "+      \"integrity\": \"sha1-R030qfLaJOBd8xWMOx2zw81GoVQ=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"base64-js\": {",
                "+      \"version\": \"1.2.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/base64-js/-/base64-js-1.2.1.tgz\",",
                "+      \"integrity\": \"sha512-dwVUVIXsBZXwTuwnXI9RK8sBmgq09NDHzyR9SAph9eqk76gKK2JSQmZARC2zRC81JC2QTtxD0ARU5qTS25gIGw==\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"base64id\": {",
                "+      \"version\": \"0.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/base64id/-/base64id-0.1.0.tgz\",",
                "+      \"integrity\": \"sha1-As4P3u4M709ACA4ec+g08LG/zj8=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"batch\": {",
                "+      \"version\": \"0.6.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/batch/-/batch-0.6.1.tgz\",",
                "+      \"integrity\": \"sha1-3DQxT05nkxgJP8dgJyUl+UvyXBY=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"bcrypt-pbkdf\": {",
                "+      \"version\": \"1.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/bcrypt-pbkdf/-/bcrypt-pbkdf-1.0.1.tgz\",",
                "+      \"integrity\": \"sha1-Y7xdy2EzG5K8Bf1SiVPDNGKgb40=\",",
                "+      \"dev\": true,",
                "+      \"optional\": true,",
                "+      \"requires\": {",
                "+        \"tweetnacl\": \"0.14.5\"",
                "+      }",
                "+    },",
                "+    \"benchmark\": {",
                "+      \"version\": \"1.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/benchmark/-/benchmark-1.0.0.tgz\",",
                "+      \"integrity\": \"sha1-Lx4vpMNZ8REiqhgwgiGOlX45DHM=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"better-assert\": {",
                "+      \"version\": \"1.0.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/better-assert/-/better-assert-1.0.2.tgz\",",
                "+      \"integrity\": \"sha1-QIZrnhueC1W0gYlDEeaPr/rrxSI=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"callsite\": \"1.0.0\"",
                "+      }",
                "+    },",
                "+    \"big.js\": {",
                "+      \"version\": \"3.2.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/big.js/-/big.js-3.2.0.tgz\",",
                "+      \"integrity\": \"sha512-+hN/Zh2D08Mx65pZ/4g5bsmNiZUuChDiQfTUQ7qJr4/kuopCr88xZsAXv6mBoZEsUI4OuGHlX59qE94K2mMW8Q==\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"binary-extensions\": {",
                "+      \"version\": \"1.11.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/binary-extensions/-/binary-extensions-1.11.0.tgz\",",
                "+      \"integrity\": \"sha1-RqoXUftqL5PuXmibsQh9SxTGwgU=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"blob\": {",
                "+      \"version\": \"0.0.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/blob/-/blob-0.0.4.tgz\",",
                "+      \"integrity\": \"sha1-vPEwUspURj8w+fx+lbmkdjCpSSE=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"blocking-proxy\": {",
                "+      \"version\": \"1.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/blocking-proxy/-/blocking-proxy-1.0.1.tgz\",",
                "+      \"integrity\": \"sha512-KE8NFMZr3mN2E0HcvCgRtX7DjhiIQrwle+nSVJVC/yqFb9+xznHl2ZcoBp2L9qzkI4t4cBFJ1efXF8Dwi132RA==\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"minimist\": \"1.2.0\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"minimist\": {",
                "+          \"version\": \"1.2.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/minimist/-/minimist-1.2.0.tgz\",",
                "+          \"integrity\": \"sha1-o1AIsg9BOD7sH7kU9M1d95omQoQ=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"bluebird\": {",
                "+      \"version\": \"3.5.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/bluebird/-/bluebird-3.5.1.tgz\",",
                "+      \"integrity\": \"sha512-MKiLiV+I1AA596t9w1sQJ8jkiSr5+ZKi0WKrYGUn6d1Fx+Ij4tIj+m2WMQSGczs5jZVxV339chE8iwk6F64wjA==\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"body-parser\": {",
                "+      \"version\": \"1.18.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/body-parser/-/body-parser-1.18.2.tgz\",",
                "+      \"integrity\": \"sha1-h2eKGdhLR9hZuDGZvVm84iKxBFQ=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"bytes\": \"3.0.0\",",
                "+        \"content-type\": \"1.0.4\",",
                "+        \"debug\": \"2.6.9\",",
                "+        \"depd\": \"1.1.1\",",
                "+        \"http-errors\": \"1.6.2\",",
                "+        \"iconv-lite\": \"0.4.19\",",
                "+        \"on-finished\": \"2.3.0\",",
                "+        \"qs\": \"6.5.1\",",
                "+        \"raw-body\": \"2.3.2\",",
                "+        \"type-is\": \"1.6.15\"",
                "+      }",
                "+    },",
                "+    \"boolbase\": {",
                "+      \"version\": \"1.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/boolbase/-/boolbase-1.0.0.tgz\",",
                "+      \"integrity\": \"sha1-aN/1++YMUes3cl6p4+0xDcwed24=\"",
                "+    },",
                "+    \"boom\": {",
                "+      \"version\": \"4.3.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/boom/-/boom-4.3.1.tgz\",",
                "+      \"integrity\": \"sha1-T4owBctKfjiJ90kDD9JbluAdLjE=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"hoek\": \"4.2.0\"",
                "+      }",
                "+    },",
                "+    \"bower\": {",
                "+      \"version\": \"1.8.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/bower/-/bower-1.8.2.tgz\",",
                "+      \"integrity\": \"sha1-rfU1KcjUrwLvJPuNU0HBQZ0z4vc=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"bower-config\": {",
                "+      \"version\": \"0.5.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/bower-config/-/bower-config-0.5.3.tgz\",",
                "+      \"integrity\": \"sha1-mPxbQah4cO+cu5KXY1z4H1UF/bE=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"graceful-fs\": \"2.0.3\",",
                "+        \"mout\": \"0.9.1\",",
                "+        \"optimist\": \"0.6.1\",",
                "+        \"osenv\": \"0.0.3\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"graceful-fs\": {",
                "+          \"version\": \"2.0.3\",",
                "+          \"resolved\": \"https://registry.npmjs.org/graceful-fs/-/graceful-fs-2.0.3.tgz\",",
                "+          \"integrity\": \"sha1-fNLNsiiko/Nule+mzBQt59GhNtA=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"brace-expansion\": {",
                "+      \"version\": \"1.1.8\",",
                "+      \"resolved\": \"https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.8.tgz\",",
                "+      \"integrity\": \"sha1-wHshHHyVLsH479Uad+8NHTmQopI=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"balanced-match\": \"1.0.0\",",
                "+        \"concat-map\": \"0.0.1\"",
                "+      }",
                "+    },",
                "+    \"braces\": {",
                "+      \"version\": \"1.8.5\",",
                "+      \"resolved\": \"https://registry.npmjs.org/braces/-/braces-1.8.5.tgz\",",
                "+      \"integrity\": \"sha1-uneWLhLf+WnWt2cR6RS3N4V79qc=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"expand-range\": \"1.8.2\",",
                "+        \"preserve\": \"0.2.0\",",
                "+        \"repeat-element\": \"1.1.2\"",
                "+      }",
                "+    },",
                "+    \"browserify-aes\": {",
                "+      \"version\": \"0.4.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/browserify-aes/-/browserify-aes-0.4.0.tgz\",",
                "+      \"integrity\": \"sha1-BnFJtmjfMcS1hTPgLQHoBthgjiw=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"inherits\": \"2.0.3\"",
                "+      }",
                "+    },",
                "+    \"browserify-zlib\": {",
                "+      \"version\": \"0.1.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/browserify-zlib/-/browserify-zlib-0.1.4.tgz\",",
                "+      \"integrity\": \"sha1-uzX4pRn2AOD6a4SFJByXnQFB+y0=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"pako\": \"0.2.9\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"pako\": {",
                "+          \"version\": \"0.2.9\",",
                "+          \"resolved\": \"https://registry.npmjs.org/pako/-/pako-0.2.9.tgz\",",
                "+          \"integrity\": \"sha1-8/dSL073gjSNqBYbrZ7P1Rv4OnU=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"browserslist\": {",
                "+      \"version\": \"1.7.7\",",
                "+      \"resolved\": \"https://registry.npmjs.org/browserslist/-/browserslist-1.7.7.tgz\",",
                "+      \"integrity\": \"sha1-C9dnBCWL6CmyOYu1Dkti0aFmsLk=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"caniuse-db\": \"1.0.30000782\",",
                "+        \"electron-to-chromium\": \"1.3.28\"",
                "+      }",
                "+    },",
                "+    \"buffer\": {",
                "+      \"version\": \"4.9.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/buffer/-/buffer-4.9.1.tgz\",",
                "+      \"integrity\": \"sha1-bRu2AbB6TvztlwlBMgkwJ8lbwpg=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"base64-js\": \"1.2.1\",",
                "+        \"ieee754\": \"1.1.8\",",
                "+        \"isarray\": \"1.0.0\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"isarray\": {",
                "+          \"version\": \"1.0.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz\",",
                "+          \"integrity\": \"sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"builtin-modules\": {",
                "+      \"version\": \"1.1.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/builtin-modules/-/builtin-modules-1.1.1.tgz\",",
                "+      \"integrity\": \"sha1-Jw8HbFpywC9bZaR9+Uxf46J4iS8=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"builtin-status-codes\": {",
                "+      \"version\": \"3.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/builtin-status-codes/-/builtin-status-codes-3.0.0.tgz\",",
                "+      \"integrity\": \"sha1-hZgoeOIbmOHGZCXgPQF0eI9Wnug=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"bytes\": {",
                "+      \"version\": \"3.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/bytes/-/bytes-3.0.0.tgz\",",
                "+      \"integrity\": \"sha1-0ygVQE1olpn4Wk6k+odV3ROpYEg=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"caller-path\": {",
                "+      \"version\": \"0.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/caller-path/-/caller-path-0.1.0.tgz\",",
                "+      \"integrity\": \"sha1-lAhe9jWB7NPaqSREqP6U6CV3dR8=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"callsites\": \"0.2.0\"",
                "+      }",
                "+    },",
                "+    \"callsite\": {",
                "+      \"version\": \"1.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/callsite/-/callsite-1.0.0.tgz\",",
                "+      \"integrity\": \"sha1-KAOY5dZkvXQDi28JBRU+borxvCA=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"callsites\": {",
                "+      \"version\": \"0.2.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/callsites/-/callsites-0.2.0.tgz\",",
                "+      \"integrity\": \"sha1-r6uWJikQp/M8GaV3WCXGnzTjUMo=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"camel-case\": {",
                "+      \"version\": \"1.2.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/camel-case/-/camel-case-1.2.2.tgz\",",
                "+      \"integrity\": \"sha1-Gsp8TRlTWaLOmVV5NDPG5VQlEfI=\",",
                "+      \"requires\": {",
                "+        \"sentence-case\": \"1.1.3\",",
                "+        \"upper-case\": \"1.1.3\"",
                "+      }",
                "+    },",
                "+    \"camelcase\": {",
                "+      \"version\": \"1.2.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/camelcase/-/camelcase-1.2.1.tgz\",",
                "+      \"integrity\": \"sha1-m7UwTS4LVmmLLHWLCKPqqdqlijk=\"",
                "+    },",
                "+    \"camelcase-keys\": {",
                "+      \"version\": \"2.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/camelcase-keys/-/camelcase-keys-2.1.0.tgz\",",
                "+      \"integrity\": \"sha1-MIvur/3ygRkFHvodkyITyRuPkuc=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"camelcase\": \"2.1.1\",",
                "+        \"map-obj\": \"1.0.1\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"camelcase\": {",
                "+          \"version\": \"2.1.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/camelcase/-/camelcase-2.1.1.tgz\",",
                "+          \"integrity\": \"sha1-fB0W1nmhu+WcoCys7PsBHiAfWh8=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"caniuse-api\": {",
                "+      \"version\": \"1.6.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/caniuse-api/-/caniuse-api-1.6.1.tgz\",",
                "+      \"integrity\": \"sha1-tTTnxzTE+B7F++isoq0kNUuWLGw=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"browserslist\": \"1.7.7\",",
                "+        \"caniuse-db\": \"1.0.30000782\",",
                "+        \"lodash.memoize\": \"4.1.2\",",
                "+        \"lodash.uniq\": \"4.5.0\"",
                "+      }",
                "+    },",
                "+    \"caniuse-db\": {",
                "+      \"version\": \"1.0.30000782\",",
                "+      \"resolved\": \"https://registry.npmjs.org/caniuse-db/-/caniuse-db-1.0.30000782.tgz\",",
                "+      \"integrity\": \"sha1-2IFbzhV4w1Cs7REyUHMBIF4Pq1M=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"caniuse-lite\": {",
                "+      \"version\": \"1.0.30000782\",",
                "+      \"resolved\": \"https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30000782.tgz\",",
                "+      \"integrity\": \"sha1-W4K4w4XyU0h0XEccpRMgr7G38lQ=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"caseless\": {",
                "+      \"version\": \"0.12.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/caseless/-/caseless-0.12.0.tgz\",",
                "+      \"integrity\": \"sha1-G2gcIf+EAzyCZUMJBolCDRhxUdw=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"center-align\": {",
                "+      \"version\": \"0.1.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/center-align/-/center-align-0.1.3.tgz\",",
                "+      \"integrity\": \"sha1-qg0yYptu6XIgBBHL1EYckHvCt60=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"align-text\": \"0.1.4\",",
                "+        \"lazy-cache\": \"1.0.4\"",
                "+      }",
                "+    },",
                "+    \"chalk\": {",
                "+      \"version\": \"1.1.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/chalk/-/chalk-1.1.3.tgz\",",
                "+      \"integrity\": \"sha1-qBFcVeSnAv5NFQq9OHKCKn4J/Jg=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"ansi-styles\": \"2.2.1\",",
                "+        \"escape-string-regexp\": \"1.0.5\",",
                "+        \"has-ansi\": \"2.0.0\",",
                "+        \"strip-ansi\": \"3.0.1\",",
                "+        \"supports-color\": \"2.0.0\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"supports-color\": {",
                "+          \"version\": \"2.0.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/supports-color/-/supports-color-2.0.0.tgz\",",
                "+          \"integrity\": \"sha1-U10EXOa2Nj+kARcIRimZXp3zJMc=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"change-case\": {",
                "+      \"version\": \"2.1.6\",",
                "+      \"resolved\": \"https://registry.npmjs.org/change-case/-/change-case-2.1.6.tgz\",",
                "+      \"integrity\": \"sha1-UUryBRMVimj+fwDf9MMy1sKY0vk=\",",
                "+      \"requires\": {",
                "+        \"camel-case\": \"1.2.2\",",
                "+        \"constant-case\": \"1.1.2\",",
                "+        \"dot-case\": \"1.1.2\",",
                "+        \"is-lower-case\": \"1.1.3\",",
                "+        \"is-upper-case\": \"1.1.2\",",
                "+        \"lower-case\": \"1.1.4\",",
                "+        \"param-case\": \"1.1.2\",",
                "+        \"pascal-case\": \"1.1.2\",",
                "+        \"path-case\": \"1.1.2\",",
                "+        \"sentence-case\": \"1.1.3\",",
                "+        \"snake-case\": \"1.1.2\",",
                "+        \"swap-case\": \"1.1.2\",",
                "+        \"title-case\": \"1.1.2\",",
                "+        \"upper-case\": \"1.1.3\",",
                "+        \"upper-case-first\": \"1.1.2\"",
                "+      }",
                "+    },",
                "+    \"cheerio\": {",
                "+      \"version\": \"0.12.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/cheerio/-/cheerio-0.12.4.tgz\",",
                "+      \"integrity\": \"sha1-wZlibp4esNQjOpGkeT5/iqppoYs=\",",
                "+      \"requires\": {",
                "+        \"cheerio-select\": \"0.0.3\",",
                "+        \"entities\": \"0.5.0\",",
                "+        \"htmlparser2\": \"3.1.4\",",
                "+        \"underscore\": \"1.4.4\"",
                "+      }",
                "+    },",
                "+    \"cheerio-select\": {",
                "+      \"version\": \"0.0.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/cheerio-select/-/cheerio-select-0.0.3.tgz\",",
                "+      \"integrity\": \"sha1-PyQgEU88ywsbB1wkXM+q5dYXo4g=\",",
                "+      \"requires\": {",
                "+        \"CSSselect\": \"0.7.0\"",
                "+      }",
                "+    },",
                "+    \"chokidar\": {",
                "+      \"version\": \"1.7.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/chokidar/-/chokidar-1.7.0.tgz\",",
                "+      \"integrity\": \"sha1-eY5ol3gVHIB2tLNg5e3SjNortGg=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"anymatch\": \"1.3.2\",",
                "+        \"async-each\": \"1.0.1\",",
                "+        \"fsevents\": \"1.1.3\",",
                "+        \"glob-parent\": \"2.0.0\",",
                "+        \"inherits\": \"2.0.3\",",
                "+        \"is-binary-path\": \"1.0.1\",",
                "+        \"is-glob\": \"2.0.1\",",
                "+        \"path-is-absolute\": \"1.0.1\",",
                "+        \"readdirp\": \"2.1.0\"",
                "+      }",
                "+    },",
                "+    \"circular-json\": {",
                "+      \"version\": \"0.3.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/circular-json/-/circular-json-0.3.3.tgz\",",
                "+      \"integrity\": \"sha512-UZK3NBx2Mca+b5LsG7bY183pHWt5Y1xts4P3Pz7ENTwGVnJOUWbRb3ocjvX7hx9tq/yTAdclXm9sZ38gNuem4A==\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"clap\": {",
                "+      \"version\": \"1.2.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/clap/-/clap-1.2.3.tgz\",",
                "+      \"integrity\": \"sha512-4CoL/A3hf90V3VIEjeuhSvlGFEHKzOz+Wfc2IVZc+FaUgU0ZQafJTP49fvnULipOPcAfqhyI2duwQyns6xqjYA==\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"chalk\": \"1.1.3\"",
                "+      }",
                "+    },",
                "+    \"clean-css\": {",
                "+      \"version\": \"2.2.23\",",
                "+      \"resolved\": \"https://registry.npmjs.org/clean-css/-/clean-css-2.2.23.tgz\",",
                "+      \"integrity\": \"sha1-BZC1R4tRbEkD7cLYm9P9vdKGMow=\",",
                "+      \"requires\": {",
                "+        \"commander\": \"2.2.0\"",
                "+      }",
                "+    },",
                "+    \"cli\": {",
                "+      \"version\": \"0.6.6\",",
                "+      \"resolved\": \"https://registry.npmjs.org/cli/-/cli-0.6.6.tgz\",",
                "+      \"integrity\": \"sha1-Aq1Eo4Cr8nraxebwzdewQ9dMU+M=\",",
                "+      \"requires\": {",
                "+        \"exit\": \"0.1.2\",",
                "+        \"glob\": \"3.2.11\"",
                "+      }",
                "+    },",
                "+    \"cli-cursor\": {",
                "+      \"version\": \"1.0.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/cli-cursor/-/cli-cursor-1.0.2.tgz\",",
                "+      \"integrity\": \"sha1-ZNo/fValRBLll5S9Ytw1KV6PKYc=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"restore-cursor\": \"1.0.1\"",
                "+      }",
                "+    },",
                "+    \"cli-width\": {",
                "+      \"version\": \"2.2.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/cli-width/-/cli-width-2.2.0.tgz\",",
                "+      \"integrity\": \"sha1-/xnt6Kml5XkyQUewwR8PvLq+1jk=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"cliui\": {",
                "+      \"version\": \"2.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/cliui/-/cliui-2.1.0.tgz\",",
                "+      \"integrity\": \"sha1-S0dXYP+AJkx2LDoXGQMukcf+oNE=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"center-align\": \"0.1.3\",",
                "+        \"right-align\": \"0.1.3\",",
                "+        \"wordwrap\": \"0.0.2\"",
                "+      }",
                "+    },",
                "+    \"clone\": {",
                "+      \"version\": \"1.0.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/clone/-/clone-1.0.3.tgz\",",
                "+      \"integrity\": \"sha1-KY1+IjFmD0DAA8LtMUDezz9TCF8=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"co\": {",
                "+      \"version\": \"4.6.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/co/-/co-4.6.0.tgz\",",
                "+      \"integrity\": \"sha1-bqa989hTrlTMuOR7+gvz+QMfsYQ=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"coa\": {",
                "+      \"version\": \"1.0.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/coa/-/coa-1.0.4.tgz\",",
                "+      \"integrity\": \"sha1-qe8VNmDWqGqL3sAomlxoTSF0Mv0=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"q\": \"1.5.1\"",
                "+      }",
                "+    },",
                "+    \"code-point-at\": {",
                "+      \"version\": \"1.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/code-point-at/-/code-point-at-1.1.0.tgz\",",
                "+      \"integrity\": \"sha1-DQcLTQQ6W+ozovGkDi7bPZpMz3c=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"coffee-script\": {",
                "+      \"version\": \"1.3.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/coffee-script/-/coffee-script-1.3.3.tgz\",",
                "+      \"integrity\": \"sha1-FQ1rTLUiiUNp7+1qIQHCC8f0pPQ=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"color\": {",
                "+      \"version\": \"0.11.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/color/-/color-0.11.4.tgz\",",
                "+      \"integrity\": \"sha1-bXtcdPtl6EHNSHkq0e1eB7kE12Q=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"clone\": \"1.0.3\",",
                "+        \"color-convert\": \"1.9.1\",",
                "+        \"color-string\": \"0.3.0\"",
                "+      }",
                "+    },",
                "+    \"color-convert\": {",
                "+      \"version\": \"1.9.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/color-convert/-/color-convert-1.9.1.tgz\",",
                "+      \"integrity\": \"sha512-mjGanIiwQJskCC18rPR6OmrZ6fm2Lc7PeGFYwCmy5J34wC6F1PzdGL6xeMfmgicfYcNLGuVFA3WzXtIDCQSZxQ==\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"color-name\": \"1.1.3\"",
                "+      }",
                "+    },",
                "+    \"color-name\": {",
                "+      \"version\": \"1.1.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz\",",
                "+      \"integrity\": \"sha1-p9BVi9icQveV3UIyj3QIMcpTvCU=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"color-string\": {",
                "+      \"version\": \"0.3.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/color-string/-/color-string-0.3.0.tgz\",",
                "+      \"integrity\": \"sha1-J9RvtnAlxcL6JZk7+/V55HhBuZE=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"color-name\": \"1.1.3\"",
                "+      }",
                "+    },",
                "+    \"colormin\": {",
                "+      \"version\": \"1.1.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/colormin/-/colormin-1.1.2.tgz\",",
                "+      \"integrity\": \"sha1-6i90IKcrlogaOKrlnsEkpvcpgTM=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"color\": \"0.11.4\",",
                "+        \"css-color-names\": \"0.0.4\",",
                "+        \"has\": \"1.0.1\"",
                "+      }",
                "+    },",
                "+    \"colors\": {",
                "+      \"version\": \"1.1.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/colors/-/colors-1.1.2.tgz\",",
                "+      \"integrity\": \"sha1-FopHAXVran9RoSzgyXv6KMCE7WM=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"combine-lists\": {",
                "+      \"version\": \"1.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/combine-lists/-/combine-lists-1.0.1.tgz\",",
                "+      \"integrity\": \"sha1-RYwH4J4NkA/Ci3Cj/sLazR0st/Y=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"lodash\": \"4.17.4\"",
                "+      }",
                "+    },",
                "+    \"combined-stream\": {",
                "+      \"version\": \"1.0.5\",",
                "+      \"resolved\": \"https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.5.tgz\",",
                "+      \"integrity\": \"sha1-k4NwpXtKUd6ix3wV1cX9+JUWQAk=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"delayed-stream\": \"1.0.0\"",
                "+      }",
                "+    },",
                "+    \"commander\": {",
                "+      \"version\": \"2.2.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/commander/-/commander-2.2.0.tgz\",",
                "+      \"integrity\": \"sha1-F1rUuTF/P/YV8gHB5XIk9Vo+kd8=\"",
                "+    },",
                "+    \"commondir\": {",
                "+      \"version\": \"1.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/commondir/-/commondir-1.0.1.tgz\",",
                "+      \"integrity\": \"sha1-3dgA2gxmEnOTzKWVDqloo6rxJTs=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"component-bind\": {",
                "+      \"version\": \"1.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/component-bind/-/component-bind-1.0.0.tgz\",",
                "+      \"integrity\": \"sha1-AMYIq33Nk4l8AAllGx06jh5zu9E=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"component-emitter\": {",
                "+      \"version\": \"1.1.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/component-emitter/-/component-emitter-1.1.2.tgz\",",
                "+      \"integrity\": \"sha1-KWWU8nU9qmOZbSrwjRWpURbJrsM=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"component-inherit\": {",
                "+      \"version\": \"0.0.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/component-inherit/-/component-inherit-0.0.3.tgz\",",
                "+      \"integrity\": \"sha1-ZF/ErfWLcrZJ1crmUTVhnbJv8UM=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"compressible\": {",
                "+      \"version\": \"2.0.12\",",
                "+      \"resolved\": \"https://registry.npmjs.org/compressible/-/compressible-2.0.12.tgz\",",
                "+      \"integrity\": \"sha1-xZpcmdt2dn6YdlAOJx72OzSTvWY=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"mime-db\": \"1.30.0\"",
                "+      }",
                "+    },",
                "+    \"compression\": {",
                "+      \"version\": \"1.7.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/compression/-/compression-1.7.1.tgz\",",
                "+      \"integrity\": \"sha1-7/JgPvwuIs+G810uuTWJ+YdTc9s=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"accepts\": \"1.3.4\",",
                "+        \"bytes\": \"3.0.0\",",
                "+        \"compressible\": \"2.0.12\",",
                "+        \"debug\": \"2.6.9\",",
                "+        \"on-headers\": \"1.0.1\",",
                "+        \"safe-buffer\": \"5.1.1\",",
                "+        \"vary\": \"1.1.2\"",
                "+      }",
                "+    },",
                "+    \"concat-map\": {",
                "+      \"version\": \"0.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz\",",
                "+      \"integrity\": \"sha1-2Klr13/Wjfd5OnMDajug1UBdR3s=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"concat-stream\": {",
                "+      \"version\": \"1.6.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/concat-stream/-/concat-stream-1.6.0.tgz\",",
                "+      \"integrity\": \"sha1-CqxmL9Ur54lk1VMvaUeE5wEQrPc=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"inherits\": \"2.0.3\",",
                "+        \"readable-stream\": \"2.3.3\",",
                "+        \"typedarray\": \"0.0.6\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"isarray\": {",
                "+          \"version\": \"1.0.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz\",",
                "+          \"integrity\": \"sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"readable-stream\": {",
                "+          \"version\": \"2.3.3\",",
                "+          \"resolved\": \"https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.3.tgz\",",
                "+          \"integrity\": \"sha512-m+qzzcn7KUxEmd1gMbchF+Y2eIUbieUaxkWtptyHywrX0rE8QEYqPC07Vuy4Wm32/xE16NcdBctb8S0Xe/5IeQ==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"core-util-is\": \"1.0.2\",",
                "+            \"inherits\": \"2.0.3\",",
                "+            \"isarray\": \"1.0.0\",",
                "+            \"process-nextick-args\": \"1.0.7\",",
                "+            \"safe-buffer\": \"5.1.1\",",
                "+            \"string_decoder\": \"1.0.3\",",
                "+            \"util-deprecate\": \"1.0.2\"",
                "+          }",
                "+        },",
                "+        \"string_decoder\": {",
                "+          \"version\": \"1.0.3\",",
                "+          \"resolved\": \"https://registry.npmjs.org/string_decoder/-/string_decoder-1.0.3.tgz\",",
                "+          \"integrity\": \"sha512-4AH6Z5fzNNBcH+6XDMfA/BTt87skxqJlO0lAh3Dker5zThcAxG6mKz+iGu308UKoPPQ8Dcqx/4JhujzltRa+hQ==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"safe-buffer\": \"5.1.1\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"connect\": {",
                "+      \"version\": \"3.6.5\",",
                "+      \"resolved\": \"https://registry.npmjs.org/connect/-/connect-3.6.5.tgz\",",
                "+      \"integrity\": \"sha1-+43ee6B2OHfQ7J352sC0tA5yx9o=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"debug\": \"2.6.9\",",
                "+        \"finalhandler\": \"1.0.6\",",
                "+        \"parseurl\": \"1.3.2\",",
                "+        \"utils-merge\": \"1.0.1\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"finalhandler\": {",
                "+          \"version\": \"1.0.6\",",
                "+          \"resolved\": \"https://registry.npmjs.org/finalhandler/-/finalhandler-1.0.6.tgz\",",
                "+          \"integrity\": \"sha1-AHrqM9Gk0+QgF/YkhIrVjSEvgU8=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"debug\": \"2.6.9\",",
                "+            \"encodeurl\": \"1.0.1\",",
                "+            \"escape-html\": \"1.0.3\",",
                "+            \"on-finished\": \"2.3.0\",",
                "+            \"parseurl\": \"1.3.2\",",
                "+            \"statuses\": \"1.3.1\",",
                "+            \"unpipe\": \"1.0.0\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"connect-history-api-fallback\": {",
                "+      \"version\": \"1.5.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/connect-history-api-fallback/-/connect-history-api-fallback-1.5.0.tgz\",",
                "+      \"integrity\": \"sha1-sGhzk0vF40T+9hGhlqb6rgruAVo=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"console-browserify\": {",
                "+      \"version\": \"1.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/console-browserify/-/console-browserify-1.1.0.tgz\",",
                "+      \"integrity\": \"sha1-8CQcRXMKn8YyOyBtvzjtx0HQuxA=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"date-now\": \"0.1.4\"",
                "+      }",
                "+    },",
                "+    \"constant-case\": {",
                "+      \"version\": \"1.1.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/constant-case/-/constant-case-1.1.2.tgz\",",
                "+      \"integrity\": \"sha1-jsLKW6ND4Aqjjb9OIA/VrJB+/WM=\",",
                "+      \"requires\": {",
                "+        \"snake-case\": \"1.1.2\",",
                "+        \"upper-case\": \"1.1.3\"",
                "+      }",
                "+    },",
                "+    \"constants-browserify\": {",
                "+      \"version\": \"1.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/constants-browserify/-/constants-browserify-1.0.0.tgz\",",
                "+      \"integrity\": \"sha1-wguW2MYXdIqvHBYCF2DNJ/y4y3U=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"contains-path\": {",
                "+      \"version\": \"0.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/contains-path/-/contains-path-0.1.0.tgz\",",
                "+      \"integrity\": \"sha1-/ozxhP9mcLa67wGp1IYaXL7EEgo=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"content-disposition\": {",
                "+      \"version\": \"0.5.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.2.tgz\",",
                "+      \"integrity\": \"sha1-DPaLud318r55YcOoUXjLhdunjLQ=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"content-type\": {",
                "+      \"version\": \"1.0.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/content-type/-/content-type-1.0.4.tgz\",",
                "+      \"integrity\": \"sha512-hIP3EEPs8tB9AT1L+NUqtwOAps4mk2Zob89MWXMHjHWg9milF/j4osnnQLXBCBFBk/tvIG/tUc9mOUJiPBhPXA==\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"convert-source-map\": {",
                "+      \"version\": \"1.5.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/convert-source-map/-/convert-source-map-1.5.1.tgz\",",
                "+      \"integrity\": \"sha1-uCeAl7m8IpNl3lxiz1/K7YtVmeU=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"cookie\": {",
                "+      \"version\": \"0.3.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/cookie/-/cookie-0.3.1.tgz\",",
                "+      \"integrity\": \"sha1-5+Ch+e9DtMi6klxcWpboBtFoc7s=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"cookie-signature\": {",
                "+      \"version\": \"1.0.6\",",
                "+      \"resolved\": \"https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz\",",
                "+      \"integrity\": \"sha1-4wOogrNCzD7oylE6eZmXNNqzriw=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"copy-webpack-plugin\": {",
                "+      \"version\": \"4.2.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/copy-webpack-plugin/-/copy-webpack-plugin-4.2.3.tgz\",",
                "+      \"integrity\": \"sha512-cL/Wl3Y1QmmKThl/mWeGB+HH3YH+25tn8nhqEGsZda4Yn7GqGnDZ+TbeKJ7A6zvrxyNhhuviYAxn/tCyyAqh8Q==\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"bluebird\": \"3.5.1\",",
                "+        \"glob\": \"7.1.2\",",
                "+        \"is-glob\": \"4.0.0\",",
                "+        \"loader-utils\": \"0.2.17\",",
                "+        \"lodash\": \"4.17.4\",",
                "+        \"minimatch\": \"3.0.4\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"glob\": {",
                "+          \"version\": \"7.1.2\",",
                "+          \"resolved\": \"https://registry.npmjs.org/glob/-/glob-7.1.2.tgz\",",
                "+          \"integrity\": \"sha512-MJTUg1kjuLeQCJ+ccE4Vpa6kKVXkPYJ2mOCQyUuKLcLQsdrMCpBPUi8qVE6+YuaJkozeA9NusTAw3hLr8Xe5EQ==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"fs.realpath\": \"1.0.0\",",
                "+            \"inflight\": \"1.0.6\",",
                "+            \"inherits\": \"2.0.3\",",
                "+            \"minimatch\": \"3.0.4\",",
                "+            \"once\": \"1.4.0\",",
                "+            \"path-is-absolute\": \"1.0.1\"",
                "+          }",
                "+        },",
                "+        \"is-extglob\": {",
                "+          \"version\": \"2.1.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz\",",
                "+          \"integrity\": \"sha1-qIwCU1eR8C7TfHahueqXc8gz+MI=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"is-glob\": {",
                "+          \"version\": \"4.0.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/is-glob/-/is-glob-4.0.0.tgz\",",
                "+          \"integrity\": \"sha1-lSHHaEXMJhCoUgPd8ICpWML/q8A=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"is-extglob\": \"2.1.1\"",
                "+          }",
                "+        },",
                "+        \"minimatch\": {",
                "+          \"version\": \"3.0.4\",",
                "+          \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-3.0.4.tgz\",",
                "+          \"integrity\": \"sha512-yJHVQEhyqPLUTgt9B83PXu6W3rx4MvvHvSUvToogpwoGDOUQ+yDrR0HRot+yOCdCO7u4hX3pWft6kWBBcqh0UA==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"brace-expansion\": \"1.1.8\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"core-js\": {",
                "+      \"version\": \"2.5.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/core-js/-/core-js-2.5.2.tgz\",",
                "+      \"integrity\": \"sha1-vEZIZW59ydyA19PHu8Fy2W50TmM=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"core-util-is\": {",
                "+      \"version\": \"1.0.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.2.tgz\",",
                "+      \"integrity\": \"sha1-tf1UIgqivFq1eqtxQMlAdUUDwac=\"",
                "+    },",
                "+    \"cosmiconfig\": {",
                "+      \"version\": \"2.2.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/cosmiconfig/-/cosmiconfig-2.2.2.tgz\",",
                "+      \"integrity\": \"sha512-GiNXLwAFPYHy25XmTPpafYvn3CLAkJ8FLsscq78MQd1Kh0OU6Yzhn4eV2MVF4G9WEQZoWEGltatdR+ntGPMl5A==\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"is-directory\": \"0.3.1\",",
                "+        \"js-yaml\": \"3.7.0\",",
                "+        \"minimist\": \"1.2.0\",",
                "+        \"object-assign\": \"4.1.1\",",
                "+        \"os-homedir\": \"1.0.2\",",
                "+        \"parse-json\": \"2.2.0\",",
                "+        \"require-from-string\": \"1.2.1\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"minimist\": {",
                "+          \"version\": \"1.2.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/minimist/-/minimist-1.2.0.tgz\",",
                "+          \"integrity\": \"sha1-o1AIsg9BOD7sH7kU9M1d95omQoQ=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"cross-spawn\": {",
                "+      \"version\": \"4.0.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/cross-spawn/-/cross-spawn-4.0.2.tgz\",",
                "+      \"integrity\": \"sha1-e5JHYhwjrf3ThWAEqCPL45dCTUE=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"lru-cache\": \"4.1.1\",",
                "+        \"which\": \"1.3.0\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"lru-cache\": {",
                "+          \"version\": \"4.1.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/lru-cache/-/lru-cache-4.1.1.tgz\",",
                "+          \"integrity\": \"sha512-q4spe4KTfsAS1SUHLO0wz8Qiyf1+vMIAgpRYioFYDMNqKfHQbg+AVDH3i4fvpl71/P1L0dBl+fQi+P37UYf0ew==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"pseudomap\": \"1.0.2\",",
                "+            \"yallist\": \"2.1.2\"",
                "+          }",
                "+        },",
                "+        \"which\": {",
                "+          \"version\": \"1.3.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/which/-/which-1.3.0.tgz\",",
                "+          \"integrity\": \"sha512-xcJpopdamTuY5duC/KnTTNBraPK54YwpenP4lzxU8H91GudWpFv38u0CKjclE1Wi2EH2EDz5LRcHcKbCIzqGyg==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"isexe\": \"2.0.0\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"cryptiles\": {",
                "+      \"version\": \"3.1.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/cryptiles/-/cryptiles-3.1.2.tgz\",",
                "+      \"integrity\": \"sha1-qJ+7Ig9c4l7FboxKqKT9e1sNKf4=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"boom\": \"5.2.0\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"boom\": {",
                "+          \"version\": \"5.2.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/boom/-/boom-5.2.0.tgz\",",
                "+          \"integrity\": \"sha512-Z5BTk6ZRe4tXXQlkqftmsAUANpXmuwlsF5Oov8ThoMbQRzdGTA1ngYRW160GexgOgjsFOKJz0LYhoNi+2AMBUw==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"hoek\": \"4.2.0\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"crypto-browserify\": {",
                "+      \"version\": \"3.3.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/crypto-browserify/-/crypto-browserify-3.3.0.tgz\",",
                "+      \"integrity\": \"sha1-ufx1u0oO1h3PHNXa6W6zDJw+UGw=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"browserify-aes\": \"0.4.0\",",
                "+        \"pbkdf2-compat\": \"2.0.1\",",
                "+        \"ripemd160\": \"0.2.0\",",
                "+        \"sha.js\": \"2.2.6\"",
                "+      }",
                "+    },",
                "+    \"cson-parser\": {",
                "+      \"version\": \"1.3.5\",",
                "+      \"resolved\": \"https://registry.npmjs.org/cson-parser/-/cson-parser-1.3.5.tgz\",",
                "+      \"integrity\": \"sha1-fsZ14DkUVTO/KmqFYHPxWZ2cLSQ=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"coffee-script\": \"1.12.7\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"coffee-script\": {",
                "+          \"version\": \"1.12.7\",",
                "+          \"resolved\": \"https://registry.npmjs.org/coffee-script/-/coffee-script-1.12.7.tgz\",",
                "+          \"integrity\": \"sha512-fLeEhqwymYat/MpTPUjSKHVYYl0ec2mOyALEMLmzr5i1isuG+6jfI2j2d5oBO3VIzgUXgBVIcOT9uH1TFxBckw==\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"css-color-names\": {",
                "+      \"version\": \"0.0.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/css-color-names/-/css-color-names-0.0.4.tgz\",",
                "+      \"integrity\": \"sha1-gIrcLnnPhHOAabZGyyDsJ762KeA=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"css-loader\": {",
                "+      \"version\": \"0.26.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/css-loader/-/css-loader-0.26.4.tgz\",",
                "+      \"integrity\": \"sha1-th6eMNuUMD5v/IkvEOzQmtAlof0=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-code-frame\": \"6.26.0\",",
                "+        \"css-selector-tokenizer\": \"0.7.0\",",
                "+        \"cssnano\": \"3.10.0\",",
                "+        \"loader-utils\": \"1.1.0\",",
                "+        \"lodash.camelcase\": \"4.3.0\",",
                "+        \"object-assign\": \"4.1.1\",",
                "+        \"postcss\": \"5.2.18\",",
                "+        \"postcss-modules-extract-imports\": \"1.1.0\",",
                "+        \"postcss-modules-local-by-default\": \"1.2.0\",",
                "+        \"postcss-modules-scope\": \"1.1.0\",",
                "+        \"postcss-modules-values\": \"1.3.0\",",
                "+        \"source-list-map\": \"0.1.8\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"loader-utils\": {",
                "+          \"version\": \"1.1.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/loader-utils/-/loader-utils-1.1.0.tgz\",",
                "+          \"integrity\": \"sha1-yYrvSIvM7aL/teLeZG1qdUQp9c0=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"big.js\": \"3.2.0\",",
                "+            \"emojis-list\": \"2.1.0\",",
                "+            \"json5\": \"0.5.1\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"css-select\": {",
                "+      \"version\": \"1.2.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/css-select/-/css-select-1.2.0.tgz\",",
                "+      \"integrity\": \"sha1-KzoRBTnFNV8c2NMUYj6HCxIeyFg=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"boolbase\": \"1.0.0\",",
                "+        \"css-what\": \"2.1.0\",",
                "+        \"domutils\": \"1.5.1\",",
                "+        \"nth-check\": \"1.0.1\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"domutils\": {",
                "+          \"version\": \"1.5.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/domutils/-/domutils-1.5.1.tgz\",",
                "+          \"integrity\": \"sha1-3NhIiib1Y9YQeeSMn3t+Mjc2gs8=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"dom-serializer\": \"0.1.0\",",
                "+            \"domelementtype\": \"1.3.0\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"css-selector-tokenizer\": {",
                "+      \"version\": \"0.7.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/css-selector-tokenizer/-/css-selector-tokenizer-0.7.0.tgz\",",
                "+      \"integrity\": \"sha1-5piEdK6MlTR3v15+/s/OzNnPTIY=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"cssesc\": \"0.1.0\",",
                "+        \"fastparse\": \"1.1.1\",",
                "+        \"regexpu-core\": \"1.0.0\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"regexpu-core\": {",
                "+          \"version\": \"1.0.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/regexpu-core/-/regexpu-core-1.0.0.tgz\",",
                "+          \"integrity\": \"sha1-hqdj9Y7k18L2sQLkdkBQ3n7ZDGs=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"regenerate\": \"1.3.3\",",
                "+            \"regjsgen\": \"0.2.0\",",
                "+            \"regjsparser\": \"0.1.5\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"css-what\": {",
                "+      \"version\": \"2.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/css-what/-/css-what-2.1.0.tgz\",",
                "+      \"integrity\": \"sha1-lGfQMsOM+u+58teVASUwYvh/ob0=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"cssesc\": {",
                "+      \"version\": \"0.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/cssesc/-/cssesc-0.1.0.tgz\",",
                "+      \"integrity\": \"sha1-yBSQPkViM3GgR3tAEJqq++6t27Q=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"csslint\": {",
                "+      \"version\": \"0.10.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/csslint/-/csslint-0.10.0.tgz\",",
                "+      \"integrity\": \"sha1-OmoE51Zcjp0ZvrSXZ8fslug2WAU=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"parserlib\": \"0.2.5\"",
                "+      }",
                "+    },",
                "+    \"cssnano\": {",
                "+      \"version\": \"3.10.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/cssnano/-/cssnano-3.10.0.tgz\",",
                "+      \"integrity\": \"sha1-Tzj2zqK5sX+gFJDyPx3GjqZcHDg=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"autoprefixer\": \"6.7.7\",",
                "+        \"decamelize\": \"1.2.0\",",
                "+        \"defined\": \"1.0.0\",",
                "+        \"has\": \"1.0.1\",",
                "+        \"object-assign\": \"4.1.1\",",
                "+        \"postcss\": \"5.2.18\",",
                "+        \"postcss-calc\": \"5.3.1\",",
                "+        \"postcss-colormin\": \"2.2.2\",",
                "+        \"postcss-convert-values\": \"2.6.1\",",
                "+        \"postcss-discard-comments\": \"2.0.4\",",
                "+        \"postcss-discard-duplicates\": \"2.1.0\",",
                "+        \"postcss-discard-empty\": \"2.1.0\",",
                "+        \"postcss-discard-overridden\": \"0.1.1\",",
                "+        \"postcss-discard-unused\": \"2.2.3\",",
                "+        \"postcss-filter-plugins\": \"2.0.2\",",
                "+        \"postcss-merge-idents\": \"2.1.7\",",
                "+        \"postcss-merge-longhand\": \"2.0.2\",",
                "+        \"postcss-merge-rules\": \"2.1.2\",",
                "+        \"postcss-minify-font-values\": \"1.0.5\",",
                "+        \"postcss-minify-gradients\": \"1.0.5\",",
                "+        \"postcss-minify-params\": \"1.2.2\",",
                "+        \"postcss-minify-selectors\": \"2.1.1\",",
                "+        \"postcss-normalize-charset\": \"1.1.1\",",
                "+        \"postcss-normalize-url\": \"3.0.8\",",
                "+        \"postcss-ordered-values\": \"2.2.3\",",
                "+        \"postcss-reduce-idents\": \"2.4.0\",",
                "+        \"postcss-reduce-initial\": \"1.0.1\",",
                "+        \"postcss-reduce-transforms\": \"1.0.4\",",
                "+        \"postcss-svgo\": \"2.1.6\",",
                "+        \"postcss-unique-selectors\": \"2.0.2\",",
                "+        \"postcss-value-parser\": \"3.3.0\",",
                "+        \"postcss-zindex\": \"2.2.0\"",
                "+      }",
                "+    },",
                "+    \"csso\": {",
                "+      \"version\": \"2.3.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/csso/-/csso-2.3.2.tgz\",",
                "+      \"integrity\": \"sha1-3dUsWHAz9J6Utx/FVWnyUuj/X4U=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"clap\": \"1.2.3\",",
                "+        \"source-map\": \"0.5.7\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"source-map\": {",
                "+          \"version\": \"0.5.7\",",
                "+          \"resolved\": \"https://registry.npmjs.org/source-map/-/source-map-0.5.7.tgz\",",
                "+          \"integrity\": \"sha1-igOdLRAh0i0eoUyA2OpGi6LvP8w=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"currently-unhandled\": {",
                "+      \"version\": \"0.4.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/currently-unhandled/-/currently-unhandled-0.4.1.tgz\",",
                "+      \"integrity\": \"sha1-mI3zP+qxke95mmE2nddsF635V+o=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"array-find-index\": \"1.0.2\"",
                "+      }",
                "+    },",
                "+    \"custom-event\": {",
                "+      \"version\": \"1.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/custom-event/-/custom-event-1.0.1.tgz\",",
                "+      \"integrity\": \"sha1-XQKkaFCt8bSjF5RqOSj8y1v9BCU=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"d\": {",
                "+      \"version\": \"1.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/d/-/d-1.0.0.tgz\",",
                "+      \"integrity\": \"sha1-dUu1v+VUUdpppYuU1F9MWwRi1Y8=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"es5-ext\": \"0.10.37\"",
                "+      }",
                "+    },",
                "+    \"dashdash\": {",
                "+      \"version\": \"1.14.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/dashdash/-/dashdash-1.14.1.tgz\",",
                "+      \"integrity\": \"sha1-hTz6D3y+L+1d4gMmuN1YEDX24vA=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"assert-plus\": \"1.0.0\"",
                "+      }",
                "+    },",
                "+    \"date-now\": {",
                "+      \"version\": \"0.1.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/date-now/-/date-now-0.1.4.tgz\",",
                "+      \"integrity\": \"sha1-6vQ5/U1ISK105cx9vvIAZyueNFs=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"date-time\": {",
                "+      \"version\": \"0.1.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/date-time/-/date-time-0.1.1.tgz\",",
                "+      \"integrity\": \"sha1-7S9tk9l5DOL9ZtW1/z7dW7y/Owc=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"dateformat\": {",
                "+      \"version\": \"1.0.2-1.2.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/dateformat/-/dateformat-1.0.2-1.2.3.tgz\",",
                "+      \"integrity\": \"sha1-sCIMAt6YYXQztyhRz0fePfLNvuk=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"debug\": {",
                "+      \"version\": \"2.6.9\",",
                "+      \"resolved\": \"https://registry.npmjs.org/debug/-/debug-2.6.9.tgz\",",
                "+      \"integrity\": \"sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"ms\": \"2.0.0\"",
                "+      }",
                "+    },",
                "+    \"decamelize\": {",
                "+      \"version\": \"1.2.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/decamelize/-/decamelize-1.2.0.tgz\",",
                "+      \"integrity\": \"sha1-9lNNFRSCabIDUue+4m9QH5oZEpA=\"",
                "+    },",
                "+    \"deep-equal\": {",
                "+      \"version\": \"0.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/deep-equal/-/deep-equal-0.0.0.tgz\",",
                "+      \"integrity\": \"sha1-mWedO70EcVb81FDT0B7rkGhpHoM=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"deep-is\": {",
                "+      \"version\": \"0.1.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/deep-is/-/deep-is-0.1.3.tgz\",",
                "+      \"integrity\": \"sha1-s2nW+128E+7PUk+RsHD+7cNXzzQ=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"define-properties\": {",
                "+      \"version\": \"1.1.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/define-properties/-/define-properties-1.1.2.tgz\",",
                "+      \"integrity\": \"sha1-g6c/L+pWmJj7c3GTyPhzyvbUXJQ=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"foreach\": \"2.0.5\",",
                "+        \"object-keys\": \"1.0.11\"",
                "+      }",
                "+    },",
                "+    \"defined\": {",
                "+      \"version\": \"1.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/defined/-/defined-1.0.0.tgz\",",
                "+      \"integrity\": \"sha1-yY2bzvdWdBiOEQlpFRGZ45sfppM=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"del\": {",
                "+      \"version\": \"2.2.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/del/-/del-2.2.2.tgz\",",
                "+      \"integrity\": \"sha1-wSyYHQZ4RshLyvhiz/kw2Qf/0ag=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"globby\": \"5.0.0\",",
                "+        \"is-path-cwd\": \"1.0.0\",",
                "+        \"is-path-in-cwd\": \"1.0.0\",",
                "+        \"object-assign\": \"4.1.1\",",
                "+        \"pify\": \"2.3.0\",",
                "+        \"pinkie-promise\": \"2.0.1\",",
                "+        \"rimraf\": \"2.6.2\"",
                "+      }",
                "+    },",
                "+    \"delayed-stream\": {",
                "+      \"version\": \"1.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz\",",
                "+      \"integrity\": \"sha1-3zrhmayt+31ECqrgsp4icrJOxhk=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"depd\": {",
                "+      \"version\": \"1.1.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/depd/-/depd-1.1.1.tgz\",",
                "+      \"integrity\": \"sha1-V4O04cRZ8G+lyif5kfPQbnoxA1k=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"destroy\": {",
                "+      \"version\": \"1.0.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/destroy/-/destroy-1.0.4.tgz\",",
                "+      \"integrity\": \"sha1-l4hXRCxEdJ5CBmE+N5RiBYJqvYA=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"detect-indent\": {",
                "+      \"version\": \"4.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/detect-indent/-/detect-indent-4.0.0.tgz\",",
                "+      \"integrity\": \"sha1-920GQ1LN9Docts5hnE7jqUdd4gg=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"repeating\": \"2.0.1\"",
                "+      }",
                "+    },",
                "+    \"di\": {",
                "+      \"version\": \"0.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/di/-/di-0.0.1.tgz\",",
                "+      \"integrity\": \"sha1-gGZJMmzqp8qjMG112YXqJ0i6kTw=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"diff\": {",
                "+      \"version\": \"2.2.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/diff/-/diff-2.2.3.tgz\",",
                "+      \"integrity\": \"sha1-YOr9DSjukG5Oj/ClLBIpUhAzv5k=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"doctrine\": {",
                "+      \"version\": \"2.0.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/doctrine/-/doctrine-2.0.2.tgz\",",
                "+      \"integrity\": \"sha512-y0tm5Pq6ywp3qSTZ1vPgVdAnbDEoeoc5wlOHXoY1c4Wug/a7JvqHIl7BTvwodaHmejWkK/9dSb3sCYfyo/om8A==\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"esutils\": \"2.0.2\"",
                "+      }",
                "+    },",
                "+    \"dom-converter\": {",
                "+      \"version\": \"0.1.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/dom-converter/-/dom-converter-0.1.4.tgz\",",
                "+      \"integrity\": \"sha1-pF71cnuJDJv/5tfIduexnLDhfzs=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"utila\": \"0.3.3\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"utila\": {",
                "+          \"version\": \"0.3.3\",",
                "+          \"resolved\": \"https://registry.npmjs.org/utila/-/utila-0.3.3.tgz\",",
                "+          \"integrity\": \"sha1-1+jn1+MJEHCSsF+NloiCTWM6QiY=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"dom-serialize\": {",
                "+      \"version\": \"2.2.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/dom-serialize/-/dom-serialize-2.2.1.tgz\",",
                "+      \"integrity\": \"sha1-ViromZ9Evl6jB29UGdzVnrQ6yVs=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"custom-event\": \"1.0.1\",",
                "+        \"ent\": \"2.2.0\",",
                "+        \"extend\": \"3.0.1\",",
                "+        \"void-elements\": \"2.0.1\"",
                "+      }",
                "+    },",
                "+    \"dom-serializer\": {",
                "+      \"version\": \"0.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/dom-serializer/-/dom-serializer-0.1.0.tgz\",",
                "+      \"integrity\": \"sha1-BzxpdUbOB4DOI75KKOKT5AvDDII=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"domelementtype\": \"1.1.3\",",
                "+        \"entities\": \"1.1.1\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"domelementtype\": {",
                "+          \"version\": \"1.1.3\",",
                "+          \"resolved\": \"https://registry.npmjs.org/domelementtype/-/domelementtype-1.1.3.tgz\",",
                "+          \"integrity\": \"sha1-vSh3PiZCiBrsUVRJJCmcXNgiGFs=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"entities\": {",
                "+          \"version\": \"1.1.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/entities/-/entities-1.1.1.tgz\",",
                "+          \"integrity\": \"sha1-blwtClYhtdra7O+AuQ7ftc13cvA=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"domain-browser\": {",
                "+      \"version\": \"1.1.7\",",
                "+      \"resolved\": \"https://registry.npmjs.org/domain-browser/-/domain-browser-1.1.7.tgz\",",
                "+      \"integrity\": \"sha1-hnqksJP6oF8d4IwG9NeyH9+GmLw=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"domelementtype\": {",
                "+      \"version\": \"1.3.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/domelementtype/-/domelementtype-1.3.0.tgz\",",
                "+      \"integrity\": \"sha1-sXrtguirWeUt2cGbF1bg/BhyBMI=\"",
                "+    },",
                "+    \"domhandler\": {",
                "+      \"version\": \"2.0.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/domhandler/-/domhandler-2.0.3.tgz\",",
                "+      \"integrity\": \"sha1-iJ+N9iZAOvB4jinWbV1cb36/D9Y=\",",
                "+      \"requires\": {",
                "+        \"domelementtype\": \"1.3.0\"",
                "+      }",
                "+    },",
                "+    \"domutils\": {",
                "+      \"version\": \"1.4.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/domutils/-/domutils-1.4.3.tgz\",",
                "+      \"integrity\": \"sha1-CGVRN5bGswYDGFDhdVFrr4C3Km8=\",",
                "+      \"requires\": {",
                "+        \"domelementtype\": \"1.3.0\"",
                "+      }",
                "+    },",
                "+    \"dot-case\": {",
                "+      \"version\": \"1.1.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/dot-case/-/dot-case-1.1.2.tgz\",",
                "+      \"integrity\": \"sha1-HnOCaQDeKNbeVIC8HeMdCEKwa+w=\",",
                "+      \"requires\": {",
                "+        \"sentence-case\": \"1.1.3\"",
                "+      }",
                "+    },",
                "+    \"duplexer\": {",
                "+      \"version\": \"0.1.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/duplexer/-/duplexer-0.1.1.tgz\",",
                "+      \"integrity\": \"sha1-rOb/gIwc5mtX0ev5eXessCM0z8E=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"each-async\": {",
                "+      \"version\": \"0.1.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/each-async/-/each-async-0.1.3.tgz\",",
                "+      \"integrity\": \"sha1-tDYCWwjaL4ZggCVRnjCWdj3t/KM=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"ecc-jsbn\": {",
                "+      \"version\": \"0.1.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/ecc-jsbn/-/ecc-jsbn-0.1.1.tgz\",",
                "+      \"integrity\": \"sha1-D8c6ntXw1Tw4GTOYUj735UN3dQU=\",",
                "+      \"dev\": true,",
                "+      \"optional\": true,",
                "+      \"requires\": {",
                "+        \"jsbn\": \"0.1.1\"",
                "+      }",
                "+    },",
                "+    \"ee-first\": {",
                "+      \"version\": \"1.1.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz\",",
                "+      \"integrity\": \"sha1-WQxhFWsK4vTwJVcyoViyZrxWsh0=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"electron-to-chromium\": {",
                "+      \"version\": \"1.3.28\",",
                "+      \"resolved\": \"https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.3.28.tgz\",",
                "+      \"integrity\": \"sha1-jdTmRYCGZE6fnwoc8y4qH53/2e4=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"emojis-list\": {",
                "+      \"version\": \"2.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/emojis-list/-/emojis-list-2.1.0.tgz\",",
                "+      \"integrity\": \"sha1-TapNnbAPmBmIDHn6RXrlsJof04k=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"encodeurl\": {",
                "+      \"version\": \"1.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.1.tgz\",",
                "+      \"integrity\": \"sha1-eePVhlU0aQn+bw9Fpd5oEDspTSA=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"engine.io\": {",
                "+      \"version\": \"1.6.10\",",
                "+      \"resolved\": \"https://registry.npmjs.org/engine.io/-/engine.io-1.6.10.tgz\",",
                "+      \"integrity\": \"sha1-+H2E4b0h0aLsf43u8MYgVKzfsno=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"accepts\": \"1.1.4\",",
                "+        \"base64id\": \"0.1.0\",",
                "+        \"debug\": \"2.2.0\",",
                "+        \"engine.io-parser\": \"1.2.4\",",
                "+        \"ws\": \"1.0.1\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"accepts\": {",
                "+          \"version\": \"1.1.4\",",
                "+          \"resolved\": \"https://registry.npmjs.org/accepts/-/accepts-1.1.4.tgz\",",
                "+          \"integrity\": \"sha1-1xyW99QdD+2iw4zRToonwEFY30o=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"mime-types\": \"2.0.14\",",
                "+            \"negotiator\": \"0.4.9\"",
                "+          }",
                "+        },",
                "+        \"debug\": {",
                "+          \"version\": \"2.2.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/debug/-/debug-2.2.0.tgz\",",
                "+          \"integrity\": \"sha1-+HBX6ZWxofauaklgZkE3vFbwOdo=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"ms\": \"0.7.1\"",
                "+          }",
                "+        },",
                "+        \"mime-db\": {",
                "+          \"version\": \"1.12.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/mime-db/-/mime-db-1.12.0.tgz\",",
                "+          \"integrity\": \"sha1-PQxjGA9FjrENMlqqN9fFiuMS6dc=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"mime-types\": {",
                "+          \"version\": \"2.0.14\",",
                "+          \"resolved\": \"https://registry.npmjs.org/mime-types/-/mime-types-2.0.14.tgz\",",
                "+          \"integrity\": \"sha1-MQ4VnbI+B3+Lsit0jav6SVcUCqY=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"mime-db\": \"1.12.0\"",
                "+          }",
                "+        },",
                "+        \"ms\": {",
                "+          \"version\": \"0.7.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/ms/-/ms-0.7.1.tgz\",",
                "+          \"integrity\": \"sha1-nNE8A62/8ltl7/3nzoZO6VIBcJg=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"negotiator\": {",
                "+          \"version\": \"0.4.9\",",
                "+          \"resolved\": \"https://registry.npmjs.org/negotiator/-/negotiator-0.4.9.tgz\",",
                "+          \"integrity\": \"sha1-kuRrbbU8fkIe1koryU8IvnYw3z8=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"engine.io-client\": {",
                "+      \"version\": \"1.6.9\",",
                "+      \"resolved\": \"https://registry.npmjs.org/engine.io-client/-/engine.io-client-1.6.9.tgz\",",
                "+      \"integrity\": \"sha1-HWrUgEilCDyVCWlDsp0279shJAE=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"component-emitter\": \"1.1.2\",",
                "+        \"component-inherit\": \"0.0.3\",",
                "+        \"debug\": \"2.2.0\",",
                "+        \"engine.io-parser\": \"1.2.4\",",
                "+        \"has-cors\": \"1.1.0\",",
                "+        \"indexof\": \"0.0.1\",",
                "+        \"parsejson\": \"0.0.1\",",
                "+        \"parseqs\": \"0.0.2\",",
                "+        \"parseuri\": \"0.0.4\",",
                "+        \"ws\": \"1.0.1\",",
                "+        \"xmlhttprequest-ssl\": \"1.5.1\",",
                "+        \"yeast\": \"0.1.2\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"debug\": {",
                "+          \"version\": \"2.2.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/debug/-/debug-2.2.0.tgz\",",
                "+          \"integrity\": \"sha1-+HBX6ZWxofauaklgZkE3vFbwOdo=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"ms\": \"0.7.1\"",
                "+          }",
                "+        },",
                "+        \"ms\": {",
                "+          \"version\": \"0.7.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/ms/-/ms-0.7.1.tgz\",",
                "+          \"integrity\": \"sha1-nNE8A62/8ltl7/3nzoZO6VIBcJg=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"engine.io-parser\": {",
                "+      \"version\": \"1.2.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/engine.io-parser/-/engine.io-parser-1.2.4.tgz\",",
                "+      \"integrity\": \"sha1-4Il7C/FOeS1M0qWVBVORnFaUjEI=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"after\": \"0.8.1\",",
                "+        \"arraybuffer.slice\": \"0.0.6\",",
                "+        \"base64-arraybuffer\": \"0.1.2\",",
                "+        \"blob\": \"0.0.4\",",
                "+        \"has-binary\": \"0.1.6\",",
                "+        \"utf8\": \"2.1.0\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"has-binary\": {",
                "+          \"version\": \"0.1.6\",",
                "+          \"resolved\": \"https://registry.npmjs.org/has-binary/-/has-binary-0.1.6.tgz\",",
                "+          \"integrity\": \"sha1-JTJvOc+k9hath4eJTjryz7x7bhA=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"isarray\": \"0.0.1\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"enhanced-resolve\": {",
                "+      \"version\": \"0.9.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/enhanced-resolve/-/enhanced-resolve-0.9.1.tgz\",",
                "+      \"integrity\": \"sha1-TW5omzcl+GCQknzMhs2fFjW4ni4=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"graceful-fs\": \"4.1.11\",",
                "+        \"memory-fs\": \"0.2.0\",",
                "+        \"tapable\": \"0.1.10\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"memory-fs\": {",
                "+          \"version\": \"0.2.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/memory-fs/-/memory-fs-0.2.0.tgz\",",
                "+          \"integrity\": \"sha1-8rslNovBIeORwlIN6Slpyu4KApA=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"ent\": {",
                "+      \"version\": \"2.2.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/ent/-/ent-2.2.0.tgz\",",
                "+      \"integrity\": \"sha1-6WQhkyWiHQX0RGai9obtbOX13R0=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"entities\": {",
                "+      \"version\": \"0.5.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/entities/-/entities-0.5.0.tgz\",",
                "+      \"integrity\": \"sha1-9hHLWuIhBQ4AEsZpeVA/164ZzEk=\"",
                "+    },",
                "+    \"errno\": {",
                "+      \"version\": \"0.1.5\",",
                "+      \"resolved\": \"https://registry.npmjs.org/errno/-/errno-0.1.5.tgz\",",
                "+      \"integrity\": \"sha512-tv2H+e3KBnMmNRuoVG24uorOj3XfYo+/nJJd07PUISRr0kaMKQKL5kyD+6ANXk1ZIIsvbORsjvHnCfC4KIc7uQ==\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"prr\": \"1.0.1\"",
                "+      }",
                "+    },",
                "+    \"error-ex\": {",
                "+      \"version\": \"1.3.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/error-ex/-/error-ex-1.3.1.tgz\",",
                "+      \"integrity\": \"sha1-+FWobOYa3E6GIcPNoh56dhLDqNw=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"is-arrayish\": \"0.2.1\"",
                "+      }",
                "+    },",
                "+    \"es-abstract\": {",
                "+      \"version\": \"1.10.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/es-abstract/-/es-abstract-1.10.0.tgz\",",
                "+      \"integrity\": \"sha512-/uh/DhdqIOSkAWifU+8nG78vlQxdLckUdI/sPgy0VhuXi2qJ7T8czBmqIYtLQVpCIFYafChnsRsB5pyb1JdmCQ==\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"es-to-primitive\": \"1.1.1\",",
                "+        \"function-bind\": \"1.1.1\",",
                "+        \"has\": \"1.0.1\",",
                "+        \"is-callable\": \"1.1.3\",",
                "+        \"is-regex\": \"1.0.4\"",
                "+      }",
                "+    },",
                "+    \"es-to-primitive\": {",
                "+      \"version\": \"1.1.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/es-to-primitive/-/es-to-primitive-1.1.1.tgz\",",
                "+      \"integrity\": \"sha1-RTVSSKiJeQNLZ5Lhm7gfK3l13Q0=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"is-callable\": \"1.1.3\",",
                "+        \"is-date-object\": \"1.0.1\",",
                "+        \"is-symbol\": \"1.0.1\"",
                "+      }",
                "+    },",
                "+    \"es5-ext\": {",
                "+      \"version\": \"0.10.37\",",
                "+      \"resolved\": \"https://registry.npmjs.org/es5-ext/-/es5-ext-0.10.37.tgz\",",
                "+      \"integrity\": \"sha1-DudB0Ui4AGm6J9AgOTdWryV978M=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"es6-iterator\": \"2.0.3\",",
                "+        \"es6-symbol\": \"3.1.1\"",
                "+      }",
                "+    },",
                "+    \"es6-iterator\": {",
                "+      \"version\": \"2.0.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/es6-iterator/-/es6-iterator-2.0.3.tgz\",",
                "+      \"integrity\": \"sha1-p96IkUGgWpSwhUQDstCg+/qY87c=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"d\": \"1.0.0\",",
                "+        \"es5-ext\": \"0.10.37\",",
                "+        \"es6-symbol\": \"3.1.1\"",
                "+      }",
                "+    },",
                "+    \"es6-map\": {",
                "+      \"version\": \"0.1.5\",",
                "+      \"resolved\": \"https://registry.npmjs.org/es6-map/-/es6-map-0.1.5.tgz\",",
                "+      \"integrity\": \"sha1-kTbgUD3MBqMBaQ8LsU/042TpSfA=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"d\": \"1.0.0\",",
                "+        \"es5-ext\": \"0.10.37\",",
                "+        \"es6-iterator\": \"2.0.3\",",
                "+        \"es6-set\": \"0.1.5\",",
                "+        \"es6-symbol\": \"3.1.1\",",
                "+        \"event-emitter\": \"0.3.5\"",
                "+      }",
                "+    },",
                "+    \"es6-promise\": {",
                "+      \"version\": \"3.3.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/es6-promise/-/es6-promise-3.3.1.tgz\",",
                "+      \"integrity\": \"sha1-oIzd6EzNvzTQJ6FFG8kdS80ophM=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"es6-set\": {",
                "+      \"version\": \"0.1.5\",",
                "+      \"resolved\": \"https://registry.npmjs.org/es6-set/-/es6-set-0.1.5.tgz\",",
                "+      \"integrity\": \"sha1-0rPsXU2ADO2BjbU40ol02wpzzLE=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"d\": \"1.0.0\",",
                "+        \"es5-ext\": \"0.10.37\",",
                "+        \"es6-iterator\": \"2.0.3\",",
                "+        \"es6-symbol\": \"3.1.1\",",
                "+        \"event-emitter\": \"0.3.5\"",
                "+      }",
                "+    },",
                "+    \"es6-symbol\": {",
                "+      \"version\": \"3.1.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/es6-symbol/-/es6-symbol-3.1.1.tgz\",",
                "+      \"integrity\": \"sha1-vwDvT9q2uhtG7Le2KbTH7VcVzHc=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"d\": \"1.0.0\",",
                "+        \"es5-ext\": \"0.10.37\"",
                "+      }",
                "+    },",
                "+    \"es6-weak-map\": {",
                "+      \"version\": \"2.0.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/es6-weak-map/-/es6-weak-map-2.0.2.tgz\",",
                "+      \"integrity\": \"sha1-XjqzIlH/0VOKH45f+hNXdy+S2W8=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"d\": \"1.0.0\",",
                "+        \"es5-ext\": \"0.10.37\",",
                "+        \"es6-iterator\": \"2.0.3\",",
                "+        \"es6-symbol\": \"3.1.1\"",
                "+      }",
                "+    },",
                "+    \"escape-html\": {",
                "+      \"version\": \"1.0.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz\",",
                "+      \"integrity\": \"sha1-Aljq5NPQwJdN4cFpGI7wBR0dGYg=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"escape-string-regexp\": {",
                "+      \"version\": \"1.0.5\",",
                "+      \"resolved\": \"https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz\",",
                "+      \"integrity\": \"sha1-G2HAViGQqN/2rjuyzwIAyhMLhtQ=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"escodegen\": {",
                "+      \"version\": \"1.8.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/escodegen/-/escodegen-1.8.1.tgz\",",
                "+      \"integrity\": \"sha1-WltTr0aTEQvrsIZ6o0MN07cKEBg=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"esprima\": \"2.7.3\",",
                "+        \"estraverse\": \"1.9.3\",",
                "+        \"esutils\": \"2.0.2\",",
                "+        \"optionator\": \"0.8.2\",",
                "+        \"source-map\": \"0.2.0\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"estraverse\": {",
                "+          \"version\": \"1.9.3\",",
                "+          \"resolved\": \"https://registry.npmjs.org/estraverse/-/estraverse-1.9.3.tgz\",",
                "+          \"integrity\": \"sha1-r2fy3JIlgkFZUJJgkaQAXSnJu0Q=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"source-map\": {",
                "+          \"version\": \"0.2.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/source-map/-/source-map-0.2.0.tgz\",",
                "+          \"integrity\": \"sha1-2rc/vPwrqBm03gO9b26qSBZLP50=\",",
                "+          \"dev\": true,",
                "+          \"optional\": true,",
                "+          \"requires\": {",
                "+            \"amdefine\": \"1.0.1\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"escope\": {",
                "+      \"version\": \"3.6.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/escope/-/escope-3.6.0.tgz\",",
                "+      \"integrity\": \"sha1-4Bl16BJ4GhY6ba392AOY3GTIicM=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"es6-map\": \"0.1.5\",",
                "+        \"es6-weak-map\": \"2.0.2\",",
                "+        \"esrecurse\": \"4.2.0\",",
                "+        \"estraverse\": \"4.2.0\"",
                "+      }",
                "+    },",
                "+    \"eslint\": {",
                "+      \"version\": \"3.19.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/eslint/-/eslint-3.19.0.tgz\",",
                "+      \"integrity\": \"sha1-yPxiAcf0DdCJQbh8CFdnOGpnmsw=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-code-frame\": \"6.26.0\",",
                "+        \"chalk\": \"1.1.3\",",
                "+        \"concat-stream\": \"1.6.0\",",
                "+        \"debug\": \"2.6.9\",",
                "+        \"doctrine\": \"2.0.2\",",
                "+        \"escope\": \"3.6.0\",",
                "+        \"espree\": \"3.5.2\",",
                "+        \"esquery\": \"1.0.0\",",
                "+        \"estraverse\": \"4.2.0\",",
                "+        \"esutils\": \"2.0.2\",",
                "+        \"file-entry-cache\": \"2.0.0\",",
                "+        \"glob\": \"7.1.2\",",
                "+        \"globals\": \"9.18.0\",",
                "+        \"ignore\": \"3.3.7\",",
                "+        \"imurmurhash\": \"0.1.4\",",
                "+        \"inquirer\": \"0.12.0\",",
                "+        \"is-my-json-valid\": \"2.16.1\",",
                "+        \"is-resolvable\": \"1.0.0\",",
                "+        \"js-yaml\": \"3.7.0\",",
                "+        \"json-stable-stringify\": \"1.0.1\",",
                "+        \"levn\": \"0.3.0\",",
                "+        \"lodash\": \"4.17.4\",",
                "+        \"mkdirp\": \"0.5.1\",",
                "+        \"natural-compare\": \"1.4.0\",",
                "+        \"optionator\": \"0.8.2\",",
                "+        \"path-is-inside\": \"1.0.2\",",
                "+        \"pluralize\": \"1.2.1\",",
                "+        \"progress\": \"1.1.8\",",
                "+        \"require-uncached\": \"1.0.3\",",
                "+        \"shelljs\": \"0.7.8\",",
                "+        \"strip-bom\": \"3.0.0\",",
                "+        \"strip-json-comments\": \"2.0.1\",",
                "+        \"table\": \"3.8.3\",",
                "+        \"text-table\": \"0.2.0\",",
                "+        \"user-home\": \"2.0.0\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"glob\": {",
                "+          \"version\": \"7.1.2\",",
                "+          \"resolved\": \"https://registry.npmjs.org/glob/-/glob-7.1.2.tgz\",",
                "+          \"integrity\": \"sha512-MJTUg1kjuLeQCJ+ccE4Vpa6kKVXkPYJ2mOCQyUuKLcLQsdrMCpBPUi8qVE6+YuaJkozeA9NusTAw3hLr8Xe5EQ==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"fs.realpath\": \"1.0.0\",",
                "+            \"inflight\": \"1.0.6\",",
                "+            \"inherits\": \"2.0.3\",",
                "+            \"minimatch\": \"3.0.4\",",
                "+            \"once\": \"1.4.0\",",
                "+            \"path-is-absolute\": \"1.0.1\"",
                "+          }",
                "+        },",
                "+        \"minimatch\": {",
                "+          \"version\": \"3.0.4\",",
                "+          \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-3.0.4.tgz\",",
                "+          \"integrity\": \"sha512-yJHVQEhyqPLUTgt9B83PXu6W3rx4MvvHvSUvToogpwoGDOUQ+yDrR0HRot+yOCdCO7u4hX3pWft6kWBBcqh0UA==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"brace-expansion\": \"1.1.8\"",
                "+          }",
                "+        },",
                "+        \"user-home\": {",
                "+          \"version\": \"2.0.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/user-home/-/user-home-2.0.0.tgz\",",
                "+          \"integrity\": \"sha1-nHC/2Babwdy/SGBODwS4tJzenp8=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"os-homedir\": \"1.0.2\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"eslint-config-google\": {",
                "+      \"version\": \"0.7.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/eslint-config-google/-/eslint-config-google-0.7.1.tgz\",",
                "+      \"integrity\": \"sha1-VZj4SY6eB4Qg80uASVuNlZ9lH7I=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"eslint-config-standard\": {",
                "+      \"version\": \"10.2.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/eslint-config-standard/-/eslint-config-standard-10.2.1.tgz\",",
                "+      \"integrity\": \"sha1-wGHk0GbzedwXzVYsZOgZtN1FRZE=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"eslint-import-resolver-node\": {",
                "+      \"version\": \"0.3.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/eslint-import-resolver-node/-/eslint-import-resolver-node-0.3.1.tgz\",",
                "+      \"integrity\": \"sha512-yUtXS15gIcij68NmXmP9Ni77AQuCN0itXbCc/jWd8C6/yKZaSNXicpC8cgvjnxVdmfsosIXrjpzFq7GcDryb6A==\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"debug\": \"2.6.9\",",
                "+        \"resolve\": \"1.5.0\"",
                "+      }",
                "+    },",
                "+    \"eslint-module-utils\": {",
                "+      \"version\": \"2.1.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/eslint-module-utils/-/eslint-module-utils-2.1.1.tgz\",",
                "+      \"integrity\": \"sha512-jDI/X5l/6D1rRD/3T43q8Qgbls2nq5km5KSqiwlyUbGo5+04fXhMKdCPhjwbqAa6HXWaMxj8Q4hQDIh7IadJQw==\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"debug\": \"2.6.9\",",
                "+        \"pkg-dir\": \"1.0.0\"",
                "+      }",
                "+    },",
                "+    \"eslint-plugin-import\": {",
                "+      \"version\": \"2.8.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/eslint-plugin-import/-/eslint-plugin-import-2.8.0.tgz\",",
                "+      \"integrity\": \"sha512-Rf7dfKJxZ16QuTgVv1OYNxkZcsu/hULFnC+e+w0Gzi6jMC3guQoWQgxYxc54IDRinlb6/0v5z/PxxIKmVctN+g==\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"builtin-modules\": \"1.1.1\",",
                "+        \"contains-path\": \"0.1.0\",",
                "+        \"debug\": \"2.6.9\",",
                "+        \"doctrine\": \"1.5.0\",",
                "+        \"eslint-import-resolver-node\": \"0.3.1\",",
                "+        \"eslint-module-utils\": \"2.1.1\",",
                "+        \"has\": \"1.0.1\",",
                "+        \"lodash.cond\": \"4.5.2\",",
                "+        \"minimatch\": \"3.0.4\",",
                "+        \"read-pkg-up\": \"2.0.0\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"doctrine\": {",
                "+          \"version\": \"1.5.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/doctrine/-/doctrine-1.5.0.tgz\",",
                "+          \"integrity\": \"sha1-N53Ocw9hZvds76TmcHoVmwLFpvo=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"esutils\": \"2.0.2\",",
                "+            \"isarray\": \"1.0.0\"",
                "+          }",
                "+        },",
                "+        \"isarray\": {",
                "+          \"version\": \"1.0.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz\",",
                "+          \"integrity\": \"sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"minimatch\": {",
                "+          \"version\": \"3.0.4\",",
                "+          \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-3.0.4.tgz\",",
                "+          \"integrity\": \"sha512-yJHVQEhyqPLUTgt9B83PXu6W3rx4MvvHvSUvToogpwoGDOUQ+yDrR0HRot+yOCdCO7u4hX3pWft6kWBBcqh0UA==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"brace-expansion\": \"1.1.8\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"eslint-plugin-node\": {",
                "+      \"version\": \"4.2.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/eslint-plugin-node/-/eslint-plugin-node-4.2.3.tgz\",",
                "+      \"integrity\": \"sha512-vIUQPuwbVYdz/CYnlTLsJrRy7iXHQjdEe5wz0XhhdTym3IInM/zZLlPf9nZ2mThsH0QcsieCOWs2vOeCy/22LQ==\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"ignore\": \"3.3.7\",",
                "+        \"minimatch\": \"3.0.4\",",
                "+        \"object-assign\": \"4.1.1\",",
                "+        \"resolve\": \"1.5.0\",",
                "+        \"semver\": \"5.3.0\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"minimatch\": {",
                "+          \"version\": \"3.0.4\",",
                "+          \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-3.0.4.tgz\",",
                "+          \"integrity\": \"sha512-yJHVQEhyqPLUTgt9B83PXu6W3rx4MvvHvSUvToogpwoGDOUQ+yDrR0HRot+yOCdCO7u4hX3pWft6kWBBcqh0UA==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"brace-expansion\": \"1.1.8\"",
                "+          }",
                "+        },",
                "+        \"semver\": {",
                "+          \"version\": \"5.3.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/semver/-/semver-5.3.0.tgz\",",
                "+          \"integrity\": \"sha1-myzl094C0XxgEq0yaqa00M9U+U8=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"eslint-plugin-promise\": {",
                "+      \"version\": \"3.6.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/eslint-plugin-promise/-/eslint-plugin-promise-3.6.0.tgz\",",
                "+      \"integrity\": \"sha512-YQzM6TLTlApAr7Li8vWKR+K3WghjwKcYzY0d2roWap4SLK+kzuagJX/leTetIDWsFcTFnKNJXWupDCD6aZkP2Q==\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"eslint-plugin-standard\": {",
                "+      \"version\": \"3.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/eslint-plugin-standard/-/eslint-plugin-standard-3.0.1.tgz\",",
                "+      \"integrity\": \"sha1-NNDJFbRe3G8BA5PH7vOCOwhWXPI=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"eslint-watch\": {",
                "+      \"version\": \"3.1.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/eslint-watch/-/eslint-watch-3.1.3.tgz\",",
                "+      \"integrity\": \"sha1-44gqk/ArpNinl1YvqcOBXjGBxLo=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-polyfill\": \"6.26.0\",",
                "+        \"bluebird\": \"3.5.1\",",
                "+        \"chalk\": \"2.3.0\",",
                "+        \"chokidar\": \"1.7.0\",",
                "+        \"debug\": \"3.1.0\",",
                "+        \"keypress\": \"0.2.1\",",
                "+        \"lodash\": \"4.17.4\",",
                "+        \"optionator\": \"0.8.2\",",
                "+        \"source-map-support\": \"0.5.0\",",
                "+        \"strip-ansi\": \"4.0.0\",",
                "+        \"text-table\": \"0.2.0\",",
                "+        \"unicons\": \"0.0.3\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"ansi-regex\": {",
                "+          \"version\": \"3.0.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/ansi-regex/-/ansi-regex-3.0.0.tgz\",",
                "+          \"integrity\": \"sha1-7QMXwyIGT3lGbAKWa922Bas32Zg=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"ansi-styles\": {",
                "+          \"version\": \"3.2.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.0.tgz\",",
                "+          \"integrity\": \"sha512-NnSOmMEYtVR2JVMIGTzynRkkaxtiq1xnFBcdQD/DnNCYPoEPsVJhM98BDyaoNOQIi7p4okdi3E27eN7GQbsUug==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"color-convert\": \"1.9.1\"",
                "+          }",
                "+        },",
                "+        \"chalk\": {",
                "+          \"version\": \"2.3.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/chalk/-/chalk-2.3.0.tgz\",",
                "+          \"integrity\": \"sha512-Az5zJR2CBujap2rqXGaJKaPHyJ0IrUimvYNX+ncCy8PJP4ltOGTrHUIo097ZaL2zMeKYpiCdqDvS6zdrTFok3Q==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"ansi-styles\": \"3.2.0\",",
                "+            \"escape-string-regexp\": \"1.0.5\",",
                "+            \"supports-color\": \"4.5.0\"",
                "+          }",
                "+        },",
                "+        \"debug\": {",
                "+          \"version\": \"3.1.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/debug/-/debug-3.1.0.tgz\",",
                "+          \"integrity\": \"sha512-OX8XqP7/1a9cqkxYw2yXss15f26NKWBpDXQd0/uK/KPqdQhxbPa994hnzjcE2VqQpDslf55723cKPUOGSmMY3g==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"ms\": \"2.0.0\"",
                "+          }",
                "+        },",
                "+        \"has-flag\": {",
                "+          \"version\": \"2.0.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/has-flag/-/has-flag-2.0.0.tgz\",",
                "+          \"integrity\": \"sha1-6CB68cx7MNRGzHC3NLXovhj4jVE=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"source-map\": {",
                "+          \"version\": \"0.6.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz\",",
                "+          \"integrity\": \"sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"source-map-support\": {",
                "+          \"version\": \"0.5.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/source-map-support/-/source-map-support-0.5.0.tgz\",",
                "+          \"integrity\": \"sha512-vUoN3I7fHQe0R/SJLKRdKYuEdRGogsviXFkHHo17AWaTGv17VLnxw+CFXvqy+y4ORZ3doWLQcxRYfwKrsd/H7Q==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"source-map\": \"0.6.1\"",
                "+          }",
                "+        },",
                "+        \"strip-ansi\": {",
                "+          \"version\": \"4.0.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/strip-ansi/-/strip-ansi-4.0.0.tgz\",",
                "+          \"integrity\": \"sha1-qEeQIusaw2iocTibY1JixQXuNo8=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"ansi-regex\": \"3.0.0\"",
                "+          }",
                "+        },",
                "+        \"supports-color\": {",
                "+          \"version\": \"4.5.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/supports-color/-/supports-color-4.5.0.tgz\",",
                "+          \"integrity\": \"sha1-vnoN5ITexcXN34s9WRJQRJEvY1s=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"has-flag\": \"2.0.0\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"espree\": {",
                "+      \"version\": \"3.5.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/espree/-/espree-3.5.2.tgz\",",
                "+      \"integrity\": \"sha512-sadKeYwaR/aJ3stC2CdvgXu1T16TdYN+qwCpcWbMnGJ8s0zNWemzrvb2GbD4OhmJ/fwpJjudThAlLobGbWZbCQ==\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"acorn\": \"5.2.1\",",
                "+        \"acorn-jsx\": \"3.0.1\"",
                "+      }",
                "+    },",
                "+    \"esprima\": {",
                "+      \"version\": \"2.7.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/esprima/-/esprima-2.7.3.tgz\",",
                "+      \"integrity\": \"sha1-luO3DVd59q1JzQMmc9HDEnZ7pYE=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"esquery\": {",
                "+      \"version\": \"1.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/esquery/-/esquery-1.0.0.tgz\",",
                "+      \"integrity\": \"sha1-z7qLV9f7qT8XKYqKAGoEzaE9gPo=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"estraverse\": \"4.2.0\"",
                "+      }",
                "+    },",
                "+    \"esrecurse\": {",
                "+      \"version\": \"4.2.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/esrecurse/-/esrecurse-4.2.0.tgz\",",
                "+      \"integrity\": \"sha1-+pVo2Y04I/mkHZHpAtyrnqblsWM=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"estraverse\": \"4.2.0\",",
                "+        \"object-assign\": \"4.1.1\"",
                "+      }",
                "+    },",
                "+    \"estraverse\": {",
                "+      \"version\": \"4.2.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/estraverse/-/estraverse-4.2.0.tgz\",",
                "+      \"integrity\": \"sha1-De4/7TH81GlhjOc0IJn8GvoL2xM=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"esutils\": {",
                "+      \"version\": \"2.0.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/esutils/-/esutils-2.0.2.tgz\",",
                "+      \"integrity\": \"sha1-Cr9PHKpbyx96nYrMbepPqqBLrJs=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"etag\": {",
                "+      \"version\": \"1.8.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/etag/-/etag-1.8.1.tgz\",",
                "+      \"integrity\": \"sha1-Qa4u62XvpiJorr/qg6x9eSmbCIc=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"event-emitter\": {",
                "+      \"version\": \"0.3.5\",",
                "+      \"resolved\": \"https://registry.npmjs.org/event-emitter/-/event-emitter-0.3.5.tgz\",",
                "+      \"integrity\": \"sha1-34xp7vFkeSPHFXuc6DhAYQsCzDk=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"d\": \"1.0.0\",",
                "+        \"es5-ext\": \"0.10.37\"",
                "+      }",
                "+    },",
                "+    \"event-stream\": {",
                "+      \"version\": \"3.3.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/event-stream/-/event-stream-3.3.4.tgz\",",
                "+      \"integrity\": \"sha1-SrTJoPWlTbkzi0w02Gv86PSzVXE=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"duplexer\": \"0.1.1\",",
                "+        \"from\": \"0.1.7\",",
                "+        \"map-stream\": \"0.1.0\",",
                "+        \"pause-stream\": \"0.0.11\",",
                "+        \"split\": \"0.3.3\",",
                "+        \"stream-combiner\": \"0.0.4\",",
                "+        \"through\": \"2.3.8\"",
                "+      }",
                "+    },",
                "+    \"eventemitter2\": {",
                "+      \"version\": \"0.4.14\",",
                "+      \"resolved\": \"https://registry.npmjs.org/eventemitter2/-/eventemitter2-0.4.14.tgz\",",
                "+      \"integrity\": \"sha1-j2G3XN4BKy6esoTUVFWDtWQ7Yas=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"eventemitter3\": {",
                "+      \"version\": \"1.2.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/eventemitter3/-/eventemitter3-1.2.0.tgz\",",
                "+      \"integrity\": \"sha1-HIaZHYFq0eUEdQ5zh0Ik7PO+xQg=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"events\": {",
                "+      \"version\": \"1.1.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/events/-/events-1.1.1.tgz\",",
                "+      \"integrity\": \"sha1-nr23Y1rQmccNzEwqH1AEKI6L2SQ=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"eventsource\": {",
                "+      \"version\": \"0.1.6\",",
                "+      \"resolved\": \"https://registry.npmjs.org/eventsource/-/eventsource-0.1.6.tgz\",",
                "+      \"integrity\": \"sha1-Cs7ehJ7X3RzMMsgRuxG5RNTykjI=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"original\": \"1.0.0\"",
                "+      }",
                "+    },",
                "+    \"exit\": {",
                "+      \"version\": \"0.1.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/exit/-/exit-0.1.2.tgz\",",
                "+      \"integrity\": \"sha1-BjJjj42HfMghB9MKD/8aF8uhzQw=\"",
                "+    },",
                "+    \"exit-hook\": {",
                "+      \"version\": \"1.1.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/exit-hook/-/exit-hook-1.1.1.tgz\",",
                "+      \"integrity\": \"sha1-8FyiM7SMBdVP/wd2XfhQfpXAL/g=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"expand-braces\": {",
                "+      \"version\": \"0.1.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/expand-braces/-/expand-braces-0.1.2.tgz\",",
                "+      \"integrity\": \"sha1-SIsdHSRRyz06axks/AMPRMWFX+o=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"array-slice\": \"0.2.3\",",
                "+        \"array-unique\": \"0.2.1\",",
                "+        \"braces\": \"0.1.5\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"braces\": {",
                "+          \"version\": \"0.1.5\",",
                "+          \"resolved\": \"https://registry.npmjs.org/braces/-/braces-0.1.5.tgz\",",
                "+          \"integrity\": \"sha1-wIVxEIUpHYt1/ddOqw+FlygHEeY=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"expand-range\": \"0.1.1\"",
                "+          }",
                "+        },",
                "+        \"expand-range\": {",
                "+          \"version\": \"0.1.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/expand-range/-/expand-range-0.1.1.tgz\",",
                "+          \"integrity\": \"sha1-TLjtoJk8pW+k9B/ELzy7TMrf8EQ=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"is-number\": \"0.1.1\",",
                "+            \"repeat-string\": \"0.2.2\"",
                "+          }",
                "+        },",
                "+        \"is-number\": {",
                "+          \"version\": \"0.1.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/is-number/-/is-number-0.1.1.tgz\",",
                "+          \"integrity\": \"sha1-aaevEWlj1HIG7JvZtIoUIW8eOAY=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"repeat-string\": {",
                "+          \"version\": \"0.2.2\",",
                "+          \"resolved\": \"https://registry.npmjs.org/repeat-string/-/repeat-string-0.2.2.tgz\",",
                "+          \"integrity\": \"sha1-x6jTI2BoNiBZp+RlH8aITosftK4=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"expand-brackets\": {",
                "+      \"version\": \"0.1.5\",",
                "+      \"resolved\": \"https://registry.npmjs.org/expand-brackets/-/expand-brackets-0.1.5.tgz\",",
                "+      \"integrity\": \"sha1-3wcoTjQqgHzXM6xa9yQR5YHRF3s=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"is-posix-bracket\": \"0.1.1\"",
                "+      }",
                "+    },",
                "+    \"expand-range\": {",
                "+      \"version\": \"1.8.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/expand-range/-/expand-range-1.8.2.tgz\",",
                "+      \"integrity\": \"sha1-opnv/TNf4nIeuujiV+x5ZE/IUzc=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"fill-range\": \"2.2.3\"",
                "+      }",
                "+    },",
                "+    \"express\": {",
                "+      \"version\": \"4.16.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/express/-/express-4.16.2.tgz\",",
                "+      \"integrity\": \"sha1-41xt/i1kt9ygpc1PIXgb4ymeB2w=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"accepts\": \"1.3.4\",",
                "+        \"array-flatten\": \"1.1.1\",",
                "+        \"body-parser\": \"1.18.2\",",
                "+        \"content-disposition\": \"0.5.2\",",
                "+        \"content-type\": \"1.0.4\",",
                "+        \"cookie\": \"0.3.1\",",
                "+        \"cookie-signature\": \"1.0.6\",",
                "+        \"debug\": \"2.6.9\",",
                "+        \"depd\": \"1.1.1\",",
                "+        \"encodeurl\": \"1.0.1\",",
                "+        \"escape-html\": \"1.0.3\",",
                "+        \"etag\": \"1.8.1\",",
                "+        \"finalhandler\": \"1.1.0\",",
                "+        \"fresh\": \"0.5.2\",",
                "+        \"merge-descriptors\": \"1.0.1\",",
                "+        \"methods\": \"1.1.2\",",
                "+        \"on-finished\": \"2.3.0\",",
                "+        \"parseurl\": \"1.3.2\",",
                "+        \"path-to-regexp\": \"0.1.7\",",
                "+        \"proxy-addr\": \"2.0.2\",",
                "+        \"qs\": \"6.5.1\",",
                "+        \"range-parser\": \"1.2.0\",",
                "+        \"safe-buffer\": \"5.1.1\",",
                "+        \"send\": \"0.16.1\",",
                "+        \"serve-static\": \"1.13.1\",",
                "+        \"setprototypeof\": \"1.1.0\",",
                "+        \"statuses\": \"1.3.1\",",
                "+        \"type-is\": \"1.6.15\",",
                "+        \"utils-merge\": \"1.0.1\",",
                "+        \"vary\": \"1.1.2\"",
                "+      }",
                "+    },",
                "+    \"extend\": {",
                "+      \"version\": \"3.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/extend/-/extend-3.0.1.tgz\",",
                "+      \"integrity\": \"sha1-p1Xqe8Gt/MWjHOfnYtuq3F5jZEQ=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"extglob\": {",
                "+      \"version\": \"0.3.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/extglob/-/extglob-0.3.2.tgz\",",
                "+      \"integrity\": \"sha1-Lhj/PS9JqydlzskCPwEdqo2DSaE=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"is-extglob\": \"1.0.0\"",
                "+      }",
                "+    },",
                "+    \"extract-text-webpack-plugin\": {",
                "+      \"version\": \"1.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/extract-text-webpack-plugin/-/extract-text-webpack-plugin-1.0.1.tgz\",",
                "+      \"integrity\": \"sha1-yVvzy6rEnclvHcbgclSfu2VMzSw=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"async\": \"1.5.2\",",
                "+        \"loader-utils\": \"0.2.17\",",
                "+        \"webpack-sources\": \"0.1.5\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"async\": {",
                "+          \"version\": \"1.5.2\",",
                "+          \"resolved\": \"https://registry.npmjs.org/async/-/async-1.5.2.tgz\",",
                "+          \"integrity\": \"sha1-7GphrlZIDAw8skHJVhjiCJL5Zyo=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"extract-zip\": {",
                "+      \"version\": \"1.6.6\",",
                "+      \"resolved\": \"https://registry.npmjs.org/extract-zip/-/extract-zip-1.6.6.tgz\",",
                "+      \"integrity\": \"sha1-EpDt6NINCHK0Kf0/NRyhKOxe+Fw=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"concat-stream\": \"1.6.0\",",
                "+        \"debug\": \"2.6.9\",",
                "+        \"mkdirp\": \"0.5.0\",",
                "+        \"yauzl\": \"2.4.1\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"mkdirp\": {",
                "+          \"version\": \"0.5.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/mkdirp/-/mkdirp-0.5.0.tgz\",",
                "+          \"integrity\": \"sha1-HXMHam35hs2TROFecfzAWkyavxI=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"minimist\": \"0.0.8\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"extsprintf\": {",
                "+      \"version\": \"1.3.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/extsprintf/-/extsprintf-1.3.0.tgz\",",
                "+      \"integrity\": \"sha1-lpGEQOMEGnpBT4xS48V06zw+HgU=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"fast-deep-equal\": {",
                "+      \"version\": \"1.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-1.0.0.tgz\",",
                "+      \"integrity\": \"sha1-liVqO8l1WV6zbYLpkp0GDYk0Of8=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"fast-json-stable-stringify\": {",
                "+      \"version\": \"2.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.0.0.tgz\",",
                "+      \"integrity\": \"sha1-1RQsDK7msRifh9OnYREGT4bIu/I=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"fast-levenshtein\": {",
                "+      \"version\": \"2.0.6\",",
                "+      \"resolved\": \"https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz\",",
                "+      \"integrity\": \"sha1-PYpcZog6FqMMqGQ+hR8Zuqd5eRc=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"fastparse\": {",
                "+      \"version\": \"1.1.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/fastparse/-/fastparse-1.1.1.tgz\",",
                "+      \"integrity\": \"sha1-0eJkOzipTXWDtHkGDmxK/8lAcfg=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"faye-websocket\": {",
                "+      \"version\": \"0.4.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/faye-websocket/-/faye-websocket-0.4.4.tgz\",",
                "+      \"integrity\": \"sha1-wUxbO/FNdBf/v9mQwKdJXNnzN7w=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"fd-slicer\": {",
                "+      \"version\": \"1.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/fd-slicer/-/fd-slicer-1.0.1.tgz\",",
                "+      \"integrity\": \"sha1-i1vL2ewyfFBBv5qwI/1nUPEXfmU=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"pend\": \"1.2.0\"",
                "+      }",
                "+    },",
                "+    \"figures\": {",
                "+      \"version\": \"1.7.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/figures/-/figures-1.7.0.tgz\",",
                "+      \"integrity\": \"sha1-y+Hjr/zxzUS4DK3+0o3Hk6lwHS4=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"escape-string-regexp\": \"1.0.5\",",
                "+        \"object-assign\": \"4.1.1\"",
                "+      }",
                "+    },",
                "+    \"file-entry-cache\": {",
                "+      \"version\": \"2.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-2.0.0.tgz\",",
                "+      \"integrity\": \"sha1-w5KZDD5oR4PYOLjISkXYoEhFg2E=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"flat-cache\": \"1.3.0\",",
                "+        \"object-assign\": \"4.1.1\"",
                "+      }",
                "+    },",
                "+    \"file-loader\": {",
                "+      \"version\": \"0.9.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/file-loader/-/file-loader-0.9.0.tgz\",",
                "+      \"integrity\": \"sha1-HS2t3UJM5tGwfP4/eXMb7TYXq0I=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"loader-utils\": \"0.2.17\"",
                "+      }",
                "+    },",
                "+    \"file-sync-cmp\": {",
                "+      \"version\": \"0.1.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/file-sync-cmp/-/file-sync-cmp-0.1.1.tgz\",",
                "+      \"integrity\": \"sha1-peeo/7+kk7Q7kju9TKiaU7Y7YSs=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"filename-regex\": {",
                "+      \"version\": \"2.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/filename-regex/-/filename-regex-2.0.1.tgz\",",
                "+      \"integrity\": \"sha1-wcS5vuPglyXdsQa3XB4wH+LxiyY=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"fill-range\": {",
                "+      \"version\": \"2.2.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/fill-range/-/fill-range-2.2.3.tgz\",",
                "+      \"integrity\": \"sha1-ULd9/X5Gm8dJJHCWNpn+eoSFpyM=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"is-number\": \"2.1.0\",",
                "+        \"isobject\": \"2.1.0\",",
                "+        \"randomatic\": \"1.1.7\",",
                "+        \"repeat-element\": \"1.1.2\",",
                "+        \"repeat-string\": \"1.6.1\"",
                "+      }",
                "+    },",
                "+    \"finalhandler\": {",
                "+      \"version\": \"1.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/finalhandler/-/finalhandler-1.1.0.tgz\",",
                "+      \"integrity\": \"sha1-zgtoVbRYU+eRsvzGgARtiCU91/U=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"debug\": \"2.6.9\",",
                "+        \"encodeurl\": \"1.0.1\",",
                "+        \"escape-html\": \"1.0.3\",",
                "+        \"on-finished\": \"2.3.0\",",
                "+        \"parseurl\": \"1.3.2\",",
                "+        \"statuses\": \"1.3.1\",",
                "+        \"unpipe\": \"1.0.0\"",
                "+      }",
                "+    },",
                "+    \"find-cache-dir\": {",
                "+      \"version\": \"0.1.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/find-cache-dir/-/find-cache-dir-0.1.1.tgz\",",
                "+      \"integrity\": \"sha1-yN765XyKUqinhPnjHFfHQumToLk=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"commondir\": \"1.0.1\",",
                "+        \"mkdirp\": \"0.5.1\",",
                "+        \"pkg-dir\": \"1.0.0\"",
                "+      }",
                "+    },",
                "+    \"find-up\": {",
                "+      \"version\": \"1.1.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/find-up/-/find-up-1.1.2.tgz\",",
                "+      \"integrity\": \"sha1-ay6YIrGizgpgq2TWEOzK1TyyTQ8=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"path-exists\": \"2.1.0\",",
                "+        \"pinkie-promise\": \"2.0.1\"",
                "+      }",
                "+    },",
                "+    \"findup-sync\": {",
                "+      \"version\": \"0.1.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/findup-sync/-/findup-sync-0.1.3.tgz\",",
                "+      \"integrity\": \"sha1-fz56l7gjksZTvwZYm9hRkOk8NoM=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"glob\": \"3.2.11\",",
                "+        \"lodash\": \"2.4.2\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"lodash\": {",
                "+          \"version\": \"2.4.2\",",
                "+          \"resolved\": \"https://registry.npmjs.org/lodash/-/lodash-2.4.2.tgz\",",
                "+          \"integrity\": \"sha1-+t2DS5aDBz2hebPq5tnA0VBT9z4=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"flat-cache\": {",
                "+      \"version\": \"1.3.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/flat-cache/-/flat-cache-1.3.0.tgz\",",
                "+      \"integrity\": \"sha1-0wMLMrOBVPTjt+nHCfSQ9++XxIE=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"circular-json\": \"0.3.3\",",
                "+        \"del\": \"2.2.2\",",
                "+        \"graceful-fs\": \"4.1.11\",",
                "+        \"write\": \"0.2.1\"",
                "+      }",
                "+    },",
                "+    \"flatten\": {",
                "+      \"version\": \"1.0.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/flatten/-/flatten-1.0.2.tgz\",",
                "+      \"integrity\": \"sha1-2uRqnXj74lKSJYzB54CkHZXAN4I=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"for-in\": {",
                "+      \"version\": \"1.0.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/for-in/-/for-in-1.0.2.tgz\",",
                "+      \"integrity\": \"sha1-gQaNKVqBQuwKxybG4iAMMPttXoA=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"for-own\": {",
                "+      \"version\": \"0.1.5\",",
                "+      \"resolved\": \"https://registry.npmjs.org/for-own/-/for-own-0.1.5.tgz\",",
                "+      \"integrity\": \"sha1-UmXGgaTylNq78XyVCbZ2OqhFEM4=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"for-in\": \"1.0.2\"",
                "+      }",
                "+    },",
                "+    \"foreach\": {",
                "+      \"version\": \"2.0.5\",",
                "+      \"resolved\": \"https://registry.npmjs.org/foreach/-/foreach-2.0.5.tgz\",",
                "+      \"integrity\": \"sha1-C+4AUBiusmDQo6865ljdATbsG5k=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"forever-agent\": {",
                "+      \"version\": \"0.6.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/forever-agent/-/forever-agent-0.6.1.tgz\",",
                "+      \"integrity\": \"sha1-+8cfDEGt6zf5bFd60e1C2P2sypE=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"form-data\": {",
                "+      \"version\": \"2.3.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/form-data/-/form-data-2.3.1.tgz\",",
                "+      \"integrity\": \"sha1-b7lPvXGIUwbXPRXMSX/kzE7NRL8=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"asynckit\": \"0.4.0\",",
                "+        \"combined-stream\": \"1.0.5\",",
                "+        \"mime-types\": \"2.1.17\"",
                "+      }",
                "+    },",
                "+    \"forwarded\": {",
                "+      \"version\": \"0.1.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/forwarded/-/forwarded-0.1.2.tgz\",",
                "+      \"integrity\": \"sha1-mMI9qxF1ZXuMBXPozszZGw/xjIQ=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"fresh\": {",
                "+      \"version\": \"0.5.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz\",",
                "+      \"integrity\": \"sha1-PYyt2Q2XZWn6g1qx+OSyOhBWBac=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"from\": {",
                "+      \"version\": \"0.1.7\",",
                "+      \"resolved\": \"https://registry.npmjs.org/from/-/from-0.1.7.tgz\",",
                "+      \"integrity\": \"sha1-g8YK/Fi5xWmXAH7Rp2izqzA6RP4=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"fs-extra\": {",
                "+      \"version\": \"1.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/fs-extra/-/fs-extra-1.0.0.tgz\",",
                "+      \"integrity\": \"sha1-zTzl9+fLYUWIP8rjGR6Yd/hYeVA=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"graceful-fs\": \"4.1.11\",",
                "+        \"jsonfile\": \"2.4.0\",",
                "+        \"klaw\": \"1.3.1\"",
                "+      }",
                "+    },",
                "+    \"fs-readdir-recursive\": {",
                "+      \"version\": \"1.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/fs-readdir-recursive/-/fs-readdir-recursive-1.1.0.tgz\",",
                "+      \"integrity\": \"sha512-GNanXlVr2pf02+sPN40XN8HG+ePaNcvM0q5mZBd668Obwb0yD5GiUbZOFgwn8kGMY6I3mdyDJzieUy3PTYyTRA==\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"fs.realpath\": {",
                "+      \"version\": \"1.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz\",",
                "+      \"integrity\": \"sha1-FQStJSMVjKpA20onh8sBQRmU6k8=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"fsevents\": {",
                "+      \"version\": \"1.1.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/fsevents/-/fsevents-1.1.3.tgz\",",
                "+      \"integrity\": \"sha512-WIr7iDkdmdbxu/Gh6eKEZJL6KPE74/5MEsf2whTOFNxbIoIixogroLdKYqB6FDav4Wavh/lZdzzd3b2KxIXC5Q==\",",
                "+      \"dev\": true,",
                "+      \"optional\": true,",
                "+      \"requires\": {",
                "+        \"nan\": \"2.8.0\",",
                "+        \"node-pre-gyp\": \"0.6.39\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"abbrev\": {",
                "+          \"version\": \"1.1.0\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true",
                "+        },",
                "+        \"ajv\": {",
                "+          \"version\": \"4.11.8\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true,",
                "+          \"requires\": {",
                "+            \"co\": \"4.6.0\",",
                "+            \"json-stable-stringify\": \"1.0.1\"",
                "+          }",
                "+        },",
                "+        \"ansi-regex\": {",
                "+          \"version\": \"2.1.1\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true",
                "+        },",
                "+        \"aproba\": {",
                "+          \"version\": \"1.1.1\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true",
                "+        },",
                "+        \"are-we-there-yet\": {",
                "+          \"version\": \"1.1.4\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true,",
                "+          \"requires\": {",
                "+            \"delegates\": \"1.0.0\",",
                "+            \"readable-stream\": \"2.2.9\"",
                "+          }",
                "+        },",
                "+        \"asn1\": {",
                "+          \"version\": \"0.2.3\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true",
                "+        },",
                "+        \"assert-plus\": {",
                "+          \"version\": \"0.2.0\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true",
                "+        },",
                "+        \"asynckit\": {",
                "+          \"version\": \"0.4.0\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true",
                "+        },",
                "+        \"aws-sign2\": {",
                "+          \"version\": \"0.6.0\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true",
                "+        },",
                "+        \"aws4\": {",
                "+          \"version\": \"1.6.0\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true",
                "+        },",
                "+        \"balanced-match\": {",
                "+          \"version\": \"0.4.2\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true",
                "+        },",
                "+        \"bcrypt-pbkdf\": {",
                "+          \"version\": \"1.0.1\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true,",
                "+          \"requires\": {",
                "+            \"tweetnacl\": \"0.14.5\"",
                "+          }",
                "+        },",
                "+        \"block-stream\": {",
                "+          \"version\": \"0.0.9\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"inherits\": \"2.0.3\"",
                "+          }",
                "+        },",
                "+        \"boom\": {",
                "+          \"version\": \"2.10.1\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"hoek\": \"2.16.3\"",
                "+          }",
                "+        },",
                "+        \"brace-expansion\": {",
                "+          \"version\": \"1.1.7\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"balanced-match\": \"0.4.2\",",
                "+            \"concat-map\": \"0.0.1\"",
                "+          }",
                "+        },",
                "+        \"buffer-shims\": {",
                "+          \"version\": \"1.0.0\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true",
                "+        },",
                "+        \"caseless\": {",
                "+          \"version\": \"0.12.0\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true",
                "+        },",
                "+        \"co\": {",
                "+          \"version\": \"4.6.0\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true",
                "+        },",
                "+        \"code-point-at\": {",
                "+          \"version\": \"1.1.0\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true",
                "+        },",
                "+        \"combined-stream\": {",
                "+          \"version\": \"1.0.5\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"delayed-stream\": \"1.0.0\"",
                "+          }",
                "+        },",
                "+        \"concat-map\": {",
                "+          \"version\": \"0.0.1\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true",
                "+        },",
                "+        \"console-control-strings\": {",
                "+          \"version\": \"1.1.0\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true",
                "+        },",
                "+        \"core-util-is\": {",
                "+          \"version\": \"1.0.2\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true",
                "+        },",
                "+        \"cryptiles\": {",
                "+          \"version\": \"2.0.5\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"boom\": \"2.10.1\"",
                "+          }",
                "+        },",
                "+        \"dashdash\": {",
                "+          \"version\": \"1.14.1\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true,",
                "+          \"requires\": {",
                "+            \"assert-plus\": \"1.0.0\"",
                "+          },",
                "+          \"dependencies\": {",
                "+            \"assert-plus\": {",
                "+              \"version\": \"1.0.0\",",
                "+              \"bundled\": true,",
                "+              \"dev\": true,",
                "+              \"optional\": true",
                "+            }",
                "+          }",
                "+        },",
                "+        \"debug\": {",
                "+          \"version\": \"2.6.8\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true,",
                "+          \"requires\": {",
                "+            \"ms\": \"2.0.0\"",
                "+          }",
                "+        },",
                "+        \"deep-extend\": {",
                "+          \"version\": \"0.4.2\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true",
                "+        },",
                "+        \"delayed-stream\": {",
                "+          \"version\": \"1.0.0\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true",
                "+        },",
                "+        \"delegates\": {",
                "+          \"version\": \"1.0.0\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true",
                "+        },",
                "+        \"detect-libc\": {",
                "+          \"version\": \"1.0.2\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true",
                "+        },",
                "+        \"ecc-jsbn\": {",
                "+          \"version\": \"0.1.1\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true,",
                "+          \"requires\": {",
                "+            \"jsbn\": \"0.1.1\"",
                "+          }",
                "+        },",
                "+        \"extend\": {",
                "+          \"version\": \"3.0.1\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true",
                "+        },",
                "+        \"extsprintf\": {",
                "+          \"version\": \"1.0.2\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true",
                "+        },",
                "+        \"forever-agent\": {",
                "+          \"version\": \"0.6.1\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true",
                "+        },",
                "+        \"form-data\": {",
                "+          \"version\": \"2.1.4\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true,",
                "+          \"requires\": {",
                "+            \"asynckit\": \"0.4.0\",",
                "+            \"combined-stream\": \"1.0.5\",",
                "+            \"mime-types\": \"2.1.15\"",
                "+          }",
                "+        },",
                "+        \"fs.realpath\": {",
                "+          \"version\": \"1.0.0\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true",
                "+        },",
                "+        \"fstream\": {",
                "+          \"version\": \"1.0.11\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"graceful-fs\": \"4.1.11\",",
                "+            \"inherits\": \"2.0.3\",",
                "+            \"mkdirp\": \"0.5.1\",",
                "+            \"rimraf\": \"2.6.1\"",
                "+          }",
                "+        },",
                "+        \"fstream-ignore\": {",
                "+          \"version\": \"1.0.5\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true,",
                "+          \"requires\": {",
                "+            \"fstream\": \"1.0.11\",",
                "+            \"inherits\": \"2.0.3\",",
                "+            \"minimatch\": \"3.0.4\"",
                "+          }",
                "+        },",
                "+        \"gauge\": {",
                "+          \"version\": \"2.7.4\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true,",
                "+          \"requires\": {",
                "+            \"aproba\": \"1.1.1\",",
                "+            \"console-control-strings\": \"1.1.0\",",
                "+            \"has-unicode\": \"2.0.1\",",
                "+            \"object-assign\": \"4.1.1\",",
                "+            \"signal-exit\": \"3.0.2\",",
                "+            \"string-width\": \"1.0.2\",",
                "+            \"strip-ansi\": \"3.0.1\",",
                "+            \"wide-align\": \"1.1.2\"",
                "+          }",
                "+        },",
                "+        \"getpass\": {",
                "+          \"version\": \"0.1.7\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true,",
                "+          \"requires\": {",
                "+            \"assert-plus\": \"1.0.0\"",
                "+          },",
                "+          \"dependencies\": {",
                "+            \"assert-plus\": {",
                "+              \"version\": \"1.0.0\",",
                "+              \"bundled\": true,",
                "+              \"dev\": true,",
                "+              \"optional\": true",
                "+            }",
                "+          }",
                "+        },",
                "+        \"glob\": {",
                "+          \"version\": \"7.1.2\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"fs.realpath\": \"1.0.0\",",
                "+            \"inflight\": \"1.0.6\",",
                "+            \"inherits\": \"2.0.3\",",
                "+            \"minimatch\": \"3.0.4\",",
                "+            \"once\": \"1.4.0\",",
                "+            \"path-is-absolute\": \"1.0.1\"",
                "+          }",
                "+        },",
                "+        \"graceful-fs\": {",
                "+          \"version\": \"4.1.11\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true",
                "+        },",
                "+        \"har-schema\": {",
                "+          \"version\": \"1.0.5\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true",
                "+        },",
                "+        \"har-validator\": {",
                "+          \"version\": \"4.2.1\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true,",
                "+          \"requires\": {",
                "+            \"ajv\": \"4.11.8\",",
                "+            \"har-schema\": \"1.0.5\"",
                "+          }",
                "+        },",
                "+        \"has-unicode\": {",
                "+          \"version\": \"2.0.1\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true",
                "+        },",
                "+        \"hawk\": {",
                "+          \"version\": \"3.1.3\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"boom\": \"2.10.1\",",
                "+            \"cryptiles\": \"2.0.5\",",
                "+            \"hoek\": \"2.16.3\",",
                "+            \"sntp\": \"1.0.9\"",
                "+          }",
                "+        },",
                "+        \"hoek\": {",
                "+          \"version\": \"2.16.3\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true",
                "+        },",
                "+        \"http-signature\": {",
                "+          \"version\": \"1.1.1\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true,",
                "+          \"requires\": {",
                "+            \"assert-plus\": \"0.2.0\",",
                "+            \"jsprim\": \"1.4.0\",",
                "+            \"sshpk\": \"1.13.0\"",
                "+          }",
                "+        },",
                "+        \"inflight\": {",
                "+          \"version\": \"1.0.6\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"once\": \"1.4.0\",",
                "+            \"wrappy\": \"1.0.2\"",
                "+          }",
                "+        },",
                "+        \"inherits\": {",
                "+          \"version\": \"2.0.3\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true",
                "+        },",
                "+        \"ini\": {",
                "+          \"version\": \"1.3.4\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true",
                "+        },",
                "+        \"is-fullwidth-code-point\": {",
                "+          \"version\": \"1.0.0\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"number-is-nan\": \"1.0.1\"",
                "+          }",
                "+        },",
                "+        \"is-typedarray\": {",
                "+          \"version\": \"1.0.0\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true",
                "+        },",
                "+        \"isarray\": {",
                "+          \"version\": \"1.0.0\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true",
                "+        },",
                "+        \"isstream\": {",
                "+          \"version\": \"0.1.2\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true",
                "+        },",
                "+        \"jodid25519\": {",
                "+          \"version\": \"1.0.2\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true,",
                "+          \"requires\": {",
                "+            \"jsbn\": \"0.1.1\"",
                "+          }",
                "+        },",
                "+        \"jsbn\": {",
                "+          \"version\": \"0.1.1\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true",
                "+        },",
                "+        \"json-schema\": {",
                "+          \"version\": \"0.2.3\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true",
                "+        },",
                "+        \"json-stable-stringify\": {",
                "+          \"version\": \"1.0.1\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true,",
                "+          \"requires\": {",
                "+            \"jsonify\": \"0.0.0\"",
                "+          }",
                "+        },",
                "+        \"json-stringify-safe\": {",
                "+          \"version\": \"5.0.1\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true",
                "+        },",
                "+        \"jsonify\": {",
                "+          \"version\": \"0.0.0\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true",
                "+        },",
                "+        \"jsprim\": {",
                "+          \"version\": \"1.4.0\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true,",
                "+          \"requires\": {",
                "+            \"assert-plus\": \"1.0.0\",",
                "+            \"extsprintf\": \"1.0.2\",",
                "+            \"json-schema\": \"0.2.3\",",
                "+            \"verror\": \"1.3.6\"",
                "+          },",
                "+          \"dependencies\": {",
                "+            \"assert-plus\": {",
                "+              \"version\": \"1.0.0\",",
                "+              \"bundled\": true,",
                "+              \"dev\": true,",
                "+              \"optional\": true",
                "+            }",
                "+          }",
                "+        },",
                "+        \"mime-db\": {",
                "+          \"version\": \"1.27.0\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true",
                "+        },",
                "+        \"mime-types\": {",
                "+          \"version\": \"2.1.15\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"mime-db\": \"1.27.0\"",
                "+          }",
                "+        },",
                "+        \"minimatch\": {",
                "+          \"version\": \"3.0.4\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"brace-expansion\": \"1.1.7\"",
                "+          }",
                "+        },",
                "+        \"minimist\": {",
                "+          \"version\": \"0.0.8\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true",
                "+        },",
                "+        \"mkdirp\": {",
                "+          \"version\": \"0.5.1\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"minimist\": \"0.0.8\"",
                "+          }",
                "+        },",
                "+        \"ms\": {",
                "+          \"version\": \"2.0.0\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true",
                "+        },",
                "+        \"node-pre-gyp\": {",
                "+          \"version\": \"0.6.39\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true,",
                "+          \"requires\": {",
                "+            \"detect-libc\": \"1.0.2\",",
                "+            \"hawk\": \"3.1.3\",",
                "+            \"mkdirp\": \"0.5.1\",",
                "+            \"nopt\": \"4.0.1\",",
                "+            \"npmlog\": \"4.1.0\",",
                "+            \"rc\": \"1.2.1\",",
                "+            \"request\": \"2.81.0\",",
                "+            \"rimraf\": \"2.6.1\",",
                "+            \"semver\": \"5.3.0\",",
                "+            \"tar\": \"2.2.1\",",
                "+            \"tar-pack\": \"3.4.0\"",
                "+          }",
                "+        },",
                "+        \"nopt\": {",
                "+          \"version\": \"4.0.1\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true,",
                "+          \"requires\": {",
                "+            \"abbrev\": \"1.1.0\",",
                "+            \"osenv\": \"0.1.4\"",
                "+          }",
                "+        },",
                "+        \"npmlog\": {",
                "+          \"version\": \"4.1.0\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true,",
                "+          \"requires\": {",
                "+            \"are-we-there-yet\": \"1.1.4\",",
                "+            \"console-control-strings\": \"1.1.0\",",
                "+            \"gauge\": \"2.7.4\",",
                "+            \"set-blocking\": \"2.0.0\"",
                "+          }",
                "+        },",
                "+        \"number-is-nan\": {",
                "+          \"version\": \"1.0.1\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true",
                "+        },",
                "+        \"oauth-sign\": {",
                "+          \"version\": \"0.8.2\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true",
                "+        },",
                "+        \"object-assign\": {",
                "+          \"version\": \"4.1.1\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true",
                "+        },",
                "+        \"once\": {",
                "+          \"version\": \"1.4.0\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"wrappy\": \"1.0.2\"",
                "+          }",
                "+        },",
                "+        \"os-homedir\": {",
                "+          \"version\": \"1.0.2\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true",
                "+        },",
                "+        \"os-tmpdir\": {",
                "+          \"version\": \"1.0.2\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true",
                "+        },",
                "+        \"osenv\": {",
                "+          \"version\": \"0.1.4\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true,",
                "+          \"requires\": {",
                "+            \"os-homedir\": \"1.0.2\",",
                "+            \"os-tmpdir\": \"1.0.2\"",
                "+          }",
                "+        },",
                "+        \"path-is-absolute\": {",
                "+          \"version\": \"1.0.1\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true",
                "+        },",
                "+        \"performance-now\": {",
                "+          \"version\": \"0.2.0\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true",
                "+        },",
                "+        \"process-nextick-args\": {",
                "+          \"version\": \"1.0.7\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true",
                "+        },",
                "+        \"punycode\": {",
                "+          \"version\": \"1.4.1\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true",
                "+        },",
                "+        \"qs\": {",
                "+          \"version\": \"6.4.0\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true",
                "+        },",
                "+        \"rc\": {",
                "+          \"version\": \"1.2.1\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true,",
                "+          \"requires\": {",
                "+            \"deep-extend\": \"0.4.2\",",
                "+            \"ini\": \"1.3.4\",",
                "+            \"minimist\": \"1.2.0\",",
                "+            \"strip-json-comments\": \"2.0.1\"",
                "+          },",
                "+          \"dependencies\": {",
                "+            \"minimist\": {",
                "+              \"version\": \"1.2.0\",",
                "+              \"bundled\": true,",
                "+              \"dev\": true,",
                "+              \"optional\": true",
                "+            }",
                "+          }",
                "+        },",
                "+        \"readable-stream\": {",
                "+          \"version\": \"2.2.9\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"buffer-shims\": \"1.0.0\",",
                "+            \"core-util-is\": \"1.0.2\",",
                "+            \"inherits\": \"2.0.3\",",
                "+            \"isarray\": \"1.0.0\",",
                "+            \"process-nextick-args\": \"1.0.7\",",
                "+            \"string_decoder\": \"1.0.1\",",
                "+            \"util-deprecate\": \"1.0.2\"",
                "+          }",
                "+        },",
                "+        \"request\": {",
                "+          \"version\": \"2.81.0\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true,",
                "+          \"requires\": {",
                "+            \"aws-sign2\": \"0.6.0\",",
                "+            \"aws4\": \"1.6.0\",",
                "+            \"caseless\": \"0.12.0\",",
                "+            \"combined-stream\": \"1.0.5\",",
                "+            \"extend\": \"3.0.1\",",
                "+            \"forever-agent\": \"0.6.1\",",
                "+            \"form-data\": \"2.1.4\",",
                "+            \"har-validator\": \"4.2.1\",",
                "+            \"hawk\": \"3.1.3\",",
                "+            \"http-signature\": \"1.1.1\",",
                "+            \"is-typedarray\": \"1.0.0\",",
                "+            \"isstream\": \"0.1.2\",",
                "+            \"json-stringify-safe\": \"5.0.1\",",
                "+            \"mime-types\": \"2.1.15\",",
                "+            \"oauth-sign\": \"0.8.2\",",
                "+            \"performance-now\": \"0.2.0\",",
                "+            \"qs\": \"6.4.0\",",
                "+            \"safe-buffer\": \"5.0.1\",",
                "+            \"stringstream\": \"0.0.5\",",
                "+            \"tough-cookie\": \"2.3.2\",",
                "+            \"tunnel-agent\": \"0.6.0\",",
                "+            \"uuid\": \"3.0.1\"",
                "+          }",
                "+        },",
                "+        \"rimraf\": {",
                "+          \"version\": \"2.6.1\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"glob\": \"7.1.2\"",
                "+          }",
                "+        },",
                "+        \"safe-buffer\": {",
                "+          \"version\": \"5.0.1\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true",
                "+        },",
                "+        \"semver\": {",
                "+          \"version\": \"5.3.0\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true",
                "+        },",
                "+        \"set-blocking\": {",
                "+          \"version\": \"2.0.0\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true",
                "+        },",
                "+        \"signal-exit\": {",
                "+          \"version\": \"3.0.2\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true",
                "+        },",
                "+        \"sntp\": {",
                "+          \"version\": \"1.0.9\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"hoek\": \"2.16.3\"",
                "+          }",
                "+        },",
                "+        \"sshpk\": {",
                "+          \"version\": \"1.13.0\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true,",
                "+          \"requires\": {",
                "+            \"asn1\": \"0.2.3\",",
                "+            \"assert-plus\": \"1.0.0\",",
                "+            \"bcrypt-pbkdf\": \"1.0.1\",",
                "+            \"dashdash\": \"1.14.1\",",
                "+            \"ecc-jsbn\": \"0.1.1\",",
                "+            \"getpass\": \"0.1.7\",",
                "+            \"jodid25519\": \"1.0.2\",",
                "+            \"jsbn\": \"0.1.1\",",
                "+            \"tweetnacl\": \"0.14.5\"",
                "+          },",
                "+          \"dependencies\": {",
                "+            \"assert-plus\": {",
                "+              \"version\": \"1.0.0\",",
                "+              \"bundled\": true,",
                "+              \"dev\": true,",
                "+              \"optional\": true",
                "+            }",
                "+          }",
                "+        },",
                "+        \"string-width\": {",
                "+          \"version\": \"1.0.2\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"code-point-at\": \"1.1.0\",",
                "+            \"is-fullwidth-code-point\": \"1.0.0\",",
                "+            \"strip-ansi\": \"3.0.1\"",
                "+          }",
                "+        },",
                "+        \"string_decoder\": {",
                "+          \"version\": \"1.0.1\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"safe-buffer\": \"5.0.1\"",
                "+          }",
                "+        },",
                "+        \"stringstream\": {",
                "+          \"version\": \"0.0.5\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true",
                "+        },",
                "+        \"strip-ansi\": {",
                "+          \"version\": \"3.0.1\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"ansi-regex\": \"2.1.1\"",
                "+          }",
                "+        },",
                "+        \"strip-json-comments\": {",
                "+          \"version\": \"2.0.1\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true",
                "+        },",
                "+        \"tar\": {",
                "+          \"version\": \"2.2.1\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"block-stream\": \"0.0.9\",",
                "+            \"fstream\": \"1.0.11\",",
                "+            \"inherits\": \"2.0.3\"",
                "+          }",
                "+        },",
                "+        \"tar-pack\": {",
                "+          \"version\": \"3.4.0\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true,",
                "+          \"requires\": {",
                "+            \"debug\": \"2.6.8\",",
                "+            \"fstream\": \"1.0.11\",",
                "+            \"fstream-ignore\": \"1.0.5\",",
                "+            \"once\": \"1.4.0\",",
                "+            \"readable-stream\": \"2.2.9\",",
                "+            \"rimraf\": \"2.6.1\",",
                "+            \"tar\": \"2.2.1\",",
                "+            \"uid-number\": \"0.0.6\"",
                "+          }",
                "+        },",
                "+        \"tough-cookie\": {",
                "+          \"version\": \"2.3.2\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true,",
                "+          \"requires\": {",
                "+            \"punycode\": \"1.4.1\"",
                "+          }",
                "+        },",
                "+        \"tunnel-agent\": {",
                "+          \"version\": \"0.6.0\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true,",
                "+          \"requires\": {",
                "+            \"safe-buffer\": \"5.0.1\"",
                "+          }",
                "+        },",
                "+        \"tweetnacl\": {",
                "+          \"version\": \"0.14.5\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true",
                "+        },",
                "+        \"uid-number\": {",
                "+          \"version\": \"0.0.6\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true",
                "+        },",
                "+        \"util-deprecate\": {",
                "+          \"version\": \"1.0.2\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true",
                "+        },",
                "+        \"uuid\": {",
                "+          \"version\": \"3.0.1\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true",
                "+        },",
                "+        \"verror\": {",
                "+          \"version\": \"1.3.6\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true,",
                "+          \"requires\": {",
                "+            \"extsprintf\": \"1.0.2\"",
                "+          }",
                "+        },",
                "+        \"wide-align\": {",
                "+          \"version\": \"1.1.2\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true,",
                "+          \"optional\": true,",
                "+          \"requires\": {",
                "+            \"string-width\": \"1.0.2\"",
                "+          }",
                "+        },",
                "+        \"wrappy\": {",
                "+          \"version\": \"1.0.2\",",
                "+          \"bundled\": true,",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"function-bind\": {",
                "+      \"version\": \"1.1.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/function-bind/-/function-bind-1.1.1.tgz\",",
                "+      \"integrity\": \"sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A==\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"gaze\": {",
                "+      \"version\": \"0.5.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/gaze/-/gaze-0.5.2.tgz\",",
                "+      \"integrity\": \"sha1-QLcJU30k0dRXZ9takIaJ3+aaxE8=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"globule\": \"0.1.0\"",
                "+      }",
                "+    },",
                "+    \"generate-function\": {",
                "+      \"version\": \"2.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/generate-function/-/generate-function-2.0.0.tgz\",",
                "+      \"integrity\": \"sha1-aFj+fAlpt9TpCTM3ZHrHn2DfvnQ=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"generate-object-property\": {",
                "+      \"version\": \"1.2.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/generate-object-property/-/generate-object-property-1.2.0.tgz\",",
                "+      \"integrity\": \"sha1-nA4cQDCM6AT0eDYYuTf6iPmdUNA=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"is-property\": \"1.0.2\"",
                "+      }",
                "+    },",
                "+    \"get-stdin\": {",
                "+      \"version\": \"4.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/get-stdin/-/get-stdin-4.0.1.tgz\",",
                "+      \"integrity\": \"sha1-uWjGsKBDhDJJAui/Gl3zJXmkUP4=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"getobject\": {",
                "+      \"version\": \"0.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/getobject/-/getobject-0.1.0.tgz\",",
                "+      \"integrity\": \"sha1-BHpEl4n6Fg0Bj1SG7ZEyC27HiFw=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"getpass\": {",
                "+      \"version\": \"0.1.7\",",
                "+      \"resolved\": \"https://registry.npmjs.org/getpass/-/getpass-0.1.7.tgz\",",
                "+      \"integrity\": \"sha1-Xv+OPmhNVprkyysSgmBOi6YhSfo=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"assert-plus\": \"1.0.0\"",
                "+      }",
                "+    },",
                "+    \"github-markdown-css\": {",
                "+      \"version\": \"2.6.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/github-markdown-css/-/github-markdown-css-2.6.0.tgz\",",
                "+      \"integrity\": \"sha1-zcdLq1ZrA51/u3RgH3ghsQnPWRg=\"",
                "+    },",
                "+    \"glob\": {",
                "+      \"version\": \"3.2.11\",",
                "+      \"resolved\": \"https://registry.npmjs.org/glob/-/glob-3.2.11.tgz\",",
                "+      \"integrity\": \"sha1-Spc/Y1uRkPcV0QmH1cAP0oFevj0=\",",
                "+      \"requires\": {",
                "+        \"inherits\": \"2.0.3\",",
                "+        \"minimatch\": \"0.3.0\"",
                "+      }",
                "+    },",
                "+    \"glob-base\": {",
                "+      \"version\": \"0.3.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/glob-base/-/glob-base-0.3.0.tgz\",",
                "+      \"integrity\": \"sha1-27Fk9iIbHAscz4Kuoyi0l98Oo8Q=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"glob-parent\": \"2.0.0\",",
                "+        \"is-glob\": \"2.0.1\"",
                "+      }",
                "+    },",
                "+    \"glob-parent\": {",
                "+      \"version\": \"2.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/glob-parent/-/glob-parent-2.0.0.tgz\",",
                "+      \"integrity\": \"sha1-gTg9ctsFT8zPUzbaqQLxgvbtuyg=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"is-glob\": \"2.0.1\"",
                "+      }",
                "+    },",
                "+    \"globals\": {",
                "+      \"version\": \"9.18.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/globals/-/globals-9.18.0.tgz\",",
                "+      \"integrity\": \"sha512-S0nG3CLEQiY/ILxqtztTWH/3iRRdyBLw6KMDxnKMchrtbj2OFmehVh0WUCfW3DUrIgx/qFrJPICrq4Z4sTR9UQ==\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"globby\": {",
                "+      \"version\": \"5.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/globby/-/globby-5.0.0.tgz\",",
                "+      \"integrity\": \"sha1-69hGZ8oNuzMLmbz8aOrCvFQ3Dg0=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"array-union\": \"1.0.2\",",
                "+        \"arrify\": \"1.0.1\",",
                "+        \"glob\": \"7.1.2\",",
                "+        \"object-assign\": \"4.1.1\",",
                "+        \"pify\": \"2.3.0\",",
                "+        \"pinkie-promise\": \"2.0.1\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"glob\": {",
                "+          \"version\": \"7.1.2\",",
                "+          \"resolved\": \"https://registry.npmjs.org/glob/-/glob-7.1.2.tgz\",",
                "+          \"integrity\": \"sha512-MJTUg1kjuLeQCJ+ccE4Vpa6kKVXkPYJ2mOCQyUuKLcLQsdrMCpBPUi8qVE6+YuaJkozeA9NusTAw3hLr8Xe5EQ==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"fs.realpath\": \"1.0.0\",",
                "+            \"inflight\": \"1.0.6\",",
                "+            \"inherits\": \"2.0.3\",",
                "+            \"minimatch\": \"3.0.4\",",
                "+            \"once\": \"1.4.0\",",
                "+            \"path-is-absolute\": \"1.0.1\"",
                "+          }",
                "+        },",
                "+        \"minimatch\": {",
                "+          \"version\": \"3.0.4\",",
                "+          \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-3.0.4.tgz\",",
                "+          \"integrity\": \"sha512-yJHVQEhyqPLUTgt9B83PXu6W3rx4MvvHvSUvToogpwoGDOUQ+yDrR0HRot+yOCdCO7u4hX3pWft6kWBBcqh0UA==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"brace-expansion\": \"1.1.8\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"globule\": {",
                "+      \"version\": \"0.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/globule/-/globule-0.1.0.tgz\",",
                "+      \"integrity\": \"sha1-2cjt3h2nnRJaFRt5UzuXhnY0auU=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"glob\": \"3.1.21\",",
                "+        \"lodash\": \"1.0.2\",",
                "+        \"minimatch\": \"0.2.14\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"glob\": {",
                "+          \"version\": \"3.1.21\",",
                "+          \"resolved\": \"https://registry.npmjs.org/glob/-/glob-3.1.21.tgz\",",
                "+          \"integrity\": \"sha1-0p4KBV3qUTj00H7UDomC6DwgZs0=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"graceful-fs\": \"1.2.3\",",
                "+            \"inherits\": \"1.0.2\",",
                "+            \"minimatch\": \"0.2.14\"",
                "+          }",
                "+        },",
                "+        \"graceful-fs\": {",
                "+          \"version\": \"1.2.3\",",
                "+          \"resolved\": \"https://registry.npmjs.org/graceful-fs/-/graceful-fs-1.2.3.tgz\",",
                "+          \"integrity\": \"sha1-FaSAaldUfLLS2/J/QuiajDRRs2Q=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"inherits\": {",
                "+          \"version\": \"1.0.2\",",
                "+          \"resolved\": \"https://registry.npmjs.org/inherits/-/inherits-1.0.2.tgz\",",
                "+          \"integrity\": \"sha1-ykMJ2t7mtUzAuNJH6NfHoJdb3Js=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"lodash\": {",
                "+          \"version\": \"1.0.2\",",
                "+          \"resolved\": \"https://registry.npmjs.org/lodash/-/lodash-1.0.2.tgz\",",
                "+          \"integrity\": \"sha1-j1dWDIO1n8JwvT1WG2kAQ0MOJVE=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"minimatch\": {",
                "+          \"version\": \"0.2.14\",",
                "+          \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-0.2.14.tgz\",",
                "+          \"integrity\": \"sha1-x054BXT2PG+aCQ6Q775u9TpqdWo=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"lru-cache\": \"2.7.3\",",
                "+            \"sigmund\": \"1.0.1\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"graceful-fs\": {",
                "+      \"version\": \"4.1.11\",",
                "+      \"resolved\": \"https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.1.11.tgz\",",
                "+      \"integrity\": \"sha1-Dovf5NHduIVNZOBOp8AOKgJuVlg=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"grunt\": {",
                "+      \"version\": \"0.4.5\",",
                "+      \"resolved\": \"https://registry.npmjs.org/grunt/-/grunt-0.4.5.tgz\",",
                "+      \"integrity\": \"sha1-VpN81RlDJK3/bSB2MYMqnWuk5/A=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"async\": \"0.1.22\",",
                "+        \"coffee-script\": \"1.3.3\",",
                "+        \"colors\": \"0.6.2\",",
                "+        \"dateformat\": \"1.0.2-1.2.3\",",
                "+        \"eventemitter2\": \"0.4.14\",",
                "+        \"exit\": \"0.1.2\",",
                "+        \"findup-sync\": \"0.1.3\",",
                "+        \"getobject\": \"0.1.0\",",
                "+        \"glob\": \"3.1.21\",",
                "+        \"grunt-legacy-log\": \"0.1.3\",",
                "+        \"grunt-legacy-util\": \"0.2.0\",",
                "+        \"hooker\": \"0.2.3\",",
                "+        \"iconv-lite\": \"0.2.11\",",
                "+        \"js-yaml\": \"2.0.5\",",
                "+        \"lodash\": \"0.9.2\",",
                "+        \"minimatch\": \"0.2.14\",",
                "+        \"nopt\": \"1.0.10\",",
                "+        \"rimraf\": \"2.2.8\",",
                "+        \"underscore.string\": \"2.2.1\",",
                "+        \"which\": \"1.0.9\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"argparse\": {",
                "+          \"version\": \"0.1.16\",",
                "+          \"resolved\": \"https://registry.npmjs.org/argparse/-/argparse-0.1.16.tgz\",",
                "+          \"integrity\": \"sha1-z9AeD7uj1srtBJ+9dY1A9lGW9Xw=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"underscore\": \"1.7.0\",",
                "+            \"underscore.string\": \"2.4.0\"",
                "+          },",
                "+          \"dependencies\": {",
                "+            \"underscore.string\": {",
                "+              \"version\": \"2.4.0\",",
                "+              \"resolved\": \"https://registry.npmjs.org/underscore.string/-/underscore.string-2.4.0.tgz\",",
                "+              \"integrity\": \"sha1-jN2PusTi0uoefi6Al8QvRCKA+Fs=\",",
                "+              \"dev\": true",
                "+            }",
                "+          }",
                "+        },",
                "+        \"async\": {",
                "+          \"version\": \"0.1.22\",",
                "+          \"resolved\": \"https://registry.npmjs.org/async/-/async-0.1.22.tgz\",",
                "+          \"integrity\": \"sha1-D8GqoIig4+8Ovi2IMbqw3PiEUGE=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"colors\": {",
                "+          \"version\": \"0.6.2\",",
                "+          \"resolved\": \"https://registry.npmjs.org/colors/-/colors-0.6.2.tgz\",",
                "+          \"integrity\": \"sha1-JCP+ZnisDF2uiFLl0OW+CMmXq8w=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"esprima\": {",
                "+          \"version\": \"1.0.4\",",
                "+          \"resolved\": \"https://registry.npmjs.org/esprima/-/esprima-1.0.4.tgz\",",
                "+          \"integrity\": \"sha1-n1V+CPw7TSbs6d00+Pv0drYlha0=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"glob\": {",
                "+          \"version\": \"3.1.21\",",
                "+          \"resolved\": \"https://registry.npmjs.org/glob/-/glob-3.1.21.tgz\",",
                "+          \"integrity\": \"sha1-0p4KBV3qUTj00H7UDomC6DwgZs0=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"graceful-fs\": \"1.2.3\",",
                "+            \"inherits\": \"1.0.2\",",
                "+            \"minimatch\": \"0.2.14\"",
                "+          }",
                "+        },",
                "+        \"graceful-fs\": {",
                "+          \"version\": \"1.2.3\",",
                "+          \"resolved\": \"https://registry.npmjs.org/graceful-fs/-/graceful-fs-1.2.3.tgz\",",
                "+          \"integrity\": \"sha1-FaSAaldUfLLS2/J/QuiajDRRs2Q=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"iconv-lite\": {",
                "+          \"version\": \"0.2.11\",",
                "+          \"resolved\": \"https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.2.11.tgz\",",
                "+          \"integrity\": \"sha1-HOYKOleGSiktEyH/RgnKS7llrcg=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"inherits\": {",
                "+          \"version\": \"1.0.2\",",
                "+          \"resolved\": \"https://registry.npmjs.org/inherits/-/inherits-1.0.2.tgz\",",
                "+          \"integrity\": \"sha1-ykMJ2t7mtUzAuNJH6NfHoJdb3Js=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"js-yaml\": {",
                "+          \"version\": \"2.0.5\",",
                "+          \"resolved\": \"https://registry.npmjs.org/js-yaml/-/js-yaml-2.0.5.tgz\",",
                "+          \"integrity\": \"sha1-olrmUJmZ6X3yeMZxnaEb0Gh3Q6g=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"argparse\": \"0.1.16\",",
                "+            \"esprima\": \"1.0.4\"",
                "+          }",
                "+        },",
                "+        \"lodash\": {",
                "+          \"version\": \"0.9.2\",",
                "+          \"resolved\": \"https://registry.npmjs.org/lodash/-/lodash-0.9.2.tgz\",",
                "+          \"integrity\": \"sha1-jzSZxSRdNG1oLlsNO0B2fgnxqSw=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"minimatch\": {",
                "+          \"version\": \"0.2.14\",",
                "+          \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-0.2.14.tgz\",",
                "+          \"integrity\": \"sha1-x054BXT2PG+aCQ6Q775u9TpqdWo=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"lru-cache\": \"2.7.3\",",
                "+            \"sigmund\": \"1.0.1\"",
                "+          }",
                "+        },",
                "+        \"rimraf\": {",
                "+          \"version\": \"2.2.8\",",
                "+          \"resolved\": \"https://registry.npmjs.org/rimraf/-/rimraf-2.2.8.tgz\",",
                "+          \"integrity\": \"sha1-5Dm+Kq7jJzIZUnMPmaiSnk/FBYI=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"underscore\": {",
                "+          \"version\": \"1.7.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/underscore/-/underscore-1.7.0.tgz\",",
                "+          \"integrity\": \"sha1-a7rwh3UA02vjTsqlhODbn+8DUgk=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"grunt-angular-templates\": {",
                "+      \"version\": \"0.5.9\",",
                "+      \"resolved\": \"https://registry.npmjs.org/grunt-angular-templates/-/grunt-angular-templates-0.5.9.tgz\",",
                "+      \"integrity\": \"sha1-KJm+INlDitGbDQqAaqjseiOyWyo=\",",
                "+      \"requires\": {",
                "+        \"html-minifier\": \"0.6.9\"",
                "+      }",
                "+    },",
                "+    \"grunt-cache-bust\": {",
                "+      \"version\": \"1.3.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/grunt-cache-bust/-/grunt-cache-bust-1.3.0.tgz\",",
                "+      \"integrity\": \"sha1-YtkgjiMV8cIMFgg6kHzkq8JJv1Q=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"grunt-cli\": {",
                "+      \"version\": \"0.1.13\",",
                "+      \"resolved\": \"https://registry.npmjs.org/grunt-cli/-/grunt-cli-0.1.13.tgz\",",
                "+      \"integrity\": \"sha1-6evEBHYx9QEtkidww5N4EzytEPQ=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"findup-sync\": \"0.1.3\",",
                "+        \"nopt\": \"1.0.10\",",
                "+        \"resolve\": \"0.3.1\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"resolve\": {",
                "+          \"version\": \"0.3.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/resolve/-/resolve-0.3.1.tgz\",",
                "+          \"integrity\": \"sha1-NMY0R8ZkxwWY0cmxJvxDsqJDEKQ=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"grunt-concurrent\": {",
                "+      \"version\": \"0.5.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/grunt-concurrent/-/grunt-concurrent-0.5.0.tgz\",",
                "+      \"integrity\": \"sha1-SlGaTCh4JfDeBxX3O4XRUMdQ2fc=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"async\": \"0.2.10\",",
                "+        \"pad-stdio\": \"0.1.1\"",
                "+      }",
                "+    },",
                "+    \"grunt-contrib-concat\": {",
                "+      \"version\": \"0.4.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/grunt-contrib-concat/-/grunt-contrib-concat-0.4.0.tgz\",",
                "+      \"integrity\": \"sha1-uH988VO/ZGiBQvlHFhFWAT+8fHQ=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"chalk\": \"0.4.0\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"ansi-styles\": {",
                "+          \"version\": \"1.0.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/ansi-styles/-/ansi-styles-1.0.0.tgz\",",
                "+          \"integrity\": \"sha1-yxAt8cVvUSPquLZ817mAJ6AnkXg=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"chalk\": {",
                "+          \"version\": \"0.4.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/chalk/-/chalk-0.4.0.tgz\",",
                "+          \"integrity\": \"sha1-UZmj3c0MHv4jvAjBsCewYXbgxk8=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"ansi-styles\": \"1.0.0\",",
                "+            \"has-color\": \"0.1.7\",",
                "+            \"strip-ansi\": \"0.1.1\"",
                "+          }",
                "+        },",
                "+        \"strip-ansi\": {",
                "+          \"version\": \"0.1.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/strip-ansi/-/strip-ansi-0.1.1.tgz\",",
                "+          \"integrity\": \"sha1-OeipjQRNFQZgq+SmgIrPcLt7yZE=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"grunt-contrib-copy\": {",
                "+      \"version\": \"0.5.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/grunt-contrib-copy/-/grunt-contrib-copy-0.5.0.tgz\",",
                "+      \"integrity\": \"sha1-QQB1rEWlhWuhkbHMclclRQ1KAhU=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"grunt-contrib-cssmin\": {",
                "+      \"version\": \"0.9.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/grunt-contrib-cssmin/-/grunt-contrib-cssmin-0.9.0.tgz\",",
                "+      \"integrity\": \"sha1-JyQfAWCohmZZ2rQNyMJ3bAHsfOI=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"chalk\": \"0.4.0\",",
                "+        \"clean-css\": \"2.1.8\",",
                "+        \"maxmin\": \"0.1.0\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"ansi-styles\": {",
                "+          \"version\": \"1.0.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/ansi-styles/-/ansi-styles-1.0.0.tgz\",",
                "+          \"integrity\": \"sha1-yxAt8cVvUSPquLZ817mAJ6AnkXg=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"chalk\": {",
                "+          \"version\": \"0.4.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/chalk/-/chalk-0.4.0.tgz\",",
                "+          \"integrity\": \"sha1-UZmj3c0MHv4jvAjBsCewYXbgxk8=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"ansi-styles\": \"1.0.0\",",
                "+            \"has-color\": \"0.1.7\",",
                "+            \"strip-ansi\": \"0.1.1\"",
                "+          }",
                "+        },",
                "+        \"clean-css\": {",
                "+          \"version\": \"2.1.8\",",
                "+          \"resolved\": \"https://registry.npmjs.org/clean-css/-/clean-css-2.1.8.tgz\",",
                "+          \"integrity\": \"sha1-K0sv1g8yRBCWIWriWiH6p0WA3IM=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"commander\": \"2.1.0\"",
                "+          }",
                "+        },",
                "+        \"commander\": {",
                "+          \"version\": \"2.1.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/commander/-/commander-2.1.0.tgz\",",
                "+          \"integrity\": \"sha1-0SG7roYNmZKj1Re6lvVliOR8Z4E=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"strip-ansi\": {",
                "+          \"version\": \"0.1.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/strip-ansi/-/strip-ansi-0.1.1.tgz\",",
                "+          \"integrity\": \"sha1-OeipjQRNFQZgq+SmgIrPcLt7yZE=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"grunt-contrib-htmlmin\": {",
                "+      \"version\": \"0.3.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/grunt-contrib-htmlmin/-/grunt-contrib-htmlmin-0.3.0.tgz\",",
                "+      \"integrity\": \"sha1-yWCAIEj2CZJenQ7xsGcJBLTFo/0=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"chalk\": \"0.4.0\",",
                "+        \"html-minifier\": \"0.6.9\",",
                "+        \"pretty-bytes\": \"0.1.2\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"ansi-styles\": {",
                "+          \"version\": \"1.0.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/ansi-styles/-/ansi-styles-1.0.0.tgz\",",
                "+          \"integrity\": \"sha1-yxAt8cVvUSPquLZ817mAJ6AnkXg=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"chalk\": {",
                "+          \"version\": \"0.4.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/chalk/-/chalk-0.4.0.tgz\",",
                "+          \"integrity\": \"sha1-UZmj3c0MHv4jvAjBsCewYXbgxk8=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"ansi-styles\": \"1.0.0\",",
                "+            \"has-color\": \"0.1.7\",",
                "+            \"strip-ansi\": \"0.1.1\"",
                "+          }",
                "+        },",
                "+        \"strip-ansi\": {",
                "+          \"version\": \"0.1.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/strip-ansi/-/strip-ansi-0.1.1.tgz\",",
                "+          \"integrity\": \"sha1-OeipjQRNFQZgq+SmgIrPcLt7yZE=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"grunt-contrib-uglify\": {",
                "+      \"version\": \"0.4.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/grunt-contrib-uglify/-/grunt-contrib-uglify-0.4.1.tgz\",",
                "+      \"integrity\": \"sha1-1D87xuAsM1Vj+MT58IE/tLD/ebE=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"chalk\": \"0.4.0\",",
                "+        \"maxmin\": \"0.1.0\",",
                "+        \"uglify-js\": \"2.4.24\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"ansi-styles\": {",
                "+          \"version\": \"1.0.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/ansi-styles/-/ansi-styles-1.0.0.tgz\",",
                "+          \"integrity\": \"sha1-yxAt8cVvUSPquLZ817mAJ6AnkXg=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"chalk\": {",
                "+          \"version\": \"0.4.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/chalk/-/chalk-0.4.0.tgz\",",
                "+          \"integrity\": \"sha1-UZmj3c0MHv4jvAjBsCewYXbgxk8=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"ansi-styles\": \"1.0.0\",",
                "+            \"has-color\": \"0.1.7\",",
                "+            \"strip-ansi\": \"0.1.1\"",
                "+          }",
                "+        },",
                "+        \"strip-ansi\": {",
                "+          \"version\": \"0.1.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/strip-ansi/-/strip-ansi-0.1.1.tgz\",",
                "+          \"integrity\": \"sha1-OeipjQRNFQZgq+SmgIrPcLt7yZE=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"grunt-contrib-watch\": {",
                "+      \"version\": \"0.6.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/grunt-contrib-watch/-/grunt-contrib-watch-0.6.1.tgz\",",
                "+      \"integrity\": \"sha1-ZP3LolpjX1tNobbOb5DaCutuPxU=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"async\": \"0.2.10\",",
                "+        \"gaze\": \"0.5.2\",",
                "+        \"lodash\": \"2.4.2\",",
                "+        \"tiny-lr-fork\": \"0.0.5\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"lodash\": {",
                "+          \"version\": \"2.4.2\",",
                "+          \"resolved\": \"https://registry.npmjs.org/lodash/-/lodash-2.4.2.tgz\",",
                "+          \"integrity\": \"sha1-+t2DS5aDBz2hebPq5tnA0VBT9z4=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"grunt-dom-munger\": {",
                "+      \"version\": \"3.4.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/grunt-dom-munger/-/grunt-dom-munger-3.4.0.tgz\",",
                "+      \"integrity\": \"sha1-LQ2Plk9amVEekUrR1T8fccWrbYk=\",",
                "+      \"requires\": {",
                "+        \"cheerio\": \"0.12.4\"",
                "+      }",
                "+    },",
                "+    \"grunt-filerev\": {",
                "+      \"version\": \"0.2.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/grunt-filerev/-/grunt-filerev-0.2.1.tgz\",",
                "+      \"integrity\": \"sha1-Svngz+2nuwFnB2VpeREimBH29NM=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"chalk\": \"0.4.0\",",
                "+        \"each-async\": \"0.1.3\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"ansi-styles\": {",
                "+          \"version\": \"1.0.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/ansi-styles/-/ansi-styles-1.0.0.tgz\",",
                "+          \"integrity\": \"sha1-yxAt8cVvUSPquLZ817mAJ6AnkXg=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"chalk\": {",
                "+          \"version\": \"0.4.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/chalk/-/chalk-0.4.0.tgz\",",
                "+          \"integrity\": \"sha1-UZmj3c0MHv4jvAjBsCewYXbgxk8=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"ansi-styles\": \"1.0.0\",",
                "+            \"has-color\": \"0.1.7\",",
                "+            \"strip-ansi\": \"0.1.1\"",
                "+          }",
                "+        },",
                "+        \"strip-ansi\": {",
                "+          \"version\": \"0.1.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/strip-ansi/-/strip-ansi-0.1.1.tgz\",",
                "+          \"integrity\": \"sha1-OeipjQRNFQZgq+SmgIrPcLt7yZE=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"grunt-htmlhint\": {",
                "+      \"version\": \"0.9.13\",",
                "+      \"resolved\": \"https://registry.npmjs.org/grunt-htmlhint/-/grunt-htmlhint-0.9.13.tgz\",",
                "+      \"integrity\": \"sha1-cXACPzDi5wUnkjQrSNW7+RK512w=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"htmlhint\": \"0.9.13\"",
                "+      }",
                "+    },",
                "+    \"grunt-legacy-log\": {",
                "+      \"version\": \"0.1.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/grunt-legacy-log/-/grunt-legacy-log-0.1.3.tgz\",",
                "+      \"integrity\": \"sha1-7ClCboAwIa9ZAp+H0vnNczWgVTE=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"colors\": \"0.6.2\",",
                "+        \"grunt-legacy-log-utils\": \"0.1.1\",",
                "+        \"hooker\": \"0.2.3\",",
                "+        \"lodash\": \"2.4.2\",",
                "+        \"underscore.string\": \"2.3.3\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"colors\": {",
                "+          \"version\": \"0.6.2\",",
                "+          \"resolved\": \"https://registry.npmjs.org/colors/-/colors-0.6.2.tgz\",",
                "+          \"integrity\": \"sha1-JCP+ZnisDF2uiFLl0OW+CMmXq8w=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"lodash\": {",
                "+          \"version\": \"2.4.2\",",
                "+          \"resolved\": \"https://registry.npmjs.org/lodash/-/lodash-2.4.2.tgz\",",
                "+          \"integrity\": \"sha1-+t2DS5aDBz2hebPq5tnA0VBT9z4=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"underscore.string\": {",
                "+          \"version\": \"2.3.3\",",
                "+          \"resolved\": \"https://registry.npmjs.org/underscore.string/-/underscore.string-2.3.3.tgz\",",
                "+          \"integrity\": \"sha1-ccCL9rQosRM/N+ePo6Icgvcymw0=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"grunt-legacy-log-utils\": {",
                "+      \"version\": \"0.1.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/grunt-legacy-log-utils/-/grunt-legacy-log-utils-0.1.1.tgz\",",
                "+      \"integrity\": \"sha1-wHBrndkGThFvNvI/5OawSGcsD34=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"colors\": \"0.6.2\",",
                "+        \"lodash\": \"2.4.2\",",
                "+        \"underscore.string\": \"2.3.3\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"colors\": {",
                "+          \"version\": \"0.6.2\",",
                "+          \"resolved\": \"https://registry.npmjs.org/colors/-/colors-0.6.2.tgz\",",
                "+          \"integrity\": \"sha1-JCP+ZnisDF2uiFLl0OW+CMmXq8w=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"lodash\": {",
                "+          \"version\": \"2.4.2\",",
                "+          \"resolved\": \"https://registry.npmjs.org/lodash/-/lodash-2.4.2.tgz\",",
                "+          \"integrity\": \"sha1-+t2DS5aDBz2hebPq5tnA0VBT9z4=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"underscore.string\": {",
                "+          \"version\": \"2.3.3\",",
                "+          \"resolved\": \"https://registry.npmjs.org/underscore.string/-/underscore.string-2.3.3.tgz\",",
                "+          \"integrity\": \"sha1-ccCL9rQosRM/N+ePo6Icgvcymw0=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"grunt-legacy-util\": {",
                "+      \"version\": \"0.2.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/grunt-legacy-util/-/grunt-legacy-util-0.2.0.tgz\",",
                "+      \"integrity\": \"sha1-kzJIhNv343qf98Am3/RR2UqeVUs=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"async\": \"0.1.22\",",
                "+        \"exit\": \"0.1.2\",",
                "+        \"getobject\": \"0.1.0\",",
                "+        \"hooker\": \"0.2.3\",",
                "+        \"lodash\": \"0.9.2\",",
                "+        \"underscore.string\": \"2.2.1\",",
                "+        \"which\": \"1.0.9\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"async\": {",
                "+          \"version\": \"0.1.22\",",
                "+          \"resolved\": \"https://registry.npmjs.org/async/-/async-0.1.22.tgz\",",
                "+          \"integrity\": \"sha1-D8GqoIig4+8Ovi2IMbqw3PiEUGE=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"lodash\": {",
                "+          \"version\": \"0.9.2\",",
                "+          \"resolved\": \"https://registry.npmjs.org/lodash/-/lodash-0.9.2.tgz\",",
                "+          \"integrity\": \"sha1-jzSZxSRdNG1oLlsNO0B2fgnxqSw=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"grunt-newer\": {",
                "+      \"version\": \"0.7.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/grunt-newer/-/grunt-newer-0.7.0.tgz\",",
                "+      \"integrity\": \"sha1-N22dm2TOXGSLa/ob2pj3vCGT5B4=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"async\": \"0.2.10\",",
                "+        \"rimraf\": \"2.2.6\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"rimraf\": {",
                "+          \"version\": \"2.2.6\",",
                "+          \"resolved\": \"https://registry.npmjs.org/rimraf/-/rimraf-2.2.6.tgz\",",
                "+          \"integrity\": \"sha1-xZWXVpsU2VatKcrMQr3d9fDqT0w=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"grunt-ng-annotate\": {",
                "+      \"version\": \"0.10.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/grunt-ng-annotate/-/grunt-ng-annotate-0.10.0.tgz\",",
                "+      \"integrity\": \"sha1-9dw7TDOlZlgkEzELeJhVZuCoS24=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"lodash.clonedeep\": \"3.0.2\",",
                "+        \"ng-annotate\": \"0.15.4\"",
                "+      }",
                "+    },",
                "+    \"grunt-postcss\": {",
                "+      \"version\": \"0.7.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/grunt-postcss/-/grunt-postcss-0.7.2.tgz\",",
                "+      \"integrity\": \"sha1-V7dke4d9Qq0yz51M0RAID/+0OKs=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"chalk\": \"1.1.3\",",
                "+        \"diff\": \"2.2.3\",",
                "+        \"es6-promise\": \"3.3.1\",",
                "+        \"postcss\": \"5.2.18\"",
                "+      }",
                "+    },",
                "+    \"grunt-replace\": {",
                "+      \"version\": \"1.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/grunt-replace/-/grunt-replace-1.0.1.tgz\",",
                "+      \"integrity\": \"sha1-kKeVMvuJBB/kJ8h9QlI4sPiGZRo=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"applause\": \"1.2.2\",",
                "+        \"chalk\": \"1.1.3\",",
                "+        \"file-sync-cmp\": \"0.1.1\",",
                "+        \"lodash\": \"4.17.4\"",
                "+      }",
                "+    },",
                "+    \"grunt-svgmin\": {",
                "+      \"version\": \"0.4.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/grunt-svgmin/-/grunt-svgmin-0.4.0.tgz\",",
                "+      \"integrity\": \"sha1-8Z0RkwIq4AgOD65dMT4S73yuCq4=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"chalk\": \"0.4.0\",",
                "+        \"each-async\": \"0.1.3\",",
                "+        \"pretty-bytes\": \"0.1.2\",",
                "+        \"svgo\": \"0.4.5\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"ansi-styles\": {",
                "+          \"version\": \"1.0.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/ansi-styles/-/ansi-styles-1.0.0.tgz\",",
                "+          \"integrity\": \"sha1-yxAt8cVvUSPquLZ817mAJ6AnkXg=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"argparse\": {",
                "+          \"version\": \"0.1.16\",",
                "+          \"resolved\": \"https://registry.npmjs.org/argparse/-/argparse-0.1.16.tgz\",",
                "+          \"integrity\": \"sha1-z9AeD7uj1srtBJ+9dY1A9lGW9Xw=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"underscore\": \"1.7.0\",",
                "+            \"underscore.string\": \"2.4.0\"",
                "+          }",
                "+        },",
                "+        \"chalk\": {",
                "+          \"version\": \"0.4.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/chalk/-/chalk-0.4.0.tgz\",",
                "+          \"integrity\": \"sha1-UZmj3c0MHv4jvAjBsCewYXbgxk8=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"ansi-styles\": \"1.0.0\",",
                "+            \"has-color\": \"0.1.7\",",
                "+            \"strip-ansi\": \"0.1.1\"",
                "+          }",
                "+        },",
                "+        \"coa\": {",
                "+          \"version\": \"0.4.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/coa/-/coa-0.4.1.tgz\",",
                "+          \"integrity\": \"sha1-uvb0nHrZ8gxZevObP8HlCQ/og4s=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"q\": \"0.9.7\"",
                "+          }",
                "+        },",
                "+        \"colors\": {",
                "+          \"version\": \"0.6.2\",",
                "+          \"resolved\": \"https://registry.npmjs.org/colors/-/colors-0.6.2.tgz\",",
                "+          \"integrity\": \"sha1-JCP+ZnisDF2uiFLl0OW+CMmXq8w=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"esprima\": {",
                "+          \"version\": \"1.0.4\",",
                "+          \"resolved\": \"https://registry.npmjs.org/esprima/-/esprima-1.0.4.tgz\",",
                "+          \"integrity\": \"sha1-n1V+CPw7TSbs6d00+Pv0drYlha0=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"js-yaml\": {",
                "+          \"version\": \"2.1.3\",",
                "+          \"resolved\": \"https://registry.npmjs.org/js-yaml/-/js-yaml-2.1.3.tgz\",",
                "+          \"integrity\": \"sha1-D/tWF75VUlh4Bj16Fq7n/dKC6Ew=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"argparse\": \"0.1.16\",",
                "+            \"esprima\": \"1.0.4\"",
                "+          }",
                "+        },",
                "+        \"q\": {",
                "+          \"version\": \"0.9.7\",",
                "+          \"resolved\": \"https://registry.npmjs.org/q/-/q-0.9.7.tgz\",",
                "+          \"integrity\": \"sha1-TeLmyzspCIyeTLwDv51C+5bOL3U=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"sax\": {",
                "+          \"version\": \"0.6.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/sax/-/sax-0.6.1.tgz\",",
                "+          \"integrity\": \"sha1-VjsZx8HeiS4Jv8Ty/DDjwn8JUrk=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"strip-ansi\": {",
                "+          \"version\": \"0.1.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/strip-ansi/-/strip-ansi-0.1.1.tgz\",",
                "+          \"integrity\": \"sha1-OeipjQRNFQZgq+SmgIrPcLt7yZE=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"svgo\": {",
                "+          \"version\": \"0.4.5\",",
                "+          \"resolved\": \"https://registry.npmjs.org/svgo/-/svgo-0.4.5.tgz\",",
                "+          \"integrity\": \"sha1-ulYVX7FzNyiVbAG0BSIe5+eJoqQ=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"coa\": \"0.4.1\",",
                "+            \"colors\": \"0.6.2\",",
                "+            \"js-yaml\": \"2.1.3\",",
                "+            \"sax\": \"0.6.1\",",
                "+            \"whet.extend\": \"0.9.9\"",
                "+          }",
                "+        },",
                "+        \"underscore\": {",
                "+          \"version\": \"1.7.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/underscore/-/underscore-1.7.0.tgz\",",
                "+          \"integrity\": \"sha1-a7rwh3UA02vjTsqlhODbn+8DUgk=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"underscore.string\": {",
                "+          \"version\": \"2.4.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/underscore.string/-/underscore.string-2.4.0.tgz\",",
                "+          \"integrity\": \"sha1-jN2PusTi0uoefi6Al8QvRCKA+Fs=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"grunt-usemin\": {",
                "+      \"version\": \"2.6.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/grunt-usemin/-/grunt-usemin-2.6.2.tgz\",",
                "+      \"integrity\": \"sha1-KxNroCJkqakdlNQkyNNya9iNt9o=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"chalk\": \"0.5.1\",",
                "+        \"debug\": \"2.1.3\",",
                "+        \"lodash\": \"2.4.2\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"ansi-regex\": {",
                "+          \"version\": \"0.2.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/ansi-regex/-/ansi-regex-0.2.1.tgz\",",
                "+          \"integrity\": \"sha1-DY6UaWej2BQ/k+JOKYUl/BsiNfk=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"ansi-styles\": {",
                "+          \"version\": \"1.1.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/ansi-styles/-/ansi-styles-1.1.0.tgz\",",
                "+          \"integrity\": \"sha1-6uy/Zs1waIJ2Cy9GkVgrj1XXp94=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"chalk\": {",
                "+          \"version\": \"0.5.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/chalk/-/chalk-0.5.1.tgz\",",
                "+          \"integrity\": \"sha1-Zjs6ZItotV0EaQ1JFnqoN4WPIXQ=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"ansi-styles\": \"1.1.0\",",
                "+            \"escape-string-regexp\": \"1.0.5\",",
                "+            \"has-ansi\": \"0.1.0\",",
                "+            \"strip-ansi\": \"0.3.0\",",
                "+            \"supports-color\": \"0.2.0\"",
                "+          }",
                "+        },",
                "+        \"debug\": {",
                "+          \"version\": \"2.1.3\",",
                "+          \"resolved\": \"https://registry.npmjs.org/debug/-/debug-2.1.3.tgz\",",
                "+          \"integrity\": \"sha1-zoqxte6PvuK/o7Yzyrk9NmtjQY4=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"ms\": \"0.7.0\"",
                "+          }",
                "+        },",
                "+        \"has-ansi\": {",
                "+          \"version\": \"0.1.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/has-ansi/-/has-ansi-0.1.0.tgz\",",
                "+          \"integrity\": \"sha1-hPJlqujA5qiKEtcCKJS3VoiUxi4=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"ansi-regex\": \"0.2.1\"",
                "+          }",
                "+        },",
                "+        \"lodash\": {",
                "+          \"version\": \"2.4.2\",",
                "+          \"resolved\": \"https://registry.npmjs.org/lodash/-/lodash-2.4.2.tgz\",",
                "+          \"integrity\": \"sha1-+t2DS5aDBz2hebPq5tnA0VBT9z4=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"ms\": {",
                "+          \"version\": \"0.7.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/ms/-/ms-0.7.0.tgz\",",
                "+          \"integrity\": \"sha1-hlvpTC5zl62KV9pqYzpuLzB5i4M=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"strip-ansi\": {",
                "+          \"version\": \"0.3.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/strip-ansi/-/strip-ansi-0.3.0.tgz\",",
                "+          \"integrity\": \"sha1-JfSOoiynkYfzF0pNuHWTR7sSYiA=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"ansi-regex\": \"0.2.1\"",
                "+          }",
                "+        },",
                "+        \"supports-color\": {",
                "+          \"version\": \"0.2.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/supports-color/-/supports-color-0.2.0.tgz\",",
                "+          \"integrity\": \"sha1-2S3iaU6z9nMjlz1649i1W0wiGQo=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"grunt-wiredep\": {",
                "+      \"version\": \"2.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/grunt-wiredep/-/grunt-wiredep-2.0.0.tgz\",",
                "+      \"integrity\": \"sha1-ID9vYT95nW3XLOBE0NzvZNrx8uU=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"wiredep\": \"2.2.2\"",
                "+      }",
                "+    },",
                "+    \"gzip-size\": {",
                "+      \"version\": \"0.1.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/gzip-size/-/gzip-size-0.1.1.tgz\",",
                "+      \"integrity\": \"sha1-rjNIO2/IIk6DQilt4Qjvk3V/duA=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"concat-stream\": \"1.6.0\",",
                "+        \"zlib-browserify\": \"0.0.3\"",
                "+      }",
                "+    },",
                "+    \"handlebars\": {",
                "+      \"version\": \"4.0.11\",",
                "+      \"resolved\": \"https://registry.npmjs.org/handlebars/-/handlebars-4.0.11.tgz\",",
                "+      \"integrity\": \"sha1-Ywo13+ApS8KB7a5v/F0yn8eYLcw=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"async\": \"1.5.2\",",
                "+        \"optimist\": \"0.6.1\",",
                "+        \"source-map\": \"0.4.4\",",
                "+        \"uglify-js\": \"2.8.29\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"async\": {",
                "+          \"version\": \"1.5.2\",",
                "+          \"resolved\": \"https://registry.npmjs.org/async/-/async-1.5.2.tgz\",",
                "+          \"integrity\": \"sha1-7GphrlZIDAw8skHJVhjiCJL5Zyo=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"source-map\": {",
                "+          \"version\": \"0.4.4\",",
                "+          \"resolved\": \"https://registry.npmjs.org/source-map/-/source-map-0.4.4.tgz\",",
                "+          \"integrity\": \"sha1-66T12pwNyZneaAMti092FzZSA2s=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"amdefine\": \"1.0.1\"",
                "+          }",
                "+        },",
                "+        \"uglify-js\": {",
                "+          \"version\": \"2.8.29\",",
                "+          \"resolved\": \"https://registry.npmjs.org/uglify-js/-/uglify-js-2.8.29.tgz\",",
                "+          \"integrity\": \"sha1-KcVzMUgFe7Th913zW3qcty5qWd0=\",",
                "+          \"dev\": true,",
                "+          \"optional\": true,",
                "+          \"requires\": {",
                "+            \"source-map\": \"0.5.7\",",
                "+            \"uglify-to-browserify\": \"1.0.2\",",
                "+            \"yargs\": \"3.10.0\"",
                "+          },",
                "+          \"dependencies\": {",
                "+            \"source-map\": {",
                "+              \"version\": \"0.5.7\",",
                "+              \"resolved\": \"https://registry.npmjs.org/source-map/-/source-map-0.5.7.tgz\",",
                "+              \"integrity\": \"sha1-igOdLRAh0i0eoUyA2OpGi6LvP8w=\",",
                "+              \"dev\": true,",
                "+              \"optional\": true",
                "+            }",
                "+          }",
                "+        },",
                "+        \"yargs\": {",
                "+          \"version\": \"3.10.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/yargs/-/yargs-3.10.0.tgz\",",
                "+          \"integrity\": \"sha1-9+572FfdfB0tOMDnTvvWgdFDH9E=\",",
                "+          \"dev\": true,",
                "+          \"optional\": true,",
                "+          \"requires\": {",
                "+            \"camelcase\": \"1.2.1\",",
                "+            \"cliui\": \"2.1.0\",",
                "+            \"decamelize\": \"1.2.0\",",
                "+            \"window-size\": \"0.1.0\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"har-schema\": {",
                "+      \"version\": \"2.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/har-schema/-/har-schema-2.0.0.tgz\",",
                "+      \"integrity\": \"sha1-qUwiJOvKwEeCoNkDVSHyRzW37JI=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"har-validator\": {",
                "+      \"version\": \"5.0.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/har-validator/-/har-validator-5.0.3.tgz\",",
                "+      \"integrity\": \"sha1-ukAsJmGU8VlW7xXg/PJCmT9qff0=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"ajv\": \"5.5.1\",",
                "+        \"har-schema\": \"2.0.0\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"ajv\": {",
                "+          \"version\": \"5.5.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/ajv/-/ajv-5.5.1.tgz\",",
                "+          \"integrity\": \"sha1-s4u4h22ehr7plJVqBOch6IskjrI=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"co\": \"4.6.0\",",
                "+            \"fast-deep-equal\": \"1.0.0\",",
                "+            \"fast-json-stable-stringify\": \"2.0.0\",",
                "+            \"json-schema-traverse\": \"0.3.1\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"has\": {",
                "+      \"version\": \"1.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/has/-/has-1.0.1.tgz\",",
                "+      \"integrity\": \"sha1-hGFzP1OLCDfJNh45qauelwTcLyg=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"function-bind\": \"1.1.1\"",
                "+      }",
                "+    },",
                "+    \"has-ansi\": {",
                "+      \"version\": \"2.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/has-ansi/-/has-ansi-2.0.0.tgz\",",
                "+      \"integrity\": \"sha1-NPUEnOHs3ysGSa8+8k5F7TVBbZE=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"ansi-regex\": \"2.1.1\"",
                "+      }",
                "+    },",
                "+    \"has-binary\": {",
                "+      \"version\": \"0.1.7\",",
                "+      \"resolved\": \"https://registry.npmjs.org/has-binary/-/has-binary-0.1.7.tgz\",",
                "+      \"integrity\": \"sha1-aOYesWIQyVRaClzOBqhzkS/h5ow=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"isarray\": \"0.0.1\"",
                "+      }",
                "+    },",
                "+    \"has-color\": {",
                "+      \"version\": \"0.1.7\",",
                "+      \"resolved\": \"https://registry.npmjs.org/has-color/-/has-color-0.1.7.tgz\",",
                "+      \"integrity\": \"sha1-ZxRKUmDDT8PMpnfQQdr1L+e3iy8=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"has-cors\": {",
                "+      \"version\": \"1.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/has-cors/-/has-cors-1.1.0.tgz\",",
                "+      \"integrity\": \"sha1-XkdHk/fqmEPRu5nCPu9J/xJv/zk=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"has-flag\": {",
                "+      \"version\": \"1.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/has-flag/-/has-flag-1.0.0.tgz\",",
                "+      \"integrity\": \"sha1-nZ55MWXOAXoA8AQYxD+UKnsdEfo=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"hasha\": {",
                "+      \"version\": \"2.2.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/hasha/-/hasha-2.2.0.tgz\",",
                "+      \"integrity\": \"sha1-eNfL/B5tZjA/55g3NlmEUXsvbuE=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"is-stream\": \"1.1.0\",",
                "+        \"pinkie-promise\": \"2.0.1\"",
                "+      }",
                "+    },",
                "+    \"hawk\": {",
                "+      \"version\": \"6.0.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/hawk/-/hawk-6.0.2.tgz\",",
                "+      \"integrity\": \"sha512-miowhl2+U7Qle4vdLqDdPt9m09K6yZhkLDTWGoUiUzrQCn+mHHSmfJgAyGaLRZbPmTqfFFjRV1QWCW0VWUJBbQ==\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"boom\": \"4.3.1\",",
                "+        \"cryptiles\": \"3.1.2\",",
                "+        \"hoek\": \"4.2.0\",",
                "+        \"sntp\": \"2.1.0\"",
                "+      }",
                "+    },",
                "+    \"he\": {",
                "+      \"version\": \"1.1.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/he/-/he-1.1.1.tgz\",",
                "+      \"integrity\": \"sha1-k0EP0hsAlzUVH4howvJx80J+I/0=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"headroom.js\": {",
                "+      \"version\": \"0.9.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/headroom.js/-/headroom.js-0.9.4.tgz\",",
                "+      \"integrity\": \"sha1-DE5rRWO7ad9Vrs3vq6MidWby31o=\"",
                "+    },",
                "+    \"hoek\": {",
                "+      \"version\": \"4.2.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/hoek/-/hoek-4.2.0.tgz\",",
                "+      \"integrity\": \"sha512-v0XCLxICi9nPfYrS9RL8HbYnXi9obYAeLbSP00BmnZwCK9+Ih9WOjoZ8YoHCoav2csqn4FOz4Orldsy2dmDwmQ==\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"home-or-tmp\": {",
                "+      \"version\": \"2.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/home-or-tmp/-/home-or-tmp-2.0.0.tgz\",",
                "+      \"integrity\": \"sha1-42w/LSyufXRqhX440Y1fMqeILbg=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"os-homedir\": \"1.0.2\",",
                "+        \"os-tmpdir\": \"1.0.2\"",
                "+      }",
                "+    },",
                "+    \"hooker\": {",
                "+      \"version\": \"0.2.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/hooker/-/hooker-0.2.3.tgz\",",
                "+      \"integrity\": \"sha1-uDT3I8xKJCqmWWNFnfbZhMXT2Vk=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"hosted-git-info\": {",
                "+      \"version\": \"2.5.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/hosted-git-info/-/hosted-git-info-2.5.0.tgz\",",
                "+      \"integrity\": \"sha512-pNgbURSuab90KbTqvRPsseaTxOJCZBD0a7t+haSN33piP9cCM4l0CqdzAif2hUqm716UovKB2ROmiabGAKVXyg==\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"html-comment-regex\": {",
                "+      \"version\": \"1.1.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/html-comment-regex/-/html-comment-regex-1.1.1.tgz\",",
                "+      \"integrity\": \"sha1-ZouTd26q5V696POtRkswekljYl4=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"html-minifier\": {",
                "+      \"version\": \"0.6.9\",",
                "+      \"resolved\": \"https://registry.npmjs.org/html-minifier/-/html-minifier-0.6.9.tgz\",",
                "+      \"integrity\": \"sha1-UQXcI29efhqLplHUq5gThvx6vlM=\",",
                "+      \"requires\": {",
                "+        \"change-case\": \"2.1.6\",",
                "+        \"clean-css\": \"2.2.23\",",
                "+        \"cli\": \"0.6.6\",",
                "+        \"relateurl\": \"0.2.7\",",
                "+        \"uglify-js\": \"2.4.24\"",
                "+      }",
                "+    },",
                "+    \"html-webpack-plugin\": {",
                "+      \"version\": \"2.30.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/html-webpack-plugin/-/html-webpack-plugin-2.30.1.tgz\",",
                "+      \"integrity\": \"sha1-f5xCG36pHsRg9WUn1430hO51N9U=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"bluebird\": \"3.5.1\",",
                "+        \"html-minifier\": \"3.5.7\",",
                "+        \"loader-utils\": \"0.2.17\",",
                "+        \"lodash\": \"4.17.4\",",
                "+        \"pretty-error\": \"2.1.1\",",
                "+        \"toposort\": \"1.0.6\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"camel-case\": {",
                "+          \"version\": \"3.0.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/camel-case/-/camel-case-3.0.0.tgz\",",
                "+          \"integrity\": \"sha1-yjw2iKTpzzpM2nd9xNy8cTJJz3M=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"no-case\": \"2.3.2\",",
                "+            \"upper-case\": \"1.1.3\"",
                "+          }",
                "+        },",
                "+        \"clean-css\": {",
                "+          \"version\": \"4.1.9\",",
                "+          \"resolved\": \"https://registry.npmjs.org/clean-css/-/clean-css-4.1.9.tgz\",",
                "+          \"integrity\": \"sha1-Nc7ornaHpJuYA09w3gDE7dOCYwE=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"source-map\": \"0.5.7\"",
                "+          }",
                "+        },",
                "+        \"commander\": {",
                "+          \"version\": \"2.12.2\",",
                "+          \"resolved\": \"https://registry.npmjs.org/commander/-/commander-2.12.2.tgz\",",
                "+          \"integrity\": \"sha512-BFnaq5ZOGcDN7FlrtBT4xxkgIToalIIxwjxLWVJ8bGTpe1LroqMiqQXdA7ygc7CRvaYS+9zfPGFnJqFSayx+AA==\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"html-minifier\": {",
                "+          \"version\": \"3.5.7\",",
                "+          \"resolved\": \"https://registry.npmjs.org/html-minifier/-/html-minifier-3.5.7.tgz\",",
                "+          \"integrity\": \"sha512-GISXn6oKDo7+gVpKOgZJTbHMCUI2TSGfpg/8jgencWhWJsvEmsvp3M8emX7QocsXsYznWloLib3OeSfeyb/ewg==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"camel-case\": \"3.0.0\",",
                "+            \"clean-css\": \"4.1.9\",",
                "+            \"commander\": \"2.12.2\",",
                "+            \"he\": \"1.1.1\",",
                "+            \"ncname\": \"1.0.0\",",
                "+            \"param-case\": \"2.1.1\",",
                "+            \"relateurl\": \"0.2.7\",",
                "+            \"uglify-js\": \"3.2.2\"",
                "+          }",
                "+        },",
                "+        \"param-case\": {",
                "+          \"version\": \"2.1.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/param-case/-/param-case-2.1.1.tgz\",",
                "+          \"integrity\": \"sha1-35T9jPZTHs915r75oIWPvHK+Ikc=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"no-case\": \"2.3.2\"",
                "+          }",
                "+        },",
                "+        \"source-map\": {",
                "+          \"version\": \"0.5.7\",",
                "+          \"resolved\": \"https://registry.npmjs.org/source-map/-/source-map-0.5.7.tgz\",",
                "+          \"integrity\": \"sha1-igOdLRAh0i0eoUyA2OpGi6LvP8w=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"uglify-js\": {",
                "+          \"version\": \"3.2.2\",",
                "+          \"resolved\": \"https://registry.npmjs.org/uglify-js/-/uglify-js-3.2.2.tgz\",",
                "+          \"integrity\": \"sha512-++1NO/zZIEdWf6cDIGceSJQPX31SqIpbVAHwFG5+240MtZqPG/NIPoinj8zlXQtAfMBqEt1Jyv2FiLP3n9gVhQ==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"commander\": \"2.12.2\",",
                "+            \"source-map\": \"0.6.1\"",
                "+          },",
                "+          \"dependencies\": {",
                "+            \"source-map\": {",
                "+              \"version\": \"0.6.1\",",
                "+              \"resolved\": \"https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz\",",
                "+              \"integrity\": \"sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==\",",
                "+              \"dev\": true",
                "+            }",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"htmlhint\": {",
                "+      \"version\": \"0.9.13\",",
                "+      \"resolved\": \"https://registry.npmjs.org/htmlhint/-/htmlhint-0.9.13.tgz\",",
                "+      \"integrity\": \"sha1-CBY8seaqUFBI67C0EGOnygfcbIg=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"async\": \"1.4.2\",",
                "+        \"colors\": \"1.0.3\",",
                "+        \"commander\": \"2.6.0\",",
                "+        \"csslint\": \"0.10.0\",",
                "+        \"glob\": \"5.0.15\",",
                "+        \"jshint\": \"2.8.0\",",
                "+        \"parse-glob\": \"3.0.4\",",
                "+        \"strip-json-comments\": \"1.0.4\",",
                "+        \"xml\": \"1.0.0\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"async\": {",
                "+          \"version\": \"1.4.2\",",
                "+          \"resolved\": \"https://registry.npmjs.org/async/-/async-1.4.2.tgz\",",
                "+          \"integrity\": \"sha1-bJ7csRztTw3S8tQNsNSaEJwIiqs=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"colors\": {",
                "+          \"version\": \"1.0.3\",",
                "+          \"resolved\": \"https://registry.npmjs.org/colors/-/colors-1.0.3.tgz\",",
                "+          \"integrity\": \"sha1-BDP0TYCWgP3rYO0mDxsMJi6CpAs=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"commander\": {",
                "+          \"version\": \"2.6.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/commander/-/commander-2.6.0.tgz\",",
                "+          \"integrity\": \"sha1-nfflL7Kgyw+4kFjugMMQQiXzfh0=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"glob\": {",
                "+          \"version\": \"5.0.15\",",
                "+          \"resolved\": \"https://registry.npmjs.org/glob/-/glob-5.0.15.tgz\",",
                "+          \"integrity\": \"sha1-G8k2ueAvSmA/zCIuz3Yz0wuLk7E=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"inflight\": \"1.0.6\",",
                "+            \"inherits\": \"2.0.3\",",
                "+            \"minimatch\": \"3.0.4\",",
                "+            \"once\": \"1.4.0\",",
                "+            \"path-is-absolute\": \"1.0.1\"",
                "+          }",
                "+        },",
                "+        \"minimatch\": {",
                "+          \"version\": \"3.0.4\",",
                "+          \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-3.0.4.tgz\",",
                "+          \"integrity\": \"sha512-yJHVQEhyqPLUTgt9B83PXu6W3rx4MvvHvSUvToogpwoGDOUQ+yDrR0HRot+yOCdCO7u4hX3pWft6kWBBcqh0UA==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"brace-expansion\": \"1.1.8\"",
                "+          }",
                "+        },",
                "+        \"strip-json-comments\": {",
                "+          \"version\": \"1.0.4\",",
                "+          \"resolved\": \"https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-1.0.4.tgz\",",
                "+          \"integrity\": \"sha1-HhX7ysl9Pumb8tc7TGVrCCu6+5E=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"htmlparser2\": {",
                "+      \"version\": \"3.1.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/htmlparser2/-/htmlparser2-3.1.4.tgz\",",
                "+      \"integrity\": \"sha1-csvn1dVsAaz2H897kzMx9ORbNvA=\",",
                "+      \"requires\": {",
                "+        \"domelementtype\": \"1.3.0\",",
                "+        \"domhandler\": \"2.0.3\",",
                "+        \"domutils\": \"1.1.6\",",
                "+        \"readable-stream\": \"1.0.34\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"domutils\": {",
                "+          \"version\": \"1.1.6\",",
                "+          \"resolved\": \"https://registry.npmjs.org/domutils/-/domutils-1.1.6.tgz\",",
                "+          \"integrity\": \"sha1-vdw94Jm5ou+sxRxiPyj0FuzFdIU=\",",
                "+          \"requires\": {",
                "+            \"domelementtype\": \"1.3.0\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"http-errors\": {",
                "+      \"version\": \"1.6.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/http-errors/-/http-errors-1.6.2.tgz\",",
                "+      \"integrity\": \"sha1-CgAsyFcHGSp+eUbO7cERVfYOxzY=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"depd\": \"1.1.1\",",
                "+        \"inherits\": \"2.0.3\",",
                "+        \"setprototypeof\": \"1.0.3\",",
                "+        \"statuses\": \"1.3.1\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"setprototypeof\": {",
                "+          \"version\": \"1.0.3\",",
                "+          \"resolved\": \"https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.0.3.tgz\",",
                "+          \"integrity\": \"sha1-ZlZ+NwQ+608E2RvWWMDL77VbjgQ=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"http-parser-js\": {",
                "+      \"version\": \"0.4.9\",",
                "+      \"resolved\": \"https://registry.npmjs.org/http-parser-js/-/http-parser-js-0.4.9.tgz\",",
                "+      \"integrity\": \"sha1-6hoE+2St/wJC6ZdPKX3Uw8rSceE=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"http-proxy\": {",
                "+      \"version\": \"1.16.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/http-proxy/-/http-proxy-1.16.2.tgz\",",
                "+      \"integrity\": \"sha1-Bt/ykpUr9k2+hHH6nfcwZtTzd0I=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"eventemitter3\": \"1.2.0\",",
                "+        \"requires-port\": \"1.0.0\"",
                "+      }",
                "+    },",
                "+    \"http-proxy-middleware\": {",
                "+      \"version\": \"0.17.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/http-proxy-middleware/-/http-proxy-middleware-0.17.4.tgz\",",
                "+      \"integrity\": \"sha1-ZC6ISIUdZvCdTxJJEoRtuutBuDM=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"http-proxy\": \"1.16.2\",",
                "+        \"is-glob\": \"3.1.0\",",
                "+        \"lodash\": \"4.17.4\",",
                "+        \"micromatch\": \"2.3.11\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"is-extglob\": {",
                "+          \"version\": \"2.1.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz\",",
                "+          \"integrity\": \"sha1-qIwCU1eR8C7TfHahueqXc8gz+MI=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"is-glob\": {",
                "+          \"version\": \"3.1.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/is-glob/-/is-glob-3.1.0.tgz\",",
                "+          \"integrity\": \"sha1-e6WuJCF4BKxwcHuWkiVnSGzD6Eo=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"is-extglob\": \"2.1.1\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"http-signature\": {",
                "+      \"version\": \"1.2.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/http-signature/-/http-signature-1.2.0.tgz\",",
                "+      \"integrity\": \"sha1-muzZJRFHcvPZW2WmCruPfBj7rOE=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"assert-plus\": \"1.0.0\",",
                "+        \"jsprim\": \"1.4.1\",",
                "+        \"sshpk\": \"1.13.1\"",
                "+      }",
                "+    },",
                "+    \"https-browserify\": {",
                "+      \"version\": \"0.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/https-browserify/-/https-browserify-0.0.1.tgz\",",
                "+      \"integrity\": \"sha1-P5E2XKvmC3ftDruiS0VOPgnZWoI=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"https-proxy-agent\": {",
                "+      \"version\": \"1.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-1.0.0.tgz\",",
                "+      \"integrity\": \"sha1-NffabEjOTdv6JkiRrFk+5f+GceY=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"agent-base\": \"2.1.1\",",
                "+        \"debug\": \"2.6.9\",",
                "+        \"extend\": \"3.0.1\"",
                "+      }",
                "+    },",
                "+    \"iconv-lite\": {",
                "+      \"version\": \"0.4.19\",",
                "+      \"resolved\": \"https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.19.tgz\",",
                "+      \"integrity\": \"sha512-oTZqweIP51xaGPI4uPa56/Pri/480R+mo7SeU+YETByQNhDG55ycFyNLIgta9vXhILrxXDmF7ZGhqZIcuN0gJQ==\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"icss-replace-symbols\": {",
                "+      \"version\": \"1.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/icss-replace-symbols/-/icss-replace-symbols-1.1.0.tgz\",",
                "+      \"integrity\": \"sha1-Bupvg2ead0njhs/h/oEq5dsiPe0=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"ieee754\": {",
                "+      \"version\": \"1.1.8\",",
                "+      \"resolved\": \"https://registry.npmjs.org/ieee754/-/ieee754-1.1.8.tgz\",",
                "+      \"integrity\": \"sha1-vjPUCsEO8ZJnAfbwii2G+/0a0+Q=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"ignore\": {",
                "+      \"version\": \"3.3.7\",",
                "+      \"resolved\": \"https://registry.npmjs.org/ignore/-/ignore-3.3.7.tgz\",",
                "+      \"integrity\": \"sha512-YGG3ejvBNHRqu0559EOxxNFihD0AjpvHlC/pdGKd3X3ofe+CoJkYazwNJYTNebqpPKN+VVQbh4ZFn1DivMNuHA==\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"immediate\": {",
                "+      \"version\": \"3.0.6\",",
                "+      \"resolved\": \"https://registry.npmjs.org/immediate/-/immediate-3.0.6.tgz\",",
                "+      \"integrity\": \"sha1-nbHb0Pr43m++D13V5Wu2BigN5ps=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"imports-loader\": {",
                "+      \"version\": \"0.7.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/imports-loader/-/imports-loader-0.7.1.tgz\",",
                "+      \"integrity\": \"sha1-8gS180cCoywdt9SNidXoZ6BEElM=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"loader-utils\": \"1.1.0\",",
                "+        \"source-map\": \"0.5.7\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"loader-utils\": {",
                "+          \"version\": \"1.1.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/loader-utils/-/loader-utils-1.1.0.tgz\",",
                "+          \"integrity\": \"sha1-yYrvSIvM7aL/teLeZG1qdUQp9c0=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"big.js\": \"3.2.0\",",
                "+            \"emojis-list\": \"2.1.0\",",
                "+            \"json5\": \"0.5.1\"",
                "+          }",
                "+        },",
                "+        \"source-map\": {",
                "+          \"version\": \"0.5.7\",",
                "+          \"resolved\": \"https://registry.npmjs.org/source-map/-/source-map-0.5.7.tgz\",",
                "+          \"integrity\": \"sha1-igOdLRAh0i0eoUyA2OpGi6LvP8w=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"imurmurhash\": {",
                "+      \"version\": \"0.1.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz\",",
                "+      \"integrity\": \"sha1-khi5srkoojixPcT7a21XbyMUU+o=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"indent-string\": {",
                "+      \"version\": \"2.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/indent-string/-/indent-string-2.1.0.tgz\",",
                "+      \"integrity\": \"sha1-ji1INIdCEhtKghi3oTfppSBJ3IA=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"repeating\": \"2.0.1\"",
                "+      }",
                "+    },",
                "+    \"indexes-of\": {",
                "+      \"version\": \"1.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/indexes-of/-/indexes-of-1.0.1.tgz\",",
                "+      \"integrity\": \"sha1-8w9xbI4r00bHtn0985FVZqfAVgc=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"indexof\": {",
                "+      \"version\": \"0.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/indexof/-/indexof-0.0.1.tgz\",",
                "+      \"integrity\": \"sha1-gtwzbSMrkGIXnQWrMpOmYFn9Q10=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"inflight\": {",
                "+      \"version\": \"1.0.6\",",
                "+      \"resolved\": \"https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz\",",
                "+      \"integrity\": \"sha1-Sb1jMdfQLQwJvJEKEHW6gWW1bfk=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"once\": \"1.4.0\",",
                "+        \"wrappy\": \"1.0.2\"",
                "+      }",
                "+    },",
                "+    \"inherits\": {",
                "+      \"version\": \"2.0.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/inherits/-/inherits-2.0.3.tgz\",",
                "+      \"integrity\": \"sha1-Yzwsg+PaQqUC9SRmAiSA9CCCYd4=\"",
                "+    },",
                "+    \"ini\": {",
                "+      \"version\": \"1.3.5\",",
                "+      \"resolved\": \"https://registry.npmjs.org/ini/-/ini-1.3.5.tgz\",",
                "+      \"integrity\": \"sha512-RZY5huIKCMRWDUqZlEi72f/lmXKMvuszcMBduliQ3nnWbx9X/ZBQO7DijMEYS9EhHBb2qacRUMtC7svLwe0lcw==\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"inquirer\": {",
                "+      \"version\": \"0.12.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/inquirer/-/inquirer-0.12.0.tgz\",",
                "+      \"integrity\": \"sha1-HvK/1jUE3wvHV4X/+MLEHfEvB34=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"ansi-escapes\": \"1.4.0\",",
                "+        \"ansi-regex\": \"2.1.1\",",
                "+        \"chalk\": \"1.1.3\",",
                "+        \"cli-cursor\": \"1.0.2\",",
                "+        \"cli-width\": \"2.2.0\",",
                "+        \"figures\": \"1.7.0\",",
                "+        \"lodash\": \"4.17.4\",",
                "+        \"readline2\": \"1.0.1\",",
                "+        \"run-async\": \"0.1.0\",",
                "+        \"rx-lite\": \"3.1.2\",",
                "+        \"string-width\": \"1.0.2\",",
                "+        \"strip-ansi\": \"3.0.1\",",
                "+        \"through\": \"2.3.8\"",
                "+      }",
                "+    },",
                "+    \"interpret\": {",
                "+      \"version\": \"1.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/interpret/-/interpret-1.1.0.tgz\",",
                "+      \"integrity\": \"sha1-ftGxQQxqDg94z5XTuEQMY/eLhhQ=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"invariant\": {",
                "+      \"version\": \"2.2.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/invariant/-/invariant-2.2.2.tgz\",",
                "+      \"integrity\": \"sha1-nh9WrArNtr8wMwbzOL47IErmA2A=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"loose-envify\": \"1.3.1\"",
                "+      }",
                "+    },",
                "+    \"ipaddr.js\": {",
                "+      \"version\": \"1.5.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.5.2.tgz\",",
                "+      \"integrity\": \"sha1-1LUFvemUaYfM8PxY2QEP+WB+P6A=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"is-absolute-url\": {",
                "+      \"version\": \"2.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/is-absolute-url/-/is-absolute-url-2.1.0.tgz\",",
                "+      \"integrity\": \"sha1-UFMN+4T8yap9vnhS6Do3uTufKqY=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"is-arrayish\": {",
                "+      \"version\": \"0.2.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz\",",
                "+      \"integrity\": \"sha1-d8mYQFJ6qOyxqLppe4BkWnqSap0=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"is-binary-path\": {",
                "+      \"version\": \"1.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/is-binary-path/-/is-binary-path-1.0.1.tgz\",",
                "+      \"integrity\": \"sha1-dfFmQrSA8YenEcgUFh/TpKdlWJg=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"binary-extensions\": \"1.11.0\"",
                "+      }",
                "+    },",
                "+    \"is-buffer\": {",
                "+      \"version\": \"1.1.6\",",
                "+      \"resolved\": \"https://registry.npmjs.org/is-buffer/-/is-buffer-1.1.6.tgz\",",
                "+      \"integrity\": \"sha512-NcdALwpXkTm5Zvvbk7owOUSvVvBKDgKP5/ewfXEznmQFfs4ZRmanOeKBTjRVjka3QFoN6XJ+9F3USqfHqTaU5w==\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"is-builtin-module\": {",
                "+      \"version\": \"1.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/is-builtin-module/-/is-builtin-module-1.0.0.tgz\",",
                "+      \"integrity\": \"sha1-VAVy0096wxGfj3bDDLwbHgN6/74=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"builtin-modules\": \"1.1.1\"",
                "+      }",
                "+    },",
                "+    \"is-callable\": {",
                "+      \"version\": \"1.1.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/is-callable/-/is-callable-1.1.3.tgz\",",
                "+      \"integrity\": \"sha1-hut1OSgF3cM69xySoO7fdO52BLI=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"is-date-object\": {",
                "+      \"version\": \"1.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/is-date-object/-/is-date-object-1.0.1.tgz\",",
                "+      \"integrity\": \"sha1-mqIOtq7rv/d/vTPnTKAbM1gdOhY=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"is-directory\": {",
                "+      \"version\": \"0.3.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/is-directory/-/is-directory-0.3.1.tgz\",",
                "+      \"integrity\": \"sha1-YTObbyR1/Hcv2cnYP1yFddwVSuE=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"is-dotfile\": {",
                "+      \"version\": \"1.0.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/is-dotfile/-/is-dotfile-1.0.3.tgz\",",
                "+      \"integrity\": \"sha1-pqLzL/0t+wT1yiXs0Pa4PPeYoeE=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"is-equal-shallow\": {",
                "+      \"version\": \"0.1.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/is-equal-shallow/-/is-equal-shallow-0.1.3.tgz\",",
                "+      \"integrity\": \"sha1-IjgJj8Ih3gvPpdnqxMRdY4qhxTQ=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"is-primitive\": \"2.0.0\"",
                "+      }",
                "+    },",
                "+    \"is-extendable\": {",
                "+      \"version\": \"0.1.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/is-extendable/-/is-extendable-0.1.1.tgz\",",
                "+      \"integrity\": \"sha1-YrEQ4omkcUGOPsNqYX1HLjAd/Ik=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"is-extglob\": {",
                "+      \"version\": \"1.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/is-extglob/-/is-extglob-1.0.0.tgz\",",
                "+      \"integrity\": \"sha1-rEaBd8SUNAWgkvyPKXYMb/xiBsA=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"is-finite\": {",
                "+      \"version\": \"1.0.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/is-finite/-/is-finite-1.0.2.tgz\",",
                "+      \"integrity\": \"sha1-zGZ3aVYCvlUO8R6LSqYwU0K20Ko=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"number-is-nan\": \"1.0.1\"",
                "+      }",
                "+    },",
                "+    \"is-fullwidth-code-point\": {",
                "+      \"version\": \"1.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-1.0.0.tgz\",",
                "+      \"integrity\": \"sha1-754xOG8DGn8NZDr4L95QxFfvAMs=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"number-is-nan\": \"1.0.1\"",
                "+      }",
                "+    },",
                "+    \"is-glob\": {",
                "+      \"version\": \"2.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/is-glob/-/is-glob-2.0.1.tgz\",",
                "+      \"integrity\": \"sha1-0Jb5JqPe1WAPP9/ZEZjLCIjC2GM=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"is-extglob\": \"1.0.0\"",
                "+      }",
                "+    },",
                "+    \"is-lower-case\": {",
                "+      \"version\": \"1.1.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/is-lower-case/-/is-lower-case-1.1.3.tgz\",",
                "+      \"integrity\": \"sha1-fhR75HaNxGbbO/shzGCzHmrWk5M=\",",
                "+      \"requires\": {",
                "+        \"lower-case\": \"1.1.4\"",
                "+      }",
                "+    },",
                "+    \"is-my-json-valid\": {",
                "+      \"version\": \"2.16.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/is-my-json-valid/-/is-my-json-valid-2.16.1.tgz\",",
                "+      \"integrity\": \"sha512-ochPsqWS1WXj8ZnMIV0vnNXooaMhp7cyL4FMSIPKTtnV0Ha/T19G2b9kkhcNsabV9bxYkze7/aLZJb/bYuFduQ==\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"generate-function\": \"2.0.0\",",
                "+        \"generate-object-property\": \"1.2.0\",",
                "+        \"jsonpointer\": \"4.0.1\",",
                "+        \"xtend\": \"4.0.1\"",
                "+      }",
                "+    },",
                "+    \"is-number\": {",
                "+      \"version\": \"2.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/is-number/-/is-number-2.1.0.tgz\",",
                "+      \"integrity\": \"sha1-Afy7s5NGOlSPL0ZszhbezknbkI8=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"kind-of\": \"3.2.2\"",
                "+      }",
                "+    },",
                "+    \"is-path-cwd\": {",
                "+      \"version\": \"1.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/is-path-cwd/-/is-path-cwd-1.0.0.tgz\",",
                "+      \"integrity\": \"sha1-0iXsIxMuie3Tj9p2dHLmLmXxEG0=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"is-path-in-cwd\": {",
                "+      \"version\": \"1.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/is-path-in-cwd/-/is-path-in-cwd-1.0.0.tgz\",",
                "+      \"integrity\": \"sha1-ZHdYK4IU1gI0YJRWcAO+ip6sBNw=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"is-path-inside\": \"1.0.1\"",
                "+      }",
                "+    },",
                "+    \"is-path-inside\": {",
                "+      \"version\": \"1.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/is-path-inside/-/is-path-inside-1.0.1.tgz\",",
                "+      \"integrity\": \"sha1-jvW33lBDej/cprToZe96pVy0gDY=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"path-is-inside\": \"1.0.2\"",
                "+      }",
                "+    },",
                "+    \"is-plain-obj\": {",
                "+      \"version\": \"1.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/is-plain-obj/-/is-plain-obj-1.1.0.tgz\",",
                "+      \"integrity\": \"sha1-caUMhCnfync8kqOQpKA7OfzVHT4=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"is-posix-bracket\": {",
                "+      \"version\": \"0.1.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/is-posix-bracket/-/is-posix-bracket-0.1.1.tgz\",",
                "+      \"integrity\": \"sha1-MzTceXdDaOkvAW5vvAqI9c1ua8Q=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"is-primitive\": {",
                "+      \"version\": \"2.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/is-primitive/-/is-primitive-2.0.0.tgz\",",
                "+      \"integrity\": \"sha1-IHurkWOEmcB7Kt8kCkGochADRXU=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"is-property\": {",
                "+      \"version\": \"1.0.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/is-property/-/is-property-1.0.2.tgz\",",
                "+      \"integrity\": \"sha1-V/4cTkhHTt1lsJkR8msc1Ald2oQ=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"is-regex\": {",
                "+      \"version\": \"1.0.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/is-regex/-/is-regex-1.0.4.tgz\",",
                "+      \"integrity\": \"sha1-VRdIm1RwkbCTDglWVM7SXul+lJE=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"has\": \"1.0.1\"",
                "+      }",
                "+    },",
                "+    \"is-resolvable\": {",
                "+      \"version\": \"1.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/is-resolvable/-/is-resolvable-1.0.0.tgz\",",
                "+      \"integrity\": \"sha1-jfV8YeouPFAUCNEA+wE8+NbgzGI=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"tryit\": \"1.0.3\"",
                "+      }",
                "+    },",
                "+    \"is-stream\": {",
                "+      \"version\": \"1.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/is-stream/-/is-stream-1.1.0.tgz\",",
                "+      \"integrity\": \"sha1-EtSj3U5o4Lec6428hBc66A2RykQ=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"is-svg\": {",
                "+      \"version\": \"2.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/is-svg/-/is-svg-2.1.0.tgz\",",
                "+      \"integrity\": \"sha1-z2EJDaDZ77yrhyLeum8DIgjbsOk=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"html-comment-regex\": \"1.1.1\"",
                "+      }",
                "+    },",
                "+    \"is-symbol\": {",
                "+      \"version\": \"1.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/is-symbol/-/is-symbol-1.0.1.tgz\",",
                "+      \"integrity\": \"sha1-PMWfAAJRlLarLjjbrmaJJWtmBXI=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"is-typedarray\": {",
                "+      \"version\": \"1.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/is-typedarray/-/is-typedarray-1.0.0.tgz\",",
                "+      \"integrity\": \"sha1-5HnICFjfDBsR3dppQPlgEfzaSpo=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"is-upper-case\": {",
                "+      \"version\": \"1.1.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/is-upper-case/-/is-upper-case-1.1.2.tgz\",",
                "+      \"integrity\": \"sha1-jQsfp+eTOh5YSDYA7H2WYcuvdW8=\",",
                "+      \"requires\": {",
                "+        \"upper-case\": \"1.1.3\"",
                "+      }",
                "+    },",
                "+    \"is-utf8\": {",
                "+      \"version\": \"0.2.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/is-utf8/-/is-utf8-0.2.1.tgz\",",
                "+      \"integrity\": \"sha1-Sw2hRCEE0bM2NA6AeX6GXPOffXI=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"isarray\": {",
                "+      \"version\": \"0.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/isarray/-/isarray-0.0.1.tgz\",",
                "+      \"integrity\": \"sha1-ihis/Kmo9Bd+Cav8YDiTmwXR7t8=\"",
                "+    },",
                "+    \"isbinaryfile\": {",
                "+      \"version\": \"3.0.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/isbinaryfile/-/isbinaryfile-3.0.2.tgz\",",
                "+      \"integrity\": \"sha1-Sj6XTsDLqQBNP8bN5yCeppNopiE=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"isexe\": {",
                "+      \"version\": \"2.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz\",",
                "+      \"integrity\": \"sha1-6PvzdNxVb/iUehDcsFctYz8s+hA=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"isobject\": {",
                "+      \"version\": \"2.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/isobject/-/isobject-2.1.0.tgz\",",
                "+      \"integrity\": \"sha1-8GVWEJaj8dou9GJy+BXIQNh+DIk=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"isarray\": \"1.0.0\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"isarray\": {",
                "+          \"version\": \"1.0.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz\",",
                "+          \"integrity\": \"sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"isstream\": {",
                "+      \"version\": \"0.1.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/isstream/-/isstream-0.1.2.tgz\",",
                "+      \"integrity\": \"sha1-R+Y/evVa+m+S4VAOaQ64uFKcCZo=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"istanbul\": {",
                "+      \"version\": \"0.4.5\",",
                "+      \"resolved\": \"https://registry.npmjs.org/istanbul/-/istanbul-0.4.5.tgz\",",
                "+      \"integrity\": \"sha1-ZcfXPUxNqE1POsMQuRj7C4Azczs=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"abbrev\": \"1.0.9\",",
                "+        \"async\": \"1.5.2\",",
                "+        \"escodegen\": \"1.8.1\",",
                "+        \"esprima\": \"2.7.3\",",
                "+        \"glob\": \"5.0.15\",",
                "+        \"handlebars\": \"4.0.11\",",
                "+        \"js-yaml\": \"3.7.0\",",
                "+        \"mkdirp\": \"0.5.1\",",
                "+        \"nopt\": \"3.0.6\",",
                "+        \"once\": \"1.4.0\",",
                "+        \"resolve\": \"1.1.7\",",
                "+        \"supports-color\": \"3.2.3\",",
                "+        \"which\": \"1.3.0\",",
                "+        \"wordwrap\": \"1.0.0\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"abbrev\": {",
                "+          \"version\": \"1.0.9\",",
                "+          \"resolved\": \"https://registry.npmjs.org/abbrev/-/abbrev-1.0.9.tgz\",",
                "+          \"integrity\": \"sha1-kbR5JYinc4wl813W9jdSovh3YTU=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"async\": {",
                "+          \"version\": \"1.5.2\",",
                "+          \"resolved\": \"https://registry.npmjs.org/async/-/async-1.5.2.tgz\",",
                "+          \"integrity\": \"sha1-7GphrlZIDAw8skHJVhjiCJL5Zyo=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"glob\": {",
                "+          \"version\": \"5.0.15\",",
                "+          \"resolved\": \"https://registry.npmjs.org/glob/-/glob-5.0.15.tgz\",",
                "+          \"integrity\": \"sha1-G8k2ueAvSmA/zCIuz3Yz0wuLk7E=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"inflight\": \"1.0.6\",",
                "+            \"inherits\": \"2.0.3\",",
                "+            \"minimatch\": \"3.0.4\",",
                "+            \"once\": \"1.4.0\",",
                "+            \"path-is-absolute\": \"1.0.1\"",
                "+          }",
                "+        },",
                "+        \"minimatch\": {",
                "+          \"version\": \"3.0.4\",",
                "+          \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-3.0.4.tgz\",",
                "+          \"integrity\": \"sha512-yJHVQEhyqPLUTgt9B83PXu6W3rx4MvvHvSUvToogpwoGDOUQ+yDrR0HRot+yOCdCO7u4hX3pWft6kWBBcqh0UA==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"brace-expansion\": \"1.1.8\"",
                "+          }",
                "+        },",
                "+        \"nopt\": {",
                "+          \"version\": \"3.0.6\",",
                "+          \"resolved\": \"https://registry.npmjs.org/nopt/-/nopt-3.0.6.tgz\",",
                "+          \"integrity\": \"sha1-xkZdvwirzU2zWTF/eaxopkayj/k=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"abbrev\": \"1.0.9\"",
                "+          }",
                "+        },",
                "+        \"resolve\": {",
                "+          \"version\": \"1.1.7\",",
                "+          \"resolved\": \"https://registry.npmjs.org/resolve/-/resolve-1.1.7.tgz\",",
                "+          \"integrity\": \"sha1-IDEU2CrSxe2ejgQRs5ModeiJ6Xs=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"which\": {",
                "+          \"version\": \"1.3.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/which/-/which-1.3.0.tgz\",",
                "+          \"integrity\": \"sha512-xcJpopdamTuY5duC/KnTTNBraPK54YwpenP4lzxU8H91GudWpFv38u0CKjclE1Wi2EH2EDz5LRcHcKbCIzqGyg==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"isexe\": \"2.0.0\"",
                "+          }",
                "+        },",
                "+        \"wordwrap\": {",
                "+          \"version\": \"1.0.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/wordwrap/-/wordwrap-1.0.0.tgz\",",
                "+          \"integrity\": \"sha1-J1hIEIkUVqQXHI0CJkQa3pDLyus=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"istanbul-instrumenter-loader\": {",
                "+      \"version\": \"0.2.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/istanbul-instrumenter-loader/-/istanbul-instrumenter-loader-0.2.0.tgz\",",
                "+      \"integrity\": \"sha1-ZD5OXk6PlGaGOimpd9KDqzcsAZw=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"istanbul\": \"0.4.5\",",
                "+        \"loader-utils\": \"0.2.17\",",
                "+        \"object-assign\": \"4.1.1\"",
                "+      }",
                "+    },",
                "+    \"jasmine\": {",
                "+      \"version\": \"2.8.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/jasmine/-/jasmine-2.8.0.tgz\",",
                "+      \"integrity\": \"sha1-awicChFXax8W3xG4AUbZHU6Lij4=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"exit\": \"0.1.2\",",
                "+        \"glob\": \"7.1.2\",",
                "+        \"jasmine-core\": \"2.8.0\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"glob\": {",
                "+          \"version\": \"7.1.2\",",
                "+          \"resolved\": \"https://registry.npmjs.org/glob/-/glob-7.1.2.tgz\",",
                "+          \"integrity\": \"sha512-MJTUg1kjuLeQCJ+ccE4Vpa6kKVXkPYJ2mOCQyUuKLcLQsdrMCpBPUi8qVE6+YuaJkozeA9NusTAw3hLr8Xe5EQ==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"fs.realpath\": \"1.0.0\",",
                "+            \"inflight\": \"1.0.6\",",
                "+            \"inherits\": \"2.0.3\",",
                "+            \"minimatch\": \"3.0.4\",",
                "+            \"once\": \"1.4.0\",",
                "+            \"path-is-absolute\": \"1.0.1\"",
                "+          }",
                "+        },",
                "+        \"minimatch\": {",
                "+          \"version\": \"3.0.4\",",
                "+          \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-3.0.4.tgz\",",
                "+          \"integrity\": \"sha512-yJHVQEhyqPLUTgt9B83PXu6W3rx4MvvHvSUvToogpwoGDOUQ+yDrR0HRot+yOCdCO7u4hX3pWft6kWBBcqh0UA==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"brace-expansion\": \"1.1.8\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"jasmine-core\": {",
                "+      \"version\": \"2.8.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/jasmine-core/-/jasmine-core-2.8.0.tgz\",",
                "+      \"integrity\": \"sha1-vMl5rh+f0FcB5F5S5l06XWPxok4=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"jasmine-spec-reporter\": {",
                "+      \"version\": \"4.2.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/jasmine-spec-reporter/-/jasmine-spec-reporter-4.2.1.tgz\",",
                "+      \"integrity\": \"sha512-FZBoZu7VE5nR7Nilzy+Np8KuVIOxF4oXDPDknehCYBDE080EnlPu0afdZNmpGDBRCUBv3mj5qgqCRmk6W/K8vg==\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"colors\": \"1.1.2\"",
                "+      }",
                "+    },",
                "+    \"jasminewd2\": {",
                "+      \"version\": \"2.2.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/jasminewd2/-/jasminewd2-2.2.0.tgz\",",
                "+      \"integrity\": \"sha1-43zwsX8ZnM4jvqcbIDk5Uka07E4=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"js-base64\": {",
                "+      \"version\": \"2.4.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/js-base64/-/js-base64-2.4.0.tgz\",",
                "+      \"integrity\": \"sha512-Wehd+7Pf9tFvGb+ydPm9TjYjV8X1YHOVyG8QyELZxEMqOhemVwGRmoG8iQ/soqI3n8v4xn59zaLxiCJiaaRzKA==\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"js-tokens\": {",
                "+      \"version\": \"3.0.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/js-tokens/-/js-tokens-3.0.2.tgz\",",
                "+      \"integrity\": \"sha1-mGbfOVECEw449/mWvOtlRDIJwls=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"js-yaml\": {",
                "+      \"version\": \"3.7.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/js-yaml/-/js-yaml-3.7.0.tgz\",",
                "+      \"integrity\": \"sha1-XJZ93YN6m/3KXy3oQlOr6KHAO4A=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"argparse\": \"1.0.9\",",
                "+        \"esprima\": \"2.7.3\"",
                "+      }",
                "+    },",
                "+    \"jsbn\": {",
                "+      \"version\": \"0.1.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/jsbn/-/jsbn-0.1.1.tgz\",",
                "+      \"integrity\": \"sha1-peZUwuWi3rXyAdls77yoDA7y9RM=\",",
                "+      \"dev\": true,",
                "+      \"optional\": true",
                "+    },",
                "+    \"jsesc\": {",
                "+      \"version\": \"1.3.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/jsesc/-/jsesc-1.3.0.tgz\",",
                "+      \"integrity\": \"sha1-RsP+yMGJKxKwgz25vHYiF226s0s=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"jshint\": {",
                "+      \"version\": \"2.8.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/jshint/-/jshint-2.8.0.tgz\",",
                "+      \"integrity\": \"sha1-HQmjvZE8TK36gb8Y1YK9hb/+DUQ=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"cli\": \"0.6.6\",",
                "+        \"console-browserify\": \"1.1.0\",",
                "+        \"exit\": \"0.1.2\",",
                "+        \"htmlparser2\": \"3.8.3\",",
                "+        \"lodash\": \"3.7.0\",",
                "+        \"minimatch\": \"2.0.10\",",
                "+        \"shelljs\": \"0.3.0\",",
                "+        \"strip-json-comments\": \"1.0.4\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"domhandler\": {",
                "+          \"version\": \"2.3.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/domhandler/-/domhandler-2.3.0.tgz\",",
                "+          \"integrity\": \"sha1-LeWaCCLVAn+r/28DLCsloqir5zg=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"domelementtype\": \"1.3.0\"",
                "+          }",
                "+        },",
                "+        \"domutils\": {",
                "+          \"version\": \"1.5.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/domutils/-/domutils-1.5.1.tgz\",",
                "+          \"integrity\": \"sha1-3NhIiib1Y9YQeeSMn3t+Mjc2gs8=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"dom-serializer\": \"0.1.0\",",
                "+            \"domelementtype\": \"1.3.0\"",
                "+          }",
                "+        },",
                "+        \"entities\": {",
                "+          \"version\": \"1.0.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/entities/-/entities-1.0.0.tgz\",",
                "+          \"integrity\": \"sha1-sph6o4ITR/zeZCsk/fyeT7cSvyY=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"htmlparser2\": {",
                "+          \"version\": \"3.8.3\",",
                "+          \"resolved\": \"https://registry.npmjs.org/htmlparser2/-/htmlparser2-3.8.3.tgz\",",
                "+          \"integrity\": \"sha1-mWwosZFRaovoZQGn15dX5ccMEGg=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"domelementtype\": \"1.3.0\",",
                "+            \"domhandler\": \"2.3.0\",",
                "+            \"domutils\": \"1.5.1\",",
                "+            \"entities\": \"1.0.0\",",
                "+            \"readable-stream\": \"1.1.14\"",
                "+          }",
                "+        },",
                "+        \"lodash\": {",
                "+          \"version\": \"3.7.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/lodash/-/lodash-3.7.0.tgz\",",
                "+          \"integrity\": \"sha1-Nni9irmVBXwHreg27S7wh9qBHUU=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"minimatch\": {",
                "+          \"version\": \"2.0.10\",",
                "+          \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-2.0.10.tgz\",",
                "+          \"integrity\": \"sha1-jQh8OcazjAAbl/ynzm0OHoCvusc=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"brace-expansion\": \"1.1.8\"",
                "+          }",
                "+        },",
                "+        \"readable-stream\": {",
                "+          \"version\": \"1.1.14\",",
                "+          \"resolved\": \"https://registry.npmjs.org/readable-stream/-/readable-stream-1.1.14.tgz\",",
                "+          \"integrity\": \"sha1-fPTFTvZI44EwhMY23SB54WbAgdk=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"core-util-is\": \"1.0.2\",",
                "+            \"inherits\": \"2.0.3\",",
                "+            \"isarray\": \"0.0.1\",",
                "+            \"string_decoder\": \"0.10.31\"",
                "+          }",
                "+        },",
                "+        \"shelljs\": {",
                "+          \"version\": \"0.3.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/shelljs/-/shelljs-0.3.0.tgz\",",
                "+          \"integrity\": \"sha1-NZbmMHp4FUT1kfN9phg2DzHbV7E=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"strip-json-comments\": {",
                "+          \"version\": \"1.0.4\",",
                "+          \"resolved\": \"https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-1.0.4.tgz\",",
                "+          \"integrity\": \"sha1-HhX7ysl9Pumb8tc7TGVrCCu6+5E=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"json-schema\": {",
                "+      \"version\": \"0.2.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/json-schema/-/json-schema-0.2.3.tgz\",",
                "+      \"integrity\": \"sha1-tIDIkuWaLwWVTOcnvT8qTogvnhM=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"json-schema-traverse\": {",
                "+      \"version\": \"0.3.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.3.1.tgz\",",
                "+      \"integrity\": \"sha1-NJptRMU6Ud6JtAgFxdXlm0F9M0A=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"json-stable-stringify\": {",
                "+      \"version\": \"1.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/json-stable-stringify/-/json-stable-stringify-1.0.1.tgz\",",
                "+      \"integrity\": \"sha1-mnWdOcXy/1A/1TAGRu1EX4jE+a8=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"jsonify\": \"0.0.0\"",
                "+      }",
                "+    },",
                "+    \"json-stringify-safe\": {",
                "+      \"version\": \"5.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.1.tgz\",",
                "+      \"integrity\": \"sha1-Epai1Y/UXxmg9s4B1lcB4sc1tus=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"json3\": {",
                "+      \"version\": \"3.2.6\",",
                "+      \"resolved\": \"https://registry.npmjs.org/json3/-/json3-3.2.6.tgz\",",
                "+      \"integrity\": \"sha1-9u/JPAagTemuxTBT3yVZuxniA4s=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"json5\": {",
                "+      \"version\": \"0.5.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/json5/-/json5-0.5.1.tgz\",",
                "+      \"integrity\": \"sha1-Hq3nrMASA0rYTiOWdn6tn6VJWCE=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"jsonfile\": {",
                "+      \"version\": \"2.4.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/jsonfile/-/jsonfile-2.4.0.tgz\",",
                "+      \"integrity\": \"sha1-NzaitCi4e72gzIO1P6PWM6NcKug=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"graceful-fs\": \"4.1.11\"",
                "+      }",
                "+    },",
                "+    \"jsonify\": {",
                "+      \"version\": \"0.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/jsonify/-/jsonify-0.0.0.tgz\",",
                "+      \"integrity\": \"sha1-LHS27kHZPKUbe1qu6PUDYx0lKnM=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"jsonpointer\": {",
                "+      \"version\": \"4.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/jsonpointer/-/jsonpointer-4.0.1.tgz\",",
                "+      \"integrity\": \"sha1-T9kss04OnbPInIYi7PUfm5eMbLk=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"jsprim\": {",
                "+      \"version\": \"1.4.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/jsprim/-/jsprim-1.4.1.tgz\",",
                "+      \"integrity\": \"sha1-MT5mvB5cwG5Di8G3SZwuXFastqI=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"assert-plus\": \"1.0.0\",",
                "+        \"extsprintf\": \"1.3.0\",",
                "+        \"json-schema\": \"0.2.3\",",
                "+        \"verror\": \"1.10.0\"",
                "+      }",
                "+    },",
                "+    \"jszip\": {",
                "+      \"version\": \"3.1.5\",",
                "+      \"resolved\": \"https://registry.npmjs.org/jszip/-/jszip-3.1.5.tgz\",",
                "+      \"integrity\": \"sha512-5W8NUaFRFRqTOL7ZDDrx5qWHJyBXy6velVudIzQUSoqAAYqzSh2Z7/m0Rf1QbmQJccegD0r+YZxBjzqoBiEeJQ==\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"core-js\": \"2.3.0\",",
                "+        \"es6-promise\": \"3.0.2\",",
                "+        \"lie\": \"3.1.1\",",
                "+        \"pako\": \"1.0.6\",",
                "+        \"readable-stream\": \"2.0.6\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"core-js\": {",
                "+          \"version\": \"2.3.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/core-js/-/core-js-2.3.0.tgz\",",
                "+          \"integrity\": \"sha1-+rg/uwstjchfpjbEudNMdUIMbWU=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"es6-promise\": {",
                "+          \"version\": \"3.0.2\",",
                "+          \"resolved\": \"https://registry.npmjs.org/es6-promise/-/es6-promise-3.0.2.tgz\",",
                "+          \"integrity\": \"sha1-AQ1YWEI6XxGJeWZfRkhqlcbuK7Y=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"isarray\": {",
                "+          \"version\": \"1.0.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz\",",
                "+          \"integrity\": \"sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"readable-stream\": {",
                "+          \"version\": \"2.0.6\",",
                "+          \"resolved\": \"https://registry.npmjs.org/readable-stream/-/readable-stream-2.0.6.tgz\",",
                "+          \"integrity\": \"sha1-j5A0HmilPMySh4jaz80Rs265t44=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"core-util-is\": \"1.0.2\",",
                "+            \"inherits\": \"2.0.3\",",
                "+            \"isarray\": \"1.0.0\",",
                "+            \"process-nextick-args\": \"1.0.7\",",
                "+            \"string_decoder\": \"0.10.31\",",
                "+            \"util-deprecate\": \"1.0.2\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"karma\": {",
                "+      \"version\": \"1.3.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/karma/-/karma-1.3.0.tgz\",",
                "+      \"integrity\": \"sha1-srlOj0mfrdAGnVT5rvSk1I7FzB8=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"bluebird\": \"3.5.1\",",
                "+        \"body-parser\": \"1.18.2\",",
                "+        \"chokidar\": \"1.7.0\",",
                "+        \"colors\": \"1.1.2\",",
                "+        \"combine-lists\": \"1.0.1\",",
                "+        \"connect\": \"3.6.5\",",
                "+        \"core-js\": \"2.5.2\",",
                "+        \"di\": \"0.0.1\",",
                "+        \"dom-serialize\": \"2.2.1\",",
                "+        \"expand-braces\": \"0.1.2\",",
                "+        \"glob\": \"7.1.2\",",
                "+        \"graceful-fs\": \"4.1.11\",",
                "+        \"http-proxy\": \"1.16.2\",",
                "+        \"isbinaryfile\": \"3.0.2\",",
                "+        \"lodash\": \"3.10.1\",",
                "+        \"log4js\": \"0.6.38\",",
                "+        \"mime\": \"1.4.1\",",
                "+        \"minimatch\": \"3.0.4\",",
                "+        \"optimist\": \"0.6.1\",",
                "+        \"qjobs\": \"1.1.5\",",
                "+        \"range-parser\": \"1.2.0\",",
                "+        \"rimraf\": \"2.6.2\",",
                "+        \"socket.io\": \"1.4.7\",",
                "+        \"source-map\": \"0.5.7\",",
                "+        \"tmp\": \"0.0.28\",",
                "+        \"useragent\": \"2.2.1\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"glob\": {",
                "+          \"version\": \"7.1.2\",",
                "+          \"resolved\": \"https://registry.npmjs.org/glob/-/glob-7.1.2.tgz\",",
                "+          \"integrity\": \"sha512-MJTUg1kjuLeQCJ+ccE4Vpa6kKVXkPYJ2mOCQyUuKLcLQsdrMCpBPUi8qVE6+YuaJkozeA9NusTAw3hLr8Xe5EQ==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"fs.realpath\": \"1.0.0\",",
                "+            \"inflight\": \"1.0.6\",",
                "+            \"inherits\": \"2.0.3\",",
                "+            \"minimatch\": \"3.0.4\",",
                "+            \"once\": \"1.4.0\",",
                "+            \"path-is-absolute\": \"1.0.1\"",
                "+          }",
                "+        },",
                "+        \"lodash\": {",
                "+          \"version\": \"3.10.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/lodash/-/lodash-3.10.1.tgz\",",
                "+          \"integrity\": \"sha1-W/Rejkm6QYnhfUgnid/RW9FAt7Y=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"minimatch\": {",
                "+          \"version\": \"3.0.4\",",
                "+          \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-3.0.4.tgz\",",
                "+          \"integrity\": \"sha512-yJHVQEhyqPLUTgt9B83PXu6W3rx4MvvHvSUvToogpwoGDOUQ+yDrR0HRot+yOCdCO7u4hX3pWft6kWBBcqh0UA==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"brace-expansion\": \"1.1.8\"",
                "+          }",
                "+        },",
                "+        \"source-map\": {",
                "+          \"version\": \"0.5.7\",",
                "+          \"resolved\": \"https://registry.npmjs.org/source-map/-/source-map-0.5.7.tgz\",",
                "+          \"integrity\": \"sha1-igOdLRAh0i0eoUyA2OpGi6LvP8w=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"karma-coverage\": {",
                "+      \"version\": \"1.1.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/karma-coverage/-/karma-coverage-1.1.1.tgz\",",
                "+      \"integrity\": \"sha1-Wv+LOc9plNwi3kyENix2ABtjfPY=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"dateformat\": \"1.0.12\",",
                "+        \"istanbul\": \"0.4.5\",",
                "+        \"lodash\": \"3.10.1\",",
                "+        \"minimatch\": \"3.0.4\",",
                "+        \"source-map\": \"0.5.7\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"dateformat\": {",
                "+          \"version\": \"1.0.12\",",
                "+          \"resolved\": \"https://registry.npmjs.org/dateformat/-/dateformat-1.0.12.tgz\",",
                "+          \"integrity\": \"sha1-nxJLZ1lMk3/3BpMuSmQsyo27/uk=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"get-stdin\": \"4.0.1\",",
                "+            \"meow\": \"3.7.0\"",
                "+          }",
                "+        },",
                "+        \"lodash\": {",
                "+          \"version\": \"3.10.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/lodash/-/lodash-3.10.1.tgz\",",
                "+          \"integrity\": \"sha1-W/Rejkm6QYnhfUgnid/RW9FAt7Y=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"minimatch\": {",
                "+          \"version\": \"3.0.4\",",
                "+          \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-3.0.4.tgz\",",
                "+          \"integrity\": \"sha512-yJHVQEhyqPLUTgt9B83PXu6W3rx4MvvHvSUvToogpwoGDOUQ+yDrR0HRot+yOCdCO7u4hX3pWft6kWBBcqh0UA==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"brace-expansion\": \"1.1.8\"",
                "+          }",
                "+        },",
                "+        \"source-map\": {",
                "+          \"version\": \"0.5.7\",",
                "+          \"resolved\": \"https://registry.npmjs.org/source-map/-/source-map-0.5.7.tgz\",",
                "+          \"integrity\": \"sha1-igOdLRAh0i0eoUyA2OpGi6LvP8w=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"karma-jasmine\": {",
                "+      \"version\": \"1.0.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/karma-jasmine/-/karma-jasmine-1.0.2.tgz\",",
                "+      \"integrity\": \"sha1-wLOrMnvyB9tg4X+ifbN8/e9djmw=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"karma-phantomjs-launcher\": {",
                "+      \"version\": \"1.0.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/karma-phantomjs-launcher/-/karma-phantomjs-launcher-1.0.4.tgz\",",
                "+      \"integrity\": \"sha1-0jyjSAG9qYY60xjju0vUBisTrNI=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"lodash\": \"4.17.4\",",
                "+        \"phantomjs-prebuilt\": \"2.1.16\"",
                "+      }",
                "+    },",
                "+    \"karma-sourcemap-loader\": {",
                "+      \"version\": \"0.3.7\",",
                "+      \"resolved\": \"https://registry.npmjs.org/karma-sourcemap-loader/-/karma-sourcemap-loader-0.3.7.tgz\",",
                "+      \"integrity\": \"sha1-kTIsd/jxPUb+0GKwQuEAnUxFBdg=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"graceful-fs\": \"4.1.11\"",
                "+      }",
                "+    },",
                "+    \"karma-spec-reporter\": {",
                "+      \"version\": \"0.0.31\",",
                "+      \"resolved\": \"https://registry.npmjs.org/karma-spec-reporter/-/karma-spec-reporter-0.0.31.tgz\",",
                "+      \"integrity\": \"sha1-SDDccUihVcfXoYbmMjOaDYD63sM=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"colors\": \"1.1.2\"",
                "+      }",
                "+    },",
                "+    \"karma-webpack\": {",
                "+      \"version\": \"1.8.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/karma-webpack/-/karma-webpack-1.8.1.tgz\",",
                "+      \"integrity\": \"sha1-OdX9Lt7qPMPvW0BZibN9Ww5qO04=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"async\": \"0.9.2\",",
                "+        \"loader-utils\": \"0.2.17\",",
                "+        \"lodash\": \"3.10.1\",",
                "+        \"source-map\": \"0.1.43\",",
                "+        \"webpack-dev-middleware\": \"1.12.2\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"async\": {",
                "+          \"version\": \"0.9.2\",",
                "+          \"resolved\": \"https://registry.npmjs.org/async/-/async-0.9.2.tgz\",",
                "+          \"integrity\": \"sha1-rqdNXmHB+JlhO/ZL2mbUx48v0X0=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"lodash\": {",
                "+          \"version\": \"3.10.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/lodash/-/lodash-3.10.1.tgz\",",
                "+          \"integrity\": \"sha1-W/Rejkm6QYnhfUgnid/RW9FAt7Y=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"source-map\": {",
                "+          \"version\": \"0.1.43\",",
                "+          \"resolved\": \"https://registry.npmjs.org/source-map/-/source-map-0.1.43.tgz\",",
                "+          \"integrity\": \"sha1-wkvBRspRfBRx9drL4lcbK3+eM0Y=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"amdefine\": \"1.0.1\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"kew\": {",
                "+      \"version\": \"0.7.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/kew/-/kew-0.7.0.tgz\",",
                "+      \"integrity\": \"sha1-edk9LTM2PW/dKXCzNdkUGtWR15s=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"keypress\": {",
                "+      \"version\": \"0.2.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/keypress/-/keypress-0.2.1.tgz\",",
                "+      \"integrity\": \"sha1-HoBFQlABjbrUw/6USX1uZ7YmnHc=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"kind-of\": {",
                "+      \"version\": \"3.2.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/kind-of/-/kind-of-3.2.2.tgz\",",
                "+      \"integrity\": \"sha1-MeohpzS6ubuw8yRm2JOupR5KPGQ=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"is-buffer\": \"1.1.6\"",
                "+      }",
                "+    },",
                "+    \"klaw\": {",
                "+      \"version\": \"1.3.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/klaw/-/klaw-1.3.1.tgz\",",
                "+      \"integrity\": \"sha1-QIhDO0azsbolnXh4XY6W9zugJDk=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"graceful-fs\": \"4.1.11\"",
                "+      }",
                "+    },",
                "+    \"lazy-cache\": {",
                "+      \"version\": \"1.0.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/lazy-cache/-/lazy-cache-1.0.4.tgz\",",
                "+      \"integrity\": \"sha1-odePw6UEdMuAhF07O24dpJpEbo4=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"levn\": {",
                "+      \"version\": \"0.3.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/levn/-/levn-0.3.0.tgz\",",
                "+      \"integrity\": \"sha1-OwmSTt+fCDwEkP3UwLxEIeBHZO4=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"prelude-ls\": \"1.1.2\",",
                "+        \"type-check\": \"0.3.2\"",
                "+      }",
                "+    },",
                "+    \"lie\": {",
                "+      \"version\": \"3.1.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/lie/-/lie-3.1.1.tgz\",",
                "+      \"integrity\": \"sha1-mkNrLMd0bKWd56QfpGmz77dr2H4=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"immediate\": \"3.0.6\"",
                "+      }",
                "+    },",
                "+    \"load-grunt-tasks\": {",
                "+      \"version\": \"0.4.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/load-grunt-tasks/-/load-grunt-tasks-0.4.0.tgz\",",
                "+      \"integrity\": \"sha1-+CRmP/uiUbV079pak1r6zv4KlfQ=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"findup-sync\": \"0.1.3\",",
                "+        \"multimatch\": \"0.1.0\"",
                "+      }",
                "+    },",
                "+    \"load-json-file\": {",
                "+      \"version\": \"2.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/load-json-file/-/load-json-file-2.0.0.tgz\",",
                "+      \"integrity\": \"sha1-eUfkIUmvgNaWy/eXvKq8/h/inKg=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"graceful-fs\": \"4.1.11\",",
                "+        \"parse-json\": \"2.2.0\",",
                "+        \"pify\": \"2.3.0\",",
                "+        \"strip-bom\": \"3.0.0\"",
                "+      }",
                "+    },",
                "+    \"loader-utils\": {",
                "+      \"version\": \"0.2.17\",",
                "+      \"resolved\": \"https://registry.npmjs.org/loader-utils/-/loader-utils-0.2.17.tgz\",",
                "+      \"integrity\": \"sha1-+G5jdNQyBabmxg6RlvF8Apm/s0g=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"big.js\": \"3.2.0\",",
                "+        \"emojis-list\": \"2.1.0\",",
                "+        \"json5\": \"0.5.1\",",
                "+        \"object-assign\": \"4.1.1\"",
                "+      }",
                "+    },",
                "+    \"locate-path\": {",
                "+      \"version\": \"2.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/locate-path/-/locate-path-2.0.0.tgz\",",
                "+      \"integrity\": \"sha1-K1aLJl7slExtnA3pw9u7ygNUzY4=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"p-locate\": \"2.0.0\",",
                "+        \"path-exists\": \"3.0.0\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"path-exists\": {",
                "+          \"version\": \"3.0.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/path-exists/-/path-exists-3.0.0.tgz\",",
                "+          \"integrity\": \"sha1-zg6+ql94yxiSXqfYENe1mwEP1RU=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"lodash\": {",
                "+      \"version\": \"4.17.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/lodash/-/lodash-4.17.4.tgz\",",
                "+      \"integrity\": \"sha1-eCA6TRwyiuHYbcpkYONptX9AVa4=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"lodash._arraycopy\": {",
                "+      \"version\": \"3.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/lodash._arraycopy/-/lodash._arraycopy-3.0.0.tgz\",",
                "+      \"integrity\": \"sha1-due3wfH7klRzdIeKVi7Qaj5Q9uE=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"lodash._arrayeach\": {",
                "+      \"version\": \"3.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/lodash._arrayeach/-/lodash._arrayeach-3.0.0.tgz\",",
                "+      \"integrity\": \"sha1-urFWsqkNPxu9XGU0AzSeXlkz754=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"lodash._baseassign\": {",
                "+      \"version\": \"3.2.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/lodash._baseassign/-/lodash._baseassign-3.2.0.tgz\",",
                "+      \"integrity\": \"sha1-jDigmVAPIVrQnlnxci/QxSv+Ck4=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"lodash._basecopy\": \"3.0.1\",",
                "+        \"lodash.keys\": \"3.1.2\"",
                "+      }",
                "+    },",
                "+    \"lodash._baseclone\": {",
                "+      \"version\": \"3.3.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/lodash._baseclone/-/lodash._baseclone-3.3.0.tgz\",",
                "+      \"integrity\": \"sha1-MDUZv2OT/n5C802LYw73eU41Qrc=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"lodash._arraycopy\": \"3.0.0\",",
                "+        \"lodash._arrayeach\": \"3.0.0\",",
                "+        \"lodash._baseassign\": \"3.2.0\",",
                "+        \"lodash._basefor\": \"3.0.3\",",
                "+        \"lodash.isarray\": \"3.0.4\",",
                "+        \"lodash.keys\": \"3.1.2\"",
                "+      }",
                "+    },",
                "+    \"lodash._basecopy\": {",
                "+      \"version\": \"3.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/lodash._basecopy/-/lodash._basecopy-3.0.1.tgz\",",
                "+      \"integrity\": \"sha1-jaDmqHbPNEwK2KVIghEd08XHyjY=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"lodash._basefor\": {",
                "+      \"version\": \"3.0.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/lodash._basefor/-/lodash._basefor-3.0.3.tgz\",",
                "+      \"integrity\": \"sha1-dVC06SGO8J+tJDQ7YSAhx5tMIMI=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"lodash._bindcallback\": {",
                "+      \"version\": \"3.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/lodash._bindcallback/-/lodash._bindcallback-3.0.1.tgz\",",
                "+      \"integrity\": \"sha1-5THCdkTPi1epnhftlbNcdIeJOS4=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"lodash._getnative\": {",
                "+      \"version\": \"3.9.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/lodash._getnative/-/lodash._getnative-3.9.1.tgz\",",
                "+      \"integrity\": \"sha1-VwvH3t5G1hzc3mh9ZdPuy6o6r/U=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"lodash.camelcase\": {",
                "+      \"version\": \"4.3.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/lodash.camelcase/-/lodash.camelcase-4.3.0.tgz\",",
                "+      \"integrity\": \"sha1-soqmKIorn8ZRA1x3EfZathkDMaY=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"lodash.clonedeep\": {",
                "+      \"version\": \"3.0.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/lodash.clonedeep/-/lodash.clonedeep-3.0.2.tgz\",",
                "+      \"integrity\": \"sha1-oKHkDYKl6on/WxR7hETtY9koJ9s=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"lodash._baseclone\": \"3.3.0\",",
                "+        \"lodash._bindcallback\": \"3.0.1\"",
                "+      }",
                "+    },",
                "+    \"lodash.cond\": {",
                "+      \"version\": \"4.5.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/lodash.cond/-/lodash.cond-4.5.2.tgz\",",
                "+      \"integrity\": \"sha1-9HGh2khr5g9quVXRcRVSPdHSVdU=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"lodash.isarguments\": {",
                "+      \"version\": \"3.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/lodash.isarguments/-/lodash.isarguments-3.1.0.tgz\",",
                "+      \"integrity\": \"sha1-L1c9hcaiQon/AGY7SRwdM4/zRYo=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"lodash.isarray\": {",
                "+      \"version\": \"3.0.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/lodash.isarray/-/lodash.isarray-3.0.4.tgz\",",
                "+      \"integrity\": \"sha1-eeTriMNqgSKvhvhEqpvNhRtfu1U=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"lodash.keys\": {",
                "+      \"version\": \"3.1.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/lodash.keys/-/lodash.keys-3.1.2.tgz\",",
                "+      \"integrity\": \"sha1-TbwEcrFWvlCgsoaFXRvQsMZWCYo=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"lodash._getnative\": \"3.9.1\",",
                "+        \"lodash.isarguments\": \"3.1.0\",",
                "+        \"lodash.isarray\": \"3.0.4\"",
                "+      }",
                "+    },",
                "+    \"lodash.memoize\": {",
                "+      \"version\": \"4.1.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/lodash.memoize/-/lodash.memoize-4.1.2.tgz\",",
                "+      \"integrity\": \"sha1-vMbEmkKihA7Zl/Mj6tpezRguC/4=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"lodash.uniq\": {",
                "+      \"version\": \"4.5.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/lodash.uniq/-/lodash.uniq-4.5.0.tgz\",",
                "+      \"integrity\": \"sha1-0CJTc662Uq3BvILklFM5qEJ1R3M=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"log4js\": {",
                "+      \"version\": \"0.6.38\",",
                "+      \"resolved\": \"https://registry.npmjs.org/log4js/-/log4js-0.6.38.tgz\",",
                "+      \"integrity\": \"sha1-LElBFmldb7JUgJQ9P8hy5mKlIv0=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"readable-stream\": \"1.0.34\",",
                "+        \"semver\": \"4.3.6\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"semver\": {",
                "+          \"version\": \"4.3.6\",",
                "+          \"resolved\": \"https://registry.npmjs.org/semver/-/semver-4.3.6.tgz\",",
                "+          \"integrity\": \"sha1-MAvG4OhjdPe6YQaLWx7NV/xlMto=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"longest\": {",
                "+      \"version\": \"1.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/longest/-/longest-1.0.1.tgz\",",
                "+      \"integrity\": \"sha1-MKCy2jj3N3DoKUoNIuZiXtd9AJc=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"loose-envify\": {",
                "+      \"version\": \"1.3.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/loose-envify/-/loose-envify-1.3.1.tgz\",",
                "+      \"integrity\": \"sha1-0aitM/qc4OcT1l/dCsi3SNR4yEg=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"js-tokens\": \"3.0.2\"",
                "+      }",
                "+    },",
                "+    \"loud-rejection\": {",
                "+      \"version\": \"1.6.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/loud-rejection/-/loud-rejection-1.6.0.tgz\",",
                "+      \"integrity\": \"sha1-W0b4AUft7leIcPCG0Eghz5mOVR8=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"currently-unhandled\": \"0.4.1\",",
                "+        \"signal-exit\": \"3.0.2\"",
                "+      }",
                "+    },",
                "+    \"lower-case\": {",
                "+      \"version\": \"1.1.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/lower-case/-/lower-case-1.1.4.tgz\",",
                "+      \"integrity\": \"sha1-miyr0bno4K6ZOkv31YdcOcQujqw=\"",
                "+    },",
                "+    \"lpad\": {",
                "+      \"version\": \"0.2.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/lpad/-/lpad-0.2.1.tgz\",",
                "+      \"integrity\": \"sha1-EQWHpVgYSFrWoBliXjknykxSw+4=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"lru-cache\": {",
                "+      \"version\": \"2.7.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/lru-cache/-/lru-cache-2.7.3.tgz\",",
                "+      \"integrity\": \"sha1-bUUk6LlV+V1PW1iFHOId1y+06VI=\"",
                "+    },",
                "+    \"macaddress\": {",
                "+      \"version\": \"0.2.8\",",
                "+      \"resolved\": \"https://registry.npmjs.org/macaddress/-/macaddress-0.2.8.tgz\",",
                "+      \"integrity\": \"sha1-WQTcU3w57G2+/q6QIycTX6hRHxI=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"map-obj\": {",
                "+      \"version\": \"1.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/map-obj/-/map-obj-1.0.1.tgz\",",
                "+      \"integrity\": \"sha1-2TPOuSBdgr3PSIb2dCvcK03qFG0=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"map-stream\": {",
                "+      \"version\": \"0.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/map-stream/-/map-stream-0.1.0.tgz\",",
                "+      \"integrity\": \"sha1-5WqpTEyAVaFkBKBnS3jyFffI4ZQ=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"math-expression-evaluator\": {",
                "+      \"version\": \"1.2.17\",",
                "+      \"resolved\": \"https://registry.npmjs.org/math-expression-evaluator/-/math-expression-evaluator-1.2.17.tgz\",",
                "+      \"integrity\": \"sha1-3oGf282E3M2PrlnGrreWFbnSZqw=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"maxmin\": {",
                "+      \"version\": \"0.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/maxmin/-/maxmin-0.1.0.tgz\",",
                "+      \"integrity\": \"sha1-ldgcUonjqdMPf8fcVZwCTlAwydA=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"chalk\": \"0.4.0\",",
                "+        \"gzip-size\": \"0.1.1\",",
                "+        \"pretty-bytes\": \"0.1.2\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"ansi-styles\": {",
                "+          \"version\": \"1.0.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/ansi-styles/-/ansi-styles-1.0.0.tgz\",",
                "+          \"integrity\": \"sha1-yxAt8cVvUSPquLZ817mAJ6AnkXg=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"chalk\": {",
                "+          \"version\": \"0.4.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/chalk/-/chalk-0.4.0.tgz\",",
                "+          \"integrity\": \"sha1-UZmj3c0MHv4jvAjBsCewYXbgxk8=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"ansi-styles\": \"1.0.0\",",
                "+            \"has-color\": \"0.1.7\",",
                "+            \"strip-ansi\": \"0.1.1\"",
                "+          }",
                "+        },",
                "+        \"strip-ansi\": {",
                "+          \"version\": \"0.1.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/strip-ansi/-/strip-ansi-0.1.1.tgz\",",
                "+          \"integrity\": \"sha1-OeipjQRNFQZgq+SmgIrPcLt7yZE=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"media-typer\": {",
                "+      \"version\": \"0.3.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz\",",
                "+      \"integrity\": \"sha1-hxDXrwqmJvj/+hzgAWhUUmMlV0g=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"memory-fs\": {",
                "+      \"version\": \"0.4.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/memory-fs/-/memory-fs-0.4.1.tgz\",",
                "+      \"integrity\": \"sha1-OpoguEYlI+RHz7x+i7gO1me/xVI=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"errno\": \"0.1.5\",",
                "+        \"readable-stream\": \"2.3.3\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"isarray\": {",
                "+          \"version\": \"1.0.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz\",",
                "+          \"integrity\": \"sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"readable-stream\": {",
                "+          \"version\": \"2.3.3\",",
                "+          \"resolved\": \"https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.3.tgz\",",
                "+          \"integrity\": \"sha512-m+qzzcn7KUxEmd1gMbchF+Y2eIUbieUaxkWtptyHywrX0rE8QEYqPC07Vuy4Wm32/xE16NcdBctb8S0Xe/5IeQ==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"core-util-is\": \"1.0.2\",",
                "+            \"inherits\": \"2.0.3\",",
                "+            \"isarray\": \"1.0.0\",",
                "+            \"process-nextick-args\": \"1.0.7\",",
                "+            \"safe-buffer\": \"5.1.1\",",
                "+            \"string_decoder\": \"1.0.3\",",
                "+            \"util-deprecate\": \"1.0.2\"",
                "+          }",
                "+        },",
                "+        \"string_decoder\": {",
                "+          \"version\": \"1.0.3\",",
                "+          \"resolved\": \"https://registry.npmjs.org/string_decoder/-/string_decoder-1.0.3.tgz\",",
                "+          \"integrity\": \"sha512-4AH6Z5fzNNBcH+6XDMfA/BTt87skxqJlO0lAh3Dker5zThcAxG6mKz+iGu308UKoPPQ8Dcqx/4JhujzltRa+hQ==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"safe-buffer\": \"5.1.1\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"meow\": {",
                "+      \"version\": \"3.7.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/meow/-/meow-3.7.0.tgz\",",
                "+      \"integrity\": \"sha1-cstmi0JSKCkKu/qFaJJYcwioAfs=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"camelcase-keys\": \"2.1.0\",",
                "+        \"decamelize\": \"1.2.0\",",
                "+        \"loud-rejection\": \"1.6.0\",",
                "+        \"map-obj\": \"1.0.1\",",
                "+        \"minimist\": \"1.2.0\",",
                "+        \"normalize-package-data\": \"2.4.0\",",
                "+        \"object-assign\": \"4.1.1\",",
                "+        \"read-pkg-up\": \"1.0.1\",",
                "+        \"redent\": \"1.0.0\",",
                "+        \"trim-newlines\": \"1.0.0\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"load-json-file\": {",
                "+          \"version\": \"1.1.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/load-json-file/-/load-json-file-1.1.0.tgz\",",
                "+          \"integrity\": \"sha1-lWkFcI1YtLq0wiYbBPWfMcmTdMA=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"graceful-fs\": \"4.1.11\",",
                "+            \"parse-json\": \"2.2.0\",",
                "+            \"pify\": \"2.3.0\",",
                "+            \"pinkie-promise\": \"2.0.1\",",
                "+            \"strip-bom\": \"2.0.0\"",
                "+          }",
                "+        },",
                "+        \"minimist\": {",
                "+          \"version\": \"1.2.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/minimist/-/minimist-1.2.0.tgz\",",
                "+          \"integrity\": \"sha1-o1AIsg9BOD7sH7kU9M1d95omQoQ=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"path-type\": {",
                "+          \"version\": \"1.1.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/path-type/-/path-type-1.1.0.tgz\",",
                "+          \"integrity\": \"sha1-WcRPfuSR2nBNpBXaWkBwuk+P5EE=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"graceful-fs\": \"4.1.11\",",
                "+            \"pify\": \"2.3.0\",",
                "+            \"pinkie-promise\": \"2.0.1\"",
                "+          }",
                "+        },",
                "+        \"read-pkg\": {",
                "+          \"version\": \"1.1.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/read-pkg/-/read-pkg-1.1.0.tgz\",",
                "+          \"integrity\": \"sha1-9f+qXs0pyzHAR0vKfXVra7KePyg=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"load-json-file\": \"1.1.0\",",
                "+            \"normalize-package-data\": \"2.4.0\",",
                "+            \"path-type\": \"1.1.0\"",
                "+          }",
                "+        },",
                "+        \"read-pkg-up\": {",
                "+          \"version\": \"1.0.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/read-pkg-up/-/read-pkg-up-1.0.1.tgz\",",
                "+          \"integrity\": \"sha1-nWPBMnbAZZGNV/ACpX9AobZD+wI=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"find-up\": \"1.1.2\",",
                "+            \"read-pkg\": \"1.1.0\"",
                "+          }",
                "+        },",
                "+        \"strip-bom\": {",
                "+          \"version\": \"2.0.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/strip-bom/-/strip-bom-2.0.0.tgz\",",
                "+          \"integrity\": \"sha1-YhmoVhZSBJHzV4i9vxRHqZx+aw4=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"is-utf8\": \"0.2.1\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"merge-descriptors\": {",
                "+      \"version\": \"1.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.1.tgz\",",
                "+      \"integrity\": \"sha1-sAqqVW3YtEVoFQ7J0blT8/kMu2E=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"methods\": {",
                "+      \"version\": \"1.1.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/methods/-/methods-1.1.2.tgz\",",
                "+      \"integrity\": \"sha1-VSmk1nZUE07cxSZmVoNbD4Ua/O4=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"micromatch\": {",
                "+      \"version\": \"2.3.11\",",
                "+      \"resolved\": \"https://registry.npmjs.org/micromatch/-/micromatch-2.3.11.tgz\",",
                "+      \"integrity\": \"sha1-hmd8l9FyCzY0MdBNDRUpO9OMFWU=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"arr-diff\": \"2.0.0\",",
                "+        \"array-unique\": \"0.2.1\",",
                "+        \"braces\": \"1.8.5\",",
                "+        \"expand-brackets\": \"0.1.5\",",
                "+        \"extglob\": \"0.3.2\",",
                "+        \"filename-regex\": \"2.0.1\",",
                "+        \"is-extglob\": \"1.0.0\",",
                "+        \"is-glob\": \"2.0.1\",",
                "+        \"kind-of\": \"3.2.2\",",
                "+        \"normalize-path\": \"2.1.1\",",
                "+        \"object.omit\": \"2.0.1\",",
                "+        \"parse-glob\": \"3.0.4\",",
                "+        \"regex-cache\": \"0.4.4\"",
                "+      }",
                "+    },",
                "+    \"mime\": {",
                "+      \"version\": \"1.4.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/mime/-/mime-1.4.1.tgz\",",
                "+      \"integrity\": \"sha512-KI1+qOZu5DcW6wayYHSzR/tXKCDC5Om4s1z2QJjDULzLcmf3DvzS7oluY4HCTrc+9FiKmWUgeNLg7W3uIQvxtQ==\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"mime-db\": {",
                "+      \"version\": \"1.30.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/mime-db/-/mime-db-1.30.0.tgz\",",
                "+      \"integrity\": \"sha1-dMZD2i3Z1qRTmZY0ZbJtXKfXHwE=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"mime-types\": {",
                "+      \"version\": \"2.1.17\",",
                "+      \"resolved\": \"https://registry.npmjs.org/mime-types/-/mime-types-2.1.17.tgz\",",
                "+      \"integrity\": \"sha1-Cdejk/A+mVp5+K+Fe3Cp4KsWVXo=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"mime-db\": \"1.30.0\"",
                "+      }",
                "+    },",
                "+    \"minimatch\": {",
                "+      \"version\": \"0.3.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-0.3.0.tgz\",",
                "+      \"integrity\": \"sha1-J12O2qxPG7MyZHIInnlJyDlGmd0=\",",
                "+      \"requires\": {",
                "+        \"lru-cache\": \"2.7.3\",",
                "+        \"sigmund\": \"1.0.1\"",
                "+      }",
                "+    },",
                "+    \"minimist\": {",
                "+      \"version\": \"0.0.8\",",
                "+      \"resolved\": \"https://registry.npmjs.org/minimist/-/minimist-0.0.8.tgz\",",
                "+      \"integrity\": \"sha1-hX/Kv8M5fSYluCKCYuhqp6ARsF0=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"mkdirp\": {",
                "+      \"version\": \"0.5.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/mkdirp/-/mkdirp-0.5.1.tgz\",",
                "+      \"integrity\": \"sha1-MAV0OOrGz3+MR2fzhkjWaX11yQM=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"minimist\": \"0.0.8\"",
                "+      }",
                "+    },",
                "+    \"moment\": {",
                "+      \"version\": \"2.19.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/moment/-/moment-2.19.4.tgz\",",
                "+      \"integrity\": \"sha512-1xFTAknSLfc47DIxHDUbnJWC+UwgWxATmymaxIPQpmMh7LBm7ZbwVEsuushqwL2GYZU0jie4xO+TK44hJPjNSQ==\"",
                "+    },",
                "+    \"moment-duration-format\": {",
                "+      \"version\": \"1.3.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/moment-duration-format/-/moment-duration-format-1.3.0.tgz\",",
                "+      \"integrity\": \"sha1-VBdxtfh6BJzGVUBHXTrZZnN9aQg=\"",
                "+    },",
                "+    \"mout\": {",
                "+      \"version\": \"0.9.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/mout/-/mout-0.9.1.tgz\",",
                "+      \"integrity\": \"sha1-hPDz/WrMcxf2PeKv/cwM7gCbBHc=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"ms\": {",
                "+      \"version\": \"2.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/ms/-/ms-2.0.0.tgz\",",
                "+      \"integrity\": \"sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"multimatch\": {",
                "+      \"version\": \"0.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/multimatch/-/multimatch-0.1.0.tgz\",",
                "+      \"integrity\": \"sha1-CZ2fj4RjrDbPv6JzYLwWzuh97WQ=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"lodash\": \"2.4.2\",",
                "+        \"minimatch\": \"0.2.14\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"lodash\": {",
                "+          \"version\": \"2.4.2\",",
                "+          \"resolved\": \"https://registry.npmjs.org/lodash/-/lodash-2.4.2.tgz\",",
                "+          \"integrity\": \"sha1-+t2DS5aDBz2hebPq5tnA0VBT9z4=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"minimatch\": {",
                "+          \"version\": \"0.2.14\",",
                "+          \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-0.2.14.tgz\",",
                "+          \"integrity\": \"sha1-x054BXT2PG+aCQ6Q775u9TpqdWo=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"lru-cache\": \"2.7.3\",",
                "+            \"sigmund\": \"1.0.1\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"mute-stream\": {",
                "+      \"version\": \"0.0.5\",",
                "+      \"resolved\": \"https://registry.npmjs.org/mute-stream/-/mute-stream-0.0.5.tgz\",",
                "+      \"integrity\": \"sha1-j7+rsKmKJT0xhDMfno3rc3L6xsA=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"nan\": {",
                "+      \"version\": \"2.8.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/nan/-/nan-2.8.0.tgz\",",
                "+      \"integrity\": \"sha1-7XFfP+neArV6XmJS2QqWZ14fCFo=\",",
                "+      \"dev\": true,",
                "+      \"optional\": true",
                "+    },",
                "+    \"natural-compare\": {",
                "+      \"version\": \"1.4.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz\",",
                "+      \"integrity\": \"sha1-Sr6/7tdUHywnrPspvbvRXI1bpPc=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"ncname\": {",
                "+      \"version\": \"1.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/ncname/-/ncname-1.0.0.tgz\",",
                "+      \"integrity\": \"sha1-W1etGLHKCShk72Kwse2BlPODtxw=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"xml-char-classes\": \"1.0.0\"",
                "+      }",
                "+    },",
                "+    \"negotiator\": {",
                "+      \"version\": \"0.6.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/negotiator/-/negotiator-0.6.1.tgz\",",
                "+      \"integrity\": \"sha1-KzJxhOiZIQEXeyhWP7XnECrNDKk=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"ng-annotate\": {",
                "+      \"version\": \"0.15.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/ng-annotate/-/ng-annotate-0.15.4.tgz\",",
                "+      \"integrity\": \"sha1-ZQdSXI8vKPh4e824mPVtmzEGbpM=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"acorn\": \"0.11.0\",",
                "+        \"alter\": \"0.2.0\",",
                "+        \"convert-source-map\": \"0.4.1\",",
                "+        \"optimist\": \"0.6.1\",",
                "+        \"ordered-ast-traverse\": \"1.1.1\",",
                "+        \"simple-fmt\": \"0.1.0\",",
                "+        \"simple-is\": \"0.2.0\",",
                "+        \"source-map\": \"0.1.43\",",
                "+        \"stable\": \"0.1.6\",",
                "+        \"stringmap\": \"0.2.2\",",
                "+        \"stringset\": \"0.2.1\",",
                "+        \"tryor\": \"0.1.2\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"acorn\": {",
                "+          \"version\": \"0.11.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/acorn/-/acorn-0.11.0.tgz\",",
                "+          \"integrity\": \"sha1-bpXwJTrRYf8BJ9symD5eLlNS1Zo=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"convert-source-map\": {",
                "+          \"version\": \"0.4.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/convert-source-map/-/convert-source-map-0.4.1.tgz\",",
                "+          \"integrity\": \"sha1-+RmgCZ/jH4D8Wh0OswMWGzlAcMc=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"source-map\": {",
                "+          \"version\": \"0.1.43\",",
                "+          \"resolved\": \"https://registry.npmjs.org/source-map/-/source-map-0.1.43.tgz\",",
                "+          \"integrity\": \"sha1-wkvBRspRfBRx9drL4lcbK3+eM0Y=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"amdefine\": \"1.0.1\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"ng-annotate-loader\": {",
                "+      \"version\": \"0.2.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/ng-annotate-loader/-/ng-annotate-loader-0.2.0.tgz\",",
                "+      \"integrity\": \"sha1-1GLcBj3WnSzdcaoEpGxu0KAG5SM=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"loader-utils\": \"0.2.17\",",
                "+        \"ng-annotate\": \"1.2.1\",",
                "+        \"normalize-path\": \"2.1.1\",",
                "+        \"source-map\": \"0.5.7\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"acorn\": {",
                "+          \"version\": \"2.6.4\",",
                "+          \"resolved\": \"https://registry.npmjs.org/acorn/-/acorn-2.6.4.tgz\",",
                "+          \"integrity\": \"sha1-6x9FtKQ/ox0DcBpexG87Umc+kO4=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"convert-source-map\": {",
                "+          \"version\": \"1.1.3\",",
                "+          \"resolved\": \"https://registry.npmjs.org/convert-source-map/-/convert-source-map-1.1.3.tgz\",",
                "+          \"integrity\": \"sha1-SCnId+n+SbMWHzvzZziI4gRpmGA=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"ng-annotate\": {",
                "+          \"version\": \"1.2.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/ng-annotate/-/ng-annotate-1.2.1.tgz\",",
                "+          \"integrity\": \"sha1-64vBpnMccNCK9rAsPq8abj+55rs=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"acorn\": \"2.6.4\",",
                "+            \"alter\": \"0.2.0\",",
                "+            \"convert-source-map\": \"1.1.3\",",
                "+            \"optimist\": \"0.6.1\",",
                "+            \"ordered-ast-traverse\": \"1.1.1\",",
                "+            \"simple-fmt\": \"0.1.0\",",
                "+            \"simple-is\": \"0.2.0\",",
                "+            \"source-map\": \"0.5.7\",",
                "+            \"stable\": \"0.1.6\",",
                "+            \"stringmap\": \"0.2.2\",",
                "+            \"stringset\": \"0.2.1\",",
                "+            \"tryor\": \"0.1.2\"",
                "+          }",
                "+        },",
                "+        \"source-map\": {",
                "+          \"version\": \"0.5.7\",",
                "+          \"resolved\": \"https://registry.npmjs.org/source-map/-/source-map-0.5.7.tgz\",",
                "+          \"integrity\": \"sha1-igOdLRAh0i0eoUyA2OpGi6LvP8w=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"no-case\": {",
                "+      \"version\": \"2.3.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/no-case/-/no-case-2.3.2.tgz\",",
                "+      \"integrity\": \"sha512-rmTZ9kz+f3rCvK2TD1Ue/oZlns7OGoIWP4fc3llxxRXlOkHKoWPPWJOfFYpITabSow43QJbRIoHQXtt10VldyQ==\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"lower-case\": \"1.1.4\"",
                "+      }",
                "+    },",
                "+    \"node-libs-browser\": {",
                "+      \"version\": \"0.7.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/node-libs-browser/-/node-libs-browser-0.7.0.tgz\",",
                "+      \"integrity\": \"sha1-PicsCBnjCJNeJmdECNevDhSRuDs=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"assert\": \"1.4.1\",",
                "+        \"browserify-zlib\": \"0.1.4\",",
                "+        \"buffer\": \"4.9.1\",",
                "+        \"console-browserify\": \"1.1.0\",",
                "+        \"constants-browserify\": \"1.0.0\",",
                "+        \"crypto-browserify\": \"3.3.0\",",
                "+        \"domain-browser\": \"1.1.7\",",
                "+        \"events\": \"1.1.1\",",
                "+        \"https-browserify\": \"0.0.1\",",
                "+        \"os-browserify\": \"0.2.1\",",
                "+        \"path-browserify\": \"0.0.0\",",
                "+        \"process\": \"0.11.10\",",
                "+        \"punycode\": \"1.4.1\",",
                "+        \"querystring-es3\": \"0.2.1\",",
                "+        \"readable-stream\": \"2.3.3\",",
                "+        \"stream-browserify\": \"2.0.1\",",
                "+        \"stream-http\": \"2.7.2\",",
                "+        \"string_decoder\": \"0.10.31\",",
                "+        \"timers-browserify\": \"2.0.4\",",
                "+        \"tty-browserify\": \"0.0.0\",",
                "+        \"url\": \"0.11.0\",",
                "+        \"util\": \"0.10.3\",",
                "+        \"vm-browserify\": \"0.0.4\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"isarray\": {",
                "+          \"version\": \"1.0.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz\",",
                "+          \"integrity\": \"sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"readable-stream\": {",
                "+          \"version\": \"2.3.3\",",
                "+          \"resolved\": \"https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.3.tgz\",",
                "+          \"integrity\": \"sha512-m+qzzcn7KUxEmd1gMbchF+Y2eIUbieUaxkWtptyHywrX0rE8QEYqPC07Vuy4Wm32/xE16NcdBctb8S0Xe/5IeQ==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"core-util-is\": \"1.0.2\",",
                "+            \"inherits\": \"2.0.3\",",
                "+            \"isarray\": \"1.0.0\",",
                "+            \"process-nextick-args\": \"1.0.7\",",
                "+            \"safe-buffer\": \"5.1.1\",",
                "+            \"string_decoder\": \"1.0.3\",",
                "+            \"util-deprecate\": \"1.0.2\"",
                "+          },",
                "+          \"dependencies\": {",
                "+            \"string_decoder\": {",
                "+              \"version\": \"1.0.3\",",
                "+              \"resolved\": \"https://registry.npmjs.org/string_decoder/-/string_decoder-1.0.3.tgz\",",
                "+              \"integrity\": \"sha512-4AH6Z5fzNNBcH+6XDMfA/BTt87skxqJlO0lAh3Dker5zThcAxG6mKz+iGu308UKoPPQ8Dcqx/4JhujzltRa+hQ==\",",
                "+              \"dev\": true,",
                "+              \"requires\": {",
                "+                \"safe-buffer\": \"5.1.1\"",
                "+              }",
                "+            }",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"nopt\": {",
                "+      \"version\": \"1.0.10\",",
                "+      \"resolved\": \"https://registry.npmjs.org/nopt/-/nopt-1.0.10.tgz\",",
                "+      \"integrity\": \"sha1-bd0hvSoxQXuScn3Vhfim83YI6+4=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"abbrev\": \"1.1.1\"",
                "+      }",
                "+    },",
                "+    \"noptify\": {",
                "+      \"version\": \"0.0.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/noptify/-/noptify-0.0.3.tgz\",",
                "+      \"integrity\": \"sha1-WPZUpz2XU98MUdlobckhBKZ/S7s=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"nopt\": \"2.0.0\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"nopt\": {",
                "+          \"version\": \"2.0.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/nopt/-/nopt-2.0.0.tgz\",",
                "+          \"integrity\": \"sha1-ynQW8gpeP5w7hhgPlilfo9C1Lg0=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"abbrev\": \"1.1.1\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"normalize-package-data\": {",
                "+      \"version\": \"2.4.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/normalize-package-data/-/normalize-package-data-2.4.0.tgz\",",
                "+      \"integrity\": \"sha512-9jjUFbTPfEy3R/ad/2oNbKtW9Hgovl5O1FvFWKkKblNXoN/Oou6+9+KKohPK13Yc3/TyunyWhJp6gvRNR/PPAw==\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"hosted-git-info\": \"2.5.0\",",
                "+        \"is-builtin-module\": \"1.0.0\",",
                "+        \"semver\": \"5.4.1\",",
                "+        \"validate-npm-package-license\": \"3.0.1\"",
                "+      }",
                "+    },",
                "+    \"normalize-path\": {",
                "+      \"version\": \"2.1.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/normalize-path/-/normalize-path-2.1.1.tgz\",",
                "+      \"integrity\": \"sha1-GrKLVW4Zg2Oowab35vogE3/mrtk=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"remove-trailing-separator\": \"1.1.0\"",
                "+      }",
                "+    },",
                "+    \"normalize-range\": {",
                "+      \"version\": \"0.1.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/normalize-range/-/normalize-range-0.1.2.tgz\",",
                "+      \"integrity\": \"sha1-LRDAa9/TEuqXd2laTShDlFa3WUI=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"normalize-url\": {",
                "+      \"version\": \"1.9.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/normalize-url/-/normalize-url-1.9.1.tgz\",",
                "+      \"integrity\": \"sha1-LMDWazHqIwNkWENuNiDYWVTGbDw=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"object-assign\": \"4.1.1\",",
                "+        \"prepend-http\": \"1.0.4\",",
                "+        \"query-string\": \"4.3.4\",",
                "+        \"sort-keys\": \"1.1.2\"",
                "+      }",
                "+    },",
                "+    \"npm-run-all\": {",
                "+      \"version\": \"3.1.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/npm-run-all/-/npm-run-all-3.1.2.tgz\",",
                "+      \"integrity\": \"sha1-x+P69KoKWb8Nz8EmARZhUWkhcc8=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"chalk\": \"1.1.3\",",
                "+        \"cross-spawn\": \"4.0.2\",",
                "+        \"minimatch\": \"3.0.4\",",
                "+        \"object-assign\": \"4.1.1\",",
                "+        \"pinkie-promise\": \"2.0.1\",",
                "+        \"ps-tree\": \"1.1.0\",",
                "+        \"read-pkg\": \"1.1.0\",",
                "+        \"read-pkg-up\": \"1.0.1\",",
                "+        \"shell-quote\": \"1.6.1\",",
                "+        \"string.prototype.padend\": \"3.0.0\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"load-json-file\": {",
                "+          \"version\": \"1.1.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/load-json-file/-/load-json-file-1.1.0.tgz\",",
                "+          \"integrity\": \"sha1-lWkFcI1YtLq0wiYbBPWfMcmTdMA=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"graceful-fs\": \"4.1.11\",",
                "+            \"parse-json\": \"2.2.0\",",
                "+            \"pify\": \"2.3.0\",",
                "+            \"pinkie-promise\": \"2.0.1\",",
                "+            \"strip-bom\": \"2.0.0\"",
                "+          }",
                "+        },",
                "+        \"minimatch\": {",
                "+          \"version\": \"3.0.4\",",
                "+          \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-3.0.4.tgz\",",
                "+          \"integrity\": \"sha512-yJHVQEhyqPLUTgt9B83PXu6W3rx4MvvHvSUvToogpwoGDOUQ+yDrR0HRot+yOCdCO7u4hX3pWft6kWBBcqh0UA==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"brace-expansion\": \"1.1.8\"",
                "+          }",
                "+        },",
                "+        \"path-type\": {",
                "+          \"version\": \"1.1.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/path-type/-/path-type-1.1.0.tgz\",",
                "+          \"integrity\": \"sha1-WcRPfuSR2nBNpBXaWkBwuk+P5EE=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"graceful-fs\": \"4.1.11\",",
                "+            \"pify\": \"2.3.0\",",
                "+            \"pinkie-promise\": \"2.0.1\"",
                "+          }",
                "+        },",
                "+        \"read-pkg\": {",
                "+          \"version\": \"1.1.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/read-pkg/-/read-pkg-1.1.0.tgz\",",
                "+          \"integrity\": \"sha1-9f+qXs0pyzHAR0vKfXVra7KePyg=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"load-json-file\": \"1.1.0\",",
                "+            \"normalize-package-data\": \"2.4.0\",",
                "+            \"path-type\": \"1.1.0\"",
                "+          }",
                "+        },",
                "+        \"read-pkg-up\": {",
                "+          \"version\": \"1.0.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/read-pkg-up/-/read-pkg-up-1.0.1.tgz\",",
                "+          \"integrity\": \"sha1-nWPBMnbAZZGNV/ACpX9AobZD+wI=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"find-up\": \"1.1.2\",",
                "+            \"read-pkg\": \"1.1.0\"",
                "+          }",
                "+        },",
                "+        \"strip-bom\": {",
                "+          \"version\": \"2.0.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/strip-bom/-/strip-bom-2.0.0.tgz\",",
                "+          \"integrity\": \"sha1-YhmoVhZSBJHzV4i9vxRHqZx+aw4=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"is-utf8\": \"0.2.1\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"nth-check\": {",
                "+      \"version\": \"1.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/nth-check/-/nth-check-1.0.1.tgz\",",
                "+      \"integrity\": \"sha1-mSms32KPwsQQmN6rgqxYDPFJquQ=\",",
                "+      \"requires\": {",
                "+        \"boolbase\": \"1.0.0\"",
                "+      }",
                "+    },",
                "+    \"num2fraction\": {",
                "+      \"version\": \"1.2.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/num2fraction/-/num2fraction-1.2.2.tgz\",",
                "+      \"integrity\": \"sha1-b2gragJ6Tp3fpFZM0lidHU5mnt4=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"number-is-nan\": {",
                "+      \"version\": \"1.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/number-is-nan/-/number-is-nan-1.0.1.tgz\",",
                "+      \"integrity\": \"sha1-CXtgK1NCKlIsGvuHkDGDNpQaAR0=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"oauth-sign\": {",
                "+      \"version\": \"0.8.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.8.2.tgz\",",
                "+      \"integrity\": \"sha1-Rqarfwrq2N6unsBWV4C31O/rnUM=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"object-assign\": {",
                "+      \"version\": \"4.1.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz\",",
                "+      \"integrity\": \"sha1-IQmtx5ZYh8/AXLvUQsrIv7s2CGM=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"object-component\": {",
                "+      \"version\": \"0.0.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/object-component/-/object-component-0.0.3.tgz\",",
                "+      \"integrity\": \"sha1-8MaapQ78lbhmwYb0AKM3acsvEpE=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"object-keys\": {",
                "+      \"version\": \"1.0.11\",",
                "+      \"resolved\": \"https://registry.npmjs.org/object-keys/-/object-keys-1.0.11.tgz\",",
                "+      \"integrity\": \"sha1-xUYBd4rVYPEULODgG8yotW0TQm0=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"object.omit\": {",
                "+      \"version\": \"2.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/object.omit/-/object.omit-2.0.1.tgz\",",
                "+      \"integrity\": \"sha1-Gpx0SCnznbuFjHbKNXmuKlTr0fo=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"for-own\": \"0.1.5\",",
                "+        \"is-extendable\": \"0.1.1\"",
                "+      }",
                "+    },",
                "+    \"on-finished\": {",
                "+      \"version\": \"2.3.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/on-finished/-/on-finished-2.3.0.tgz\",",
                "+      \"integrity\": \"sha1-IPEzZIGwg811M3mSoWlxqi2QaUc=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"ee-first\": \"1.1.1\"",
                "+      }",
                "+    },",
                "+    \"on-headers\": {",
                "+      \"version\": \"1.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/on-headers/-/on-headers-1.0.1.tgz\",",
                "+      \"integrity\": \"sha1-ko9dD0cNSTQmUepnlLCFfBAGk/c=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"once\": {",
                "+      \"version\": \"1.4.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/once/-/once-1.4.0.tgz\",",
                "+      \"integrity\": \"sha1-WDsap3WWHUsROsF9nFC6753Xa9E=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"wrappy\": \"1.0.2\"",
                "+      }",
                "+    },",
                "+    \"onetime\": {",
                "+      \"version\": \"1.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/onetime/-/onetime-1.1.0.tgz\",",
                "+      \"integrity\": \"sha1-ofeDj4MUxRbwXs78vEzP4EtO14k=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"open\": {",
                "+      \"version\": \"0.0.5\",",
                "+      \"resolved\": \"https://registry.npmjs.org/open/-/open-0.0.5.tgz\",",
                "+      \"integrity\": \"sha1-QsPhjslUZra/DcQvOilFw/DK2Pw=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"optimist\": {",
                "+      \"version\": \"0.6.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/optimist/-/optimist-0.6.1.tgz\",",
                "+      \"integrity\": \"sha1-2j6nRob6IaGaERwybpDrFaAZZoY=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"minimist\": \"0.0.8\",",
                "+        \"wordwrap\": \"0.0.2\"",
                "+      }",
                "+    },",
                "+    \"optionator\": {",
                "+      \"version\": \"0.8.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/optionator/-/optionator-0.8.2.tgz\",",
                "+      \"integrity\": \"sha1-NkxeQJ0/TWMB1sC0wFu6UBgK62Q=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"deep-is\": \"0.1.3\",",
                "+        \"fast-levenshtein\": \"2.0.6\",",
                "+        \"levn\": \"0.3.0\",",
                "+        \"prelude-ls\": \"1.1.2\",",
                "+        \"type-check\": \"0.3.2\",",
                "+        \"wordwrap\": \"1.0.0\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"wordwrap\": {",
                "+          \"version\": \"1.0.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/wordwrap/-/wordwrap-1.0.0.tgz\",",
                "+          \"integrity\": \"sha1-J1hIEIkUVqQXHI0CJkQa3pDLyus=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"options\": {",
                "+      \"version\": \"0.0.6\",",
                "+      \"resolved\": \"https://registry.npmjs.org/options/-/options-0.0.6.tgz\",",
                "+      \"integrity\": \"sha1-7CLTEoBrtT5zF3Pnza788cZDEo8=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"ordered-ast-traverse\": {",
                "+      \"version\": \"1.1.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/ordered-ast-traverse/-/ordered-ast-traverse-1.1.1.tgz\",",
                "+      \"integrity\": \"sha1-aEOhcLwO7otSDMjdwd3TqjD6BXw=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"ordered-esprima-props\": \"1.1.0\"",
                "+      }",
                "+    },",
                "+    \"ordered-esprima-props\": {",
                "+      \"version\": \"1.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/ordered-esprima-props/-/ordered-esprima-props-1.1.0.tgz\",",
                "+      \"integrity\": \"sha1-qYJwht9fAQqmDpvQK24DNc6i/8s=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"original\": {",
                "+      \"version\": \"1.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/original/-/original-1.0.0.tgz\",",
                "+      \"integrity\": \"sha1-kUf5P6FpbQS+YeAb1QuurKZWvTs=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"url-parse\": \"1.0.5\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"url-parse\": {",
                "+          \"version\": \"1.0.5\",",
                "+          \"resolved\": \"https://registry.npmjs.org/url-parse/-/url-parse-1.0.5.tgz\",",
                "+          \"integrity\": \"sha1-CFSGBCKv3P7+tsllxmLUgAFpkns=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"querystringify\": \"0.0.4\",",
                "+            \"requires-port\": \"1.0.0\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"os-browserify\": {",
                "+      \"version\": \"0.2.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/os-browserify/-/os-browserify-0.2.1.tgz\",",
                "+      \"integrity\": \"sha1-Y/xMzuXS13Y9Jrv4YBB45sLgBE8=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"os-homedir\": {",
                "+      \"version\": \"1.0.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/os-homedir/-/os-homedir-1.0.2.tgz\",",
                "+      \"integrity\": \"sha1-/7xJiDNuDoM94MFox+8VISGqf7M=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"os-tmpdir\": {",
                "+      \"version\": \"1.0.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/os-tmpdir/-/os-tmpdir-1.0.2.tgz\",",
                "+      \"integrity\": \"sha1-u+Z0BseaqFxc/sdm/lc0VV36EnQ=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"osenv\": {",
                "+      \"version\": \"0.0.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/osenv/-/osenv-0.0.3.tgz\",",
                "+      \"integrity\": \"sha1-zWrY3bKQkVrZ4idlV2Al1BHynLY=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"output-file-sync\": {",
                "+      \"version\": \"1.1.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/output-file-sync/-/output-file-sync-1.1.2.tgz\",",
                "+      \"integrity\": \"sha1-0KM+7+YaIF+suQCS6CZZjVJFznY=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"graceful-fs\": \"4.1.11\",",
                "+        \"mkdirp\": \"0.5.1\",",
                "+        \"object-assign\": \"4.1.1\"",
                "+      }",
                "+    },",
                "+    \"p-limit\": {",
                "+      \"version\": \"1.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/p-limit/-/p-limit-1.1.0.tgz\",",
                "+      \"integrity\": \"sha1-sH/y2aXYi+yAYDWJWiurZqJ5iLw=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"p-locate\": {",
                "+      \"version\": \"2.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/p-locate/-/p-locate-2.0.0.tgz\",",
                "+      \"integrity\": \"sha1-IKAQOyIqcMj9OcwuWAaA893l7EM=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"p-limit\": \"1.1.0\"",
                "+      }",
                "+    },",
                "+    \"pad-stdio\": {",
                "+      \"version\": \"0.1.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/pad-stdio/-/pad-stdio-0.1.1.tgz\",",
                "+      \"integrity\": \"sha1-fC+ZxNlpYzxgxbVRJZwHVQeK6yo=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"lpad\": \"0.2.1\"",
                "+      }",
                "+    },",
                "+    \"pako\": {",
                "+      \"version\": \"1.0.6\",",
                "+      \"resolved\": \"https://registry.npmjs.org/pako/-/pako-1.0.6.tgz\",",
                "+      \"integrity\": \"sha512-lQe48YPsMJAig+yngZ87Lus+NF+3mtu7DVOBu6b/gHO1YpKwIj5AWjZ/TOS7i46HD/UixzWb1zeWDZfGZ3iYcg==\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"param-case\": {",
                "+      \"version\": \"1.1.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/param-case/-/param-case-1.1.2.tgz\",",
                "+      \"integrity\": \"sha1-3LCRpDwlm5Io8cNB57akTqC/l0M=\",",
                "+      \"requires\": {",
                "+        \"sentence-case\": \"1.1.3\"",
                "+      }",
                "+    },",
                "+    \"parse-glob\": {",
                "+      \"version\": \"3.0.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/parse-glob/-/parse-glob-3.0.4.tgz\",",
                "+      \"integrity\": \"sha1-ssN2z7EfNVE7rdFz7wu246OIORw=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"glob-base\": \"0.3.0\",",
                "+        \"is-dotfile\": \"1.0.3\",",
                "+        \"is-extglob\": \"1.0.0\",",
                "+        \"is-glob\": \"2.0.1\"",
                "+      }",
                "+    },",
                "+    \"parse-json\": {",
                "+      \"version\": \"2.2.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/parse-json/-/parse-json-2.2.0.tgz\",",
                "+      \"integrity\": \"sha1-9ID0BDTvgHQfhGkJn43qGPVaTck=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"error-ex\": \"1.3.1\"",
                "+      }",
                "+    },",
                "+    \"parsejson\": {",
                "+      \"version\": \"0.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/parsejson/-/parsejson-0.0.1.tgz\",",
                "+      \"integrity\": \"sha1-mxDGwNglq1ieaFFTgm3go7oni8w=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"better-assert\": \"1.0.2\"",
                "+      }",
                "+    },",
                "+    \"parseqs\": {",
                "+      \"version\": \"0.0.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/parseqs/-/parseqs-0.0.2.tgz\",",
                "+      \"integrity\": \"sha1-nf5wss3aw4i95PNbHyQPpYrb5sc=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"better-assert\": \"1.0.2\"",
                "+      }",
                "+    },",
                "+    \"parserlib\": {",
                "+      \"version\": \"0.2.5\",",
                "+      \"resolved\": \"https://registry.npmjs.org/parserlib/-/parserlib-0.2.5.tgz\",",
                "+      \"integrity\": \"sha1-hZB92GBaoGq7PdKV1QuyuPpN0Rc=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"parseuri\": {",
                "+      \"version\": \"0.0.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/parseuri/-/parseuri-0.0.4.tgz\",",
                "+      \"integrity\": \"sha1-gGWCo5iH4eoY3V4v4OAZAiaOk1A=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"better-assert\": \"1.0.2\"",
                "+      }",
                "+    },",
                "+    \"parseurl\": {",
                "+      \"version\": \"1.3.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/parseurl/-/parseurl-1.3.2.tgz\",",
                "+      \"integrity\": \"sha1-/CidTtiZMRlGDBViUyYs3I3mW/M=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"pascal-case\": {",
                "+      \"version\": \"1.1.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/pascal-case/-/pascal-case-1.1.2.tgz\",",
                "+      \"integrity\": \"sha1-Pl1kogBDgwp8STRMLXS0G+DJyZs=\",",
                "+      \"requires\": {",
                "+        \"camel-case\": \"1.2.2\",",
                "+        \"upper-case-first\": \"1.1.2\"",
                "+      }",
                "+    },",
                "+    \"path-browserify\": {",
                "+      \"version\": \"0.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/path-browserify/-/path-browserify-0.0.0.tgz\",",
                "+      \"integrity\": \"sha1-oLhwcpquIUAFt9UDLsLLuw+0RRo=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"path-case\": {",
                "+      \"version\": \"1.1.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/path-case/-/path-case-1.1.2.tgz\",",
                "+      \"integrity\": \"sha1-UM5roNO+090LXCqcRVNpdDRAlRQ=\",",
                "+      \"requires\": {",
                "+        \"sentence-case\": \"1.1.3\"",
                "+      }",
                "+    },",
                "+    \"path-exists\": {",
                "+      \"version\": \"2.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/path-exists/-/path-exists-2.1.0.tgz\",",
                "+      \"integrity\": \"sha1-D+tsZPD8UY2adU3V77YscCJ2H0s=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"pinkie-promise\": \"2.0.1\"",
                "+      }",
                "+    },",
                "+    \"path-is-absolute\": {",
                "+      \"version\": \"1.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz\",",
                "+      \"integrity\": \"sha1-F0uSaHNVNP+8es5r9TpanhtcX18=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"path-is-inside\": {",
                "+      \"version\": \"1.0.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/path-is-inside/-/path-is-inside-1.0.2.tgz\",",
                "+      \"integrity\": \"sha1-NlQX3t5EQw0cEa9hAn+s8HS9/FM=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"path-parse\": {",
                "+      \"version\": \"1.0.5\",",
                "+      \"resolved\": \"https://registry.npmjs.org/path-parse/-/path-parse-1.0.5.tgz\",",
                "+      \"integrity\": \"sha1-PBrfhx6pzWyUMbbqK9dKD/BVxME=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"path-to-regexp\": {",
                "+      \"version\": \"0.1.7\",",
                "+      \"resolved\": \"https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.7.tgz\",",
                "+      \"integrity\": \"sha1-32BBeABfUi8V60SQ5yR6G/qmf4w=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"path-type\": {",
                "+      \"version\": \"2.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/path-type/-/path-type-2.0.0.tgz\",",
                "+      \"integrity\": \"sha1-8BLMuEFbcJb8LaoQVMPXI4lZTHM=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"pify\": \"2.3.0\"",
                "+      }",
                "+    },",
                "+    \"pause-stream\": {",
                "+      \"version\": \"0.0.11\",",
                "+      \"resolved\": \"https://registry.npmjs.org/pause-stream/-/pause-stream-0.0.11.tgz\",",
                "+      \"integrity\": \"sha1-/lo0sMvOErWqaitAPuLnO2AvFEU=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"through\": \"2.3.8\"",
                "+      }",
                "+    },",
                "+    \"pbkdf2-compat\": {",
                "+      \"version\": \"2.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/pbkdf2-compat/-/pbkdf2-compat-2.0.1.tgz\",",
                "+      \"integrity\": \"sha1-tuDI+plJTZTgURV1gCpZpcFC8og=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"pend\": {",
                "+      \"version\": \"1.2.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/pend/-/pend-1.2.0.tgz\",",
                "+      \"integrity\": \"sha1-elfrVQpng/kRUzH89GY9XI4AelA=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"performance-now\": {",
                "+      \"version\": \"2.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/performance-now/-/performance-now-2.1.0.tgz\",",
                "+      \"integrity\": \"sha1-Ywn04OX6kT7BxpMHrjZLSzd8nns=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"phantomjs-prebuilt\": {",
                "+      \"version\": \"2.1.16\",",
                "+      \"resolved\": \"https://registry.npmjs.org/phantomjs-prebuilt/-/phantomjs-prebuilt-2.1.16.tgz\",",
                "+      \"integrity\": \"sha1-79ISpKOWbTZHaE6ouniFSb4q7+8=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"es6-promise\": \"4.1.1\",",
                "+        \"extract-zip\": \"1.6.6\",",
                "+        \"fs-extra\": \"1.0.0\",",
                "+        \"hasha\": \"2.2.0\",",
                "+        \"kew\": \"0.7.0\",",
                "+        \"progress\": \"1.1.8\",",
                "+        \"request\": \"2.83.0\",",
                "+        \"request-progress\": \"2.0.1\",",
                "+        \"which\": \"1.3.0\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"es6-promise\": {",
                "+          \"version\": \"4.1.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/es6-promise/-/es6-promise-4.1.1.tgz\",",
                "+          \"integrity\": \"sha512-OaU1hHjgJf+b0NzsxCg7NdIYERD6Hy/PEmFLTjw+b65scuisG3Kt4QoTvJ66BBkPZ581gr0kpoVzKnxniM8nng==\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"which\": {",
                "+          \"version\": \"1.3.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/which/-/which-1.3.0.tgz\",",
                "+          \"integrity\": \"sha512-xcJpopdamTuY5duC/KnTTNBraPK54YwpenP4lzxU8H91GudWpFv38u0CKjclE1Wi2EH2EDz5LRcHcKbCIzqGyg==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"isexe\": \"2.0.0\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"pify\": {",
                "+      \"version\": \"2.3.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/pify/-/pify-2.3.0.tgz\",",
                "+      \"integrity\": \"sha1-7RQaasBDqEnqWISY59yosVMw6Qw=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"pinkie\": {",
                "+      \"version\": \"2.0.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/pinkie/-/pinkie-2.0.4.tgz\",",
                "+      \"integrity\": \"sha1-clVrgM+g1IqXToDnckjoDtT3+HA=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"pinkie-promise\": {",
                "+      \"version\": \"2.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/pinkie-promise/-/pinkie-promise-2.0.1.tgz\",",
                "+      \"integrity\": \"sha1-ITXW36ejWMBprJsXh3YogihFD/o=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"pinkie\": \"2.0.4\"",
                "+      }",
                "+    },",
                "+    \"pkg-dir\": {",
                "+      \"version\": \"1.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/pkg-dir/-/pkg-dir-1.0.0.tgz\",",
                "+      \"integrity\": \"sha1-ektQio1bstYp1EcFb/TpyTFM89Q=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"find-up\": \"1.1.2\"",
                "+      }",
                "+    },",
                "+    \"pluralize\": {",
                "+      \"version\": \"1.2.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/pluralize/-/pluralize-1.2.1.tgz\",",
                "+      \"integrity\": \"sha1-0aIUg/0iu0HlihL6NCGCMUCJfEU=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"postcss\": {",
                "+      \"version\": \"5.2.18\",",
                "+      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-5.2.18.tgz\",",
                "+      \"integrity\": \"sha512-zrUjRRe1bpXKsX1qAJNJjqZViErVuyEkMTRrwu4ud4sbTtIBRmtaYDrHmcGgmrbsW3MHfmtIf+vJumgQn+PrXg==\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"chalk\": \"1.1.3\",",
                "+        \"js-base64\": \"2.4.0\",",
                "+        \"source-map\": \"0.5.7\",",
                "+        \"supports-color\": \"3.2.3\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"source-map\": {",
                "+          \"version\": \"0.5.7\",",
                "+          \"resolved\": \"https://registry.npmjs.org/source-map/-/source-map-0.5.7.tgz\",",
                "+          \"integrity\": \"sha1-igOdLRAh0i0eoUyA2OpGi6LvP8w=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"postcss-calc\": {",
                "+      \"version\": \"5.3.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/postcss-calc/-/postcss-calc-5.3.1.tgz\",",
                "+      \"integrity\": \"sha1-d7rnypKK2FcW4v2kLyYb98HWW14=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"postcss\": \"5.2.18\",",
                "+        \"postcss-message-helpers\": \"2.0.0\",",
                "+        \"reduce-css-calc\": \"1.3.0\"",
                "+      }",
                "+    },",
                "+    \"postcss-colormin\": {",
                "+      \"version\": \"2.2.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/postcss-colormin/-/postcss-colormin-2.2.2.tgz\",",
                "+      \"integrity\": \"sha1-ZjFBfV8OkJo9fsJrJMio0eT5bks=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"colormin\": \"1.1.2\",",
                "+        \"postcss\": \"5.2.18\",",
                "+        \"postcss-value-parser\": \"3.3.0\"",
                "+      }",
                "+    },",
                "+    \"postcss-convert-values\": {",
                "+      \"version\": \"2.6.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/postcss-convert-values/-/postcss-convert-values-2.6.1.tgz\",",
                "+      \"integrity\": \"sha1-u9hZPFwf0uPRwyK7kl3K6Nrk1i0=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"postcss\": \"5.2.18\",",
                "+        \"postcss-value-parser\": \"3.3.0\"",
                "+      }",
                "+    },",
                "+    \"postcss-discard-comments\": {",
                "+      \"version\": \"2.0.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/postcss-discard-comments/-/postcss-discard-comments-2.0.4.tgz\",",
                "+      \"integrity\": \"sha1-vv6J+v1bPazlzM5Rt2uBUUvgDj0=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"postcss\": \"5.2.18\"",
                "+      }",
                "+    },",
                "+    \"postcss-discard-duplicates\": {",
                "+      \"version\": \"2.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/postcss-discard-duplicates/-/postcss-discard-duplicates-2.1.0.tgz\",",
                "+      \"integrity\": \"sha1-uavye4isGIFYpesSq8riAmO5GTI=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"postcss\": \"5.2.18\"",
                "+      }",
                "+    },",
                "+    \"postcss-discard-empty\": {",
                "+      \"version\": \"2.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/postcss-discard-empty/-/postcss-discard-empty-2.1.0.tgz\",",
                "+      \"integrity\": \"sha1-0rS9nVztXr2Nyt52QMfXzX9PkrU=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"postcss\": \"5.2.18\"",
                "+      }",
                "+    },",
                "+    \"postcss-discard-overridden\": {",
                "+      \"version\": \"0.1.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/postcss-discard-overridden/-/postcss-discard-overridden-0.1.1.tgz\",",
                "+      \"integrity\": \"sha1-ix6vVU9ob7KIzYdMVWZ7CqNmjVg=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"postcss\": \"5.2.18\"",
                "+      }",
                "+    },",
                "+    \"postcss-discard-unused\": {",
                "+      \"version\": \"2.2.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/postcss-discard-unused/-/postcss-discard-unused-2.2.3.tgz\",",
                "+      \"integrity\": \"sha1-vOMLLMWR/8Y0Mitfs0ZLbZNPRDM=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"postcss\": \"5.2.18\",",
                "+        \"uniqs\": \"2.0.0\"",
                "+      }",
                "+    },",
                "+    \"postcss-filter-plugins\": {",
                "+      \"version\": \"2.0.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/postcss-filter-plugins/-/postcss-filter-plugins-2.0.2.tgz\",",
                "+      \"integrity\": \"sha1-bYWGJTTXNaxCDkqFgG4fXUKG2Ew=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"postcss\": \"5.2.18\",",
                "+        \"uniqid\": \"4.1.1\"",
                "+      }",
                "+    },",
                "+    \"postcss-load-config\": {",
                "+      \"version\": \"1.2.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/postcss-load-config/-/postcss-load-config-1.2.0.tgz\",",
                "+      \"integrity\": \"sha1-U56a/J3chiASHr+djDZz4M5Q0oo=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"cosmiconfig\": \"2.2.2\",",
                "+        \"object-assign\": \"4.1.1\",",
                "+        \"postcss-load-options\": \"1.2.0\",",
                "+        \"postcss-load-plugins\": \"2.3.0\"",
                "+      }",
                "+    },",
                "+    \"postcss-load-options\": {",
                "+      \"version\": \"1.2.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/postcss-load-options/-/postcss-load-options-1.2.0.tgz\",",
                "+      \"integrity\": \"sha1-sJixVZ3awt8EvAuzdfmaXP4rbYw=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"cosmiconfig\": \"2.2.2\",",
                "+        \"object-assign\": \"4.1.1\"",
                "+      }",
                "+    },",
                "+    \"postcss-load-plugins\": {",
                "+      \"version\": \"2.3.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/postcss-load-plugins/-/postcss-load-plugins-2.3.0.tgz\",",
                "+      \"integrity\": \"sha1-dFdoEWWZrKLwCfrUJrABdQSdjZI=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"cosmiconfig\": \"2.2.2\",",
                "+        \"object-assign\": \"4.1.1\"",
                "+      }",
                "+    },",
                "+    \"postcss-loader\": {",
                "+      \"version\": \"1.3.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/postcss-loader/-/postcss-loader-1.3.3.tgz\",",
                "+      \"integrity\": \"sha1-piHqH6KQYqg5cqRvVEhncTAZFus=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"loader-utils\": \"1.1.0\",",
                "+        \"object-assign\": \"4.1.1\",",
                "+        \"postcss\": \"5.2.18\",",
                "+        \"postcss-load-config\": \"1.2.0\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"loader-utils\": {",
                "+          \"version\": \"1.1.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/loader-utils/-/loader-utils-1.1.0.tgz\",",
                "+          \"integrity\": \"sha1-yYrvSIvM7aL/teLeZG1qdUQp9c0=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"big.js\": \"3.2.0\",",
                "+            \"emojis-list\": \"2.1.0\",",
                "+            \"json5\": \"0.5.1\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"postcss-merge-idents\": {",
                "+      \"version\": \"2.1.7\",",
                "+      \"resolved\": \"https://registry.npmjs.org/postcss-merge-idents/-/postcss-merge-idents-2.1.7.tgz\",",
                "+      \"integrity\": \"sha1-TFUwMTwI4dWzu/PSu8dH4njuonA=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"has\": \"1.0.1\",",
                "+        \"postcss\": \"5.2.18\",",
                "+        \"postcss-value-parser\": \"3.3.0\"",
                "+      }",
                "+    },",
                "+    \"postcss-merge-longhand\": {",
                "+      \"version\": \"2.0.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/postcss-merge-longhand/-/postcss-merge-longhand-2.0.2.tgz\",",
                "+      \"integrity\": \"sha1-I9kM0Sewp3mUkVMyc5A0oaTz1lg=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"postcss\": \"5.2.18\"",
                "+      }",
                "+    },",
                "+    \"postcss-merge-rules\": {",
                "+      \"version\": \"2.1.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/postcss-merge-rules/-/postcss-merge-rules-2.1.2.tgz\",",
                "+      \"integrity\": \"sha1-0d9d+qexrMO+VT8OnhDofGG19yE=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"browserslist\": \"1.7.7\",",
                "+        \"caniuse-api\": \"1.6.1\",",
                "+        \"postcss\": \"5.2.18\",",
                "+        \"postcss-selector-parser\": \"2.2.3\",",
                "+        \"vendors\": \"1.0.1\"",
                "+      }",
                "+    },",
                "+    \"postcss-message-helpers\": {",
                "+      \"version\": \"2.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/postcss-message-helpers/-/postcss-message-helpers-2.0.0.tgz\",",
                "+      \"integrity\": \"sha1-pPL0+rbk/gAvCu0ABHjN9S+bpg4=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"postcss-minify-font-values\": {",
                "+      \"version\": \"1.0.5\",",
                "+      \"resolved\": \"https://registry.npmjs.org/postcss-minify-font-values/-/postcss-minify-font-values-1.0.5.tgz\",",
                "+      \"integrity\": \"sha1-S1jttWZB66fIR0qzUmyv17vey2k=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"object-assign\": \"4.1.1\",",
                "+        \"postcss\": \"5.2.18\",",
                "+        \"postcss-value-parser\": \"3.3.0\"",
                "+      }",
                "+    },",
                "+    \"postcss-minify-gradients\": {",
                "+      \"version\": \"1.0.5\",",
                "+      \"resolved\": \"https://registry.npmjs.org/postcss-minify-gradients/-/postcss-minify-gradients-1.0.5.tgz\",",
                "+      \"integrity\": \"sha1-Xb2hE3NwP4PPtKPqOIHY11/15uE=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"postcss\": \"5.2.18\",",
                "+        \"postcss-value-parser\": \"3.3.0\"",
                "+      }",
                "+    },",
                "+    \"postcss-minify-params\": {",
                "+      \"version\": \"1.2.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/postcss-minify-params/-/postcss-minify-params-1.2.2.tgz\",",
                "+      \"integrity\": \"sha1-rSzgcTc7lDs9kwo/pZo1jCjW8fM=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"alphanum-sort\": \"1.0.2\",",
                "+        \"postcss\": \"5.2.18\",",
                "+        \"postcss-value-parser\": \"3.3.0\",",
                "+        \"uniqs\": \"2.0.0\"",
                "+      }",
                "+    },",
                "+    \"postcss-minify-selectors\": {",
                "+      \"version\": \"2.1.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/postcss-minify-selectors/-/postcss-minify-selectors-2.1.1.tgz\",",
                "+      \"integrity\": \"sha1-ssapjAByz5G5MtGkllCBFDEXNb8=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"alphanum-sort\": \"1.0.2\",",
                "+        \"has\": \"1.0.1\",",
                "+        \"postcss\": \"5.2.18\",",
                "+        \"postcss-selector-parser\": \"2.2.3\"",
                "+      }",
                "+    },",
                "+    \"postcss-modules-extract-imports\": {",
                "+      \"version\": \"1.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/postcss-modules-extract-imports/-/postcss-modules-extract-imports-1.1.0.tgz\",",
                "+      \"integrity\": \"sha1-thTJcgvmgW6u41+zpfqh26agXds=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"postcss\": \"6.0.14\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"ansi-styles\": {",
                "+          \"version\": \"3.2.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.0.tgz\",",
                "+          \"integrity\": \"sha512-NnSOmMEYtVR2JVMIGTzynRkkaxtiq1xnFBcdQD/DnNCYPoEPsVJhM98BDyaoNOQIi7p4okdi3E27eN7GQbsUug==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"color-convert\": \"1.9.1\"",
                "+          }",
                "+        },",
                "+        \"chalk\": {",
                "+          \"version\": \"2.3.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/chalk/-/chalk-2.3.0.tgz\",",
                "+          \"integrity\": \"sha512-Az5zJR2CBujap2rqXGaJKaPHyJ0IrUimvYNX+ncCy8PJP4ltOGTrHUIo097ZaL2zMeKYpiCdqDvS6zdrTFok3Q==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"ansi-styles\": \"3.2.0\",",
                "+            \"escape-string-regexp\": \"1.0.5\",",
                "+            \"supports-color\": \"4.5.0\"",
                "+          }",
                "+        },",
                "+        \"has-flag\": {",
                "+          \"version\": \"2.0.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/has-flag/-/has-flag-2.0.0.tgz\",",
                "+          \"integrity\": \"sha1-6CB68cx7MNRGzHC3NLXovhj4jVE=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"postcss\": {",
                "+          \"version\": \"6.0.14\",",
                "+          \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-6.0.14.tgz\",",
                "+          \"integrity\": \"sha512-NJ1z0f+1offCgadPhz+DvGm5Mkci+mmV5BqD13S992o0Xk9eElxUfPPF+t2ksH5R/17gz4xVK8KWocUQ5o3Rog==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"chalk\": \"2.3.0\",",
                "+            \"source-map\": \"0.6.1\",",
                "+            \"supports-color\": \"4.5.0\"",
                "+          }",
                "+        },",
                "+        \"source-map\": {",
                "+          \"version\": \"0.6.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz\",",
                "+          \"integrity\": \"sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"supports-color\": {",
                "+          \"version\": \"4.5.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/supports-color/-/supports-color-4.5.0.tgz\",",
                "+          \"integrity\": \"sha1-vnoN5ITexcXN34s9WRJQRJEvY1s=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"has-flag\": \"2.0.0\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"postcss-modules-local-by-default\": {",
                "+      \"version\": \"1.2.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/postcss-modules-local-by-default/-/postcss-modules-local-by-default-1.2.0.tgz\",",
                "+      \"integrity\": \"sha1-99gMOYxaOT+nlkRmvRlQCn1hwGk=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"css-selector-tokenizer\": \"0.7.0\",",
                "+        \"postcss\": \"6.0.14\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"ansi-styles\": {",
                "+          \"version\": \"3.2.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.0.tgz\",",
                "+          \"integrity\": \"sha512-NnSOmMEYtVR2JVMIGTzynRkkaxtiq1xnFBcdQD/DnNCYPoEPsVJhM98BDyaoNOQIi7p4okdi3E27eN7GQbsUug==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"color-convert\": \"1.9.1\"",
                "+          }",
                "+        },",
                "+        \"chalk\": {",
                "+          \"version\": \"2.3.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/chalk/-/chalk-2.3.0.tgz\",",
                "+          \"integrity\": \"sha512-Az5zJR2CBujap2rqXGaJKaPHyJ0IrUimvYNX+ncCy8PJP4ltOGTrHUIo097ZaL2zMeKYpiCdqDvS6zdrTFok3Q==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"ansi-styles\": \"3.2.0\",",
                "+            \"escape-string-regexp\": \"1.0.5\",",
                "+            \"supports-color\": \"4.5.0\"",
                "+          }",
                "+        },",
                "+        \"has-flag\": {",
                "+          \"version\": \"2.0.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/has-flag/-/has-flag-2.0.0.tgz\",",
                "+          \"integrity\": \"sha1-6CB68cx7MNRGzHC3NLXovhj4jVE=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"postcss\": {",
                "+          \"version\": \"6.0.14\",",
                "+          \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-6.0.14.tgz\",",
                "+          \"integrity\": \"sha512-NJ1z0f+1offCgadPhz+DvGm5Mkci+mmV5BqD13S992o0Xk9eElxUfPPF+t2ksH5R/17gz4xVK8KWocUQ5o3Rog==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"chalk\": \"2.3.0\",",
                "+            \"source-map\": \"0.6.1\",",
                "+            \"supports-color\": \"4.5.0\"",
                "+          }",
                "+        },",
                "+        \"source-map\": {",
                "+          \"version\": \"0.6.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz\",",
                "+          \"integrity\": \"sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"supports-color\": {",
                "+          \"version\": \"4.5.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/supports-color/-/supports-color-4.5.0.tgz\",",
                "+          \"integrity\": \"sha1-vnoN5ITexcXN34s9WRJQRJEvY1s=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"has-flag\": \"2.0.0\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"postcss-modules-scope\": {",
                "+      \"version\": \"1.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/postcss-modules-scope/-/postcss-modules-scope-1.1.0.tgz\",",
                "+      \"integrity\": \"sha1-1upkmUx5+XtipytCb75gVqGUu5A=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"css-selector-tokenizer\": \"0.7.0\",",
                "+        \"postcss\": \"6.0.14\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"ansi-styles\": {",
                "+          \"version\": \"3.2.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.0.tgz\",",
                "+          \"integrity\": \"sha512-NnSOmMEYtVR2JVMIGTzynRkkaxtiq1xnFBcdQD/DnNCYPoEPsVJhM98BDyaoNOQIi7p4okdi3E27eN7GQbsUug==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"color-convert\": \"1.9.1\"",
                "+          }",
                "+        },",
                "+        \"chalk\": {",
                "+          \"version\": \"2.3.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/chalk/-/chalk-2.3.0.tgz\",",
                "+          \"integrity\": \"sha512-Az5zJR2CBujap2rqXGaJKaPHyJ0IrUimvYNX+ncCy8PJP4ltOGTrHUIo097ZaL2zMeKYpiCdqDvS6zdrTFok3Q==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"ansi-styles\": \"3.2.0\",",
                "+            \"escape-string-regexp\": \"1.0.5\",",
                "+            \"supports-color\": \"4.5.0\"",
                "+          }",
                "+        },",
                "+        \"has-flag\": {",
                "+          \"version\": \"2.0.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/has-flag/-/has-flag-2.0.0.tgz\",",
                "+          \"integrity\": \"sha1-6CB68cx7MNRGzHC3NLXovhj4jVE=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"postcss\": {",
                "+          \"version\": \"6.0.14\",",
                "+          \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-6.0.14.tgz\",",
                "+          \"integrity\": \"sha512-NJ1z0f+1offCgadPhz+DvGm5Mkci+mmV5BqD13S992o0Xk9eElxUfPPF+t2ksH5R/17gz4xVK8KWocUQ5o3Rog==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"chalk\": \"2.3.0\",",
                "+            \"source-map\": \"0.6.1\",",
                "+            \"supports-color\": \"4.5.0\"",
                "+          }",
                "+        },",
                "+        \"source-map\": {",
                "+          \"version\": \"0.6.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz\",",
                "+          \"integrity\": \"sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"supports-color\": {",
                "+          \"version\": \"4.5.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/supports-color/-/supports-color-4.5.0.tgz\",",
                "+          \"integrity\": \"sha1-vnoN5ITexcXN34s9WRJQRJEvY1s=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"has-flag\": \"2.0.0\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"postcss-modules-values\": {",
                "+      \"version\": \"1.3.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/postcss-modules-values/-/postcss-modules-values-1.3.0.tgz\",",
                "+      \"integrity\": \"sha1-7P+p1+GSUYOJ9CrQ6D9yrsRW6iA=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"icss-replace-symbols\": \"1.1.0\",",
                "+        \"postcss\": \"6.0.14\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"ansi-styles\": {",
                "+          \"version\": \"3.2.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.0.tgz\",",
                "+          \"integrity\": \"sha512-NnSOmMEYtVR2JVMIGTzynRkkaxtiq1xnFBcdQD/DnNCYPoEPsVJhM98BDyaoNOQIi7p4okdi3E27eN7GQbsUug==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"color-convert\": \"1.9.1\"",
                "+          }",
                "+        },",
                "+        \"chalk\": {",
                "+          \"version\": \"2.3.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/chalk/-/chalk-2.3.0.tgz\",",
                "+          \"integrity\": \"sha512-Az5zJR2CBujap2rqXGaJKaPHyJ0IrUimvYNX+ncCy8PJP4ltOGTrHUIo097ZaL2zMeKYpiCdqDvS6zdrTFok3Q==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"ansi-styles\": \"3.2.0\",",
                "+            \"escape-string-regexp\": \"1.0.5\",",
                "+            \"supports-color\": \"4.5.0\"",
                "+          }",
                "+        },",
                "+        \"has-flag\": {",
                "+          \"version\": \"2.0.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/has-flag/-/has-flag-2.0.0.tgz\",",
                "+          \"integrity\": \"sha1-6CB68cx7MNRGzHC3NLXovhj4jVE=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"postcss\": {",
                "+          \"version\": \"6.0.14\",",
                "+          \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-6.0.14.tgz\",",
                "+          \"integrity\": \"sha512-NJ1z0f+1offCgadPhz+DvGm5Mkci+mmV5BqD13S992o0Xk9eElxUfPPF+t2ksH5R/17gz4xVK8KWocUQ5o3Rog==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"chalk\": \"2.3.0\",",
                "+            \"source-map\": \"0.6.1\",",
                "+            \"supports-color\": \"4.5.0\"",
                "+          }",
                "+        },",
                "+        \"source-map\": {",
                "+          \"version\": \"0.6.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz\",",
                "+          \"integrity\": \"sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"supports-color\": {",
                "+          \"version\": \"4.5.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/supports-color/-/supports-color-4.5.0.tgz\",",
                "+          \"integrity\": \"sha1-vnoN5ITexcXN34s9WRJQRJEvY1s=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"has-flag\": \"2.0.0\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"postcss-normalize-charset\": {",
                "+      \"version\": \"1.1.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/postcss-normalize-charset/-/postcss-normalize-charset-1.1.1.tgz\",",
                "+      \"integrity\": \"sha1-757nEhLX/nWceO0WL2HtYrXLk/E=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"postcss\": \"5.2.18\"",
                "+      }",
                "+    },",
                "+    \"postcss-normalize-url\": {",
                "+      \"version\": \"3.0.8\",",
                "+      \"resolved\": \"https://registry.npmjs.org/postcss-normalize-url/-/postcss-normalize-url-3.0.8.tgz\",",
                "+      \"integrity\": \"sha1-EI90s/L82viRov+j6kWSJ5/HgiI=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"is-absolute-url\": \"2.1.0\",",
                "+        \"normalize-url\": \"1.9.1\",",
                "+        \"postcss\": \"5.2.18\",",
                "+        \"postcss-value-parser\": \"3.3.0\"",
                "+      }",
                "+    },",
                "+    \"postcss-ordered-values\": {",
                "+      \"version\": \"2.2.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/postcss-ordered-values/-/postcss-ordered-values-2.2.3.tgz\",",
                "+      \"integrity\": \"sha1-7sbCpntsQSqNsgQud/6NpD+VwR0=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"postcss\": \"5.2.18\",",
                "+        \"postcss-value-parser\": \"3.3.0\"",
                "+      }",
                "+    },",
                "+    \"postcss-reduce-idents\": {",
                "+      \"version\": \"2.4.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/postcss-reduce-idents/-/postcss-reduce-idents-2.4.0.tgz\",",
                "+      \"integrity\": \"sha1-wsbSDMlYKE9qv75j92Cb9AkFmtM=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"postcss\": \"5.2.18\",",
                "+        \"postcss-value-parser\": \"3.3.0\"",
                "+      }",
                "+    },",
                "+    \"postcss-reduce-initial\": {",
                "+      \"version\": \"1.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/postcss-reduce-initial/-/postcss-reduce-initial-1.0.1.tgz\",",
                "+      \"integrity\": \"sha1-aPgGlfBF0IJjqHmtJA343WT2ROo=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"postcss\": \"5.2.18\"",
                "+      }",
                "+    },",
                "+    \"postcss-reduce-transforms\": {",
                "+      \"version\": \"1.0.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/postcss-reduce-transforms/-/postcss-reduce-transforms-1.0.4.tgz\",",
                "+      \"integrity\": \"sha1-/3b02CEkN7McKYpC0uFEQCV3GuE=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"has\": \"1.0.1\",",
                "+        \"postcss\": \"5.2.18\",",
                "+        \"postcss-value-parser\": \"3.3.0\"",
                "+      }",
                "+    },",
                "+    \"postcss-selector-parser\": {",
                "+      \"version\": \"2.2.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/postcss-selector-parser/-/postcss-selector-parser-2.2.3.tgz\",",
                "+      \"integrity\": \"sha1-+UN3iGBsPJrO4W/+jYsWKX8nu5A=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"flatten\": \"1.0.2\",",
                "+        \"indexes-of\": \"1.0.1\",",
                "+        \"uniq\": \"1.0.1\"",
                "+      }",
                "+    },",
                "+    \"postcss-svgo\": {",
                "+      \"version\": \"2.1.6\",",
                "+      \"resolved\": \"https://registry.npmjs.org/postcss-svgo/-/postcss-svgo-2.1.6.tgz\",",
                "+      \"integrity\": \"sha1-tt8YqmE7Zm4TPwittSGcJoSsEI0=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"is-svg\": \"2.1.0\",",
                "+        \"postcss\": \"5.2.18\",",
                "+        \"postcss-value-parser\": \"3.3.0\",",
                "+        \"svgo\": \"0.7.2\"",
                "+      }",
                "+    },",
                "+    \"postcss-unique-selectors\": {",
                "+      \"version\": \"2.0.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/postcss-unique-selectors/-/postcss-unique-selectors-2.0.2.tgz\",",
                "+      \"integrity\": \"sha1-mB1X0p3csz57Hf4f1DuGSfkzyh0=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"alphanum-sort\": \"1.0.2\",",
                "+        \"postcss\": \"5.2.18\",",
                "+        \"uniqs\": \"2.0.0\"",
                "+      }",
                "+    },",
                "+    \"postcss-value-parser\": {",
                "+      \"version\": \"3.3.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/postcss-value-parser/-/postcss-value-parser-3.3.0.tgz\",",
                "+      \"integrity\": \"sha1-h/OPnxj3dKSrTIojL1xc6IcqnRU=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"postcss-zindex\": {",
                "+      \"version\": \"2.2.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/postcss-zindex/-/postcss-zindex-2.2.0.tgz\",",
                "+      \"integrity\": \"sha1-0hCd3AVbka9n/EyzsCWUZjnSryI=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"has\": \"1.0.1\",",
                "+        \"postcss\": \"5.2.18\",",
                "+        \"uniqs\": \"2.0.0\"",
                "+      }",
                "+    },",
                "+    \"prelude-ls\": {",
                "+      \"version\": \"1.1.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.1.2.tgz\",",
                "+      \"integrity\": \"sha1-IZMqVJ9eUv/ZqCf1cOBL5iqX2lQ=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"prepend-http\": {",
                "+      \"version\": \"1.0.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/prepend-http/-/prepend-http-1.0.4.tgz\",",
                "+      \"integrity\": \"sha1-1PRWKwzjaW5BrFLQ4ALlemNdxtw=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"preserve\": {",
                "+      \"version\": \"0.2.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/preserve/-/preserve-0.2.0.tgz\",",
                "+      \"integrity\": \"sha1-gV7R9uvGWSb4ZbMQwHE7yzMVzks=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"pretty-bytes\": {",
                "+      \"version\": \"0.1.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/pretty-bytes/-/pretty-bytes-0.1.2.tgz\",",
                "+      \"integrity\": \"sha1-zZApTVihyk6KXQ+5yCJZmIgazwA=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"pretty-error\": {",
                "+      \"version\": \"2.1.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/pretty-error/-/pretty-error-2.1.1.tgz\",",
                "+      \"integrity\": \"sha1-X0+HyPkeWuPzuoerTPXgOxoX8aM=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"renderkid\": \"2.0.1\",",
                "+        \"utila\": \"0.4.0\"",
                "+      }",
                "+    },",
                "+    \"pretty-ms\": {",
                "+      \"version\": \"0.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/pretty-ms/-/pretty-ms-0.1.0.tgz\",",
                "+      \"integrity\": \"sha1-fGnMhmumeU6e7wFo/u6t4Lr6fiI=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"private\": {",
                "+      \"version\": \"0.1.8\",",
                "+      \"resolved\": \"https://registry.npmjs.org/private/-/private-0.1.8.tgz\",",
                "+      \"integrity\": \"sha512-VvivMrbvd2nKkiG38qjULzlc+4Vx4wm/whI9pQD35YrARNnhxeiRktSOhSukRLFNlzg6Br/cJPet5J/u19r/mg==\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"process\": {",
                "+      \"version\": \"0.11.10\",",
                "+      \"resolved\": \"https://registry.npmjs.org/process/-/process-0.11.10.tgz\",",
                "+      \"integrity\": \"sha1-czIwDoQBYb2j5podHZGn1LwW8YI=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"process-nextick-args\": {",
                "+      \"version\": \"1.0.7\",",
                "+      \"resolved\": \"https://registry.npmjs.org/process-nextick-args/-/process-nextick-args-1.0.7.tgz\",",
                "+      \"integrity\": \"sha1-FQ4gt1ZZCtP5EJPyWk8q2L/zC6M=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"progress\": {",
                "+      \"version\": \"1.1.8\",",
                "+      \"resolved\": \"https://registry.npmjs.org/progress/-/progress-1.1.8.tgz\",",
                "+      \"integrity\": \"sha1-4mDHj2Fhzdmw5WzD4Khd4Xx6V74=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"propprop\": {",
                "+      \"version\": \"0.3.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/propprop/-/propprop-0.3.1.tgz\",",
                "+      \"integrity\": \"sha1-oEmjVouJZEAGfRXY7J8zc15XAXg=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"protractor\": {",
                "+      \"version\": \"5.2.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/protractor/-/protractor-5.2.1.tgz\",",
                "+      \"integrity\": \"sha512-oasutUD/4WUAZdQRo6EtWlVmvgwxWCkcc49XaTiETRPDffRoj8JAQg6gpv42aiP+qyUuK6qJS/XYNBI4Me44Gw==\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"@types/node\": \"6.0.92\",",
                "+        \"@types/q\": \"0.0.32\",",
                "+        \"@types/selenium-webdriver\": \"2.53.43\",",
                "+        \"blocking-proxy\": \"1.0.1\",",
                "+        \"chalk\": \"1.1.3\",",
                "+        \"glob\": \"7.1.2\",",
                "+        \"jasmine\": \"2.8.0\",",
                "+        \"jasminewd2\": \"2.2.0\",",
                "+        \"optimist\": \"0.6.1\",",
                "+        \"q\": \"1.4.1\",",
                "+        \"saucelabs\": \"1.3.0\",",
                "+        \"selenium-webdriver\": \"3.6.0\",",
                "+        \"source-map-support\": \"0.4.18\",",
                "+        \"webdriver-js-extender\": \"1.0.0\",",
                "+        \"webdriver-manager\": \"12.0.6\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"adm-zip\": {",
                "+          \"version\": \"0.4.7\",",
                "+          \"resolved\": \"https://registry.npmjs.org/adm-zip/-/adm-zip-0.4.7.tgz\",",
                "+          \"integrity\": \"sha1-hgbCy/HEJs6MjsABdER/1Jtur8E=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"glob\": {",
                "+          \"version\": \"7.1.2\",",
                "+          \"resolved\": \"https://registry.npmjs.org/glob/-/glob-7.1.2.tgz\",",
                "+          \"integrity\": \"sha512-MJTUg1kjuLeQCJ+ccE4Vpa6kKVXkPYJ2mOCQyUuKLcLQsdrMCpBPUi8qVE6+YuaJkozeA9NusTAw3hLr8Xe5EQ==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"fs.realpath\": \"1.0.0\",",
                "+            \"inflight\": \"1.0.6\",",
                "+            \"inherits\": \"2.0.3\",",
                "+            \"minimatch\": \"3.0.4\",",
                "+            \"once\": \"1.4.0\",",
                "+            \"path-is-absolute\": \"1.0.1\"",
                "+          }",
                "+        },",
                "+        \"minimatch\": {",
                "+          \"version\": \"3.0.4\",",
                "+          \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-3.0.4.tgz\",",
                "+          \"integrity\": \"sha512-yJHVQEhyqPLUTgt9B83PXu6W3rx4MvvHvSUvToogpwoGDOUQ+yDrR0HRot+yOCdCO7u4hX3pWft6kWBBcqh0UA==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"brace-expansion\": \"1.1.8\"",
                "+          }",
                "+        },",
                "+        \"minimist\": {",
                "+          \"version\": \"1.2.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/minimist/-/minimist-1.2.0.tgz\",",
                "+          \"integrity\": \"sha1-o1AIsg9BOD7sH7kU9M1d95omQoQ=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"q\": {",
                "+          \"version\": \"1.4.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/q/-/q-1.4.1.tgz\",",
                "+          \"integrity\": \"sha1-VXBbzZPF82c1MMLCy8DCs63cKG4=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"webdriver-manager\": {",
                "+          \"version\": \"12.0.6\",",
                "+          \"resolved\": \"https://registry.npmjs.org/webdriver-manager/-/webdriver-manager-12.0.6.tgz\",",
                "+          \"integrity\": \"sha1-PfGkgZdwELTL+MnYXHpXeCjA5ws=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"adm-zip\": \"0.4.7\",",
                "+            \"chalk\": \"1.1.3\",",
                "+            \"del\": \"2.2.2\",",
                "+            \"glob\": \"7.1.2\",",
                "+            \"ini\": \"1.3.5\",",
                "+            \"minimist\": \"1.2.0\",",
                "+            \"q\": \"1.4.1\",",
                "+            \"request\": \"2.83.0\",",
                "+            \"rimraf\": \"2.6.2\",",
                "+            \"semver\": \"5.4.1\",",
                "+            \"xml2js\": \"0.4.19\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"proxy-addr\": {",
                "+      \"version\": \"2.0.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.2.tgz\",",
                "+      \"integrity\": \"sha1-ZXFQT0e7mI7IGAJT+F3X4UlSvew=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"forwarded\": \"0.1.2\",",
                "+        \"ipaddr.js\": \"1.5.2\"",
                "+      }",
                "+    },",
                "+    \"prr\": {",
                "+      \"version\": \"1.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/prr/-/prr-1.0.1.tgz\",",
                "+      \"integrity\": \"sha1-0/wRS6BplaRexok/SEzrHXj19HY=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"ps-tree\": {",
                "+      \"version\": \"1.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/ps-tree/-/ps-tree-1.1.0.tgz\",",
                "+      \"integrity\": \"sha1-tCGyQUDWID8e08dplrRCewjowBQ=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"event-stream\": \"3.3.4\"",
                "+      }",
                "+    },",
                "+    \"pseudomap\": {",
                "+      \"version\": \"1.0.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/pseudomap/-/pseudomap-1.0.2.tgz\",",
                "+      \"integrity\": \"sha1-8FKijacOYYkX7wqKw0wa5aaChrM=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"punycode\": {",
                "+      \"version\": \"1.4.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/punycode/-/punycode-1.4.1.tgz\",",
                "+      \"integrity\": \"sha1-wNWmOycYgArY4esPpSachN1BhF4=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"q\": {",
                "+      \"version\": \"1.5.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/q/-/q-1.5.1.tgz\",",
                "+      \"integrity\": \"sha1-fjL3W0E4EpHQRhHxvxQQmsAGUdc=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"qjobs\": {",
                "+      \"version\": \"1.1.5\",",
                "+      \"resolved\": \"https://registry.npmjs.org/qjobs/-/qjobs-1.1.5.tgz\",",
                "+      \"integrity\": \"sha1-ZZ3p8s+NzCehSBJ28gU3cnI4LnM=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"qs\": {",
                "+      \"version\": \"6.5.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/qs/-/qs-6.5.1.tgz\",",
                "+      \"integrity\": \"sha512-eRzhrN1WSINYCDCbrz796z37LOe3m5tmW7RQf6oBntukAG1nmovJvhnwHHRMAfeoItc1m2Hk02WER2aQ/iqs+A==\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"query-string\": {",
                "+      \"version\": \"4.3.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/query-string/-/query-string-4.3.4.tgz\",",
                "+      \"integrity\": \"sha1-u7aTucqRXCMlFbIosaArYJBD2+s=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"object-assign\": \"4.1.1\",",
                "+        \"strict-uri-encode\": \"1.1.0\"",
                "+      }",
                "+    },",
                "+    \"querystring\": {",
                "+      \"version\": \"0.2.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/querystring/-/querystring-0.2.0.tgz\",",
                "+      \"integrity\": \"sha1-sgmEkgO7Jd+CDadW50cAWHhSFiA=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"querystring-es3\": {",
                "+      \"version\": \"0.2.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/querystring-es3/-/querystring-es3-0.2.1.tgz\",",
                "+      \"integrity\": \"sha1-nsYfeQSYdXB9aUFFlv2Qek1xHnM=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"querystringify\": {",
                "+      \"version\": \"0.0.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/querystringify/-/querystringify-0.0.4.tgz\",",
                "+      \"integrity\": \"sha1-DPf4T5Rj/wrlHExLFC2VvjdyTZw=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"randomatic\": {",
                "+      \"version\": \"1.1.7\",",
                "+      \"resolved\": \"https://registry.npmjs.org/randomatic/-/randomatic-1.1.7.tgz\",",
                "+      \"integrity\": \"sha512-D5JUjPyJbaJDkuAazpVnSfVkLlpeO3wDlPROTMLGKG1zMFNFRgrciKo1ltz/AzNTkqE0HzDx655QOL51N06how==\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"is-number\": \"3.0.0\",",
                "+        \"kind-of\": \"4.0.0\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"is-number\": {",
                "+          \"version\": \"3.0.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/is-number/-/is-number-3.0.0.tgz\",",
                "+          \"integrity\": \"sha1-JP1iAaR4LPUFYcgQJ2r8fRLXEZU=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"kind-of\": \"3.2.2\"",
                "+          },",
                "+          \"dependencies\": {",
                "+            \"kind-of\": {",
                "+              \"version\": \"3.2.2\",",
                "+              \"resolved\": \"https://registry.npmjs.org/kind-of/-/kind-of-3.2.2.tgz\",",
                "+              \"integrity\": \"sha1-MeohpzS6ubuw8yRm2JOupR5KPGQ=\",",
                "+              \"dev\": true,",
                "+              \"requires\": {",
                "+                \"is-buffer\": \"1.1.6\"",
                "+              }",
                "+            }",
                "+          }",
                "+        },",
                "+        \"kind-of\": {",
                "+          \"version\": \"4.0.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/kind-of/-/kind-of-4.0.0.tgz\",",
                "+          \"integrity\": \"sha1-IIE989cSkosgc3hpGkUGb65y3Vc=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"is-buffer\": \"1.1.6\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"range-parser\": {",
                "+      \"version\": \"1.2.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/range-parser/-/range-parser-1.2.0.tgz\",",
                "+      \"integrity\": \"sha1-9JvmtIeJTdxA3MlKMi9hEJLgDV4=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"raw-body\": {",
                "+      \"version\": \"2.3.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/raw-body/-/raw-body-2.3.2.tgz\",",
                "+      \"integrity\": \"sha1-vNYMd9Prk83gBQKVw/N5OJvIj4k=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"bytes\": \"3.0.0\",",
                "+        \"http-errors\": \"1.6.2\",",
                "+        \"iconv-lite\": \"0.4.19\",",
                "+        \"unpipe\": \"1.0.0\"",
                "+      }",
                "+    },",
                "+    \"raw-loader\": {",
                "+      \"version\": \"0.5.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/raw-loader/-/raw-loader-0.5.1.tgz\",",
                "+      \"integrity\": \"sha1-DD0L6u2KAclm2Xh793goElKpeao=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"read-pkg\": {",
                "+      \"version\": \"2.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/read-pkg/-/read-pkg-2.0.0.tgz\",",
                "+      \"integrity\": \"sha1-jvHAYjxqbbDcZxPEv6xGMysjaPg=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"load-json-file\": \"2.0.0\",",
                "+        \"normalize-package-data\": \"2.4.0\",",
                "+        \"path-type\": \"2.0.0\"",
                "+      }",
                "+    },",
                "+    \"read-pkg-up\": {",
                "+      \"version\": \"2.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/read-pkg-up/-/read-pkg-up-2.0.0.tgz\",",
                "+      \"integrity\": \"sha1-a3KoBImE4MQeeVEP1en6mbO1Sb4=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"find-up\": \"2.1.0\",",
                "+        \"read-pkg\": \"2.0.0\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"find-up\": {",
                "+          \"version\": \"2.1.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/find-up/-/find-up-2.1.0.tgz\",",
                "+          \"integrity\": \"sha1-RdG35QbHF93UgndaK3eSCjwMV6c=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"locate-path\": \"2.0.0\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"readable-stream\": {",
                "+      \"version\": \"1.0.34\",",
                "+      \"resolved\": \"https://registry.npmjs.org/readable-stream/-/readable-stream-1.0.34.tgz\",",
                "+      \"integrity\": \"sha1-Elgg40vIQtLyqq+v5MKRbuMsFXw=\",",
                "+      \"requires\": {",
                "+        \"core-util-is\": \"1.0.2\",",
                "+        \"inherits\": \"2.0.3\",",
                "+        \"isarray\": \"0.0.1\",",
                "+        \"string_decoder\": \"0.10.31\"",
                "+      }",
                "+    },",
                "+    \"readdirp\": {",
                "+      \"version\": \"2.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/readdirp/-/readdirp-2.1.0.tgz\",",
                "+      \"integrity\": \"sha1-TtCtBg3zBzMAxIRANz9y0cxkLXg=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"graceful-fs\": \"4.1.11\",",
                "+        \"minimatch\": \"3.0.4\",",
                "+        \"readable-stream\": \"2.3.3\",",
                "+        \"set-immediate-shim\": \"1.0.1\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"isarray\": {",
                "+          \"version\": \"1.0.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz\",",
                "+          \"integrity\": \"sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"minimatch\": {",
                "+          \"version\": \"3.0.4\",",
                "+          \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-3.0.4.tgz\",",
                "+          \"integrity\": \"sha512-yJHVQEhyqPLUTgt9B83PXu6W3rx4MvvHvSUvToogpwoGDOUQ+yDrR0HRot+yOCdCO7u4hX3pWft6kWBBcqh0UA==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"brace-expansion\": \"1.1.8\"",
                "+          }",
                "+        },",
                "+        \"readable-stream\": {",
                "+          \"version\": \"2.3.3\",",
                "+          \"resolved\": \"https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.3.tgz\",",
                "+          \"integrity\": \"sha512-m+qzzcn7KUxEmd1gMbchF+Y2eIUbieUaxkWtptyHywrX0rE8QEYqPC07Vuy4Wm32/xE16NcdBctb8S0Xe/5IeQ==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"core-util-is\": \"1.0.2\",",
                "+            \"inherits\": \"2.0.3\",",
                "+            \"isarray\": \"1.0.0\",",
                "+            \"process-nextick-args\": \"1.0.7\",",
                "+            \"safe-buffer\": \"5.1.1\",",
                "+            \"string_decoder\": \"1.0.3\",",
                "+            \"util-deprecate\": \"1.0.2\"",
                "+          }",
                "+        },",
                "+        \"string_decoder\": {",
                "+          \"version\": \"1.0.3\",",
                "+          \"resolved\": \"https://registry.npmjs.org/string_decoder/-/string_decoder-1.0.3.tgz\",",
                "+          \"integrity\": \"sha512-4AH6Z5fzNNBcH+6XDMfA/BTt87skxqJlO0lAh3Dker5zThcAxG6mKz+iGu308UKoPPQ8Dcqx/4JhujzltRa+hQ==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"safe-buffer\": \"5.1.1\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"readline2\": {",
                "+      \"version\": \"1.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/readline2/-/readline2-1.0.1.tgz\",",
                "+      \"integrity\": \"sha1-QQWWCP/BVHV7cV2ZidGZ/783LjU=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"code-point-at\": \"1.1.0\",",
                "+        \"is-fullwidth-code-point\": \"1.0.0\",",
                "+        \"mute-stream\": \"0.0.5\"",
                "+      }",
                "+    },",
                "+    \"rechoir\": {",
                "+      \"version\": \"0.6.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/rechoir/-/rechoir-0.6.2.tgz\",",
                "+      \"integrity\": \"sha1-hSBLVNuoLVdC4oyWdW70OvUOM4Q=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"resolve\": \"1.5.0\"",
                "+      }",
                "+    },",
                "+    \"redent\": {",
                "+      \"version\": \"1.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/redent/-/redent-1.0.0.tgz\",",
                "+      \"integrity\": \"sha1-z5Fqsf1fHxbfsggi3W7H9zDCr94=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"indent-string\": \"2.1.0\",",
                "+        \"strip-indent\": \"1.0.1\"",
                "+      }",
                "+    },",
                "+    \"reduce-css-calc\": {",
                "+      \"version\": \"1.3.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/reduce-css-calc/-/reduce-css-calc-1.3.0.tgz\",",
                "+      \"integrity\": \"sha1-dHyRTgSWFKTJz7umKYca0dKSdxY=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"balanced-match\": \"0.4.2\",",
                "+        \"math-expression-evaluator\": \"1.2.17\",",
                "+        \"reduce-function-call\": \"1.0.2\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"balanced-match\": {",
                "+          \"version\": \"0.4.2\",",
                "+          \"resolved\": \"https://registry.npmjs.org/balanced-match/-/balanced-match-0.4.2.tgz\",",
                "+          \"integrity\": \"sha1-yz8+PHMtwPAe5wtAPzAuYddwmDg=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"reduce-function-call\": {",
                "+      \"version\": \"1.0.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/reduce-function-call/-/reduce-function-call-1.0.2.tgz\",",
                "+      \"integrity\": \"sha1-WiAL+S4ON3UXUv5FsKszD9S2vpk=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"balanced-match\": \"0.4.2\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"balanced-match\": {",
                "+          \"version\": \"0.4.2\",",
                "+          \"resolved\": \"https://registry.npmjs.org/balanced-match/-/balanced-match-0.4.2.tgz\",",
                "+          \"integrity\": \"sha1-yz8+PHMtwPAe5wtAPzAuYddwmDg=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"regenerate\": {",
                "+      \"version\": \"1.3.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/regenerate/-/regenerate-1.3.3.tgz\",",
                "+      \"integrity\": \"sha512-jVpo1GadrDAK59t/0jRx5VxYWQEDkkEKi6+HjE3joFVLfDOh9Xrdh0dF1eSq+BI/SwvTQ44gSscJ8N5zYL61sg==\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"regenerator-runtime\": {",
                "+      \"version\": \"0.11.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/regenerator-runtime/-/regenerator-runtime-0.11.1.tgz\",",
                "+      \"integrity\": \"sha512-MguG95oij0fC3QV3URf4V2SDYGJhJnJGqvIIgdECeODCT98wSWDAJ94SSuVpYQUoTcGUIL6L4yNB7j1DFFHSBg==\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"regenerator-transform\": {",
                "+      \"version\": \"0.10.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/regenerator-transform/-/regenerator-transform-0.10.1.tgz\",",
                "+      \"integrity\": \"sha512-PJepbvDbuK1xgIgnau7Y90cwaAmO/LCLMI2mPvaXq2heGMR3aWW5/BQvYrhJ8jgmQjXewXvBjzfqKcVOmhjZ6Q==\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"babel-runtime\": \"6.26.0\",",
                "+        \"babel-types\": \"6.26.0\",",
                "+        \"private\": \"0.1.8\"",
                "+      }",
                "+    },",
                "+    \"regex-cache\": {",
                "+      \"version\": \"0.4.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/regex-cache/-/regex-cache-0.4.4.tgz\",",
                "+      \"integrity\": \"sha512-nVIZwtCjkC9YgvWkpM55B5rBhBYRZhAaJbgcFYXXsHnbZ9UZI9nnVWYZpBlCqv9ho2eZryPnWrZGsOdPwVWXWQ==\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"is-equal-shallow\": \"0.1.3\"",
                "+      }",
                "+    },",
                "+    \"regexpu-core\": {",
                "+      \"version\": \"2.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/regexpu-core/-/regexpu-core-2.0.0.tgz\",",
                "+      \"integrity\": \"sha1-SdA4g3uNz4v6W5pCE5k45uoq4kA=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"regenerate\": \"1.3.3\",",
                "+        \"regjsgen\": \"0.2.0\",",
                "+        \"regjsparser\": \"0.1.5\"",
                "+      }",
                "+    },",
                "+    \"regjsgen\": {",
                "+      \"version\": \"0.2.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/regjsgen/-/regjsgen-0.2.0.tgz\",",
                "+      \"integrity\": \"sha1-bAFq3qxVT3WCP+N6wFuS1aTtsfc=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"regjsparser\": {",
                "+      \"version\": \"0.1.5\",",
                "+      \"resolved\": \"https://registry.npmjs.org/regjsparser/-/regjsparser-0.1.5.tgz\",",
                "+      \"integrity\": \"sha1-fuj4Tcb6eS0/0K4ijSS9lJ6tIFw=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"jsesc\": \"0.5.0\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"jsesc\": {",
                "+          \"version\": \"0.5.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/jsesc/-/jsesc-0.5.0.tgz\",",
                "+          \"integrity\": \"sha1-597mbjXW/Bb3EP6R1c9p9w8IkR0=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"relateurl\": {",
                "+      \"version\": \"0.2.7\",",
                "+      \"resolved\": \"https://registry.npmjs.org/relateurl/-/relateurl-0.2.7.tgz\",",
                "+      \"integrity\": \"sha1-VNvzd+UUQKypCkzSdGANP/LYiKk=\"",
                "+    },",
                "+    \"remove-trailing-separator\": {",
                "+      \"version\": \"1.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/remove-trailing-separator/-/remove-trailing-separator-1.1.0.tgz\",",
                "+      \"integrity\": \"sha1-wkvOKig62tW8P1jg1IJJuSN52O8=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"renderkid\": {",
                "+      \"version\": \"2.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/renderkid/-/renderkid-2.0.1.tgz\",",
                "+      \"integrity\": \"sha1-iYyr/Ivt5Le5ETWj/9Mj5YwNsxk=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"css-select\": \"1.2.0\",",
                "+        \"dom-converter\": \"0.1.4\",",
                "+        \"htmlparser2\": \"3.3.0\",",
                "+        \"strip-ansi\": \"3.0.1\",",
                "+        \"utila\": \"0.3.3\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"domhandler\": {",
                "+          \"version\": \"2.1.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/domhandler/-/domhandler-2.1.0.tgz\",",
                "+          \"integrity\": \"sha1-0mRvXlf2w7qxHPbLBdPArPdBJZQ=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"domelementtype\": \"1.3.0\"",
                "+          }",
                "+        },",
                "+        \"domutils\": {",
                "+          \"version\": \"1.1.6\",",
                "+          \"resolved\": \"https://registry.npmjs.org/domutils/-/domutils-1.1.6.tgz\",",
                "+          \"integrity\": \"sha1-vdw94Jm5ou+sxRxiPyj0FuzFdIU=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"domelementtype\": \"1.3.0\"",
                "+          }",
                "+        },",
                "+        \"htmlparser2\": {",
                "+          \"version\": \"3.3.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/htmlparser2/-/htmlparser2-3.3.0.tgz\",",
                "+          \"integrity\": \"sha1-zHDQWln2VC5D8OaFyYLhTJJKnv4=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"domelementtype\": \"1.3.0\",",
                "+            \"domhandler\": \"2.1.0\",",
                "+            \"domutils\": \"1.1.6\",",
                "+            \"readable-stream\": \"1.0.34\"",
                "+          }",
                "+        },",
                "+        \"utila\": {",
                "+          \"version\": \"0.3.3\",",
                "+          \"resolved\": \"https://registry.npmjs.org/utila/-/utila-0.3.3.tgz\",",
                "+          \"integrity\": \"sha1-1+jn1+MJEHCSsF+NloiCTWM6QiY=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"repeat-element\": {",
                "+      \"version\": \"1.1.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/repeat-element/-/repeat-element-1.1.2.tgz\",",
                "+      \"integrity\": \"sha1-7wiaF40Ug7quTZPrmLT55OEdmQo=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"repeat-string\": {",
                "+      \"version\": \"1.6.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/repeat-string/-/repeat-string-1.6.1.tgz\",",
                "+      \"integrity\": \"sha1-jcrkcOHIirwtYA//Sndihtp15jc=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"repeating\": {",
                "+      \"version\": \"2.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/repeating/-/repeating-2.0.1.tgz\",",
                "+      \"integrity\": \"sha1-UhTFOpJtNVJwdSf7q0FdvAjQbdo=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"is-finite\": \"1.0.2\"",
                "+      }",
                "+    },",
                "+    \"request\": {",
                "+      \"version\": \"2.83.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/request/-/request-2.83.0.tgz\",",
                "+      \"integrity\": \"sha512-lR3gD69osqm6EYLk9wB/G1W/laGWjzH90t1vEa2xuxHD5KUrSzp9pUSfTm+YC5Nxt2T8nMPEvKlhbQayU7bgFw==\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"aws-sign2\": \"0.7.0\",",
                "+        \"aws4\": \"1.6.0\",",
                "+        \"caseless\": \"0.12.0\",",
                "+        \"combined-stream\": \"1.0.5\",",
                "+        \"extend\": \"3.0.1\",",
                "+        \"forever-agent\": \"0.6.1\",",
                "+        \"form-data\": \"2.3.1\",",
                "+        \"har-validator\": \"5.0.3\",",
                "+        \"hawk\": \"6.0.2\",",
                "+        \"http-signature\": \"1.2.0\",",
                "+        \"is-typedarray\": \"1.0.0\",",
                "+        \"isstream\": \"0.1.2\",",
                "+        \"json-stringify-safe\": \"5.0.1\",",
                "+        \"mime-types\": \"2.1.17\",",
                "+        \"oauth-sign\": \"0.8.2\",",
                "+        \"performance-now\": \"2.1.0\",",
                "+        \"qs\": \"6.5.1\",",
                "+        \"safe-buffer\": \"5.1.1\",",
                "+        \"stringstream\": \"0.0.5\",",
                "+        \"tough-cookie\": \"2.3.3\",",
                "+        \"tunnel-agent\": \"0.6.0\",",
                "+        \"uuid\": \"3.1.0\"",
                "+      }",
                "+    },",
                "+    \"request-progress\": {",
                "+      \"version\": \"2.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/request-progress/-/request-progress-2.0.1.tgz\",",
                "+      \"integrity\": \"sha1-XTa7V5YcZzqlt4jbyBQf3yO0Tgg=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"throttleit\": \"1.0.0\"",
                "+      }",
                "+    },",
                "+    \"require-from-string\": {",
                "+      \"version\": \"1.2.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/require-from-string/-/require-from-string-1.2.1.tgz\",",
                "+      \"integrity\": \"sha1-UpyczvJzgK3+yaL5ZbZJu+5jZBg=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"require-uncached\": {",
                "+      \"version\": \"1.0.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/require-uncached/-/require-uncached-1.0.3.tgz\",",
                "+      \"integrity\": \"sha1-Tg1W1slmL9MeQwEcS5WqSZVUIdM=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"caller-path\": \"0.1.0\",",
                "+        \"resolve-from\": \"1.0.1\"",
                "+      }",
                "+    },",
                "+    \"requires-port\": {",
                "+      \"version\": \"1.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/requires-port/-/requires-port-1.0.0.tgz\",",
                "+      \"integrity\": \"sha1-kl0mAdOaxIXgkc8NpcbmlNw9yv8=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"resolve\": {",
                "+      \"version\": \"1.5.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/resolve/-/resolve-1.5.0.tgz\",",
                "+      \"integrity\": \"sha512-hgoSGrc3pjzAPHNBg+KnFcK2HwlHTs/YrAGUr6qgTVUZmXv1UEXXl0bZNBKMA9fud6lRYFdPGz0xXxycPzmmiw==\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"path-parse\": \"1.0.5\"",
                "+      }",
                "+    },",
                "+    \"resolve-from\": {",
                "+      \"version\": \"1.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/resolve-from/-/resolve-from-1.0.1.tgz\",",
                "+      \"integrity\": \"sha1-Jsv+k10a7uq7Kbw/5a6wHpPUQiY=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"restore-cursor\": {",
                "+      \"version\": \"1.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/restore-cursor/-/restore-cursor-1.0.1.tgz\",",
                "+      \"integrity\": \"sha1-NGYfRohjJ/7SmRR5FSJS35LapUE=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"exit-hook\": \"1.1.1\",",
                "+        \"onetime\": \"1.1.0\"",
                "+      }",
                "+    },",
                "+    \"right-align\": {",
                "+      \"version\": \"0.1.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/right-align/-/right-align-0.1.3.tgz\",",
                "+      \"integrity\": \"sha1-YTObci/mo1FWiSENJOFMlhSGE+8=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"align-text\": \"0.1.4\"",
                "+      }",
                "+    },",
                "+    \"rimraf\": {",
                "+      \"version\": \"2.6.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/rimraf/-/rimraf-2.6.2.tgz\",",
                "+      \"integrity\": \"sha512-lreewLK/BlghmxtfH36YYVg1i8IAce4TI7oao75I1g245+6BctqTVQiBP3YUJ9C6DQOXJmkYR9X9fCLtCOJc5w==\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"glob\": \"7.1.2\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"glob\": {",
                "+          \"version\": \"7.1.2\",",
                "+          \"resolved\": \"https://registry.npmjs.org/glob/-/glob-7.1.2.tgz\",",
                "+          \"integrity\": \"sha512-MJTUg1kjuLeQCJ+ccE4Vpa6kKVXkPYJ2mOCQyUuKLcLQsdrMCpBPUi8qVE6+YuaJkozeA9NusTAw3hLr8Xe5EQ==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"fs.realpath\": \"1.0.0\",",
                "+            \"inflight\": \"1.0.6\",",
                "+            \"inherits\": \"2.0.3\",",
                "+            \"minimatch\": \"3.0.4\",",
                "+            \"once\": \"1.4.0\",",
                "+            \"path-is-absolute\": \"1.0.1\"",
                "+          }",
                "+        },",
                "+        \"minimatch\": {",
                "+          \"version\": \"3.0.4\",",
                "+          \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-3.0.4.tgz\",",
                "+          \"integrity\": \"sha512-yJHVQEhyqPLUTgt9B83PXu6W3rx4MvvHvSUvToogpwoGDOUQ+yDrR0HRot+yOCdCO7u4hX3pWft6kWBBcqh0UA==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"brace-expansion\": \"1.1.8\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"ripemd160\": {",
                "+      \"version\": \"0.2.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/ripemd160/-/ripemd160-0.2.0.tgz\",",
                "+      \"integrity\": \"sha1-K/GYveFnys+lHAqSjoS2i74XH84=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"run-async\": {",
                "+      \"version\": \"0.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/run-async/-/run-async-0.1.0.tgz\",",
                "+      \"integrity\": \"sha1-yK1KXhEGYeQCp9IbUw4AnyX444k=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"once\": \"1.4.0\"",
                "+      }",
                "+    },",
                "+    \"rx-lite\": {",
                "+      \"version\": \"3.1.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/rx-lite/-/rx-lite-3.1.2.tgz\",",
                "+      \"integrity\": \"sha1-Gc5QLKVyZl87ZHsQk5+X/RYV8QI=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"safe-buffer\": {",
                "+      \"version\": \"5.1.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.1.tgz\",",
                "+      \"integrity\": \"sha512-kKvNJn6Mm93gAczWVJg7wH+wGYWNrDHdWvpUmHyEsgCtIwwo3bqPtV4tR5tuPaUhTOo/kvhVwd8XwwOllGYkbg==\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"saucelabs\": {",
                "+      \"version\": \"1.3.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/saucelabs/-/saucelabs-1.3.0.tgz\",",
                "+      \"integrity\": \"sha1-0kDoAJ33+ocwbsRXimm6O1xCT+4=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"https-proxy-agent\": \"1.0.0\"",
                "+      }",
                "+    },",
                "+    \"sax\": {",
                "+      \"version\": \"1.2.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/sax/-/sax-1.2.4.tgz\",",
                "+      \"integrity\": \"sha512-NqVDv9TpANUjFm0N8uM5GxL36UgKi9/atZw+x7YFnQ8ckwFGKrl4xX4yWtrey3UJm5nP1kUbnYgLopqWNSRhWw==\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"scrollmonitor\": {",
                "+      \"version\": \"1.2.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/scrollmonitor/-/scrollmonitor-1.2.4.tgz\",",
                "+      \"integrity\": \"sha512-HBQpeZVAYETbNk0DAmi+X4hdTQMk5WRa/Udez9o8yC8GcRiPDgBxyEdV9g9Su/TWOuUeVfVGfNcyboEyzkte4Q==\"",
                "+    },",
                "+    \"selenium-webdriver\": {",
                "+      \"version\": \"3.6.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/selenium-webdriver/-/selenium-webdriver-3.6.0.tgz\",",
                "+      \"integrity\": \"sha512-WH7Aldse+2P5bbFBO4Gle/nuQOdVwpHMTL6raL3uuBj/vPG07k6uzt3aiahu352ONBr5xXh0hDlM3LhtXPOC4Q==\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"jszip\": \"3.1.5\",",
                "+        \"rimraf\": \"2.6.2\",",
                "+        \"tmp\": \"0.0.30\",",
                "+        \"xml2js\": \"0.4.19\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"tmp\": {",
                "+          \"version\": \"0.0.30\",",
                "+          \"resolved\": \"https://registry.npmjs.org/tmp/-/tmp-0.0.30.tgz\",",
                "+          \"integrity\": \"sha1-ckGdSovn1s51FI/YsyTlk6cRwu0=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"os-tmpdir\": \"1.0.2\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"semver\": {",
                "+      \"version\": \"5.4.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/semver/-/semver-5.4.1.tgz\",",
                "+      \"integrity\": \"sha512-WfG/X9+oATh81XtllIo/I8gOiY9EXRdv1cQdyykeXK17YcUW3EXUAi2To4pcH6nZtJPr7ZOpM5OMyWJZm+8Rsg==\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"send\": {",
                "+      \"version\": \"0.16.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/send/-/send-0.16.1.tgz\",",
                "+      \"integrity\": \"sha512-ElCLJdJIKPk6ux/Hocwhk7NFHpI3pVm/IZOYWqUmoxcgeyM+MpxHHKhb8QmlJDX1pU6WrgaHBkVNm73Sv7uc2A==\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"debug\": \"2.6.9\",",
                "+        \"depd\": \"1.1.1\",",
                "+        \"destroy\": \"1.0.4\",",
                "+        \"encodeurl\": \"1.0.1\",",
                "+        \"escape-html\": \"1.0.3\",",
                "+        \"etag\": \"1.8.1\",",
                "+        \"fresh\": \"0.5.2\",",
                "+        \"http-errors\": \"1.6.2\",",
                "+        \"mime\": \"1.4.1\",",
                "+        \"ms\": \"2.0.0\",",
                "+        \"on-finished\": \"2.3.0\",",
                "+        \"range-parser\": \"1.2.0\",",
                "+        \"statuses\": \"1.3.1\"",
                "+      }",
                "+    },",
                "+    \"sentence-case\": {",
                "+      \"version\": \"1.1.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/sentence-case/-/sentence-case-1.1.3.tgz\",",
                "+      \"integrity\": \"sha1-gDSq/CFFdy06vhUJqkLJ4QQtwTk=\",",
                "+      \"requires\": {",
                "+        \"lower-case\": \"1.1.4\"",
                "+      }",
                "+    },",
                "+    \"serve-index\": {",
                "+      \"version\": \"1.9.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/serve-index/-/serve-index-1.9.1.tgz\",",
                "+      \"integrity\": \"sha1-03aNabHn2C5c4FD/9bRTvqEqkjk=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"accepts\": \"1.3.4\",",
                "+        \"batch\": \"0.6.1\",",
                "+        \"debug\": \"2.6.9\",",
                "+        \"escape-html\": \"1.0.3\",",
                "+        \"http-errors\": \"1.6.2\",",
                "+        \"mime-types\": \"2.1.17\",",
                "+        \"parseurl\": \"1.3.2\"",
                "+      }",
                "+    },",
                "+    \"serve-static\": {",
                "+      \"version\": \"1.13.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/serve-static/-/serve-static-1.13.1.tgz\",",
                "+      \"integrity\": \"sha512-hSMUZrsPa/I09VYFJwa627JJkNs0NrfL1Uzuup+GqHfToR2KcsXFymXSV90hoyw3M+msjFuQly+YzIH/q0MGlQ==\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"encodeurl\": \"1.0.1\",",
                "+        \"escape-html\": \"1.0.3\",",
                "+        \"parseurl\": \"1.3.2\",",
                "+        \"send\": \"0.16.1\"",
                "+      }",
                "+    },",
                "+    \"set-immediate-shim\": {",
                "+      \"version\": \"1.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/set-immediate-shim/-/set-immediate-shim-1.0.1.tgz\",",
                "+      \"integrity\": \"sha1-SysbJ+uAip+NzEgaWOXlb1mfP2E=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"setimmediate\": {",
                "+      \"version\": \"1.0.5\",",
                "+      \"resolved\": \"https://registry.npmjs.org/setimmediate/-/setimmediate-1.0.5.tgz\",",
                "+      \"integrity\": \"sha1-KQy7Iy4waULX1+qbg3Mqt4VvgoU=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"setprototypeof\": {",
                "+      \"version\": \"1.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.1.0.tgz\",",
                "+      \"integrity\": \"sha512-BvE/TwpZX4FXExxOxZyRGQQv651MSwmWKZGqvmPcRIjDqWub67kTKuIMx43cZZrS/cBBzwBcNDWoFxt2XEFIpQ==\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"sha.js\": {",
                "+      \"version\": \"2.2.6\",",
                "+      \"resolved\": \"https://registry.npmjs.org/sha.js/-/sha.js-2.2.6.tgz\",",
                "+      \"integrity\": \"sha1-F93t3F9yL7ZlAWWIlUYZd4ZzFbo=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"shell-quote\": {",
                "+      \"version\": \"1.6.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/shell-quote/-/shell-quote-1.6.1.tgz\",",
                "+      \"integrity\": \"sha1-9HgZSczkAmlxJ0MOo7PFR29IF2c=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"array-filter\": \"0.0.1\",",
                "+        \"array-map\": \"0.0.0\",",
                "+        \"array-reduce\": \"0.0.0\",",
                "+        \"jsonify\": \"0.0.0\"",
                "+      }",
                "+    },",
                "+    \"shelljs\": {",
                "+      \"version\": \"0.7.8\",",
                "+      \"resolved\": \"https://registry.npmjs.org/shelljs/-/shelljs-0.7.8.tgz\",",
                "+      \"integrity\": \"sha1-3svPh0sNHl+3LhSxZKloMEjprLM=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"glob\": \"7.1.2\",",
                "+        \"interpret\": \"1.1.0\",",
                "+        \"rechoir\": \"0.6.2\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"glob\": {",
                "+          \"version\": \"7.1.2\",",
                "+          \"resolved\": \"https://registry.npmjs.org/glob/-/glob-7.1.2.tgz\",",
                "+          \"integrity\": \"sha512-MJTUg1kjuLeQCJ+ccE4Vpa6kKVXkPYJ2mOCQyUuKLcLQsdrMCpBPUi8qVE6+YuaJkozeA9NusTAw3hLr8Xe5EQ==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"fs.realpath\": \"1.0.0\",",
                "+            \"inflight\": \"1.0.6\",",
                "+            \"inherits\": \"2.0.3\",",
                "+            \"minimatch\": \"3.0.4\",",
                "+            \"once\": \"1.4.0\",",
                "+            \"path-is-absolute\": \"1.0.1\"",
                "+          }",
                "+        },",
                "+        \"minimatch\": {",
                "+          \"version\": \"3.0.4\",",
                "+          \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-3.0.4.tgz\",",
                "+          \"integrity\": \"sha512-yJHVQEhyqPLUTgt9B83PXu6W3rx4MvvHvSUvToogpwoGDOUQ+yDrR0HRot+yOCdCO7u4hX3pWft6kWBBcqh0UA==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"brace-expansion\": \"1.1.8\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"sigmund\": {",
                "+      \"version\": \"1.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/sigmund/-/sigmund-1.0.1.tgz\",",
                "+      \"integrity\": \"sha1-P/IfGYytIXX587eBhT/ZTQ0ZtZA=\"",
                "+    },",
                "+    \"signal-exit\": {",
                "+      \"version\": \"3.0.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.2.tgz\",",
                "+      \"integrity\": \"sha1-tf3AjxKH6hF4Yo5BXiUTK3NkbG0=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"simple-fmt\": {",
                "+      \"version\": \"0.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/simple-fmt/-/simple-fmt-0.1.0.tgz\",",
                "+      \"integrity\": \"sha1-GRv1ZqWeZTBILLJatTtKjchcOms=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"simple-is\": {",
                "+      \"version\": \"0.2.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/simple-is/-/simple-is-0.2.0.tgz\",",
                "+      \"integrity\": \"sha1-Krt1qt453rXMgVzhDmGRFkhQuvA=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"slash\": {",
                "+      \"version\": \"1.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/slash/-/slash-1.0.0.tgz\",",
                "+      \"integrity\": \"sha1-xB8vbDn8FtHNF61LXYlhFK5HDVU=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"slice-ansi\": {",
                "+      \"version\": \"0.0.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/slice-ansi/-/slice-ansi-0.0.4.tgz\",",
                "+      \"integrity\": \"sha1-7b+JA/ZvfOL46v1s7tZeJkyDGzU=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"snake-case\": {",
                "+      \"version\": \"1.1.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/snake-case/-/snake-case-1.1.2.tgz\",",
                "+      \"integrity\": \"sha1-DC8l4wUVjZoY09l3BmGH/vilpmo=\",",
                "+      \"requires\": {",
                "+        \"sentence-case\": \"1.1.3\"",
                "+      }",
                "+    },",
                "+    \"sntp\": {",
                "+      \"version\": \"2.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/sntp/-/sntp-2.1.0.tgz\",",
                "+      \"integrity\": \"sha512-FL1b58BDrqS3A11lJ0zEdnJ3UOKqVxawAkF3k7F0CVN7VQ34aZrV+G8BZ1WC9ZL7NyrwsW0oviwsWDgRuVYtJg==\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"hoek\": \"4.2.0\"",
                "+      }",
                "+    },",
                "+    \"socket.io\": {",
                "+      \"version\": \"1.4.7\",",
                "+      \"resolved\": \"https://registry.npmjs.org/socket.io/-/socket.io-1.4.7.tgz\",",
                "+      \"integrity\": \"sha1-krf3y4jFeX1NruJ5/oB12+bT+hw=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"debug\": \"2.2.0\",",
                "+        \"engine.io\": \"1.6.10\",",
                "+        \"has-binary\": \"0.1.7\",",
                "+        \"socket.io-adapter\": \"0.4.0\",",
                "+        \"socket.io-client\": \"1.4.6\",",
                "+        \"socket.io-parser\": \"2.2.6\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"debug\": {",
                "+          \"version\": \"2.2.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/debug/-/debug-2.2.0.tgz\",",
                "+          \"integrity\": \"sha1-+HBX6ZWxofauaklgZkE3vFbwOdo=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"ms\": \"0.7.1\"",
                "+          }",
                "+        },",
                "+        \"ms\": {",
                "+          \"version\": \"0.7.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/ms/-/ms-0.7.1.tgz\",",
                "+          \"integrity\": \"sha1-nNE8A62/8ltl7/3nzoZO6VIBcJg=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"socket.io-adapter\": {",
                "+      \"version\": \"0.4.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/socket.io-adapter/-/socket.io-adapter-0.4.0.tgz\",",
                "+      \"integrity\": \"sha1-+5+CqxqmUpC/csNleVW5MKmRok8=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"debug\": \"2.2.0\",",
                "+        \"socket.io-parser\": \"2.2.2\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"debug\": {",
                "+          \"version\": \"2.2.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/debug/-/debug-2.2.0.tgz\",",
                "+          \"integrity\": \"sha1-+HBX6ZWxofauaklgZkE3vFbwOdo=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"ms\": \"0.7.1\"",
                "+          }",
                "+        },",
                "+        \"ms\": {",
                "+          \"version\": \"0.7.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/ms/-/ms-0.7.1.tgz\",",
                "+          \"integrity\": \"sha1-nNE8A62/8ltl7/3nzoZO6VIBcJg=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"socket.io-parser\": {",
                "+          \"version\": \"2.2.2\",",
                "+          \"resolved\": \"https://registry.npmjs.org/socket.io-parser/-/socket.io-parser-2.2.2.tgz\",",
                "+          \"integrity\": \"sha1-PXr2tkSX6Va32f53X5mXFgJ/lBc=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"benchmark\": \"1.0.0\",",
                "+            \"component-emitter\": \"1.1.2\",",
                "+            \"debug\": \"0.7.4\",",
                "+            \"isarray\": \"0.0.1\",",
                "+            \"json3\": \"3.2.6\"",
                "+          },",
                "+          \"dependencies\": {",
                "+            \"debug\": {",
                "+              \"version\": \"0.7.4\",",
                "+              \"resolved\": \"https://registry.npmjs.org/debug/-/debug-0.7.4.tgz\",",
                "+              \"integrity\": \"sha1-BuHqgILCyxTjmAbiLi9vdX+Srzk=\",",
                "+              \"dev\": true",
                "+            }",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"socket.io-client\": {",
                "+      \"version\": \"1.4.6\",",
                "+      \"resolved\": \"https://registry.npmjs.org/socket.io-client/-/socket.io-client-1.4.6.tgz\",",
                "+      \"integrity\": \"sha1-SbC6U379FbgpfIQBbmQuHHx1LD0=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"backo2\": \"1.0.2\",",
                "+        \"component-bind\": \"1.0.0\",",
                "+        \"component-emitter\": \"1.2.0\",",
                "+        \"debug\": \"2.2.0\",",
                "+        \"engine.io-client\": \"1.6.9\",",
                "+        \"has-binary\": \"0.1.7\",",
                "+        \"indexof\": \"0.0.1\",",
                "+        \"object-component\": \"0.0.3\",",
                "+        \"parseuri\": \"0.0.4\",",
                "+        \"socket.io-parser\": \"2.2.6\",",
                "+        \"to-array\": \"0.1.4\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"component-emitter\": {",
                "+          \"version\": \"1.2.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/component-emitter/-/component-emitter-1.2.0.tgz\",",
                "+          \"integrity\": \"sha1-zNETqGOI0GSC0D3j/H35hSa6jv4=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"debug\": {",
                "+          \"version\": \"2.2.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/debug/-/debug-2.2.0.tgz\",",
                "+          \"integrity\": \"sha1-+HBX6ZWxofauaklgZkE3vFbwOdo=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"ms\": \"0.7.1\"",
                "+          }",
                "+        },",
                "+        \"ms\": {",
                "+          \"version\": \"0.7.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/ms/-/ms-0.7.1.tgz\",",
                "+          \"integrity\": \"sha1-nNE8A62/8ltl7/3nzoZO6VIBcJg=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"socket.io-parser\": {",
                "+      \"version\": \"2.2.6\",",
                "+      \"resolved\": \"https://registry.npmjs.org/socket.io-parser/-/socket.io-parser-2.2.6.tgz\",",
                "+      \"integrity\": \"sha1-ON/WHfUNz4qx2eIJEyK/kCuii5k=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"benchmark\": \"1.0.0\",",
                "+        \"component-emitter\": \"1.1.2\",",
                "+        \"debug\": \"2.2.0\",",
                "+        \"isarray\": \"0.0.1\",",
                "+        \"json3\": \"3.3.2\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"debug\": {",
                "+          \"version\": \"2.2.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/debug/-/debug-2.2.0.tgz\",",
                "+          \"integrity\": \"sha1-+HBX6ZWxofauaklgZkE3vFbwOdo=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"ms\": \"0.7.1\"",
                "+          }",
                "+        },",
                "+        \"json3\": {",
                "+          \"version\": \"3.3.2\",",
                "+          \"resolved\": \"https://registry.npmjs.org/json3/-/json3-3.3.2.tgz\",",
                "+          \"integrity\": \"sha1-PAQ0dD35Pi9cQq7nsZvLSDV19OE=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"ms\": {",
                "+          \"version\": \"0.7.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/ms/-/ms-0.7.1.tgz\",",
                "+          \"integrity\": \"sha1-nNE8A62/8ltl7/3nzoZO6VIBcJg=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"sockjs\": {",
                "+      \"version\": \"0.3.19\",",
                "+      \"resolved\": \"https://registry.npmjs.org/sockjs/-/sockjs-0.3.19.tgz\",",
                "+      \"integrity\": \"sha512-V48klKZl8T6MzatbLlzzRNhMepEys9Y4oGFpypBFFn1gLI/QQ9HtLLyWJNbPlwGLelOVOEijUbTTJeLLI59jLw==\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"faye-websocket\": \"0.10.0\",",
                "+        \"uuid\": \"3.1.0\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"faye-websocket\": {",
                "+          \"version\": \"0.10.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/faye-websocket/-/faye-websocket-0.10.0.tgz\",",
                "+          \"integrity\": \"sha1-TkkvjQTftviQA1B/btvy1QHnxvQ=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"websocket-driver\": \"0.7.0\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"sockjs-client\": {",
                "+      \"version\": \"1.1.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/sockjs-client/-/sockjs-client-1.1.4.tgz\",",
                "+      \"integrity\": \"sha1-W6vjhrd15M8U51IJEUUmVAFsixI=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"debug\": \"2.6.9\",",
                "+        \"eventsource\": \"0.1.6\",",
                "+        \"faye-websocket\": \"0.11.1\",",
                "+        \"inherits\": \"2.0.3\",",
                "+        \"json3\": \"3.3.2\",",
                "+        \"url-parse\": \"1.2.0\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"faye-websocket\": {",
                "+          \"version\": \"0.11.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/faye-websocket/-/faye-websocket-0.11.1.tgz\",",
                "+          \"integrity\": \"sha1-8O/hjE9W5PQK/H4Gxxn9XuYYjzg=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"websocket-driver\": \"0.7.0\"",
                "+          }",
                "+        },",
                "+        \"json3\": {",
                "+          \"version\": \"3.3.2\",",
                "+          \"resolved\": \"https://registry.npmjs.org/json3/-/json3-3.3.2.tgz\",",
                "+          \"integrity\": \"sha1-PAQ0dD35Pi9cQq7nsZvLSDV19OE=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"sort-keys\": {",
                "+      \"version\": \"1.1.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/sort-keys/-/sort-keys-1.1.2.tgz\",",
                "+      \"integrity\": \"sha1-RBttTTRnmPG05J6JIK37oOVD+a0=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"is-plain-obj\": \"1.1.0\"",
                "+      }",
                "+    },",
                "+    \"source-list-map\": {",
                "+      \"version\": \"0.1.8\",",
                "+      \"resolved\": \"https://registry.npmjs.org/source-list-map/-/source-list-map-0.1.8.tgz\",",
                "+      \"integrity\": \"sha1-xVCyq1Qn9rPyH1r+rYjE9Vh7IQY=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"source-map\": {",
                "+      \"version\": \"0.1.34\",",
                "+      \"resolved\": \"https://registry.npmjs.org/source-map/-/source-map-0.1.34.tgz\",",
                "+      \"integrity\": \"sha1-p8/omux7FoLDsZjQrPtH19CQVms=\",",
                "+      \"requires\": {",
                "+        \"amdefine\": \"1.0.1\"",
                "+      }",
                "+    },",
                "+    \"source-map-support\": {",
                "+      \"version\": \"0.4.18\",",
                "+      \"resolved\": \"https://registry.npmjs.org/source-map-support/-/source-map-support-0.4.18.tgz\",",
                "+      \"integrity\": \"sha512-try0/JqxPLF9nOjvSta7tVondkP5dwgyLDjVoyMDlmjugT2lRZ1OfsrYTkCd2hkDnJTKRbO/Rl3orm8vlsUzbA==\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"source-map\": \"0.5.7\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"source-map\": {",
                "+          \"version\": \"0.5.7\",",
                "+          \"resolved\": \"https://registry.npmjs.org/source-map/-/source-map-0.5.7.tgz\",",
                "+          \"integrity\": \"sha1-igOdLRAh0i0eoUyA2OpGi6LvP8w=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"spdx-correct\": {",
                "+      \"version\": \"1.0.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/spdx-correct/-/spdx-correct-1.0.2.tgz\",",
                "+      \"integrity\": \"sha1-SzBz2TP/UfORLwOsVRlJikFQ20A=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"spdx-license-ids\": \"1.2.2\"",
                "+      }",
                "+    },",
                "+    \"spdx-expression-parse\": {",
                "+      \"version\": \"1.0.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/spdx-expression-parse/-/spdx-expression-parse-1.0.4.tgz\",",
                "+      \"integrity\": \"sha1-m98vIOH0DtRH++JzJmGR/O1RYmw=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"spdx-license-ids\": {",
                "+      \"version\": \"1.2.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/spdx-license-ids/-/spdx-license-ids-1.2.2.tgz\",",
                "+      \"integrity\": \"sha1-yd96NCRZSt5r0RkA1ZZpbcBrrFc=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"split\": {",
                "+      \"version\": \"0.3.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/split/-/split-0.3.3.tgz\",",
                "+      \"integrity\": \"sha1-zQ7qXmOiEd//frDwkcQTPi0N0o8=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"through\": \"2.3.8\"",
                "+      }",
                "+    },",
                "+    \"sprintf-js\": {",
                "+      \"version\": \"1.0.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz\",",
                "+      \"integrity\": \"sha1-BOaSb2YolTVPPdAVIDYzuFcpfiw=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"sshpk\": {",
                "+      \"version\": \"1.13.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/sshpk/-/sshpk-1.13.1.tgz\",",
                "+      \"integrity\": \"sha1-US322mKHFEMW3EwY/hzx2UBzm+M=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"asn1\": \"0.2.3\",",
                "+        \"assert-plus\": \"1.0.0\",",
                "+        \"bcrypt-pbkdf\": \"1.0.1\",",
                "+        \"dashdash\": \"1.14.1\",",
                "+        \"ecc-jsbn\": \"0.1.1\",",
                "+        \"getpass\": \"0.1.7\",",
                "+        \"jsbn\": \"0.1.1\",",
                "+        \"tweetnacl\": \"0.14.5\"",
                "+      }",
                "+    },",
                "+    \"stable\": {",
                "+      \"version\": \"0.1.6\",",
                "+      \"resolved\": \"https://registry.npmjs.org/stable/-/stable-0.1.6.tgz\",",
                "+      \"integrity\": \"sha1-kQ9dKu17Ugxud3SZwfMuE5/eyxA=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"statuses\": {",
                "+      \"version\": \"1.3.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/statuses/-/statuses-1.3.1.tgz\",",
                "+      \"integrity\": \"sha1-+vUbnrdKrvOzrPStX2Gr8ky3uT4=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"stream-browserify\": {",
                "+      \"version\": \"2.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/stream-browserify/-/stream-browserify-2.0.1.tgz\",",
                "+      \"integrity\": \"sha1-ZiZu5fm9uZQKTkUUyvtDu3Hlyds=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"inherits\": \"2.0.3\",",
                "+        \"readable-stream\": \"2.3.3\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"isarray\": {",
                "+          \"version\": \"1.0.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz\",",
                "+          \"integrity\": \"sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"readable-stream\": {",
                "+          \"version\": \"2.3.3\",",
                "+          \"resolved\": \"https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.3.tgz\",",
                "+          \"integrity\": \"sha512-m+qzzcn7KUxEmd1gMbchF+Y2eIUbieUaxkWtptyHywrX0rE8QEYqPC07Vuy4Wm32/xE16NcdBctb8S0Xe/5IeQ==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"core-util-is\": \"1.0.2\",",
                "+            \"inherits\": \"2.0.3\",",
                "+            \"isarray\": \"1.0.0\",",
                "+            \"process-nextick-args\": \"1.0.7\",",
                "+            \"safe-buffer\": \"5.1.1\",",
                "+            \"string_decoder\": \"1.0.3\",",
                "+            \"util-deprecate\": \"1.0.2\"",
                "+          }",
                "+        },",
                "+        \"string_decoder\": {",
                "+          \"version\": \"1.0.3\",",
                "+          \"resolved\": \"https://registry.npmjs.org/string_decoder/-/string_decoder-1.0.3.tgz\",",
                "+          \"integrity\": \"sha512-4AH6Z5fzNNBcH+6XDMfA/BTt87skxqJlO0lAh3Dker5zThcAxG6mKz+iGu308UKoPPQ8Dcqx/4JhujzltRa+hQ==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"safe-buffer\": \"5.1.1\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"stream-cache\": {",
                "+      \"version\": \"0.0.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/stream-cache/-/stream-cache-0.0.2.tgz\",",
                "+      \"integrity\": \"sha1-GsWtaDJCjKVWZ9ve45Xa1ObbEY8=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"stream-combiner\": {",
                "+      \"version\": \"0.0.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/stream-combiner/-/stream-combiner-0.0.4.tgz\",",
                "+      \"integrity\": \"sha1-TV5DPBhSYd3mI8o/RMWGvPXErRQ=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"duplexer\": \"0.1.1\"",
                "+      }",
                "+    },",
                "+    \"stream-http\": {",
                "+      \"version\": \"2.7.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/stream-http/-/stream-http-2.7.2.tgz\",",
                "+      \"integrity\": \"sha512-c0yTD2rbQzXtSsFSVhtpvY/vS6u066PcXOX9kBB3mSO76RiUQzL340uJkGBWnlBg4/HZzqiUXtaVA7wcRcJgEw==\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"builtin-status-codes\": \"3.0.0\",",
                "+        \"inherits\": \"2.0.3\",",
                "+        \"readable-stream\": \"2.3.3\",",
                "+        \"to-arraybuffer\": \"1.0.1\",",
                "+        \"xtend\": \"4.0.1\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"isarray\": {",
                "+          \"version\": \"1.0.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz\",",
                "+          \"integrity\": \"sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"readable-stream\": {",
                "+          \"version\": \"2.3.3\",",
                "+          \"resolved\": \"https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.3.tgz\",",
                "+          \"integrity\": \"sha512-m+qzzcn7KUxEmd1gMbchF+Y2eIUbieUaxkWtptyHywrX0rE8QEYqPC07Vuy4Wm32/xE16NcdBctb8S0Xe/5IeQ==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"core-util-is\": \"1.0.2\",",
                "+            \"inherits\": \"2.0.3\",",
                "+            \"isarray\": \"1.0.0\",",
                "+            \"process-nextick-args\": \"1.0.7\",",
                "+            \"safe-buffer\": \"5.1.1\",",
                "+            \"string_decoder\": \"1.0.3\",",
                "+            \"util-deprecate\": \"1.0.2\"",
                "+          }",
                "+        },",
                "+        \"string_decoder\": {",
                "+          \"version\": \"1.0.3\",",
                "+          \"resolved\": \"https://registry.npmjs.org/string_decoder/-/string_decoder-1.0.3.tgz\",",
                "+          \"integrity\": \"sha512-4AH6Z5fzNNBcH+6XDMfA/BTt87skxqJlO0lAh3Dker5zThcAxG6mKz+iGu308UKoPPQ8Dcqx/4JhujzltRa+hQ==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"safe-buffer\": \"5.1.1\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"strict-uri-encode\": {",
                "+      \"version\": \"1.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/strict-uri-encode/-/strict-uri-encode-1.1.0.tgz\",",
                "+      \"integrity\": \"sha1-J5siXfHVgrH1TmWt3UNS4Y+qBxM=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"string-replace-webpack-plugin\": {",
                "+      \"version\": \"0.1.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/string-replace-webpack-plugin/-/string-replace-webpack-plugin-0.1.3.tgz\",",
                "+      \"integrity\": \"sha1-c8ZX51nWbP6Arh4M8JGqJW0OcVw=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"async\": \"0.2.10\",",
                "+        \"css-loader\": \"0.9.1\",",
                "+        \"file-loader\": \"0.8.5\",",
                "+        \"loader-utils\": \"0.2.17\",",
                "+        \"style-loader\": \"0.8.3\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"css-loader\": {",
                "+          \"version\": \"0.9.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/css-loader/-/css-loader-0.9.1.tgz\",",
                "+          \"integrity\": \"sha1-LhqgDOfjDvLGp6SzAKCAp8l54Nw=\",",
                "+          \"dev\": true,",
                "+          \"optional\": true,",
                "+          \"requires\": {",
                "+            \"csso\": \"1.3.12\",",
                "+            \"loader-utils\": \"0.2.17\",",
                "+            \"source-map\": \"0.1.43\"",
                "+          }",
                "+        },",
                "+        \"csso\": {",
                "+          \"version\": \"1.3.12\",",
                "+          \"resolved\": \"https://registry.npmjs.org/csso/-/csso-1.3.12.tgz\",",
                "+          \"integrity\": \"sha1-/GKGlKLTiTiqrEmWdTIY/TEc254=\",",
                "+          \"dev\": true,",
                "+          \"optional\": true",
                "+        },",
                "+        \"file-loader\": {",
                "+          \"version\": \"0.8.5\",",
                "+          \"resolved\": \"https://registry.npmjs.org/file-loader/-/file-loader-0.8.5.tgz\",",
                "+          \"integrity\": \"sha1-knXQMf54DyfUf19K8CvUNxPMFRs=\",",
                "+          \"dev\": true,",
                "+          \"optional\": true,",
                "+          \"requires\": {",
                "+            \"loader-utils\": \"0.2.17\"",
                "+          }",
                "+        },",
                "+        \"source-map\": {",
                "+          \"version\": \"0.1.43\",",
                "+          \"resolved\": \"https://registry.npmjs.org/source-map/-/source-map-0.1.43.tgz\",",
                "+          \"integrity\": \"sha1-wkvBRspRfBRx9drL4lcbK3+eM0Y=\",",
                "+          \"dev\": true,",
                "+          \"optional\": true,",
                "+          \"requires\": {",
                "+            \"amdefine\": \"1.0.1\"",
                "+          }",
                "+        },",
                "+        \"style-loader\": {",
                "+          \"version\": \"0.8.3\",",
                "+          \"resolved\": \"https://registry.npmjs.org/style-loader/-/style-loader-0.8.3.tgz\",",
                "+          \"integrity\": \"sha1-9Pkut9tjdodI8VBlzWcA9aHIU1c=\",",
                "+          \"dev\": true,",
                "+          \"optional\": true,",
                "+          \"requires\": {",
                "+            \"loader-utils\": \"0.2.17\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"string-width\": {",
                "+      \"version\": \"1.0.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/string-width/-/string-width-1.0.2.tgz\",",
                "+      \"integrity\": \"sha1-EYvfW4zcUaKn5w0hHgfisLmxB9M=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"code-point-at\": \"1.1.0\",",
                "+        \"is-fullwidth-code-point\": \"1.0.0\",",
                "+        \"strip-ansi\": \"3.0.1\"",
                "+      }",
                "+    },",
                "+    \"string.prototype.padend\": {",
                "+      \"version\": \"3.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/string.prototype.padend/-/string.prototype.padend-3.0.0.tgz\",",
                "+      \"integrity\": \"sha1-86rvfBcZ8XDF6rHDK/eA2W4h8vA=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"define-properties\": \"1.1.2\",",
                "+        \"es-abstract\": \"1.10.0\",",
                "+        \"function-bind\": \"1.1.1\"",
                "+      }",
                "+    },",
                "+    \"string_decoder\": {",
                "+      \"version\": \"0.10.31\",",
                "+      \"resolved\": \"https://registry.npmjs.org/string_decoder/-/string_decoder-0.10.31.tgz\",",
                "+      \"integrity\": \"sha1-YuIDvEF2bGwoyfyEMB2rHFMQ+pQ=\"",
                "+    },",
                "+    \"stringmap\": {",
                "+      \"version\": \"0.2.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/stringmap/-/stringmap-0.2.2.tgz\",",
                "+      \"integrity\": \"sha1-VWwTeyWPlCuHdvWy71gqoGnX0bE=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"stringset\": {",
                "+      \"version\": \"0.2.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/stringset/-/stringset-0.2.1.tgz\",",
                "+      \"integrity\": \"sha1-7yWcTjSTRDd/zRyRPdLoSMnAQrU=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"stringstream\": {",
                "+      \"version\": \"0.0.5\",",
                "+      \"resolved\": \"https://registry.npmjs.org/stringstream/-/stringstream-0.0.5.tgz\",",
                "+      \"integrity\": \"sha1-TkhM1N5aC7vuGORjB3EKioFiGHg=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"strip-ansi\": {",
                "+      \"version\": \"3.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/strip-ansi/-/strip-ansi-3.0.1.tgz\",",
                "+      \"integrity\": \"sha1-ajhfuIU9lS1f8F0Oiq+UJ43GPc8=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"ansi-regex\": \"2.1.1\"",
                "+      }",
                "+    },",
                "+    \"strip-bom\": {",
                "+      \"version\": \"3.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/strip-bom/-/strip-bom-3.0.0.tgz\",",
                "+      \"integrity\": \"sha1-IzTBjpx1n3vdVv3vfprj1YjmjtM=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"strip-indent\": {",
                "+      \"version\": \"1.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/strip-indent/-/strip-indent-1.0.1.tgz\",",
                "+      \"integrity\": \"sha1-DHlipq3vp7vUrDZkYKY4VSrhoKI=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"get-stdin\": \"4.0.1\"",
                "+      }",
                "+    },",
                "+    \"strip-json-comments\": {",
                "+      \"version\": \"2.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-2.0.1.tgz\",",
                "+      \"integrity\": \"sha1-PFMZQukIwml8DsNEhYwobHygpgo=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"style-loader\": {",
                "+      \"version\": \"0.13.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/style-loader/-/style-loader-0.13.2.tgz\",",
                "+      \"integrity\": \"sha1-dFMzhM9pjHEEx5URULSXF63C87s=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"loader-utils\": \"1.1.0\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"loader-utils\": {",
                "+          \"version\": \"1.1.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/loader-utils/-/loader-utils-1.1.0.tgz\",",
                "+          \"integrity\": \"sha1-yYrvSIvM7aL/teLeZG1qdUQp9c0=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"big.js\": \"3.2.0\",",
                "+            \"emojis-list\": \"2.1.0\",",
                "+            \"json5\": \"0.5.1\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"supports-color\": {",
                "+      \"version\": \"3.2.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/supports-color/-/supports-color-3.2.3.tgz\",",
                "+      \"integrity\": \"sha1-ZawFBLOVQXHYpklGsq48u4pfVPY=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"has-flag\": \"1.0.0\"",
                "+      }",
                "+    },",
                "+    \"svgo\": {",
                "+      \"version\": \"0.7.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/svgo/-/svgo-0.7.2.tgz\",",
                "+      \"integrity\": \"sha1-n1dyQTlSE1xv779Ar+ak+qiLS7U=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"coa\": \"1.0.4\",",
                "+        \"colors\": \"1.1.2\",",
                "+        \"csso\": \"2.3.2\",",
                "+        \"js-yaml\": \"3.7.0\",",
                "+        \"mkdirp\": \"0.5.1\",",
                "+        \"sax\": \"1.2.4\",",
                "+        \"whet.extend\": \"0.9.9\"",
                "+      }",
                "+    },",
                "+    \"swap-case\": {",
                "+      \"version\": \"1.1.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/swap-case/-/swap-case-1.1.2.tgz\",",
                "+      \"integrity\": \"sha1-w5IDpFhzhfrTyFCgvRvK+ggZdOM=\",",
                "+      \"requires\": {",
                "+        \"lower-case\": \"1.1.4\",",
                "+        \"upper-case\": \"1.1.3\"",
                "+      }",
                "+    },",
                "+    \"table\": {",
                "+      \"version\": \"3.8.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/table/-/table-3.8.3.tgz\",",
                "+      \"integrity\": \"sha1-K7xULw/amGGnVdOUf+/Ys/UThV8=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"ajv\": \"4.11.8\",",
                "+        \"ajv-keywords\": \"1.5.1\",",
                "+        \"chalk\": \"1.1.3\",",
                "+        \"lodash\": \"4.17.4\",",
                "+        \"slice-ansi\": \"0.0.4\",",
                "+        \"string-width\": \"2.1.1\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"ansi-regex\": {",
                "+          \"version\": \"3.0.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/ansi-regex/-/ansi-regex-3.0.0.tgz\",",
                "+          \"integrity\": \"sha1-7QMXwyIGT3lGbAKWa922Bas32Zg=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"is-fullwidth-code-point\": {",
                "+          \"version\": \"2.0.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-2.0.0.tgz\",",
                "+          \"integrity\": \"sha1-o7MKXE8ZkYMWeqq5O+764937ZU8=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"string-width\": {",
                "+          \"version\": \"2.1.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/string-width/-/string-width-2.1.1.tgz\",",
                "+          \"integrity\": \"sha512-nOqH59deCq9SRHlxq1Aw85Jnt4w6KvLKqWVik6oA9ZklXLNIOlqg4F2yrT1MVaTjAqvVwdfeZ7w7aCvJD7ugkw==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"is-fullwidth-code-point\": \"2.0.0\",",
                "+            \"strip-ansi\": \"4.0.0\"",
                "+          }",
                "+        },",
                "+        \"strip-ansi\": {",
                "+          \"version\": \"4.0.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/strip-ansi/-/strip-ansi-4.0.0.tgz\",",
                "+          \"integrity\": \"sha1-qEeQIusaw2iocTibY1JixQXuNo8=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"ansi-regex\": \"3.0.0\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"tapable\": {",
                "+      \"version\": \"0.1.10\",",
                "+      \"resolved\": \"https://registry.npmjs.org/tapable/-/tapable-0.1.10.tgz\",",
                "+      \"integrity\": \"sha1-KcNXB8K3DlDQdIK10gLo7URtr9Q=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"tape\": {",
                "+      \"version\": \"0.2.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/tape/-/tape-0.2.2.tgz\",",
                "+      \"integrity\": \"sha1-ZMz6S37PSgBgAH5hcW1CR4FnFjc=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"deep-equal\": \"0.0.0\",",
                "+        \"defined\": \"0.0.0\",",
                "+        \"jsonify\": \"0.0.0\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"defined\": {",
                "+          \"version\": \"0.0.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/defined/-/defined-0.0.0.tgz\",",
                "+          \"integrity\": \"sha1-817qfXBekzuvE7LwOz+D2SFAOz4=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"text-table\": {",
                "+      \"version\": \"0.2.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/text-table/-/text-table-0.2.0.tgz\",",
                "+      \"integrity\": \"sha1-f17oI66AUgfACvLfSoTsP8+lcLQ=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"throttleit\": {",
                "+      \"version\": \"1.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/throttleit/-/throttleit-1.0.0.tgz\",",
                "+      \"integrity\": \"sha1-nnhYNtr0Z0MUWlmEtiaNgoUorGw=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"through\": {",
                "+      \"version\": \"2.3.8\",",
                "+      \"resolved\": \"https://registry.npmjs.org/through/-/through-2.3.8.tgz\",",
                "+      \"integrity\": \"sha1-DdTJ/6q8NXlgsbckEV1+Doai4fU=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"through2\": {",
                "+      \"version\": \"0.6.5\",",
                "+      \"resolved\": \"https://registry.npmjs.org/through2/-/through2-0.6.5.tgz\",",
                "+      \"integrity\": \"sha1-QaucZ7KdVyCQcUEOHXp6lozTrUg=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"readable-stream\": \"1.0.34\",",
                "+        \"xtend\": \"4.0.1\"",
                "+      }",
                "+    },",
                "+    \"time-grunt\": {",
                "+      \"version\": \"0.3.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/time-grunt/-/time-grunt-0.3.2.tgz\",",
                "+      \"integrity\": \"sha1-8wE2RbAeaOJ4AqPkxHAs7KC9/68=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"chalk\": \"0.4.0\",",
                "+        \"date-time\": \"0.1.1\",",
                "+        \"hooker\": \"0.2.3\",",
                "+        \"pretty-ms\": \"0.1.0\",",
                "+        \"text-table\": \"0.2.0\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"ansi-styles\": {",
                "+          \"version\": \"1.0.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/ansi-styles/-/ansi-styles-1.0.0.tgz\",",
                "+          \"integrity\": \"sha1-yxAt8cVvUSPquLZ817mAJ6AnkXg=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"chalk\": {",
                "+          \"version\": \"0.4.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/chalk/-/chalk-0.4.0.tgz\",",
                "+          \"integrity\": \"sha1-UZmj3c0MHv4jvAjBsCewYXbgxk8=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"ansi-styles\": \"1.0.0\",",
                "+            \"has-color\": \"0.1.7\",",
                "+            \"strip-ansi\": \"0.1.1\"",
                "+          }",
                "+        },",
                "+        \"strip-ansi\": {",
                "+          \"version\": \"0.1.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/strip-ansi/-/strip-ansi-0.1.1.tgz\",",
                "+          \"integrity\": \"sha1-OeipjQRNFQZgq+SmgIrPcLt7yZE=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"time-stamp\": {",
                "+      \"version\": \"2.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/time-stamp/-/time-stamp-2.0.0.tgz\",",
                "+      \"integrity\": \"sha1-lcakRTDhW6jW9KPsuMOj+sRto1c=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"timers-browserify\": {",
                "+      \"version\": \"2.0.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/timers-browserify/-/timers-browserify-2.0.4.tgz\",",
                "+      \"integrity\": \"sha512-uZYhyU3EX8O7HQP+J9fTVYwsq90Vr68xPEFo7yrVImIxYvHgukBEgOB/SgGoorWVTzGM/3Z+wUNnboA4M8jWrg==\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"setimmediate\": \"1.0.5\"",
                "+      }",
                "+    },",
                "+    \"tiny-lr-fork\": {",
                "+      \"version\": \"0.0.5\",",
                "+      \"resolved\": \"https://registry.npmjs.org/tiny-lr-fork/-/tiny-lr-fork-0.0.5.tgz\",",
                "+      \"integrity\": \"sha1-Hpnh4qhGm3NquX2X7vqYxx927Qo=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"debug\": \"0.7.4\",",
                "+        \"faye-websocket\": \"0.4.4\",",
                "+        \"noptify\": \"0.0.3\",",
                "+        \"qs\": \"0.5.6\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"debug\": {",
                "+          \"version\": \"0.7.4\",",
                "+          \"resolved\": \"https://registry.npmjs.org/debug/-/debug-0.7.4.tgz\",",
                "+          \"integrity\": \"sha1-BuHqgILCyxTjmAbiLi9vdX+Srzk=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"qs\": {",
                "+          \"version\": \"0.5.6\",",
                "+          \"resolved\": \"https://registry.npmjs.org/qs/-/qs-0.5.6.tgz\",",
                "+          \"integrity\": \"sha1-MbGtBYVnZRxSaSFQa5qHk5EaA4Q=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"title-case\": {",
                "+      \"version\": \"1.1.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/title-case/-/title-case-1.1.2.tgz\",",
                "+      \"integrity\": \"sha1-+uSmrlRr+iLQg6DuqRCkDRLtT1o=\",",
                "+      \"requires\": {",
                "+        \"sentence-case\": \"1.1.3\",",
                "+        \"upper-case\": \"1.1.3\"",
                "+      }",
                "+    },",
                "+    \"tmp\": {",
                "+      \"version\": \"0.0.28\",",
                "+      \"resolved\": \"https://registry.npmjs.org/tmp/-/tmp-0.0.28.tgz\",",
                "+      \"integrity\": \"sha1-Fyc1t/YU6nrzlmT6hM8N5OUV0SA=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"os-tmpdir\": \"1.0.2\"",
                "+      }",
                "+    },",
                "+    \"to-array\": {",
                "+      \"version\": \"0.1.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/to-array/-/to-array-0.1.4.tgz\",",
                "+      \"integrity\": \"sha1-F+bBH3PdTz10zaek/zI46a2b+JA=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"to-arraybuffer\": {",
                "+      \"version\": \"1.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/to-arraybuffer/-/to-arraybuffer-1.0.1.tgz\",",
                "+      \"integrity\": \"sha1-fSKbH8xjfkZsoIEYCDanqr/4P0M=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"to-fast-properties\": {",
                "+      \"version\": \"1.0.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/to-fast-properties/-/to-fast-properties-1.0.3.tgz\",",
                "+      \"integrity\": \"sha1-uDVx+k2MJbguIxsG46MFXeTKGkc=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"toposort\": {",
                "+      \"version\": \"1.0.6\",",
                "+      \"resolved\": \"https://registry.npmjs.org/toposort/-/toposort-1.0.6.tgz\",",
                "+      \"integrity\": \"sha1-wxdI5V0hDv/AD9zcfW5o19e7nOw=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"tough-cookie\": {",
                "+      \"version\": \"2.3.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/tough-cookie/-/tough-cookie-2.3.3.tgz\",",
                "+      \"integrity\": \"sha1-C2GKVWW23qkL80JdBNVe3EdadWE=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"punycode\": \"1.4.1\"",
                "+      }",
                "+    },",
                "+    \"trim-newlines\": {",
                "+      \"version\": \"1.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/trim-newlines/-/trim-newlines-1.0.0.tgz\",",
                "+      \"integrity\": \"sha1-WIeWa7WCpFA6QetST301ARgVphM=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"trim-right\": {",
                "+      \"version\": \"1.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/trim-right/-/trim-right-1.0.1.tgz\",",
                "+      \"integrity\": \"sha1-yy4SAwZ+DI3h9hQJS5/kVwTqYAM=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"tryit\": {",
                "+      \"version\": \"1.0.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/tryit/-/tryit-1.0.3.tgz\",",
                "+      \"integrity\": \"sha1-OTvnMKlEb9Hq1tpZoBQwjzbCics=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"tryor\": {",
                "+      \"version\": \"0.1.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/tryor/-/tryor-0.1.2.tgz\",",
                "+      \"integrity\": \"sha1-gUXkynyv9ArN48z5Rui4u3W0Fys=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"tty-browserify\": {",
                "+      \"version\": \"0.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/tty-browserify/-/tty-browserify-0.0.0.tgz\",",
                "+      \"integrity\": \"sha1-oVe6QC2iTpv5V/mqadUk7tQpAaY=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"tunnel-agent\": {",
                "+      \"version\": \"0.6.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.6.0.tgz\",",
                "+      \"integrity\": \"sha1-J6XeoGs2sEoKmWZ3SykIaPD8QP0=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"safe-buffer\": \"5.1.1\"",
                "+      }",
                "+    },",
                "+    \"tweetnacl\": {",
                "+      \"version\": \"0.14.5\",",
                "+      \"resolved\": \"https://registry.npmjs.org/tweetnacl/-/tweetnacl-0.14.5.tgz\",",
                "+      \"integrity\": \"sha1-WuaBd/GS1EViadEIr6k/+HQ/T2Q=\",",
                "+      \"dev\": true,",
                "+      \"optional\": true",
                "+    },",
                "+    \"type-check\": {",
                "+      \"version\": \"0.3.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/type-check/-/type-check-0.3.2.tgz\",",
                "+      \"integrity\": \"sha1-WITKtRLPHTVeP7eE8wgEsrUg23I=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"prelude-ls\": \"1.1.2\"",
                "+      }",
                "+    },",
                "+    \"type-is\": {",
                "+      \"version\": \"1.6.15\",",
                "+      \"resolved\": \"https://registry.npmjs.org/type-is/-/type-is-1.6.15.tgz\",",
                "+      \"integrity\": \"sha1-yrEPtJCeRByChC6v4a1kbIGARBA=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"media-typer\": \"0.3.0\",",
                "+        \"mime-types\": \"2.1.17\"",
                "+      }",
                "+    },",
                "+    \"typedarray\": {",
                "+      \"version\": \"0.0.6\",",
                "+      \"resolved\": \"https://registry.npmjs.org/typedarray/-/typedarray-0.0.6.tgz\",",
                "+      \"integrity\": \"sha1-hnrHTjhkGHsdPUfZlqeOxciDB3c=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"uglify-js\": {",
                "+      \"version\": \"2.4.24\",",
                "+      \"resolved\": \"https://registry.npmjs.org/uglify-js/-/uglify-js-2.4.24.tgz\",",
                "+      \"integrity\": \"sha1-+tV1XB4Vd2WLsG/5q25UjJW+vW4=\",",
                "+      \"requires\": {",
                "+        \"async\": \"0.2.10\",",
                "+        \"source-map\": \"0.1.34\",",
                "+        \"uglify-to-browserify\": \"1.0.2\",",
                "+        \"yargs\": \"3.5.4\"",
                "+      }",
                "+    },",
                "+    \"uglify-to-browserify\": {",
                "+      \"version\": \"1.0.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/uglify-to-browserify/-/uglify-to-browserify-1.0.2.tgz\",",
                "+      \"integrity\": \"sha1-bgkk1r2mta/jSeOabWMoUKD4grc=\"",
                "+    },",
                "+    \"ultron\": {",
                "+      \"version\": \"1.0.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/ultron/-/ultron-1.0.2.tgz\",",
                "+      \"integrity\": \"sha1-rOEWq1V80Zc4ak6I9GhTeMiy5Po=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"underscore\": {",
                "+      \"version\": \"1.4.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/underscore/-/underscore-1.4.4.tgz\",",
                "+      \"integrity\": \"sha1-YaajIBBiKvoHljvzJSA88SI51gQ=\"",
                "+    },",
                "+    \"underscore.string\": {",
                "+      \"version\": \"2.2.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/underscore.string/-/underscore.string-2.2.1.tgz\",",
                "+      \"integrity\": \"sha1-18D6KvXVoaZ/QlPa7pgTLnM/Dxk=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"unicons\": {",
                "+      \"version\": \"0.0.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/unicons/-/unicons-0.0.3.tgz\",",
                "+      \"integrity\": \"sha1-bmp6Gm6uuwHKPYsSrZaHJ56rpSQ=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"uniq\": {",
                "+      \"version\": \"1.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/uniq/-/uniq-1.0.1.tgz\",",
                "+      \"integrity\": \"sha1-sxxa6CVIRKOoKBVBzisEuGWnNP8=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"uniqid\": {",
                "+      \"version\": \"4.1.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/uniqid/-/uniqid-4.1.1.tgz\",",
                "+      \"integrity\": \"sha1-iSIN32t1GuUrX3JISGNShZa7hME=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"macaddress\": \"0.2.8\"",
                "+      }",
                "+    },",
                "+    \"uniqs\": {",
                "+      \"version\": \"2.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/uniqs/-/uniqs-2.0.0.tgz\",",
                "+      \"integrity\": \"sha1-/+3ks2slKQaW5uFl1KWe25mOawI=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"unpipe\": {",
                "+      \"version\": \"1.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz\",",
                "+      \"integrity\": \"sha1-sr9O6FFKrmFltIF4KdIbLvSZBOw=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"upper-case\": {",
                "+      \"version\": \"1.1.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/upper-case/-/upper-case-1.1.3.tgz\",",
                "+      \"integrity\": \"sha1-9rRQHC7EzdJrp4vnIilh3ndiFZg=\"",
                "+    },",
                "+    \"upper-case-first\": {",
                "+      \"version\": \"1.1.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/upper-case-first/-/upper-case-first-1.1.2.tgz\",",
                "+      \"integrity\": \"sha1-XXm+3P8UQZUY/S7bCgUHybaFkRU=\",",
                "+      \"requires\": {",
                "+        \"upper-case\": \"1.1.3\"",
                "+      }",
                "+    },",
                "+    \"url\": {",
                "+      \"version\": \"0.11.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/url/-/url-0.11.0.tgz\",",
                "+      \"integrity\": \"sha1-ODjpfPxgUh63PFJajlW/3Z4uKPE=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"punycode\": \"1.3.2\",",
                "+        \"querystring\": \"0.2.0\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"punycode\": {",
                "+          \"version\": \"1.3.2\",",
                "+          \"resolved\": \"https://registry.npmjs.org/punycode/-/punycode-1.3.2.tgz\",",
                "+          \"integrity\": \"sha1-llOgNvt8HuQjQvIyXM7v6jkmxI0=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"url-parse\": {",
                "+      \"version\": \"1.2.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/url-parse/-/url-parse-1.2.0.tgz\",",
                "+      \"integrity\": \"sha512-DT1XbYAfmQP65M/mE6OALxmXzZ/z1+e5zk2TcSKe/KiYbNGZxgtttzC0mR/sjopbpOXcbniq7eIKmocJnUWlEw==\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"querystringify\": \"1.0.0\",",
                "+        \"requires-port\": \"1.0.0\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"querystringify\": {",
                "+          \"version\": \"1.0.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/querystringify/-/querystringify-1.0.0.tgz\",",
                "+          \"integrity\": \"sha1-YoYkIRLFtxL6ZU5SZlK/ahP/Bcs=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"user-home\": {",
                "+      \"version\": \"1.1.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/user-home/-/user-home-1.1.1.tgz\",",
                "+      \"integrity\": \"sha1-K1viOjK2Onyd640PKNSFcko98ZA=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"useragent\": {",
                "+      \"version\": \"2.2.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/useragent/-/useragent-2.2.1.tgz\",",
                "+      \"integrity\": \"sha1-z1k+9PLRdYdei7ZY6pLhik/QbY4=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"lru-cache\": \"2.2.4\",",
                "+        \"tmp\": \"0.0.28\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"lru-cache\": {",
                "+          \"version\": \"2.2.4\",",
                "+          \"resolved\": \"https://registry.npmjs.org/lru-cache/-/lru-cache-2.2.4.tgz\",",
                "+          \"integrity\": \"sha1-bGWGGb7PFAMdDQtZSxYELOTcBj0=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"utf8\": {",
                "+      \"version\": \"2.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/utf8/-/utf8-2.1.0.tgz\",",
                "+      \"integrity\": \"sha1-DP7FyAUtRKI+OqqQgQToB1+V39U=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"util\": {",
                "+      \"version\": \"0.10.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/util/-/util-0.10.3.tgz\",",
                "+      \"integrity\": \"sha1-evsa/lCAUkZInj23/g7TeTNqwPk=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"inherits\": \"2.0.1\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"inherits\": {",
                "+          \"version\": \"2.0.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/inherits/-/inherits-2.0.1.tgz\",",
                "+          \"integrity\": \"sha1-sX0I0ya0Qj5Wjv9xn5GwscvfafE=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"util-deprecate\": {",
                "+      \"version\": \"1.0.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz\",",
                "+      \"integrity\": \"sha1-RQ1Nyfpw3nMnYvvS1KKJgUGaDM8=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"utila\": {",
                "+      \"version\": \"0.4.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/utila/-/utila-0.4.0.tgz\",",
                "+      \"integrity\": \"sha1-ihagXURWV6Oupe7MWxKk+lN5dyw=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"utils-merge\": {",
                "+      \"version\": \"1.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz\",",
                "+      \"integrity\": \"sha1-n5VxD1CiZ5R7LMwSR0HBAoQn5xM=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"uuid\": {",
                "+      \"version\": \"3.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/uuid/-/uuid-3.1.0.tgz\",",
                "+      \"integrity\": \"sha512-DIWtzUkw04M4k3bf1IcpS2tngXEL26YUD2M0tMDUpnUrz2hgzUBlD55a4FjdLGPvfHxS6uluGWvaVEqgBcVa+g==\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"v8flags\": {",
                "+      \"version\": \"2.1.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/v8flags/-/v8flags-2.1.1.tgz\",",
                "+      \"integrity\": \"sha1-qrGh+jDUX4jdMhFIh1rALAtV5bQ=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"user-home\": \"1.1.1\"",
                "+      }",
                "+    },",
                "+    \"validate-npm-package-license\": {",
                "+      \"version\": \"3.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/validate-npm-package-license/-/validate-npm-package-license-3.0.1.tgz\",",
                "+      \"integrity\": \"sha1-KAS6vnEq0zeUWaz74kdGqywwP7w=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"spdx-correct\": \"1.0.2\",",
                "+        \"spdx-expression-parse\": \"1.0.4\"",
                "+      }",
                "+    },",
                "+    \"vary\": {",
                "+      \"version\": \"1.1.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/vary/-/vary-1.1.2.tgz\",",
                "+      \"integrity\": \"sha1-IpnwLG3tMNSllhsLn3RSShj2NPw=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"vendors\": {",
                "+      \"version\": \"1.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/vendors/-/vendors-1.0.1.tgz\",",
                "+      \"integrity\": \"sha1-N61zyO5Bf7PVgOeFMSMH0nSEfyI=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"verror\": {",
                "+      \"version\": \"1.10.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/verror/-/verror-1.10.0.tgz\",",
                "+      \"integrity\": \"sha1-OhBcoXBTr1XW4nDB+CiGguGNpAA=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"assert-plus\": \"1.0.0\",",
                "+        \"core-util-is\": \"1.0.2\",",
                "+        \"extsprintf\": \"1.3.0\"",
                "+      }",
                "+    },",
                "+    \"vm-browserify\": {",
                "+      \"version\": \"0.0.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/vm-browserify/-/vm-browserify-0.0.4.tgz\",",
                "+      \"integrity\": \"sha1-XX6kW7755Kb/ZflUOOCofDV9WnM=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"indexof\": \"0.0.1\"",
                "+      }",
                "+    },",
                "+    \"void-elements\": {",
                "+      \"version\": \"2.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/void-elements/-/void-elements-2.0.1.tgz\",",
                "+      \"integrity\": \"sha1-wGavtYK7HLQSjWDqkjkulNXp2+w=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"watchpack\": {",
                "+      \"version\": \"0.2.9\",",
                "+      \"resolved\": \"https://registry.npmjs.org/watchpack/-/watchpack-0.2.9.tgz\",",
                "+      \"integrity\": \"sha1-Yuqkq15bo1/fwBgnVibjwPXj+ws=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"async\": \"0.9.2\",",
                "+        \"chokidar\": \"1.7.0\",",
                "+        \"graceful-fs\": \"4.1.11\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"async\": {",
                "+          \"version\": \"0.9.2\",",
                "+          \"resolved\": \"https://registry.npmjs.org/async/-/async-0.9.2.tgz\",",
                "+          \"integrity\": \"sha1-rqdNXmHB+JlhO/ZL2mbUx48v0X0=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"webdriver-js-extender\": {",
                "+      \"version\": \"1.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/webdriver-js-extender/-/webdriver-js-extender-1.0.0.tgz\",",
                "+      \"integrity\": \"sha1-gcUzqeM9W/tZe05j4s2yW1R3dRU=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"@types/selenium-webdriver\": \"2.53.43\",",
                "+        \"selenium-webdriver\": \"2.53.3\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"sax\": {",
                "+          \"version\": \"0.6.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/sax/-/sax-0.6.1.tgz\",",
                "+          \"integrity\": \"sha1-VjsZx8HeiS4Jv8Ty/DDjwn8JUrk=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"selenium-webdriver\": {",
                "+          \"version\": \"2.53.3\",",
                "+          \"resolved\": \"https://registry.npmjs.org/selenium-webdriver/-/selenium-webdriver-2.53.3.tgz\",",
                "+          \"integrity\": \"sha1-0p/1qVff8aG0ncRXdW5OS/vc4IU=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"adm-zip\": \"0.4.4\",",
                "+            \"rimraf\": \"2.6.2\",",
                "+            \"tmp\": \"0.0.24\",",
                "+            \"ws\": \"1.0.1\",",
                "+            \"xml2js\": \"0.4.4\"",
                "+          }",
                "+        },",
                "+        \"tmp\": {",
                "+          \"version\": \"0.0.24\",",
                "+          \"resolved\": \"https://registry.npmjs.org/tmp/-/tmp-0.0.24.tgz\",",
                "+          \"integrity\": \"sha1-1qXhmNFKmDXMby18PZ4wJCjIzxI=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"xml2js\": {",
                "+          \"version\": \"0.4.4\",",
                "+          \"resolved\": \"https://registry.npmjs.org/xml2js/-/xml2js-0.4.4.tgz\",",
                "+          \"integrity\": \"sha1-MREBAAMAiuGSQOuhdJe1fHKcVV0=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"sax\": \"0.6.1\",",
                "+            \"xmlbuilder\": \"9.0.4\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"webpack\": {",
                "+      \"version\": \"1.15.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/webpack/-/webpack-1.15.0.tgz\",",
                "+      \"integrity\": \"sha1-T/MfU9sDM55VFkqdRo7gMklo/pg=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"acorn\": \"3.3.0\",",
                "+        \"async\": \"1.5.2\",",
                "+        \"clone\": \"1.0.3\",",
                "+        \"enhanced-resolve\": \"0.9.1\",",
                "+        \"interpret\": \"0.6.6\",",
                "+        \"loader-utils\": \"0.2.17\",",
                "+        \"memory-fs\": \"0.3.0\",",
                "+        \"mkdirp\": \"0.5.1\",",
                "+        \"node-libs-browser\": \"0.7.0\",",
                "+        \"optimist\": \"0.6.1\",",
                "+        \"supports-color\": \"3.2.3\",",
                "+        \"tapable\": \"0.1.10\",",
                "+        \"uglify-js\": \"2.7.5\",",
                "+        \"watchpack\": \"0.2.9\",",
                "+        \"webpack-core\": \"0.6.9\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"acorn\": {",
                "+          \"version\": \"3.3.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/acorn/-/acorn-3.3.0.tgz\",",
                "+          \"integrity\": \"sha1-ReN/s56No/JbruP/U2niu18iAXo=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"async\": {",
                "+          \"version\": \"1.5.2\",",
                "+          \"resolved\": \"https://registry.npmjs.org/async/-/async-1.5.2.tgz\",",
                "+          \"integrity\": \"sha1-7GphrlZIDAw8skHJVhjiCJL5Zyo=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"interpret\": {",
                "+          \"version\": \"0.6.6\",",
                "+          \"resolved\": \"https://registry.npmjs.org/interpret/-/interpret-0.6.6.tgz\",",
                "+          \"integrity\": \"sha1-/s16GOfOXKar+5U+H4YhOknxYls=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"isarray\": {",
                "+          \"version\": \"1.0.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz\",",
                "+          \"integrity\": \"sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"memory-fs\": {",
                "+          \"version\": \"0.3.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/memory-fs/-/memory-fs-0.3.0.tgz\",",
                "+          \"integrity\": \"sha1-e8xrYp46Q+hx1+Kaymrop/FcuyA=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"errno\": \"0.1.5\",",
                "+            \"readable-stream\": \"2.3.3\"",
                "+          }",
                "+        },",
                "+        \"readable-stream\": {",
                "+          \"version\": \"2.3.3\",",
                "+          \"resolved\": \"https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.3.tgz\",",
                "+          \"integrity\": \"sha512-m+qzzcn7KUxEmd1gMbchF+Y2eIUbieUaxkWtptyHywrX0rE8QEYqPC07Vuy4Wm32/xE16NcdBctb8S0Xe/5IeQ==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"core-util-is\": \"1.0.2\",",
                "+            \"inherits\": \"2.0.3\",",
                "+            \"isarray\": \"1.0.0\",",
                "+            \"process-nextick-args\": \"1.0.7\",",
                "+            \"safe-buffer\": \"5.1.1\",",
                "+            \"string_decoder\": \"1.0.3\",",
                "+            \"util-deprecate\": \"1.0.2\"",
                "+          }",
                "+        },",
                "+        \"source-map\": {",
                "+          \"version\": \"0.5.7\",",
                "+          \"resolved\": \"https://registry.npmjs.org/source-map/-/source-map-0.5.7.tgz\",",
                "+          \"integrity\": \"sha1-igOdLRAh0i0eoUyA2OpGi6LvP8w=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"string_decoder\": {",
                "+          \"version\": \"1.0.3\",",
                "+          \"resolved\": \"https://registry.npmjs.org/string_decoder/-/string_decoder-1.0.3.tgz\",",
                "+          \"integrity\": \"sha512-4AH6Z5fzNNBcH+6XDMfA/BTt87skxqJlO0lAh3Dker5zThcAxG6mKz+iGu308UKoPPQ8Dcqx/4JhujzltRa+hQ==\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"safe-buffer\": \"5.1.1\"",
                "+          }",
                "+        },",
                "+        \"uglify-js\": {",
                "+          \"version\": \"2.7.5\",",
                "+          \"resolved\": \"https://registry.npmjs.org/uglify-js/-/uglify-js-2.7.5.tgz\",",
                "+          \"integrity\": \"sha1-RhLAx7qu4rp8SH3kkErhIgefLKg=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"async\": \"0.2.10\",",
                "+            \"source-map\": \"0.5.7\",",
                "+            \"uglify-to-browserify\": \"1.0.2\",",
                "+            \"yargs\": \"3.10.0\"",
                "+          },",
                "+          \"dependencies\": {",
                "+            \"async\": {",
                "+              \"version\": \"0.2.10\",",
                "+              \"resolved\": \"https://registry.npmjs.org/async/-/async-0.2.10.tgz\",",
                "+              \"integrity\": \"sha1-trvgsGdLnXGXCMo43owjfLUmw9E=\",",
                "+              \"dev\": true",
                "+            }",
                "+          }",
                "+        },",
                "+        \"yargs\": {",
                "+          \"version\": \"3.10.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/yargs/-/yargs-3.10.0.tgz\",",
                "+          \"integrity\": \"sha1-9+572FfdfB0tOMDnTvvWgdFDH9E=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"camelcase\": \"1.2.1\",",
                "+            \"cliui\": \"2.1.0\",",
                "+            \"decamelize\": \"1.2.0\",",
                "+            \"window-size\": \"0.1.0\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"webpack-core\": {",
                "+      \"version\": \"0.6.9\",",
                "+      \"resolved\": \"https://registry.npmjs.org/webpack-core/-/webpack-core-0.6.9.tgz\",",
                "+      \"integrity\": \"sha1-/FcViMhVjad76e+23r3Fo7FyvcI=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"source-list-map\": \"0.1.8\",",
                "+        \"source-map\": \"0.4.4\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"source-map\": {",
                "+          \"version\": \"0.4.4\",",
                "+          \"resolved\": \"https://registry.npmjs.org/source-map/-/source-map-0.4.4.tgz\",",
                "+          \"integrity\": \"sha1-66T12pwNyZneaAMti092FzZSA2s=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"amdefine\": \"1.0.1\"",
                "+          }",
                "+        }",
                "+      }",
                "+    },",
                "+    \"webpack-dev-middleware\": {",
                "+      \"version\": \"1.12.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/webpack-dev-middleware/-/webpack-dev-middleware-1.12.2.tgz\",",
                "+      \"integrity\": \"sha512-FCrqPy1yy/sN6U/SaEZcHKRXGlqU0DUaEBL45jkUYoB8foVb6wCnbIJ1HKIx+qUFTW+3JpVcCJCxZ8VATL4e+A==\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"memory-fs\": \"0.4.1\",",
                "+        \"mime\": \"1.6.0\",",
                "+        \"path-is-absolute\": \"1.0.1\",",
                "+        \"range-parser\": \"1.2.0\",",
                "+        \"time-stamp\": \"2.0.0\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"mime\": {",
                "+          \"version\": \"1.6.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/mime/-/mime-1.6.0.tgz\",",
                "+          \"integrity\": \"sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"webpack-dev-server\": {",
                "+      \"version\": \"1.16.5\",",
                "+      \"resolved\": \"https://registry.npmjs.org/webpack-dev-server/-/webpack-dev-server-1.16.5.tgz\",",
                "+      \"integrity\": \"sha1-DL1fLSrI1OWTqs1clwLnu9XlmJI=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"compression\": \"1.7.1\",",
                "+        \"connect-history-api-fallback\": \"1.5.0\",",
                "+        \"express\": \"4.16.2\",",
                "+        \"http-proxy-middleware\": \"0.17.4\",",
                "+        \"open\": \"0.0.5\",",
                "+        \"optimist\": \"0.6.1\",",
                "+        \"serve-index\": \"1.9.1\",",
                "+        \"sockjs\": \"0.3.19\",",
                "+        \"sockjs-client\": \"1.1.4\",",
                "+        \"stream-cache\": \"0.0.2\",",
                "+        \"strip-ansi\": \"3.0.1\",",
                "+        \"supports-color\": \"3.2.3\",",
                "+        \"webpack-dev-middleware\": \"1.12.2\"",
                "+      }",
                "+    },",
                "+    \"webpack-sources\": {",
                "+      \"version\": \"0.1.5\",",
                "+      \"resolved\": \"https://registry.npmjs.org/webpack-sources/-/webpack-sources-0.1.5.tgz\",",
                "+      \"integrity\": \"sha1-qh86vw8NdNtxEcQOUAuE+WZkB1A=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"source-list-map\": \"0.1.8\",",
                "+        \"source-map\": \"0.5.7\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"source-map\": {",
                "+          \"version\": \"0.5.7\",",
                "+          \"resolved\": \"https://registry.npmjs.org/source-map/-/source-map-0.5.7.tgz\",",
                "+          \"integrity\": \"sha1-igOdLRAh0i0eoUyA2OpGi6LvP8w=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"websocket-driver\": {",
                "+      \"version\": \"0.7.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/websocket-driver/-/websocket-driver-0.7.0.tgz\",",
                "+      \"integrity\": \"sha1-DK+dLXVdk67gSdS90NP+LMoqJOs=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"http-parser-js\": \"0.4.9\",",
                "+        \"websocket-extensions\": \"0.1.3\"",
                "+      }",
                "+    },",
                "+    \"websocket-extensions\": {",
                "+      \"version\": \"0.1.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/websocket-extensions/-/websocket-extensions-0.1.3.tgz\",",
                "+      \"integrity\": \"sha512-nqHUnMXmBzT0w570r2JpJxfiSD1IzoI+HGVdd3aZ0yNi3ngvQ4jv1dtHt5VGxfI2yj5yqImPhOK4vmIh2xMbGg==\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"whet.extend\": {",
                "+      \"version\": \"0.9.9\",",
                "+      \"resolved\": \"https://registry.npmjs.org/whet.extend/-/whet.extend-0.9.9.tgz\",",
                "+      \"integrity\": \"sha1-+HfVv2SMl+WqVC+twW1qJZucEaE=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"which\": {",
                "+      \"version\": \"1.0.9\",",
                "+      \"resolved\": \"https://registry.npmjs.org/which/-/which-1.0.9.tgz\",",
                "+      \"integrity\": \"sha1-RgwdoPgQED0DIam2M6+eV15kSG8=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"window-size\": {",
                "+      \"version\": \"0.1.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/window-size/-/window-size-0.1.0.tgz\",",
                "+      \"integrity\": \"sha1-VDjNLqk7IC76Ohn+iIeu58lPnJ0=\"",
                "+    },",
                "+    \"wiredep\": {",
                "+      \"version\": \"2.2.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/wiredep/-/wiredep-2.2.2.tgz\",",
                "+      \"integrity\": \"sha1-FETRirLkk3UEEJP+3d3Rto97ZrM=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"bower-config\": \"0.5.3\",",
                "+        \"chalk\": \"0.5.1\",",
                "+        \"glob\": \"4.5.3\",",
                "+        \"lodash\": \"2.4.2\",",
                "+        \"minimist\": \"1.2.0\",",
                "+        \"propprop\": \"0.3.1\",",
                "+        \"through2\": \"0.6.5\"",
                "+      },",
                "+      \"dependencies\": {",
                "+        \"ansi-regex\": {",
                "+          \"version\": \"0.2.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/ansi-regex/-/ansi-regex-0.2.1.tgz\",",
                "+          \"integrity\": \"sha1-DY6UaWej2BQ/k+JOKYUl/BsiNfk=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"ansi-styles\": {",
                "+          \"version\": \"1.1.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/ansi-styles/-/ansi-styles-1.1.0.tgz\",",
                "+          \"integrity\": \"sha1-6uy/Zs1waIJ2Cy9GkVgrj1XXp94=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"chalk\": {",
                "+          \"version\": \"0.5.1\",",
                "+          \"resolved\": \"https://registry.npmjs.org/chalk/-/chalk-0.5.1.tgz\",",
                "+          \"integrity\": \"sha1-Zjs6ZItotV0EaQ1JFnqoN4WPIXQ=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"ansi-styles\": \"1.1.0\",",
                "+            \"escape-string-regexp\": \"1.0.5\",",
                "+            \"has-ansi\": \"0.1.0\",",
                "+            \"strip-ansi\": \"0.3.0\",",
                "+            \"supports-color\": \"0.2.0\"",
                "+          }",
                "+        },",
                "+        \"glob\": {",
                "+          \"version\": \"4.5.3\",",
                "+          \"resolved\": \"https://registry.npmjs.org/glob/-/glob-4.5.3.tgz\",",
                "+          \"integrity\": \"sha1-xstz0yJsHv7wTePFbQEvAzd+4V8=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"inflight\": \"1.0.6\",",
                "+            \"inherits\": \"2.0.3\",",
                "+            \"minimatch\": \"2.0.10\",",
                "+            \"once\": \"1.4.0\"",
                "+          }",
                "+        },",
                "+        \"has-ansi\": {",
                "+          \"version\": \"0.1.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/has-ansi/-/has-ansi-0.1.0.tgz\",",
                "+          \"integrity\": \"sha1-hPJlqujA5qiKEtcCKJS3VoiUxi4=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"ansi-regex\": \"0.2.1\"",
                "+          }",
                "+        },",
                "+        \"lodash\": {",
                "+          \"version\": \"2.4.2\",",
                "+          \"resolved\": \"https://registry.npmjs.org/lodash/-/lodash-2.4.2.tgz\",",
                "+          \"integrity\": \"sha1-+t2DS5aDBz2hebPq5tnA0VBT9z4=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"minimatch\": {",
                "+          \"version\": \"2.0.10\",",
                "+          \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-2.0.10.tgz\",",
                "+          \"integrity\": \"sha1-jQh8OcazjAAbl/ynzm0OHoCvusc=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"brace-expansion\": \"1.1.8\"",
                "+          }",
                "+        },",
                "+        \"minimist\": {",
                "+          \"version\": \"1.2.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/minimist/-/minimist-1.2.0.tgz\",",
                "+          \"integrity\": \"sha1-o1AIsg9BOD7sH7kU9M1d95omQoQ=\",",
                "+          \"dev\": true",
                "+        },",
                "+        \"strip-ansi\": {",
                "+          \"version\": \"0.3.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/strip-ansi/-/strip-ansi-0.3.0.tgz\",",
                "+          \"integrity\": \"sha1-JfSOoiynkYfzF0pNuHWTR7sSYiA=\",",
                "+          \"dev\": true,",
                "+          \"requires\": {",
                "+            \"ansi-regex\": \"0.2.1\"",
                "+          }",
                "+        },",
                "+        \"supports-color\": {",
                "+          \"version\": \"0.2.0\",",
                "+          \"resolved\": \"https://registry.npmjs.org/supports-color/-/supports-color-0.2.0.tgz\",",
                "+          \"integrity\": \"sha1-2S3iaU6z9nMjlz1649i1W0wiGQo=\",",
                "+          \"dev\": true",
                "+        }",
                "+      }",
                "+    },",
                "+    \"wordwrap\": {",
                "+      \"version\": \"0.0.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/wordwrap/-/wordwrap-0.0.2.tgz\",",
                "+      \"integrity\": \"sha1-t5Zpu0LstAn4PVg8rVLKF+qhZD8=\"",
                "+    },",
                "+    \"wrappy\": {",
                "+      \"version\": \"1.0.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz\",",
                "+      \"integrity\": \"sha1-tSQ9jz7BqjXxNkYFvA0QNuMKtp8=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"write\": {",
                "+      \"version\": \"0.2.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/write/-/write-0.2.1.tgz\",",
                "+      \"integrity\": \"sha1-X8A4KOJkzqP+kUVUdvejxWbLB1c=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"mkdirp\": \"0.5.1\"",
                "+      }",
                "+    },",
                "+    \"ws\": {",
                "+      \"version\": \"1.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/ws/-/ws-1.0.1.tgz\",",
                "+      \"integrity\": \"sha1-fQsqLljN3YGQOcKcneZQReGzEOk=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"options\": \"0.0.6\",",
                "+        \"ultron\": \"1.0.2\"",
                "+      }",
                "+    },",
                "+    \"xml\": {",
                "+      \"version\": \"1.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/xml/-/xml-1.0.0.tgz\",",
                "+      \"integrity\": \"sha1-3j7pEkd74vJQtg9hLzSoxNphbv4=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"xml-char-classes\": {",
                "+      \"version\": \"1.0.0\",",
                "+      \"resolved\": \"https://registry.npmjs.org/xml-char-classes/-/xml-char-classes-1.0.0.tgz\",",
                "+      \"integrity\": \"sha1-ZGV4SKIP/F31g6Qq2KJ3tFErvE0=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"xml2js\": {",
                "+      \"version\": \"0.4.19\",",
                "+      \"resolved\": \"https://registry.npmjs.org/xml2js/-/xml2js-0.4.19.tgz\",",
                "+      \"integrity\": \"sha512-esZnJZJOiJR9wWKMyuvSE1y6Dq5LCuJanqhxslH2bxM6duahNZ+HMpCLhBQGZkbX6xRf8x1Y2eJlgt2q3qo49Q==\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"sax\": \"1.2.4\",",
                "+        \"xmlbuilder\": \"9.0.4\"",
                "+      }",
                "+    },",
                "+    \"xmlbuilder\": {",
                "+      \"version\": \"9.0.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/xmlbuilder/-/xmlbuilder-9.0.4.tgz\",",
                "+      \"integrity\": \"sha1-UZy0ymhtAFqEINNJbz8MruzKWA8=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"xmlhttprequest-ssl\": {",
                "+      \"version\": \"1.5.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/xmlhttprequest-ssl/-/xmlhttprequest-ssl-1.5.1.tgz\",",
                "+      \"integrity\": \"sha1-O3dB/qSoZnWXbpCNKW1ERZYfqmc=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"xtend\": {",
                "+      \"version\": \"4.0.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/xtend/-/xtend-4.0.1.tgz\",",
                "+      \"integrity\": \"sha1-pcbVMr5lbiPbgg77lDofBJmNY68=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"yallist\": {",
                "+      \"version\": \"2.1.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/yallist/-/yallist-2.1.2.tgz\",",
                "+      \"integrity\": \"sha1-HBH5IY8HYImkfdUS+TxmmaaoHVI=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"yargs\": {",
                "+      \"version\": \"3.5.4\",",
                "+      \"resolved\": \"https://registry.npmjs.org/yargs/-/yargs-3.5.4.tgz\",",
                "+      \"integrity\": \"sha1-2K/49mXpTDS9JZvevRv68N3TU2E=\",",
                "+      \"requires\": {",
                "+        \"camelcase\": \"1.2.1\",",
                "+        \"decamelize\": \"1.2.0\",",
                "+        \"window-size\": \"0.1.0\",",
                "+        \"wordwrap\": \"0.0.2\"",
                "+      }",
                "+    },",
                "+    \"yauzl\": {",
                "+      \"version\": \"2.4.1\",",
                "+      \"resolved\": \"https://registry.npmjs.org/yauzl/-/yauzl-2.4.1.tgz\",",
                "+      \"integrity\": \"sha1-lSj0QtqxsihOWLQ3m7GU4i4MQAU=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"fd-slicer\": \"1.0.1\"",
                "+      }",
                "+    },",
                "+    \"yeast\": {",
                "+      \"version\": \"0.1.2\",",
                "+      \"resolved\": \"https://registry.npmjs.org/yeast/-/yeast-0.1.2.tgz\",",
                "+      \"integrity\": \"sha1-AI4G2AlDIMNy28L47XagymyKxBk=\",",
                "+      \"dev\": true",
                "+    },",
                "+    \"zlib-browserify\": {",
                "+      \"version\": \"0.0.3\",",
                "+      \"resolved\": \"https://registry.npmjs.org/zlib-browserify/-/zlib-browserify-0.0.3.tgz\",",
                "+      \"integrity\": \"sha1-JAzNv9AgP6hCsTDe77FBQSLIzFA=\",",
                "+      \"dev\": true,",
                "+      \"requires\": {",
                "+        \"tape\": \"0.2.2\"",
                "+      }",
                "+    }",
                "+  }",
                "+}",
                "diff --git a/zeppelin-web/pom.xml b/zeppelin-web/pom.xml",
                "index 227f30b17..efec03941 100644",
                "--- a/zeppelin-web/pom.xml",
                "+++ b/zeppelin-web/pom.xml",
                "@@ -48,3 +48,2 @@",
                "     <plugin.frontend.npmDownloadRoot>http://registry.npmjs.org/npm/-/</plugin.frontend.npmDownloadRoot>",
                "-    <plugin.frontend.yarnDownloadRoot>https://github.com/yarnpkg/yarn/releases/download/</plugin.frontend.yarnDownloadRoot>",
                "   </properties>",
                "@@ -69,3 +68,2 @@",
                "           <npmDownloadRoot>${plugin.frontend.npmDownloadRoot}</npmDownloadRoot>",
                "-          <yarnDownloadRoot>${plugin.frontend.yarnDownloadRoot}</yarnDownloadRoot>",
                "         </configuration>",
                "@@ -75,5 +73,4 @@",
                "           <execution>",
                "-            <id>install node and yarn</id>",
                "+            <id>install node</id>",
                "             <goals>",
                "-              <goal>install-node-and-yarn</goal>",
                "               <goal>install-node-and-npm</goal>",
                "@@ -82,3 +79,2 @@",
                "               <nodeVersion>${node.version}</nodeVersion>",
                "-              <yarnVersion>${yarn.version}</yarnVersion>",
                "               <npmVersion>${npm.version}</npmVersion>",
                "@@ -88,5 +84,5 @@",
                "           <execution>",
                "-            <id>yarn install</id>",
                "+            <id>npm install</id>",
                "             <goals>",
                "-              <goal>yarn</goal>",
                "+              <goal>npm</goal>",
                "             </goals>",
                "@@ -99,5 +95,5 @@",
                "           <execution>",
                "-            <id>yarn build</id>",
                "+            <id>npm build</id>",
                "             <goals>",
                "-              <goal>yarn</goal>",
                "+              <goal>npm</goal>",
                "             </goals>",
                "@@ -110,5 +106,5 @@",
                "           <execution>",
                "-            <id>yarn test</id>",
                "+            <id>npm test</id>",
                "             <goals>",
                "-              <goal>yarn</goal>",
                "+              <goal>npm</goal>",
                "             </goals>",
                "@@ -122,5 +118,5 @@",
                "             <execution>",
                "-              <id>yarn e2e</id>",
                "+              <id>npm e2e</id>",
                "               <goals>",
                "-                <goal>yarn</goal>",
                "+                <goal>npm</goal>",
                "               </goals>"
            ],
            "changed_files": [
                "pom.xml",
                "zeppelin-web/package-lock.json",
                "zeppelin-web/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3100": ""
            },
            "ghissue_refs": {
                "2707": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: user",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3100",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2707",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "764fef58c9c9ed343348addef3f8345eb698f4eb",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1509781838,
            "hunks": 2,
            "message": "[ZEPPELIN-3025] Windows Build Error ### What is this PR for? When i try to build Zeppelin from apache master repo on Windows 10 i get this error: ```bash [ERROR] Failed to execute goal org.apache.maven.plugins:maven-dependency-plugin:2.8:copy (copy-artifact) on project zeppelin-interpreter: Error copying artifact from C:\\Users\\Andrea\\workspace_zeppelin\\zeppelin-master\\zeppelin-interpreter\\target\\zeppelin-interpreter-0.8.0-SNAPSHOT.jar to C:\\Users\\Andrea\\workspace_zeppelin\\zeppelin-master\\zeppelin-interpreter\\interpreter\\Zeppelin: Interpreter\\zeppelin-interpreter-0.8.0-SNAPSHOT.jar ``` ### What type of PR is it? [Bug Fix] ### Todos * [x] - Change build dir ### What is the Jira issue? [ZEPPELIN-3025](https://issues.apache.org/jira/browse/ZEPPELIN-3025) ### How should this be tested? * Build the project in Windows env ### Questions: * Does the licenses files need update? no * Is there breaking changes for older versions? no * Does this needs documentation? no Author: Andrea Santurbano <santand@gmail.com> Closes #2646 from conker84/winbuild and squashes the following commits: ad7898b [Andrea Santurbano] Merge branch 'winbuild' of https://github.com/conker84/zeppelin into winbuild 67ae551 [Andrea Santurbano] clean c4d49f9 [Andrea Santurbano] review by zjffdu 96f8384 [Andrea Santurbano] Changet folder name in order to allow windows builds d8c360a [Andrea Santurbano] clean 55c4a9d [Andrea Santurbano] review by zjffdu 66e77b9 [Andrea Santurbano] Changet folder name in order to allow windows builds",
            "diff": [
                "diff --git a/zeppelin-interpreter/pom.xml b/zeppelin-interpreter/pom.xml",
                "index 3bb50c732..b0fd99209 100644",
                "--- a/zeppelin-interpreter/pom.xml",
                "+++ b/zeppelin-interpreter/pom.xml",
                "@@ -243,3 +243,2 @@",
                "       <plugins>",
                "-",
                "         <plugin>",
                "@@ -253,59 +252,2 @@",
                "         </plugin>",
                "-",
                "-        <plugin>",
                "-          <artifactId>maven-dependency-plugin</artifactId>",
                "-          <executions>",
                "-            <execution>",
                "-              <id>copy-dependencies</id>",
                "-              <phase>package</phase>",
                "-              <goals>",
                "-                <goal>copy-dependencies</goal>",
                "-              </goals>",
                "-              <configuration>",
                "-                <outputDirectory>${basedir}/interpreter/${project.name}</outputDirectory>",
                "-                <overWriteReleases>false</overWriteReleases>",
                "-                <overWriteSnapshots>false</overWriteSnapshots>",
                "-                <overWriteIfNewer>true</overWriteIfNewer>",
                "-                <includeScope>runtime</includeScope>",
                "-              </configuration>",
                "-            </execution>",
                "-            <execution>",
                "-              <id>copy-artifact</id>",
                "-              <phase>package</phase>",
                "-              <goals>",
                "-                <goal>copy</goal>",
                "-              </goals>",
                "-              <configuration>",
                "-                <outputDirectory>${basedir}/interpreter/${project.name}</outputDirectory>",
                "-                <overWriteReleases>false</overWriteReleases>",
                "-                <overWriteSnapshots>false</overWriteSnapshots>",
                "-                <overWriteIfNewer>true</overWriteIfNewer>",
                "-                <artifactItems>",
                "-                  <artifactItem>",
                "-                    <groupId>${project.groupId}</groupId>",
                "-                    <artifactId>${project.artifactId}</artifactId>",
                "-                    <version>${project.version}</version>",
                "-                    <type>${project.packaging}</type>",
                "-                  </artifactItem>",
                "-                </artifactItems>",
                "-              </configuration>",
                "-            </execution>",
                "-          </executions>",
                "-        </plugin>",
                "-",
                "-        <plugin>",
                "-          <artifactId>maven-resources-plugin</artifactId>",
                "-          <executions>",
                "-            <execution>",
                "-              <id>copy-resources</id>",
                "-              <phase>package</phase>",
                "-              <goals>",
                "-                <goal>resources</goal>",
                "-              </goals>",
                "-              <configuration>",
                "-                <outputDirectory>${basedir}/interpreter/{project.name}</outputDirectory>",
                "-              </configuration>",
                "-            </execution>",
                "-          </executions>",
                "-        </plugin>",
                "       </plugins>"
            ],
            "changed_files": [
                "zeppelin-interpreter/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3025": ""
            },
            "ghissue_refs": {
                "2646": "[ZEPPELIN-281] Windows build #876"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: allow, user",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3025",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2646",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7af4fab420ed42edbe9f97c1c4d63823ff321c2d",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1515728716,
            "hunks": 2,
            "message": "ZEPPELIN-3136. IPython Code Completion Improvement ### What is this PR for? This is for better code completion support for IPythonInterpreter ### What type of PR is it? [Improvement ] ### Todos * [ ] - Task ### What is the Jira issue? * https://issues.apache.org/jira/browse/ZEPPELIN-3136 ### How should this be tested? * Unit test is updated and Manually verified. ### Screenshots (if appropriate) ![code_completion](https://user-images.githubusercontent.com/164491/34858941-3f28105a-f78e-11e7-8341-2fbfd306ba5b.gif) ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Jeff Zhang <zjffdu@apache.org> Closes #2725 from zjffdu/ZEPPELIN-3136 and squashes the following commits: 1179fc8 [Jeff Zhang] ZPEPELIN-3136. IPython Code Completion Improvement",
            "diff": [
                "diff --git a/python/src/main/java/org/apache/zeppelin/python/IPythonInterpreter.java b/python/src/main/java/org/apache/zeppelin/python/IPythonInterpreter.java",
                "index 2184c1f10..5ae03f023 100644",
                "--- a/python/src/main/java/org/apache/zeppelin/python/IPythonInterpreter.java",
                "+++ b/python/src/main/java/org/apache/zeppelin/python/IPythonInterpreter.java",
                "@@ -338,2 +338,3 @@ public class IPythonInterpreter extends Interpreter implements ExecuteResultHand",
                "                                                 InterpreterContext interpreterContext) {",
                "+    LOGGER.debug(\"Call completion for: \" + buf);",
                "     List<InterpreterCompletion> completions = new ArrayList<>();",
                "@@ -344,4 +345,8 @@ public class IPythonInterpreter extends Interpreter implements ExecuteResultHand",
                "     for (int i = 0; i < response.getMatchesCount(); i++) {",
                "-      completions.add(new InterpreterCompletion(",
                "-          response.getMatches(i), response.getMatches(i), \"\"));",
                "+      String match = response.getMatches(i);",
                "+      int lastIndexOfDot = match.lastIndexOf(\".\");",
                "+      if (lastIndexOfDot != -1) {",
                "+        match = match.substring(lastIndexOfDot + 1);",
                "+      }",
                "+      completions.add(new InterpreterCompletion(match, match, \"\"));",
                "     }"
            ],
            "changed_files": [
                "python/src/main/java/org/apache/zeppelin/python/IPythonInterpreter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3136": "",
                "ZPEPELIN-3136": ""
            },
            "ghissue_refs": {
                "2725": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: user",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3136, ZPEPELIN-3136",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2725",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "791619d61165f849de36c89701cad964f77e859c",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1506341034,
            "hunks": 11,
            "message": "[ZEPPELIN-2950] Support Ceph as a notebook storage ### What is this PR for? Make Zeppelin support Ceph as a notebook storage. Ceph has APIs which are compatible with AWS S3 APIs. However, it supports only AWS Signature V2 and GetObject requests of aws-sdk-java use V4 by default: https://github.com/aws/aws-sdk-java/issues/372 According to https://github.com/aws/aws-sdk-java/issues/372#issuecomment-137299691 , the Zeppelin configuration of `zeppelin.notebook.s3.signerOverride` is added to make the `signerOverride` field of a `ClientConfiguration` instance configurable. ### What type of PR is it? [Improvement] ### Todos ### What is the Jira issue? * https://issues.apache.org/jira/browse/ZEPPELIN-2950 ### How should this be tested? Tested manually. ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Keiji Yoshida <kjmrknsn@gmail.com> Closes #2598 from kjmrknsn/feature/ceph-support and squashes the following commits: c66cb63 [Keiji Yoshida] Support Ceph as a notebook storage",
            "diff": [
                "diff --git a/conf/zeppelin-site.xml.template b/conf/zeppelin-site.xml.template",
                "index b25ba19c8..4c31669b6 100755",
                "--- a/conf/zeppelin-site.xml.template",
                "+++ b/conf/zeppelin-site.xml.template",
                "@@ -140,2 +140,12 @@",
                "+<!-- Optional override to control which signature algorithm should be used to sign AWS requests -->",
                "+<!-- Set this property to \"S3SignerType\" if your AWS S3 compatible APIs support only AWS Signature Version 2 such as Ceph. -->",
                "+<!--",
                "+<property>",
                "+  <name>zeppelin.notebook.s3.signerOverride</name>",
                "+  <value>S3SignerType</value>",
                "+  <description>optional override to control which signature algorithm should be used to sign AWS requests</description>",
                "+</property>",
                "+-->",
                "+",
                " <!-- If using Azure for storage use the following settings -->",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "index 3a82bc589..720d6ec6e 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "@@ -385,2 +385,6 @@ public class ZeppelinConfiguration extends XMLConfiguration {",
                "+  public String getS3SignerOverride() {",
                "+    return getString(ConfVars.ZEPPELIN_NOTEBOOK_S3_SIGNEROVERRIDE);",
                "+  }",
                "+",
                "   public String getMongoUri() {",
                "@@ -656,2 +660,3 @@ public class ZeppelinConfiguration extends XMLConfiguration {",
                "     ZEPPELIN_NOTEBOOK_S3_SSE(\"zeppelin.notebook.s3.sse\", false),",
                "+    ZEPPELIN_NOTEBOOK_S3_SIGNEROVERRIDE(\"zeppelin.notebook.s3.signerOverride\", null),",
                "     ZEPPELIN_NOTEBOOK_AZURE_CONNECTION_STRING(\"zeppelin.notebook.azure.connectionString\", null),",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/S3NotebookRepo.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/S3NotebookRepo.java",
                "index 16b270cd8..8828985e5 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/S3NotebookRepo.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/S3NotebookRepo.java",
                "@@ -44,2 +44,4 @@ import org.slf4j.LoggerFactory;",
                " import com.amazonaws.AmazonClientException;",
                "+import com.amazonaws.ClientConfiguration;",
                "+import com.amazonaws.ClientConfigurationFactory;",
                " import com.amazonaws.auth.AWSCredentialsProvider;",
                "@@ -96,3 +98,3 @@ public class S3NotebookRepo implements NotebookRepo {",
                "     AWSCredentialsProvider credentialsProvider = new DefaultAWSCredentialsProviderChain();",
                "-    CryptoConfiguration cryptoConf = null;",
                "+    CryptoConfiguration cryptoConf = new CryptoConfiguration();",
                "     String keyRegion = conf.getS3KMSKeyRegion();",
                "@@ -100,5 +102,6 @@ public class S3NotebookRepo implements NotebookRepo {",
                "     if (StringUtils.isNotBlank(keyRegion)) {",
                "-      cryptoConf = new CryptoConfiguration();",
                "       cryptoConf.setAwsKmsRegion(Region.getRegion(Regions.fromName(keyRegion)));",
                "     }",
                "+",
                "+    ClientConfiguration cliConf = createClientConfiguration();",
                "@@ -109,7 +112,3 @@ public class S3NotebookRepo implements NotebookRepo {",
                "       KMSEncryptionMaterialsProvider emp = new KMSEncryptionMaterialsProvider(kmsKeyID);",
                "-      if (cryptoConf != null) {",
                "-        this.s3client = new AmazonS3EncryptionClient(credentialsProvider, emp, cryptoConf);",
                "-      } else {",
                "-        this.s3client = new AmazonS3EncryptionClient(credentialsProvider, emp);",
                "-      }",
                "+      this.s3client = new AmazonS3EncryptionClient(credentialsProvider, emp, cliConf, cryptoConf);",
                "     }",
                "@@ -118,3 +117,3 @@ public class S3NotebookRepo implements NotebookRepo {",
                "       EncryptionMaterialsProvider emp = createCustomProvider(conf);",
                "-      this.s3client = new AmazonS3EncryptionClient(credentialsProvider, emp);",
                "+      this.s3client = new AmazonS3EncryptionClient(credentialsProvider, emp, cliConf, cryptoConf);",
                "     }",
                "@@ -122,3 +121,3 @@ public class S3NotebookRepo implements NotebookRepo {",
                "       // regular S3",
                "-      this.s3client = new AmazonS3Client(credentialsProvider);",
                "+      this.s3client = new AmazonS3Client(credentialsProvider, cliConf);",
                "     }",
                "@@ -156,2 +155,18 @@ public class S3NotebookRepo implements NotebookRepo {",
                "+  /**",
                "+   * Create AWS client configuration and return it.",
                "+   * @return AWS client configuration",
                "+   */",
                "+  private ClientConfiguration createClientConfiguration() {",
                "+    ClientConfigurationFactory configFactory = new ClientConfigurationFactory();",
                "+    ClientConfiguration config = configFactory.getConfig();",
                "+",
                "+    String s3SignerOverride = conf.getS3SignerOverride();",
                "+    if (StringUtils.isNotBlank(s3SignerOverride)) {",
                "+      config.setSignerOverride(s3SignerOverride);",
                "+    }",
                "+",
                "+    return config;",
                "+  }",
                "+",
                "   @Override"
            ],
            "changed_files": [
                "conf/zeppelin-site.xml.template",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/S3NotebookRepo.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-2950": ""
            },
            "ghissue_refs": {
                "2598": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: default",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-2950",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2598",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4dc6bf57080e11ebf0533bbedcdba780c5e71398",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1511880828,
            "hunks": 4,
            "message": "[ZEPPELIN-3076]Chart field is also draggable and sortable in the 'keys', 'groups' and 'values' ### What is this PR for? Current the `keys`, `groups` and `values` is only droppable. It is a little inconvenient if I want to drag it to other place or sort it. This feature let `keys`, `groups` and `values` not only `droppable`, but also `draggable` and `sorttable`. ### What type of PR is it? [Feature] ### What is the Jira issue? https://issues.apache.org/jira/browse/ZEPPELIN-3076 [ZEPPELIN-3076] ### How should this be tested? I have Add the Screenshots for the test. Just as the Screenshots showing, all the element in `keys`, `groups` and `values` is draggable and sorttable. ![untitled project4](https://user-images.githubusercontent.com/5969176/33252922-ed1ab0b4-d37b-11e7-8a5c-b3dbb6765d18.gif) ### Questions: * Does the licenses files need update? NO * Is there breaking changes for older versions? NO * Does this needs documentation? NO Author: liguohui <liguohui@cmss.chinamobile.com> Closes #2686 from liguohuicmss/draggable-field-keys-groups-values2 and squashes the following commits: 08b86b8 [liguohui] add a new line ebb8436 [liguohui] Chart field is also draggable and sortable in the 'keys', 'groups' and 'values'",
            "diff": [
                "diff --git a/zeppelin-web/src/app/tabledata/pivot_settings.html b/zeppelin-web/src/app/tabledata/pivot_settings.html",
                "index abfe73069..68de019c2 100644",
                "--- a/zeppelin-web/src/app/tabledata/pivot_settings.html",
                "+++ b/zeppelin-web/src/app/tabledata/pivot_settings.html",
                "@@ -51,3 +51,7 @@ limitations under the License.",
                "             style=\"border-radius: 6px; margin-top: 7px;\">",
                "-          <li ng-repeat=\"item in config.keys\">",
                "+          <li ng-repeat=\"item in config.keys track by $index\"",
                "+              ng-model=\"config.keys\"",
                "+              data-drag=\"true\"",
                "+              jqyoui-draggable=\"{index: {{$index}}, animate: false}\"",
                "+              data-jqyoui-options=\"{revert: 'invalid', placeholder: 'keep', helper: 'clone'}\">",
                "             <div class=\"btn btn-default btn-xs\"",
                "@@ -71,3 +75,7 @@ limitations under the License.",
                "             style=\"border-radius: 6px; margin-top: 7px;\">",
                "-          <li ng-repeat=\"item in config.groups\">",
                "+          <li ng-repeat=\"item in config.groups track by $index\"",
                "+              ng-model=\"config.groups\"",
                "+              data-drag=\"true\"",
                "+              jqyoui-draggable=\"{index: {{$index}}, animate: false}\"",
                "+              data-jqyoui-options=\"{revert: 'invalid', placeholder: 'keep', helper: 'clone'}\">",
                "             <div class=\"btn btn-default btn-xs\"",
                "@@ -91,3 +99,7 @@ limitations under the License.",
                "             style=\"border-radius: 6px; margin-top: 7px;\">",
                "-          <li ng-repeat=\"item in config.values\">",
                "+          <li ng-repeat=\"item in config.values track by $index\"",
                "+              ng-model=\"config.values\"",
                "+              data-drag=\"true\"",
                "+              jqyoui-draggable=\"{index: {{$index}}, animate: false}\"",
                "+              data-jqyoui-options=\"{revert: 'invalid', placeholder: 'keep', helper: 'clone'}\">",
                "             <div class=\"btn-group\">",
                "@@ -114 +126,2 @@ limitations under the License.",
                " </div> <!-- panel -->",
                "+"
            ],
            "changed_files": [
                "zeppelin-web/src/app/tabledata/pivot_settings.html"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3076": ""
            },
            "ghissue_refs": {
                "2686": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: user",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3076",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2686",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "86f387e940eacb6dac7531a4ed2cadadaa381bbe",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1508983287,
            "hunks": 53,
            "message": "ZEPPELIN-2197. Interpreter Lifecycle Manager ### What is this PR for? This PR implement the lifecycle manager. There're 2 implementions. * NullLifecycleManager.     Nothing is done as before. User has to start/stop interpreter explicitly in UI. * TimeoutLifecycleManager.    Interpreter will be closed after idle for one threshold of time. By default it is 1 hour. ### What type of PR is it? [ Feature] ### Todos * [ ] - Task ### What is the Jira issue? * https://issues.apache.org/jira/browse/ZEPPELIN-2197 ### How should this be tested? Unit test is added. ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Jeff Zhang <zjffdu@apache.org> Closes #2631 from zjffdu/ZEPPELIN-2197 and squashes the following commits: 8b4c6ce [Jeff Zhang] Add one more test 00d0183 [Jeff Zhang] ZEPPELIN-2197. Interpreter Lifecycle Manager",
            "diff": [
                "diff --git a/conf/zeppelin-site.xml.template b/conf/zeppelin-site.xml.template",
                "index 4c31669b6..8a2a60e3b 100755",
                "--- a/conf/zeppelin-site.xml.template",
                "+++ b/conf/zeppelin-site.xml.template",
                "@@ -413,2 +413,21 @@",
                "+<property>",
                "+  <name>zeppelin.interpreter.lifecyclemanager.class</name>",
                "+  <value>org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager</value>",
                "+  <description>LifecycleManager class for managing the lifecycle of interpreters, by default interpreter will",
                "+  be closed after timeout</description>",
                "+</property>",
                "+",
                "+<property>",
                "+  <name>zeppelin.interpreter.lifecyclemanager.timeout.checkinterval</name>",
                "+  <value>60000</value>",
                "+  <description>milliseconds of the interval to checking whether interpreter is time out</description>",
                "+</property>",
                "+",
                "+<property>",
                "+  <name>zeppelin.interpreter.lifecyclemanager.timeout.threshold</name>",
                "+  <value>3600000</value>",
                "+  <description>milliseconds of the interpreter timeout threshold, by default it is 1 hour</description>",
                "+</property>",
                "+",
                " <!--",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "index 720d6ec6e..cb249d8c6 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "@@ -536,2 +536,5 @@ public class ZeppelinConfiguration extends XMLConfiguration {",
                "+  public String getLifecycleManagerClass() {",
                "+    return getString(ConfVars.ZEPPELIN_INTERPRETER_LIFECYCLE_MANAGER_CLASS);",
                "+  }",
                "@@ -703,3 +706,10 @@ public class ZeppelinConfiguration extends XMLConfiguration {",
                "-    ZEPPELIN_INTERPRETER_CALLBACK_PORTRANGE(\"zeppelin.interpreter.callback.portRange\", \":\");",
                "+    ZEPPELIN_INTERPRETER_CALLBACK_PORTRANGE(\"zeppelin.interpreter.callback.portRange\", \":\"),",
                "+",
                "+    ZEPPELIN_INTERPRETER_LIFECYCLE_MANAGER_CLASS(\"zeppelin.interpreter.lifecyclemanager.class\",",
                "+        \"org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager\"),",
                "+    ZEPPELIN_INTERPRETER_LIFECYCLE_MANAGER_TIMEOUT_CHECK_INTERVAL(",
                "+        \"zeppelin.interpreter.lifecyclemanager.timeout.checkinterval\", 6000L),",
                "+    ZEPPELIN_INTERPRETER_LIFECYCLE_MANAGER_TIMEOUT_THRESHOLD(",
                "+        \"zeppelin.interpreter.lifecyclemanager.timeout.threshold\", 360000L);",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterGroup.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterGroup.java",
                "index 6acd601b8..9f889013b 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterGroup.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterGroup.java",
                "@@ -144,2 +144,21 @@ public class InterpreterGroup {",
                "   }",
                "+",
                "+  @Override",
                "+  public boolean equals(Object o) {",
                "+    if (this == o) {",
                "+      return true;",
                "+    }",
                "+    if (!(o instanceof InterpreterGroup)) {",
                "+      return false;",
                "+    }",
                "+",
                "+    InterpreterGroup that = (InterpreterGroup) o;",
                "+",
                "+    return id != null ? id.equals(that.id) : that.id == null;",
                "+  }",
                "+",
                "+  @Override",
                "+  public int hashCode() {",
                "+    return id != null ? id.hashCode() : 0;",
                "+  }",
                " }",
                "diff --git a/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java b/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "index 8c13e2150..f9a8ba13f 100644",
                "--- a/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "+++ b/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "@@ -1378,9 +1378,9 @@ public class NotebookServer extends WebSocketServlet",
                "       for (InterpreterSetting setting : settings) {",
                "-        if (setting.getOrCreateInterpreterGroup(user, note.getId()) == null) {",
                "+        if (setting.getInterpreterGroup(user, note.getId()) == null) {",
                "           continue;",
                "         }",
                "-        if (interpreterGroupId.equals(setting.getOrCreateInterpreterGroup(user, note.getId())",
                "+        if (interpreterGroupId.equals(setting.getInterpreterGroup(user, note.getId())",
                "             .getId())) {",
                "           AngularObjectRegistry angularObjectRegistry =",
                "-              setting.getOrCreateInterpreterGroup(user, note.getId()).getAngularObjectRegistry();",
                "+              setting.getInterpreterGroup(user, note.getId()).getAngularObjectRegistry();",
                "@@ -1421,9 +1421,9 @@ public class NotebookServer extends WebSocketServlet",
                "         for (InterpreterSetting setting : settings) {",
                "-          if (setting.getOrCreateInterpreterGroup(user, n.getId()) == null) {",
                "+          if (setting.getInterpreterGroup(user, n.getId()) == null) {",
                "             continue;",
                "           }",
                "-          if (interpreterGroupId.equals(setting.getOrCreateInterpreterGroup(user, n.getId())",
                "+          if (interpreterGroupId.equals(setting.getInterpreterGroup(user, n.getId())",
                "               .getId())) {",
                "             AngularObjectRegistry angularObjectRegistry =",
                "-                setting.getOrCreateInterpreterGroup(user, n.getId()).getAngularObjectRegistry();",
                "+                setting.getInterpreterGroup(user, n.getId()).getAngularObjectRegistry();",
                "             this.broadcastExcept(n.getId(),",
                "@@ -2299,4 +2299,7 @@ public class NotebookServer extends WebSocketServlet",
                "     for (InterpreterSetting intpSetting : settings) {",
                "+      if (intpSetting.getInterpreterGroup(user, note.getId()) == null) {",
                "+        continue;",
                "+      }",
                "       AngularObjectRegistry registry =",
                "-          intpSetting.getOrCreateInterpreterGroup(user, note.getId()).getAngularObjectRegistry();",
                "+          intpSetting.getInterpreterGroup(user, note.getId()).getAngularObjectRegistry();",
                "       List<AngularObject> objects = registry.getAllWithGlobal(note.getId());",
                "@@ -2306,3 +2309,3 @@ public class NotebookServer extends WebSocketServlet",
                "                 .put(\"interpreterGroupId\",",
                "-                    intpSetting.getOrCreateInterpreterGroup(user, note.getId()).getId())",
                "+                    intpSetting.getInterpreterGroup(user, note.getId()).getId())",
                "                 .put(\"noteId\", note.getId()).put(\"paragraphId\", object.getParagraphId())));",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "index 93481bec5..5b88c12d7 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "@@ -39,2 +39,3 @@ import org.apache.zeppelin.interpreter.launcher.ShellScriptLauncher;",
                " import org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher;",
                "+import org.apache.zeppelin.interpreter.lifecycle.NullLifecycleManager;",
                " import org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry;",
                "@@ -141,2 +142,3 @@ public class InterpreterSetting {",
                "+  private transient LifecycleManager lifecycleManager;",
                "@@ -235,2 +237,7 @@ public class InterpreterSetting {",
                "+    public Builder setLifecycleManager(LifecycleManager lifecycleManager) {",
                "+      interpreterSetting.lifecycleManager = lifecycleManager;",
                "+      return this;",
                "+    }",
                "+",
                "     public InterpreterSetting create() {",
                "@@ -251,2 +258,5 @@ public class InterpreterSetting {",
                "     this.status = Status.READY;",
                "+    if (this.lifecycleManager == null) {",
                "+      this.lifecycleManager = new NullLifecycleManager(conf);",
                "+    }",
                "   }",
                "@@ -323,2 +333,10 @@ public class InterpreterSetting {",
                "+  public void setLifecycleManager(LifecycleManager lifecycleManager) {",
                "+    this.lifecycleManager = lifecycleManager;",
                "+  }",
                "+",
                "+  public LifecycleManager getLifecycleManager() {",
                "+    return lifecycleManager;",
                "+  }",
                "+",
                "   public String getId() {",
                "@@ -386,3 +404,3 @@ public class InterpreterSetting {",
                "-  ManagedInterpreterGroup getInterpreterGroup(String user, String noteId) {",
                "+  public ManagedInterpreterGroup getInterpreterGroup(String user, String noteId) {",
                "     String groupId = getInterpreterGroupId(user, noteId);",
                "@@ -630,3 +648,3 @@ public class InterpreterSetting {",
                "       interpreter = new RemoteInterpreter(getJavaProperties(), sessionId,",
                "-          info.getClassName(), user);",
                "+          info.getClassName(), user, lifecycleManager);",
                "       if (info.isDefaultInterpreter()) {",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java",
                "index abaf6349f..f27f83dba 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java",
                "@@ -53,2 +53,3 @@ import java.io.InputStream;",
                " import java.io.InputStreamReader;",
                "+import java.lang.reflect.InvocationTargetException;",
                " import java.lang.reflect.Type;",
                "@@ -118,3 +119,3 @@ public class InterpreterSettingManager {",
                "   private DependencyResolver dependencyResolver;",
                "-",
                "+  private LifecycleManager lifecycleManager;",
                "@@ -155,2 +156,10 @@ public class InterpreterSettingManager {",
                "     this.appEventListener = appEventListener;",
                "+    try {",
                "+      this.lifecycleManager = (LifecycleManager)",
                "+          Class.forName(conf.getLifecycleManagerClass()).getConstructor(ZeppelinConfiguration.class)",
                "+              .newInstance(conf);",
                "+    } catch (Exception e) {",
                "+      throw new IOException(\"Fail to create LifecycleManager\", e);",
                "+    }",
                "+",
                "     init();",
                "@@ -179,2 +188,3 @@ public class InterpreterSettingManager {",
                "         savedInterpreterSetting.setDependencyResolver(dependencyResolver);",
                "+        savedInterpreterSetting.setLifecycleManager(lifecycleManager);",
                "         savedInterpreterSetting.setProperties(InterpreterSetting.convertInterpreterProperties(",
                "@@ -374,2 +384,3 @@ public class InterpreterSettingManager {",
                "     interpreterSetting.setInterpreterSettingManager(this);",
                "+    interpreterSetting.setLifecycleManager(lifecycleManager);",
                "     interpreterSetting.postProcessing();",
                "@@ -635,2 +646,3 @@ public class InterpreterSettingManager {",
                "     setting.setAngularObjectRegistryListener(angularObjectRegistryListener);",
                "+    setting.setLifecycleManager(lifecycleManager);",
                "     setting.setInterpreterSettingManager(this);",
                "@@ -647,2 +659,3 @@ public class InterpreterSettingManager {",
                "     interpreterSetting.setDependencyResolver(dependencyResolver);",
                "+    interpreterSetting.setLifecycleManager(lifecycleManager);",
                "     interpreterSetting.setAngularObjectRegistryListener(angularObjectRegistryListener);",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/LifecycleManager.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/LifecycleManager.java",
                "new file mode 100644",
                "index 000000000..fc2a7bd0a",
                "--- /dev/null",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/LifecycleManager.java",
                "@@ -0,0 +1,35 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+",
                "+package org.apache.zeppelin.interpreter;",
                "+",
                "+",
                "+/**",
                "+ * Interface for managing the lifecycle of interpreters",
                "+ */",
                "+public interface LifecycleManager {",
                "+",
                "+  void onInterpreterGroupCreated(ManagedInterpreterGroup interpreterGroup);",
                "+",
                "+  void onInterpreterSessionCreated(ManagedInterpreterGroup interpreterGroup,",
                "+                                   String sessionId);",
                "+",
                "+  void onInterpreterUse(ManagedInterpreterGroup interpreterGroup,",
                "+                        String sessionId);",
                "+",
                "+}",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroup.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroup.java",
                "index 96f01952f..a8ae33849 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroup.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroup.java",
                "@@ -49,2 +49,3 @@ public class ManagedInterpreterGroup extends InterpreterGroup {",
                "     this.interpreterSetting = interpreterSetting;",
                "+    interpreterSetting.getLifecycleManager().onInterpreterGroupCreated(this);",
                "   }",
                "@@ -90,3 +91,3 @@ public class ManagedInterpreterGroup extends InterpreterGroup {",
                "       if (remoteInterpreterProcess != null) {",
                "-        LOGGER.info(\"Kill RemoteIntetrpreterProcess\");",
                "+        LOGGER.info(\"Kill RemoteInterpreterProcess\");",
                "         remoteInterpreterProcess.stop();",
                "@@ -136,2 +137,3 @@ public class ManagedInterpreterGroup extends InterpreterGroup {",
                "       LOGGER.info(\"Create Session: {} in InterpreterGroup: {} for user: {}\", sessionId, id, user);",
                "+      interpreterSetting.getLifecycleManager().onInterpreterSessionCreated(this, sessionId);",
                "       sessions.put(sessionId, interpreters);",
                "@@ -140,2 +142,3 @@ public class ManagedInterpreterGroup extends InterpreterGroup {",
                "   }",
                "+",
                " }",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/lifecycle/NullLifecycleManager.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/lifecycle/NullLifecycleManager.java",
                "new file mode 100644",
                "index 000000000..ce633c6f5",
                "--- /dev/null",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/lifecycle/NullLifecycleManager.java",
                "@@ -0,0 +1,49 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+",
                "+package org.apache.zeppelin.interpreter.lifecycle;",
                "+",
                "+import org.apache.zeppelin.conf.ZeppelinConfiguration;",
                "+import org.apache.zeppelin.interpreter.LifecycleManager;",
                "+import org.apache.zeppelin.interpreter.ManagedInterpreterGroup;",
                "+",
                "+/**",
                "+ * Do nothing for the lifecycle of interpreter. User need to explicitly start/stop interpreter.",
                "+ */",
                "+public class NullLifecycleManager implements LifecycleManager {",
                "+",
                "+  public NullLifecycleManager(ZeppelinConfiguration zConf) {",
                "+",
                "+  }",
                "+",
                "+  @Override",
                "+  public void onInterpreterGroupCreated(ManagedInterpreterGroup interpreterGroup) {",
                "+",
                "+  }",
                "+",
                "+  @Override",
                "+  public void onInterpreterSessionCreated(ManagedInterpreterGroup interpreterGroup,",
                "+                                          String sessionId) {",
                "+",
                "+  }",
                "+",
                "+  @Override",
                "+  public void onInterpreterUse(ManagedInterpreterGroup interpreterGroup, String sessionId) {",
                "+",
                "+  }",
                "+}",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/lifecycle/TimeoutLifecycleManager.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/lifecycle/TimeoutLifecycleManager.java",
                "new file mode 100644",
                "index 000000000..7042060d0",
                "--- /dev/null",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/lifecycle/TimeoutLifecycleManager.java",
                "@@ -0,0 +1,75 @@",
                "+package org.apache.zeppelin.interpreter.lifecycle;",
                "+",
                "+import org.apache.zeppelin.conf.ZeppelinConfiguration;",
                "+import org.apache.zeppelin.interpreter.LifecycleManager;",
                "+import org.apache.zeppelin.interpreter.ManagedInterpreterGroup;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+import java.util.Map;",
                "+import java.util.Timer;",
                "+import java.util.TimerTask;",
                "+import java.util.concurrent.ConcurrentHashMap;",
                "+",
                "+",
                "+/**",
                "+ * This lifecycle manager would close interpreter after it is timeout. By default, it is timeout",
                "+ * after no using in 1 hour.",
                "+ *",
                "+ * For now, this class only manage the lifecycle of interpreter group (will close interpreter",
                "+ * process after timeout). Managing the lifecycle of interpreter session could be done in future",
                "+ * if necessary.",
                "+ */",
                "+public class TimeoutLifecycleManager implements LifecycleManager {",
                "+",
                "+  private static final Logger LOGGER = LoggerFactory.getLogger(TimeoutLifecycleManager.class);",
                "+",
                "+  // ManagerInterpreterGroup -> LastTimeUsing timestamp",
                "+  private Map<ManagedInterpreterGroup, Long> interpreterGroups = new ConcurrentHashMap<>();",
                "+",
                "+  private long checkInterval;",
                "+  private long timeoutThreshold;",
                "+",
                "+  private Timer checkTimer;",
                "+",
                "+  public TimeoutLifecycleManager(ZeppelinConfiguration zConf) {",
                "+    this.checkInterval = zConf.getLong(ZeppelinConfiguration.ConfVars",
                "+            .ZEPPELIN_INTERPRETER_LIFECYCLE_MANAGER_TIMEOUT_CHECK_INTERVAL);",
                "+    this.timeoutThreshold = zConf.getLong(",
                "+        ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_LIFECYCLE_MANAGER_TIMEOUT_THRESHOLD);",
                "+    this.checkTimer = new Timer(true);",
                "+    this.checkTimer.scheduleAtFixedRate(new TimerTask() {",
                "+      @Override",
                "+      public void run() {",
                "+        long now = System.currentTimeMillis();",
                "+        for (Map.Entry<ManagedInterpreterGroup, Long> entry : interpreterGroups.entrySet()) {",
                "+          ManagedInterpreterGroup interpreterGroup = entry.getKey();",
                "+          Long lastTimeUsing = entry.getValue();",
                "+          if ((now - lastTimeUsing) > timeoutThreshold )  {",
                "+            LOGGER.info(\"InterpreterGroup {} is timeout.\", interpreterGroup.getId());",
                "+            interpreterGroup.close();",
                "+            interpreterGroups.remove(entry.getKey());",
                "+          }",
                "+        }",
                "+      }",
                "+    }, checkInterval, checkInterval);",
                "+    LOGGER.info(\"TimeoutLifecycleManager is started with checkinterval: \" + checkInterval",
                "+        + \", timeoutThreshold: \" + timeoutThreshold);",
                "+  }",
                "+",
                "+  @Override",
                "+  public void onInterpreterGroupCreated(ManagedInterpreterGroup interpreterGroup) {",
                "+    interpreterGroups.put(interpreterGroup, System.currentTimeMillis());",
                "+  }",
                "+",
                "+  @Override",
                "+  public void onInterpreterSessionCreated(ManagedInterpreterGroup interpreterGroup,",
                "+                                          String sessionId) {",
                "+",
                "+  }",
                "+",
                "+  @Override",
                "+  public void onInterpreterUse(ManagedInterpreterGroup interpreterGroup, String sessionId) {",
                "+    interpreterGroups.put(interpreterGroup, System.currentTimeMillis());",
                "+  }",
                "+}",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "index 338210dad..1ab459e74 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "@@ -32,2 +32,3 @@ import org.apache.zeppelin.interpreter.InterpreterException;",
                " import org.apache.zeppelin.interpreter.InterpreterResult;",
                "+import org.apache.zeppelin.interpreter.LifecycleManager;",
                " import org.apache.zeppelin.interpreter.ManagedInterpreterGroup;",
                "@@ -68,2 +69,4 @@ public class RemoteInterpreter extends Interpreter {",
                "+  private LifecycleManager lifecycleManager;",
                "+",
                "   /**",
                "@@ -74,3 +77,4 @@ public class RemoteInterpreter extends Interpreter {",
                "                            String className,",
                "-                           String userName) {",
                "+                           String userName,",
                "+                           LifecycleManager lifecycleManager) {",
                "     super(properties);",
                "@@ -79,2 +83,3 @@ public class RemoteInterpreter extends Interpreter {",
                "     this.userName = userName;",
                "+    this.lifecycleManager = lifecycleManager;",
                "   }",
                "@@ -151,2 +156,3 @@ public class RemoteInterpreter extends Interpreter {",
                "         isOpened = true;",
                "+        this.lifecycleManager.onInterpreterUse(this.getInterpreterGroup(), sessionId);",
                "       }",
                "@@ -191,2 +197,3 @@ public class RemoteInterpreter extends Interpreter {",
                "       isOpened = false;",
                "+      this.lifecycleManager.onInterpreterUse(this.getInterpreterGroup(), sessionId);",
                "     } else {",
                "@@ -220,2 +227,3 @@ public class RemoteInterpreter extends Interpreter {",
                "     }",
                "+    this.lifecycleManager.onInterpreterUse(this.getInterpreterGroup(), sessionId);",
                "     return interpreterProcess.callRemoteFunction(",
                "@@ -268,2 +276,3 @@ public class RemoteInterpreter extends Interpreter {",
                "     }",
                "+    this.lifecycleManager.onInterpreterUse(this.getInterpreterGroup(), sessionId);",
                "     interpreterProcess.callRemoteFunction(new RemoteInterpreterProcess.RemoteFunction<Void>() {",
                "@@ -295,2 +304,3 @@ public class RemoteInterpreter extends Interpreter {",
                "     }",
                "+    this.lifecycleManager.onInterpreterUse(this.getInterpreterGroup(), sessionId);",
                "     FormType type = interpreterProcess.callRemoteFunction(",
                "@@ -319,2 +329,3 @@ public class RemoteInterpreter extends Interpreter {",
                "     }",
                "+    this.lifecycleManager.onInterpreterUse(this.getInterpreterGroup(), sessionId);",
                "     return interpreterProcess.callRemoteFunction(",
                "@@ -343,2 +354,3 @@ public class RemoteInterpreter extends Interpreter {",
                "     }",
                "+    this.lifecycleManager.onInterpreterUse(this.getInterpreterGroup(), sessionId);",
                "     return interpreterProcess.callRemoteFunction(",
                "@@ -364,2 +376,3 @@ public class RemoteInterpreter extends Interpreter {",
                "     }",
                "+    this.lifecycleManager.onInterpreterUse(this.getInterpreterGroup(), sessionId);",
                "     return interpreterProcess.callRemoteFunction(",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "index b5dda6734..c89eee5c7 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "@@ -687,5 +687,7 @@ public class Note implements ParagraphJobListener, JsonSerializable {",
                "     for (InterpreterSetting setting : settings) {",
                "-      InterpreterGroup intpGroup = setting.getOrCreateInterpreterGroup(user, id);",
                "-      AngularObjectRegistry registry = intpGroup.getAngularObjectRegistry();",
                "-      angularObjects.put(intpGroup.getId(), registry.getAllWithGlobal(id));",
                "+      InterpreterGroup intpGroup = setting.getInterpreterGroup(user, id);",
                "+      if (intpGroup != null) {",
                "+        AngularObjectRegistry registry = intpGroup.getAngularObjectRegistry();",
                "+        angularObjects.put(intpGroup.getId(), registry.getAllWithGlobal(id));",
                "+      }",
                "     }",
                "@@ -702,3 +704,6 @@ public class Note implements ParagraphJobListener, JsonSerializable {",
                "     for (InterpreterSetting setting : settings) {",
                "-      InterpreterGroup intpGroup = setting.getOrCreateInterpreterGroup(user, id);",
                "+      if (setting.getInterpreterGroup(user, id) == null) {",
                "+        continue;",
                "+      }",
                "+      InterpreterGroup intpGroup = setting.getInterpreterGroup(user, id);",
                "       AngularObjectRegistry registry = intpGroup.getAngularObjectRegistry();",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java",
                "index 77fd04ca7..c1dc46ca2 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java",
                "@@ -336,35 +336,37 @@ public class Notebook implements NoteEventListener {",
                "     for (InterpreterSetting settings : interpreterSettingManager.get()) {",
                "-      AngularObjectRegistry registry =",
                "-          settings.getOrCreateInterpreterGroup(subject.getUser(), id).getAngularObjectRegistry();",
                "-      if (registry instanceof RemoteAngularObjectRegistry) {",
                "-        // remove paragraph scope object",
                "-        for (Paragraph p : note.getParagraphs()) {",
                "-          ((RemoteAngularObjectRegistry) registry).removeAllAndNotifyRemoteProcess(id, p.getId());",
                "-",
                "-          // remove app scope object",
                "-          List<ApplicationState> appStates = p.getAllApplicationStates();",
                "-          if (appStates != null) {",
                "-            for (ApplicationState app : appStates) {",
                "-              ((RemoteAngularObjectRegistry) registry)",
                "-                  .removeAllAndNotifyRemoteProcess(id, app.getId());",
                "+      InterpreterGroup interpreterGroup = settings.getInterpreterGroup(subject.getUser(), id);",
                "+      if (interpreterGroup != null) {",
                "+        AngularObjectRegistry registry = interpreterGroup.getAngularObjectRegistry();",
                "+        if (registry instanceof RemoteAngularObjectRegistry) {",
                "+          // remove paragraph scope object",
                "+          for (Paragraph p : note.getParagraphs()) {",
                "+            ((RemoteAngularObjectRegistry) registry).removeAllAndNotifyRemoteProcess(id, p.getId());",
                "+",
                "+            // remove app scope object",
                "+            List<ApplicationState> appStates = p.getAllApplicationStates();",
                "+            if (appStates != null) {",
                "+              for (ApplicationState app : appStates) {",
                "+                ((RemoteAngularObjectRegistry) registry)",
                "+                    .removeAllAndNotifyRemoteProcess(id, app.getId());",
                "+              }",
                "             }",
                "           }",
                "-        }",
                "-        // remove note scope object",
                "-        ((RemoteAngularObjectRegistry) registry).removeAllAndNotifyRemoteProcess(id, null);",
                "-      } else {",
                "-        // remove paragraph scope object",
                "-        for (Paragraph p : note.getParagraphs()) {",
                "-          registry.removeAll(id, p.getId());",
                "-",
                "-          // remove app scope object",
                "-          List<ApplicationState> appStates = p.getAllApplicationStates();",
                "-          if (appStates != null) {",
                "-            for (ApplicationState app : appStates) {",
                "-              registry.removeAll(id, app.getId());",
                "+          // remove note scope object",
                "+          ((RemoteAngularObjectRegistry) registry).removeAllAndNotifyRemoteProcess(id, null);",
                "+        } else {",
                "+          // remove paragraph scope object",
                "+          for (Paragraph p : note.getParagraphs()) {",
                "+            registry.removeAll(id, p.getId());",
                "+",
                "+            // remove app scope object",
                "+            List<ApplicationState> appStates = p.getAllApplicationStates();",
                "+            if (appStates != null) {",
                "+              for (ApplicationState app : appStates) {",
                "+                registry.removeAll(id, app.getId());",
                "+              }",
                "             }",
                "           }",
                "+          // remove note scope object",
                "+          registry.removeAll(id, null);",
                "         }",
                "-        // remove note scope object",
                "-        registry.removeAll(id, null);",
                "       }",
                "@@ -519,5 +521,4 @@ public class Notebook implements NoteEventListener {",
                "       for (InterpreterSetting setting : settings) {",
                "-        InterpreterGroup intpGroup = setting.getOrCreateInterpreterGroup(subject.getUser(),",
                "-            note.getId());",
                "-        if (intpGroup.getId().equals(snapshot.getIntpGroupId())) {",
                "+        InterpreterGroup intpGroup = setting.getInterpreterGroup(subject.getUser(), note.getId());",
                "+        if (intpGroup != null && intpGroup.getId().equals(snapshot.getIntpGroupId())) {",
                "           AngularObjectRegistry registry = intpGroup.getAngularObjectRegistry();"
            ],
            "changed_files": [
                "conf/zeppelin-site.xml.template",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterGroup.java",
                "zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/LifecycleManager.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroup.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/lifecycle/NullLifecycleManager.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/lifecycle/TimeoutLifecycleManager.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-2197": ""
            },
            "ghissue_refs": {
                "2631": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: default, user",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-2197",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2631",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "971631c1a19edd12e38f61deb8ca6440f29d5148",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1512687042,
            "hunks": 1,
            "message": "[MINOR] Fix notebook title bar margin ### What is this PR for? Notebook title bar location is little bit shifted to left. This minor fix notebook title bar margin. See screenshots below. ### What type of PR is it? Bug Fix ### Todos * [x] - fix margin ### Screenshots (if appropriate) Before ![image](https://user-images.githubusercontent.com/1540981/33742650-3469c2fe-db5e-11e7-8aa6-936d0a28de3a.png) After ![image](https://user-images.githubusercontent.com/1540981/33742640-250c3dc8-db5e-11e7-8af3-e8a9d7105963.png) ### Questions: * Does the licenses files need update? no * Is there breaking changes for older versions? no * Does this needs documentation? no Author: Lee moon soo <moon@apache.org> Closes #2699 from Leemoonsoo/minor_noteaction_margin and squashes the following commits: 703f45830 [Lee moon soo] fix noteAction magin",
            "diff": [
                "diff --git a/zeppelin-web/src/app/notebook/notebook.css b/zeppelin-web/src/app/notebook/notebook.css",
                "index a7508bce5..262ae8e6c 100644",
                "--- a/zeppelin-web/src/app/notebook/notebook.css",
                "+++ b/zeppelin-web/src/app/notebook/notebook.css",
                "@@ -132,4 +132,4 @@",
                " .noteAction {",
                "-  margin-left: -10px;",
                "-  margin-right: -10px;",
                "+  margin-left: 0px;",
                "+  margin-right: 0px;",
                "   font-family: 'Roboto', sans-serif;"
            ],
            "changed_files": [
                "zeppelin-web/src/app/notebook/notebook.css"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2699": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: user",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2699",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ed468003323b984b0249d40d88c2378cc65950de",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1513591607,
            "hunks": 2,
            "message": "[MINOR] Remove r from zeppelin-web test ### What is this PR for? Reducing test time to remove unused dependencies from some profile. We will reduce whole test time by removing some unused packages. ### What type of PR is it? [Improvement] ### Todos * [x] - Remove R related packages from some profiles ### What is the Jira issue? * MINOR ### How should this be tested? * Check the CI ### Screenshots (if appropriate) Before: ![image](https://user-images.githubusercontent.com/3612566/34191013-676b2958-e587-11e7-8e05-b6bd0df40ede.png) After: ![image](https://user-images.githubusercontent.com/3612566/34191029-73619760-e587-11e7-926d-cfc0040d95e5.png) ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Jongyoul Lee <jongyoul@gmail.com> Closes #2710 from jongyoul/minor/remove-unused-r-in-ci and squashes the following commits: 64d765cd [Jongyoul Lee] Removed r from zeppelin-web test",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index 4495aa4c2..7db41bfe2 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -58,7 +58,4 @@ matrix:",
                "         apt:",
                "-          sources:",
                "-          - r-packages-trusty",
                "           packages:",
                "           - google-chrome-stable",
                "-          - r-base-dev"
            ],
            "changed_files": [
                ".travis.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2710": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: user",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2710",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4054320a443fbcb6c14225c589f56c01ea8b4eaa",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1509881714,
            "hunks": 2,
            "message": "ZEPPELIN-3034. Only apply dynamic form for LivySqlnterpreter ### What is this PR for? Simple PR to only apply dynamic forms for LivySqlInterpreter, this make the behavior consistent with zeppelin's built-in spark interpreter. ### What type of PR is it? [Bug Fix] ### Todos * [ ] - Task ### What is the Jira issue? * https://issues.apache.org/jira/browse/ZEPPELIN-3034 ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update?  No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Jeff Zhang <zjffdu@apache.org> Closes #2651 from zjffdu/ZEPPELIN-3034 and squashes the following commits: 39eff37 [Jeff Zhang] ZEPPELIN-3034. Only apply dynamic form for LivySqlnterpreter",
            "diff": [
                "diff --git a/livy/src/main/java/org/apache/zeppelin/livy/BaseLivyInterpreter.java b/livy/src/main/java/org/apache/zeppelin/livy/BaseLivyInterpreter.java",
                "index 0cdf4642d..f3b75792e 100644",
                "--- a/livy/src/main/java/org/apache/zeppelin/livy/BaseLivyInterpreter.java",
                "+++ b/livy/src/main/java/org/apache/zeppelin/livy/BaseLivyInterpreter.java",
                "@@ -253,3 +253,3 @@ public abstract class BaseLivyInterpreter extends Interpreter {",
                "   public FormType getFormType() {",
                "-    return FormType.SIMPLE;",
                "+    return FormType.NATIVE;",
                "   }",
                "diff --git a/livy/src/main/java/org/apache/zeppelin/livy/LivySparkSQLInterpreter.java b/livy/src/main/java/org/apache/zeppelin/livy/LivySparkSQLInterpreter.java",
                "index 486e31c2c..b93626d45 100644",
                "--- a/livy/src/main/java/org/apache/zeppelin/livy/LivySparkSQLInterpreter.java",
                "+++ b/livy/src/main/java/org/apache/zeppelin/livy/LivySparkSQLInterpreter.java",
                "@@ -161,2 +161,7 @@ public class LivySparkSQLInterpreter extends BaseLivyInterpreter {",
                "+  @Override",
                "+  public FormType getFormType() {",
                "+    return FormType.SIMPLE;",
                "+  }",
                "+",
                "   protected List<String> parseSQLOutput(String output) {"
            ],
            "changed_files": [
                "livy/src/main/java/org/apache/zeppelin/livy/BaseLivyInterpreter.java",
                "livy/src/main/java/org/apache/zeppelin/livy/LivySparkSQLInterpreter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3034": ""
            },
            "ghissue_refs": {
                "2651": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "50b7d235f4e1eaeffb7ff891d7cfc84cce0b9488"
                ]
            ],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3034",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2651",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "30f60248cf634d3eb044512450a72f1784d17a9b",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1508058808,
            "hunks": 2,
            "message": "[FIX] fix converter forms to json ### What is this PR for? Fix converter for forms ### What type of PR is it? [Bug Fix] ### How should this be tested? jdbc 1. `select '${checkbox:name=1|2,first|second}'` ### Screenshots (if appropriate) before ![before](https://user-images.githubusercontent.com/25951039/31577235-44433782-b124-11e7-8479-85ec5395c3a0.png) after ![after](https://user-images.githubusercontent.com/25951039/31577234-441a8a58-b124-11e7-81fc-902ca4847fcb.png) ### Questions: * Does the licenses files need update? no * Is there breaking changes for older versions? no * Does this needs documentation? no Author: tinkoff-dwh <tinkoff.dwh@gmail.com> Closes #2623 from tinkoff-dwh/forms-fix and squashes the following commits: fdb6cfe8 [tinkoff-dwh] [FIX] checkstyle 08cf9213 [tinkoff-dwh] [FIX] checkstyle b8415507 [tinkoff-dwh] [FIX] refactoring of context converter. add test to check converter of contexts. 17ec2dbc [tinkoff-dwh] [FIX] fix converter forms to json",
            "diff": [
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/Input.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/Input.java",
                "index f713f4a9a..8a2cd932d 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/Input.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/Input.java",
                "@@ -109,3 +109,9 @@ public class Input<T> implements Serializable {",
                "     }",
                "-    if (defaultValue != null ?",
                "+    if (defaultValue instanceof Object[]) {",
                "+      if (defaultValue != null ?",
                "+          !Arrays.equals((Object[]) defaultValue, (Object[]) input.defaultValue)",
                "+          : input.defaultValue != null) {",
                "+        return false;",
                "+      }",
                "+    } else if (defaultValue != null ?",
                "         !defaultValue.equals(input.defaultValue) : input.defaultValue != null) {",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "index b479799e2..338210dad 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "@@ -393,3 +393,3 @@ public class RemoteInterpreter extends Interpreter {",
                "         ic.getParagraphTitle(), ic.getParagraphText(), gson.toJson(ic.getAuthenticationInfo()),",
                "-        gson.toJson(ic.getConfig()), gson.toJson(ic.getGui()), gson.toJson(ic.getRunners()));",
                "+        gson.toJson(ic.getConfig()), ic.getGui().toJson(), gson.toJson(ic.getRunners()));",
                "   }"
            ],
            "changed_files": [
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/Input.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2623": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: user",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2623",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ed1947bb062472b999a722238a9c250f11894e54",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1516711403,
            "hunks": 1,
            "message": "[ZEPPELIN-3185] Add profiles for adding dependencies for Hive and Phoenix ### What is this PR for? This PR adds profiles for adding dependencies for Hive and Phoenix ### What type of PR is it? [Improvement] ### What is the Jira issue? * [ZEPPELIN-3185](https://issues.apache.org/jira/browse/ZEPPELIN-3185) ### Questions: * Does the licenses files need update? * Is there breaking changes for older versions? * Does this needs documentation? Author: Prabhjyot Singh <prabhjyotsingh@gmail.com> Closes #2740 from prabhjyotsingh/ZEPPELIN-3185 and squashes the following commits: 47dd05e [Prabhjyot Singh] append \"jdbc-\" to all the profiles 99eafde [Prabhjyot Singh] add profile for adding dependencies for hive and phoenix",
            "diff": [
                "diff --git a/jdbc/pom.xml b/jdbc/pom.xml",
                "index 2f8976a9d..ba745dd63 100644",
                "--- a/jdbc/pom.xml",
                "+++ b/jdbc/pom.xml",
                "@@ -34,2 +34,197 @@",
                "   <name>Zeppelin: JDBC interpreter</name>",
                "+",
                "+  <profiles>",
                "+    <profile>",
                "+      <id>jdbc-hive</id>",
                "+      <properties>",
                "+        <hive.version>1.2.1</hive.version>",
                "+        <hive2.version>2.1.0</hive2.version>",
                "+      </properties>",
                "+",
                "+      <dependencies>",
                "+        <dependency>",
                "+          <groupId>org.apache.hive</groupId>",
                "+          <artifactId>hive-jdbc</artifactId>",
                "+          <version>${hive.version}</version>",
                "+          <exclusions>",
                "+            <exclusion>",
                "+              <groupId>org.apache.hadoop</groupId>",
                "+              <artifactId>hadoop-common</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>org.apache.hadoop</groupId>",
                "+              <artifactId>hadoop-auth</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>org.apache.httpcomponents</groupId>",
                "+              <artifactId>httpcore</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>org.apache.httpcomponents</groupId>",
                "+              <artifactId>httpclient</artifactId>",
                "+            </exclusion>",
                "+          </exclusions>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+          <groupId>org.apache.httpcomponents</groupId>",
                "+          <artifactId>httpcore</artifactId>",
                "+          <version>4.4.1</version>",
                "+        </dependency>",
                "+        <dependency>",
                "+          <groupId>org.apache.httpcomponents</groupId>",
                "+          <artifactId>httpclient</artifactId>",
                "+          <version>4.4.1</version>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+          <groupId>org.apache.hive.shims</groupId>",
                "+          <artifactId>hive-shims-0.23</artifactId>",
                "+          <version>${hive2.version}</version>",
                "+        </dependency>",
                "+      </dependencies>",
                "+    </profile>",
                "+",
                "+    <profile>",
                "+      <id>jdbc-phoenix</id>",
                "+      <properties>",
                "+        <phoenix.version>4.7.0</phoenix.version>",
                "+      </properties>",
                "+      <dependencies>",
                "+        <dependency>",
                "+          <groupId>org.apache.phoenix</groupId>",
                "+          <artifactId>phoenix-core</artifactId>",
                "+          <version>${phoenix.version}</version>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+          <groupId>xerces</groupId>",
                "+          <artifactId>xercesImpl</artifactId>",
                "+          <version>2.11.0</version>",
                "+        </dependency>",
                "+      </dependencies>",
                "+    </profile>",
                "+",
                "+    <profile>",
                "+      <id>jdbc-hadoop2</id>",
                "+      <properties>",
                "+        <hadoop-common.version>2.7.3</hadoop-common.version>",
                "+      </properties>",
                "+      <dependencies>",
                "+        <dependency>",
                "+          <groupId>org.apache.hadoop</groupId>",
                "+          <artifactId>hadoop-common</artifactId>",
                "+          <version>${hadoop-common.version}</version>",
                "+          <exclusions>",
                "+            <exclusion>",
                "+              <groupId>com.sun.jersey</groupId>",
                "+              <artifactId>jersey-core</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>com.sun.jersey</groupId>",
                "+              <artifactId>jersey-json</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>com.sun.jersey</groupId>",
                "+              <artifactId>jersey-server</artifactId>",
                "+            </exclusion>",
                "+",
                "+            <exclusion>",
                "+              <groupId>javax.servlet</groupId>",
                "+              <artifactId>servlet-api</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>org.apache.avro</groupId>",
                "+              <artifactId>avro</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>org.apache.jackrabbit</groupId>",
                "+              <artifactId>jackrabbit-webdav</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>io.netty</groupId>",
                "+              <artifactId>netty</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>commons-httpclient</groupId>",
                "+              <artifactId>commons-httpclient</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>org.apache.zookeeper</groupId>",
                "+              <artifactId>zookeeper</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>org.eclipse.jgit</groupId>",
                "+              <artifactId>org.eclipse.jgit</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>com.jcraft</groupId>",
                "+              <artifactId>jsch</artifactId>",
                "+            </exclusion>",
                "+          </exclusions>",
                "+        </dependency>",
                "+      </dependencies>",
                "+    </profile>",
                "+",
                "+    <profile>",
                "+      <id>jdbc-hadoop3</id>",
                "+      <properties>",
                "+        <hadoop-common.version>3.0.0</hadoop-common.version>",
                "+      </properties>",
                "+      <dependencies>",
                "+        <dependency>",
                "+          <groupId>org.apache.hadoop</groupId>",
                "+          <artifactId>hadoop-common</artifactId>",
                "+          <version>${hadoop-common.version}</version>",
                "+          <exclusions>",
                "+            <exclusion>",
                "+              <groupId>com.sun.jersey</groupId>",
                "+              <artifactId>jersey-core</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>com.sun.jersey</groupId>",
                "+              <artifactId>jersey-json</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>com.sun.jersey</groupId>",
                "+              <artifactId>jersey-server</artifactId>",
                "+            </exclusion>",
                "+",
                "+            <exclusion>",
                "+              <groupId>javax.servlet</groupId>",
                "+              <artifactId>servlet-api</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>org.apache.avro</groupId>",
                "+              <artifactId>avro</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>org.apache.jackrabbit</groupId>",
                "+              <artifactId>jackrabbit-webdav</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>io.netty</groupId>",
                "+              <artifactId>netty</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>commons-httpclient</groupId>",
                "+              <artifactId>commons-httpclient</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>org.apache.zookeeper</groupId>",
                "+              <artifactId>zookeeper</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>org.eclipse.jgit</groupId>",
                "+              <artifactId>org.eclipse.jgit</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>com.jcraft</groupId>",
                "+              <artifactId>jsch</artifactId>",
                "+            </exclusion>",
                "+          </exclusions>",
                "+        </dependency>",
                "+      </dependencies>",
                "+    </profile>",
                "+  </profiles>"
            ],
            "changed_files": [
                "jdbc/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3185": ""
            },
            "ghissue_refs": {
                "2740": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "61d67a95a3f06a96c75a555be47704f49111e7a4"
                ]
            ],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3185",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2740",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "13f6dc7def5091366e64c08f6c404c97008d9c50",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1508995557,
            "hunks": 4,
            "message": "[Bug Fix] fix exceptions in jdbc interpreter ### What is this PR for? Now used class Throwables to convert stack trace into String. This class from guava which is dependency of hadoop-common. hadoop-common is **provided**. Throwables changed to ExceptionsUtils (from commons-lang), commons-lang there is in **zeppelin-interpreter**. ### What type of PR is it? [Bug Fix] ### How should this be tested? Run incorrect query ### Screenshots (if appropriate) before ![2017-10-26 10-21-26](https://user-images.githubusercontent.com/25951039/32036385-f086b498-ba38-11e7-958d-6d76ec1569b6.png) after ![2017-10-26 10-24-05](https://user-images.githubusercontent.com/25951039/32036384-f05eb59c-ba38-11e7-9d4a-e6a1ca0897bc.png) ### Questions: * Does the licenses files need update? no * Is there breaking changes for older versions? no * Does this needs documentation? no Author: tinkoff-dwh <tinkoff.dwh@gmail.com> Closes #2633 from tinkoff-dwh/jdbc_fix_exceptions and squashes the following commits: 42af568 [tinkoff-dwh] [Buf Fix] fix exceptions in jdbc interpreter",
            "diff": [
                "diff --git a/jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java b/jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java",
                "index f3dfddcbf..0265e2d6d 100644",
                "--- a/jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java",
                "+++ b/jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java",
                "@@ -40,2 +40,3 @@ import org.apache.commons.dbcp2.PoolingDriver;",
                " import org.apache.commons.lang.StringUtils;",
                "+import org.apache.commons.lang.exception.ExceptionUtils;",
                " import org.apache.commons.lang.mutable.MutableBoolean;",
                "@@ -62,4 +63,2 @@ import org.slf4j.LoggerFactory;",
                "-import com.google.common.base.Throwables;",
                "-",
                " import static org.apache.commons.lang.StringUtils.containsIgnoreCase;",
                "@@ -681,3 +680,3 @@ public class JDBCInterpreter extends KerberosInterpreter {",
                "     } catch (Exception e) {",
                "-      String errorMsg = Throwables.getStackTraceAsString(e);",
                "+      String errorMsg = ExceptionUtils.getStackTrace(e);",
                "       try {",
                "@@ -759,3 +758,3 @@ public class JDBCInterpreter extends KerberosInterpreter {",
                "       logger.error(\"Cannot run \" + sql, e);",
                "-      String errorMsg = Throwables.getStackTraceAsString(e);",
                "+      String errorMsg = ExceptionUtils.getStackTrace(e);",
                "       interpreterResult.add(errorMsg);"
            ],
            "changed_files": [
                "jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2633": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: user",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2633",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4a679fc055a7e6b03faa3c215562cc295714bc99",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1512599116,
            "hunks": 6,
            "message": "[FIX] fix autocomplete ### What is this PR for? After refactoring of Interpreter autocomplete (from server side) not works without first Run of interpreter. This PR fix it. ### What type of PR is it? [Fix] ### How should this be tested? * Create new Note (JDBC interpreter), try to use autocomplete (schema, tables) ### Questions: * Does the licenses files need update? no * Is there breaking changes for older versions? no * Does this needs documentation? no Author: tinkoff-dwh <tinkoff.dwh@gmail.com> Closes #2691 from tinkoff-dwh/fix_autocomplete and squashes the following commits: e9bad01 [tinkoff-dwh] remove trim from completion 141dff5 [tinkoff-dwh] [FIX] fix autocomplete",
            "diff": [
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "index 8964210c1..4ad36cf1b 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "@@ -348,4 +348,3 @@ public class RemoteInterpreter extends Interpreter {",
                "     if (!isOpened) {",
                "-      LOGGER.warn(\"completion is called when RemoterInterpreter is not opened for \" + className);",
                "-      return new ArrayList<>();",
                "+      open();",
                "     }",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "index 10a854879..5ec132931 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "@@ -193,3 +193,3 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "         this.intpText = \"\";",
                "-        this.scriptText = this.text;",
                "+        this.scriptText = this.text.trim();",
                "       }",
                "@@ -252,4 +252,7 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "     }",
                "-    String trimmedBuffer = buffer != null ? buffer.trim() : null;",
                "-    cursor = calculateCursorPosition(buffer, trimmedBuffer, cursor);",
                "+    this.interpreter = getBindedInterpreter();",
                "+",
                "+    setText(buffer);",
                "+",
                "+    cursor = calculateCursorPosition(buffer, cursor);",
                "@@ -259,3 +262,3 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "       if (this.interpreter != null) {",
                "-        return this.interpreter.completion(scriptText, cursor, interpreterContext);",
                "+        return this.interpreter.completion(this.scriptText, cursor, interpreterContext);",
                "       } else {",
                "@@ -268,20 +271,11 @@ public class Paragraph extends Job implements Cloneable, JsonSerializable {",
                "-  public int calculateCursorPosition(String buffer, String trimmedBuffer, int cursor) {",
                "-    int countWhitespacesAtStart = buffer.indexOf(trimmedBuffer);",
                "-    if (countWhitespacesAtStart > 0) {",
                "-      cursor -= countWhitespacesAtStart;",
                "-    }",
                "+  public int calculateCursorPosition(String buffer, int cursor) {",
                "+    // scriptText trimmed",
                "-    // parse text to get interpreter component",
                "-    String repl = null;",
                "-    if (trimmedBuffer != null) {",
                "-      Matcher matcher = REPL_PATTERN.matcher(trimmedBuffer);",
                "-      if (matcher.matches()) {",
                "-        repl = matcher.group(2);",
                "-      }",
                "+    if (this.scriptText.isEmpty()) {",
                "+      return 0;",
                "     }",
                "-",
                "-    if (repl != null && cursor > repl.length()) {",
                "-      String body = trimmedBuffer.substring(repl.length() + 1);",
                "-      cursor -= repl.length() + 1 + body.indexOf(body.trim());",
                "+    int countCharactersBeforeScript = buffer.indexOf(this.scriptText);",
                "+    if (countCharactersBeforeScript > 0) {",
                "+      cursor -= countCharactersBeforeScript;",
                "     }"
            ],
            "changed_files": [
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2691": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: paragraph",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2691",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8219a37302aa81487d3ddfa6f10699e0a1657e4b",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1516711140,
            "hunks": 5,
            "message": "[ZEPPELIN-3187] Remove doubles of settings in zeppelin-site.xml.template ### What is this PR for? Remove doubles in zeppelin-site.xml.template ### What type of PR is it? [Bug Fix ] ### What is the Jira issue? * [ZEPPELIN-3187] ### How should this be tested? * No need ### Questions: * Does the licenses files need update? N/A * Is there breaking changes for older versions? N/A * Does this needs documentation? N/A Author: mebelousov <mebelousov@ya.ru> Closes #2741 from mebelousov/ZEPPELIN-3187 and squashes the following commits: 44d6d08 [mebelousov] Remove doubles of settings (cherry picked from commit 08251226203107303785ffde458b074d47b13a6f) Signed-off-by: Jeff Zhang <zjffdu@apache.org>",
            "diff": [
                "diff --git a/conf/zeppelin-site.xml.template b/conf/zeppelin-site.xml.template",
                "index d566a7178..33aa8acf6 100755",
                "--- a/conf/zeppelin-site.xml.template",
                "+++ b/conf/zeppelin-site.xml.template",
                "@@ -429,3 +429,3 @@",
                "   <value>60000</value>",
                "-  <description>milliseconds of the interval to checking whether interpreter is time out</description>",
                "+  <description>Milliseconds of the interval to checking whether interpreter is time out</description>",
                " </property>",
                "@@ -435,3 +435,3 @@",
                "   <value>3600000</value>",
                "-  <description>milliseconds of the interpreter timeout threshold, by default it is 1 hour</description>",
                "+  <description>Milliseconds of the interpreter timeout threshold, by default it is 1 hour</description>",
                " </property>",
                "@@ -470,2 +470,3 @@",
                " <!--",
                "+",
                " <property>",
                "@@ -476,2 +477,3 @@",
                " -->",
                "+",
                " <!--",
                "@@ -483,25 +485,2 @@",
                "-<!--",
                "-<property>",
                "-  <name>zeppelin.interpreter.lifecyclemanager.class</name>",
                "-  <value>org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager</value>",
                "-</property>",
                "--->",
                "-",
                "-<!--",
                "-<property>",
                "-  <name>zeppelin.interpreter.lifecyclemanager.timeout.checkinterval</name>",
                "-  <value>6000</value>",
                "-  <description>Check interval of interpreter expiration in seconds</description>",
                "-</property>",
                "--->",
                "-",
                "-<!--",
                "-<property>",
                "-  <name>zeppelin.interpreter.lifecyclemanager.timeout.threshold</name>",
                "-  <value>3600000</value>",
                "-  <description>Threshold of interpreter idle time in seconds, interpeter exceed this threshold will be killed</description>  ",
                "-</property>",
                "--->",
                "-",
                " <!--"
            ],
            "changed_files": [
                "conf/zeppelin-site.xml.template"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3187": ""
            },
            "ghissue_refs": {
                "2741": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "08251226203107303785ffde458b074d47b13a6f"
                ]
            ],
            "tags": [
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3187",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2741",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "24f81426cb138d8191f59df8d69dd28867142cd8",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1508158207,
            "hunks": 7,
            "message": "ZEPPELIN-2998. Fix bug in restarting interpreter in scoped mode ### What is this PR for? Fixed the bug mentioned in https://github.com/apache/zeppelin/pull/2554#discussion_r136703878 ### What type of PR is it? [Bug Fix] ### Todos * [ ] - Task ### What is the Jira issue? * https://issues.apache.org/jira/browse/ZEPPELIN-2998 ### How should this be tested? * Unit test is added ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Jeff Zhang <zjffdu@apache.org> Closes #2626 from zjffdu/ZEPPELIN-2998 and squashes the following commits: cc11fb6 [Jeff Zhang] ZEPPELIN-2998. Fix bug in restarting interpreter in scoped mode",
            "diff": [
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "index a82d5bf0e..3b42752d5 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "@@ -207,6 +207,6 @@ public class InterpreterSetting {",
                "-//    public Builder setInterpreterRunner(InterpreterRunner runner) {",
                "-//      interpreterSetting.interpreterRunner = runner;",
                "-//      return this;",
                "-//    }",
                "+    public Builder setInterpreterRunner(InterpreterRunner runner) {",
                "+      interpreterSetting.interpreterRunner = runner;",
                "+      return this;",
                "+    }",
                "@@ -250,3 +250,2 @@ public class InterpreterSetting {",
                "   void postProcessing() {",
                "-//    createLauncher();",
                "     this.status = Status.READY;",
                "@@ -372,3 +371,3 @@ public class InterpreterSetting {",
                "       if (!interpreterGroups.containsKey(groupId)) {",
                "-        LOGGER.info(\"Create InterpreterGroup with groupId {} for user {} and note {}\",",
                "+        LOGGER.info(\"Create InterpreterGroup with groupId: {} for user: {} and note: {}\",",
                "             groupId, user, noteId);",
                "@@ -655,3 +654,3 @@ public class InterpreterSetting {",
                "-  private List<Interpreter> getOrCreateSession(String user, String noteId) {",
                "+  List<Interpreter> getOrCreateSession(String user, String noteId) {",
                "     ManagedInterpreterGroup interpreterGroup = getOrCreateInterpreterGroup(user, noteId);",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java",
                "index f34195d70..abaf6349f 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java",
                "@@ -784,9 +784,3 @@ public class InterpreterSettingManager {",
                "         copyDependenciesFromLocalPath(intpSetting);",
                "-",
                "-        if (user.equals(\"anonymous\")) {",
                "-          intpSetting.close();",
                "-        } else {",
                "-          intpSetting.closeInterpreters(user, noteId);",
                "-        }",
                "-",
                "+        intpSetting.closeInterpreters(user, noteId);",
                "       } else {",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroup.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroup.java",
                "index ff9cb1c47..96f01952f 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroup.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroup.java",
                "@@ -87,3 +87,3 @@ public class ManagedInterpreterGroup extends InterpreterGroup {",
                "     if (sessions.isEmpty() && interpreterSetting != null) {",
                "-      LOGGER.info(\"Remove this InterpreterGroup {} as all the sessions are closed\", id);",
                "+      LOGGER.info(\"Remove this InterpreterGroup: {} as all the sessions are closed\", id);",
                "       interpreterSetting.removeInterpreterGroup(id);",
                "@@ -135,3 +135,3 @@ public class ManagedInterpreterGroup extends InterpreterGroup {",
                "       }",
                "-      LOGGER.info(\"Create Session {} in InterpreterGroup {} for user {}\", sessionId, id, user);",
                "+      LOGGER.info(\"Create Session: {} in InterpreterGroup: {} for user: {}\", sessionId, id, user);",
                "       sessions.put(sessionId, interpreters);"
            ],
            "changed_files": [
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroup.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-2998": ""
            },
            "ghissue_refs": {
                "2626": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-2998",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2626",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ca87f7d4cc489a492772bbe85705c6a1826cc31a",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1500267729,
            "hunks": 82,
            "message": "ZEPPELIN-3111. Refactor SparkInterpreter This is for the refactoring of SparkInterpreter. See design doc. https://docs.google.com/document/d/1AfGg3aGXonDyri1jrP4MMFT4Y4j3wpN1t8kL-GAKSUc/edit?usp=sharing [Refactoring] * [ ] - Task * https://issues.apache.org/jira/browse/ZEPPELIN-3111 * Unit test is added. * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Jeff Zhang <zjffdu@apache.org> Closes #2709 from zjffdu/ZEPPELIN-3111 and squashes the following commits: aae4b09 [Jeff Zhang] ZEPPELIN-3111. Refactor SparkInterpreter (cherry picked from commit d762b5288536201d8a2964891c556efaa1bae867) Signed-off-by: Jeff Zhang <zjffdu@apache.org>",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index 5f44dcdfd..fd8c868ce 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -70,3 +70,3 @@ matrix:",
                "         firefox: \"31.0\"",
                "-      env: PYTHON=\"3\" SCALA_VER=\"2.11\" SPARK_VER=\"2.2.0\" HADOOP_VER=\"2.6\" PROFILE=\"-Pspark-2.2 -Pweb-ci -Pscalding -Phelium-dev -Pexamples -Pscala-2.11\" BUILD_FLAG=\"package -Pbuild-distr -DskipRat\" TEST_FLAG=\"verify -Pusing-packaged-distr -DskipRat\" MODULES=\"-pl ${INTERPRETERS}\" TEST_PROJECTS=\"-Dtests.to.exclude=**/ZeppelinSparkClusterTest.java,**/org.apache.zeppelin.spark.*,**/HeliumApplicationFactoryTest.java -DfailIfNoTests=false\"",
                "+      env: PYTHON=\"3\" SCALA_VER=\"2.11\" SPARK_VER=\"2.2.0\" HADOOP_VER=\"2.6\" PROFILE=\"-Pspark-2.2 -Pweb-ci -Pscalding -Phelium-dev -Pexamples -Pscala-2.11\" BUILD_FLAG=\"package -Pbuild-distr -DskipRat\" TEST_FLAG=\"verify -Pusing-packaged-distr -DskipRat\" MODULES=\"-pl ${INTERPRETERS}\" TEST_PROJECTS=\"-Dtests.to.exclude=**/ZeppelinSparkClusterTest.java,**/org/apache/zeppelin/spark/*,**/HeliumApplicationFactoryTest.java -DfailIfNoTests=false\"",
                "@@ -84,11 +84,11 @@ matrix:",
                "-    # Test spark module for 2.2.0 with scala 2.11, livy",
                "+    # Test spark module for 2.2.0 with scala 2.11",
                "     - jdk: \"oraclejdk8\"",
                "       dist: trusty",
                "-      env: PYTHON=\"2\" SCALA_VER=\"2.11\" SPARK_VER=\"2.2.0\" HADOOP_VER=\"2.6\" PROFILE=\"-Pweb-ci -Pspark-2.2 -Phadoop3 -Phadoop-2.6 -Pscala-2.11\" SPARKR=\"true\" BUILD_FLAG=\"install -DskipTests -DskipRat\" TEST_FLAG=\"test -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-zengine,zeppelin-server,zeppelin-display,spark-dependencies,spark,python,livy\" TEST_PROJECTS=\"-Dtest=ZeppelinSparkClusterTest,org.apache.zeppelin.spark.*,org.apache.zeppelin.livy.* -DfailIfNoTests=false\"",
                "+      env: PYTHON=\"2\" SCALA_VER=\"2.11\" SPARK_VER=\"2.2.0\" HADOOP_VER=\"2.6\" PROFILE=\"-Pweb-ci -Pspark-2.2 -Phadoop3 -Phadoop-2.6 -Pscala-2.11\" SPARKR=\"true\" BUILD_FLAG=\"install -DskipTests -DskipRat\" TEST_FLAG=\"test -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-zengine,zeppelin-server,zeppelin-display,spark/interpreter,spark/scala-2.10,spark/scala-2.11,spark/spark-dependencies,python\" TEST_PROJECTS=\"-Dtest=ZeppelinSparkClusterTest,org.apache.zeppelin.spark.*,org.apache.zeppelin.livy.* -DfailIfNoTests=false\"",
                "-    # Test spark module for 2.1.0 with scala 2.11, livy",
                "+    # Test spark module for 2.1.0 with scala 2.11",
                "     - jdk: \"openjdk7\"",
                "       dist: trusty",
                "-      env: PYTHON=\"2\" SCALA_VER=\"2.11\" SPARK_VER=\"2.1.0\" HADOOP_VER=\"2.6\" PROFILE=\"-Pweb-ci -Pspark-2.1 -Phadoop2 -Phadoop-2.6 -Pscala-2.11\" SPARKR=\"true\" BUILD_FLAG=\"install -DskipTests -DskipRat\" TEST_FLAG=\"test -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-zengine,zeppelin-server,zeppelin-display,spark-dependencies,spark,python,livy\" TEST_PROJECTS=\"-Dtest=ZeppelinSparkClusterTest,org.apache.zeppelin.spark.*,org.apache.zeppelin.livy.* -DfailIfNoTests=false\"",
                "+      env: PYTHON=\"2\" SCALA_VER=\"2.11\" SPARK_VER=\"2.1.0\" HADOOP_VER=\"2.6\" PROFILE=\"-Pweb-ci -Pspark-2.1 -Phadoop2 -Phadoop-2.6 -Pscala-2.11\" SPARKR=\"true\" BUILD_FLAG=\"install -DskipTests -DskipRat\" TEST_FLAG=\"test -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-zengine,zeppelin-server,zeppelin-display,spark/interpreter,spark/scala-2.10,spark/scala-2.11,spark/spark-dependencies,python\" TEST_PROJECTS=\"-Dtest=ZeppelinSparkClusterTest,org.apache.zeppelin.spark.*,org.apache.zeppelin.livy.* -DfailIfNoTests=false\"",
                "@@ -97,8 +97,8 @@ matrix:",
                "       dist: trusty",
                "-      env: PYTHON=\"2\" SCALA_VER=\"2.11\" SPARK_VER=\"2.0.2\" HADOOP_VER=\"2.6\" PROFILE=\"-Pweb-ci -Pspark-2.0 -Phadoop3 -Phadoop-2.6 -Pscala-2.11\" SPARKR=\"true\" BUILD_FLAG=\"install -DskipTests -DskipRat\" TEST_FLAG=\"test -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-zengine,zeppelin-server,zeppelin-display,spark-dependencies,spark,python\" TEST_PROJECTS=\"-Dtest=ZeppelinSparkClusterTest,org.apache.zeppelin.spark.* -DfailIfNoTests=false\"",
                "+      env: PYTHON=\"2\" SCALA_VER=\"2.11\" SPARK_VER=\"2.0.2\" HADOOP_VER=\"2.6\" PROFILE=\"-Pweb-ci -Pspark-2.0 -Phadoop3 -Phadoop-2.6 -Pscala-2.11\" SPARKR=\"true\" BUILD_FLAG=\"install -DskipTests -DskipRat\" TEST_FLAG=\"test -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-zengine,zeppelin-server,zeppelin-display,spark/interpreter,spark/scala-2.10,spark/scala-2.11,spark/spark-dependencies,python\" TEST_PROJECTS=\"-Dtest=ZeppelinSparkClusterTest,org.apache.zeppelin.spark.* -DfailIfNoTests=false\"",
                "-    # Test spark module for 1.6.3 with scala 2.10",
                "+    # Test spark module for 1.6.3 with scala 2.11",
                "     - jdk: \"openjdk7\"",
                "       dist: trusty",
                "-      env: PYTHON=\"3\" SCALA_VER=\"2.10\" SPARK_VER=\"1.6.3\" HADOOP_VER=\"2.6\" PROFILE=\"-Pweb-ci -Pspark-1.6 -Phadoop2 -Phadoop-2.6 -Pscala-2.10\" SPARKR=\"true\" BUILD_FLAG=\"install -DskipTests -DskipRat\" TEST_FLAG=\"test -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-zengine,zeppelin-server,zeppelin-display,spark-dependencies,spark,python\" TEST_PROJECTS=\"-Dtest=ZeppelinSparkClusterTest,org.apache.zeppelin.spark.*,org.apache.zeppelin.spark.* -DfailIfNoTests=false\"",
                "+      env: PYTHON=\"3\" SCALA_VER=\"2.10\" SPARK_VER=\"1.6.3\" HADOOP_VER=\"2.6\" PROFILE=\"-Pweb-ci -Pspark-1.6 -Phadoop2 -Phadoop-2.6 -Pscala-2.10\" SPARKR=\"true\" BUILD_FLAG=\"install -DskipTests -DskipRat\" TEST_FLAG=\"test -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-zengine,zeppelin-server,zeppelin-display,spark/interpreter,spark/scala-2.10,spark/scala-2.11,spark/spark-dependencies,python\" TEST_PROJECTS=\"-Dtest=ZeppelinSparkClusterTest,org.apache.zeppelin.spark.*,org.apache.zeppelin.spark.* -DfailIfNoTests=false\"",
                "@@ -107,3 +107,3 @@ matrix:",
                "       dist: trusty",
                "-      env: PYTHON=\"2\" SCALA_VER=\"2.11\" SPARK_VER=\"1.6.3\" HADOOP_VER=\"2.6\" PROFILE=\"-Pweb-ci -Pspark-1.6 -Phadoop3 -Phadoop-2.6 -Pscala-2.11\" SPARKR=\"true\" BUILD_FLAG=\"install -DskipTests -DskipRat\" TEST_FLAG=\"test -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-zengine,zeppelin-server,zeppelin-display,spark-dependencies,spark,python\" TEST_PROJECTS=\"-Dtest=ZeppelinSparkClusterTest,org.apache.zeppelin.spark.* -DfailIfNoTests=false\"",
                "+      env: PYTHON=\"2\" SCALA_VER=\"2.11\" SPARK_VER=\"1.6.3\" HADOOP_VER=\"2.6\" PROFILE=\"-Pweb-ci -Pspark-1.6 -Phadoop3 -Phadoop-2.6 -Pscala-2.11\" SPARKR=\"true\" BUILD_FLAG=\"install -DskipTests -DskipRat\" TEST_FLAG=\"test -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-zengine,zeppelin-server,zeppelin-display,spark/interpreter,spark/scala-2.10,spark/scala-2.11,spark/spark-dependencies,python\" TEST_PROJECTS=\"-Dtest=ZeppelinSparkClusterTest,org.apache.zeppelin.spark.* -DfailIfNoTests=false\"",
                "@@ -113,3 +113,3 @@ matrix:",
                "       jdk: \"openjdk7\"",
                "-      env: PYTHON=\"2\" SCALA_VER=\"2.10\" SPARK_VER=\"1.6.1\" HADOOP_VER=\"2.6\" LIVY_VER=\"0.4.0-incubating\" PROFILE=\"-Pspark-1.6 -Phadoop2 -Phadoop-2.6 -Pscala-2.10\" BUILD_FLAG=\"install -am -DskipTests -DskipRat\" TEST_FLAG=\"verify -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-display,spark-dependencies,spark,python,livy\" TEST_PROJECTS=\"-Dtest=LivySQLInterpreterTest,org.apache.zeppelin.spark.PySpark*Test,org.apache.zeppelin.python.* -Dpyspark.test.exclude='' -DfailIfNoTests=false\"",
                "+      env: PYTHON=\"2\" SCALA_VER=\"2.10\" SPARK_VER=\"1.6.1\" HADOOP_VER=\"2.6\" LIVY_VER=\"0.4.0-incubating\" PROFILE=\"-Pspark-1.6 -Phadoop2 -Phadoop-2.6 -Plivy-0.2 -Pscala-2.10\" BUILD_FLAG=\"install -am -DskipTests -DskipRat\" TEST_FLAG=\"verify -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-display,spark/interpreter,spark/scala-2.10,spark/scala-2.11,spark/spark-dependencies,python,livy\" TEST_PROJECTS=\"-Dtest=LivySQLInterpreterTest,org.apache.zeppelin.spark.PySpark*Test,org.apache.zeppelin.python.* -Dpyspark.test.exclude='' -DfailIfNoTests=false\"",
                "@@ -119,4 +119,4 @@ matrix:",
                "       jdk: \"openjdk7\"",
                "-      env: PYTHON=\"3\" SCALA_VER=\"2.11\" SPARK_VER=\"2.0.0\" HADOOP_VER=\"2.6\" LIVY_VER=\"0.4.0-incubating\" PROFILE=\"-Pspark-2.0 -Phadoop3 -Phadoop-2.6 -Pscala-2.11\" BUILD_FLAG=\"install -am -DskipTests -DskipRat\" TEST_FLAG=\"verify -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-display,spark-dependencies,spark,python,livy\" TEST_PROJECTS=\"-Dtest=LivySQLInterpreterTest,org.apache.zeppelin.spark.PySpark*Test,org.apache.zeppelin.python.* -Dpyspark.test.exclude='' -DfailIfNoTests=false\"",
                "-",
                "+      env: PYTHON=\"3\" SCALA_VER=\"2.11\" SPARK_VER=\"2.0.0\" HADOOP_VER=\"2.6\" LIVY_VER=\"0.4.0-incubating\" PROFILE=\"-Pspark-2.0 -Phadoop3 -Phadoop-2.6 -Pscala-2.11 -Plivy-0.3\" BUILD_FLAG=\"install -am -DskipTests -DskipRat\" TEST_FLAG=\"verify -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-display,spark/interpreter,spark/scala-2.10,spark/scala-2.11,spark/spark-dependencies,python,livy\" TEST_PROJECTS=\"-Dtest=LivySQLInterpreterTest,org.apache.zeppelin.spark.PySpark*Test,org.apache.zeppelin.python.* -Dpyspark.test.exclude='' -DfailIfNoTests=false\"",
                "+      ",
                " before_install:",
                "@@ -135,3 +135,3 @@ before_install:",
                "   - \"/sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -ac -screen 0 1600x1024x16\"",
                "-  - ./dev/change_scala_version.sh $SCALA_VER",
                "+  #- ./dev/change_scala_version.sh $SCALA_VER",
                "   - source ~/.environ",
                "@@ -147,5 +147,7 @@ before_script:",
                "   - if [[ -n $LIVY_VER ]]; then export SPARK_HOME=`pwd`/spark-$SPARK_VER-bin-hadoop$HADOOP_VER; fi",
                "-  - export SPARK_HOME=`pwd`/spark-$SPARK_VER-bin-hadoop$HADOOP_VER",
                "-  - echo \"export SPARK_HOME=`pwd`/spark-$SPARK_VER-bin-hadoop$HADOOP_VER\" > conf/zeppelin-env.sh",
                "+  - if [[ -n $SPARK_VER ]]; then export SPARK_HOME=`pwd`/spark-$SPARK_VER-bin-hadoop$HADOOP_VER; fi",
                "+  - if [[ -n $SPARK_VER ]]; then echo \"export SPARK_HOME=`pwd`/spark-$SPARK_VER-bin-hadoop$HADOOP_VER\" > conf/zeppelin-env.sh; fi",
                "   - echo \"export ZEPPELIN_HELIUM_REGISTRY=helium\" >> conf/zeppelin-env.sh",
                "+  - echo \"export SPARK_PRINT_LAUNCH_COMMAND=true\" >> conf/zeppelin-env.sh",
                "+  - export SPARK_PRINT_LAUNCH_COMMAND=true",
                "   - tail conf/zeppelin-env.sh",
                "diff --git a/bin/interpreter.sh b/bin/interpreter.sh",
                "index aa2564603..45ee0ce37 100755",
                "--- a/bin/interpreter.sh",
                "+++ b/bin/interpreter.sh",
                "@@ -123,3 +123,3 @@ if [[ \"${INTERPRETER_ID}\" == \"spark\" ]]; then",
                "     export SPARK_SUBMIT=\"${SPARK_HOME}/bin/spark-submit\"",
                "-    SPARK_APP_JAR=\"$(ls ${ZEPPELIN_HOME}/interpreter/spark/zeppelin-spark*.jar)\"",
                "+    SPARK_APP_JAR=\"$(ls ${ZEPPELIN_HOME}/interpreter/spark/spark-interpreter*.jar)\"",
                "     # This will evantually passes SPARK_APP_JAR to classpath of SparkIMain",
                "diff --git a/pom.xml b/pom.xml",
                "index bb1a1e2d6..25d0e0881 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -58,5 +58,7 @@",
                "     <module>zeppelin-display</module>",
                "-    <module>spark-dependencies</module>",
                "     <module>groovy</module>",
                "-    <module>spark</module>",
                "+    <module>spark/scala-2.10</module>",
                "+    <module>spark/scala-2.11</module>",
                "+    <module>spark/interpreter</module>",
                "+    <module>spark/spark-dependencies</module>",
                "     <module>markdown</module>",
                "@@ -88,2 +90,3 @@",
                "     <!-- language versions -->",
                "+    <java.version>1.7</java.version>",
                "     <scala.version>2.10.5</scala.version>",
                "@@ -331,4 +334,4 @@",
                "         <configuration>",
                "-          <source>1.7</source>",
                "-          <target>1.7</target>",
                "+          <source>${java.version}</source>",
                "+          <target>${java.version}</target>",
                "         </configuration>",
                "@@ -733,5 +736,2 @@",
                "       <id>scala-2.10</id>",
                "-      <activation>",
                "-        <activeByDefault>true</activeByDefault>",
                "-      </activation>",
                "       <properties>",
                "@@ -744,4 +744,7 @@",
                "       <id>scala-2.11</id>",
                "+      <activation>",
                "+        <activeByDefault>true</activeByDefault>",
                "+      </activation>",
                "       <properties>",
                "-        <scala.version>2.11.7</scala.version>",
                "+        <scala.version>2.11.8</scala.version>",
                "         <scala.binary.version>2.11</scala.binary.version>",
                "diff --git a/python/pom.xml b/python/pom.xml",
                "index a906b5d5f..7f8e671e5 100644",
                "--- a/python/pom.xml",
                "+++ b/python/pom.xml",
                "@@ -45,2 +45,3 @@",
                "     <grpc.version>1.4.0</grpc.version>",
                "+    <plugin.shade.version>2.4.1</plugin.shade.version>",
                "   </properties>",
                "@@ -92,9 +93,3 @@",
                "     </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>com.google.guava</groupId>",
                "-      <artifactId>guava</artifactId>",
                "-      <version>18.0</version>",
                "-    </dependency>",
                "-",
                "+    ",
                "     <!-- test libraries -->",
                "@@ -204,2 +199,34 @@",
                "+      <plugin>",
                "+        <groupId>org.apache.maven.plugins</groupId>",
                "+        <artifactId>maven-shade-plugin</artifactId>",
                "+        <version>${plugin.shade.version}</version>",
                "+        <configuration>",
                "+          <transformers>",
                "+            <transformer implementation=\"org.apache.maven.plugins.shade.resource.ServicesResourceTransformer\" />",
                "+            <transformer implementation=\"org.apache.maven.plugins.shade.resource.AppendingTransformer\">",
                "+              <resource>reference.conf</resource>",
                "+            </transformer>",
                "+          </transformers>",
                "+          <relocations>",
                "+            <relocation>",
                "+              <pattern>com.google.common</pattern>",
                "+              <shadedPattern>org.apache.zeppelin.com.google.common</shadedPattern>",
                "+            </relocation>",
                "+            <relocation>",
                "+              <pattern>py4j</pattern>",
                "+              <shadedPattern>org.apache.zeppelin.py4j</shadedPattern>",
                "+            </relocation>",
                "+          </relocations>",
                "+        </configuration>",
                "+        <executions>",
                "+          <execution>",
                "+            <phase>package</phase>",
                "+            <goals>",
                "+              <goal>shade</goal>",
                "+            </goals>",
                "+          </execution>",
                "+        </executions>",
                "+      </plugin>",
                "+",
                "       <plugin>",
                "diff --git a/python/src/main/java/org/apache/zeppelin/python/IPythonInterpreter.java b/python/src/main/java/org/apache/zeppelin/python/IPythonInterpreter.java",
                "index bd687befc..81cfeb24d 100644",
                "--- a/python/src/main/java/org/apache/zeppelin/python/IPythonInterpreter.java",
                "+++ b/python/src/main/java/org/apache/zeppelin/python/IPythonInterpreter.java",
                "@@ -301,3 +301,3 @@ public class IPythonInterpreter extends Interpreter implements ExecuteResultHand",
                "   @Override",
                "-  public void close() {",
                "+  public void close() throws InterpreterException {",
                "     if (watchDog != null) {",
                "@@ -329,3 +329,3 @@ public class IPythonInterpreter extends Interpreter implements ExecuteResultHand",
                "   @Override",
                "-  public void cancel(InterpreterContext context) {",
                "+  public void cancel(InterpreterContext context) throws InterpreterException {",
                "     ipythonClient.cancel(CancelRequest.newBuilder().build());",
                "@@ -339,3 +339,3 @@ public class IPythonInterpreter extends Interpreter implements ExecuteResultHand",
                "   @Override",
                "-  public int getProgress(InterpreterContext context) {",
                "+  public int getProgress(InterpreterContext context) throws InterpreterException {",
                "     return 0;",
                "diff --git a/python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java b/python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java",
                "index b13cb8afd..028f1c6a8 100644",
                "--- a/python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java",
                "+++ b/python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java",
                "@@ -287,3 +287,3 @@ public class PythonInterpreter extends Interpreter implements ExecuteResultHandl",
                "   @Override",
                "-  public void close() {",
                "+  public void close() throws InterpreterException {",
                "     if (iPythonInterpreter != null) {",
                "@@ -465,3 +465,3 @@ public class PythonInterpreter extends Interpreter implements ExecuteResultHandl",
                "-  public void interrupt() throws IOException {",
                "+  public void interrupt() throws IOException, InterpreterException {",
                "     if (pythonPid > -1) {",
                "@@ -476,3 +476,3 @@ public class PythonInterpreter extends Interpreter implements ExecuteResultHandl",
                "   @Override",
                "-  public void cancel(InterpreterContext context) {",
                "+  public void cancel(InterpreterContext context) throws InterpreterException {",
                "     if (iPythonInterpreter != null) {",
                "@@ -493,3 +493,3 @@ public class PythonInterpreter extends Interpreter implements ExecuteResultHandl",
                "   @Override",
                "-  public int getProgress(InterpreterContext context) {",
                "+  public int getProgress(InterpreterContext context) throws InterpreterException {",
                "     if (iPythonInterpreter != null) {",
                "diff --git a/r/pom.xml b/r/pom.xml",
                "index 4c1b21833..10615d780 100644",
                "--- a/r/pom.xml",
                "+++ b/r/pom.xml",
                "@@ -70,9 +70,2 @@",
                "-    <dependency>",
                "-      <groupId>${project.groupId}</groupId>",
                "-      <artifactId>zeppelin-spark-dependencies_${scala.binary.version}</artifactId>",
                "-      <version>${project.version}</version>",
                "-      <scope>provided</scope>",
                "-    </dependency>",
                "-",
                "     <dependency>",
                "diff --git a/spark/interpreter/figure/null-1.png b/spark/interpreter/figure/null-1.png",
                "new file mode 100644",
                "index 000000000..8b1ce07ea",
                "Binary files /dev/null and b/spark/interpreter/figure/null-1.png differ",
                "diff --git a/spark/interpreter/pom.xml b/spark/interpreter/pom.xml",
                "new file mode 100644",
                "index 000000000..449646242",
                "--- /dev/null",
                "+++ b/spark/interpreter/pom.xml",
                "@@ -0,0 +1,573 @@",
                "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "+<!--",
                "+  ~ Licensed to the Apache Software Foundation (ASF) under one or more",
                "+  ~ contributor license agreements.  See the NOTICE file distributed with",
                "+  ~ this work for additional information regarding copyright ownership.",
                "+  ~ The ASF licenses this file to You under the Apache License, Version 2.0",
                "+  ~ (the \"License\"); you may not use this file except in compliance with",
                "+  ~ the License.  You may obtain a copy of the License at",
                "+  ~",
                "+  ~    http://www.apache.org/licenses/LICENSE-2.0",
                "+  ~",
                "+  ~ Unless required by applicable law or agreed to in writing, software",
                "+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+  ~ See the License for the specific language governing permissions and",
                "+  ~ limitations under the License.",
                "+  -->",
                "+",
                "+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">",
                "+  <modelVersion>4.0.0</modelVersion>",
                "+",
                "+  <parent>",
                "+    <artifactId>spark-parent</artifactId>",
                "+    <groupId>org.apache.zeppelin</groupId>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "+    <relativePath>../pom.xml</relativePath>",
                "+  </parent>",
                "+",
                "+  <groupId>org.apache.zeppelin</groupId>",
                "+  <artifactId>spark-interpreter</artifactId>",
                "+  <packaging>jar</packaging>",
                "+  <version>0.9.0-SNAPSHOT</version>",
                "+  <name>Zeppelin: Spark Interpreter</name>",
                "+  <description>Zeppelin spark support</description>",
                "+",
                "+  <properties>",
                "+    <interpreter.name>spark</interpreter.name>",
                "+    <!--library versions-->",
                "+    <jsoup.version>1.8.2</jsoup.version>",
                "+    <commons.exec.version>1.3</commons.exec.version>",
                "+    <commons.compress.version>1.9</commons.compress.version>",
                "+    <maven.plugin.api.version>3.0</maven.plugin.api.version>",
                "+    <aether.version>1.12</aether.version>",
                "+    <maven.aeither.provider.version>3.0.3</maven.aeither.provider.version>",
                "+    <wagon.version>1.0</wagon.version>",
                "+",
                "+    <datanucleus.rdbms.version>3.2.9</datanucleus.rdbms.version>",
                "+    <datanucleus.apijdo.version>3.2.6</datanucleus.apijdo.version>",
                "+    <datanucleus.core.version>3.2.10</datanucleus.core.version>",
                "+",
                "+    <scala.compile.version>${scala.version}</scala.compile.version>",
                "+    <!-- settings -->",
                "+    <pyspark.test.exclude>**/PySparkInterpreterMatplotlibTest.java</pyspark.test.exclude>",
                "+    <pyspark.test.include>**/*Test.*</pyspark.test.include>",
                "+",
                "+",
                "+    <spark.archive>spark-${spark.version}</spark.archive>",
                "+    <spark.src.download.url>",
                "+      http://d3kbcqa49mib13.cloudfront.net/${spark.archive}.tgz",
                "+    </spark.src.download.url>",
                "+    <spark.bin.download.url>",
                "+      http://d3kbcqa49mib13.cloudfront.net/spark-${spark.version}-bin-without-hadoop.tgz",
                "+    </spark.bin.download.url>",
                "+",
                "+  </properties>",
                "+",
                "+  <dependencies>",
                "+    <dependency>",
                "+      <groupId>org.apache.zeppelin</groupId>",
                "+      <artifactId>zeppelin-display</artifactId>",
                "+      <version>${project.version}</version>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.apache.zeppelin</groupId>",
                "+      <artifactId>spark-scala-2.11</artifactId>",
                "+      <version>${project.version}</version>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.apache.zeppelin</groupId>",
                "+      <artifactId>spark-scala-2.10</artifactId>",
                "+      <version>${project.version}</version>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.apache.zeppelin</groupId>",
                "+      <artifactId>zeppelin-interpreter</artifactId>",
                "+      <version>${project.version}</version>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.apache.zeppelin</groupId>",
                "+      <artifactId>zeppelin-python</artifactId>",
                "+      <version>${project.version}</version>",
                "+      <exclusions>",
                "+        <exclusion>",
                "+          <groupId>net.sf.py4j</groupId>",
                "+          <artifactId>py4j</artifactId>",
                "+        </exclusion>",
                "+      </exclusions>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>${project.groupId}</groupId>",
                "+      <artifactId>zeppelin-python</artifactId>",
                "+      <version>${project.version}</version>",
                "+      <classifier>tests</classifier>",
                "+      <scope>test</scope>",
                "+      <exclusions>",
                "+        <exclusion>",
                "+          <groupId>net.sf.py4j</groupId>",
                "+          <artifactId>py4j</artifactId>",
                "+        </exclusion>",
                "+      </exclusions>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.apache.spark</groupId>",
                "+      <artifactId>spark-repl_${scala.binary.version}</artifactId>",
                "+      <version>${spark.version}</version>",
                "+      <scope>provided</scope>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.apache.spark</groupId>",
                "+      <artifactId>spark-core_${scala.binary.version}</artifactId>",
                "+      <version>${spark.version}</version>",
                "+      <scope>provided</scope>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.apache.spark</groupId>",
                "+      <artifactId>spark-hive_${scala.binary.version}</artifactId>",
                "+      <version>${spark.version}</version>",
                "+      <scope>provided</scope>",
                "+      <exclusions>",
                "+        <exclusion>",
                "+          <groupId>com.fasterxml.jackson.core</groupId>",
                "+          <artifactId>jackson-databind</artifactId>",
                "+        </exclusion>",
                "+        <exclusion>",
                "+          <groupId>com.fasterxml.jackson.core</groupId>",
                "+          <artifactId>jackson-annotations</artifactId>",
                "+        </exclusion>",
                "+      </exclusions>",
                "+    </dependency>",
                "+",
                "+    <!-- Aether :: maven dependency resolution -->",
                "+    <dependency>",
                "+      <groupId>org.apache.maven</groupId>",
                "+      <artifactId>maven-plugin-api</artifactId>",
                "+      <version>${maven.plugin.api.version}</version>",
                "+      <exclusions>",
                "+        <exclusion>",
                "+          <groupId>org.codehaus.plexus</groupId>",
                "+          <artifactId>plexus-utils</artifactId>",
                "+        </exclusion>",
                "+        <exclusion>",
                "+          <groupId>org.sonatype.sisu</groupId>",
                "+          <artifactId>sisu-inject-plexus</artifactId>",
                "+        </exclusion>",
                "+        <exclusion>",
                "+          <groupId>org.apache.maven</groupId>",
                "+          <artifactId>maven-model</artifactId>",
                "+        </exclusion>",
                "+      </exclusions>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.sonatype.aether</groupId>",
                "+      <artifactId>aether-api</artifactId>",
                "+      <version>${aether.version}</version>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.sonatype.aether</groupId>",
                "+      <artifactId>aether-util</artifactId>",
                "+      <version>${aether.version}</version>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.sonatype.aether</groupId>",
                "+      <artifactId>aether-impl</artifactId>",
                "+      <version>${aether.version}</version>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.apache.maven</groupId>",
                "+      <artifactId>maven-aether-provider</artifactId>",
                "+      <version>${maven.aeither.provider.version}</version>",
                "+      <exclusions>",
                "+        <exclusion>",
                "+          <groupId>org.sonatype.aether</groupId>",
                "+          <artifactId>aether-api</artifactId>",
                "+        </exclusion>",
                "+        <exclusion>",
                "+          <groupId>org.sonatype.aether</groupId>",
                "+          <artifactId>aether-spi</artifactId>",
                "+        </exclusion>",
                "+        <exclusion>",
                "+          <groupId>org.sonatype.aether</groupId>",
                "+          <artifactId>aether-util</artifactId>",
                "+        </exclusion>",
                "+        <exclusion>",
                "+          <groupId>org.sonatype.aether</groupId>",
                "+          <artifactId>aether-impl</artifactId>",
                "+        </exclusion>",
                "+        <exclusion>",
                "+          <groupId>org.codehaus.plexus</groupId>",
                "+          <artifactId>plexus-utils</artifactId>",
                "+        </exclusion>",
                "+      </exclusions>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.sonatype.aether</groupId>",
                "+      <artifactId>aether-connector-file</artifactId>",
                "+      <version>${aether.version}</version>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.sonatype.aether</groupId>",
                "+      <artifactId>aether-connector-wagon</artifactId>",
                "+      <version>${aether.version}</version>",
                "+      <exclusions>",
                "+        <exclusion>",
                "+          <groupId>org.apache.maven.wagon</groupId>",
                "+          <artifactId>wagon-provider-api</artifactId>",
                "+        </exclusion>",
                "+      </exclusions>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.apache.maven.wagon</groupId>",
                "+      <artifactId>wagon-provider-api</artifactId>",
                "+      <version>${wagon.version}</version>",
                "+      <exclusions>",
                "+        <exclusion>",
                "+          <groupId>org.codehaus.plexus</groupId>",
                "+          <artifactId>plexus-utils</artifactId>",
                "+        </exclusion>",
                "+      </exclusions>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.apache.maven.wagon</groupId>",
                "+      <artifactId>wagon-http-lightweight</artifactId>",
                "+      <version>${wagon.version}</version>",
                "+      <exclusions>",
                "+        <exclusion>",
                "+          <groupId>org.apache.maven.wagon</groupId>",
                "+          <artifactId>wagon-http-shared</artifactId>",
                "+        </exclusion>",
                "+      </exclusions>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.apache.maven.wagon</groupId>",
                "+      <artifactId>wagon-http</artifactId>",
                "+      <version>${wagon.version}</version>",
                "+      <exclusions>",
                "+      </exclusions>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.apache.commons</groupId>",
                "+      <artifactId>commons-exec</artifactId>",
                "+      <version>${commons.exec.version}</version>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.scala-lang</groupId>",
                "+      <artifactId>scala-library</artifactId>",
                "+      <version>${scala.version}</version>",
                "+      <scope>provided</scope>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.scala-lang</groupId>",
                "+      <artifactId>scala-compiler</artifactId>",
                "+      <version>${scala.version}</version>",
                "+      <scope>provided</scope>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.scala-lang</groupId>",
                "+      <artifactId>scala-reflect</artifactId>",
                "+      <version>${scala.version}</version>",
                "+      <scope>provided</scope>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>commons-lang</groupId>",
                "+      <artifactId>commons-lang</artifactId>",
                "+      <scope>provided</scope>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.apache.commons</groupId>",
                "+      <artifactId>commons-compress</artifactId>",
                "+      <version>${commons.compress.version}</version>",
                "+      <scope>provided</scope>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.jsoup</groupId>",
                "+      <artifactId>jsoup</artifactId>",
                "+      <version>${jsoup.version}</version>",
                "+    </dependency>",
                "+",
                "+    <!--test libraries-->",
                "+    <dependency>",
                "+      <groupId>org.scalatest</groupId>",
                "+      <artifactId>scalatest_${scala.binary.version}</artifactId>",
                "+      <version>${scalatest.version}</version>",
                "+      <scope>test</scope>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>junit</groupId>",
                "+      <artifactId>junit</artifactId>",
                "+      <scope>test</scope>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.datanucleus</groupId>",
                "+      <artifactId>datanucleus-core</artifactId>",
                "+      <version>${datanucleus.core.version}</version>",
                "+      <scope>test</scope>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.datanucleus</groupId>",
                "+      <artifactId>datanucleus-api-jdo</artifactId>",
                "+      <version>${datanucleus.apijdo.version}</version>",
                "+      <scope>test</scope>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.datanucleus</groupId>",
                "+      <artifactId>datanucleus-rdbms</artifactId>",
                "+      <version>${datanucleus.rdbms.version}</version>",
                "+      <scope>test</scope>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.mockito</groupId>",
                "+      <artifactId>mockito-core</artifactId>",
                "+      <scope>test</scope>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.powermock</groupId>",
                "+      <artifactId>powermock-api-mockito</artifactId>",
                "+      <scope>test</scope>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.powermock</groupId>",
                "+      <artifactId>powermock-module-junit4</artifactId>",
                "+      <scope>test</scope>",
                "+    </dependency>",
                "+",
                "+  </dependencies>",
                "+",
                "+  <build>",
                "+    <plugins>",
                "+      <plugin>",
                "+        <artifactId>maven-enforcer-plugin</artifactId>",
                "+        <executions>",
                "+          <execution>",
                "+            <id>enforce</id>",
                "+            <phase>none</phase>",
                "+          </execution>",
                "+        </executions>",
                "+",
                "+        <configuration>",
                "+          <rules>",
                "+            <requireJavaVersion>",
                "+              <version>1.7</version>",
                "+            </requireJavaVersion>",
                "+          </rules>",
                "+        </configuration>",
                "+      </plugin>",
                "+",
                "+      <plugin>",
                "+        <groupId>com.googlecode.maven-download-plugin</groupId>",
                "+        <artifactId>download-maven-plugin</artifactId>",
                "+        <executions>",
                "+          <execution>",
                "+            <id>download-pyspark-files</id>",
                "+            <phase>validate</phase>",
                "+            <goals>",
                "+              <goal>wget</goal>",
                "+            </goals>",
                "+            <configuration>",
                "+              <readTimeOut>60000</readTimeOut>",
                "+              <retries>5</retries>",
                "+              <unpack>true</unpack>",
                "+              <url>${spark.src.download.url}</url>",
                "+              <outputDirectory>${project.build.directory}</outputDirectory>",
                "+            </configuration>",
                "+          </execution>",
                "+        </executions>",
                "+      </plugin>",
                "+",
                "+      <plugin>",
                "+        <groupId>org.apache.maven.plugins</groupId>",
                "+        <artifactId>maven-antrun-plugin</artifactId>",
                "+        <executions>",
                "+          <execution>",
                "+            <id>zip-pyspark-files</id>",
                "+            <phase>generate-resources</phase>",
                "+            <goals>",
                "+              <goal>run</goal>",
                "+            </goals>",
                "+            <configuration>",
                "+              <target>",
                "+                <delete dir=\"../../interpreter/spark/pyspark\" />",
                "+                <copy file=\"${project.build.directory}/${spark.archive}/python/lib/py4j-${py4j.version}-src.zip\" todir=\"${project.build.directory}/../../../interpreter/spark/pyspark\" />",
                "+                <zip basedir=\"${project.build.directory}/${spark.archive}/python\" destfile=\"${project.build.directory}/../../../interpreter/spark/pyspark/pyspark.zip\" includes=\"pyspark/*.py,pyspark/**/*.py\" />",
                "+              </target>",
                "+            </configuration>",
                "+          </execution>",
                "+        </executions>",
                "+      </plugin>",
                "+",
                "+      <plugin>",
                "+        <groupId>org.scalatest</groupId>",
                "+        <artifactId>scalatest-maven-plugin</artifactId>",
                "+      </plugin>",
                "+",
                "+      <plugin>",
                "+        <groupId>org.apache.maven.plugins</groupId>",
                "+        <artifactId>maven-surefire-plugin</artifactId>",
                "+        <configuration>",
                "+          <forkCount>1</forkCount>",
                "+          <reuseForks>false</reuseForks>",
                "+          <argLine>-Xmx1024m -XX:MaxPermSize=256m</argLine>",
                "+          <excludes>",
                "+            <exclude>**/SparkRInterpreterTest.java</exclude>",
                "+            <exclude>${pyspark.test.exclude}</exclude>",
                "+            <exclude>${tests.to.exclude}</exclude>",
                "+          </excludes>",
                "+          <environmentVariables>",
                "+            <PYTHONPATH>${project.build.directory}/../../../interpreter/spark/pyspark/pyspark.zip:${project.build.directory}/../../../interpreter/lib/python/:${project.build.directory}/../../../interpreter/spark/pyspark/py4j-${py4j.version}-src.zip:.</PYTHONPATH>",
                "+            <ZEPPELIN_HOME>${basedir}/../../</ZEPPELIN_HOME>",
                "+          </environmentVariables>",
                "+        </configuration>",
                "+      </plugin>",
                "+",
                "+      <plugin>",
                "+        <groupId>org.apache.maven.plugins</groupId>",
                "+        <artifactId>maven-shade-plugin</artifactId>",
                "+        <version>${plugin.shade.version}</version>",
                "+        <configuration>",
                "+          <!--<createDependencyReducedPom>false</createDependencyReducedPom>-->",
                "+          <filters>",
                "+            <filter>",
                "+              <artifact>*:*</artifact>",
                "+              <excludes>",
                "+                <exclude>org/datanucleus/**</exclude>",
                "+                <exclude>META-INF/*.SF</exclude>",
                "+                <exclude>META-INF/*.DSA</exclude>",
                "+                <exclude>META-INF/*.RSA</exclude>",
                "+              </excludes>",
                "+            </filter>",
                "+          </filters>",
                "+          <transformers>",
                "+            <transformer implementation=\"org.apache.maven.plugins.shade.resource.ServicesResourceTransformer\" />",
                "+            <transformer implementation=\"org.apache.maven.plugins.shade.resource.AppendingTransformer\">",
                "+              <resource>reference.conf</resource>",
                "+            </transformer>",
                "+          </transformers>",
                "+          <relocations>",
                "+            <relocation>",
                "+              <pattern>io.netty</pattern>",
                "+              <shadedPattern>org.apache.zeppelin.io.netty</shadedPattern>",
                "+            </relocation>",
                "+            <relocation>",
                "+              <pattern>com.google</pattern>",
                "+              <shadedPattern>org.apache.zeppelin.com.google</shadedPattern>",
                "+            </relocation>",
                "+            <relocation>",
                "+              <pattern>py4j.</pattern>",
                "+              <shadedPattern>org.apache.zeppelin.py4j.</shadedPattern>",
                "+            </relocation>",
                "+          </relocations>",
                "+        </configuration>",
                "+        <executions>",
                "+          <execution>",
                "+            <phase>package</phase>",
                "+            <goals>",
                "+              <goal>shade</goal>",
                "+            </goals>",
                "+          </execution>",
                "+        </executions>",
                "+      </plugin>",
                "+",
                "+",
                "+      <plugin>",
                "+        <artifactId>maven-dependency-plugin</artifactId>",
                "+        <executions>",
                "+          <execution>",
                "+            <id>copy-dependencies</id>",
                "+            <phase>none</phase>",
                "+            <configuration>",
                "+              <skip>true</skip>",
                "+            </configuration>",
                "+          </execution>",
                "+",
                "+          <execution>",
                "+            <id>copy-interpreter-dependencies</id>",
                "+            <phase>none</phase>",
                "+            <configuration>",
                "+              <skip>true</skip>",
                "+            </configuration>",
                "+          </execution>",
                "+          <execution>",
                "+            <id>copy-artifact</id>",
                "+            <phase>none</phase>",
                "+            <configuration>",
                "+              <skip>true</skip>",
                "+            </configuration>",
                "+          </execution>",
                "+",
                "+",
                "+          <execution>",
                "+            <id>copy-spark-interpreter</id>",
                "+            <phase>package</phase>",
                "+            <goals>",
                "+              <goal>copy</goal>",
                "+            </goals>",
                "+            <configuration>",
                "+              <outputDirectory>${project.build.directory}/../../../interpreter/spark</outputDirectory>",
                "+              <overWriteReleases>false</overWriteReleases>",
                "+              <overWriteSnapshots>false</overWriteSnapshots>",
                "+              <overWriteIfNewer>true</overWriteIfNewer>",
                "+              <artifactItems>",
                "+                <artifactItem>",
                "+                  <groupId>${project.groupId}</groupId>",
                "+                  <artifactId>${project.artifactId}</artifactId>",
                "+                  <version>${project.version}</version>",
                "+                  <type>${project.packaging}</type>",
                "+                </artifactItem>",
                "+              </artifactItems>",
                "+            </configuration>",
                "+          </execution>",
                "+",
                "+        </executions>",
                "+      </plugin>",
                "+",
                "+      <plugin>",
                "+        <artifactId>maven-resources-plugin</artifactId>",
                "+        <executions>",
                "+          <execution>",
                "+            <id>copy-interpreter-setting</id>",
                "+            <phase>package</phase>",
                "+            <goals>",
                "+              <goal>resources</goal>",
                "+            </goals>",
                "+            <configuration>",
                "+              <outputDirectory>${project.build.directory}/../../../interpreter/${interpreter.name}</outputDirectory>",
                "+            </configuration>",
                "+          </execution>",
                "+        </executions>",
                "+      </plugin>",
                "+",
                "+    </plugins>",
                "+  </build>",
                "+",
                "+</project>",
                "diff --git a/spark/interpreter/src/main/java/org/apache/zeppelin/spark/AbstractSparkInterpreter.java b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/AbstractSparkInterpreter.java",
                "new file mode 100644",
                "index 000000000..9968dc6e5",
                "--- /dev/null",
                "+++ b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/AbstractSparkInterpreter.java",
                "@@ -0,0 +1,57 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.spark;",
                "+",
                "+import org.apache.spark.SparkContext;",
                "+import org.apache.spark.api.java.JavaSparkContext;",
                "+import org.apache.spark.sql.SQLContext;",
                "+import org.apache.zeppelin.interpreter.Interpreter;",
                "+import org.apache.zeppelin.interpreter.InterpreterContext;",
                "+",
                "+import java.util.Properties;",
                "+",
                "+/**",
                "+ * Abstract class for SparkInterpreter. For the purpose of co-exist of NewSparkInterpreter",
                "+ * and OldSparkInterpreter",
                "+ */",
                "+public abstract class AbstractSparkInterpreter extends Interpreter {",
                "+",
                "+  public AbstractSparkInterpreter(Properties properties) {",
                "+    super(properties);",
                "+  }",
                "+",
                "+  public abstract SparkContext getSparkContext();",
                "+",
                "+  public abstract SQLContext getSQLContext();",
                "+",
                "+  public abstract Object getSparkSession();",
                "+",
                "+  public abstract boolean isSparkContextInitialized();",
                "+",
                "+  public abstract SparkVersion getSparkVersion();",
                "+",
                "+  public abstract JavaSparkContext getJavaSparkContext();",
                "+",
                "+  public abstract void populateSparkWebUrl(InterpreterContext ctx);",
                "+",
                "+  public abstract SparkZeppelinContext getZeppelinContext();",
                "+",
                "+  public abstract String getSparkUIUrl();",
                "+",
                "+  public abstract boolean isUnsupportedSparkVersion();",
                "+}",
                "diff --git a/spark/interpreter/src/main/java/org/apache/zeppelin/spark/DepInterpreter.java b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/DepInterpreter.java",
                "new file mode 100644",
                "index 000000000..df0a48416",
                "--- /dev/null",
                "+++ b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/DepInterpreter.java",
                "@@ -0,0 +1,363 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.spark;",
                "+",
                "+import java.io.ByteArrayOutputStream;",
                "+import java.io.File;",
                "+import java.io.PrintStream;",
                "+import java.io.PrintWriter;",
                "+import java.lang.reflect.Constructor;",
                "+import java.lang.reflect.InvocationTargetException;",
                "+import java.net.MalformedURLException;",
                "+import java.net.URL;",
                "+import java.net.URLClassLoader;",
                "+import java.util.LinkedList;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+import java.util.Properties;",
                "+",
                "+import com.google.common.reflect.TypeToken;",
                "+import com.google.gson.Gson;",
                "+",
                "+import org.apache.commons.lang.StringUtils;",
                "+import org.apache.spark.repl.SparkILoop;",
                "+import org.apache.zeppelin.interpreter.Interpreter;",
                "+import org.apache.zeppelin.interpreter.InterpreterContext;",
                "+import org.apache.zeppelin.interpreter.InterpreterGroup;",
                "+import org.apache.zeppelin.interpreter.InterpreterResult;",
                "+import org.apache.zeppelin.interpreter.InterpreterResult.Code;",
                "+import org.apache.zeppelin.interpreter.WrappedInterpreter;",
                "+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;",
                "+import org.apache.zeppelin.scheduler.Scheduler;",
                "+import org.apache.zeppelin.spark.dep.SparkDependencyContext;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+import org.sonatype.aether.resolution.ArtifactResolutionException;",
                "+import org.sonatype.aether.resolution.DependencyResolutionException;",
                "+",
                "+import scala.Console;",
                "+import scala.None;",
                "+import scala.Some;",
                "+import scala.collection.convert.WrapAsJava$;",
                "+import scala.collection.JavaConversions;",
                "+import scala.tools.nsc.Settings;",
                "+import scala.tools.nsc.interpreter.Completion.Candidates;",
                "+import scala.tools.nsc.interpreter.Completion.ScalaCompleter;",
                "+import scala.tools.nsc.interpreter.IMain;",
                "+import scala.tools.nsc.interpreter.Results;",
                "+import scala.tools.nsc.settings.MutableSettings.BooleanSetting;",
                "+import scala.tools.nsc.settings.MutableSettings.PathSetting;",
                "+",
                "+",
                "+/**",
                "+ * DepInterpreter downloads dependencies and pass them when SparkInterpreter initialized.",
                "+ * It extends SparkInterpreter but does not create sparkcontext",
                "+ *",
                "+ */",
                "+public class DepInterpreter extends Interpreter {",
                "+  /**",
                "+   * intp - org.apache.spark.repl.SparkIMain (scala 2.10)",
                "+   * intp - scala.tools.nsc.interpreter.IMain; (scala 2.11)",
                "+   */",
                "+  private Object intp;",
                "+  private ByteArrayOutputStream out;",
                "+  private SparkDependencyContext depc;",
                "+  /**",
                "+   * completer - org.apache.spark.repl.SparkJLineCompletion (scala 2.10)",
                "+   */",
                "+  private Object completer;",
                "+  private SparkILoop interpreter;",
                "+  static final Logger LOGGER = LoggerFactory.getLogger(DepInterpreter.class);",
                "+",
                "+  public DepInterpreter(Properties property) {",
                "+    super(property);",
                "+  }",
                "+",
                "+  public SparkDependencyContext getDependencyContext() {",
                "+    return depc;",
                "+  }",
                "+",
                "+  public static String getSystemDefault(",
                "+      String envName,",
                "+      String propertyName,",
                "+      String defaultValue) {",
                "+",
                "+    if (envName != null && !envName.isEmpty()) {",
                "+      String envValue = System.getenv().get(envName);",
                "+      if (envValue != null) {",
                "+        return envValue;",
                "+      }",
                "+    }",
                "+",
                "+    if (propertyName != null && !propertyName.isEmpty()) {",
                "+      String propValue = System.getProperty(propertyName);",
                "+      if (propValue != null) {",
                "+        return propValue;",
                "+      }",
                "+    }",
                "+    return defaultValue;",
                "+  }",
                "+",
                "+  @Override",
                "+  public void close() {",
                "+    if (intp != null) {",
                "+      Utils.invokeMethod(intp, \"close\");",
                "+    }",
                "+  }",
                "+",
                "+  @Override",
                "+  public void open() {",
                "+    out = new ByteArrayOutputStream();",
                "+    createIMain();",
                "+  }",
                "+",
                "+",
                "+  private void createIMain() {",
                "+    Settings settings = new Settings();",
                "+    URL[] urls = getClassloaderUrls();",
                "+",
                "+    // set classpath for scala compiler",
                "+    PathSetting pathSettings = settings.classpath();",
                "+    String classpath = \"\";",
                "+    List<File> paths = currentClassPath();",
                "+    for (File f : paths) {",
                "+      if (classpath.length() > 0) {",
                "+        classpath += File.pathSeparator;",
                "+      }",
                "+      classpath += f.getAbsolutePath();",
                "+    }",
                "+",
                "+    if (urls != null) {",
                "+      for (URL u : urls) {",
                "+        if (classpath.length() > 0) {",
                "+          classpath += File.pathSeparator;",
                "+        }",
                "+        classpath += u.getFile();",
                "+      }",
                "+    }",
                "+",
                "+    pathSettings.v_$eq(classpath);",
                "+    settings.scala$tools$nsc$settings$ScalaSettings$_setter_$classpath_$eq(pathSettings);",
                "+",
                "+    // set classloader for scala compiler",
                "+    settings.explicitParentLoader_$eq(new Some<>(Thread.currentThread()",
                "+        .getContextClassLoader()));",
                "+",
                "+    BooleanSetting b = (BooleanSetting) settings.usejavacp();",
                "+    b.v_$eq(true);",
                "+    settings.scala$tools$nsc$settings$StandardScalaSettings$_setter_$usejavacp_$eq(b);",
                "+",
                "+    interpreter = new SparkILoop((java.io.BufferedReader) null, new PrintWriter(out));",
                "+    interpreter.settings_$eq(settings);",
                "+",
                "+    interpreter.createInterpreter();",
                "+",
                "+",
                "+    intp = Utils.invokeMethod(interpreter, \"intp\");",
                "+",
                "+    if (Utils.isScala2_10()) {",
                "+      Utils.invokeMethod(intp, \"setContextClassLoader\");",
                "+      Utils.invokeMethod(intp, \"initializeSynchronous\");",
                "+    }",
                "+",
                "+    depc = new SparkDependencyContext(getProperty(\"zeppelin.dep.localrepo\"),",
                "+        getProperty(\"zeppelin.dep.additionalRemoteRepository\"));",
                "+    if (Utils.isScala2_10()) {",
                "+      completer = Utils.instantiateClass(",
                "+          \"org.apache.spark.repl.SparkJLineCompletion\",",
                "+          new Class[]{Utils.findClass(\"org.apache.spark.repl.SparkIMain\")},",
                "+          new Object[]{intp});",
                "+    }",
                "+    interpret(\"@transient var _binder = new java.util.HashMap[String, Object]()\");",
                "+    Map<String, Object> binder;",
                "+    if (Utils.isScala2_10()) {",
                "+      binder = (Map<String, Object>) getValue(\"_binder\");",
                "+    } else {",
                "+      binder = (Map<String, Object>) getLastObject();",
                "+    }",
                "+    binder.put(\"depc\", depc);",
                "+",
                "+    interpret(\"@transient val z = \"",
                "+        + \"_binder.get(\\\"depc\\\")\"",
                "+        + \".asInstanceOf[org.apache.zeppelin.spark.dep.SparkDependencyContext]\");",
                "+",
                "+  }",
                "+",
                "+  private Results.Result interpret(String line) {",
                "+    return (Results.Result) Utils.invokeMethod(",
                "+        intp,",
                "+        \"interpret\",",
                "+        new Class[] {String.class},",
                "+        new Object[] {line});",
                "+  }",
                "+",
                "+  public Object getValue(String name) {",
                "+    Object ret = Utils.invokeMethod(",
                "+        intp, \"valueOfTerm\", new Class[]{String.class}, new Object[]{name});",
                "+    if (ret instanceof None) {",
                "+      return null;",
                "+    } else if (ret instanceof Some) {",
                "+      return ((Some) ret).get();",
                "+    } else {",
                "+      return ret;",
                "+    }",
                "+  }",
                "+",
                "+  public Object getLastObject() {",
                "+    IMain.Request r = (IMain.Request) Utils.invokeMethod(intp, \"lastRequest\");",
                "+    Object obj = r.lineRep().call(\"$result\",",
                "+        JavaConversions.asScalaBuffer(new LinkedList<>()));",
                "+    return obj;",
                "+  }",
                "+",
                "+  @Override",
                "+  public InterpreterResult interpret(String st, InterpreterContext context) {",
                "+    PrintStream printStream = new PrintStream(out);",
                "+    Console.setOut(printStream);",
                "+    out.reset();",
                "+",
                "+    SparkInterpreter sparkInterpreter = getSparkInterpreter();",
                "+",
                "+    if (sparkInterpreter != null && sparkInterpreter.getDelegation().isSparkContextInitialized()) {",
                "+      return new InterpreterResult(Code.ERROR,",
                "+          \"Must be used before SparkInterpreter (%spark) initialized\\n\" +",
                "+              \"Hint: put this paragraph before any Spark code and \" +",
                "+              \"restart Zeppelin/Interpreter\" );",
                "+    }",
                "+",
                "+    scala.tools.nsc.interpreter.Results.Result ret = interpret(st);",
                "+    Code code = getResultCode(ret);",
                "+",
                "+    try {",
                "+      depc.fetch();",
                "+    } catch (MalformedURLException | DependencyResolutionException",
                "+        | ArtifactResolutionException e) {",
                "+      LOGGER.error(\"Exception in DepInterpreter while interpret \", e);",
                "+      return new InterpreterResult(Code.ERROR, e.toString());",
                "+    }",
                "+",
                "+    if (code == Code.INCOMPLETE) {",
                "+      return new InterpreterResult(code, \"Incomplete expression\");",
                "+    } else if (code == Code.ERROR) {",
                "+      return new InterpreterResult(code, out.toString());",
                "+    } else {",
                "+      return new InterpreterResult(code, out.toString());",
                "+    }",
                "+  }",
                "+",
                "+  private Code getResultCode(scala.tools.nsc.interpreter.Results.Result r) {",
                "+    if (r instanceof scala.tools.nsc.interpreter.Results.Success$) {",
                "+      return Code.SUCCESS;",
                "+    } else if (r instanceof scala.tools.nsc.interpreter.Results.Incomplete$) {",
                "+      return Code.INCOMPLETE;",
                "+    } else {",
                "+      return Code.ERROR;",
                "+    }",
                "+  }",
                "+",
                "+  @Override",
                "+  public void cancel(InterpreterContext context) {",
                "+  }",
                "+",
                "+",
                "+  @Override",
                "+  public FormType getFormType() {",
                "+    return FormType.NATIVE;",
                "+  }",
                "+",
                "+  @Override",
                "+  public int getProgress(InterpreterContext context) {",
                "+    return 0;",
                "+  }",
                "+",
                "+  @Override",
                "+  public List<InterpreterCompletion> completion(String buf, int cursor,",
                "+                                                InterpreterContext interpreterContext) {",
                "+    if (Utils.isScala2_10()) {",
                "+      ScalaCompleter c = (ScalaCompleter) Utils.invokeMethod(completer, \"completer\");",
                "+      Candidates ret = c.complete(buf, cursor);",
                "+",
                "+      List<String> candidates = WrapAsJava$.MODULE$.seqAsJavaList(ret.candidates());",
                "+      List<InterpreterCompletion> completions = new LinkedList<>();",
                "+",
                "+      for (String candidate : candidates) {",
                "+        completions.add(new InterpreterCompletion(candidate, candidate, StringUtils.EMPTY));",
                "+      }",
                "+",
                "+      return completions;",
                "+    } else {",
                "+      return new LinkedList<>();",
                "+    }",
                "+  }",
                "+",
                "+  private List<File> currentClassPath() {",
                "+    List<File> paths = classPath(Thread.currentThread().getContextClassLoader());",
                "+    String[] cps = System.getProperty(\"java.class.path\").split(File.pathSeparator);",
                "+    if (cps != null) {",
                "+      for (String cp : cps) {",
                "+        paths.add(new File(cp));",
                "+      }",
                "+    }",
                "+    return paths;",
                "+  }",
                "+",
                "+  private List<File> classPath(ClassLoader cl) {",
                "+    List<File> paths = new LinkedList<>();",
                "+    if (cl == null) {",
                "+      return paths;",
                "+    }",
                "+",
                "+    if (cl instanceof URLClassLoader) {",
                "+      URLClassLoader ucl = (URLClassLoader) cl;",
                "+      URL[] urls = ucl.getURLs();",
                "+      if (urls != null) {",
                "+        for (URL url : urls) {",
                "+          paths.add(new File(url.getFile()));",
                "+        }",
                "+      }",
                "+    }",
                "+    return paths;",
                "+  }",
                "+",
                "+  private SparkInterpreter getSparkInterpreter() {",
                "+    InterpreterGroup intpGroup = getInterpreterGroup();",
                "+    if (intpGroup == null) {",
                "+      return null;",
                "+    }",
                "+",
                "+    Interpreter p = getInterpreterInTheSameSessionByClassName(SparkInterpreter.class.getName());",
                "+    if (p == null) {",
                "+      return null;",
                "+    }",
                "+",
                "+    while (p instanceof WrappedInterpreter) {",
                "+      p = ((WrappedInterpreter) p).getInnerInterpreter();",
                "+    }",
                "+    return (SparkInterpreter) p;",
                "+  }",
                "+",
                "+  @Override",
                "+  public Scheduler getScheduler() {",
                "+    SparkInterpreter sparkInterpreter = getSparkInterpreter();",
                "+    if (sparkInterpreter != null) {",
                "+      return getSparkInterpreter().getScheduler();",
                "+    } else {",
                "+      return null;",
                "+    }",
                "+  }",
                "+}",
                "diff --git a/spark/interpreter/src/main/java/org/apache/zeppelin/spark/IPySparkInterpreter.java b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/IPySparkInterpreter.java",
                "new file mode 100644",
                "index 000000000..c7253fb40",
                "--- /dev/null",
                "+++ b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/IPySparkInterpreter.java",
                "@@ -0,0 +1,128 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.spark;",
                "+",
                "+import org.apache.spark.SparkConf;",
                "+import org.apache.spark.api.java.JavaSparkContext;",
                "+import org.apache.zeppelin.interpreter.Interpreter;",
                "+import org.apache.zeppelin.interpreter.InterpreterContext;",
                "+import org.apache.zeppelin.interpreter.InterpreterException;",
                "+import org.apache.zeppelin.interpreter.LazyOpenInterpreter;",
                "+import org.apache.zeppelin.interpreter.WrappedInterpreter;",
                "+import org.apache.zeppelin.python.IPythonInterpreter;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+import java.io.IOException;",
                "+import java.util.Map;",
                "+import java.util.Properties;",
                "+",
                "+/**",
                "+ * PySparkInterpreter which use IPython underlying.",
                "+ */",
                "+public class IPySparkInterpreter extends IPythonInterpreter {",
                "+",
                "+  private static final Logger LOGGER = LoggerFactory.getLogger(IPySparkInterpreter.class);",
                "+",
                "+  private SparkInterpreter sparkInterpreter;",
                "+",
                "+  public IPySparkInterpreter(Properties property) {",
                "+    super(property);",
                "+  }",
                "+",
                "+  @Override",
                "+  public void open() throws InterpreterException {",
                "+    setProperty(\"zeppelin.python\",",
                "+        PySparkInterpreter.getPythonExec(getProperties()));",
                "+    sparkInterpreter = getSparkInterpreter();",
                "+    SparkConf conf = sparkInterpreter.getSparkContext().getConf();",
                "+    // only set PYTHONPATH in local or yarn-client mode.",
                "+    // yarn-cluster will setup PYTHONPATH automatically.",
                "+    if (!conf.get(\"spark.submit.deployMode\").equals(\"cluster\")) {",
                "+      setAdditionalPythonPath(PythonUtils.sparkPythonPath());",
                "+      setAddBulitinPy4j(false);",
                "+    }",
                "+    setAdditionalPythonInitFile(\"python/zeppelin_ipyspark.py\");",
                "+    super.open();",
                "+  }",
                "+",
                "+  @Override",
                "+  protected Map<String, String> setupIPythonEnv() throws IOException {",
                "+    Map<String, String> env = super.setupIPythonEnv();",
                "+    // set PYSPARK_PYTHON",
                "+    SparkConf conf = sparkInterpreter.getSparkContext().getConf();",
                "+    if (conf.contains(\"spark.pyspark.python\")) {",
                "+      env.put(\"PYSPARK_PYTHON\", conf.get(\"spark.pyspark.python\"));",
                "+    }",
                "+    return env;",
                "+  }",
                "+",
                "+  private SparkInterpreter getSparkInterpreter() throws InterpreterException {",
                "+    LazyOpenInterpreter lazy = null;",
                "+    SparkInterpreter spark = null;",
                "+    Interpreter p = getInterpreterInTheSameSessionByClassName(SparkInterpreter.class.getName());",
                "+",
                "+    while (p instanceof WrappedInterpreter) {",
                "+      if (p instanceof LazyOpenInterpreter) {",
                "+        lazy = (LazyOpenInterpreter) p;",
                "+      }",
                "+      p = ((WrappedInterpreter) p).getInnerInterpreter();",
                "+    }",
                "+    spark = (SparkInterpreter) p;",
                "+",
                "+    if (lazy != null) {",
                "+      lazy.open();",
                "+    }",
                "+    return spark;",
                "+  }",
                "+",
                "+  @Override",
                "+  public void cancel(InterpreterContext context) throws InterpreterException {",
                "+    super.cancel(context);",
                "+    sparkInterpreter.cancel(context);",
                "+  }",
                "+",
                "+  @Override",
                "+  public void close() throws InterpreterException {",
                "+    super.close();",
                "+    if (sparkInterpreter != null) {",
                "+      sparkInterpreter.close();",
                "+    }",
                "+  }",
                "+",
                "+  @Override",
                "+  public int getProgress(InterpreterContext context) throws InterpreterException {",
                "+    return sparkInterpreter.getProgress(context);",
                "+  }",
                "+",
                "+  public boolean isSpark2() {",
                "+    return sparkInterpreter.getSparkVersion().newerThanEquals(SparkVersion.SPARK_2_0_0);",
                "+  }",
                "+",
                "+  public JavaSparkContext getJavaSparkContext() {",
                "+    return sparkInterpreter.getJavaSparkContext();",
                "+  }",
                "+",
                "+  public Object getSQLContext() {",
                "+    return sparkInterpreter.getSQLContext();",
                "+  }",
                "+",
                "+  public Object getSparkSession() {",
                "+    return sparkInterpreter.getSparkSession();",
                "+  }",
                "+}",
                "diff --git a/spark/interpreter/src/main/java/org/apache/zeppelin/spark/NewSparkInterpreter.java b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/NewSparkInterpreter.java",
                "new file mode 100644",
                "index 000000000..1d3ccd65f",
                "--- /dev/null",
                "+++ b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/NewSparkInterpreter.java",
                "@@ -0,0 +1,390 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.spark;",
                "+",
                "+import com.google.common.collect.Lists;",
                "+import org.apache.commons.lang.StringUtils;",
                "+import org.apache.commons.lang3.exception.ExceptionUtils;",
                "+import org.apache.spark.SparkConf;",
                "+import org.apache.spark.SparkContext;",
                "+import org.apache.spark.api.java.JavaSparkContext;",
                "+import org.apache.spark.scheduler.SparkListenerJobStart;",
                "+import org.apache.spark.sql.SQLContext;",
                "+import org.apache.spark.ui.jobs.JobProgressListener;",
                "+import org.apache.zeppelin.interpreter.BaseZeppelinContext;",
                "+import org.apache.zeppelin.interpreter.DefaultInterpreterProperty;",
                "+import org.apache.zeppelin.interpreter.Interpreter;",
                "+import org.apache.zeppelin.interpreter.InterpreterContext;",
                "+import org.apache.zeppelin.interpreter.InterpreterException;",
                "+import org.apache.zeppelin.interpreter.InterpreterHookRegistry;",
                "+import org.apache.zeppelin.interpreter.InterpreterResult;",
                "+import org.apache.zeppelin.interpreter.WrappedInterpreter;",
                "+import org.apache.zeppelin.interpreter.remote.RemoteEventClientWrapper;",
                "+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;",
                "+import org.apache.zeppelin.spark.dep.SparkDependencyContext;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+import java.io.File;",
                "+import java.io.IOException;",
                "+import java.lang.reflect.InvocationTargetException;",
                "+import java.lang.reflect.Method;",
                "+import java.util.ArrayList;",
                "+import java.util.HashMap;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+import java.util.Properties;",
                "+",
                "+/**",
                "+ * SparkInterpreter of Java implementation. It is just wrapper of Spark211Interpreter",
                "+ * and Spark210Interpreter.",
                "+ */",
                "+public class NewSparkInterpreter extends AbstractSparkInterpreter {",
                "+",
                "+  private static final Logger LOGGER = LoggerFactory.getLogger(SparkInterpreter.class);",
                "+",
                "+  private BaseSparkScalaInterpreter innerInterpreter;",
                "+  private Map<String, String> innerInterpreterClassMap = new HashMap<>();",
                "+  private SparkContext sc;",
                "+  private JavaSparkContext jsc;",
                "+  private SQLContext sqlContext;",
                "+  private Object sparkSession;",
                "+",
                "+  private SparkZeppelinContext z;",
                "+  private SparkVersion sparkVersion;",
                "+  private boolean enableSupportedVersionCheck;",
                "+  private String sparkUrl;",
                "+",
                "+  private static InterpreterHookRegistry hooks;",
                "+",
                "+",
                "+  public NewSparkInterpreter(Properties properties) {",
                "+    super(properties);",
                "+    this.enableSupportedVersionCheck = java.lang.Boolean.parseBoolean(",
                "+        properties.getProperty(\"zeppelin.spark.enableSupportedVersionCheck\", \"true\"));",
                "+    innerInterpreterClassMap.put(\"2.10\", \"org.apache.zeppelin.spark.SparkScala210Interpreter\");",
                "+    innerInterpreterClassMap.put(\"2.11\", \"org.apache.zeppelin.spark.SparkScala211Interpreter\");",
                "+  }",
                "+",
                "+  @Override",
                "+  public void open() throws InterpreterException {",
                "+    try {",
                "+      String scalaVersion = extractScalaVersion();",
                "+      LOGGER.info(\"Using Scala Version: \" + scalaVersion);",
                "+      setupConfForPySpark();",
                "+      SparkConf conf = new SparkConf();",
                "+      for (Map.Entry<Object, Object> entry : getProperties().entrySet()) {",
                "+        if (!StringUtils.isBlank(entry.getValue().toString())) {",
                "+          conf.set(entry.getKey().toString(), entry.getValue().toString());",
                "+        }",
                "+        if (entry.getKey().toString().equals(\"zeppelin.spark.useHiveContext\")) {",
                "+          conf.set(\"spark.useHiveContext\", entry.getValue().toString());",
                "+        }",
                "+      }",
                "+      // use local mode for embedded spark mode when spark.master is not found",
                "+      conf.setIfMissing(\"spark.master\", \"local\");",
                "+",
                "+      String innerIntpClassName = innerInterpreterClassMap.get(scalaVersion);",
                "+      Class clazz = Class.forName(innerIntpClassName);",
                "+      this.innerInterpreter =",
                "+          (BaseSparkScalaInterpreter) clazz.getConstructor(SparkConf.class, List.class)",
                "+              .newInstance(conf, getDependencyFiles());",
                "+      this.innerInterpreter.open();",
                "+",
                "+      sc = this.innerInterpreter.sc();",
                "+      jsc = JavaSparkContext.fromSparkContext(sc);",
                "+      sparkVersion = SparkVersion.fromVersionString(sc.version());",
                "+      if (enableSupportedVersionCheck && sparkVersion.isUnsupportedVersion()) {",
                "+        throw new Exception(\"This is not officially supported spark version: \" + sparkVersion",
                "+            + \"\\nYou can set zeppelin.spark.enableSupportedVersionCheck to false if you really\" +",
                "+            \" want to try this version of spark.\");",
                "+      }",
                "+      sqlContext = this.innerInterpreter.sqlContext();",
                "+      sparkSession = this.innerInterpreter.sparkSession();",
                "+      sparkUrl = this.innerInterpreter.sparkUrl();",
                "+      setupListeners();",
                "+",
                "+      hooks = getInterpreterGroup().getInterpreterHookRegistry();",
                "+      z = new SparkZeppelinContext(sc, hooks,",
                "+          Integer.parseInt(getProperty(\"zeppelin.spark.maxResult\")));",
                "+      this.innerInterpreter.bind(\"z\", z.getClass().getCanonicalName(), z,",
                "+          Lists.newArrayList(\"@transient\"));",
                "+    } catch (Exception e) {",
                "+      LOGGER.error(ExceptionUtils.getStackTrace(e));",
                "+      throw new InterpreterException(\"Fail to open SparkInterpreter\", e);",
                "+    }",
                "+  }",
                "+",
                "+  private void setupConfForPySpark() {",
                "+    String sparkHome = getProperty(\"SPARK_HOME\");",
                "+    File pysparkFolder = null;",
                "+    if (sparkHome == null) {",
                "+      String zeppelinHome =",
                "+          new DefaultInterpreterProperty(\"ZEPPELIN_HOME\", \"zeppelin.home\", \"../../\")",
                "+              .getValue().toString();",
                "+      pysparkFolder = new File(zeppelinHome,",
                "+          \"interpreter\" + File.separator + \"spark\" + File.separator + \"pyspark\");",
                "+    } else {",
                "+      pysparkFolder = new File(sparkHome, \"python\" + File.separator + \"lib\");",
                "+    }",
                "+",
                "+    ArrayList<String> pysparkPackages = new ArrayList<>();",
                "+    for (File file : pysparkFolder.listFiles()) {",
                "+      if (file.getName().equals(\"pyspark.zip\")) {",
                "+        pysparkPackages.add(file.getAbsolutePath());",
                "+      }",
                "+      if (file.getName().startsWith(\"py4j-\")) {",
                "+        pysparkPackages.add(file.getAbsolutePath());",
                "+      }",
                "+    }",
                "+",
                "+    if (pysparkPackages.size() != 2) {",
                "+      throw new RuntimeException(\"Not correct number of pyspark packages: \" +",
                "+          StringUtils.join(pysparkPackages, \",\"));",
                "+    }",
                "+    // Distribute two libraries(pyspark.zip and py4j-*.zip) to workers",
                "+    System.setProperty(\"spark.files\", mergeProperty(System.getProperty(\"spark.files\", \"\"),",
                "+        StringUtils.join(pysparkPackages, \",\")));",
                "+    System.setProperty(\"spark.submit.pyFiles\", mergeProperty(",
                "+        System.getProperty(\"spark.submit.pyFiles\", \"\"), StringUtils.join(pysparkPackages, \",\")));",
                "+",
                "+  }",
                "+",
                "+  private String mergeProperty(String originalValue, String appendedValue) {",
                "+    if (StringUtils.isBlank(originalValue)) {",
                "+      return appendedValue;",
                "+    }",
                "+    return originalValue + \",\" + appendedValue;",
                "+  }",
                "+",
                "+  @Override",
                "+  public void close() {",
                "+    LOGGER.info(\"Close SparkInterpreter\");",
                "+    innerInterpreter.close();",
                "+  }",
                "+",
                "+  @Override",
                "+  public InterpreterResult interpret(String st, InterpreterContext context) {",
                "+    InterpreterContext.set(context);",
                "+    z.setGui(context.getGui());",
                "+    z.setNoteGui(context.getNoteGui());",
                "+    z.setInterpreterContext(context);",
                "+    populateSparkWebUrl(context);",
                "+    String jobDesc = \"Started by: \" + Utils.getUserName(context.getAuthenticationInfo());",
                "+    sc.setJobGroup(Utils.buildJobGroupId(context), jobDesc, false);",
                "+    return innerInterpreter.interpret(st, context);",
                "+  }",
                "+",
                "+  @Override",
                "+  public void cancel(InterpreterContext context) {",
                "+    sc.cancelJobGroup(Utils.buildJobGroupId(context));",
                "+  }",
                "+",
                "+  @Override",
                "+  public List<InterpreterCompletion> completion(String buf,",
                "+                                                int cursor,",
                "+                                                InterpreterContext interpreterContext) {",
                "+    LOGGER.debug(\"buf: \" + buf + \", cursor:\" + cursor);",
                "+    return innerInterpreter.completion(buf, cursor, interpreterContext);",
                "+  }",
                "+",
                "+  @Override",
                "+  public FormType getFormType() {",
                "+    return FormType.NATIVE;",
                "+  }",
                "+",
                "+  @Override",
                "+  public int getProgress(InterpreterContext context) {",
                "+    return innerInterpreter.getProgress(Utils.buildJobGroupId(context), context);",
                "+  }",
                "+",
                "+  private void setupListeners() {",
                "+    JobProgressListener pl = new JobProgressListener(sc.getConf()) {",
                "+      @Override",
                "+      public synchronized void onJobStart(SparkListenerJobStart jobStart) {",
                "+        super.onJobStart(jobStart);",
                "+        int jobId = jobStart.jobId();",
                "+        String jobGroupId = jobStart.properties().getProperty(\"spark.jobGroup.id\");",
                "+        String uiEnabled = jobStart.properties().getProperty(\"spark.ui.enabled\");",
                "+        String jobUrl = getJobUrl(jobId);",
                "+        String noteId = Utils.getNoteId(jobGroupId);",
                "+        String paragraphId = Utils.getParagraphId(jobGroupId);",
                "+        // Button visible if Spark UI property not set, set as invalid boolean or true",
                "+        java.lang.Boolean showSparkUI =",
                "+            uiEnabled == null || !uiEnabled.trim().toLowerCase().equals(\"false\");",
                "+        if (showSparkUI && jobUrl != null) {",
                "+          RemoteEventClientWrapper eventClient = BaseZeppelinContext.getEventClient();",
                "+          Map<String, String> infos = new java.util.HashMap<>();",
                "+          infos.put(\"jobUrl\", jobUrl);",
                "+          infos.put(\"label\", \"SPARK JOB\");",
                "+          infos.put(\"tooltip\", \"View in Spark web UI\");",
                "+          if (eventClient != null) {",
                "+            eventClient.onParaInfosReceived(noteId, paragraphId, infos);",
                "+          }",
                "+        }",
                "+      }",
                "+",
                "+      private String getJobUrl(int jobId) {",
                "+        String jobUrl = null;",
                "+        if (sparkUrl != null) {",
                "+          jobUrl = sparkUrl + \"/jobs/job?id=\" + jobId;",
                "+        }",
                "+        return jobUrl;",
                "+      }",
                "+    };",
                "+    try {",
                "+      Object listenerBus = sc.getClass().getMethod(\"listenerBus\").invoke(sc);",
                "+      Method[] methods = listenerBus.getClass().getMethods();",
                "+      Method addListenerMethod = null;",
                "+      for (Method m : methods) {",
                "+        if (!m.getName().equals(\"addListener\")) {",
                "+          continue;",
                "+        }",
                "+        Class<?>[] parameterTypes = m.getParameterTypes();",
                "+        if (parameterTypes.length != 1) {",
                "+          continue;",
                "+        }",
                "+        if (!parameterTypes[0].isAssignableFrom(JobProgressListener.class)) {",
                "+          continue;",
                "+        }",
                "+        addListenerMethod = m;",
                "+        break;",
                "+      }",
                "+      if (addListenerMethod != null) {",
                "+        addListenerMethod.invoke(listenerBus, pl);",
                "+      }",
                "+    } catch (NoSuchMethodException | SecurityException | IllegalAccessException",
                "+        | IllegalArgumentException | InvocationTargetException e) {",
                "+      LOGGER.error(e.toString(), e);",
                "+    }",
                "+  }",
                "+",
                "+  public SparkZeppelinContext getZeppelinContext() {",
                "+    return this.z;",
                "+  }",
                "+",
                "+  public SparkContext getSparkContext() {",
                "+    return this.sc;",
                "+  }",
                "+",
                "+  @Override",
                "+  public SQLContext getSQLContext() {",
                "+    return sqlContext;",
                "+  }",
                "+",
                "+  public JavaSparkContext getJavaSparkContext() {",
                "+    return this.jsc;",
                "+  }",
                "+",
                "+  public Object getSparkSession() {",
                "+    return sparkSession;",
                "+  }",
                "+",
                "+  public SparkVersion getSparkVersion() {",
                "+    return sparkVersion;",
                "+  }",
                "+",
                "+  private DepInterpreter getDepInterpreter() {",
                "+    Interpreter p = getInterpreterInTheSameSessionByClassName(DepInterpreter.class.getName());",
                "+    if (p == null) {",
                "+      return null;",
                "+    }",
                "+",
                "+    while (p instanceof WrappedInterpreter) {",
                "+      p = ((WrappedInterpreter) p).getInnerInterpreter();",
                "+    }",
                "+    return (DepInterpreter) p;",
                "+  }",
                "+",
                "+  private String extractScalaVersion() throws IOException, InterruptedException {",
                "+    String scalaVersionString = scala.util.Properties.versionString();",
                "+    if (scalaVersionString.contains(\"version 2.10\")) {",
                "+      return \"2.10\";",
                "+    } else {",
                "+      return \"2.11\";",
                "+    }",
                "+  }",
                "+",
                "+  public void populateSparkWebUrl(InterpreterContext ctx) {",
                "+    Map<String, String> infos = new java.util.HashMap<>();",
                "+    infos.put(\"url\", sparkUrl);",
                "+    String uiEnabledProp = properties.getProperty(\"spark.ui.enabled\", \"true\");",
                "+    java.lang.Boolean uiEnabled = java.lang.Boolean.parseBoolean(",
                "+        uiEnabledProp.trim());",
                "+    if (!uiEnabled) {",
                "+      infos.put(\"message\", \"Spark UI disabled\");",
                "+    } else {",
                "+      if (StringUtils.isNotBlank(sparkUrl)) {",
                "+        infos.put(\"message\", \"Spark UI enabled\");",
                "+      } else {",
                "+        infos.put(\"message\", \"No spark url defined\");",
                "+      }",
                "+    }",
                "+    if (ctx != null && ctx.getClient() != null) {",
                "+      LOGGER.debug(\"Sending metadata to Zeppelin server: {}\", infos.toString());",
                "+      getZeppelinContext().setEventClient(ctx.getClient());",
                "+      ctx.getClient().onMetaInfosReceived(infos);",
                "+    }",
                "+  }",
                "+",
                "+  public boolean isSparkContextInitialized() {",
                "+    return this.sc != null;",
                "+  }",
                "+",
                "+  private List<String> getDependencyFiles() {",
                "+    List<String> depFiles = new ArrayList<>();",
                "+    // add jar from DepInterpreter",
                "+    DepInterpreter depInterpreter = getDepInterpreter();",
                "+    if (depInterpreter != null) {",
                "+      SparkDependencyContext depc = depInterpreter.getDependencyContext();",
                "+      if (depc != null) {",
                "+        List<File> files = depc.getFilesDist();",
                "+        if (files != null) {",
                "+          for (File f : files) {",
                "+            depFiles.add(f.getAbsolutePath());",
                "+          }",
                "+        }",
                "+      }",
                "+    }",
                "+",
                "+    // add jar from local repo",
                "+    String localRepo = getProperty(\"zeppelin.interpreter.localRepo\");",
                "+    if (localRepo != null) {",
                "+      File localRepoDir = new File(localRepo);",
                "+      if (localRepoDir.exists()) {",
                "+        File[] files = localRepoDir.listFiles();",
                "+        if (files != null) {",
                "+          for (File f : files) {",
                "+            depFiles.add(f.getAbsolutePath());",
                "+          }",
                "+        }",
                "+      }",
                "+    }",
                "+    return depFiles;",
                "+  }",
                "+",
                "+  @Override",
                "+  public String getSparkUIUrl() {",
                "+    return sparkUrl;",
                "+  }",
                "+",
                "+  @Override",
                "+  public boolean isUnsupportedSparkVersion() {",
                "+    return enableSupportedVersionCheck  && sparkVersion.isUnsupportedVersion();",
                "+  }",
                "+}",
                "diff --git a/spark/interpreter/src/main/java/org/apache/zeppelin/spark/OldSparkInterpreter.java b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/OldSparkInterpreter.java",
                "new file mode 100644",
                "index 000000000..6a54c3b37",
                "--- /dev/null",
                "+++ b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/OldSparkInterpreter.java",
                "@@ -0,0 +1,1525 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.spark;",
                "+",
                "+import java.io.File;",
                "+import java.io.IOException;",
                "+import java.io.PrintWriter;",
                "+import java.lang.reflect.Constructor;",
                "+import java.lang.reflect.Field;",
                "+import java.lang.reflect.InvocationTargetException;",
                "+import java.lang.reflect.Method;",
                "+import java.net.URL;",
                "+import java.net.URLClassLoader;",
                "+import java.util.LinkedList;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+import java.util.Properties;",
                "+import java.util.Set;",
                "+import java.util.concurrent.atomic.AtomicInteger;",
                "+",
                "+import org.apache.commons.lang3.StringUtils;",
                "+import org.apache.hadoop.security.UserGroupInformation;",
                "+import org.apache.spark.SecurityManager;",
                "+import org.apache.spark.SparkConf;",
                "+import org.apache.spark.SparkContext;",
                "+import org.apache.spark.SparkEnv;",
                "+import org.apache.spark.api.java.JavaSparkContext;",
                "+import org.apache.spark.repl.SparkILoop;",
                "+import org.apache.spark.scheduler.ActiveJob;",
                "+import org.apache.spark.scheduler.DAGScheduler;",
                "+import org.apache.spark.scheduler.Pool;",
                "+import org.apache.spark.scheduler.SparkListenerJobStart;",
                "+import org.apache.spark.sql.SQLContext;",
                "+import org.apache.spark.ui.SparkUI;",
                "+import org.apache.spark.ui.jobs.JobProgressListener;",
                "+import org.apache.zeppelin.interpreter.BaseZeppelinContext;",
                "+import org.apache.zeppelin.interpreter.Interpreter;",
                "+import org.apache.zeppelin.interpreter.InterpreterContext;",
                "+import org.apache.zeppelin.interpreter.InterpreterException;",
                "+import org.apache.zeppelin.interpreter.InterpreterHookRegistry;",
                "+import org.apache.zeppelin.interpreter.InterpreterResult;",
                "+import org.apache.zeppelin.interpreter.InterpreterResult.Code;",
                "+import org.apache.zeppelin.interpreter.InterpreterUtils;",
                "+import org.apache.zeppelin.interpreter.WrappedInterpreter;",
                "+import org.apache.zeppelin.interpreter.remote.RemoteEventClientWrapper;",
                "+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;",
                "+import org.apache.zeppelin.interpreter.util.InterpreterOutputStream;",
                "+import org.apache.zeppelin.resource.ResourcePool;",
                "+import org.apache.zeppelin.resource.WellKnownResourceName;",
                "+import org.apache.zeppelin.scheduler.Scheduler;",
                "+import org.apache.zeppelin.scheduler.SchedulerFactory;",
                "+import org.apache.zeppelin.spark.dep.SparkDependencyContext;",
                "+import org.apache.zeppelin.spark.dep.SparkDependencyResolver;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+import scala.Console;",
                "+import scala.Enumeration.Value;",
                "+import scala.None;",
                "+import scala.Option;",
                "+import scala.Some;",
                "+import scala.Tuple2;",
                "+import scala.collection.Iterator;",
                "+import scala.collection.JavaConversions;",
                "+import scala.collection.JavaConverters;",
                "+import scala.collection.Seq;",
                "+import scala.collection.convert.WrapAsJava$;",
                "+import scala.collection.mutable.HashMap;",
                "+import scala.collection.mutable.HashSet;",
                "+import scala.reflect.io.AbstractFile;",
                "+import scala.tools.nsc.Global;",
                "+import scala.tools.nsc.Settings;",
                "+import scala.tools.nsc.interpreter.Completion.Candidates;",
                "+import scala.tools.nsc.interpreter.Completion.ScalaCompleter;",
                "+import scala.tools.nsc.interpreter.IMain;",
                "+import scala.tools.nsc.interpreter.Results;",
                "+import scala.tools.nsc.settings.MutableSettings;",
                "+import scala.tools.nsc.settings.MutableSettings.BooleanSetting;",
                "+import scala.tools.nsc.settings.MutableSettings.PathSetting;",
                "+",
                "+/**",
                "+ * Spark interpreter for Zeppelin.",
                "+ *",
                "+ */",
                "+public class OldSparkInterpreter extends AbstractSparkInterpreter {",
                "+  public static Logger logger = LoggerFactory.getLogger(OldSparkInterpreter.class);",
                "+",
                "+  private SparkZeppelinContext z;",
                "+  private SparkILoop interpreter;",
                "+  /**",
                "+   * intp - org.apache.spark.repl.SparkIMain (scala 2.10)",
                "+   * intp - scala.tools.nsc.interpreter.IMain; (scala 2.11)",
                "+   */",
                "+  private Object intp;",
                "+  private SparkConf conf;",
                "+  private static SparkContext sc;",
                "+  private static SQLContext sqlc;",
                "+  private static InterpreterHookRegistry hooks;",
                "+  private static SparkEnv env;",
                "+  private static Object sparkSession;    // spark 2.x",
                "+  private static JobProgressListener sparkListener;",
                "+  private static AbstractFile classOutputDir;",
                "+  private static Integer sharedInterpreterLock = new Integer(0);",
                "+  private static AtomicInteger numReferenceOfSparkContext = new AtomicInteger(0);",
                "+",
                "+  private InterpreterOutputStream out;",
                "+  private SparkDependencyResolver dep;",
                "+  private static String sparkUrl;",
                "+",
                "+  /**",
                "+   * completer - org.apache.spark.repl.SparkJLineCompletion (scala 2.10)",
                "+   */",
                "+  private Object completer = null;",
                "+",
                "+  private Map<String, Object> binder;",
                "+  private SparkVersion sparkVersion;",
                "+  private static File outputDir;          // class outputdir for scala 2.11",
                "+  private Object classServer;      // classserver for scala 2.11",
                "+  private JavaSparkContext jsc;",
                "+  private boolean enableSupportedVersionCheck;",
                "+",
                "+  public OldSparkInterpreter(Properties property) {",
                "+    super(property);",
                "+    out = new InterpreterOutputStream(logger);",
                "+  }",
                "+",
                "+  public OldSparkInterpreter(Properties property, SparkContext sc) {",
                "+    this(property);",
                "+",
                "+    this.sc = sc;",
                "+    env = SparkEnv.get();",
                "+    sparkListener = setupListeners(this.sc);",
                "+  }",
                "+",
                "+  public SparkContext getSparkContext() {",
                "+    synchronized (sharedInterpreterLock) {",
                "+      if (sc == null) {",
                "+        sc = createSparkContext();",
                "+        env = SparkEnv.get();",
                "+        sparkListener = setupListeners(sc);",
                "+      }",
                "+      return sc;",
                "+    }",
                "+  }",
                "+",
                "+  public JavaSparkContext getJavaSparkContext() {",
                "+    synchronized (sharedInterpreterLock) {",
                "+      if (jsc == null) {",
                "+        jsc = JavaSparkContext.fromSparkContext(sc);",
                "+      }",
                "+      return jsc;",
                "+    }",
                "+  }",
                "+",
                "+  public boolean isSparkContextInitialized() {",
                "+    synchronized (sharedInterpreterLock) {",
                "+      return sc != null;",
                "+    }",
                "+  }",
                "+",
                "+  static JobProgressListener setupListeners(SparkContext context) {",
                "+    JobProgressListener pl = new JobProgressListener(context.getConf()) {",
                "+      @Override",
                "+      public synchronized void onJobStart(SparkListenerJobStart jobStart) {",
                "+        super.onJobStart(jobStart);",
                "+        int jobId = jobStart.jobId();",
                "+        String jobGroupId = jobStart.properties().getProperty(\"spark.jobGroup.id\");",
                "+        String uiEnabled = jobStart.properties().getProperty(\"spark.ui.enabled\");",
                "+        String jobUrl = getJobUrl(jobId);",
                "+        String noteId = Utils.getNoteId(jobGroupId);",
                "+        String paragraphId = Utils.getParagraphId(jobGroupId);",
                "+        // Button visible if Spark UI property not set, set as invalid boolean or true",
                "+        java.lang.Boolean showSparkUI =",
                "+            uiEnabled == null || !uiEnabled.trim().toLowerCase().equals(\"false\");",
                "+        if (showSparkUI && jobUrl != null) {",
                "+          RemoteEventClientWrapper eventClient = BaseZeppelinContext.getEventClient();",
                "+          Map<String, String> infos = new java.util.HashMap<>();",
                "+          infos.put(\"jobUrl\", jobUrl);",
                "+          infos.put(\"label\", \"SPARK JOB\");",
                "+          infos.put(\"tooltip\", \"View in Spark web UI\");",
                "+          if (eventClient != null) {",
                "+            eventClient.onParaInfosReceived(noteId, paragraphId, infos);",
                "+          }",
                "+        }",
                "+      }",
                "+",
                "+      private String getJobUrl(int jobId) {",
                "+        String jobUrl = null;",
                "+        if (sparkUrl != null) {",
                "+          jobUrl = sparkUrl + \"/jobs/job/?id=\" + jobId;",
                "+        }",
                "+        return jobUrl;",
                "+      }",
                "+",
                "+    };",
                "+    try {",
                "+      Object listenerBus = context.getClass().getMethod(\"listenerBus\").invoke(context);",
                "+",
                "+      Method[] methods = listenerBus.getClass().getMethods();",
                "+      Method addListenerMethod = null;",
                "+      for (Method m : methods) {",
                "+        if (!m.getName().equals(\"addListener\")) {",
                "+          continue;",
                "+        }",
                "+",
                "+        Class<?>[] parameterTypes = m.getParameterTypes();",
                "+",
                "+        if (parameterTypes.length != 1) {",
                "+          continue;",
                "+        }",
                "+",
                "+        if (!parameterTypes[0].isAssignableFrom(JobProgressListener.class)) {",
                "+          continue;",
                "+        }",
                "+",
                "+        addListenerMethod = m;",
                "+        break;",
                "+      }",
                "+",
                "+      if (addListenerMethod != null) {",
                "+        addListenerMethod.invoke(listenerBus, pl);",
                "+      } else {",
                "+        return null;",
                "+      }",
                "+    } catch (NoSuchMethodException | SecurityException | IllegalAccessException",
                "+        | IllegalArgumentException | InvocationTargetException e) {",
                "+      logger.error(e.toString(), e);",
                "+      return null;",
                "+    }",
                "+    return pl;",
                "+  }",
                "+",
                "+  private boolean useHiveContext() {",
                "+    return java.lang.Boolean.parseBoolean(getProperty(\"zeppelin.spark.useHiveContext\"));",
                "+  }",
                "+",
                "+  /**",
                "+   * See org.apache.spark.sql.SparkSession.hiveClassesArePresent",
                "+   * @return",
                "+   */",
                "+  private boolean hiveClassesArePresent() {",
                "+    try {",
                "+      this.getClass().forName(\"org.apache.spark.sql.hive.execution.InsertIntoHiveTable\");",
                "+      this.getClass().forName(\"org.apache.hadoop.hive.conf.HiveConf\");",
                "+      return true;",
                "+    } catch (ClassNotFoundException | NoClassDefFoundError e) {",
                "+      return false;",
                "+    }",
                "+  }",
                "+",
                "+  private boolean importImplicit() {",
                "+    return java.lang.Boolean.parseBoolean(getProperty(\"zeppelin.spark.importImplicit\"));",
                "+  }",
                "+",
                "+  public Object getSparkSession() {",
                "+    synchronized (sharedInterpreterLock) {",
                "+      if (sparkSession == null) {",
                "+        createSparkSession();",
                "+      }",
                "+      return sparkSession;",
                "+    }",
                "+  }",
                "+",
                "+  public SQLContext getSQLContext() {",
                "+    synchronized (sharedInterpreterLock) {",
                "+      if (Utils.isSpark2()) {",
                "+        return getSQLContext_2();",
                "+      } else {",
                "+        return getSQLContext_1();",
                "+      }",
                "+    }",
                "+  }",
                "+",
                "+  /**",
                "+   * Get SQLContext for spark 2.x",
                "+   */",
                "+  private SQLContext getSQLContext_2() {",
                "+    if (sqlc == null) {",
                "+      sqlc = (SQLContext) Utils.invokeMethod(sparkSession, \"sqlContext\");",
                "+    }",
                "+    return sqlc;",
                "+  }",
                "+",
                "+  public SQLContext getSQLContext_1() {",
                "+    if (sqlc == null) {",
                "+      if (useHiveContext()) {",
                "+        String name = \"org.apache.spark.sql.hive.HiveContext\";",
                "+        Constructor<?> hc;",
                "+        try {",
                "+          hc = getClass().getClassLoader().loadClass(name)",
                "+              .getConstructor(SparkContext.class);",
                "+          sqlc = (SQLContext) hc.newInstance(getSparkContext());",
                "+        } catch (NoSuchMethodException | SecurityException",
                "+            | ClassNotFoundException | InstantiationException",
                "+            | IllegalAccessException | IllegalArgumentException",
                "+            | InvocationTargetException e) {",
                "+          logger.warn(\"Can't create HiveContext. Fallback to SQLContext\", e);",
                "+          // when hive dependency is not loaded, it'll fail.",
                "+          // in this case SQLContext can be used.",
                "+          sqlc = new SQLContext(getSparkContext());",
                "+        }",
                "+      } else {",
                "+        sqlc = new SQLContext(getSparkContext());",
                "+      }",
                "+    }",
                "+    return sqlc;",
                "+  }",
                "+",
                "+",
                "+  public SparkDependencyResolver getDependencyResolver() {",
                "+    if (dep == null) {",
                "+      dep = new SparkDependencyResolver(",
                "+          (Global) Utils.invokeMethod(intp, \"global\"),",
                "+          (ClassLoader) Utils.invokeMethod(Utils.invokeMethod(intp, \"classLoader\"), \"getParent\"),",
                "+          sc,",
                "+          getProperty(\"zeppelin.dep.localrepo\"),",
                "+          getProperty(\"zeppelin.dep.additionalRemoteRepository\"));",
                "+    }",
                "+    return dep;",
                "+  }",
                "+",
                "+  private DepInterpreter getDepInterpreter() {",
                "+    Interpreter p = getInterpreterInTheSameSessionByClassName(DepInterpreter.class.getName());",
                "+    if (p == null) {",
                "+      return null;",
                "+    }",
                "+",
                "+    while (p instanceof WrappedInterpreter) {",
                "+      p = ((WrappedInterpreter) p).getInnerInterpreter();",
                "+    }",
                "+    return (DepInterpreter) p;",
                "+  }",
                "+",
                "+  public boolean isYarnMode() {",
                "+    String master = getProperty(\"master\");",
                "+    if (master == null) {",
                "+      master = getProperty(\"spark.master\", \"local[*]\");",
                "+    }",
                "+    return master.startsWith(\"yarn\");",
                "+  }",
                "+",
                "+  /**",
                "+   * Spark 2.x",
                "+   * Create SparkSession",
                "+   */",
                "+  public Object createSparkSession() {",
                "+    // use local mode for embedded spark mode when spark.master is not found",
                "+    conf.setIfMissing(\"spark.master\", \"local\");",
                "+    logger.info(\"------ Create new SparkSession {} -------\", conf.get(\"spark.master\"));",
                "+    String execUri = System.getenv(\"SPARK_EXECUTOR_URI\");",
                "+    if (outputDir != null) {",
                "+      conf.set(\"spark.repl.class.outputDir\", outputDir.getAbsolutePath());",
                "+    }",
                "+",
                "+    if (execUri != null) {",
                "+      conf.set(\"spark.executor.uri\", execUri);",
                "+    }",
                "+    conf.set(\"spark.scheduler.mode\", \"FAIR\");",
                "+",
                "+    Properties intpProperty = getProperties();",
                "+    for (Object k : intpProperty.keySet()) {",
                "+      String key = (String) k;",
                "+      String val = toString(intpProperty.get(key));",
                "+      if (!val.trim().isEmpty()) {",
                "+        if (key.startsWith(\"spark.\")) {",
                "+          logger.debug(String.format(\"SparkConf: key = [%s], value = [%s]\", key, val));",
                "+          conf.set(key, val);",
                "+        }",
                "+        if (key.startsWith(\"zeppelin.spark.\")) {",
                "+          String sparkPropertyKey = key.substring(\"zeppelin.spark.\".length());",
                "+          logger.debug(String.format(\"SparkConf: key = [%s], value = [%s]\", sparkPropertyKey, val));",
                "+          conf.set(sparkPropertyKey, val);",
                "+        }",
                "+      }",
                "+    }",
                "+",
                "+    Class SparkSession = Utils.findClass(\"org.apache.spark.sql.SparkSession\");",
                "+    Object builder = Utils.invokeStaticMethod(SparkSession, \"builder\");",
                "+    Utils.invokeMethod(builder, \"config\", new Class[]{ SparkConf.class }, new Object[]{ conf });",
                "+",
                "+    if (useHiveContext()) {",
                "+      if (hiveClassesArePresent()) {",
                "+        Utils.invokeMethod(builder, \"enableHiveSupport\");",
                "+        sparkSession = Utils.invokeMethod(builder, \"getOrCreate\");",
                "+        logger.info(\"Created Spark session with Hive support\");",
                "+      } else {",
                "+        Utils.invokeMethod(builder, \"config\",",
                "+            new Class[]{ String.class, String.class},",
                "+            new Object[]{ \"spark.sql.catalogImplementation\", \"in-memory\"});",
                "+        sparkSession = Utils.invokeMethod(builder, \"getOrCreate\");",
                "+        logger.info(\"Created Spark session with Hive support use in-memory catalogImplementation\");",
                "+      }",
                "+    } else {",
                "+      sparkSession = Utils.invokeMethod(builder, \"getOrCreate\");",
                "+      logger.info(\"Created Spark session\");",
                "+    }",
                "+",
                "+    return sparkSession;",
                "+  }",
                "+",
                "+  public SparkContext createSparkContext() {",
                "+    if (Utils.isSpark2()) {",
                "+      return createSparkContext_2();",
                "+    } else {",
                "+      return createSparkContext_1();",
                "+    }",
                "+  }",
                "+",
                "+  /**",
                "+   * Create SparkContext for spark 2.x",
                "+   * @return",
                "+   */",
                "+  private SparkContext createSparkContext_2() {",
                "+    return (SparkContext) Utils.invokeMethod(sparkSession, \"sparkContext\");",
                "+  }",
                "+",
                "+  public SparkContext createSparkContext_1() {",
                "+    // use local mode for embedded spark mode when spark.master is not found",
                "+    if (!conf.contains(\"spark.master\")) {",
                "+      conf.setMaster(\"local\");",
                "+    }",
                "+    logger.info(\"------ Create new SparkContext {} -------\", conf.get(\"spark.master\"));",
                "+",
                "+    String execUri = System.getenv(\"SPARK_EXECUTOR_URI\");",
                "+    String[] jars = null;",
                "+",
                "+    if (Utils.isScala2_10()) {",
                "+      jars = (String[]) Utils.invokeStaticMethod(SparkILoop.class, \"getAddedJars\");",
                "+    } else {",
                "+      jars = (String[]) Utils.invokeStaticMethod(",
                "+          Utils.findClass(\"org.apache.spark.repl.Main\"), \"getAddedJars\");",
                "+    }",
                "+",
                "+    String classServerUri = null;",
                "+    String replClassOutputDirectory = null;",
                "+",
                "+    try { // in case of spark 1.1x, spark 1.2x",
                "+      Method classServer = intp.getClass().getMethod(\"classServer\");",
                "+      Object httpServer = classServer.invoke(intp);",
                "+      classServerUri = (String) Utils.invokeMethod(httpServer, \"uri\");",
                "+    } catch (NoSuchMethodException | SecurityException | IllegalAccessException",
                "+        | IllegalArgumentException | InvocationTargetException e) {",
                "+      // continue",
                "+    }",
                "+",
                "+    if (classServerUri == null) {",
                "+      try { // for spark 1.3x",
                "+        Method classServer = intp.getClass().getMethod(\"classServerUri\");",
                "+        classServerUri = (String) classServer.invoke(intp);",
                "+      } catch (NoSuchMethodException | SecurityException | IllegalAccessException",
                "+          | IllegalArgumentException | InvocationTargetException e) {",
                "+        // continue instead of: throw new InterpreterException(e);",
                "+        // Newer Spark versions (like the patched CDH5.7.0 one) don't contain this method",
                "+        logger.warn(String.format(\"Spark method classServerUri not available due to: [%s]\",",
                "+            e.getMessage()));",
                "+      }",
                "+    }",
                "+",
                "+    if (classServerUri == null) {",
                "+      try { // for RcpEnv",
                "+        Method getClassOutputDirectory = intp.getClass().getMethod(\"getClassOutputDirectory\");",
                "+        File classOutputDirectory = (File) getClassOutputDirectory.invoke(intp);",
                "+        replClassOutputDirectory = classOutputDirectory.getAbsolutePath();",
                "+      } catch (NoSuchMethodException | SecurityException | IllegalAccessException",
                "+          | IllegalArgumentException | InvocationTargetException e) {",
                "+        // continue",
                "+      }",
                "+    }",
                "+",
                "+    if (Utils.isScala2_11()) {",
                "+      classServer = createHttpServer(outputDir);",
                "+      Utils.invokeMethod(classServer, \"start\");",
                "+      classServerUri = (String) Utils.invokeMethod(classServer, \"uri\");",
                "+    }",
                "+",
                "+    if (classServerUri != null) {",
                "+      conf.set(\"spark.repl.class.uri\", classServerUri);",
                "+    }",
                "+",
                "+    if (replClassOutputDirectory != null) {",
                "+      conf.set(\"spark.repl.class.outputDir\", replClassOutputDirectory);",
                "+    }",
                "+",
                "+    if (jars.length > 0) {",
                "+      conf.setJars(jars);",
                "+    }",
                "+",
                "+    if (execUri != null) {",
                "+      conf.set(\"spark.executor.uri\", execUri);",
                "+    }",
                "+    conf.set(\"spark.scheduler.mode\", \"FAIR\");",
                "+",
                "+    Properties intpProperty = getProperties();",
                "+    for (Object k : intpProperty.keySet()) {",
                "+      String key = (String) k;",
                "+      String val = toString(intpProperty.get(key));",
                "+      if (!val.trim().isEmpty()) {",
                "+        if (key.startsWith(\"spark.\")) {",
                "+          logger.debug(String.format(\"SparkConf: key = [%s], value = [%s]\", key, val));",
                "+          conf.set(key, val);",
                "+        }",
                "+",
                "+        if (key.startsWith(\"zeppelin.spark.\")) {",
                "+          String sparkPropertyKey = key.substring(\"zeppelin.spark.\".length());",
                "+          logger.debug(String.format(\"SparkConf: key = [%s], value = [%s]\", sparkPropertyKey, val));",
                "+          conf.set(sparkPropertyKey, val);",
                "+        }",
                "+      }",
                "+    }",
                "+    SparkContext sparkContext = new SparkContext(conf);",
                "+    return sparkContext;",
                "+  }",
                "+",
                "+  static final String toString(Object o) {",
                "+    return (o instanceof String) ? (String) o : \"\";",
                "+  }",
                "+",
                "+  public static boolean useSparkSubmit() {",
                "+    return null != System.getenv(\"SPARK_SUBMIT\");",
                "+  }",
                "+",
                "+  public boolean printREPLOutput() {",
                "+    return java.lang.Boolean.parseBoolean(getProperty(\"zeppelin.spark.printREPLOutput\"));",
                "+  }",
                "+",
                "+  @Override",
                "+  public void open() throws InterpreterException {",
                "+    this.enableSupportedVersionCheck = java.lang.Boolean.parseBoolean(",
                "+        getProperty(\"zeppelin.spark.enableSupportedVersionCheck\", \"true\"));",
                "+",
                "+    // set properties and do login before creating any spark stuff for secured cluster",
                "+    if (isYarnMode()) {",
                "+      System.setProperty(\"SPARK_YARN_MODE\", \"true\");",
                "+    }",
                "+    if (getProperties().containsKey(\"spark.yarn.keytab\") &&",
                "+        getProperties().containsKey(\"spark.yarn.principal\")) {",
                "+      try {",
                "+        String keytab = getProperties().getProperty(\"spark.yarn.keytab\");",
                "+        String principal = getProperties().getProperty(\"spark.yarn.principal\");",
                "+        UserGroupInformation.loginUserFromKeytab(principal, keytab);",
                "+      } catch (IOException e) {",
                "+        throw new RuntimeException(\"Can not pass kerberos authentication\", e);",
                "+      }",
                "+    }",
                "+",
                "+    conf = new SparkConf();",
                "+    URL[] urls = getClassloaderUrls();",
                "+",
                "+    // Very nice discussion about how scala compiler handle classpath",
                "+    // https://groups.google.com/forum/#!topic/scala-user/MlVwo2xCCI0",
                "+",
                "+    /*",
                "+     * > val env = new nsc.Settings(errLogger) > env.usejavacp.value = true > val p = new",
                "+     * Interpreter(env) > p.setContextClassLoader > Alternatively you can set the class path through",
                "+     * nsc.Settings.classpath.",
                "+     *",
                "+     * >> val settings = new Settings() >> settings.usejavacp.value = true >>",
                "+     * settings.classpath.value += File.pathSeparator + >> System.getProperty(\"java.class.path\") >>",
                "+     * val in = new Interpreter(settings) { >> override protected def parentClassLoader =",
                "+     * getClass.getClassLoader >> } >> in.setContextClassLoader()",
                "+     */",
                "+    Settings settings = new Settings();",
                "+",
                "+    // process args",
                "+    String args = getProperty(\"args\");",
                "+    if (args == null) {",
                "+      args = \"\";",
                "+    }",
                "+",
                "+    String[] argsArray = args.split(\" \");",
                "+    LinkedList<String> argList = new LinkedList<>();",
                "+    for (String arg : argsArray) {",
                "+      argList.add(arg);",
                "+    }",
                "+",
                "+    DepInterpreter depInterpreter = getDepInterpreter();",
                "+    String depInterpreterClasspath = \"\";",
                "+    if (depInterpreter != null) {",
                "+      SparkDependencyContext depc = depInterpreter.getDependencyContext();",
                "+      if (depc != null) {",
                "+        List<File> files = depc.getFiles();",
                "+        if (files != null) {",
                "+          for (File f : files) {",
                "+            if (depInterpreterClasspath.length() > 0) {",
                "+              depInterpreterClasspath += File.pathSeparator;",
                "+            }",
                "+            depInterpreterClasspath += f.getAbsolutePath();",
                "+          }",
                "+        }",
                "+      }",
                "+    }",
                "+",
                "+",
                "+    if (Utils.isScala2_10()) {",
                "+      scala.collection.immutable.List<String> list =",
                "+          JavaConversions.asScalaBuffer(argList).toList();",
                "+",
                "+      Object sparkCommandLine = Utils.instantiateClass(",
                "+          \"org.apache.spark.repl.SparkCommandLine\",",
                "+          new Class[]{ scala.collection.immutable.List.class },",
                "+          new Object[]{ list });",
                "+",
                "+      settings = (Settings) Utils.invokeMethod(sparkCommandLine, \"settings\");",
                "+    } else {",
                "+      String sparkReplClassDir = getProperty(\"spark.repl.classdir\");",
                "+      if (sparkReplClassDir == null) {",
                "+        sparkReplClassDir = System.getProperty(\"spark.repl.classdir\");",
                "+      }",
                "+      if (sparkReplClassDir == null) {",
                "+        sparkReplClassDir = System.getProperty(\"java.io.tmpdir\");",
                "+      }",
                "+",
                "+      synchronized (sharedInterpreterLock) {",
                "+        if (outputDir == null) {",
                "+          outputDir = createTempDir(sparkReplClassDir);",
                "+        }",
                "+      }",
                "+      argList.add(\"-Yrepl-class-based\");",
                "+      argList.add(\"-Yrepl-outdir\");",
                "+      argList.add(outputDir.getAbsolutePath());",
                "+",
                "+      String classpath = \"\";",
                "+      if (conf.contains(\"spark.jars\")) {",
                "+        classpath = StringUtils.join(conf.get(\"spark.jars\").split(\",\"), File.separator);",
                "+      }",
                "+",
                "+      if (!depInterpreterClasspath.isEmpty()) {",
                "+        if (!classpath.isEmpty()) {",
                "+          classpath += File.separator;",
                "+        }",
                "+        classpath += depInterpreterClasspath;",
                "+      }",
                "+",
                "+      if (!classpath.isEmpty()) {",
                "+        argList.add(\"-classpath\");",
                "+        argList.add(classpath);",
                "+      }",
                "+",
                "+      scala.collection.immutable.List<String> list =",
                "+          JavaConversions.asScalaBuffer(argList).toList();",
                "+",
                "+      settings.processArguments(list, true);",
                "+    }",
                "+",
                "+    // set classpath for scala compiler",
                "+    PathSetting pathSettings = settings.classpath();",
                "+    String classpath = \"\";",
                "+",
                "+    List<File> paths = currentClassPath();",
                "+    for (File f : paths) {",
                "+      if (classpath.length() > 0) {",
                "+        classpath += File.pathSeparator;",
                "+      }",
                "+      classpath += f.getAbsolutePath();",
                "+    }",
                "+",
                "+    if (urls != null) {",
                "+      for (URL u : urls) {",
                "+        if (classpath.length() > 0) {",
                "+          classpath += File.pathSeparator;",
                "+        }",
                "+        classpath += u.getFile();",
                "+      }",
                "+    }",
                "+",
                "+    // add dependency from DepInterpreter",
                "+    if (classpath.length() > 0) {",
                "+      classpath += File.pathSeparator;",
                "+    }",
                "+    classpath += depInterpreterClasspath;",
                "+",
                "+    // add dependency from local repo",
                "+    String localRepo = getProperty(\"zeppelin.interpreter.localRepo\");",
                "+    if (localRepo != null) {",
                "+      File localRepoDir = new File(localRepo);",
                "+      if (localRepoDir.exists()) {",
                "+        File[] files = localRepoDir.listFiles();",
                "+        if (files != null) {",
                "+          for (File f : files) {",
                "+            if (classpath.length() > 0) {",
                "+              classpath += File.pathSeparator;",
                "+            }",
                "+            classpath += f.getAbsolutePath();",
                "+          }",
                "+        }",
                "+      }",
                "+    }",
                "+",
                "+    pathSettings.v_$eq(classpath);",
                "+    settings.scala$tools$nsc$settings$ScalaSettings$_setter_$classpath_$eq(pathSettings);",
                "+",
                "+    // set classloader for scala compiler",
                "+    settings.explicitParentLoader_$eq(new Some<>(Thread.currentThread()",
                "+        .getContextClassLoader()));",
                "+    BooleanSetting b = (BooleanSetting) settings.usejavacp();",
                "+    b.v_$eq(true);",
                "+    settings.scala$tools$nsc$settings$StandardScalaSettings$_setter_$usejavacp_$eq(b);",
                "+",
                "+    /* Required for scoped mode.",
                "+     * In scoped mode multiple scala compiler (repl) generates class in the same directory.",
                "+     * Class names is not randomly generated and look like '$line12.$read$$iw$$iw'",
                "+     * Therefore it's possible to generated class conflict(overwrite) with other repl generated",
                "+     * class.",
                "+     *",
                "+     * To prevent generated class name conflict,",
                "+     * change prefix of generated class name from each scala compiler (repl) instance.",
                "+     *",
                "+     * In Spark 2.x, REPL generated wrapper class name should compatible with the pattern",
                "+     * ^(\\$line(?:\\d+)\\.\\$read)(?:\\$\\$iw)+$",
                "+     *",
                "+     * As hashCode() can return a negative integer value and the minus character '-' is invalid",
                "+     * in a package name we change it to a numeric value '0' which still conforms to the regexp.",
                "+     *",
                "+     */",
                "+    System.setProperty(\"scala.repl.name.line\", (\"$line\" + this.hashCode()).replace('-', '0'));",
                "+",
                "+    // To prevent 'File name too long' error on some file system.",
                "+    MutableSettings.IntSetting numClassFileSetting = settings.maxClassfileName();",
                "+    numClassFileSetting.v_$eq(128);",
                "+    settings.scala$tools$nsc$settings$ScalaSettings$_setter_$maxClassfileName_$eq(",
                "+        numClassFileSetting);",
                "+",
                "+    synchronized (sharedInterpreterLock) {",
                "+      /* create scala repl */",
                "+      if (printREPLOutput()) {",
                "+        this.interpreter = new SparkILoop((java.io.BufferedReader) null, new PrintWriter(out));",
                "+      } else {",
                "+        this.interpreter = new SparkILoop((java.io.BufferedReader) null,",
                "+            new PrintWriter(Console.out(), false));",
                "+      }",
                "+",
                "+      interpreter.settings_$eq(settings);",
                "+",
                "+      interpreter.createInterpreter();",
                "+",
                "+      intp = Utils.invokeMethod(interpreter, \"intp\");",
                "+      Utils.invokeMethod(intp, \"setContextClassLoader\");",
                "+      Utils.invokeMethod(intp, \"initializeSynchronous\");",
                "+",
                "+      if (Utils.isScala2_10()) {",
                "+        if (classOutputDir == null) {",
                "+          classOutputDir = settings.outputDirs().getSingleOutput().get();",
                "+        } else {",
                "+          // change SparkIMain class output dir",
                "+          settings.outputDirs().setSingleOutput(classOutputDir);",
                "+          ClassLoader cl = (ClassLoader) Utils.invokeMethod(intp, \"classLoader\");",
                "+          try {",
                "+            Field rootField = cl.getClass().getSuperclass().getDeclaredField(\"root\");",
                "+            rootField.setAccessible(true);",
                "+            rootField.set(cl, classOutputDir);",
                "+          } catch (NoSuchFieldException | IllegalAccessException e) {",
                "+            logger.error(e.getMessage(), e);",
                "+          }",
                "+        }",
                "+      }",
                "+",
                "+      if (Utils.findClass(\"org.apache.spark.repl.SparkJLineCompletion\", true) != null) {",
                "+        completer = Utils.instantiateClass(",
                "+            \"org.apache.spark.repl.SparkJLineCompletion\",",
                "+            new Class[]{Utils.findClass(\"org.apache.spark.repl.SparkIMain\")},",
                "+            new Object[]{intp});",
                "+      } else if (Utils.findClass(",
                "+          \"scala.tools.nsc.interpreter.PresentationCompilerCompleter\", true) != null) {",
                "+        completer = Utils.instantiateClass(",
                "+            \"scala.tools.nsc.interpreter.PresentationCompilerCompleter\",",
                "+            new Class[]{ IMain.class },",
                "+            new Object[]{ intp });",
                "+      } else if (Utils.findClass(",
                "+          \"scala.tools.nsc.interpreter.JLineCompletion\", true) != null) {",
                "+        completer = Utils.instantiateClass(",
                "+            \"scala.tools.nsc.interpreter.JLineCompletion\",",
                "+            new Class[]{ IMain.class },",
                "+            new Object[]{ intp });",
                "+      }",
                "+",
                "+      if (Utils.isSpark2()) {",
                "+        sparkSession = getSparkSession();",
                "+      }",
                "+      sc = getSparkContext();",
                "+      if (sc.getPoolForName(\"fair\").isEmpty()) {",
                "+        Value schedulingMode = org.apache.spark.scheduler.SchedulingMode.FAIR();",
                "+        int minimumShare = 0;",
                "+        int weight = 1;",
                "+        Pool pool = new Pool(\"fair\", schedulingMode, minimumShare, weight);",
                "+        sc.taskScheduler().rootPool().addSchedulable(pool);",
                "+      }",
                "+",
                "+      sparkVersion = SparkVersion.fromVersionString(sc.version());",
                "+",
                "+      sqlc = getSQLContext();",
                "+",
                "+      dep = getDependencyResolver();",
                "+",
                "+      hooks = getInterpreterGroup().getInterpreterHookRegistry();",
                "+",
                "+      z = new SparkZeppelinContext(sc, hooks,",
                "+          Integer.parseInt(getProperty(\"zeppelin.spark.maxResult\")));",
                "+",
                "+      interpret(\"@transient val _binder = new java.util.HashMap[String, Object]()\");",
                "+      Map<String, Object> binder;",
                "+      if (Utils.isScala2_10()) {",
                "+        binder = (Map<String, Object>) getValue(\"_binder\");",
                "+      } else {",
                "+        binder = (Map<String, Object>) getLastObject();",
                "+      }",
                "+      binder.put(\"sc\", sc);",
                "+      binder.put(\"sqlc\", sqlc);",
                "+      binder.put(\"z\", z);",
                "+",
                "+      if (Utils.isSpark2()) {",
                "+        binder.put(\"spark\", sparkSession);",
                "+      }",
                "+",
                "+      interpret(\"@transient val z = \"",
                "+          + \"_binder.get(\\\"z\\\").asInstanceOf[org.apache.zeppelin.spark.SparkZeppelinContext]\");",
                "+      interpret(\"@transient val sc = \"",
                "+          + \"_binder.get(\\\"sc\\\").asInstanceOf[org.apache.spark.SparkContext]\");",
                "+      interpret(\"@transient val sqlc = \"",
                "+          + \"_binder.get(\\\"sqlc\\\").asInstanceOf[org.apache.spark.sql.SQLContext]\");",
                "+      interpret(\"@transient val sqlContext = \"",
                "+          + \"_binder.get(\\\"sqlc\\\").asInstanceOf[org.apache.spark.sql.SQLContext]\");",
                "+",
                "+      if (Utils.isSpark2()) {",
                "+        interpret(\"@transient val spark = \"",
                "+            + \"_binder.get(\\\"spark\\\").asInstanceOf[org.apache.spark.sql.SparkSession]\");",
                "+      }",
                "+",
                "+      interpret(\"import org.apache.spark.SparkContext._\");",
                "+",
                "+      if (importImplicit()) {",
                "+        if (Utils.isSpark2()) {",
                "+          interpret(\"import spark.implicits._\");",
                "+          interpret(\"import spark.sql\");",
                "+          interpret(\"import org.apache.spark.sql.functions._\");",
                "+        } else {",
                "+          if (sparkVersion.oldSqlContextImplicits()) {",
                "+            interpret(\"import sqlContext._\");",
                "+          } else {",
                "+            interpret(\"import sqlContext.implicits._\");",
                "+            interpret(\"import sqlContext.sql\");",
                "+            interpret(\"import org.apache.spark.sql.functions._\");",
                "+          }",
                "+        }",
                "+      }",
                "+    }",
                "+",
                "+    /* Temporary disabling DisplayUtils. see https://issues.apache.org/jira/browse/ZEPPELIN-127",
                "+     *",
                "+    // Utility functions for display",
                "+    intp.interpret(\"import org.apache.zeppelin.spark.utils.DisplayUtils._\");",
                "+",
                "+    // Scala implicit value for spark.maxResult",
                "+    intp.interpret(\"import org.apache.zeppelin.spark.utils.SparkMaxResult\");",
                "+    intp.interpret(\"implicit val sparkMaxResult = new SparkMaxResult(\" +",
                "+            Integer.parseInt(getProperty(\"zeppelin.spark.maxResult\")) + \")\");",
                "+     */",
                "+",
                "+    if (Utils.isScala2_10()) {",
                "+      try {",
                "+        if (sparkVersion.oldLoadFilesMethodName()) {",
                "+          Method loadFiles = this.interpreter.getClass().getMethod(\"loadFiles\", Settings.class);",
                "+          loadFiles.invoke(this.interpreter, settings);",
                "+        } else {",
                "+          Method loadFiles = this.interpreter.getClass().getMethod(",
                "+              \"org$apache$spark$repl$SparkILoop$$loadFiles\", Settings.class);",
                "+          loadFiles.invoke(this.interpreter, settings);",
                "+        }",
                "+      } catch (NoSuchMethodException | SecurityException | IllegalAccessException",
                "+          | IllegalArgumentException | InvocationTargetException e) {",
                "+        throw new InterpreterException(e);",
                "+      }",
                "+    }",
                "+",
                "+    // add jar from DepInterpreter",
                "+    if (depInterpreter != null) {",
                "+      SparkDependencyContext depc = depInterpreter.getDependencyContext();",
                "+      if (depc != null) {",
                "+        List<File> files = depc.getFilesDist();",
                "+        if (files != null) {",
                "+          for (File f : files) {",
                "+            if (f.getName().toLowerCase().endsWith(\".jar\")) {",
                "+              sc.addJar(f.getAbsolutePath());",
                "+              logger.info(\"sc.addJar(\" + f.getAbsolutePath() + \")\");",
                "+            } else {",
                "+              sc.addFile(f.getAbsolutePath());",
                "+              logger.info(\"sc.addFile(\" + f.getAbsolutePath() + \")\");",
                "+            }",
                "+          }",
                "+        }",
                "+      }",
                "+    }",
                "+",
                "+    // add jar from local repo",
                "+    if (localRepo != null) {",
                "+      File localRepoDir = new File(localRepo);",
                "+      if (localRepoDir.exists()) {",
                "+        File[] files = localRepoDir.listFiles();",
                "+        if (files != null) {",
                "+          for (File f : files) {",
                "+            if (f.getName().toLowerCase().endsWith(\".jar\")) {",
                "+              sc.addJar(f.getAbsolutePath());",
                "+              logger.info(\"sc.addJar(\" + f.getAbsolutePath() + \")\");",
                "+            } else {",
                "+              sc.addFile(f.getAbsolutePath());",
                "+              logger.info(\"sc.addFile(\" + f.getAbsolutePath() + \")\");",
                "+            }",
                "+          }",
                "+        }",
                "+      }",
                "+    }",
                "+",
                "+    numReferenceOfSparkContext.incrementAndGet();",
                "+  }",
                "+",
                "+  public String getSparkUIUrl() {",
                "+    if (sparkUrl != null) {",
                "+      return sparkUrl;",
                "+    }",
                "+",
                "+    String sparkUrlProp = getProperty(\"zeppelin.spark.uiWebUrl\", \"\");",
                "+    if (!StringUtils.isBlank(sparkUrlProp)) {",
                "+      return sparkUrlProp;",
                "+    }",
                "+",
                "+    if (sparkVersion.newerThanEquals(SparkVersion.SPARK_2_0_0)) {",
                "+      Option<String> uiWebUrlOption = (Option<String>) Utils.invokeMethod(sc, \"uiWebUrl\");",
                "+      if (uiWebUrlOption.isDefined()) {",
                "+        return uiWebUrlOption.get();",
                "+      }",
                "+    } else {",
                "+      Option<SparkUI> sparkUIOption = (Option<SparkUI>) Utils.invokeMethod(sc, \"ui\");",
                "+      if (sparkUIOption.isDefined()) {",
                "+        return (String) Utils.invokeMethod(sparkUIOption.get(), \"appUIAddress\");",
                "+      }",
                "+    }",
                "+    return null;",
                "+  }",
                "+",
                "+  private Results.Result interpret(String line) {",
                "+    out.ignoreLeadingNewLinesFromScalaReporter();",
                "+    return (Results.Result) Utils.invokeMethod(",
                "+        intp,",
                "+        \"interpret\",",
                "+        new Class[] {String.class},",
                "+        new Object[] {line});",
                "+  }",
                "+",
                "+  public void populateSparkWebUrl(InterpreterContext ctx) {",
                "+    sparkUrl = getSparkUIUrl();",
                "+    Map<String, String> infos = new java.util.HashMap<>();",
                "+    infos.put(\"url\", sparkUrl);",
                "+    String uiEnabledProp = getProperty(\"spark.ui.enabled\", \"true\");",
                "+    java.lang.Boolean uiEnabled = java.lang.Boolean.parseBoolean(",
                "+        uiEnabledProp.trim());",
                "+    if (!uiEnabled) {",
                "+      infos.put(\"message\", \"Spark UI disabled\");",
                "+    } else {",
                "+      if (StringUtils.isNotBlank(sparkUrl)) {",
                "+        infos.put(\"message\", \"Spark UI enabled\");",
                "+      } else {",
                "+        infos.put(\"message\", \"No spark url defined\");",
                "+      }",
                "+    }",
                "+    if (ctx != null && ctx.getClient() != null) {",
                "+      logger.info(\"Sending metadata to Zeppelin server: {}\", infos.toString());",
                "+      getZeppelinContext().setEventClient(ctx.getClient());",
                "+      ctx.getClient().onMetaInfosReceived(infos);",
                "+    }",
                "+  }",
                "+",
                "+  private List<File> currentClassPath() {",
                "+    List<File> paths = classPath(Thread.currentThread().getContextClassLoader());",
                "+    String[] cps = System.getProperty(\"java.class.path\").split(File.pathSeparator);",
                "+    if (cps != null) {",
                "+      for (String cp : cps) {",
                "+        paths.add(new File(cp));",
                "+      }",
                "+    }",
                "+    return paths;",
                "+  }",
                "+",
                "+  private List<File> classPath(ClassLoader cl) {",
                "+    List<File> paths = new LinkedList<>();",
                "+    if (cl == null) {",
                "+      return paths;",
                "+    }",
                "+",
                "+    if (cl instanceof URLClassLoader) {",
                "+      URLClassLoader ucl = (URLClassLoader) cl;",
                "+      URL[] urls = ucl.getURLs();",
                "+      if (urls != null) {",
                "+        for (URL url : urls) {",
                "+          paths.add(new File(url.getFile()));",
                "+        }",
                "+      }",
                "+    }",
                "+    return paths;",
                "+  }",
                "+",
                "+  @Override",
                "+  public List<InterpreterCompletion> completion(String buf, int cursor,",
                "+                                                InterpreterContext interpreterContext) {",
                "+    if (completer == null) {",
                "+      logger.warn(\"Can't find completer\");",
                "+      return new LinkedList<>();",
                "+    }",
                "+",
                "+    if (buf.length() < cursor) {",
                "+      cursor = buf.length();",
                "+    }",
                "+",
                "+    ScalaCompleter c = (ScalaCompleter) Utils.invokeMethod(completer, \"completer\");",
                "+",
                "+    if (Utils.isScala2_10() || !Utils.isCompilerAboveScala2_11_7()) {",
                "+      String singleToken = getCompletionTargetString(buf, cursor);",
                "+      Candidates ret = c.complete(singleToken, singleToken.length());",
                "+",
                "+      List<String> candidates = WrapAsJava$.MODULE$.seqAsJavaList(ret.candidates());",
                "+      List<InterpreterCompletion> completions = new LinkedList<>();",
                "+",
                "+      for (String candidate : candidates) {",
                "+        completions.add(new InterpreterCompletion(candidate, candidate, StringUtils.EMPTY));",
                "+      }",
                "+",
                "+      return completions;",
                "+    } else {",
                "+      Candidates ret = c.complete(buf, cursor);",
                "+",
                "+      List<String> candidates = WrapAsJava$.MODULE$.seqAsJavaList(ret.candidates());",
                "+      List<InterpreterCompletion> completions = new LinkedList<>();",
                "+",
                "+      for (String candidate : candidates) {",
                "+        completions.add(new InterpreterCompletion(candidate, candidate, StringUtils.EMPTY));",
                "+      }",
                "+",
                "+      return completions;",
                "+    }",
                "+  }",
                "+",
                "+  private String getCompletionTargetString(String text, int cursor) {",
                "+    String[] completionSeqCharaters = {\" \", \"\\n\", \"\\t\"};",
                "+    int completionEndPosition = cursor;",
                "+    int completionStartPosition = cursor;",
                "+    int indexOfReverseSeqPostion = cursor;",
                "+",
                "+    String resultCompletionText = \"\";",
                "+    String completionScriptText = \"\";",
                "+    try {",
                "+      completionScriptText = text.substring(0, cursor);",
                "+    }",
                "+    catch (Exception e) {",
                "+      logger.error(e.toString());",
                "+      return null;",
                "+    }",
                "+    completionEndPosition = completionScriptText.length();",
                "+",
                "+    String tempReverseCompletionText = new StringBuilder(completionScriptText).reverse().toString();",
                "+",
                "+    for (String seqCharacter : completionSeqCharaters) {",
                "+      indexOfReverseSeqPostion = tempReverseCompletionText.indexOf(seqCharacter);",
                "+",
                "+      if (indexOfReverseSeqPostion < completionStartPosition && indexOfReverseSeqPostion > 0) {",
                "+        completionStartPosition = indexOfReverseSeqPostion;",
                "+      }",
                "+",
                "+    }",
                "+",
                "+    if (completionStartPosition == completionEndPosition) {",
                "+      completionStartPosition = 0;",
                "+    }",
                "+    else",
                "+    {",
                "+      completionStartPosition = completionEndPosition - completionStartPosition;",
                "+    }",
                "+    resultCompletionText = completionScriptText.substring(",
                "+        completionStartPosition , completionEndPosition);",
                "+",
                "+    return resultCompletionText;",
                "+  }",
                "+",
                "+  /*",
                "+   * this method doesn't work in scala 2.11",
                "+   * Somehow intp.valueOfTerm returns scala.None always with -Yrepl-class-based option",
                "+   */",
                "+  public Object getValue(String name) {",
                "+    Object ret = Utils.invokeMethod(",
                "+        intp, \"valueOfTerm\", new Class[]{String.class}, new Object[]{name});",
                "+",
                "+    if (ret instanceof None || ret instanceof scala.None$) {",
                "+      return null;",
                "+    } else if (ret instanceof Some) {",
                "+      return ((Some) ret).get();",
                "+    } else {",
                "+      return ret;",
                "+    }",
                "+  }",
                "+",
                "+  public Object getLastObject() {",
                "+    IMain.Request r = (IMain.Request) Utils.invokeMethod(intp, \"lastRequest\");",
                "+    if (r == null || r.lineRep() == null) {",
                "+      return null;",
                "+    }",
                "+    Object obj = r.lineRep().call(\"$result\",",
                "+        JavaConversions.asScalaBuffer(new LinkedList<>()));",
                "+    return obj;",
                "+  }",
                "+",
                "+  public boolean isUnsupportedSparkVersion() {",
                "+    return enableSupportedVersionCheck  && sparkVersion.isUnsupportedVersion();",
                "+  }",
                "+",
                "+  /**",
                "+   * Interpret a single line.",
                "+   */",
                "+  @Override",
                "+  public InterpreterResult interpret(String line, InterpreterContext context) {",
                "+    if (isUnsupportedSparkVersion()) {",
                "+      return new InterpreterResult(Code.ERROR, \"Spark \" + sparkVersion.toString()",
                "+          + \" is not supported\");",
                "+    }",
                "+    populateSparkWebUrl(context);",
                "+    z.setInterpreterContext(context);",
                "+    if (line == null || line.trim().length() == 0) {",
                "+      return new InterpreterResult(Code.SUCCESS);",
                "+    }",
                "+    return interpret(line.split(\"\\n\"), context);",
                "+  }",
                "+",
                "+  public InterpreterResult interpret(String[] lines, InterpreterContext context) {",
                "+    synchronized (this) {",
                "+      z.setGui(context.getGui());",
                "+      z.setNoteGui(context.getNoteGui());",
                "+      String jobDesc = \"Started by: \" + Utils.getUserName(context.getAuthenticationInfo());",
                "+      sc.setJobGroup(Utils.buildJobGroupId(context), jobDesc, false);",
                "+      InterpreterResult r = interpretInput(lines, context);",
                "+      sc.clearJobGroup();",
                "+      return r;",
                "+    }",
                "+  }",
                "+",
                "+  public InterpreterResult interpretInput(String[] lines, InterpreterContext context) {",
                "+    SparkEnv.set(env);",
                "+",
                "+    String[] linesToRun = new String[lines.length];",
                "+    for (int i = 0; i < lines.length; i++) {",
                "+      linesToRun[i] = lines[i];",
                "+    }",
                "+",
                "+    Console.setOut(context.out);",
                "+    out.setInterpreterOutput(context.out);",
                "+    context.out.clear();",
                "+    Code r = null;",
                "+    String incomplete = \"\";",
                "+    boolean inComment = false;",
                "+",
                "+    for (int l = 0; l < linesToRun.length; l++) {",
                "+      String s = linesToRun[l];",
                "+      // check if next line starts with \".\" (but not \"..\" or \"./\") it is treated as an invocation",
                "+      if (l + 1 < linesToRun.length) {",
                "+        String nextLine = linesToRun[l + 1].trim();",
                "+        boolean continuation = false;",
                "+        if (nextLine.isEmpty()",
                "+            || nextLine.startsWith(\"//\")         // skip empty line or comment",
                "+            || nextLine.startsWith(\"}\")",
                "+            || nextLine.startsWith(\"object\")) {  // include \"} object\" for Scala companion object",
                "+          continuation = true;",
                "+        } else if (!inComment && nextLine.startsWith(\"/*\")) {",
                "+          inComment = true;",
                "+          continuation = true;",
                "+        } else if (inComment && nextLine.lastIndexOf(\"*/\") >= 0) {",
                "+          inComment = false;",
                "+          continuation = true;",
                "+        } else if (nextLine.length() > 1",
                "+            && nextLine.charAt(0) == '.'",
                "+            && nextLine.charAt(1) != '.'     // \"..\"",
                "+            && nextLine.charAt(1) != '/') {  // \"./\"",
                "+          continuation = true;",
                "+        } else if (inComment) {",
                "+          continuation = true;",
                "+        }",
                "+        if (continuation) {",
                "+          incomplete += s + \"\\n\";",
                "+          continue;",
                "+        }",
                "+      }",
                "+",
                "+      scala.tools.nsc.interpreter.Results.Result res = null;",
                "+      try {",
                "+        res = interpret(incomplete + s);",
                "+      } catch (Exception e) {",
                "+        sc.clearJobGroup();",
                "+        out.setInterpreterOutput(null);",
                "+        logger.info(\"Interpreter exception\", e);",
                "+        return new InterpreterResult(Code.ERROR, InterpreterUtils.getMostRelevantMessage(e));",
                "+      }",
                "+",
                "+      r = getResultCode(res);",
                "+",
                "+      if (r == Code.ERROR) {",
                "+        sc.clearJobGroup();",
                "+        out.setInterpreterOutput(null);",
                "+        return new InterpreterResult(r, \"\");",
                "+      } else if (r == Code.INCOMPLETE) {",
                "+        incomplete += s + \"\\n\";",
                "+      } else {",
                "+        incomplete = \"\";",
                "+      }",
                "+    }",
                "+",
                "+    // make sure code does not finish with comment",
                "+    if (r == Code.INCOMPLETE) {",
                "+      scala.tools.nsc.interpreter.Results.Result res = null;",
                "+      res = interpret(incomplete + \"\\nprint(\\\"\\\")\");",
                "+      r = getResultCode(res);",
                "+    }",
                "+",
                "+    if (r == Code.INCOMPLETE) {",
                "+      sc.clearJobGroup();",
                "+      out.setInterpreterOutput(null);",
                "+      return new InterpreterResult(r, \"Incomplete expression\");",
                "+    } else {",
                "+      sc.clearJobGroup();",
                "+      putLatestVarInResourcePool(context);",
                "+      out.setInterpreterOutput(null);",
                "+      return new InterpreterResult(Code.SUCCESS);",
                "+    }",
                "+  }",
                "+",
                "+  private void putLatestVarInResourcePool(InterpreterContext context) {",
                "+    String varName = (String) Utils.invokeMethod(intp, \"mostRecentVar\");",
                "+    if (varName == null || varName.isEmpty()) {",
                "+      return;",
                "+    }",
                "+    Object lastObj = null;",
                "+    try {",
                "+      if (Utils.isScala2_10()) {",
                "+        lastObj = getValue(varName);",
                "+      } else {",
                "+        lastObj = getLastObject();",
                "+      }",
                "+    } catch (NullPointerException e) {",
                "+      // Some case, scala.tools.nsc.interpreter.IMain$ReadEvalPrint.call throws an NPE",
                "+      logger.error(e.getMessage(), e);",
                "+    }",
                "+",
                "+    if (lastObj != null) {",
                "+      ResourcePool resourcePool = context.getResourcePool();",
                "+      resourcePool.put(context.getNoteId(), context.getParagraphId(),",
                "+          WellKnownResourceName.ZeppelinReplResult.toString(), lastObj);",
                "+    }",
                "+  };",
                "+",
                "+",
                "+  @Override",
                "+  public void cancel(InterpreterContext context) {",
                "+    sc.cancelJobGroup(Utils.buildJobGroupId(context));",
                "+  }",
                "+",
                "+  @Override",
                "+  public int getProgress(InterpreterContext context) {",
                "+    String jobGroup = Utils.buildJobGroupId(context);",
                "+    int completedTasks = 0;",
                "+    int totalTasks = 0;",
                "+",
                "+    DAGScheduler scheduler = sc.dagScheduler();",
                "+    if (scheduler == null) {",
                "+      return 0;",
                "+    }",
                "+    HashSet<ActiveJob> jobs = scheduler.activeJobs();",
                "+    if (jobs == null || jobs.size() == 0) {",
                "+      return 0;",
                "+    }",
                "+    Iterator<ActiveJob> it = jobs.iterator();",
                "+    while (it.hasNext()) {",
                "+      ActiveJob job = it.next();",
                "+      String g = (String) job.properties().get(\"spark.jobGroup.id\");",
                "+      if (jobGroup.equals(g)) {",
                "+        int[] progressInfo = null;",
                "+        try {",
                "+          Object finalStage = job.getClass().getMethod(\"finalStage\").invoke(job);",
                "+          if (sparkVersion.getProgress1_0()) {",
                "+            progressInfo = getProgressFromStage_1_0x(sparkListener, finalStage);",
                "+          } else {",
                "+            progressInfo = getProgressFromStage_1_1x(sparkListener, finalStage);",
                "+          }",
                "+        } catch (IllegalAccessException | IllegalArgumentException",
                "+            | InvocationTargetException | NoSuchMethodException",
                "+            | SecurityException e) {",
                "+          logger.error(\"Can't get progress info\", e);",
                "+          return 0;",
                "+        }",
                "+        totalTasks += progressInfo[0];",
                "+        completedTasks += progressInfo[1];",
                "+      }",
                "+    }",
                "+",
                "+    if (totalTasks == 0) {",
                "+      return 0;",
                "+    }",
                "+    return completedTasks * 100 / totalTasks;",
                "+  }",
                "+",
                "+  private int[] getProgressFromStage_1_0x(JobProgressListener sparkListener, Object stage)",
                "+      throws IllegalAccessException, IllegalArgumentException,",
                "+      InvocationTargetException, NoSuchMethodException, SecurityException {",
                "+    int numTasks = (int) stage.getClass().getMethod(\"numTasks\").invoke(stage);",
                "+    int completedTasks = 0;",
                "+",
                "+    int id = (int) stage.getClass().getMethod(\"id\").invoke(stage);",
                "+",
                "+    Object completedTaskInfo = null;",
                "+",
                "+    completedTaskInfo = JavaConversions.mapAsJavaMap(",
                "+        (HashMap<Object, Object>) sparkListener.getClass()",
                "+            .getMethod(\"stageIdToTasksComplete\").invoke(sparkListener)).get(id);",
                "+",
                "+    if (completedTaskInfo != null) {",
                "+      completedTasks += (int) completedTaskInfo;",
                "+    }",
                "+    List<Object> parents = JavaConversions.seqAsJavaList((Seq<Object>) stage.getClass()",
                "+        .getMethod(\"parents\").invoke(stage));",
                "+    if (parents != null) {",
                "+      for (Object s : parents) {",
                "+        int[] p = getProgressFromStage_1_0x(sparkListener, s);",
                "+        numTasks += p[0];",
                "+        completedTasks += p[1];",
                "+      }",
                "+    }",
                "+",
                "+    return new int[] {numTasks, completedTasks};",
                "+  }",
                "+",
                "+  private int[] getProgressFromStage_1_1x(JobProgressListener sparkListener, Object stage)",
                "+      throws IllegalAccessException, IllegalArgumentException,",
                "+      InvocationTargetException, NoSuchMethodException, SecurityException {",
                "+    int numTasks = (int) stage.getClass().getMethod(\"numTasks\").invoke(stage);",
                "+    int completedTasks = 0;",
                "+    int id = (int) stage.getClass().getMethod(\"id\").invoke(stage);",
                "+",
                "+    try {",
                "+      Method stageIdToData = sparkListener.getClass().getMethod(\"stageIdToData\");",
                "+      HashMap<Tuple2<Object, Object>, Object> stageIdData =",
                "+          (HashMap<Tuple2<Object, Object>, Object>) stageIdToData.invoke(sparkListener);",
                "+      Class<?> stageUIDataClass =",
                "+          this.getClass().forName(\"org.apache.spark.ui.jobs.UIData$StageUIData\");",
                "+",
                "+      Method numCompletedTasks = stageUIDataClass.getMethod(\"numCompleteTasks\");",
                "+      Set<Tuple2<Object, Object>> keys =",
                "+          JavaConverters.setAsJavaSetConverter(stageIdData.keySet()).asJava();",
                "+      for (Tuple2<Object, Object> k : keys) {",
                "+        if (id == (int) k._1()) {",
                "+          Object uiData = stageIdData.get(k).get();",
                "+          completedTasks += (int) numCompletedTasks.invoke(uiData);",
                "+        }",
                "+      }",
                "+    } catch (Exception e) {",
                "+      logger.error(\"Error on getting progress information\", e);",
                "+    }",
                "+",
                "+    List<Object> parents = JavaConversions.seqAsJavaList((Seq<Object>) stage.getClass()",
                "+        .getMethod(\"parents\").invoke(stage));",
                "+    if (parents != null) {",
                "+      for (Object s : parents) {",
                "+        int[] p = getProgressFromStage_1_1x(sparkListener, s);",
                "+        numTasks += p[0];",
                "+        completedTasks += p[1];",
                "+      }",
                "+    }",
                "+    return new int[] {numTasks, completedTasks};",
                "+  }",
                "+",
                "+  private Code getResultCode(scala.tools.nsc.interpreter.Results.Result r) {",
                "+    if (r instanceof scala.tools.nsc.interpreter.Results.Success$) {",
                "+      return Code.SUCCESS;",
                "+    } else if (r instanceof scala.tools.nsc.interpreter.Results.Incomplete$) {",
                "+      return Code.INCOMPLETE;",
                "+    } else {",
                "+      return Code.ERROR;",
                "+    }",
                "+  }",
                "+",
                "+  @Override",
                "+  public void close() {",
                "+    logger.info(\"Close interpreter\");",
                "+",
                "+    if (numReferenceOfSparkContext.decrementAndGet() == 0) {",
                "+      if (sparkSession != null) {",
                "+        Utils.invokeMethod(sparkSession, \"stop\");",
                "+      } else if (sc != null){",
                "+        sc.stop();",
                "+      }",
                "+      sparkSession = null;",
                "+      sc = null;",
                "+      jsc = null;",
                "+      if (classServer != null) {",
                "+        Utils.invokeMethod(classServer, \"stop\");",
                "+        classServer = null;",
                "+      }",
                "+    }",
                "+",
                "+    Utils.invokeMethod(intp, \"close\");",
                "+  }",
                "+",
                "+  @Override",
                "+  public FormType getFormType() {",
                "+    return FormType.NATIVE;",
                "+  }",
                "+",
                "+  public JobProgressListener getJobProgressListener() {",
                "+    return sparkListener;",
                "+  }",
                "+",
                "+  @Override",
                "+  public Scheduler getScheduler() {",
                "+    return SchedulerFactory.singleton().createOrGetFIFOScheduler(",
                "+        OldSparkInterpreter.class.getName() + this.hashCode());",
                "+  }",
                "+",
                "+  public SparkZeppelinContext getZeppelinContext() {",
                "+    return z;",
                "+  }",
                "+",
                "+  public SparkVersion getSparkVersion() {",
                "+    return sparkVersion;",
                "+  }",
                "+",
                "+  private File createTempDir(String dir) {",
                "+    File file = null;",
                "+",
                "+    // try Utils.createTempDir()",
                "+    file = (File) Utils.invokeStaticMethod(",
                "+        Utils.findClass(\"org.apache.spark.util.Utils\"),",
                "+        \"createTempDir\",",
                "+        new Class[]{String.class, String.class},",
                "+        new Object[]{dir, \"spark\"});",
                "+",
                "+    // fallback to old method",
                "+    if (file == null) {",
                "+      file = (File) Utils.invokeStaticMethod(",
                "+          Utils.findClass(\"org.apache.spark.util.Utils\"),",
                "+          \"createTempDir\",",
                "+          new Class[]{String.class},",
                "+          new Object[]{dir});",
                "+    }",
                "+",
                "+    return file;",
                "+  }",
                "+",
                "+  private Object createHttpServer(File outputDir) {",
                "+    SparkConf conf = new SparkConf();",
                "+    try {",
                "+      // try to create HttpServer",
                "+      Constructor<?> constructor = getClass().getClassLoader()",
                "+          .loadClass(\"org.apache.spark.HttpServer\")",
                "+          .getConstructor(new Class[]{",
                "+            SparkConf.class, File.class, SecurityManager.class, int.class, String.class});",
                "+",
                "+      Object securityManager = createSecurityManager(conf);",
                "+      return constructor.newInstance(new Object[]{",
                "+        conf, outputDir, securityManager, 0, \"HTTP Server\"});",
                "+",
                "+    } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException |",
                "+        InstantiationException | InvocationTargetException e) {",
                "+      // fallback to old constructor",
                "+      Constructor<?> constructor = null;",
                "+      try {",
                "+        constructor = getClass().getClassLoader()",
                "+            .loadClass(\"org.apache.spark.HttpServer\")",
                "+            .getConstructor(new Class[]{",
                "+              File.class, SecurityManager.class, int.class, String.class});",
                "+        return constructor.newInstance(new Object[] {",
                "+          outputDir, createSecurityManager(conf), 0, \"HTTP Server\"});",
                "+      } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException |",
                "+          InstantiationException | InvocationTargetException e1) {",
                "+        logger.error(e1.getMessage(), e1);",
                "+        return null;",
                "+      }",
                "+    }",
                "+  }",
                "+",
                "+  /**",
                "+   * Constructor signature of SecurityManager changes in spark 2.1.0, so we use this method to",
                "+   * create SecurityManager properly for different versions of spark",
                "+   *",
                "+   * @param conf",
                "+   * @return",
                "+   * @throws ClassNotFoundException",
                "+   * @throws NoSuchMethodException",
                "+   * @throws IllegalAccessException",
                "+   * @throws InvocationTargetException",
                "+   * @throws InstantiationException",
                "+   */",
                "+  private Object createSecurityManager(SparkConf conf) throws ClassNotFoundException,",
                "+      NoSuchMethodException, IllegalAccessException, InvocationTargetException,",
                "+      InstantiationException {",
                "+    Object securityManager = null;",
                "+    try {",
                "+      Constructor<?> smConstructor = getClass().getClassLoader()",
                "+          .loadClass(\"org.apache.spark.SecurityManager\")",
                "+          .getConstructor(new Class[]{ SparkConf.class, scala.Option.class });",
                "+      securityManager = smConstructor.newInstance(conf, null);",
                "+    } catch (NoSuchMethodException e) {",
                "+      Constructor<?> smConstructor = getClass().getClassLoader()",
                "+          .loadClass(\"org.apache.spark.SecurityManager\")",
                "+          .getConstructor(new Class[]{ SparkConf.class });",
                "+      securityManager = smConstructor.newInstance(conf);",
                "+    }",
                "+    return securityManager;",
                "+  }",
                "+}",
                "diff --git a/spark/interpreter/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java",
                "new file mode 100644",
                "index 000000000..0703ad791",
                "--- /dev/null",
                "+++ b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java",
                "@@ -0,0 +1,751 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.spark;",
                "+",
                "+import com.google.gson.Gson;",
                "+import org.apache.commons.compress.utils.IOUtils;",
                "+import org.apache.commons.exec.CommandLine;",
                "+import org.apache.commons.exec.DefaultExecutor;",
                "+import org.apache.commons.exec.ExecuteException;",
                "+import org.apache.commons.exec.ExecuteResultHandler;",
                "+import org.apache.commons.exec.ExecuteWatchdog;",
                "+import org.apache.commons.exec.PumpStreamHandler;",
                "+import org.apache.commons.exec.environment.EnvironmentUtils;",
                "+import org.apache.commons.lang.StringUtils;",
                "+import org.apache.spark.SparkConf;",
                "+import org.apache.spark.api.java.JavaSparkContext;",
                "+import org.apache.spark.sql.SQLContext;",
                "+import org.apache.zeppelin.interpreter.Interpreter;",
                "+import org.apache.zeppelin.interpreter.InterpreterContext;",
                "+import org.apache.zeppelin.interpreter.InterpreterException;",
                "+import org.apache.zeppelin.interpreter.InterpreterGroup;",
                "+import org.apache.zeppelin.interpreter.InterpreterHookRegistry.HookType;",
                "+import org.apache.zeppelin.interpreter.InterpreterResult;",
                "+import org.apache.zeppelin.interpreter.InterpreterResult.Code;",
                "+import org.apache.zeppelin.interpreter.InterpreterResultMessage;",
                "+import org.apache.zeppelin.interpreter.LazyOpenInterpreter;",
                "+import org.apache.zeppelin.interpreter.WrappedInterpreter;",
                "+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;",
                "+import org.apache.zeppelin.interpreter.util.InterpreterOutputStream;",
                "+import org.apache.zeppelin.spark.dep.SparkDependencyContext;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+import py4j.GatewayServer;",
                "+",
                "+import java.io.BufferedWriter;",
                "+import java.io.ByteArrayOutputStream;",
                "+import java.io.File;",
                "+import java.io.FileOutputStream;",
                "+import java.io.IOException;",
                "+import java.io.OutputStreamWriter;",
                "+import java.io.PipedInputStream;",
                "+import java.io.PipedOutputStream;",
                "+import java.net.MalformedURLException;",
                "+import java.net.ServerSocket;",
                "+import java.net.URL;",
                "+import java.net.URLClassLoader;",
                "+import java.util.LinkedList;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+import java.util.Properties;",
                "+",
                "+/**",
                "+ *",
                "+ */",
                "+public class PySparkInterpreter extends Interpreter implements ExecuteResultHandler {",
                "+  private static final Logger LOGGER = LoggerFactory.getLogger(PySparkInterpreter.class);",
                "+  private GatewayServer gatewayServer;",
                "+  private DefaultExecutor executor;",
                "+  private int port;",
                "+  private InterpreterOutputStream outputStream;",
                "+  private BufferedWriter ins;",
                "+  private PipedInputStream in;",
                "+  private ByteArrayOutputStream input;",
                "+  private String scriptPath;",
                "+  boolean pythonscriptRunning = false;",
                "+  private static final int MAX_TIMEOUT_SEC = 10;",
                "+  private long pythonPid;",
                "+",
                "+  private IPySparkInterpreter iPySparkInterpreter;",
                "+",
                "+  public PySparkInterpreter(Properties property) {",
                "+    super(property);",
                "+",
                "+    pythonPid = -1;",
                "+    try {",
                "+      File scriptFile = File.createTempFile(\"zeppelin_pyspark-\", \".py\");",
                "+      scriptPath = scriptFile.getAbsolutePath();",
                "+    } catch (IOException e) {",
                "+      throw new RuntimeException(e);",
                "+    }",
                "+  }",
                "+",
                "+  private void createPythonScript() throws InterpreterException {",
                "+    ClassLoader classLoader = getClass().getClassLoader();",
                "+    File out = new File(scriptPath);",
                "+",
                "+    if (out.exists() && out.isDirectory()) {",
                "+      throw new InterpreterException(\"Can't create python script \" + out.getAbsolutePath());",
                "+    }",
                "+",
                "+    try {",
                "+      FileOutputStream outStream = new FileOutputStream(out);",
                "+      IOUtils.copy(",
                "+          classLoader.getResourceAsStream(\"python/zeppelin_pyspark.py\"),",
                "+          outStream);",
                "+      outStream.close();",
                "+    } catch (IOException e) {",
                "+      throw new InterpreterException(e);",
                "+    }",
                "+",
                "+    LOGGER.info(\"File {} created\", scriptPath);",
                "+  }",
                "+",
                "+  @Override",
                "+  public void open() throws InterpreterException {",
                "+    // try IPySparkInterpreter first",
                "+    iPySparkInterpreter = getIPySparkInterpreter();",
                "+    if (getProperty(\"zeppelin.pyspark.useIPython\", \"true\").equals(\"true\") &&",
                "+        StringUtils.isEmpty(",
                "+            iPySparkInterpreter.checkIPythonPrerequisite(getPythonExec(getProperties())))) {",
                "+      try {",
                "+        iPySparkInterpreter.open();",
                "+        if (InterpreterContext.get() != null) {",
                "+          // don't print it when it is in testing, just for easy output check in test.",
                "+          InterpreterContext.get().out.write((\"IPython is available, \" +",
                "+              \"use IPython for PySparkInterpreter\\n\")",
                "+              .getBytes());",
                "+        }",
                "+        LOGGER.info(\"Use IPySparkInterpreter to replace PySparkInterpreter\");",
                "+        return;",
                "+      } catch (Exception e) {",
                "+        LOGGER.warn(\"Fail to open IPySparkInterpreter\", e);",
                "+      }",
                "+    }",
                "+    iPySparkInterpreter = null;",
                "+    if (getProperty(\"zeppelin.pyspark.useIPython\", \"true\").equals(\"true\")) {",
                "+      // don't print it when it is in testing, just for easy output check in test.",
                "+      try {",
                "+        InterpreterContext.get().out.write((\"IPython is not available, \" +",
                "+            \"use the native PySparkInterpreter\\n\")",
                "+            .getBytes());",
                "+      } catch (IOException e) {",
                "+        LOGGER.warn(\"Fail to write InterpreterOutput\", e);",
                "+      }",
                "+    }",
                "+",
                "+    // Add matplotlib display hook",
                "+    InterpreterGroup intpGroup = getInterpreterGroup();",
                "+    if (intpGroup != null && intpGroup.getInterpreterHookRegistry() != null) {",
                "+      registerHook(HookType.POST_EXEC_DEV, \"__zeppelin__._displayhook()\");",
                "+    }",
                "+    DepInterpreter depInterpreter = getDepInterpreter();",
                "+",
                "+    // load libraries from Dependency Interpreter",
                "+    URL [] urls = new URL[0];",
                "+    List<URL> urlList = new LinkedList<>();",
                "+",
                "+    if (depInterpreter != null) {",
                "+      SparkDependencyContext depc = depInterpreter.getDependencyContext();",
                "+      if (depc != null) {",
                "+        List<File> files = depc.getFiles();",
                "+        if (files != null) {",
                "+          for (File f : files) {",
                "+            try {",
                "+              urlList.add(f.toURI().toURL());",
                "+            } catch (MalformedURLException e) {",
                "+              LOGGER.error(\"Error\", e);",
                "+            }",
                "+          }",
                "+        }",
                "+      }",
                "+    }",
                "+",
                "+    String localRepo = getProperty(\"zeppelin.interpreter.localRepo\");",
                "+    if (localRepo != null) {",
                "+      File localRepoDir = new File(localRepo);",
                "+      if (localRepoDir.exists()) {",
                "+        File[] files = localRepoDir.listFiles();",
                "+        if (files != null) {",
                "+          for (File f : files) {",
                "+            try {",
                "+              urlList.add(f.toURI().toURL());",
                "+            } catch (MalformedURLException e) {",
                "+              LOGGER.error(\"Error\", e);",
                "+            }",
                "+          }",
                "+        }",
                "+      }",
                "+    }",
                "+",
                "+    urls = urlList.toArray(urls);",
                "+    ClassLoader oldCl = Thread.currentThread().getContextClassLoader();",
                "+    try {",
                "+      URLClassLoader newCl = new URLClassLoader(urls, oldCl);",
                "+      Thread.currentThread().setContextClassLoader(newCl);",
                "+      createGatewayServerAndStartScript();",
                "+    } catch (Exception e) {",
                "+      LOGGER.error(\"Error\", e);",
                "+      throw new InterpreterException(e);",
                "+    } finally {",
                "+      Thread.currentThread().setContextClassLoader(oldCl);",
                "+    }",
                "+  }",
                "+",
                "+  private Map setupPySparkEnv() throws IOException, InterpreterException {",
                "+    Map env = EnvironmentUtils.getProcEnvironment();",
                "+",
                "+    // only set PYTHONPATH in local or yarn-client mode.",
                "+    // yarn-cluster will setup PYTHONPATH automatically.",
                "+    SparkConf conf = getSparkConf();",
                "+    if (!conf.get(\"spark.submit.deployMode\", \"client\").equals(\"cluster\")) {",
                "+      if (!env.containsKey(\"PYTHONPATH\")) {",
                "+        env.put(\"PYTHONPATH\", PythonUtils.sparkPythonPath());",
                "+      } else {",
                "+        env.put(\"PYTHONPATH\", PythonUtils.sparkPythonPath());",
                "+      }",
                "+    }",
                "+",
                "+    // get additional class paths when using SPARK_SUBMIT and not using YARN-CLIENT",
                "+    // also, add all packages to PYTHONPATH since there might be transitive dependencies",
                "+    if (SparkInterpreter.useSparkSubmit() &&",
                "+        !getSparkInterpreter().isYarnMode()) {",
                "+",
                "+      String sparkSubmitJars = getSparkConf().get(\"spark.jars\").replace(\",\", \":\");",
                "+",
                "+      if (!\"\".equals(sparkSubmitJars)) {",
                "+        env.put(\"PYTHONPATH\", env.get(\"PYTHONPATH\") + sparkSubmitJars);",
                "+      }",
                "+    }",
                "+",
                "+    LOGGER.info(\"PYTHONPATH: \" + env.get(\"PYTHONPATH\"));",
                "+",
                "+    // set PYSPARK_PYTHON",
                "+    if (getSparkConf().contains(\"spark.pyspark.python\")) {",
                "+      env.put(\"PYSPARK_PYTHON\", getSparkConf().get(\"spark.pyspark.python\"));",
                "+    }",
                "+    return env;",
                "+  }",
                "+",
                "+  // Run python shell",
                "+  // Choose python in the order of",
                "+  // PYSPARK_DRIVER_PYTHON > PYSPARK_PYTHON > zeppelin.pyspark.python",
                "+  public static String getPythonExec(Properties properties) {",
                "+    String pythonExec = properties.getProperty(\"zeppelin.pyspark.python\", \"python\");",
                "+    if (System.getenv(\"PYSPARK_PYTHON\") != null) {",
                "+      pythonExec = System.getenv(\"PYSPARK_PYTHON\");",
                "+    }",
                "+    if (System.getenv(\"PYSPARK_DRIVER_PYTHON\") != null) {",
                "+      pythonExec = System.getenv(\"PYSPARK_DRIVER_PYTHON\");",
                "+    }",
                "+    return pythonExec;",
                "+  }",
                "+",
                "+  private void createGatewayServerAndStartScript() throws InterpreterException {",
                "+    // create python script",
                "+    createPythonScript();",
                "+",
                "+    port = findRandomOpenPortOnAllLocalInterfaces();",
                "+",
                "+    gatewayServer = new GatewayServer(this, port);",
                "+    gatewayServer.start();",
                "+",
                "+    String pythonExec = getPythonExec(getProperties());",
                "+    LOGGER.info(\"pythonExec: \" + pythonExec);",
                "+    CommandLine cmd = CommandLine.parse(pythonExec);",
                "+    cmd.addArgument(scriptPath, false);",
                "+    cmd.addArgument(Integer.toString(port), false);",
                "+    cmd.addArgument(Integer.toString(getSparkInterpreter().getSparkVersion().toNumber()), false);",
                "+    executor = new DefaultExecutor();",
                "+    outputStream = new InterpreterOutputStream(LOGGER);",
                "+    PipedOutputStream ps = new PipedOutputStream();",
                "+    in = null;",
                "+    try {",
                "+      in = new PipedInputStream(ps);",
                "+    } catch (IOException e1) {",
                "+      throw new InterpreterException(e1);",
                "+    }",
                "+    ins = new BufferedWriter(new OutputStreamWriter(ps));",
                "+",
                "+    input = new ByteArrayOutputStream();",
                "+",
                "+    PumpStreamHandler streamHandler = new PumpStreamHandler(outputStream, outputStream, in);",
                "+    executor.setStreamHandler(streamHandler);",
                "+    executor.setWatchdog(new ExecuteWatchdog(ExecuteWatchdog.INFINITE_TIMEOUT));",
                "+",
                "+    try {",
                "+      Map env = setupPySparkEnv();",
                "+      executor.execute(cmd, env, this);",
                "+      pythonscriptRunning = true;",
                "+    } catch (IOException e) {",
                "+      throw new InterpreterException(e);",
                "+    }",
                "+",
                "+",
                "+    try {",
                "+      input.write(\"import sys, getopt\\n\".getBytes());",
                "+      ins.flush();",
                "+    } catch (IOException e) {",
                "+      throw new InterpreterException(e);",
                "+    }",
                "+  }",
                "+",
                "+  private int findRandomOpenPortOnAllLocalInterfaces() throws InterpreterException {",
                "+    int port;",
                "+    try (ServerSocket socket = new ServerSocket(0);) {",
                "+      port = socket.getLocalPort();",
                "+      socket.close();",
                "+    } catch (IOException e) {",
                "+      throw new InterpreterException(e);",
                "+    }",
                "+    return port;",
                "+  }",
                "+",
                "+  @Override",
                "+  public void close() throws InterpreterException {",
                "+    if (iPySparkInterpreter != null) {",
                "+      iPySparkInterpreter.close();",
                "+      return;",
                "+    }",
                "+    executor.getWatchdog().destroyProcess();",
                "+    new File(scriptPath).delete();",
                "+    gatewayServer.shutdown();",
                "+  }",
                "+",
                "+  PythonInterpretRequest pythonInterpretRequest = null;",
                "+",
                "+  /**",
                "+   *",
                "+   */",
                "+  public class PythonInterpretRequest {",
                "+    public String statements;",
                "+    public String jobGroup;",
                "+    public String jobDescription;",
                "+",
                "+    public PythonInterpretRequest(String statements, String jobGroup,",
                "+        String jobDescription) {",
                "+      this.statements = statements;",
                "+      this.jobGroup = jobGroup;",
                "+      this.jobDescription = jobDescription;",
                "+    }",
                "+",
                "+    public String statements() {",
                "+      return statements;",
                "+    }",
                "+",
                "+    public String jobGroup() {",
                "+      return jobGroup;",
                "+    }",
                "+",
                "+    public String jobDescription() {",
                "+      return jobDescription;",
                "+    }",
                "+  }",
                "+",
                "+  Integer statementSetNotifier = new Integer(0);",
                "+",
                "+  public PythonInterpretRequest getStatements() {",
                "+    synchronized (statementSetNotifier) {",
                "+      while (pythonInterpretRequest == null) {",
                "+        try {",
                "+          statementSetNotifier.wait(1000);",
                "+        } catch (InterruptedException e) {",
                "+        }",
                "+      }",
                "+      PythonInterpretRequest req = pythonInterpretRequest;",
                "+      pythonInterpretRequest = null;",
                "+      return req;",
                "+    }",
                "+  }",
                "+",
                "+  String statementOutput = null;",
                "+  boolean statementError = false;",
                "+  Integer statementFinishedNotifier = new Integer(0);",
                "+",
                "+  public void setStatementsFinished(String out, boolean error) {",
                "+    synchronized (statementFinishedNotifier) {",
                "+      LOGGER.debug(\"Setting python statement output: \" + out + \", error: \" + error);",
                "+      statementOutput = out;",
                "+      statementError = error;",
                "+      statementFinishedNotifier.notify();",
                "+    }",
                "+  }",
                "+",
                "+  boolean pythonScriptInitialized = false;",
                "+  Integer pythonScriptInitializeNotifier = new Integer(0);",
                "+",
                "+  public void onPythonScriptInitialized(long pid) {",
                "+    pythonPid = pid;",
                "+    synchronized (pythonScriptInitializeNotifier) {",
                "+      LOGGER.debug(\"onPythonScriptInitialized is called\");",
                "+      pythonScriptInitialized = true;",
                "+      pythonScriptInitializeNotifier.notifyAll();",
                "+    }",
                "+  }",
                "+",
                "+  public void appendOutput(String message) throws IOException {",
                "+    LOGGER.debug(\"Output from python process: \" + message);",
                "+    outputStream.getInterpreterOutput().write(message);",
                "+  }",
                "+",
                "+  @Override",
                "+  public InterpreterResult interpret(String st, InterpreterContext context)",
                "+      throws InterpreterException {",
                "+    SparkInterpreter sparkInterpreter = getSparkInterpreter();",
                "+    sparkInterpreter.populateSparkWebUrl(context);",
                "+    if (sparkInterpreter.isUnsupportedSparkVersion()) {",
                "+      return new InterpreterResult(Code.ERROR, \"Spark \"",
                "+          + sparkInterpreter.getSparkVersion().toString() + \" is not supported\");",
                "+    }",
                "+",
                "+    if (iPySparkInterpreter != null) {",
                "+      return iPySparkInterpreter.interpret(st, context);",
                "+    }",
                "+",
                "+    if (!pythonscriptRunning) {",
                "+      return new InterpreterResult(Code.ERROR, \"python process not running\"",
                "+          + outputStream.toString());",
                "+    }",
                "+",
                "+    outputStream.setInterpreterOutput(context.out);",
                "+",
                "+    synchronized (pythonScriptInitializeNotifier) {",
                "+      long startTime = System.currentTimeMillis();",
                "+      while (pythonScriptInitialized == false",
                "+          && pythonscriptRunning",
                "+          && System.currentTimeMillis() - startTime < MAX_TIMEOUT_SEC * 1000) {",
                "+        try {",
                "+          pythonScriptInitializeNotifier.wait(1000);",
                "+        } catch (InterruptedException e) {",
                "+          e.printStackTrace();",
                "+        }",
                "+      }",
                "+    }",
                "+",
                "+    List<InterpreterResultMessage> errorMessage;",
                "+    try {",
                "+      context.out.flush();",
                "+      errorMessage = context.out.toInterpreterResultMessage();",
                "+    } catch (IOException e) {",
                "+      throw new InterpreterException(e);",
                "+    }",
                "+",
                "+",
                "+    if (pythonscriptRunning == false) {",
                "+      // python script failed to initialize and terminated",
                "+      errorMessage.add(new InterpreterResultMessage(",
                "+          InterpreterResult.Type.TEXT, \"failed to start pyspark\"));",
                "+      return new InterpreterResult(Code.ERROR, errorMessage);",
                "+    }",
                "+    if (pythonScriptInitialized == false) {",
                "+      // timeout. didn't get initialized message",
                "+      errorMessage.add(new InterpreterResultMessage(",
                "+          InterpreterResult.Type.TEXT, \"pyspark is not responding\"));",
                "+      return new InterpreterResult(Code.ERROR, errorMessage);",
                "+    }",
                "+",
                "+    if (!sparkInterpreter.getSparkVersion().isPysparkSupported()) {",
                "+      errorMessage.add(new InterpreterResultMessage(",
                "+          InterpreterResult.Type.TEXT,",
                "+          \"pyspark \" + sparkInterpreter.getSparkContext().version() + \" is not supported\"));",
                "+      return new InterpreterResult(Code.ERROR, errorMessage);",
                "+    }",
                "+    String jobGroup = Utils.buildJobGroupId(context);",
                "+    String jobDesc = \"Started by: \" + Utils.getUserName(context.getAuthenticationInfo());",
                "+    SparkZeppelinContext __zeppelin__ = sparkInterpreter.getZeppelinContext();",
                "+    __zeppelin__.setInterpreterContext(context);",
                "+    __zeppelin__.setGui(context.getGui());",
                "+    __zeppelin__.setNoteGui(context.getNoteGui());",
                "+    pythonInterpretRequest = new PythonInterpretRequest(st, jobGroup, jobDesc);",
                "+    statementOutput = null;",
                "+",
                "+    synchronized (statementSetNotifier) {",
                "+      statementSetNotifier.notify();",
                "+    }",
                "+",
                "+    synchronized (statementFinishedNotifier) {",
                "+      while (statementOutput == null) {",
                "+        try {",
                "+          statementFinishedNotifier.wait(1000);",
                "+        } catch (InterruptedException e) {",
                "+        }",
                "+      }",
                "+    }",
                "+",
                "+    if (statementError) {",
                "+      return new InterpreterResult(Code.ERROR, statementOutput);",
                "+    } else {",
                "+",
                "+      try {",
                "+        context.out.flush();",
                "+      } catch (IOException e) {",
                "+        throw new InterpreterException(e);",
                "+      }",
                "+",
                "+      return new InterpreterResult(Code.SUCCESS);",
                "+    }",
                "+  }",
                "+",
                "+  public void interrupt() throws IOException, InterpreterException {",
                "+    if (pythonPid > -1) {",
                "+      LOGGER.info(\"Sending SIGINT signal to PID : \" + pythonPid);",
                "+      Runtime.getRuntime().exec(\"kill -SIGINT \" + pythonPid);",
                "+    } else {",
                "+      LOGGER.warn(\"Non UNIX/Linux system, close the interpreter\");",
                "+      close();",
                "+    }",
                "+  }",
                "+",
                "+  @Override",
                "+  public void cancel(InterpreterContext context) throws InterpreterException {",
                "+    if (iPySparkInterpreter != null) {",
                "+      iPySparkInterpreter.cancel(context);",
                "+      return;",
                "+    }",
                "+    SparkInterpreter sparkInterpreter = getSparkInterpreter();",
                "+    sparkInterpreter.cancel(context);",
                "+    try {",
                "+      interrupt();",
                "+    } catch (IOException e) {",
                "+      LOGGER.error(\"Error\", e);",
                "+    }",
                "+  }",
                "+",
                "+  @Override",
                "+  public FormType getFormType() {",
                "+    return FormType.NATIVE;",
                "+  }",
                "+",
                "+  @Override",
                "+  public int getProgress(InterpreterContext context) throws InterpreterException {",
                "+    if (iPySparkInterpreter != null) {",
                "+      return iPySparkInterpreter.getProgress(context);",
                "+    }",
                "+    SparkInterpreter sparkInterpreter = getSparkInterpreter();",
                "+    return sparkInterpreter.getProgress(context);",
                "+  }",
                "+",
                "+",
                "+  @Override",
                "+  public List<InterpreterCompletion> completion(String buf, int cursor,",
                "+                                                InterpreterContext interpreterContext)",
                "+      throws InterpreterException {",
                "+    if (iPySparkInterpreter != null) {",
                "+      return iPySparkInterpreter.completion(buf, cursor, interpreterContext);",
                "+    }",
                "+    if (buf.length() < cursor) {",
                "+      cursor = buf.length();",
                "+    }",
                "+    String completionString = getCompletionTargetString(buf, cursor);",
                "+    String completionCommand = \"completion.getCompletion('\" + completionString + \"')\";",
                "+",
                "+    //start code for completion",
                "+    SparkInterpreter sparkInterpreter = getSparkInterpreter();",
                "+    if (sparkInterpreter.isUnsupportedSparkVersion() || pythonscriptRunning == false) {",
                "+      return new LinkedList<>();",
                "+    }",
                "+",
                "+    pythonInterpretRequest = new PythonInterpretRequest(completionCommand, \"\", \"\");",
                "+    statementOutput = null;",
                "+",
                "+    synchronized (statementSetNotifier) {",
                "+      statementSetNotifier.notify();",
                "+    }",
                "+",
                "+    String[] completionList = null;",
                "+    synchronized (statementFinishedNotifier) {",
                "+      long startTime = System.currentTimeMillis();",
                "+      while (statementOutput == null",
                "+        && pythonscriptRunning) {",
                "+        try {",
                "+          if (System.currentTimeMillis() - startTime > MAX_TIMEOUT_SEC * 1000) {",
                "+            LOGGER.error(\"pyspark completion didn't have response for {}sec.\", MAX_TIMEOUT_SEC);",
                "+            break;",
                "+          }",
                "+          statementFinishedNotifier.wait(1000);",
                "+        } catch (InterruptedException e) {",
                "+          // not working",
                "+          LOGGER.info(\"wait drop\");",
                "+          return new LinkedList<>();",
                "+        }",
                "+      }",
                "+      if (statementError) {",
                "+        return new LinkedList<>();",
                "+      }",
                "+      Gson gson = new Gson();",
                "+      completionList = gson.fromJson(statementOutput, String[].class);",
                "+    }",
                "+    //end code for completion",
                "+",
                "+    if (completionList == null) {",
                "+      return new LinkedList<>();",
                "+    }",
                "+",
                "+    List<InterpreterCompletion> results = new LinkedList<>();",
                "+    for (String name: completionList) {",
                "+      results.add(new InterpreterCompletion(name, name, StringUtils.EMPTY));",
                "+    }",
                "+    return results;",
                "+  }",
                "+",
                "+  private String getCompletionTargetString(String text, int cursor) {",
                "+    String[] completionSeqCharaters = {\" \", \"\\n\", \"\\t\"};",
                "+    int completionEndPosition = cursor;",
                "+    int completionStartPosition = cursor;",
                "+    int indexOfReverseSeqPostion = cursor;",
                "+",
                "+    String resultCompletionText = \"\";",
                "+    String completionScriptText = \"\";",
                "+    try {",
                "+      completionScriptText = text.substring(0, cursor);",
                "+    }",
                "+    catch (Exception e) {",
                "+      LOGGER.error(e.toString());",
                "+      return null;",
                "+    }",
                "+    completionEndPosition = completionScriptText.length();",
                "+",
                "+    String tempReverseCompletionText = new StringBuilder(completionScriptText).reverse().toString();",
                "+",
                "+    for (String seqCharacter : completionSeqCharaters) {",
                "+      indexOfReverseSeqPostion = tempReverseCompletionText.indexOf(seqCharacter);",
                "+",
                "+      if (indexOfReverseSeqPostion < completionStartPosition && indexOfReverseSeqPostion > 0) {",
                "+        completionStartPosition = indexOfReverseSeqPostion;",
                "+      }",
                "+",
                "+    }",
                "+",
                "+    if (completionStartPosition == completionEndPosition) {",
                "+      completionStartPosition = 0;",
                "+    }",
                "+    else",
                "+    {",
                "+      completionStartPosition = completionEndPosition - completionStartPosition;",
                "+    }",
                "+    resultCompletionText = completionScriptText.substring(",
                "+            completionStartPosition , completionEndPosition);",
                "+",
                "+    return resultCompletionText;",
                "+  }",
                "+",
                "+",
                "+  private SparkInterpreter getSparkInterpreter() throws InterpreterException {",
                "+    LazyOpenInterpreter lazy = null;",
                "+    SparkInterpreter spark = null;",
                "+    Interpreter p = getInterpreterInTheSameSessionByClassName(SparkInterpreter.class.getName());",
                "+",
                "+    while (p instanceof WrappedInterpreter) {",
                "+      if (p instanceof LazyOpenInterpreter) {",
                "+        lazy = (LazyOpenInterpreter) p;",
                "+      }",
                "+      p = ((WrappedInterpreter) p).getInnerInterpreter();",
                "+    }",
                "+    spark = (SparkInterpreter) p;",
                "+",
                "+    if (lazy != null) {",
                "+      lazy.open();",
                "+    }",
                "+    return spark;",
                "+  }",
                "+",
                "+  private IPySparkInterpreter getIPySparkInterpreter() {",
                "+    LazyOpenInterpreter lazy = null;",
                "+    IPySparkInterpreter iPySpark = null;",
                "+    Interpreter p = getInterpreterInTheSameSessionByClassName(IPySparkInterpreter.class.getName());",
                "+",
                "+    while (p instanceof WrappedInterpreter) {",
                "+      if (p instanceof LazyOpenInterpreter) {",
                "+        lazy = (LazyOpenInterpreter) p;",
                "+      }",
                "+      p = ((WrappedInterpreter) p).getInnerInterpreter();",
                "+    }",
                "+    iPySpark = (IPySparkInterpreter) p;",
                "+    return iPySpark;",
                "+  }",
                "+",
                "+  public SparkZeppelinContext getZeppelinContext() throws InterpreterException {",
                "+    SparkInterpreter sparkIntp = getSparkInterpreter();",
                "+    if (sparkIntp != null) {",
                "+      return getSparkInterpreter().getZeppelinContext();",
                "+    } else {",
                "+      return null;",
                "+    }",
                "+  }",
                "+",
                "+  public JavaSparkContext getJavaSparkContext() throws InterpreterException {",
                "+    SparkInterpreter intp = getSparkInterpreter();",
                "+    if (intp == null) {",
                "+      return null;",
                "+    } else {",
                "+      return new JavaSparkContext(intp.getSparkContext());",
                "+    }",
                "+  }",
                "+",
                "+  public Object getSparkSession() throws InterpreterException {",
                "+    SparkInterpreter intp = getSparkInterpreter();",
                "+    if (intp == null) {",
                "+      return null;",
                "+    } else {",
                "+      return intp.getSparkSession();",
                "+    }",
                "+  }",
                "+",
                "+  public SparkConf getSparkConf() throws InterpreterException {",
                "+    JavaSparkContext sc = getJavaSparkContext();",
                "+    if (sc == null) {",
                "+      return null;",
                "+    } else {",
                "+      return getJavaSparkContext().getConf();",
                "+    }",
                "+  }",
                "+",
                "+  public SQLContext getSQLContext() throws InterpreterException {",
                "+    SparkInterpreter intp = getSparkInterpreter();",
                "+    if (intp == null) {",
                "+      return null;",
                "+    } else {",
                "+      return intp.getSQLContext();",
                "+    }",
                "+  }",
                "+",
                "+  private DepInterpreter getDepInterpreter() {",
                "+    Interpreter p = getInterpreterInTheSameSessionByClassName(DepInterpreter.class.getName());",
                "+    if (p == null) {",
                "+      return null;",
                "+    }",
                "+",
                "+    while (p instanceof WrappedInterpreter) {",
                "+      p = ((WrappedInterpreter) p).getInnerInterpreter();",
                "+    }",
                "+    return (DepInterpreter) p;",
                "+  }",
                "+",
                "+",
                "+  @Override",
                "+  public void onProcessComplete(int exitValue) {",
                "+    pythonscriptRunning = false;",
                "+    LOGGER.info(\"python process terminated. exit code \" + exitValue);",
                "+  }",
                "+",
                "+  @Override",
                "+  public void onProcessFailed(ExecuteException e) {",
                "+    pythonscriptRunning = false;",
                "+    LOGGER.error(\"python process failed\", e);",
                "+  }",
                "+}",
                "diff --git a/spark/interpreter/src/main/java/org/apache/zeppelin/spark/PythonUtils.java b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/PythonUtils.java",
                "new file mode 100644",
                "index 000000000..818269005",
                "--- /dev/null",
                "+++ b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/PythonUtils.java",
                "@@ -0,0 +1,96 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+",
                "+package org.apache.zeppelin.spark;",
                "+",
                "+import org.apache.commons.lang3.StringUtils;",
                "+",
                "+import java.io.File;",
                "+import java.io.FilenameFilter;",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+",
                "+/**",
                "+ * Util class for PySpark",
                "+ */",
                "+public class PythonUtils {",
                "+",
                "+  /**",
                "+   * Get the PYTHONPATH for PySpark, either from SPARK_HOME, if it is set, or from ZEPPELIN_HOME",
                "+   * when it is embedded mode.",
                "+   *",
                "+   * This method will called in zeppelin server process and spark driver process when it is",
                "+   * local or yarn-client mode.",
                "+   */",
                "+  public static String sparkPythonPath() {",
                "+    List<String> pythonPath = new ArrayList<String>();",
                "+    String sparkHome = System.getenv(\"SPARK_HOME\");",
                "+    String zeppelinHome = System.getenv(\"ZEPPELIN_HOME\");",
                "+    if (zeppelinHome == null) {",
                "+      zeppelinHome = new File(\"..\").getAbsolutePath();",
                "+    }",
                "+    if (sparkHome != null) {",
                "+      // non-embedded mode when SPARK_HOME is specified.",
                "+      File pyspark = new File(sparkHome, \"python/lib/pyspark.zip\");",
                "+      if (!pyspark.exists()) {",
                "+        throw new RuntimeException(\"No pyspark.zip found under \" + sparkHome + \"/python/lib\");",
                "+      }",
                "+      pythonPath.add(pyspark.getAbsolutePath());",
                "+      File[] py4j = new File(sparkHome + \"/python/lib\").listFiles(new FilenameFilter() {",
                "+        @Override",
                "+        public boolean accept(File dir, String name) {",
                "+          return name.startsWith(\"py4j\");",
                "+        }",
                "+      });",
                "+      if (py4j.length == 0) {",
                "+        throw new RuntimeException(\"No py4j files found under \" + sparkHome + \"/python/lib\");",
                "+      } else if (py4j.length > 1) {",
                "+        throw new RuntimeException(\"Multiple py4j files found under \" + sparkHome + \"/python/lib\");",
                "+      } else {",
                "+        pythonPath.add(py4j[0].getAbsolutePath());",
                "+      }",
                "+    } else {",
                "+      // embedded mode",
                "+      File pyspark = new File(zeppelinHome, \"interpreter/spark/pyspark/pyspark.zip\");",
                "+      if (!pyspark.exists()) {",
                "+        throw new RuntimeException(\"No pyspark.zip found: \" + pyspark.getAbsolutePath());",
                "+      }",
                "+      pythonPath.add(pyspark.getAbsolutePath());",
                "+      File[] py4j = new File(zeppelinHome, \"interpreter/spark/pyspark\").listFiles(",
                "+          new FilenameFilter() {",
                "+            @Override",
                "+            public boolean accept(File dir, String name) {",
                "+              return name.startsWith(\"py4j\");",
                "+            }",
                "+          });",
                "+      if (py4j.length == 0) {",
                "+        throw new RuntimeException(\"No py4j files found under \" + zeppelinHome +",
                "+            \"/interpreter/spark/pyspark\");",
                "+      } else if (py4j.length > 1) {",
                "+        throw new RuntimeException(\"Multiple py4j files found under \" + sparkHome +",
                "+            \"/interpreter/spark/pyspark\");",
                "+      } else {",
                "+        pythonPath.add(py4j[0].getAbsolutePath());",
                "+      }",
                "+    }",
                "+",
                "+    // add ${ZEPPELIN_HOME}/interpreter/lib/python for all the cases",
                "+    pythonPath.add(zeppelinHome + \"/interpreter/lib/python\");",
                "+    return StringUtils.join(pythonPath, \":\");",
                "+  }",
                "+}",
                "diff --git a/spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java",
                "new file mode 100644",
                "index 000000000..d9be57363",
                "--- /dev/null",
                "+++ b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java",
                "@@ -0,0 +1,163 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.spark;",
                "+",
                "+import org.apache.spark.SparkContext;",
                "+import org.apache.spark.api.java.JavaSparkContext;",
                "+import org.apache.spark.sql.SQLContext;",
                "+import org.apache.zeppelin.interpreter.Interpreter;",
                "+import org.apache.zeppelin.interpreter.InterpreterContext;",
                "+import org.apache.zeppelin.interpreter.InterpreterException;",
                "+import org.apache.zeppelin.interpreter.InterpreterResult;",
                "+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+import java.util.List;",
                "+import java.util.Properties;",
                "+",
                "+/**",
                "+ * It is the Wrapper of OldSparkInterpreter & NewSparkInterpreter.",
                "+ * Property zeppelin.spark.useNew control which one to use.",
                "+ */",
                "+public class SparkInterpreter extends AbstractSparkInterpreter {",
                "+",
                "+  private static final Logger LOGGER = LoggerFactory.getLogger(SparkInterpreter.class);",
                "+",
                "+  // either OldSparkInterpreter or NewSparkInterpreter",
                "+  private AbstractSparkInterpreter delegation;",
                "+",
                "+",
                "+  public SparkInterpreter(Properties properties) {",
                "+    super(properties);",
                "+    if (Boolean.parseBoolean(properties.getProperty(\"zeppelin.spark.useNew\", \"false\"))) {",
                "+      delegation = new NewSparkInterpreter(properties);",
                "+    } else {",
                "+      delegation = new OldSparkInterpreter(properties);",
                "+    }",
                "+  }",
                "+",
                "+  @Override",
                "+  public void open() throws InterpreterException {",
                "+    delegation.setInterpreterGroup(getInterpreterGroup());",
                "+    delegation.setUserName(getUserName());",
                "+    delegation.setClassloaderUrls(getClassloaderUrls());",
                "+",
                "+    delegation.open();",
                "+  }",
                "+",
                "+  @Override",
                "+  public void close() throws InterpreterException {",
                "+    delegation.close();",
                "+  }",
                "+",
                "+  @Override",
                "+  public InterpreterResult interpret(String st, InterpreterContext context)",
                "+      throws InterpreterException {",
                "+    return delegation.interpret(st, context);",
                "+  }",
                "+",
                "+  @Override",
                "+  public void cancel(InterpreterContext context) throws InterpreterException {",
                "+    delegation.cancel(context);",
                "+  }",
                "+",
                "+  @Override",
                "+  public List<InterpreterCompletion> completion(String buf,",
                "+                                                int cursor,",
                "+                                                InterpreterContext interpreterContext)",
                "+      throws InterpreterException {",
                "+    return delegation.completion(buf, cursor, interpreterContext);",
                "+  }",
                "+",
                "+  @Override",
                "+  public FormType getFormType() {",
                "+    return FormType.NATIVE;",
                "+  }",
                "+",
                "+  @Override",
                "+  public int getProgress(InterpreterContext context) throws InterpreterException {",
                "+    return delegation.getProgress(context);",
                "+  }",
                "+",
                "+  public AbstractSparkInterpreter getDelegation() {",
                "+    return delegation;",
                "+  }",
                "+",
                "+",
                "+  @Override",
                "+  public SparkContext getSparkContext() {",
                "+    return delegation.getSparkContext();",
                "+  }",
                "+",
                "+  @Override",
                "+  public SQLContext getSQLContext() {",
                "+    return delegation.getSQLContext();",
                "+  }",
                "+",
                "+  @Override",
                "+  public Object getSparkSession() {",
                "+    return delegation.getSparkSession();",
                "+  }",
                "+",
                "+  @Override",
                "+  public boolean isSparkContextInitialized() {",
                "+    return delegation.isSparkContextInitialized();",
                "+  }",
                "+",
                "+  @Override",
                "+  public SparkVersion getSparkVersion() {",
                "+    return delegation.getSparkVersion();",
                "+  }",
                "+",
                "+  @Override",
                "+  public JavaSparkContext getJavaSparkContext() {",
                "+    return delegation.getJavaSparkContext();",
                "+  }",
                "+",
                "+  @Override",
                "+  public void populateSparkWebUrl(InterpreterContext ctx) {",
                "+    delegation.populateSparkWebUrl(ctx);",
                "+  }",
                "+",
                "+  @Override",
                "+  public SparkZeppelinContext getZeppelinContext() {",
                "+    return delegation.getZeppelinContext();",
                "+  }",
                "+",
                "+  @Override",
                "+  public String getSparkUIUrl() {",
                "+    return delegation.getSparkUIUrl();",
                "+  }",
                "+",
                "+  public boolean isUnsupportedSparkVersion() {",
                "+    return delegation.isUnsupportedSparkVersion();",
                "+  }",
                "+",
                "+  public boolean isYarnMode() {",
                "+    String master = getProperty(\"master\");",
                "+    if (master == null) {",
                "+      master = getProperty(\"spark.master\", \"local[*]\");",
                "+    }",
                "+    return master.startsWith(\"yarn\");",
                "+  }",
                "+",
                "+  public static boolean useSparkSubmit() {",
                "+    return null != System.getenv(\"SPARK_SUBMIT\");",
                "+  }",
                "+}",
                "diff --git a/spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkRInterpreter.java b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkRInterpreter.java",
                "new file mode 100644",
                "index 000000000..dbaeabe9a",
                "--- /dev/null",
                "+++ b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkRInterpreter.java",
                "@@ -0,0 +1,250 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.spark;",
                "+",
                "+import static org.apache.zeppelin.spark.ZeppelinRDisplay.render;",
                "+",
                "+import com.fasterxml.jackson.databind.JsonNode;",
                "+import com.fasterxml.jackson.databind.ObjectMapper;",
                "+",
                "+import org.apache.spark.SparkContext;",
                "+import org.apache.spark.SparkRBackend;",
                "+import org.apache.spark.api.java.JavaSparkContext;",
                "+import org.apache.zeppelin.interpreter.*;",
                "+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;",
                "+import org.apache.zeppelin.scheduler.Scheduler;",
                "+import org.apache.zeppelin.scheduler.SchedulerFactory;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+import java.io.IOException;",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+import java.util.Properties;",
                "+",
                "+/**",
                "+ * R and SparkR interpreter with visualization support.",
                "+ */",
                "+public class SparkRInterpreter extends Interpreter {",
                "+  private static final Logger logger = LoggerFactory.getLogger(SparkRInterpreter.class);",
                "+",
                "+  private static String renderOptions;",
                "+  private SparkInterpreter sparkInterpreter;",
                "+  private ZeppelinR zeppelinR;",
                "+  private SparkContext sc;",
                "+  private JavaSparkContext jsc;",
                "+",
                "+  public SparkRInterpreter(Properties property) {",
                "+    super(property);",
                "+  }",
                "+",
                "+  @Override",
                "+  public void open() throws InterpreterException {",
                "+    String rCmdPath = getProperty(\"zeppelin.R.cmd\", \"R\");",
                "+    String sparkRLibPath;",
                "+",
                "+    if (System.getenv(\"SPARK_HOME\") != null) {",
                "+      sparkRLibPath = System.getenv(\"SPARK_HOME\") + \"/R/lib\";",
                "+    } else {",
                "+      sparkRLibPath = System.getenv(\"ZEPPELIN_HOME\") + \"/interpreter/spark/R/lib\";",
                "+      // workaround to make sparkr work without SPARK_HOME",
                "+      System.setProperty(\"spark.test.home\", System.getenv(\"ZEPPELIN_HOME\") + \"/interpreter/spark\");",
                "+    }",
                "+    synchronized (SparkRBackend.backend()) {",
                "+      if (!SparkRBackend.isStarted()) {",
                "+        SparkRBackend.init();",
                "+        SparkRBackend.start();",
                "+      }",
                "+    }",
                "+",
                "+    int port = SparkRBackend.port();",
                "+",
                "+    this.sparkInterpreter = getSparkInterpreter();",
                "+    this.sc = sparkInterpreter.getSparkContext();",
                "+    this.jsc = sparkInterpreter.getJavaSparkContext();",
                "+    SparkVersion sparkVersion = new SparkVersion(sc.version());",
                "+    ZeppelinRContext.setSparkContext(sc);",
                "+    ZeppelinRContext.setJavaSparkContext(jsc);",
                "+    if (Utils.isSpark2()) {",
                "+      ZeppelinRContext.setSparkSession(sparkInterpreter.getSparkSession());",
                "+    }",
                "+    ZeppelinRContext.setSqlContext(sparkInterpreter.getSQLContext());",
                "+    ZeppelinRContext.setZeppelinContext(sparkInterpreter.getZeppelinContext());",
                "+",
                "+    zeppelinR = new ZeppelinR(rCmdPath, sparkRLibPath, port, sparkVersion);",
                "+    try {",
                "+      zeppelinR.open();",
                "+    } catch (IOException e) {",
                "+      logger.error(\"Exception while opening SparkRInterpreter\", e);",
                "+      throw new InterpreterException(e);",
                "+    }",
                "+",
                "+    if (useKnitr()) {",
                "+      zeppelinR.eval(\"library('knitr')\");",
                "+    }",
                "+    renderOptions = getProperty(\"zeppelin.R.render.options\");",
                "+  }",
                "+",
                "+  String getJobGroup(InterpreterContext context){",
                "+    return \"zeppelin-\" + context.getParagraphId();",
                "+  }",
                "+",
                "+  @Override",
                "+  public InterpreterResult interpret(String lines, InterpreterContext interpreterContext)",
                "+      throws InterpreterException {",
                "+",
                "+    SparkInterpreter sparkInterpreter = getSparkInterpreter();",
                "+    sparkInterpreter.populateSparkWebUrl(interpreterContext);",
                "+    if (sparkInterpreter.isUnsupportedSparkVersion()) {",
                "+      return new InterpreterResult(InterpreterResult.Code.ERROR, \"Spark \"",
                "+          + sparkInterpreter.getSparkVersion().toString() + \" is not supported\");",
                "+    }",
                "+",
                "+    String jobGroup = Utils.buildJobGroupId(interpreterContext);",
                "+    String jobDesc = \"Started by: \" +",
                "+       Utils.getUserName(interpreterContext.getAuthenticationInfo());",
                "+    sparkInterpreter.getSparkContext().setJobGroup(jobGroup, jobDesc, false);",
                "+",
                "+    String imageWidth = getProperty(\"zeppelin.R.image.width\");",
                "+",
                "+    String[] sl = lines.split(\"\\n\");",
                "+    if (sl[0].contains(\"{\") && sl[0].contains(\"}\")) {",
                "+      String jsonConfig = sl[0].substring(sl[0].indexOf(\"{\"), sl[0].indexOf(\"}\") + 1);",
                "+      ObjectMapper m = new ObjectMapper();",
                "+      try {",
                "+        JsonNode rootNode = m.readTree(jsonConfig);",
                "+        JsonNode imageWidthNode = rootNode.path(\"imageWidth\");",
                "+        if (!imageWidthNode.isMissingNode()) imageWidth = imageWidthNode.textValue();",
                "+      }",
                "+      catch (Exception e) {",
                "+        logger.warn(\"Can not parse json config: \" + jsonConfig, e);",
                "+      }",
                "+      finally {",
                "+        lines = lines.replace(jsonConfig, \"\");",
                "+      }",
                "+    }",
                "+",
                "+    String setJobGroup = \"\";",
                "+    // assign setJobGroup to dummy__, otherwise it would print NULL for this statement",
                "+    if (Utils.isSpark2()) {",
                "+      setJobGroup = \"dummy__ <- setJobGroup(\\\"\" + jobGroup +",
                "+          \"\\\", \\\" +\" + jobDesc + \"\\\", TRUE)\";",
                "+    } else if (getSparkInterpreter().getSparkVersion().newerThanEquals(SparkVersion.SPARK_1_5_0)) {",
                "+      setJobGroup = \"dummy__ <- setJobGroup(sc, \\\"\" + jobGroup +",
                "+          \"\\\", \\\"\" + jobDesc + \"\\\", TRUE)\";",
                "+    }",
                "+    logger.debug(\"set JobGroup:\" + setJobGroup);",
                "+    lines = setJobGroup + \"\\n\" + lines;",
                "+",
                "+    try {",
                "+      // render output with knitr",
                "+      if (useKnitr()) {",
                "+        zeppelinR.setInterpreterOutput(null);",
                "+        zeppelinR.set(\".zcmd\", \"\\n```{r \" + renderOptions + \"}\\n\" + lines + \"\\n```\");",
                "+        zeppelinR.eval(\".zres <- knit2html(text=.zcmd)\");",
                "+        String html = zeppelinR.getS0(\".zres\");",
                "+",
                "+        RDisplay rDisplay = render(html, imageWidth);",
                "+",
                "+        return new InterpreterResult(",
                "+            rDisplay.code(),",
                "+            rDisplay.type(),",
                "+            rDisplay.content()",
                "+        );",
                "+      } else {",
                "+        // alternatively, stream the output (without knitr)",
                "+        zeppelinR.setInterpreterOutput(interpreterContext.out);",
                "+        zeppelinR.eval(lines);",
                "+        return new InterpreterResult(InterpreterResult.Code.SUCCESS, \"\");",
                "+      }",
                "+    } catch (Exception e) {",
                "+      logger.error(\"Exception while connecting to R\", e);",
                "+      return new InterpreterResult(InterpreterResult.Code.ERROR, e.getMessage());",
                "+    } finally {",
                "+      try {",
                "+      } catch (Exception e) {",
                "+        // Do nothing...",
                "+      }",
                "+    }",
                "+  }",
                "+",
                "+  @Override",
                "+  public void close() {",
                "+    zeppelinR.close();",
                "+  }",
                "+",
                "+  @Override",
                "+  public void cancel(InterpreterContext context) {",
                "+    if (this.sc != null) {",
                "+      sc.cancelJobGroup(getJobGroup(context));",
                "+    }",
                "+  }",
                "+",
                "+  @Override",
                "+  public FormType getFormType() {",
                "+    return FormType.NONE;",
                "+  }",
                "+",
                "+  @Override",
                "+  public int getProgress(InterpreterContext context) throws InterpreterException {",
                "+    if (sparkInterpreter != null) {",
                "+      return sparkInterpreter.getProgress(context);",
                "+    } else {",
                "+      return 0;",
                "+    }",
                "+  }",
                "+",
                "+  @Override",
                "+  public Scheduler getScheduler() {",
                "+    return SchedulerFactory.singleton().createOrGetFIFOScheduler(",
                "+            SparkRInterpreter.class.getName() + this.hashCode());",
                "+  }",
                "+",
                "+  @Override",
                "+  public List<InterpreterCompletion> completion(String buf, int cursor,",
                "+                                                InterpreterContext interpreterContext) {",
                "+    return new ArrayList<>();",
                "+  }",
                "+",
                "+  private SparkInterpreter getSparkInterpreter() throws InterpreterException {",
                "+    LazyOpenInterpreter lazy = null;",
                "+    SparkInterpreter spark = null;",
                "+    Interpreter p = getInterpreterInTheSameSessionByClassName(SparkInterpreter.class.getName());",
                "+",
                "+    while (p instanceof WrappedInterpreter) {",
                "+      if (p instanceof LazyOpenInterpreter) {",
                "+        lazy = (LazyOpenInterpreter) p;",
                "+      }",
                "+      p = ((WrappedInterpreter) p).getInnerInterpreter();",
                "+    }",
                "+    spark = (SparkInterpreter) p;",
                "+",
                "+    if (lazy != null) {",
                "+      lazy.open();",
                "+    }",
                "+    return spark;",
                "+  }",
                "+",
                "+  private boolean useKnitr() {",
                "+    try {",
                "+      return Boolean.parseBoolean(getProperty(\"zeppelin.R.knitr\"));",
                "+    } catch (Exception e) {",
                "+      return false;",
                "+    }",
                "+  }",
                "+}",
                "diff --git a/spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkSqlInterpreter.java b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkSqlInterpreter.java",
                "new file mode 100644",
                "index 000000000..9709f9eea",
                "--- /dev/null",
                "+++ b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkSqlInterpreter.java",
                "@@ -0,0 +1,187 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.spark;",
                "+",
                "+import java.lang.reflect.InvocationTargetException;",
                "+import java.lang.reflect.Method;",
                "+import java.util.List;",
                "+import java.util.Properties;",
                "+import java.util.concurrent.atomic.AtomicInteger;",
                "+",
                "+import org.apache.spark.SparkContext;",
                "+import org.apache.spark.sql.SQLContext;",
                "+import org.apache.zeppelin.interpreter.Interpreter;",
                "+import org.apache.zeppelin.interpreter.InterpreterContext;",
                "+import org.apache.zeppelin.interpreter.InterpreterException;",
                "+import org.apache.zeppelin.interpreter.InterpreterResult;",
                "+import org.apache.zeppelin.interpreter.InterpreterResult.Code;",
                "+import org.apache.zeppelin.interpreter.LazyOpenInterpreter;",
                "+import org.apache.zeppelin.interpreter.WrappedInterpreter;",
                "+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;",
                "+import org.apache.zeppelin.scheduler.Scheduler;",
                "+import org.apache.zeppelin.scheduler.SchedulerFactory;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+/**",
                "+ * Spark SQL interpreter for Zeppelin.",
                "+ */",
                "+public class SparkSqlInterpreter extends Interpreter {",
                "+  private Logger logger = LoggerFactory.getLogger(SparkSqlInterpreter.class);",
                "+",
                "+  public static final String MAX_RESULTS = \"zeppelin.spark.maxResult\";",
                "+",
                "+  AtomicInteger num = new AtomicInteger(0);",
                "+",
                "+  private int maxResult;",
                "+",
                "+  public SparkSqlInterpreter(Properties property) {",
                "+    super(property);",
                "+  }",
                "+",
                "+  @Override",
                "+  public void open() {",
                "+    this.maxResult = Integer.parseInt(getProperty(MAX_RESULTS));",
                "+  }",
                "+",
                "+  private SparkInterpreter getSparkInterpreter() throws InterpreterException {",
                "+    LazyOpenInterpreter lazy = null;",
                "+    SparkInterpreter spark = null;",
                "+    Interpreter p = getInterpreterInTheSameSessionByClassName(SparkInterpreter.class.getName());",
                "+",
                "+    while (p instanceof WrappedInterpreter) {",
                "+      if (p instanceof LazyOpenInterpreter) {",
                "+        lazy = (LazyOpenInterpreter) p;",
                "+      }",
                "+      p = ((WrappedInterpreter) p).getInnerInterpreter();",
                "+    }",
                "+    spark = (SparkInterpreter) p;",
                "+",
                "+    if (lazy != null) {",
                "+      lazy.open();",
                "+    }",
                "+    return spark;",
                "+  }",
                "+",
                "+  public boolean concurrentSQL() {",
                "+    return Boolean.parseBoolean(getProperty(\"zeppelin.spark.concurrentSQL\"));",
                "+  }",
                "+",
                "+  @Override",
                "+  public void close() {}",
                "+",
                "+  @Override",
                "+  public InterpreterResult interpret(String st, InterpreterContext context)",
                "+      throws InterpreterException {",
                "+    SQLContext sqlc = null;",
                "+    SparkInterpreter sparkInterpreter = getSparkInterpreter();",
                "+",
                "+    if (sparkInterpreter.isUnsupportedSparkVersion()) {",
                "+      return new InterpreterResult(Code.ERROR, \"Spark \"",
                "+          + sparkInterpreter.getSparkVersion().toString() + \" is not supported\");",
                "+    }",
                "+",
                "+    sparkInterpreter.populateSparkWebUrl(context);",
                "+    sparkInterpreter.getZeppelinContext().setInterpreterContext(context);",
                "+    sqlc = sparkInterpreter.getSQLContext();",
                "+    SparkContext sc = sqlc.sparkContext();",
                "+    if (concurrentSQL()) {",
                "+      sc.setLocalProperty(\"spark.scheduler.pool\", \"fair\");",
                "+    } else {",
                "+      sc.setLocalProperty(\"spark.scheduler.pool\", null);",
                "+    }",
                "+",
                "+    String jobDesc = \"Started by: \" + Utils.getUserName(context.getAuthenticationInfo());",
                "+    sc.setJobGroup(Utils.buildJobGroupId(context), jobDesc, false);",
                "+    Object rdd = null;",
                "+    try {",
                "+      // method signature of sqlc.sql() is changed",
                "+      // from  def sql(sqlText: String): SchemaRDD (1.2 and prior)",
                "+      // to    def sql(sqlText: String): DataFrame (1.3 and later).",
                "+      // Therefore need to use reflection to keep binary compatibility for all spark versions.",
                "+      Method sqlMethod = sqlc.getClass().getMethod(\"sql\", String.class);",
                "+      rdd = sqlMethod.invoke(sqlc, st);",
                "+    } catch (InvocationTargetException ite) {",
                "+      if (Boolean.parseBoolean(getProperty(\"zeppelin.spark.sql.stacktrace\"))) {",
                "+        throw new InterpreterException(ite);",
                "+      }",
                "+      logger.error(\"Invocation target exception\", ite);",
                "+      String msg = ite.getTargetException().getMessage()",
                "+              + \"\\nset zeppelin.spark.sql.stacktrace = true to see full stacktrace\";",
                "+      return new InterpreterResult(Code.ERROR, msg);",
                "+    } catch (NoSuchMethodException | SecurityException | IllegalAccessException",
                "+        | IllegalArgumentException e) {",
                "+      throw new InterpreterException(e);",
                "+    }",
                "+",
                "+    String msg = sparkInterpreter.getZeppelinContext().showData(rdd);",
                "+    sc.clearJobGroup();",
                "+    return new InterpreterResult(Code.SUCCESS, msg);",
                "+  }",
                "+",
                "+  @Override",
                "+  public void cancel(InterpreterContext context) throws InterpreterException {",
                "+    SparkInterpreter sparkInterpreter = getSparkInterpreter();",
                "+    SQLContext sqlc = sparkInterpreter.getSQLContext();",
                "+    SparkContext sc = sqlc.sparkContext();",
                "+",
                "+    sc.cancelJobGroup(Utils.buildJobGroupId(context));",
                "+  }",
                "+",
                "+  @Override",
                "+  public FormType getFormType() {",
                "+    return FormType.SIMPLE;",
                "+  }",
                "+",
                "+",
                "+  @Override",
                "+  public int getProgress(InterpreterContext context) throws InterpreterException {",
                "+    SparkInterpreter sparkInterpreter = getSparkInterpreter();",
                "+    return sparkInterpreter.getProgress(context);",
                "+  }",
                "+",
                "+  @Override",
                "+  public Scheduler getScheduler() {",
                "+    if (concurrentSQL()) {",
                "+      int maxConcurrency = 10;",
                "+      return SchedulerFactory.singleton().createOrGetParallelScheduler(",
                "+          SparkSqlInterpreter.class.getName() + this.hashCode(), maxConcurrency);",
                "+    } else {",
                "+      // getSparkInterpreter() calls open() inside.",
                "+      // That means if SparkInterpreter is not opened, it'll wait until SparkInterpreter open.",
                "+      // In this moment UI displays 'READY' or 'FINISHED' instead of 'PENDING' or 'RUNNING'.",
                "+      // It's because of scheduler is not created yet, and scheduler is created by this function.",
                "+      // Therefore, we can still use getSparkInterpreter() here, but it's better and safe",
                "+      // to getSparkInterpreter without opening it.",
                "+",
                "+      Interpreter intp =",
                "+          getInterpreterInTheSameSessionByClassName(SparkInterpreter.class.getName());",
                "+      if (intp != null) {",
                "+        return intp.getScheduler();",
                "+      } else {",
                "+        return null;",
                "+      }",
                "+    }",
                "+  }",
                "+",
                "+  @Override",
                "+  public List<InterpreterCompletion> completion(String buf, int cursor,",
                "+      InterpreterContext interpreterContext) {",
                "+    return null;",
                "+  }",
                "+}",
                "diff --git a/spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkVersion.java b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkVersion.java",
                "new file mode 100644",
                "index 000000000..4b027989e",
                "--- /dev/null",
                "+++ b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkVersion.java",
                "@@ -0,0 +1,130 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.zeppelin.spark;",
                "+",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+/**",
                "+ * Provide reading comparing capability of spark version returned from SparkContext.version()",
                "+ */",
                "+public class SparkVersion {",
                "+  Logger logger = LoggerFactory.getLogger(SparkVersion.class);",
                "+",
                "+  public static final SparkVersion SPARK_1_0_0 = SparkVersion.fromVersionString(\"1.0.0\");",
                "+  public static final SparkVersion SPARK_1_1_0 = SparkVersion.fromVersionString(\"1.1.0\");",
                "+  public static final SparkVersion SPARK_1_2_0 = SparkVersion.fromVersionString(\"1.2.0\");",
                "+  public static final SparkVersion SPARK_1_3_0 = SparkVersion.fromVersionString(\"1.3.0\");",
                "+  public static final SparkVersion SPARK_1_4_0 = SparkVersion.fromVersionString(\"1.4.0\");",
                "+  public static final SparkVersion SPARK_1_5_0 = SparkVersion.fromVersionString(\"1.5.0\");",
                "+  public static final SparkVersion SPARK_1_6_0 = SparkVersion.fromVersionString(\"1.6.0\");",
                "+",
                "+  public static final SparkVersion SPARK_2_0_0 = SparkVersion.fromVersionString(\"2.0.0\");",
                "+  public static final SparkVersion SPARK_2_3_0 = SparkVersion.fromVersionString(\"2.3.0\");",
                "+",
                "+  public static final SparkVersion MIN_SUPPORTED_VERSION =  SPARK_1_0_0;",
                "+  public static final SparkVersion UNSUPPORTED_FUTURE_VERSION = SPARK_2_3_0;",
                "+",
                "+  private int version;",
                "+  private String versionString;",
                "+",
                "+  SparkVersion(String versionString) {",
                "+    this.versionString = versionString;",
                "+",
                "+    try {",
                "+      int pos = versionString.indexOf('-');",
                "+",
                "+      String numberPart = versionString;",
                "+      if (pos > 0) {",
                "+        numberPart = versionString.substring(0, pos);",
                "+      }",
                "+",
                "+      String versions[] = numberPart.split(\"\\\\.\");",
                "+      int major = Integer.parseInt(versions[0]);",
                "+      int minor = Integer.parseInt(versions[1]);",
                "+      int patch = Integer.parseInt(versions[2]);",
                "+      // version is always 5 digits. (e.g. 2.0.0 -> 20000, 1.6.2 -> 10602)",
                "+      version = Integer.parseInt(String.format(\"%d%02d%02d\", major, minor, patch));",
                "+    } catch (Exception e) {",
                "+      logger.error(\"Can not recognize Spark version \" + versionString +",
                "+          \". Assume it's a future release\", e);",
                "+",
                "+      // assume it is future release",
                "+      version = 99999;",
                "+    }",
                "+  }",
                "+",
                "+  public int toNumber() {",
                "+    return version;",
                "+  }",
                "+",
                "+  public String toString() {",
                "+    return versionString;",
                "+  }",
                "+",
                "+  public boolean isUnsupportedVersion() {",
                "+    return olderThan(MIN_SUPPORTED_VERSION) || newerThanEquals(UNSUPPORTED_FUTURE_VERSION);",
                "+  }",
                "+",
                "+  public static SparkVersion fromVersionString(String versionString) {",
                "+    return new SparkVersion(versionString);",
                "+  }",
                "+",
                "+  public boolean isPysparkSupported() {",
                "+    return this.newerThanEquals(SPARK_1_2_0);",
                "+  }",
                "+",
                "+  public boolean isSparkRSupported() {",
                "+    return this.newerThanEquals(SPARK_1_4_0);",
                "+  }",
                "+",
                "+  public boolean hasDataFrame() {",
                "+    return this.newerThanEquals(SPARK_1_4_0);",
                "+  }",
                "+",
                "+  public boolean getProgress1_0() {",
                "+    return this.olderThan(SPARK_1_1_0);",
                "+  }",
                "+",
                "+  public boolean oldLoadFilesMethodName() {",
                "+    return this.olderThan(SPARK_1_3_0);",
                "+  }",
                "+",
                "+  public boolean oldSqlContextImplicits() {",
                "+    return this.olderThan(SPARK_1_3_0);",
                "+  }",
                "+",
                "+  public boolean equals(Object versionToCompare) {",
                "+    return version == ((SparkVersion) versionToCompare).version;",
                "+  }",
                "+",
                "+  public boolean newerThan(SparkVersion versionToCompare) {",
                "+    return version > versionToCompare.version;",
                "+  }",
                "+",
                "+  public boolean newerThanEquals(SparkVersion versionToCompare) {",
                "+    return version >= versionToCompare.version;",
                "+  }",
                "+",
                "+  public boolean olderThan(SparkVersion versionToCompare) {",
                "+    return version < versionToCompare.version;",
                "+  }",
                "+",
                "+  public boolean olderThanEquals(SparkVersion versionToCompare) {",
                "+    return version <= versionToCompare.version;",
                "+  }",
                "+}",
                "diff --git a/spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkZeppelinContext.java b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkZeppelinContext.java",
                "new file mode 100644",
                "index 000000000..8847039ef",
                "--- /dev/null",
                "+++ b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkZeppelinContext.java",
                "@@ -0,0 +1,312 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.spark;",
                "+",
                "+import com.google.common.collect.Lists;",
                "+import org.apache.spark.SparkContext;",
                "+import org.apache.spark.sql.SQLContext;",
                "+import org.apache.spark.sql.catalyst.expressions.Attribute;",
                "+import org.apache.zeppelin.annotation.ZeppelinApi;",
                "+import org.apache.zeppelin.display.AngularObjectWatcher;",
                "+import org.apache.zeppelin.display.Input;",
                "+import org.apache.zeppelin.display.ui.OptionInput;",
                "+import org.apache.zeppelin.interpreter.*;",
                "+import scala.Tuple2;",
                "+import scala.Unit;",
                "+",
                "+import java.lang.reflect.InvocationTargetException;",
                "+import java.lang.reflect.Method;",
                "+import java.util.*;",
                "+",
                "+import static scala.collection.JavaConversions.asJavaCollection;",
                "+import static scala.collection.JavaConversions.asJavaIterable;",
                "+import static scala.collection.JavaConversions.collectionAsScalaIterable;",
                "+",
                "+/**",
                "+ * ZeppelinContext for Spark",
                "+ */",
                "+public class SparkZeppelinContext extends BaseZeppelinContext {",
                "+",
                "+  private SparkContext sc;",
                "+  private List<Class> supportedClasses;",
                "+  private Map<String, String> interpreterClassMap;",
                "+",
                "+  public SparkZeppelinContext(",
                "+      SparkContext sc,",
                "+      InterpreterHookRegistry hooks,",
                "+      int maxResult) {",
                "+    super(hooks, maxResult);",
                "+    this.sc = sc;",
                "+",
                "+    interpreterClassMap = new HashMap();",
                "+    interpreterClassMap.put(\"spark\", \"org.apache.zeppelin.spark.SparkInterpreter\");",
                "+    interpreterClassMap.put(\"sql\", \"org.apache.zeppelin.spark.SparkSqlInterpreter\");",
                "+    interpreterClassMap.put(\"dep\", \"org.apache.zeppelin.spark.DepInterpreter\");",
                "+    interpreterClassMap.put(\"pyspark\", \"org.apache.zeppelin.spark.PySparkInterpreter\");",
                "+",
                "+    this.supportedClasses = new ArrayList<>();",
                "+    try {",
                "+      supportedClasses.add(this.getClass().forName(\"org.apache.spark.sql.Dataset\"));",
                "+    } catch (ClassNotFoundException e) {",
                "+    }",
                "+",
                "+    try {",
                "+      supportedClasses.add(this.getClass().forName(\"org.apache.spark.sql.DataFrame\"));",
                "+    } catch (ClassNotFoundException e) {",
                "+    }",
                "+",
                "+    try {",
                "+      supportedClasses.add(this.getClass().forName(\"org.apache.spark.sql.SchemaRDD\"));",
                "+    } catch (ClassNotFoundException e) {",
                "+    }",
                "+",
                "+    if (supportedClasses.isEmpty()) {",
                "+      throw new RuntimeException(\"Can not load Dataset/DataFrame/SchemaRDD class\");",
                "+    }",
                "+  }",
                "+",
                "+  @Override",
                "+  public List<Class> getSupportedClasses() {",
                "+    return supportedClasses;",
                "+  }",
                "+",
                "+  @Override",
                "+  public Map<String, String> getInterpreterClassMap() {",
                "+    return interpreterClassMap;",
                "+  }",
                "+",
                "+  @Override",
                "+  public String showData(Object df) {",
                "+    Object[] rows = null;",
                "+    Method take;",
                "+    String jobGroup = Utils.buildJobGroupId(interpreterContext);",
                "+    sc.setJobGroup(jobGroup, \"Zeppelin\", false);",
                "+",
                "+    try {",
                "+      // convert it to DataFrame if it is Dataset, as we will iterate all the records",
                "+      // and assume it is type Row.",
                "+      if (df.getClass().getCanonicalName().equals(\"org.apache.spark.sql.Dataset\")) {",
                "+        Method convertToDFMethod = df.getClass().getMethod(\"toDF\");",
                "+        df = convertToDFMethod.invoke(df);",
                "+      }",
                "+      take = df.getClass().getMethod(\"take\", int.class);",
                "+      rows = (Object[]) take.invoke(df, maxResult + 1);",
                "+    } catch (NoSuchMethodException | SecurityException | IllegalAccessException",
                "+        | IllegalArgumentException | InvocationTargetException | ClassCastException e) {",
                "+      sc.clearJobGroup();",
                "+      throw new RuntimeException(e);",
                "+    }",
                "+",
                "+    List<Attribute> columns = null;",
                "+    // get field names",
                "+    try {",
                "+      // Use reflection because of classname returned by queryExecution changes from",
                "+      // Spark <1.5.2 org.apache.spark.sql.SQLContext$QueryExecution",
                "+      // Spark 1.6.0> org.apache.spark.sql.hive.HiveContext$QueryExecution",
                "+      Object qe = df.getClass().getMethod(\"queryExecution\").invoke(df);",
                "+      Object a = qe.getClass().getMethod(\"analyzed\").invoke(qe);",
                "+      scala.collection.Seq seq = (scala.collection.Seq) a.getClass().getMethod(\"output\").invoke(a);",
                "+",
                "+      columns = (List<Attribute>) scala.collection.JavaConverters.seqAsJavaListConverter(seq)",
                "+          .asJava();",
                "+    } catch (NoSuchMethodException | SecurityException | IllegalAccessException",
                "+        | IllegalArgumentException | InvocationTargetException e) {",
                "+      throw new RuntimeException(e);",
                "+    }",
                "+",
                "+    StringBuilder msg = new StringBuilder();",
                "+    msg.append(\"%table \");",
                "+    for (Attribute col : columns) {",
                "+      msg.append(col.name() + \"\\t\");",
                "+    }",
                "+    String trim = msg.toString().trim();",
                "+    msg = new StringBuilder(trim);",
                "+    msg.append(\"\\n\");",
                "+",
                "+    // ArrayType, BinaryType, BooleanType, ByteType, DecimalType, DoubleType, DynamicType,",
                "+    // FloatType, FractionalType, IntegerType, IntegralType, LongType, MapType, NativeType,",
                "+    // NullType, NumericType, ShortType, StringType, StructType",
                "+",
                "+    try {",
                "+      for (int r = 0; r < maxResult && r < rows.length; r++) {",
                "+        Object row = rows[r];",
                "+        Method isNullAt = row.getClass().getMethod(\"isNullAt\", int.class);",
                "+        Method apply = row.getClass().getMethod(\"apply\", int.class);",
                "+",
                "+        for (int i = 0; i < columns.size(); i++) {",
                "+          if (!(Boolean) isNullAt.invoke(row, i)) {",
                "+            msg.append(apply.invoke(row, i).toString());",
                "+          } else {",
                "+            msg.append(\"null\");",
                "+          }",
                "+          if (i != columns.size() - 1) {",
                "+            msg.append(\"\\t\");",
                "+          }",
                "+        }",
                "+        msg.append(\"\\n\");",
                "+      }",
                "+    } catch (NoSuchMethodException | SecurityException | IllegalAccessException",
                "+        | IllegalArgumentException | InvocationTargetException e) {",
                "+      throw new RuntimeException(e);",
                "+    }",
                "+",
                "+    if (rows.length > maxResult) {",
                "+      msg.append(\"\\n\");",
                "+      msg.append(ResultMessages.getExceedsLimitRowsMessage(maxResult,",
                "+          SparkSqlInterpreter.MAX_RESULTS));",
                "+    }",
                "+",
                "+    sc.clearJobGroup();",
                "+    return msg.toString();",
                "+  }",
                "+",
                "+  @ZeppelinApi",
                "+  public Object select(String name, scala.collection.Iterable<Tuple2<Object, String>> options) {",
                "+    return select(name, \"\", options);",
                "+  }",
                "+",
                "+  @ZeppelinApi",
                "+  public Object select(String name, Object defaultValue,",
                "+                       scala.collection.Iterable<Tuple2<Object, String>> options) {",
                "+    return select(name, defaultValue, tuplesToParamOptions(options));",
                "+  }",
                "+",
                "+  @ZeppelinApi",
                "+  public scala.collection.Seq<Object> checkbox(",
                "+      String name,",
                "+      scala.collection.Iterable<Tuple2<Object, String>> options) {",
                "+    List<Object> allChecked = new LinkedList<>();",
                "+    for (Tuple2<Object, String> option : asJavaIterable(options)) {",
                "+      allChecked.add(option._1());",
                "+    }",
                "+    return checkbox(name, collectionAsScalaIterable(allChecked), options);",
                "+  }",
                "+",
                "+  @ZeppelinApi",
                "+  public scala.collection.Seq<Object> checkbox(",
                "+      String name,",
                "+      scala.collection.Iterable<Object> defaultChecked,",
                "+      scala.collection.Iterable<Tuple2<Object, String>> options) {",
                "+    List<Object> defaultCheckedList = Lists.newArrayList(asJavaIterable(defaultChecked).iterator());",
                "+    Collection<Object> checkbox = checkbox(name, defaultCheckedList, tuplesToParamOptions(options));",
                "+    List<Object> checkboxList = Arrays.asList(checkbox.toArray());",
                "+    return scala.collection.JavaConversions.asScalaBuffer(checkboxList).toSeq();",
                "+  }",
                "+",
                "+  @ZeppelinApi",
                "+  public Object noteSelect(String name, scala.collection.Iterable<Tuple2<Object, String>> options) {",
                "+    return noteSelect(name, \"\", options);",
                "+  }",
                "+",
                "+  @ZeppelinApi",
                "+  public Object noteSelect(String name, Object defaultValue,",
                "+                       scala.collection.Iterable<Tuple2<Object, String>> options) {",
                "+    return noteSelect(name, defaultValue, tuplesToParamOptions(options));",
                "+  }",
                "+",
                "+  @ZeppelinApi",
                "+  public scala.collection.Seq<Object> noteCheckbox(",
                "+      String name,",
                "+      scala.collection.Iterable<Tuple2<Object, String>> options) {",
                "+    List<Object> allChecked = new LinkedList<>();",
                "+    for (Tuple2<Object, String> option : asJavaIterable(options)) {",
                "+      allChecked.add(option._1());",
                "+    }",
                "+    return noteCheckbox(name, collectionAsScalaIterable(allChecked), options);",
                "+  }",
                "+",
                "+  @ZeppelinApi",
                "+  public scala.collection.Seq<Object> noteCheckbox(",
                "+      String name,",
                "+      scala.collection.Iterable<Object> defaultChecked,",
                "+      scala.collection.Iterable<Tuple2<Object, String>> options) {",
                "+    List<Object> defaultCheckedList = Lists.newArrayList(asJavaIterable(defaultChecked).iterator());",
                "+    Collection<Object> checkbox = noteCheckbox(name, defaultCheckedList,",
                "+        tuplesToParamOptions(options));",
                "+    List<Object> checkboxList = Arrays.asList(checkbox.toArray());",
                "+    return scala.collection.JavaConversions.asScalaBuffer(checkboxList).toSeq();",
                "+  }",
                "+",
                "+  private OptionInput.ParamOption[] tuplesToParamOptions(",
                "+      scala.collection.Iterable<Tuple2<Object, String>> options) {",
                "+    int n = options.size();",
                "+    OptionInput.ParamOption[] paramOptions = new OptionInput.ParamOption[n];",
                "+    Iterator<Tuple2<Object, String>> it = asJavaIterable(options).iterator();",
                "+",
                "+    int i = 0;",
                "+    while (it.hasNext()) {",
                "+      Tuple2<Object, String> valueAndDisplayValue = it.next();",
                "+      paramOptions[i++] = new OptionInput.ParamOption(valueAndDisplayValue._1(),",
                "+          valueAndDisplayValue._2());",
                "+    }",
                "+",
                "+    return paramOptions;",
                "+  }",
                "+",
                "+  @ZeppelinApi",
                "+  public void angularWatch(String name,",
                "+                           final scala.Function2<Object, Object, Unit> func) {",
                "+    angularWatch(name, interpreterContext.getNoteId(), func);",
                "+  }",
                "+",
                "+  @Deprecated",
                "+  public void angularWatchGlobal(String name,",
                "+                                 final scala.Function2<Object, Object, Unit> func) {",
                "+    angularWatch(name, null, func);",
                "+  }",
                "+",
                "+  @ZeppelinApi",
                "+  public void angularWatch(",
                "+      String name,",
                "+      final scala.Function3<Object, Object, InterpreterContext, Unit> func) {",
                "+    angularWatch(name, interpreterContext.getNoteId(), func);",
                "+  }",
                "+",
                "+  @Deprecated",
                "+  public void angularWatchGlobal(",
                "+      String name,",
                "+      final scala.Function3<Object, Object, InterpreterContext, Unit> func) {",
                "+    angularWatch(name, null, func);",
                "+  }",
                "+",
                "+  private void angularWatch(String name, String noteId,",
                "+                            final scala.Function2<Object, Object, Unit> func) {",
                "+    AngularObjectWatcher w = new AngularObjectWatcher(getInterpreterContext()) {",
                "+      @Override",
                "+      public void watch(Object oldObject, Object newObject,",
                "+                        InterpreterContext context) {",
                "+        func.apply(newObject, newObject);",
                "+      }",
                "+    };",
                "+    angularWatch(name, noteId, w);",
                "+  }",
                "+",
                "+  private void angularWatch(",
                "+      String name,",
                "+      String noteId,",
                "+      final scala.Function3<Object, Object, InterpreterContext, Unit> func) {",
                "+    AngularObjectWatcher w = new AngularObjectWatcher(getInterpreterContext()) {",
                "+      @Override",
                "+      public void watch(Object oldObject, Object newObject,",
                "+                        InterpreterContext context) {",
                "+        func.apply(oldObject, newObject, context);",
                "+      }",
                "+    };",
                "+    angularWatch(name, noteId, w);",
                "+  }",
                "+}",
                "diff --git a/spark/interpreter/src/main/java/org/apache/zeppelin/spark/Utils.java b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/Utils.java",
                "new file mode 100644",
                "index 000000000..82bf2106e",
                "--- /dev/null",
                "+++ b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/Utils.java",
                "@@ -0,0 +1,177 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.spark;",
                "+",
                "+import org.apache.zeppelin.interpreter.InterpreterContext;",
                "+import org.apache.zeppelin.user.AuthenticationInfo;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+import java.lang.reflect.Constructor;",
                "+import java.lang.reflect.InvocationTargetException;",
                "+import java.util.Properties;",
                "+import java.util.regex.Matcher;",
                "+import java.util.regex.Pattern;",
                "+",
                "+/**",
                "+ * Utility and helper functions for the Spark Interpreter",
                "+ */",
                "+class Utils {",
                "+  public static Logger logger = LoggerFactory.getLogger(Utils.class);",
                "+  private static final String SCALA_COMPILER_VERSION = evaluateScalaCompilerVersion();",
                "+",
                "+  static Object invokeMethod(Object o, String name) {",
                "+    return invokeMethod(o, name, new Class[]{}, new Object[]{});",
                "+  }",
                "+",
                "+  static Object invokeMethod(Object o, String name, Class<?>[] argTypes, Object[] params) {",
                "+    try {",
                "+      return o.getClass().getMethod(name, argTypes).invoke(o, params);",
                "+    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {",
                "+      logger.error(e.getMessage(), e);",
                "+    }",
                "+    return null;",
                "+  }",
                "+",
                "+  static Object invokeStaticMethod(Class<?> c, String name, Class<?>[] argTypes, Object[] params) {",
                "+    try {",
                "+      return c.getMethod(name, argTypes).invoke(null, params);",
                "+    } catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException e) {",
                "+      logger.error(e.getMessage(), e);",
                "+    }",
                "+    return null;",
                "+  }",
                "+",
                "+  static Object invokeStaticMethod(Class<?> c, String name) {",
                "+    return invokeStaticMethod(c, name, new Class[]{}, new Object[]{});",
                "+  }",
                "+",
                "+  static Class<?> findClass(String name) {",
                "+    return findClass(name, false);",
                "+  }",
                "+",
                "+  static Class<?> findClass(String name, boolean silence) {",
                "+    try {",
                "+      return Class.forName(name);",
                "+    } catch (ClassNotFoundException e) {",
                "+      if (!silence) {",
                "+        logger.error(e.getMessage(), e);",
                "+      }",
                "+      return null;",
                "+    }",
                "+  }",
                "+",
                "+  static Object instantiateClass(String name, Class<?>[] argTypes, Object[] params) {",
                "+    try {",
                "+      Constructor<?> constructor = Utils.class.getClassLoader()",
                "+              .loadClass(name).getConstructor(argTypes);",
                "+      return constructor.newInstance(params);",
                "+    } catch (NoSuchMethodException | ClassNotFoundException | IllegalAccessException |",
                "+      InstantiationException | InvocationTargetException e) {",
                "+      logger.error(e.getMessage(), e);",
                "+    }",
                "+    return null;",
                "+  }",
                "+",
                "+  // function works after intp is initialized",
                "+  static boolean isScala2_10() {",
                "+    try {",
                "+      Class.forName(\"org.apache.spark.repl.SparkIMain\");",
                "+      return true;",
                "+    } catch (ClassNotFoundException e) {",
                "+      return false;",
                "+    } catch (IncompatibleClassChangeError e) {",
                "+      return false;",
                "+    }",
                "+  }",
                "+",
                "+  static boolean isScala2_11() {",
                "+    return !isScala2_10();",
                "+  }",
                "+  ",
                "+  static boolean isCompilerAboveScala2_11_7() {",
                "+    if (isScala2_10() || SCALA_COMPILER_VERSION == null) {",
                "+      return false;",
                "+    }",
                "+    Pattern p = Pattern.compile(\"([0-9]+)[.]([0-9]+)[.]([0-9]+)\");",
                "+    Matcher m = p.matcher(SCALA_COMPILER_VERSION);",
                "+    if (m.matches()) {",
                "+      int major = Integer.parseInt(m.group(1));",
                "+      int minor = Integer.parseInt(m.group(2));",
                "+      int bugfix = Integer.parseInt(m.group(3));",
                "+      return (major > 2 || (major == 2 && minor > 11) || (major == 2 && minor == 11 && bugfix > 7));",
                "+    }",
                "+    return false;",
                "+  }",
                "+",
                "+  private static String evaluateScalaCompilerVersion() {",
                "+    String version = null;",
                "+    try {",
                "+      Properties p = new Properties();",
                "+      Class<?> completionClass = findClass(\"scala.tools.nsc.interpreter.JLineCompletion\");",
                "+      if (completionClass != null) {",
                "+        try (java.io.InputStream in = completionClass.getClass()",
                "+          .getResourceAsStream(\"/compiler.properties\")) {",
                "+          p.load(in);",
                "+          version = p.getProperty(\"version.number\");",
                "+        } catch (java.io.IOException e) {",
                "+          logger.error(\"Failed to evaluate Scala compiler version\", e);",
                "+        }",
                "+      }",
                "+    } catch (RuntimeException e) {",
                "+      logger.error(\"Failed to evaluate Scala compiler version\", e);",
                "+    }",
                "+    return version;",
                "+  }",
                "+",
                "+  static boolean isSpark2() {",
                "+    try {",
                "+      Class.forName(\"org.apache.spark.sql.SparkSession\");",
                "+      return true;",
                "+    } catch (ClassNotFoundException e) {",
                "+      return false;",
                "+    }",
                "+  }",
                "+  ",
                "+  public static String buildJobGroupId(InterpreterContext context) {",
                "+    return \"zeppelin-\" + context.getNoteId() + \"-\" + context.getParagraphId();",
                "+  }",
                "+",
                "+  public static String getNoteId(String jobgroupId) {",
                "+    int indexOf = jobgroupId.indexOf(\"-\");",
                "+    int secondIndex = jobgroupId.indexOf(\"-\", indexOf + 1);",
                "+    return jobgroupId.substring(indexOf + 1, secondIndex);",
                "+  }",
                "+",
                "+  public static String getParagraphId(String jobgroupId) {",
                "+    int indexOf = jobgroupId.indexOf(\"-\");",
                "+    int secondIndex = jobgroupId.indexOf(\"-\", indexOf + 1);",
                "+    return jobgroupId.substring(secondIndex + 1, jobgroupId.length());",
                "+  }",
                "+",
                "+  public static String getUserName(AuthenticationInfo info) {",
                "+    String uName = \"\";",
                "+    if (info != null) {",
                "+      uName = info.getUser();",
                "+    }",
                "+    if (uName == null || uName.isEmpty()) {",
                "+      uName = \"anonymous\";",
                "+    }",
                "+    return uName;",
                "+  }",
                "+}",
                "diff --git a/spark/interpreter/src/main/java/org/apache/zeppelin/spark/ZeppelinR.java b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/ZeppelinR.java",
                "new file mode 100644",
                "index 000000000..130d84997",
                "--- /dev/null",
                "+++ b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/ZeppelinR.java",
                "@@ -0,0 +1,394 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.zeppelin.spark;",
                "+",
                "+import org.apache.commons.exec.*;",
                "+import org.apache.commons.exec.environment.EnvironmentUtils;",
                "+import org.apache.commons.io.IOUtils;",
                "+import org.apache.zeppelin.interpreter.InterpreterException;",
                "+import org.apache.zeppelin.interpreter.InterpreterOutput;",
                "+import org.apache.zeppelin.interpreter.InterpreterOutputListener;",
                "+import org.apache.zeppelin.interpreter.InterpreterResultMessageOutput;",
                "+import org.apache.zeppelin.interpreter.util.InterpreterOutputStream;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+import java.io.*;",
                "+import java.util.Collections;",
                "+import java.util.HashMap;",
                "+import java.util.Map;",
                "+",
                "+/**",
                "+ * R repl interaction",
                "+ */",
                "+public class ZeppelinR implements ExecuteResultHandler {",
                "+  Logger logger = LoggerFactory.getLogger(ZeppelinR.class);",
                "+  private final String rCmdPath;",
                "+  private final SparkVersion sparkVersion;",
                "+  private DefaultExecutor executor;",
                "+  private InterpreterOutputStream outputStream;",
                "+  private PipedOutputStream input;",
                "+  private final String scriptPath;",
                "+  private final String libPath;",
                "+  static Map<Integer, ZeppelinR> zeppelinR = Collections.synchronizedMap(",
                "+      new HashMap<Integer, ZeppelinR>());",
                "+",
                "+  private InterpreterOutput initialOutput;",
                "+  private final int port;",
                "+  private boolean rScriptRunning;",
                "+",
                "+  /**",
                "+   * To be notified R repl initialization",
                "+   */",
                "+  boolean rScriptInitialized = false;",
                "+  Integer rScriptInitializeNotifier = new Integer(0);",
                "+",
                "+  /**",
                "+   * Request to R repl",
                "+   */",
                "+  Request rRequestObject = null;",
                "+  Integer rRequestNotifier = new Integer(0);",
                "+",
                "+  /**",
                "+   * Request object",
                "+   *",
                "+   * type : \"eval\", \"set\", \"get\"",
                "+   * stmt : statement to evaluate when type is \"eval\"",
                "+   *        key when type is \"set\" or \"get\"",
                "+   * value : value object when type is \"put\"",
                "+   */",
                "+  public static class Request {",
                "+    String type;",
                "+    String stmt;",
                "+    Object value;",
                "+",
                "+    public Request(String type, String stmt, Object value) {",
                "+      this.type = type;",
                "+      this.stmt = stmt;",
                "+      this.value = value;",
                "+    }",
                "+",
                "+    public String getType() {",
                "+      return type;",
                "+    }",
                "+",
                "+    public String getStmt() {",
                "+      return stmt;",
                "+    }",
                "+",
                "+    public Object getValue() {",
                "+      return value;",
                "+    }",
                "+  }",
                "+",
                "+  /**",
                "+   * Response from R repl",
                "+   */",
                "+  Object rResponseValue = null;",
                "+  boolean rResponseError = false;",
                "+  Integer rResponseNotifier = new Integer(0);",
                "+",
                "+  /**",
                "+   * Create ZeppelinR instance",
                "+   * @param rCmdPath R repl commandline path",
                "+   * @param libPath sparkr library path",
                "+   */",
                "+  public ZeppelinR(String rCmdPath, String libPath, int sparkRBackendPort,",
                "+      SparkVersion sparkVersion) {",
                "+    this.rCmdPath = rCmdPath;",
                "+    this.libPath = libPath;",
                "+    this.sparkVersion = sparkVersion;",
                "+    this.port = sparkRBackendPort;",
                "+    try {",
                "+      File scriptFile = File.createTempFile(\"zeppelin_sparkr-\", \".R\");",
                "+      scriptPath = scriptFile.getAbsolutePath();",
                "+    } catch (IOException e) {",
                "+      throw new RuntimeException(e);",
                "+    }",
                "+  }",
                "+",
                "+  /**",
                "+   * Start R repl",
                "+   * @throws IOException",
                "+   */",
                "+  public void open() throws IOException, InterpreterException {",
                "+    createRScript();",
                "+",
                "+    zeppelinR.put(hashCode(), this);",
                "+",
                "+    CommandLine cmd = CommandLine.parse(rCmdPath);",
                "+    cmd.addArgument(\"--no-save\");",
                "+    cmd.addArgument(\"--no-restore\");",
                "+    cmd.addArgument(\"-f\");",
                "+    cmd.addArgument(scriptPath);",
                "+    cmd.addArgument(\"--args\");",
                "+    cmd.addArgument(Integer.toString(hashCode()));",
                "+    cmd.addArgument(Integer.toString(port));",
                "+    cmd.addArgument(libPath);",
                "+    cmd.addArgument(Integer.toString(sparkVersion.toNumber()));",
                "+    ",
                "+    // dump out the R command to facilitate manually running it, e.g. for fault diagnosis purposes",
                "+    logger.debug(cmd.toString());",
                "+",
                "+    executor = new DefaultExecutor();",
                "+    outputStream = new InterpreterOutputStream(logger);",
                "+",
                "+    input = new PipedOutputStream();",
                "+    PipedInputStream in = new PipedInputStream(input);",
                "+",
                "+    PumpStreamHandler streamHandler = new PumpStreamHandler(outputStream, outputStream, in);",
                "+    executor.setWatchdog(new ExecuteWatchdog(ExecuteWatchdog.INFINITE_TIMEOUT));",
                "+    executor.setStreamHandler(streamHandler);",
                "+    Map env = EnvironmentUtils.getProcEnvironment();",
                "+",
                "+",
                "+    initialOutput = new InterpreterOutput(null);",
                "+    outputStream.setInterpreterOutput(initialOutput);",
                "+    executor.execute(cmd, env, this);",
                "+    rScriptRunning = true;",
                "+",
                "+    // flush output",
                "+    eval(\"cat('')\");",
                "+  }",
                "+",
                "+  /**",
                "+   * Evaluate expression",
                "+   * @param expr",
                "+   * @return",
                "+   */",
                "+  public Object eval(String expr) throws InterpreterException {",
                "+    synchronized (this) {",
                "+      rRequestObject = new Request(\"eval\", expr, null);",
                "+      return request();",
                "+    }",
                "+  }",
                "+",
                "+  /**",
                "+   * assign value to key",
                "+   * @param key",
                "+   * @param value",
                "+   */",
                "+  public void set(String key, Object value) throws InterpreterException {",
                "+    synchronized (this) {",
                "+      rRequestObject = new Request(\"set\", key, value);",
                "+      request();",
                "+    }",
                "+  }",
                "+",
                "+  /**",
                "+   * get value of key",
                "+   * @param key",
                "+   * @return",
                "+   */",
                "+  public Object get(String key) throws InterpreterException {",
                "+    synchronized (this) {",
                "+      rRequestObject = new Request(\"get\", key, null);",
                "+      return request();",
                "+    }",
                "+  }",
                "+",
                "+  /**",
                "+   * get value of key, as a string",
                "+   * @param key",
                "+   * @return",
                "+   */",
                "+  public String getS0(String key) throws InterpreterException {",
                "+    synchronized (this) {",
                "+      rRequestObject = new Request(\"getS\", key, null);",
                "+      return (String) request();",
                "+    }",
                "+  }",
                "+",
                "+  /**",
                "+   * Send request to r repl and return response",
                "+   * @return responseValue",
                "+   */",
                "+  private Object request() throws RuntimeException, InterpreterException {",
                "+    if (!rScriptRunning) {",
                "+      throw new RuntimeException(\"r repl is not running\");",
                "+    }",
                "+",
                "+    // wait for rscript initialized",
                "+    if (!rScriptInitialized) {",
                "+      waitForRScriptInitialized();",
                "+    }",
                "+",
                "+    rResponseValue = null;",
                "+",
                "+    synchronized (rRequestNotifier) {",
                "+      rRequestNotifier.notify();",
                "+    }",
                "+",
                "+    Object respValue = null;",
                "+    synchronized (rResponseNotifier) {",
                "+      while (rResponseValue == null && rScriptRunning) {",
                "+        try {",
                "+          rResponseNotifier.wait(1000);",
                "+        } catch (InterruptedException e) {",
                "+          logger.error(e.getMessage(), e);",
                "+        }",
                "+      }",
                "+      respValue = rResponseValue;",
                "+      rResponseValue = null;",
                "+    }",
                "+",
                "+    if (rResponseError) {",
                "+      throw new RuntimeException(respValue.toString());",
                "+    } else {",
                "+      return respValue;",
                "+    }",
                "+  }",
                "+",
                "+  /**",
                "+   * Wait until src/main/resources/R/zeppelin_sparkr.R is initialized",
                "+   * and call onScriptInitialized()",
                "+   *",
                "+   * @throws InterpreterException",
                "+   */",
                "+  private void waitForRScriptInitialized() throws InterpreterException {",
                "+    synchronized (rScriptInitializeNotifier) {",
                "+      long startTime = System.nanoTime();",
                "+      while (rScriptInitialized == false &&",
                "+          rScriptRunning &&",
                "+          System.nanoTime() - startTime < 10L * 1000 * 1000000) {",
                "+        try {",
                "+          rScriptInitializeNotifier.wait(1000);",
                "+        } catch (InterruptedException e) {",
                "+          logger.error(e.getMessage(), e);",
                "+        }",
                "+      }",
                "+    }",
                "+",
                "+    String errorMessage = \"\";",
                "+    try {",
                "+      initialOutput.flush();",
                "+      errorMessage = new String(initialOutput.toByteArray());",
                "+    } catch (IOException e) {",
                "+      e.printStackTrace();",
                "+    }",
                "+",
                "+    if (rScriptInitialized == false) {",
                "+      throw new InterpreterException(\"sparkr is not responding \" + errorMessage);",
                "+    }",
                "+  }",
                "+",
                "+  /**",
                "+   * invoked by src/main/resources/R/zeppelin_sparkr.R",
                "+   * @return",
                "+   */",
                "+  public Request getRequest() {",
                "+    synchronized (rRequestNotifier) {",
                "+      while (rRequestObject == null) {",
                "+        try {",
                "+          rRequestNotifier.wait(1000);",
                "+        } catch (InterruptedException e) {",
                "+          logger.error(e.getMessage(), e);",
                "+        }",
                "+      }",
                "+",
                "+      Request req = rRequestObject;",
                "+      rRequestObject = null;",
                "+      return req;",
                "+    }",
                "+  }",
                "+",
                "+  /**",
                "+   * invoked by src/main/resources/R/zeppelin_sparkr.R",
                "+   * @param value",
                "+   * @param error",
                "+   */",
                "+  public void setResponse(Object value, boolean error) {",
                "+    synchronized (rResponseNotifier) {",
                "+      rResponseValue = value;",
                "+      rResponseError = error;",
                "+      rResponseNotifier.notify();",
                "+    }",
                "+  }",
                "+",
                "+  /**",
                "+   * invoked by src/main/resources/R/zeppelin_sparkr.R",
                "+   */",
                "+  public void onScriptInitialized() {",
                "+    synchronized (rScriptInitializeNotifier) {",
                "+      rScriptInitialized = true;",
                "+      rScriptInitializeNotifier.notifyAll();",
                "+    }",
                "+  }",
                "+",
                "+  /**",
                "+   * Create R script in tmp dir",
                "+   */",
                "+  private void createRScript() throws InterpreterException {",
                "+    ClassLoader classLoader = getClass().getClassLoader();",
                "+    File out = new File(scriptPath);",
                "+",
                "+    if (out.exists() && out.isDirectory()) {",
                "+      throw new InterpreterException(\"Can't create r script \" + out.getAbsolutePath());",
                "+    }",
                "+",
                "+    try {",
                "+      FileOutputStream outStream = new FileOutputStream(out);",
                "+      IOUtils.copy(",
                "+          classLoader.getResourceAsStream(\"R/zeppelin_sparkr.R\"),",
                "+          outStream);",
                "+      outStream.close();",
                "+    } catch (IOException e) {",
                "+      throw new InterpreterException(e);",
                "+    }",
                "+",
                "+    logger.info(\"File {} created\", scriptPath);",
                "+  }",
                "+",
                "+  /**",
                "+   * Terminate this R repl",
                "+   */",
                "+  public void close() {",
                "+    executor.getWatchdog().destroyProcess();",
                "+    new File(scriptPath).delete();",
                "+    zeppelinR.remove(hashCode());",
                "+  }",
                "+",
                "+  /**",
                "+   * Get instance",
                "+   * This method will be invoded from zeppelin_sparkr.R",
                "+   * @param hashcode",
                "+   * @return",
                "+   */",
                "+  public static ZeppelinR getZeppelinR(int hashcode) {",
                "+    return zeppelinR.get(hashcode);",
                "+  }",
                "+",
                "+  /**",
                "+   * Pass InterpreterOutput to capture the repl output",
                "+   * @param out",
                "+   */",
                "+  public void setInterpreterOutput(InterpreterOutput out) {",
                "+    outputStream.setInterpreterOutput(out);",
                "+  }",
                "+",
                "+  @Override",
                "+  public void onProcessComplete(int i) {",
                "+    logger.info(\"process complete {}\", i);",
                "+    rScriptRunning = false;",
                "+  }",
                "+",
                "+  @Override",
                "+  public void onProcessFailed(ExecuteException e) {",
                "+    logger.error(e.getMessage(), e);",
                "+    rScriptRunning = false;",
                "+  }",
                "+}",
                "diff --git a/spark/interpreter/src/main/java/org/apache/zeppelin/spark/ZeppelinRContext.java b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/ZeppelinRContext.java",
                "new file mode 100644",
                "index 000000000..80ea03b9f",
                "--- /dev/null",
                "+++ b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/ZeppelinRContext.java",
                "@@ -0,0 +1,69 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.spark;",
                "+",
                "+import org.apache.spark.SparkContext;",
                "+import org.apache.spark.api.java.JavaSparkContext;",
                "+import org.apache.spark.sql.SQLContext;",
                "+",
                "+/**",
                "+ * Contains the Spark and Zeppelin Contexts made available to SparkR.",
                "+ */",
                "+public class ZeppelinRContext {",
                "+  private static SparkContext sparkContext;",
                "+  private static SQLContext sqlContext;",
                "+  private static SparkZeppelinContext zeppelinContext;",
                "+  private static Object sparkSession;",
                "+  private static JavaSparkContext javaSparkContext;",
                "+",
                "+  public static void setSparkContext(SparkContext sparkContext) {",
                "+    ZeppelinRContext.sparkContext = sparkContext;",
                "+  }",
                "+",
                "+  public static void setZeppelinContext(SparkZeppelinContext zeppelinContext) {",
                "+    ZeppelinRContext.zeppelinContext = zeppelinContext;",
                "+  }",
                "+",
                "+  public static void setSqlContext(SQLContext sqlContext) {",
                "+    ZeppelinRContext.sqlContext = sqlContext;",
                "+  }",
                "+",
                "+  public static void setSparkSession(Object sparkSession) {",
                "+    ZeppelinRContext.sparkSession = sparkSession;",
                "+  }",
                "+",
                "+  public static SparkContext getSparkContext() {",
                "+    return sparkContext;",
                "+  }",
                "+",
                "+  public static SQLContext getSqlContext() {",
                "+    return sqlContext;",
                "+  }",
                "+",
                "+  public static SparkZeppelinContext getZeppelinContext() {",
                "+    return zeppelinContext;",
                "+  }",
                "+",
                "+  public static Object getSparkSession() {",
                "+    return sparkSession;",
                "+  }",
                "+",
                "+  public static void setJavaSparkContext(JavaSparkContext jsc) { javaSparkContext = jsc; }",
                "+",
                "+  public static JavaSparkContext getJavaSparkContext() { return javaSparkContext; }",
                "+}",
                "diff --git a/spark/interpreter/src/main/java/org/apache/zeppelin/spark/dep/SparkDependencyContext.java b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/dep/SparkDependencyContext.java",
                "new file mode 100644",
                "index 000000000..0235fc666",
                "--- /dev/null",
                "+++ b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/dep/SparkDependencyContext.java",
                "@@ -0,0 +1,181 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.spark.dep;",
                "+",
                "+import java.io.File;",
                "+import java.net.MalformedURLException;",
                "+import java.util.LinkedList;",
                "+import java.util.List;",
                "+",
                "+import org.apache.zeppelin.dep.Booter;",
                "+import org.apache.zeppelin.dep.Dependency;",
                "+import org.apache.zeppelin.dep.Repository;",
                "+",
                "+import org.sonatype.aether.RepositorySystem;",
                "+import org.sonatype.aether.RepositorySystemSession;",
                "+import org.sonatype.aether.artifact.Artifact;",
                "+import org.sonatype.aether.collection.CollectRequest;",
                "+import org.sonatype.aether.graph.DependencyFilter;",
                "+import org.sonatype.aether.repository.RemoteRepository;",
                "+import org.sonatype.aether.repository.Authentication;",
                "+import org.sonatype.aether.resolution.ArtifactResolutionException;",
                "+import org.sonatype.aether.resolution.ArtifactResult;",
                "+import org.sonatype.aether.resolution.DependencyRequest;",
                "+import org.sonatype.aether.resolution.DependencyResolutionException;",
                "+import org.sonatype.aether.util.artifact.DefaultArtifact;",
                "+import org.sonatype.aether.util.artifact.JavaScopes;",
                "+import org.sonatype.aether.util.filter.DependencyFilterUtils;",
                "+import org.sonatype.aether.util.filter.PatternExclusionsDependencyFilter;",
                "+",
                "+",
                "+/**",
                "+ *",
                "+ */",
                "+public class SparkDependencyContext {",
                "+  List<Dependency> dependencies = new LinkedList<>();",
                "+  List<Repository> repositories = new LinkedList<>();",
                "+",
                "+  List<File> files = new LinkedList<>();",
                "+  List<File> filesDist = new LinkedList<>();",
                "+  private RepositorySystem system = Booter.newRepositorySystem();",
                "+  private RepositorySystemSession session;",
                "+  private RemoteRepository mavenCentral = Booter.newCentralRepository();",
                "+  private RemoteRepository mavenLocal = Booter.newLocalRepository();",
                "+  private List<RemoteRepository> additionalRepos = new LinkedList<>();",
                "+",
                "+  public SparkDependencyContext(String localRepoPath, String additionalRemoteRepository) {",
                "+    session =  Booter.newRepositorySystemSession(system, localRepoPath);",
                "+    addRepoFromProperty(additionalRemoteRepository);",
                "+  }",
                "+",
                "+  public Dependency load(String lib) {",
                "+    Dependency dep = new Dependency(lib);",
                "+",
                "+    if (dependencies.contains(dep)) {",
                "+      dependencies.remove(dep);",
                "+    }",
                "+    dependencies.add(dep);",
                "+    return dep;",
                "+  }",
                "+",
                "+  public Repository addRepo(String name) {",
                "+    Repository rep = new Repository(name);",
                "+    repositories.add(rep);",
                "+    return rep;",
                "+  }",
                "+",
                "+  public void reset() {",
                "+    dependencies = new LinkedList<>();",
                "+    repositories = new LinkedList<>();",
                "+",
                "+    files = new LinkedList<>();",
                "+    filesDist = new LinkedList<>();",
                "+  }",
                "+",
                "+  private void addRepoFromProperty(String listOfRepo) {",
                "+    if (listOfRepo != null) {",
                "+      String[] repos = listOfRepo.split(\";\");",
                "+      for (String repo : repos) {",
                "+        String[] parts = repo.split(\",\");",
                "+        if (parts.length == 3) {",
                "+          String id = parts[0].trim();",
                "+          String url = parts[1].trim();",
                "+          boolean isSnapshot = Boolean.parseBoolean(parts[2].trim());",
                "+          if (id.length() > 1 && url.length() > 1) {",
                "+            RemoteRepository rr = new RemoteRepository(id, \"default\", url);",
                "+            rr.setPolicy(isSnapshot, null);",
                "+            additionalRepos.add(rr);",
                "+          }",
                "+        }",
                "+      }",
                "+    }",
                "+  }",
                "+",
                "+  /**",
                "+   * fetch all artifacts",
                "+   * @return",
                "+   * @throws MalformedURLException",
                "+   * @throws ArtifactResolutionException",
                "+   * @throws DependencyResolutionException",
                "+   */",
                "+  public List<File> fetch() throws MalformedURLException,",
                "+      DependencyResolutionException, ArtifactResolutionException {",
                "+",
                "+    for (Dependency dep : dependencies) {",
                "+      if (!dep.isLocalFsArtifact()) {",
                "+        List<ArtifactResult> artifacts = fetchArtifactWithDep(dep);",
                "+        for (ArtifactResult artifact : artifacts) {",
                "+          if (dep.isDist()) {",
                "+            filesDist.add(artifact.getArtifact().getFile());",
                "+          }",
                "+          files.add(artifact.getArtifact().getFile());",
                "+        }",
                "+      } else {",
                "+        if (dep.isDist()) {",
                "+          filesDist.add(new File(dep.getGroupArtifactVersion()));",
                "+        }",
                "+        files.add(new File(dep.getGroupArtifactVersion()));",
                "+      }",
                "+    }",
                "+",
                "+    return files;",
                "+  }",
                "+",
                "+  private List<ArtifactResult> fetchArtifactWithDep(Dependency dep)",
                "+      throws DependencyResolutionException, ArtifactResolutionException {",
                "+    Artifact artifact = new DefaultArtifact(",
                "+        SparkDependencyResolver.inferScalaVersion(dep.getGroupArtifactVersion()));",
                "+",
                "+    DependencyFilter classpathFlter = DependencyFilterUtils",
                "+        .classpathFilter(JavaScopes.COMPILE);",
                "+    PatternExclusionsDependencyFilter exclusionFilter = new PatternExclusionsDependencyFilter(",
                "+        SparkDependencyResolver.inferScalaVersion(dep.getExclusions()));",
                "+",
                "+    CollectRequest collectRequest = new CollectRequest();",
                "+    collectRequest.setRoot(new org.sonatype.aether.graph.Dependency(artifact,",
                "+        JavaScopes.COMPILE));",
                "+",
                "+    collectRequest.addRepository(mavenCentral);",
                "+    collectRequest.addRepository(mavenLocal);",
                "+    for (RemoteRepository repo : additionalRepos) {",
                "+      collectRequest.addRepository(repo);",
                "+    }",
                "+    for (Repository repo : repositories) {",
                "+      RemoteRepository rr = new RemoteRepository(repo.getId(), \"default\", repo.getUrl());",
                "+      rr.setPolicy(repo.isSnapshot(), null);",
                "+      Authentication auth = repo.getAuthentication();",
                "+      if (auth != null) {",
                "+        rr.setAuthentication(auth);",
                "+      }",
                "+      collectRequest.addRepository(rr);",
                "+    }",
                "+",
                "+    DependencyRequest dependencyRequest = new DependencyRequest(collectRequest,",
                "+        DependencyFilterUtils.andFilter(exclusionFilter, classpathFlter));",
                "+",
                "+    return system.resolveDependencies(session, dependencyRequest).getArtifactResults();",
                "+  }",
                "+",
                "+  public List<File> getFiles() {",
                "+    return files;",
                "+  }",
                "+",
                "+  public List<File> getFilesDist() {",
                "+    return filesDist;",
                "+  }",
                "+}",
                "diff --git a/spark/interpreter/src/main/java/org/apache/zeppelin/spark/dep/SparkDependencyResolver.java b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/dep/SparkDependencyResolver.java",
                "new file mode 100644",
                "index 000000000..46224a860",
                "--- /dev/null",
                "+++ b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/dep/SparkDependencyResolver.java",
                "@@ -0,0 +1,351 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.spark.dep;",
                "+",
                "+import java.io.File;",
                "+import java.lang.reflect.InvocationTargetException;",
                "+import java.lang.reflect.Method;",
                "+import java.net.URL;",
                "+import java.util.Arrays;",
                "+import java.util.Collection;",
                "+import java.util.Iterator;",
                "+import java.util.LinkedList;",
                "+import java.util.List;",
                "+",
                "+import org.apache.commons.lang.StringUtils;",
                "+import org.apache.spark.SparkContext;",
                "+import org.apache.zeppelin.dep.AbstractDependencyResolver;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+import org.sonatype.aether.artifact.Artifact;",
                "+import org.sonatype.aether.collection.CollectRequest;",
                "+import org.sonatype.aether.graph.Dependency;",
                "+import org.sonatype.aether.graph.DependencyFilter;",
                "+import org.sonatype.aether.repository.RemoteRepository;",
                "+import org.sonatype.aether.resolution.ArtifactResult;",
                "+import org.sonatype.aether.resolution.DependencyRequest;",
                "+import org.sonatype.aether.util.artifact.DefaultArtifact;",
                "+import org.sonatype.aether.util.artifact.JavaScopes;",
                "+import org.sonatype.aether.util.filter.DependencyFilterUtils;",
                "+import org.sonatype.aether.util.filter.PatternExclusionsDependencyFilter;",
                "+",
                "+import scala.Some;",
                "+import scala.collection.IndexedSeq;",
                "+import scala.reflect.io.AbstractFile;",
                "+import scala.tools.nsc.Global;",
                "+import scala.tools.nsc.backend.JavaPlatform;",
                "+import scala.tools.nsc.util.ClassPath;",
                "+import scala.tools.nsc.util.MergedClassPath;",
                "+",
                "+/**",
                "+ * Deps resolver.",
                "+ * Add new dependencies from mvn repo (at runtime) to Spark interpreter group.",
                "+ */",
                "+public class SparkDependencyResolver extends AbstractDependencyResolver {",
                "+  Logger logger = LoggerFactory.getLogger(SparkDependencyResolver.class);",
                "+  private Global global;",
                "+  private ClassLoader runtimeClassLoader;",
                "+  private SparkContext sc;",
                "+",
                "+  private final String[] exclusions = new String[] {\"org.scala-lang:scala-library\",",
                "+                                                    \"org.scala-lang:scala-compiler\",",
                "+                                                    \"org.scala-lang:scala-reflect\",",
                "+                                                    \"org.scala-lang:scalap\",",
                "+                                                    \"org.apache.zeppelin:zeppelin-zengine\",",
                "+                                                    \"org.apache.zeppelin:zeppelin-spark\",",
                "+                                                    \"org.apache.zeppelin:zeppelin-server\"};",
                "+",
                "+  public SparkDependencyResolver(Global global,",
                "+                                 ClassLoader runtimeClassLoader,",
                "+                                 SparkContext sc,",
                "+                                 String localRepoPath,",
                "+                                 String additionalRemoteRepository) {",
                "+    super(localRepoPath);",
                "+    this.global = global;",
                "+    this.runtimeClassLoader = runtimeClassLoader;",
                "+    this.sc = sc;",
                "+    addRepoFromProperty(additionalRemoteRepository);",
                "+  }",
                "+",
                "+  private void addRepoFromProperty(String listOfRepo) {",
                "+    if (listOfRepo != null) {",
                "+      String[] repos = listOfRepo.split(\";\");",
                "+      for (String repo : repos) {",
                "+        String[] parts = repo.split(\",\");",
                "+        if (parts.length == 3) {",
                "+          String id = parts[0].trim();",
                "+          String url = parts[1].trim();",
                "+          boolean isSnapshot = Boolean.parseBoolean(parts[2].trim());",
                "+          if (id.length() > 1 && url.length() > 1) {",
                "+            addRepo(id, url, isSnapshot);",
                "+          }",
                "+        }",
                "+      }",
                "+    }",
                "+  }",
                "+",
                "+  private void updateCompilerClassPath(URL[] urls) throws IllegalAccessException,",
                "+      IllegalArgumentException, InvocationTargetException {",
                "+",
                "+    JavaPlatform platform = (JavaPlatform) global.platform();",
                "+    MergedClassPath<AbstractFile> newClassPath = mergeUrlsIntoClassPath(platform, urls);",
                "+",
                "+    Method[] methods = platform.getClass().getMethods();",
                "+    for (Method m : methods) {",
                "+      if (m.getName().endsWith(\"currentClassPath_$eq\")) {",
                "+        m.invoke(platform, new Some(newClassPath));",
                "+        break;",
                "+      }",
                "+    }",
                "+",
                "+    // NOTE: Must use reflection until this is exposed/fixed upstream in Scala",
                "+    List<String> classPaths = new LinkedList<>();",
                "+    for (URL url : urls) {",
                "+      classPaths.add(url.getPath());",
                "+    }",
                "+",
                "+    // Reload all jars specified into our compiler",
                "+    global.invalidateClassPathEntries(scala.collection.JavaConversions.asScalaBuffer(classPaths)",
                "+        .toList());",
                "+  }",
                "+",
                "+  // Until spark 1.1.x",
                "+  // check https://github.com/apache/spark/commit/191d7cf2a655d032f160b9fa181730364681d0e7",
                "+  private void updateRuntimeClassPath_1_x(URL[] urls) throws SecurityException,",
                "+      IllegalAccessException, IllegalArgumentException,",
                "+      InvocationTargetException, NoSuchMethodException {",
                "+    Method addURL;",
                "+    addURL = runtimeClassLoader.getClass().getDeclaredMethod(\"addURL\", new Class[] {URL.class});",
                "+    addURL.setAccessible(true);",
                "+    for (URL url : urls) {",
                "+      addURL.invoke(runtimeClassLoader, url);",
                "+    }",
                "+  }",
                "+",
                "+  private void updateRuntimeClassPath_2_x(URL[] urls) throws SecurityException,",
                "+      IllegalAccessException, IllegalArgumentException,",
                "+      InvocationTargetException, NoSuchMethodException {",
                "+    Method addURL;",
                "+    addURL = runtimeClassLoader.getClass().getDeclaredMethod(\"addNewUrl\", new Class[] {URL.class});",
                "+    addURL.setAccessible(true);",
                "+    for (URL url : urls) {",
                "+      addURL.invoke(runtimeClassLoader, url);",
                "+    }",
                "+  }",
                "+",
                "+  private MergedClassPath<AbstractFile> mergeUrlsIntoClassPath(JavaPlatform platform, URL[] urls) {",
                "+    IndexedSeq<ClassPath<AbstractFile>> entries =",
                "+        ((MergedClassPath<AbstractFile>) platform.classPath()).entries();",
                "+    List<ClassPath<AbstractFile>> cp = new LinkedList<>();",
                "+",
                "+    for (int i = 0; i < entries.size(); i++) {",
                "+      cp.add(entries.apply(i));",
                "+    }",
                "+",
                "+    for (URL url : urls) {",
                "+      AbstractFile file;",
                "+      if (\"file\".equals(url.getProtocol())) {",
                "+        File f = new File(url.getPath());",
                "+        if (f.isDirectory()) {",
                "+          file = AbstractFile.getDirectory(scala.reflect.io.File.jfile2path(f));",
                "+        } else {",
                "+          file = AbstractFile.getFile(scala.reflect.io.File.jfile2path(f));",
                "+        }",
                "+      } else {",
                "+        file = AbstractFile.getURL(url);",
                "+      }",
                "+",
                "+      ClassPath<AbstractFile> newcp = platform.classPath().context().newClassPath(file);",
                "+",
                "+      // distinct",
                "+      if (cp.contains(newcp) == false) {",
                "+        cp.add(newcp);",
                "+      }",
                "+    }",
                "+",
                "+    return new MergedClassPath(scala.collection.JavaConversions.asScalaBuffer(cp).toIndexedSeq(),",
                "+        platform.classPath().context());",
                "+  }",
                "+",
                "+  public List<String> load(String artifact,",
                "+      boolean addSparkContext) throws Exception {",
                "+    return load(artifact, new LinkedList<String>(), addSparkContext);",
                "+  }",
                "+",
                "+  public List<String> load(String artifact, Collection<String> excludes,",
                "+      boolean addSparkContext) throws Exception {",
                "+    if (StringUtils.isBlank(artifact)) {",
                "+      // Should throw here",
                "+      throw new RuntimeException(\"Invalid artifact to load\");",
                "+    }",
                "+",
                "+    // <groupId>:<artifactId>[:<extension>[:<classifier>]]:<version>",
                "+    int numSplits = artifact.split(\":\").length;",
                "+    if (numSplits >= 3 && numSplits <= 6) {",
                "+      return loadFromMvn(artifact, excludes, addSparkContext);",
                "+    } else {",
                "+      loadFromFs(artifact, addSparkContext);",
                "+      LinkedList<String> libs = new LinkedList<>();",
                "+      libs.add(artifact);",
                "+      return libs;",
                "+    }",
                "+  }",
                "+",
                "+  private void loadFromFs(String artifact, boolean addSparkContext) throws Exception {",
                "+    File jarFile = new File(artifact);",
                "+",
                "+    global.new Run();",
                "+",
                "+    if (sc.version().startsWith(\"1.1\")) {",
                "+      updateRuntimeClassPath_1_x(new URL[] {jarFile.toURI().toURL()});",
                "+    } else {",
                "+      updateRuntimeClassPath_2_x(new URL[] {jarFile.toURI().toURL()});",
                "+    }",
                "+",
                "+    if (addSparkContext) {",
                "+      sc.addJar(jarFile.getAbsolutePath());",
                "+    }",
                "+  }",
                "+",
                "+  private List<String> loadFromMvn(String artifact, Collection<String> excludes,",
                "+      boolean addSparkContext) throws Exception {",
                "+    List<String> loadedLibs = new LinkedList<>();",
                "+    Collection<String> allExclusions = new LinkedList<>();",
                "+    allExclusions.addAll(excludes);",
                "+    allExclusions.addAll(Arrays.asList(exclusions));",
                "+",
                "+    List<ArtifactResult> listOfArtifact;",
                "+    listOfArtifact = getArtifactsWithDep(artifact, allExclusions);",
                "+",
                "+    Iterator<ArtifactResult> it = listOfArtifact.iterator();",
                "+    while (it.hasNext()) {",
                "+      Artifact a = it.next().getArtifact();",
                "+      String gav = a.getGroupId() + \":\" + a.getArtifactId() + \":\" + a.getVersion();",
                "+      for (String exclude : allExclusions) {",
                "+        if (gav.startsWith(exclude)) {",
                "+          it.remove();",
                "+          break;",
                "+        }",
                "+      }",
                "+    }",
                "+",
                "+    List<URL> newClassPathList = new LinkedList<>();",
                "+    List<File> files = new LinkedList<>();",
                "+    for (ArtifactResult artifactResult : listOfArtifact) {",
                "+      logger.info(\"Load \" + artifactResult.getArtifact().getGroupId() + \":\"",
                "+          + artifactResult.getArtifact().getArtifactId() + \":\"",
                "+          + artifactResult.getArtifact().getVersion());",
                "+      newClassPathList.add(artifactResult.getArtifact().getFile().toURI().toURL());",
                "+      files.add(artifactResult.getArtifact().getFile());",
                "+      loadedLibs.add(artifactResult.getArtifact().getGroupId() + \":\"",
                "+          + artifactResult.getArtifact().getArtifactId() + \":\"",
                "+          + artifactResult.getArtifact().getVersion());",
                "+    }",
                "+",
                "+    global.new Run();",
                "+    if (sc.version().startsWith(\"1.1\")) {",
                "+      updateRuntimeClassPath_1_x(newClassPathList.toArray(new URL[0]));",
                "+    } else {",
                "+      updateRuntimeClassPath_2_x(newClassPathList.toArray(new URL[0]));",
                "+    }",
                "+    updateCompilerClassPath(newClassPathList.toArray(new URL[0]));",
                "+",
                "+    if (addSparkContext) {",
                "+      for (File f : files) {",
                "+        sc.addJar(f.getAbsolutePath());",
                "+      }",
                "+    }",
                "+",
                "+    return loadedLibs;",
                "+  }",
                "+",
                "+  /**",
                "+   * @param dependency",
                "+   * @param excludes list of pattern can either be of the form groupId:artifactId",
                "+   * @return",
                "+   * @throws Exception",
                "+   */",
                "+  @Override",
                "+  public List<ArtifactResult> getArtifactsWithDep(String dependency,",
                "+      Collection<String> excludes) throws Exception {",
                "+    Artifact artifact = new DefaultArtifact(inferScalaVersion(dependency));",
                "+    DependencyFilter classpathFilter = DependencyFilterUtils.classpathFilter(JavaScopes.COMPILE);",
                "+    PatternExclusionsDependencyFilter exclusionFilter =",
                "+        new PatternExclusionsDependencyFilter(inferScalaVersion(excludes));",
                "+",
                "+    CollectRequest collectRequest = new CollectRequest();",
                "+    collectRequest.setRoot(new Dependency(artifact, JavaScopes.COMPILE));",
                "+",
                "+    synchronized (repos) {",
                "+      for (RemoteRepository repo : repos) {",
                "+        collectRequest.addRepository(repo);",
                "+      }",
                "+    }",
                "+    DependencyRequest dependencyRequest = new DependencyRequest(collectRequest,",
                "+        DependencyFilterUtils.andFilter(exclusionFilter, classpathFilter));",
                "+    return system.resolveDependencies(session, dependencyRequest).getArtifactResults();",
                "+  }",
                "+",
                "+  public static Collection<String> inferScalaVersion(Collection<String> artifact) {",
                "+    List<String> list = new LinkedList<>();",
                "+    for (String a : artifact) {",
                "+      list.add(inferScalaVersion(a));",
                "+    }",
                "+    return list;",
                "+  }",
                "+",
                "+  public static String inferScalaVersion(String artifact) {",
                "+    int pos = artifact.indexOf(\":\");",
                "+    if (pos < 0 || pos + 2 >= artifact.length()) {",
                "+      // failed to infer",
                "+      return artifact;",
                "+    }",
                "+",
                "+    if (':' == artifact.charAt(pos + 1)) {",
                "+      String restOfthem = \"\";",
                "+      String versionSep = \":\";",
                "+",
                "+      String groupId = artifact.substring(0, pos);",
                "+      int nextPos = artifact.indexOf(\":\", pos + 2);",
                "+      if (nextPos < 0) {",
                "+        if (artifact.charAt(artifact.length() - 1) == '*') {",
                "+          nextPos = artifact.length() - 1;",
                "+          versionSep = \"\";",
                "+          restOfthem = \"*\";",
                "+        } else {",
                "+          versionSep = \"\";",
                "+          nextPos = artifact.length();",
                "+        }",
                "+      }",
                "+",
                "+      String artifactId = artifact.substring(pos + 2, nextPos);",
                "+      if (nextPos < artifact.length()) {",
                "+        if (!restOfthem.equals(\"*\")) {",
                "+          restOfthem = artifact.substring(nextPos + 1);",
                "+        }",
                "+      }",
                "+",
                "+      String [] version = scala.util.Properties.versionNumberString().split(\"[.]\");",
                "+      String scalaVersion = version[0] + \".\" + version[1];",
                "+",
                "+      return groupId + \":\" + artifactId + \"_\" + scalaVersion + versionSep + restOfthem;",
                "+    } else {",
                "+      return artifact;",
                "+    }",
                "+  }",
                "+}",
                "diff --git a/spark/interpreter/src/main/resources/R/zeppelin_sparkr.R b/spark/interpreter/src/main/resources/R/zeppelin_sparkr.R",
                "new file mode 100644",
                "index 000000000..525c6c5c4",
                "--- /dev/null",
                "+++ b/spark/interpreter/src/main/resources/R/zeppelin_sparkr.R",
                "@@ -0,0 +1,105 @@",
                "+#",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#     http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing, software",
                "+# distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+# See the License for the specific language governing permissions and",
                "+# limitations under the License.",
                "+#",
                "+",
                "+args <- commandArgs(trailingOnly = TRUE)",
                "+",
                "+hashCode <- as.integer(args[1])",
                "+port <- as.integer(args[2])",
                "+libPath <- args[3]",
                "+version <- as.integer(args[4])",
                "+rm(args)",
                "+",
                "+print(paste(\"Port \", toString(port)))",
                "+print(paste(\"LibPath \", libPath))",
                "+",
                "+.libPaths(c(file.path(libPath), .libPaths()))",
                "+library(SparkR)",
                "+",
                "+",
                "+SparkR:::connectBackend(\"localhost\", port, 6000)",
                "+",
                "+# scStartTime is needed by R/pkg/R/sparkR.R",
                "+assign(\".scStartTime\", as.integer(Sys.time()), envir = SparkR:::.sparkREnv)",
                "+",
                "+# getZeppelinR",
                "+.zeppelinR = SparkR:::callJStatic(\"org.apache.zeppelin.spark.ZeppelinR\", \"getZeppelinR\", hashCode)",
                "+",
                "+# setup spark env",
                "+assign(\".sc\", SparkR:::callJStatic(\"org.apache.zeppelin.spark.ZeppelinRContext\", \"getSparkContext\"), envir = SparkR:::.sparkREnv)",
                "+assign(\"sc\", get(\".sc\", envir = SparkR:::.sparkREnv), envir=.GlobalEnv)",
                "+if (version >= 20000) {",
                "+  assign(\".sparkRsession\", SparkR:::callJStatic(\"org.apache.zeppelin.spark.ZeppelinRContext\", \"getSparkSession\"), envir = SparkR:::.sparkREnv)",
                "+  assign(\"spark\", get(\".sparkRsession\", envir = SparkR:::.sparkREnv), envir = .GlobalEnv)",
                "+  assign(\".sparkRjsc\", SparkR:::callJStatic(\"org.apache.zeppelin.spark.ZeppelinRContext\", \"getJavaSparkContext\"), envir = SparkR:::.sparkREnv)",
                "+}",
                "+assign(\".sqlc\", SparkR:::callJStatic(\"org.apache.zeppelin.spark.ZeppelinRContext\", \"getSqlContext\"), envir = SparkR:::.sparkREnv)",
                "+assign(\"sqlContext\", get(\".sqlc\", envir = SparkR:::.sparkREnv), envir = .GlobalEnv)",
                "+assign(\".zeppelinContext\", SparkR:::callJStatic(\"org.apache.zeppelin.spark.ZeppelinRContext\", \"getZeppelinContext\"), envir = .GlobalEnv)",
                "+",
                "+z.put <- function(name, object) {",
                "+  SparkR:::callJMethod(.zeppelinContext, \"put\", name, object)",
                "+}",
                "+z.get <- function(name) {",
                "+  SparkR:::callJMethod(.zeppelinContext, \"get\", name)",
                "+}",
                "+z.input <- function(name, value) {",
                "+  SparkR:::callJMethod(.zeppelinContext, \"input\", name, value)",
                "+}",
                "+",
                "+# notify script is initialized",
                "+SparkR:::callJMethod(.zeppelinR, \"onScriptInitialized\")",
                "+",
                "+while (TRUE) {",
                "+  req <- SparkR:::callJMethod(.zeppelinR, \"getRequest\")",
                "+  type <-  SparkR:::callJMethod(req, \"getType\")",
                "+  stmt <- SparkR:::callJMethod(req, \"getStmt\")",
                "+  value <- SparkR:::callJMethod(req, \"getValue\")",
                "+  ",
                "+  if (type == \"eval\") {",
                "+    tryCatch({",
                "+      ret <- eval(parse(text=stmt))",
                "+      SparkR:::callJMethod(.zeppelinR, \"setResponse\", \"\", FALSE)",
                "+    }, error = function(e) {",
                "+      SparkR:::callJMethod(.zeppelinR, \"setResponse\", toString(e), TRUE)",
                "+    })    ",
                "+  } else if (type == \"set\") {",
                "+    tryCatch({",
                "+      ret <- assign(stmt, value)",
                "+      SparkR:::callJMethod(.zeppelinR, \"setResponse\", \"\", FALSE)",
                "+    }, error = function(e) {",
                "+      SparkR:::callJMethod(.zeppelinR, \"setResponse\", toString(e), TRUE)",
                "+    })",
                "+  } else if (type == \"get\") {",
                "+    tryCatch({      ",
                "+      ret <- eval(parse(text=stmt))",
                "+      SparkR:::callJMethod(.zeppelinR, \"setResponse\", ret, FALSE)",
                "+    }, error = function(e) {",
                "+      SparkR:::callJMethod(.zeppelinR, \"setResponse\", toString(e), TRUE)",
                "+    })",
                "+  } else if (type == \"getS\") {",
                "+    tryCatch({",
                "+      ret <- eval(parse(text=stmt))",
                "+      SparkR:::callJMethod(.zeppelinR, \"setResponse\", toString(ret), FALSE)",
                "+    }, error = function(e) {",
                "+      SparkR:::callJMethod(.zeppelinR, \"setResponse\", toString(e), TRUE)",
                "+    })",
                "+  } else {",
                "+    # unsupported type",
                "+    SparkR:::callJMethod(.zeppelinR, \"setResponse\", paste(\"Unsupported type \", type), TRUE)",
                "+  }",
                "+}",
                "diff --git a/spark/interpreter/src/main/resources/interpreter-setting.json b/spark/interpreter/src/main/resources/interpreter-setting.json",
                "new file mode 100644",
                "index 000000000..7e647d753",
                "--- /dev/null",
                "+++ b/spark/interpreter/src/main/resources/interpreter-setting.json",
                "@@ -0,0 +1,233 @@",
                "+[",
                "+  {",
                "+    \"group\": \"spark\",",
                "+    \"name\": \"spark\",",
                "+    \"className\": \"org.apache.zeppelin.spark.SparkInterpreter\",",
                "+    \"defaultInterpreter\": true,",
                "+    \"properties\": {",
                "+      \"spark.executor.memory\": {",
                "+        \"envName\": null,",
                "+        \"propertyName\": \"spark.executor.memory\",",
                "+        \"defaultValue\": \"\",",
                "+        \"description\": \"Executor memory per worker instance. ex) 512m, 32g\",",
                "+        \"type\": \"string\"",
                "+      },",
                "+      \"args\": {",
                "+        \"envName\": null,",
                "+        \"propertyName\": null,",
                "+        \"defaultValue\": \"\",",
                "+        \"description\": \"spark commandline args\",",
                "+        \"type\": \"textarea\"",
                "+      },",
                "+      \"zeppelin.spark.useHiveContext\": {",
                "+        \"envName\": \"ZEPPELIN_SPARK_USEHIVECONTEXT\",",
                "+        \"propertyName\": \"zeppelin.spark.useHiveContext\",",
                "+        \"defaultValue\": true,",
                "+        \"description\": \"Use HiveContext instead of SQLContext if it is true.\",",
                "+        \"type\": \"checkbox\"",
                "+      },",
                "+      \"spark.app.name\": {",
                "+        \"envName\": \"SPARK_APP_NAME\",",
                "+        \"propertyName\": \"spark.app.name\",",
                "+        \"defaultValue\": \"Zeppelin\",",
                "+        \"description\": \"The name of spark application.\",",
                "+        \"type\": \"string\"",
                "+      },",
                "+      \"zeppelin.spark.printREPLOutput\": {",
                "+        \"envName\": null,",
                "+        \"propertyName\": \"zeppelin.spark.printREPLOutput\",",
                "+        \"defaultValue\": true,",
                "+        \"description\": \"Print REPL output\",",
                "+        \"type\": \"checkbox\"",
                "+      },",
                "+      \"spark.cores.max\": {",
                "+        \"envName\": null,",
                "+        \"propertyName\": \"spark.cores.max\",",
                "+        \"defaultValue\": \"\",",
                "+        \"description\": \"Total number of cores to use. Empty value uses all available core.\",",
                "+        \"type\": \"number\"",
                "+      },",
                "+      \"zeppelin.spark.maxResult\": {",
                "+        \"envName\": \"ZEPPELIN_SPARK_MAXRESULT\",",
                "+        \"propertyName\": \"zeppelin.spark.maxResult\",",
                "+        \"defaultValue\": \"1000\",",
                "+        \"description\": \"Max number of Spark SQL result to display.\",",
                "+        \"type\": \"number\"",
                "+      },",
                "+      \"master\": {",
                "+        \"envName\": \"MASTER\",",
                "+        \"propertyName\": \"spark.master\",",
                "+        \"defaultValue\": \"local[*]\",",
                "+        \"description\": \"Spark master uri. ex) spark://masterhost:7077\",",
                "+        \"type\": \"string\"",
                "+      },",
                "+      \"zeppelin.spark.enableSupportedVersionCheck\": {",
                "+        \"envName\": null,",
                "+        \"propertyName\": \"zeppelin.spark.enableSupportedVersionCheck\",",
                "+        \"defaultValue\": true,",
                "+        \"description\": \"Do not change - developer only setting, not for production use\",",
                "+        \"type\": \"checkbox\"",
                "+      },",
                "+      \"zeppelin.spark.uiWebUrl\": {",
                "+        \"envName\": null,",
                "+        \"propertyName\": \"zeppelin.spark.uiWebUrl\",",
                "+        \"defaultValue\": \"\",",
                "+        \"description\": \"Override Spark UI default URL\",",
                "+        \"type\": \"string\"",
                "+      },",
                "+      \"zeppelin.spark.useNew\": {",
                "+        \"envName\": null,",
                "+        \"propertyName\": \"zeppelin.spark.useNew\",",
                "+        \"defaultValue\": \"false\",",
                "+        \"description\": \"Whether use new spark interpreter implementation\",",
                "+        \"type\": \"checkbox\"",
                "+      }",
                "+    },",
                "+    \"editor\": {",
                "+      \"language\": \"scala\",",
                "+      \"editOnDblClick\": false,",
                "+      \"completionKey\": \"TAB\"",
                "+    }",
                "+  },",
                "+  {",
                "+    \"group\": \"spark\",",
                "+    \"name\": \"sql\",",
                "+    \"className\": \"org.apache.zeppelin.spark.SparkSqlInterpreter\",",
                "+    \"properties\": {",
                "+      \"zeppelin.spark.concurrentSQL\": {",
                "+        \"envName\": \"ZEPPELIN_SPARK_CONCURRENTSQL\",",
                "+        \"propertyName\": \"zeppelin.spark.concurrentSQL\",",
                "+        \"defaultValue\": false,",
                "+        \"description\": \"Execute multiple SQL concurrently if set true.\",",
                "+        \"type\": \"checkbox\"",
                "+      },",
                "+      \"zeppelin.spark.sql.stacktrace\": {",
                "+        \"envName\": \"ZEPPELIN_SPARK_SQL_STACKTRACE\",",
                "+        \"propertyName\": \"zeppelin.spark.sql.stacktrace\",",
                "+        \"defaultValue\": false,",
                "+        \"description\": \"Show full exception stacktrace for SQL queries if set to true.\",",
                "+        \"type\": \"checkbox\"",
                "+      },",
                "+      \"zeppelin.spark.maxResult\": {",
                "+        \"envName\": \"ZEPPELIN_SPARK_MAXRESULT\",",
                "+        \"propertyName\": \"zeppelin.spark.maxResult\",",
                "+        \"defaultValue\": \"1000\",",
                "+        \"description\": \"Max number of Spark SQL result to display.\",",
                "+        \"type\": \"number\"",
                "+      },",
                "+      \"zeppelin.spark.importImplicit\": {",
                "+        \"envName\": \"ZEPPELIN_SPARK_IMPORTIMPLICIT\",",
                "+        \"propertyName\": \"zeppelin.spark.importImplicit\",",
                "+        \"defaultValue\": true,",
                "+        \"description\": \"Import implicits, UDF collection, and sql if set true. true by default.\",",
                "+        \"type\": \"checkbox\"",
                "+      }",
                "+    },",
                "+    \"editor\": {",
                "+      \"language\": \"sql\",",
                "+      \"editOnDblClick\": false,",
                "+      \"completionKey\": \"TAB\"",
                "+    }",
                "+  },",
                "+  {",
                "+    \"group\": \"spark\",",
                "+    \"name\": \"dep\",",
                "+    \"className\": \"org.apache.zeppelin.spark.DepInterpreter\",",
                "+    \"properties\": {",
                "+      \"zeppelin.dep.localrepo\": {",
                "+        \"envName\": \"ZEPPELIN_DEP_LOCALREPO\",",
                "+        \"propertyName\": null,",
                "+        \"defaultValue\": \"local-repo\",",
                "+        \"description\": \"local repository for dependency loader\",",
                "+        \"type\": \"string\"",
                "+      },",
                "+      \"zeppelin.dep.additionalRemoteRepository\": {",
                "+        \"envName\": null,",
                "+        \"propertyName\": null,",
                "+        \"defaultValue\": \"spark-packages,http://dl.bintray.com/spark-packages/maven,false;\",",
                "+        \"description\": \"A list of 'id,remote-repository-URL,is-snapshot;' for each remote repository.\",",
                "+        \"type\": \"textarea\"",
                "+      }",
                "+    },",
                "+    \"editor\": {",
                "+      \"language\": \"scala\",",
                "+      \"editOnDblClick\": false,",
                "+      \"completionKey\": \"TAB\"",
                "+    }",
                "+  },",
                "+  {",
                "+    \"group\": \"spark\",",
                "+    \"name\": \"pyspark\",",
                "+    \"className\": \"org.apache.zeppelin.spark.PySparkInterpreter\",",
                "+    \"properties\": {",
                "+      \"zeppelin.pyspark.python\": {",
                "+        \"envName\": \"PYSPARK_PYTHON\",",
                "+        \"propertyName\": null,",
                "+        \"defaultValue\": \"python\",",
                "+        \"description\": \"Python command to run pyspark with\",",
                "+        \"type\": \"string\"",
                "+      },",
                "+      \"zeppelin.pyspark.useIPython\": {",
                "+        \"envName\": null,",
                "+        \"propertyName\": \"zeppelin.pyspark.useIPython\",",
                "+        \"defaultValue\": true,",
                "+        \"description\": \"whether use IPython when it is available\",",
                "+        \"type\": \"checkbox\"",
                "+      }",
                "+    },",
                "+    \"editor\": {",
                "+      \"language\": \"python\",",
                "+      \"editOnDblClick\": false,",
                "+      \"completionKey\": \"TAB\"",
                "+    }",
                "+  },",
                "+  {",
                "+    \"group\": \"spark\",",
                "+    \"name\": \"ipyspark\",",
                "+    \"className\": \"org.apache.zeppelin.spark.IPySparkInterpreter\",",
                "+    \"properties\": {},",
                "+    \"editor\": {",
                "+      \"language\": \"python\",",
                "+      \"editOnDblClick\": false",
                "+    }",
                "+  },",
                "+  {",
                "+    \"group\": \"spark\",",
                "+    \"name\": \"r\",",
                "+    \"className\": \"org.apache.zeppelin.spark.SparkRInterpreter\",",
                "+    \"properties\": {",
                "+      \"zeppelin.R.knitr\": {",
                "+        \"envName\": \"ZEPPELIN_R_KNITR\",",
                "+        \"propertyName\": \"zeppelin.R.knitr\",",
                "+        \"defaultValue\": true,",
                "+        \"description\": \"whether use knitr or not\",",
                "+        \"type\": \"checkbox\"",
                "+      },",
                "+      \"zeppelin.R.cmd\": {",
                "+        \"envName\": \"ZEPPELIN_R_CMD\",",
                "+        \"propertyName\": \"zeppelin.R.cmd\",",
                "+        \"defaultValue\": \"R\",",
                "+        \"description\": \"R repl path\",",
                "+        \"type\": \"string\"",
                "+      },",
                "+      \"zeppelin.R.image.width\": {",
                "+        \"envName\": \"ZEPPELIN_R_IMAGE_WIDTH\",",
                "+        \"propertyName\": \"zeppelin.R.image.width\",",
                "+        \"defaultValue\": \"100%\",",
                "+        \"description\": \"\",",
                "+        \"type\": \"number\"",
                "+      },",
                "+      \"zeppelin.R.render.options\": {",
                "+        \"envName\": \"ZEPPELIN_R_RENDER_OPTIONS\",",
                "+        \"propertyName\": \"zeppelin.R.render.options\",",
                "+        \"defaultValue\": \"out.format = 'html', comment = NA, echo = FALSE, results = 'asis', message = F, warning = F, fig.retina = 2\",",
                "+        \"description\": \"\",",
                "+        \"type\": \"textarea\"",
                "+      }",
                "+    },",
                "+    \"editor\": {",
                "+      \"language\": \"r\",",
                "+      \"editOnDblClick\": false",
                "+    }",
                "+  }",
                "+]",
                "diff --git a/spark/interpreter/src/main/resources/python/zeppelin_ipyspark.py b/spark/interpreter/src/main/resources/python/zeppelin_ipyspark.py",
                "new file mode 100644",
                "index 000000000..324f48155",
                "--- /dev/null",
                "+++ b/spark/interpreter/src/main/resources/python/zeppelin_ipyspark.py",
                "@@ -0,0 +1,53 @@",
                "+#",
                "+# Licensed to the Apache Software Foundation (ASF) under one or more",
                "+# contributor license agreements.  See the NOTICE file distributed with",
                "+# this work for additional information regarding copyright ownership.",
                "+# The ASF licenses this file to You under the Apache License, Version 2.0",
                "+# (the \"License\"); you may not use this file except in compliance with",
                "+# the License.  You may obtain a copy of the License at",
                "+#",
                "+#    http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing, software",
                "+# distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+# See the License for the specific language governing permissions and",
                "+# limitations under the License.",
                "+#",
                "+",
                "+",
                "+from py4j.java_gateway import java_import, JavaGateway, GatewayClient",
                "+from pyspark.conf import SparkConf",
                "+from pyspark.context import SparkContext",
                "+",
                "+# for back compatibility",
                "+from pyspark.sql import SQLContext",
                "+",
                "+# start JVM gateway",
                "+client = GatewayClient(port=${JVM_GATEWAY_PORT})",
                "+gateway = JavaGateway(client, auto_convert=True)",
                "+",
                "+java_import(gateway.jvm, \"org.apache.spark.SparkEnv\")",
                "+java_import(gateway.jvm, \"org.apache.spark.SparkConf\")",
                "+java_import(gateway.jvm, \"org.apache.spark.api.java.*\")",
                "+java_import(gateway.jvm, \"org.apache.spark.api.python.*\")",
                "+java_import(gateway.jvm, \"org.apache.spark.mllib.api.python.*\")",
                "+",
                "+intp = gateway.entry_point",
                "+jsc = intp.getJavaSparkContext()",
                "+",
                "+java_import(gateway.jvm, \"org.apache.spark.sql.*\")",
                "+java_import(gateway.jvm, \"org.apache.spark.sql.hive.*\")",
                "+java_import(gateway.jvm, \"scala.Tuple2\")",
                "+",
                "+jconf = jsc.getConf()",
                "+conf = SparkConf(_jvm=gateway.jvm, _jconf=jconf)",
                "+sc = _zsc_ = SparkContext(jsc=jsc, gateway=gateway, conf=conf)",
                "+",
                "+if intp.isSpark2():",
                "+    from pyspark.sql import SparkSession",
                "+",
                "+    spark = __zSpark__ = SparkSession(sc, intp.getSparkSession())",
                "+    sqlContext = sqlc = __zSqlc__ = __zSpark__._wrapped",
                "+else:",
                "+    sqlContext = sqlc = __zSqlc__ = SQLContext(sparkContext=sc, sqlContext=intp.getSQLContext())",
                "diff --git a/spark/interpreter/src/main/resources/python/zeppelin_pyspark.py b/spark/interpreter/src/main/resources/python/zeppelin_pyspark.py",
                "new file mode 100644",
                "index 000000000..c10855a16",
                "--- /dev/null",
                "+++ b/spark/interpreter/src/main/resources/python/zeppelin_pyspark.py",
                "@@ -0,0 +1,393 @@",
                "+#",
                "+# Licensed to the Apache Software Foundation (ASF) under one or more",
                "+# contributor license agreements.  See the NOTICE file distributed with",
                "+# this work for additional information regarding copyright ownership.",
                "+# The ASF licenses this file to You under the Apache License, Version 2.0",
                "+# (the \"License\"); you may not use this file except in compliance with",
                "+# the License.  You may obtain a copy of the License at",
                "+#",
                "+#    http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing, software",
                "+# distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+# See the License for the specific language governing permissions and",
                "+# limitations under the License.",
                "+#",
                "+",
                "+import os, sys, getopt, traceback, json, re",
                "+",
                "+from py4j.java_gateway import java_import, JavaGateway, GatewayClient",
                "+from py4j.protocol import Py4JJavaError",
                "+from pyspark.conf import SparkConf",
                "+from pyspark.context import SparkContext",
                "+import ast",
                "+import warnings",
                "+",
                "+# for back compatibility",
                "+from pyspark.sql import SQLContext, HiveContext, Row",
                "+",
                "+class Logger(object):",
                "+  def __init__(self):",
                "+    pass",
                "+",
                "+  def write(self, message):",
                "+    intp.appendOutput(message)",
                "+",
                "+  def reset(self):",
                "+    pass",
                "+",
                "+  def flush(self):",
                "+    pass",
                "+",
                "+",
                "+class PyZeppelinContext(dict):",
                "+  def __init__(self, zc):",
                "+    self.z = zc",
                "+    self._displayhook = lambda *args: None",
                "+",
                "+  def show(self, obj):",
                "+    from pyspark.sql import DataFrame",
                "+    if isinstance(obj, DataFrame):",
                "+      print(self.z.showData(obj._jdf))",
                "+    else:",
                "+      print(str(obj))",
                "+",
                "+  # By implementing special methods it makes operating on it more Pythonic",
                "+  def __setitem__(self, key, item):",
                "+    self.z.put(key, item)",
                "+",
                "+  def __getitem__(self, key):",
                "+    return self.z.get(key)",
                "+",
                "+  def __delitem__(self, key):",
                "+    self.z.remove(key)",
                "+",
                "+  def __contains__(self, item):",
                "+    return self.z.containsKey(item)",
                "+",
                "+  def add(self, key, value):",
                "+    self.__setitem__(key, value)",
                "+",
                "+  def put(self, key, value):",
                "+    self.__setitem__(key, value)",
                "+",
                "+  def get(self, key):",
                "+    return self.__getitem__(key)",
                "+",
                "+  def getInterpreterContext(self):",
                "+    return self.z.getInterpreterContext()",
                "+",
                "+  def input(self, name, defaultValue=\"\"):",
                "+    return self.z.input(name, defaultValue)",
                "+",
                "+  def textbox(self, name, defaultValue=\"\"):",
                "+    return self.z.textbox(name, defaultValue)",
                "+",
                "+  def noteTextbox(self, name, defaultValue=\"\"):",
                "+    return self.z.noteTextbox(name, defaultValue)",
                "+",
                "+  def select(self, name, options, defaultValue=\"\"):",
                "+    # auto_convert to ArrayList doesn't match the method signature on JVM side",
                "+    return self.z.select(name, defaultValue, self.getParamOptions(options))",
                "+",
                "+  def noteSelect(self, name, options, defaultValue=\"\"):",
                "+    return self.z.noteSelect(name, defaultValue, self.getParamOptions(options))",
                "+",
                "+  def checkbox(self, name, options, defaultChecked=None):",
                "+    optionsIterable = self.getParamOptions(options)",
                "+    defaultCheckedIterables = self.getDefaultChecked(defaultChecked)",
                "+    checkedItems = gateway.jvm.scala.collection.JavaConversions.seqAsJavaList(self.z.checkbox(name, defaultCheckedIterables, optionsIterable))",
                "+    result = []",
                "+    for checkedItem in checkedItems:",
                "+      result.append(checkedItem)",
                "+    return result;",
                "+",
                "+  def noteCheckbox(self, name, options, defaultChecked=None):",
                "+    optionsIterable = self.getParamOptions(options)",
                "+    defaultCheckedIterables = self.getDefaultChecked(defaultChecked)",
                "+    checkedItems = gateway.jvm.scala.collection.JavaConversions.seqAsJavaList(self.z.noteCheckbox(name, defaultCheckedIterables, optionsIterable))",
                "+    result = []",
                "+    for checkedItem in checkedItems:",
                "+      result.append(checkedItem)",
                "+    return result;",
                "+",
                "+  def getParamOptions(self, options):",
                "+    tuples = list(map(lambda items: self.__tupleToScalaTuple2(items), options))",
                "+    return gateway.jvm.scala.collection.JavaConversions.collectionAsScalaIterable(tuples)",
                "+",
                "+  def getDefaultChecked(self, defaultChecked):",
                "+    if defaultChecked is None:",
                "+      defaultChecked = []",
                "+    return gateway.jvm.scala.collection.JavaConversions.collectionAsScalaIterable(defaultChecked)",
                "+",
                "+  def registerHook(self, event, cmd, replName=None):",
                "+    if replName is None:",
                "+      self.z.registerHook(event, cmd)",
                "+    else:",
                "+      self.z.registerHook(event, cmd, replName)",
                "+",
                "+  def unregisterHook(self, event, replName=None):",
                "+    if replName is None:",
                "+      self.z.unregisterHook(event)",
                "+    else:",
                "+      self.z.unregisterHook(event, replName)",
                "+",
                "+  def getHook(self, event, replName=None):",
                "+    if replName is None:",
                "+      return self.z.getHook(event)",
                "+    return self.z.getHook(event, replName)",
                "+",
                "+  def _setup_matplotlib(self):",
                "+    # If we don't have matplotlib installed don't bother continuing",
                "+    try:",
                "+      import matplotlib",
                "+    except ImportError:",
                "+      return",
                "+    ",
                "+    # Make sure custom backends are available in the PYTHONPATH",
                "+    rootdir = os.environ.get('ZEPPELIN_HOME', os.getcwd())",
                "+    mpl_path = os.path.join(rootdir, 'interpreter', 'lib', 'python')",
                "+    if mpl_path not in sys.path:",
                "+      sys.path.append(mpl_path)",
                "+    ",
                "+    # Finally check if backend exists, and if so configure as appropriate",
                "+    try:",
                "+      matplotlib.use('module://backend_zinline')",
                "+      import backend_zinline",
                "+      ",
                "+      # Everything looks good so make config assuming that we are using",
                "+      # an inline backend",
                "+      self._displayhook = backend_zinline.displayhook",
                "+      self.configure_mpl(width=600, height=400, dpi=72, fontsize=10,",
                "+                         interactive=True, format='png', context=self.z)",
                "+    except ImportError:",
                "+      # Fall back to Agg if no custom backend installed",
                "+      matplotlib.use('Agg')",
                "+      warnings.warn(\"Unable to load inline matplotlib backend, \"",
                "+                    \"falling back to Agg\")",
                "+",
                "+  def configure_mpl(self, **kwargs):",
                "+    import mpl_config",
                "+    mpl_config.configure(**kwargs)",
                "+",
                "+  def __tupleToScalaTuple2(self, tuple):",
                "+    if (len(tuple) == 2):",
                "+      return gateway.jvm.scala.Tuple2(tuple[0], tuple[1])",
                "+    else:",
                "+      raise IndexError(\"options must be a list of tuple of 2\")",
                "+",
                "+",
                "+class SparkVersion(object):",
                "+  SPARK_1_4_0 = 10400",
                "+  SPARK_1_3_0 = 10300",
                "+  SPARK_2_0_0 = 20000",
                "+",
                "+  def __init__(self, versionNumber):",
                "+    self.version = versionNumber",
                "+",
                "+  def isAutoConvertEnabled(self):",
                "+    return self.version >= self.SPARK_1_4_0",
                "+",
                "+  def isImportAllPackageUnderSparkSql(self):",
                "+    return self.version >= self.SPARK_1_3_0",
                "+",
                "+  def isSpark2(self):",
                "+    return self.version >= self.SPARK_2_0_0",
                "+",
                "+class PySparkCompletion:",
                "+  def __init__(self, interpreterObject):",
                "+    self.interpreterObject = interpreterObject",
                "+",
                "+  def getGlobalCompletion(self):",
                "+    objectDefList = []",
                "+    try:",
                "+      for completionItem in list(globals().keys()):",
                "+        objectDefList.append(completionItem)",
                "+    except:",
                "+      return None",
                "+    else:",
                "+      return objectDefList",
                "+",
                "+  def getMethodCompletion(self, text_value):",
                "+    execResult = locals()",
                "+    if text_value == None:",
                "+      return None",
                "+    completion_target = text_value",
                "+    try:",
                "+      if len(completion_target) <= 0:",
                "+        return None",
                "+      if text_value[-1] == \".\":",
                "+        completion_target = text_value[:-1]",
                "+      exec(\"{} = dir({})\".format(\"objectDefList\", completion_target), globals(), execResult)",
                "+    except:",
                "+      return None",
                "+    else:",
                "+      return list(execResult['objectDefList'])",
                "+",
                "+",
                "+  def getCompletion(self, text_value):",
                "+    completionList = set()",
                "+",
                "+    globalCompletionList = self.getGlobalCompletion()",
                "+    if globalCompletionList != None:",
                "+      for completionItem in list(globalCompletionList):",
                "+        completionList.add(completionItem)",
                "+",
                "+    if text_value != None:",
                "+      objectCompletionList = self.getMethodCompletion(text_value)",
                "+      if objectCompletionList != None:",
                "+        for completionItem in list(objectCompletionList):",
                "+          completionList.add(completionItem)",
                "+    if len(completionList) <= 0:",
                "+      self.interpreterObject.setStatementsFinished(\"\", False)",
                "+    else:",
                "+      result = json.dumps(list(filter(lambda x : not re.match(\"^__.*\", x), list(completionList))))",
                "+      self.interpreterObject.setStatementsFinished(result, False)",
                "+",
                "+client = GatewayClient(port=int(sys.argv[1]))",
                "+sparkVersion = SparkVersion(int(sys.argv[2]))",
                "+if sparkVersion.isSpark2():",
                "+  from pyspark.sql import SparkSession",
                "+else:",
                "+  from pyspark.sql import SchemaRDD",
                "+",
                "+if sparkVersion.isAutoConvertEnabled():",
                "+  gateway = JavaGateway(client, auto_convert = True)",
                "+else:",
                "+  gateway = JavaGateway(client)",
                "+",
                "+java_import(gateway.jvm, \"org.apache.spark.SparkEnv\")",
                "+java_import(gateway.jvm, \"org.apache.spark.SparkConf\")",
                "+java_import(gateway.jvm, \"org.apache.spark.api.java.*\")",
                "+java_import(gateway.jvm, \"org.apache.spark.api.python.*\")",
                "+java_import(gateway.jvm, \"org.apache.spark.mllib.api.python.*\")",
                "+",
                "+intp = gateway.entry_point",
                "+output = Logger()",
                "+sys.stdout = output",
                "+sys.stderr = output",
                "+intp.onPythonScriptInitialized(os.getpid())",
                "+",
                "+jsc = intp.getJavaSparkContext()",
                "+",
                "+if sparkVersion.isImportAllPackageUnderSparkSql():",
                "+  java_import(gateway.jvm, \"org.apache.spark.sql.*\")",
                "+  java_import(gateway.jvm, \"org.apache.spark.sql.hive.*\")",
                "+else:",
                "+  java_import(gateway.jvm, \"org.apache.spark.sql.SQLContext\")",
                "+  java_import(gateway.jvm, \"org.apache.spark.sql.hive.HiveContext\")",
                "+  java_import(gateway.jvm, \"org.apache.spark.sql.hive.LocalHiveContext\")",
                "+  java_import(gateway.jvm, \"org.apache.spark.sql.hive.TestHiveContext\")",
                "+",
                "+",
                "+java_import(gateway.jvm, \"scala.Tuple2\")",
                "+",
                "+_zcUserQueryNameSpace = {}",
                "+",
                "+jconf = intp.getSparkConf()",
                "+conf = SparkConf(_jvm = gateway.jvm, _jconf = jconf)",
                "+sc = _zsc_ = SparkContext(jsc=jsc, gateway=gateway, conf=conf)",
                "+_zcUserQueryNameSpace[\"_zsc_\"] = _zsc_",
                "+_zcUserQueryNameSpace[\"sc\"] = sc",
                "+",
                "+if sparkVersion.isSpark2():",
                "+  spark = __zSpark__ = SparkSession(sc, intp.getSparkSession())",
                "+  sqlc = __zSqlc__ = __zSpark__._wrapped",
                "+  _zcUserQueryNameSpace[\"sqlc\"] = sqlc",
                "+  _zcUserQueryNameSpace[\"__zSqlc__\"] = __zSqlc__",
                "+  _zcUserQueryNameSpace[\"spark\"] = spark",
                "+  _zcUserQueryNameSpace[\"__zSpark__\"] = __zSpark__",
                "+else:",
                "+  sqlc = __zSqlc__ = SQLContext(sparkContext=sc, sqlContext=intp.getSQLContext())",
                "+  _zcUserQueryNameSpace[\"sqlc\"] = sqlc",
                "+  _zcUserQueryNameSpace[\"__zSqlc__\"] = sqlc",
                "+",
                "+sqlContext = __zSqlc__",
                "+_zcUserQueryNameSpace[\"sqlContext\"] = sqlContext",
                "+",
                "+completion = __zeppelin_completion__ = PySparkCompletion(intp)",
                "+_zcUserQueryNameSpace[\"completion\"] = completion",
                "+_zcUserQueryNameSpace[\"__zeppelin_completion__\"] = __zeppelin_completion__",
                "+",
                "+z = __zeppelin__ = PyZeppelinContext(intp.getZeppelinContext())",
                "+__zeppelin__._setup_matplotlib()",
                "+_zcUserQueryNameSpace[\"z\"] = z",
                "+_zcUserQueryNameSpace[\"__zeppelin__\"] = __zeppelin__",
                "+",
                "+while True :",
                "+  req = intp.getStatements()",
                "+  try:",
                "+    stmts = req.statements().split(\"\\n\")",
                "+    jobGroup = req.jobGroup()",
                "+    jobDesc = req.jobDescription()",
                "+    ",
                "+    # Get post-execute hooks",
                "+    try:",
                "+      global_hook = intp.getHook('post_exec_dev')",
                "+    except:",
                "+      global_hook = None",
                "+      ",
                "+    try:",
                "+      user_hook = __zeppelin__.getHook('post_exec')",
                "+    except:",
                "+      user_hook = None",
                "+      ",
                "+    nhooks = 0",
                "+    for hook in (global_hook, user_hook):",
                "+      if hook:",
                "+        nhooks += 1",
                "+",
                "+    if stmts:",
                "+      # use exec mode to compile the statements except the last statement,",
                "+      # so that the last statement's evaluation will be printed to stdout",
                "+      sc.setJobGroup(jobGroup, jobDesc)",
                "+      code = compile('\\n'.join(stmts), '<stdin>', 'exec', ast.PyCF_ONLY_AST, 1)",
                "+      to_run_hooks = []",
                "+      if (nhooks > 0):",
                "+        to_run_hooks = code.body[-nhooks:]",
                "+      to_run_exec, to_run_single = (code.body[:-(nhooks + 1)],",
                "+                                    [code.body[-(nhooks + 1)]])",
                "+",
                "+      try:",
                "+        for node in to_run_exec:",
                "+          mod = ast.Module([node])",
                "+          code = compile(mod, '<stdin>', 'exec')",
                "+          exec(code, _zcUserQueryNameSpace)",
                "+",
                "+        for node in to_run_single:",
                "+          mod = ast.Interactive([node])",
                "+          code = compile(mod, '<stdin>', 'single')",
                "+          exec(code, _zcUserQueryNameSpace)",
                "+          ",
                "+        for node in to_run_hooks:",
                "+          mod = ast.Module([node])",
                "+          code = compile(mod, '<stdin>', 'exec')",
                "+          exec(code, _zcUserQueryNameSpace)",
                "+",
                "+        intp.setStatementsFinished(\"\", False)",
                "+      except Py4JJavaError:",
                "+        # raise it to outside try except",
                "+        raise",
                "+      except:",
                "+        exception = traceback.format_exc()",
                "+        m = re.search(\"File \\\"<stdin>\\\", line (\\d+).*\", exception)",
                "+        if m:",
                "+          line_no = int(m.group(1))",
                "+          intp.setStatementsFinished(",
                "+            \"Fail to execute line {}: {}\\n\".format(line_no, stmts[line_no - 1]) + exception, True)",
                "+        else:",
                "+          intp.setStatementsFinished(exception, True)",
                "+    else:",
                "+      intp.setStatementsFinished(\"\", False)",
                "+",
                "+  except Py4JJavaError:",
                "+    excInnerError = traceback.format_exc() # format_tb() does not return the inner exception",
                "+    innerErrorStart = excInnerError.find(\"Py4JJavaError:\")",
                "+    if innerErrorStart > -1:",
                "+       excInnerError = excInnerError[innerErrorStart:]",
                "+    intp.setStatementsFinished(excInnerError + str(sys.exc_info()), True)",
                "+  except:",
                "+    intp.setStatementsFinished(traceback.format_exc(), True)",
                "+",
                "+  output.reset()",
                "diff --git a/spark/interpreter/src/main/scala/org/apache/spark/SparkRBackend.scala b/spark/interpreter/src/main/scala/org/apache/spark/SparkRBackend.scala",
                "new file mode 100644",
                "index 000000000..05f1ac0e3",
                "--- /dev/null",
                "+++ b/spark/interpreter/src/main/scala/org/apache/spark/SparkRBackend.scala",
                "@@ -0,0 +1,54 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.spark",
                "+",
                "+import org.apache.spark.api.r.RBackend",
                "+",
                "+object SparkRBackend {",
                "+  val backend : RBackend = new RBackend()",
                "+  private var started = false;",
                "+  private var portNumber = 0;",
                "+",
                "+  val backendThread : Thread = new Thread(\"SparkRBackend\") {",
                "+    override def run() {",
                "+      backend.run()",
                "+    }",
                "+  }",
                "+",
                "+  def init() : Int = {",
                "+    portNumber = backend.init()",
                "+    portNumber",
                "+  }",
                "+",
                "+  def start() : Unit = {",
                "+    backendThread.start()",
                "+    started = true",
                "+  }",
                "+",
                "+  def close() : Unit = {",
                "+    backend.close()",
                "+    backendThread.join()",
                "+  }",
                "+",
                "+  def isStarted() : Boolean = {",
                "+    started",
                "+  }",
                "+",
                "+  def port(): Int = {",
                "+    return portNumber",
                "+  }",
                "+}",
                "diff --git a/spark/interpreter/src/main/scala/org/apache/zeppelin/spark/ZeppelinRDisplay.scala b/spark/interpreter/src/main/scala/org/apache/zeppelin/spark/ZeppelinRDisplay.scala",
                "new file mode 100644",
                "index 000000000..a9014c2ab",
                "--- /dev/null",
                "+++ b/spark/interpreter/src/main/scala/org/apache/zeppelin/spark/ZeppelinRDisplay.scala",
                "@@ -0,0 +1,117 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.spark",
                "+",
                "+import org.apache.zeppelin.interpreter.InterpreterResult.Code",
                "+import org.apache.zeppelin.interpreter.InterpreterResult.Code.{SUCCESS}",
                "+import org.apache.zeppelin.interpreter.InterpreterResult.Type",
                "+import org.apache.zeppelin.interpreter.InterpreterResult.Type.{TEXT, HTML, TABLE, IMG}",
                "+import org.jsoup.Jsoup",
                "+import org.jsoup.nodes.Element",
                "+import org.jsoup.nodes.Document.OutputSettings",
                "+import org.jsoup.safety.Whitelist",
                "+",
                "+import scala.collection.JavaConversions._",
                "+import scala.util.matching.Regex",
                "+",
                "+case class RDisplay(content: String, `type`: Type, code: Code)",
                "+",
                "+object ZeppelinRDisplay {",
                "+",
                "+  val pattern = new Regex(\"\"\"^ *\\[\\d*\\] \"\"\")",
                "+",
                "+  def render(html: String, imageWidth: String): RDisplay = {",
                "+",
                "+    val document = Jsoup.parse(html)",
                "+    document.outputSettings().prettyPrint(false)",
                "+",
                "+    val body = document.body()",
                "+",
                "+    if (body.getElementsByTag(\"p\").isEmpty) return RDisplay(body.html(), HTML, SUCCESS)",
                "+",
                "+    val bodyHtml = body.html()",
                "+",
                "+    if (! bodyHtml.contains(\"<img\")",
                "+      &&  ! bodyHtml.contains(\"<script\")",
                "+      && ! bodyHtml.contains(\"%html \")",
                "+      && ! bodyHtml.contains(\"%table \")",
                "+      && ! bodyHtml.contains(\"%img \")",
                "+    ) {",
                "+      return textDisplay(body)",
                "+    }",
                "+",
                "+    if (bodyHtml.contains(\"%table\")) {",
                "+      return tableDisplay(body)",
                "+    }",
                "+",
                "+    if (bodyHtml.contains(\"%img\")) {",
                "+      return imgDisplay(body)",
                "+    }",
                "+",
                "+    return htmlDisplay(body, imageWidth)",
                "+  }",
                "+",
                "+  private def textDisplay(body: Element): RDisplay = {",
                "+    // remove HTML tag while preserving whitespaces and newlines",
                "+    val text = Jsoup.clean(body.html(), \"\",",
                "+      Whitelist.none(), new OutputSettings().prettyPrint(false))",
                "+    RDisplay(text, TEXT, SUCCESS)",
                "+  }",
                "+",
                "+  private def tableDisplay(body: Element): RDisplay = {",
                "+    val p = body.getElementsByTag(\"p\").first().html.replace(\"\u00e2\u0080\u009c%table \" , \"\").replace(\"\u00e2\u0080\u009d\", \"\")",
                "+    val r = (pattern findFirstIn p).getOrElse(\"\")",
                "+    val table = p.replace(r, \"\").replace(\"\\\\t\", \"\\t\").replace(\"\\\\n\", \"\\n\")",
                "+    RDisplay(table, TABLE, SUCCESS)",
                "+  }",
                "+",
                "+  private def imgDisplay(body: Element): RDisplay = {",
                "+    val p = body.getElementsByTag(\"p\").first().html.replace(\"\u00e2\u0080\u009c%img \" , \"\").replace(\"\u00e2\u0080\u009d\", \"\")",
                "+    val r = (pattern findFirstIn p).getOrElse(\"\")",
                "+    val img = p.replace(r, \"\")",
                "+    RDisplay(img, IMG, SUCCESS)",
                "+  }",
                "+",
                "+  private def htmlDisplay(body: Element, imageWidth: String): RDisplay = {",
                "+    var div = new String()",
                "+",
                "+    for (element <- body.children) {",
                "+",
                "+      val eHtml = element.html()",
                "+      var eOuterHtml = element.outerHtml()",
                "+",
                "+      eOuterHtml = eOuterHtml.replace(\"\u00e2\u0080\u009c%html \" , \"\").replace(\"\u00e2\u0080\u009d\", \"\")",
                "+",
                "+      val r = (pattern findFirstIn eHtml).getOrElse(\"\")",
                "+",
                "+      div = div + eOuterHtml.replace(r, \"\")",
                "+    }",
                "+",
                "+    val content =  div",
                "+      .replaceAll(\"src=\\\"//\", \"src=\\\"http://\")",
                "+      .replaceAll(\"href=\\\"//\", \"href=\\\"http://\")",
                "+",
                "+    body.html(content)",
                "+",
                "+    for (image <- body.getElementsByTag(\"img\")) {",
                "+      image.attr(\"width\", imageWidth)",
                "+    }",
                "+",
                "+    RDisplay(body.html, HTML, SUCCESS)",
                "+  }",
                "+}",
                "diff --git a/spark/interpreter/src/main/scala/org/apache/zeppelin/spark/utils/DisplayUtils.scala b/spark/interpreter/src/main/scala/org/apache/zeppelin/spark/utils/DisplayUtils.scala",
                "new file mode 100644",
                "index 000000000..81814349c",
                "--- /dev/null",
                "+++ b/spark/interpreter/src/main/scala/org/apache/zeppelin/spark/utils/DisplayUtils.scala",
                "@@ -0,0 +1,90 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.spark.utils",
                "+",
                "+import java.lang.StringBuilder",
                "+",
                "+import org.apache.spark.rdd.RDD",
                "+",
                "+import scala.collection.IterableLike",
                "+",
                "+object DisplayUtils {",
                "+",
                "+  implicit def toDisplayRDDFunctions[T <: Product](rdd: RDD[T]): DisplayRDDFunctions[T] = new DisplayRDDFunctions[T](rdd)",
                "+",
                "+  implicit def toDisplayTraversableFunctions[T <: Product](traversable: Traversable[T]): DisplayTraversableFunctions[T] = new DisplayTraversableFunctions[T](traversable)",
                "+",
                "+  def html(htmlContent: String = \"\") = s\"%html $htmlContent\"",
                "+",
                "+  def img64(base64Content: String = \"\") = s\"%img $base64Content\"",
                "+",
                "+  def img(url: String) = s\"<img src='$url' />\"",
                "+}",
                "+",
                "+trait DisplayCollection[T <: Product] {",
                "+",
                "+  def printFormattedData(traversable: Traversable[T], columnLabels: String*): Unit = {",
                "+    val providedLabelCount: Int = columnLabels.size",
                "+    var maxColumnCount:Int = 1",
                "+    val headers = new StringBuilder(\"%table \")",
                "+",
                "+    val data = new StringBuilder(\"\")",
                "+",
                "+    traversable.foreach(tuple => {",
                "+      maxColumnCount = math.max(maxColumnCount,tuple.productArity)",
                "+      data.append(tuple.productIterator.mkString(\"\\t\")).append(\"\\n\")",
                "+    })",
                "+",
                "+    if (providedLabelCount > maxColumnCount) {",
                "+      headers.append(columnLabels.take(maxColumnCount).mkString(\"\\t\")).append(\"\\n\")",
                "+    } else if (providedLabelCount < maxColumnCount) {",
                "+      val missingColumnHeaders = ((providedLabelCount+1) to maxColumnCount).foldLeft[String](\"\"){",
                "+        (stringAccumulator,index) =>  if (index==1) s\"Column$index\" else s\"$stringAccumulator\\tColumn$index\"",
                "+      }",
                "+",
                "+      headers.append(columnLabels.mkString(\"\\t\")).append(missingColumnHeaders).append(\"\\n\")",
                "+    } else {",
                "+      headers.append(columnLabels.mkString(\"\\t\")).append(\"\\n\")",
                "+    }",
                "+",
                "+    headers.append(data)",
                "+",
                "+    print(headers.toString)",
                "+  }",
                "+",
                "+}",
                "+",
                "+class DisplayRDDFunctions[T <: Product] (val rdd: RDD[T]) extends DisplayCollection[T] {",
                "+",
                "+  def display(columnLabels: String*)(implicit sparkMaxResult: SparkMaxResult): Unit = {",
                "+    printFormattedData(rdd.take(sparkMaxResult.maxResult), columnLabels: _*)",
                "+  }",
                "+",
                "+  def display(sparkMaxResult:Int, columnLabels: String*): Unit = {",
                "+    printFormattedData(rdd.take(sparkMaxResult), columnLabels: _*)",
                "+  }",
                "+}",
                "+",
                "+class DisplayTraversableFunctions[T <: Product] (val traversable: Traversable[T]) extends DisplayCollection[T] {",
                "+",
                "+  def display(columnLabels: String*): Unit = {",
                "+    printFormattedData(traversable, columnLabels: _*)",
                "+  }",
                "+}",
                "+",
                "+class SparkMaxResult(val maxResult: Int) extends Serializable",
                "diff --git a/spark/pom.xml b/spark/pom.xml",
                "index 71110e30a..df66b35e5 100644",
                "--- a/spark/pom.xml",
                "+++ b/spark/pom.xml",
                "@@ -18,678 +18,225 @@",
                "-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">",
                "-  <modelVersion>4.0.0</modelVersion>",
                "+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"",
                "+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"",
                "+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">",
                "+    <modelVersion>4.0.0</modelVersion>",
                "+",
                "+    <parent>",
                "+        <artifactId>interpreter-parent</artifactId>",
                "+        <groupId>org.apache.zeppelin</groupId>",
                "+        <version>0.9.0-SNAPSHOT</version>",
                "+        <relativePath>../interpreter-parent/pom.xml</relativePath>",
                "+    </parent>",
                "-  <parent>",
                "-    <artifactId>zeppelin</artifactId>",
                "     <groupId>org.apache.zeppelin</groupId>",
                "+    <artifactId>spark-parent</artifactId>",
                "+    <packaging>pom</packaging>",
                "     <version>0.8.0-SNAPSHOT</version>",
                "-    <relativePath>..</relativePath>",
                "-  </parent>",
                "-",
                "-  <groupId>org.apache.zeppelin</groupId>",
                "-  <artifactId>zeppelin-spark_2.10</artifactId>",
                "-  <packaging>jar</packaging>",
                "-  <version>0.8.0-SNAPSHOT</version>",
                "-  <name>Zeppelin: Spark</name>",
                "-  <description>Zeppelin spark support</description>",
                "-",
                "-  <properties>",
                "-    <!--library versions-->",
                "-    <jsoup.version>1.8.2</jsoup.version>",
                "-    <spark.version>2.0.2</spark.version>",
                "-    <guava.version>14.0.1</guava.version>",
                "-    <commons.exec.version>1.3</commons.exec.version>",
                "-    <commons.compress.version>1.9</commons.compress.version>",
                "-    <maven.plugin.api.version>3.0</maven.plugin.api.version>",
                "-    <aether.version>1.12</aether.version>",
                "-    <maven.aeither.provider.version>3.0.3</maven.aeither.provider.version>",
                "-    <wagon.version>1.0</wagon.version>",
                "-",
                "-    <datanucleus.rdbms.version>3.2.9</datanucleus.rdbms.version>",
                "-    <datanucleus.apijdo.version>3.2.6</datanucleus.apijdo.version>",
                "-    <datanucleus.core.version>3.2.10</datanucleus.core.version>",
                "-",
                "-    <!--plugin versions-->",
                "-    <plugin.shade.version>2.3</plugin.shade.version>",
                "-    <plugin.scala.version>2.15.2</plugin.scala.version>",
                "-",
                "-    <!-- settings -->",
                "-    <pyspark.test.exclude>**/PySparkInterpreterMatplotlibTest.java</pyspark.test.exclude>",
                "-    <pyspark.test.include>**/*Test.*</pyspark.test.include>",
                "-  </properties>",
                "-",
                "-  <dependencies>",
                "-    <dependency>",
                "-      <groupId>${project.groupId}</groupId>",
                "-      <artifactId>zeppelin-display_${scala.binary.version}</artifactId>",
                "-      <version>${project.version}</version>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>${project.groupId}</groupId>",
                "-      <artifactId>zeppelin-interpreter</artifactId>",
                "-      <version>${project.version}</version>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>${project.groupId}</groupId>",
                "-      <artifactId>zeppelin-python</artifactId>",
                "-      <version>${project.version}</version>",
                "-      <exclusions>",
                "-        <exclusion>",
                "-          <groupId>net.sf.py4j</groupId>",
                "-          <artifactId>py4j</artifactId>",
                "-        </exclusion>",
                "-      </exclusions>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>${project.groupId}</groupId>",
                "-      <artifactId>zeppelin-python</artifactId>",
                "-      <version>${project.version}</version>",
                "-      <classifier>tests</classifier>",
                "-      <scope>test</scope>",
                "-      <exclusions>",
                "-        <exclusion>",
                "-          <groupId>net.sf.py4j</groupId>",
                "-          <artifactId>py4j</artifactId>",
                "-        </exclusion>",
                "-      </exclusions>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.slf4j</groupId>",
                "-      <artifactId>slf4j-api</artifactId>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.slf4j</groupId>",
                "-      <artifactId>slf4j-log4j12</artifactId>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.apache.spark</groupId>",
                "-      <artifactId>spark-repl_${scala.binary.version}</artifactId>",
                "-      <version>${spark.version}</version>",
                "-      <scope>provided</scope>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.apache.spark</groupId>",
                "-      <artifactId>spark-hive_${scala.binary.version}</artifactId>",
                "-      <version>${spark.version}</version>",
                "-      <scope>provided</scope>",
                "-    </dependency>",
                "-",
                "-    <!-- Aether :: maven dependency resolution -->",
                "-    <dependency>",
                "-      <groupId>org.apache.maven</groupId>",
                "-      <artifactId>maven-plugin-api</artifactId>",
                "-      <version>${maven.plugin.api.version}</version>",
                "-      <exclusions>",
                "-        <exclusion>",
                "-          <groupId>org.codehaus.plexus</groupId>",
                "-          <artifactId>plexus-utils</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>org.sonatype.sisu</groupId>",
                "-          <artifactId>sisu-inject-plexus</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>org.apache.maven</groupId>",
                "-          <artifactId>maven-model</artifactId>",
                "-        </exclusion>",
                "-      </exclusions>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.sonatype.aether</groupId>",
                "-      <artifactId>aether-api</artifactId>",
                "-      <version>${aether.version}</version>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.sonatype.aether</groupId>",
                "-      <artifactId>aether-util</artifactId>",
                "-      <version>${aether.version}</version>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.sonatype.aether</groupId>",
                "-      <artifactId>aether-impl</artifactId>",
                "-      <version>${aether.version}</version>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.apache.maven</groupId>",
                "-      <artifactId>maven-aether-provider</artifactId>",
                "-      <version>${maven.aeither.provider.version}</version>",
                "-      <exclusions>",
                "-        <exclusion>",
                "-          <groupId>org.sonatype.aether</groupId>",
                "-          <artifactId>aether-api</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>org.sonatype.aether</groupId>",
                "-          <artifactId>aether-spi</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>org.sonatype.aether</groupId>",
                "-          <artifactId>aether-util</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>org.sonatype.aether</groupId>",
                "-          <artifactId>aether-impl</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>org.codehaus.plexus</groupId>",
                "-          <artifactId>plexus-utils</artifactId>",
                "-        </exclusion>",
                "-      </exclusions>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.sonatype.aether</groupId>",
                "-      <artifactId>aether-connector-file</artifactId>",
                "-      <version>${aether.version}</version>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.sonatype.aether</groupId>",
                "-      <artifactId>aether-connector-wagon</artifactId>",
                "-      <version>${aether.version}</version>",
                "-      <exclusions>",
                "-        <exclusion>",
                "-          <groupId>org.apache.maven.wagon</groupId>",
                "-          <artifactId>wagon-provider-api</artifactId>",
                "-        </exclusion>",
                "-      </exclusions>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.apache.maven.wagon</groupId>",
                "-      <artifactId>wagon-provider-api</artifactId>",
                "-      <version>${wagon.version}</version>",
                "-      <exclusions>",
                "-        <exclusion>",
                "-          <groupId>org.codehaus.plexus</groupId>",
                "-          <artifactId>plexus-utils</artifactId>",
                "-        </exclusion>",
                "-      </exclusions>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.apache.maven.wagon</groupId>",
                "-      <artifactId>wagon-http-lightweight</artifactId>",
                "-      <version>${wagon.version}</version>",
                "-      <exclusions>",
                "-        <exclusion>",
                "-          <groupId>org.apache.maven.wagon</groupId>",
                "-          <artifactId>wagon-http-shared</artifactId>",
                "-        </exclusion>",
                "-      </exclusions>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.apache.maven.wagon</groupId>",
                "-      <artifactId>wagon-http</artifactId>",
                "-      <version>${wagon.version}</version>",
                "-      <exclusions>",
                "-      </exclusions>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.apache.commons</groupId>",
                "-      <artifactId>commons-exec</artifactId>",
                "-      <version>${commons.exec.version}</version>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.scala-lang</groupId>",
                "-      <artifactId>scala-library</artifactId>",
                "-      <version>${scala.version}</version>",
                "-      <scope>provided</scope>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.scala-lang</groupId>",
                "-      <artifactId>scala-compiler</artifactId>",
                "-      <version>${scala.version}</version>",
                "-      <scope>provided</scope>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.scala-lang</groupId>",
                "-      <artifactId>scala-reflect</artifactId>",
                "-      <version>${scala.version}</version>",
                "-      <scope>provided</scope>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>commons-lang</groupId>",
                "-      <artifactId>commons-lang</artifactId>",
                "-      <scope>provided</scope>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.apache.commons</groupId>",
                "-      <artifactId>commons-compress</artifactId>",
                "-      <version>${commons.compress.version}</version>",
                "-      <scope>provided</scope>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.jsoup</groupId>",
                "-      <artifactId>jsoup</artifactId>",
                "-      <version>${jsoup.version}</version>",
                "-    </dependency>",
                "-",
                "-    <!--test libraries-->",
                "-    <dependency>",
                "-      <groupId>org.scalatest</groupId>",
                "-      <artifactId>scalatest_${scala.binary.version}</artifactId>",
                "-      <version>${scalatest.version}</version>",
                "-      <scope>test</scope>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>junit</groupId>",
                "-      <artifactId>junit</artifactId>",
                "-      <scope>test</scope>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.datanucleus</groupId>",
                "-      <artifactId>datanucleus-core</artifactId>",
                "-      <version>${datanucleus.core.version}</version>",
                "-      <scope>test</scope>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.datanucleus</groupId>",
                "-      <artifactId>datanucleus-api-jdo</artifactId>",
                "-      <version>${datanucleus.apijdo.version}</version>",
                "-      <scope>test</scope>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.datanucleus</groupId>",
                "-      <artifactId>datanucleus-rdbms</artifactId>",
                "-      <version>${datanucleus.rdbms.version}</version>",
                "-      <scope>test</scope>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.mockito</groupId>",
                "-      <artifactId>mockito-core</artifactId>",
                "-      <scope>test</scope>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.powermock</groupId>",
                "-      <artifactId>powermock-api-mockito</artifactId>",
                "-      <scope>test</scope>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.powermock</groupId>",
                "-      <artifactId>powermock-module-junit4</artifactId>",
                "-      <scope>test</scope>",
                "-    </dependency>",
                "-",
                "-  </dependencies>",
                "-",
                "-  <build>",
                "-    <plugins>",
                "-      <plugin>",
                "-        <artifactId>maven-enforcer-plugin</artifactId>",
                "-        <executions>",
                "-          <execution>",
                "-            <id>enforce</id>",
                "-            <phase>none</phase>",
                "-          </execution>",
                "-        </executions>",
                "-      </plugin>",
                "-",
                "-      <plugin>",
                "-        <groupId>org.apache.maven.plugins</groupId>",
                "-        <artifactId>maven-surefire-plugin</artifactId>",
                "-        <configuration>",
                "-          <forkCount>1</forkCount>",
                "-          <reuseForks>false</reuseForks>",
                "-          <argLine>-Xmx1024m -XX:MaxPermSize=256m</argLine>",
                "-          <excludes>",
                "-            <exclude>**/SparkRInterpreterTest.java</exclude>",
                "-            <exclude>${pyspark.test.exclude}</exclude>",
                "-          </excludes>",
                "-          <environmentVariables>",
                "-            <!-- local pyspark execution needs PYTHONPATH otherwise python daemon in executor side will fail",
                "-            e.g. sc.range(1,10).sum()",
                "-            -->",
                "-            <PYTHONPATH>../interpreter/spark/pyspark/pyspark.zip:../interpreter/spark/pyspark/py4j-${spark.py4j.version}-src.zip:../interpreter/lib/python</PYTHONPATH>",
                "-          </environmentVariables>",
                "-        </configuration>",
                "-      </plugin>",
                "-",
                "-      <plugin>",
                "-        <groupId>org.apache.maven.plugins</groupId>",
                "-        <artifactId>maven-shade-plugin</artifactId>",
                "-        <version>${plugin.shade.version}</version>",
                "-        <configuration>",
                "-          <filters>",
                "-            <filter>",
                "-              <artifact>*:*</artifact>",
                "-              <excludes>",
                "-                <exclude>META-INF/*.SF</exclude>",
                "-                <exclude>META-INF/*.DSA</exclude>",
                "-                <exclude>META-INF/*.RSA</exclude>",
                "-              </excludes>",
                "-            </filter>",
                "-          </filters>",
                "-          <transformers>",
                "-            <transformer implementation=\"org.apache.maven.plugins.shade.resource.ServicesResourceTransformer\"/>",
                "-            <transformer implementation=\"org.apache.maven.plugins.shade.resource.AppendingTransformer\">",
                "-              <resource>reference.conf</resource>",
                "-            </transformer>",
                "-          </transformers>",
                "-",
                "-          <relocations>",
                "-            <!-- shade guava and proto-buf, because it might conflict with those of spark -->",
                "-            <relocation>",
                "-              <pattern>com.google</pattern>",
                "-              <shadedPattern>org.apache.zeppelin.com.google</shadedPattern>",
                "-            </relocation>",
                "-            <!-- shade netty, because it might conflict with that of spark-->",
                "-            <relocation>",
                "-              <pattern>io.netty</pattern>",
                "-              <shadedPattern>org.apache.zeppelin.io.netty</shadedPattern>",
                "-            </relocation>",
                "-          </relocations>",
                "-        </configuration>",
                "-        <executions>",
                "-          <execution>",
                "-            <phase>package</phase>",
                "-            <goals>",
                "-              <goal>shade</goal>",
                "-            </goals>",
                "-          </execution>",
                "-        </executions>",
                "-      </plugin>",
                "-",
                "-      <plugin>",
                "-        <groupId>org.apache.maven.plugins</groupId>",
                "-        <artifactId>maven-dependency-plugin</artifactId>",
                "-        <executions>",
                "-          <execution>",
                "-            <phase>package</phase>",
                "-            <goals>",
                "-              <goal>copy</goal>",
                "-            </goals>",
                "-            <configuration>",
                "-              <outputDirectory>${project.build.directory}/../../interpreter/spark</outputDirectory>",
                "-              <overWriteReleases>false</overWriteReleases>",
                "-              <overWriteSnapshots>false</overWriteSnapshots>",
                "-              <overWriteIfNewer>true</overWriteIfNewer>",
                "-              <includeScope>runtime</includeScope>",
                "-              <artifactItems>",
                "-                <artifactItem>",
                "-                  <groupId>${project.groupId}</groupId>",
                "-                  <artifactId>${project.artifactId}</artifactId>",
                "-                  <version>${project.version}</version>",
                "-                  <type>${project.packaging}</type>",
                "-                </artifactItem>",
                "-              </artifactItems>",
                "-            </configuration>",
                "-          </execution>",
                "-        </executions>",
                "-      </plugin>",
                "-",
                "-      <!-- Plugin to compile Scala code -->",
                "-      <plugin>",
                "-        <groupId>org.scala-tools</groupId>",
                "-        <artifactId>maven-scala-plugin</artifactId>",
                "-        <version>${plugin.scala.version}</version>",
                "-        <configuration>",
                "-            <scalaVersion>${scala.version}</scalaVersion>",
                "-          <excludes>",
                "-            <exclude>**/ZeppelinR.scala</exclude>",
                "-            <exclude>**/SparkRBackend.scala</exclude>",
                "-          </excludes>",
                "-        </configuration>",
                "-        <executions>",
                "-          <execution>",
                "-            <id>compile</id>",
                "-            <goals>",
                "-              <goal>compile</goal>",
                "-            </goals>",
                "-            <phase>compile</phase>",
                "-          </execution>",
                "-          <execution>",
                "-            <id>test-compile</id>",
                "-            <goals>",
                "-              <goal>testCompile</goal>",
                "-            </goals>",
                "-            <phase>test-compile</phase>",
                "-          </execution>",
                "-          <execution>",
                "-            <phase>process-resources</phase>",
                "-            <goals>",
                "-              <goal>compile</goal>",
                "-            </goals>",
                "-          </execution>",
                "-        </executions>",
                "-      </plugin>",
                "-",
                "-      <plugin>",
                "-        <groupId>org.apache.maven.plugins</groupId>",
                "-        <artifactId>maven-compiler-plugin</artifactId>",
                "-        <configuration>",
                "-          <excludes combine.self=\"override\"></excludes>",
                "-          <testExcludes combine.self=\"override\">",
                "-            <testExclude>${pyspark.test.exclude}</testExclude>",
                "-          </testExcludes>",
                "-        </configuration>",
                "-      </plugin>",
                "-      <plugin>",
                "-        <groupId>org.scala-tools</groupId>",
                "-        <artifactId>maven-scala-plugin</artifactId>",
                "-        <configuration>",
                "-          <excludes combine.self=\"override\">",
                "-          </excludes>",
                "-        </configuration>",
                "-      </plugin>",
                "-      <plugin>",
                "-        <groupId>org.apache.maven.plugins</groupId>",
                "-        <artifactId>maven-surefire-plugin</artifactId>",
                "-        <configuration>",
                "-          <excludes combine.self=\"override\">",
                "-            <exclude>${pyspark.test.exclude}</exclude>",
                "-          </excludes>",
                "-        </configuration>",
                "-      </plugin>",
                "-",
                "-      <!-- include sparkr by default -->",
                "-      <plugin>",
                "-        <groupId>org.apache.maven.plugins</groupId>",
                "-        <artifactId>maven-compiler-plugin</artifactId>",
                "-        <configuration>",
                "-          <excludes combine.self=\"override\"></excludes>",
                "-          <testExcludes combine.self=\"override\">",
                "-            <testExclude>${pyspark.test.exclude}</testExclude>",
                "-          </testExcludes>",
                "-        </configuration>",
                "-      </plugin>",
                "-      <plugin>",
                "-        <groupId>org.scala-tools</groupId>",
                "-        <artifactId>maven-scala-plugin</artifactId>",
                "-        <configuration>",
                "-          <excludes combine.self=\"override\">",
                "-          </excludes>",
                "-        </configuration>",
                "-      </plugin>",
                "-      <plugin>",
                "-        <groupId>org.apache.maven.plugins</groupId>",
                "-        <artifactId>maven-surefire-plugin</artifactId>",
                "-        <configuration>",
                "-          <excludes combine.self=\"override\">",
                "-            <exclude>${pyspark.test.exclude}</exclude>",
                "-          </excludes>",
                "-        </configuration>",
                "-      </plugin>",
                "-",
                "-      <plugin>",
                "-        <artifactId>maven-resources-plugin</artifactId>",
                "-        <executions>",
                "-          <execution>",
                "-            <id>copy-interpreter-setting</id>",
                "-            <phase>package</phase>",
                "-            <goals>",
                "-              <goal>resources</goal>",
                "-            </goals>",
                "-            <configuration>",
                "-              <outputDirectory>${project.build.directory}/../../interpreter/spark</outputDirectory>",
                "-            </configuration>",
                "-          </execution>",
                "-        </executions>",
                "-      </plugin>",
                "-    </plugins>",
                "-  </build>",
                "-",
                "-  <profiles>",
                "-    <profile>",
                "-      <id>spark-1.4</id>",
                "-      <properties>",
                "-        <spark.version>1.4.1</spark.version>",
                "-      </properties>",
                "-",
                "-      <dependencies>",
                "-      </dependencies>",
                "-    </profile>",
                "-",
                "-    <profile>",
                "-      <id>spark-1.5</id>",
                "-      <properties>",
                "-        <spark.version>1.5.2</spark.version>",
                "-        <akka.group>com.typesafe.akka</akka.group>",
                "-        <akka.version>2.3.11</akka.version>",
                "-        <protobuf.version>2.5.0</protobuf.version>",
                "-      </properties>",
                "-    </profile>",
                "-",
                "-    <profile>",
                "-      <id>spark-1.6</id>",
                "-      <properties>",
                "-        <spark.version>1.6.3</spark.version>",
                "-        <spark.py4j.version>0.9</spark.py4j.version>",
                "-        <akka.group>com.typesafe.akka</akka.group>",
                "-        <akka.version>2.3.11</akka.version>",
                "-        <protobuf.version>2.5.0</protobuf.version>",
                "-      </properties>",
                "-    </profile>",
                "-",
                "-    <profile>",
                "-      <id>spark-2.0</id>",
                "-      <properties>",
                "-        <spark.version>2.0.2</spark.version>",
                "-        <protobuf.version>2.5.0</protobuf.version>",
                "-        <spark.py4j.version>0.10.3</spark.py4j.version>",
                "-      </properties>",
                "-    </profile>",
                "+    <name>spark-parent</name>",
                "+    <description>Zeppelin spark support</description>",
                "+",
                "+    <properties>",
                "+        <!--library versions-->",
                "+        <datanucleus.rdbms.version>3.2.9</datanucleus.rdbms.version>",
                "+        <datanucleus.apijdo.version>3.2.6</datanucleus.apijdo.version>",
                "+        <datanucleus.core.version>3.2.10</datanucleus.core.version>",
                "+",
                "+        <!--plugin versions-->",
                "+        <plugin.shade.version>2.4.1</plugin.shade.version>",
                "+        <plugin.scala.version>2.15.2</plugin.scala.version>",
                "+        <!-- spark versions -->",
                "+        <spark.version>2.2.0</spark.version>",
                "+        <py4j.version>0.10.4</py4j.version>",
                "+    </properties>",
                "-    <profile>",
                "-      <id>spark-2.1</id>",
                "-      <properties>",
                "-        <spark.version>2.1.0</spark.version>",
                "-        <protobuf.version>2.5.0</protobuf.version>",
                "-        <spark.py4j.version>0.10.4</spark.py4j.version>",
                "-        <scala.version>2.11.8</scala.version>",
                "-      </properties>",
                "-    </profile>",
                "+    <dependencies>",
                "-    <profile>",
                "-      <id>spark-2.2</id>",
                "-      <activation>",
                "-        <activeByDefault>true</activeByDefault>",
                "-      </activation>",
                "-      <properties>",
                "-        <spark.version>2.2.0</spark.version>",
                "-        <protobuf.version>2.5.0</protobuf.version>",
                "-        <spark.py4j.version>0.10.4</spark.py4j.version>",
                "-      </properties>",
                "-    </profile>",
                "+        <dependency>",
                "+            <groupId>org.apache.zeppelin</groupId>",
                "+            <artifactId>zeppelin-interpreter</artifactId>",
                "+            <version>${project.version}</version>",
                "+        </dependency>",
                "-    <profile>",
                "-      <id>hadoop-0.23</id>",
                "-      <!-- SPARK-1121: Adds an explicit dependency on Avro to work around a",
                "-        Hadoop 0.23.X issue -->",
                "-      <dependencies>",
                "+        <!--test libraries-->",
                "         <dependency>",
                "-          <groupId>org.apache.avro</groupId>",
                "-          <artifactId>avro</artifactId>",
                "+            <groupId>org.apache.zeppelin</groupId>",
                "+            <artifactId>zeppelin-display</artifactId>",
                "+            <version>${project.version}</version>",
                "+            <scope>test</scope>",
                "         </dependency>",
                "-      </dependencies>",
                "-      <properties>",
                "-        <hadoop.version>0.23.10</hadoop.version>",
                "-      </properties>",
                "-    </profile>",
                "-    <profile>",
                "-      <id>hadoop-1</id>",
                "-      <properties>",
                "-        <hadoop.version>1.0.4</hadoop.version>",
                "-        <avro.mapred.classifier>hadoop1</avro.mapred.classifier>",
                "-        <codehaus.jackson.version>1.8.8</codehaus.jackson.version>",
                "-        <akka.group>org.spark-project.akka</akka.group>",
                "-      </properties>",
                "-    </profile>",
                "+        <dependency>",
                "+            <groupId>org.scalatest</groupId>",
                "+            <artifactId>scalatest_${scala.binary.version}</artifactId>",
                "+            <version>${scalatest.version}</version>",
                "+            <scope>test</scope>",
                "+        </dependency>",
                "-    <profile>",
                "-      <id>hadoop-2.2</id>",
                "-      <properties>",
                "-        <hadoop.version>2.2.0</hadoop.version>",
                "-        <protobuf.version>2.5.0</protobuf.version>",
                "-        <avro.mapred.classifier>hadoop2</avro.mapred.classifier>",
                "-      </properties>",
                "-    </profile>",
                "+        <dependency>",
                "+            <groupId>junit</groupId>",
                "+            <artifactId>junit</artifactId>",
                "+            <scope>test</scope>",
                "+        </dependency>",
                "-    <profile>",
                "-      <id>hadoop-2.3</id>",
                "-      <properties>",
                "-        <hadoop.version>2.3.0</hadoop.version>",
                "-        <protobuf.version>2.5.0</protobuf.version>",
                "-        <jets3t.version>0.9.3</jets3t.version>",
                "-        <avro.mapred.classifier>hadoop2</avro.mapred.classifier>",
                "-      </properties>",
                "-    </profile>",
                "+        <dependency>",
                "+            <groupId>org.datanucleus</groupId>",
                "+            <artifactId>datanucleus-core</artifactId>",
                "+            <version>${datanucleus.core.version}</version>",
                "+            <scope>test</scope>",
                "+        </dependency>",
                "-    <profile>",
                "-      <id>hadoop-2.4</id>",
                "-      <properties>",
                "-        <hadoop.version>2.4.0</hadoop.version>",
                "-        <protobuf.version>2.5.0</protobuf.version>",
                "-        <jets3t.version>0.9.3</jets3t.version>",
                "-        <avro.mapred.classifier>hadoop2</avro.mapred.classifier>",
                "-      </properties>",
                "-    </profile>",
                "+        <dependency>",
                "+            <groupId>org.datanucleus</groupId>",
                "+            <artifactId>datanucleus-api-jdo</artifactId>",
                "+            <version>${datanucleus.apijdo.version}</version>",
                "+            <scope>test</scope>",
                "+        </dependency>",
                "-    <profile>",
                "-      <id>hadoop-2.6</id>",
                "-      <properties>",
                "-        <hadoop.version>2.6.0</hadoop.version>",
                "-        <protobuf.version>2.5.0</protobuf.version>",
                "-        <jets3t.version>0.9.3</jets3t.version>",
                "-        <avro.mapred.classifier>hadoop2</avro.mapred.classifier>",
                "-      </properties>",
                "-    </profile>",
                "+        <dependency>",
                "+            <groupId>org.datanucleus</groupId>",
                "+            <artifactId>datanucleus-rdbms</artifactId>",
                "+            <version>${datanucleus.rdbms.version}</version>",
                "+            <scope>test</scope>",
                "+        </dependency>",
                "-    <profile>",
                "-      <id>hadoop-2.7</id>",
                "-      <properties>",
                "-        <hadoop.version>2.7.2</hadoop.version>",
                "-        <protobuf.version>2.5.0</protobuf.version>",
                "-        <jets3t.version>0.9.0</jets3t.version>",
                "-        <avro.mapred.classifier>hadoop2</avro.mapred.classifier>",
                "-      </properties>",
                "-    </profile>",
                "-  </profiles>",
                "+    </dependencies>",
                "+",
                "+    <build>",
                "+        <plugins>",
                "+            <plugin>",
                "+                <artifactId>maven-enforcer-plugin</artifactId>",
                "+                <executions>",
                "+                    <execution>",
                "+                        <id>enforce</id>",
                "+                        <phase>none</phase>",
                "+                    </execution>",
                "+                </executions>",
                "+            </plugin>",
                "+",
                "+            <plugin>",
                "+                <groupId>org.scalatest</groupId>",
                "+                <artifactId>scalatest-maven-plugin</artifactId>",
                "+                <configuration>",
                "+                    <reportsDirectory>${project.build.directory}/surefire-reports</reportsDirectory>",
                "+                    <junitxml>.</junitxml>",
                "+                    <filereports>WDF TestSuite.txt</filereports>",
                "+                </configuration>",
                "+                <executions>",
                "+                    <execution>",
                "+                        <id>test</id>",
                "+                        <goals>",
                "+                            <goal>test</goal>",
                "+                        </goals>",
                "+                    </execution>",
                "+                </executions>",
                "+            </plugin>",
                "+",
                "+            <plugin>",
                "+                <groupId>net.alchim31.maven</groupId>",
                "+                <artifactId>scala-maven-plugin</artifactId>",
                "+                <version>3.2.2</version>",
                "+                <executions>",
                "+                    <execution>",
                "+                        <id>eclipse-add-source</id>",
                "+                        <goals>",
                "+                            <goal>add-source</goal>",
                "+                        </goals>",
                "+                    </execution>",
                "+                    <execution>",
                "+                        <id>scala-compile-first</id>",
                "+                        <phase>process-resources</phase>",
                "+                        <goals>",
                "+                            <goal>compile</goal>",
                "+                        </goals>",
                "+                    </execution>",
                "+                    <execution>",
                "+                        <id>scala-test-compile-first</id>",
                "+                        <phase>process-test-resources</phase>",
                "+                        <goals>",
                "+                            <goal>testCompile</goal>",
                "+                        </goals>",
                "+                    </execution>",
                "+                </executions>",
                "+                <configuration>",
                "+                    <scalaVersion>${scala.compile.version}</scalaVersion>",
                "+                    <!--<recompileMode>incremental</recompileMode>-->",
                "+                    <!--<useZincServer>true</useZincServer>-->",
                "+                    <args>",
                "+                        <arg>-unchecked</arg>",
                "+                        <arg>-deprecation</arg>",
                "+                        <arg>-feature</arg>",
                "+                    </args>",
                "+                    <jvmArgs>",
                "+                        <jvmArg>-Xms1024m</jvmArg>",
                "+                        <jvmArg>-Xmx1024m</jvmArg>",
                "+                        <jvmArg>-XX:PermSize=${PermGen}</jvmArg>",
                "+                        <jvmArg>-XX:MaxPermSize=${MaxPermGen}</jvmArg>",
                "+                    </jvmArgs>",
                "+                    <javacArgs>",
                "+                        <javacArg>-source</javacArg>",
                "+                        <javacArg>${java.version}</javacArg>",
                "+                        <javacArg>-target</javacArg>",
                "+                        <javacArg>${java.version}</javacArg>",
                "+                        <javacArg>-Xlint:all,-serial,-path,-options</javacArg>",
                "+                    </javacArgs>",
                "+                </configuration>",
                "+            </plugin>",
                "+",
                "+        </plugins>",
                "+    </build>",
                "+",
                "+",
                "+    <profiles>",
                "+        <profile>",
                "+            <id>spark-2.2</id>",
                "+            <activation>",
                "+                <activeByDefault>true</activeByDefault>",
                "+            </activation>",
                "+            <properties>",
                "+                <spark.version>2.2.0</spark.version>",
                "+                <py4j.version>0.10.4</py4j.version>",
                "+            </properties>",
                "+        </profile>",
                "+",
                "+        <profile>",
                "+            <id>spark-2.1</id>",
                "+            <properties>",
                "+                <spark.version>2.1.0</spark.version>",
                "+                <py4j.version>0.10.4</py4j.version>",
                "+            </properties>",
                "+        </profile>",
                "+",
                "+        <profile>",
                "+            <id>spark-2.0</id>",
                "+            <properties>",
                "+                <spark.version>2.0.2</spark.version>",
                "+                <py4j.version>0.10.3</py4j.version>",
                "+            </properties>",
                "+        </profile>",
                "+",
                "+        <profile>",
                "+            <id>spark-1.6</id>",
                "+            <properties>",
                "+                <spark.version>1.6.3</spark.version>",
                "+                <py4j.version>0.9</py4j.version>",
                "+            </properties>",
                "+        </profile>",
                "+",
                "+        <profile>",
                "+            <id>spark-1.5</id>",
                "+            <properties>",
                "+                <spark.version>1.5.2</spark.version>",
                "+                <py4j.version>0.8.2.1</py4j.version>",
                "+            </properties>",
                "+        </profile>",
                "+",
                "+        <profile>",
                "+            <id>spark-1.4</id>",
                "+            <properties>",
                "+                <spark.version>1.4.1</spark.version>",
                "+                <py4j.version>0.8.2.1</py4j.version>",
                "+            </properties>",
                "+        </profile>",
                "+",
                "+    </profiles>",
                " </project>",
                "diff --git a/spark/scala-2.10/pom.xml b/spark/scala-2.10/pom.xml",
                "new file mode 100644",
                "index 000000000..e32e620bf",
                "--- /dev/null",
                "+++ b/spark/scala-2.10/pom.xml",
                "@@ -0,0 +1,41 @@",
                "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "+<!--",
                "+  ~ Licensed to the Apache Software Foundation (ASF) under one or more",
                "+  ~ contributor license agreements.  See the NOTICE file distributed with",
                "+  ~ this work for additional information regarding copyright ownership.",
                "+  ~ The ASF licenses this file to You under the Apache License, Version 2.0",
                "+  ~ (the \"License\"); you may not use this file except in compliance with",
                "+  ~ the License.  You may obtain a copy of the License at",
                "+  ~",
                "+  ~    http://www.apache.org/licenses/LICENSE-2.0",
                "+  ~",
                "+  ~ Unless required by applicable law or agreed to in writing, software",
                "+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+  ~ See the License for the specific language governing permissions and",
                "+  ~ limitations under the License.",
                "+  -->",
                "+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"",
                "+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"",
                "+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">",
                "+  <modelVersion>4.0.0</modelVersion>",
                "+  <groupId>org.apache.zeppelin</groupId>",
                "+  <artifactId>spark-scala-2.10</artifactId>",
                "+  <version>0.9.0-SNAPSHOT</version>",
                "+  <packaging>jar</packaging>",
                "+  <name>Spark Interpreter: Scala_2.10</name>",
                "+",
                "+  <parent>",
                "+    <groupId>org.apache.zeppelin</groupId>",
                "+    <artifactId>spark-scala-parent</artifactId>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "+    <relativePath>../spark-scala-parent/pom.xml</relativePath>",
                "+  </parent>",
                "+",
                "+  <properties>",
                "+    <scala.version>2.10.5</scala.version>",
                "+    <scala.binary.version>2.10</scala.binary.version>",
                "+    <scala.compile.version>${scala.version}</scala.compile.version>",
                "+  </properties>",
                "+",
                "+</project>",
                "diff --git a/spark/scala-2.10/spark-scala-parent b/spark/scala-2.10/spark-scala-parent",
                "new file mode 120000",
                "index 000000000..e5e899e58",
                "--- /dev/null",
                "+++ b/spark/scala-2.10/spark-scala-parent",
                "@@ -0,0 +1 @@",
                "+../spark-scala-parent",
                "\\ No newline at end of file",
                "diff --git a/spark/scala-2.10/src/main/scala/org/apache/zeppelin/spark/SparkScala210Interpreter.scala b/spark/scala-2.10/src/main/scala/org/apache/zeppelin/spark/SparkScala210Interpreter.scala",
                "new file mode 100644",
                "index 000000000..43aa86436",
                "--- /dev/null",
                "+++ b/spark/scala-2.10/src/main/scala/org/apache/zeppelin/spark/SparkScala210Interpreter.scala",
                "@@ -0,0 +1,141 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.spark",
                "+",
                "+import java.io.File",
                "+import java.nio.file.{Files, Paths}",
                "+",
                "+import org.apache.spark.SparkConf",
                "+import org.apache.spark.repl.SparkILoop",
                "+import org.apache.spark.repl.SparkILoop._",
                "+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion",
                "+import org.apache.zeppelin.interpreter.util.InterpreterOutputStream",
                "+import org.apache.zeppelin.interpreter.{InterpreterContext, InterpreterResult}",
                "+import org.slf4j.{Logger, LoggerFactory}",
                "+",
                "+import scala.tools.nsc.Settings",
                "+import scala.tools.nsc.interpreter._",
                "+",
                "+/**",
                "+  * SparkInterpreter for scala-2.10",
                "+  */",
                "+class SparkScala210Interpreter(override val conf: SparkConf,",
                "+                               override val depFiles: java.util.List[String])",
                "+  extends BaseSparkScalaInterpreter(conf, depFiles) {",
                "+",
                "+  lazy override val LOGGER: Logger = LoggerFactory.getLogger(getClass)",
                "+",
                "+  private var sparkILoop: SparkILoop = _",
                "+",
                "+  override val interpreterOutput =",
                "+    new InterpreterOutputStream(LoggerFactory.getLogger(classOf[SparkScala210Interpreter]))",
                "+",
                "+  override def open(): Unit = {",
                "+    super.open()",
                "+    // redirect the output of open to InterpreterOutputStream, so that user can have more",
                "+    // diagnose info in frontend",
                "+    if (InterpreterContext.get() != null) {",
                "+      interpreterOutput.setInterpreterOutput(InterpreterContext.get().out)",
                "+    }",
                "+    val rootDir = conf.get(\"spark.repl.classdir\", System.getProperty(\"java.io.tmpdir\"))",
                "+    val outputDir = Files.createTempDirectory(Paths.get(rootDir), \"spark\").toFile",
                "+    outputDir.deleteOnExit()",
                "+    conf.set(\"spark.repl.class.outputDir\", outputDir.getAbsolutePath)",
                "+    // Only Spark1 requires to create http server, Spark2 removes HttpServer class.",
                "+    startHttpServer(outputDir).foreach { case (server, uri) =>",
                "+      sparkHttpServer = server",
                "+      conf.set(\"spark.repl.class.uri\", uri)",
                "+    }",
                "+",
                "+    val settings = new Settings()",
                "+    settings.embeddedDefaults(Thread.currentThread().getContextClassLoader())",
                "+    settings.usejavacp.value = true",
                "+    settings.classpath.value = getUserJars.mkString(File.pathSeparator)",
                "+    Console.setOut(interpreterOutput)",
                "+    sparkILoop = new SparkILoop(null, new JPrintWriter(Console.out, true))",
                "+",
                "+    setDeclaredField(sparkILoop, \"settings\", settings)",
                "+    callMethod(sparkILoop, \"createInterpreter\")",
                "+    sparkILoop.initializeSynchronous()",
                "+    callMethod(sparkILoop, \"postInitialization\")",
                "+    val reader = callMethod(sparkILoop,",
                "+      \"org$apache$spark$repl$SparkILoop$$chooseReader\",",
                "+      Array(settings.getClass), Array(settings)).asInstanceOf[InteractiveReader]",
                "+    setDeclaredField(sparkILoop, \"org$apache$spark$repl$SparkILoop$$in\", reader)",
                "+    scalaCompleter = reader.completion.completer()",
                "+",
                "+    createSparkContext()",
                "+  }",
                "+",
                "+  override def close(): Unit = {",
                "+    super.close()",
                "+    if (sparkILoop != null) {",
                "+      callMethod(sparkILoop, \"org$apache$spark$repl$SparkILoop$$closeInterpreter\")",
                "+    }",
                "+  }",
                "+",
                "+  protected override def interpret(code: String, context: InterpreterContext): InterpreterResult = {",
                "+    if (context != null) {",
                "+      interpreterOutput.setInterpreterOutput(context.out)",
                "+      context.out.clear()",
                "+    } else {",
                "+      interpreterOutput.setInterpreterOutput(null)",
                "+    }",
                "+",
                "+    Console.withOut(if (context != null) context.out else Console.out) {",
                "+      interpreterOutput.ignoreLeadingNewLinesFromScalaReporter()",
                "+      // add print(\"\") at the end in case the last line is comment which lead to INCOMPLETE",
                "+      val lines = code.split(\"\\\\n\") ++ List(\"print(\\\"\\\")\")",
                "+      var incompleteCode = \"\"",
                "+      var lastStatus: InterpreterResult.Code = null",
                "+      for (line <- lines if !line.trim.isEmpty) {",
                "+        val nextLine = if (incompleteCode != \"\") {",
                "+          incompleteCode + \"\\n\" + line",
                "+        } else {",
                "+          line",
                "+        }",
                "+        scalaInterpret(nextLine) match {",
                "+          case scala.tools.nsc.interpreter.IR.Success =>",
                "+            // continue the next line",
                "+            incompleteCode = \"\"",
                "+            lastStatus = InterpreterResult.Code.SUCCESS",
                "+          case error@scala.tools.nsc.interpreter.IR.Error =>",
                "+            return new InterpreterResult(InterpreterResult.Code.ERROR)",
                "+          case scala.tools.nsc.interpreter.IR.Incomplete =>",
                "+            // put this line into inCompleteCode for the next execution.",
                "+            incompleteCode = incompleteCode + \"\\n\" + line",
                "+            lastStatus = InterpreterResult.Code.INCOMPLETE",
                "+        }",
                "+      }",
                "+      // flush all output before returning result to frontend",
                "+      Console.flush()",
                "+      interpreterOutput.setInterpreterOutput(null)",
                "+      return new InterpreterResult(lastStatus)",
                "+    }",
                "+  }",
                "+",
                "+  def scalaInterpret(code: String): scala.tools.nsc.interpreter.IR.Result =",
                "+    sparkILoop.interpret(code)",
                "+",
                "+  protected def bind(name: String, tpe: String, value: Object, modifier: List[String]): Unit = {",
                "+    sparkILoop.beQuietDuring {",
                "+      sparkILoop.bind(name, tpe, value, modifier)",
                "+    }",
                "+  }",
                "+",
                "+}",
                "diff --git a/spark/scala-2.11/pom.xml b/spark/scala-2.11/pom.xml",
                "new file mode 100644",
                "index 000000000..d9113d107",
                "--- /dev/null",
                "+++ b/spark/scala-2.11/pom.xml",
                "@@ -0,0 +1,41 @@",
                "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "+<!--",
                "+  ~ Licensed to the Apache Software Foundation (ASF) under one or more",
                "+  ~ contributor license agreements.  See the NOTICE file distributed with",
                "+  ~ this work for additional information regarding copyright ownership.",
                "+  ~ The ASF licenses this file to You under the Apache License, Version 2.0",
                "+  ~ (the \"License\"); you may not use this file except in compliance with",
                "+  ~ the License.  You may obtain a copy of the License at",
                "+  ~",
                "+  ~    http://www.apache.org/licenses/LICENSE-2.0",
                "+  ~",
                "+  ~ Unless required by applicable law or agreed to in writing, software",
                "+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+  ~ See the License for the specific language governing permissions and",
                "+  ~ limitations under the License.",
                "+  -->",
                "+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"",
                "+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"",
                "+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">",
                "+  <modelVersion>4.0.0</modelVersion>",
                "+  <groupId>org.apache.zeppelin</groupId>",
                "+  <artifactId>spark-scala-2.11</artifactId>",
                "+  <version>0.9.0-SNAPSHOT</version>",
                "+  <packaging>jar</packaging>",
                "+  <name>Spark Interpreter: Scala_2.11</name>",
                "+",
                "+  <parent>",
                "+    <groupId>org.apache.zeppelin</groupId>",
                "+    <artifactId>spark-scala-parent</artifactId>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "+    <relativePath>../spark-scala-parent/pom.xml</relativePath>",
                "+  </parent>",
                "+",
                "+  <properties>",
                "+    <scala.version>2.11.8</scala.version>",
                "+    <scala.binary.version>2.11</scala.binary.version>",
                "+    <scala.compile.version>${scala.version}</scala.compile.version>",
                "+  </properties>",
                "+",
                "+</project>",
                "diff --git a/spark/scala-2.11/spark-scala-parent b/spark/scala-2.11/spark-scala-parent",
                "new file mode 120000",
                "index 000000000..e5e899e58",
                "--- /dev/null",
                "+++ b/spark/scala-2.11/spark-scala-parent",
                "@@ -0,0 +1 @@",
                "+../spark-scala-parent",
                "\\ No newline at end of file",
                "diff --git a/spark/scala-2.11/src/main/resources/log4j.properties b/spark/scala-2.11/src/main/resources/log4j.properties",
                "new file mode 100644",
                "index 000000000..0c90b21ae",
                "--- /dev/null",
                "+++ b/spark/scala-2.11/src/main/resources/log4j.properties",
                "@@ -0,0 +1,50 @@",
                "+#",
                "+# Licensed to the Apache Software Foundation (ASF) under one or more",
                "+# contributor license agreements.  See the NOTICE file distributed with",
                "+# this work for additional information regarding copyright ownership.",
                "+# The ASF licenses this file to You under the Apache License, Version 2.0",
                "+# (the \"License\"); you may not use this file except in compliance with",
                "+# the License.  You may obtain a copy of the License at",
                "+#",
                "+#    http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing, software",
                "+# distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+# See the License for the specific language governing permissions and",
                "+# limitations under the License.",
                "+#",
                "+",
                "+# Direct log messages to stdout",
                "+log4j.appender.stdout=org.apache.log4j.ConsoleAppender",
                "+log4j.appender.stdout.Target=System.out",
                "+log4j.appender.stdout.layout=org.apache.log4j.PatternLayout",
                "+log4j.appender.stdout.layout.ConversionPattern=%d{ABSOLUTE} %5p %c:%L - %m%n",
                "+#log4j.appender.stdout.layout.ConversionPattern=",
                "+#%5p [%t] (%F:%L) - %m%n",
                "+#%-4r [%t] %-5p %c %x - %m%n",
                "+#",
                "+",
                "+# Root logger option",
                "+log4j.rootLogger=INFO, stdout",
                "+ ",
                "+#mute some noisy guys",
                "+log4j.logger.org.apache.hadoop.mapred=WARN",
                "+log4j.logger.org.apache.hadoop.hive.ql=WARN",
                "+log4j.logger.org.apache.hadoop.hive.metastore=WARN",
                "+log4j.logger.org.apache.haadoop.hive.service.HiveServer=WARN",
                "+log4j.logger.org.apache.zeppelin.scheduler=WARN",
                "+",
                "+log4j.logger.org.quartz=WARN",
                "+log4j.logger.DataNucleus=WARN",
                "+log4j.logger.DataNucleus.MetaData=ERROR",
                "+log4j.logger.DataNucleus.Datastore=ERROR",
                "+",
                "+# Log all JDBC parameters",
                "+log4j.logger.org.hibernate.type=ALL",
                "+",
                "+log4j.logger.org.apache.zeppelin.interpreter=DEBUG",
                "+log4j.logger.org.apache.zeppelin.spark=DEBUG",
                "+",
                "+",
                "+log4j.logger.org.apache.spark.repl.Main=INFO",
                "diff --git a/spark/scala-2.11/src/main/scala/org/apache/zeppelin/spark/SparkScala211Interpreter.scala b/spark/scala-2.11/src/main/scala/org/apache/zeppelin/spark/SparkScala211Interpreter.scala",
                "new file mode 100644",
                "index 000000000..e1452606c",
                "--- /dev/null",
                "+++ b/spark/scala-2.11/src/main/scala/org/apache/zeppelin/spark/SparkScala211Interpreter.scala",
                "@@ -0,0 +1,140 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.spark",
                "+",
                "+import java.io.{BufferedReader, File}",
                "+import java.net.URLClassLoader",
                "+import java.nio.file.{Files, Paths}",
                "+",
                "+import org.apache.spark.SparkConf",
                "+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion",
                "+import org.apache.zeppelin.interpreter.util.InterpreterOutputStream",
                "+import org.apache.zeppelin.interpreter.{InterpreterContext, InterpreterResult}",
                "+import org.slf4j.LoggerFactory",
                "+import org.slf4j.Logger",
                "+",
                "+import scala.tools.nsc.Settings",
                "+import scala.tools.nsc.interpreter._",
                "+",
                "+/**",
                "+  * SparkInterpreter for scala-2.11",
                "+  */",
                "+class SparkScala211Interpreter(override val conf: SparkConf,",
                "+                               override val depFiles: java.util.List[String])",
                "+  extends BaseSparkScalaInterpreter(conf, depFiles) {",
                "+",
                "+  lazy override val LOGGER: Logger = LoggerFactory.getLogger(getClass)",
                "+",
                "+  private var sparkILoop: ILoop = _",
                "+",
                "+  override val interpreterOutput = new InterpreterOutputStream(LOGGER)",
                "+",
                "+  override def open(): Unit = {",
                "+    super.open()",
                "+    if (conf.get(\"spark.master\", \"local\") == \"yarn-client\") {",
                "+      System.setProperty(\"SPARK_YARN_MODE\", \"true\")",
                "+    }",
                "+    // Only Spark1 requires to create http server, Spark2 removes HttpServer class.",
                "+    val rootDir = conf.get(\"spark.repl.classdir\", System.getProperty(\"java.io.tmpdir\"))",
                "+    val outputDir = Files.createTempDirectory(Paths.get(rootDir), \"spark\").toFile",
                "+    outputDir.deleteOnExit()",
                "+    conf.set(\"spark.repl.class.outputDir\", outputDir.getAbsolutePath)",
                "+    startHttpServer(outputDir).foreach { case (server, uri) =>",
                "+      sparkHttpServer = server",
                "+      conf.set(\"spark.repl.class.uri\", uri)",
                "+    }",
                "+",
                "+    val settings = new Settings()",
                "+    settings.processArguments(List(\"-Yrepl-class-based\",",
                "+      \"-Yrepl-outdir\", s\"${outputDir.getAbsolutePath}\"), true)",
                "+    settings.embeddedDefaults(Thread.currentThread().getContextClassLoader())",
                "+    settings.usejavacp.value = true",
                "+    settings.classpath.value = getUserJars.mkString(File.pathSeparator)",
                "+",
                "+    val replOut = new JPrintWriter(interpreterOutput, true)",
                "+    sparkILoop = new ILoop(None, replOut)",
                "+    sparkILoop.settings = settings",
                "+    sparkILoop.createInterpreter()",
                "+",
                "+    val in0 = getField(sparkILoop, \"scala$tools$nsc$interpreter$ILoop$$in0\").asInstanceOf[Option[BufferedReader]]",
                "+    val reader = in0.fold(sparkILoop.chooseReader(settings))(r => SimpleReader(r, replOut, interactive = true))",
                "+",
                "+    sparkILoop.in = reader",
                "+    sparkILoop.initializeSynchronous()",
                "+    callMethod(sparkILoop, \"scala$tools$nsc$interpreter$ILoop$$loopPostInit\")",
                "+    this.scalaCompleter = reader.completion.completer()",
                "+",
                "+    createSparkContext()",
                "+  }",
                "+",
                "+  protected def bind(name: String, tpe: String, value: Object, modifier: List[String]): Unit = {",
                "+    sparkILoop.beQuietDuring {",
                "+      sparkILoop.bind(name, tpe, value, modifier)",
                "+    }",
                "+  }",
                "+",
                "+",
                "+  override def close(): Unit = {",
                "+    super.close()",
                "+    if (sparkILoop != null) {",
                "+      sparkILoop.closeInterpreter()",
                "+    }",
                "+  }",
                "+",
                "+  protected override def interpret(code: String, context: InterpreterContext): InterpreterResult = {",
                "+    if (context != null) {",
                "+      interpreterOutput.setInterpreterOutput(context.out)",
                "+      context.out.clear()",
                "+    }",
                "+",
                "+    Console.withOut(if (context != null) context.out else Console.out) {",
                "+      interpreterOutput.ignoreLeadingNewLinesFromScalaReporter()",
                "+      // add print(\"\") at the end in case the last line is comment which lead to INCOMPLETE",
                "+      val lines = code.split(\"\\\\n\") ++ List(\"print(\\\"\\\")\")",
                "+      var incompleteCode = \"\"",
                "+      var lastStatus: InterpreterResult.Code = null",
                "+      for (line <- lines if !line.trim.isEmpty) {",
                "+        val nextLine = if (incompleteCode != \"\") {",
                "+          incompleteCode + \"\\n\" + line",
                "+        } else {",
                "+          line",
                "+        }",
                "+        scalaInterpret(nextLine) match {",
                "+          case scala.tools.nsc.interpreter.IR.Success =>",
                "+            // continue the next line",
                "+            incompleteCode = \"\"",
                "+            lastStatus = InterpreterResult.Code.SUCCESS",
                "+          case error@scala.tools.nsc.interpreter.IR.Error =>",
                "+            return new InterpreterResult(InterpreterResult.Code.ERROR)",
                "+          case scala.tools.nsc.interpreter.IR.Incomplete =>",
                "+            // put this line into inCompleteCode for the next execution.",
                "+            incompleteCode = incompleteCode + \"\\n\" + line",
                "+            lastStatus = InterpreterResult.Code.INCOMPLETE",
                "+        }",
                "+      }",
                "+      // flush all output before returning result to frontend",
                "+      Console.flush()",
                "+      interpreterOutput.setInterpreterOutput(null)",
                "+      return new InterpreterResult(lastStatus)",
                "+    }",
                "+  }",
                "+",
                "+  def scalaInterpret(code: String): scala.tools.nsc.interpreter.IR.Result =",
                "+    sparkILoop.interpret(code)",
                "+",
                "+}",
                "diff --git a/spark/spark-dependencies/pom.xml b/spark/spark-dependencies/pom.xml",
                "new file mode 100644",
                "index 000000000..ae169e505",
                "--- /dev/null",
                "+++ b/spark/spark-dependencies/pom.xml",
                "@@ -0,0 +1,591 @@",
                "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "+<!--",
                "+  ~ Licensed to the Apache Software Foundation (ASF) under one or more",
                "+  ~ contributor license agreements.  See the NOTICE file distributed with",
                "+  ~ this work for additional information regarding copyright ownership.",
                "+  ~ The ASF licenses this file to You under the Apache License, Version 2.0",
                "+  ~ (the \"License\"); you may not use this file except in compliance with",
                "+  ~ the License.  You may obtain a copy of the License at",
                "+  ~",
                "+  ~    http://www.apache.org/licenses/LICENSE-2.0",
                "+  ~",
                "+  ~ Unless required by applicable law or agreed to in writing, software",
                "+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+  ~ See the License for the specific language governing permissions and",
                "+  ~ limitations under the License.",
                "+  -->",
                "+",
                "+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"",
                "+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">",
                "+  <modelVersion>4.0.0</modelVersion>",
                "+",
                "+  <parent>",
                "+    <artifactId>spark-parent</artifactId>",
                "+    <groupId>org.apache.zeppelin</groupId>",
                "+    <version>0.8.0-SNAPSHOT</version>",
                "+    <relativePath>..</relativePath>",
                "+  </parent>",
                "+",
                "+  <groupId>org.apache.zeppelin</groupId>",
                "+  <artifactId>zeppelin-spark-dependencies_2.10</artifactId>",
                "+  <packaging>jar</packaging>",
                "+  <version>0.8.0-SNAPSHOT</version>",
                "+  <name>Zeppelin: Spark dependencies</name>",
                "+  <description>Zeppelin spark support</description>",
                "+",
                "+  <properties>",
                "+    <!-- library version defined in this section brought from spark 1.4.1 and it's dependency.",
                "+         Therefore changing only spark.version is not going to be enough when this module",
                "+         support new version of spark to make the new version as default supported version.",
                "+",
                "+         Each profile (spark-2.0, spark-1.6, etc) will overrides necessary dependency version.",
                "+         So we'll make one of those profile 'activateByDefault' to make it default supported version",
                "+         instead of changing spark.version in this section.",
                "+    -->",
                "+",
                "+    <hadoop.version>2.3.0</hadoop.version>",
                "+    <yarn.version>${hadoop.version}</yarn.version>",
                "+    <avro.version>1.7.7</avro.version>",
                "+    <avro.mapred.classifier/>",
                "+    <jets3t.version>0.7.1</jets3t.version>",
                "+    <protobuf.version>2.4.1</protobuf.version>",
                "+",
                "+    <akka.group>org.spark-project.akka</akka.group>",
                "+    <akka.version>2.3.4-spark</akka.version>",
                "+",
                "+    <spark.archive>spark-${spark.version}</spark.archive>",
                "+    <spark.src.download.url>",
                "+      http://d3kbcqa49mib13.cloudfront.net/${spark.archive}.tgz",
                "+    </spark.src.download.url>",
                "+    <spark.bin.download.url>",
                "+      http://d3kbcqa49mib13.cloudfront.net/${spark.archive}-bin-without-hadoop.tgz",
                "+    </spark.bin.download.url>",
                "+",
                "+    <!--plugin versions-->",
                "+    <plugin.shade.version>2.3</plugin.shade.version>",
                "+  </properties>",
                "+",
                "+  <dependencyManagement>",
                "+    <dependencies>",
                "+      <dependency>",
                "+        <groupId>org.apache.avro</groupId>",
                "+        <artifactId>avro</artifactId>",
                "+        <version>${avro.version}</version>",
                "+      </dependency>",
                "+      <dependency>",
                "+        <groupId>org.apache.avro</groupId>",
                "+        <artifactId>avro-ipc</artifactId>",
                "+        <version>${avro.version}</version>",
                "+        <exclusions>",
                "+          <exclusion>",
                "+            <groupId>io.netty</groupId>",
                "+            <artifactId>netty</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>org.mortbay.jetty</groupId>",
                "+            <artifactId>jetty</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>org.mortbay.jetty</groupId>",
                "+            <artifactId>jetty-util</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>org.mortbay.jetty</groupId>",
                "+            <artifactId>servlet-api</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>org.apache.velocity</groupId>",
                "+            <artifactId>velocity</artifactId>",
                "+          </exclusion>",
                "+        </exclusions>",
                "+      </dependency>",
                "+      <dependency>",
                "+        <groupId>org.apache.avro</groupId>",
                "+        <artifactId>avro-mapred</artifactId>",
                "+        <version>${avro.version}</version>",
                "+        <classifier>${avro.mapred.classifier}</classifier>",
                "+        <exclusions>",
                "+          <exclusion>",
                "+            <groupId>io.netty</groupId>",
                "+            <artifactId>netty</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>org.mortbay.jetty</groupId>",
                "+            <artifactId>jetty</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>org.mortbay.jetty</groupId>",
                "+            <artifactId>jetty-util</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>org.mortbay.jetty</groupId>",
                "+            <artifactId>servlet-api</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>org.apache.velocity</groupId>",
                "+            <artifactId>velocity</artifactId>",
                "+          </exclusion>",
                "+        </exclusions>",
                "+      </dependency>",
                "+",
                "+      <!-- See SPARK-1556 for info on this dependency: -->",
                "+      <dependency>",
                "+        <groupId>net.java.dev.jets3t</groupId>",
                "+        <artifactId>jets3t</artifactId>",
                "+        <version>${jets3t.version}</version>",
                "+        <scope>runtime</scope>",
                "+        <exclusions>",
                "+          <exclusion>",
                "+            <groupId>commons-logging</groupId>",
                "+            <artifactId>commons-logging</artifactId>",
                "+          </exclusion>",
                "+        </exclusions>",
                "+      </dependency>",
                "+      <dependency>",
                "+        <groupId>org.apache.hadoop</groupId>",
                "+        <artifactId>hadoop-yarn-api</artifactId>",
                "+        <version>${yarn.version}</version>",
                "+        <exclusions>",
                "+          <exclusion>",
                "+            <groupId>asm</groupId>",
                "+            <artifactId>asm</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>org.ow2.asm</groupId>",
                "+            <artifactId>asm</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>org.jboss.netty</groupId>",
                "+            <artifactId>netty</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>commons-logging</groupId>",
                "+            <artifactId>commons-logging</artifactId>",
                "+          </exclusion>",
                "+        </exclusions>",
                "+      </dependency>",
                "+",
                "+      <dependency>",
                "+        <groupId>org.apache.hadoop</groupId>",
                "+        <artifactId>hadoop-yarn-common</artifactId>",
                "+        <version>${yarn.version}</version>",
                "+        <exclusions>",
                "+          <exclusion>",
                "+            <groupId>asm</groupId>",
                "+            <artifactId>asm</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>org.ow2.asm</groupId>",
                "+            <artifactId>asm</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>org.jboss.netty</groupId>",
                "+            <artifactId>netty</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>javax.servlet</groupId>",
                "+            <artifactId>servlet-api</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>commons-logging</groupId>",
                "+            <artifactId>commons-logging</artifactId>",
                "+          </exclusion>",
                "+        </exclusions>",
                "+      </dependency>",
                "+",
                "+      <dependency>",
                "+        <groupId>org.apache.hadoop</groupId>",
                "+        <artifactId>hadoop-yarn-server-web-proxy</artifactId>",
                "+        <version>${yarn.version}</version>",
                "+        <exclusions>",
                "+          <exclusion>",
                "+            <groupId>asm</groupId>",
                "+            <artifactId>asm</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>org.ow2.asm</groupId>",
                "+            <artifactId>asm</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>org.jboss.netty</groupId>",
                "+            <artifactId>netty</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>javax.servlet</groupId>",
                "+            <artifactId>servlet-api</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>commons-logging</groupId>",
                "+            <artifactId>commons-logging</artifactId>",
                "+          </exclusion>",
                "+        </exclusions>",
                "+      </dependency>",
                "+",
                "+      <dependency>",
                "+        <groupId>org.apache.hadoop</groupId>",
                "+        <artifactId>hadoop-yarn-client</artifactId>",
                "+        <version>${yarn.version}</version>",
                "+        <exclusions>",
                "+          <exclusion>",
                "+            <groupId>asm</groupId>",
                "+            <artifactId>asm</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>org.ow2.asm</groupId>",
                "+            <artifactId>asm</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>org.jboss.netty</groupId>",
                "+            <artifactId>netty</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>javax.servlet</groupId>",
                "+            <artifactId>servlet-api</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>commons-logging</groupId>",
                "+            <artifactId>commons-logging</artifactId>",
                "+          </exclusion>",
                "+        </exclusions>",
                "+      </dependency>",
                "+    </dependencies>",
                "+  </dependencyManagement>",
                "+",
                "+  <dependencies>",
                "+    <!-- Spark -->",
                "+    <dependency>",
                "+      <groupId>org.apache.spark</groupId>",
                "+      <artifactId>spark-core_${scala.binary.version}</artifactId>",
                "+      <version>${spark.version}</version>",
                "+      <exclusions>",
                "+        <exclusion>",
                "+          <groupId>org.apache.hadoop</groupId>",
                "+          <artifactId>hadoop-client</artifactId>",
                "+        </exclusion>",
                "+      </exclusions>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.apache.spark</groupId>",
                "+      <artifactId>spark-repl_${scala.binary.version}</artifactId>",
                "+      <version>${spark.version}</version>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.apache.spark</groupId>",
                "+      <artifactId>spark-sql_${scala.binary.version}</artifactId>",
                "+      <version>${spark.version}</version>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.apache.spark</groupId>",
                "+      <artifactId>spark-hive_${scala.binary.version}</artifactId>",
                "+      <version>${spark.version}</version>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.apache.spark</groupId>",
                "+      <artifactId>spark-streaming_${scala.binary.version}</artifactId>",
                "+      <version>${spark.version}</version>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.apache.spark</groupId>",
                "+      <artifactId>spark-catalyst_${scala.binary.version}</artifactId>",
                "+      <version>${spark.version}</version>",
                "+    </dependency>",
                "+",
                "+    <!-- hadoop -->",
                "+    <dependency>",
                "+      <groupId>org.apache.hadoop</groupId>",
                "+      <artifactId>hadoop-client</artifactId>",
                "+      <version>${hadoop.version}</version>",
                "+    </dependency>",
                "+",
                "+",
                "+    <dependency>",
                "+      <groupId>com.google.protobuf</groupId>",
                "+      <artifactId>protobuf-java</artifactId>",
                "+      <version>${protobuf.version}</version>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>${akka.group}</groupId>",
                "+      <artifactId>akka-actor_${scala.binary.version}</artifactId>",
                "+      <version>${akka.version}</version>",
                "+    </dependency>",
                "+    <dependency>",
                "+      <groupId>${akka.group}</groupId>",
                "+      <artifactId>akka-remote_${scala.binary.version}</artifactId>",
                "+      <version>${akka.version}</version>",
                "+    </dependency>",
                "+    <dependency>",
                "+      <groupId>${akka.group}</groupId>",
                "+      <artifactId>akka-slf4j_${scala.binary.version}</artifactId>",
                "+      <version>${akka.version}</version>",
                "+    </dependency>",
                "+    <dependency>",
                "+      <groupId>${akka.group}</groupId>",
                "+      <artifactId>akka-testkit_${scala.binary.version}</artifactId>",
                "+      <version>${akka.version}</version>",
                "+    </dependency>",
                "+    <dependency>",
                "+      <groupId>${akka.group}</groupId>",
                "+      <artifactId>akka-zeromq_${scala.binary.version}</artifactId>",
                "+      <version>${akka.version}</version>",
                "+      <exclusions>",
                "+        <exclusion>",
                "+          <groupId>${akka.group}</groupId>",
                "+          <artifactId>akka-actor_${scala.binary.version}</artifactId>",
                "+        </exclusion>",
                "+      </exclusions>",
                "+    </dependency>",
                "+",
                "+    <!-- yarn (not supported for Spark v1.5.0 or higher) -->",
                "+    <dependency>",
                "+      <groupId>org.apache.spark</groupId>",
                "+      <artifactId>spark-yarn_${scala.binary.version}</artifactId>",
                "+      <version>${spark.version}</version>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.apache.hadoop</groupId>",
                "+      <artifactId>hadoop-yarn-api</artifactId>",
                "+      <version>${yarn.version}</version>",
                "+    </dependency>",
                "+",
                "+  </dependencies>",
                "+",
                "+  <build>",
                "+    <plugins>",
                "+      <plugin>",
                "+        <artifactId>maven-enforcer-plugin</artifactId>",
                "+        <executions>",
                "+          <execution>",
                "+            <id>enforce</id>",
                "+            <phase>none</phase>",
                "+          </execution>",
                "+        </executions>",
                "+      </plugin>",
                "+",
                "+      <plugin>",
                "+        <groupId>org.apache.maven.plugins</groupId>",
                "+        <artifactId>maven-surefire-plugin</artifactId>",
                "+        <configuration>",
                "+          <forkCount>1</forkCount>",
                "+          <reuseForks>false</reuseForks>",
                "+          <argLine>-Xmx1024m -XX:MaxPermSize=256m</argLine>",
                "+        </configuration>",
                "+      </plugin>",
                "+",
                "+      <plugin>",
                "+        <groupId>com.googlecode.maven-download-plugin</groupId>",
                "+        <artifactId>download-maven-plugin</artifactId>",
                "+        <version>${plugin.download.version}</version>",
                "+      </plugin>",
                "+",
                "+      <plugin>",
                "+        <groupId>org.apache.maven.plugins</groupId>",
                "+        <artifactId>maven-shade-plugin</artifactId>",
                "+        <version>${plugin.shade.version}</version>",
                "+        <configuration>",
                "+          <filters>",
                "+            <filter>",
                "+              <artifact>*:*</artifact>",
                "+              <excludes>",
                "+                <exclude>org/datanucleus/**</exclude>",
                "+                <exclude>META-INF/*.SF</exclude>",
                "+                <exclude>META-INF/*.DSA</exclude>",
                "+                <exclude>META-INF/*.RSA</exclude>",
                "+              </excludes>",
                "+            </filter>",
                "+          </filters>",
                "+          <transformers>",
                "+            <transformer implementation=\"org.apache.maven.plugins.shade.resource.ServicesResourceTransformer\"/>",
                "+            <transformer implementation=\"org.apache.maven.plugins.shade.resource.AppendingTransformer\">",
                "+              <resource>reference.conf</resource>",
                "+            </transformer>",
                "+          </transformers>",
                "+        </configuration>",
                "+        <executions>",
                "+          <execution>",
                "+            <phase>package</phase>",
                "+            <goals>",
                "+              <goal>shade</goal>",
                "+            </goals>",
                "+          </execution>",
                "+        </executions>",
                "+      </plugin>",
                "+",
                "+      <!-- Deploy datanucleus jars to the interpreter/spark directory -->",
                "+      <plugin>",
                "+        <groupId>org.apache.maven.plugins</groupId>",
                "+        <artifactId>maven-dependency-plugin</artifactId>",
                "+        <executions>",
                "+          <execution>",
                "+            <id>copy-interpreter-dependencies</id>",
                "+            <phase>package</phase>",
                "+            <goals>",
                "+              <goal>copy-dependencies</goal>",
                "+            </goals>",
                "+            <configuration>",
                "+              <skip>true</skip>",
                "+            </configuration>",
                "+          </execution>",
                "+",
                "+          <execution>",
                "+            <id>copy-spark-interpreter-dependencies</id>",
                "+            <phase>package</phase>",
                "+            <goals>",
                "+              <goal>copy-dependencies</goal>",
                "+            </goals>",
                "+            <configuration>",
                "+              <outputDirectory>${project.build.directory}/../../../interpreter/spark/dep</outputDirectory>",
                "+              <overWriteReleases>false</overWriteReleases>",
                "+              <overWriteSnapshots>false</overWriteSnapshots>",
                "+              <overWriteIfNewer>true</overWriteIfNewer>",
                "+              <includeGroupIds>org.datanucleus</includeGroupIds>",
                "+            </configuration>",
                "+          </execution>",
                "+          <execution>",
                "+            <id>copy-artifact</id>",
                "+            <phase>package</phase>",
                "+            <goals>",
                "+              <goal>copy</goal>",
                "+            </goals>",
                "+            <configuration>",
                "+              <outputDirectory>${project.build.directory}/../../../interpreter/spark/dep</outputDirectory>",
                "+              <overWriteReleases>false</overWriteReleases>",
                "+              <overWriteSnapshots>false</overWriteSnapshots>",
                "+              <overWriteIfNewer>true</overWriteIfNewer>",
                "+              <artifactItems>",
                "+                <artifactItem>",
                "+                  <groupId>${project.groupId}</groupId>",
                "+                  <artifactId>${project.artifactId}</artifactId>",
                "+                  <version>${project.version}</version>",
                "+                  <type>${project.packaging}</type>",
                "+                </artifactItem>",
                "+              </artifactItems>",
                "+            </configuration>",
                "+          </execution>",
                "+        </executions>",
                "+      </plugin>",
                "+",
                "+      <plugin>",
                "+        <artifactId>maven-resources-plugin</artifactId>",
                "+        <executions>",
                "+          <execution>",
                "+            <id>copy-interpreter-setting</id>",
                "+            <phase>none</phase>",
                "+            <configuration>",
                "+              <skip>true</skip>",
                "+            </configuration>",
                "+          </execution>",
                "+        </executions>",
                "+      </plugin>",
                "+",
                "+      <!-- include pyspark by default -->",
                "+      <plugin>",
                "+        <groupId>com.googlecode.maven-download-plugin</groupId>",
                "+        <artifactId>download-maven-plugin</artifactId>",
                "+        <executions>",
                "+          <execution>",
                "+            <id>download-pyspark-files</id>",
                "+            <phase>validate</phase>",
                "+            <goals>",
                "+              <goal>wget</goal>",
                "+            </goals>",
                "+            <configuration>",
                "+              <readTimeOut>60000</readTimeOut>",
                "+              <retries>5</retries>",
                "+              <unpack>true</unpack>",
                "+              <url>${spark.src.download.url}</url>",
                "+              <outputDirectory>${project.build.directory}</outputDirectory>",
                "+            </configuration>",
                "+          </execution>",
                "+        </executions>",
                "+      </plugin>",
                "+",
                "+      <plugin>",
                "+        <artifactId>maven-clean-plugin</artifactId>",
                "+        <configuration>",
                "+          <filesets>",
                "+            <fileset>",
                "+              <directory>${basedir}/../python/build</directory>",
                "+            </fileset>",
                "+          </filesets>",
                "+        </configuration>",
                "+      </plugin>",
                "+",
                "+      <plugin>",
                "+        <groupId>org.apache.maven.plugins</groupId>",
                "+        <artifactId>maven-antrun-plugin</artifactId>",
                "+        <executions>",
                "+          <execution>",
                "+            <id>zip-pyspark-files</id>",
                "+            <phase>generate-resources</phase>",
                "+            <goals>",
                "+              <goal>run</goal>",
                "+            </goals>",
                "+            <configuration>",
                "+              <target>",
                "+                <delete dir=\"../../interpreter/spark/pyspark\"/>",
                "+                <copy todir=\"../../interpreter/spark/pyspark\"",
                "+                      file=\"${project.build.directory}/${spark.archive}/python/lib/py4j-${py4j.version}-src.zip\"/>",
                "+                <zip destfile=\"${project.build.directory}/../../../interpreter/spark/pyspark/pyspark.zip\"",
                "+                     basedir=\"${project.build.directory}/${spark.archive}/python\"",
                "+                     includes=\"pyspark/*.py,pyspark/**/*.py\"/>",
                "+              </target>",
                "+            </configuration>",
                "+          </execution>",
                "+        </executions>",
                "+      </plugin>",
                "+",
                "+      <!-- include sparkr by default -->",
                "+      <plugin>",
                "+        <groupId>com.googlecode.maven-download-plugin</groupId>",
                "+        <artifactId>download-maven-plugin</artifactId>",
                "+        <executions>",
                "+          <execution>",
                "+            <id>download-sparkr-files</id>",
                "+            <phase>validate</phase>",
                "+            <goals>",
                "+              <goal>wget</goal>",
                "+            </goals>",
                "+            <configuration>",
                "+              <readTimeOut>60000</readTimeOut>",
                "+              <retries>5</retries>",
                "+              <url>${spark.bin.download.url}</url>",
                "+              <unpack>true</unpack>",
                "+              <outputDirectory>${project.build.directory}</outputDirectory>",
                "+            </configuration>",
                "+          </execution>",
                "+        </executions>",
                "+      </plugin>",
                "+      <plugin>",
                "+        <artifactId>maven-resources-plugin</artifactId>",
                "+        <version>2.7</version>",
                "+        <executions>",
                "+          <execution>",
                "+            <id>copy-sparkr-files</id>",
                "+            <phase>generate-resources</phase>",
                "+            <goals>",
                "+              <goal>copy-resources</goal>",
                "+            </goals>",
                "+            <configuration>",
                "+              <outputDirectory>${project.build.directory}/../../../interpreter/spark/R/lib</outputDirectory>",
                "+              <resources>",
                "+                <resource>",
                "+                  <directory>",
                "+                    ${project.build.directory}/spark-${spark.version}-bin-without-hadoop/R/lib",
                "+                  </directory>",
                "+                </resource>",
                "+              </resources>",
                "+            </configuration>",
                "+          </execution>",
                "+        </executions>",
                "+      </plugin>",
                "+    </plugins>",
                "+  </build>",
                "+</project>",
                "diff --git a/spark/spark-scala-parent/pom.xml b/spark/spark-scala-parent/pom.xml",
                "new file mode 100644",
                "index 000000000..830fa59a6",
                "--- /dev/null",
                "+++ b/spark/spark-scala-parent/pom.xml",
                "@@ -0,0 +1,172 @@",
                "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "+<!--",
                "+  ~ Licensed to the Apache Software Foundation (ASF) under one or more",
                "+  ~ contributor license agreements.  See the NOTICE file distributed with",
                "+  ~ this work for additional information regarding copyright ownership.",
                "+  ~ The ASF licenses this file to You under the Apache License, Version 2.0",
                "+  ~ (the \"License\"); you may not use this file except in compliance with",
                "+  ~ the License.  You may obtain a copy of the License at",
                "+  ~",
                "+  ~    http://www.apache.org/licenses/LICENSE-2.0",
                "+  ~",
                "+  ~ Unless required by applicable law or agreed to in writing, software",
                "+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+  ~ See the License for the specific language governing permissions and",
                "+  ~ limitations under the License.",
                "+  -->",
                "+",
                "+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"",
                "+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"",
                "+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">",
                "+",
                "+    <parent>",
                "+        <artifactId>spark-parent</artifactId>",
                "+        <groupId>org.apache.zeppelin</groupId>",
                "+        <version>0.9.0-SNAPSHOT</version>",
                "+        <relativePath>../pom.xml</relativePath>",
                "+    </parent>",
                "+",
                "+    <modelVersion>4.0.0</modelVersion>",
                "+    <groupId>org.apache.zeppelin</groupId>",
                "+    <artifactId>spark-scala-parent</artifactId>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "+    <packaging>pom</packaging>",
                "+",
                "+    <dependencies>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.zeppelin</groupId>",
                "+            <artifactId>zeppelin-interpreter</artifactId>",
                "+            <version>${project.version}</version>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.spark</groupId>",
                "+            <artifactId>spark-repl_${scala.binary.version}</artifactId>",
                "+            <version>${spark.version}</version>",
                "+            <scope>provided</scope>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.spark</groupId>",
                "+            <artifactId>spark-core_${scala.binary.version}</artifactId>",
                "+            <version>${spark.version}</version>",
                "+            <scope>provided</scope>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.spark</groupId>",
                "+            <artifactId>spark-hive_${scala.binary.version}</artifactId>",
                "+            <version>${spark.version}</version>",
                "+            <scope>provided</scope>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.scala-lang</groupId>",
                "+            <artifactId>scala-compiler</artifactId>",
                "+            <version>${scala.version}</version>",
                "+            <scope>provided</scope>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.scala-lang</groupId>",
                "+            <artifactId>scala-library</artifactId>",
                "+            <version>${scala.version}</version>",
                "+            <scope>provided</scope>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.scala-lang</groupId>",
                "+            <artifactId>scala-reflect</artifactId>",
                "+            <version>${scala.version}</version>",
                "+            <scope>provided</scope>",
                "+        </dependency>",
                "+",
                "+    </dependencies>",
                "+",
                "+    <build>",
                "+        <plugins>",
                "+            <plugin>",
                "+                <groupId>org.codehaus.mojo</groupId>",
                "+                <artifactId>build-helper-maven-plugin</artifactId>",
                "+                <executions>",
                "+                    <execution>",
                "+                        <id>add-scala-sources</id>",
                "+                        <phase>generate-sources</phase>",
                "+                        <goals>",
                "+                            <goal>add-source</goal>",
                "+                        </goals>",
                "+                        <configuration>",
                "+                            <sources>",
                "+                                <source>${project.basedir}/../spark-scala-parent/src/main/scala</source>",
                "+                            </sources>",
                "+                        </configuration>",
                "+                    </execution>",
                "+                    <execution>",
                "+                        <id>add-scala-test-sources</id>",
                "+                        <phase>generate-test-sources</phase>",
                "+                        <goals>",
                "+                            <goal>add-test-source</goal>",
                "+                        </goals>",
                "+                        <configuration>",
                "+                            <sources>",
                "+                                <source>${project.basedir}/../spark-scala-parent/src/test/scala</source>",
                "+                            </sources>",
                "+                        </configuration>",
                "+                    </execution>",
                "+                    <execution>",
                "+                        <id>add-resource</id>",
                "+                        <phase>generate-resources</phase>",
                "+                        <goals>",
                "+                            <goal>add-resource</goal>",
                "+                        </goals>",
                "+                        <configuration>",
                "+                            <resources>",
                "+                                <resource>",
                "+                                    <directory>${project.basedir}/../spark-scala-parent/src/main/resources</directory>",
                "+                                </resource>",
                "+                            </resources>",
                "+                        </configuration>",
                "+                    </execution>",
                "+                    <execution>",
                "+                        <id>add-test-resource</id>",
                "+                        <phase>generate-test-resources</phase>",
                "+                        <goals>",
                "+                            <goal>add-test-resource</goal>",
                "+                        </goals>",
                "+                        <configuration>",
                "+                            <resources>",
                "+                                <resource>",
                "+                                    <directory>${project.basedir}/../spark-scala-parent/src/test/resources</directory>",
                "+                                </resource>",
                "+                            </resources>",
                "+                        </configuration>",
                "+                    </execution>",
                "+                </executions>",
                "+            </plugin>",
                "+",
                "+            <plugin>",
                "+                <artifactId>maven-dependency-plugin</artifactId>",
                "+                <configuration>",
                "+                    <skip>true</skip>",
                "+                </configuration>",
                "+            </plugin>",
                "+",
                "+            <plugin>",
                "+                <artifactId>maven-resources-plugin</artifactId>",
                "+                <executions>",
                "+                    <execution>",
                "+                    <id>copy-interpreter-setting</id>",
                "+                    <phase>none</phase>",
                "+                    <configuration>",
                "+                        <skip>true</skip>",
                "+                    </configuration>",
                "+                    </execution>",
                "+                </executions>",
                "+            </plugin>",
                "+",
                "+        </plugins>",
                "+    </build>",
                "+",
                "+</project>",
                "\\ No newline at end of file",
                "diff --git a/spark/spark-scala-parent/src/main/scala/org/apache/zeppelin/spark/BaseSparkScalaInterpreter.scala b/spark/spark-scala-parent/src/main/scala/org/apache/zeppelin/spark/BaseSparkScalaInterpreter.scala",
                "new file mode 100644",
                "index 000000000..3ef4fe71e",
                "--- /dev/null",
                "+++ b/spark/spark-scala-parent/src/main/scala/org/apache/zeppelin/spark/BaseSparkScalaInterpreter.scala",
                "@@ -0,0 +1,338 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.spark",
                "+",
                "+",
                "+import java.io.File",
                "+",
                "+import org.apache.spark.sql.SQLContext",
                "+import org.apache.spark.{SparkConf, SparkContext}",
                "+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion",
                "+import org.apache.zeppelin.interpreter.util.InterpreterOutputStream",
                "+import org.apache.zeppelin.interpreter.{InterpreterContext, InterpreterResult}",
                "+import org.slf4j.{Logger, LoggerFactory}",
                "+",
                "+import scala.collection.JavaConverters._",
                "+import scala.tools.nsc.interpreter.Completion.ScalaCompleter",
                "+import scala.util.control.NonFatal",
                "+",
                "+/**",
                "+  * Base class for different scala versions of SparkInterpreter. It should be",
                "+  * binary compatible between multiple scala versions.",
                "+  * @param conf",
                "+  * @param depFiles",
                "+  */",
                "+abstract class BaseSparkScalaInterpreter(val conf: SparkConf,",
                "+                                         val depFiles: java.util.List[String]) {",
                "+",
                "+  protected lazy val LOGGER: Logger = LoggerFactory.getLogger(getClass)",
                "+",
                "+  private val isTest = conf.getBoolean(\"zeppelin.spark.test\", false)",
                "+",
                "+  protected var sc: SparkContext = _",
                "+",
                "+  protected var sqlContext: SQLContext = _",
                "+",
                "+  protected var sparkSession: Object = _",
                "+",
                "+  protected var sparkHttpServer: Object = _",
                "+",
                "+  protected var sparkUrl: String = _",
                "+",
                "+  protected var scalaCompleter: ScalaCompleter = _",
                "+",
                "+  protected val interpreterOutput: InterpreterOutputStream",
                "+",
                "+  protected def open(): Unit = {",
                "+    /* Required for scoped mode.",
                "+     * In scoped mode multiple scala compiler (repl) generates class in the same directory.",
                "+     * Class names is not randomly generated and look like '$line12.$read$$iw$$iw'",
                "+     * Therefore it's possible to generated class conflict(overwrite) with other repl generated",
                "+     * class.",
                "+     *",
                "+     * To prevent generated class name conflict,",
                "+     * change prefix of generated class name from each scala compiler (repl) instance.",
                "+     *",
                "+     * In Spark 2.x, REPL generated wrapper class name should compatible with the pattern",
                "+     * ^(\\$line(?:\\d+)\\.\\$read)(?:\\$\\$iw)+$",
                "+     *",
                "+     * As hashCode() can return a negative integer value and the minus character '-' is invalid",
                "+     * in a package name we change it to a numeric value '0' which still conforms to the regexp.",
                "+     *",
                "+     */",
                "+    System.setProperty(\"scala.repl.name.line\", (\"$line\" + this.hashCode).replace('-', '0'))",
                "+  }",
                "+",
                "+  protected def interpret(code: String, context: InterpreterContext): InterpreterResult",
                "+",
                "+  protected def interpret(code: String): InterpreterResult = interpret(code, null)",
                "+",
                "+  protected def scalaInterpret(code: String): scala.tools.nsc.interpreter.IR.Result",
                "+",
                "+  protected def completion(buf: String,",
                "+                           cursor: Int,",
                "+                           context: InterpreterContext): java.util.List[InterpreterCompletion] = {",
                "+    val completions = scalaCompleter.complete(buf, cursor).candidates",
                "+      .map(e => new InterpreterCompletion(e, e, null))",
                "+    scala.collection.JavaConversions.seqAsJavaList(completions)",
                "+  }",
                "+",
                "+  protected def getProgress(jobGroup: String, context: InterpreterContext): Int = {",
                "+    val jobIds = sc.statusTracker.getJobIdsForGroup(jobGroup)",
                "+    val jobs = jobIds.flatMap { id => sc.statusTracker.getJobInfo(id) }",
                "+    val stages = jobs.flatMap { job =>",
                "+      job.stageIds().flatMap(sc.statusTracker.getStageInfo)",
                "+    }",
                "+",
                "+    val taskCount = stages.map(_.numTasks).sum",
                "+    val completedTaskCount = stages.map(_.numCompletedTasks).sum",
                "+    if (taskCount == 0) {",
                "+      0",
                "+    } else {",
                "+      (100 * completedTaskCount.toDouble / taskCount).toInt",
                "+    }",
                "+  }",
                "+",
                "+  protected def bind(name: String, tpe: String, value: Object, modifier: List[String]): Unit",
                "+",
                "+  // for use in java side",
                "+  protected def bind(name: String,",
                "+                     tpe: String,",
                "+                     value: Object,",
                "+                     modifier: java.util.List[String]): Unit =",
                "+    bind(name, tpe, value, modifier.asScala.toList)",
                "+",
                "+  protected def close(): Unit = {",
                "+    if (sc != null) {",
                "+      sc.stop()",
                "+    }",
                "+    if (sparkHttpServer != null) {",
                "+      sparkHttpServer.getClass.getMethod(\"stop\").invoke(sparkHttpServer)",
                "+    }",
                "+    sc = null",
                "+    sqlContext = null",
                "+    if (sparkSession != null) {",
                "+      sparkSession.getClass.getMethod(\"stop\").invoke(sparkSession)",
                "+      sparkSession = null",
                "+    }",
                "+",
                "+  }",
                "+",
                "+  protected def createSparkContext(): Unit = {",
                "+    if (isSparkSessionPresent()) {",
                "+      spark2CreateContext()",
                "+    } else {",
                "+      spark1CreateContext()",
                "+    }",
                "+  }",
                "+",
                "+  private def spark1CreateContext(): Unit = {",
                "+    this.sc = SparkContext.getOrCreate(conf)",
                "+    if (!isTest) {",
                "+      interpreterOutput.write(\"Created SparkContext.\\n\".getBytes())",
                "+    }",
                "+    getUserFiles().foreach(file => sc.addFile(file))",
                "+",
                "+    sc.getClass.getMethod(\"ui\").invoke(sc).asInstanceOf[Option[_]] match {",
                "+      case Some(webui) =>",
                "+        sparkUrl = webui.getClass.getMethod(\"appUIAddress\").invoke(webui).asInstanceOf[String]",
                "+      case None =>",
                "+    }",
                "+",
                "+    val hiveSiteExisted: Boolean =",
                "+      Thread.currentThread().getContextClassLoader.getResource(\"hive-site.xml\") != null",
                "+    val hiveEnabled = conf.getBoolean(\"spark.useHiveContext\", false)",
                "+    if (hiveEnabled && hiveSiteExisted) {",
                "+      sqlContext = Class.forName(\"org.apache.spark.sql.hive.HiveContext\")",
                "+        .getConstructor(classOf[SparkContext]).newInstance(sc).asInstanceOf[SQLContext]",
                "+      if (!isTest) {",
                "+        interpreterOutput.write(\"Created sql context (with Hive support).\\n\".getBytes())",
                "+      }",
                "+    } else {",
                "+      if (hiveEnabled && !hiveSiteExisted && !isTest) {",
                "+        interpreterOutput.write((\"spark.useHiveContext is set as true but no hive-site.xml\" +",
                "+          \" is found in classpath, so zeppelin will fallback to SQLContext.\\n\").getBytes())",
                "+      }",
                "+      sqlContext = Class.forName(\"org.apache.spark.sql.SQLContext\")",
                "+        .getConstructor(classOf[SparkContext]).newInstance(sc).asInstanceOf[SQLContext]",
                "+      if (!isTest) {",
                "+        interpreterOutput.write(\"Created sql context.\\n\".getBytes())",
                "+      }",
                "+    }",
                "+",
                "+    bind(\"sc\", \"org.apache.spark.SparkContext\", sc, List(\"\"\"@transient\"\"\"))",
                "+    bind(\"sqlContext\", sqlContext.getClass.getCanonicalName, sqlContext, List(\"\"\"@transient\"\"\"))",
                "+",
                "+    interpret(\"import org.apache.spark.SparkContext._\")",
                "+    interpret(\"import sqlContext.implicits._\")",
                "+    interpret(\"import sqlContext.sql\")",
                "+    interpret(\"import org.apache.spark.sql.functions._\")",
                "+  }",
                "+",
                "+  private def spark2CreateContext(): Unit = {",
                "+    val sparkClz = Class.forName(\"org.apache.spark.sql.SparkSession$\")",
                "+    val sparkObj = sparkClz.getField(\"MODULE$\").get(null)",
                "+",
                "+    val builderMethod = sparkClz.getMethod(\"builder\")",
                "+    val builder = builderMethod.invoke(sparkObj)",
                "+    builder.getClass.getMethod(\"config\", classOf[SparkConf]).invoke(builder, conf)",
                "+",
                "+    if (conf.get(\"spark.sql.catalogImplementation\", \"in-memory\").toLowerCase == \"hive\"",
                "+        || conf.get(\"spark.useHiveContext\", \"false\").toLowerCase == \"true\") {",
                "+      val hiveSiteExisted: Boolean =",
                "+        Thread.currentThread().getContextClassLoader.getResource(\"hive-site.xml\") != null",
                "+      val hiveClassesPresent =",
                "+        sparkClz.getMethod(\"hiveClassesArePresent\").invoke(sparkObj).asInstanceOf[Boolean]",
                "+      if (hiveSiteExisted && hiveClassesPresent) {",
                "+        builder.getClass.getMethod(\"enableHiveSupport\").invoke(builder)",
                "+        sparkSession = builder.getClass.getMethod(\"getOrCreate\").invoke(builder)",
                "+        if (!isTest) {",
                "+          interpreterOutput.write(\"Created Spark session (with Hive support).\\n\".getBytes())",
                "+        }",
                "+      } else {",
                "+        if (!hiveClassesPresent && !isTest) {",
                "+          interpreterOutput.write(",
                "+            \"Hive support can not be enabled because spark is not built with hive\\n\".getBytes)",
                "+        }",
                "+        if (!hiveSiteExisted && !isTest) {",
                "+          interpreterOutput.write(",
                "+            \"Hive support can not be enabled because no hive-site.xml found\\n\".getBytes)",
                "+        }",
                "+        sparkSession = builder.getClass.getMethod(\"getOrCreate\").invoke(builder)",
                "+        if (!isTest) {",
                "+          interpreterOutput.write(\"Created Spark session.\\n\".getBytes())",
                "+        }",
                "+      }",
                "+    } else {",
                "+      sparkSession = builder.getClass.getMethod(\"getOrCreate\").invoke(builder)",
                "+      if (!isTest) {",
                "+        interpreterOutput.write(\"Created Spark session.\\n\".getBytes())",
                "+      }",
                "+    }",
                "+",
                "+    sc = sparkSession.getClass.getMethod(\"sparkContext\").invoke(sparkSession)",
                "+      .asInstanceOf[SparkContext]",
                "+    getUserFiles().foreach(file => sc.addFile(file))",
                "+    sqlContext = sparkSession.getClass.getMethod(\"sqlContext\").invoke(sparkSession)",
                "+      .asInstanceOf[SQLContext]",
                "+    sc.getClass.getMethod(\"uiWebUrl\").invoke(sc).asInstanceOf[Option[String]] match {",
                "+      case Some(url) => sparkUrl = url",
                "+      case None =>",
                "+    }",
                "+",
                "+    bind(\"spark\", sparkSession.getClass.getCanonicalName, sparkSession, List(\"\"\"@transient\"\"\"))",
                "+    bind(\"sc\", \"org.apache.spark.SparkContext\", sc, List(\"\"\"@transient\"\"\"))",
                "+    bind(\"sqlContext\", \"org.apache.spark.sql.SQLContext\", sqlContext, List(\"\"\"@transient\"\"\"))",
                "+",
                "+    interpret(\"import org.apache.spark.SparkContext._\")",
                "+    interpret(\"import spark.implicits._\")",
                "+    interpret(\"import spark.sql\")",
                "+    interpret(\"import org.apache.spark.sql.functions._\")",
                "+  }",
                "+",
                "+  private def isSparkSessionPresent(): Boolean = {",
                "+    try {",
                "+      Class.forName(\"org.apache.spark.sql.SparkSession\")",
                "+      true",
                "+    } catch {",
                "+      case _: ClassNotFoundException | _: NoClassDefFoundError => false",
                "+    }",
                "+  }",
                "+",
                "+  protected def getField(obj: Object, name: String): Object = {",
                "+    val field = obj.getClass.getField(name)",
                "+    field.setAccessible(true)",
                "+    field.get(obj)",
                "+  }",
                "+",
                "+  protected def getDeclareField(obj: Object, name: String): Object = {",
                "+    val field = obj.getClass.getDeclaredField(name)",
                "+    field.setAccessible(true)",
                "+    field.get(obj)",
                "+  }",
                "+",
                "+  protected def setDeclaredField(obj: Object, name: String, value: Object): Unit = {",
                "+    val field = obj.getClass.getDeclaredField(name)",
                "+    field.setAccessible(true)",
                "+    field.set(obj, value)",
                "+  }",
                "+",
                "+  protected def callMethod(obj: Object, name: String): Object = {",
                "+    callMethod(obj, name, Array.empty[Class[_]], Array.empty[Object])",
                "+  }",
                "+",
                "+  protected def callMethod(obj: Object, name: String,",
                "+                           parameterTypes: Array[Class[_]],",
                "+                           parameters: Array[Object]): Object = {",
                "+    val method = obj.getClass.getMethod(name, parameterTypes: _ *)",
                "+    method.setAccessible(true)",
                "+    method.invoke(obj, parameters: _ *)",
                "+  }",
                "+",
                "+  protected def startHttpServer(outputDir: File): Option[(Object, String)] = {",
                "+    try {",
                "+      val httpServerClass = Class.forName(\"org.apache.spark.HttpServer\")",
                "+      val securityManager = {",
                "+        val constructor = Class.forName(\"org.apache.spark.SecurityManager\")",
                "+          .getConstructor(classOf[SparkConf])",
                "+        constructor.setAccessible(true)",
                "+        constructor.newInstance(conf).asInstanceOf[Object]",
                "+      }",
                "+      val httpServerConstructor = httpServerClass",
                "+        .getConstructor(classOf[SparkConf],",
                "+          classOf[File],",
                "+          Class.forName(\"org.apache.spark.SecurityManager\"),",
                "+          classOf[Int],",
                "+          classOf[String])",
                "+      httpServerConstructor.setAccessible(true)",
                "+      // Create Http Server",
                "+      val port = conf.getInt(\"spark.replClassServer.port\", 0)",
                "+      val server = httpServerConstructor",
                "+        .newInstance(conf, outputDir, securityManager, new Integer(port), \"HTTP server\")",
                "+        .asInstanceOf[Object]",
                "+",
                "+      // Start Http Server",
                "+      val startMethod = server.getClass.getMethod(\"start\")",
                "+      startMethod.setAccessible(true)",
                "+      startMethod.invoke(server)",
                "+",
                "+      // Get uri of this Http Server",
                "+      val uriMethod = server.getClass.getMethod(\"uri\")",
                "+      uriMethod.setAccessible(true)",
                "+      val uri = uriMethod.invoke(server).asInstanceOf[String]",
                "+      Some((server, uri))",
                "+    } catch {",
                "+      // Spark 2.0+ removed HttpServer, so return null instead.",
                "+      case NonFatal(e) =>",
                "+        None",
                "+    }",
                "+  }",
                "+",
                "+  protected def getUserJars(): Seq[String] = {",
                "+    val sparkJars = conf.getOption(\"spark.jars\").map(_.split(\",\"))",
                "+      .map(_.filter(_.nonEmpty)).toSeq.flatten",
                "+    val depJars = depFiles.asScala.filter(_.endsWith(\".jar\"))",
                "+    val result = sparkJars ++ depJars",
                "+    conf.set(\"spark.jars\", result.mkString(\",\"))",
                "+    result",
                "+  }",
                "+",
                "+  protected def getUserFiles(): Seq[String] = {",
                "+    depFiles.asScala.filter(!_.endsWith(\".jar\"))",
                "+  }",
                "+}",
                "diff --git a/testing/install_external_dependencies.sh b/testing/install_external_dependencies.sh",
                "index e34296e3a..d6c07368b 100755",
                "--- a/testing/install_external_dependencies.sh",
                "+++ b/testing/install_external_dependencies.sh",
                "@@ -46,4 +46,4 @@ if [[ -n \"$PYTHON\" ]] ; then",
                "   conda config --add channels conda-forge",
                "-  conda install -q matplotlib pandasql ipython=5.4.1 jupyter_client ipykernel matplotlib bokeh=0.12.6",
                "-  pip install -q grpcio ggplot",
                "+  conda install -q matplotlib pandasql ipython=5.4.1 jupyter_client ipykernel matplotlib bokeh=0.12.10",
                "+  pip install -q grpcio ggplot bkzep==0.4.0",
                " fi",
                "diff --git a/zeppelin-display/pom.xml b/zeppelin-display/pom.xml",
                "index 4058aefbf..ae2292307 100644",
                "--- a/zeppelin-display/pom.xml",
                "+++ b/zeppelin-display/pom.xml",
                "@@ -29,3 +29,3 @@",
                "   <groupId>org.apache.zeppelin</groupId>",
                "-  <artifactId>zeppelin-display_2.10</artifactId>",
                "+  <artifactId>zeppelin-display</artifactId>",
                "   <packaging>jar</packaging>",
                "@@ -47,2 +47,3 @@",
                "         <version>${scala.version}</version>",
                "+        <scope>provided</scope>",
                "       </dependency>",
                "@@ -53,2 +54,3 @@",
                "         <version>${scala.version}</version>",
                "+        <scope>provided</scope>",
                "       </dependency>",
                "@@ -59,2 +61,3 @@",
                "         <version>${scala.version}</version>",
                "+        <scope>provided</scope>",
                "       </dependency>",
                "@@ -86,9 +89,2 @@",
                "-    <dependency>",
                "-      <groupId>org.scala-lang</groupId>",
                "-      <artifactId>scala-library</artifactId>",
                "-      <version>${scala.version}</version>",
                "-      <scope>provided</scope>",
                "-    </dependency>",
                "-",
                "     <dependency>",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/BaseZeppelinContext.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/BaseZeppelinContext.java",
                "index 65bb06fe1..e38a29f82 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/BaseZeppelinContext.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/BaseZeppelinContext.java",
                "@@ -239,2 +239,4 @@ public abstract class BaseZeppelinContext {",
                "       } else {",
                "+        interpreterContext.out.write(\"ZeppelinContext doesn't support to show type: \"",
                "+            + o.getClass().getCanonicalName() + \"\\n\");",
                "         interpreterContext.out.write(o.toString());",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java",
                "index c2a578c56..37c20ad52 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java",
                "@@ -98,6 +98,7 @@ import java.util.concurrent.ConcurrentMap;",
                "  */",
                "-public class RemoteInterpreterServer",
                "-  extends Thread",
                "-  implements RemoteInterpreterService.Iface, AngularObjectRegistryListener {",
                "-  Logger logger = LoggerFactory.getLogger(RemoteInterpreterServer.class);",
                "+public class RemoteInterpreterServer extends Thread",
                "+    implements RemoteInterpreterService.Iface, AngularObjectRegistryListener {",
                "+",
                "+  private static Logger logger = LoggerFactory.getLogger(RemoteInterpreterServer.class);",
                "+",
                "@@ -256,2 +257,5 @@ public class RemoteInterpreterServer",
                "       throws TTransportException, InterruptedException, IOException {",
                "+    Class klass = RemoteInterpreterServer.class;",
                "+    URL location = klass.getResource('/' + klass.getName().replace('.', '/') + \".class\");",
                "+    logger.info(\"URL:\" + location);",
                "     String callbackHost = null;",
                "diff --git a/zeppelin-server/pom.xml b/zeppelin-server/pom.xml",
                "index 296d58f01..a2cf6104d 100644",
                "--- a/zeppelin-server/pom.xml",
                "+++ b/zeppelin-server/pom.xml",
                "@@ -263,2 +263,8 @@",
                "       <scope>test</scope>",
                "+      <exclusions>",
                "+        <exclusion>",
                "+          <groupId>org.scala-lang.modules</groupId>",
                "+          <artifactId>scala-xml_${scala.binary.version}</artifactId>",
                "+        </exclusion>",
                "+      </exclusions>",
                "     </dependency>",
                "diff --git a/zeppelin-zengine/pom.xml b/zeppelin-zengine/pom.xml",
                "index 08de7ad50..e38a6598c 100644",
                "--- a/zeppelin-zengine/pom.xml",
                "+++ b/zeppelin-zengine/pom.xml",
                "@@ -605,3 +605,3 @@",
                "           <groupId>org.apache.zeppelin</groupId>",
                "-          <artifactId>zeppelin-spark_2.10</artifactId>",
                "+          <artifactId>spark-interpreter</artifactId>",
                "           <version>${project.version}</version>"
            ],
            "changed_files": [
                ".travis.yml",
                "bin/interpreter.sh",
                "pom.xml",
                "python/pom.xml",
                "python/src/main/java/org/apache/zeppelin/python/IPythonInterpreter.java",
                "python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java",
                "r/pom.xml",
                "spark/interpreter/figure/null-1.png",
                "spark/interpreter/pom.xml",
                "spark/interpreter/src/main/java/org/apache/zeppelin/spark/AbstractSparkInterpreter.java",
                "spark/interpreter/src/main/java/org/apache/zeppelin/spark/DepInterpreter.java",
                "spark/interpreter/src/main/java/org/apache/zeppelin/spark/IPySparkInterpreter.java",
                "spark/interpreter/src/main/java/org/apache/zeppelin/spark/NewSparkInterpreter.java",
                "spark/interpreter/src/main/java/org/apache/zeppelin/spark/OldSparkInterpreter.java",
                "spark/interpreter/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java",
                "spark/interpreter/src/main/java/org/apache/zeppelin/spark/PythonUtils.java",
                "spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java",
                "spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkRInterpreter.java",
                "spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkSqlInterpreter.java",
                "spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkVersion.java",
                "spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkZeppelinContext.java",
                "spark/interpreter/src/main/java/org/apache/zeppelin/spark/Utils.java",
                "spark/interpreter/src/main/java/org/apache/zeppelin/spark/ZeppelinR.java",
                "spark/interpreter/src/main/java/org/apache/zeppelin/spark/ZeppelinRContext.java",
                "spark/interpreter/src/main/java/org/apache/zeppelin/spark/dep/SparkDependencyContext.java",
                "spark/interpreter/src/main/java/org/apache/zeppelin/spark/dep/SparkDependencyResolver.java",
                "spark/interpreter/src/main/resources/R/zeppelin_sparkr.R",
                "spark/interpreter/src/main/resources/interpreter-setting.json",
                "spark/interpreter/src/main/resources/python/zeppelin_ipyspark.py",
                "spark/interpreter/src/main/resources/python/zeppelin_pyspark.py",
                "spark/interpreter/src/main/scala/org/apache/spark/SparkRBackend.scala",
                "spark/interpreter/src/main/scala/org/apache/zeppelin/spark/ZeppelinRDisplay.scala",
                "spark/interpreter/src/main/scala/org/apache/zeppelin/spark/utils/DisplayUtils.scala",
                "spark/pom.xml",
                "spark/scala-2.10/pom.xml",
                "spark/scala-2.10/spark-scala-parent",
                "spark/scala-2.10/src/main/scala/org/apache/zeppelin/spark/SparkScala210Interpreter.scala",
                "spark/scala-2.11/pom.xml",
                "spark/scala-2.11/spark-scala-parent",
                "spark/scala-2.11/src/main/resources/log4j.properties",
                "spark/scala-2.11/src/main/scala/org/apache/zeppelin/spark/SparkScala211Interpreter.scala",
                "spark/spark-dependencies/pom.xml",
                "spark/spark-scala-parent/pom.xml",
                "spark/spark-scala-parent/src/main/scala/org/apache/zeppelin/spark/BaseSparkScalaInterpreter.scala",
                "testing/install_external_dependencies.sh",
                "zeppelin-display/pom.xml",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/BaseZeppelinContext.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java",
                "zeppelin-server/pom.xml",
                "zeppelin-zengine/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3111": ""
            },
            "ghissue_refs": {
                "2709": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3111",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2709",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0c64d9ca676e48a749db9879fa3cebc06eb78b54",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1506050922,
            "hunks": 12,
            "message": "ZEPPELIN-2942. Remove non-remote interpreter approach ### What is this PR for? This PR is just trying to remove non-remote interpreter approach. ### What type of PR is it? [Refactoring] ### Todos * [ ] - Task ### What is the Jira issue? * https://issues.apache.org/jira/browse/ZEPPELIN-2942 ### How should this be tested? Current test is passed ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Jeff Zhang <zjffdu@apache.org> Closes #2597 from zjffdu/ZEPPELIN-2942 and squashes the following commits: 42fe419 [Jeff Zhang] ZEPPELIN-2942. Remove non-remote interpreter approach",
            "diff": [
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterOption.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterOption.java",
                "index 37a0d99c4..e8a92255f 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterOption.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterOption.java",
                "@@ -30,3 +30,4 @@ public class InterpreterOption {",
                "-  boolean remote;",
                "+  // always set it as true, keep this field just for backward compatibility",
                "+  boolean remote = true;",
                "   String host = null;",
                "@@ -79,10 +80,5 @@ public class InterpreterOption {",
                "   public InterpreterOption() {",
                "-    this(false);",
                "   }",
                "-  public InterpreterOption(boolean remote) {",
                "-    this(remote, SHARED, SHARED);",
                "-  }",
                "-",
                "-  public InterpreterOption(boolean remote, String perUser, String perNote) {",
                "+  public InterpreterOption(String perUser, String perNote) {",
                "     if (perUser == null) {",
                "@@ -94,3 +90,2 @@ public class InterpreterOption {",
                "-    this.remote = remote;",
                "     this.perUser = perUser;",
                "@@ -114,10 +109,2 @@ public class InterpreterOption {",
                "-  public boolean isRemote() {",
                "-    return remote;",
                "-  }",
                "-",
                "-  public void setRemote(boolean remote) {",
                "-    this.remote = remote;",
                "-  }",
                "-",
                "   public String getHost() {",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterInfoSaving.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterInfoSaving.java",
                "index d7593d54e..3d9c2c348 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterInfoSaving.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterInfoSaving.java",
                "@@ -65,7 +65,2 @@ public class InterpreterInfoSaving implements JsonSerializable {",
                "         for (InterpreterSetting interpreterSetting : infoSaving.interpreterSettings.values()) {",
                "-          // Always use separate interpreter process",
                "-          // While we decided to turn this feature on always (without providing",
                "-          // enable/disable option on GUI).",
                "-          // previously created setting should turn this feature on here.",
                "-          interpreterSetting.getOption().setRemote(true);",
                "           interpreterSetting.convertPermissionsFromUsersToOwners(",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "index 3a808c51d..5af01dc4a 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "@@ -107,3 +107,3 @@ public class InterpreterSetting {",
                "   private List<Dependency> dependencies = new ArrayList<>();",
                "-  private InterpreterOption option = new InterpreterOption(true);",
                "+  private InterpreterOption option = new InterpreterOption();",
                "@@ -134,4 +134,2 @@ public class InterpreterSetting {",
                "-  private transient Map<String, URLClassLoader> cleanCl =",
                "-      Collections.synchronizedMap(new HashMap<String, URLClassLoader>());",
                "   ///////////////////////////////////////////////////////////////////////////////////////////",
                "@@ -618,9 +616,4 @@ public class InterpreterSetting {",
                "       Interpreter interpreter = null;",
                "-      if (option.isRemote()) {",
                "-        interpreter = new RemoteInterpreter(getJavaProperties(), sessionId,",
                "-            info.getClassName(), user);",
                "-      } else {",
                "-        interpreter = createLocalInterpreter(info.getClassName());",
                "-      }",
                "-",
                "+      interpreter = new RemoteInterpreter(getJavaProperties(), sessionId,",
                "+          info.getClassName(), user);",
                "       if (info.isDefaultInterpreter()) {",
                "@@ -635,62 +628,3 @@ public class InterpreterSetting {",
                "   }",
                "-",
                "-  // Create Interpreter in ZeppelinServer for non-remote mode",
                "-  private Interpreter createLocalInterpreter(String className)",
                "-      throws InterpreterException {",
                "-    LOGGER.info(\"Create Local Interpreter {} from {}\", className, interpreterDir);",
                "-",
                "-    ClassLoader oldcl = Thread.currentThread().getContextClassLoader();",
                "-    try {",
                "-",
                "-      URLClassLoader ccl = cleanCl.get(interpreterDir);",
                "-      if (ccl == null) {",
                "-        // classloader fallback",
                "-        ccl = URLClassLoader.newInstance(new URL[]{}, oldcl);",
                "-      }",
                "-",
                "-      boolean separateCL = true;",
                "-      try { // check if server's classloader has driver already.",
                "-        Class cls = this.getClass().forName(className);",
                "-        if (cls != null) {",
                "-          separateCL = false;",
                "-        }",
                "-      } catch (Exception e) {",
                "-        LOGGER.error(\"exception checking server classloader driver\", e);",
                "-      }",
                "-",
                "-      URLClassLoader cl;",
                "-",
                "-      if (separateCL == true) {",
                "-        cl = URLClassLoader.newInstance(new URL[]{}, ccl);",
                "-      } else {",
                "-        cl = ccl;",
                "-      }",
                "-      Thread.currentThread().setContextClassLoader(cl);",
                "-",
                "-      Class<Interpreter> replClass = (Class<Interpreter>) cl.loadClass(className);",
                "-      Constructor<Interpreter> constructor =",
                "-          replClass.getConstructor(new Class[]{Properties.class});",
                "-      Interpreter repl = constructor.newInstance(getJavaProperties());",
                "-      repl.setClassloaderUrls(ccl.getURLs());",
                "-      LazyOpenInterpreter intp = new LazyOpenInterpreter(new ClassloaderInterpreter(repl, cl));",
                "-      return intp;",
                "-    } catch (SecurityException e) {",
                "-      throw new InterpreterException(e);",
                "-    } catch (NoSuchMethodException e) {",
                "-      throw new InterpreterException(e);",
                "-    } catch (IllegalArgumentException e) {",
                "-      throw new InterpreterException(e);",
                "-    } catch (InstantiationException e) {",
                "-      throw new InterpreterException(e);",
                "-    } catch (IllegalAccessException e) {",
                "-      throw new InterpreterException(e);",
                "-    } catch (InvocationTargetException e) {",
                "-      throw new InterpreterException(e);",
                "-    } catch (ClassNotFoundException e) {",
                "-      throw new InterpreterException(e);",
                "-    } finally {",
                "-      Thread.currentThread().setContextClassLoader(oldcl);",
                "-    }",
                "-  }",
                "-",
                "+  ",
                "   RemoteInterpreterProcess createInterpreterProcess() {",
                "@@ -887,10 +821,4 @@ public class InterpreterSetting {",
                "     ManagedInterpreterGroup interpreterGroup = new ManagedInterpreterGroup(groupId, this);",
                "-    if (option.isRemote()) {",
                "-      angularObjectRegistry =",
                "-          new RemoteAngularObjectRegistry(groupId, angularObjectRegistryListener, interpreterGroup);",
                "-    } else {",
                "-      angularObjectRegistry = new AngularObjectRegistry(id, angularObjectRegistryListener);",
                "-      // TODO(moon) : create distributed resource pool for local interpreters and set",
                "-    }",
                "-",
                "+    angularObjectRegistry =",
                "+        new RemoteAngularObjectRegistry(groupId, angularObjectRegistryListener, interpreterGroup);",
                "     interpreterGroup.setAngularObjectRegistry(angularObjectRegistry);",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java",
                "index 73bababdf..4b130e39b 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java",
                "@@ -126,3 +126,3 @@ public class InterpreterSettingManager {",
                "       throws IOException {",
                "-    this(zeppelinConfiguration, new InterpreterOption(true),",
                "+    this(zeppelinConfiguration, new InterpreterOption(),",
                "         angularObjectRegistryListener,"
            ],
            "changed_files": [
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterOption.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterInfoSaving.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-2942": ""
            },
            "ghissue_refs": {
                "2597": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-2942",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2597",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4bf0f3a910e01107c00f28e4d138e52c5013f132",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1513233958,
            "hunks": 4,
            "message": "[ZEPPELIN-3007] display a note name without any path in the tab title ### What is this PR for? This PR modifies the display of the name of the note. Now, instead of the full path, only the name of the note is displayed. ### What type of PR is it? Improvement ### What is the Jira issue? [ZEPPELIN-3007](https://issues.apache.org/jira/browse/ZEPPELIN-3007) ### Questions: * Does the licenses files need update? no * Is there breaking changes for older versions? no * Does this needs documentation? no Author: tinkoff-dwh <tinkoff.dwh@gmail.com> Closes #2698 from tinkoff-dwh/ZEPPELIN-3007 and squashes the following commits: 526e99f1f [tinkoff-dwh] Merge branch 'master' into ZEPPELIN-3007 aefb3f50b [tinkoff-dwh] [ZEPPELIN-3007] change actionBar note name view bdfe474af [tinkoff-dwh] [ZEPPELIN-3007] add ' - Zeppelin' to page title ad53d767d [tinkoff-dwh] [ZEPPELIN-3007] display a note name without any path in the tab title",
            "diff": [
                "diff --git a/zeppelin-web/src/app/notebook/notebook-actionBar.html b/zeppelin-web/src/app/notebook/notebook-actionBar.html",
                "index 0db4ff02c..f1d1dd595 100644",
                "--- a/zeppelin-web/src/app/notebook/notebook-actionBar.html",
                "+++ b/zeppelin-web/src/app/notebook/notebook-actionBar.html",
                "@@ -18,6 +18,7 @@ limitations under the License.",
                "       ng-controller=\"ElasticInputCtrl as input\">",
                "-      <input type=\"text\" pu-elastic-input class=\"form-control2\" placeholder=\"New name\" style=\"min-width: 0px; max-width: 95%;\"",
                "-           ng-if=\"input.showEditor\" ng-model=\"input.value\" ng-escape=\"input.showEditor = false\" focus-if=\"input.showEditor\"",
                "-           ng-blur=\"updateNoteName(input.value);input.showEditor = false;\" ng-enter=\"updateNoteName(input.value);input.showEditor = false;\" />",
                "-      <p class=\"form-control-static2\"",
                "+      <input type=\"text\" pu-elastic-input class=\"form-control2\" placeholder=\"New name\"",
                "+             style=\"min-width: 0px; max-width: 85%; margin-left: 2em;\"",
                "+             ng-if=\"input.showEditor\" ng-model=\"input.value\" ng-escape=\"input.showEditor = false\" focus-if=\"input.showEditor\"",
                "+             ng-blur=\"updateNoteName(input.value);input.showEditor = false;\" ng-enter=\"updateNoteName(input.value);input.showEditor = false;\" />",
                "+      <p class=\"form-control-static2 reverse-ellipsis ellipsis\"",
                "          tooltip-placement=\"bottom\"",
                "@@ -25,3 +26,3 @@ limitations under the License.",
                "          ng-click=\"input.showEditor = !revisionView; input.value = note.name\"",
                "-         ng-show=\"!input.showEditor\">{{noteName(note)}}</p>",
                "+         ng-show=\"!input.showEditor\"><span>{{noteName(note)}}</span>></p>",
                "     </div>",
                "diff --git a/zeppelin-web/src/app/notebook/notebook.controller.js b/zeppelin-web/src/app/notebook/notebook.controller.js",
                "index 1fa63231e..b02b74ee8 100644",
                "--- a/zeppelin-web/src/app/notebook/notebook.controller.js",
                "+++ b/zeppelin-web/src/app/notebook/notebook.controller.js",
                "@@ -85,3 +85,10 @@ function NotebookCtrl ($scope, $route, $routeParams, $location, $rootScope,",
                "   $scope.$watch('note', function (value) {",
                "-    $rootScope.pageTitle = value ? value.name : 'Zeppelin'",
                "+    let title",
                "+    if (value) {",
                "+      title = value.name.substr(value.name.lastIndexOf('/') + 1, value.name.length)",
                "+      title += ' - Zeppelin'",
                "+    } else {",
                "+      title = 'Zeppelin'",
                "+    }",
                "+    $rootScope.pageTitle = title",
                "   }, true)",
                "diff --git a/zeppelin-web/src/app/notebook/notebook.css b/zeppelin-web/src/app/notebook/notebook.css",
                "index 262ae8e6c..fe5da5c1e 100644",
                "--- a/zeppelin-web/src/app/notebook/notebook.css",
                "+++ b/zeppelin-web/src/app/notebook/notebook.css",
                "@@ -185,2 +185,49 @@",
                "+.ellipsis {",
                "+  padding-left: 1em;",
                "+  white-space: nowrap;",
                "+  overflow: hidden;",
                "+  text-overflow: ellipsis;",
                "+}",
                "+",
                "+.reverse-ellipsis {",
                "+  /* Your move. */",
                "+  text-overflow: clip;",
                "+  position: relative;",
                "+  background-color: #FFF;",
                "+}",
                "+",
                "+.reverse-ellipsis:before {",
                "+  content: '\\02026';",
                "+  position: absolute;",
                "+  z-index: 1;",
                "+  left: -1em;",
                "+  background-color: inherit;",
                "+  padding-left: 1em;",
                "+  margin-left: 0.5em;",
                "+}",
                "+",
                "+.reverse-ellipsis span {",
                "+  min-width: 100%;",
                "+  position: relative;",
                "+  display: inline-block;",
                "+  float: right;",
                "+  overflow: visible;",
                "+  background-color: inherit;",
                "+  text-indent: 0.5em;",
                "+}",
                "+",
                "+.reverse-ellipsis span:before {",
                "+  content: '';",
                "+  position: absolute;",
                "+  display: inline-block;",
                "+  width: 1em;",
                "+  height: 1em;",
                "+  background-color: inherit;",
                "+  z-index: 200;",
                "+  left: -.5em;",
                "+}",
                "+",
                "+",
                "+",
                " .noOverflow {"
            ],
            "changed_files": [
                "zeppelin-web/src/app/notebook/notebook-actionBar.html",
                "zeppelin-web/src/app/notebook/notebook.controller.js",
                "zeppelin-web/src/app/notebook/notebook.css"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3007": ""
            },
            "ghissue_refs": {
                "2698": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3007",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2698",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "86f29fcee99a00a2d0b60d08d89e5a327b9b0b4b",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1514338339,
            "hunks": 11,
            "message": "[ZEPPELIN-3118]. Travis CI Fails due to ubuntu precise is not supported ### What is this PR for? Upgrade travis build from precise to trusty ### What type of PR is it? [ Improvement ] ### Todos * [ ] - Task ### What is the Jira issue? * https://issues.apache.org/jira/browse/ZEPPELIN-3118 ### How should this be tested? * Travis build pass ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Jeff Zhang <zjffdu@apache.org> Closes #2722 from zjffdu/trusty and squashes the following commits: 62c9183 [Jeff Zhang] [ZEPPELIN-3118]. Travis CI Fails due to ubuntu precise is not supported",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index 3d7859580..7b661bf7a 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -32,3 +32,3 @@ addons:",
                "     sources:",
                "-    - r-packages-precise",
                "+    - r-packages-trusty",
                "     packages:",
                "@@ -44,4 +44,4 @@ matrix:",
                "     # Test License compliance using RAT tool",
                "-    - jdk: \"oraclejdk7\"",
                "-      dist: precise",
                "+    - jdk: \"openjdk7\"",
                "+      dist: trusty",
                "       env: SCALA_VER=\"2.11\" SPARK_VER=\"2.0.2\" HADOOP_VER=\"2.6\" PROFILE=\"-Prat\" BUILD_FLAG=\"clean\" TEST_FLAG=\"org.apache.rat:apache-rat-plugin:check\" TEST_PROJECTS=\"\"",
                "@@ -67,3 +67,5 @@ matrix:",
                "       jdk: \"oraclejdk8\"",
                "-      dist: precise",
                "+      dist: trusty",
                "+      addons:",
                "+        firefox: \"31.0\"",
                "       env: PYTHON=\"3\" SCALA_VER=\"2.11\" SPARK_VER=\"2.2.0\" HADOOP_VER=\"2.6\" PROFILE=\"-Pspark-2.2 -Pweb-ci -Pscalding -Phelium-dev -Pexamples -Pscala-2.11\" BUILD_FLAG=\"package -Pbuild-distr -DskipRat\" TEST_FLAG=\"verify -Pusing-packaged-distr -DskipRat\" MODULES=\"-pl ${INTERPRETERS}\" TEST_PROJECTS=\"-Dtests.to.exclude=**/ZeppelinSparkClusterTest.java,**/org.apache.zeppelin.spark.*,**/HeliumApplicationFactoryTest.java -DfailIfNoTests=false\"",
                "@@ -78,4 +80,4 @@ matrix:",
                "     # Test interpreter modules",
                "-    - jdk: \"oraclejdk7\"",
                "-      dist: precise",
                "+    - jdk: \"openjdk7\"",
                "+      dist: trusty",
                "       env: PYTHON=\"3\" SCALA_VER=\"2.10\" PROFILE=\"-Pscalding\" BUILD_FLAG=\"install -DskipTests -DskipRat -Pr\" TEST_FLAG=\"test -DskipRat\" MODULES=\"-pl $(echo .,zeppelin-interpreter,${INTERPRETERS} | sed 's/!//g')\" TEST_PROJECTS=\"\"",
                "@@ -84,3 +86,3 @@ matrix:",
                "     - jdk: \"oraclejdk8\"",
                "-      dist: precise",
                "+      dist: trusty",
                "       env: PYTHON=\"2\" SCALA_VER=\"2.11\" SPARK_VER=\"2.2.0\" HADOOP_VER=\"2.6\" PROFILE=\"-Pweb-ci -Pspark-2.2 -Phadoop-2.6 -Pscala-2.11\" SPARKR=\"true\" BUILD_FLAG=\"install -DskipTests -DskipRat\" TEST_FLAG=\"test -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-zengine,zeppelin-server,zeppelin-display,spark-dependencies,spark,python,livy\" TEST_PROJECTS=\"-Dtest=ZeppelinSparkClusterTest,org.apache.zeppelin.spark.*,org.apache.zeppelin.livy.* -DfailIfNoTests=false\"",
                "@@ -88,4 +90,4 @@ matrix:",
                "     # Test spark module for 2.1.0 with scala 2.11, livy",
                "-    - jdk: \"oraclejdk7\"",
                "-      dist: precise",
                "+    - jdk: \"openjdk7\"",
                "+      dist: trusty",
                "       env: PYTHON=\"2\" SCALA_VER=\"2.11\" SPARK_VER=\"2.1.0\" HADOOP_VER=\"2.6\" PROFILE=\"-Pweb-ci -Pspark-2.1 -Phadoop-2.6 -Pscala-2.11\" SPARKR=\"true\" BUILD_FLAG=\"install -DskipTests -DskipRat\" TEST_FLAG=\"test -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-zengine,zeppelin-server,zeppelin-display,spark-dependencies,spark,python,livy\" TEST_PROJECTS=\"-Dtest=ZeppelinSparkClusterTest,org.apache.zeppelin.spark.*,org.apache.zeppelin.livy.* -DfailIfNoTests=false\"",
                "@@ -93,4 +95,4 @@ matrix:",
                "     # Test spark module for 2.0.2 with scala 2.11",
                "-    - jdk: \"oraclejdk7\"",
                "-      dist: precise",
                "+    - jdk: \"openjdk7\"",
                "+      dist: trusty",
                "       env: PYTHON=\"2\" SCALA_VER=\"2.11\" SPARK_VER=\"2.0.2\" HADOOP_VER=\"2.6\" PROFILE=\"-Pweb-ci -Pspark-2.0 -Phadoop-2.6 -Pscala-2.11\" SPARKR=\"true\" BUILD_FLAG=\"install -DskipTests -DskipRat\" TEST_FLAG=\"test -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-zengine,zeppelin-server,zeppelin-display,spark-dependencies,spark,python\" TEST_PROJECTS=\"-Dtest=ZeppelinSparkClusterTest,org.apache.zeppelin.spark.* -DfailIfNoTests=false\"",
                "@@ -98,4 +100,4 @@ matrix:",
                "     # Test spark module for 1.6.3 with scala 2.10",
                "-    - jdk: \"oraclejdk7\"",
                "-      dist: precise",
                "+    - jdk: \"openjdk7\"",
                "+      dist: trusty",
                "       env: PYTHON=\"3\" SCALA_VER=\"2.10\" SPARK_VER=\"1.6.3\" HADOOP_VER=\"2.6\" PROFILE=\"-Pweb-ci -Pspark-1.6 -Phadoop-2.6 -Pscala-2.10\" SPARKR=\"true\" BUILD_FLAG=\"install -DskipTests -DskipRat\" TEST_FLAG=\"test -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-zengine,zeppelin-server,zeppelin-display,spark-dependencies,spark,python\" TEST_PROJECTS=\"-Dtest=ZeppelinSparkClusterTest,org.apache.zeppelin.spark.*,org.apache.zeppelin.spark.* -DfailIfNoTests=false\"",
                "@@ -103,4 +105,4 @@ matrix:",
                "     # Test spark module for 1.6.3 with scala 2.11",
                "-    - jdk: \"oraclejdk7\"",
                "-      dist: precise",
                "+    - jdk: \"openjdk7\"",
                "+      dist: trusty",
                "       env: PYTHON=\"2\" SCALA_VER=\"2.11\" SPARK_VER=\"1.6.3\" HADOOP_VER=\"2.6\" PROFILE=\"-Pweb-ci -Pspark-1.6 -Phadoop-2.6 -Pscala-2.11\" SPARKR=\"true\" BUILD_FLAG=\"install -DskipTests -DskipRat\" TEST_FLAG=\"test -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-zengine,zeppelin-server,zeppelin-display,spark-dependencies,spark,python\" TEST_PROJECTS=\"-Dtest=ZeppelinSparkClusterTest,org.apache.zeppelin.spark.* -DfailIfNoTests=false\"",
                "@@ -109,4 +111,4 @@ matrix:",
                "     - sudo: required",
                "-      dist: precise",
                "-      jdk: \"oraclejdk7\"",
                "+      dist: trusty",
                "+      jdk: \"openjdk7\"",
                "       env: PYTHON=\"2\" SCALA_VER=\"2.10\" SPARK_VER=\"1.6.1\" HADOOP_VER=\"2.6\" LIVY_VER=\"0.4.0-incubating\" PROFILE=\"-Pspark-1.6 -Phadoop-2.6 -Pscala-2.10\" BUILD_FLAG=\"install -am -DskipTests -DskipRat\" TEST_FLAG=\"verify -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-display,spark-dependencies,spark,python,livy\" TEST_PROJECTS=\"-Dtest=LivySQLInterpreterTest,org.apache.zeppelin.spark.PySpark*Test,org.apache.zeppelin.python.* -Dpyspark.test.exclude='' -DfailIfNoTests=false\"",
                "@@ -115,4 +117,4 @@ matrix:",
                "     - sudo: required",
                "-      dist: precise",
                "-      jdk: \"oraclejdk7\"",
                "+      dist: trusty",
                "+      jdk: \"openjdk7\"",
                "       env: PYTHON=\"3\" SCALA_VER=\"2.11\" SPARK_VER=\"2.0.0\" HADOOP_VER=\"2.6\" LIVY_VER=\"0.4.0-incubating\" PROFILE=\"-Pspark-2.0 -Phadoop-2.6 -Pscala-2.11\" BUILD_FLAG=\"install -am -DskipTests -DskipRat\" TEST_FLAG=\"verify -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-display,spark-dependencies,spark,python,livy\" TEST_PROJECTS=\"-Dtest=LivySQLInterpreterTest,org.apache.zeppelin.spark.PySpark*Test,org.apache.zeppelin.python.* -Dpyspark.test.exclude='' -DfailIfNoTests=false\""
            ],
            "changed_files": [
                ".travis.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3118": ""
            },
            "ghissue_refs": {
                "2722": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3118",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2722",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c48aba3e964e090f7325e7704db9985f9e5c63f1",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1516098755,
            "hunks": 4,
            "message": "[ZEPPELIN-3169] Fix maven version set ### What is this PR for? Bug fix on changing Maven version (0.8.0-SNAPSHOT -> ?) ### What type of PR is it? [Bug Fix | Hot Fix ] ### Todos * [ ] - Task ### What is the Jira issue? https://issues.apache.org/jira/browse/ZEPPELIN-3169 ### How should this be tested? * Run 'mvn versions:set -DprocessDependencies=false -DnewVersion=0.8.0-SNAPSHOT-123 -DgenerateBackupPoms=false' * Run 'mvn clean package -DskipTests' * Expect BUILD SUCCESS ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? N * Is there breaking changes for older versions? N * Does this needs documentation? N Author: Nelson Costa <nelson.costa85@gmail.com> Closes #2731 from necosta/zeppelin3169 and squashes the following commits: 9f73aff [Nelson Costa] [ZEPPELIN-3169] Fix maven version set",
            "diff": [
                "diff --git a/interpreter-parent/pom.xml b/interpreter-parent/pom.xml",
                "index cb0896546..fc924c19a 100644",
                "--- a/interpreter-parent/pom.xml",
                "+++ b/interpreter-parent/pom.xml",
                "@@ -39,3 +39,3 @@",
                "         <artifactId>zeppelin-interpreter</artifactId>",
                "-        <version>0.8.0-SNAPSHOT</version>",
                "+        <version>${project.version}</version>",
                "         <scope>provided</scope>",
                "diff --git a/pom.xml b/pom.xml",
                "index b6f93de00..bb1a1e2d6 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -54,2 +54,3 @@",
                "   <modules>",
                "+    <module>interpreter-parent</module>",
                "     <module>zeppelin-interpreter</module>",
                "diff --git a/shell/pom.xml b/shell/pom.xml",
                "index 0157d86f5..56714f5b1 100644",
                "--- a/shell/pom.xml",
                "+++ b/shell/pom.xml",
                "@@ -47,2 +47,3 @@",
                "       <artifactId>zeppelin-interpreter</artifactId>",
                "+      <version>${project.version}</version>",
                "     </dependency>",
                "diff --git a/zeppelin-jupyter/pom.xml b/zeppelin-jupyter/pom.xml",
                "index c6c688ac5..eef0e367b 100644",
                "--- a/zeppelin-jupyter/pom.xml",
                "+++ b/zeppelin-jupyter/pom.xml",
                "@@ -37,3 +37,3 @@",
                "   <properties>",
                "-    <zeppelin.version>0.8.0-SNAPSHOT</zeppelin.version>",
                "+    <zeppelin.version>${project.version}</zeppelin.version>",
                "   </properties>"
            ],
            "changed_files": [
                "interpreter-parent/pom.xml",
                "pom.xml",
                "shell/pom.xml",
                "zeppelin-jupyter/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3169": "",
                "SNAPSHOT-123": ""
            },
            "ghissue_refs": {
                "2731": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3169, SNAPSHOT-123",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2731",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4c8f20ae33ceb47209402c0469791d7a19571471",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1512462432,
            "hunks": 82,
            "message": "ZEPPELIN-3051. Support Interpreter Process Recovery ### What is this PR for? This PR is for the purpose of recover running interpreter process when zeppelin server is restarted. This would be useful when restarting zeppelin without interrupt current running interpreter processes, should be useful when admin do maintenance or upgrading. Interface `RecoveryStorage` is used for storing the information of running interpreter process. Currently it only has one implementation `FileSystemRecoveryStorage`, other implementation could be done later (such as zookeeper based). `InterpreterLauncher` is the component where to recover the running interpreter process. Test: * RecoveryTest.java * FileSystemRecoveryStorageTest.java Design Doc: https://docs.google.com/document/d/1Plm3Hd40aGdNaXmjdsoY4ek3f-gTijTMGMkNjAZN39Y/edit?usp=sharing ### What type of PR is it? [Feature] ### Todos * [ ] - Task ### What is the Jira issue? * https://issues.apache.org/jira/browse/ZEPPELIN-3051 ### How should this be tested? Unit test & Integration Test is added. Also manually verified. ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Jeff Zhang <zjffdu@apache.org> Closes #2668 from zjffdu/ZEPPELIN-3051 and squashes the following commits: a4c9b9c [Jeff Zhang] address comments 575b7b9 [Jeff Zhang] fix the pid of interpreter process id 02b118f [Jeff Zhang] address comments da7cbb9 [Jeff Zhang] ZEPPELIN-3051. Support Interpreter Process Recovery",
            "diff": [
                "diff --git a/bin/interpreter.sh b/bin/interpreter.sh",
                "index 458ffc00d..f23ca823e 100755",
                "--- a/bin/interpreter.sh",
                "+++ b/bin/interpreter.sh",
                "@@ -222,4 +222,4 @@ fi",
                " eval $INTERPRETER_RUN_COMMAND &",
                "-",
                " pid=$!",
                "+",
                " if [[ -z \"${pid}\" ]]; then",
                "diff --git a/bin/stop-interpreter.sh b/bin/stop-interpreter.sh",
                "new file mode 100755",
                "index 000000000..e6ff16e9e",
                "--- /dev/null",
                "+++ b/bin/stop-interpreter.sh",
                "@@ -0,0 +1,47 @@",
                "+#!/bin/bash",
                "+#",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#     http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing, software",
                "+# distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+# See the License for the specific language governing permissions and",
                "+# limitations under the License.",
                "+#",
                "+# Stop Zeppelin Interpreter Processes",
                "+#",
                "+",
                "+bin=$(dirname \"${BASH_SOURCE-$0}\")",
                "+bin=$(cd \"${bin}\">/dev/null; pwd)",
                "+",
                "+. \"${bin}/common.sh\"",
                "+",
                "+export ZEPPELIN_FORCE_STOP=1",
                "+",
                "+ZEPPELIN_STOP_INTERPRETER_MAIN=org.apache.zeppelin.interpreter.recovery.StopInterpreter",
                "+ZEPPELIN_LOGFILE=\"${ZEPPELIN_LOG_DIR}/stop-interpreter.log\"",
                "+JAVA_OPTS+=\" -Dzeppelin.log.file=${ZEPPELIN_LOGFILE}\"",
                "+",
                "+if [[ -d \"${ZEPPELIN_HOME}/zeppelin-zengine/target/classes\" ]]; then",
                "+  ZEPPELIN_CLASSPATH+=\":${ZEPPELIN_HOME}/zeppelin-zengine/target/classes\"",
                "+fi",
                "+",
                "+if [[ -d \"${ZEPPELIN_HOME}/zeppelin-interpreter/target/classes\" ]]; then",
                "+  ZEPPELIN_CLASSPATH+=\":${ZEPPELIN_HOME}/zeppelin-interpreter/target/classes\"",
                "+fi",
                "+",
                "+addJarInDir \"${ZEPPELIN_HOME}/zeppelin-interpreter/target/lib\"",
                "+addJarInDir \"${ZEPPELIN_HOME}/zeppelin-server/target/lib\"",
                "+addJarInDir \"${ZEPPELIN_HOME}/lib\"",
                "+addJarInDir \"${ZEPPELIN_HOME}/lib/interpreter\"",
                "+",
                "+CLASSPATH+=\":${ZEPPELIN_CLASSPATH}\"",
                "+$ZEPPELIN_RUNNER $JAVA_OPTS -cp $CLASSPATH $ZEPPELIN_STOP_INTERPRETER_MAIN ${@}",
                "diff --git a/bin/zeppelin-daemon.sh b/bin/zeppelin-daemon.sh",
                "index 5982aee2e..e89884975 100755",
                "--- a/bin/zeppelin-daemon.sh",
                "+++ b/bin/zeppelin-daemon.sh",
                "@@ -219,14 +219,2 @@ function stop() {",
                "   fi",
                "-",
                "-  # list all pid that used in remote interpreter and kill them",
                "-  for f in ${ZEPPELIN_PID_DIR}/*.pid; do",
                "-    if [[ ! -f ${f} ]]; then",
                "-      continue;",
                "-    fi",
                "-",
                "-    pid=$(cat ${f})",
                "-    wait_for_zeppelin_to_die $pid 20",
                "-    $(rm -f ${f})",
                "-  done",
                "-",
                " }",
                "diff --git a/conf/zeppelin-site.xml.template b/conf/zeppelin-site.xml.template",
                "index 3c5bbeae5..d566a7178 100755",
                "--- a/conf/zeppelin-site.xml.template",
                "+++ b/conf/zeppelin-site.xml.template",
                "@@ -482,2 +482,43 @@",
                " -->",
                "+",
                "+<!--",
                "+<property>",
                "+  <name>zeppelin.interpreter.lifecyclemanager.class</name>",
                "+  <value>org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager</value>",
                "+</property>",
                "+-->",
                "+",
                "+<!--",
                "+<property>",
                "+  <name>zeppelin.interpreter.lifecyclemanager.timeout.checkinterval</name>",
                "+  <value>6000</value>",
                "+  <description>Check interval of interpreter expiration in seconds</description>",
                "+</property>",
                "+-->",
                "+",
                "+<!--",
                "+<property>",
                "+  <name>zeppelin.interpreter.lifecyclemanager.timeout.threshold</name>",
                "+  <value>3600000</value>",
                "+  <description>Threshold of interpreter idle time in seconds, interpeter exceed this threshold will be killed</description>  ",
                "+</property>",
                "+-->",
                "+",
                "+<!--",
                "+<property>",
                "+  <name>zeppelin.recovery.storage.class</name>",
                "+  <value>org.apache.zeppelin.interpreter.recovery.FileSystemRecoveryStorage</value>",
                "+  <description>ReoveryStorage implementation</description>",
                "+</property>",
                "+-->",
                "+",
                "+<!--",
                "+<property>",
                "+  <name>zeppelin.recovery.dir</name>",
                "+  <value>recovery</value>",
                "+  <description>Location where recovery metadata is stored</description>",
                "+</property>",
                "+-->",
                "+",
                "+",
                " </configuration>",
                "diff --git a/spark/src/main/resources/interpreter-setting.json b/spark/src/main/resources/interpreter-setting.json",
                "index 485f6950d..d656532eb 100644",
                "--- a/spark/src/main/resources/interpreter-setting.json",
                "+++ b/spark/src/main/resources/interpreter-setting.json",
                "@@ -63,3 +63,3 @@",
                "       },",
                "-      \"zeppelin.spark.unSupportedVersionCheck\": {",
                "+      \"zeppelin.spark.enableSupportedVersionCheck\": {",
                "         \"envName\": null,",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "index 438c661f8..77279edcd 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "@@ -357,2 +357,15 @@ public class ZeppelinConfiguration extends XMLConfiguration {",
                "+  public String getRecoveryDir() {",
                "+    return getRelativeDir(ConfVars.ZEPPELIN_RECOVERY_DIR);",
                "+  }",
                "+",
                "+  public String getRecoveryStorageClass() {",
                "+    return getString(ConfVars.ZEPPELIN_RECOVERY_STORAGE_CLASS);",
                "+  }",
                "+",
                "+  public boolean isRecoveryEnabled() {",
                "+    return !getString(ConfVars.ZEPPELIN_RECOVERY_STORAGE_CLASS).equals(",
                "+        \"org.apache.zeppelin.interpreter.recovery.NullRecoveryStorage\");",
                "+  }",
                "+",
                "   public String getUser() {",
                "@@ -660,2 +673,6 @@ public class ZeppelinConfiguration extends XMLConfiguration {",
                "     ZEPPELIN_NOTEBOOK_DIR(\"zeppelin.notebook.dir\", \"notebook\"),",
                "+    ZEPPELIN_RECOVERY_DIR(\"zeppelin.recovery.dir\", \"recovery\"),",
                "+    ZEPPELIN_RECOVERY_STORAGE_CLASS(\"zeppelin.recovery.storage.class\",",
                "+        \"org.apache.zeppelin.interpreter.recovery.NullRecoveryStorage\"),",
                "+",
                "     // use specified notebook (id) as homescreen",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/launcher/InterpreterClient.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/launcher/InterpreterClient.java",
                "index b991079fe..813dad868 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/launcher/InterpreterClient.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/launcher/InterpreterClient.java",
                "@@ -21,3 +21,4 @@ package org.apache.zeppelin.interpreter.launcher;",
                "  * Interface to InterpreterClient which is created by InterpreterLauncher. This is the component",
                "- * that is used to for the communication fromzeppelin-server process to zeppelin interpreter process",
                "+ * that is used to for the communication from zeppelin-server process to zeppelin interpreter",
                "+ * process.",
                "  */",
                "@@ -25,2 +26,13 @@ public interface InterpreterClient {",
                "+  String getInterpreterSettingName();",
                "+",
                "+  void start(String userName, Boolean isUserImpersonate);",
                "+",
                "+  void stop();",
                "+",
                "+  String getHost();",
                "+",
                "+  int getPort();",
                "+",
                "+  boolean isRunning();",
                " }",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/launcher/InterpreterLaunchContext.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/launcher/InterpreterLaunchContext.java",
                "index 9e253555a..6901e2c7a 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/launcher/InterpreterLaunchContext.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/launcher/InterpreterLaunchContext.java",
                "@@ -32,2 +32,3 @@ public class InterpreterLaunchContext {",
                "   private InterpreterRunner runner;",
                "+  private String interpreterGroupId;",
                "   private String interpreterSettingId;",
                "@@ -39,2 +40,3 @@ public class InterpreterLaunchContext {",
                "                                   InterpreterRunner runner,",
                "+                                  String interpreterGroupId,",
                "                                   String interpreterSettingId,",
                "@@ -45,2 +47,3 @@ public class InterpreterLaunchContext {",
                "     this.runner = runner;",
                "+    this.interpreterGroupId = interpreterGroupId;",
                "     this.interpreterSettingId = interpreterSettingId;",
                "@@ -62,2 +65,6 @@ public class InterpreterLaunchContext {",
                "+  public String getInterpreterGroupId() {",
                "+    return interpreterGroupId;",
                "+  }",
                "+",
                "   public String getInterpreterSettingId() {",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/launcher/InterpreterLauncher.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/launcher/InterpreterLauncher.java",
                "index 5d0acf351..1cee20e7a 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/launcher/InterpreterLauncher.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/launcher/InterpreterLauncher.java",
                "@@ -20,2 +20,3 @@ package org.apache.zeppelin.interpreter.launcher;",
                " import org.apache.zeppelin.conf.ZeppelinConfiguration;",
                "+import org.apache.zeppelin.interpreter.recovery.RecoveryStorage;",
                "@@ -31,5 +32,7 @@ public abstract class InterpreterLauncher {",
                "   protected Properties properties;",
                "+  protected RecoveryStorage recoveryStorage;",
                "-  public InterpreterLauncher(ZeppelinConfiguration zConf) {",
                "+  public InterpreterLauncher(ZeppelinConfiguration zConf, RecoveryStorage recoveryStorage) {",
                "     this.zConf = zConf;",
                "+    this.recoveryStorage = recoveryStorage;",
                "   }",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/recovery/RecoveryStorage.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/recovery/RecoveryStorage.java",
                "new file mode 100644",
                "index 000000000..8bbe8302f",
                "--- /dev/null",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/recovery/RecoveryStorage.java",
                "@@ -0,0 +1,80 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.interpreter.recovery;",
                "+",
                "+import org.apache.zeppelin.conf.ZeppelinConfiguration;",
                "+import org.apache.zeppelin.interpreter.launcher.InterpreterClient;",
                "+",
                "+import java.io.IOException;",
                "+import java.util.Map;",
                "+",
                "+",
                "+/**",
                "+ * Interface for storing interpreter process recovery metadata.",
                "+ *",
                "+ */",
                "+public abstract class RecoveryStorage {",
                "+",
                "+  protected ZeppelinConfiguration zConf;",
                "+  protected Map<String, InterpreterClient> restoredClients;",
                "+",
                "+  public RecoveryStorage(ZeppelinConfiguration zConf) throws IOException {",
                "+    this.zConf = zConf;",
                "+  }",
                "+",
                "+  /**",
                "+   * Update RecoveryStorage when new InterpreterClient is started",
                "+   * @param client",
                "+   * @throws IOException",
                "+   */",
                "+  public abstract void onInterpreterClientStart(InterpreterClient client) throws IOException;",
                "+",
                "+  /**",
                "+   * Update RecoveryStorage when InterpreterClient is stopped",
                "+   * @param client",
                "+   * @throws IOException",
                "+   */",
                "+  public abstract void onInterpreterClientStop(InterpreterClient client) throws IOException;",
                "+",
                "+  /**",
                "+   *",
                "+   * It is only called when Zeppelin Server is started.",
                "+   *",
                "+   * @return",
                "+   * @throws IOException",
                "+   */",
                "+  public abstract Map<String, InterpreterClient> restore() throws IOException;",
                "+",
                "+",
                "+  /**",
                "+   * It is called after constructor",
                "+   *",
                "+   * @throws IOException",
                "+   */",
                "+  public void init() throws IOException {",
                "+    this.restoredClients = restore();",
                "+  }",
                "+",
                "+  public InterpreterClient getInterpreterClient(String interpreterGroupId) {",
                "+    if (restoredClients.containsKey(interpreterGroupId)) {",
                "+      return restoredClients.get(interpreterGroupId);",
                "+    } else {",
                "+      return null;",
                "+    }",
                "+  }",
                "+}",
                "diff --git a/zeppelin-server/notebook/.python.recovery.crc b/zeppelin-server/notebook/.python.recovery.crc",
                "new file mode 100644",
                "index 000000000..6bd3e7ae4",
                "Binary files /dev/null and b/zeppelin-server/notebook/.python.recovery.crc differ",
                "diff --git a/zeppelin-server/notebook/python.recovery b/zeppelin-server/notebook/python.recovery",
                "new file mode 100644",
                "index 000000000..eaf4938fd",
                "--- /dev/null",
                "+++ b/zeppelin-server/notebook/python.recovery",
                "@@ -0,0 +1 @@",
                "+2CZA1DVUG:shared_process\t192.168.3.2:55410",
                "\\ No newline at end of file",
                "diff --git a/zeppelin-server/pom.xml b/zeppelin-server/pom.xml",
                "index 08ede293e..925c637fc 100644",
                "--- a/zeppelin-server/pom.xml",
                "+++ b/zeppelin-server/pom.xml",
                "@@ -351,2 +351,17 @@",
                "+      <plugin>",
                "+        <artifactId>maven-surefire-plugin</artifactId>",
                "+        <version>${plugin.surefire.version}</version>",
                "+        <configuration combine.children=\"append\">",
                "+          <argLine>-Xmx2g -Xms1g -Dfile.encoding=UTF-8</argLine>",
                "+          <excludes>",
                "+            <exclude>${tests.to.exclude}</exclude>",
                "+          </excludes>",
                "+          <environmentVariables>",
                "+            <ZEPPELIN_FORCE_STOP>1</ZEPPELIN_FORCE_STOP>",
                "+          </environmentVariables>",
                "+        </configuration>",
                "+      </plugin>",
                "+",
                "+",
                "       <plugin>",
                "diff --git a/zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java b/zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java",
                "index 0b66a437d..f8625c235 100644",
                "--- a/zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java",
                "+++ b/zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java",
                "@@ -164,3 +164,3 @@ public class ZeppelinServer extends Application {",
                "-    ZeppelinConfiguration conf = ZeppelinConfiguration.create();",
                "+    final ZeppelinConfiguration conf = ZeppelinConfiguration.create();",
                "     conf.setProperty(\"args\", args);",
                "@@ -201,3 +201,5 @@ public class ZeppelinServer extends Application {",
                "           jettyWebServer.stop();",
                "-          notebook.getInterpreterSettingManager().close();",
                "+          if (!conf.isRecoveryEnabled()) {",
                "+            ZeppelinServer.notebook.getInterpreterSettingManager().close();",
                "+          }",
                "           notebook.close();",
                "@@ -224,3 +226,5 @@ public class ZeppelinServer extends Application {",
                "     jettyWebServer.join();",
                "-    ZeppelinServer.notebook.getInterpreterSettingManager().close();",
                "+    if (!conf.isRecoveryEnabled()) {",
                "+      ZeppelinServer.notebook.getInterpreterSettingManager().close();",
                "+    }",
                "   }",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "index d5ff947ad..424aa27a1 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "@@ -40,2 +40,4 @@ import org.apache.zeppelin.interpreter.launcher.SparkInterpreterLauncher;",
                " import org.apache.zeppelin.interpreter.lifecycle.NullLifecycleManager;",
                "+import org.apache.zeppelin.interpreter.recovery.NullRecoveryStorage;",
                "+import org.apache.zeppelin.interpreter.recovery.RecoveryStorage;",
                " import org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry;",
                "@@ -146,2 +148,5 @@ public class InterpreterSetting {",
                "+  private transient RecoveryStorage recoveryStorage;",
                "+  ///////////////////////////////////////////////////////////////////////////////////////////",
                "+",
                "   /**",
                "@@ -244,2 +249,7 @@ public class InterpreterSetting {",
                "+    public Builder setRecoveryStorage(RecoveryStorage recoveryStorage) {",
                "+      interpreterSetting.recoveryStorage = recoveryStorage;",
                "+      return this;",
                "+    }",
                "+",
                "     public InterpreterSetting create() {",
                "@@ -263,2 +273,9 @@ public class InterpreterSetting {",
                "     }",
                "+    if (this.recoveryStorage == null) {",
                "+      try {",
                "+        this.recoveryStorage = new NullRecoveryStorage(conf, interpreterSettingManager);",
                "+      } catch (IOException e) {",
                "+        // ignore this exception as NullRecoveryStorage will do nothing.",
                "+      }",
                "+    }",
                "   }",
                "@@ -287,5 +304,5 @@ public class InterpreterSetting {",
                "     if (group.equals(\"spark\")) {",
                "-      this.launcher = new SparkInterpreterLauncher(this.conf);",
                "+      this.launcher = new SparkInterpreterLauncher(this.conf, this.recoveryStorage);",
                "     } else {",
                "-      this.launcher = new ShellScriptLauncher(this.conf);",
                "+      this.launcher = new ShellScriptLauncher(this.conf, this.recoveryStorage);",
                "     }",
                "@@ -346,2 +363,11 @@ public class InterpreterSetting {",
                "+  public InterpreterSetting setRecoveryStorage(RecoveryStorage recoveryStorage) {",
                "+    this.recoveryStorage = recoveryStorage;",
                "+    return this;",
                "+  }",
                "+",
                "+  public RecoveryStorage getRecoveryStorage() {",
                "+    return recoveryStorage;",
                "+  }",
                "+",
                "   public LifecycleManager getLifecycleManager() {",
                "@@ -410,3 +436,8 @@ public class InterpreterSetting {",
                "   void removeInterpreterGroup(String groupId) {",
                "-    this.interpreterGroups.remove(groupId);",
                "+    try {",
                "+      interpreterGroupWriteLock.lock();",
                "+      this.interpreterGroups.remove(groupId);",
                "+    } finally {",
                "+      interpreterGroupWriteLock.unlock();",
                "+    }",
                "   }",
                "@@ -427,3 +458,2 @@ public class InterpreterSetting {",
                "-  @VisibleForTesting",
                "   public ArrayList<ManagedInterpreterGroup> getAllInterpreterGroups() {",
                "@@ -670,3 +700,4 @@ public class InterpreterSetting {",
                "-  synchronized RemoteInterpreterProcess createInterpreterProcess(Properties properties)",
                "+  synchronized RemoteInterpreterProcess createInterpreterProcess(String interpreterGroupId,",
                "+                                                                 Properties properties)",
                "       throws IOException {",
                "@@ -676,3 +707,4 @@ public class InterpreterSetting {",
                "     InterpreterLaunchContext launchContext = new",
                "-        InterpreterLaunchContext(properties, option, interpreterRunner, id, group, name);",
                "+        InterpreterLaunchContext(properties, option, interpreterRunner,",
                "+        interpreterGroupId, id, group, name);",
                "     RemoteInterpreterProcess process = (RemoteInterpreterProcess) launcher.launch(launchContext);",
                "@@ -680,2 +712,3 @@ public class InterpreterSetting {",
                "         new RemoteInterpreterEventPoller(remoteInterpreterProcessListener, appEventListener));",
                "+    recoveryStorage.onInterpreterClientStart(process);",
                "     return process;",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java",
                "index 0b7efd5db..42f82fad2 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java",
                "@@ -36,2 +36,5 @@ import org.apache.zeppelin.helium.ApplicationEventListener;",
                " import org.apache.zeppelin.interpreter.Interpreter.RegisteredInterpreter;",
                "+import org.apache.zeppelin.interpreter.recovery.FileSystemRecoveryStorage;",
                "+import org.apache.zeppelin.interpreter.recovery.NullRecoveryStorage;",
                "+import org.apache.zeppelin.interpreter.recovery.RecoveryStorage;",
                " import org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess;",
                "@@ -42,2 +45,3 @@ import org.apache.zeppelin.resource.ResourcePool;",
                " import org.apache.zeppelin.resource.ResourceSet;",
                "+import org.apache.zeppelin.util.ReflectionUtils;",
                " import org.slf4j.Logger;",
                "@@ -120,2 +124,3 @@ public class InterpreterSettingManager {",
                "   private LifecycleManager lifecycleManager;",
                "+  private RecoveryStorage recoveryStorage;",
                "@@ -156,9 +161,13 @@ public class InterpreterSettingManager {",
                "     this.appEventListener = appEventListener;",
                "-    try {",
                "-      this.lifecycleManager = (LifecycleManager)",
                "-          Class.forName(conf.getLifecycleManagerClass()).getConstructor(ZeppelinConfiguration.class)",
                "-              .newInstance(conf);",
                "-    } catch (Exception e) {",
                "-      throw new IOException(\"Fail to create LifecycleManager\", e);",
                "-    }",
                "+",
                "+    this.recoveryStorage = ReflectionUtils.createClazzInstance(conf.getRecoveryStorageClass(),",
                "+        new Class[] {ZeppelinConfiguration.class, InterpreterSettingManager.class},",
                "+        new Object[] {conf, this});",
                "+    this.recoveryStorage.init();",
                "+    LOGGER.info(\"Using RecoveryStorage: \" + this.recoveryStorage.getClass().getName());",
                "+",
                "+    this.lifecycleManager = ReflectionUtils.createClazzInstance(conf.getLifecycleManagerClass(),",
                "+        new Class[] {ZeppelinConfiguration.class},",
                "+        new Object[] {conf});",
                "+    LOGGER.info(\"Using LifecycleManager: \" + this.lifecycleManager.getClass().getName());",
                "@@ -176,2 +185,3 @@ public class InterpreterSettingManager {",
                "         .setLifecycleManager(lifecycleManager)",
                "+        .setRecoveryStorage(recoveryStorage)",
                "         .postProcessing();",
                "@@ -309,4 +319,12 @@ public class InterpreterSettingManager {",
                "+  public RemoteInterpreterProcessListener getRemoteInterpreterProcessListener() {",
                "+    return remoteInterpreterProcessListener;",
                "+  }",
                "+",
                "+  public ApplicationEventListener getAppEventListener() {",
                "+    return appEventListener;",
                "+  }",
                "+",
                "   private boolean registerInterpreterFromResource(ClassLoader cl, String interpreterDir,",
                "-      String interpreterJson) throws IOException {",
                "+                                                  String interpreterJson) throws IOException {",
                "     URL[] urls = recursiveBuildLibList(new File(interpreterDir));",
                "@@ -509,2 +527,6 @@ public class InterpreterSettingManager {",
                "+  public RecoveryStorage getRecoveryStorage() {",
                "+    return recoveryStorage;",
                "+  }",
                "+",
                "   public void removeResourcesBelongsToParagraph(String noteId, String paragraphId) {",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroup.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroup.java",
                "index 2378f140d..641c0ac23 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroup.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroup.java",
                "@@ -57,3 +57,4 @@ public class ManagedInterpreterGroup extends InterpreterGroup {",
                "-  public synchronized RemoteInterpreterProcess getOrCreateInterpreterProcess(Properties properties)",
                "+  public synchronized RemoteInterpreterProcess getOrCreateInterpreterProcess(String userName,",
                "+                                                                             Properties properties)",
                "       throws IOException {",
                "@@ -61,3 +62,14 @@ public class ManagedInterpreterGroup extends InterpreterGroup {",
                "       LOGGER.info(\"Create InterpreterProcess for InterpreterGroup: \" + getId());",
                "-      remoteInterpreterProcess = interpreterSetting.createInterpreterProcess(properties);",
                "+      remoteInterpreterProcess = interpreterSetting.createInterpreterProcess(id, properties);",
                "+      synchronized (remoteInterpreterProcess) {",
                "+        if (!remoteInterpreterProcess.isRunning()) {",
                "+          remoteInterpreterProcess.start(userName, false);",
                "+          remoteInterpreterProcess.getRemoteInterpreterEventPoller()",
                "+              .setInterpreterProcess(remoteInterpreterProcess);",
                "+          remoteInterpreterProcess.getRemoteInterpreterEventPoller().setInterpreterGroup(this);",
                "+          remoteInterpreterProcess.getRemoteInterpreterEventPoller().start();",
                "+          getInterpreterSetting().getRecoveryStorage()",
                "+              .onInterpreterClientStart(remoteInterpreterProcess);",
                "+        }",
                "+      }",
                "     }",
                "@@ -66,2 +78,6 @@ public class ManagedInterpreterGroup extends InterpreterGroup {",
                "+  public RemoteInterpreterProcess getInterpreterProcess() {",
                "+    return remoteInterpreterProcess;",
                "+  }",
                "+",
                "   public RemoteInterpreterProcess getRemoteInterpreterProcess() {",
                "@@ -96,2 +112,7 @@ public class ManagedInterpreterGroup extends InterpreterGroup {",
                "         remoteInterpreterProcess.stop();",
                "+        try {",
                "+          interpreterSetting.getRecoveryStorage().onInterpreterClientStop(remoteInterpreterProcess);",
                "+        } catch (IOException e) {",
                "+          LOGGER.error(\"Fail to store recovery data\", e);",
                "+        }",
                "         remoteInterpreterProcess = null;",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/ShellScriptLauncher.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/ShellScriptLauncher.java",
                "index 8c86129f6..6ddcacf27 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/ShellScriptLauncher.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/ShellScriptLauncher.java",
                "@@ -23,2 +23,3 @@ import org.apache.zeppelin.interpreter.InterpreterOption;",
                " import org.apache.zeppelin.interpreter.InterpreterRunner;",
                "+import org.apache.zeppelin.interpreter.recovery.RecoveryStorage;",
                " import org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess;",
                "@@ -29,2 +30,3 @@ import org.slf4j.LoggerFactory;",
                "+import java.io.IOException;",
                " import java.util.HashMap;",
                "@@ -34,3 +36,2 @@ import java.util.Map;",
                "  * Interpreter Launcher which use shell script to launch the interpreter process.",
                "- *",
                "  */",
                "@@ -40,4 +41,4 @@ public class ShellScriptLauncher extends InterpreterLauncher {",
                "-  public ShellScriptLauncher(ZeppelinConfiguration zConf) {",
                "-    super(zConf);",
                "+  public ShellScriptLauncher(ZeppelinConfiguration zConf, RecoveryStorage recoveryStorage) {",
                "+    super(zConf, recoveryStorage);",
                "   }",
                "@@ -45,3 +46,3 @@ public class ShellScriptLauncher extends InterpreterLauncher {",
                "   @Override",
                "-  public InterpreterClient launch(InterpreterLaunchContext context) {",
                "+  public InterpreterClient launch(InterpreterLaunchContext context) throws IOException {",
                "     LOGGER.info(\"Launching Interpreter: \" + context.getInterpreterSettingGroup());",
                "@@ -52,7 +53,8 @@ public class ShellScriptLauncher extends InterpreterLauncher {",
                "     String name = context.getInterpreterSettingName();",
                "-",
                "     int connectTimeout =",
                "         zConf.getInt(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT);",
                "+",
                "     if (option.isExistingProcess()) {",
                "       return new RemoteInterpreterRunningProcess(",
                "+          context.getInterpreterSettingName(),",
                "           connectTimeout,",
                "@@ -61,2 +63,18 @@ public class ShellScriptLauncher extends InterpreterLauncher {",
                "     } else {",
                "+      // try to recover it first",
                "+      if (zConf.isRecoveryEnabled()) {",
                "+        InterpreterClient recoveredClient =",
                "+            recoveryStorage.getInterpreterClient(context.getInterpreterGroupId());",
                "+        if (recoveredClient != null) {",
                "+          if (recoveredClient.isRunning()) {",
                "+            LOGGER.info(\"Recover interpreter process: \" + recoveredClient.getHost() + \":\" +",
                "+                recoveredClient.getPort());",
                "+            return recoveredClient;",
                "+          } else {",
                "+            LOGGER.warn(\"Cannot recover interpreter process: \" + recoveredClient.getHost() + \":\"",
                "+                + recoveredClient.getPort() + \", as it is already terminated.\");",
                "+          }",
                "+        }",
                "+      }",
                "+",
                "       // create new remote process",
                "@@ -66,3 +84,3 @@ public class ShellScriptLauncher extends InterpreterLauncher {",
                "           runner != null ? runner.getPath() : zConf.getInterpreterRemoteRunnerPath(),",
                "-          zConf.getCallbackPortRange(),  zConf.getInterpreterPortRange(),",
                "+          zConf.getCallbackPortRange(), zConf.getInterpreterPortRange(),",
                "           zConf.getInterpreterDir() + \"/\" + groupName, localRepoPath,",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/SparkInterpreterLauncher.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/SparkInterpreterLauncher.java",
                "index 32a0530af..e8a9cdf88 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/SparkInterpreterLauncher.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/SparkInterpreterLauncher.java",
                "@@ -21,2 +21,3 @@ import org.apache.commons.lang3.StringUtils;",
                " import org.apache.zeppelin.conf.ZeppelinConfiguration;",
                "+import org.apache.zeppelin.interpreter.recovery.RecoveryStorage;",
                " import org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils;",
                "@@ -37,4 +38,4 @@ public class SparkInterpreterLauncher extends ShellScriptLauncher {",
                "-  public SparkInterpreterLauncher(ZeppelinConfiguration zConf) {",
                "-    super(zConf);",
                "+  public SparkInterpreterLauncher(ZeppelinConfiguration zConf, RecoveryStorage recoveryStorage) {",
                "+    super(zConf, recoveryStorage);",
                "   }",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/recovery/FileSystemRecoveryStorage.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/recovery/FileSystemRecoveryStorage.java",
                "new file mode 100644",
                "index 000000000..5a0c8adf6",
                "--- /dev/null",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/recovery/FileSystemRecoveryStorage.java",
                "@@ -0,0 +1,139 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.interpreter.recovery;",
                "+",
                "+import org.apache.commons.lang.StringUtils;",
                "+import org.apache.hadoop.conf.Configuration;",
                "+import org.apache.hadoop.fs.FileStatus;",
                "+import org.apache.hadoop.fs.FileSystem;",
                "+import org.apache.hadoop.fs.Path;",
                "+import org.apache.hadoop.fs.PathFilter;",
                "+import org.apache.hadoop.io.IOUtils;",
                "+import org.apache.hadoop.security.UserGroupInformation;",
                "+import org.apache.zeppelin.conf.ZeppelinConfiguration;",
                "+import org.apache.zeppelin.interpreter.InterpreterSetting;",
                "+import org.apache.zeppelin.interpreter.InterpreterSettingManager;",
                "+import org.apache.zeppelin.interpreter.ManagedInterpreterGroup;",
                "+import org.apache.zeppelin.interpreter.launcher.InterpreterClient;",
                "+import org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller;",
                "+import org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess;",
                "+import org.apache.zeppelin.interpreter.remote.RemoteInterpreterRunningProcess;",
                "+import org.apache.zeppelin.notebook.FileSystemStorage;",
                "+import org.apache.zeppelin.notebook.repo.FileSystemNotebookRepo;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+import java.io.ByteArrayInputStream;",
                "+import java.io.ByteArrayOutputStream;",
                "+import java.io.IOException;",
                "+import java.net.URI;",
                "+import java.net.URISyntaxException;",
                "+import java.util.ArrayList;",
                "+import java.util.HashMap;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+",
                "+",
                "+/**",
                "+ * Hadoop compatible FileSystem based RecoveryStorage implementation.",
                "+ *",
                "+ * Save InterpreterProcess in the format of:",
                "+ * InterpreterGroupId host:port",
                "+ */",
                "+public class FileSystemRecoveryStorage extends RecoveryStorage {",
                "+",
                "+  private static final Logger LOGGER = LoggerFactory.getLogger(FileSystemRecoveryStorage.class);",
                "+",
                "+  private InterpreterSettingManager interpreterSettingManager;",
                "+  private FileSystemStorage fs;",
                "+  private Path recoveryDir;",
                "+",
                "+  public FileSystemRecoveryStorage(ZeppelinConfiguration zConf,",
                "+                                   InterpreterSettingManager interpreterSettingManager)",
                "+      throws IOException {",
                "+    super(zConf);",
                "+    this.interpreterSettingManager = interpreterSettingManager;",
                "+    this.zConf = zConf;",
                "+    this.fs = FileSystemStorage.get(zConf);",
                "+    this.recoveryDir = this.fs.makeQualified(new Path(zConf.getRecoveryDir()));",
                "+    LOGGER.info(\"Using folder {} to store recovery data\", recoveryDir);",
                "+    this.fs.tryMkDir(recoveryDir);",
                "+  }",
                "+",
                "+  @Override",
                "+  public void onInterpreterClientStart(InterpreterClient client) throws IOException {",
                "+    save(client.getInterpreterSettingName());",
                "+  }",
                "+",
                "+  @Override",
                "+  public void onInterpreterClientStop(InterpreterClient client) throws IOException {",
                "+    save(client.getInterpreterSettingName());",
                "+  }",
                "+",
                "+  private void save(String interpreterSettingName) throws IOException {",
                "+    InterpreterSetting interpreterSetting =",
                "+        interpreterSettingManager.getInterpreterSettingByName(interpreterSettingName);",
                "+    List<String> recoveryContent = new ArrayList<>();",
                "+    for (ManagedInterpreterGroup interpreterGroup : interpreterSetting.getAllInterpreterGroups()) {",
                "+      RemoteInterpreterProcess interpreterProcess = interpreterGroup.getInterpreterProcess();",
                "+      if (interpreterProcess != null) {",
                "+        recoveryContent.add(interpreterGroup.getId() + \"\\t\" + interpreterProcess.getHost() + \":\" +",
                "+            interpreterProcess.getPort());",
                "+      }",
                "+    }",
                "+    LOGGER.debug(\"Updating recovery data for interpreterSetting: \" + interpreterSettingName);",
                "+    LOGGER.debug(\"Recovery Data: \" + StringUtils.join(recoveryContent, System.lineSeparator()));",
                "+    Path recoveryFile = new Path(recoveryDir, interpreterSettingName + \".recovery\");",
                "+    fs.writeFile(StringUtils.join(recoveryContent, System.lineSeparator()), recoveryFile, true);",
                "+  }",
                "+",
                "+  @Override",
                "+  public Map<String, InterpreterClient> restore() throws IOException {",
                "+    Map<String, InterpreterClient> clients = new HashMap<>();",
                "+    List<Path> paths = fs.list(new Path(recoveryDir + \"/*.recovery\"));",
                "+",
                "+    for (Path path : paths) {",
                "+      String fileName = path.getName();",
                "+      String interpreterSettingName = fileName.substring(0,",
                "+          fileName.length() - \".recovery\".length());",
                "+      String recoveryContent = fs.readFile(path);",
                "+      if (!StringUtils.isBlank(recoveryContent)) {",
                "+        for (String line : recoveryContent.split(System.lineSeparator())) {",
                "+          String[] tokens = line.split(\"\\t\");",
                "+          String groupId = tokens[0];",
                "+          String[] hostPort = tokens[1].split(\":\");",
                "+          int connectTimeout =",
                "+              zConf.getInt(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT);",
                "+          RemoteInterpreterRunningProcess client = new RemoteInterpreterRunningProcess(",
                "+              interpreterSettingName, connectTimeout, hostPort[0], Integer.parseInt(hostPort[1]));",
                "+          // interpreterSettingManager may be null when this class is used when it is used",
                "+          // stop-interpreter.sh",
                "+          if (interpreterSettingManager != null) {",
                "+            client.setRemoteInterpreterEventPoller(new RemoteInterpreterEventPoller(",
                "+                interpreterSettingManager.getRemoteInterpreterProcessListener(),",
                "+                interpreterSettingManager.getAppEventListener()));",
                "+          }",
                "+          clients.put(groupId, client);",
                "+          LOGGER.info(\"Recovering Interpreter Process: \" + hostPort[0] + \":\" + hostPort[1]);",
                "+        }",
                "+      }",
                "+    }",
                "+",
                "+    return clients;",
                "+  }",
                "+}",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/recovery/NullRecoveryStorage.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/recovery/NullRecoveryStorage.java",
                "new file mode 100644",
                "index 000000000..3a7d12c70",
                "--- /dev/null",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/recovery/NullRecoveryStorage.java",
                "@@ -0,0 +1,54 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.interpreter.recovery;",
                "+",
                "+import org.apache.zeppelin.conf.ZeppelinConfiguration;",
                "+import org.apache.zeppelin.interpreter.InterpreterSettingManager;",
                "+import org.apache.zeppelin.interpreter.launcher.InterpreterClient;",
                "+",
                "+import java.io.IOException;",
                "+import java.util.Map;",
                "+",
                "+",
                "+/**",
                "+ * RecoveryStorage that do nothing, used when recovery is not enabled.",
                "+ *",
                "+ */",
                "+public class NullRecoveryStorage extends RecoveryStorage {",
                "+",
                "+  public NullRecoveryStorage(ZeppelinConfiguration zConf,",
                "+                             InterpreterSettingManager interpreterSettingManager)",
                "+      throws IOException {",
                "+    super(zConf);",
                "+  }",
                "+",
                "+  @Override",
                "+  public void onInterpreterClientStart(InterpreterClient client) throws IOException {",
                "+",
                "+  }",
                "+",
                "+  @Override",
                "+  public void onInterpreterClientStop(InterpreterClient client) throws IOException {",
                "+",
                "+  }",
                "+",
                "+  @Override",
                "+  public Map<String, InterpreterClient> restore() throws IOException {",
                "+    return null;",
                "+  }",
                "+}",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/recovery/StopInterpreter.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/recovery/StopInterpreter.java",
                "new file mode 100644",
                "index 000000000..d74b1621e",
                "--- /dev/null",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/recovery/StopInterpreter.java",
                "@@ -0,0 +1,40 @@",
                "+package org.apache.zeppelin.interpreter.recovery;",
                "+",
                "+import org.apache.zeppelin.conf.ZeppelinConfiguration;",
                "+import org.apache.zeppelin.interpreter.InterpreterSettingManager;",
                "+import org.apache.zeppelin.interpreter.launcher.InterpreterClient;",
                "+import org.apache.zeppelin.util.ReflectionUtils;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+import java.io.IOException;",
                "+import java.util.Map;",
                "+",
                "+",
                "+/**",
                "+ * Utility class for stopping interpreter in the case that you want to stop all the",
                "+ * interpreter process even when you enable recovery, or you want to kill interpreter process",
                "+ * to avoid orphan process.",
                "+ */",
                "+public class StopInterpreter {",
                "+",
                "+  private static Logger LOGGER = LoggerFactory.getLogger(StopInterpreter.class);",
                "+",
                "+  public static void main(String[] args) throws IOException {",
                "+    ZeppelinConfiguration zConf = ZeppelinConfiguration.create();",
                "+    RecoveryStorage recoveryStorage = null;",
                "+",
                "+    recoveryStorage = ReflectionUtils.createClazzInstance(zConf.getRecoveryStorageClass(),",
                "+        new Class[] {ZeppelinConfiguration.class, InterpreterSettingManager.class},",
                "+        new Object[] {zConf, null});",
                "+",
                "+    LOGGER.info(\"Using RecoveryStorage: \" + recoveryStorage.getClass().getName());",
                "+    Map<String, InterpreterClient> restoredClients = recoveryStorage.restore();",
                "+    if (restoredClients != null) {",
                "+      for (InterpreterClient client : restoredClients.values()) {",
                "+        LOGGER.info(\"Stop Interpreter Process: \" + client.getHost() + \":\" + client.getPort());",
                "+        client.stop();",
                "+      }",
                "+    }",
                "+  }",
                "+}",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "index 6defd9ba8..bda8010d9 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "@@ -104,12 +104,3 @@ public class RemoteInterpreter extends Interpreter {",
                "     ManagedInterpreterGroup intpGroup = getInterpreterGroup();",
                "-    this.interpreterProcess = intpGroup.getOrCreateInterpreterProcess(properties);",
                "-    synchronized (interpreterProcess) {",
                "-      if (!interpreterProcess.isRunning()) {",
                "-        interpreterProcess.start(this.getUserName(), false);",
                "-        interpreterProcess.getRemoteInterpreterEventPoller()",
                "-            .setInterpreterProcess(interpreterProcess);",
                "-        interpreterProcess.getRemoteInterpreterEventPoller().setInterpreterGroup(intpGroup);",
                "-        interpreterProcess.getRemoteInterpreterEventPoller().start();",
                "-      }",
                "-    }",
                "+    this.interpreterProcess = intpGroup.getOrCreateInterpreterProcess(getUserName(), properties);",
                "     return interpreterProcess;",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterManagedProcess.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterManagedProcess.java",
                "index 27e826c70..3dd5bfa34 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterManagedProcess.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterManagedProcess.java",
                "@@ -216,3 +216,3 @@ public class RemoteInterpreterManagedProcess extends RemoteInterpreterProcess",
                "     if (isRunning()) {",
                "-      logger.info(\"kill interpreter process\");",
                "+      logger.info(\"Kill interpreter process\");",
                "       try {",
                "@@ -265,3 +265,2 @@ public class RemoteInterpreterManagedProcess extends RemoteInterpreterProcess",
                "-  @VisibleForTesting",
                "   public String getInterpreterSettingName() {",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcess.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcess.java",
                "index 88cc4894b..08653ae39 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcess.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcess.java",
                "@@ -53,8 +53,2 @@ public abstract class RemoteInterpreterProcess implements InterpreterClient {",
                "-  public abstract String getHost();",
                "-  public abstract int getPort();",
                "-  public abstract void start(String userName, Boolean isUserImpersonate);",
                "-  public abstract void stop();",
                "-  public abstract boolean isRunning();",
                "-",
                "   public int getConnectTimeout() {",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterRunningProcess.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterRunningProcess.java",
                "index d8715a0d4..0e87e4f7d 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterRunningProcess.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterRunningProcess.java",
                "@@ -19,2 +19,3 @@ package org.apache.zeppelin.interpreter.remote;",
                " import org.apache.zeppelin.helium.ApplicationEventListener;",
                "+import org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService;",
                " import org.slf4j.Logger;",
                "@@ -29,4 +30,6 @@ public class RemoteInterpreterRunningProcess extends RemoteInterpreterProcess {",
                "   private final int port;",
                "+  private final String interpreterSettingName;",
                "   public RemoteInterpreterRunningProcess(",
                "+      String interpreterSettingName,",
                "       int connectTimeout,",
                "@@ -36,2 +39,3 @@ public class RemoteInterpreterRunningProcess extends RemoteInterpreterProcess {",
                "     super(connectTimeout);",
                "+    this.interpreterSettingName = interpreterSettingName;",
                "     this.host = host;",
                "@@ -50,2 +54,7 @@ public class RemoteInterpreterRunningProcess extends RemoteInterpreterProcess {",
                "+  @Override",
                "+  public String getInterpreterSettingName() {",
                "+    return interpreterSettingName;",
                "+  }",
                "+",
                "   @Override",
                "@@ -57,3 +66,20 @@ public class RemoteInterpreterRunningProcess extends RemoteInterpreterProcess {",
                "   public void stop() {",
                "-    // assume process is externally managed. nothing to do",
                "+    // assume process is externally managed. nothing to do. But will kill it",
                "+    // when you want to force stop it. ENV ZEPPELIN_FORCE_STOP control that.",
                "+    if (System.getenv(\"ZEPPELIN_FORCE_STOP\") != null) {",
                "+      if (isRunning()) {",
                "+        logger.info(\"Kill interpreter process\");",
                "+        try {",
                "+          callRemoteFunction(new RemoteFunction<Void>() {",
                "+            @Override",
                "+            public Void call(RemoteInterpreterService.Client client) throws Exception {",
                "+              client.shutdown();",
                "+              return null;",
                "+            }",
                "+          });",
                "+        } catch (Exception e) {",
                "+          logger.warn(\"ignore the exception when shutting down interpreter process.\", e);",
                "+        }",
                "+      }",
                "+    }",
                "   }",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/FileSystemStorage.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/FileSystemStorage.java",
                "new file mode 100644",
                "index 000000000..6f3d3f97f",
                "--- /dev/null",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/FileSystemStorage.java",
                "@@ -0,0 +1,168 @@",
                "+package org.apache.zeppelin.notebook;",
                "+",
                "+import org.apache.commons.lang.StringUtils;",
                "+import org.apache.hadoop.conf.Configuration;",
                "+import org.apache.hadoop.fs.FileStatus;",
                "+import org.apache.hadoop.fs.FileSystem;",
                "+import org.apache.hadoop.fs.Path;",
                "+import org.apache.hadoop.fs.RawLocalFileSystem;",
                "+import org.apache.hadoop.io.IOUtils;",
                "+import org.apache.hadoop.security.UserGroupInformation;",
                "+import org.apache.zeppelin.conf.ZeppelinConfiguration;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+import java.io.ByteArrayInputStream;",
                "+import java.io.ByteArrayOutputStream;",
                "+import java.io.IOException;",
                "+import java.io.InputStream;",
                "+import java.net.URI;",
                "+import java.net.URISyntaxException;",
                "+import java.security.PrivilegedExceptionAction;",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+",
                "+",
                "+/**",
                "+ * Hadoop FileSystem wrapper. Support both secure and no-secure mode",
                "+ */",
                "+public class FileSystemStorage {",
                "+",
                "+  private static Logger LOGGER = LoggerFactory.getLogger(FileSystemStorage.class);",
                "+",
                "+  private static FileSystemStorage instance;",
                "+",
                "+  private ZeppelinConfiguration zConf;",
                "+  private Configuration hadoopConf;",
                "+  private boolean isSecurityEnabled = false;",
                "+  private FileSystem fs;",
                "+",
                "+  private FileSystemStorage(ZeppelinConfiguration zConf) throws IOException {",
                "+    this.zConf = zConf;",
                "+    this.hadoopConf = new Configuration();",
                "+    this.hadoopConf.set(\"fs.file.impl\", RawLocalFileSystem.class.getName());",
                "+    this.isSecurityEnabled = UserGroupInformation.isSecurityEnabled();",
                "+",
                "+    if (isSecurityEnabled) {",
                "+      String keytab = zConf.getString(",
                "+          ZeppelinConfiguration.ConfVars.ZEPPELIN_SERVER_KERBEROS_KEYTAB);",
                "+      String principal = zConf.getString(",
                "+          ZeppelinConfiguration.ConfVars.ZEPPELIN_SERVER_KERBEROS_PRINCIPAL);",
                "+      if (StringUtils.isBlank(keytab) || StringUtils.isBlank(principal)) {",
                "+        throw new IOException(\"keytab and principal can not be empty, keytab: \" + keytab",
                "+            + \", principal: \" + principal);",
                "+      }",
                "+      UserGroupInformation.loginUserFromKeytab(principal, keytab);",
                "+    }",
                "+",
                "+    try {",
                "+      this.fs = FileSystem.get(new URI(zConf.getNotebookDir()), this.hadoopConf);",
                "+      LOGGER.info(\"Creating FileSystem: \" + this.fs.getClass().getCanonicalName());",
                "+    } catch (URISyntaxException e) {",
                "+      throw new IOException(e);",
                "+    }",
                "+  }",
                "+",
                "+  public static synchronized FileSystemStorage get(ZeppelinConfiguration zConf) throws IOException {",
                "+    if (instance == null) {",
                "+      instance = new FileSystemStorage(zConf);",
                "+    }",
                "+    return instance;",
                "+  }",
                "+",
                "+  public Path makeQualified(Path path) {",
                "+    return fs.makeQualified(path);",
                "+  }",
                "+",
                "+  public void tryMkDir(final Path dir) throws IOException {",
                "+    callHdfsOperation(new HdfsOperation<Void>() {",
                "+      @Override",
                "+      public Void call() throws IOException {",
                "+        if (!fs.exists(dir)) {",
                "+          fs.mkdirs(dir);",
                "+          LOGGER.info(\"Create dir {} in hdfs\", dir.toString());",
                "+        }",
                "+        if (fs.isFile(dir)) {",
                "+          throw new IOException(dir.toString() + \" is file instead of directory, please remove \" +",
                "+              \"it or specify another directory\");",
                "+        }",
                "+        fs.mkdirs(dir);",
                "+        return null;",
                "+      }",
                "+    });",
                "+  }",
                "+",
                "+  public List<Path> list(final Path path) throws IOException {",
                "+    return callHdfsOperation(new HdfsOperation<List<Path>>() {",
                "+      @Override",
                "+      public List<Path> call() throws IOException {",
                "+        List<Path> paths = new ArrayList<>();",
                "+        for (FileStatus status : fs.globStatus(path)) {",
                "+          paths.add(status.getPath());",
                "+        }",
                "+        return paths;",
                "+      }",
                "+    });",
                "+  }",
                "+",
                "+  public boolean delete(final Path path) throws IOException {",
                "+    return callHdfsOperation(new HdfsOperation<Boolean>() {",
                "+      @Override",
                "+      public Boolean call() throws IOException {",
                "+        return fs.delete(path, true);",
                "+      }",
                "+    });",
                "+  }",
                "+",
                "+  public String readFile(final Path file) throws IOException {",
                "+    return callHdfsOperation(new HdfsOperation<String>() {",
                "+      @Override",
                "+      public String call() throws IOException {",
                "+        LOGGER.debug(\"Read from file: \" + file);",
                "+        ByteArrayOutputStream noteBytes = new ByteArrayOutputStream();",
                "+        IOUtils.copyBytes(fs.open(file), noteBytes, hadoopConf);",
                "+        return new String(noteBytes.toString(",
                "+            zConf.getString(ZeppelinConfiguration.ConfVars.ZEPPELIN_ENCODING)));",
                "+      }",
                "+    });",
                "+  }",
                "+",
                "+  public void writeFile(final String content, final Path file, boolean writeTempFileFirst)",
                "+      throws IOException {",
                "+    callHdfsOperation(new HdfsOperation<Void>() {",
                "+      @Override",
                "+      public Void call() throws IOException {",
                "+        InputStream in = new ByteArrayInputStream(content.getBytes(",
                "+            zConf.getString(ZeppelinConfiguration.ConfVars.ZEPPELIN_ENCODING)));",
                "+        Path tmpFile = new Path(file.toString() + \".tmp\");",
                "+        IOUtils.copyBytes(in, fs.create(tmpFile), hadoopConf);",
                "+        fs.delete(file, true);",
                "+        fs.rename(tmpFile, file);",
                "+        return null;",
                "+      }",
                "+    });",
                "+  }",
                "+",
                "+  private interface HdfsOperation<T> {",
                "+    T call() throws IOException;",
                "+  }",
                "+",
                "+  public synchronized <T> T callHdfsOperation(final HdfsOperation<T> func) throws IOException {",
                "+    if (isSecurityEnabled) {",
                "+      UserGroupInformation.getLoginUser().reloginFromKeytab();",
                "+      try {",
                "+        return UserGroupInformation.getCurrentUser().doAs(new PrivilegedExceptionAction<T>() {",
                "+          @Override",
                "+          public T run() throws Exception {",
                "+            return func.call();",
                "+          }",
                "+        });",
                "+      } catch (InterruptedException e) {",
                "+        throw new IOException(e);",
                "+      }",
                "+    } else {",
                "+      return func.call();",
                "+    }",
                "+  }",
                "+",
                "+}",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/FileSystemNotebookRepo.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/FileSystemNotebookRepo.java",
                "index ba858e692..d8ec0e540 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/FileSystemNotebookRepo.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/FileSystemNotebookRepo.java",
                "@@ -10,2 +10,3 @@ import org.apache.hadoop.security.UserGroupInformation;",
                " import org.apache.zeppelin.conf.ZeppelinConfiguration;",
                "+import org.apache.zeppelin.notebook.FileSystemStorage;",
                " import org.apache.zeppelin.notebook.Note;",
                "@@ -39,6 +40,3 @@ public class FileSystemNotebookRepo implements NotebookRepo {",
                "-  private Configuration hadoopConf;",
                "-  private ZeppelinConfiguration zConf;",
                "-  private boolean isSecurityEnabled = false;",
                "-  private FileSystem fs;",
                "+  private FileSystemStorage fs;",
                "   private Path notebookDir;",
                "@@ -46,34 +44,7 @@ public class FileSystemNotebookRepo implements NotebookRepo {",
                "   public FileSystemNotebookRepo(ZeppelinConfiguration zConf) throws IOException {",
                "-    this.zConf = zConf;",
                "-    this.hadoopConf = new Configuration();",
                "-",
                "-    this.isSecurityEnabled = UserGroupInformation.isSecurityEnabled();",
                "-    if (isSecurityEnabled) {",
                "-      String keytab = zConf.getString(",
                "-          ZeppelinConfiguration.ConfVars.ZEPPELIN_SERVER_KERBEROS_KEYTAB);",
                "-      String principal = zConf.getString(",
                "-          ZeppelinConfiguration.ConfVars.ZEPPELIN_SERVER_KERBEROS_PRINCIPAL);",
                "-      if (StringUtils.isBlank(keytab) || StringUtils.isBlank(principal)) {",
                "-        throw new IOException(\"keytab and principal can not be empty, keytab: \" + keytab",
                "-            + \", principal: \" + principal);",
                "-      }",
                "-      UserGroupInformation.loginUserFromKeytab(principal, keytab);",
                "-    }",
                "+    this.fs = FileSystemStorage.get(zConf);",
                "+    this.notebookDir = this.fs.makeQualified(new Path(zConf.getNotebookDir()));",
                "+    LOGGER.info(\"Using folder {} to store notebook\", notebookDir);",
                "+    this.fs.tryMkDir(notebookDir);",
                "-    try {",
                "-      this.fs = FileSystem.get(new URI(zConf.getNotebookDir()), new Configuration());",
                "-      LOGGER.info(\"Creating FileSystem: \" + this.fs.getClass().getCanonicalName());",
                "-      this.notebookDir = fs.makeQualified(new Path(zConf.getNotebookDir()));",
                "-      LOGGER.info(\"Using folder {} to store notebook\", notebookDir);",
                "-    } catch (URISyntaxException e) {",
                "-      throw new IOException(e);",
                "-    }",
                "-    if (!fs.exists(notebookDir)) {",
                "-      fs.mkdirs(notebookDir);",
                "-      LOGGER.info(\"Create notebook dir {} in hdfs\", notebookDir.toString());",
                "-    }",
                "-    if (fs.isFile(notebookDir)) {",
                "-      throw new IOException(\"notebookDir {} is file instead of directory, please remove it or \" +",
                "-          \"specify another directory\");",
                "-    }",
                "   }",
                "@@ -82,13 +53,9 @@ public class FileSystemNotebookRepo implements NotebookRepo {",
                "   public List<NoteInfo> list(AuthenticationInfo subject) throws IOException {",
                "-    return callHdfsOperation(new HdfsOperation<List<NoteInfo>>() {",
                "-      @Override",
                "-      public List<NoteInfo> call() throws IOException {",
                "-        List<NoteInfo> noteInfos = new ArrayList<>();",
                "-        for (FileStatus status : fs.globStatus(new Path(notebookDir, \"*/note.json\"))) {",
                "-          NoteInfo noteInfo = new NoteInfo(status.getPath().getParent().getName(), \"\", null);",
                "-          noteInfos.add(noteInfo);",
                "-        }",
                "-        return noteInfos;",
                "-      }",
                "-    });",
                "+    List<Path> notePaths = fs.list(new Path(notebookDir, \"*/note.json\"));",
                "+    List<NoteInfo> noteInfos = new ArrayList<>();",
                "+    for (Path path : notePaths) {",
                "+      NoteInfo noteInfo = new NoteInfo(path.getParent().getName(), \"\", null);",
                "+      noteInfos.add(noteInfo);",
                "+    }",
                "+    return noteInfos;",
                "   }",
                "@@ -97,13 +64,5 @@ public class FileSystemNotebookRepo implements NotebookRepo {",
                "   public Note get(final String noteId, AuthenticationInfo subject) throws IOException {",
                "-    return callHdfsOperation(new HdfsOperation<Note>() {",
                "-      @Override",
                "-      public Note call() throws IOException {",
                "-        Path notePath = new Path(notebookDir.toString() + \"/\" + noteId + \"/note.json\");",
                "-        LOGGER.debug(\"Read note from file: \" + notePath);",
                "-        ByteArrayOutputStream noteBytes = new ByteArrayOutputStream();",
                "-        IOUtils.copyBytes(fs.open(notePath), noteBytes, hadoopConf);",
                "-        return Note.fromJson(new String(noteBytes.toString(",
                "-            zConf.getString(ZeppelinConfiguration.ConfVars.ZEPPELIN_ENCODING))));",
                "-      }",
                "-    });",
                "+    String content = this.fs.readFile(",
                "+        new Path(notebookDir.toString() + \"/\" + noteId + \"/note.json\"));",
                "+    return Note.fromJson(content);",
                "   }",
                "@@ -112,19 +71,5 @@ public class FileSystemNotebookRepo implements NotebookRepo {",
                "   public void save(final Note note, AuthenticationInfo subject) throws IOException {",
                "-    callHdfsOperation(new HdfsOperation<Void>() {",
                "-      @Override",
                "-      public Void call() throws IOException {",
                "-        Path notePath = new Path(notebookDir.toString() + \"/\" + note.getId() + \"/note.json\");",
                "-        Path tmpNotePath = new Path(notebookDir.toString() + \"/\" + note.getId() + \"/.note.json\");",
                "-        LOGGER.debug(\"Saving note to file: \" + notePath);",
                "-        if (fs.exists(tmpNotePath)) {",
                "-          fs.delete(tmpNotePath, true);",
                "-        }",
                "-        InputStream in = new ByteArrayInputStream(note.toJson().getBytes(",
                "-            zConf.getString(ZeppelinConfiguration.ConfVars.ZEPPELIN_ENCODING)));",
                "-        IOUtils.copyBytes(in, fs.create(tmpNotePath), hadoopConf);",
                "-        fs.delete(notePath, true);",
                "-        fs.rename(tmpNotePath, notePath);",
                "-        return null;",
                "-      }",
                "-    });",
                "+    this.fs.writeFile(note.toJson(),",
                "+        new Path(notebookDir.toString() + \"/\" + note.getId() + \"/note.json\"),",
                "+        true);",
                "   }",
                "@@ -133,10 +78,3 @@ public class FileSystemNotebookRepo implements NotebookRepo {",
                "   public void remove(final String noteId, AuthenticationInfo subject) throws IOException {",
                "-    callHdfsOperation(new HdfsOperation<Void>() {",
                "-      @Override",
                "-      public Void call() throws IOException {",
                "-        Path noteFolder = new Path(notebookDir.toString() + \"/\" + noteId);",
                "-        fs.delete(noteFolder, true);",
                "-        return null;",
                "-      }",
                "-    });",
                "+    this.fs.delete(new Path(notebookDir.toString() + \"/\" + noteId));",
                "   }",
                "@@ -184,24 +122,2 @@ public class FileSystemNotebookRepo implements NotebookRepo {",
                "   }",
                "-",
                "-  private interface HdfsOperation<T> {",
                "-    T call() throws IOException;",
                "-  }",
                "-",
                "-  public synchronized <T> T callHdfsOperation(final HdfsOperation<T> func) throws IOException {",
                "-    if (isSecurityEnabled) {",
                "-      UserGroupInformation.getLoginUser().reloginFromKeytab();",
                "-      try {",
                "-        return UserGroupInformation.getCurrentUser().doAs(new PrivilegedExceptionAction<T>() {",
                "-          @Override",
                "-          public T run() throws Exception {",
                "-            return func.call();",
                "-          }",
                "-        });",
                "-      } catch (InterruptedException e) {",
                "-        throw new IOException(e);",
                "-      }",
                "-    } else {",
                "-      return func.call();",
                "-    }",
                "-  }",
                " }",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/util/ReflectionUtils.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/util/ReflectionUtils.java",
                "new file mode 100644",
                "index 000000000..ca09992a7",
                "--- /dev/null",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/util/ReflectionUtils.java",
                "@@ -0,0 +1,99 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.zeppelin.util;",
                "+",
                "+import java.io.IOException;",
                "+import java.lang.reflect.Constructor;",
                "+import java.lang.reflect.InvocationTargetException;",
                "+",
                "+",
                "+/**",
                "+ * Utility class for creating instances via java reflection.",
                "+ *",
                "+ */",
                "+public class ReflectionUtils {",
                "+",
                "+  public static Class<?> getClazz(String className) throws IOException {",
                "+    Class clazz = null;",
                "+    try {",
                "+      clazz = Class.forName(className, true, Thread.currentThread().getContextClassLoader());",
                "+    } catch (ClassNotFoundException e) {",
                "+      throw new IOException(\"Unable to load class: \" + className, e);",
                "+    }",
                "+",
                "+    return clazz;",
                "+  }",
                "+",
                "+  private static <T> T getNewInstance(Class<T> clazz) throws IOException {",
                "+    T instance;",
                "+    try {",
                "+      instance = clazz.newInstance();",
                "+    } catch (InstantiationException e) {",
                "+      throw new IOException(",
                "+          \"Unable to instantiate class with 0 arguments: \" + clazz.getName(), e);",
                "+    } catch (IllegalAccessException e) {",
                "+      throw new IOException(",
                "+          \"Unable to instantiate class with 0 arguments: \" + clazz.getName(), e);",
                "+    }",
                "+    return instance;",
                "+  }",
                "+",
                "+  private static <T> T getNewInstance(Class<T> clazz,",
                "+                                      Class<?>[] parameterTypes,",
                "+                                      Object[] parameters)",
                "+      throws IOException {",
                "+    T instance;",
                "+    try {",
                "+      Constructor<T> constructor = clazz.getConstructor(parameterTypes);",
                "+      instance = constructor.newInstance(parameters);",
                "+    } catch (InstantiationException e) {",
                "+      throw new IOException(",
                "+          \"Unable to instantiate class with \" + parameters.length + \" arguments: \" +",
                "+              clazz.getName(), e);",
                "+    } catch (IllegalAccessException e) {",
                "+      throw new IOException(",
                "+          \"Unable to instantiate class with \" + parameters.length + \" arguments: \" +",
                "+              clazz.getName(), e);",
                "+    } catch (NoSuchMethodException e) {",
                "+      throw new IOException(",
                "+          \"Unable to instantiate class with \" + parameters.length + \" arguments: \" +",
                "+              clazz.getName(), e);",
                "+    } catch (InvocationTargetException e) {",
                "+      throw new IOException(",
                "+          \"Unable to instantiate class with \" + parameters.length + \" arguments: \" +",
                "+              clazz.getName(), e);",
                "+    }",
                "+    return instance;",
                "+  }",
                "+",
                "+  public static <T> T createClazzInstance(String className) throws IOException {",
                "+    Class<?> clazz = getClazz(className);",
                "+    @SuppressWarnings(\"unchecked\")",
                "+    T instance = (T) getNewInstance(clazz);",
                "+    return instance;",
                "+  }",
                "+",
                "+  public static <T> T createClazzInstance(String className,",
                "+                                          Class<?>[] parameterTypes,",
                "+                                          Object[] parameters) throws IOException {",
                "+    Class<?> clazz = getClazz(className);",
                "+    T instance = (T) getNewInstance(clazz, parameterTypes, parameters);",
                "+    return instance;",
                "+  }",
                "+",
                "+",
                "+}"
            ],
            "changed_files": [
                "bin/interpreter.sh",
                "bin/stop-interpreter.sh",
                "bin/zeppelin-daemon.sh",
                "conf/zeppelin-site.xml.template",
                "spark/src/main/resources/interpreter-setting.json",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/launcher/InterpreterClient.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/launcher/InterpreterLaunchContext.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/launcher/InterpreterLauncher.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/recovery/RecoveryStorage.java",
                "zeppelin-server/notebook/.python.recovery.crc",
                "zeppelin-server/notebook/python.recovery",
                "zeppelin-server/pom.xml",
                "zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroup.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/ShellScriptLauncher.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/SparkInterpreterLauncher.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/recovery/FileSystemRecoveryStorage.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/recovery/NullRecoveryStorage.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/recovery/StopInterpreter.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterManagedProcess.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcess.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterRunningProcess.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/FileSystemStorage.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/FileSystemNotebookRepo.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/util/ReflectionUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3051": ""
            },
            "ghissue_refs": {
                "2668": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3051",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2668",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "246f696719193dc8a3274f3f9e7ebc912ab3141a",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1512495827,
            "hunks": 1,
            "message": "[ZEPPELIN-3101] updated network label, added link to network display in index.md ### What is this PR for? The docs index must show the reference to the network visualization as for the the other types ### What type of PR is it? [Improvement] ### Todos * [x] - Add missing link ### What is the Jira issue? [ZEPPELIN-3101](https://issues.apache.org/jira/projects/ZEPPELIN/issues/ZEPPELIN-3101) ### How should this be tested? 1. cd `docs/` 2. build: `bundle exec jekyll build --safe` 3. check the link is present ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? no * Is there breaking changes for older versions? no * Does this needs documentation? no Author: Andrea Santurbano <santand@gmail.com> Closes #2702 from conker84/graph-docs and squashes the following commits: 58d58cc4c [Andrea Santurbano] updated network label, added link to network display in index.md",
            "diff": [
                "diff --git a/docs/_includes/themes/zeppelin/_navigation.html b/docs/_includes/themes/zeppelin/_navigation.html",
                "index bccb5b469..95d83ea27 100644",
                "--- a/docs/_includes/themes/zeppelin/_navigation.html",
                "+++ b/docs/_includes/themes/zeppelin/_navigation.html",
                "@@ -46,3 +46,3 @@",
                "                 <li><a href=\"{{BASE_PATH}}/usage/display_system/basic.html#table\">Table Display</a></li>",
                "-                <li><a href=\"{{BASE_PATH}}/usage/display_system/basic.html#network\">Network</a></li>",
                "+                <li><a href=\"{{BASE_PATH}}/usage/display_system/basic.html#network\">Network Display</a></li>",
                "                 <li><a href=\"{{BASE_PATH}}/usage/display_system/angular_backend.html\">Angular Display using Backend API</a></li>"
            ],
            "changed_files": [
                "docs/_includes/themes/zeppelin/_navigation.html"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3101": ""
            },
            "ghissue_refs": {
                "2702": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3101",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2702",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3b1a03f380437b22884f93dbdb3ee2b9c116fbc2",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1510109790,
            "hunks": 21,
            "message": "ZEPPELIN-3039. Interpreter logs are mixed together ### What is this PR for? This is a bug introduced by ZEPPELIN-2685. Wrong interpreter setting name is passed. This PR fix this issue and also made some code refactoring. After this PR, the log file name is ${ZEPPELIN_LOG_DIR}/zeppelin-interpreter-${INTERPRETER_SETTING_NAME}-${ZEPPELIN_IDENT_STRING}-${HOSTNAME}.log ### What type of PR is it? [Bug Fix] ### Todos * [ ] - Task ### What is the Jira issue? * https://issues.apache.org/jira/browse/ZEPPELIN-3039 ### How should this be tested? Create 2 jdbc interpreters: hive & hive2,and launch them both. There would be 2 log files generated. * zeppelin-interpreter-hive-jzhang-HW12527.log * zeppelin-interpreter-hive2-jzhang-HW12527.log ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Jeff Zhang <zjffdu@apache.org> Closes #2656 from zjffdu/ZEPPELIN-3039 and squashes the following commits: 2745151 [Jeff Zhang] ZEPPELIN-3039. Interpreter logs are mixed together",
            "diff": [
                "diff --git a/bin/interpreter.sh b/bin/interpreter.sh",
                "index d27b0767b..4e983ecb9 100755",
                "--- a/bin/interpreter.sh",
                "+++ b/bin/interpreter.sh",
                "@@ -56,3 +56,3 @@ while getopts \"hc:p:d:l:v:u:g:\" o; do",
                "         g)",
                "-            INTERPRETER_GROUP_NAME=${OPTARG}",
                "+            INTERPRETER_SETTING_NAME=${OPTARG}",
                "             ;;",
                "@@ -93,6 +93,4 @@ INTERPRETER_ID=$(basename \"${INTERPRETER_DIR}\")",
                " ZEPPELIN_PID=\"${ZEPPELIN_PID_DIR}/zeppelin-interpreter-${INTERPRETER_ID}-${ZEPPELIN_IDENT_STRING}-${HOSTNAME}.pid\"",
                "-ZEPPELIN_LOGFILE=\"${ZEPPELIN_LOG_DIR}/zeppelin-interpreter-\"",
                "-if [[ ! -z \"$INTERPRETER_GROUP_NAME\" ]]; then",
                "-    ZEPPELIN_LOGFILE+=\"${INTERPRETER_GROUP_NAME}-\"",
                "-fi",
                "+ZEPPELIN_LOGFILE=\"${ZEPPELIN_LOG_DIR}/zeppelin-interpreter-${INTERPRETER_SETTING_NAME}-\"",
                "+",
                " if [[ ! -z \"$ZEPPELIN_IMPERSONATE_USER\" ]]; then",
                "@@ -100,3 +98,3 @@ if [[ ! -z \"$ZEPPELIN_IMPERSONATE_USER\" ]]; then",
                " fi",
                "-ZEPPELIN_LOGFILE+=\"${INTERPRETER_ID}-${ZEPPELIN_IDENT_STRING}-${HOSTNAME}.log\"",
                "+ZEPPELIN_LOGFILE+=\"${ZEPPELIN_IDENT_STRING}-${HOSTNAME}.log\"",
                " JAVA_INTP_OPTS+=\" -Dzeppelin.log.file=${ZEPPELIN_LOGFILE}\"",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/launcher/InterpreterLaunchContext.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/launcher/InterpreterLaunchContext.java",
                "index db8f8dd2f..9e253555a 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/launcher/InterpreterLaunchContext.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/launcher/InterpreterLaunchContext.java",
                "@@ -19,3 +19,2 @@ package org.apache.zeppelin.interpreter.launcher;",
                "-import org.apache.zeppelin.conf.ZeppelinConfiguration;",
                " import org.apache.zeppelin.interpreter.InterpreterOption;",
                "@@ -33,4 +32,5 @@ public class InterpreterLaunchContext {",
                "   private InterpreterRunner runner;",
                "-  private String interpreterGroupId;",
                "-  private String interpreterGroupName;",
                "+  private String interpreterSettingId;",
                "+  private String interpreterSettingGroup;",
                "+  private String interpreterSettingName;",
                "@@ -39,4 +39,5 @@ public class InterpreterLaunchContext {",
                "                                   InterpreterRunner runner,",
                "-                                  String interpreterGroupId,",
                "-                                  String interpreterGroupName) {",
                "+                                  String interpreterSettingId,",
                "+                                  String interpreterSettingGroup,",
                "+                                  String interpreterSettingName) {",
                "     this.properties = properties;",
                "@@ -44,4 +45,5 @@ public class InterpreterLaunchContext {",
                "     this.runner = runner;",
                "-    this.interpreterGroupId = interpreterGroupId;",
                "-    this.interpreterGroupName = interpreterGroupName;",
                "+    this.interpreterSettingId = interpreterSettingId;",
                "+    this.interpreterSettingGroup = interpreterSettingGroup;",
                "+    this.interpreterSettingName = interpreterSettingName;",
                "   }",
                "@@ -60,8 +62,12 @@ public class InterpreterLaunchContext {",
                "-  public String getInterpreterGroupId() {",
                "-    return interpreterGroupId;",
                "+  public String getInterpreterSettingId() {",
                "+    return interpreterSettingId;",
                "   }",
                "-  public String getInterpreterGroupName() {",
                "-    return interpreterGroupName;",
                "+  public String getInterpreterSettingGroup() {",
                "+    return interpreterSettingGroup;",
                "+  }",
                "+",
                "+  public String getInterpreterSettingName() {",
                "+    return interpreterSettingName;",
                "   }",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "index 944672cfd..26fcd8e93 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "@@ -673,3 +673,3 @@ public class InterpreterSetting {",
                "     InterpreterLaunchContext launchContext = new",
                "-        InterpreterLaunchContext(getJavaProperties(), option, interpreterRunner, id, group);",
                "+        InterpreterLaunchContext(getJavaProperties(), option, interpreterRunner, id, group, name);",
                "     RemoteInterpreterProcess process = (RemoteInterpreterProcess) launcher.launch(launchContext);",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/ShellScriptLauncher.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/ShellScriptLauncher.java",
                "index f419967de..0966ec543 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/ShellScriptLauncher.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/ShellScriptLauncher.java",
                "@@ -31,3 +31,2 @@ import java.util.HashMap;",
                " import java.util.Map;",
                "-import java.util.Properties;",
                "@@ -47,3 +46,3 @@ public class ShellScriptLauncher extends InterpreterLauncher {",
                "   public InterpreterClient launch(InterpreterLaunchContext context) {",
                "-    LOGGER.info(\"Launching Interpreter: \" + context.getInterpreterGroupName());",
                "+    LOGGER.info(\"Launching Interpreter: \" + context.getInterpreterSettingGroup());",
                "     this.properties = context.getProperties();",
                "@@ -51,3 +50,4 @@ public class ShellScriptLauncher extends InterpreterLauncher {",
                "     InterpreterRunner runner = context.getRunner();",
                "-    String groupName = context.getInterpreterGroupName();",
                "+    String groupName = context.getInterpreterSettingGroup();",
                "+    String name = context.getInterpreterSettingName();",
                "@@ -63,3 +63,3 @@ public class ShellScriptLauncher extends InterpreterLauncher {",
                "       String localRepoPath = zConf.getInterpreterLocalRepoPath() + \"/\"",
                "-          + context.getInterpreterGroupId();",
                "+          + context.getInterpreterSettingId();",
                "       return new RemoteInterpreterManagedProcess(",
                "@@ -68,3 +68,3 @@ public class ShellScriptLauncher extends InterpreterLauncher {",
                "           zConf.getInterpreterDir() + \"/\" + groupName, localRepoPath,",
                "-          buildEnvFromProperties(), connectTimeout, groupName);",
                "+          buildEnvFromProperties(), connectTimeout, name);",
                "     }",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterManagedProcess.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterManagedProcess.java",
                "index 6e26e58f8..9f8f34624 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterManagedProcess.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterManagedProcess.java",
                "@@ -33,4 +33,2 @@ import org.apache.thrift.transport.TServerSocket;",
                " import org.apache.thrift.transport.TTransportException;",
                "-import org.apache.zeppelin.helium.ApplicationEventListener;",
                "-import org.apache.zeppelin.interpreter.InterpreterException;",
                " import org.apache.zeppelin.interpreter.thrift.CallbackInfo;",
                "@@ -65,3 +63,3 @@ public class RemoteInterpreterManagedProcess extends RemoteInterpreterProcess",
                "   private final String localRepoDir;",
                "-  private final String interpreterGroupName;",
                "+  private final String interpreterSettingName;",
                "@@ -76,3 +74,3 @@ public class RemoteInterpreterManagedProcess extends RemoteInterpreterProcess",
                "       int connectTimeout,",
                "-      String interpreterGroupName) {",
                "+      String interpreterSettingName) {",
                "     super(connectTimeout);",
                "@@ -83,3 +81,3 @@ public class RemoteInterpreterManagedProcess extends RemoteInterpreterProcess",
                "     this.localRepoDir = localRepoDir;",
                "-    this.interpreterGroupName = interpreterGroupName;",
                "+    this.interpreterSettingName = interpreterSettingName;",
                "   }",
                "@@ -169,3 +167,3 @@ public class RemoteInterpreterManagedProcess extends RemoteInterpreterProcess",
                "     cmdLine.addArgument(\"-g\", false);",
                "-    cmdLine.addArgument(interpreterGroupName, false);",
                "+    cmdLine.addArgument(interpreterSettingName, false);",
                "@@ -265,4 +263,4 @@ public class RemoteInterpreterManagedProcess extends RemoteInterpreterProcess",
                "   @VisibleForTesting",
                "-  public String getInterpreterGroupName() {",
                "-    return interpreterGroupName;",
                "+  public String getInterpreterSettingName() {",
                "+    return interpreterSettingName;",
                "   }"
            ],
            "changed_files": [
                "bin/interpreter.sh",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/launcher/InterpreterLaunchContext.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/ShellScriptLauncher.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterManagedProcess.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3039": "",
                "ZEPPELIN-2685": ""
            },
            "ghissue_refs": {
                "2656": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3039, ZEPPELIN-2685",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2656",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0956a7fa56050324d5749c1c8a999f33add2ec00",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1516343422,
            "hunks": 3,
            "message": "ZEPPELIN-3174. ZeppelinSparkClusterTest fails when using hadoop3 and jdk7 ### What is this PR for? Trivial change to make travis pass ### What type of PR is it? [Bug Fix] ### Todos * [ ] - Task ### What is the Jira issue? * https://issues.apache.org/jira/browse/ZEPPELIN-3174 ### How should this be tested? * Travis pass ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Jeff Zhang <zjffdu@apache.org> Closes #2734 from zjffdu/ZEPPELIN-3174 and squashes the following commits: d1c8a68 [Jeff Zhang] ZEPPELIN-3174. ZeppelinSparkClusterTest fails when using hadoop3 and jdk7",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index e1631435b..5f44dcdfd 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -95,3 +95,3 @@ matrix:",
                "     # Test spark module for 2.0.2 with scala 2.11",
                "-    - jdk: \"openjdk7\"",
                "+    - jdk: \"oraclejdk8\"",
                "       dist: trusty",
                "@@ -105,3 +105,3 @@ matrix:",
                "     # Test spark module for 1.6.3 with scala 2.11",
                "-    - jdk: \"openjdk7\"",
                "+    - jdk: \"oraclejdk8\"",
                "       dist: trusty",
                "@@ -113,3 +113,3 @@ matrix:",
                "       jdk: \"openjdk7\"",
                "-      env: PYTHON=\"2\" SCALA_VER=\"2.10\" SPARK_VER=\"1.6.1\" HADOOP_VER=\"2.6\" LIVY_VER=\"0.4.0-incubating\" PROFILE=\"-Pspark-1.6 -Phadoop 2-Phadoop-2.6 -Pscala-2.10\" BUILD_FLAG=\"install -am -DskipTests -DskipRat\" TEST_FLAG=\"verify -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-display,spark-dependencies,spark,python,livy\" TEST_PROJECTS=\"-Dtest=LivySQLInterpreterTest,org.apache.zeppelin.spark.PySpark*Test,org.apache.zeppelin.python.* -Dpyspark.test.exclude='' -DfailIfNoTests=false\"",
                "+      env: PYTHON=\"2\" SCALA_VER=\"2.10\" SPARK_VER=\"1.6.1\" HADOOP_VER=\"2.6\" LIVY_VER=\"0.4.0-incubating\" PROFILE=\"-Pspark-1.6 -Phadoop2 -Phadoop-2.6 -Pscala-2.10\" BUILD_FLAG=\"install -am -DskipTests -DskipRat\" TEST_FLAG=\"verify -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-display,spark-dependencies,spark,python,livy\" TEST_PROJECTS=\"-Dtest=LivySQLInterpreterTest,org.apache.zeppelin.spark.PySpark*Test,org.apache.zeppelin.python.* -Dpyspark.test.exclude='' -DfailIfNoTests=false\""
            ],
            "changed_files": [
                ".travis.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3174": ""
            },
            "ghissue_refs": {
                "2734": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3174",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2734",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "152538b7efc22e2c4c449f9fec4e524d92f8653c",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1508124503,
            "hunks": 5,
            "message": "ZEPPELIN-2990. Matplotlib sometimes fails in IPythonInterpreter ### What is this PR for? Trivial fix for matplotlib fail in `IPythonInterpreter`. Besides that, I also make some minor changes on zeppelin code to improve logging. ### What type of PR is it? [Bug Fix] ### Todos * [ ] - Task ### What is the Jira issue? * https://issues.apache.org/jira/browse/ZEPPELIN-2990 ### How should this be tested? UT is added. ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Jeff Zhang <zjffdu@apache.org> Closes #2622 from zjffdu/ZEPPELIN-2990 and squashes the following commits: 55e6f88 [Jeff Zhang] fix unit test 1e57afe [Jeff Zhang] ZEPPELIN-2990. Matplotlib sometimes fails in IPythonInterpreter",
            "diff": [
                "diff --git a/interpreter-parent/pom.xml b/interpreter-parent/pom.xml",
                "index 32bdc570e..cb0896546 100644",
                "--- a/interpreter-parent/pom.xml",
                "+++ b/interpreter-parent/pom.xml",
                "@@ -80,2 +80,10 @@",
                "           <executions>",
                "+            <execution>",
                "+              <id>copy-dependencies</id>",
                "+              <phase>none</phase>",
                "+              <configuration>",
                "+                <skip>true</skip>",
                "+              </configuration>",
                "+            </execution>",
                "+",
                "             <execution>",
                "diff --git a/python/src/main/java/org/apache/zeppelin/python/IPythonClient.java b/python/src/main/java/org/apache/zeppelin/python/IPythonClient.java",
                "index 05fe4ba47..ac1020498 100644",
                "--- a/python/src/main/java/org/apache/zeppelin/python/IPythonClient.java",
                "+++ b/python/src/main/java/org/apache/zeppelin/python/IPythonClient.java",
                "@@ -98,3 +98,3 @@ public class IPythonClient {",
                "               // add '\\n' when switch from image to text",
                "-              interpreterOutput.write(\"\\n\".getBytes());",
                "+              interpreterOutput.write(\"\\n%text \".getBytes());",
                "             }",
                "diff --git a/python/src/main/java/org/apache/zeppelin/python/IPythonInterpreter.java b/python/src/main/java/org/apache/zeppelin/python/IPythonInterpreter.java",
                "index 1c2ced501..77e45b99c 100644",
                "--- a/python/src/main/java/org/apache/zeppelin/python/IPythonInterpreter.java",
                "+++ b/python/src/main/java/org/apache/zeppelin/python/IPythonInterpreter.java",
                "@@ -288,2 +288,3 @@ public class IPythonInterpreter extends Interpreter implements ExecuteResultHand",
                "     }",
                "+    LOGGER.info(\"PYTHONPATH:\" + envs.get(\"PYTHONPATH\"));",
                "     return envs;",
                "diff --git a/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java b/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "index 1e7b74f31..8c13e2150 100644",
                "--- a/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "+++ b/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "@@ -359,3 +359,3 @@ public class NotebookServer extends WebSocketServlet",
                "     } catch (Exception e) {",
                "-      LOG.error(\"Can't handle message\", e);",
                "+      LOG.error(\"Can't handle message: \" + msg, e);",
                "     }",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterEventPoller.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterEventPoller.java",
                "index 35b6b6c84..abda81e03 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterEventPoller.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterEventPoller.java",
                "@@ -248,3 +248,2 @@ public class RemoteInterpreterEventPoller extends Thread {",
                "         }",
                "-        logger.debug(\"Event from remote process {}\", event.getType());",
                "       } catch (Exception e) {"
            ],
            "changed_files": [
                "interpreter-parent/pom.xml",
                "python/src/main/java/org/apache/zeppelin/python/IPythonClient.java",
                "python/src/main/java/org/apache/zeppelin/python/IPythonInterpreter.java",
                "zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterEventPoller.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-2990": ""
            },
            "ghissue_refs": {
                "2622": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-2990",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2622",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a82e3ec3a335863a30959cabbc3371169e2c1ce9",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1512025287,
            "hunks": 3,
            "message": "[ZEPPELIN-3075]Fix unqiue algo for the web side in pivot.js file. ### What is this PR for? unique() algorithm is not correct in pivot.js file. If the input is `[2, 3, 3, 3, 4, 5]` and the output will be `[2, 3, 3, 4, 5]`. The number `3` is still duplicated. ### What type of PR is it? [Bug Fix] ### Todos * [ ] - Task ### What is the Jira issue? https://issues.apache.org/jira/browse/ZEPPELIN-3075   [ZEPPELIN-3075] ### How should this be tested? This is very easy and no need test. ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: liguohui <liguohui@cmss.chinamobile.com> Closes #2685 from liguohuicmss/pivot-unqiue-algo and squashes the following commits: 2063175d5 [liguohui] delete the multi empty line ea582d95e [liguohui] delete some spaces at the end of the line 79c763a6b [liguohui] add a empty line 99cf93da9 [liguohui] Revert \"Chart field is also draggable and sortable in the 'keys', 'groups' and 'values'\" fdde39f52 [liguohui] add unit test for unique algo in pivot.js f99674724 [liguohui] Chart field is also draggable and sortable in the 'keys', 'groups' and 'values' 943e80a96 [liguohui] Fix unqiue algo for the web side in pivot.js file.",
            "diff": [
                "diff --git a/zeppelin-web/src/app/tabledata/pivot.js b/zeppelin-web/src/app/tabledata/pivot.js",
                "index 1c938ea82..a0f61b219 100644",
                "--- a/zeppelin-web/src/app/tabledata/pivot.js",
                "+++ b/zeppelin-web/src/app/tabledata/pivot.js",
                "@@ -91,2 +91,3 @@ export default class PivotTransformation extends Transformation {",
                "             list.splice(j, 1)",
                "+            j--",
                "           }",
                "diff --git a/zeppelin-web/src/app/tabledata/tabledata.test.js b/zeppelin-web/src/app/tabledata/tabledata.test.js",
                "index 7e41de4be..3de2fa3fb 100644",
                "--- a/zeppelin-web/src/app/tabledata/tabledata.test.js",
                "+++ b/zeppelin-web/src/app/tabledata/tabledata.test.js",
                "@@ -15,2 +15,3 @@",
                " import TableData from './tabledata.js'",
                "+import PivotTransformation from './pivot.js'",
                "@@ -41 +42,45 @@ describe('TableData build', function () {",
                " })",
                "+",
                "+describe('PivotTransformation build', function() {",
                "+  let pt",
                "+",
                "+  beforeEach(function () {",
                "+    console.log(PivotTransformation)",
                "+    pt = new PivotTransformation()",
                "+  })",
                "+",
                "+  it('check the result of keys, groups and values unique', function() {",
                "+    // set inited mock data",
                "+    let config = {",
                "+      common: {",
                "+        pivot: {",
                "+          keys: [{index: 4, name: '4'},",
                "+                 {index: 3, name: '3'},",
                "+                 {index: 4, name: '4'},",
                "+                 {index: 3, name: '3'},",
                "+                 {index: 3, name: '3'},",
                "+                 {index: 3, name: '3'},",
                "+                 {index: 3, name: '3'},",
                "+                 {index: 5, name: '5'}],",
                "+          groups: [],",
                "+          values: []",
                "+        }",
                "+      }",
                "+    }",
                "+    pt.tableDataColumns = [",
                "+        {index: 1, name: '1'},",
                "+        {index: 2, name: '2'},",
                "+        {index: 3, name: '3'},",
                "+        {index: 4, name: '4'},",
                "+        {index: 5, name: '5'}]",
                "+",
                "+    pt.setConfig(config)",
                "+",
                "+    pt.removeUnknown()",
                "+",
                "+    expect(config.common.pivot.keys.length).toBe(3)",
                "+    expect(config.common.pivot.keys[0].index).toBe(4)",
                "+    expect(config.common.pivot.keys[1].index).toBe(3)",
                "+    expect(config.common.pivot.keys[2].index).toBe(5)",
                "+  })",
                "+})"
            ],
            "changed_files": [
                "zeppelin-web/src/app/tabledata/pivot.js",
                "zeppelin-web/src/app/tabledata/tabledata.test.js"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3075": ""
            },
            "ghissue_refs": {
                "2685": "[ZEPPELIN-3075]Fix unqiue algo for the web side in pivot.js file. #2690 [ZEPPELIN-3091] Correct aggregation functionality in charts #2696"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3075",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2685",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "02daea1c596939592d0d7899600c4243759d5fbf",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1509603127,
            "hunks": 13,
            "message": "[ZEPPELIN-2965] Add code completion for livy interpreter ### What is this PR for? This PR adds code autocompletion feature to LivyInterpreter. Livy version 0.5 will have an auto completion API. ### What type of PR is it? Feature ### Todos * [ ] - Task ### What is the Jira issue? [ZEPPELIN-2965] https://issues.apache.org/jira/browse/ZEPPELIN-2965 ### How should this be tested? Pulled out server calls to a separate class to support proper unit-testing with mockito. ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Pascal Pellmont <github@ppo2.ch> Closes #2624 from pellmont/ZEPPELIN-2965 and squashes the following commits: aeabf86 [Pascal Pellmont] ZEPPELIN-2965 code completion for livy - added missing commas in interpreter-settings.json 55515a7 [Pascal Pellmont] ZEPPELIN-2965 code completion for livy - fixed checkstyle violation 103681e [Pascal Pellmont] Merge branch 'master' of github.com:apache/zeppelin into ZEPPELIN-2965 d35a90f [Pascal Pellmont] ZEPPELIN-2965 code completion for livy - added missing commas in interpreter-settings.json bbb48fb [Pascal Pellmont] ZEPPELIN-2965 code completion for livy - removed pointless try 2a21f3c [Pascal Pellmont] ZEPPELIN-2965 code completion for livy - no new session for code completion a460ae7 [Pascal Pellmont] ZEPPELIN-2965 code completion for livy - fixed typo 9fac364 [Pascal Pellmont] ZEPPELIN-2965 code completion for livy - TAB as completion key 32b3c6b [Pascal Pellmont] ZEPPELIN-2965 code completion for livy",
            "diff": [
                "diff --git a/livy/src/main/java/org/apache/zeppelin/livy/BaseLivyInterpreter.java b/livy/src/main/java/org/apache/zeppelin/livy/BaseLivyInterpreter.java",
                "index 2122f533f..0cdf4642d 100644",
                "--- a/livy/src/main/java/org/apache/zeppelin/livy/BaseLivyInterpreter.java",
                "+++ b/livy/src/main/java/org/apache/zeppelin/livy/BaseLivyInterpreter.java",
                "@@ -19,6 +19,21 @@ package org.apache.zeppelin.livy;",
                "-import com.google.gson.Gson;",
                "-import com.google.gson.GsonBuilder;",
                "-import com.google.gson.annotations.SerializedName;",
                "+import java.io.FileInputStream;",
                "+import java.io.IOException;",
                "+import java.security.KeyStore;",
                "+import java.security.Principal;",
                "+import java.util.ArrayList;",
                "+import java.util.Collections;",
                "+import java.util.HashMap;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+import java.util.Properties;",
                "+import java.util.Set;",
                "+import java.util.concurrent.ConcurrentHashMap;",
                "+import java.util.regex.Matcher;",
                "+import java.util.regex.Pattern;",
                "+",
                "+import javax.net.ssl.SSLContext;",
                "+",
                " import org.apache.commons.lang.StringUtils;",
                "+import org.apache.commons.lang.exception.ExceptionUtils;",
                " import org.apache.http.auth.AuthSchemeProvider;",
                "@@ -38,4 +53,9 @@ import org.apache.http.impl.client.HttpClientBuilder;",
                " import org.apache.http.impl.client.HttpClients;",
                "-import org.apache.commons.lang.exception.ExceptionUtils;",
                "-import org.apache.zeppelin.interpreter.*;",
                "+import org.apache.zeppelin.interpreter.Interpreter;",
                "+import org.apache.zeppelin.interpreter.InterpreterContext;",
                "+import org.apache.zeppelin.interpreter.InterpreterException;",
                "+import org.apache.zeppelin.interpreter.InterpreterResult;",
                "+import org.apache.zeppelin.interpreter.InterpreterResultMessage;",
                "+import org.apache.zeppelin.interpreter.InterpreterUtils;",
                "+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;",
                " import org.slf4j.Logger;",
                "@@ -43,5 +63,5 @@ import org.slf4j.LoggerFactory;",
                " import org.springframework.http.HttpEntity;",
                "-import org.springframework.http.MediaType;",
                " import org.springframework.http.HttpHeaders;",
                " import org.springframework.http.HttpMethod;",
                "+import org.springframework.http.MediaType;",
                " import org.springframework.http.ResponseEntity;",
                "@@ -53,16 +73,6 @@ import org.springframework.web.client.RestClientException;",
                " import org.springframework.web.client.RestTemplate;",
                "-import javax.net.ssl.SSLContext;",
                "-import java.io.FileInputStream;",
                "-import java.io.IOException;",
                "-import java.security.KeyStore;",
                "-import java.security.Principal;",
                "-import java.util.Collections;",
                "-import java.util.HashMap;",
                "-import java.util.List;",
                "-import java.util.Map;",
                "-import java.util.Properties;",
                "-import java.util.Set;",
                "-import java.util.concurrent.ConcurrentHashMap;",
                "-import java.util.regex.Matcher;",
                "-import java.util.regex.Pattern;",
                "+",
                "+import com.google.gson.Gson;",
                "+import com.google.gson.GsonBuilder;",
                "+import com.google.gson.annotations.SerializedName;",
                "@@ -206,2 +216,31 @@ public abstract class BaseLivyInterpreter extends Interpreter {",
                "+  @Override",
                "+  public List<InterpreterCompletion> completion(String buf, int cursor,",
                "+      InterpreterContext interpreterContext) {",
                "+    List<InterpreterCompletion> candidates = Collections.emptyList();",
                "+    try {",
                "+      candidates = callCompletion(new CompletionRequest(buf, getSessionKind(), cursor));",
                "+    } catch (SessionNotFoundException e) {",
                "+      LOGGER.warn(\"Livy session {} is expired. Will return empty list of candidates.\",",
                "+          sessionInfo.id);",
                "+    } catch (LivyException le) {",
                "+      logger.error(\"Failed to call code completions. Will return empty list of candidates\", le);",
                "+    }",
                "+    return candidates;",
                "+  }",
                "+",
                "+  private List<InterpreterCompletion> callCompletion(CompletionRequest req) throws LivyException {",
                "+    List<InterpreterCompletion> candidates = new ArrayList<>();",
                "+    try {",
                "+      CompletionResponse resp = CompletionResponse.fromJson(",
                "+          callRestAPI(\"/sessions/\" + sessionInfo.id + \"/completion\", \"POST\", req.toJson()));",
                "+      for (String candidate : resp.candidates) {",
                "+        candidates.add(new InterpreterCompletion(candidate, candidate, StringUtils.EMPTY));",
                "+      }",
                "+    } catch (APINotFoundException e) {",
                "+      logger.debug(\"completion api seems not to be available. (available from livy 0.5)\", e);",
                "+    }",
                "+    return candidates;",
                "+  }",
                "+",
                "   @Override",
                "@@ -776,2 +815,30 @@ public abstract class BaseLivyInterpreter extends Interpreter {",
                "+  static class CompletionRequest {",
                "+    public final String code;",
                "+    public final String kind;",
                "+    public final int cursor;",
                "+",
                "+    public CompletionRequest(String code, String kind, int cursor) {",
                "+      this.code = code;",
                "+      this.kind = kind;",
                "+      this.cursor = cursor;",
                "+    }",
                "+",
                "+    public String toJson() {",
                "+      return gson.toJson(this);",
                "+    }",
                "+  }",
                "+",
                "+  static class CompletionResponse {",
                "+    public final String[] candidates;",
                "+",
                "+    public CompletionResponse(String[] candidates) {",
                "+      this.candidates = candidates;",
                "+    }",
                "+",
                "+    public static CompletionResponse fromJson(String json) {",
                "+      return gson.fromJson(json, CompletionResponse.class);",
                "+    }",
                "+  }",
                "+",
                "   private static class LivyVersionResponse {",
                "diff --git a/livy/src/main/resources/interpreter-setting.json b/livy/src/main/resources/interpreter-setting.json",
                "index ac213ba27..2d7248756 100644",
                "--- a/livy/src/main/resources/interpreter-setting.json",
                "+++ b/livy/src/main/resources/interpreter-setting.json",
                "@@ -123,3 +123,4 @@",
                "       \"language\": \"scala\",",
                "-      \"editOnDblClick\": false",
                "+      \"editOnDblClick\": false,",
                "+      \"completionKey\": \"TAB\"",
                "     }",
                "@@ -162,3 +163,4 @@",
                "       \"language\": \"sql\",",
                "-      \"editOnDblClick\": false",
                "+      \"editOnDblClick\": false,",
                "+      \"completionKey\": \"TAB\"",
                "     }",
                "@@ -182,3 +184,4 @@",
                "       \"language\": \"python\",",
                "-      \"editOnDblClick\": false",
                "+      \"editOnDblClick\": false,",
                "+      \"completionKey\": \"TAB\"",
                "     }",
                "@@ -202,3 +205,4 @@",
                "       \"language\": \"python\",",
                "-      \"editOnDblClick\": false",
                "+      \"editOnDblClick\": false,",
                "+      \"completionKey\": \"TAB\"",
                "     }",
                "@@ -222,3 +226,4 @@",
                "       \"language\": \"r\",",
                "-      \"editOnDblClick\": false",
                "+      \"editOnDblClick\": false,",
                "+      \"completionKey\": \"TAB\"",
                "     }"
            ],
            "changed_files": [
                "livy/src/main/java/org/apache/zeppelin/livy/BaseLivyInterpreter.java",
                "livy/src/main/resources/interpreter-setting.json"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-2965": ""
            },
            "ghissue_refs": {
                "2624": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-2965",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2624",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c9df68cf5c0f0e9e3d7ba9cae3d64bdcea72f843",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1516768974,
            "hunks": 1,
            "message": "[HOTFIX] minor typo of ZEPPELIN-3181 ### What is this PR for? Trivial change of typo. ### What type of PR is it? [Hot Fix] ### Todos * [ ] - Task ### What is the Jira issue? ### How should this be tested? ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Jeff Zhang <zjffdu@apache.org> Closes #2743 from zjffdu/HotFix_ZEPPELIN-3181 and squashes the following commits: 06cbddc [Jeff Zhang] [HOTFIX] minor typo of ZEPPELIN-3181",
            "diff": [
                "diff --git a/bin/interpreter.sh b/bin/interpreter.sh",
                "index de0ec94ae..aa2564603 100755",
                "--- a/bin/interpreter.sh",
                "+++ b/bin/interpreter.sh",
                "@@ -117,3 +117,3 @@ if [[ \"${INTERPRETER_ID}\" == \"spark\" ]]; then",
                "-  // # run kinit",
                "+  # run kinit",
                "   if [[ -n \"${ZEPPELIN_SERVER_KERBEROS_KEYTAB}\" ]] && [[ -n \"${ZEPPELIN_SERVER_KERBEROS_PRINCIPAL}\" ]]; then"
            ],
            "changed_files": [
                "bin/interpreter.sh"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3181": ""
            },
            "ghissue_refs": {
                "2743": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3181",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2743",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "656fcf06045e0c36348f0b8ecf17de157ff66cb0",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1508992860,
            "hunks": 8,
            "message": "ZEPPELIN-3009. Don't iterate all the properties when getting property from ZeppelinConfiguration ### What is this PR for? Just read the zeppelin-site when ZeppelinConfiguration is constructed, and look for key when getting property from ZeppelinConfiguration instead of looping over properties each time at runtime. ### What type of PR is it? [Improvement ] ### Todos * [ ] - Task ### What is the Jira issue? * https://issues.apache.org/jira/browse/ZEPPELIN-3009 ### How should this be tested? * Unit tested is covered ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Jeff Zhang <zjffdu@apache.org> Closes #2726 from zjffdu/ZEPPELIN-3009 and squashes the following commits: 3fcf79e [Jeff Zhang] ZEPPELIN-3009. Don't iterate all the properties when getting property from ZeppelinConfiguration",
            "diff": [
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "index 77279edcd..748bb8d55 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "@@ -47,2 +47,4 @@ public class ZeppelinConfiguration extends XMLConfiguration {",
                "+  private Map<String, String> properties = new HashMap<>();",
                "+",
                "   public ZeppelinConfiguration(URL url) throws ConfigurationException {",
                "@@ -50,4 +52,20 @@ public class ZeppelinConfiguration extends XMLConfiguration {",
                "     load(url);",
                "+    initProperties();",
                "+  }",
                "+",
                "+  private void initProperties() {",
                "+    List<ConfigurationNode> nodes = getRootNode().getChildren();",
                "+    if (nodes == null || nodes.isEmpty()) {",
                "+      return;",
                "+    }",
                "+    for (ConfigurationNode p : nodes) {",
                "+      String name = (String) p.getChildren(\"name\").get(0).getValue();",
                "+      String value = (String) p.getChildren(\"value\").get(0).getValue();",
                "+      if (!StringUtils.isEmpty(name)) {",
                "+        properties.put(name, value);",
                "+      }",
                "+    }",
                "   }",
                "+",
                "   public ZeppelinConfiguration() {",
                "@@ -124,11 +142,5 @@ public class ZeppelinConfiguration extends XMLConfiguration {",
                "   private String getStringValue(String name, String d) {",
                "-    List<ConfigurationNode> properties = getRootNode().getChildren();",
                "-    if (properties == null || properties.isEmpty()) {",
                "-      return d;",
                "-    }",
                "-    for (ConfigurationNode p : properties) {",
                "-      if (p.getChildren(\"name\") != null && !p.getChildren(\"name\").isEmpty()",
                "-          && name.equals(p.getChildren(\"name\").get(0).getValue())) {",
                "-        return (String) p.getChildren(\"value\").get(0).getValue();",
                "-      }",
                "+    String value = this.properties.get(name);",
                "+    if (value != null) {",
                "+      return value;",
                "     }",
                "@@ -138,11 +150,5 @@ public class ZeppelinConfiguration extends XMLConfiguration {",
                "   private int getIntValue(String name, int d) {",
                "-    List<ConfigurationNode> properties = getRootNode().getChildren();",
                "-    if (properties == null || properties.isEmpty()) {",
                "-      return d;",
                "-    }",
                "-    for (ConfigurationNode p : properties) {",
                "-      if (p.getChildren(\"name\") != null && !p.getChildren(\"name\").isEmpty()",
                "-          && name.equals(p.getChildren(\"name\").get(0).getValue())) {",
                "-        return Integer.parseInt((String) p.getChildren(\"value\").get(0).getValue());",
                "-      }",
                "+    String value = this.properties.get(name);",
                "+    if (value != null) {",
                "+      return Integer.parseInt(value);",
                "     }",
                "@@ -152,11 +158,5 @@ public class ZeppelinConfiguration extends XMLConfiguration {",
                "   private long getLongValue(String name, long d) {",
                "-    List<ConfigurationNode> properties = getRootNode().getChildren();",
                "-    if (properties == null || properties.isEmpty()) {",
                "-      return d;",
                "-    }",
                "-    for (ConfigurationNode p : properties) {",
                "-      if (p.getChildren(\"name\") != null && !p.getChildren(\"name\").isEmpty()",
                "-          && name.equals(p.getChildren(\"name\").get(0).getValue())) {",
                "-        return Long.parseLong((String) p.getChildren(\"value\").get(0).getValue());",
                "-      }",
                "+    String value = this.properties.get(name);",
                "+    if (value != null) {",
                "+      return Long.parseLong(value);",
                "     }",
                "@@ -166,11 +166,5 @@ public class ZeppelinConfiguration extends XMLConfiguration {",
                "   private float getFloatValue(String name, float d) {",
                "-    List<ConfigurationNode> properties = getRootNode().getChildren();",
                "-    if (properties == null || properties.isEmpty()) {",
                "-      return d;",
                "-    }",
                "-    for (ConfigurationNode p : properties) {",
                "-      if (p.getChildren(\"name\") != null && !p.getChildren(\"name\").isEmpty()",
                "-          && name.equals(p.getChildren(\"name\").get(0).getValue())) {",
                "-        return Float.parseFloat((String) p.getChildren(\"value\").get(0).getValue());",
                "-      }",
                "+    String value = this.properties.get(name);",
                "+    if (value != null) {",
                "+      return Float.parseFloat(value);",
                "     }",
                "@@ -180,11 +174,5 @@ public class ZeppelinConfiguration extends XMLConfiguration {",
                "   private boolean getBooleanValue(String name, boolean d) {",
                "-    List<ConfigurationNode> properties = getRootNode().getChildren();",
                "-    if (properties == null || properties.isEmpty()) {",
                "-      return d;",
                "-    }",
                "-    for (ConfigurationNode p : properties) {",
                "-      if (p.getChildren(\"name\") != null && !p.getChildren(\"name\").isEmpty()",
                "-          && name.equals(p.getChildren(\"name\").get(0).getValue())) {",
                "-        return Boolean.parseBoolean((String) p.getChildren(\"value\").get(0).getValue());",
                "-      }",
                "+    String value = this.properties.get(name);",
                "+    if (value != null) {",
                "+      return Boolean.parseBoolean(value);",
                "     }"
            ],
            "changed_files": [
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3009": ""
            },
            "ghissue_refs": {
                "2726": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3009",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2726",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8a1becd9fe0e81e0f4e8237cf8cf99fae620d090",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1509550417,
            "hunks": 1,
            "message": "ZEPPELIN-3023 Apache Ignite version is updated up to 2.3.0 ### What is this PR for? Apache Ignite version is updated up to 2.3.0 for Ignite Interpreter. ### What type of PR is it? [Improvement] ### What is the Jira issue? https://issues.apache.org/jira/browse/ZEPPELIN-3023 ### How should this be tested? * Unit-tests. Author: Andrey Gura <agura@apache.org> Closes #2642 from agura/zeppelin-3023 and squashes the following commits: 993032e [Andrey Gura] ZEPPELIN-3023 Apache Ignite version is updated up to 2.3.0",
            "diff": [
                "diff --git a/ignite/pom.xml b/ignite/pom.xml",
                "index ccbd37d8e..5ce6e3729 100644",
                "--- a/ignite/pom.xml",
                "+++ b/ignite/pom.xml",
                "@@ -35,3 +35,3 @@",
                "     <interpreter.name>ignite</interpreter.name>",
                "-    <ignite.version>2.2.0</ignite.version>",
                "+    <ignite.version>2.3.0</ignite.version>",
                "   </properties>"
            ],
            "changed_files": [
                "ignite/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3023": ""
            },
            "ghissue_refs": {
                "2642": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3023",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2642",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2674291d6835f57b1132474e7e91fa3926b2973f",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1509386817,
            "hunks": 3,
            "message": "[ZEPPELIN-3017] fix Spark version in Dockerfiles ### What is this PR for? The PR updates Spark version to the current 2.1.2, since the one which is present now (2.1.1) is not available anymore. ### What type of PR is it? Fix ### What is the Jira issue? https://issues.apache.org/jira/browse/ZEPPELIN-3017 ### How should this be tested? manually Author: mark91 <marcogaido91@gmail.com> Closes #2636 from mgaido91/ZEPPELIN-3017 and squashes the following commits: b3cfb44 [mark91] [ZEPPELIN-3017] fix Spark version in Dockerfiles",
            "diff": [
                "diff --git a/scripts/docker/spark-cluster-managers/spark_mesos/Dockerfile b/scripts/docker/spark-cluster-managers/spark_mesos/Dockerfile",
                "index f47b16d8f..0afda575c 100644",
                "--- a/scripts/docker/spark-cluster-managers/spark_mesos/Dockerfile",
                "+++ b/scripts/docker/spark-cluster-managers/spark_mesos/Dockerfile",
                "@@ -17,3 +17,3 @@ FROM centos:centos6",
                " ENV SPARK_PROFILE 2.1",
                "-ENV SPARK_VERSION 2.1.1",
                "+ENV SPARK_VERSION 2.1.2",
                " ENV HADOOP_PROFILE 2.7",
                "diff --git a/scripts/docker/spark-cluster-managers/spark_standalone/Dockerfile b/scripts/docker/spark-cluster-managers/spark_standalone/Dockerfile",
                "index 19391d0ed..8bf0f8d36 100644",
                "--- a/scripts/docker/spark-cluster-managers/spark_standalone/Dockerfile",
                "+++ b/scripts/docker/spark-cluster-managers/spark_standalone/Dockerfile",
                "@@ -17,3 +17,3 @@ FROM centos:centos6",
                " ENV SPARK_PROFILE 2.1",
                "-ENV SPARK_VERSION 2.1.1",
                "+ENV SPARK_VERSION 2.1.2",
                " ENV HADOOP_PROFILE 2.7",
                "diff --git a/scripts/docker/spark-cluster-managers/spark_yarn_cluster/Dockerfile b/scripts/docker/spark-cluster-managers/spark_yarn_cluster/Dockerfile",
                "index 116d4c3f8..cbbda20dc 100644",
                "--- a/scripts/docker/spark-cluster-managers/spark_yarn_cluster/Dockerfile",
                "+++ b/scripts/docker/spark-cluster-managers/spark_yarn_cluster/Dockerfile",
                "@@ -17,3 +17,3 @@ FROM centos:centos6",
                " ENV SPARK_PROFILE 2.1",
                "-ENV SPARK_VERSION 2.1.1",
                "+ENV SPARK_VERSION 2.1.2",
                " ENV HADOOP_PROFILE 2.7"
            ],
            "changed_files": [
                "scripts/docker/spark-cluster-managers/spark_mesos/Dockerfile",
                "scripts/docker/spark-cluster-managers/spark_standalone/Dockerfile",
                "scripts/docker/spark-cluster-managers/spark_yarn_cluster/Dockerfile"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3017": ""
            },
            "ghissue_refs": {
                "2636": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3017",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2636",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "49786a7717bec0345aaac895d09736b6c6605610",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1516090600,
            "hunks": 6,
            "message": "ZEPPELIN-3137. Improve code style check ### What is this PR for? Although currently zeppelin has code check style, it is very weak. Such as unused import is not detected. The is the first PR for adding code style check. It just improve the code style check file , but just disable it for now. I have created subtask under ZEPPELIN-3137 for each module.  This `checkstyle.xml` is from spark project. I think code style of spark is also fit for zeppelin project, just remove some spark related content in this `checkstyle.xml` ### What type of PR is it? [ Improvement] ### Todos * [ ] - Task ### What is the Jira issue? * https://issues.apache.org/jira/browse/ZEPPELIN-3137 ### How should this be tested? * Travis build pass ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Jeff Zhang <zjffdu@apache.org> Closes #2727 from zjffdu/ZEPPELIN-3137 and squashes the following commits: a41bd32 [Jeff Zhang] address comment 9935281 [Jeff Zhang] ZEPPELIN-3137. Add code style check",
            "diff": [
                "diff --git a/_tools/checkstyle.xml b/_tools/checkstyle.xml",
                "index cdb8fbf30..d7eaaf943 100644",
                "--- a/_tools/checkstyle.xml",
                "+++ b/_tools/checkstyle.xml",
                "@@ -60,6 +60,7 @@ limitations under the License.",
                "     </module>",
                "-    <!-- <module name=\"ImportOrder\"> Checks for out of order import statements",
                "-      <property name=\"severity\" value=\"warning\"/> <property name=\"groups\" value=\"com.google,android,junit,net,org,java,javax\"/>",
                "+    <module name=\"ImportOrder\"> Checks for out of order import statements",
                "+      <property name=\"severity\" value=\"warning\"/> <property name=\"groups\" value=\"com.google,junit,net,org,java,javax,*,org.apache.zeppelin\"/>",
                "       This ensures that static imports go first <property name=\"option\" value=\"top\"/>",
                "-      <property name=\"tokens\" value=\"STATIC_IMPORT, IMPORT\"/> </module> -->",
                "+      <property name=\"tokens\" value=\"STATIC_IMPORT, IMPORT\"/>",
                "+    </module>",
                "     <!-- JAVADOC CHECKS -->",
                "@@ -281,2 +282,11 @@ limitations under the License.",
                "     </module>",
                "+",
                "+    <module name=\"EmptyCatchBlock\">",
                "+      <property name=\"exceptionVariableName\" value=\"expected\"/>",
                "+    </module>",
                "+    <module name=\"CommentsIndentation\"/>",
                "+    <module name=\"UnusedImports\"/>",
                "+    <module name=\"RedundantImport\"/>",
                "+    <module name=\"RedundantModifier\"/>",
                "+    <module name=\"AvoidStarImport\"/>",
                "   </module>",
                "diff --git a/pom.xml b/pom.xml",
                "index 880bea636..725db415c 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -387,5 +387,13 @@",
                "         <artifactId>maven-checkstyle-plugin</artifactId>",
                "+        <version>2.17</version>",
                "         <configuration>",
                "+          <skip>true</skip>",
                "+          <failOnViolation>false</failOnViolation>",
                "+          <includeTestSourceDirectory>true</includeTestSourceDirectory>",
                "+          <sourceDirectories>${basedir}/src/main/java,${basedir}/src/main/scala</sourceDirectories>",
                "+          <testSourceDirectory>${basedir}/src/test/java</testSourceDirectory>",
                "           <configLocation>_tools/checkstyle.xml</configLocation>",
                "-          <enableRSS>false</enableRSS>",
                "+          <outputFile>${basedir}/target/checkstyle-output.xml</outputFile>",
                "+          <inputEncoding>${project.build.sourceEncoding}</inputEncoding>",
                "+          <outputEncoding>${project.reporting.outputEncoding}</outputEncoding>",
                "         </configuration>"
            ],
            "changed_files": [
                "_tools/checkstyle.xml",
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3137": ""
            },
            "ghissue_refs": {
                "2727": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3137",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2727",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d762b5288536201d8a2964891c556efaa1bae867",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1500267729,
            "hunks": 83,
            "message": "ZEPPELIN-3111. Refactor SparkInterpreter ### What is this PR for? This is for the refactoring of SparkInterpreter. See design doc. https://docs.google.com/document/d/1AfGg3aGXonDyri1jrP4MMFT4Y4j3wpN1t8kL-GAKSUc/edit?usp=sharing ### What type of PR is it? [Refactoring] ### Todos * [ ] - Task ### What is the Jira issue? * https://issues.apache.org/jira/browse/ZEPPELIN-3111 ### How should this be tested? * Unit test is added. ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Jeff Zhang <zjffdu@apache.org> Closes #2709 from zjffdu/ZEPPELIN-3111 and squashes the following commits: aae4b09 [Jeff Zhang] ZEPPELIN-3111. Refactor SparkInterpreter",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index 677209b85..ce935b2c7 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -70,3 +70,3 @@ matrix:",
                "         firefox: \"31.0\"",
                "-      env: PYTHON=\"3\" SCALA_VER=\"2.11\" SPARK_VER=\"2.2.0\" HADOOP_VER=\"2.6\" PROFILE=\"-Pspark-2.2 -Pweb-ci -Pscalding -Phelium-dev -Pexamples -Pscala-2.11\" BUILD_FLAG=\"package -Pbuild-distr -DskipRat\" TEST_FLAG=\"verify -Pusing-packaged-distr -DskipRat\" MODULES=\"-pl ${INTERPRETERS}\" TEST_PROJECTS=\"-Dtests.to.exclude=**/ZeppelinSparkClusterTest.java,**/org.apache.zeppelin.spark.*,**/HeliumApplicationFactoryTest.java -DfailIfNoTests=false\"",
                "+      env: PYTHON=\"3\" SCALA_VER=\"2.11\" SPARK_VER=\"2.2.0\" HADOOP_VER=\"2.6\" PROFILE=\"-Pspark-2.2 -Pweb-ci -Pscalding -Phelium-dev -Pexamples -Pscala-2.11\" BUILD_FLAG=\"package -Pbuild-distr -DskipRat\" TEST_FLAG=\"verify -Pusing-packaged-distr -DskipRat\" MODULES=\"-pl ${INTERPRETERS}\" TEST_PROJECTS=\"-Dtests.to.exclude=**/ZeppelinSparkClusterTest.java,**/org/apache/zeppelin/spark/*,**/HeliumApplicationFactoryTest.java -DfailIfNoTests=false\"",
                "@@ -84,11 +84,11 @@ matrix:",
                "-    # Test spark module for 2.2.0 with scala 2.11, livy",
                "+    # Test spark module for 2.2.0 with scala 2.11",
                "     - jdk: \"oraclejdk8\"",
                "       dist: trusty",
                "-      env: PYTHON=\"2\" SCALA_VER=\"2.11\" SPARK_VER=\"2.2.0\" HADOOP_VER=\"2.6\" PROFILE=\"-Pweb-ci -Pspark-2.2 -Phadoop3 -Phadoop-2.6 -Pscala-2.11\" SPARKR=\"true\" BUILD_FLAG=\"install -DskipTests -DskipRat\" TEST_FLAG=\"test -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-zengine,zeppelin-server,zeppelin-display,spark-dependencies,spark,python,livy\" TEST_PROJECTS=\"-Dtest=ZeppelinSparkClusterTest,org.apache.zeppelin.spark.*,org.apache.zeppelin.livy.* -DfailIfNoTests=false\"",
                "+      env: PYTHON=\"2\" SCALA_VER=\"2.11\" SPARK_VER=\"2.2.0\" HADOOP_VER=\"2.6\" PROFILE=\"-Pweb-ci -Pspark-2.2 -Phadoop3 -Phadoop-2.6 -Pscala-2.11\" SPARKR=\"true\" BUILD_FLAG=\"install -DskipTests -DskipRat\" TEST_FLAG=\"test -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-zengine,zeppelin-server,zeppelin-display,spark/interpreter,spark/scala-2.10,spark/scala-2.11,spark/spark-dependencies,python\" TEST_PROJECTS=\"-Dtest=ZeppelinSparkClusterTest,org.apache.zeppelin.spark.*,org.apache.zeppelin.livy.* -DfailIfNoTests=false\"",
                "-    # Test spark module for 2.1.0 with scala 2.11, livy",
                "+    # Test spark module for 2.1.0 with scala 2.11",
                "     - jdk: \"openjdk7\"",
                "       dist: trusty",
                "-      env: PYTHON=\"2\" SCALA_VER=\"2.11\" SPARK_VER=\"2.1.0\" HADOOP_VER=\"2.6\" PROFILE=\"-Pweb-ci -Pspark-2.1 -Phadoop2 -Phadoop-2.6 -Pscala-2.11\" SPARKR=\"true\" BUILD_FLAG=\"install -DskipTests -DskipRat\" TEST_FLAG=\"test -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-zengine,zeppelin-server,zeppelin-display,spark-dependencies,spark,python,livy\" TEST_PROJECTS=\"-Dtest=ZeppelinSparkClusterTest,org.apache.zeppelin.spark.*,org.apache.zeppelin.livy.* -DfailIfNoTests=false\"",
                "+      env: PYTHON=\"2\" SCALA_VER=\"2.11\" SPARK_VER=\"2.1.0\" HADOOP_VER=\"2.6\" PROFILE=\"-Pweb-ci -Pspark-2.1 -Phadoop2 -Phadoop-2.6 -Pscala-2.11\" SPARKR=\"true\" BUILD_FLAG=\"install -DskipTests -DskipRat\" TEST_FLAG=\"test -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-zengine,zeppelin-server,zeppelin-display,spark/interpreter,spark/scala-2.10,spark/scala-2.11,spark/spark-dependencies,python\" TEST_PROJECTS=\"-Dtest=ZeppelinSparkClusterTest,org.apache.zeppelin.spark.*,org.apache.zeppelin.livy.* -DfailIfNoTests=false\"",
                "@@ -97,8 +97,8 @@ matrix:",
                "       dist: trusty",
                "-      env: PYTHON=\"2\" SCALA_VER=\"2.11\" SPARK_VER=\"2.0.2\" HADOOP_VER=\"2.6\" PROFILE=\"-Pweb-ci -Pspark-2.0 -Phadoop3 -Phadoop-2.6 -Pscala-2.11\" SPARKR=\"true\" BUILD_FLAG=\"install -DskipTests -DskipRat\" TEST_FLAG=\"test -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-zengine,zeppelin-server,zeppelin-display,spark-dependencies,spark,python\" TEST_PROJECTS=\"-Dtest=ZeppelinSparkClusterTest,org.apache.zeppelin.spark.* -DfailIfNoTests=false\"",
                "+      env: PYTHON=\"2\" SCALA_VER=\"2.11\" SPARK_VER=\"2.0.2\" HADOOP_VER=\"2.6\" PROFILE=\"-Pweb-ci -Pspark-2.0 -Phadoop3 -Phadoop-2.6 -Pscala-2.11\" SPARKR=\"true\" BUILD_FLAG=\"install -DskipTests -DskipRat\" TEST_FLAG=\"test -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-zengine,zeppelin-server,zeppelin-display,spark/interpreter,spark/scala-2.10,spark/scala-2.11,spark/spark-dependencies,python\" TEST_PROJECTS=\"-Dtest=ZeppelinSparkClusterTest,org.apache.zeppelin.spark.* -DfailIfNoTests=false\"",
                "-    # Test spark module for 1.6.3 with scala 2.10",
                "+    # Test spark module for 1.6.3 with scala 2.11",
                "     - jdk: \"openjdk7\"",
                "       dist: trusty",
                "-      env: PYTHON=\"3\" SCALA_VER=\"2.10\" SPARK_VER=\"1.6.3\" HADOOP_VER=\"2.6\" PROFILE=\"-Pweb-ci -Pspark-1.6 -Phadoop2 -Phadoop-2.6 -Pscala-2.10\" SPARKR=\"true\" BUILD_FLAG=\"install -DskipTests -DskipRat\" TEST_FLAG=\"test -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-zengine,zeppelin-server,zeppelin-display,spark-dependencies,spark,python\" TEST_PROJECTS=\"-Dtest=ZeppelinSparkClusterTest,org.apache.zeppelin.spark.*,org.apache.zeppelin.spark.* -DfailIfNoTests=false\"",
                "+      env: PYTHON=\"3\" SCALA_VER=\"2.10\" SPARK_VER=\"1.6.3\" HADOOP_VER=\"2.6\" PROFILE=\"-Pweb-ci -Pspark-1.6 -Phadoop2 -Phadoop-2.6 -Pscala-2.10\" SPARKR=\"true\" BUILD_FLAG=\"install -DskipTests -DskipRat\" TEST_FLAG=\"test -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-zengine,zeppelin-server,zeppelin-display,spark/interpreter,spark/scala-2.10,spark/scala-2.11,spark/spark-dependencies,python\" TEST_PROJECTS=\"-Dtest=ZeppelinSparkClusterTest,org.apache.zeppelin.spark.*,org.apache.zeppelin.spark.* -DfailIfNoTests=false\"",
                "@@ -107,3 +107,3 @@ matrix:",
                "       dist: trusty",
                "-      env: PYTHON=\"2\" SCALA_VER=\"2.11\" SPARK_VER=\"1.6.3\" HADOOP_VER=\"2.6\" PROFILE=\"-Pweb-ci -Pspark-1.6 -Phadoop3 -Phadoop-2.6 -Pscala-2.11\" SPARKR=\"true\" BUILD_FLAG=\"install -DskipTests -DskipRat\" TEST_FLAG=\"test -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-zengine,zeppelin-server,zeppelin-display,spark-dependencies,spark,python\" TEST_PROJECTS=\"-Dtest=ZeppelinSparkClusterTest,org.apache.zeppelin.spark.* -DfailIfNoTests=false\"",
                "+      env: PYTHON=\"2\" SCALA_VER=\"2.11\" SPARK_VER=\"1.6.3\" HADOOP_VER=\"2.6\" PROFILE=\"-Pweb-ci -Pspark-1.6 -Phadoop3 -Phadoop-2.6 -Pscala-2.11\" SPARKR=\"true\" BUILD_FLAG=\"install -DskipTests -DskipRat\" TEST_FLAG=\"test -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-zengine,zeppelin-server,zeppelin-display,spark/interpreter,spark/scala-2.10,spark/scala-2.11,spark/spark-dependencies,python\" TEST_PROJECTS=\"-Dtest=ZeppelinSparkClusterTest,org.apache.zeppelin.spark.* -DfailIfNoTests=false\"",
                "@@ -113,3 +113,3 @@ matrix:",
                "       jdk: \"openjdk7\"",
                "-      env: PYTHON=\"2\" SCALA_VER=\"2.10\" SPARK_VER=\"1.6.1\" HADOOP_VER=\"2.6\" LIVY_VER=\"0.4.0-incubating\" PROFILE=\"-Pspark-1.6 -Phadoop2 -Phadoop-2.6 -Pscala-2.10\" BUILD_FLAG=\"install -am -DskipTests -DskipRat\" TEST_FLAG=\"verify -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-display,spark-dependencies,spark,python,livy\" TEST_PROJECTS=\"-Dtest=LivySQLInterpreterTest,org.apache.zeppelin.spark.PySpark*Test,org.apache.zeppelin.python.* -Dpyspark.test.exclude='' -DfailIfNoTests=false\"",
                "+      env: PYTHON=\"2\" SCALA_VER=\"2.10\" SPARK_VER=\"1.6.1\" HADOOP_VER=\"2.6\" LIVY_VER=\"0.4.0-incubating\" PROFILE=\"-Pspark-1.6 -Phadoop2 -Phadoop-2.6 -Plivy-0.2 -Pscala-2.10\" BUILD_FLAG=\"install -am -DskipTests -DskipRat\" TEST_FLAG=\"verify -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-display,spark/interpreter,spark/scala-2.10,spark/scala-2.11,spark/spark-dependencies,python,livy\" TEST_PROJECTS=\"-Dtest=LivySQLInterpreterTest,org.apache.zeppelin.spark.PySpark*Test,org.apache.zeppelin.python.* -Dpyspark.test.exclude='' -DfailIfNoTests=false\"",
                "@@ -119,4 +119,4 @@ matrix:",
                "       jdk: \"openjdk7\"",
                "-      env: PYTHON=\"3\" SCALA_VER=\"2.11\" SPARK_VER=\"2.0.0\" HADOOP_VER=\"2.6\" LIVY_VER=\"0.4.0-incubating\" PROFILE=\"-Pspark-2.0 -Phadoop3 -Phadoop-2.6 -Pscala-2.11\" BUILD_FLAG=\"install -am -DskipTests -DskipRat\" TEST_FLAG=\"verify -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-display,spark-dependencies,spark,python,livy\" TEST_PROJECTS=\"-Dtest=LivySQLInterpreterTest,org.apache.zeppelin.spark.PySpark*Test,org.apache.zeppelin.python.* -Dpyspark.test.exclude='' -DfailIfNoTests=false\"",
                "-",
                "+      env: PYTHON=\"3\" SCALA_VER=\"2.11\" SPARK_VER=\"2.0.0\" HADOOP_VER=\"2.6\" LIVY_VER=\"0.4.0-incubating\" PROFILE=\"-Pspark-2.0 -Phadoop3 -Phadoop-2.6 -Pscala-2.11 -Plivy-0.3\" BUILD_FLAG=\"install -am -DskipTests -DskipRat\" TEST_FLAG=\"verify -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-display,spark/interpreter,spark/scala-2.10,spark/scala-2.11,spark/spark-dependencies,python,livy\" TEST_PROJECTS=\"-Dtest=LivySQLInterpreterTest,org.apache.zeppelin.spark.PySpark*Test,org.apache.zeppelin.python.* -Dpyspark.test.exclude='' -DfailIfNoTests=false\"",
                "+      ",
                " before_install:",
                "@@ -135,3 +135,3 @@ before_install:",
                "   - \"/sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -ac -screen 0 1600x1024x16\"",
                "-  - ./dev/change_scala_version.sh $SCALA_VER",
                "+  #- ./dev/change_scala_version.sh $SCALA_VER",
                "   - source ~/.environ",
                "@@ -147,5 +147,7 @@ before_script:",
                "   - if [[ -n $LIVY_VER ]]; then export SPARK_HOME=`pwd`/spark-$SPARK_VER-bin-hadoop$HADOOP_VER; fi",
                "-  - export SPARK_HOME=`pwd`/spark-$SPARK_VER-bin-hadoop$HADOOP_VER",
                "-  - echo \"export SPARK_HOME=`pwd`/spark-$SPARK_VER-bin-hadoop$HADOOP_VER\" > conf/zeppelin-env.sh",
                "+  - if [[ -n $SPARK_VER ]]; then export SPARK_HOME=`pwd`/spark-$SPARK_VER-bin-hadoop$HADOOP_VER; fi",
                "+  - if [[ -n $SPARK_VER ]]; then echo \"export SPARK_HOME=`pwd`/spark-$SPARK_VER-bin-hadoop$HADOOP_VER\" > conf/zeppelin-env.sh; fi",
                "   - echo \"export ZEPPELIN_HELIUM_REGISTRY=helium\" >> conf/zeppelin-env.sh",
                "+  - echo \"export SPARK_PRINT_LAUNCH_COMMAND=true\" >> conf/zeppelin-env.sh",
                "+  - export SPARK_PRINT_LAUNCH_COMMAND=true",
                "   - tail conf/zeppelin-env.sh",
                "diff --git a/bin/interpreter.sh b/bin/interpreter.sh",
                "index aa2564603..45ee0ce37 100755",
                "--- a/bin/interpreter.sh",
                "+++ b/bin/interpreter.sh",
                "@@ -123,3 +123,3 @@ if [[ \"${INTERPRETER_ID}\" == \"spark\" ]]; then",
                "     export SPARK_SUBMIT=\"${SPARK_HOME}/bin/spark-submit\"",
                "-    SPARK_APP_JAR=\"$(ls ${ZEPPELIN_HOME}/interpreter/spark/zeppelin-spark*.jar)\"",
                "+    SPARK_APP_JAR=\"$(ls ${ZEPPELIN_HOME}/interpreter/spark/spark-interpreter*.jar)\"",
                "     # This will evantually passes SPARK_APP_JAR to classpath of SparkIMain",
                "diff --git a/pom.xml b/pom.xml",
                "index 725db415c..2c230cb8e 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -58,5 +58,7 @@",
                "     <module>zeppelin-display</module>",
                "-    <module>spark-dependencies</module>",
                "     <module>groovy</module>",
                "-    <module>spark</module>",
                "+    <module>spark/scala-2.10</module>",
                "+    <module>spark/scala-2.11</module>",
                "+    <module>spark/interpreter</module>",
                "+    <module>spark/spark-dependencies</module>",
                "     <module>markdown</module>",
                "@@ -88,2 +90,3 @@",
                "     <!-- language versions -->",
                "+    <java.version>1.7</java.version>",
                "     <scala.version>2.10.5</scala.version>",
                "@@ -331,4 +334,4 @@",
                "         <configuration>",
                "-          <source>1.7</source>",
                "-          <target>1.7</target>",
                "+          <source>${java.version}</source>",
                "+          <target>${java.version}</target>",
                "         </configuration>",
                "@@ -741,5 +744,2 @@",
                "       <id>scala-2.10</id>",
                "-      <activation>",
                "-        <activeByDefault>true</activeByDefault>",
                "-      </activation>",
                "       <properties>",
                "@@ -752,4 +752,7 @@",
                "       <id>scala-2.11</id>",
                "+      <activation>",
                "+        <activeByDefault>true</activeByDefault>",
                "+      </activation>",
                "       <properties>",
                "-        <scala.version>2.11.7</scala.version>",
                "+        <scala.version>2.11.8</scala.version>",
                "         <scala.binary.version>2.11</scala.binary.version>",
                "diff --git a/python/pom.xml b/python/pom.xml",
                "index 3ce47b063..c14d4b1da 100644",
                "--- a/python/pom.xml",
                "+++ b/python/pom.xml",
                "@@ -45,2 +45,3 @@",
                "     <grpc.version>1.4.0</grpc.version>",
                "+    <plugin.shade.version>2.4.1</plugin.shade.version>",
                "   </properties>",
                "@@ -92,9 +93,3 @@",
                "     </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>com.google.guava</groupId>",
                "-      <artifactId>guava</artifactId>",
                "-      <version>18.0</version>",
                "-    </dependency>",
                "-",
                "+    ",
                "     <!-- test libraries -->",
                "@@ -204,2 +199,34 @@",
                "+      <plugin>",
                "+        <groupId>org.apache.maven.plugins</groupId>",
                "+        <artifactId>maven-shade-plugin</artifactId>",
                "+        <version>${plugin.shade.version}</version>",
                "+        <configuration>",
                "+          <transformers>",
                "+            <transformer implementation=\"org.apache.maven.plugins.shade.resource.ServicesResourceTransformer\" />",
                "+            <transformer implementation=\"org.apache.maven.plugins.shade.resource.AppendingTransformer\">",
                "+              <resource>reference.conf</resource>",
                "+            </transformer>",
                "+          </transformers>",
                "+          <relocations>",
                "+            <relocation>",
                "+              <pattern>com.google.common</pattern>",
                "+              <shadedPattern>org.apache.zeppelin.com.google.common</shadedPattern>",
                "+            </relocation>",
                "+            <relocation>",
                "+              <pattern>py4j</pattern>",
                "+              <shadedPattern>org.apache.zeppelin.py4j</shadedPattern>",
                "+            </relocation>",
                "+          </relocations>",
                "+        </configuration>",
                "+        <executions>",
                "+          <execution>",
                "+            <phase>package</phase>",
                "+            <goals>",
                "+              <goal>shade</goal>",
                "+            </goals>",
                "+          </execution>",
                "+        </executions>",
                "+      </plugin>",
                "+",
                "       <plugin>",
                "diff --git a/python/src/main/java/org/apache/zeppelin/python/IPythonInterpreter.java b/python/src/main/java/org/apache/zeppelin/python/IPythonInterpreter.java",
                "index bd687befc..81cfeb24d 100644",
                "--- a/python/src/main/java/org/apache/zeppelin/python/IPythonInterpreter.java",
                "+++ b/python/src/main/java/org/apache/zeppelin/python/IPythonInterpreter.java",
                "@@ -301,3 +301,3 @@ public class IPythonInterpreter extends Interpreter implements ExecuteResultHand",
                "   @Override",
                "-  public void close() {",
                "+  public void close() throws InterpreterException {",
                "     if (watchDog != null) {",
                "@@ -329,3 +329,3 @@ public class IPythonInterpreter extends Interpreter implements ExecuteResultHand",
                "   @Override",
                "-  public void cancel(InterpreterContext context) {",
                "+  public void cancel(InterpreterContext context) throws InterpreterException {",
                "     ipythonClient.cancel(CancelRequest.newBuilder().build());",
                "@@ -339,3 +339,3 @@ public class IPythonInterpreter extends Interpreter implements ExecuteResultHand",
                "   @Override",
                "-  public int getProgress(InterpreterContext context) {",
                "+  public int getProgress(InterpreterContext context) throws InterpreterException {",
                "     return 0;",
                "diff --git a/python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java b/python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java",
                "index b13cb8afd..028f1c6a8 100644",
                "--- a/python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java",
                "+++ b/python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java",
                "@@ -287,3 +287,3 @@ public class PythonInterpreter extends Interpreter implements ExecuteResultHandl",
                "   @Override",
                "-  public void close() {",
                "+  public void close() throws InterpreterException {",
                "     if (iPythonInterpreter != null) {",
                "@@ -465,3 +465,3 @@ public class PythonInterpreter extends Interpreter implements ExecuteResultHandl",
                "-  public void interrupt() throws IOException {",
                "+  public void interrupt() throws IOException, InterpreterException {",
                "     if (pythonPid > -1) {",
                "@@ -476,3 +476,3 @@ public class PythonInterpreter extends Interpreter implements ExecuteResultHandl",
                "   @Override",
                "-  public void cancel(InterpreterContext context) {",
                "+  public void cancel(InterpreterContext context) throws InterpreterException {",
                "     if (iPythonInterpreter != null) {",
                "@@ -493,3 +493,3 @@ public class PythonInterpreter extends Interpreter implements ExecuteResultHandl",
                "   @Override",
                "-  public int getProgress(InterpreterContext context) {",
                "+  public int getProgress(InterpreterContext context) throws InterpreterException {",
                "     if (iPythonInterpreter != null) {",
                "diff --git a/r/pom.xml b/r/pom.xml",
                "index 8c80b3420..fef12e3c1 100644",
                "--- a/r/pom.xml",
                "+++ b/r/pom.xml",
                "@@ -70,9 +70,2 @@",
                "-    <dependency>",
                "-      <groupId>${project.groupId}</groupId>",
                "-      <artifactId>zeppelin-spark-dependencies_${scala.binary.version}</artifactId>",
                "-      <version>${project.version}</version>",
                "-      <scope>provided</scope>",
                "-    </dependency>",
                "-",
                "     <dependency>",
                "diff --git a/spark/interpreter/figure/null-1.png b/spark/interpreter/figure/null-1.png",
                "new file mode 100644",
                "index 000000000..8b1ce07ea",
                "Binary files /dev/null and b/spark/interpreter/figure/null-1.png differ",
                "diff --git a/spark/interpreter/pom.xml b/spark/interpreter/pom.xml",
                "new file mode 100644",
                "index 000000000..449646242",
                "--- /dev/null",
                "+++ b/spark/interpreter/pom.xml",
                "@@ -0,0 +1,573 @@",
                "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "+<!--",
                "+  ~ Licensed to the Apache Software Foundation (ASF) under one or more",
                "+  ~ contributor license agreements.  See the NOTICE file distributed with",
                "+  ~ this work for additional information regarding copyright ownership.",
                "+  ~ The ASF licenses this file to You under the Apache License, Version 2.0",
                "+  ~ (the \"License\"); you may not use this file except in compliance with",
                "+  ~ the License.  You may obtain a copy of the License at",
                "+  ~",
                "+  ~    http://www.apache.org/licenses/LICENSE-2.0",
                "+  ~",
                "+  ~ Unless required by applicable law or agreed to in writing, software",
                "+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+  ~ See the License for the specific language governing permissions and",
                "+  ~ limitations under the License.",
                "+  -->",
                "+",
                "+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">",
                "+  <modelVersion>4.0.0</modelVersion>",
                "+",
                "+  <parent>",
                "+    <artifactId>spark-parent</artifactId>",
                "+    <groupId>org.apache.zeppelin</groupId>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "+    <relativePath>../pom.xml</relativePath>",
                "+  </parent>",
                "+",
                "+  <groupId>org.apache.zeppelin</groupId>",
                "+  <artifactId>spark-interpreter</artifactId>",
                "+  <packaging>jar</packaging>",
                "+  <version>0.9.0-SNAPSHOT</version>",
                "+  <name>Zeppelin: Spark Interpreter</name>",
                "+  <description>Zeppelin spark support</description>",
                "+",
                "+  <properties>",
                "+    <interpreter.name>spark</interpreter.name>",
                "+    <!--library versions-->",
                "+    <jsoup.version>1.8.2</jsoup.version>",
                "+    <commons.exec.version>1.3</commons.exec.version>",
                "+    <commons.compress.version>1.9</commons.compress.version>",
                "+    <maven.plugin.api.version>3.0</maven.plugin.api.version>",
                "+    <aether.version>1.12</aether.version>",
                "+    <maven.aeither.provider.version>3.0.3</maven.aeither.provider.version>",
                "+    <wagon.version>1.0</wagon.version>",
                "+",
                "+    <datanucleus.rdbms.version>3.2.9</datanucleus.rdbms.version>",
                "+    <datanucleus.apijdo.version>3.2.6</datanucleus.apijdo.version>",
                "+    <datanucleus.core.version>3.2.10</datanucleus.core.version>",
                "+",
                "+    <scala.compile.version>${scala.version}</scala.compile.version>",
                "+    <!-- settings -->",
                "+    <pyspark.test.exclude>**/PySparkInterpreterMatplotlibTest.java</pyspark.test.exclude>",
                "+    <pyspark.test.include>**/*Test.*</pyspark.test.include>",
                "+",
                "+",
                "+    <spark.archive>spark-${spark.version}</spark.archive>",
                "+    <spark.src.download.url>",
                "+      http://d3kbcqa49mib13.cloudfront.net/${spark.archive}.tgz",
                "+    </spark.src.download.url>",
                "+    <spark.bin.download.url>",
                "+      http://d3kbcqa49mib13.cloudfront.net/spark-${spark.version}-bin-without-hadoop.tgz",
                "+    </spark.bin.download.url>",
                "+",
                "+  </properties>",
                "+",
                "+  <dependencies>",
                "+    <dependency>",
                "+      <groupId>org.apache.zeppelin</groupId>",
                "+      <artifactId>zeppelin-display</artifactId>",
                "+      <version>${project.version}</version>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.apache.zeppelin</groupId>",
                "+      <artifactId>spark-scala-2.11</artifactId>",
                "+      <version>${project.version}</version>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.apache.zeppelin</groupId>",
                "+      <artifactId>spark-scala-2.10</artifactId>",
                "+      <version>${project.version}</version>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.apache.zeppelin</groupId>",
                "+      <artifactId>zeppelin-interpreter</artifactId>",
                "+      <version>${project.version}</version>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.apache.zeppelin</groupId>",
                "+      <artifactId>zeppelin-python</artifactId>",
                "+      <version>${project.version}</version>",
                "+      <exclusions>",
                "+        <exclusion>",
                "+          <groupId>net.sf.py4j</groupId>",
                "+          <artifactId>py4j</artifactId>",
                "+        </exclusion>",
                "+      </exclusions>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>${project.groupId}</groupId>",
                "+      <artifactId>zeppelin-python</artifactId>",
                "+      <version>${project.version}</version>",
                "+      <classifier>tests</classifier>",
                "+      <scope>test</scope>",
                "+      <exclusions>",
                "+        <exclusion>",
                "+          <groupId>net.sf.py4j</groupId>",
                "+          <artifactId>py4j</artifactId>",
                "+        </exclusion>",
                "+      </exclusions>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.apache.spark</groupId>",
                "+      <artifactId>spark-repl_${scala.binary.version}</artifactId>",
                "+      <version>${spark.version}</version>",
                "+      <scope>provided</scope>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.apache.spark</groupId>",
                "+      <artifactId>spark-core_${scala.binary.version}</artifactId>",
                "+      <version>${spark.version}</version>",
                "+      <scope>provided</scope>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.apache.spark</groupId>",
                "+      <artifactId>spark-hive_${scala.binary.version}</artifactId>",
                "+      <version>${spark.version}</version>",
                "+      <scope>provided</scope>",
                "+      <exclusions>",
                "+        <exclusion>",
                "+          <groupId>com.fasterxml.jackson.core</groupId>",
                "+          <artifactId>jackson-databind</artifactId>",
                "+        </exclusion>",
                "+        <exclusion>",
                "+          <groupId>com.fasterxml.jackson.core</groupId>",
                "+          <artifactId>jackson-annotations</artifactId>",
                "+        </exclusion>",
                "+      </exclusions>",
                "+    </dependency>",
                "+",
                "+    <!-- Aether :: maven dependency resolution -->",
                "+    <dependency>",
                "+      <groupId>org.apache.maven</groupId>",
                "+      <artifactId>maven-plugin-api</artifactId>",
                "+      <version>${maven.plugin.api.version}</version>",
                "+      <exclusions>",
                "+        <exclusion>",
                "+          <groupId>org.codehaus.plexus</groupId>",
                "+          <artifactId>plexus-utils</artifactId>",
                "+        </exclusion>",
                "+        <exclusion>",
                "+          <groupId>org.sonatype.sisu</groupId>",
                "+          <artifactId>sisu-inject-plexus</artifactId>",
                "+        </exclusion>",
                "+        <exclusion>",
                "+          <groupId>org.apache.maven</groupId>",
                "+          <artifactId>maven-model</artifactId>",
                "+        </exclusion>",
                "+      </exclusions>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.sonatype.aether</groupId>",
                "+      <artifactId>aether-api</artifactId>",
                "+      <version>${aether.version}</version>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.sonatype.aether</groupId>",
                "+      <artifactId>aether-util</artifactId>",
                "+      <version>${aether.version}</version>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.sonatype.aether</groupId>",
                "+      <artifactId>aether-impl</artifactId>",
                "+      <version>${aether.version}</version>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.apache.maven</groupId>",
                "+      <artifactId>maven-aether-provider</artifactId>",
                "+      <version>${maven.aeither.provider.version}</version>",
                "+      <exclusions>",
                "+        <exclusion>",
                "+          <groupId>org.sonatype.aether</groupId>",
                "+          <artifactId>aether-api</artifactId>",
                "+        </exclusion>",
                "+        <exclusion>",
                "+          <groupId>org.sonatype.aether</groupId>",
                "+          <artifactId>aether-spi</artifactId>",
                "+        </exclusion>",
                "+        <exclusion>",
                "+          <groupId>org.sonatype.aether</groupId>",
                "+          <artifactId>aether-util</artifactId>",
                "+        </exclusion>",
                "+        <exclusion>",
                "+          <groupId>org.sonatype.aether</groupId>",
                "+          <artifactId>aether-impl</artifactId>",
                "+        </exclusion>",
                "+        <exclusion>",
                "+          <groupId>org.codehaus.plexus</groupId>",
                "+          <artifactId>plexus-utils</artifactId>",
                "+        </exclusion>",
                "+      </exclusions>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.sonatype.aether</groupId>",
                "+      <artifactId>aether-connector-file</artifactId>",
                "+      <version>${aether.version}</version>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.sonatype.aether</groupId>",
                "+      <artifactId>aether-connector-wagon</artifactId>",
                "+      <version>${aether.version}</version>",
                "+      <exclusions>",
                "+        <exclusion>",
                "+          <groupId>org.apache.maven.wagon</groupId>",
                "+          <artifactId>wagon-provider-api</artifactId>",
                "+        </exclusion>",
                "+      </exclusions>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.apache.maven.wagon</groupId>",
                "+      <artifactId>wagon-provider-api</artifactId>",
                "+      <version>${wagon.version}</version>",
                "+      <exclusions>",
                "+        <exclusion>",
                "+          <groupId>org.codehaus.plexus</groupId>",
                "+          <artifactId>plexus-utils</artifactId>",
                "+        </exclusion>",
                "+      </exclusions>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.apache.maven.wagon</groupId>",
                "+      <artifactId>wagon-http-lightweight</artifactId>",
                "+      <version>${wagon.version}</version>",
                "+      <exclusions>",
                "+        <exclusion>",
                "+          <groupId>org.apache.maven.wagon</groupId>",
                "+          <artifactId>wagon-http-shared</artifactId>",
                "+        </exclusion>",
                "+      </exclusions>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.apache.maven.wagon</groupId>",
                "+      <artifactId>wagon-http</artifactId>",
                "+      <version>${wagon.version}</version>",
                "+      <exclusions>",
                "+      </exclusions>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.apache.commons</groupId>",
                "+      <artifactId>commons-exec</artifactId>",
                "+      <version>${commons.exec.version}</version>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.scala-lang</groupId>",
                "+      <artifactId>scala-library</artifactId>",
                "+      <version>${scala.version}</version>",
                "+      <scope>provided</scope>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.scala-lang</groupId>",
                "+      <artifactId>scala-compiler</artifactId>",
                "+      <version>${scala.version}</version>",
                "+      <scope>provided</scope>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.scala-lang</groupId>",
                "+      <artifactId>scala-reflect</artifactId>",
                "+      <version>${scala.version}</version>",
                "+      <scope>provided</scope>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>commons-lang</groupId>",
                "+      <artifactId>commons-lang</artifactId>",
                "+      <scope>provided</scope>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.apache.commons</groupId>",
                "+      <artifactId>commons-compress</artifactId>",
                "+      <version>${commons.compress.version}</version>",
                "+      <scope>provided</scope>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.jsoup</groupId>",
                "+      <artifactId>jsoup</artifactId>",
                "+      <version>${jsoup.version}</version>",
                "+    </dependency>",
                "+",
                "+    <!--test libraries-->",
                "+    <dependency>",
                "+      <groupId>org.scalatest</groupId>",
                "+      <artifactId>scalatest_${scala.binary.version}</artifactId>",
                "+      <version>${scalatest.version}</version>",
                "+      <scope>test</scope>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>junit</groupId>",
                "+      <artifactId>junit</artifactId>",
                "+      <scope>test</scope>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.datanucleus</groupId>",
                "+      <artifactId>datanucleus-core</artifactId>",
                "+      <version>${datanucleus.core.version}</version>",
                "+      <scope>test</scope>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.datanucleus</groupId>",
                "+      <artifactId>datanucleus-api-jdo</artifactId>",
                "+      <version>${datanucleus.apijdo.version}</version>",
                "+      <scope>test</scope>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.datanucleus</groupId>",
                "+      <artifactId>datanucleus-rdbms</artifactId>",
                "+      <version>${datanucleus.rdbms.version}</version>",
                "+      <scope>test</scope>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.mockito</groupId>",
                "+      <artifactId>mockito-core</artifactId>",
                "+      <scope>test</scope>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.powermock</groupId>",
                "+      <artifactId>powermock-api-mockito</artifactId>",
                "+      <scope>test</scope>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.powermock</groupId>",
                "+      <artifactId>powermock-module-junit4</artifactId>",
                "+      <scope>test</scope>",
                "+    </dependency>",
                "+",
                "+  </dependencies>",
                "+",
                "+  <build>",
                "+    <plugins>",
                "+      <plugin>",
                "+        <artifactId>maven-enforcer-plugin</artifactId>",
                "+        <executions>",
                "+          <execution>",
                "+            <id>enforce</id>",
                "+            <phase>none</phase>",
                "+          </execution>",
                "+        </executions>",
                "+",
                "+        <configuration>",
                "+          <rules>",
                "+            <requireJavaVersion>",
                "+              <version>1.7</version>",
                "+            </requireJavaVersion>",
                "+          </rules>",
                "+        </configuration>",
                "+      </plugin>",
                "+",
                "+      <plugin>",
                "+        <groupId>com.googlecode.maven-download-plugin</groupId>",
                "+        <artifactId>download-maven-plugin</artifactId>",
                "+        <executions>",
                "+          <execution>",
                "+            <id>download-pyspark-files</id>",
                "+            <phase>validate</phase>",
                "+            <goals>",
                "+              <goal>wget</goal>",
                "+            </goals>",
                "+            <configuration>",
                "+              <readTimeOut>60000</readTimeOut>",
                "+              <retries>5</retries>",
                "+              <unpack>true</unpack>",
                "+              <url>${spark.src.download.url}</url>",
                "+              <outputDirectory>${project.build.directory}</outputDirectory>",
                "+            </configuration>",
                "+          </execution>",
                "+        </executions>",
                "+      </plugin>",
                "+",
                "+      <plugin>",
                "+        <groupId>org.apache.maven.plugins</groupId>",
                "+        <artifactId>maven-antrun-plugin</artifactId>",
                "+        <executions>",
                "+          <execution>",
                "+            <id>zip-pyspark-files</id>",
                "+            <phase>generate-resources</phase>",
                "+            <goals>",
                "+              <goal>run</goal>",
                "+            </goals>",
                "+            <configuration>",
                "+              <target>",
                "+                <delete dir=\"../../interpreter/spark/pyspark\" />",
                "+                <copy file=\"${project.build.directory}/${spark.archive}/python/lib/py4j-${py4j.version}-src.zip\" todir=\"${project.build.directory}/../../../interpreter/spark/pyspark\" />",
                "+                <zip basedir=\"${project.build.directory}/${spark.archive}/python\" destfile=\"${project.build.directory}/../../../interpreter/spark/pyspark/pyspark.zip\" includes=\"pyspark/*.py,pyspark/**/*.py\" />",
                "+              </target>",
                "+            </configuration>",
                "+          </execution>",
                "+        </executions>",
                "+      </plugin>",
                "+",
                "+      <plugin>",
                "+        <groupId>org.scalatest</groupId>",
                "+        <artifactId>scalatest-maven-plugin</artifactId>",
                "+      </plugin>",
                "+",
                "+      <plugin>",
                "+        <groupId>org.apache.maven.plugins</groupId>",
                "+        <artifactId>maven-surefire-plugin</artifactId>",
                "+        <configuration>",
                "+          <forkCount>1</forkCount>",
                "+          <reuseForks>false</reuseForks>",
                "+          <argLine>-Xmx1024m -XX:MaxPermSize=256m</argLine>",
                "+          <excludes>",
                "+            <exclude>**/SparkRInterpreterTest.java</exclude>",
                "+            <exclude>${pyspark.test.exclude}</exclude>",
                "+            <exclude>${tests.to.exclude}</exclude>",
                "+          </excludes>",
                "+          <environmentVariables>",
                "+            <PYTHONPATH>${project.build.directory}/../../../interpreter/spark/pyspark/pyspark.zip:${project.build.directory}/../../../interpreter/lib/python/:${project.build.directory}/../../../interpreter/spark/pyspark/py4j-${py4j.version}-src.zip:.</PYTHONPATH>",
                "+            <ZEPPELIN_HOME>${basedir}/../../</ZEPPELIN_HOME>",
                "+          </environmentVariables>",
                "+        </configuration>",
                "+      </plugin>",
                "+",
                "+      <plugin>",
                "+        <groupId>org.apache.maven.plugins</groupId>",
                "+        <artifactId>maven-shade-plugin</artifactId>",
                "+        <version>${plugin.shade.version}</version>",
                "+        <configuration>",
                "+          <!--<createDependencyReducedPom>false</createDependencyReducedPom>-->",
                "+          <filters>",
                "+            <filter>",
                "+              <artifact>*:*</artifact>",
                "+              <excludes>",
                "+                <exclude>org/datanucleus/**</exclude>",
                "+                <exclude>META-INF/*.SF</exclude>",
                "+                <exclude>META-INF/*.DSA</exclude>",
                "+                <exclude>META-INF/*.RSA</exclude>",
                "+              </excludes>",
                "+            </filter>",
                "+          </filters>",
                "+          <transformers>",
                "+            <transformer implementation=\"org.apache.maven.plugins.shade.resource.ServicesResourceTransformer\" />",
                "+            <transformer implementation=\"org.apache.maven.plugins.shade.resource.AppendingTransformer\">",
                "+              <resource>reference.conf</resource>",
                "+            </transformer>",
                "+          </transformers>",
                "+          <relocations>",
                "+            <relocation>",
                "+              <pattern>io.netty</pattern>",
                "+              <shadedPattern>org.apache.zeppelin.io.netty</shadedPattern>",
                "+            </relocation>",
                "+            <relocation>",
                "+              <pattern>com.google</pattern>",
                "+              <shadedPattern>org.apache.zeppelin.com.google</shadedPattern>",
                "+            </relocation>",
                "+            <relocation>",
                "+              <pattern>py4j.</pattern>",
                "+              <shadedPattern>org.apache.zeppelin.py4j.</shadedPattern>",
                "+            </relocation>",
                "+          </relocations>",
                "+        </configuration>",
                "+        <executions>",
                "+          <execution>",
                "+            <phase>package</phase>",
                "+            <goals>",
                "+              <goal>shade</goal>",
                "+            </goals>",
                "+          </execution>",
                "+        </executions>",
                "+      </plugin>",
                "+",
                "+",
                "+      <plugin>",
                "+        <artifactId>maven-dependency-plugin</artifactId>",
                "+        <executions>",
                "+          <execution>",
                "+            <id>copy-dependencies</id>",
                "+            <phase>none</phase>",
                "+            <configuration>",
                "+              <skip>true</skip>",
                "+            </configuration>",
                "+          </execution>",
                "+",
                "+          <execution>",
                "+            <id>copy-interpreter-dependencies</id>",
                "+            <phase>none</phase>",
                "+            <configuration>",
                "+              <skip>true</skip>",
                "+            </configuration>",
                "+          </execution>",
                "+          <execution>",
                "+            <id>copy-artifact</id>",
                "+            <phase>none</phase>",
                "+            <configuration>",
                "+              <skip>true</skip>",
                "+            </configuration>",
                "+          </execution>",
                "+",
                "+",
                "+          <execution>",
                "+            <id>copy-spark-interpreter</id>",
                "+            <phase>package</phase>",
                "+            <goals>",
                "+              <goal>copy</goal>",
                "+            </goals>",
                "+            <configuration>",
                "+              <outputDirectory>${project.build.directory}/../../../interpreter/spark</outputDirectory>",
                "+              <overWriteReleases>false</overWriteReleases>",
                "+              <overWriteSnapshots>false</overWriteSnapshots>",
                "+              <overWriteIfNewer>true</overWriteIfNewer>",
                "+              <artifactItems>",
                "+                <artifactItem>",
                "+                  <groupId>${project.groupId}</groupId>",
                "+                  <artifactId>${project.artifactId}</artifactId>",
                "+                  <version>${project.version}</version>",
                "+                  <type>${project.packaging}</type>",
                "+                </artifactItem>",
                "+              </artifactItems>",
                "+            </configuration>",
                "+          </execution>",
                "+",
                "+        </executions>",
                "+      </plugin>",
                "+",
                "+      <plugin>",
                "+        <artifactId>maven-resources-plugin</artifactId>",
                "+        <executions>",
                "+          <execution>",
                "+            <id>copy-interpreter-setting</id>",
                "+            <phase>package</phase>",
                "+            <goals>",
                "+              <goal>resources</goal>",
                "+            </goals>",
                "+            <configuration>",
                "+              <outputDirectory>${project.build.directory}/../../../interpreter/${interpreter.name}</outputDirectory>",
                "+            </configuration>",
                "+          </execution>",
                "+        </executions>",
                "+      </plugin>",
                "+",
                "+    </plugins>",
                "+  </build>",
                "+",
                "+</project>",
                "diff --git a/spark/interpreter/src/main/java/org/apache/zeppelin/spark/AbstractSparkInterpreter.java b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/AbstractSparkInterpreter.java",
                "new file mode 100644",
                "index 000000000..9968dc6e5",
                "--- /dev/null",
                "+++ b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/AbstractSparkInterpreter.java",
                "@@ -0,0 +1,57 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.spark;",
                "+",
                "+import org.apache.spark.SparkContext;",
                "+import org.apache.spark.api.java.JavaSparkContext;",
                "+import org.apache.spark.sql.SQLContext;",
                "+import org.apache.zeppelin.interpreter.Interpreter;",
                "+import org.apache.zeppelin.interpreter.InterpreterContext;",
                "+",
                "+import java.util.Properties;",
                "+",
                "+/**",
                "+ * Abstract class for SparkInterpreter. For the purpose of co-exist of NewSparkInterpreter",
                "+ * and OldSparkInterpreter",
                "+ */",
                "+public abstract class AbstractSparkInterpreter extends Interpreter {",
                "+",
                "+  public AbstractSparkInterpreter(Properties properties) {",
                "+    super(properties);",
                "+  }",
                "+",
                "+  public abstract SparkContext getSparkContext();",
                "+",
                "+  public abstract SQLContext getSQLContext();",
                "+",
                "+  public abstract Object getSparkSession();",
                "+",
                "+  public abstract boolean isSparkContextInitialized();",
                "+",
                "+  public abstract SparkVersion getSparkVersion();",
                "+",
                "+  public abstract JavaSparkContext getJavaSparkContext();",
                "+",
                "+  public abstract void populateSparkWebUrl(InterpreterContext ctx);",
                "+",
                "+  public abstract SparkZeppelinContext getZeppelinContext();",
                "+",
                "+  public abstract String getSparkUIUrl();",
                "+",
                "+  public abstract boolean isUnsupportedSparkVersion();",
                "+}",
                "diff --git a/spark/interpreter/src/main/java/org/apache/zeppelin/spark/DepInterpreter.java b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/DepInterpreter.java",
                "new file mode 100644",
                "index 000000000..df0a48416",
                "--- /dev/null",
                "+++ b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/DepInterpreter.java",
                "@@ -0,0 +1,363 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.spark;",
                "+",
                "+import java.io.ByteArrayOutputStream;",
                "+import java.io.File;",
                "+import java.io.PrintStream;",
                "+import java.io.PrintWriter;",
                "+import java.lang.reflect.Constructor;",
                "+import java.lang.reflect.InvocationTargetException;",
                "+import java.net.MalformedURLException;",
                "+import java.net.URL;",
                "+import java.net.URLClassLoader;",
                "+import java.util.LinkedList;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+import java.util.Properties;",
                "+",
                "+import com.google.common.reflect.TypeToken;",
                "+import com.google.gson.Gson;",
                "+",
                "+import org.apache.commons.lang.StringUtils;",
                "+import org.apache.spark.repl.SparkILoop;",
                "+import org.apache.zeppelin.interpreter.Interpreter;",
                "+import org.apache.zeppelin.interpreter.InterpreterContext;",
                "+import org.apache.zeppelin.interpreter.InterpreterGroup;",
                "+import org.apache.zeppelin.interpreter.InterpreterResult;",
                "+import org.apache.zeppelin.interpreter.InterpreterResult.Code;",
                "+import org.apache.zeppelin.interpreter.WrappedInterpreter;",
                "+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;",
                "+import org.apache.zeppelin.scheduler.Scheduler;",
                "+import org.apache.zeppelin.spark.dep.SparkDependencyContext;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+import org.sonatype.aether.resolution.ArtifactResolutionException;",
                "+import org.sonatype.aether.resolution.DependencyResolutionException;",
                "+",
                "+import scala.Console;",
                "+import scala.None;",
                "+import scala.Some;",
                "+import scala.collection.convert.WrapAsJava$;",
                "+import scala.collection.JavaConversions;",
                "+import scala.tools.nsc.Settings;",
                "+import scala.tools.nsc.interpreter.Completion.Candidates;",
                "+import scala.tools.nsc.interpreter.Completion.ScalaCompleter;",
                "+import scala.tools.nsc.interpreter.IMain;",
                "+import scala.tools.nsc.interpreter.Results;",
                "+import scala.tools.nsc.settings.MutableSettings.BooleanSetting;",
                "+import scala.tools.nsc.settings.MutableSettings.PathSetting;",
                "+",
                "+",
                "+/**",
                "+ * DepInterpreter downloads dependencies and pass them when SparkInterpreter initialized.",
                "+ * It extends SparkInterpreter but does not create sparkcontext",
                "+ *",
                "+ */",
                "+public class DepInterpreter extends Interpreter {",
                "+  /**",
                "+   * intp - org.apache.spark.repl.SparkIMain (scala 2.10)",
                "+   * intp - scala.tools.nsc.interpreter.IMain; (scala 2.11)",
                "+   */",
                "+  private Object intp;",
                "+  private ByteArrayOutputStream out;",
                "+  private SparkDependencyContext depc;",
                "+  /**",
                "+   * completer - org.apache.spark.repl.SparkJLineCompletion (scala 2.10)",
                "+   */",
                "+  private Object completer;",
                "+  private SparkILoop interpreter;",
                "+  static final Logger LOGGER = LoggerFactory.getLogger(DepInterpreter.class);",
                "+",
                "+  public DepInterpreter(Properties property) {",
                "+    super(property);",
                "+  }",
                "+",
                "+  public SparkDependencyContext getDependencyContext() {",
                "+    return depc;",
                "+  }",
                "+",
                "+  public static String getSystemDefault(",
                "+      String envName,",
                "+      String propertyName,",
                "+      String defaultValue) {",
                "+",
                "+    if (envName != null && !envName.isEmpty()) {",
                "+      String envValue = System.getenv().get(envName);",
                "+      if (envValue != null) {",
                "+        return envValue;",
                "+      }",
                "+    }",
                "+",
                "+    if (propertyName != null && !propertyName.isEmpty()) {",
                "+      String propValue = System.getProperty(propertyName);",
                "+      if (propValue != null) {",
                "+        return propValue;",
                "+      }",
                "+    }",
                "+    return defaultValue;",
                "+  }",
                "+",
                "+  @Override",
                "+  public void close() {",
                "+    if (intp != null) {",
                "+      Utils.invokeMethod(intp, \"close\");",
                "+    }",
                "+  }",
                "+",
                "+  @Override",
                "+  public void open() {",
                "+    out = new ByteArrayOutputStream();",
                "+    createIMain();",
                "+  }",
                "+",
                "+",
                "+  private void createIMain() {",
                "+    Settings settings = new Settings();",
                "+    URL[] urls = getClassloaderUrls();",
                "+",
                "+    // set classpath for scala compiler",
                "+    PathSetting pathSettings = settings.classpath();",
                "+    String classpath = \"\";",
                "+    List<File> paths = currentClassPath();",
                "+    for (File f : paths) {",
                "+      if (classpath.length() > 0) {",
                "+        classpath += File.pathSeparator;",
                "+      }",
                "+      classpath += f.getAbsolutePath();",
                "+    }",
                "+",
                "+    if (urls != null) {",
                "+      for (URL u : urls) {",
                "+        if (classpath.length() > 0) {",
                "+          classpath += File.pathSeparator;",
                "+        }",
                "+        classpath += u.getFile();",
                "+      }",
                "+    }",
                "+",
                "+    pathSettings.v_$eq(classpath);",
                "+    settings.scala$tools$nsc$settings$ScalaSettings$_setter_$classpath_$eq(pathSettings);",
                "+",
                "+    // set classloader for scala compiler",
                "+    settings.explicitParentLoader_$eq(new Some<>(Thread.currentThread()",
                "+        .getContextClassLoader()));",
                "+",
                "+    BooleanSetting b = (BooleanSetting) settings.usejavacp();",
                "+    b.v_$eq(true);",
                "+    settings.scala$tools$nsc$settings$StandardScalaSettings$_setter_$usejavacp_$eq(b);",
                "+",
                "+    interpreter = new SparkILoop((java.io.BufferedReader) null, new PrintWriter(out));",
                "+    interpreter.settings_$eq(settings);",
                "+",
                "+    interpreter.createInterpreter();",
                "+",
                "+",
                "+    intp = Utils.invokeMethod(interpreter, \"intp\");",
                "+",
                "+    if (Utils.isScala2_10()) {",
                "+      Utils.invokeMethod(intp, \"setContextClassLoader\");",
                "+      Utils.invokeMethod(intp, \"initializeSynchronous\");",
                "+    }",
                "+",
                "+    depc = new SparkDependencyContext(getProperty(\"zeppelin.dep.localrepo\"),",
                "+        getProperty(\"zeppelin.dep.additionalRemoteRepository\"));",
                "+    if (Utils.isScala2_10()) {",
                "+      completer = Utils.instantiateClass(",
                "+          \"org.apache.spark.repl.SparkJLineCompletion\",",
                "+          new Class[]{Utils.findClass(\"org.apache.spark.repl.SparkIMain\")},",
                "+          new Object[]{intp});",
                "+    }",
                "+    interpret(\"@transient var _binder = new java.util.HashMap[String, Object]()\");",
                "+    Map<String, Object> binder;",
                "+    if (Utils.isScala2_10()) {",
                "+      binder = (Map<String, Object>) getValue(\"_binder\");",
                "+    } else {",
                "+      binder = (Map<String, Object>) getLastObject();",
                "+    }",
                "+    binder.put(\"depc\", depc);",
                "+",
                "+    interpret(\"@transient val z = \"",
                "+        + \"_binder.get(\\\"depc\\\")\"",
                "+        + \".asInstanceOf[org.apache.zeppelin.spark.dep.SparkDependencyContext]\");",
                "+",
                "+  }",
                "+",
                "+  private Results.Result interpret(String line) {",
                "+    return (Results.Result) Utils.invokeMethod(",
                "+        intp,",
                "+        \"interpret\",",
                "+        new Class[] {String.class},",
                "+        new Object[] {line});",
                "+  }",
                "+",
                "+  public Object getValue(String name) {",
                "+    Object ret = Utils.invokeMethod(",
                "+        intp, \"valueOfTerm\", new Class[]{String.class}, new Object[]{name});",
                "+    if (ret instanceof None) {",
                "+      return null;",
                "+    } else if (ret instanceof Some) {",
                "+      return ((Some) ret).get();",
                "+    } else {",
                "+      return ret;",
                "+    }",
                "+  }",
                "+",
                "+  public Object getLastObject() {",
                "+    IMain.Request r = (IMain.Request) Utils.invokeMethod(intp, \"lastRequest\");",
                "+    Object obj = r.lineRep().call(\"$result\",",
                "+        JavaConversions.asScalaBuffer(new LinkedList<>()));",
                "+    return obj;",
                "+  }",
                "+",
                "+  @Override",
                "+  public InterpreterResult interpret(String st, InterpreterContext context) {",
                "+    PrintStream printStream = new PrintStream(out);",
                "+    Console.setOut(printStream);",
                "+    out.reset();",
                "+",
                "+    SparkInterpreter sparkInterpreter = getSparkInterpreter();",
                "+",
                "+    if (sparkInterpreter != null && sparkInterpreter.getDelegation().isSparkContextInitialized()) {",
                "+      return new InterpreterResult(Code.ERROR,",
                "+          \"Must be used before SparkInterpreter (%spark) initialized\\n\" +",
                "+              \"Hint: put this paragraph before any Spark code and \" +",
                "+              \"restart Zeppelin/Interpreter\" );",
                "+    }",
                "+",
                "+    scala.tools.nsc.interpreter.Results.Result ret = interpret(st);",
                "+    Code code = getResultCode(ret);",
                "+",
                "+    try {",
                "+      depc.fetch();",
                "+    } catch (MalformedURLException | DependencyResolutionException",
                "+        | ArtifactResolutionException e) {",
                "+      LOGGER.error(\"Exception in DepInterpreter while interpret \", e);",
                "+      return new InterpreterResult(Code.ERROR, e.toString());",
                "+    }",
                "+",
                "+    if (code == Code.INCOMPLETE) {",
                "+      return new InterpreterResult(code, \"Incomplete expression\");",
                "+    } else if (code == Code.ERROR) {",
                "+      return new InterpreterResult(code, out.toString());",
                "+    } else {",
                "+      return new InterpreterResult(code, out.toString());",
                "+    }",
                "+  }",
                "+",
                "+  private Code getResultCode(scala.tools.nsc.interpreter.Results.Result r) {",
                "+    if (r instanceof scala.tools.nsc.interpreter.Results.Success$) {",
                "+      return Code.SUCCESS;",
                "+    } else if (r instanceof scala.tools.nsc.interpreter.Results.Incomplete$) {",
                "+      return Code.INCOMPLETE;",
                "+    } else {",
                "+      return Code.ERROR;",
                "+    }",
                "+  }",
                "+",
                "+  @Override",
                "+  public void cancel(InterpreterContext context) {",
                "+  }",
                "+",
                "+",
                "+  @Override",
                "+  public FormType getFormType() {",
                "+    return FormType.NATIVE;",
                "+  }",
                "+",
                "+  @Override",
                "+  public int getProgress(InterpreterContext context) {",
                "+    return 0;",
                "+  }",
                "+",
                "+  @Override",
                "+  public List<InterpreterCompletion> completion(String buf, int cursor,",
                "+                                                InterpreterContext interpreterContext) {",
                "+    if (Utils.isScala2_10()) {",
                "+      ScalaCompleter c = (ScalaCompleter) Utils.invokeMethod(completer, \"completer\");",
                "+      Candidates ret = c.complete(buf, cursor);",
                "+",
                "+      List<String> candidates = WrapAsJava$.MODULE$.seqAsJavaList(ret.candidates());",
                "+      List<InterpreterCompletion> completions = new LinkedList<>();",
                "+",
                "+      for (String candidate : candidates) {",
                "+        completions.add(new InterpreterCompletion(candidate, candidate, StringUtils.EMPTY));",
                "+      }",
                "+",
                "+      return completions;",
                "+    } else {",
                "+      return new LinkedList<>();",
                "+    }",
                "+  }",
                "+",
                "+  private List<File> currentClassPath() {",
                "+    List<File> paths = classPath(Thread.currentThread().getContextClassLoader());",
                "+    String[] cps = System.getProperty(\"java.class.path\").split(File.pathSeparator);",
                "+    if (cps != null) {",
                "+      for (String cp : cps) {",
                "+        paths.add(new File(cp));",
                "+      }",
                "+    }",
                "+    return paths;",
                "+  }",
                "+",
                "+  private List<File> classPath(ClassLoader cl) {",
                "+    List<File> paths = new LinkedList<>();",
                "+    if (cl == null) {",
                "+      return paths;",
                "+    }",
                "+",
                "+    if (cl instanceof URLClassLoader) {",
                "+      URLClassLoader ucl = (URLClassLoader) cl;",
                "+      URL[] urls = ucl.getURLs();",
                "+      if (urls != null) {",
                "+        for (URL url : urls) {",
                "+          paths.add(new File(url.getFile()));",
                "+        }",
                "+      }",
                "+    }",
                "+    return paths;",
                "+  }",
                "+",
                "+  private SparkInterpreter getSparkInterpreter() {",
                "+    InterpreterGroup intpGroup = getInterpreterGroup();",
                "+    if (intpGroup == null) {",
                "+      return null;",
                "+    }",
                "+",
                "+    Interpreter p = getInterpreterInTheSameSessionByClassName(SparkInterpreter.class.getName());",
                "+    if (p == null) {",
                "+      return null;",
                "+    }",
                "+",
                "+    while (p instanceof WrappedInterpreter) {",
                "+      p = ((WrappedInterpreter) p).getInnerInterpreter();",
                "+    }",
                "+    return (SparkInterpreter) p;",
                "+  }",
                "+",
                "+  @Override",
                "+  public Scheduler getScheduler() {",
                "+    SparkInterpreter sparkInterpreter = getSparkInterpreter();",
                "+    if (sparkInterpreter != null) {",
                "+      return getSparkInterpreter().getScheduler();",
                "+    } else {",
                "+      return null;",
                "+    }",
                "+  }",
                "+}",
                "diff --git a/spark/interpreter/src/main/java/org/apache/zeppelin/spark/IPySparkInterpreter.java b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/IPySparkInterpreter.java",
                "new file mode 100644",
                "index 000000000..c7253fb40",
                "--- /dev/null",
                "+++ b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/IPySparkInterpreter.java",
                "@@ -0,0 +1,128 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.spark;",
                "+",
                "+import org.apache.spark.SparkConf;",
                "+import org.apache.spark.api.java.JavaSparkContext;",
                "+import org.apache.zeppelin.interpreter.Interpreter;",
                "+import org.apache.zeppelin.interpreter.InterpreterContext;",
                "+import org.apache.zeppelin.interpreter.InterpreterException;",
                "+import org.apache.zeppelin.interpreter.LazyOpenInterpreter;",
                "+import org.apache.zeppelin.interpreter.WrappedInterpreter;",
                "+import org.apache.zeppelin.python.IPythonInterpreter;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+import java.io.IOException;",
                "+import java.util.Map;",
                "+import java.util.Properties;",
                "+",
                "+/**",
                "+ * PySparkInterpreter which use IPython underlying.",
                "+ */",
                "+public class IPySparkInterpreter extends IPythonInterpreter {",
                "+",
                "+  private static final Logger LOGGER = LoggerFactory.getLogger(IPySparkInterpreter.class);",
                "+",
                "+  private SparkInterpreter sparkInterpreter;",
                "+",
                "+  public IPySparkInterpreter(Properties property) {",
                "+    super(property);",
                "+  }",
                "+",
                "+  @Override",
                "+  public void open() throws InterpreterException {",
                "+    setProperty(\"zeppelin.python\",",
                "+        PySparkInterpreter.getPythonExec(getProperties()));",
                "+    sparkInterpreter = getSparkInterpreter();",
                "+    SparkConf conf = sparkInterpreter.getSparkContext().getConf();",
                "+    // only set PYTHONPATH in local or yarn-client mode.",
                "+    // yarn-cluster will setup PYTHONPATH automatically.",
                "+    if (!conf.get(\"spark.submit.deployMode\").equals(\"cluster\")) {",
                "+      setAdditionalPythonPath(PythonUtils.sparkPythonPath());",
                "+      setAddBulitinPy4j(false);",
                "+    }",
                "+    setAdditionalPythonInitFile(\"python/zeppelin_ipyspark.py\");",
                "+    super.open();",
                "+  }",
                "+",
                "+  @Override",
                "+  protected Map<String, String> setupIPythonEnv() throws IOException {",
                "+    Map<String, String> env = super.setupIPythonEnv();",
                "+    // set PYSPARK_PYTHON",
                "+    SparkConf conf = sparkInterpreter.getSparkContext().getConf();",
                "+    if (conf.contains(\"spark.pyspark.python\")) {",
                "+      env.put(\"PYSPARK_PYTHON\", conf.get(\"spark.pyspark.python\"));",
                "+    }",
                "+    return env;",
                "+  }",
                "+",
                "+  private SparkInterpreter getSparkInterpreter() throws InterpreterException {",
                "+    LazyOpenInterpreter lazy = null;",
                "+    SparkInterpreter spark = null;",
                "+    Interpreter p = getInterpreterInTheSameSessionByClassName(SparkInterpreter.class.getName());",
                "+",
                "+    while (p instanceof WrappedInterpreter) {",
                "+      if (p instanceof LazyOpenInterpreter) {",
                "+        lazy = (LazyOpenInterpreter) p;",
                "+      }",
                "+      p = ((WrappedInterpreter) p).getInnerInterpreter();",
                "+    }",
                "+    spark = (SparkInterpreter) p;",
                "+",
                "+    if (lazy != null) {",
                "+      lazy.open();",
                "+    }",
                "+    return spark;",
                "+  }",
                "+",
                "+  @Override",
                "+  public void cancel(InterpreterContext context) throws InterpreterException {",
                "+    super.cancel(context);",
                "+    sparkInterpreter.cancel(context);",
                "+  }",
                "+",
                "+  @Override",
                "+  public void close() throws InterpreterException {",
                "+    super.close();",
                "+    if (sparkInterpreter != null) {",
                "+      sparkInterpreter.close();",
                "+    }",
                "+  }",
                "+",
                "+  @Override",
                "+  public int getProgress(InterpreterContext context) throws InterpreterException {",
                "+    return sparkInterpreter.getProgress(context);",
                "+  }",
                "+",
                "+  public boolean isSpark2() {",
                "+    return sparkInterpreter.getSparkVersion().newerThanEquals(SparkVersion.SPARK_2_0_0);",
                "+  }",
                "+",
                "+  public JavaSparkContext getJavaSparkContext() {",
                "+    return sparkInterpreter.getJavaSparkContext();",
                "+  }",
                "+",
                "+  public Object getSQLContext() {",
                "+    return sparkInterpreter.getSQLContext();",
                "+  }",
                "+",
                "+  public Object getSparkSession() {",
                "+    return sparkInterpreter.getSparkSession();",
                "+  }",
                "+}",
                "diff --git a/spark/interpreter/src/main/java/org/apache/zeppelin/spark/NewSparkInterpreter.java b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/NewSparkInterpreter.java",
                "new file mode 100644",
                "index 000000000..1d3ccd65f",
                "--- /dev/null",
                "+++ b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/NewSparkInterpreter.java",
                "@@ -0,0 +1,390 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.spark;",
                "+",
                "+import com.google.common.collect.Lists;",
                "+import org.apache.commons.lang.StringUtils;",
                "+import org.apache.commons.lang3.exception.ExceptionUtils;",
                "+import org.apache.spark.SparkConf;",
                "+import org.apache.spark.SparkContext;",
                "+import org.apache.spark.api.java.JavaSparkContext;",
                "+import org.apache.spark.scheduler.SparkListenerJobStart;",
                "+import org.apache.spark.sql.SQLContext;",
                "+import org.apache.spark.ui.jobs.JobProgressListener;",
                "+import org.apache.zeppelin.interpreter.BaseZeppelinContext;",
                "+import org.apache.zeppelin.interpreter.DefaultInterpreterProperty;",
                "+import org.apache.zeppelin.interpreter.Interpreter;",
                "+import org.apache.zeppelin.interpreter.InterpreterContext;",
                "+import org.apache.zeppelin.interpreter.InterpreterException;",
                "+import org.apache.zeppelin.interpreter.InterpreterHookRegistry;",
                "+import org.apache.zeppelin.interpreter.InterpreterResult;",
                "+import org.apache.zeppelin.interpreter.WrappedInterpreter;",
                "+import org.apache.zeppelin.interpreter.remote.RemoteEventClientWrapper;",
                "+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;",
                "+import org.apache.zeppelin.spark.dep.SparkDependencyContext;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+import java.io.File;",
                "+import java.io.IOException;",
                "+import java.lang.reflect.InvocationTargetException;",
                "+import java.lang.reflect.Method;",
                "+import java.util.ArrayList;",
                "+import java.util.HashMap;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+import java.util.Properties;",
                "+",
                "+/**",
                "+ * SparkInterpreter of Java implementation. It is just wrapper of Spark211Interpreter",
                "+ * and Spark210Interpreter.",
                "+ */",
                "+public class NewSparkInterpreter extends AbstractSparkInterpreter {",
                "+",
                "+  private static final Logger LOGGER = LoggerFactory.getLogger(SparkInterpreter.class);",
                "+",
                "+  private BaseSparkScalaInterpreter innerInterpreter;",
                "+  private Map<String, String> innerInterpreterClassMap = new HashMap<>();",
                "+  private SparkContext sc;",
                "+  private JavaSparkContext jsc;",
                "+  private SQLContext sqlContext;",
                "+  private Object sparkSession;",
                "+",
                "+  private SparkZeppelinContext z;",
                "+  private SparkVersion sparkVersion;",
                "+  private boolean enableSupportedVersionCheck;",
                "+  private String sparkUrl;",
                "+",
                "+  private static InterpreterHookRegistry hooks;",
                "+",
                "+",
                "+  public NewSparkInterpreter(Properties properties) {",
                "+    super(properties);",
                "+    this.enableSupportedVersionCheck = java.lang.Boolean.parseBoolean(",
                "+        properties.getProperty(\"zeppelin.spark.enableSupportedVersionCheck\", \"true\"));",
                "+    innerInterpreterClassMap.put(\"2.10\", \"org.apache.zeppelin.spark.SparkScala210Interpreter\");",
                "+    innerInterpreterClassMap.put(\"2.11\", \"org.apache.zeppelin.spark.SparkScala211Interpreter\");",
                "+  }",
                "+",
                "+  @Override",
                "+  public void open() throws InterpreterException {",
                "+    try {",
                "+      String scalaVersion = extractScalaVersion();",
                "+      LOGGER.info(\"Using Scala Version: \" + scalaVersion);",
                "+      setupConfForPySpark();",
                "+      SparkConf conf = new SparkConf();",
                "+      for (Map.Entry<Object, Object> entry : getProperties().entrySet()) {",
                "+        if (!StringUtils.isBlank(entry.getValue().toString())) {",
                "+          conf.set(entry.getKey().toString(), entry.getValue().toString());",
                "+        }",
                "+        if (entry.getKey().toString().equals(\"zeppelin.spark.useHiveContext\")) {",
                "+          conf.set(\"spark.useHiveContext\", entry.getValue().toString());",
                "+        }",
                "+      }",
                "+      // use local mode for embedded spark mode when spark.master is not found",
                "+      conf.setIfMissing(\"spark.master\", \"local\");",
                "+",
                "+      String innerIntpClassName = innerInterpreterClassMap.get(scalaVersion);",
                "+      Class clazz = Class.forName(innerIntpClassName);",
                "+      this.innerInterpreter =",
                "+          (BaseSparkScalaInterpreter) clazz.getConstructor(SparkConf.class, List.class)",
                "+              .newInstance(conf, getDependencyFiles());",
                "+      this.innerInterpreter.open();",
                "+",
                "+      sc = this.innerInterpreter.sc();",
                "+      jsc = JavaSparkContext.fromSparkContext(sc);",
                "+      sparkVersion = SparkVersion.fromVersionString(sc.version());",
                "+      if (enableSupportedVersionCheck && sparkVersion.isUnsupportedVersion()) {",
                "+        throw new Exception(\"This is not officially supported spark version: \" + sparkVersion",
                "+            + \"\\nYou can set zeppelin.spark.enableSupportedVersionCheck to false if you really\" +",
                "+            \" want to try this version of spark.\");",
                "+      }",
                "+      sqlContext = this.innerInterpreter.sqlContext();",
                "+      sparkSession = this.innerInterpreter.sparkSession();",
                "+      sparkUrl = this.innerInterpreter.sparkUrl();",
                "+      setupListeners();",
                "+",
                "+      hooks = getInterpreterGroup().getInterpreterHookRegistry();",
                "+      z = new SparkZeppelinContext(sc, hooks,",
                "+          Integer.parseInt(getProperty(\"zeppelin.spark.maxResult\")));",
                "+      this.innerInterpreter.bind(\"z\", z.getClass().getCanonicalName(), z,",
                "+          Lists.newArrayList(\"@transient\"));",
                "+    } catch (Exception e) {",
                "+      LOGGER.error(ExceptionUtils.getStackTrace(e));",
                "+      throw new InterpreterException(\"Fail to open SparkInterpreter\", e);",
                "+    }",
                "+  }",
                "+",
                "+  private void setupConfForPySpark() {",
                "+    String sparkHome = getProperty(\"SPARK_HOME\");",
                "+    File pysparkFolder = null;",
                "+    if (sparkHome == null) {",
                "+      String zeppelinHome =",
                "+          new DefaultInterpreterProperty(\"ZEPPELIN_HOME\", \"zeppelin.home\", \"../../\")",
                "+              .getValue().toString();",
                "+      pysparkFolder = new File(zeppelinHome,",
                "+          \"interpreter\" + File.separator + \"spark\" + File.separator + \"pyspark\");",
                "+    } else {",
                "+      pysparkFolder = new File(sparkHome, \"python\" + File.separator + \"lib\");",
                "+    }",
                "+",
                "+    ArrayList<String> pysparkPackages = new ArrayList<>();",
                "+    for (File file : pysparkFolder.listFiles()) {",
                "+      if (file.getName().equals(\"pyspark.zip\")) {",
                "+        pysparkPackages.add(file.getAbsolutePath());",
                "+      }",
                "+      if (file.getName().startsWith(\"py4j-\")) {",
                "+        pysparkPackages.add(file.getAbsolutePath());",
                "+      }",
                "+    }",
                "+",
                "+    if (pysparkPackages.size() != 2) {",
                "+      throw new RuntimeException(\"Not correct number of pyspark packages: \" +",
                "+          StringUtils.join(pysparkPackages, \",\"));",
                "+    }",
                "+    // Distribute two libraries(pyspark.zip and py4j-*.zip) to workers",
                "+    System.setProperty(\"spark.files\", mergeProperty(System.getProperty(\"spark.files\", \"\"),",
                "+        StringUtils.join(pysparkPackages, \",\")));",
                "+    System.setProperty(\"spark.submit.pyFiles\", mergeProperty(",
                "+        System.getProperty(\"spark.submit.pyFiles\", \"\"), StringUtils.join(pysparkPackages, \",\")));",
                "+",
                "+  }",
                "+",
                "+  private String mergeProperty(String originalValue, String appendedValue) {",
                "+    if (StringUtils.isBlank(originalValue)) {",
                "+      return appendedValue;",
                "+    }",
                "+    return originalValue + \",\" + appendedValue;",
                "+  }",
                "+",
                "+  @Override",
                "+  public void close() {",
                "+    LOGGER.info(\"Close SparkInterpreter\");",
                "+    innerInterpreter.close();",
                "+  }",
                "+",
                "+  @Override",
                "+  public InterpreterResult interpret(String st, InterpreterContext context) {",
                "+    InterpreterContext.set(context);",
                "+    z.setGui(context.getGui());",
                "+    z.setNoteGui(context.getNoteGui());",
                "+    z.setInterpreterContext(context);",
                "+    populateSparkWebUrl(context);",
                "+    String jobDesc = \"Started by: \" + Utils.getUserName(context.getAuthenticationInfo());",
                "+    sc.setJobGroup(Utils.buildJobGroupId(context), jobDesc, false);",
                "+    return innerInterpreter.interpret(st, context);",
                "+  }",
                "+",
                "+  @Override",
                "+  public void cancel(InterpreterContext context) {",
                "+    sc.cancelJobGroup(Utils.buildJobGroupId(context));",
                "+  }",
                "+",
                "+  @Override",
                "+  public List<InterpreterCompletion> completion(String buf,",
                "+                                                int cursor,",
                "+                                                InterpreterContext interpreterContext) {",
                "+    LOGGER.debug(\"buf: \" + buf + \", cursor:\" + cursor);",
                "+    return innerInterpreter.completion(buf, cursor, interpreterContext);",
                "+  }",
                "+",
                "+  @Override",
                "+  public FormType getFormType() {",
                "+    return FormType.NATIVE;",
                "+  }",
                "+",
                "+  @Override",
                "+  public int getProgress(InterpreterContext context) {",
                "+    return innerInterpreter.getProgress(Utils.buildJobGroupId(context), context);",
                "+  }",
                "+",
                "+  private void setupListeners() {",
                "+    JobProgressListener pl = new JobProgressListener(sc.getConf()) {",
                "+      @Override",
                "+      public synchronized void onJobStart(SparkListenerJobStart jobStart) {",
                "+        super.onJobStart(jobStart);",
                "+        int jobId = jobStart.jobId();",
                "+        String jobGroupId = jobStart.properties().getProperty(\"spark.jobGroup.id\");",
                "+        String uiEnabled = jobStart.properties().getProperty(\"spark.ui.enabled\");",
                "+        String jobUrl = getJobUrl(jobId);",
                "+        String noteId = Utils.getNoteId(jobGroupId);",
                "+        String paragraphId = Utils.getParagraphId(jobGroupId);",
                "+        // Button visible if Spark UI property not set, set as invalid boolean or true",
                "+        java.lang.Boolean showSparkUI =",
                "+            uiEnabled == null || !uiEnabled.trim().toLowerCase().equals(\"false\");",
                "+        if (showSparkUI && jobUrl != null) {",
                "+          RemoteEventClientWrapper eventClient = BaseZeppelinContext.getEventClient();",
                "+          Map<String, String> infos = new java.util.HashMap<>();",
                "+          infos.put(\"jobUrl\", jobUrl);",
                "+          infos.put(\"label\", \"SPARK JOB\");",
                "+          infos.put(\"tooltip\", \"View in Spark web UI\");",
                "+          if (eventClient != null) {",
                "+            eventClient.onParaInfosReceived(noteId, paragraphId, infos);",
                "+          }",
                "+        }",
                "+      }",
                "+",
                "+      private String getJobUrl(int jobId) {",
                "+        String jobUrl = null;",
                "+        if (sparkUrl != null) {",
                "+          jobUrl = sparkUrl + \"/jobs/job?id=\" + jobId;",
                "+        }",
                "+        return jobUrl;",
                "+      }",
                "+    };",
                "+    try {",
                "+      Object listenerBus = sc.getClass().getMethod(\"listenerBus\").invoke(sc);",
                "+      Method[] methods = listenerBus.getClass().getMethods();",
                "+      Method addListenerMethod = null;",
                "+      for (Method m : methods) {",
                "+        if (!m.getName().equals(\"addListener\")) {",
                "+          continue;",
                "+        }",
                "+        Class<?>[] parameterTypes = m.getParameterTypes();",
                "+        if (parameterTypes.length != 1) {",
                "+          continue;",
                "+        }",
                "+        if (!parameterTypes[0].isAssignableFrom(JobProgressListener.class)) {",
                "+          continue;",
                "+        }",
                "+        addListenerMethod = m;",
                "+        break;",
                "+      }",
                "+      if (addListenerMethod != null) {",
                "+        addListenerMethod.invoke(listenerBus, pl);",
                "+      }",
                "+    } catch (NoSuchMethodException | SecurityException | IllegalAccessException",
                "+        | IllegalArgumentException | InvocationTargetException e) {",
                "+      LOGGER.error(e.toString(), e);",
                "+    }",
                "+  }",
                "+",
                "+  public SparkZeppelinContext getZeppelinContext() {",
                "+    return this.z;",
                "+  }",
                "+",
                "+  public SparkContext getSparkContext() {",
                "+    return this.sc;",
                "+  }",
                "+",
                "+  @Override",
                "+  public SQLContext getSQLContext() {",
                "+    return sqlContext;",
                "+  }",
                "+",
                "+  public JavaSparkContext getJavaSparkContext() {",
                "+    return this.jsc;",
                "+  }",
                "+",
                "+  public Object getSparkSession() {",
                "+    return sparkSession;",
                "+  }",
                "+",
                "+  public SparkVersion getSparkVersion() {",
                "+    return sparkVersion;",
                "+  }",
                "+",
                "+  private DepInterpreter getDepInterpreter() {",
                "+    Interpreter p = getInterpreterInTheSameSessionByClassName(DepInterpreter.class.getName());",
                "+    if (p == null) {",
                "+      return null;",
                "+    }",
                "+",
                "+    while (p instanceof WrappedInterpreter) {",
                "+      p = ((WrappedInterpreter) p).getInnerInterpreter();",
                "+    }",
                "+    return (DepInterpreter) p;",
                "+  }",
                "+",
                "+  private String extractScalaVersion() throws IOException, InterruptedException {",
                "+    String scalaVersionString = scala.util.Properties.versionString();",
                "+    if (scalaVersionString.contains(\"version 2.10\")) {",
                "+      return \"2.10\";",
                "+    } else {",
                "+      return \"2.11\";",
                "+    }",
                "+  }",
                "+",
                "+  public void populateSparkWebUrl(InterpreterContext ctx) {",
                "+    Map<String, String> infos = new java.util.HashMap<>();",
                "+    infos.put(\"url\", sparkUrl);",
                "+    String uiEnabledProp = properties.getProperty(\"spark.ui.enabled\", \"true\");",
                "+    java.lang.Boolean uiEnabled = java.lang.Boolean.parseBoolean(",
                "+        uiEnabledProp.trim());",
                "+    if (!uiEnabled) {",
                "+      infos.put(\"message\", \"Spark UI disabled\");",
                "+    } else {",
                "+      if (StringUtils.isNotBlank(sparkUrl)) {",
                "+        infos.put(\"message\", \"Spark UI enabled\");",
                "+      } else {",
                "+        infos.put(\"message\", \"No spark url defined\");",
                "+      }",
                "+    }",
                "+    if (ctx != null && ctx.getClient() != null) {",
                "+      LOGGER.debug(\"Sending metadata to Zeppelin server: {}\", infos.toString());",
                "+      getZeppelinContext().setEventClient(ctx.getClient());",
                "+      ctx.getClient().onMetaInfosReceived(infos);",
                "+    }",
                "+  }",
                "+",
                "+  public boolean isSparkContextInitialized() {",
                "+    return this.sc != null;",
                "+  }",
                "+",
                "+  private List<String> getDependencyFiles() {",
                "+    List<String> depFiles = new ArrayList<>();",
                "+    // add jar from DepInterpreter",
                "+    DepInterpreter depInterpreter = getDepInterpreter();",
                "+    if (depInterpreter != null) {",
                "+      SparkDependencyContext depc = depInterpreter.getDependencyContext();",
                "+      if (depc != null) {",
                "+        List<File> files = depc.getFilesDist();",
                "+        if (files != null) {",
                "+          for (File f : files) {",
                "+            depFiles.add(f.getAbsolutePath());",
                "+          }",
                "+        }",
                "+      }",
                "+    }",
                "+",
                "+    // add jar from local repo",
                "+    String localRepo = getProperty(\"zeppelin.interpreter.localRepo\");",
                "+    if (localRepo != null) {",
                "+      File localRepoDir = new File(localRepo);",
                "+      if (localRepoDir.exists()) {",
                "+        File[] files = localRepoDir.listFiles();",
                "+        if (files != null) {",
                "+          for (File f : files) {",
                "+            depFiles.add(f.getAbsolutePath());",
                "+          }",
                "+        }",
                "+      }",
                "+    }",
                "+    return depFiles;",
                "+  }",
                "+",
                "+  @Override",
                "+  public String getSparkUIUrl() {",
                "+    return sparkUrl;",
                "+  }",
                "+",
                "+  @Override",
                "+  public boolean isUnsupportedSparkVersion() {",
                "+    return enableSupportedVersionCheck  && sparkVersion.isUnsupportedVersion();",
                "+  }",
                "+}",
                "diff --git a/spark/interpreter/src/main/java/org/apache/zeppelin/spark/OldSparkInterpreter.java b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/OldSparkInterpreter.java",
                "new file mode 100644",
                "index 000000000..6a54c3b37",
                "--- /dev/null",
                "+++ b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/OldSparkInterpreter.java",
                "@@ -0,0 +1,1525 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.spark;",
                "+",
                "+import java.io.File;",
                "+import java.io.IOException;",
                "+import java.io.PrintWriter;",
                "+import java.lang.reflect.Constructor;",
                "+import java.lang.reflect.Field;",
                "+import java.lang.reflect.InvocationTargetException;",
                "+import java.lang.reflect.Method;",
                "+import java.net.URL;",
                "+import java.net.URLClassLoader;",
                "+import java.util.LinkedList;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+import java.util.Properties;",
                "+import java.util.Set;",
                "+import java.util.concurrent.atomic.AtomicInteger;",
                "+",
                "+import org.apache.commons.lang3.StringUtils;",
                "+import org.apache.hadoop.security.UserGroupInformation;",
                "+import org.apache.spark.SecurityManager;",
                "+import org.apache.spark.SparkConf;",
                "+import org.apache.spark.SparkContext;",
                "+import org.apache.spark.SparkEnv;",
                "+import org.apache.spark.api.java.JavaSparkContext;",
                "+import org.apache.spark.repl.SparkILoop;",
                "+import org.apache.spark.scheduler.ActiveJob;",
                "+import org.apache.spark.scheduler.DAGScheduler;",
                "+import org.apache.spark.scheduler.Pool;",
                "+import org.apache.spark.scheduler.SparkListenerJobStart;",
                "+import org.apache.spark.sql.SQLContext;",
                "+import org.apache.spark.ui.SparkUI;",
                "+import org.apache.spark.ui.jobs.JobProgressListener;",
                "+import org.apache.zeppelin.interpreter.BaseZeppelinContext;",
                "+import org.apache.zeppelin.interpreter.Interpreter;",
                "+import org.apache.zeppelin.interpreter.InterpreterContext;",
                "+import org.apache.zeppelin.interpreter.InterpreterException;",
                "+import org.apache.zeppelin.interpreter.InterpreterHookRegistry;",
                "+import org.apache.zeppelin.interpreter.InterpreterResult;",
                "+import org.apache.zeppelin.interpreter.InterpreterResult.Code;",
                "+import org.apache.zeppelin.interpreter.InterpreterUtils;",
                "+import org.apache.zeppelin.interpreter.WrappedInterpreter;",
                "+import org.apache.zeppelin.interpreter.remote.RemoteEventClientWrapper;",
                "+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;",
                "+import org.apache.zeppelin.interpreter.util.InterpreterOutputStream;",
                "+import org.apache.zeppelin.resource.ResourcePool;",
                "+import org.apache.zeppelin.resource.WellKnownResourceName;",
                "+import org.apache.zeppelin.scheduler.Scheduler;",
                "+import org.apache.zeppelin.scheduler.SchedulerFactory;",
                "+import org.apache.zeppelin.spark.dep.SparkDependencyContext;",
                "+import org.apache.zeppelin.spark.dep.SparkDependencyResolver;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+import scala.Console;",
                "+import scala.Enumeration.Value;",
                "+import scala.None;",
                "+import scala.Option;",
                "+import scala.Some;",
                "+import scala.Tuple2;",
                "+import scala.collection.Iterator;",
                "+import scala.collection.JavaConversions;",
                "+import scala.collection.JavaConverters;",
                "+import scala.collection.Seq;",
                "+import scala.collection.convert.WrapAsJava$;",
                "+import scala.collection.mutable.HashMap;",
                "+import scala.collection.mutable.HashSet;",
                "+import scala.reflect.io.AbstractFile;",
                "+import scala.tools.nsc.Global;",
                "+import scala.tools.nsc.Settings;",
                "+import scala.tools.nsc.interpreter.Completion.Candidates;",
                "+import scala.tools.nsc.interpreter.Completion.ScalaCompleter;",
                "+import scala.tools.nsc.interpreter.IMain;",
                "+import scala.tools.nsc.interpreter.Results;",
                "+import scala.tools.nsc.settings.MutableSettings;",
                "+import scala.tools.nsc.settings.MutableSettings.BooleanSetting;",
                "+import scala.tools.nsc.settings.MutableSettings.PathSetting;",
                "+",
                "+/**",
                "+ * Spark interpreter for Zeppelin.",
                "+ *",
                "+ */",
                "+public class OldSparkInterpreter extends AbstractSparkInterpreter {",
                "+  public static Logger logger = LoggerFactory.getLogger(OldSparkInterpreter.class);",
                "+",
                "+  private SparkZeppelinContext z;",
                "+  private SparkILoop interpreter;",
                "+  /**",
                "+   * intp - org.apache.spark.repl.SparkIMain (scala 2.10)",
                "+   * intp - scala.tools.nsc.interpreter.IMain; (scala 2.11)",
                "+   */",
                "+  private Object intp;",
                "+  private SparkConf conf;",
                "+  private static SparkContext sc;",
                "+  private static SQLContext sqlc;",
                "+  private static InterpreterHookRegistry hooks;",
                "+  private static SparkEnv env;",
                "+  private static Object sparkSession;    // spark 2.x",
                "+  private static JobProgressListener sparkListener;",
                "+  private static AbstractFile classOutputDir;",
                "+  private static Integer sharedInterpreterLock = new Integer(0);",
                "+  private static AtomicInteger numReferenceOfSparkContext = new AtomicInteger(0);",
                "+",
                "+  private InterpreterOutputStream out;",
                "+  private SparkDependencyResolver dep;",
                "+  private static String sparkUrl;",
                "+",
                "+  /**",
                "+   * completer - org.apache.spark.repl.SparkJLineCompletion (scala 2.10)",
                "+   */",
                "+  private Object completer = null;",
                "+",
                "+  private Map<String, Object> binder;",
                "+  private SparkVersion sparkVersion;",
                "+  private static File outputDir;          // class outputdir for scala 2.11",
                "+  private Object classServer;      // classserver for scala 2.11",
                "+  private JavaSparkContext jsc;",
                "+  private boolean enableSupportedVersionCheck;",
                "+",
                "+  public OldSparkInterpreter(Properties property) {",
                "+    super(property);",
                "+    out = new InterpreterOutputStream(logger);",
                "+  }",
                "+",
                "+  public OldSparkInterpreter(Properties property, SparkContext sc) {",
                "+    this(property);",
                "+",
                "+    this.sc = sc;",
                "+    env = SparkEnv.get();",
                "+    sparkListener = setupListeners(this.sc);",
                "+  }",
                "+",
                "+  public SparkContext getSparkContext() {",
                "+    synchronized (sharedInterpreterLock) {",
                "+      if (sc == null) {",
                "+        sc = createSparkContext();",
                "+        env = SparkEnv.get();",
                "+        sparkListener = setupListeners(sc);",
                "+      }",
                "+      return sc;",
                "+    }",
                "+  }",
                "+",
                "+  public JavaSparkContext getJavaSparkContext() {",
                "+    synchronized (sharedInterpreterLock) {",
                "+      if (jsc == null) {",
                "+        jsc = JavaSparkContext.fromSparkContext(sc);",
                "+      }",
                "+      return jsc;",
                "+    }",
                "+  }",
                "+",
                "+  public boolean isSparkContextInitialized() {",
                "+    synchronized (sharedInterpreterLock) {",
                "+      return sc != null;",
                "+    }",
                "+  }",
                "+",
                "+  static JobProgressListener setupListeners(SparkContext context) {",
                "+    JobProgressListener pl = new JobProgressListener(context.getConf()) {",
                "+      @Override",
                "+      public synchronized void onJobStart(SparkListenerJobStart jobStart) {",
                "+        super.onJobStart(jobStart);",
                "+        int jobId = jobStart.jobId();",
                "+        String jobGroupId = jobStart.properties().getProperty(\"spark.jobGroup.id\");",
                "+        String uiEnabled = jobStart.properties().getProperty(\"spark.ui.enabled\");",
                "+        String jobUrl = getJobUrl(jobId);",
                "+        String noteId = Utils.getNoteId(jobGroupId);",
                "+        String paragraphId = Utils.getParagraphId(jobGroupId);",
                "+        // Button visible if Spark UI property not set, set as invalid boolean or true",
                "+        java.lang.Boolean showSparkUI =",
                "+            uiEnabled == null || !uiEnabled.trim().toLowerCase().equals(\"false\");",
                "+        if (showSparkUI && jobUrl != null) {",
                "+          RemoteEventClientWrapper eventClient = BaseZeppelinContext.getEventClient();",
                "+          Map<String, String> infos = new java.util.HashMap<>();",
                "+          infos.put(\"jobUrl\", jobUrl);",
                "+          infos.put(\"label\", \"SPARK JOB\");",
                "+          infos.put(\"tooltip\", \"View in Spark web UI\");",
                "+          if (eventClient != null) {",
                "+            eventClient.onParaInfosReceived(noteId, paragraphId, infos);",
                "+          }",
                "+        }",
                "+      }",
                "+",
                "+      private String getJobUrl(int jobId) {",
                "+        String jobUrl = null;",
                "+        if (sparkUrl != null) {",
                "+          jobUrl = sparkUrl + \"/jobs/job/?id=\" + jobId;",
                "+        }",
                "+        return jobUrl;",
                "+      }",
                "+",
                "+    };",
                "+    try {",
                "+      Object listenerBus = context.getClass().getMethod(\"listenerBus\").invoke(context);",
                "+",
                "+      Method[] methods = listenerBus.getClass().getMethods();",
                "+      Method addListenerMethod = null;",
                "+      for (Method m : methods) {",
                "+        if (!m.getName().equals(\"addListener\")) {",
                "+          continue;",
                "+        }",
                "+",
                "+        Class<?>[] parameterTypes = m.getParameterTypes();",
                "+",
                "+        if (parameterTypes.length != 1) {",
                "+          continue;",
                "+        }",
                "+",
                "+        if (!parameterTypes[0].isAssignableFrom(JobProgressListener.class)) {",
                "+          continue;",
                "+        }",
                "+",
                "+        addListenerMethod = m;",
                "+        break;",
                "+      }",
                "+",
                "+      if (addListenerMethod != null) {",
                "+        addListenerMethod.invoke(listenerBus, pl);",
                "+      } else {",
                "+        return null;",
                "+      }",
                "+    } catch (NoSuchMethodException | SecurityException | IllegalAccessException",
                "+        | IllegalArgumentException | InvocationTargetException e) {",
                "+      logger.error(e.toString(), e);",
                "+      return null;",
                "+    }",
                "+    return pl;",
                "+  }",
                "+",
                "+  private boolean useHiveContext() {",
                "+    return java.lang.Boolean.parseBoolean(getProperty(\"zeppelin.spark.useHiveContext\"));",
                "+  }",
                "+",
                "+  /**",
                "+   * See org.apache.spark.sql.SparkSession.hiveClassesArePresent",
                "+   * @return",
                "+   */",
                "+  private boolean hiveClassesArePresent() {",
                "+    try {",
                "+      this.getClass().forName(\"org.apache.spark.sql.hive.execution.InsertIntoHiveTable\");",
                "+      this.getClass().forName(\"org.apache.hadoop.hive.conf.HiveConf\");",
                "+      return true;",
                "+    } catch (ClassNotFoundException | NoClassDefFoundError e) {",
                "+      return false;",
                "+    }",
                "+  }",
                "+",
                "+  private boolean importImplicit() {",
                "+    return java.lang.Boolean.parseBoolean(getProperty(\"zeppelin.spark.importImplicit\"));",
                "+  }",
                "+",
                "+  public Object getSparkSession() {",
                "+    synchronized (sharedInterpreterLock) {",
                "+      if (sparkSession == null) {",
                "+        createSparkSession();",
                "+      }",
                "+      return sparkSession;",
                "+    }",
                "+  }",
                "+",
                "+  public SQLContext getSQLContext() {",
                "+    synchronized (sharedInterpreterLock) {",
                "+      if (Utils.isSpark2()) {",
                "+        return getSQLContext_2();",
                "+      } else {",
                "+        return getSQLContext_1();",
                "+      }",
                "+    }",
                "+  }",
                "+",
                "+  /**",
                "+   * Get SQLContext for spark 2.x",
                "+   */",
                "+  private SQLContext getSQLContext_2() {",
                "+    if (sqlc == null) {",
                "+      sqlc = (SQLContext) Utils.invokeMethod(sparkSession, \"sqlContext\");",
                "+    }",
                "+    return sqlc;",
                "+  }",
                "+",
                "+  public SQLContext getSQLContext_1() {",
                "+    if (sqlc == null) {",
                "+      if (useHiveContext()) {",
                "+        String name = \"org.apache.spark.sql.hive.HiveContext\";",
                "+        Constructor<?> hc;",
                "+        try {",
                "+          hc = getClass().getClassLoader().loadClass(name)",
                "+              .getConstructor(SparkContext.class);",
                "+          sqlc = (SQLContext) hc.newInstance(getSparkContext());",
                "+        } catch (NoSuchMethodException | SecurityException",
                "+            | ClassNotFoundException | InstantiationException",
                "+            | IllegalAccessException | IllegalArgumentException",
                "+            | InvocationTargetException e) {",
                "+          logger.warn(\"Can't create HiveContext. Fallback to SQLContext\", e);",
                "+          // when hive dependency is not loaded, it'll fail.",
                "+          // in this case SQLContext can be used.",
                "+          sqlc = new SQLContext(getSparkContext());",
                "+        }",
                "+      } else {",
                "+        sqlc = new SQLContext(getSparkContext());",
                "+      }",
                "+    }",
                "+    return sqlc;",
                "+  }",
                "+",
                "+",
                "+  public SparkDependencyResolver getDependencyResolver() {",
                "+    if (dep == null) {",
                "+      dep = new SparkDependencyResolver(",
                "+          (Global) Utils.invokeMethod(intp, \"global\"),",
                "+          (ClassLoader) Utils.invokeMethod(Utils.invokeMethod(intp, \"classLoader\"), \"getParent\"),",
                "+          sc,",
                "+          getProperty(\"zeppelin.dep.localrepo\"),",
                "+          getProperty(\"zeppelin.dep.additionalRemoteRepository\"));",
                "+    }",
                "+    return dep;",
                "+  }",
                "+",
                "+  private DepInterpreter getDepInterpreter() {",
                "+    Interpreter p = getInterpreterInTheSameSessionByClassName(DepInterpreter.class.getName());",
                "+    if (p == null) {",
                "+      return null;",
                "+    }",
                "+",
                "+    while (p instanceof WrappedInterpreter) {",
                "+      p = ((WrappedInterpreter) p).getInnerInterpreter();",
                "+    }",
                "+    return (DepInterpreter) p;",
                "+  }",
                "+",
                "+  public boolean isYarnMode() {",
                "+    String master = getProperty(\"master\");",
                "+    if (master == null) {",
                "+      master = getProperty(\"spark.master\", \"local[*]\");",
                "+    }",
                "+    return master.startsWith(\"yarn\");",
                "+  }",
                "+",
                "+  /**",
                "+   * Spark 2.x",
                "+   * Create SparkSession",
                "+   */",
                "+  public Object createSparkSession() {",
                "+    // use local mode for embedded spark mode when spark.master is not found",
                "+    conf.setIfMissing(\"spark.master\", \"local\");",
                "+    logger.info(\"------ Create new SparkSession {} -------\", conf.get(\"spark.master\"));",
                "+    String execUri = System.getenv(\"SPARK_EXECUTOR_URI\");",
                "+    if (outputDir != null) {",
                "+      conf.set(\"spark.repl.class.outputDir\", outputDir.getAbsolutePath());",
                "+    }",
                "+",
                "+    if (execUri != null) {",
                "+      conf.set(\"spark.executor.uri\", execUri);",
                "+    }",
                "+    conf.set(\"spark.scheduler.mode\", \"FAIR\");",
                "+",
                "+    Properties intpProperty = getProperties();",
                "+    for (Object k : intpProperty.keySet()) {",
                "+      String key = (String) k;",
                "+      String val = toString(intpProperty.get(key));",
                "+      if (!val.trim().isEmpty()) {",
                "+        if (key.startsWith(\"spark.\")) {",
                "+          logger.debug(String.format(\"SparkConf: key = [%s], value = [%s]\", key, val));",
                "+          conf.set(key, val);",
                "+        }",
                "+        if (key.startsWith(\"zeppelin.spark.\")) {",
                "+          String sparkPropertyKey = key.substring(\"zeppelin.spark.\".length());",
                "+          logger.debug(String.format(\"SparkConf: key = [%s], value = [%s]\", sparkPropertyKey, val));",
                "+          conf.set(sparkPropertyKey, val);",
                "+        }",
                "+      }",
                "+    }",
                "+",
                "+    Class SparkSession = Utils.findClass(\"org.apache.spark.sql.SparkSession\");",
                "+    Object builder = Utils.invokeStaticMethod(SparkSession, \"builder\");",
                "+    Utils.invokeMethod(builder, \"config\", new Class[]{ SparkConf.class }, new Object[]{ conf });",
                "+",
                "+    if (useHiveContext()) {",
                "+      if (hiveClassesArePresent()) {",
                "+        Utils.invokeMethod(builder, \"enableHiveSupport\");",
                "+        sparkSession = Utils.invokeMethod(builder, \"getOrCreate\");",
                "+        logger.info(\"Created Spark session with Hive support\");",
                "+      } else {",
                "+        Utils.invokeMethod(builder, \"config\",",
                "+            new Class[]{ String.class, String.class},",
                "+            new Object[]{ \"spark.sql.catalogImplementation\", \"in-memory\"});",
                "+        sparkSession = Utils.invokeMethod(builder, \"getOrCreate\");",
                "+        logger.info(\"Created Spark session with Hive support use in-memory catalogImplementation\");",
                "+      }",
                "+    } else {",
                "+      sparkSession = Utils.invokeMethod(builder, \"getOrCreate\");",
                "+      logger.info(\"Created Spark session\");",
                "+    }",
                "+",
                "+    return sparkSession;",
                "+  }",
                "+",
                "+  public SparkContext createSparkContext() {",
                "+    if (Utils.isSpark2()) {",
                "+      return createSparkContext_2();",
                "+    } else {",
                "+      return createSparkContext_1();",
                "+    }",
                "+  }",
                "+",
                "+  /**",
                "+   * Create SparkContext for spark 2.x",
                "+   * @return",
                "+   */",
                "+  private SparkContext createSparkContext_2() {",
                "+    return (SparkContext) Utils.invokeMethod(sparkSession, \"sparkContext\");",
                "+  }",
                "+",
                "+  public SparkContext createSparkContext_1() {",
                "+    // use local mode for embedded spark mode when spark.master is not found",
                "+    if (!conf.contains(\"spark.master\")) {",
                "+      conf.setMaster(\"local\");",
                "+    }",
                "+    logger.info(\"------ Create new SparkContext {} -------\", conf.get(\"spark.master\"));",
                "+",
                "+    String execUri = System.getenv(\"SPARK_EXECUTOR_URI\");",
                "+    String[] jars = null;",
                "+",
                "+    if (Utils.isScala2_10()) {",
                "+      jars = (String[]) Utils.invokeStaticMethod(SparkILoop.class, \"getAddedJars\");",
                "+    } else {",
                "+      jars = (String[]) Utils.invokeStaticMethod(",
                "+          Utils.findClass(\"org.apache.spark.repl.Main\"), \"getAddedJars\");",
                "+    }",
                "+",
                "+    String classServerUri = null;",
                "+    String replClassOutputDirectory = null;",
                "+",
                "+    try { // in case of spark 1.1x, spark 1.2x",
                "+      Method classServer = intp.getClass().getMethod(\"classServer\");",
                "+      Object httpServer = classServer.invoke(intp);",
                "+      classServerUri = (String) Utils.invokeMethod(httpServer, \"uri\");",
                "+    } catch (NoSuchMethodException | SecurityException | IllegalAccessException",
                "+        | IllegalArgumentException | InvocationTargetException e) {",
                "+      // continue",
                "+    }",
                "+",
                "+    if (classServerUri == null) {",
                "+      try { // for spark 1.3x",
                "+        Method classServer = intp.getClass().getMethod(\"classServerUri\");",
                "+        classServerUri = (String) classServer.invoke(intp);",
                "+      } catch (NoSuchMethodException | SecurityException | IllegalAccessException",
                "+          | IllegalArgumentException | InvocationTargetException e) {",
                "+        // continue instead of: throw new InterpreterException(e);",
                "+        // Newer Spark versions (like the patched CDH5.7.0 one) don't contain this method",
                "+        logger.warn(String.format(\"Spark method classServerUri not available due to: [%s]\",",
                "+            e.getMessage()));",
                "+      }",
                "+    }",
                "+",
                "+    if (classServerUri == null) {",
                "+      try { // for RcpEnv",
                "+        Method getClassOutputDirectory = intp.getClass().getMethod(\"getClassOutputDirectory\");",
                "+        File classOutputDirectory = (File) getClassOutputDirectory.invoke(intp);",
                "+        replClassOutputDirectory = classOutputDirectory.getAbsolutePath();",
                "+      } catch (NoSuchMethodException | SecurityException | IllegalAccessException",
                "+          | IllegalArgumentException | InvocationTargetException e) {",
                "+        // continue",
                "+      }",
                "+    }",
                "+",
                "+    if (Utils.isScala2_11()) {",
                "+      classServer = createHttpServer(outputDir);",
                "+      Utils.invokeMethod(classServer, \"start\");",
                "+      classServerUri = (String) Utils.invokeMethod(classServer, \"uri\");",
                "+    }",
                "+",
                "+    if (classServerUri != null) {",
                "+      conf.set(\"spark.repl.class.uri\", classServerUri);",
                "+    }",
                "+",
                "+    if (replClassOutputDirectory != null) {",
                "+      conf.set(\"spark.repl.class.outputDir\", replClassOutputDirectory);",
                "+    }",
                "+",
                "+    if (jars.length > 0) {",
                "+      conf.setJars(jars);",
                "+    }",
                "+",
                "+    if (execUri != null) {",
                "+      conf.set(\"spark.executor.uri\", execUri);",
                "+    }",
                "+    conf.set(\"spark.scheduler.mode\", \"FAIR\");",
                "+",
                "+    Properties intpProperty = getProperties();",
                "+    for (Object k : intpProperty.keySet()) {",
                "+      String key = (String) k;",
                "+      String val = toString(intpProperty.get(key));",
                "+      if (!val.trim().isEmpty()) {",
                "+        if (key.startsWith(\"spark.\")) {",
                "+          logger.debug(String.format(\"SparkConf: key = [%s], value = [%s]\", key, val));",
                "+          conf.set(key, val);",
                "+        }",
                "+",
                "+        if (key.startsWith(\"zeppelin.spark.\")) {",
                "+          String sparkPropertyKey = key.substring(\"zeppelin.spark.\".length());",
                "+          logger.debug(String.format(\"SparkConf: key = [%s], value = [%s]\", sparkPropertyKey, val));",
                "+          conf.set(sparkPropertyKey, val);",
                "+        }",
                "+      }",
                "+    }",
                "+    SparkContext sparkContext = new SparkContext(conf);",
                "+    return sparkContext;",
                "+  }",
                "+",
                "+  static final String toString(Object o) {",
                "+    return (o instanceof String) ? (String) o : \"\";",
                "+  }",
                "+",
                "+  public static boolean useSparkSubmit() {",
                "+    return null != System.getenv(\"SPARK_SUBMIT\");",
                "+  }",
                "+",
                "+  public boolean printREPLOutput() {",
                "+    return java.lang.Boolean.parseBoolean(getProperty(\"zeppelin.spark.printREPLOutput\"));",
                "+  }",
                "+",
                "+  @Override",
                "+  public void open() throws InterpreterException {",
                "+    this.enableSupportedVersionCheck = java.lang.Boolean.parseBoolean(",
                "+        getProperty(\"zeppelin.spark.enableSupportedVersionCheck\", \"true\"));",
                "+",
                "+    // set properties and do login before creating any spark stuff for secured cluster",
                "+    if (isYarnMode()) {",
                "+      System.setProperty(\"SPARK_YARN_MODE\", \"true\");",
                "+    }",
                "+    if (getProperties().containsKey(\"spark.yarn.keytab\") &&",
                "+        getProperties().containsKey(\"spark.yarn.principal\")) {",
                "+      try {",
                "+        String keytab = getProperties().getProperty(\"spark.yarn.keytab\");",
                "+        String principal = getProperties().getProperty(\"spark.yarn.principal\");",
                "+        UserGroupInformation.loginUserFromKeytab(principal, keytab);",
                "+      } catch (IOException e) {",
                "+        throw new RuntimeException(\"Can not pass kerberos authentication\", e);",
                "+      }",
                "+    }",
                "+",
                "+    conf = new SparkConf();",
                "+    URL[] urls = getClassloaderUrls();",
                "+",
                "+    // Very nice discussion about how scala compiler handle classpath",
                "+    // https://groups.google.com/forum/#!topic/scala-user/MlVwo2xCCI0",
                "+",
                "+    /*",
                "+     * > val env = new nsc.Settings(errLogger) > env.usejavacp.value = true > val p = new",
                "+     * Interpreter(env) > p.setContextClassLoader > Alternatively you can set the class path through",
                "+     * nsc.Settings.classpath.",
                "+     *",
                "+     * >> val settings = new Settings() >> settings.usejavacp.value = true >>",
                "+     * settings.classpath.value += File.pathSeparator + >> System.getProperty(\"java.class.path\") >>",
                "+     * val in = new Interpreter(settings) { >> override protected def parentClassLoader =",
                "+     * getClass.getClassLoader >> } >> in.setContextClassLoader()",
                "+     */",
                "+    Settings settings = new Settings();",
                "+",
                "+    // process args",
                "+    String args = getProperty(\"args\");",
                "+    if (args == null) {",
                "+      args = \"\";",
                "+    }",
                "+",
                "+    String[] argsArray = args.split(\" \");",
                "+    LinkedList<String> argList = new LinkedList<>();",
                "+    for (String arg : argsArray) {",
                "+      argList.add(arg);",
                "+    }",
                "+",
                "+    DepInterpreter depInterpreter = getDepInterpreter();",
                "+    String depInterpreterClasspath = \"\";",
                "+    if (depInterpreter != null) {",
                "+      SparkDependencyContext depc = depInterpreter.getDependencyContext();",
                "+      if (depc != null) {",
                "+        List<File> files = depc.getFiles();",
                "+        if (files != null) {",
                "+          for (File f : files) {",
                "+            if (depInterpreterClasspath.length() > 0) {",
                "+              depInterpreterClasspath += File.pathSeparator;",
                "+            }",
                "+            depInterpreterClasspath += f.getAbsolutePath();",
                "+          }",
                "+        }",
                "+      }",
                "+    }",
                "+",
                "+",
                "+    if (Utils.isScala2_10()) {",
                "+      scala.collection.immutable.List<String> list =",
                "+          JavaConversions.asScalaBuffer(argList).toList();",
                "+",
                "+      Object sparkCommandLine = Utils.instantiateClass(",
                "+          \"org.apache.spark.repl.SparkCommandLine\",",
                "+          new Class[]{ scala.collection.immutable.List.class },",
                "+          new Object[]{ list });",
                "+",
                "+      settings = (Settings) Utils.invokeMethod(sparkCommandLine, \"settings\");",
                "+    } else {",
                "+      String sparkReplClassDir = getProperty(\"spark.repl.classdir\");",
                "+      if (sparkReplClassDir == null) {",
                "+        sparkReplClassDir = System.getProperty(\"spark.repl.classdir\");",
                "+      }",
                "+      if (sparkReplClassDir == null) {",
                "+        sparkReplClassDir = System.getProperty(\"java.io.tmpdir\");",
                "+      }",
                "+",
                "+      synchronized (sharedInterpreterLock) {",
                "+        if (outputDir == null) {",
                "+          outputDir = createTempDir(sparkReplClassDir);",
                "+        }",
                "+      }",
                "+      argList.add(\"-Yrepl-class-based\");",
                "+      argList.add(\"-Yrepl-outdir\");",
                "+      argList.add(outputDir.getAbsolutePath());",
                "+",
                "+      String classpath = \"\";",
                "+      if (conf.contains(\"spark.jars\")) {",
                "+        classpath = StringUtils.join(conf.get(\"spark.jars\").split(\",\"), File.separator);",
                "+      }",
                "+",
                "+      if (!depInterpreterClasspath.isEmpty()) {",
                "+        if (!classpath.isEmpty()) {",
                "+          classpath += File.separator;",
                "+        }",
                "+        classpath += depInterpreterClasspath;",
                "+      }",
                "+",
                "+      if (!classpath.isEmpty()) {",
                "+        argList.add(\"-classpath\");",
                "+        argList.add(classpath);",
                "+      }",
                "+",
                "+      scala.collection.immutable.List<String> list =",
                "+          JavaConversions.asScalaBuffer(argList).toList();",
                "+",
                "+      settings.processArguments(list, true);",
                "+    }",
                "+",
                "+    // set classpath for scala compiler",
                "+    PathSetting pathSettings = settings.classpath();",
                "+    String classpath = \"\";",
                "+",
                "+    List<File> paths = currentClassPath();",
                "+    for (File f : paths) {",
                "+      if (classpath.length() > 0) {",
                "+        classpath += File.pathSeparator;",
                "+      }",
                "+      classpath += f.getAbsolutePath();",
                "+    }",
                "+",
                "+    if (urls != null) {",
                "+      for (URL u : urls) {",
                "+        if (classpath.length() > 0) {",
                "+          classpath += File.pathSeparator;",
                "+        }",
                "+        classpath += u.getFile();",
                "+      }",
                "+    }",
                "+",
                "+    // add dependency from DepInterpreter",
                "+    if (classpath.length() > 0) {",
                "+      classpath += File.pathSeparator;",
                "+    }",
                "+    classpath += depInterpreterClasspath;",
                "+",
                "+    // add dependency from local repo",
                "+    String localRepo = getProperty(\"zeppelin.interpreter.localRepo\");",
                "+    if (localRepo != null) {",
                "+      File localRepoDir = new File(localRepo);",
                "+      if (localRepoDir.exists()) {",
                "+        File[] files = localRepoDir.listFiles();",
                "+        if (files != null) {",
                "+          for (File f : files) {",
                "+            if (classpath.length() > 0) {",
                "+              classpath += File.pathSeparator;",
                "+            }",
                "+            classpath += f.getAbsolutePath();",
                "+          }",
                "+        }",
                "+      }",
                "+    }",
                "+",
                "+    pathSettings.v_$eq(classpath);",
                "+    settings.scala$tools$nsc$settings$ScalaSettings$_setter_$classpath_$eq(pathSettings);",
                "+",
                "+    // set classloader for scala compiler",
                "+    settings.explicitParentLoader_$eq(new Some<>(Thread.currentThread()",
                "+        .getContextClassLoader()));",
                "+    BooleanSetting b = (BooleanSetting) settings.usejavacp();",
                "+    b.v_$eq(true);",
                "+    settings.scala$tools$nsc$settings$StandardScalaSettings$_setter_$usejavacp_$eq(b);",
                "+",
                "+    /* Required for scoped mode.",
                "+     * In scoped mode multiple scala compiler (repl) generates class in the same directory.",
                "+     * Class names is not randomly generated and look like '$line12.$read$$iw$$iw'",
                "+     * Therefore it's possible to generated class conflict(overwrite) with other repl generated",
                "+     * class.",
                "+     *",
                "+     * To prevent generated class name conflict,",
                "+     * change prefix of generated class name from each scala compiler (repl) instance.",
                "+     *",
                "+     * In Spark 2.x, REPL generated wrapper class name should compatible with the pattern",
                "+     * ^(\\$line(?:\\d+)\\.\\$read)(?:\\$\\$iw)+$",
                "+     *",
                "+     * As hashCode() can return a negative integer value and the minus character '-' is invalid",
                "+     * in a package name we change it to a numeric value '0' which still conforms to the regexp.",
                "+     *",
                "+     */",
                "+    System.setProperty(\"scala.repl.name.line\", (\"$line\" + this.hashCode()).replace('-', '0'));",
                "+",
                "+    // To prevent 'File name too long' error on some file system.",
                "+    MutableSettings.IntSetting numClassFileSetting = settings.maxClassfileName();",
                "+    numClassFileSetting.v_$eq(128);",
                "+    settings.scala$tools$nsc$settings$ScalaSettings$_setter_$maxClassfileName_$eq(",
                "+        numClassFileSetting);",
                "+",
                "+    synchronized (sharedInterpreterLock) {",
                "+      /* create scala repl */",
                "+      if (printREPLOutput()) {",
                "+        this.interpreter = new SparkILoop((java.io.BufferedReader) null, new PrintWriter(out));",
                "+      } else {",
                "+        this.interpreter = new SparkILoop((java.io.BufferedReader) null,",
                "+            new PrintWriter(Console.out(), false));",
                "+      }",
                "+",
                "+      interpreter.settings_$eq(settings);",
                "+",
                "+      interpreter.createInterpreter();",
                "+",
                "+      intp = Utils.invokeMethod(interpreter, \"intp\");",
                "+      Utils.invokeMethod(intp, \"setContextClassLoader\");",
                "+      Utils.invokeMethod(intp, \"initializeSynchronous\");",
                "+",
                "+      if (Utils.isScala2_10()) {",
                "+        if (classOutputDir == null) {",
                "+          classOutputDir = settings.outputDirs().getSingleOutput().get();",
                "+        } else {",
                "+          // change SparkIMain class output dir",
                "+          settings.outputDirs().setSingleOutput(classOutputDir);",
                "+          ClassLoader cl = (ClassLoader) Utils.invokeMethod(intp, \"classLoader\");",
                "+          try {",
                "+            Field rootField = cl.getClass().getSuperclass().getDeclaredField(\"root\");",
                "+            rootField.setAccessible(true);",
                "+            rootField.set(cl, classOutputDir);",
                "+          } catch (NoSuchFieldException | IllegalAccessException e) {",
                "+            logger.error(e.getMessage(), e);",
                "+          }",
                "+        }",
                "+      }",
                "+",
                "+      if (Utils.findClass(\"org.apache.spark.repl.SparkJLineCompletion\", true) != null) {",
                "+        completer = Utils.instantiateClass(",
                "+            \"org.apache.spark.repl.SparkJLineCompletion\",",
                "+            new Class[]{Utils.findClass(\"org.apache.spark.repl.SparkIMain\")},",
                "+            new Object[]{intp});",
                "+      } else if (Utils.findClass(",
                "+          \"scala.tools.nsc.interpreter.PresentationCompilerCompleter\", true) != null) {",
                "+        completer = Utils.instantiateClass(",
                "+            \"scala.tools.nsc.interpreter.PresentationCompilerCompleter\",",
                "+            new Class[]{ IMain.class },",
                "+            new Object[]{ intp });",
                "+      } else if (Utils.findClass(",
                "+          \"scala.tools.nsc.interpreter.JLineCompletion\", true) != null) {",
                "+        completer = Utils.instantiateClass(",
                "+            \"scala.tools.nsc.interpreter.JLineCompletion\",",
                "+            new Class[]{ IMain.class },",
                "+            new Object[]{ intp });",
                "+      }",
                "+",
                "+      if (Utils.isSpark2()) {",
                "+        sparkSession = getSparkSession();",
                "+      }",
                "+      sc = getSparkContext();",
                "+      if (sc.getPoolForName(\"fair\").isEmpty()) {",
                "+        Value schedulingMode = org.apache.spark.scheduler.SchedulingMode.FAIR();",
                "+        int minimumShare = 0;",
                "+        int weight = 1;",
                "+        Pool pool = new Pool(\"fair\", schedulingMode, minimumShare, weight);",
                "+        sc.taskScheduler().rootPool().addSchedulable(pool);",
                "+      }",
                "+",
                "+      sparkVersion = SparkVersion.fromVersionString(sc.version());",
                "+",
                "+      sqlc = getSQLContext();",
                "+",
                "+      dep = getDependencyResolver();",
                "+",
                "+      hooks = getInterpreterGroup().getInterpreterHookRegistry();",
                "+",
                "+      z = new SparkZeppelinContext(sc, hooks,",
                "+          Integer.parseInt(getProperty(\"zeppelin.spark.maxResult\")));",
                "+",
                "+      interpret(\"@transient val _binder = new java.util.HashMap[String, Object]()\");",
                "+      Map<String, Object> binder;",
                "+      if (Utils.isScala2_10()) {",
                "+        binder = (Map<String, Object>) getValue(\"_binder\");",
                "+      } else {",
                "+        binder = (Map<String, Object>) getLastObject();",
                "+      }",
                "+      binder.put(\"sc\", sc);",
                "+      binder.put(\"sqlc\", sqlc);",
                "+      binder.put(\"z\", z);",
                "+",
                "+      if (Utils.isSpark2()) {",
                "+        binder.put(\"spark\", sparkSession);",
                "+      }",
                "+",
                "+      interpret(\"@transient val z = \"",
                "+          + \"_binder.get(\\\"z\\\").asInstanceOf[org.apache.zeppelin.spark.SparkZeppelinContext]\");",
                "+      interpret(\"@transient val sc = \"",
                "+          + \"_binder.get(\\\"sc\\\").asInstanceOf[org.apache.spark.SparkContext]\");",
                "+      interpret(\"@transient val sqlc = \"",
                "+          + \"_binder.get(\\\"sqlc\\\").asInstanceOf[org.apache.spark.sql.SQLContext]\");",
                "+      interpret(\"@transient val sqlContext = \"",
                "+          + \"_binder.get(\\\"sqlc\\\").asInstanceOf[org.apache.spark.sql.SQLContext]\");",
                "+",
                "+      if (Utils.isSpark2()) {",
                "+        interpret(\"@transient val spark = \"",
                "+            + \"_binder.get(\\\"spark\\\").asInstanceOf[org.apache.spark.sql.SparkSession]\");",
                "+      }",
                "+",
                "+      interpret(\"import org.apache.spark.SparkContext._\");",
                "+",
                "+      if (importImplicit()) {",
                "+        if (Utils.isSpark2()) {",
                "+          interpret(\"import spark.implicits._\");",
                "+          interpret(\"import spark.sql\");",
                "+          interpret(\"import org.apache.spark.sql.functions._\");",
                "+        } else {",
                "+          if (sparkVersion.oldSqlContextImplicits()) {",
                "+            interpret(\"import sqlContext._\");",
                "+          } else {",
                "+            interpret(\"import sqlContext.implicits._\");",
                "+            interpret(\"import sqlContext.sql\");",
                "+            interpret(\"import org.apache.spark.sql.functions._\");",
                "+          }",
                "+        }",
                "+      }",
                "+    }",
                "+",
                "+    /* Temporary disabling DisplayUtils. see https://issues.apache.org/jira/browse/ZEPPELIN-127",
                "+     *",
                "+    // Utility functions for display",
                "+    intp.interpret(\"import org.apache.zeppelin.spark.utils.DisplayUtils._\");",
                "+",
                "+    // Scala implicit value for spark.maxResult",
                "+    intp.interpret(\"import org.apache.zeppelin.spark.utils.SparkMaxResult\");",
                "+    intp.interpret(\"implicit val sparkMaxResult = new SparkMaxResult(\" +",
                "+            Integer.parseInt(getProperty(\"zeppelin.spark.maxResult\")) + \")\");",
                "+     */",
                "+",
                "+    if (Utils.isScala2_10()) {",
                "+      try {",
                "+        if (sparkVersion.oldLoadFilesMethodName()) {",
                "+          Method loadFiles = this.interpreter.getClass().getMethod(\"loadFiles\", Settings.class);",
                "+          loadFiles.invoke(this.interpreter, settings);",
                "+        } else {",
                "+          Method loadFiles = this.interpreter.getClass().getMethod(",
                "+              \"org$apache$spark$repl$SparkILoop$$loadFiles\", Settings.class);",
                "+          loadFiles.invoke(this.interpreter, settings);",
                "+        }",
                "+      } catch (NoSuchMethodException | SecurityException | IllegalAccessException",
                "+          | IllegalArgumentException | InvocationTargetException e) {",
                "+        throw new InterpreterException(e);",
                "+      }",
                "+    }",
                "+",
                "+    // add jar from DepInterpreter",
                "+    if (depInterpreter != null) {",
                "+      SparkDependencyContext depc = depInterpreter.getDependencyContext();",
                "+      if (depc != null) {",
                "+        List<File> files = depc.getFilesDist();",
                "+        if (files != null) {",
                "+          for (File f : files) {",
                "+            if (f.getName().toLowerCase().endsWith(\".jar\")) {",
                "+              sc.addJar(f.getAbsolutePath());",
                "+              logger.info(\"sc.addJar(\" + f.getAbsolutePath() + \")\");",
                "+            } else {",
                "+              sc.addFile(f.getAbsolutePath());",
                "+              logger.info(\"sc.addFile(\" + f.getAbsolutePath() + \")\");",
                "+            }",
                "+          }",
                "+        }",
                "+      }",
                "+    }",
                "+",
                "+    // add jar from local repo",
                "+    if (localRepo != null) {",
                "+      File localRepoDir = new File(localRepo);",
                "+      if (localRepoDir.exists()) {",
                "+        File[] files = localRepoDir.listFiles();",
                "+        if (files != null) {",
                "+          for (File f : files) {",
                "+            if (f.getName().toLowerCase().endsWith(\".jar\")) {",
                "+              sc.addJar(f.getAbsolutePath());",
                "+              logger.info(\"sc.addJar(\" + f.getAbsolutePath() + \")\");",
                "+            } else {",
                "+              sc.addFile(f.getAbsolutePath());",
                "+              logger.info(\"sc.addFile(\" + f.getAbsolutePath() + \")\");",
                "+            }",
                "+          }",
                "+        }",
                "+      }",
                "+    }",
                "+",
                "+    numReferenceOfSparkContext.incrementAndGet();",
                "+  }",
                "+",
                "+  public String getSparkUIUrl() {",
                "+    if (sparkUrl != null) {",
                "+      return sparkUrl;",
                "+    }",
                "+",
                "+    String sparkUrlProp = getProperty(\"zeppelin.spark.uiWebUrl\", \"\");",
                "+    if (!StringUtils.isBlank(sparkUrlProp)) {",
                "+      return sparkUrlProp;",
                "+    }",
                "+",
                "+    if (sparkVersion.newerThanEquals(SparkVersion.SPARK_2_0_0)) {",
                "+      Option<String> uiWebUrlOption = (Option<String>) Utils.invokeMethod(sc, \"uiWebUrl\");",
                "+      if (uiWebUrlOption.isDefined()) {",
                "+        return uiWebUrlOption.get();",
                "+      }",
                "+    } else {",
                "+      Option<SparkUI> sparkUIOption = (Option<SparkUI>) Utils.invokeMethod(sc, \"ui\");",
                "+      if (sparkUIOption.isDefined()) {",
                "+        return (String) Utils.invokeMethod(sparkUIOption.get(), \"appUIAddress\");",
                "+      }",
                "+    }",
                "+    return null;",
                "+  }",
                "+",
                "+  private Results.Result interpret(String line) {",
                "+    out.ignoreLeadingNewLinesFromScalaReporter();",
                "+    return (Results.Result) Utils.invokeMethod(",
                "+        intp,",
                "+        \"interpret\",",
                "+        new Class[] {String.class},",
                "+        new Object[] {line});",
                "+  }",
                "+",
                "+  public void populateSparkWebUrl(InterpreterContext ctx) {",
                "+    sparkUrl = getSparkUIUrl();",
                "+    Map<String, String> infos = new java.util.HashMap<>();",
                "+    infos.put(\"url\", sparkUrl);",
                "+    String uiEnabledProp = getProperty(\"spark.ui.enabled\", \"true\");",
                "+    java.lang.Boolean uiEnabled = java.lang.Boolean.parseBoolean(",
                "+        uiEnabledProp.trim());",
                "+    if (!uiEnabled) {",
                "+      infos.put(\"message\", \"Spark UI disabled\");",
                "+    } else {",
                "+      if (StringUtils.isNotBlank(sparkUrl)) {",
                "+        infos.put(\"message\", \"Spark UI enabled\");",
                "+      } else {",
                "+        infos.put(\"message\", \"No spark url defined\");",
                "+      }",
                "+    }",
                "+    if (ctx != null && ctx.getClient() != null) {",
                "+      logger.info(\"Sending metadata to Zeppelin server: {}\", infos.toString());",
                "+      getZeppelinContext().setEventClient(ctx.getClient());",
                "+      ctx.getClient().onMetaInfosReceived(infos);",
                "+    }",
                "+  }",
                "+",
                "+  private List<File> currentClassPath() {",
                "+    List<File> paths = classPath(Thread.currentThread().getContextClassLoader());",
                "+    String[] cps = System.getProperty(\"java.class.path\").split(File.pathSeparator);",
                "+    if (cps != null) {",
                "+      for (String cp : cps) {",
                "+        paths.add(new File(cp));",
                "+      }",
                "+    }",
                "+    return paths;",
                "+  }",
                "+",
                "+  private List<File> classPath(ClassLoader cl) {",
                "+    List<File> paths = new LinkedList<>();",
                "+    if (cl == null) {",
                "+      return paths;",
                "+    }",
                "+",
                "+    if (cl instanceof URLClassLoader) {",
                "+      URLClassLoader ucl = (URLClassLoader) cl;",
                "+      URL[] urls = ucl.getURLs();",
                "+      if (urls != null) {",
                "+        for (URL url : urls) {",
                "+          paths.add(new File(url.getFile()));",
                "+        }",
                "+      }",
                "+    }",
                "+    return paths;",
                "+  }",
                "+",
                "+  @Override",
                "+  public List<InterpreterCompletion> completion(String buf, int cursor,",
                "+                                                InterpreterContext interpreterContext) {",
                "+    if (completer == null) {",
                "+      logger.warn(\"Can't find completer\");",
                "+      return new LinkedList<>();",
                "+    }",
                "+",
                "+    if (buf.length() < cursor) {",
                "+      cursor = buf.length();",
                "+    }",
                "+",
                "+    ScalaCompleter c = (ScalaCompleter) Utils.invokeMethod(completer, \"completer\");",
                "+",
                "+    if (Utils.isScala2_10() || !Utils.isCompilerAboveScala2_11_7()) {",
                "+      String singleToken = getCompletionTargetString(buf, cursor);",
                "+      Candidates ret = c.complete(singleToken, singleToken.length());",
                "+",
                "+      List<String> candidates = WrapAsJava$.MODULE$.seqAsJavaList(ret.candidates());",
                "+      List<InterpreterCompletion> completions = new LinkedList<>();",
                "+",
                "+      for (String candidate : candidates) {",
                "+        completions.add(new InterpreterCompletion(candidate, candidate, StringUtils.EMPTY));",
                "+      }",
                "+",
                "+      return completions;",
                "+    } else {",
                "+      Candidates ret = c.complete(buf, cursor);",
                "+",
                "+      List<String> candidates = WrapAsJava$.MODULE$.seqAsJavaList(ret.candidates());",
                "+      List<InterpreterCompletion> completions = new LinkedList<>();",
                "+",
                "+      for (String candidate : candidates) {",
                "+        completions.add(new InterpreterCompletion(candidate, candidate, StringUtils.EMPTY));",
                "+      }",
                "+",
                "+      return completions;",
                "+    }",
                "+  }",
                "+",
                "+  private String getCompletionTargetString(String text, int cursor) {",
                "+    String[] completionSeqCharaters = {\" \", \"\\n\", \"\\t\"};",
                "+    int completionEndPosition = cursor;",
                "+    int completionStartPosition = cursor;",
                "+    int indexOfReverseSeqPostion = cursor;",
                "+",
                "+    String resultCompletionText = \"\";",
                "+    String completionScriptText = \"\";",
                "+    try {",
                "+      completionScriptText = text.substring(0, cursor);",
                "+    }",
                "+    catch (Exception e) {",
                "+      logger.error(e.toString());",
                "+      return null;",
                "+    }",
                "+    completionEndPosition = completionScriptText.length();",
                "+",
                "+    String tempReverseCompletionText = new StringBuilder(completionScriptText).reverse().toString();",
                "+",
                "+    for (String seqCharacter : completionSeqCharaters) {",
                "+      indexOfReverseSeqPostion = tempReverseCompletionText.indexOf(seqCharacter);",
                "+",
                "+      if (indexOfReverseSeqPostion < completionStartPosition && indexOfReverseSeqPostion > 0) {",
                "+        completionStartPosition = indexOfReverseSeqPostion;",
                "+      }",
                "+",
                "+    }",
                "+",
                "+    if (completionStartPosition == completionEndPosition) {",
                "+      completionStartPosition = 0;",
                "+    }",
                "+    else",
                "+    {",
                "+      completionStartPosition = completionEndPosition - completionStartPosition;",
                "+    }",
                "+    resultCompletionText = completionScriptText.substring(",
                "+        completionStartPosition , completionEndPosition);",
                "+",
                "+    return resultCompletionText;",
                "+  }",
                "+",
                "+  /*",
                "+   * this method doesn't work in scala 2.11",
                "+   * Somehow intp.valueOfTerm returns scala.None always with -Yrepl-class-based option",
                "+   */",
                "+  public Object getValue(String name) {",
                "+    Object ret = Utils.invokeMethod(",
                "+        intp, \"valueOfTerm\", new Class[]{String.class}, new Object[]{name});",
                "+",
                "+    if (ret instanceof None || ret instanceof scala.None$) {",
                "+      return null;",
                "+    } else if (ret instanceof Some) {",
                "+      return ((Some) ret).get();",
                "+    } else {",
                "+      return ret;",
                "+    }",
                "+  }",
                "+",
                "+  public Object getLastObject() {",
                "+    IMain.Request r = (IMain.Request) Utils.invokeMethod(intp, \"lastRequest\");",
                "+    if (r == null || r.lineRep() == null) {",
                "+      return null;",
                "+    }",
                "+    Object obj = r.lineRep().call(\"$result\",",
                "+        JavaConversions.asScalaBuffer(new LinkedList<>()));",
                "+    return obj;",
                "+  }",
                "+",
                "+  public boolean isUnsupportedSparkVersion() {",
                "+    return enableSupportedVersionCheck  && sparkVersion.isUnsupportedVersion();",
                "+  }",
                "+",
                "+  /**",
                "+   * Interpret a single line.",
                "+   */",
                "+  @Override",
                "+  public InterpreterResult interpret(String line, InterpreterContext context) {",
                "+    if (isUnsupportedSparkVersion()) {",
                "+      return new InterpreterResult(Code.ERROR, \"Spark \" + sparkVersion.toString()",
                "+          + \" is not supported\");",
                "+    }",
                "+    populateSparkWebUrl(context);",
                "+    z.setInterpreterContext(context);",
                "+    if (line == null || line.trim().length() == 0) {",
                "+      return new InterpreterResult(Code.SUCCESS);",
                "+    }",
                "+    return interpret(line.split(\"\\n\"), context);",
                "+  }",
                "+",
                "+  public InterpreterResult interpret(String[] lines, InterpreterContext context) {",
                "+    synchronized (this) {",
                "+      z.setGui(context.getGui());",
                "+      z.setNoteGui(context.getNoteGui());",
                "+      String jobDesc = \"Started by: \" + Utils.getUserName(context.getAuthenticationInfo());",
                "+      sc.setJobGroup(Utils.buildJobGroupId(context), jobDesc, false);",
                "+      InterpreterResult r = interpretInput(lines, context);",
                "+      sc.clearJobGroup();",
                "+      return r;",
                "+    }",
                "+  }",
                "+",
                "+  public InterpreterResult interpretInput(String[] lines, InterpreterContext context) {",
                "+    SparkEnv.set(env);",
                "+",
                "+    String[] linesToRun = new String[lines.length];",
                "+    for (int i = 0; i < lines.length; i++) {",
                "+      linesToRun[i] = lines[i];",
                "+    }",
                "+",
                "+    Console.setOut(context.out);",
                "+    out.setInterpreterOutput(context.out);",
                "+    context.out.clear();",
                "+    Code r = null;",
                "+    String incomplete = \"\";",
                "+    boolean inComment = false;",
                "+",
                "+    for (int l = 0; l < linesToRun.length; l++) {",
                "+      String s = linesToRun[l];",
                "+      // check if next line starts with \".\" (but not \"..\" or \"./\") it is treated as an invocation",
                "+      if (l + 1 < linesToRun.length) {",
                "+        String nextLine = linesToRun[l + 1].trim();",
                "+        boolean continuation = false;",
                "+        if (nextLine.isEmpty()",
                "+            || nextLine.startsWith(\"//\")         // skip empty line or comment",
                "+            || nextLine.startsWith(\"}\")",
                "+            || nextLine.startsWith(\"object\")) {  // include \"} object\" for Scala companion object",
                "+          continuation = true;",
                "+        } else if (!inComment && nextLine.startsWith(\"/*\")) {",
                "+          inComment = true;",
                "+          continuation = true;",
                "+        } else if (inComment && nextLine.lastIndexOf(\"*/\") >= 0) {",
                "+          inComment = false;",
                "+          continuation = true;",
                "+        } else if (nextLine.length() > 1",
                "+            && nextLine.charAt(0) == '.'",
                "+            && nextLine.charAt(1) != '.'     // \"..\"",
                "+            && nextLine.charAt(1) != '/') {  // \"./\"",
                "+          continuation = true;",
                "+        } else if (inComment) {",
                "+          continuation = true;",
                "+        }",
                "+        if (continuation) {",
                "+          incomplete += s + \"\\n\";",
                "+          continue;",
                "+        }",
                "+      }",
                "+",
                "+      scala.tools.nsc.interpreter.Results.Result res = null;",
                "+      try {",
                "+        res = interpret(incomplete + s);",
                "+      } catch (Exception e) {",
                "+        sc.clearJobGroup();",
                "+        out.setInterpreterOutput(null);",
                "+        logger.info(\"Interpreter exception\", e);",
                "+        return new InterpreterResult(Code.ERROR, InterpreterUtils.getMostRelevantMessage(e));",
                "+      }",
                "+",
                "+      r = getResultCode(res);",
                "+",
                "+      if (r == Code.ERROR) {",
                "+        sc.clearJobGroup();",
                "+        out.setInterpreterOutput(null);",
                "+        return new InterpreterResult(r, \"\");",
                "+      } else if (r == Code.INCOMPLETE) {",
                "+        incomplete += s + \"\\n\";",
                "+      } else {",
                "+        incomplete = \"\";",
                "+      }",
                "+    }",
                "+",
                "+    // make sure code does not finish with comment",
                "+    if (r == Code.INCOMPLETE) {",
                "+      scala.tools.nsc.interpreter.Results.Result res = null;",
                "+      res = interpret(incomplete + \"\\nprint(\\\"\\\")\");",
                "+      r = getResultCode(res);",
                "+    }",
                "+",
                "+    if (r == Code.INCOMPLETE) {",
                "+      sc.clearJobGroup();",
                "+      out.setInterpreterOutput(null);",
                "+      return new InterpreterResult(r, \"Incomplete expression\");",
                "+    } else {",
                "+      sc.clearJobGroup();",
                "+      putLatestVarInResourcePool(context);",
                "+      out.setInterpreterOutput(null);",
                "+      return new InterpreterResult(Code.SUCCESS);",
                "+    }",
                "+  }",
                "+",
                "+  private void putLatestVarInResourcePool(InterpreterContext context) {",
                "+    String varName = (String) Utils.invokeMethod(intp, \"mostRecentVar\");",
                "+    if (varName == null || varName.isEmpty()) {",
                "+      return;",
                "+    }",
                "+    Object lastObj = null;",
                "+    try {",
                "+      if (Utils.isScala2_10()) {",
                "+        lastObj = getValue(varName);",
                "+      } else {",
                "+        lastObj = getLastObject();",
                "+      }",
                "+    } catch (NullPointerException e) {",
                "+      // Some case, scala.tools.nsc.interpreter.IMain$ReadEvalPrint.call throws an NPE",
                "+      logger.error(e.getMessage(), e);",
                "+    }",
                "+",
                "+    if (lastObj != null) {",
                "+      ResourcePool resourcePool = context.getResourcePool();",
                "+      resourcePool.put(context.getNoteId(), context.getParagraphId(),",
                "+          WellKnownResourceName.ZeppelinReplResult.toString(), lastObj);",
                "+    }",
                "+  };",
                "+",
                "+",
                "+  @Override",
                "+  public void cancel(InterpreterContext context) {",
                "+    sc.cancelJobGroup(Utils.buildJobGroupId(context));",
                "+  }",
                "+",
                "+  @Override",
                "+  public int getProgress(InterpreterContext context) {",
                "+    String jobGroup = Utils.buildJobGroupId(context);",
                "+    int completedTasks = 0;",
                "+    int totalTasks = 0;",
                "+",
                "+    DAGScheduler scheduler = sc.dagScheduler();",
                "+    if (scheduler == null) {",
                "+      return 0;",
                "+    }",
                "+    HashSet<ActiveJob> jobs = scheduler.activeJobs();",
                "+    if (jobs == null || jobs.size() == 0) {",
                "+      return 0;",
                "+    }",
                "+    Iterator<ActiveJob> it = jobs.iterator();",
                "+    while (it.hasNext()) {",
                "+      ActiveJob job = it.next();",
                "+      String g = (String) job.properties().get(\"spark.jobGroup.id\");",
                "+      if (jobGroup.equals(g)) {",
                "+        int[] progressInfo = null;",
                "+        try {",
                "+          Object finalStage = job.getClass().getMethod(\"finalStage\").invoke(job);",
                "+          if (sparkVersion.getProgress1_0()) {",
                "+            progressInfo = getProgressFromStage_1_0x(sparkListener, finalStage);",
                "+          } else {",
                "+            progressInfo = getProgressFromStage_1_1x(sparkListener, finalStage);",
                "+          }",
                "+        } catch (IllegalAccessException | IllegalArgumentException",
                "+            | InvocationTargetException | NoSuchMethodException",
                "+            | SecurityException e) {",
                "+          logger.error(\"Can't get progress info\", e);",
                "+          return 0;",
                "+        }",
                "+        totalTasks += progressInfo[0];",
                "+        completedTasks += progressInfo[1];",
                "+      }",
                "+    }",
                "+",
                "+    if (totalTasks == 0) {",
                "+      return 0;",
                "+    }",
                "+    return completedTasks * 100 / totalTasks;",
                "+  }",
                "+",
                "+  private int[] getProgressFromStage_1_0x(JobProgressListener sparkListener, Object stage)",
                "+      throws IllegalAccessException, IllegalArgumentException,",
                "+      InvocationTargetException, NoSuchMethodException, SecurityException {",
                "+    int numTasks = (int) stage.getClass().getMethod(\"numTasks\").invoke(stage);",
                "+    int completedTasks = 0;",
                "+",
                "+    int id = (int) stage.getClass().getMethod(\"id\").invoke(stage);",
                "+",
                "+    Object completedTaskInfo = null;",
                "+",
                "+    completedTaskInfo = JavaConversions.mapAsJavaMap(",
                "+        (HashMap<Object, Object>) sparkListener.getClass()",
                "+            .getMethod(\"stageIdToTasksComplete\").invoke(sparkListener)).get(id);",
                "+",
                "+    if (completedTaskInfo != null) {",
                "+      completedTasks += (int) completedTaskInfo;",
                "+    }",
                "+    List<Object> parents = JavaConversions.seqAsJavaList((Seq<Object>) stage.getClass()",
                "+        .getMethod(\"parents\").invoke(stage));",
                "+    if (parents != null) {",
                "+      for (Object s : parents) {",
                "+        int[] p = getProgressFromStage_1_0x(sparkListener, s);",
                "+        numTasks += p[0];",
                "+        completedTasks += p[1];",
                "+      }",
                "+    }",
                "+",
                "+    return new int[] {numTasks, completedTasks};",
                "+  }",
                "+",
                "+  private int[] getProgressFromStage_1_1x(JobProgressListener sparkListener, Object stage)",
                "+      throws IllegalAccessException, IllegalArgumentException,",
                "+      InvocationTargetException, NoSuchMethodException, SecurityException {",
                "+    int numTasks = (int) stage.getClass().getMethod(\"numTasks\").invoke(stage);",
                "+    int completedTasks = 0;",
                "+    int id = (int) stage.getClass().getMethod(\"id\").invoke(stage);",
                "+",
                "+    try {",
                "+      Method stageIdToData = sparkListener.getClass().getMethod(\"stageIdToData\");",
                "+      HashMap<Tuple2<Object, Object>, Object> stageIdData =",
                "+          (HashMap<Tuple2<Object, Object>, Object>) stageIdToData.invoke(sparkListener);",
                "+      Class<?> stageUIDataClass =",
                "+          this.getClass().forName(\"org.apache.spark.ui.jobs.UIData$StageUIData\");",
                "+",
                "+      Method numCompletedTasks = stageUIDataClass.getMethod(\"numCompleteTasks\");",
                "+      Set<Tuple2<Object, Object>> keys =",
                "+          JavaConverters.setAsJavaSetConverter(stageIdData.keySet()).asJava();",
                "+      for (Tuple2<Object, Object> k : keys) {",
                "+        if (id == (int) k._1()) {",
                "+          Object uiData = stageIdData.get(k).get();",
                "+          completedTasks += (int) numCompletedTasks.invoke(uiData);",
                "+        }",
                "+      }",
                "+    } catch (Exception e) {",
                "+      logger.error(\"Error on getting progress information\", e);",
                "+    }",
                "+",
                "+    List<Object> parents = JavaConversions.seqAsJavaList((Seq<Object>) stage.getClass()",
                "+        .getMethod(\"parents\").invoke(stage));",
                "+    if (parents != null) {",
                "+      for (Object s : parents) {",
                "+        int[] p = getProgressFromStage_1_1x(sparkListener, s);",
                "+        numTasks += p[0];",
                "+        completedTasks += p[1];",
                "+      }",
                "+    }",
                "+    return new int[] {numTasks, completedTasks};",
                "+  }",
                "+",
                "+  private Code getResultCode(scala.tools.nsc.interpreter.Results.Result r) {",
                "+    if (r instanceof scala.tools.nsc.interpreter.Results.Success$) {",
                "+      return Code.SUCCESS;",
                "+    } else if (r instanceof scala.tools.nsc.interpreter.Results.Incomplete$) {",
                "+      return Code.INCOMPLETE;",
                "+    } else {",
                "+      return Code.ERROR;",
                "+    }",
                "+  }",
                "+",
                "+  @Override",
                "+  public void close() {",
                "+    logger.info(\"Close interpreter\");",
                "+",
                "+    if (numReferenceOfSparkContext.decrementAndGet() == 0) {",
                "+      if (sparkSession != null) {",
                "+        Utils.invokeMethod(sparkSession, \"stop\");",
                "+      } else if (sc != null){",
                "+        sc.stop();",
                "+      }",
                "+      sparkSession = null;",
                "+      sc = null;",
                "+      jsc = null;",
                "+      if (classServer != null) {",
                "+        Utils.invokeMethod(classServer, \"stop\");",
                "+        classServer = null;",
                "+      }",
                "+    }",
                "+",
                "+    Utils.invokeMethod(intp, \"close\");",
                "+  }",
                "+",
                "+  @Override",
                "+  public FormType getFormType() {",
                "+    return FormType.NATIVE;",
                "+  }",
                "+",
                "+  public JobProgressListener getJobProgressListener() {",
                "+    return sparkListener;",
                "+  }",
                "+",
                "+  @Override",
                "+  public Scheduler getScheduler() {",
                "+    return SchedulerFactory.singleton().createOrGetFIFOScheduler(",
                "+        OldSparkInterpreter.class.getName() + this.hashCode());",
                "+  }",
                "+",
                "+  public SparkZeppelinContext getZeppelinContext() {",
                "+    return z;",
                "+  }",
                "+",
                "+  public SparkVersion getSparkVersion() {",
                "+    return sparkVersion;",
                "+  }",
                "+",
                "+  private File createTempDir(String dir) {",
                "+    File file = null;",
                "+",
                "+    // try Utils.createTempDir()",
                "+    file = (File) Utils.invokeStaticMethod(",
                "+        Utils.findClass(\"org.apache.spark.util.Utils\"),",
                "+        \"createTempDir\",",
                "+        new Class[]{String.class, String.class},",
                "+        new Object[]{dir, \"spark\"});",
                "+",
                "+    // fallback to old method",
                "+    if (file == null) {",
                "+      file = (File) Utils.invokeStaticMethod(",
                "+          Utils.findClass(\"org.apache.spark.util.Utils\"),",
                "+          \"createTempDir\",",
                "+          new Class[]{String.class},",
                "+          new Object[]{dir});",
                "+    }",
                "+",
                "+    return file;",
                "+  }",
                "+",
                "+  private Object createHttpServer(File outputDir) {",
                "+    SparkConf conf = new SparkConf();",
                "+    try {",
                "+      // try to create HttpServer",
                "+      Constructor<?> constructor = getClass().getClassLoader()",
                "+          .loadClass(\"org.apache.spark.HttpServer\")",
                "+          .getConstructor(new Class[]{",
                "+            SparkConf.class, File.class, SecurityManager.class, int.class, String.class});",
                "+",
                "+      Object securityManager = createSecurityManager(conf);",
                "+      return constructor.newInstance(new Object[]{",
                "+        conf, outputDir, securityManager, 0, \"HTTP Server\"});",
                "+",
                "+    } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException |",
                "+        InstantiationException | InvocationTargetException e) {",
                "+      // fallback to old constructor",
                "+      Constructor<?> constructor = null;",
                "+      try {",
                "+        constructor = getClass().getClassLoader()",
                "+            .loadClass(\"org.apache.spark.HttpServer\")",
                "+            .getConstructor(new Class[]{",
                "+              File.class, SecurityManager.class, int.class, String.class});",
                "+        return constructor.newInstance(new Object[] {",
                "+          outputDir, createSecurityManager(conf), 0, \"HTTP Server\"});",
                "+      } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException |",
                "+          InstantiationException | InvocationTargetException e1) {",
                "+        logger.error(e1.getMessage(), e1);",
                "+        return null;",
                "+      }",
                "+    }",
                "+  }",
                "+",
                "+  /**",
                "+   * Constructor signature of SecurityManager changes in spark 2.1.0, so we use this method to",
                "+   * create SecurityManager properly for different versions of spark",
                "+   *",
                "+   * @param conf",
                "+   * @return",
                "+   * @throws ClassNotFoundException",
                "+   * @throws NoSuchMethodException",
                "+   * @throws IllegalAccessException",
                "+   * @throws InvocationTargetException",
                "+   * @throws InstantiationException",
                "+   */",
                "+  private Object createSecurityManager(SparkConf conf) throws ClassNotFoundException,",
                "+      NoSuchMethodException, IllegalAccessException, InvocationTargetException,",
                "+      InstantiationException {",
                "+    Object securityManager = null;",
                "+    try {",
                "+      Constructor<?> smConstructor = getClass().getClassLoader()",
                "+          .loadClass(\"org.apache.spark.SecurityManager\")",
                "+          .getConstructor(new Class[]{ SparkConf.class, scala.Option.class });",
                "+      securityManager = smConstructor.newInstance(conf, null);",
                "+    } catch (NoSuchMethodException e) {",
                "+      Constructor<?> smConstructor = getClass().getClassLoader()",
                "+          .loadClass(\"org.apache.spark.SecurityManager\")",
                "+          .getConstructor(new Class[]{ SparkConf.class });",
                "+      securityManager = smConstructor.newInstance(conf);",
                "+    }",
                "+    return securityManager;",
                "+  }",
                "+}",
                "diff --git a/spark/interpreter/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java",
                "new file mode 100644",
                "index 000000000..0703ad791",
                "--- /dev/null",
                "+++ b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java",
                "@@ -0,0 +1,751 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.spark;",
                "+",
                "+import com.google.gson.Gson;",
                "+import org.apache.commons.compress.utils.IOUtils;",
                "+import org.apache.commons.exec.CommandLine;",
                "+import org.apache.commons.exec.DefaultExecutor;",
                "+import org.apache.commons.exec.ExecuteException;",
                "+import org.apache.commons.exec.ExecuteResultHandler;",
                "+import org.apache.commons.exec.ExecuteWatchdog;",
                "+import org.apache.commons.exec.PumpStreamHandler;",
                "+import org.apache.commons.exec.environment.EnvironmentUtils;",
                "+import org.apache.commons.lang.StringUtils;",
                "+import org.apache.spark.SparkConf;",
                "+import org.apache.spark.api.java.JavaSparkContext;",
                "+import org.apache.spark.sql.SQLContext;",
                "+import org.apache.zeppelin.interpreter.Interpreter;",
                "+import org.apache.zeppelin.interpreter.InterpreterContext;",
                "+import org.apache.zeppelin.interpreter.InterpreterException;",
                "+import org.apache.zeppelin.interpreter.InterpreterGroup;",
                "+import org.apache.zeppelin.interpreter.InterpreterHookRegistry.HookType;",
                "+import org.apache.zeppelin.interpreter.InterpreterResult;",
                "+import org.apache.zeppelin.interpreter.InterpreterResult.Code;",
                "+import org.apache.zeppelin.interpreter.InterpreterResultMessage;",
                "+import org.apache.zeppelin.interpreter.LazyOpenInterpreter;",
                "+import org.apache.zeppelin.interpreter.WrappedInterpreter;",
                "+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;",
                "+import org.apache.zeppelin.interpreter.util.InterpreterOutputStream;",
                "+import org.apache.zeppelin.spark.dep.SparkDependencyContext;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+import py4j.GatewayServer;",
                "+",
                "+import java.io.BufferedWriter;",
                "+import java.io.ByteArrayOutputStream;",
                "+import java.io.File;",
                "+import java.io.FileOutputStream;",
                "+import java.io.IOException;",
                "+import java.io.OutputStreamWriter;",
                "+import java.io.PipedInputStream;",
                "+import java.io.PipedOutputStream;",
                "+import java.net.MalformedURLException;",
                "+import java.net.ServerSocket;",
                "+import java.net.URL;",
                "+import java.net.URLClassLoader;",
                "+import java.util.LinkedList;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+import java.util.Properties;",
                "+",
                "+/**",
                "+ *",
                "+ */",
                "+public class PySparkInterpreter extends Interpreter implements ExecuteResultHandler {",
                "+  private static final Logger LOGGER = LoggerFactory.getLogger(PySparkInterpreter.class);",
                "+  private GatewayServer gatewayServer;",
                "+  private DefaultExecutor executor;",
                "+  private int port;",
                "+  private InterpreterOutputStream outputStream;",
                "+  private BufferedWriter ins;",
                "+  private PipedInputStream in;",
                "+  private ByteArrayOutputStream input;",
                "+  private String scriptPath;",
                "+  boolean pythonscriptRunning = false;",
                "+  private static final int MAX_TIMEOUT_SEC = 10;",
                "+  private long pythonPid;",
                "+",
                "+  private IPySparkInterpreter iPySparkInterpreter;",
                "+",
                "+  public PySparkInterpreter(Properties property) {",
                "+    super(property);",
                "+",
                "+    pythonPid = -1;",
                "+    try {",
                "+      File scriptFile = File.createTempFile(\"zeppelin_pyspark-\", \".py\");",
                "+      scriptPath = scriptFile.getAbsolutePath();",
                "+    } catch (IOException e) {",
                "+      throw new RuntimeException(e);",
                "+    }",
                "+  }",
                "+",
                "+  private void createPythonScript() throws InterpreterException {",
                "+    ClassLoader classLoader = getClass().getClassLoader();",
                "+    File out = new File(scriptPath);",
                "+",
                "+    if (out.exists() && out.isDirectory()) {",
                "+      throw new InterpreterException(\"Can't create python script \" + out.getAbsolutePath());",
                "+    }",
                "+",
                "+    try {",
                "+      FileOutputStream outStream = new FileOutputStream(out);",
                "+      IOUtils.copy(",
                "+          classLoader.getResourceAsStream(\"python/zeppelin_pyspark.py\"),",
                "+          outStream);",
                "+      outStream.close();",
                "+    } catch (IOException e) {",
                "+      throw new InterpreterException(e);",
                "+    }",
                "+",
                "+    LOGGER.info(\"File {} created\", scriptPath);",
                "+  }",
                "+",
                "+  @Override",
                "+  public void open() throws InterpreterException {",
                "+    // try IPySparkInterpreter first",
                "+    iPySparkInterpreter = getIPySparkInterpreter();",
                "+    if (getProperty(\"zeppelin.pyspark.useIPython\", \"true\").equals(\"true\") &&",
                "+        StringUtils.isEmpty(",
                "+            iPySparkInterpreter.checkIPythonPrerequisite(getPythonExec(getProperties())))) {",
                "+      try {",
                "+        iPySparkInterpreter.open();",
                "+        if (InterpreterContext.get() != null) {",
                "+          // don't print it when it is in testing, just for easy output check in test.",
                "+          InterpreterContext.get().out.write((\"IPython is available, \" +",
                "+              \"use IPython for PySparkInterpreter\\n\")",
                "+              .getBytes());",
                "+        }",
                "+        LOGGER.info(\"Use IPySparkInterpreter to replace PySparkInterpreter\");",
                "+        return;",
                "+      } catch (Exception e) {",
                "+        LOGGER.warn(\"Fail to open IPySparkInterpreter\", e);",
                "+      }",
                "+    }",
                "+    iPySparkInterpreter = null;",
                "+    if (getProperty(\"zeppelin.pyspark.useIPython\", \"true\").equals(\"true\")) {",
                "+      // don't print it when it is in testing, just for easy output check in test.",
                "+      try {",
                "+        InterpreterContext.get().out.write((\"IPython is not available, \" +",
                "+            \"use the native PySparkInterpreter\\n\")",
                "+            .getBytes());",
                "+      } catch (IOException e) {",
                "+        LOGGER.warn(\"Fail to write InterpreterOutput\", e);",
                "+      }",
                "+    }",
                "+",
                "+    // Add matplotlib display hook",
                "+    InterpreterGroup intpGroup = getInterpreterGroup();",
                "+    if (intpGroup != null && intpGroup.getInterpreterHookRegistry() != null) {",
                "+      registerHook(HookType.POST_EXEC_DEV, \"__zeppelin__._displayhook()\");",
                "+    }",
                "+    DepInterpreter depInterpreter = getDepInterpreter();",
                "+",
                "+    // load libraries from Dependency Interpreter",
                "+    URL [] urls = new URL[0];",
                "+    List<URL> urlList = new LinkedList<>();",
                "+",
                "+    if (depInterpreter != null) {",
                "+      SparkDependencyContext depc = depInterpreter.getDependencyContext();",
                "+      if (depc != null) {",
                "+        List<File> files = depc.getFiles();",
                "+        if (files != null) {",
                "+          for (File f : files) {",
                "+            try {",
                "+              urlList.add(f.toURI().toURL());",
                "+            } catch (MalformedURLException e) {",
                "+              LOGGER.error(\"Error\", e);",
                "+            }",
                "+          }",
                "+        }",
                "+      }",
                "+    }",
                "+",
                "+    String localRepo = getProperty(\"zeppelin.interpreter.localRepo\");",
                "+    if (localRepo != null) {",
                "+      File localRepoDir = new File(localRepo);",
                "+      if (localRepoDir.exists()) {",
                "+        File[] files = localRepoDir.listFiles();",
                "+        if (files != null) {",
                "+          for (File f : files) {",
                "+            try {",
                "+              urlList.add(f.toURI().toURL());",
                "+            } catch (MalformedURLException e) {",
                "+              LOGGER.error(\"Error\", e);",
                "+            }",
                "+          }",
                "+        }",
                "+      }",
                "+    }",
                "+",
                "+    urls = urlList.toArray(urls);",
                "+    ClassLoader oldCl = Thread.currentThread().getContextClassLoader();",
                "+    try {",
                "+      URLClassLoader newCl = new URLClassLoader(urls, oldCl);",
                "+      Thread.currentThread().setContextClassLoader(newCl);",
                "+      createGatewayServerAndStartScript();",
                "+    } catch (Exception e) {",
                "+      LOGGER.error(\"Error\", e);",
                "+      throw new InterpreterException(e);",
                "+    } finally {",
                "+      Thread.currentThread().setContextClassLoader(oldCl);",
                "+    }",
                "+  }",
                "+",
                "+  private Map setupPySparkEnv() throws IOException, InterpreterException {",
                "+    Map env = EnvironmentUtils.getProcEnvironment();",
                "+",
                "+    // only set PYTHONPATH in local or yarn-client mode.",
                "+    // yarn-cluster will setup PYTHONPATH automatically.",
                "+    SparkConf conf = getSparkConf();",
                "+    if (!conf.get(\"spark.submit.deployMode\", \"client\").equals(\"cluster\")) {",
                "+      if (!env.containsKey(\"PYTHONPATH\")) {",
                "+        env.put(\"PYTHONPATH\", PythonUtils.sparkPythonPath());",
                "+      } else {",
                "+        env.put(\"PYTHONPATH\", PythonUtils.sparkPythonPath());",
                "+      }",
                "+    }",
                "+",
                "+    // get additional class paths when using SPARK_SUBMIT and not using YARN-CLIENT",
                "+    // also, add all packages to PYTHONPATH since there might be transitive dependencies",
                "+    if (SparkInterpreter.useSparkSubmit() &&",
                "+        !getSparkInterpreter().isYarnMode()) {",
                "+",
                "+      String sparkSubmitJars = getSparkConf().get(\"spark.jars\").replace(\",\", \":\");",
                "+",
                "+      if (!\"\".equals(sparkSubmitJars)) {",
                "+        env.put(\"PYTHONPATH\", env.get(\"PYTHONPATH\") + sparkSubmitJars);",
                "+      }",
                "+    }",
                "+",
                "+    LOGGER.info(\"PYTHONPATH: \" + env.get(\"PYTHONPATH\"));",
                "+",
                "+    // set PYSPARK_PYTHON",
                "+    if (getSparkConf().contains(\"spark.pyspark.python\")) {",
                "+      env.put(\"PYSPARK_PYTHON\", getSparkConf().get(\"spark.pyspark.python\"));",
                "+    }",
                "+    return env;",
                "+  }",
                "+",
                "+  // Run python shell",
                "+  // Choose python in the order of",
                "+  // PYSPARK_DRIVER_PYTHON > PYSPARK_PYTHON > zeppelin.pyspark.python",
                "+  public static String getPythonExec(Properties properties) {",
                "+    String pythonExec = properties.getProperty(\"zeppelin.pyspark.python\", \"python\");",
                "+    if (System.getenv(\"PYSPARK_PYTHON\") != null) {",
                "+      pythonExec = System.getenv(\"PYSPARK_PYTHON\");",
                "+    }",
                "+    if (System.getenv(\"PYSPARK_DRIVER_PYTHON\") != null) {",
                "+      pythonExec = System.getenv(\"PYSPARK_DRIVER_PYTHON\");",
                "+    }",
                "+    return pythonExec;",
                "+  }",
                "+",
                "+  private void createGatewayServerAndStartScript() throws InterpreterException {",
                "+    // create python script",
                "+    createPythonScript();",
                "+",
                "+    port = findRandomOpenPortOnAllLocalInterfaces();",
                "+",
                "+    gatewayServer = new GatewayServer(this, port);",
                "+    gatewayServer.start();",
                "+",
                "+    String pythonExec = getPythonExec(getProperties());",
                "+    LOGGER.info(\"pythonExec: \" + pythonExec);",
                "+    CommandLine cmd = CommandLine.parse(pythonExec);",
                "+    cmd.addArgument(scriptPath, false);",
                "+    cmd.addArgument(Integer.toString(port), false);",
                "+    cmd.addArgument(Integer.toString(getSparkInterpreter().getSparkVersion().toNumber()), false);",
                "+    executor = new DefaultExecutor();",
                "+    outputStream = new InterpreterOutputStream(LOGGER);",
                "+    PipedOutputStream ps = new PipedOutputStream();",
                "+    in = null;",
                "+    try {",
                "+      in = new PipedInputStream(ps);",
                "+    } catch (IOException e1) {",
                "+      throw new InterpreterException(e1);",
                "+    }",
                "+    ins = new BufferedWriter(new OutputStreamWriter(ps));",
                "+",
                "+    input = new ByteArrayOutputStream();",
                "+",
                "+    PumpStreamHandler streamHandler = new PumpStreamHandler(outputStream, outputStream, in);",
                "+    executor.setStreamHandler(streamHandler);",
                "+    executor.setWatchdog(new ExecuteWatchdog(ExecuteWatchdog.INFINITE_TIMEOUT));",
                "+",
                "+    try {",
                "+      Map env = setupPySparkEnv();",
                "+      executor.execute(cmd, env, this);",
                "+      pythonscriptRunning = true;",
                "+    } catch (IOException e) {",
                "+      throw new InterpreterException(e);",
                "+    }",
                "+",
                "+",
                "+    try {",
                "+      input.write(\"import sys, getopt\\n\".getBytes());",
                "+      ins.flush();",
                "+    } catch (IOException e) {",
                "+      throw new InterpreterException(e);",
                "+    }",
                "+  }",
                "+",
                "+  private int findRandomOpenPortOnAllLocalInterfaces() throws InterpreterException {",
                "+    int port;",
                "+    try (ServerSocket socket = new ServerSocket(0);) {",
                "+      port = socket.getLocalPort();",
                "+      socket.close();",
                "+    } catch (IOException e) {",
                "+      throw new InterpreterException(e);",
                "+    }",
                "+    return port;",
                "+  }",
                "+",
                "+  @Override",
                "+  public void close() throws InterpreterException {",
                "+    if (iPySparkInterpreter != null) {",
                "+      iPySparkInterpreter.close();",
                "+      return;",
                "+    }",
                "+    executor.getWatchdog().destroyProcess();",
                "+    new File(scriptPath).delete();",
                "+    gatewayServer.shutdown();",
                "+  }",
                "+",
                "+  PythonInterpretRequest pythonInterpretRequest = null;",
                "+",
                "+  /**",
                "+   *",
                "+   */",
                "+  public class PythonInterpretRequest {",
                "+    public String statements;",
                "+    public String jobGroup;",
                "+    public String jobDescription;",
                "+",
                "+    public PythonInterpretRequest(String statements, String jobGroup,",
                "+        String jobDescription) {",
                "+      this.statements = statements;",
                "+      this.jobGroup = jobGroup;",
                "+      this.jobDescription = jobDescription;",
                "+    }",
                "+",
                "+    public String statements() {",
                "+      return statements;",
                "+    }",
                "+",
                "+    public String jobGroup() {",
                "+      return jobGroup;",
                "+    }",
                "+",
                "+    public String jobDescription() {",
                "+      return jobDescription;",
                "+    }",
                "+  }",
                "+",
                "+  Integer statementSetNotifier = new Integer(0);",
                "+",
                "+  public PythonInterpretRequest getStatements() {",
                "+    synchronized (statementSetNotifier) {",
                "+      while (pythonInterpretRequest == null) {",
                "+        try {",
                "+          statementSetNotifier.wait(1000);",
                "+        } catch (InterruptedException e) {",
                "+        }",
                "+      }",
                "+      PythonInterpretRequest req = pythonInterpretRequest;",
                "+      pythonInterpretRequest = null;",
                "+      return req;",
                "+    }",
                "+  }",
                "+",
                "+  String statementOutput = null;",
                "+  boolean statementError = false;",
                "+  Integer statementFinishedNotifier = new Integer(0);",
                "+",
                "+  public void setStatementsFinished(String out, boolean error) {",
                "+    synchronized (statementFinishedNotifier) {",
                "+      LOGGER.debug(\"Setting python statement output: \" + out + \", error: \" + error);",
                "+      statementOutput = out;",
                "+      statementError = error;",
                "+      statementFinishedNotifier.notify();",
                "+    }",
                "+  }",
                "+",
                "+  boolean pythonScriptInitialized = false;",
                "+  Integer pythonScriptInitializeNotifier = new Integer(0);",
                "+",
                "+  public void onPythonScriptInitialized(long pid) {",
                "+    pythonPid = pid;",
                "+    synchronized (pythonScriptInitializeNotifier) {",
                "+      LOGGER.debug(\"onPythonScriptInitialized is called\");",
                "+      pythonScriptInitialized = true;",
                "+      pythonScriptInitializeNotifier.notifyAll();",
                "+    }",
                "+  }",
                "+",
                "+  public void appendOutput(String message) throws IOException {",
                "+    LOGGER.debug(\"Output from python process: \" + message);",
                "+    outputStream.getInterpreterOutput().write(message);",
                "+  }",
                "+",
                "+  @Override",
                "+  public InterpreterResult interpret(String st, InterpreterContext context)",
                "+      throws InterpreterException {",
                "+    SparkInterpreter sparkInterpreter = getSparkInterpreter();",
                "+    sparkInterpreter.populateSparkWebUrl(context);",
                "+    if (sparkInterpreter.isUnsupportedSparkVersion()) {",
                "+      return new InterpreterResult(Code.ERROR, \"Spark \"",
                "+          + sparkInterpreter.getSparkVersion().toString() + \" is not supported\");",
                "+    }",
                "+",
                "+    if (iPySparkInterpreter != null) {",
                "+      return iPySparkInterpreter.interpret(st, context);",
                "+    }",
                "+",
                "+    if (!pythonscriptRunning) {",
                "+      return new InterpreterResult(Code.ERROR, \"python process not running\"",
                "+          + outputStream.toString());",
                "+    }",
                "+",
                "+    outputStream.setInterpreterOutput(context.out);",
                "+",
                "+    synchronized (pythonScriptInitializeNotifier) {",
                "+      long startTime = System.currentTimeMillis();",
                "+      while (pythonScriptInitialized == false",
                "+          && pythonscriptRunning",
                "+          && System.currentTimeMillis() - startTime < MAX_TIMEOUT_SEC * 1000) {",
                "+        try {",
                "+          pythonScriptInitializeNotifier.wait(1000);",
                "+        } catch (InterruptedException e) {",
                "+          e.printStackTrace();",
                "+        }",
                "+      }",
                "+    }",
                "+",
                "+    List<InterpreterResultMessage> errorMessage;",
                "+    try {",
                "+      context.out.flush();",
                "+      errorMessage = context.out.toInterpreterResultMessage();",
                "+    } catch (IOException e) {",
                "+      throw new InterpreterException(e);",
                "+    }",
                "+",
                "+",
                "+    if (pythonscriptRunning == false) {",
                "+      // python script failed to initialize and terminated",
                "+      errorMessage.add(new InterpreterResultMessage(",
                "+          InterpreterResult.Type.TEXT, \"failed to start pyspark\"));",
                "+      return new InterpreterResult(Code.ERROR, errorMessage);",
                "+    }",
                "+    if (pythonScriptInitialized == false) {",
                "+      // timeout. didn't get initialized message",
                "+      errorMessage.add(new InterpreterResultMessage(",
                "+          InterpreterResult.Type.TEXT, \"pyspark is not responding\"));",
                "+      return new InterpreterResult(Code.ERROR, errorMessage);",
                "+    }",
                "+",
                "+    if (!sparkInterpreter.getSparkVersion().isPysparkSupported()) {",
                "+      errorMessage.add(new InterpreterResultMessage(",
                "+          InterpreterResult.Type.TEXT,",
                "+          \"pyspark \" + sparkInterpreter.getSparkContext().version() + \" is not supported\"));",
                "+      return new InterpreterResult(Code.ERROR, errorMessage);",
                "+    }",
                "+    String jobGroup = Utils.buildJobGroupId(context);",
                "+    String jobDesc = \"Started by: \" + Utils.getUserName(context.getAuthenticationInfo());",
                "+    SparkZeppelinContext __zeppelin__ = sparkInterpreter.getZeppelinContext();",
                "+    __zeppelin__.setInterpreterContext(context);",
                "+    __zeppelin__.setGui(context.getGui());",
                "+    __zeppelin__.setNoteGui(context.getNoteGui());",
                "+    pythonInterpretRequest = new PythonInterpretRequest(st, jobGroup, jobDesc);",
                "+    statementOutput = null;",
                "+",
                "+    synchronized (statementSetNotifier) {",
                "+      statementSetNotifier.notify();",
                "+    }",
                "+",
                "+    synchronized (statementFinishedNotifier) {",
                "+      while (statementOutput == null) {",
                "+        try {",
                "+          statementFinishedNotifier.wait(1000);",
                "+        } catch (InterruptedException e) {",
                "+        }",
                "+      }",
                "+    }",
                "+",
                "+    if (statementError) {",
                "+      return new InterpreterResult(Code.ERROR, statementOutput);",
                "+    } else {",
                "+",
                "+      try {",
                "+        context.out.flush();",
                "+      } catch (IOException e) {",
                "+        throw new InterpreterException(e);",
                "+      }",
                "+",
                "+      return new InterpreterResult(Code.SUCCESS);",
                "+    }",
                "+  }",
                "+",
                "+  public void interrupt() throws IOException, InterpreterException {",
                "+    if (pythonPid > -1) {",
                "+      LOGGER.info(\"Sending SIGINT signal to PID : \" + pythonPid);",
                "+      Runtime.getRuntime().exec(\"kill -SIGINT \" + pythonPid);",
                "+    } else {",
                "+      LOGGER.warn(\"Non UNIX/Linux system, close the interpreter\");",
                "+      close();",
                "+    }",
                "+  }",
                "+",
                "+  @Override",
                "+  public void cancel(InterpreterContext context) throws InterpreterException {",
                "+    if (iPySparkInterpreter != null) {",
                "+      iPySparkInterpreter.cancel(context);",
                "+      return;",
                "+    }",
                "+    SparkInterpreter sparkInterpreter = getSparkInterpreter();",
                "+    sparkInterpreter.cancel(context);",
                "+    try {",
                "+      interrupt();",
                "+    } catch (IOException e) {",
                "+      LOGGER.error(\"Error\", e);",
                "+    }",
                "+  }",
                "+",
                "+  @Override",
                "+  public FormType getFormType() {",
                "+    return FormType.NATIVE;",
                "+  }",
                "+",
                "+  @Override",
                "+  public int getProgress(InterpreterContext context) throws InterpreterException {",
                "+    if (iPySparkInterpreter != null) {",
                "+      return iPySparkInterpreter.getProgress(context);",
                "+    }",
                "+    SparkInterpreter sparkInterpreter = getSparkInterpreter();",
                "+    return sparkInterpreter.getProgress(context);",
                "+  }",
                "+",
                "+",
                "+  @Override",
                "+  public List<InterpreterCompletion> completion(String buf, int cursor,",
                "+                                                InterpreterContext interpreterContext)",
                "+      throws InterpreterException {",
                "+    if (iPySparkInterpreter != null) {",
                "+      return iPySparkInterpreter.completion(buf, cursor, interpreterContext);",
                "+    }",
                "+    if (buf.length() < cursor) {",
                "+      cursor = buf.length();",
                "+    }",
                "+    String completionString = getCompletionTargetString(buf, cursor);",
                "+    String completionCommand = \"completion.getCompletion('\" + completionString + \"')\";",
                "+",
                "+    //start code for completion",
                "+    SparkInterpreter sparkInterpreter = getSparkInterpreter();",
                "+    if (sparkInterpreter.isUnsupportedSparkVersion() || pythonscriptRunning == false) {",
                "+      return new LinkedList<>();",
                "+    }",
                "+",
                "+    pythonInterpretRequest = new PythonInterpretRequest(completionCommand, \"\", \"\");",
                "+    statementOutput = null;",
                "+",
                "+    synchronized (statementSetNotifier) {",
                "+      statementSetNotifier.notify();",
                "+    }",
                "+",
                "+    String[] completionList = null;",
                "+    synchronized (statementFinishedNotifier) {",
                "+      long startTime = System.currentTimeMillis();",
                "+      while (statementOutput == null",
                "+        && pythonscriptRunning) {",
                "+        try {",
                "+          if (System.currentTimeMillis() - startTime > MAX_TIMEOUT_SEC * 1000) {",
                "+            LOGGER.error(\"pyspark completion didn't have response for {}sec.\", MAX_TIMEOUT_SEC);",
                "+            break;",
                "+          }",
                "+          statementFinishedNotifier.wait(1000);",
                "+        } catch (InterruptedException e) {",
                "+          // not working",
                "+          LOGGER.info(\"wait drop\");",
                "+          return new LinkedList<>();",
                "+        }",
                "+      }",
                "+      if (statementError) {",
                "+        return new LinkedList<>();",
                "+      }",
                "+      Gson gson = new Gson();",
                "+      completionList = gson.fromJson(statementOutput, String[].class);",
                "+    }",
                "+    //end code for completion",
                "+",
                "+    if (completionList == null) {",
                "+      return new LinkedList<>();",
                "+    }",
                "+",
                "+    List<InterpreterCompletion> results = new LinkedList<>();",
                "+    for (String name: completionList) {",
                "+      results.add(new InterpreterCompletion(name, name, StringUtils.EMPTY));",
                "+    }",
                "+    return results;",
                "+  }",
                "+",
                "+  private String getCompletionTargetString(String text, int cursor) {",
                "+    String[] completionSeqCharaters = {\" \", \"\\n\", \"\\t\"};",
                "+    int completionEndPosition = cursor;",
                "+    int completionStartPosition = cursor;",
                "+    int indexOfReverseSeqPostion = cursor;",
                "+",
                "+    String resultCompletionText = \"\";",
                "+    String completionScriptText = \"\";",
                "+    try {",
                "+      completionScriptText = text.substring(0, cursor);",
                "+    }",
                "+    catch (Exception e) {",
                "+      LOGGER.error(e.toString());",
                "+      return null;",
                "+    }",
                "+    completionEndPosition = completionScriptText.length();",
                "+",
                "+    String tempReverseCompletionText = new StringBuilder(completionScriptText).reverse().toString();",
                "+",
                "+    for (String seqCharacter : completionSeqCharaters) {",
                "+      indexOfReverseSeqPostion = tempReverseCompletionText.indexOf(seqCharacter);",
                "+",
                "+      if (indexOfReverseSeqPostion < completionStartPosition && indexOfReverseSeqPostion > 0) {",
                "+        completionStartPosition = indexOfReverseSeqPostion;",
                "+      }",
                "+",
                "+    }",
                "+",
                "+    if (completionStartPosition == completionEndPosition) {",
                "+      completionStartPosition = 0;",
                "+    }",
                "+    else",
                "+    {",
                "+      completionStartPosition = completionEndPosition - completionStartPosition;",
                "+    }",
                "+    resultCompletionText = completionScriptText.substring(",
                "+            completionStartPosition , completionEndPosition);",
                "+",
                "+    return resultCompletionText;",
                "+  }",
                "+",
                "+",
                "+  private SparkInterpreter getSparkInterpreter() throws InterpreterException {",
                "+    LazyOpenInterpreter lazy = null;",
                "+    SparkInterpreter spark = null;",
                "+    Interpreter p = getInterpreterInTheSameSessionByClassName(SparkInterpreter.class.getName());",
                "+",
                "+    while (p instanceof WrappedInterpreter) {",
                "+      if (p instanceof LazyOpenInterpreter) {",
                "+        lazy = (LazyOpenInterpreter) p;",
                "+      }",
                "+      p = ((WrappedInterpreter) p).getInnerInterpreter();",
                "+    }",
                "+    spark = (SparkInterpreter) p;",
                "+",
                "+    if (lazy != null) {",
                "+      lazy.open();",
                "+    }",
                "+    return spark;",
                "+  }",
                "+",
                "+  private IPySparkInterpreter getIPySparkInterpreter() {",
                "+    LazyOpenInterpreter lazy = null;",
                "+    IPySparkInterpreter iPySpark = null;",
                "+    Interpreter p = getInterpreterInTheSameSessionByClassName(IPySparkInterpreter.class.getName());",
                "+",
                "+    while (p instanceof WrappedInterpreter) {",
                "+      if (p instanceof LazyOpenInterpreter) {",
                "+        lazy = (LazyOpenInterpreter) p;",
                "+      }",
                "+      p = ((WrappedInterpreter) p).getInnerInterpreter();",
                "+    }",
                "+    iPySpark = (IPySparkInterpreter) p;",
                "+    return iPySpark;",
                "+  }",
                "+",
                "+  public SparkZeppelinContext getZeppelinContext() throws InterpreterException {",
                "+    SparkInterpreter sparkIntp = getSparkInterpreter();",
                "+    if (sparkIntp != null) {",
                "+      return getSparkInterpreter().getZeppelinContext();",
                "+    } else {",
                "+      return null;",
                "+    }",
                "+  }",
                "+",
                "+  public JavaSparkContext getJavaSparkContext() throws InterpreterException {",
                "+    SparkInterpreter intp = getSparkInterpreter();",
                "+    if (intp == null) {",
                "+      return null;",
                "+    } else {",
                "+      return new JavaSparkContext(intp.getSparkContext());",
                "+    }",
                "+  }",
                "+",
                "+  public Object getSparkSession() throws InterpreterException {",
                "+    SparkInterpreter intp = getSparkInterpreter();",
                "+    if (intp == null) {",
                "+      return null;",
                "+    } else {",
                "+      return intp.getSparkSession();",
                "+    }",
                "+  }",
                "+",
                "+  public SparkConf getSparkConf() throws InterpreterException {",
                "+    JavaSparkContext sc = getJavaSparkContext();",
                "+    if (sc == null) {",
                "+      return null;",
                "+    } else {",
                "+      return getJavaSparkContext().getConf();",
                "+    }",
                "+  }",
                "+",
                "+  public SQLContext getSQLContext() throws InterpreterException {",
                "+    SparkInterpreter intp = getSparkInterpreter();",
                "+    if (intp == null) {",
                "+      return null;",
                "+    } else {",
                "+      return intp.getSQLContext();",
                "+    }",
                "+  }",
                "+",
                "+  private DepInterpreter getDepInterpreter() {",
                "+    Interpreter p = getInterpreterInTheSameSessionByClassName(DepInterpreter.class.getName());",
                "+    if (p == null) {",
                "+      return null;",
                "+    }",
                "+",
                "+    while (p instanceof WrappedInterpreter) {",
                "+      p = ((WrappedInterpreter) p).getInnerInterpreter();",
                "+    }",
                "+    return (DepInterpreter) p;",
                "+  }",
                "+",
                "+",
                "+  @Override",
                "+  public void onProcessComplete(int exitValue) {",
                "+    pythonscriptRunning = false;",
                "+    LOGGER.info(\"python process terminated. exit code \" + exitValue);",
                "+  }",
                "+",
                "+  @Override",
                "+  public void onProcessFailed(ExecuteException e) {",
                "+    pythonscriptRunning = false;",
                "+    LOGGER.error(\"python process failed\", e);",
                "+  }",
                "+}",
                "diff --git a/spark/interpreter/src/main/java/org/apache/zeppelin/spark/PythonUtils.java b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/PythonUtils.java",
                "new file mode 100644",
                "index 000000000..818269005",
                "--- /dev/null",
                "+++ b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/PythonUtils.java",
                "@@ -0,0 +1,96 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+",
                "+package org.apache.zeppelin.spark;",
                "+",
                "+import org.apache.commons.lang3.StringUtils;",
                "+",
                "+import java.io.File;",
                "+import java.io.FilenameFilter;",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+",
                "+/**",
                "+ * Util class for PySpark",
                "+ */",
                "+public class PythonUtils {",
                "+",
                "+  /**",
                "+   * Get the PYTHONPATH for PySpark, either from SPARK_HOME, if it is set, or from ZEPPELIN_HOME",
                "+   * when it is embedded mode.",
                "+   *",
                "+   * This method will called in zeppelin server process and spark driver process when it is",
                "+   * local or yarn-client mode.",
                "+   */",
                "+  public static String sparkPythonPath() {",
                "+    List<String> pythonPath = new ArrayList<String>();",
                "+    String sparkHome = System.getenv(\"SPARK_HOME\");",
                "+    String zeppelinHome = System.getenv(\"ZEPPELIN_HOME\");",
                "+    if (zeppelinHome == null) {",
                "+      zeppelinHome = new File(\"..\").getAbsolutePath();",
                "+    }",
                "+    if (sparkHome != null) {",
                "+      // non-embedded mode when SPARK_HOME is specified.",
                "+      File pyspark = new File(sparkHome, \"python/lib/pyspark.zip\");",
                "+      if (!pyspark.exists()) {",
                "+        throw new RuntimeException(\"No pyspark.zip found under \" + sparkHome + \"/python/lib\");",
                "+      }",
                "+      pythonPath.add(pyspark.getAbsolutePath());",
                "+      File[] py4j = new File(sparkHome + \"/python/lib\").listFiles(new FilenameFilter() {",
                "+        @Override",
                "+        public boolean accept(File dir, String name) {",
                "+          return name.startsWith(\"py4j\");",
                "+        }",
                "+      });",
                "+      if (py4j.length == 0) {",
                "+        throw new RuntimeException(\"No py4j files found under \" + sparkHome + \"/python/lib\");",
                "+      } else if (py4j.length > 1) {",
                "+        throw new RuntimeException(\"Multiple py4j files found under \" + sparkHome + \"/python/lib\");",
                "+      } else {",
                "+        pythonPath.add(py4j[0].getAbsolutePath());",
                "+      }",
                "+    } else {",
                "+      // embedded mode",
                "+      File pyspark = new File(zeppelinHome, \"interpreter/spark/pyspark/pyspark.zip\");",
                "+      if (!pyspark.exists()) {",
                "+        throw new RuntimeException(\"No pyspark.zip found: \" + pyspark.getAbsolutePath());",
                "+      }",
                "+      pythonPath.add(pyspark.getAbsolutePath());",
                "+      File[] py4j = new File(zeppelinHome, \"interpreter/spark/pyspark\").listFiles(",
                "+          new FilenameFilter() {",
                "+            @Override",
                "+            public boolean accept(File dir, String name) {",
                "+              return name.startsWith(\"py4j\");",
                "+            }",
                "+          });",
                "+      if (py4j.length == 0) {",
                "+        throw new RuntimeException(\"No py4j files found under \" + zeppelinHome +",
                "+            \"/interpreter/spark/pyspark\");",
                "+      } else if (py4j.length > 1) {",
                "+        throw new RuntimeException(\"Multiple py4j files found under \" + sparkHome +",
                "+            \"/interpreter/spark/pyspark\");",
                "+      } else {",
                "+        pythonPath.add(py4j[0].getAbsolutePath());",
                "+      }",
                "+    }",
                "+",
                "+    // add ${ZEPPELIN_HOME}/interpreter/lib/python for all the cases",
                "+    pythonPath.add(zeppelinHome + \"/interpreter/lib/python\");",
                "+    return StringUtils.join(pythonPath, \":\");",
                "+  }",
                "+}",
                "diff --git a/spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java",
                "new file mode 100644",
                "index 000000000..d9be57363",
                "--- /dev/null",
                "+++ b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java",
                "@@ -0,0 +1,163 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.spark;",
                "+",
                "+import org.apache.spark.SparkContext;",
                "+import org.apache.spark.api.java.JavaSparkContext;",
                "+import org.apache.spark.sql.SQLContext;",
                "+import org.apache.zeppelin.interpreter.Interpreter;",
                "+import org.apache.zeppelin.interpreter.InterpreterContext;",
                "+import org.apache.zeppelin.interpreter.InterpreterException;",
                "+import org.apache.zeppelin.interpreter.InterpreterResult;",
                "+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+import java.util.List;",
                "+import java.util.Properties;",
                "+",
                "+/**",
                "+ * It is the Wrapper of OldSparkInterpreter & NewSparkInterpreter.",
                "+ * Property zeppelin.spark.useNew control which one to use.",
                "+ */",
                "+public class SparkInterpreter extends AbstractSparkInterpreter {",
                "+",
                "+  private static final Logger LOGGER = LoggerFactory.getLogger(SparkInterpreter.class);",
                "+",
                "+  // either OldSparkInterpreter or NewSparkInterpreter",
                "+  private AbstractSparkInterpreter delegation;",
                "+",
                "+",
                "+  public SparkInterpreter(Properties properties) {",
                "+    super(properties);",
                "+    if (Boolean.parseBoolean(properties.getProperty(\"zeppelin.spark.useNew\", \"false\"))) {",
                "+      delegation = new NewSparkInterpreter(properties);",
                "+    } else {",
                "+      delegation = new OldSparkInterpreter(properties);",
                "+    }",
                "+  }",
                "+",
                "+  @Override",
                "+  public void open() throws InterpreterException {",
                "+    delegation.setInterpreterGroup(getInterpreterGroup());",
                "+    delegation.setUserName(getUserName());",
                "+    delegation.setClassloaderUrls(getClassloaderUrls());",
                "+",
                "+    delegation.open();",
                "+  }",
                "+",
                "+  @Override",
                "+  public void close() throws InterpreterException {",
                "+    delegation.close();",
                "+  }",
                "+",
                "+  @Override",
                "+  public InterpreterResult interpret(String st, InterpreterContext context)",
                "+      throws InterpreterException {",
                "+    return delegation.interpret(st, context);",
                "+  }",
                "+",
                "+  @Override",
                "+  public void cancel(InterpreterContext context) throws InterpreterException {",
                "+    delegation.cancel(context);",
                "+  }",
                "+",
                "+  @Override",
                "+  public List<InterpreterCompletion> completion(String buf,",
                "+                                                int cursor,",
                "+                                                InterpreterContext interpreterContext)",
                "+      throws InterpreterException {",
                "+    return delegation.completion(buf, cursor, interpreterContext);",
                "+  }",
                "+",
                "+  @Override",
                "+  public FormType getFormType() {",
                "+    return FormType.NATIVE;",
                "+  }",
                "+",
                "+  @Override",
                "+  public int getProgress(InterpreterContext context) throws InterpreterException {",
                "+    return delegation.getProgress(context);",
                "+  }",
                "+",
                "+  public AbstractSparkInterpreter getDelegation() {",
                "+    return delegation;",
                "+  }",
                "+",
                "+",
                "+  @Override",
                "+  public SparkContext getSparkContext() {",
                "+    return delegation.getSparkContext();",
                "+  }",
                "+",
                "+  @Override",
                "+  public SQLContext getSQLContext() {",
                "+    return delegation.getSQLContext();",
                "+  }",
                "+",
                "+  @Override",
                "+  public Object getSparkSession() {",
                "+    return delegation.getSparkSession();",
                "+  }",
                "+",
                "+  @Override",
                "+  public boolean isSparkContextInitialized() {",
                "+    return delegation.isSparkContextInitialized();",
                "+  }",
                "+",
                "+  @Override",
                "+  public SparkVersion getSparkVersion() {",
                "+    return delegation.getSparkVersion();",
                "+  }",
                "+",
                "+  @Override",
                "+  public JavaSparkContext getJavaSparkContext() {",
                "+    return delegation.getJavaSparkContext();",
                "+  }",
                "+",
                "+  @Override",
                "+  public void populateSparkWebUrl(InterpreterContext ctx) {",
                "+    delegation.populateSparkWebUrl(ctx);",
                "+  }",
                "+",
                "+  @Override",
                "+  public SparkZeppelinContext getZeppelinContext() {",
                "+    return delegation.getZeppelinContext();",
                "+  }",
                "+",
                "+  @Override",
                "+  public String getSparkUIUrl() {",
                "+    return delegation.getSparkUIUrl();",
                "+  }",
                "+",
                "+  public boolean isUnsupportedSparkVersion() {",
                "+    return delegation.isUnsupportedSparkVersion();",
                "+  }",
                "+",
                "+  public boolean isYarnMode() {",
                "+    String master = getProperty(\"master\");",
                "+    if (master == null) {",
                "+      master = getProperty(\"spark.master\", \"local[*]\");",
                "+    }",
                "+    return master.startsWith(\"yarn\");",
                "+  }",
                "+",
                "+  public static boolean useSparkSubmit() {",
                "+    return null != System.getenv(\"SPARK_SUBMIT\");",
                "+  }",
                "+}",
                "diff --git a/spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkRInterpreter.java b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkRInterpreter.java",
                "new file mode 100644",
                "index 000000000..dbaeabe9a",
                "--- /dev/null",
                "+++ b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkRInterpreter.java",
                "@@ -0,0 +1,250 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.spark;",
                "+",
                "+import static org.apache.zeppelin.spark.ZeppelinRDisplay.render;",
                "+",
                "+import com.fasterxml.jackson.databind.JsonNode;",
                "+import com.fasterxml.jackson.databind.ObjectMapper;",
                "+",
                "+import org.apache.spark.SparkContext;",
                "+import org.apache.spark.SparkRBackend;",
                "+import org.apache.spark.api.java.JavaSparkContext;",
                "+import org.apache.zeppelin.interpreter.*;",
                "+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;",
                "+import org.apache.zeppelin.scheduler.Scheduler;",
                "+import org.apache.zeppelin.scheduler.SchedulerFactory;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+import java.io.IOException;",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+import java.util.Properties;",
                "+",
                "+/**",
                "+ * R and SparkR interpreter with visualization support.",
                "+ */",
                "+public class SparkRInterpreter extends Interpreter {",
                "+  private static final Logger logger = LoggerFactory.getLogger(SparkRInterpreter.class);",
                "+",
                "+  private static String renderOptions;",
                "+  private SparkInterpreter sparkInterpreter;",
                "+  private ZeppelinR zeppelinR;",
                "+  private SparkContext sc;",
                "+  private JavaSparkContext jsc;",
                "+",
                "+  public SparkRInterpreter(Properties property) {",
                "+    super(property);",
                "+  }",
                "+",
                "+  @Override",
                "+  public void open() throws InterpreterException {",
                "+    String rCmdPath = getProperty(\"zeppelin.R.cmd\", \"R\");",
                "+    String sparkRLibPath;",
                "+",
                "+    if (System.getenv(\"SPARK_HOME\") != null) {",
                "+      sparkRLibPath = System.getenv(\"SPARK_HOME\") + \"/R/lib\";",
                "+    } else {",
                "+      sparkRLibPath = System.getenv(\"ZEPPELIN_HOME\") + \"/interpreter/spark/R/lib\";",
                "+      // workaround to make sparkr work without SPARK_HOME",
                "+      System.setProperty(\"spark.test.home\", System.getenv(\"ZEPPELIN_HOME\") + \"/interpreter/spark\");",
                "+    }",
                "+    synchronized (SparkRBackend.backend()) {",
                "+      if (!SparkRBackend.isStarted()) {",
                "+        SparkRBackend.init();",
                "+        SparkRBackend.start();",
                "+      }",
                "+    }",
                "+",
                "+    int port = SparkRBackend.port();",
                "+",
                "+    this.sparkInterpreter = getSparkInterpreter();",
                "+    this.sc = sparkInterpreter.getSparkContext();",
                "+    this.jsc = sparkInterpreter.getJavaSparkContext();",
                "+    SparkVersion sparkVersion = new SparkVersion(sc.version());",
                "+    ZeppelinRContext.setSparkContext(sc);",
                "+    ZeppelinRContext.setJavaSparkContext(jsc);",
                "+    if (Utils.isSpark2()) {",
                "+      ZeppelinRContext.setSparkSession(sparkInterpreter.getSparkSession());",
                "+    }",
                "+    ZeppelinRContext.setSqlContext(sparkInterpreter.getSQLContext());",
                "+    ZeppelinRContext.setZeppelinContext(sparkInterpreter.getZeppelinContext());",
                "+",
                "+    zeppelinR = new ZeppelinR(rCmdPath, sparkRLibPath, port, sparkVersion);",
                "+    try {",
                "+      zeppelinR.open();",
                "+    } catch (IOException e) {",
                "+      logger.error(\"Exception while opening SparkRInterpreter\", e);",
                "+      throw new InterpreterException(e);",
                "+    }",
                "+",
                "+    if (useKnitr()) {",
                "+      zeppelinR.eval(\"library('knitr')\");",
                "+    }",
                "+    renderOptions = getProperty(\"zeppelin.R.render.options\");",
                "+  }",
                "+",
                "+  String getJobGroup(InterpreterContext context){",
                "+    return \"zeppelin-\" + context.getParagraphId();",
                "+  }",
                "+",
                "+  @Override",
                "+  public InterpreterResult interpret(String lines, InterpreterContext interpreterContext)",
                "+      throws InterpreterException {",
                "+",
                "+    SparkInterpreter sparkInterpreter = getSparkInterpreter();",
                "+    sparkInterpreter.populateSparkWebUrl(interpreterContext);",
                "+    if (sparkInterpreter.isUnsupportedSparkVersion()) {",
                "+      return new InterpreterResult(InterpreterResult.Code.ERROR, \"Spark \"",
                "+          + sparkInterpreter.getSparkVersion().toString() + \" is not supported\");",
                "+    }",
                "+",
                "+    String jobGroup = Utils.buildJobGroupId(interpreterContext);",
                "+    String jobDesc = \"Started by: \" +",
                "+       Utils.getUserName(interpreterContext.getAuthenticationInfo());",
                "+    sparkInterpreter.getSparkContext().setJobGroup(jobGroup, jobDesc, false);",
                "+",
                "+    String imageWidth = getProperty(\"zeppelin.R.image.width\");",
                "+",
                "+    String[] sl = lines.split(\"\\n\");",
                "+    if (sl[0].contains(\"{\") && sl[0].contains(\"}\")) {",
                "+      String jsonConfig = sl[0].substring(sl[0].indexOf(\"{\"), sl[0].indexOf(\"}\") + 1);",
                "+      ObjectMapper m = new ObjectMapper();",
                "+      try {",
                "+        JsonNode rootNode = m.readTree(jsonConfig);",
                "+        JsonNode imageWidthNode = rootNode.path(\"imageWidth\");",
                "+        if (!imageWidthNode.isMissingNode()) imageWidth = imageWidthNode.textValue();",
                "+      }",
                "+      catch (Exception e) {",
                "+        logger.warn(\"Can not parse json config: \" + jsonConfig, e);",
                "+      }",
                "+      finally {",
                "+        lines = lines.replace(jsonConfig, \"\");",
                "+      }",
                "+    }",
                "+",
                "+    String setJobGroup = \"\";",
                "+    // assign setJobGroup to dummy__, otherwise it would print NULL for this statement",
                "+    if (Utils.isSpark2()) {",
                "+      setJobGroup = \"dummy__ <- setJobGroup(\\\"\" + jobGroup +",
                "+          \"\\\", \\\" +\" + jobDesc + \"\\\", TRUE)\";",
                "+    } else if (getSparkInterpreter().getSparkVersion().newerThanEquals(SparkVersion.SPARK_1_5_0)) {",
                "+      setJobGroup = \"dummy__ <- setJobGroup(sc, \\\"\" + jobGroup +",
                "+          \"\\\", \\\"\" + jobDesc + \"\\\", TRUE)\";",
                "+    }",
                "+    logger.debug(\"set JobGroup:\" + setJobGroup);",
                "+    lines = setJobGroup + \"\\n\" + lines;",
                "+",
                "+    try {",
                "+      // render output with knitr",
                "+      if (useKnitr()) {",
                "+        zeppelinR.setInterpreterOutput(null);",
                "+        zeppelinR.set(\".zcmd\", \"\\n```{r \" + renderOptions + \"}\\n\" + lines + \"\\n```\");",
                "+        zeppelinR.eval(\".zres <- knit2html(text=.zcmd)\");",
                "+        String html = zeppelinR.getS0(\".zres\");",
                "+",
                "+        RDisplay rDisplay = render(html, imageWidth);",
                "+",
                "+        return new InterpreterResult(",
                "+            rDisplay.code(),",
                "+            rDisplay.type(),",
                "+            rDisplay.content()",
                "+        );",
                "+      } else {",
                "+        // alternatively, stream the output (without knitr)",
                "+        zeppelinR.setInterpreterOutput(interpreterContext.out);",
                "+        zeppelinR.eval(lines);",
                "+        return new InterpreterResult(InterpreterResult.Code.SUCCESS, \"\");",
                "+      }",
                "+    } catch (Exception e) {",
                "+      logger.error(\"Exception while connecting to R\", e);",
                "+      return new InterpreterResult(InterpreterResult.Code.ERROR, e.getMessage());",
                "+    } finally {",
                "+      try {",
                "+      } catch (Exception e) {",
                "+        // Do nothing...",
                "+      }",
                "+    }",
                "+  }",
                "+",
                "+  @Override",
                "+  public void close() {",
                "+    zeppelinR.close();",
                "+  }",
                "+",
                "+  @Override",
                "+  public void cancel(InterpreterContext context) {",
                "+    if (this.sc != null) {",
                "+      sc.cancelJobGroup(getJobGroup(context));",
                "+    }",
                "+  }",
                "+",
                "+  @Override",
                "+  public FormType getFormType() {",
                "+    return FormType.NONE;",
                "+  }",
                "+",
                "+  @Override",
                "+  public int getProgress(InterpreterContext context) throws InterpreterException {",
                "+    if (sparkInterpreter != null) {",
                "+      return sparkInterpreter.getProgress(context);",
                "+    } else {",
                "+      return 0;",
                "+    }",
                "+  }",
                "+",
                "+  @Override",
                "+  public Scheduler getScheduler() {",
                "+    return SchedulerFactory.singleton().createOrGetFIFOScheduler(",
                "+            SparkRInterpreter.class.getName() + this.hashCode());",
                "+  }",
                "+",
                "+  @Override",
                "+  public List<InterpreterCompletion> completion(String buf, int cursor,",
                "+                                                InterpreterContext interpreterContext) {",
                "+    return new ArrayList<>();",
                "+  }",
                "+",
                "+  private SparkInterpreter getSparkInterpreter() throws InterpreterException {",
                "+    LazyOpenInterpreter lazy = null;",
                "+    SparkInterpreter spark = null;",
                "+    Interpreter p = getInterpreterInTheSameSessionByClassName(SparkInterpreter.class.getName());",
                "+",
                "+    while (p instanceof WrappedInterpreter) {",
                "+      if (p instanceof LazyOpenInterpreter) {",
                "+        lazy = (LazyOpenInterpreter) p;",
                "+      }",
                "+      p = ((WrappedInterpreter) p).getInnerInterpreter();",
                "+    }",
                "+    spark = (SparkInterpreter) p;",
                "+",
                "+    if (lazy != null) {",
                "+      lazy.open();",
                "+    }",
                "+    return spark;",
                "+  }",
                "+",
                "+  private boolean useKnitr() {",
                "+    try {",
                "+      return Boolean.parseBoolean(getProperty(\"zeppelin.R.knitr\"));",
                "+    } catch (Exception e) {",
                "+      return false;",
                "+    }",
                "+  }",
                "+}",
                "diff --git a/spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkSqlInterpreter.java b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkSqlInterpreter.java",
                "new file mode 100644",
                "index 000000000..9709f9eea",
                "--- /dev/null",
                "+++ b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkSqlInterpreter.java",
                "@@ -0,0 +1,187 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.spark;",
                "+",
                "+import java.lang.reflect.InvocationTargetException;",
                "+import java.lang.reflect.Method;",
                "+import java.util.List;",
                "+import java.util.Properties;",
                "+import java.util.concurrent.atomic.AtomicInteger;",
                "+",
                "+import org.apache.spark.SparkContext;",
                "+import org.apache.spark.sql.SQLContext;",
                "+import org.apache.zeppelin.interpreter.Interpreter;",
                "+import org.apache.zeppelin.interpreter.InterpreterContext;",
                "+import org.apache.zeppelin.interpreter.InterpreterException;",
                "+import org.apache.zeppelin.interpreter.InterpreterResult;",
                "+import org.apache.zeppelin.interpreter.InterpreterResult.Code;",
                "+import org.apache.zeppelin.interpreter.LazyOpenInterpreter;",
                "+import org.apache.zeppelin.interpreter.WrappedInterpreter;",
                "+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;",
                "+import org.apache.zeppelin.scheduler.Scheduler;",
                "+import org.apache.zeppelin.scheduler.SchedulerFactory;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+/**",
                "+ * Spark SQL interpreter for Zeppelin.",
                "+ */",
                "+public class SparkSqlInterpreter extends Interpreter {",
                "+  private Logger logger = LoggerFactory.getLogger(SparkSqlInterpreter.class);",
                "+",
                "+  public static final String MAX_RESULTS = \"zeppelin.spark.maxResult\";",
                "+",
                "+  AtomicInteger num = new AtomicInteger(0);",
                "+",
                "+  private int maxResult;",
                "+",
                "+  public SparkSqlInterpreter(Properties property) {",
                "+    super(property);",
                "+  }",
                "+",
                "+  @Override",
                "+  public void open() {",
                "+    this.maxResult = Integer.parseInt(getProperty(MAX_RESULTS));",
                "+  }",
                "+",
                "+  private SparkInterpreter getSparkInterpreter() throws InterpreterException {",
                "+    LazyOpenInterpreter lazy = null;",
                "+    SparkInterpreter spark = null;",
                "+    Interpreter p = getInterpreterInTheSameSessionByClassName(SparkInterpreter.class.getName());",
                "+",
                "+    while (p instanceof WrappedInterpreter) {",
                "+      if (p instanceof LazyOpenInterpreter) {",
                "+        lazy = (LazyOpenInterpreter) p;",
                "+      }",
                "+      p = ((WrappedInterpreter) p).getInnerInterpreter();",
                "+    }",
                "+    spark = (SparkInterpreter) p;",
                "+",
                "+    if (lazy != null) {",
                "+      lazy.open();",
                "+    }",
                "+    return spark;",
                "+  }",
                "+",
                "+  public boolean concurrentSQL() {",
                "+    return Boolean.parseBoolean(getProperty(\"zeppelin.spark.concurrentSQL\"));",
                "+  }",
                "+",
                "+  @Override",
                "+  public void close() {}",
                "+",
                "+  @Override",
                "+  public InterpreterResult interpret(String st, InterpreterContext context)",
                "+      throws InterpreterException {",
                "+    SQLContext sqlc = null;",
                "+    SparkInterpreter sparkInterpreter = getSparkInterpreter();",
                "+",
                "+    if (sparkInterpreter.isUnsupportedSparkVersion()) {",
                "+      return new InterpreterResult(Code.ERROR, \"Spark \"",
                "+          + sparkInterpreter.getSparkVersion().toString() + \" is not supported\");",
                "+    }",
                "+",
                "+    sparkInterpreter.populateSparkWebUrl(context);",
                "+    sparkInterpreter.getZeppelinContext().setInterpreterContext(context);",
                "+    sqlc = sparkInterpreter.getSQLContext();",
                "+    SparkContext sc = sqlc.sparkContext();",
                "+    if (concurrentSQL()) {",
                "+      sc.setLocalProperty(\"spark.scheduler.pool\", \"fair\");",
                "+    } else {",
                "+      sc.setLocalProperty(\"spark.scheduler.pool\", null);",
                "+    }",
                "+",
                "+    String jobDesc = \"Started by: \" + Utils.getUserName(context.getAuthenticationInfo());",
                "+    sc.setJobGroup(Utils.buildJobGroupId(context), jobDesc, false);",
                "+    Object rdd = null;",
                "+    try {",
                "+      // method signature of sqlc.sql() is changed",
                "+      // from  def sql(sqlText: String): SchemaRDD (1.2 and prior)",
                "+      // to    def sql(sqlText: String): DataFrame (1.3 and later).",
                "+      // Therefore need to use reflection to keep binary compatibility for all spark versions.",
                "+      Method sqlMethod = sqlc.getClass().getMethod(\"sql\", String.class);",
                "+      rdd = sqlMethod.invoke(sqlc, st);",
                "+    } catch (InvocationTargetException ite) {",
                "+      if (Boolean.parseBoolean(getProperty(\"zeppelin.spark.sql.stacktrace\"))) {",
                "+        throw new InterpreterException(ite);",
                "+      }",
                "+      logger.error(\"Invocation target exception\", ite);",
                "+      String msg = ite.getTargetException().getMessage()",
                "+              + \"\\nset zeppelin.spark.sql.stacktrace = true to see full stacktrace\";",
                "+      return new InterpreterResult(Code.ERROR, msg);",
                "+    } catch (NoSuchMethodException | SecurityException | IllegalAccessException",
                "+        | IllegalArgumentException e) {",
                "+      throw new InterpreterException(e);",
                "+    }",
                "+",
                "+    String msg = sparkInterpreter.getZeppelinContext().showData(rdd);",
                "+    sc.clearJobGroup();",
                "+    return new InterpreterResult(Code.SUCCESS, msg);",
                "+  }",
                "+",
                "+  @Override",
                "+  public void cancel(InterpreterContext context) throws InterpreterException {",
                "+    SparkInterpreter sparkInterpreter = getSparkInterpreter();",
                "+    SQLContext sqlc = sparkInterpreter.getSQLContext();",
                "+    SparkContext sc = sqlc.sparkContext();",
                "+",
                "+    sc.cancelJobGroup(Utils.buildJobGroupId(context));",
                "+  }",
                "+",
                "+  @Override",
                "+  public FormType getFormType() {",
                "+    return FormType.SIMPLE;",
                "+  }",
                "+",
                "+",
                "+  @Override",
                "+  public int getProgress(InterpreterContext context) throws InterpreterException {",
                "+    SparkInterpreter sparkInterpreter = getSparkInterpreter();",
                "+    return sparkInterpreter.getProgress(context);",
                "+  }",
                "+",
                "+  @Override",
                "+  public Scheduler getScheduler() {",
                "+    if (concurrentSQL()) {",
                "+      int maxConcurrency = 10;",
                "+      return SchedulerFactory.singleton().createOrGetParallelScheduler(",
                "+          SparkSqlInterpreter.class.getName() + this.hashCode(), maxConcurrency);",
                "+    } else {",
                "+      // getSparkInterpreter() calls open() inside.",
                "+      // That means if SparkInterpreter is not opened, it'll wait until SparkInterpreter open.",
                "+      // In this moment UI displays 'READY' or 'FINISHED' instead of 'PENDING' or 'RUNNING'.",
                "+      // It's because of scheduler is not created yet, and scheduler is created by this function.",
                "+      // Therefore, we can still use getSparkInterpreter() here, but it's better and safe",
                "+      // to getSparkInterpreter without opening it.",
                "+",
                "+      Interpreter intp =",
                "+          getInterpreterInTheSameSessionByClassName(SparkInterpreter.class.getName());",
                "+      if (intp != null) {",
                "+        return intp.getScheduler();",
                "+      } else {",
                "+        return null;",
                "+      }",
                "+    }",
                "+  }",
                "+",
                "+  @Override",
                "+  public List<InterpreterCompletion> completion(String buf, int cursor,",
                "+      InterpreterContext interpreterContext) {",
                "+    return null;",
                "+  }",
                "+}",
                "diff --git a/spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkVersion.java b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkVersion.java",
                "new file mode 100644",
                "index 000000000..4b027989e",
                "--- /dev/null",
                "+++ b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkVersion.java",
                "@@ -0,0 +1,130 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.zeppelin.spark;",
                "+",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+/**",
                "+ * Provide reading comparing capability of spark version returned from SparkContext.version()",
                "+ */",
                "+public class SparkVersion {",
                "+  Logger logger = LoggerFactory.getLogger(SparkVersion.class);",
                "+",
                "+  public static final SparkVersion SPARK_1_0_0 = SparkVersion.fromVersionString(\"1.0.0\");",
                "+  public static final SparkVersion SPARK_1_1_0 = SparkVersion.fromVersionString(\"1.1.0\");",
                "+  public static final SparkVersion SPARK_1_2_0 = SparkVersion.fromVersionString(\"1.2.0\");",
                "+  public static final SparkVersion SPARK_1_3_0 = SparkVersion.fromVersionString(\"1.3.0\");",
                "+  public static final SparkVersion SPARK_1_4_0 = SparkVersion.fromVersionString(\"1.4.0\");",
                "+  public static final SparkVersion SPARK_1_5_0 = SparkVersion.fromVersionString(\"1.5.0\");",
                "+  public static final SparkVersion SPARK_1_6_0 = SparkVersion.fromVersionString(\"1.6.0\");",
                "+",
                "+  public static final SparkVersion SPARK_2_0_0 = SparkVersion.fromVersionString(\"2.0.0\");",
                "+  public static final SparkVersion SPARK_2_3_0 = SparkVersion.fromVersionString(\"2.3.0\");",
                "+",
                "+  public static final SparkVersion MIN_SUPPORTED_VERSION =  SPARK_1_0_0;",
                "+  public static final SparkVersion UNSUPPORTED_FUTURE_VERSION = SPARK_2_3_0;",
                "+",
                "+  private int version;",
                "+  private String versionString;",
                "+",
                "+  SparkVersion(String versionString) {",
                "+    this.versionString = versionString;",
                "+",
                "+    try {",
                "+      int pos = versionString.indexOf('-');",
                "+",
                "+      String numberPart = versionString;",
                "+      if (pos > 0) {",
                "+        numberPart = versionString.substring(0, pos);",
                "+      }",
                "+",
                "+      String versions[] = numberPart.split(\"\\\\.\");",
                "+      int major = Integer.parseInt(versions[0]);",
                "+      int minor = Integer.parseInt(versions[1]);",
                "+      int patch = Integer.parseInt(versions[2]);",
                "+      // version is always 5 digits. (e.g. 2.0.0 -> 20000, 1.6.2 -> 10602)",
                "+      version = Integer.parseInt(String.format(\"%d%02d%02d\", major, minor, patch));",
                "+    } catch (Exception e) {",
                "+      logger.error(\"Can not recognize Spark version \" + versionString +",
                "+          \". Assume it's a future release\", e);",
                "+",
                "+      // assume it is future release",
                "+      version = 99999;",
                "+    }",
                "+  }",
                "+",
                "+  public int toNumber() {",
                "+    return version;",
                "+  }",
                "+",
                "+  public String toString() {",
                "+    return versionString;",
                "+  }",
                "+",
                "+  public boolean isUnsupportedVersion() {",
                "+    return olderThan(MIN_SUPPORTED_VERSION) || newerThanEquals(UNSUPPORTED_FUTURE_VERSION);",
                "+  }",
                "+",
                "+  public static SparkVersion fromVersionString(String versionString) {",
                "+    return new SparkVersion(versionString);",
                "+  }",
                "+",
                "+  public boolean isPysparkSupported() {",
                "+    return this.newerThanEquals(SPARK_1_2_0);",
                "+  }",
                "+",
                "+  public boolean isSparkRSupported() {",
                "+    return this.newerThanEquals(SPARK_1_4_0);",
                "+  }",
                "+",
                "+  public boolean hasDataFrame() {",
                "+    return this.newerThanEquals(SPARK_1_4_0);",
                "+  }",
                "+",
                "+  public boolean getProgress1_0() {",
                "+    return this.olderThan(SPARK_1_1_0);",
                "+  }",
                "+",
                "+  public boolean oldLoadFilesMethodName() {",
                "+    return this.olderThan(SPARK_1_3_0);",
                "+  }",
                "+",
                "+  public boolean oldSqlContextImplicits() {",
                "+    return this.olderThan(SPARK_1_3_0);",
                "+  }",
                "+",
                "+  public boolean equals(Object versionToCompare) {",
                "+    return version == ((SparkVersion) versionToCompare).version;",
                "+  }",
                "+",
                "+  public boolean newerThan(SparkVersion versionToCompare) {",
                "+    return version > versionToCompare.version;",
                "+  }",
                "+",
                "+  public boolean newerThanEquals(SparkVersion versionToCompare) {",
                "+    return version >= versionToCompare.version;",
                "+  }",
                "+",
                "+  public boolean olderThan(SparkVersion versionToCompare) {",
                "+    return version < versionToCompare.version;",
                "+  }",
                "+",
                "+  public boolean olderThanEquals(SparkVersion versionToCompare) {",
                "+    return version <= versionToCompare.version;",
                "+  }",
                "+}",
                "diff --git a/spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkZeppelinContext.java b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkZeppelinContext.java",
                "new file mode 100644",
                "index 000000000..8847039ef",
                "--- /dev/null",
                "+++ b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkZeppelinContext.java",
                "@@ -0,0 +1,312 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.spark;",
                "+",
                "+import com.google.common.collect.Lists;",
                "+import org.apache.spark.SparkContext;",
                "+import org.apache.spark.sql.SQLContext;",
                "+import org.apache.spark.sql.catalyst.expressions.Attribute;",
                "+import org.apache.zeppelin.annotation.ZeppelinApi;",
                "+import org.apache.zeppelin.display.AngularObjectWatcher;",
                "+import org.apache.zeppelin.display.Input;",
                "+import org.apache.zeppelin.display.ui.OptionInput;",
                "+import org.apache.zeppelin.interpreter.*;",
                "+import scala.Tuple2;",
                "+import scala.Unit;",
                "+",
                "+import java.lang.reflect.InvocationTargetException;",
                "+import java.lang.reflect.Method;",
                "+import java.util.*;",
                "+",
                "+import static scala.collection.JavaConversions.asJavaCollection;",
                "+import static scala.collection.JavaConversions.asJavaIterable;",
                "+import static scala.collection.JavaConversions.collectionAsScalaIterable;",
                "+",
                "+/**",
                "+ * ZeppelinContext for Spark",
                "+ */",
                "+public class SparkZeppelinContext extends BaseZeppelinContext {",
                "+",
                "+  private SparkContext sc;",
                "+  private List<Class> supportedClasses;",
                "+  private Map<String, String> interpreterClassMap;",
                "+",
                "+  public SparkZeppelinContext(",
                "+      SparkContext sc,",
                "+      InterpreterHookRegistry hooks,",
                "+      int maxResult) {",
                "+    super(hooks, maxResult);",
                "+    this.sc = sc;",
                "+",
                "+    interpreterClassMap = new HashMap();",
                "+    interpreterClassMap.put(\"spark\", \"org.apache.zeppelin.spark.SparkInterpreter\");",
                "+    interpreterClassMap.put(\"sql\", \"org.apache.zeppelin.spark.SparkSqlInterpreter\");",
                "+    interpreterClassMap.put(\"dep\", \"org.apache.zeppelin.spark.DepInterpreter\");",
                "+    interpreterClassMap.put(\"pyspark\", \"org.apache.zeppelin.spark.PySparkInterpreter\");",
                "+",
                "+    this.supportedClasses = new ArrayList<>();",
                "+    try {",
                "+      supportedClasses.add(this.getClass().forName(\"org.apache.spark.sql.Dataset\"));",
                "+    } catch (ClassNotFoundException e) {",
                "+    }",
                "+",
                "+    try {",
                "+      supportedClasses.add(this.getClass().forName(\"org.apache.spark.sql.DataFrame\"));",
                "+    } catch (ClassNotFoundException e) {",
                "+    }",
                "+",
                "+    try {",
                "+      supportedClasses.add(this.getClass().forName(\"org.apache.spark.sql.SchemaRDD\"));",
                "+    } catch (ClassNotFoundException e) {",
                "+    }",
                "+",
                "+    if (supportedClasses.isEmpty()) {",
                "+      throw new RuntimeException(\"Can not load Dataset/DataFrame/SchemaRDD class\");",
                "+    }",
                "+  }",
                "+",
                "+  @Override",
                "+  public List<Class> getSupportedClasses() {",
                "+    return supportedClasses;",
                "+  }",
                "+",
                "+  @Override",
                "+  public Map<String, String> getInterpreterClassMap() {",
                "+    return interpreterClassMap;",
                "+  }",
                "+",
                "+  @Override",
                "+  public String showData(Object df) {",
                "+    Object[] rows = null;",
                "+    Method take;",
                "+    String jobGroup = Utils.buildJobGroupId(interpreterContext);",
                "+    sc.setJobGroup(jobGroup, \"Zeppelin\", false);",
                "+",
                "+    try {",
                "+      // convert it to DataFrame if it is Dataset, as we will iterate all the records",
                "+      // and assume it is type Row.",
                "+      if (df.getClass().getCanonicalName().equals(\"org.apache.spark.sql.Dataset\")) {",
                "+        Method convertToDFMethod = df.getClass().getMethod(\"toDF\");",
                "+        df = convertToDFMethod.invoke(df);",
                "+      }",
                "+      take = df.getClass().getMethod(\"take\", int.class);",
                "+      rows = (Object[]) take.invoke(df, maxResult + 1);",
                "+    } catch (NoSuchMethodException | SecurityException | IllegalAccessException",
                "+        | IllegalArgumentException | InvocationTargetException | ClassCastException e) {",
                "+      sc.clearJobGroup();",
                "+      throw new RuntimeException(e);",
                "+    }",
                "+",
                "+    List<Attribute> columns = null;",
                "+    // get field names",
                "+    try {",
                "+      // Use reflection because of classname returned by queryExecution changes from",
                "+      // Spark <1.5.2 org.apache.spark.sql.SQLContext$QueryExecution",
                "+      // Spark 1.6.0> org.apache.spark.sql.hive.HiveContext$QueryExecution",
                "+      Object qe = df.getClass().getMethod(\"queryExecution\").invoke(df);",
                "+      Object a = qe.getClass().getMethod(\"analyzed\").invoke(qe);",
                "+      scala.collection.Seq seq = (scala.collection.Seq) a.getClass().getMethod(\"output\").invoke(a);",
                "+",
                "+      columns = (List<Attribute>) scala.collection.JavaConverters.seqAsJavaListConverter(seq)",
                "+          .asJava();",
                "+    } catch (NoSuchMethodException | SecurityException | IllegalAccessException",
                "+        | IllegalArgumentException | InvocationTargetException e) {",
                "+      throw new RuntimeException(e);",
                "+    }",
                "+",
                "+    StringBuilder msg = new StringBuilder();",
                "+    msg.append(\"%table \");",
                "+    for (Attribute col : columns) {",
                "+      msg.append(col.name() + \"\\t\");",
                "+    }",
                "+    String trim = msg.toString().trim();",
                "+    msg = new StringBuilder(trim);",
                "+    msg.append(\"\\n\");",
                "+",
                "+    // ArrayType, BinaryType, BooleanType, ByteType, DecimalType, DoubleType, DynamicType,",
                "+    // FloatType, FractionalType, IntegerType, IntegralType, LongType, MapType, NativeType,",
                "+    // NullType, NumericType, ShortType, StringType, StructType",
                "+",
                "+    try {",
                "+      for (int r = 0; r < maxResult && r < rows.length; r++) {",
                "+        Object row = rows[r];",
                "+        Method isNullAt = row.getClass().getMethod(\"isNullAt\", int.class);",
                "+        Method apply = row.getClass().getMethod(\"apply\", int.class);",
                "+",
                "+        for (int i = 0; i < columns.size(); i++) {",
                "+          if (!(Boolean) isNullAt.invoke(row, i)) {",
                "+            msg.append(apply.invoke(row, i).toString());",
                "+          } else {",
                "+            msg.append(\"null\");",
                "+          }",
                "+          if (i != columns.size() - 1) {",
                "+            msg.append(\"\\t\");",
                "+          }",
                "+        }",
                "+        msg.append(\"\\n\");",
                "+      }",
                "+    } catch (NoSuchMethodException | SecurityException | IllegalAccessException",
                "+        | IllegalArgumentException | InvocationTargetException e) {",
                "+      throw new RuntimeException(e);",
                "+    }",
                "+",
                "+    if (rows.length > maxResult) {",
                "+      msg.append(\"\\n\");",
                "+      msg.append(ResultMessages.getExceedsLimitRowsMessage(maxResult,",
                "+          SparkSqlInterpreter.MAX_RESULTS));",
                "+    }",
                "+",
                "+    sc.clearJobGroup();",
                "+    return msg.toString();",
                "+  }",
                "+",
                "+  @ZeppelinApi",
                "+  public Object select(String name, scala.collection.Iterable<Tuple2<Object, String>> options) {",
                "+    return select(name, \"\", options);",
                "+  }",
                "+",
                "+  @ZeppelinApi",
                "+  public Object select(String name, Object defaultValue,",
                "+                       scala.collection.Iterable<Tuple2<Object, String>> options) {",
                "+    return select(name, defaultValue, tuplesToParamOptions(options));",
                "+  }",
                "+",
                "+  @ZeppelinApi",
                "+  public scala.collection.Seq<Object> checkbox(",
                "+      String name,",
                "+      scala.collection.Iterable<Tuple2<Object, String>> options) {",
                "+    List<Object> allChecked = new LinkedList<>();",
                "+    for (Tuple2<Object, String> option : asJavaIterable(options)) {",
                "+      allChecked.add(option._1());",
                "+    }",
                "+    return checkbox(name, collectionAsScalaIterable(allChecked), options);",
                "+  }",
                "+",
                "+  @ZeppelinApi",
                "+  public scala.collection.Seq<Object> checkbox(",
                "+      String name,",
                "+      scala.collection.Iterable<Object> defaultChecked,",
                "+      scala.collection.Iterable<Tuple2<Object, String>> options) {",
                "+    List<Object> defaultCheckedList = Lists.newArrayList(asJavaIterable(defaultChecked).iterator());",
                "+    Collection<Object> checkbox = checkbox(name, defaultCheckedList, tuplesToParamOptions(options));",
                "+    List<Object> checkboxList = Arrays.asList(checkbox.toArray());",
                "+    return scala.collection.JavaConversions.asScalaBuffer(checkboxList).toSeq();",
                "+  }",
                "+",
                "+  @ZeppelinApi",
                "+  public Object noteSelect(String name, scala.collection.Iterable<Tuple2<Object, String>> options) {",
                "+    return noteSelect(name, \"\", options);",
                "+  }",
                "+",
                "+  @ZeppelinApi",
                "+  public Object noteSelect(String name, Object defaultValue,",
                "+                       scala.collection.Iterable<Tuple2<Object, String>> options) {",
                "+    return noteSelect(name, defaultValue, tuplesToParamOptions(options));",
                "+  }",
                "+",
                "+  @ZeppelinApi",
                "+  public scala.collection.Seq<Object> noteCheckbox(",
                "+      String name,",
                "+      scala.collection.Iterable<Tuple2<Object, String>> options) {",
                "+    List<Object> allChecked = new LinkedList<>();",
                "+    for (Tuple2<Object, String> option : asJavaIterable(options)) {",
                "+      allChecked.add(option._1());",
                "+    }",
                "+    return noteCheckbox(name, collectionAsScalaIterable(allChecked), options);",
                "+  }",
                "+",
                "+  @ZeppelinApi",
                "+  public scala.collection.Seq<Object> noteCheckbox(",
                "+      String name,",
                "+      scala.collection.Iterable<Object> defaultChecked,",
                "+      scala.collection.Iterable<Tuple2<Object, String>> options) {",
                "+    List<Object> defaultCheckedList = Lists.newArrayList(asJavaIterable(defaultChecked).iterator());",
                "+    Collection<Object> checkbox = noteCheckbox(name, defaultCheckedList,",
                "+        tuplesToParamOptions(options));",
                "+    List<Object> checkboxList = Arrays.asList(checkbox.toArray());",
                "+    return scala.collection.JavaConversions.asScalaBuffer(checkboxList).toSeq();",
                "+  }",
                "+",
                "+  private OptionInput.ParamOption[] tuplesToParamOptions(",
                "+      scala.collection.Iterable<Tuple2<Object, String>> options) {",
                "+    int n = options.size();",
                "+    OptionInput.ParamOption[] paramOptions = new OptionInput.ParamOption[n];",
                "+    Iterator<Tuple2<Object, String>> it = asJavaIterable(options).iterator();",
                "+",
                "+    int i = 0;",
                "+    while (it.hasNext()) {",
                "+      Tuple2<Object, String> valueAndDisplayValue = it.next();",
                "+      paramOptions[i++] = new OptionInput.ParamOption(valueAndDisplayValue._1(),",
                "+          valueAndDisplayValue._2());",
                "+    }",
                "+",
                "+    return paramOptions;",
                "+  }",
                "+",
                "+  @ZeppelinApi",
                "+  public void angularWatch(String name,",
                "+                           final scala.Function2<Object, Object, Unit> func) {",
                "+    angularWatch(name, interpreterContext.getNoteId(), func);",
                "+  }",
                "+",
                "+  @Deprecated",
                "+  public void angularWatchGlobal(String name,",
                "+                                 final scala.Function2<Object, Object, Unit> func) {",
                "+    angularWatch(name, null, func);",
                "+  }",
                "+",
                "+  @ZeppelinApi",
                "+  public void angularWatch(",
                "+      String name,",
                "+      final scala.Function3<Object, Object, InterpreterContext, Unit> func) {",
                "+    angularWatch(name, interpreterContext.getNoteId(), func);",
                "+  }",
                "+",
                "+  @Deprecated",
                "+  public void angularWatchGlobal(",
                "+      String name,",
                "+      final scala.Function3<Object, Object, InterpreterContext, Unit> func) {",
                "+    angularWatch(name, null, func);",
                "+  }",
                "+",
                "+  private void angularWatch(String name, String noteId,",
                "+                            final scala.Function2<Object, Object, Unit> func) {",
                "+    AngularObjectWatcher w = new AngularObjectWatcher(getInterpreterContext()) {",
                "+      @Override",
                "+      public void watch(Object oldObject, Object newObject,",
                "+                        InterpreterContext context) {",
                "+        func.apply(newObject, newObject);",
                "+      }",
                "+    };",
                "+    angularWatch(name, noteId, w);",
                "+  }",
                "+",
                "+  private void angularWatch(",
                "+      String name,",
                "+      String noteId,",
                "+      final scala.Function3<Object, Object, InterpreterContext, Unit> func) {",
                "+    AngularObjectWatcher w = new AngularObjectWatcher(getInterpreterContext()) {",
                "+      @Override",
                "+      public void watch(Object oldObject, Object newObject,",
                "+                        InterpreterContext context) {",
                "+        func.apply(oldObject, newObject, context);",
                "+      }",
                "+    };",
                "+    angularWatch(name, noteId, w);",
                "+  }",
                "+}",
                "diff --git a/spark/interpreter/src/main/java/org/apache/zeppelin/spark/Utils.java b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/Utils.java",
                "new file mode 100644",
                "index 000000000..82bf2106e",
                "--- /dev/null",
                "+++ b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/Utils.java",
                "@@ -0,0 +1,177 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.spark;",
                "+",
                "+import org.apache.zeppelin.interpreter.InterpreterContext;",
                "+import org.apache.zeppelin.user.AuthenticationInfo;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+import java.lang.reflect.Constructor;",
                "+import java.lang.reflect.InvocationTargetException;",
                "+import java.util.Properties;",
                "+import java.util.regex.Matcher;",
                "+import java.util.regex.Pattern;",
                "+",
                "+/**",
                "+ * Utility and helper functions for the Spark Interpreter",
                "+ */",
                "+class Utils {",
                "+  public static Logger logger = LoggerFactory.getLogger(Utils.class);",
                "+  private static final String SCALA_COMPILER_VERSION = evaluateScalaCompilerVersion();",
                "+",
                "+  static Object invokeMethod(Object o, String name) {",
                "+    return invokeMethod(o, name, new Class[]{}, new Object[]{});",
                "+  }",
                "+",
                "+  static Object invokeMethod(Object o, String name, Class<?>[] argTypes, Object[] params) {",
                "+    try {",
                "+      return o.getClass().getMethod(name, argTypes).invoke(o, params);",
                "+    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {",
                "+      logger.error(e.getMessage(), e);",
                "+    }",
                "+    return null;",
                "+  }",
                "+",
                "+  static Object invokeStaticMethod(Class<?> c, String name, Class<?>[] argTypes, Object[] params) {",
                "+    try {",
                "+      return c.getMethod(name, argTypes).invoke(null, params);",
                "+    } catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException e) {",
                "+      logger.error(e.getMessage(), e);",
                "+    }",
                "+    return null;",
                "+  }",
                "+",
                "+  static Object invokeStaticMethod(Class<?> c, String name) {",
                "+    return invokeStaticMethod(c, name, new Class[]{}, new Object[]{});",
                "+  }",
                "+",
                "+  static Class<?> findClass(String name) {",
                "+    return findClass(name, false);",
                "+  }",
                "+",
                "+  static Class<?> findClass(String name, boolean silence) {",
                "+    try {",
                "+      return Class.forName(name);",
                "+    } catch (ClassNotFoundException e) {",
                "+      if (!silence) {",
                "+        logger.error(e.getMessage(), e);",
                "+      }",
                "+      return null;",
                "+    }",
                "+  }",
                "+",
                "+  static Object instantiateClass(String name, Class<?>[] argTypes, Object[] params) {",
                "+    try {",
                "+      Constructor<?> constructor = Utils.class.getClassLoader()",
                "+              .loadClass(name).getConstructor(argTypes);",
                "+      return constructor.newInstance(params);",
                "+    } catch (NoSuchMethodException | ClassNotFoundException | IllegalAccessException |",
                "+      InstantiationException | InvocationTargetException e) {",
                "+      logger.error(e.getMessage(), e);",
                "+    }",
                "+    return null;",
                "+  }",
                "+",
                "+  // function works after intp is initialized",
                "+  static boolean isScala2_10() {",
                "+    try {",
                "+      Class.forName(\"org.apache.spark.repl.SparkIMain\");",
                "+      return true;",
                "+    } catch (ClassNotFoundException e) {",
                "+      return false;",
                "+    } catch (IncompatibleClassChangeError e) {",
                "+      return false;",
                "+    }",
                "+  }",
                "+",
                "+  static boolean isScala2_11() {",
                "+    return !isScala2_10();",
                "+  }",
                "+  ",
                "+  static boolean isCompilerAboveScala2_11_7() {",
                "+    if (isScala2_10() || SCALA_COMPILER_VERSION == null) {",
                "+      return false;",
                "+    }",
                "+    Pattern p = Pattern.compile(\"([0-9]+)[.]([0-9]+)[.]([0-9]+)\");",
                "+    Matcher m = p.matcher(SCALA_COMPILER_VERSION);",
                "+    if (m.matches()) {",
                "+      int major = Integer.parseInt(m.group(1));",
                "+      int minor = Integer.parseInt(m.group(2));",
                "+      int bugfix = Integer.parseInt(m.group(3));",
                "+      return (major > 2 || (major == 2 && minor > 11) || (major == 2 && minor == 11 && bugfix > 7));",
                "+    }",
                "+    return false;",
                "+  }",
                "+",
                "+  private static String evaluateScalaCompilerVersion() {",
                "+    String version = null;",
                "+    try {",
                "+      Properties p = new Properties();",
                "+      Class<?> completionClass = findClass(\"scala.tools.nsc.interpreter.JLineCompletion\");",
                "+      if (completionClass != null) {",
                "+        try (java.io.InputStream in = completionClass.getClass()",
                "+          .getResourceAsStream(\"/compiler.properties\")) {",
                "+          p.load(in);",
                "+          version = p.getProperty(\"version.number\");",
                "+        } catch (java.io.IOException e) {",
                "+          logger.error(\"Failed to evaluate Scala compiler version\", e);",
                "+        }",
                "+      }",
                "+    } catch (RuntimeException e) {",
                "+      logger.error(\"Failed to evaluate Scala compiler version\", e);",
                "+    }",
                "+    return version;",
                "+  }",
                "+",
                "+  static boolean isSpark2() {",
                "+    try {",
                "+      Class.forName(\"org.apache.spark.sql.SparkSession\");",
                "+      return true;",
                "+    } catch (ClassNotFoundException e) {",
                "+      return false;",
                "+    }",
                "+  }",
                "+  ",
                "+  public static String buildJobGroupId(InterpreterContext context) {",
                "+    return \"zeppelin-\" + context.getNoteId() + \"-\" + context.getParagraphId();",
                "+  }",
                "+",
                "+  public static String getNoteId(String jobgroupId) {",
                "+    int indexOf = jobgroupId.indexOf(\"-\");",
                "+    int secondIndex = jobgroupId.indexOf(\"-\", indexOf + 1);",
                "+    return jobgroupId.substring(indexOf + 1, secondIndex);",
                "+  }",
                "+",
                "+  public static String getParagraphId(String jobgroupId) {",
                "+    int indexOf = jobgroupId.indexOf(\"-\");",
                "+    int secondIndex = jobgroupId.indexOf(\"-\", indexOf + 1);",
                "+    return jobgroupId.substring(secondIndex + 1, jobgroupId.length());",
                "+  }",
                "+",
                "+  public static String getUserName(AuthenticationInfo info) {",
                "+    String uName = \"\";",
                "+    if (info != null) {",
                "+      uName = info.getUser();",
                "+    }",
                "+    if (uName == null || uName.isEmpty()) {",
                "+      uName = \"anonymous\";",
                "+    }",
                "+    return uName;",
                "+  }",
                "+}",
                "diff --git a/spark/interpreter/src/main/java/org/apache/zeppelin/spark/ZeppelinR.java b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/ZeppelinR.java",
                "new file mode 100644",
                "index 000000000..130d84997",
                "--- /dev/null",
                "+++ b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/ZeppelinR.java",
                "@@ -0,0 +1,394 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.zeppelin.spark;",
                "+",
                "+import org.apache.commons.exec.*;",
                "+import org.apache.commons.exec.environment.EnvironmentUtils;",
                "+import org.apache.commons.io.IOUtils;",
                "+import org.apache.zeppelin.interpreter.InterpreterException;",
                "+import org.apache.zeppelin.interpreter.InterpreterOutput;",
                "+import org.apache.zeppelin.interpreter.InterpreterOutputListener;",
                "+import org.apache.zeppelin.interpreter.InterpreterResultMessageOutput;",
                "+import org.apache.zeppelin.interpreter.util.InterpreterOutputStream;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+import java.io.*;",
                "+import java.util.Collections;",
                "+import java.util.HashMap;",
                "+import java.util.Map;",
                "+",
                "+/**",
                "+ * R repl interaction",
                "+ */",
                "+public class ZeppelinR implements ExecuteResultHandler {",
                "+  Logger logger = LoggerFactory.getLogger(ZeppelinR.class);",
                "+  private final String rCmdPath;",
                "+  private final SparkVersion sparkVersion;",
                "+  private DefaultExecutor executor;",
                "+  private InterpreterOutputStream outputStream;",
                "+  private PipedOutputStream input;",
                "+  private final String scriptPath;",
                "+  private final String libPath;",
                "+  static Map<Integer, ZeppelinR> zeppelinR = Collections.synchronizedMap(",
                "+      new HashMap<Integer, ZeppelinR>());",
                "+",
                "+  private InterpreterOutput initialOutput;",
                "+  private final int port;",
                "+  private boolean rScriptRunning;",
                "+",
                "+  /**",
                "+   * To be notified R repl initialization",
                "+   */",
                "+  boolean rScriptInitialized = false;",
                "+  Integer rScriptInitializeNotifier = new Integer(0);",
                "+",
                "+  /**",
                "+   * Request to R repl",
                "+   */",
                "+  Request rRequestObject = null;",
                "+  Integer rRequestNotifier = new Integer(0);",
                "+",
                "+  /**",
                "+   * Request object",
                "+   *",
                "+   * type : \"eval\", \"set\", \"get\"",
                "+   * stmt : statement to evaluate when type is \"eval\"",
                "+   *        key when type is \"set\" or \"get\"",
                "+   * value : value object when type is \"put\"",
                "+   */",
                "+  public static class Request {",
                "+    String type;",
                "+    String stmt;",
                "+    Object value;",
                "+",
                "+    public Request(String type, String stmt, Object value) {",
                "+      this.type = type;",
                "+      this.stmt = stmt;",
                "+      this.value = value;",
                "+    }",
                "+",
                "+    public String getType() {",
                "+      return type;",
                "+    }",
                "+",
                "+    public String getStmt() {",
                "+      return stmt;",
                "+    }",
                "+",
                "+    public Object getValue() {",
                "+      return value;",
                "+    }",
                "+  }",
                "+",
                "+  /**",
                "+   * Response from R repl",
                "+   */",
                "+  Object rResponseValue = null;",
                "+  boolean rResponseError = false;",
                "+  Integer rResponseNotifier = new Integer(0);",
                "+",
                "+  /**",
                "+   * Create ZeppelinR instance",
                "+   * @param rCmdPath R repl commandline path",
                "+   * @param libPath sparkr library path",
                "+   */",
                "+  public ZeppelinR(String rCmdPath, String libPath, int sparkRBackendPort,",
                "+      SparkVersion sparkVersion) {",
                "+    this.rCmdPath = rCmdPath;",
                "+    this.libPath = libPath;",
                "+    this.sparkVersion = sparkVersion;",
                "+    this.port = sparkRBackendPort;",
                "+    try {",
                "+      File scriptFile = File.createTempFile(\"zeppelin_sparkr-\", \".R\");",
                "+      scriptPath = scriptFile.getAbsolutePath();",
                "+    } catch (IOException e) {",
                "+      throw new RuntimeException(e);",
                "+    }",
                "+  }",
                "+",
                "+  /**",
                "+   * Start R repl",
                "+   * @throws IOException",
                "+   */",
                "+  public void open() throws IOException, InterpreterException {",
                "+    createRScript();",
                "+",
                "+    zeppelinR.put(hashCode(), this);",
                "+",
                "+    CommandLine cmd = CommandLine.parse(rCmdPath);",
                "+    cmd.addArgument(\"--no-save\");",
                "+    cmd.addArgument(\"--no-restore\");",
                "+    cmd.addArgument(\"-f\");",
                "+    cmd.addArgument(scriptPath);",
                "+    cmd.addArgument(\"--args\");",
                "+    cmd.addArgument(Integer.toString(hashCode()));",
                "+    cmd.addArgument(Integer.toString(port));",
                "+    cmd.addArgument(libPath);",
                "+    cmd.addArgument(Integer.toString(sparkVersion.toNumber()));",
                "+    ",
                "+    // dump out the R command to facilitate manually running it, e.g. for fault diagnosis purposes",
                "+    logger.debug(cmd.toString());",
                "+",
                "+    executor = new DefaultExecutor();",
                "+    outputStream = new InterpreterOutputStream(logger);",
                "+",
                "+    input = new PipedOutputStream();",
                "+    PipedInputStream in = new PipedInputStream(input);",
                "+",
                "+    PumpStreamHandler streamHandler = new PumpStreamHandler(outputStream, outputStream, in);",
                "+    executor.setWatchdog(new ExecuteWatchdog(ExecuteWatchdog.INFINITE_TIMEOUT));",
                "+    executor.setStreamHandler(streamHandler);",
                "+    Map env = EnvironmentUtils.getProcEnvironment();",
                "+",
                "+",
                "+    initialOutput = new InterpreterOutput(null);",
                "+    outputStream.setInterpreterOutput(initialOutput);",
                "+    executor.execute(cmd, env, this);",
                "+    rScriptRunning = true;",
                "+",
                "+    // flush output",
                "+    eval(\"cat('')\");",
                "+  }",
                "+",
                "+  /**",
                "+   * Evaluate expression",
                "+   * @param expr",
                "+   * @return",
                "+   */",
                "+  public Object eval(String expr) throws InterpreterException {",
                "+    synchronized (this) {",
                "+      rRequestObject = new Request(\"eval\", expr, null);",
                "+      return request();",
                "+    }",
                "+  }",
                "+",
                "+  /**",
                "+   * assign value to key",
                "+   * @param key",
                "+   * @param value",
                "+   */",
                "+  public void set(String key, Object value) throws InterpreterException {",
                "+    synchronized (this) {",
                "+      rRequestObject = new Request(\"set\", key, value);",
                "+      request();",
                "+    }",
                "+  }",
                "+",
                "+  /**",
                "+   * get value of key",
                "+   * @param key",
                "+   * @return",
                "+   */",
                "+  public Object get(String key) throws InterpreterException {",
                "+    synchronized (this) {",
                "+      rRequestObject = new Request(\"get\", key, null);",
                "+      return request();",
                "+    }",
                "+  }",
                "+",
                "+  /**",
                "+   * get value of key, as a string",
                "+   * @param key",
                "+   * @return",
                "+   */",
                "+  public String getS0(String key) throws InterpreterException {",
                "+    synchronized (this) {",
                "+      rRequestObject = new Request(\"getS\", key, null);",
                "+      return (String) request();",
                "+    }",
                "+  }",
                "+",
                "+  /**",
                "+   * Send request to r repl and return response",
                "+   * @return responseValue",
                "+   */",
                "+  private Object request() throws RuntimeException, InterpreterException {",
                "+    if (!rScriptRunning) {",
                "+      throw new RuntimeException(\"r repl is not running\");",
                "+    }",
                "+",
                "+    // wait for rscript initialized",
                "+    if (!rScriptInitialized) {",
                "+      waitForRScriptInitialized();",
                "+    }",
                "+",
                "+    rResponseValue = null;",
                "+",
                "+    synchronized (rRequestNotifier) {",
                "+      rRequestNotifier.notify();",
                "+    }",
                "+",
                "+    Object respValue = null;",
                "+    synchronized (rResponseNotifier) {",
                "+      while (rResponseValue == null && rScriptRunning) {",
                "+        try {",
                "+          rResponseNotifier.wait(1000);",
                "+        } catch (InterruptedException e) {",
                "+          logger.error(e.getMessage(), e);",
                "+        }",
                "+      }",
                "+      respValue = rResponseValue;",
                "+      rResponseValue = null;",
                "+    }",
                "+",
                "+    if (rResponseError) {",
                "+      throw new RuntimeException(respValue.toString());",
                "+    } else {",
                "+      return respValue;",
                "+    }",
                "+  }",
                "+",
                "+  /**",
                "+   * Wait until src/main/resources/R/zeppelin_sparkr.R is initialized",
                "+   * and call onScriptInitialized()",
                "+   *",
                "+   * @throws InterpreterException",
                "+   */",
                "+  private void waitForRScriptInitialized() throws InterpreterException {",
                "+    synchronized (rScriptInitializeNotifier) {",
                "+      long startTime = System.nanoTime();",
                "+      while (rScriptInitialized == false &&",
                "+          rScriptRunning &&",
                "+          System.nanoTime() - startTime < 10L * 1000 * 1000000) {",
                "+        try {",
                "+          rScriptInitializeNotifier.wait(1000);",
                "+        } catch (InterruptedException e) {",
                "+          logger.error(e.getMessage(), e);",
                "+        }",
                "+      }",
                "+    }",
                "+",
                "+    String errorMessage = \"\";",
                "+    try {",
                "+      initialOutput.flush();",
                "+      errorMessage = new String(initialOutput.toByteArray());",
                "+    } catch (IOException e) {",
                "+      e.printStackTrace();",
                "+    }",
                "+",
                "+    if (rScriptInitialized == false) {",
                "+      throw new InterpreterException(\"sparkr is not responding \" + errorMessage);",
                "+    }",
                "+  }",
                "+",
                "+  /**",
                "+   * invoked by src/main/resources/R/zeppelin_sparkr.R",
                "+   * @return",
                "+   */",
                "+  public Request getRequest() {",
                "+    synchronized (rRequestNotifier) {",
                "+      while (rRequestObject == null) {",
                "+        try {",
                "+          rRequestNotifier.wait(1000);",
                "+        } catch (InterruptedException e) {",
                "+          logger.error(e.getMessage(), e);",
                "+        }",
                "+      }",
                "+",
                "+      Request req = rRequestObject;",
                "+      rRequestObject = null;",
                "+      return req;",
                "+    }",
                "+  }",
                "+",
                "+  /**",
                "+   * invoked by src/main/resources/R/zeppelin_sparkr.R",
                "+   * @param value",
                "+   * @param error",
                "+   */",
                "+  public void setResponse(Object value, boolean error) {",
                "+    synchronized (rResponseNotifier) {",
                "+      rResponseValue = value;",
                "+      rResponseError = error;",
                "+      rResponseNotifier.notify();",
                "+    }",
                "+  }",
                "+",
                "+  /**",
                "+   * invoked by src/main/resources/R/zeppelin_sparkr.R",
                "+   */",
                "+  public void onScriptInitialized() {",
                "+    synchronized (rScriptInitializeNotifier) {",
                "+      rScriptInitialized = true;",
                "+      rScriptInitializeNotifier.notifyAll();",
                "+    }",
                "+  }",
                "+",
                "+  /**",
                "+   * Create R script in tmp dir",
                "+   */",
                "+  private void createRScript() throws InterpreterException {",
                "+    ClassLoader classLoader = getClass().getClassLoader();",
                "+    File out = new File(scriptPath);",
                "+",
                "+    if (out.exists() && out.isDirectory()) {",
                "+      throw new InterpreterException(\"Can't create r script \" + out.getAbsolutePath());",
                "+    }",
                "+",
                "+    try {",
                "+      FileOutputStream outStream = new FileOutputStream(out);",
                "+      IOUtils.copy(",
                "+          classLoader.getResourceAsStream(\"R/zeppelin_sparkr.R\"),",
                "+          outStream);",
                "+      outStream.close();",
                "+    } catch (IOException e) {",
                "+      throw new InterpreterException(e);",
                "+    }",
                "+",
                "+    logger.info(\"File {} created\", scriptPath);",
                "+  }",
                "+",
                "+  /**",
                "+   * Terminate this R repl",
                "+   */",
                "+  public void close() {",
                "+    executor.getWatchdog().destroyProcess();",
                "+    new File(scriptPath).delete();",
                "+    zeppelinR.remove(hashCode());",
                "+  }",
                "+",
                "+  /**",
                "+   * Get instance",
                "+   * This method will be invoded from zeppelin_sparkr.R",
                "+   * @param hashcode",
                "+   * @return",
                "+   */",
                "+  public static ZeppelinR getZeppelinR(int hashcode) {",
                "+    return zeppelinR.get(hashcode);",
                "+  }",
                "+",
                "+  /**",
                "+   * Pass InterpreterOutput to capture the repl output",
                "+   * @param out",
                "+   */",
                "+  public void setInterpreterOutput(InterpreterOutput out) {",
                "+    outputStream.setInterpreterOutput(out);",
                "+  }",
                "+",
                "+  @Override",
                "+  public void onProcessComplete(int i) {",
                "+    logger.info(\"process complete {}\", i);",
                "+    rScriptRunning = false;",
                "+  }",
                "+",
                "+  @Override",
                "+  public void onProcessFailed(ExecuteException e) {",
                "+    logger.error(e.getMessage(), e);",
                "+    rScriptRunning = false;",
                "+  }",
                "+}",
                "diff --git a/spark/interpreter/src/main/java/org/apache/zeppelin/spark/ZeppelinRContext.java b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/ZeppelinRContext.java",
                "new file mode 100644",
                "index 000000000..80ea03b9f",
                "--- /dev/null",
                "+++ b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/ZeppelinRContext.java",
                "@@ -0,0 +1,69 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.spark;",
                "+",
                "+import org.apache.spark.SparkContext;",
                "+import org.apache.spark.api.java.JavaSparkContext;",
                "+import org.apache.spark.sql.SQLContext;",
                "+",
                "+/**",
                "+ * Contains the Spark and Zeppelin Contexts made available to SparkR.",
                "+ */",
                "+public class ZeppelinRContext {",
                "+  private static SparkContext sparkContext;",
                "+  private static SQLContext sqlContext;",
                "+  private static SparkZeppelinContext zeppelinContext;",
                "+  private static Object sparkSession;",
                "+  private static JavaSparkContext javaSparkContext;",
                "+",
                "+  public static void setSparkContext(SparkContext sparkContext) {",
                "+    ZeppelinRContext.sparkContext = sparkContext;",
                "+  }",
                "+",
                "+  public static void setZeppelinContext(SparkZeppelinContext zeppelinContext) {",
                "+    ZeppelinRContext.zeppelinContext = zeppelinContext;",
                "+  }",
                "+",
                "+  public static void setSqlContext(SQLContext sqlContext) {",
                "+    ZeppelinRContext.sqlContext = sqlContext;",
                "+  }",
                "+",
                "+  public static void setSparkSession(Object sparkSession) {",
                "+    ZeppelinRContext.sparkSession = sparkSession;",
                "+  }",
                "+",
                "+  public static SparkContext getSparkContext() {",
                "+    return sparkContext;",
                "+  }",
                "+",
                "+  public static SQLContext getSqlContext() {",
                "+    return sqlContext;",
                "+  }",
                "+",
                "+  public static SparkZeppelinContext getZeppelinContext() {",
                "+    return zeppelinContext;",
                "+  }",
                "+",
                "+  public static Object getSparkSession() {",
                "+    return sparkSession;",
                "+  }",
                "+",
                "+  public static void setJavaSparkContext(JavaSparkContext jsc) { javaSparkContext = jsc; }",
                "+",
                "+  public static JavaSparkContext getJavaSparkContext() { return javaSparkContext; }",
                "+}",
                "diff --git a/spark/interpreter/src/main/java/org/apache/zeppelin/spark/dep/SparkDependencyContext.java b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/dep/SparkDependencyContext.java",
                "new file mode 100644",
                "index 000000000..0235fc666",
                "--- /dev/null",
                "+++ b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/dep/SparkDependencyContext.java",
                "@@ -0,0 +1,181 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.spark.dep;",
                "+",
                "+import java.io.File;",
                "+import java.net.MalformedURLException;",
                "+import java.util.LinkedList;",
                "+import java.util.List;",
                "+",
                "+import org.apache.zeppelin.dep.Booter;",
                "+import org.apache.zeppelin.dep.Dependency;",
                "+import org.apache.zeppelin.dep.Repository;",
                "+",
                "+import org.sonatype.aether.RepositorySystem;",
                "+import org.sonatype.aether.RepositorySystemSession;",
                "+import org.sonatype.aether.artifact.Artifact;",
                "+import org.sonatype.aether.collection.CollectRequest;",
                "+import org.sonatype.aether.graph.DependencyFilter;",
                "+import org.sonatype.aether.repository.RemoteRepository;",
                "+import org.sonatype.aether.repository.Authentication;",
                "+import org.sonatype.aether.resolution.ArtifactResolutionException;",
                "+import org.sonatype.aether.resolution.ArtifactResult;",
                "+import org.sonatype.aether.resolution.DependencyRequest;",
                "+import org.sonatype.aether.resolution.DependencyResolutionException;",
                "+import org.sonatype.aether.util.artifact.DefaultArtifact;",
                "+import org.sonatype.aether.util.artifact.JavaScopes;",
                "+import org.sonatype.aether.util.filter.DependencyFilterUtils;",
                "+import org.sonatype.aether.util.filter.PatternExclusionsDependencyFilter;",
                "+",
                "+",
                "+/**",
                "+ *",
                "+ */",
                "+public class SparkDependencyContext {",
                "+  List<Dependency> dependencies = new LinkedList<>();",
                "+  List<Repository> repositories = new LinkedList<>();",
                "+",
                "+  List<File> files = new LinkedList<>();",
                "+  List<File> filesDist = new LinkedList<>();",
                "+  private RepositorySystem system = Booter.newRepositorySystem();",
                "+  private RepositorySystemSession session;",
                "+  private RemoteRepository mavenCentral = Booter.newCentralRepository();",
                "+  private RemoteRepository mavenLocal = Booter.newLocalRepository();",
                "+  private List<RemoteRepository> additionalRepos = new LinkedList<>();",
                "+",
                "+  public SparkDependencyContext(String localRepoPath, String additionalRemoteRepository) {",
                "+    session =  Booter.newRepositorySystemSession(system, localRepoPath);",
                "+    addRepoFromProperty(additionalRemoteRepository);",
                "+  }",
                "+",
                "+  public Dependency load(String lib) {",
                "+    Dependency dep = new Dependency(lib);",
                "+",
                "+    if (dependencies.contains(dep)) {",
                "+      dependencies.remove(dep);",
                "+    }",
                "+    dependencies.add(dep);",
                "+    return dep;",
                "+  }",
                "+",
                "+  public Repository addRepo(String name) {",
                "+    Repository rep = new Repository(name);",
                "+    repositories.add(rep);",
                "+    return rep;",
                "+  }",
                "+",
                "+  public void reset() {",
                "+    dependencies = new LinkedList<>();",
                "+    repositories = new LinkedList<>();",
                "+",
                "+    files = new LinkedList<>();",
                "+    filesDist = new LinkedList<>();",
                "+  }",
                "+",
                "+  private void addRepoFromProperty(String listOfRepo) {",
                "+    if (listOfRepo != null) {",
                "+      String[] repos = listOfRepo.split(\";\");",
                "+      for (String repo : repos) {",
                "+        String[] parts = repo.split(\",\");",
                "+        if (parts.length == 3) {",
                "+          String id = parts[0].trim();",
                "+          String url = parts[1].trim();",
                "+          boolean isSnapshot = Boolean.parseBoolean(parts[2].trim());",
                "+          if (id.length() > 1 && url.length() > 1) {",
                "+            RemoteRepository rr = new RemoteRepository(id, \"default\", url);",
                "+            rr.setPolicy(isSnapshot, null);",
                "+            additionalRepos.add(rr);",
                "+          }",
                "+        }",
                "+      }",
                "+    }",
                "+  }",
                "+",
                "+  /**",
                "+   * fetch all artifacts",
                "+   * @return",
                "+   * @throws MalformedURLException",
                "+   * @throws ArtifactResolutionException",
                "+   * @throws DependencyResolutionException",
                "+   */",
                "+  public List<File> fetch() throws MalformedURLException,",
                "+      DependencyResolutionException, ArtifactResolutionException {",
                "+",
                "+    for (Dependency dep : dependencies) {",
                "+      if (!dep.isLocalFsArtifact()) {",
                "+        List<ArtifactResult> artifacts = fetchArtifactWithDep(dep);",
                "+        for (ArtifactResult artifact : artifacts) {",
                "+          if (dep.isDist()) {",
                "+            filesDist.add(artifact.getArtifact().getFile());",
                "+          }",
                "+          files.add(artifact.getArtifact().getFile());",
                "+        }",
                "+      } else {",
                "+        if (dep.isDist()) {",
                "+          filesDist.add(new File(dep.getGroupArtifactVersion()));",
                "+        }",
                "+        files.add(new File(dep.getGroupArtifactVersion()));",
                "+      }",
                "+    }",
                "+",
                "+    return files;",
                "+  }",
                "+",
                "+  private List<ArtifactResult> fetchArtifactWithDep(Dependency dep)",
                "+      throws DependencyResolutionException, ArtifactResolutionException {",
                "+    Artifact artifact = new DefaultArtifact(",
                "+        SparkDependencyResolver.inferScalaVersion(dep.getGroupArtifactVersion()));",
                "+",
                "+    DependencyFilter classpathFlter = DependencyFilterUtils",
                "+        .classpathFilter(JavaScopes.COMPILE);",
                "+    PatternExclusionsDependencyFilter exclusionFilter = new PatternExclusionsDependencyFilter(",
                "+        SparkDependencyResolver.inferScalaVersion(dep.getExclusions()));",
                "+",
                "+    CollectRequest collectRequest = new CollectRequest();",
                "+    collectRequest.setRoot(new org.sonatype.aether.graph.Dependency(artifact,",
                "+        JavaScopes.COMPILE));",
                "+",
                "+    collectRequest.addRepository(mavenCentral);",
                "+    collectRequest.addRepository(mavenLocal);",
                "+    for (RemoteRepository repo : additionalRepos) {",
                "+      collectRequest.addRepository(repo);",
                "+    }",
                "+    for (Repository repo : repositories) {",
                "+      RemoteRepository rr = new RemoteRepository(repo.getId(), \"default\", repo.getUrl());",
                "+      rr.setPolicy(repo.isSnapshot(), null);",
                "+      Authentication auth = repo.getAuthentication();",
                "+      if (auth != null) {",
                "+        rr.setAuthentication(auth);",
                "+      }",
                "+      collectRequest.addRepository(rr);",
                "+    }",
                "+",
                "+    DependencyRequest dependencyRequest = new DependencyRequest(collectRequest,",
                "+        DependencyFilterUtils.andFilter(exclusionFilter, classpathFlter));",
                "+",
                "+    return system.resolveDependencies(session, dependencyRequest).getArtifactResults();",
                "+  }",
                "+",
                "+  public List<File> getFiles() {",
                "+    return files;",
                "+  }",
                "+",
                "+  public List<File> getFilesDist() {",
                "+    return filesDist;",
                "+  }",
                "+}",
                "diff --git a/spark/interpreter/src/main/java/org/apache/zeppelin/spark/dep/SparkDependencyResolver.java b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/dep/SparkDependencyResolver.java",
                "new file mode 100644",
                "index 000000000..46224a860",
                "--- /dev/null",
                "+++ b/spark/interpreter/src/main/java/org/apache/zeppelin/spark/dep/SparkDependencyResolver.java",
                "@@ -0,0 +1,351 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.spark.dep;",
                "+",
                "+import java.io.File;",
                "+import java.lang.reflect.InvocationTargetException;",
                "+import java.lang.reflect.Method;",
                "+import java.net.URL;",
                "+import java.util.Arrays;",
                "+import java.util.Collection;",
                "+import java.util.Iterator;",
                "+import java.util.LinkedList;",
                "+import java.util.List;",
                "+",
                "+import org.apache.commons.lang.StringUtils;",
                "+import org.apache.spark.SparkContext;",
                "+import org.apache.zeppelin.dep.AbstractDependencyResolver;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+import org.sonatype.aether.artifact.Artifact;",
                "+import org.sonatype.aether.collection.CollectRequest;",
                "+import org.sonatype.aether.graph.Dependency;",
                "+import org.sonatype.aether.graph.DependencyFilter;",
                "+import org.sonatype.aether.repository.RemoteRepository;",
                "+import org.sonatype.aether.resolution.ArtifactResult;",
                "+import org.sonatype.aether.resolution.DependencyRequest;",
                "+import org.sonatype.aether.util.artifact.DefaultArtifact;",
                "+import org.sonatype.aether.util.artifact.JavaScopes;",
                "+import org.sonatype.aether.util.filter.DependencyFilterUtils;",
                "+import org.sonatype.aether.util.filter.PatternExclusionsDependencyFilter;",
                "+",
                "+import scala.Some;",
                "+import scala.collection.IndexedSeq;",
                "+import scala.reflect.io.AbstractFile;",
                "+import scala.tools.nsc.Global;",
                "+import scala.tools.nsc.backend.JavaPlatform;",
                "+import scala.tools.nsc.util.ClassPath;",
                "+import scala.tools.nsc.util.MergedClassPath;",
                "+",
                "+/**",
                "+ * Deps resolver.",
                "+ * Add new dependencies from mvn repo (at runtime) to Spark interpreter group.",
                "+ */",
                "+public class SparkDependencyResolver extends AbstractDependencyResolver {",
                "+  Logger logger = LoggerFactory.getLogger(SparkDependencyResolver.class);",
                "+  private Global global;",
                "+  private ClassLoader runtimeClassLoader;",
                "+  private SparkContext sc;",
                "+",
                "+  private final String[] exclusions = new String[] {\"org.scala-lang:scala-library\",",
                "+                                                    \"org.scala-lang:scala-compiler\",",
                "+                                                    \"org.scala-lang:scala-reflect\",",
                "+                                                    \"org.scala-lang:scalap\",",
                "+                                                    \"org.apache.zeppelin:zeppelin-zengine\",",
                "+                                                    \"org.apache.zeppelin:zeppelin-spark\",",
                "+                                                    \"org.apache.zeppelin:zeppelin-server\"};",
                "+",
                "+  public SparkDependencyResolver(Global global,",
                "+                                 ClassLoader runtimeClassLoader,",
                "+                                 SparkContext sc,",
                "+                                 String localRepoPath,",
                "+                                 String additionalRemoteRepository) {",
                "+    super(localRepoPath);",
                "+    this.global = global;",
                "+    this.runtimeClassLoader = runtimeClassLoader;",
                "+    this.sc = sc;",
                "+    addRepoFromProperty(additionalRemoteRepository);",
                "+  }",
                "+",
                "+  private void addRepoFromProperty(String listOfRepo) {",
                "+    if (listOfRepo != null) {",
                "+      String[] repos = listOfRepo.split(\";\");",
                "+      for (String repo : repos) {",
                "+        String[] parts = repo.split(\",\");",
                "+        if (parts.length == 3) {",
                "+          String id = parts[0].trim();",
                "+          String url = parts[1].trim();",
                "+          boolean isSnapshot = Boolean.parseBoolean(parts[2].trim());",
                "+          if (id.length() > 1 && url.length() > 1) {",
                "+            addRepo(id, url, isSnapshot);",
                "+          }",
                "+        }",
                "+      }",
                "+    }",
                "+  }",
                "+",
                "+  private void updateCompilerClassPath(URL[] urls) throws IllegalAccessException,",
                "+      IllegalArgumentException, InvocationTargetException {",
                "+",
                "+    JavaPlatform platform = (JavaPlatform) global.platform();",
                "+    MergedClassPath<AbstractFile> newClassPath = mergeUrlsIntoClassPath(platform, urls);",
                "+",
                "+    Method[] methods = platform.getClass().getMethods();",
                "+    for (Method m : methods) {",
                "+      if (m.getName().endsWith(\"currentClassPath_$eq\")) {",
                "+        m.invoke(platform, new Some(newClassPath));",
                "+        break;",
                "+      }",
                "+    }",
                "+",
                "+    // NOTE: Must use reflection until this is exposed/fixed upstream in Scala",
                "+    List<String> classPaths = new LinkedList<>();",
                "+    for (URL url : urls) {",
                "+      classPaths.add(url.getPath());",
                "+    }",
                "+",
                "+    // Reload all jars specified into our compiler",
                "+    global.invalidateClassPathEntries(scala.collection.JavaConversions.asScalaBuffer(classPaths)",
                "+        .toList());",
                "+  }",
                "+",
                "+  // Until spark 1.1.x",
                "+  // check https://github.com/apache/spark/commit/191d7cf2a655d032f160b9fa181730364681d0e7",
                "+  private void updateRuntimeClassPath_1_x(URL[] urls) throws SecurityException,",
                "+      IllegalAccessException, IllegalArgumentException,",
                "+      InvocationTargetException, NoSuchMethodException {",
                "+    Method addURL;",
                "+    addURL = runtimeClassLoader.getClass().getDeclaredMethod(\"addURL\", new Class[] {URL.class});",
                "+    addURL.setAccessible(true);",
                "+    for (URL url : urls) {",
                "+      addURL.invoke(runtimeClassLoader, url);",
                "+    }",
                "+  }",
                "+",
                "+  private void updateRuntimeClassPath_2_x(URL[] urls) throws SecurityException,",
                "+      IllegalAccessException, IllegalArgumentException,",
                "+      InvocationTargetException, NoSuchMethodException {",
                "+    Method addURL;",
                "+    addURL = runtimeClassLoader.getClass().getDeclaredMethod(\"addNewUrl\", new Class[] {URL.class});",
                "+    addURL.setAccessible(true);",
                "+    for (URL url : urls) {",
                "+      addURL.invoke(runtimeClassLoader, url);",
                "+    }",
                "+  }",
                "+",
                "+  private MergedClassPath<AbstractFile> mergeUrlsIntoClassPath(JavaPlatform platform, URL[] urls) {",
                "+    IndexedSeq<ClassPath<AbstractFile>> entries =",
                "+        ((MergedClassPath<AbstractFile>) platform.classPath()).entries();",
                "+    List<ClassPath<AbstractFile>> cp = new LinkedList<>();",
                "+",
                "+    for (int i = 0; i < entries.size(); i++) {",
                "+      cp.add(entries.apply(i));",
                "+    }",
                "+",
                "+    for (URL url : urls) {",
                "+      AbstractFile file;",
                "+      if (\"file\".equals(url.getProtocol())) {",
                "+        File f = new File(url.getPath());",
                "+        if (f.isDirectory()) {",
                "+          file = AbstractFile.getDirectory(scala.reflect.io.File.jfile2path(f));",
                "+        } else {",
                "+          file = AbstractFile.getFile(scala.reflect.io.File.jfile2path(f));",
                "+        }",
                "+      } else {",
                "+        file = AbstractFile.getURL(url);",
                "+      }",
                "+",
                "+      ClassPath<AbstractFile> newcp = platform.classPath().context().newClassPath(file);",
                "+",
                "+      // distinct",
                "+      if (cp.contains(newcp) == false) {",
                "+        cp.add(newcp);",
                "+      }",
                "+    }",
                "+",
                "+    return new MergedClassPath(scala.collection.JavaConversions.asScalaBuffer(cp).toIndexedSeq(),",
                "+        platform.classPath().context());",
                "+  }",
                "+",
                "+  public List<String> load(String artifact,",
                "+      boolean addSparkContext) throws Exception {",
                "+    return load(artifact, new LinkedList<String>(), addSparkContext);",
                "+  }",
                "+",
                "+  public List<String> load(String artifact, Collection<String> excludes,",
                "+      boolean addSparkContext) throws Exception {",
                "+    if (StringUtils.isBlank(artifact)) {",
                "+      // Should throw here",
                "+      throw new RuntimeException(\"Invalid artifact to load\");",
                "+    }",
                "+",
                "+    // <groupId>:<artifactId>[:<extension>[:<classifier>]]:<version>",
                "+    int numSplits = artifact.split(\":\").length;",
                "+    if (numSplits >= 3 && numSplits <= 6) {",
                "+      return loadFromMvn(artifact, excludes, addSparkContext);",
                "+    } else {",
                "+      loadFromFs(artifact, addSparkContext);",
                "+      LinkedList<String> libs = new LinkedList<>();",
                "+      libs.add(artifact);",
                "+      return libs;",
                "+    }",
                "+  }",
                "+",
                "+  private void loadFromFs(String artifact, boolean addSparkContext) throws Exception {",
                "+    File jarFile = new File(artifact);",
                "+",
                "+    global.new Run();",
                "+",
                "+    if (sc.version().startsWith(\"1.1\")) {",
                "+      updateRuntimeClassPath_1_x(new URL[] {jarFile.toURI().toURL()});",
                "+    } else {",
                "+      updateRuntimeClassPath_2_x(new URL[] {jarFile.toURI().toURL()});",
                "+    }",
                "+",
                "+    if (addSparkContext) {",
                "+      sc.addJar(jarFile.getAbsolutePath());",
                "+    }",
                "+  }",
                "+",
                "+  private List<String> loadFromMvn(String artifact, Collection<String> excludes,",
                "+      boolean addSparkContext) throws Exception {",
                "+    List<String> loadedLibs = new LinkedList<>();",
                "+    Collection<String> allExclusions = new LinkedList<>();",
                "+    allExclusions.addAll(excludes);",
                "+    allExclusions.addAll(Arrays.asList(exclusions));",
                "+",
                "+    List<ArtifactResult> listOfArtifact;",
                "+    listOfArtifact = getArtifactsWithDep(artifact, allExclusions);",
                "+",
                "+    Iterator<ArtifactResult> it = listOfArtifact.iterator();",
                "+    while (it.hasNext()) {",
                "+      Artifact a = it.next().getArtifact();",
                "+      String gav = a.getGroupId() + \":\" + a.getArtifactId() + \":\" + a.getVersion();",
                "+      for (String exclude : allExclusions) {",
                "+        if (gav.startsWith(exclude)) {",
                "+          it.remove();",
                "+          break;",
                "+        }",
                "+      }",
                "+    }",
                "+",
                "+    List<URL> newClassPathList = new LinkedList<>();",
                "+    List<File> files = new LinkedList<>();",
                "+    for (ArtifactResult artifactResult : listOfArtifact) {",
                "+      logger.info(\"Load \" + artifactResult.getArtifact().getGroupId() + \":\"",
                "+          + artifactResult.getArtifact().getArtifactId() + \":\"",
                "+          + artifactResult.getArtifact().getVersion());",
                "+      newClassPathList.add(artifactResult.getArtifact().getFile().toURI().toURL());",
                "+      files.add(artifactResult.getArtifact().getFile());",
                "+      loadedLibs.add(artifactResult.getArtifact().getGroupId() + \":\"",
                "+          + artifactResult.getArtifact().getArtifactId() + \":\"",
                "+          + artifactResult.getArtifact().getVersion());",
                "+    }",
                "+",
                "+    global.new Run();",
                "+    if (sc.version().startsWith(\"1.1\")) {",
                "+      updateRuntimeClassPath_1_x(newClassPathList.toArray(new URL[0]));",
                "+    } else {",
                "+      updateRuntimeClassPath_2_x(newClassPathList.toArray(new URL[0]));",
                "+    }",
                "+    updateCompilerClassPath(newClassPathList.toArray(new URL[0]));",
                "+",
                "+    if (addSparkContext) {",
                "+      for (File f : files) {",
                "+        sc.addJar(f.getAbsolutePath());",
                "+      }",
                "+    }",
                "+",
                "+    return loadedLibs;",
                "+  }",
                "+",
                "+  /**",
                "+   * @param dependency",
                "+   * @param excludes list of pattern can either be of the form groupId:artifactId",
                "+   * @return",
                "+   * @throws Exception",
                "+   */",
                "+  @Override",
                "+  public List<ArtifactResult> getArtifactsWithDep(String dependency,",
                "+      Collection<String> excludes) throws Exception {",
                "+    Artifact artifact = new DefaultArtifact(inferScalaVersion(dependency));",
                "+    DependencyFilter classpathFilter = DependencyFilterUtils.classpathFilter(JavaScopes.COMPILE);",
                "+    PatternExclusionsDependencyFilter exclusionFilter =",
                "+        new PatternExclusionsDependencyFilter(inferScalaVersion(excludes));",
                "+",
                "+    CollectRequest collectRequest = new CollectRequest();",
                "+    collectRequest.setRoot(new Dependency(artifact, JavaScopes.COMPILE));",
                "+",
                "+    synchronized (repos) {",
                "+      for (RemoteRepository repo : repos) {",
                "+        collectRequest.addRepository(repo);",
                "+      }",
                "+    }",
                "+    DependencyRequest dependencyRequest = new DependencyRequest(collectRequest,",
                "+        DependencyFilterUtils.andFilter(exclusionFilter, classpathFilter));",
                "+    return system.resolveDependencies(session, dependencyRequest).getArtifactResults();",
                "+  }",
                "+",
                "+  public static Collection<String> inferScalaVersion(Collection<String> artifact) {",
                "+    List<String> list = new LinkedList<>();",
                "+    for (String a : artifact) {",
                "+      list.add(inferScalaVersion(a));",
                "+    }",
                "+    return list;",
                "+  }",
                "+",
                "+  public static String inferScalaVersion(String artifact) {",
                "+    int pos = artifact.indexOf(\":\");",
                "+    if (pos < 0 || pos + 2 >= artifact.length()) {",
                "+      // failed to infer",
                "+      return artifact;",
                "+    }",
                "+",
                "+    if (':' == artifact.charAt(pos + 1)) {",
                "+      String restOfthem = \"\";",
                "+      String versionSep = \":\";",
                "+",
                "+      String groupId = artifact.substring(0, pos);",
                "+      int nextPos = artifact.indexOf(\":\", pos + 2);",
                "+      if (nextPos < 0) {",
                "+        if (artifact.charAt(artifact.length() - 1) == '*') {",
                "+          nextPos = artifact.length() - 1;",
                "+          versionSep = \"\";",
                "+          restOfthem = \"*\";",
                "+        } else {",
                "+          versionSep = \"\";",
                "+          nextPos = artifact.length();",
                "+        }",
                "+      }",
                "+",
                "+      String artifactId = artifact.substring(pos + 2, nextPos);",
                "+      if (nextPos < artifact.length()) {",
                "+        if (!restOfthem.equals(\"*\")) {",
                "+          restOfthem = artifact.substring(nextPos + 1);",
                "+        }",
                "+      }",
                "+",
                "+      String [] version = scala.util.Properties.versionNumberString().split(\"[.]\");",
                "+      String scalaVersion = version[0] + \".\" + version[1];",
                "+",
                "+      return groupId + \":\" + artifactId + \"_\" + scalaVersion + versionSep + restOfthem;",
                "+    } else {",
                "+      return artifact;",
                "+    }",
                "+  }",
                "+}",
                "diff --git a/spark/interpreter/src/main/resources/R/zeppelin_sparkr.R b/spark/interpreter/src/main/resources/R/zeppelin_sparkr.R",
                "new file mode 100644",
                "index 000000000..525c6c5c4",
                "--- /dev/null",
                "+++ b/spark/interpreter/src/main/resources/R/zeppelin_sparkr.R",
                "@@ -0,0 +1,105 @@",
                "+#",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#     http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing, software",
                "+# distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+# See the License for the specific language governing permissions and",
                "+# limitations under the License.",
                "+#",
                "+",
                "+args <- commandArgs(trailingOnly = TRUE)",
                "+",
                "+hashCode <- as.integer(args[1])",
                "+port <- as.integer(args[2])",
                "+libPath <- args[3]",
                "+version <- as.integer(args[4])",
                "+rm(args)",
                "+",
                "+print(paste(\"Port \", toString(port)))",
                "+print(paste(\"LibPath \", libPath))",
                "+",
                "+.libPaths(c(file.path(libPath), .libPaths()))",
                "+library(SparkR)",
                "+",
                "+",
                "+SparkR:::connectBackend(\"localhost\", port, 6000)",
                "+",
                "+# scStartTime is needed by R/pkg/R/sparkR.R",
                "+assign(\".scStartTime\", as.integer(Sys.time()), envir = SparkR:::.sparkREnv)",
                "+",
                "+# getZeppelinR",
                "+.zeppelinR = SparkR:::callJStatic(\"org.apache.zeppelin.spark.ZeppelinR\", \"getZeppelinR\", hashCode)",
                "+",
                "+# setup spark env",
                "+assign(\".sc\", SparkR:::callJStatic(\"org.apache.zeppelin.spark.ZeppelinRContext\", \"getSparkContext\"), envir = SparkR:::.sparkREnv)",
                "+assign(\"sc\", get(\".sc\", envir = SparkR:::.sparkREnv), envir=.GlobalEnv)",
                "+if (version >= 20000) {",
                "+  assign(\".sparkRsession\", SparkR:::callJStatic(\"org.apache.zeppelin.spark.ZeppelinRContext\", \"getSparkSession\"), envir = SparkR:::.sparkREnv)",
                "+  assign(\"spark\", get(\".sparkRsession\", envir = SparkR:::.sparkREnv), envir = .GlobalEnv)",
                "+  assign(\".sparkRjsc\", SparkR:::callJStatic(\"org.apache.zeppelin.spark.ZeppelinRContext\", \"getJavaSparkContext\"), envir = SparkR:::.sparkREnv)",
                "+}",
                "+assign(\".sqlc\", SparkR:::callJStatic(\"org.apache.zeppelin.spark.ZeppelinRContext\", \"getSqlContext\"), envir = SparkR:::.sparkREnv)",
                "+assign(\"sqlContext\", get(\".sqlc\", envir = SparkR:::.sparkREnv), envir = .GlobalEnv)",
                "+assign(\".zeppelinContext\", SparkR:::callJStatic(\"org.apache.zeppelin.spark.ZeppelinRContext\", \"getZeppelinContext\"), envir = .GlobalEnv)",
                "+",
                "+z.put <- function(name, object) {",
                "+  SparkR:::callJMethod(.zeppelinContext, \"put\", name, object)",
                "+}",
                "+z.get <- function(name) {",
                "+  SparkR:::callJMethod(.zeppelinContext, \"get\", name)",
                "+}",
                "+z.input <- function(name, value) {",
                "+  SparkR:::callJMethod(.zeppelinContext, \"input\", name, value)",
                "+}",
                "+",
                "+# notify script is initialized",
                "+SparkR:::callJMethod(.zeppelinR, \"onScriptInitialized\")",
                "+",
                "+while (TRUE) {",
                "+  req <- SparkR:::callJMethod(.zeppelinR, \"getRequest\")",
                "+  type <-  SparkR:::callJMethod(req, \"getType\")",
                "+  stmt <- SparkR:::callJMethod(req, \"getStmt\")",
                "+  value <- SparkR:::callJMethod(req, \"getValue\")",
                "+  ",
                "+  if (type == \"eval\") {",
                "+    tryCatch({",
                "+      ret <- eval(parse(text=stmt))",
                "+      SparkR:::callJMethod(.zeppelinR, \"setResponse\", \"\", FALSE)",
                "+    }, error = function(e) {",
                "+      SparkR:::callJMethod(.zeppelinR, \"setResponse\", toString(e), TRUE)",
                "+    })    ",
                "+  } else if (type == \"set\") {",
                "+    tryCatch({",
                "+      ret <- assign(stmt, value)",
                "+      SparkR:::callJMethod(.zeppelinR, \"setResponse\", \"\", FALSE)",
                "+    }, error = function(e) {",
                "+      SparkR:::callJMethod(.zeppelinR, \"setResponse\", toString(e), TRUE)",
                "+    })",
                "+  } else if (type == \"get\") {",
                "+    tryCatch({      ",
                "+      ret <- eval(parse(text=stmt))",
                "+      SparkR:::callJMethod(.zeppelinR, \"setResponse\", ret, FALSE)",
                "+    }, error = function(e) {",
                "+      SparkR:::callJMethod(.zeppelinR, \"setResponse\", toString(e), TRUE)",
                "+    })",
                "+  } else if (type == \"getS\") {",
                "+    tryCatch({",
                "+      ret <- eval(parse(text=stmt))",
                "+      SparkR:::callJMethod(.zeppelinR, \"setResponse\", toString(ret), FALSE)",
                "+    }, error = function(e) {",
                "+      SparkR:::callJMethod(.zeppelinR, \"setResponse\", toString(e), TRUE)",
                "+    })",
                "+  } else {",
                "+    # unsupported type",
                "+    SparkR:::callJMethod(.zeppelinR, \"setResponse\", paste(\"Unsupported type \", type), TRUE)",
                "+  }",
                "+}",
                "diff --git a/spark/interpreter/src/main/resources/interpreter-setting.json b/spark/interpreter/src/main/resources/interpreter-setting.json",
                "new file mode 100644",
                "index 000000000..7e647d753",
                "--- /dev/null",
                "+++ b/spark/interpreter/src/main/resources/interpreter-setting.json",
                "@@ -0,0 +1,233 @@",
                "+[",
                "+  {",
                "+    \"group\": \"spark\",",
                "+    \"name\": \"spark\",",
                "+    \"className\": \"org.apache.zeppelin.spark.SparkInterpreter\",",
                "+    \"defaultInterpreter\": true,",
                "+    \"properties\": {",
                "+      \"spark.executor.memory\": {",
                "+        \"envName\": null,",
                "+        \"propertyName\": \"spark.executor.memory\",",
                "+        \"defaultValue\": \"\",",
                "+        \"description\": \"Executor memory per worker instance. ex) 512m, 32g\",",
                "+        \"type\": \"string\"",
                "+      },",
                "+      \"args\": {",
                "+        \"envName\": null,",
                "+        \"propertyName\": null,",
                "+        \"defaultValue\": \"\",",
                "+        \"description\": \"spark commandline args\",",
                "+        \"type\": \"textarea\"",
                "+      },",
                "+      \"zeppelin.spark.useHiveContext\": {",
                "+        \"envName\": \"ZEPPELIN_SPARK_USEHIVECONTEXT\",",
                "+        \"propertyName\": \"zeppelin.spark.useHiveContext\",",
                "+        \"defaultValue\": true,",
                "+        \"description\": \"Use HiveContext instead of SQLContext if it is true.\",",
                "+        \"type\": \"checkbox\"",
                "+      },",
                "+      \"spark.app.name\": {",
                "+        \"envName\": \"SPARK_APP_NAME\",",
                "+        \"propertyName\": \"spark.app.name\",",
                "+        \"defaultValue\": \"Zeppelin\",",
                "+        \"description\": \"The name of spark application.\",",
                "+        \"type\": \"string\"",
                "+      },",
                "+      \"zeppelin.spark.printREPLOutput\": {",
                "+        \"envName\": null,",
                "+        \"propertyName\": \"zeppelin.spark.printREPLOutput\",",
                "+        \"defaultValue\": true,",
                "+        \"description\": \"Print REPL output\",",
                "+        \"type\": \"checkbox\"",
                "+      },",
                "+      \"spark.cores.max\": {",
                "+        \"envName\": null,",
                "+        \"propertyName\": \"spark.cores.max\",",
                "+        \"defaultValue\": \"\",",
                "+        \"description\": \"Total number of cores to use. Empty value uses all available core.\",",
                "+        \"type\": \"number\"",
                "+      },",
                "+      \"zeppelin.spark.maxResult\": {",
                "+        \"envName\": \"ZEPPELIN_SPARK_MAXRESULT\",",
                "+        \"propertyName\": \"zeppelin.spark.maxResult\",",
                "+        \"defaultValue\": \"1000\",",
                "+        \"description\": \"Max number of Spark SQL result to display.\",",
                "+        \"type\": \"number\"",
                "+      },",
                "+      \"master\": {",
                "+        \"envName\": \"MASTER\",",
                "+        \"propertyName\": \"spark.master\",",
                "+        \"defaultValue\": \"local[*]\",",
                "+        \"description\": \"Spark master uri. ex) spark://masterhost:7077\",",
                "+        \"type\": \"string\"",
                "+      },",
                "+      \"zeppelin.spark.enableSupportedVersionCheck\": {",
                "+        \"envName\": null,",
                "+        \"propertyName\": \"zeppelin.spark.enableSupportedVersionCheck\",",
                "+        \"defaultValue\": true,",
                "+        \"description\": \"Do not change - developer only setting, not for production use\",",
                "+        \"type\": \"checkbox\"",
                "+      },",
                "+      \"zeppelin.spark.uiWebUrl\": {",
                "+        \"envName\": null,",
                "+        \"propertyName\": \"zeppelin.spark.uiWebUrl\",",
                "+        \"defaultValue\": \"\",",
                "+        \"description\": \"Override Spark UI default URL\",",
                "+        \"type\": \"string\"",
                "+      },",
                "+      \"zeppelin.spark.useNew\": {",
                "+        \"envName\": null,",
                "+        \"propertyName\": \"zeppelin.spark.useNew\",",
                "+        \"defaultValue\": \"false\",",
                "+        \"description\": \"Whether use new spark interpreter implementation\",",
                "+        \"type\": \"checkbox\"",
                "+      }",
                "+    },",
                "+    \"editor\": {",
                "+      \"language\": \"scala\",",
                "+      \"editOnDblClick\": false,",
                "+      \"completionKey\": \"TAB\"",
                "+    }",
                "+  },",
                "+  {",
                "+    \"group\": \"spark\",",
                "+    \"name\": \"sql\",",
                "+    \"className\": \"org.apache.zeppelin.spark.SparkSqlInterpreter\",",
                "+    \"properties\": {",
                "+      \"zeppelin.spark.concurrentSQL\": {",
                "+        \"envName\": \"ZEPPELIN_SPARK_CONCURRENTSQL\",",
                "+        \"propertyName\": \"zeppelin.spark.concurrentSQL\",",
                "+        \"defaultValue\": false,",
                "+        \"description\": \"Execute multiple SQL concurrently if set true.\",",
                "+        \"type\": \"checkbox\"",
                "+      },",
                "+      \"zeppelin.spark.sql.stacktrace\": {",
                "+        \"envName\": \"ZEPPELIN_SPARK_SQL_STACKTRACE\",",
                "+        \"propertyName\": \"zeppelin.spark.sql.stacktrace\",",
                "+        \"defaultValue\": false,",
                "+        \"description\": \"Show full exception stacktrace for SQL queries if set to true.\",",
                "+        \"type\": \"checkbox\"",
                "+      },",
                "+      \"zeppelin.spark.maxResult\": {",
                "+        \"envName\": \"ZEPPELIN_SPARK_MAXRESULT\",",
                "+        \"propertyName\": \"zeppelin.spark.maxResult\",",
                "+        \"defaultValue\": \"1000\",",
                "+        \"description\": \"Max number of Spark SQL result to display.\",",
                "+        \"type\": \"number\"",
                "+      },",
                "+      \"zeppelin.spark.importImplicit\": {",
                "+        \"envName\": \"ZEPPELIN_SPARK_IMPORTIMPLICIT\",",
                "+        \"propertyName\": \"zeppelin.spark.importImplicit\",",
                "+        \"defaultValue\": true,",
                "+        \"description\": \"Import implicits, UDF collection, and sql if set true. true by default.\",",
                "+        \"type\": \"checkbox\"",
                "+      }",
                "+    },",
                "+    \"editor\": {",
                "+      \"language\": \"sql\",",
                "+      \"editOnDblClick\": false,",
                "+      \"completionKey\": \"TAB\"",
                "+    }",
                "+  },",
                "+  {",
                "+    \"group\": \"spark\",",
                "+    \"name\": \"dep\",",
                "+    \"className\": \"org.apache.zeppelin.spark.DepInterpreter\",",
                "+    \"properties\": {",
                "+      \"zeppelin.dep.localrepo\": {",
                "+        \"envName\": \"ZEPPELIN_DEP_LOCALREPO\",",
                "+        \"propertyName\": null,",
                "+        \"defaultValue\": \"local-repo\",",
                "+        \"description\": \"local repository for dependency loader\",",
                "+        \"type\": \"string\"",
                "+      },",
                "+      \"zeppelin.dep.additionalRemoteRepository\": {",
                "+        \"envName\": null,",
                "+        \"propertyName\": null,",
                "+        \"defaultValue\": \"spark-packages,http://dl.bintray.com/spark-packages/maven,false;\",",
                "+        \"description\": \"A list of 'id,remote-repository-URL,is-snapshot;' for each remote repository.\",",
                "+        \"type\": \"textarea\"",
                "+      }",
                "+    },",
                "+    \"editor\": {",
                "+      \"language\": \"scala\",",
                "+      \"editOnDblClick\": false,",
                "+      \"completionKey\": \"TAB\"",
                "+    }",
                "+  },",
                "+  {",
                "+    \"group\": \"spark\",",
                "+    \"name\": \"pyspark\",",
                "+    \"className\": \"org.apache.zeppelin.spark.PySparkInterpreter\",",
                "+    \"properties\": {",
                "+      \"zeppelin.pyspark.python\": {",
                "+        \"envName\": \"PYSPARK_PYTHON\",",
                "+        \"propertyName\": null,",
                "+        \"defaultValue\": \"python\",",
                "+        \"description\": \"Python command to run pyspark with\",",
                "+        \"type\": \"string\"",
                "+      },",
                "+      \"zeppelin.pyspark.useIPython\": {",
                "+        \"envName\": null,",
                "+        \"propertyName\": \"zeppelin.pyspark.useIPython\",",
                "+        \"defaultValue\": true,",
                "+        \"description\": \"whether use IPython when it is available\",",
                "+        \"type\": \"checkbox\"",
                "+      }",
                "+    },",
                "+    \"editor\": {",
                "+      \"language\": \"python\",",
                "+      \"editOnDblClick\": false,",
                "+      \"completionKey\": \"TAB\"",
                "+    }",
                "+  },",
                "+  {",
                "+    \"group\": \"spark\",",
                "+    \"name\": \"ipyspark\",",
                "+    \"className\": \"org.apache.zeppelin.spark.IPySparkInterpreter\",",
                "+    \"properties\": {},",
                "+    \"editor\": {",
                "+      \"language\": \"python\",",
                "+      \"editOnDblClick\": false",
                "+    }",
                "+  },",
                "+  {",
                "+    \"group\": \"spark\",",
                "+    \"name\": \"r\",",
                "+    \"className\": \"org.apache.zeppelin.spark.SparkRInterpreter\",",
                "+    \"properties\": {",
                "+      \"zeppelin.R.knitr\": {",
                "+        \"envName\": \"ZEPPELIN_R_KNITR\",",
                "+        \"propertyName\": \"zeppelin.R.knitr\",",
                "+        \"defaultValue\": true,",
                "+        \"description\": \"whether use knitr or not\",",
                "+        \"type\": \"checkbox\"",
                "+      },",
                "+      \"zeppelin.R.cmd\": {",
                "+        \"envName\": \"ZEPPELIN_R_CMD\",",
                "+        \"propertyName\": \"zeppelin.R.cmd\",",
                "+        \"defaultValue\": \"R\",",
                "+        \"description\": \"R repl path\",",
                "+        \"type\": \"string\"",
                "+      },",
                "+      \"zeppelin.R.image.width\": {",
                "+        \"envName\": \"ZEPPELIN_R_IMAGE_WIDTH\",",
                "+        \"propertyName\": \"zeppelin.R.image.width\",",
                "+        \"defaultValue\": \"100%\",",
                "+        \"description\": \"\",",
                "+        \"type\": \"number\"",
                "+      },",
                "+      \"zeppelin.R.render.options\": {",
                "+        \"envName\": \"ZEPPELIN_R_RENDER_OPTIONS\",",
                "+        \"propertyName\": \"zeppelin.R.render.options\",",
                "+        \"defaultValue\": \"out.format = 'html', comment = NA, echo = FALSE, results = 'asis', message = F, warning = F, fig.retina = 2\",",
                "+        \"description\": \"\",",
                "+        \"type\": \"textarea\"",
                "+      }",
                "+    },",
                "+    \"editor\": {",
                "+      \"language\": \"r\",",
                "+      \"editOnDblClick\": false",
                "+    }",
                "+  }",
                "+]",
                "diff --git a/spark/interpreter/src/main/resources/python/zeppelin_ipyspark.py b/spark/interpreter/src/main/resources/python/zeppelin_ipyspark.py",
                "new file mode 100644",
                "index 000000000..324f48155",
                "--- /dev/null",
                "+++ b/spark/interpreter/src/main/resources/python/zeppelin_ipyspark.py",
                "@@ -0,0 +1,53 @@",
                "+#",
                "+# Licensed to the Apache Software Foundation (ASF) under one or more",
                "+# contributor license agreements.  See the NOTICE file distributed with",
                "+# this work for additional information regarding copyright ownership.",
                "+# The ASF licenses this file to You under the Apache License, Version 2.0",
                "+# (the \"License\"); you may not use this file except in compliance with",
                "+# the License.  You may obtain a copy of the License at",
                "+#",
                "+#    http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing, software",
                "+# distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+# See the License for the specific language governing permissions and",
                "+# limitations under the License.",
                "+#",
                "+",
                "+",
                "+from py4j.java_gateway import java_import, JavaGateway, GatewayClient",
                "+from pyspark.conf import SparkConf",
                "+from pyspark.context import SparkContext",
                "+",
                "+# for back compatibility",
                "+from pyspark.sql import SQLContext",
                "+",
                "+# start JVM gateway",
                "+client = GatewayClient(port=${JVM_GATEWAY_PORT})",
                "+gateway = JavaGateway(client, auto_convert=True)",
                "+",
                "+java_import(gateway.jvm, \"org.apache.spark.SparkEnv\")",
                "+java_import(gateway.jvm, \"org.apache.spark.SparkConf\")",
                "+java_import(gateway.jvm, \"org.apache.spark.api.java.*\")",
                "+java_import(gateway.jvm, \"org.apache.spark.api.python.*\")",
                "+java_import(gateway.jvm, \"org.apache.spark.mllib.api.python.*\")",
                "+",
                "+intp = gateway.entry_point",
                "+jsc = intp.getJavaSparkContext()",
                "+",
                "+java_import(gateway.jvm, \"org.apache.spark.sql.*\")",
                "+java_import(gateway.jvm, \"org.apache.spark.sql.hive.*\")",
                "+java_import(gateway.jvm, \"scala.Tuple2\")",
                "+",
                "+jconf = jsc.getConf()",
                "+conf = SparkConf(_jvm=gateway.jvm, _jconf=jconf)",
                "+sc = _zsc_ = SparkContext(jsc=jsc, gateway=gateway, conf=conf)",
                "+",
                "+if intp.isSpark2():",
                "+    from pyspark.sql import SparkSession",
                "+",
                "+    spark = __zSpark__ = SparkSession(sc, intp.getSparkSession())",
                "+    sqlContext = sqlc = __zSqlc__ = __zSpark__._wrapped",
                "+else:",
                "+    sqlContext = sqlc = __zSqlc__ = SQLContext(sparkContext=sc, sqlContext=intp.getSQLContext())",
                "diff --git a/spark/interpreter/src/main/resources/python/zeppelin_pyspark.py b/spark/interpreter/src/main/resources/python/zeppelin_pyspark.py",
                "new file mode 100644",
                "index 000000000..c10855a16",
                "--- /dev/null",
                "+++ b/spark/interpreter/src/main/resources/python/zeppelin_pyspark.py",
                "@@ -0,0 +1,393 @@",
                "+#",
                "+# Licensed to the Apache Software Foundation (ASF) under one or more",
                "+# contributor license agreements.  See the NOTICE file distributed with",
                "+# this work for additional information regarding copyright ownership.",
                "+# The ASF licenses this file to You under the Apache License, Version 2.0",
                "+# (the \"License\"); you may not use this file except in compliance with",
                "+# the License.  You may obtain a copy of the License at",
                "+#",
                "+#    http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing, software",
                "+# distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+# See the License for the specific language governing permissions and",
                "+# limitations under the License.",
                "+#",
                "+",
                "+import os, sys, getopt, traceback, json, re",
                "+",
                "+from py4j.java_gateway import java_import, JavaGateway, GatewayClient",
                "+from py4j.protocol import Py4JJavaError",
                "+from pyspark.conf import SparkConf",
                "+from pyspark.context import SparkContext",
                "+import ast",
                "+import warnings",
                "+",
                "+# for back compatibility",
                "+from pyspark.sql import SQLContext, HiveContext, Row",
                "+",
                "+class Logger(object):",
                "+  def __init__(self):",
                "+    pass",
                "+",
                "+  def write(self, message):",
                "+    intp.appendOutput(message)",
                "+",
                "+  def reset(self):",
                "+    pass",
                "+",
                "+  def flush(self):",
                "+    pass",
                "+",
                "+",
                "+class PyZeppelinContext(dict):",
                "+  def __init__(self, zc):",
                "+    self.z = zc",
                "+    self._displayhook = lambda *args: None",
                "+",
                "+  def show(self, obj):",
                "+    from pyspark.sql import DataFrame",
                "+    if isinstance(obj, DataFrame):",
                "+      print(self.z.showData(obj._jdf))",
                "+    else:",
                "+      print(str(obj))",
                "+",
                "+  # By implementing special methods it makes operating on it more Pythonic",
                "+  def __setitem__(self, key, item):",
                "+    self.z.put(key, item)",
                "+",
                "+  def __getitem__(self, key):",
                "+    return self.z.get(key)",
                "+",
                "+  def __delitem__(self, key):",
                "+    self.z.remove(key)",
                "+",
                "+  def __contains__(self, item):",
                "+    return self.z.containsKey(item)",
                "+",
                "+  def add(self, key, value):",
                "+    self.__setitem__(key, value)",
                "+",
                "+  def put(self, key, value):",
                "+    self.__setitem__(key, value)",
                "+",
                "+  def get(self, key):",
                "+    return self.__getitem__(key)",
                "+",
                "+  def getInterpreterContext(self):",
                "+    return self.z.getInterpreterContext()",
                "+",
                "+  def input(self, name, defaultValue=\"\"):",
                "+    return self.z.input(name, defaultValue)",
                "+",
                "+  def textbox(self, name, defaultValue=\"\"):",
                "+    return self.z.textbox(name, defaultValue)",
                "+",
                "+  def noteTextbox(self, name, defaultValue=\"\"):",
                "+    return self.z.noteTextbox(name, defaultValue)",
                "+",
                "+  def select(self, name, options, defaultValue=\"\"):",
                "+    # auto_convert to ArrayList doesn't match the method signature on JVM side",
                "+    return self.z.select(name, defaultValue, self.getParamOptions(options))",
                "+",
                "+  def noteSelect(self, name, options, defaultValue=\"\"):",
                "+    return self.z.noteSelect(name, defaultValue, self.getParamOptions(options))",
                "+",
                "+  def checkbox(self, name, options, defaultChecked=None):",
                "+    optionsIterable = self.getParamOptions(options)",
                "+    defaultCheckedIterables = self.getDefaultChecked(defaultChecked)",
                "+    checkedItems = gateway.jvm.scala.collection.JavaConversions.seqAsJavaList(self.z.checkbox(name, defaultCheckedIterables, optionsIterable))",
                "+    result = []",
                "+    for checkedItem in checkedItems:",
                "+      result.append(checkedItem)",
                "+    return result;",
                "+",
                "+  def noteCheckbox(self, name, options, defaultChecked=None):",
                "+    optionsIterable = self.getParamOptions(options)",
                "+    defaultCheckedIterables = self.getDefaultChecked(defaultChecked)",
                "+    checkedItems = gateway.jvm.scala.collection.JavaConversions.seqAsJavaList(self.z.noteCheckbox(name, defaultCheckedIterables, optionsIterable))",
                "+    result = []",
                "+    for checkedItem in checkedItems:",
                "+      result.append(checkedItem)",
                "+    return result;",
                "+",
                "+  def getParamOptions(self, options):",
                "+    tuples = list(map(lambda items: self.__tupleToScalaTuple2(items), options))",
                "+    return gateway.jvm.scala.collection.JavaConversions.collectionAsScalaIterable(tuples)",
                "+",
                "+  def getDefaultChecked(self, defaultChecked):",
                "+    if defaultChecked is None:",
                "+      defaultChecked = []",
                "+    return gateway.jvm.scala.collection.JavaConversions.collectionAsScalaIterable(defaultChecked)",
                "+",
                "+  def registerHook(self, event, cmd, replName=None):",
                "+    if replName is None:",
                "+      self.z.registerHook(event, cmd)",
                "+    else:",
                "+      self.z.registerHook(event, cmd, replName)",
                "+",
                "+  def unregisterHook(self, event, replName=None):",
                "+    if replName is None:",
                "+      self.z.unregisterHook(event)",
                "+    else:",
                "+      self.z.unregisterHook(event, replName)",
                "+",
                "+  def getHook(self, event, replName=None):",
                "+    if replName is None:",
                "+      return self.z.getHook(event)",
                "+    return self.z.getHook(event, replName)",
                "+",
                "+  def _setup_matplotlib(self):",
                "+    # If we don't have matplotlib installed don't bother continuing",
                "+    try:",
                "+      import matplotlib",
                "+    except ImportError:",
                "+      return",
                "+    ",
                "+    # Make sure custom backends are available in the PYTHONPATH",
                "+    rootdir = os.environ.get('ZEPPELIN_HOME', os.getcwd())",
                "+    mpl_path = os.path.join(rootdir, 'interpreter', 'lib', 'python')",
                "+    if mpl_path not in sys.path:",
                "+      sys.path.append(mpl_path)",
                "+    ",
                "+    # Finally check if backend exists, and if so configure as appropriate",
                "+    try:",
                "+      matplotlib.use('module://backend_zinline')",
                "+      import backend_zinline",
                "+      ",
                "+      # Everything looks good so make config assuming that we are using",
                "+      # an inline backend",
                "+      self._displayhook = backend_zinline.displayhook",
                "+      self.configure_mpl(width=600, height=400, dpi=72, fontsize=10,",
                "+                         interactive=True, format='png', context=self.z)",
                "+    except ImportError:",
                "+      # Fall back to Agg if no custom backend installed",
                "+      matplotlib.use('Agg')",
                "+      warnings.warn(\"Unable to load inline matplotlib backend, \"",
                "+                    \"falling back to Agg\")",
                "+",
                "+  def configure_mpl(self, **kwargs):",
                "+    import mpl_config",
                "+    mpl_config.configure(**kwargs)",
                "+",
                "+  def __tupleToScalaTuple2(self, tuple):",
                "+    if (len(tuple) == 2):",
                "+      return gateway.jvm.scala.Tuple2(tuple[0], tuple[1])",
                "+    else:",
                "+      raise IndexError(\"options must be a list of tuple of 2\")",
                "+",
                "+",
                "+class SparkVersion(object):",
                "+  SPARK_1_4_0 = 10400",
                "+  SPARK_1_3_0 = 10300",
                "+  SPARK_2_0_0 = 20000",
                "+",
                "+  def __init__(self, versionNumber):",
                "+    self.version = versionNumber",
                "+",
                "+  def isAutoConvertEnabled(self):",
                "+    return self.version >= self.SPARK_1_4_0",
                "+",
                "+  def isImportAllPackageUnderSparkSql(self):",
                "+    return self.version >= self.SPARK_1_3_0",
                "+",
                "+  def isSpark2(self):",
                "+    return self.version >= self.SPARK_2_0_0",
                "+",
                "+class PySparkCompletion:",
                "+  def __init__(self, interpreterObject):",
                "+    self.interpreterObject = interpreterObject",
                "+",
                "+  def getGlobalCompletion(self):",
                "+    objectDefList = []",
                "+    try:",
                "+      for completionItem in list(globals().keys()):",
                "+        objectDefList.append(completionItem)",
                "+    except:",
                "+      return None",
                "+    else:",
                "+      return objectDefList",
                "+",
                "+  def getMethodCompletion(self, text_value):",
                "+    execResult = locals()",
                "+    if text_value == None:",
                "+      return None",
                "+    completion_target = text_value",
                "+    try:",
                "+      if len(completion_target) <= 0:",
                "+        return None",
                "+      if text_value[-1] == \".\":",
                "+        completion_target = text_value[:-1]",
                "+      exec(\"{} = dir({})\".format(\"objectDefList\", completion_target), globals(), execResult)",
                "+    except:",
                "+      return None",
                "+    else:",
                "+      return list(execResult['objectDefList'])",
                "+",
                "+",
                "+  def getCompletion(self, text_value):",
                "+    completionList = set()",
                "+",
                "+    globalCompletionList = self.getGlobalCompletion()",
                "+    if globalCompletionList != None:",
                "+      for completionItem in list(globalCompletionList):",
                "+        completionList.add(completionItem)",
                "+",
                "+    if text_value != None:",
                "+      objectCompletionList = self.getMethodCompletion(text_value)",
                "+      if objectCompletionList != None:",
                "+        for completionItem in list(objectCompletionList):",
                "+          completionList.add(completionItem)",
                "+    if len(completionList) <= 0:",
                "+      self.interpreterObject.setStatementsFinished(\"\", False)",
                "+    else:",
                "+      result = json.dumps(list(filter(lambda x : not re.match(\"^__.*\", x), list(completionList))))",
                "+      self.interpreterObject.setStatementsFinished(result, False)",
                "+",
                "+client = GatewayClient(port=int(sys.argv[1]))",
                "+sparkVersion = SparkVersion(int(sys.argv[2]))",
                "+if sparkVersion.isSpark2():",
                "+  from pyspark.sql import SparkSession",
                "+else:",
                "+  from pyspark.sql import SchemaRDD",
                "+",
                "+if sparkVersion.isAutoConvertEnabled():",
                "+  gateway = JavaGateway(client, auto_convert = True)",
                "+else:",
                "+  gateway = JavaGateway(client)",
                "+",
                "+java_import(gateway.jvm, \"org.apache.spark.SparkEnv\")",
                "+java_import(gateway.jvm, \"org.apache.spark.SparkConf\")",
                "+java_import(gateway.jvm, \"org.apache.spark.api.java.*\")",
                "+java_import(gateway.jvm, \"org.apache.spark.api.python.*\")",
                "+java_import(gateway.jvm, \"org.apache.spark.mllib.api.python.*\")",
                "+",
                "+intp = gateway.entry_point",
                "+output = Logger()",
                "+sys.stdout = output",
                "+sys.stderr = output",
                "+intp.onPythonScriptInitialized(os.getpid())",
                "+",
                "+jsc = intp.getJavaSparkContext()",
                "+",
                "+if sparkVersion.isImportAllPackageUnderSparkSql():",
                "+  java_import(gateway.jvm, \"org.apache.spark.sql.*\")",
                "+  java_import(gateway.jvm, \"org.apache.spark.sql.hive.*\")",
                "+else:",
                "+  java_import(gateway.jvm, \"org.apache.spark.sql.SQLContext\")",
                "+  java_import(gateway.jvm, \"org.apache.spark.sql.hive.HiveContext\")",
                "+  java_import(gateway.jvm, \"org.apache.spark.sql.hive.LocalHiveContext\")",
                "+  java_import(gateway.jvm, \"org.apache.spark.sql.hive.TestHiveContext\")",
                "+",
                "+",
                "+java_import(gateway.jvm, \"scala.Tuple2\")",
                "+",
                "+_zcUserQueryNameSpace = {}",
                "+",
                "+jconf = intp.getSparkConf()",
                "+conf = SparkConf(_jvm = gateway.jvm, _jconf = jconf)",
                "+sc = _zsc_ = SparkContext(jsc=jsc, gateway=gateway, conf=conf)",
                "+_zcUserQueryNameSpace[\"_zsc_\"] = _zsc_",
                "+_zcUserQueryNameSpace[\"sc\"] = sc",
                "+",
                "+if sparkVersion.isSpark2():",
                "+  spark = __zSpark__ = SparkSession(sc, intp.getSparkSession())",
                "+  sqlc = __zSqlc__ = __zSpark__._wrapped",
                "+  _zcUserQueryNameSpace[\"sqlc\"] = sqlc",
                "+  _zcUserQueryNameSpace[\"__zSqlc__\"] = __zSqlc__",
                "+  _zcUserQueryNameSpace[\"spark\"] = spark",
                "+  _zcUserQueryNameSpace[\"__zSpark__\"] = __zSpark__",
                "+else:",
                "+  sqlc = __zSqlc__ = SQLContext(sparkContext=sc, sqlContext=intp.getSQLContext())",
                "+  _zcUserQueryNameSpace[\"sqlc\"] = sqlc",
                "+  _zcUserQueryNameSpace[\"__zSqlc__\"] = sqlc",
                "+",
                "+sqlContext = __zSqlc__",
                "+_zcUserQueryNameSpace[\"sqlContext\"] = sqlContext",
                "+",
                "+completion = __zeppelin_completion__ = PySparkCompletion(intp)",
                "+_zcUserQueryNameSpace[\"completion\"] = completion",
                "+_zcUserQueryNameSpace[\"__zeppelin_completion__\"] = __zeppelin_completion__",
                "+",
                "+z = __zeppelin__ = PyZeppelinContext(intp.getZeppelinContext())",
                "+__zeppelin__._setup_matplotlib()",
                "+_zcUserQueryNameSpace[\"z\"] = z",
                "+_zcUserQueryNameSpace[\"__zeppelin__\"] = __zeppelin__",
                "+",
                "+while True :",
                "+  req = intp.getStatements()",
                "+  try:",
                "+    stmts = req.statements().split(\"\\n\")",
                "+    jobGroup = req.jobGroup()",
                "+    jobDesc = req.jobDescription()",
                "+    ",
                "+    # Get post-execute hooks",
                "+    try:",
                "+      global_hook = intp.getHook('post_exec_dev')",
                "+    except:",
                "+      global_hook = None",
                "+      ",
                "+    try:",
                "+      user_hook = __zeppelin__.getHook('post_exec')",
                "+    except:",
                "+      user_hook = None",
                "+      ",
                "+    nhooks = 0",
                "+    for hook in (global_hook, user_hook):",
                "+      if hook:",
                "+        nhooks += 1",
                "+",
                "+    if stmts:",
                "+      # use exec mode to compile the statements except the last statement,",
                "+      # so that the last statement's evaluation will be printed to stdout",
                "+      sc.setJobGroup(jobGroup, jobDesc)",
                "+      code = compile('\\n'.join(stmts), '<stdin>', 'exec', ast.PyCF_ONLY_AST, 1)",
                "+      to_run_hooks = []",
                "+      if (nhooks > 0):",
                "+        to_run_hooks = code.body[-nhooks:]",
                "+      to_run_exec, to_run_single = (code.body[:-(nhooks + 1)],",
                "+                                    [code.body[-(nhooks + 1)]])",
                "+",
                "+      try:",
                "+        for node in to_run_exec:",
                "+          mod = ast.Module([node])",
                "+          code = compile(mod, '<stdin>', 'exec')",
                "+          exec(code, _zcUserQueryNameSpace)",
                "+",
                "+        for node in to_run_single:",
                "+          mod = ast.Interactive([node])",
                "+          code = compile(mod, '<stdin>', 'single')",
                "+          exec(code, _zcUserQueryNameSpace)",
                "+          ",
                "+        for node in to_run_hooks:",
                "+          mod = ast.Module([node])",
                "+          code = compile(mod, '<stdin>', 'exec')",
                "+          exec(code, _zcUserQueryNameSpace)",
                "+",
                "+        intp.setStatementsFinished(\"\", False)",
                "+      except Py4JJavaError:",
                "+        # raise it to outside try except",
                "+        raise",
                "+      except:",
                "+        exception = traceback.format_exc()",
                "+        m = re.search(\"File \\\"<stdin>\\\", line (\\d+).*\", exception)",
                "+        if m:",
                "+          line_no = int(m.group(1))",
                "+          intp.setStatementsFinished(",
                "+            \"Fail to execute line {}: {}\\n\".format(line_no, stmts[line_no - 1]) + exception, True)",
                "+        else:",
                "+          intp.setStatementsFinished(exception, True)",
                "+    else:",
                "+      intp.setStatementsFinished(\"\", False)",
                "+",
                "+  except Py4JJavaError:",
                "+    excInnerError = traceback.format_exc() # format_tb() does not return the inner exception",
                "+    innerErrorStart = excInnerError.find(\"Py4JJavaError:\")",
                "+    if innerErrorStart > -1:",
                "+       excInnerError = excInnerError[innerErrorStart:]",
                "+    intp.setStatementsFinished(excInnerError + str(sys.exc_info()), True)",
                "+  except:",
                "+    intp.setStatementsFinished(traceback.format_exc(), True)",
                "+",
                "+  output.reset()",
                "diff --git a/spark/interpreter/src/main/scala/org/apache/spark/SparkRBackend.scala b/spark/interpreter/src/main/scala/org/apache/spark/SparkRBackend.scala",
                "new file mode 100644",
                "index 000000000..05f1ac0e3",
                "--- /dev/null",
                "+++ b/spark/interpreter/src/main/scala/org/apache/spark/SparkRBackend.scala",
                "@@ -0,0 +1,54 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.spark",
                "+",
                "+import org.apache.spark.api.r.RBackend",
                "+",
                "+object SparkRBackend {",
                "+  val backend : RBackend = new RBackend()",
                "+  private var started = false;",
                "+  private var portNumber = 0;",
                "+",
                "+  val backendThread : Thread = new Thread(\"SparkRBackend\") {",
                "+    override def run() {",
                "+      backend.run()",
                "+    }",
                "+  }",
                "+",
                "+  def init() : Int = {",
                "+    portNumber = backend.init()",
                "+    portNumber",
                "+  }",
                "+",
                "+  def start() : Unit = {",
                "+    backendThread.start()",
                "+    started = true",
                "+  }",
                "+",
                "+  def close() : Unit = {",
                "+    backend.close()",
                "+    backendThread.join()",
                "+  }",
                "+",
                "+  def isStarted() : Boolean = {",
                "+    started",
                "+  }",
                "+",
                "+  def port(): Int = {",
                "+    return portNumber",
                "+  }",
                "+}",
                "diff --git a/spark/interpreter/src/main/scala/org/apache/zeppelin/spark/ZeppelinRDisplay.scala b/spark/interpreter/src/main/scala/org/apache/zeppelin/spark/ZeppelinRDisplay.scala",
                "new file mode 100644",
                "index 000000000..a9014c2ab",
                "--- /dev/null",
                "+++ b/spark/interpreter/src/main/scala/org/apache/zeppelin/spark/ZeppelinRDisplay.scala",
                "@@ -0,0 +1,117 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.spark",
                "+",
                "+import org.apache.zeppelin.interpreter.InterpreterResult.Code",
                "+import org.apache.zeppelin.interpreter.InterpreterResult.Code.{SUCCESS}",
                "+import org.apache.zeppelin.interpreter.InterpreterResult.Type",
                "+import org.apache.zeppelin.interpreter.InterpreterResult.Type.{TEXT, HTML, TABLE, IMG}",
                "+import org.jsoup.Jsoup",
                "+import org.jsoup.nodes.Element",
                "+import org.jsoup.nodes.Document.OutputSettings",
                "+import org.jsoup.safety.Whitelist",
                "+",
                "+import scala.collection.JavaConversions._",
                "+import scala.util.matching.Regex",
                "+",
                "+case class RDisplay(content: String, `type`: Type, code: Code)",
                "+",
                "+object ZeppelinRDisplay {",
                "+",
                "+  val pattern = new Regex(\"\"\"^ *\\[\\d*\\] \"\"\")",
                "+",
                "+  def render(html: String, imageWidth: String): RDisplay = {",
                "+",
                "+    val document = Jsoup.parse(html)",
                "+    document.outputSettings().prettyPrint(false)",
                "+",
                "+    val body = document.body()",
                "+",
                "+    if (body.getElementsByTag(\"p\").isEmpty) return RDisplay(body.html(), HTML, SUCCESS)",
                "+",
                "+    val bodyHtml = body.html()",
                "+",
                "+    if (! bodyHtml.contains(\"<img\")",
                "+      &&  ! bodyHtml.contains(\"<script\")",
                "+      && ! bodyHtml.contains(\"%html \")",
                "+      && ! bodyHtml.contains(\"%table \")",
                "+      && ! bodyHtml.contains(\"%img \")",
                "+    ) {",
                "+      return textDisplay(body)",
                "+    }",
                "+",
                "+    if (bodyHtml.contains(\"%table\")) {",
                "+      return tableDisplay(body)",
                "+    }",
                "+",
                "+    if (bodyHtml.contains(\"%img\")) {",
                "+      return imgDisplay(body)",
                "+    }",
                "+",
                "+    return htmlDisplay(body, imageWidth)",
                "+  }",
                "+",
                "+  private def textDisplay(body: Element): RDisplay = {",
                "+    // remove HTML tag while preserving whitespaces and newlines",
                "+    val text = Jsoup.clean(body.html(), \"\",",
                "+      Whitelist.none(), new OutputSettings().prettyPrint(false))",
                "+    RDisplay(text, TEXT, SUCCESS)",
                "+  }",
                "+",
                "+  private def tableDisplay(body: Element): RDisplay = {",
                "+    val p = body.getElementsByTag(\"p\").first().html.replace(\"\u00e2\u0080\u009c%table \" , \"\").replace(\"\u00e2\u0080\u009d\", \"\")",
                "+    val r = (pattern findFirstIn p).getOrElse(\"\")",
                "+    val table = p.replace(r, \"\").replace(\"\\\\t\", \"\\t\").replace(\"\\\\n\", \"\\n\")",
                "+    RDisplay(table, TABLE, SUCCESS)",
                "+  }",
                "+",
                "+  private def imgDisplay(body: Element): RDisplay = {",
                "+    val p = body.getElementsByTag(\"p\").first().html.replace(\"\u00e2\u0080\u009c%img \" , \"\").replace(\"\u00e2\u0080\u009d\", \"\")",
                "+    val r = (pattern findFirstIn p).getOrElse(\"\")",
                "+    val img = p.replace(r, \"\")",
                "+    RDisplay(img, IMG, SUCCESS)",
                "+  }",
                "+",
                "+  private def htmlDisplay(body: Element, imageWidth: String): RDisplay = {",
                "+    var div = new String()",
                "+",
                "+    for (element <- body.children) {",
                "+",
                "+      val eHtml = element.html()",
                "+      var eOuterHtml = element.outerHtml()",
                "+",
                "+      eOuterHtml = eOuterHtml.replace(\"\u00e2\u0080\u009c%html \" , \"\").replace(\"\u00e2\u0080\u009d\", \"\")",
                "+",
                "+      val r = (pattern findFirstIn eHtml).getOrElse(\"\")",
                "+",
                "+      div = div + eOuterHtml.replace(r, \"\")",
                "+    }",
                "+",
                "+    val content =  div",
                "+      .replaceAll(\"src=\\\"//\", \"src=\\\"http://\")",
                "+      .replaceAll(\"href=\\\"//\", \"href=\\\"http://\")",
                "+",
                "+    body.html(content)",
                "+",
                "+    for (image <- body.getElementsByTag(\"img\")) {",
                "+      image.attr(\"width\", imageWidth)",
                "+    }",
                "+",
                "+    RDisplay(body.html, HTML, SUCCESS)",
                "+  }",
                "+}",
                "diff --git a/spark/interpreter/src/main/scala/org/apache/zeppelin/spark/utils/DisplayUtils.scala b/spark/interpreter/src/main/scala/org/apache/zeppelin/spark/utils/DisplayUtils.scala",
                "new file mode 100644",
                "index 000000000..81814349c",
                "--- /dev/null",
                "+++ b/spark/interpreter/src/main/scala/org/apache/zeppelin/spark/utils/DisplayUtils.scala",
                "@@ -0,0 +1,90 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.spark.utils",
                "+",
                "+import java.lang.StringBuilder",
                "+",
                "+import org.apache.spark.rdd.RDD",
                "+",
                "+import scala.collection.IterableLike",
                "+",
                "+object DisplayUtils {",
                "+",
                "+  implicit def toDisplayRDDFunctions[T <: Product](rdd: RDD[T]): DisplayRDDFunctions[T] = new DisplayRDDFunctions[T](rdd)",
                "+",
                "+  implicit def toDisplayTraversableFunctions[T <: Product](traversable: Traversable[T]): DisplayTraversableFunctions[T] = new DisplayTraversableFunctions[T](traversable)",
                "+",
                "+  def html(htmlContent: String = \"\") = s\"%html $htmlContent\"",
                "+",
                "+  def img64(base64Content: String = \"\") = s\"%img $base64Content\"",
                "+",
                "+  def img(url: String) = s\"<img src='$url' />\"",
                "+}",
                "+",
                "+trait DisplayCollection[T <: Product] {",
                "+",
                "+  def printFormattedData(traversable: Traversable[T], columnLabels: String*): Unit = {",
                "+    val providedLabelCount: Int = columnLabels.size",
                "+    var maxColumnCount:Int = 1",
                "+    val headers = new StringBuilder(\"%table \")",
                "+",
                "+    val data = new StringBuilder(\"\")",
                "+",
                "+    traversable.foreach(tuple => {",
                "+      maxColumnCount = math.max(maxColumnCount,tuple.productArity)",
                "+      data.append(tuple.productIterator.mkString(\"\\t\")).append(\"\\n\")",
                "+    })",
                "+",
                "+    if (providedLabelCount > maxColumnCount) {",
                "+      headers.append(columnLabels.take(maxColumnCount).mkString(\"\\t\")).append(\"\\n\")",
                "+    } else if (providedLabelCount < maxColumnCount) {",
                "+      val missingColumnHeaders = ((providedLabelCount+1) to maxColumnCount).foldLeft[String](\"\"){",
                "+        (stringAccumulator,index) =>  if (index==1) s\"Column$index\" else s\"$stringAccumulator\\tColumn$index\"",
                "+      }",
                "+",
                "+      headers.append(columnLabels.mkString(\"\\t\")).append(missingColumnHeaders).append(\"\\n\")",
                "+    } else {",
                "+      headers.append(columnLabels.mkString(\"\\t\")).append(\"\\n\")",
                "+    }",
                "+",
                "+    headers.append(data)",
                "+",
                "+    print(headers.toString)",
                "+  }",
                "+",
                "+}",
                "+",
                "+class DisplayRDDFunctions[T <: Product] (val rdd: RDD[T]) extends DisplayCollection[T] {",
                "+",
                "+  def display(columnLabels: String*)(implicit sparkMaxResult: SparkMaxResult): Unit = {",
                "+    printFormattedData(rdd.take(sparkMaxResult.maxResult), columnLabels: _*)",
                "+  }",
                "+",
                "+  def display(sparkMaxResult:Int, columnLabels: String*): Unit = {",
                "+    printFormattedData(rdd.take(sparkMaxResult), columnLabels: _*)",
                "+  }",
                "+}",
                "+",
                "+class DisplayTraversableFunctions[T <: Product] (val traversable: Traversable[T]) extends DisplayCollection[T] {",
                "+",
                "+  def display(columnLabels: String*): Unit = {",
                "+    printFormattedData(traversable, columnLabels: _*)",
                "+  }",
                "+}",
                "+",
                "+class SparkMaxResult(val maxResult: Int) extends Serializable",
                "diff --git a/spark/pom.xml b/spark/pom.xml",
                "index 1972f26d3..06b7d9f74 100644",
                "--- a/spark/pom.xml",
                "+++ b/spark/pom.xml",
                "@@ -18,678 +18,225 @@",
                "-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">",
                "-  <modelVersion>4.0.0</modelVersion>",
                "+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"",
                "+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"",
                "+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">",
                "+    <modelVersion>4.0.0</modelVersion>",
                "+",
                "+    <parent>",
                "+        <artifactId>interpreter-parent</artifactId>",
                "+        <groupId>org.apache.zeppelin</groupId>",
                "+        <version>0.9.0-SNAPSHOT</version>",
                "+        <relativePath>../interpreter-parent/pom.xml</relativePath>",
                "+    </parent>",
                "-  <parent>",
                "-    <artifactId>zeppelin</artifactId>",
                "     <groupId>org.apache.zeppelin</groupId>",
                "+    <artifactId>spark-parent</artifactId>",
                "+    <packaging>pom</packaging>",
                "     <version>0.9.0-SNAPSHOT</version>",
                "-    <relativePath>..</relativePath>",
                "-  </parent>",
                "-",
                "-  <groupId>org.apache.zeppelin</groupId>",
                "-  <artifactId>zeppelin-spark_2.10</artifactId>",
                "-  <packaging>jar</packaging>",
                "-  <version>0.9.0-SNAPSHOT</version>",
                "-  <name>Zeppelin: Spark</name>",
                "-  <description>Zeppelin spark support</description>",
                "-",
                "-  <properties>",
                "-    <!--library versions-->",
                "-    <jsoup.version>1.8.2</jsoup.version>",
                "-    <spark.version>2.0.2</spark.version>",
                "-    <guava.version>14.0.1</guava.version>",
                "-    <commons.exec.version>1.3</commons.exec.version>",
                "-    <commons.compress.version>1.9</commons.compress.version>",
                "-    <maven.plugin.api.version>3.0</maven.plugin.api.version>",
                "-    <aether.version>1.12</aether.version>",
                "-    <maven.aeither.provider.version>3.0.3</maven.aeither.provider.version>",
                "-    <wagon.version>1.0</wagon.version>",
                "-",
                "-    <datanucleus.rdbms.version>3.2.9</datanucleus.rdbms.version>",
                "-    <datanucleus.apijdo.version>3.2.6</datanucleus.apijdo.version>",
                "-    <datanucleus.core.version>3.2.10</datanucleus.core.version>",
                "-",
                "-    <!--plugin versions-->",
                "-    <plugin.shade.version>2.3</plugin.shade.version>",
                "-    <plugin.scala.version>2.15.2</plugin.scala.version>",
                "-",
                "-    <!-- settings -->",
                "-    <pyspark.test.exclude>**/PySparkInterpreterMatplotlibTest.java</pyspark.test.exclude>",
                "-    <pyspark.test.include>**/*Test.*</pyspark.test.include>",
                "-  </properties>",
                "-",
                "-  <dependencies>",
                "-    <dependency>",
                "-      <groupId>${project.groupId}</groupId>",
                "-      <artifactId>zeppelin-display_${scala.binary.version}</artifactId>",
                "-      <version>${project.version}</version>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>${project.groupId}</groupId>",
                "-      <artifactId>zeppelin-interpreter</artifactId>",
                "-      <version>${project.version}</version>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>${project.groupId}</groupId>",
                "-      <artifactId>zeppelin-python</artifactId>",
                "-      <version>${project.version}</version>",
                "-      <exclusions>",
                "-        <exclusion>",
                "-          <groupId>net.sf.py4j</groupId>",
                "-          <artifactId>py4j</artifactId>",
                "-        </exclusion>",
                "-      </exclusions>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>${project.groupId}</groupId>",
                "-      <artifactId>zeppelin-python</artifactId>",
                "-      <version>${project.version}</version>",
                "-      <classifier>tests</classifier>",
                "-      <scope>test</scope>",
                "-      <exclusions>",
                "-        <exclusion>",
                "-          <groupId>net.sf.py4j</groupId>",
                "-          <artifactId>py4j</artifactId>",
                "-        </exclusion>",
                "-      </exclusions>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.slf4j</groupId>",
                "-      <artifactId>slf4j-api</artifactId>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.slf4j</groupId>",
                "-      <artifactId>slf4j-log4j12</artifactId>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.apache.spark</groupId>",
                "-      <artifactId>spark-repl_${scala.binary.version}</artifactId>",
                "-      <version>${spark.version}</version>",
                "-      <scope>provided</scope>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.apache.spark</groupId>",
                "-      <artifactId>spark-hive_${scala.binary.version}</artifactId>",
                "-      <version>${spark.version}</version>",
                "-      <scope>provided</scope>",
                "-    </dependency>",
                "-",
                "-    <!-- Aether :: maven dependency resolution -->",
                "-    <dependency>",
                "-      <groupId>org.apache.maven</groupId>",
                "-      <artifactId>maven-plugin-api</artifactId>",
                "-      <version>${maven.plugin.api.version}</version>",
                "-      <exclusions>",
                "-        <exclusion>",
                "-          <groupId>org.codehaus.plexus</groupId>",
                "-          <artifactId>plexus-utils</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>org.sonatype.sisu</groupId>",
                "-          <artifactId>sisu-inject-plexus</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>org.apache.maven</groupId>",
                "-          <artifactId>maven-model</artifactId>",
                "-        </exclusion>",
                "-      </exclusions>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.sonatype.aether</groupId>",
                "-      <artifactId>aether-api</artifactId>",
                "-      <version>${aether.version}</version>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.sonatype.aether</groupId>",
                "-      <artifactId>aether-util</artifactId>",
                "-      <version>${aether.version}</version>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.sonatype.aether</groupId>",
                "-      <artifactId>aether-impl</artifactId>",
                "-      <version>${aether.version}</version>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.apache.maven</groupId>",
                "-      <artifactId>maven-aether-provider</artifactId>",
                "-      <version>${maven.aeither.provider.version}</version>",
                "-      <exclusions>",
                "-        <exclusion>",
                "-          <groupId>org.sonatype.aether</groupId>",
                "-          <artifactId>aether-api</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>org.sonatype.aether</groupId>",
                "-          <artifactId>aether-spi</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>org.sonatype.aether</groupId>",
                "-          <artifactId>aether-util</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>org.sonatype.aether</groupId>",
                "-          <artifactId>aether-impl</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>org.codehaus.plexus</groupId>",
                "-          <artifactId>plexus-utils</artifactId>",
                "-        </exclusion>",
                "-      </exclusions>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.sonatype.aether</groupId>",
                "-      <artifactId>aether-connector-file</artifactId>",
                "-      <version>${aether.version}</version>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.sonatype.aether</groupId>",
                "-      <artifactId>aether-connector-wagon</artifactId>",
                "-      <version>${aether.version}</version>",
                "-      <exclusions>",
                "-        <exclusion>",
                "-          <groupId>org.apache.maven.wagon</groupId>",
                "-          <artifactId>wagon-provider-api</artifactId>",
                "-        </exclusion>",
                "-      </exclusions>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.apache.maven.wagon</groupId>",
                "-      <artifactId>wagon-provider-api</artifactId>",
                "-      <version>${wagon.version}</version>",
                "-      <exclusions>",
                "-        <exclusion>",
                "-          <groupId>org.codehaus.plexus</groupId>",
                "-          <artifactId>plexus-utils</artifactId>",
                "-        </exclusion>",
                "-      </exclusions>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.apache.maven.wagon</groupId>",
                "-      <artifactId>wagon-http-lightweight</artifactId>",
                "-      <version>${wagon.version}</version>",
                "-      <exclusions>",
                "-        <exclusion>",
                "-          <groupId>org.apache.maven.wagon</groupId>",
                "-          <artifactId>wagon-http-shared</artifactId>",
                "-        </exclusion>",
                "-      </exclusions>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.apache.maven.wagon</groupId>",
                "-      <artifactId>wagon-http</artifactId>",
                "-      <version>${wagon.version}</version>",
                "-      <exclusions>",
                "-      </exclusions>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.apache.commons</groupId>",
                "-      <artifactId>commons-exec</artifactId>",
                "-      <version>${commons.exec.version}</version>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.scala-lang</groupId>",
                "-      <artifactId>scala-library</artifactId>",
                "-      <version>${scala.version}</version>",
                "-      <scope>provided</scope>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.scala-lang</groupId>",
                "-      <artifactId>scala-compiler</artifactId>",
                "-      <version>${scala.version}</version>",
                "-      <scope>provided</scope>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.scala-lang</groupId>",
                "-      <artifactId>scala-reflect</artifactId>",
                "-      <version>${scala.version}</version>",
                "-      <scope>provided</scope>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>commons-lang</groupId>",
                "-      <artifactId>commons-lang</artifactId>",
                "-      <scope>provided</scope>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.apache.commons</groupId>",
                "-      <artifactId>commons-compress</artifactId>",
                "-      <version>${commons.compress.version}</version>",
                "-      <scope>provided</scope>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.jsoup</groupId>",
                "-      <artifactId>jsoup</artifactId>",
                "-      <version>${jsoup.version}</version>",
                "-    </dependency>",
                "-",
                "-    <!--test libraries-->",
                "-    <dependency>",
                "-      <groupId>org.scalatest</groupId>",
                "-      <artifactId>scalatest_${scala.binary.version}</artifactId>",
                "-      <version>${scalatest.version}</version>",
                "-      <scope>test</scope>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>junit</groupId>",
                "-      <artifactId>junit</artifactId>",
                "-      <scope>test</scope>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.datanucleus</groupId>",
                "-      <artifactId>datanucleus-core</artifactId>",
                "-      <version>${datanucleus.core.version}</version>",
                "-      <scope>test</scope>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.datanucleus</groupId>",
                "-      <artifactId>datanucleus-api-jdo</artifactId>",
                "-      <version>${datanucleus.apijdo.version}</version>",
                "-      <scope>test</scope>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.datanucleus</groupId>",
                "-      <artifactId>datanucleus-rdbms</artifactId>",
                "-      <version>${datanucleus.rdbms.version}</version>",
                "-      <scope>test</scope>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.mockito</groupId>",
                "-      <artifactId>mockito-core</artifactId>",
                "-      <scope>test</scope>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.powermock</groupId>",
                "-      <artifactId>powermock-api-mockito</artifactId>",
                "-      <scope>test</scope>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.powermock</groupId>",
                "-      <artifactId>powermock-module-junit4</artifactId>",
                "-      <scope>test</scope>",
                "-    </dependency>",
                "-",
                "-  </dependencies>",
                "-",
                "-  <build>",
                "-    <plugins>",
                "-      <plugin>",
                "-        <artifactId>maven-enforcer-plugin</artifactId>",
                "-        <executions>",
                "-          <execution>",
                "-            <id>enforce</id>",
                "-            <phase>none</phase>",
                "-          </execution>",
                "-        </executions>",
                "-      </plugin>",
                "-",
                "-      <plugin>",
                "-        <groupId>org.apache.maven.plugins</groupId>",
                "-        <artifactId>maven-surefire-plugin</artifactId>",
                "-        <configuration>",
                "-          <forkCount>1</forkCount>",
                "-          <reuseForks>false</reuseForks>",
                "-          <argLine>-Xmx1024m -XX:MaxPermSize=256m</argLine>",
                "-          <excludes>",
                "-            <exclude>**/SparkRInterpreterTest.java</exclude>",
                "-            <exclude>${pyspark.test.exclude}</exclude>",
                "-          </excludes>",
                "-          <environmentVariables>",
                "-            <!-- local pyspark execution needs PYTHONPATH otherwise python daemon in executor side will fail",
                "-            e.g. sc.range(1,10).sum()",
                "-            -->",
                "-            <PYTHONPATH>../interpreter/spark/pyspark/pyspark.zip:../interpreter/spark/pyspark/py4j-${spark.py4j.version}-src.zip:../interpreter/lib/python</PYTHONPATH>",
                "-          </environmentVariables>",
                "-        </configuration>",
                "-      </plugin>",
                "-",
                "-      <plugin>",
                "-        <groupId>org.apache.maven.plugins</groupId>",
                "-        <artifactId>maven-shade-plugin</artifactId>",
                "-        <version>${plugin.shade.version}</version>",
                "-        <configuration>",
                "-          <filters>",
                "-            <filter>",
                "-              <artifact>*:*</artifact>",
                "-              <excludes>",
                "-                <exclude>META-INF/*.SF</exclude>",
                "-                <exclude>META-INF/*.DSA</exclude>",
                "-                <exclude>META-INF/*.RSA</exclude>",
                "-              </excludes>",
                "-            </filter>",
                "-          </filters>",
                "-          <transformers>",
                "-            <transformer implementation=\"org.apache.maven.plugins.shade.resource.ServicesResourceTransformer\"/>",
                "-            <transformer implementation=\"org.apache.maven.plugins.shade.resource.AppendingTransformer\">",
                "-              <resource>reference.conf</resource>",
                "-            </transformer>",
                "-          </transformers>",
                "-",
                "-          <relocations>",
                "-            <!-- shade guava and proto-buf, because it might conflict with those of spark -->",
                "-            <relocation>",
                "-              <pattern>com.google</pattern>",
                "-              <shadedPattern>org.apache.zeppelin.com.google</shadedPattern>",
                "-            </relocation>",
                "-            <!-- shade netty, because it might conflict with that of spark-->",
                "-            <relocation>",
                "-              <pattern>io.netty</pattern>",
                "-              <shadedPattern>org.apache.zeppelin.io.netty</shadedPattern>",
                "-            </relocation>",
                "-          </relocations>",
                "-        </configuration>",
                "-        <executions>",
                "-          <execution>",
                "-            <phase>package</phase>",
                "-            <goals>",
                "-              <goal>shade</goal>",
                "-            </goals>",
                "-          </execution>",
                "-        </executions>",
                "-      </plugin>",
                "-",
                "-      <plugin>",
                "-        <groupId>org.apache.maven.plugins</groupId>",
                "-        <artifactId>maven-dependency-plugin</artifactId>",
                "-        <executions>",
                "-          <execution>",
                "-            <phase>package</phase>",
                "-            <goals>",
                "-              <goal>copy</goal>",
                "-            </goals>",
                "-            <configuration>",
                "-              <outputDirectory>${project.build.directory}/../../interpreter/spark</outputDirectory>",
                "-              <overWriteReleases>false</overWriteReleases>",
                "-              <overWriteSnapshots>false</overWriteSnapshots>",
                "-              <overWriteIfNewer>true</overWriteIfNewer>",
                "-              <includeScope>runtime</includeScope>",
                "-              <artifactItems>",
                "-                <artifactItem>",
                "-                  <groupId>${project.groupId}</groupId>",
                "-                  <artifactId>${project.artifactId}</artifactId>",
                "-                  <version>${project.version}</version>",
                "-                  <type>${project.packaging}</type>",
                "-                </artifactItem>",
                "-              </artifactItems>",
                "-            </configuration>",
                "-          </execution>",
                "-        </executions>",
                "-      </plugin>",
                "-",
                "-      <!-- Plugin to compile Scala code -->",
                "-      <plugin>",
                "-        <groupId>org.scala-tools</groupId>",
                "-        <artifactId>maven-scala-plugin</artifactId>",
                "-        <version>${plugin.scala.version}</version>",
                "-        <configuration>",
                "-            <scalaVersion>${scala.version}</scalaVersion>",
                "-          <excludes>",
                "-            <exclude>**/ZeppelinR.scala</exclude>",
                "-            <exclude>**/SparkRBackend.scala</exclude>",
                "-          </excludes>",
                "-        </configuration>",
                "-        <executions>",
                "-          <execution>",
                "-            <id>compile</id>",
                "-            <goals>",
                "-              <goal>compile</goal>",
                "-            </goals>",
                "-            <phase>compile</phase>",
                "-          </execution>",
                "-          <execution>",
                "-            <id>test-compile</id>",
                "-            <goals>",
                "-              <goal>testCompile</goal>",
                "-            </goals>",
                "-            <phase>test-compile</phase>",
                "-          </execution>",
                "-          <execution>",
                "-            <phase>process-resources</phase>",
                "-            <goals>",
                "-              <goal>compile</goal>",
                "-            </goals>",
                "-          </execution>",
                "-        </executions>",
                "-      </plugin>",
                "-",
                "-      <plugin>",
                "-        <groupId>org.apache.maven.plugins</groupId>",
                "-        <artifactId>maven-compiler-plugin</artifactId>",
                "-        <configuration>",
                "-          <excludes combine.self=\"override\"></excludes>",
                "-          <testExcludes combine.self=\"override\">",
                "-            <testExclude>${pyspark.test.exclude}</testExclude>",
                "-          </testExcludes>",
                "-        </configuration>",
                "-      </plugin>",
                "-      <plugin>",
                "-        <groupId>org.scala-tools</groupId>",
                "-        <artifactId>maven-scala-plugin</artifactId>",
                "-        <configuration>",
                "-          <excludes combine.self=\"override\">",
                "-          </excludes>",
                "-        </configuration>",
                "-      </plugin>",
                "-      <plugin>",
                "-        <groupId>org.apache.maven.plugins</groupId>",
                "-        <artifactId>maven-surefire-plugin</artifactId>",
                "-        <configuration>",
                "-          <excludes combine.self=\"override\">",
                "-            <exclude>${pyspark.test.exclude}</exclude>",
                "-          </excludes>",
                "-        </configuration>",
                "-      </plugin>",
                "-",
                "-      <!-- include sparkr by default -->",
                "-      <plugin>",
                "-        <groupId>org.apache.maven.plugins</groupId>",
                "-        <artifactId>maven-compiler-plugin</artifactId>",
                "-        <configuration>",
                "-          <excludes combine.self=\"override\"></excludes>",
                "-          <testExcludes combine.self=\"override\">",
                "-            <testExclude>${pyspark.test.exclude}</testExclude>",
                "-          </testExcludes>",
                "-        </configuration>",
                "-      </plugin>",
                "-      <plugin>",
                "-        <groupId>org.scala-tools</groupId>",
                "-        <artifactId>maven-scala-plugin</artifactId>",
                "-        <configuration>",
                "-          <excludes combine.self=\"override\">",
                "-          </excludes>",
                "-        </configuration>",
                "-      </plugin>",
                "-      <plugin>",
                "-        <groupId>org.apache.maven.plugins</groupId>",
                "-        <artifactId>maven-surefire-plugin</artifactId>",
                "-        <configuration>",
                "-          <excludes combine.self=\"override\">",
                "-            <exclude>${pyspark.test.exclude}</exclude>",
                "-          </excludes>",
                "-        </configuration>",
                "-      </plugin>",
                "-",
                "-      <plugin>",
                "-        <artifactId>maven-resources-plugin</artifactId>",
                "-        <executions>",
                "-          <execution>",
                "-            <id>copy-interpreter-setting</id>",
                "-            <phase>package</phase>",
                "-            <goals>",
                "-              <goal>resources</goal>",
                "-            </goals>",
                "-            <configuration>",
                "-              <outputDirectory>${project.build.directory}/../../interpreter/spark</outputDirectory>",
                "-            </configuration>",
                "-          </execution>",
                "-        </executions>",
                "-      </plugin>",
                "-    </plugins>",
                "-  </build>",
                "-",
                "-  <profiles>",
                "-    <profile>",
                "-      <id>spark-1.4</id>",
                "-      <properties>",
                "-        <spark.version>1.4.1</spark.version>",
                "-      </properties>",
                "-",
                "-      <dependencies>",
                "-      </dependencies>",
                "-    </profile>",
                "-",
                "-    <profile>",
                "-      <id>spark-1.5</id>",
                "-      <properties>",
                "-        <spark.version>1.5.2</spark.version>",
                "-        <akka.group>com.typesafe.akka</akka.group>",
                "-        <akka.version>2.3.11</akka.version>",
                "-        <protobuf.version>2.5.0</protobuf.version>",
                "-      </properties>",
                "-    </profile>",
                "-",
                "-    <profile>",
                "-      <id>spark-1.6</id>",
                "-      <properties>",
                "-        <spark.version>1.6.3</spark.version>",
                "-        <spark.py4j.version>0.9</spark.py4j.version>",
                "-        <akka.group>com.typesafe.akka</akka.group>",
                "-        <akka.version>2.3.11</akka.version>",
                "-        <protobuf.version>2.5.0</protobuf.version>",
                "-      </properties>",
                "-    </profile>",
                "-",
                "-    <profile>",
                "-      <id>spark-2.0</id>",
                "-      <properties>",
                "-        <spark.version>2.0.2</spark.version>",
                "-        <protobuf.version>2.5.0</protobuf.version>",
                "-        <spark.py4j.version>0.10.3</spark.py4j.version>",
                "-      </properties>",
                "-    </profile>",
                "+    <name>spark-parent</name>",
                "+    <description>Zeppelin spark support</description>",
                "+",
                "+    <properties>",
                "+        <!--library versions-->",
                "+        <datanucleus.rdbms.version>3.2.9</datanucleus.rdbms.version>",
                "+        <datanucleus.apijdo.version>3.2.6</datanucleus.apijdo.version>",
                "+        <datanucleus.core.version>3.2.10</datanucleus.core.version>",
                "+",
                "+        <!--plugin versions-->",
                "+        <plugin.shade.version>2.4.1</plugin.shade.version>",
                "+        <plugin.scala.version>2.15.2</plugin.scala.version>",
                "+        <!-- spark versions -->",
                "+        <spark.version>2.2.0</spark.version>",
                "+        <py4j.version>0.10.4</py4j.version>",
                "+    </properties>",
                "-    <profile>",
                "-      <id>spark-2.1</id>",
                "-      <properties>",
                "-        <spark.version>2.1.0</spark.version>",
                "-        <protobuf.version>2.5.0</protobuf.version>",
                "-        <spark.py4j.version>0.10.4</spark.py4j.version>",
                "-        <scala.version>2.11.8</scala.version>",
                "-      </properties>",
                "-    </profile>",
                "+    <dependencies>",
                "-    <profile>",
                "-      <id>spark-2.2</id>",
                "-      <activation>",
                "-        <activeByDefault>true</activeByDefault>",
                "-      </activation>",
                "-      <properties>",
                "-        <spark.version>2.2.0</spark.version>",
                "-        <protobuf.version>2.5.0</protobuf.version>",
                "-        <spark.py4j.version>0.10.4</spark.py4j.version>",
                "-      </properties>",
                "-    </profile>",
                "+        <dependency>",
                "+            <groupId>org.apache.zeppelin</groupId>",
                "+            <artifactId>zeppelin-interpreter</artifactId>",
                "+            <version>${project.version}</version>",
                "+        </dependency>",
                "-    <profile>",
                "-      <id>hadoop-0.23</id>",
                "-      <!-- SPARK-1121: Adds an explicit dependency on Avro to work around a",
                "-        Hadoop 0.23.X issue -->",
                "-      <dependencies>",
                "+        <!--test libraries-->",
                "         <dependency>",
                "-          <groupId>org.apache.avro</groupId>",
                "-          <artifactId>avro</artifactId>",
                "+            <groupId>org.apache.zeppelin</groupId>",
                "+            <artifactId>zeppelin-display</artifactId>",
                "+            <version>${project.version}</version>",
                "+            <scope>test</scope>",
                "         </dependency>",
                "-      </dependencies>",
                "-      <properties>",
                "-        <hadoop.version>0.23.10</hadoop.version>",
                "-      </properties>",
                "-    </profile>",
                "-    <profile>",
                "-      <id>hadoop-1</id>",
                "-      <properties>",
                "-        <hadoop.version>1.0.4</hadoop.version>",
                "-        <avro.mapred.classifier>hadoop1</avro.mapred.classifier>",
                "-        <codehaus.jackson.version>1.8.8</codehaus.jackson.version>",
                "-        <akka.group>org.spark-project.akka</akka.group>",
                "-      </properties>",
                "-    </profile>",
                "+        <dependency>",
                "+            <groupId>org.scalatest</groupId>",
                "+            <artifactId>scalatest_${scala.binary.version}</artifactId>",
                "+            <version>${scalatest.version}</version>",
                "+            <scope>test</scope>",
                "+        </dependency>",
                "-    <profile>",
                "-      <id>hadoop-2.2</id>",
                "-      <properties>",
                "-        <hadoop.version>2.2.0</hadoop.version>",
                "-        <protobuf.version>2.5.0</protobuf.version>",
                "-        <avro.mapred.classifier>hadoop2</avro.mapred.classifier>",
                "-      </properties>",
                "-    </profile>",
                "+        <dependency>",
                "+            <groupId>junit</groupId>",
                "+            <artifactId>junit</artifactId>",
                "+            <scope>test</scope>",
                "+        </dependency>",
                "-    <profile>",
                "-      <id>hadoop-2.3</id>",
                "-      <properties>",
                "-        <hadoop.version>2.3.0</hadoop.version>",
                "-        <protobuf.version>2.5.0</protobuf.version>",
                "-        <jets3t.version>0.9.3</jets3t.version>",
                "-        <avro.mapred.classifier>hadoop2</avro.mapred.classifier>",
                "-      </properties>",
                "-    </profile>",
                "+        <dependency>",
                "+            <groupId>org.datanucleus</groupId>",
                "+            <artifactId>datanucleus-core</artifactId>",
                "+            <version>${datanucleus.core.version}</version>",
                "+            <scope>test</scope>",
                "+        </dependency>",
                "-    <profile>",
                "-      <id>hadoop-2.4</id>",
                "-      <properties>",
                "-        <hadoop.version>2.4.0</hadoop.version>",
                "-        <protobuf.version>2.5.0</protobuf.version>",
                "-        <jets3t.version>0.9.3</jets3t.version>",
                "-        <avro.mapred.classifier>hadoop2</avro.mapred.classifier>",
                "-      </properties>",
                "-    </profile>",
                "+        <dependency>",
                "+            <groupId>org.datanucleus</groupId>",
                "+            <artifactId>datanucleus-api-jdo</artifactId>",
                "+            <version>${datanucleus.apijdo.version}</version>",
                "+            <scope>test</scope>",
                "+        </dependency>",
                "-    <profile>",
                "-      <id>hadoop-2.6</id>",
                "-      <properties>",
                "-        <hadoop.version>2.6.0</hadoop.version>",
                "-        <protobuf.version>2.5.0</protobuf.version>",
                "-        <jets3t.version>0.9.3</jets3t.version>",
                "-        <avro.mapred.classifier>hadoop2</avro.mapred.classifier>",
                "-      </properties>",
                "-    </profile>",
                "+        <dependency>",
                "+            <groupId>org.datanucleus</groupId>",
                "+            <artifactId>datanucleus-rdbms</artifactId>",
                "+            <version>${datanucleus.rdbms.version}</version>",
                "+            <scope>test</scope>",
                "+        </dependency>",
                "-    <profile>",
                "-      <id>hadoop-2.7</id>",
                "-      <properties>",
                "-        <hadoop.version>2.7.2</hadoop.version>",
                "-        <protobuf.version>2.5.0</protobuf.version>",
                "-        <jets3t.version>0.9.0</jets3t.version>",
                "-        <avro.mapred.classifier>hadoop2</avro.mapred.classifier>",
                "-      </properties>",
                "-    </profile>",
                "-  </profiles>",
                "+    </dependencies>",
                "+",
                "+    <build>",
                "+        <plugins>",
                "+            <plugin>",
                "+                <artifactId>maven-enforcer-plugin</artifactId>",
                "+                <executions>",
                "+                    <execution>",
                "+                        <id>enforce</id>",
                "+                        <phase>none</phase>",
                "+                    </execution>",
                "+                </executions>",
                "+            </plugin>",
                "+",
                "+            <plugin>",
                "+                <groupId>org.scalatest</groupId>",
                "+                <artifactId>scalatest-maven-plugin</artifactId>",
                "+                <configuration>",
                "+                    <reportsDirectory>${project.build.directory}/surefire-reports</reportsDirectory>",
                "+                    <junitxml>.</junitxml>",
                "+                    <filereports>WDF TestSuite.txt</filereports>",
                "+                </configuration>",
                "+                <executions>",
                "+                    <execution>",
                "+                        <id>test</id>",
                "+                        <goals>",
                "+                            <goal>test</goal>",
                "+                        </goals>",
                "+                    </execution>",
                "+                </executions>",
                "+            </plugin>",
                "+",
                "+            <plugin>",
                "+                <groupId>net.alchim31.maven</groupId>",
                "+                <artifactId>scala-maven-plugin</artifactId>",
                "+                <version>3.2.2</version>",
                "+                <executions>",
                "+                    <execution>",
                "+                        <id>eclipse-add-source</id>",
                "+                        <goals>",
                "+                            <goal>add-source</goal>",
                "+                        </goals>",
                "+                    </execution>",
                "+                    <execution>",
                "+                        <id>scala-compile-first</id>",
                "+                        <phase>process-resources</phase>",
                "+                        <goals>",
                "+                            <goal>compile</goal>",
                "+                        </goals>",
                "+                    </execution>",
                "+                    <execution>",
                "+                        <id>scala-test-compile-first</id>",
                "+                        <phase>process-test-resources</phase>",
                "+                        <goals>",
                "+                            <goal>testCompile</goal>",
                "+                        </goals>",
                "+                    </execution>",
                "+                </executions>",
                "+                <configuration>",
                "+                    <scalaVersion>${scala.compile.version}</scalaVersion>",
                "+                    <!--<recompileMode>incremental</recompileMode>-->",
                "+                    <!--<useZincServer>true</useZincServer>-->",
                "+                    <args>",
                "+                        <arg>-unchecked</arg>",
                "+                        <arg>-deprecation</arg>",
                "+                        <arg>-feature</arg>",
                "+                    </args>",
                "+                    <jvmArgs>",
                "+                        <jvmArg>-Xms1024m</jvmArg>",
                "+                        <jvmArg>-Xmx1024m</jvmArg>",
                "+                        <jvmArg>-XX:PermSize=${PermGen}</jvmArg>",
                "+                        <jvmArg>-XX:MaxPermSize=${MaxPermGen}</jvmArg>",
                "+                    </jvmArgs>",
                "+                    <javacArgs>",
                "+                        <javacArg>-source</javacArg>",
                "+                        <javacArg>${java.version}</javacArg>",
                "+                        <javacArg>-target</javacArg>",
                "+                        <javacArg>${java.version}</javacArg>",
                "+                        <javacArg>-Xlint:all,-serial,-path,-options</javacArg>",
                "+                    </javacArgs>",
                "+                </configuration>",
                "+            </plugin>",
                "+",
                "+        </plugins>",
                "+    </build>",
                "+",
                "+",
                "+    <profiles>",
                "+        <profile>",
                "+            <id>spark-2.2</id>",
                "+            <activation>",
                "+                <activeByDefault>true</activeByDefault>",
                "+            </activation>",
                "+            <properties>",
                "+                <spark.version>2.2.0</spark.version>",
                "+                <py4j.version>0.10.4</py4j.version>",
                "+            </properties>",
                "+        </profile>",
                "+",
                "+        <profile>",
                "+            <id>spark-2.1</id>",
                "+            <properties>",
                "+                <spark.version>2.1.0</spark.version>",
                "+                <py4j.version>0.10.4</py4j.version>",
                "+            </properties>",
                "+        </profile>",
                "+",
                "+        <profile>",
                "+            <id>spark-2.0</id>",
                "+            <properties>",
                "+                <spark.version>2.0.2</spark.version>",
                "+                <py4j.version>0.10.3</py4j.version>",
                "+            </properties>",
                "+        </profile>",
                "+",
                "+        <profile>",
                "+            <id>spark-1.6</id>",
                "+            <properties>",
                "+                <spark.version>1.6.3</spark.version>",
                "+                <py4j.version>0.9</py4j.version>",
                "+            </properties>",
                "+        </profile>",
                "+",
                "+        <profile>",
                "+            <id>spark-1.5</id>",
                "+            <properties>",
                "+                <spark.version>1.5.2</spark.version>",
                "+                <py4j.version>0.8.2.1</py4j.version>",
                "+            </properties>",
                "+        </profile>",
                "+",
                "+        <profile>",
                "+            <id>spark-1.4</id>",
                "+            <properties>",
                "+                <spark.version>1.4.1</spark.version>",
                "+                <py4j.version>0.8.2.1</py4j.version>",
                "+            </properties>",
                "+        </profile>",
                "+",
                "+    </profiles>",
                " </project>",
                "diff --git a/spark/scala-2.10/pom.xml b/spark/scala-2.10/pom.xml",
                "new file mode 100644",
                "index 000000000..e32e620bf",
                "--- /dev/null",
                "+++ b/spark/scala-2.10/pom.xml",
                "@@ -0,0 +1,41 @@",
                "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "+<!--",
                "+  ~ Licensed to the Apache Software Foundation (ASF) under one or more",
                "+  ~ contributor license agreements.  See the NOTICE file distributed with",
                "+  ~ this work for additional information regarding copyright ownership.",
                "+  ~ The ASF licenses this file to You under the Apache License, Version 2.0",
                "+  ~ (the \"License\"); you may not use this file except in compliance with",
                "+  ~ the License.  You may obtain a copy of the License at",
                "+  ~",
                "+  ~    http://www.apache.org/licenses/LICENSE-2.0",
                "+  ~",
                "+  ~ Unless required by applicable law or agreed to in writing, software",
                "+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+  ~ See the License for the specific language governing permissions and",
                "+  ~ limitations under the License.",
                "+  -->",
                "+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"",
                "+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"",
                "+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">",
                "+  <modelVersion>4.0.0</modelVersion>",
                "+  <groupId>org.apache.zeppelin</groupId>",
                "+  <artifactId>spark-scala-2.10</artifactId>",
                "+  <version>0.9.0-SNAPSHOT</version>",
                "+  <packaging>jar</packaging>",
                "+  <name>Spark Interpreter: Scala_2.10</name>",
                "+",
                "+  <parent>",
                "+    <groupId>org.apache.zeppelin</groupId>",
                "+    <artifactId>spark-scala-parent</artifactId>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "+    <relativePath>../spark-scala-parent/pom.xml</relativePath>",
                "+  </parent>",
                "+",
                "+  <properties>",
                "+    <scala.version>2.10.5</scala.version>",
                "+    <scala.binary.version>2.10</scala.binary.version>",
                "+    <scala.compile.version>${scala.version}</scala.compile.version>",
                "+  </properties>",
                "+",
                "+</project>",
                "diff --git a/spark/scala-2.10/spark-scala-parent b/spark/scala-2.10/spark-scala-parent",
                "new file mode 120000",
                "index 000000000..e5e899e58",
                "--- /dev/null",
                "+++ b/spark/scala-2.10/spark-scala-parent",
                "@@ -0,0 +1 @@",
                "+../spark-scala-parent",
                "\\ No newline at end of file",
                "diff --git a/spark/scala-2.10/src/main/scala/org/apache/zeppelin/spark/SparkScala210Interpreter.scala b/spark/scala-2.10/src/main/scala/org/apache/zeppelin/spark/SparkScala210Interpreter.scala",
                "new file mode 100644",
                "index 000000000..43aa86436",
                "--- /dev/null",
                "+++ b/spark/scala-2.10/src/main/scala/org/apache/zeppelin/spark/SparkScala210Interpreter.scala",
                "@@ -0,0 +1,141 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.spark",
                "+",
                "+import java.io.File",
                "+import java.nio.file.{Files, Paths}",
                "+",
                "+import org.apache.spark.SparkConf",
                "+import org.apache.spark.repl.SparkILoop",
                "+import org.apache.spark.repl.SparkILoop._",
                "+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion",
                "+import org.apache.zeppelin.interpreter.util.InterpreterOutputStream",
                "+import org.apache.zeppelin.interpreter.{InterpreterContext, InterpreterResult}",
                "+import org.slf4j.{Logger, LoggerFactory}",
                "+",
                "+import scala.tools.nsc.Settings",
                "+import scala.tools.nsc.interpreter._",
                "+",
                "+/**",
                "+  * SparkInterpreter for scala-2.10",
                "+  */",
                "+class SparkScala210Interpreter(override val conf: SparkConf,",
                "+                               override val depFiles: java.util.List[String])",
                "+  extends BaseSparkScalaInterpreter(conf, depFiles) {",
                "+",
                "+  lazy override val LOGGER: Logger = LoggerFactory.getLogger(getClass)",
                "+",
                "+  private var sparkILoop: SparkILoop = _",
                "+",
                "+  override val interpreterOutput =",
                "+    new InterpreterOutputStream(LoggerFactory.getLogger(classOf[SparkScala210Interpreter]))",
                "+",
                "+  override def open(): Unit = {",
                "+    super.open()",
                "+    // redirect the output of open to InterpreterOutputStream, so that user can have more",
                "+    // diagnose info in frontend",
                "+    if (InterpreterContext.get() != null) {",
                "+      interpreterOutput.setInterpreterOutput(InterpreterContext.get().out)",
                "+    }",
                "+    val rootDir = conf.get(\"spark.repl.classdir\", System.getProperty(\"java.io.tmpdir\"))",
                "+    val outputDir = Files.createTempDirectory(Paths.get(rootDir), \"spark\").toFile",
                "+    outputDir.deleteOnExit()",
                "+    conf.set(\"spark.repl.class.outputDir\", outputDir.getAbsolutePath)",
                "+    // Only Spark1 requires to create http server, Spark2 removes HttpServer class.",
                "+    startHttpServer(outputDir).foreach { case (server, uri) =>",
                "+      sparkHttpServer = server",
                "+      conf.set(\"spark.repl.class.uri\", uri)",
                "+    }",
                "+",
                "+    val settings = new Settings()",
                "+    settings.embeddedDefaults(Thread.currentThread().getContextClassLoader())",
                "+    settings.usejavacp.value = true",
                "+    settings.classpath.value = getUserJars.mkString(File.pathSeparator)",
                "+    Console.setOut(interpreterOutput)",
                "+    sparkILoop = new SparkILoop(null, new JPrintWriter(Console.out, true))",
                "+",
                "+    setDeclaredField(sparkILoop, \"settings\", settings)",
                "+    callMethod(sparkILoop, \"createInterpreter\")",
                "+    sparkILoop.initializeSynchronous()",
                "+    callMethod(sparkILoop, \"postInitialization\")",
                "+    val reader = callMethod(sparkILoop,",
                "+      \"org$apache$spark$repl$SparkILoop$$chooseReader\",",
                "+      Array(settings.getClass), Array(settings)).asInstanceOf[InteractiveReader]",
                "+    setDeclaredField(sparkILoop, \"org$apache$spark$repl$SparkILoop$$in\", reader)",
                "+    scalaCompleter = reader.completion.completer()",
                "+",
                "+    createSparkContext()",
                "+  }",
                "+",
                "+  override def close(): Unit = {",
                "+    super.close()",
                "+    if (sparkILoop != null) {",
                "+      callMethod(sparkILoop, \"org$apache$spark$repl$SparkILoop$$closeInterpreter\")",
                "+    }",
                "+  }",
                "+",
                "+  protected override def interpret(code: String, context: InterpreterContext): InterpreterResult = {",
                "+    if (context != null) {",
                "+      interpreterOutput.setInterpreterOutput(context.out)",
                "+      context.out.clear()",
                "+    } else {",
                "+      interpreterOutput.setInterpreterOutput(null)",
                "+    }",
                "+",
                "+    Console.withOut(if (context != null) context.out else Console.out) {",
                "+      interpreterOutput.ignoreLeadingNewLinesFromScalaReporter()",
                "+      // add print(\"\") at the end in case the last line is comment which lead to INCOMPLETE",
                "+      val lines = code.split(\"\\\\n\") ++ List(\"print(\\\"\\\")\")",
                "+      var incompleteCode = \"\"",
                "+      var lastStatus: InterpreterResult.Code = null",
                "+      for (line <- lines if !line.trim.isEmpty) {",
                "+        val nextLine = if (incompleteCode != \"\") {",
                "+          incompleteCode + \"\\n\" + line",
                "+        } else {",
                "+          line",
                "+        }",
                "+        scalaInterpret(nextLine) match {",
                "+          case scala.tools.nsc.interpreter.IR.Success =>",
                "+            // continue the next line",
                "+            incompleteCode = \"\"",
                "+            lastStatus = InterpreterResult.Code.SUCCESS",
                "+          case error@scala.tools.nsc.interpreter.IR.Error =>",
                "+            return new InterpreterResult(InterpreterResult.Code.ERROR)",
                "+          case scala.tools.nsc.interpreter.IR.Incomplete =>",
                "+            // put this line into inCompleteCode for the next execution.",
                "+            incompleteCode = incompleteCode + \"\\n\" + line",
                "+            lastStatus = InterpreterResult.Code.INCOMPLETE",
                "+        }",
                "+      }",
                "+      // flush all output before returning result to frontend",
                "+      Console.flush()",
                "+      interpreterOutput.setInterpreterOutput(null)",
                "+      return new InterpreterResult(lastStatus)",
                "+    }",
                "+  }",
                "+",
                "+  def scalaInterpret(code: String): scala.tools.nsc.interpreter.IR.Result =",
                "+    sparkILoop.interpret(code)",
                "+",
                "+  protected def bind(name: String, tpe: String, value: Object, modifier: List[String]): Unit = {",
                "+    sparkILoop.beQuietDuring {",
                "+      sparkILoop.bind(name, tpe, value, modifier)",
                "+    }",
                "+  }",
                "+",
                "+}",
                "diff --git a/spark/scala-2.11/pom.xml b/spark/scala-2.11/pom.xml",
                "new file mode 100644",
                "index 000000000..d9113d107",
                "--- /dev/null",
                "+++ b/spark/scala-2.11/pom.xml",
                "@@ -0,0 +1,41 @@",
                "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "+<!--",
                "+  ~ Licensed to the Apache Software Foundation (ASF) under one or more",
                "+  ~ contributor license agreements.  See the NOTICE file distributed with",
                "+  ~ this work for additional information regarding copyright ownership.",
                "+  ~ The ASF licenses this file to You under the Apache License, Version 2.0",
                "+  ~ (the \"License\"); you may not use this file except in compliance with",
                "+  ~ the License.  You may obtain a copy of the License at",
                "+  ~",
                "+  ~    http://www.apache.org/licenses/LICENSE-2.0",
                "+  ~",
                "+  ~ Unless required by applicable law or agreed to in writing, software",
                "+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+  ~ See the License for the specific language governing permissions and",
                "+  ~ limitations under the License.",
                "+  -->",
                "+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"",
                "+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"",
                "+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">",
                "+  <modelVersion>4.0.0</modelVersion>",
                "+  <groupId>org.apache.zeppelin</groupId>",
                "+  <artifactId>spark-scala-2.11</artifactId>",
                "+  <version>0.9.0-SNAPSHOT</version>",
                "+  <packaging>jar</packaging>",
                "+  <name>Spark Interpreter: Scala_2.11</name>",
                "+",
                "+  <parent>",
                "+    <groupId>org.apache.zeppelin</groupId>",
                "+    <artifactId>spark-scala-parent</artifactId>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "+    <relativePath>../spark-scala-parent/pom.xml</relativePath>",
                "+  </parent>",
                "+",
                "+  <properties>",
                "+    <scala.version>2.11.8</scala.version>",
                "+    <scala.binary.version>2.11</scala.binary.version>",
                "+    <scala.compile.version>${scala.version}</scala.compile.version>",
                "+  </properties>",
                "+",
                "+</project>",
                "diff --git a/spark/scala-2.11/spark-scala-parent b/spark/scala-2.11/spark-scala-parent",
                "new file mode 120000",
                "index 000000000..e5e899e58",
                "--- /dev/null",
                "+++ b/spark/scala-2.11/spark-scala-parent",
                "@@ -0,0 +1 @@",
                "+../spark-scala-parent",
                "\\ No newline at end of file",
                "diff --git a/spark/scala-2.11/src/main/resources/log4j.properties b/spark/scala-2.11/src/main/resources/log4j.properties",
                "new file mode 100644",
                "index 000000000..0c90b21ae",
                "--- /dev/null",
                "+++ b/spark/scala-2.11/src/main/resources/log4j.properties",
                "@@ -0,0 +1,50 @@",
                "+#",
                "+# Licensed to the Apache Software Foundation (ASF) under one or more",
                "+# contributor license agreements.  See the NOTICE file distributed with",
                "+# this work for additional information regarding copyright ownership.",
                "+# The ASF licenses this file to You under the Apache License, Version 2.0",
                "+# (the \"License\"); you may not use this file except in compliance with",
                "+# the License.  You may obtain a copy of the License at",
                "+#",
                "+#    http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing, software",
                "+# distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+# See the License for the specific language governing permissions and",
                "+# limitations under the License.",
                "+#",
                "+",
                "+# Direct log messages to stdout",
                "+log4j.appender.stdout=org.apache.log4j.ConsoleAppender",
                "+log4j.appender.stdout.Target=System.out",
                "+log4j.appender.stdout.layout=org.apache.log4j.PatternLayout",
                "+log4j.appender.stdout.layout.ConversionPattern=%d{ABSOLUTE} %5p %c:%L - %m%n",
                "+#log4j.appender.stdout.layout.ConversionPattern=",
                "+#%5p [%t] (%F:%L) - %m%n",
                "+#%-4r [%t] %-5p %c %x - %m%n",
                "+#",
                "+",
                "+# Root logger option",
                "+log4j.rootLogger=INFO, stdout",
                "+ ",
                "+#mute some noisy guys",
                "+log4j.logger.org.apache.hadoop.mapred=WARN",
                "+log4j.logger.org.apache.hadoop.hive.ql=WARN",
                "+log4j.logger.org.apache.hadoop.hive.metastore=WARN",
                "+log4j.logger.org.apache.haadoop.hive.service.HiveServer=WARN",
                "+log4j.logger.org.apache.zeppelin.scheduler=WARN",
                "+",
                "+log4j.logger.org.quartz=WARN",
                "+log4j.logger.DataNucleus=WARN",
                "+log4j.logger.DataNucleus.MetaData=ERROR",
                "+log4j.logger.DataNucleus.Datastore=ERROR",
                "+",
                "+# Log all JDBC parameters",
                "+log4j.logger.org.hibernate.type=ALL",
                "+",
                "+log4j.logger.org.apache.zeppelin.interpreter=DEBUG",
                "+log4j.logger.org.apache.zeppelin.spark=DEBUG",
                "+",
                "+",
                "+log4j.logger.org.apache.spark.repl.Main=INFO",
                "diff --git a/spark/scala-2.11/src/main/scala/org/apache/zeppelin/spark/SparkScala211Interpreter.scala b/spark/scala-2.11/src/main/scala/org/apache/zeppelin/spark/SparkScala211Interpreter.scala",
                "new file mode 100644",
                "index 000000000..e1452606c",
                "--- /dev/null",
                "+++ b/spark/scala-2.11/src/main/scala/org/apache/zeppelin/spark/SparkScala211Interpreter.scala",
                "@@ -0,0 +1,140 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.spark",
                "+",
                "+import java.io.{BufferedReader, File}",
                "+import java.net.URLClassLoader",
                "+import java.nio.file.{Files, Paths}",
                "+",
                "+import org.apache.spark.SparkConf",
                "+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion",
                "+import org.apache.zeppelin.interpreter.util.InterpreterOutputStream",
                "+import org.apache.zeppelin.interpreter.{InterpreterContext, InterpreterResult}",
                "+import org.slf4j.LoggerFactory",
                "+import org.slf4j.Logger",
                "+",
                "+import scala.tools.nsc.Settings",
                "+import scala.tools.nsc.interpreter._",
                "+",
                "+/**",
                "+  * SparkInterpreter for scala-2.11",
                "+  */",
                "+class SparkScala211Interpreter(override val conf: SparkConf,",
                "+                               override val depFiles: java.util.List[String])",
                "+  extends BaseSparkScalaInterpreter(conf, depFiles) {",
                "+",
                "+  lazy override val LOGGER: Logger = LoggerFactory.getLogger(getClass)",
                "+",
                "+  private var sparkILoop: ILoop = _",
                "+",
                "+  override val interpreterOutput = new InterpreterOutputStream(LOGGER)",
                "+",
                "+  override def open(): Unit = {",
                "+    super.open()",
                "+    if (conf.get(\"spark.master\", \"local\") == \"yarn-client\") {",
                "+      System.setProperty(\"SPARK_YARN_MODE\", \"true\")",
                "+    }",
                "+    // Only Spark1 requires to create http server, Spark2 removes HttpServer class.",
                "+    val rootDir = conf.get(\"spark.repl.classdir\", System.getProperty(\"java.io.tmpdir\"))",
                "+    val outputDir = Files.createTempDirectory(Paths.get(rootDir), \"spark\").toFile",
                "+    outputDir.deleteOnExit()",
                "+    conf.set(\"spark.repl.class.outputDir\", outputDir.getAbsolutePath)",
                "+    startHttpServer(outputDir).foreach { case (server, uri) =>",
                "+      sparkHttpServer = server",
                "+      conf.set(\"spark.repl.class.uri\", uri)",
                "+    }",
                "+",
                "+    val settings = new Settings()",
                "+    settings.processArguments(List(\"-Yrepl-class-based\",",
                "+      \"-Yrepl-outdir\", s\"${outputDir.getAbsolutePath}\"), true)",
                "+    settings.embeddedDefaults(Thread.currentThread().getContextClassLoader())",
                "+    settings.usejavacp.value = true",
                "+    settings.classpath.value = getUserJars.mkString(File.pathSeparator)",
                "+",
                "+    val replOut = new JPrintWriter(interpreterOutput, true)",
                "+    sparkILoop = new ILoop(None, replOut)",
                "+    sparkILoop.settings = settings",
                "+    sparkILoop.createInterpreter()",
                "+",
                "+    val in0 = getField(sparkILoop, \"scala$tools$nsc$interpreter$ILoop$$in0\").asInstanceOf[Option[BufferedReader]]",
                "+    val reader = in0.fold(sparkILoop.chooseReader(settings))(r => SimpleReader(r, replOut, interactive = true))",
                "+",
                "+    sparkILoop.in = reader",
                "+    sparkILoop.initializeSynchronous()",
                "+    callMethod(sparkILoop, \"scala$tools$nsc$interpreter$ILoop$$loopPostInit\")",
                "+    this.scalaCompleter = reader.completion.completer()",
                "+",
                "+    createSparkContext()",
                "+  }",
                "+",
                "+  protected def bind(name: String, tpe: String, value: Object, modifier: List[String]): Unit = {",
                "+    sparkILoop.beQuietDuring {",
                "+      sparkILoop.bind(name, tpe, value, modifier)",
                "+    }",
                "+  }",
                "+",
                "+",
                "+  override def close(): Unit = {",
                "+    super.close()",
                "+    if (sparkILoop != null) {",
                "+      sparkILoop.closeInterpreter()",
                "+    }",
                "+  }",
                "+",
                "+  protected override def interpret(code: String, context: InterpreterContext): InterpreterResult = {",
                "+    if (context != null) {",
                "+      interpreterOutput.setInterpreterOutput(context.out)",
                "+      context.out.clear()",
                "+    }",
                "+",
                "+    Console.withOut(if (context != null) context.out else Console.out) {",
                "+      interpreterOutput.ignoreLeadingNewLinesFromScalaReporter()",
                "+      // add print(\"\") at the end in case the last line is comment which lead to INCOMPLETE",
                "+      val lines = code.split(\"\\\\n\") ++ List(\"print(\\\"\\\")\")",
                "+      var incompleteCode = \"\"",
                "+      var lastStatus: InterpreterResult.Code = null",
                "+      for (line <- lines if !line.trim.isEmpty) {",
                "+        val nextLine = if (incompleteCode != \"\") {",
                "+          incompleteCode + \"\\n\" + line",
                "+        } else {",
                "+          line",
                "+        }",
                "+        scalaInterpret(nextLine) match {",
                "+          case scala.tools.nsc.interpreter.IR.Success =>",
                "+            // continue the next line",
                "+            incompleteCode = \"\"",
                "+            lastStatus = InterpreterResult.Code.SUCCESS",
                "+          case error@scala.tools.nsc.interpreter.IR.Error =>",
                "+            return new InterpreterResult(InterpreterResult.Code.ERROR)",
                "+          case scala.tools.nsc.interpreter.IR.Incomplete =>",
                "+            // put this line into inCompleteCode for the next execution.",
                "+            incompleteCode = incompleteCode + \"\\n\" + line",
                "+            lastStatus = InterpreterResult.Code.INCOMPLETE",
                "+        }",
                "+      }",
                "+      // flush all output before returning result to frontend",
                "+      Console.flush()",
                "+      interpreterOutput.setInterpreterOutput(null)",
                "+      return new InterpreterResult(lastStatus)",
                "+    }",
                "+  }",
                "+",
                "+  def scalaInterpret(code: String): scala.tools.nsc.interpreter.IR.Result =",
                "+    sparkILoop.interpret(code)",
                "+",
                "+}",
                "diff --git a/spark/spark-dependencies/pom.xml b/spark/spark-dependencies/pom.xml",
                "new file mode 100644",
                "index 000000000..7643dc9d8",
                "--- /dev/null",
                "+++ b/spark/spark-dependencies/pom.xml",
                "@@ -0,0 +1,591 @@",
                "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "+<!--",
                "+  ~ Licensed to the Apache Software Foundation (ASF) under one or more",
                "+  ~ contributor license agreements.  See the NOTICE file distributed with",
                "+  ~ this work for additional information regarding copyright ownership.",
                "+  ~ The ASF licenses this file to You under the Apache License, Version 2.0",
                "+  ~ (the \"License\"); you may not use this file except in compliance with",
                "+  ~ the License.  You may obtain a copy of the License at",
                "+  ~",
                "+  ~    http://www.apache.org/licenses/LICENSE-2.0",
                "+  ~",
                "+  ~ Unless required by applicable law or agreed to in writing, software",
                "+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+  ~ See the License for the specific language governing permissions and",
                "+  ~ limitations under the License.",
                "+  -->",
                "+",
                "+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"",
                "+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">",
                "+  <modelVersion>4.0.0</modelVersion>",
                "+",
                "+  <parent>",
                "+    <artifactId>spark-parent</artifactId>",
                "+    <groupId>org.apache.zeppelin</groupId>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "+    <relativePath>..</relativePath>",
                "+  </parent>",
                "+",
                "+  <groupId>org.apache.zeppelin</groupId>",
                "+  <artifactId>zeppelin-spark-dependencies_2.10</artifactId>",
                "+  <packaging>jar</packaging>",
                "+  <version>0.9.0-SNAPSHOT</version>",
                "+  <name>Zeppelin: Spark dependencies</name>",
                "+  <description>Zeppelin spark support</description>",
                "+",
                "+  <properties>",
                "+    <!-- library version defined in this section brought from spark 1.4.1 and it's dependency.",
                "+         Therefore changing only spark.version is not going to be enough when this module",
                "+         support new version of spark to make the new version as default supported version.",
                "+",
                "+         Each profile (spark-2.0, spark-1.6, etc) will overrides necessary dependency version.",
                "+         So we'll make one of those profile 'activateByDefault' to make it default supported version",
                "+         instead of changing spark.version in this section.",
                "+    -->",
                "+",
                "+    <hadoop.version>2.3.0</hadoop.version>",
                "+    <yarn.version>${hadoop.version}</yarn.version>",
                "+    <avro.version>1.7.7</avro.version>",
                "+    <avro.mapred.classifier/>",
                "+    <jets3t.version>0.7.1</jets3t.version>",
                "+    <protobuf.version>2.4.1</protobuf.version>",
                "+",
                "+    <akka.group>org.spark-project.akka</akka.group>",
                "+    <akka.version>2.3.4-spark</akka.version>",
                "+",
                "+    <spark.archive>spark-${spark.version}</spark.archive>",
                "+    <spark.src.download.url>",
                "+      http://d3kbcqa49mib13.cloudfront.net/${spark.archive}.tgz",
                "+    </spark.src.download.url>",
                "+    <spark.bin.download.url>",
                "+      http://d3kbcqa49mib13.cloudfront.net/${spark.archive}-bin-without-hadoop.tgz",
                "+    </spark.bin.download.url>",
                "+",
                "+    <!--plugin versions-->",
                "+    <plugin.shade.version>2.3</plugin.shade.version>",
                "+  </properties>",
                "+",
                "+  <dependencyManagement>",
                "+    <dependencies>",
                "+      <dependency>",
                "+        <groupId>org.apache.avro</groupId>",
                "+        <artifactId>avro</artifactId>",
                "+        <version>${avro.version}</version>",
                "+      </dependency>",
                "+      <dependency>",
                "+        <groupId>org.apache.avro</groupId>",
                "+        <artifactId>avro-ipc</artifactId>",
                "+        <version>${avro.version}</version>",
                "+        <exclusions>",
                "+          <exclusion>",
                "+            <groupId>io.netty</groupId>",
                "+            <artifactId>netty</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>org.mortbay.jetty</groupId>",
                "+            <artifactId>jetty</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>org.mortbay.jetty</groupId>",
                "+            <artifactId>jetty-util</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>org.mortbay.jetty</groupId>",
                "+            <artifactId>servlet-api</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>org.apache.velocity</groupId>",
                "+            <artifactId>velocity</artifactId>",
                "+          </exclusion>",
                "+        </exclusions>",
                "+      </dependency>",
                "+      <dependency>",
                "+        <groupId>org.apache.avro</groupId>",
                "+        <artifactId>avro-mapred</artifactId>",
                "+        <version>${avro.version}</version>",
                "+        <classifier>${avro.mapred.classifier}</classifier>",
                "+        <exclusions>",
                "+          <exclusion>",
                "+            <groupId>io.netty</groupId>",
                "+            <artifactId>netty</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>org.mortbay.jetty</groupId>",
                "+            <artifactId>jetty</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>org.mortbay.jetty</groupId>",
                "+            <artifactId>jetty-util</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>org.mortbay.jetty</groupId>",
                "+            <artifactId>servlet-api</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>org.apache.velocity</groupId>",
                "+            <artifactId>velocity</artifactId>",
                "+          </exclusion>",
                "+        </exclusions>",
                "+      </dependency>",
                "+",
                "+      <!-- See SPARK-1556 for info on this dependency: -->",
                "+      <dependency>",
                "+        <groupId>net.java.dev.jets3t</groupId>",
                "+        <artifactId>jets3t</artifactId>",
                "+        <version>${jets3t.version}</version>",
                "+        <scope>runtime</scope>",
                "+        <exclusions>",
                "+          <exclusion>",
                "+            <groupId>commons-logging</groupId>",
                "+            <artifactId>commons-logging</artifactId>",
                "+          </exclusion>",
                "+        </exclusions>",
                "+      </dependency>",
                "+      <dependency>",
                "+        <groupId>org.apache.hadoop</groupId>",
                "+        <artifactId>hadoop-yarn-api</artifactId>",
                "+        <version>${yarn.version}</version>",
                "+        <exclusions>",
                "+          <exclusion>",
                "+            <groupId>asm</groupId>",
                "+            <artifactId>asm</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>org.ow2.asm</groupId>",
                "+            <artifactId>asm</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>org.jboss.netty</groupId>",
                "+            <artifactId>netty</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>commons-logging</groupId>",
                "+            <artifactId>commons-logging</artifactId>",
                "+          </exclusion>",
                "+        </exclusions>",
                "+      </dependency>",
                "+",
                "+      <dependency>",
                "+        <groupId>org.apache.hadoop</groupId>",
                "+        <artifactId>hadoop-yarn-common</artifactId>",
                "+        <version>${yarn.version}</version>",
                "+        <exclusions>",
                "+          <exclusion>",
                "+            <groupId>asm</groupId>",
                "+            <artifactId>asm</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>org.ow2.asm</groupId>",
                "+            <artifactId>asm</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>org.jboss.netty</groupId>",
                "+            <artifactId>netty</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>javax.servlet</groupId>",
                "+            <artifactId>servlet-api</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>commons-logging</groupId>",
                "+            <artifactId>commons-logging</artifactId>",
                "+          </exclusion>",
                "+        </exclusions>",
                "+      </dependency>",
                "+",
                "+      <dependency>",
                "+        <groupId>org.apache.hadoop</groupId>",
                "+        <artifactId>hadoop-yarn-server-web-proxy</artifactId>",
                "+        <version>${yarn.version}</version>",
                "+        <exclusions>",
                "+          <exclusion>",
                "+            <groupId>asm</groupId>",
                "+            <artifactId>asm</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>org.ow2.asm</groupId>",
                "+            <artifactId>asm</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>org.jboss.netty</groupId>",
                "+            <artifactId>netty</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>javax.servlet</groupId>",
                "+            <artifactId>servlet-api</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>commons-logging</groupId>",
                "+            <artifactId>commons-logging</artifactId>",
                "+          </exclusion>",
                "+        </exclusions>",
                "+      </dependency>",
                "+",
                "+      <dependency>",
                "+        <groupId>org.apache.hadoop</groupId>",
                "+        <artifactId>hadoop-yarn-client</artifactId>",
                "+        <version>${yarn.version}</version>",
                "+        <exclusions>",
                "+          <exclusion>",
                "+            <groupId>asm</groupId>",
                "+            <artifactId>asm</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>org.ow2.asm</groupId>",
                "+            <artifactId>asm</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>org.jboss.netty</groupId>",
                "+            <artifactId>netty</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>javax.servlet</groupId>",
                "+            <artifactId>servlet-api</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>commons-logging</groupId>",
                "+            <artifactId>commons-logging</artifactId>",
                "+          </exclusion>",
                "+        </exclusions>",
                "+      </dependency>",
                "+    </dependencies>",
                "+  </dependencyManagement>",
                "+",
                "+  <dependencies>",
                "+    <!-- Spark -->",
                "+    <dependency>",
                "+      <groupId>org.apache.spark</groupId>",
                "+      <artifactId>spark-core_${scala.binary.version}</artifactId>",
                "+      <version>${spark.version}</version>",
                "+      <exclusions>",
                "+        <exclusion>",
                "+          <groupId>org.apache.hadoop</groupId>",
                "+          <artifactId>hadoop-client</artifactId>",
                "+        </exclusion>",
                "+      </exclusions>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.apache.spark</groupId>",
                "+      <artifactId>spark-repl_${scala.binary.version}</artifactId>",
                "+      <version>${spark.version}</version>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.apache.spark</groupId>",
                "+      <artifactId>spark-sql_${scala.binary.version}</artifactId>",
                "+      <version>${spark.version}</version>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.apache.spark</groupId>",
                "+      <artifactId>spark-hive_${scala.binary.version}</artifactId>",
                "+      <version>${spark.version}</version>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.apache.spark</groupId>",
                "+      <artifactId>spark-streaming_${scala.binary.version}</artifactId>",
                "+      <version>${spark.version}</version>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.apache.spark</groupId>",
                "+      <artifactId>spark-catalyst_${scala.binary.version}</artifactId>",
                "+      <version>${spark.version}</version>",
                "+    </dependency>",
                "+",
                "+    <!-- hadoop -->",
                "+    <dependency>",
                "+      <groupId>org.apache.hadoop</groupId>",
                "+      <artifactId>hadoop-client</artifactId>",
                "+      <version>${hadoop.version}</version>",
                "+    </dependency>",
                "+",
                "+",
                "+    <dependency>",
                "+      <groupId>com.google.protobuf</groupId>",
                "+      <artifactId>protobuf-java</artifactId>",
                "+      <version>${protobuf.version}</version>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>${akka.group}</groupId>",
                "+      <artifactId>akka-actor_${scala.binary.version}</artifactId>",
                "+      <version>${akka.version}</version>",
                "+    </dependency>",
                "+    <dependency>",
                "+      <groupId>${akka.group}</groupId>",
                "+      <artifactId>akka-remote_${scala.binary.version}</artifactId>",
                "+      <version>${akka.version}</version>",
                "+    </dependency>",
                "+    <dependency>",
                "+      <groupId>${akka.group}</groupId>",
                "+      <artifactId>akka-slf4j_${scala.binary.version}</artifactId>",
                "+      <version>${akka.version}</version>",
                "+    </dependency>",
                "+    <dependency>",
                "+      <groupId>${akka.group}</groupId>",
                "+      <artifactId>akka-testkit_${scala.binary.version}</artifactId>",
                "+      <version>${akka.version}</version>",
                "+    </dependency>",
                "+    <dependency>",
                "+      <groupId>${akka.group}</groupId>",
                "+      <artifactId>akka-zeromq_${scala.binary.version}</artifactId>",
                "+      <version>${akka.version}</version>",
                "+      <exclusions>",
                "+        <exclusion>",
                "+          <groupId>${akka.group}</groupId>",
                "+          <artifactId>akka-actor_${scala.binary.version}</artifactId>",
                "+        </exclusion>",
                "+      </exclusions>",
                "+    </dependency>",
                "+",
                "+    <!-- yarn (not supported for Spark v1.5.0 or higher) -->",
                "+    <dependency>",
                "+      <groupId>org.apache.spark</groupId>",
                "+      <artifactId>spark-yarn_${scala.binary.version}</artifactId>",
                "+      <version>${spark.version}</version>",
                "+    </dependency>",
                "+",
                "+    <dependency>",
                "+      <groupId>org.apache.hadoop</groupId>",
                "+      <artifactId>hadoop-yarn-api</artifactId>",
                "+      <version>${yarn.version}</version>",
                "+    </dependency>",
                "+",
                "+  </dependencies>",
                "+",
                "+  <build>",
                "+    <plugins>",
                "+      <plugin>",
                "+        <artifactId>maven-enforcer-plugin</artifactId>",
                "+        <executions>",
                "+          <execution>",
                "+            <id>enforce</id>",
                "+            <phase>none</phase>",
                "+          </execution>",
                "+        </executions>",
                "+      </plugin>",
                "+",
                "+      <plugin>",
                "+        <groupId>org.apache.maven.plugins</groupId>",
                "+        <artifactId>maven-surefire-plugin</artifactId>",
                "+        <configuration>",
                "+          <forkCount>1</forkCount>",
                "+          <reuseForks>false</reuseForks>",
                "+          <argLine>-Xmx1024m -XX:MaxPermSize=256m</argLine>",
                "+        </configuration>",
                "+      </plugin>",
                "+",
                "+      <plugin>",
                "+        <groupId>com.googlecode.maven-download-plugin</groupId>",
                "+        <artifactId>download-maven-plugin</artifactId>",
                "+        <version>${plugin.download.version}</version>",
                "+      </plugin>",
                "+",
                "+      <plugin>",
                "+        <groupId>org.apache.maven.plugins</groupId>",
                "+        <artifactId>maven-shade-plugin</artifactId>",
                "+        <version>${plugin.shade.version}</version>",
                "+        <configuration>",
                "+          <filters>",
                "+            <filter>",
                "+              <artifact>*:*</artifact>",
                "+              <excludes>",
                "+                <exclude>org/datanucleus/**</exclude>",
                "+                <exclude>META-INF/*.SF</exclude>",
                "+                <exclude>META-INF/*.DSA</exclude>",
                "+                <exclude>META-INF/*.RSA</exclude>",
                "+              </excludes>",
                "+            </filter>",
                "+          </filters>",
                "+          <transformers>",
                "+            <transformer implementation=\"org.apache.maven.plugins.shade.resource.ServicesResourceTransformer\"/>",
                "+            <transformer implementation=\"org.apache.maven.plugins.shade.resource.AppendingTransformer\">",
                "+              <resource>reference.conf</resource>",
                "+            </transformer>",
                "+          </transformers>",
                "+        </configuration>",
                "+        <executions>",
                "+          <execution>",
                "+            <phase>package</phase>",
                "+            <goals>",
                "+              <goal>shade</goal>",
                "+            </goals>",
                "+          </execution>",
                "+        </executions>",
                "+      </plugin>",
                "+",
                "+      <!-- Deploy datanucleus jars to the interpreter/spark directory -->",
                "+      <plugin>",
                "+        <groupId>org.apache.maven.plugins</groupId>",
                "+        <artifactId>maven-dependency-plugin</artifactId>",
                "+        <executions>",
                "+          <execution>",
                "+            <id>copy-interpreter-dependencies</id>",
                "+            <phase>package</phase>",
                "+            <goals>",
                "+              <goal>copy-dependencies</goal>",
                "+            </goals>",
                "+            <configuration>",
                "+              <skip>true</skip>",
                "+            </configuration>",
                "+          </execution>",
                "+",
                "+          <execution>",
                "+            <id>copy-spark-interpreter-dependencies</id>",
                "+            <phase>package</phase>",
                "+            <goals>",
                "+              <goal>copy-dependencies</goal>",
                "+            </goals>",
                "+            <configuration>",
                "+              <outputDirectory>${project.build.directory}/../../../interpreter/spark/dep</outputDirectory>",
                "+              <overWriteReleases>false</overWriteReleases>",
                "+              <overWriteSnapshots>false</overWriteSnapshots>",
                "+              <overWriteIfNewer>true</overWriteIfNewer>",
                "+              <includeGroupIds>org.datanucleus</includeGroupIds>",
                "+            </configuration>",
                "+          </execution>",
                "+          <execution>",
                "+            <id>copy-artifact</id>",
                "+            <phase>package</phase>",
                "+            <goals>",
                "+              <goal>copy</goal>",
                "+            </goals>",
                "+            <configuration>",
                "+              <outputDirectory>${project.build.directory}/../../../interpreter/spark/dep</outputDirectory>",
                "+              <overWriteReleases>false</overWriteReleases>",
                "+              <overWriteSnapshots>false</overWriteSnapshots>",
                "+              <overWriteIfNewer>true</overWriteIfNewer>",
                "+              <artifactItems>",
                "+                <artifactItem>",
                "+                  <groupId>${project.groupId}</groupId>",
                "+                  <artifactId>${project.artifactId}</artifactId>",
                "+                  <version>${project.version}</version>",
                "+                  <type>${project.packaging}</type>",
                "+                </artifactItem>",
                "+              </artifactItems>",
                "+            </configuration>",
                "+          </execution>",
                "+        </executions>",
                "+      </plugin>",
                "+",
                "+      <plugin>",
                "+        <artifactId>maven-resources-plugin</artifactId>",
                "+        <executions>",
                "+          <execution>",
                "+            <id>copy-interpreter-setting</id>",
                "+            <phase>none</phase>",
                "+            <configuration>",
                "+              <skip>true</skip>",
                "+            </configuration>",
                "+          </execution>",
                "+        </executions>",
                "+      </plugin>",
                "+",
                "+      <!-- include pyspark by default -->",
                "+      <plugin>",
                "+        <groupId>com.googlecode.maven-download-plugin</groupId>",
                "+        <artifactId>download-maven-plugin</artifactId>",
                "+        <executions>",
                "+          <execution>",
                "+            <id>download-pyspark-files</id>",
                "+            <phase>validate</phase>",
                "+            <goals>",
                "+              <goal>wget</goal>",
                "+            </goals>",
                "+            <configuration>",
                "+              <readTimeOut>60000</readTimeOut>",
                "+              <retries>5</retries>",
                "+              <unpack>true</unpack>",
                "+              <url>${spark.src.download.url}</url>",
                "+              <outputDirectory>${project.build.directory}</outputDirectory>",
                "+            </configuration>",
                "+          </execution>",
                "+        </executions>",
                "+      </plugin>",
                "+",
                "+      <plugin>",
                "+        <artifactId>maven-clean-plugin</artifactId>",
                "+        <configuration>",
                "+          <filesets>",
                "+            <fileset>",
                "+              <directory>${basedir}/../python/build</directory>",
                "+            </fileset>",
                "+          </filesets>",
                "+        </configuration>",
                "+      </plugin>",
                "+",
                "+      <plugin>",
                "+        <groupId>org.apache.maven.plugins</groupId>",
                "+        <artifactId>maven-antrun-plugin</artifactId>",
                "+        <executions>",
                "+          <execution>",
                "+            <id>zip-pyspark-files</id>",
                "+            <phase>generate-resources</phase>",
                "+            <goals>",
                "+              <goal>run</goal>",
                "+            </goals>",
                "+            <configuration>",
                "+              <target>",
                "+                <delete dir=\"../../interpreter/spark/pyspark\"/>",
                "+                <copy todir=\"../../interpreter/spark/pyspark\"",
                "+                      file=\"${project.build.directory}/${spark.archive}/python/lib/py4j-${py4j.version}-src.zip\"/>",
                "+                <zip destfile=\"${project.build.directory}/../../../interpreter/spark/pyspark/pyspark.zip\"",
                "+                     basedir=\"${project.build.directory}/${spark.archive}/python\"",
                "+                     includes=\"pyspark/*.py,pyspark/**/*.py\"/>",
                "+              </target>",
                "+            </configuration>",
                "+          </execution>",
                "+        </executions>",
                "+      </plugin>",
                "+",
                "+      <!-- include sparkr by default -->",
                "+      <plugin>",
                "+        <groupId>com.googlecode.maven-download-plugin</groupId>",
                "+        <artifactId>download-maven-plugin</artifactId>",
                "+        <executions>",
                "+          <execution>",
                "+            <id>download-sparkr-files</id>",
                "+            <phase>validate</phase>",
                "+            <goals>",
                "+              <goal>wget</goal>",
                "+            </goals>",
                "+            <configuration>",
                "+              <readTimeOut>60000</readTimeOut>",
                "+              <retries>5</retries>",
                "+              <url>${spark.bin.download.url}</url>",
                "+              <unpack>true</unpack>",
                "+              <outputDirectory>${project.build.directory}</outputDirectory>",
                "+            </configuration>",
                "+          </execution>",
                "+        </executions>",
                "+      </plugin>",
                "+      <plugin>",
                "+        <artifactId>maven-resources-plugin</artifactId>",
                "+        <version>2.7</version>",
                "+        <executions>",
                "+          <execution>",
                "+            <id>copy-sparkr-files</id>",
                "+            <phase>generate-resources</phase>",
                "+            <goals>",
                "+              <goal>copy-resources</goal>",
                "+            </goals>",
                "+            <configuration>",
                "+              <outputDirectory>${project.build.directory}/../../../interpreter/spark/R/lib</outputDirectory>",
                "+              <resources>",
                "+                <resource>",
                "+                  <directory>",
                "+                    ${project.build.directory}/spark-${spark.version}-bin-without-hadoop/R/lib",
                "+                  </directory>",
                "+                </resource>",
                "+              </resources>",
                "+            </configuration>",
                "+          </execution>",
                "+        </executions>",
                "+      </plugin>",
                "+    </plugins>",
                "+  </build>",
                "+</project>",
                "diff --git a/spark/spark-scala-parent/pom.xml b/spark/spark-scala-parent/pom.xml",
                "new file mode 100644",
                "index 000000000..830fa59a6",
                "--- /dev/null",
                "+++ b/spark/spark-scala-parent/pom.xml",
                "@@ -0,0 +1,172 @@",
                "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "+<!--",
                "+  ~ Licensed to the Apache Software Foundation (ASF) under one or more",
                "+  ~ contributor license agreements.  See the NOTICE file distributed with",
                "+  ~ this work for additional information regarding copyright ownership.",
                "+  ~ The ASF licenses this file to You under the Apache License, Version 2.0",
                "+  ~ (the \"License\"); you may not use this file except in compliance with",
                "+  ~ the License.  You may obtain a copy of the License at",
                "+  ~",
                "+  ~    http://www.apache.org/licenses/LICENSE-2.0",
                "+  ~",
                "+  ~ Unless required by applicable law or agreed to in writing, software",
                "+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+  ~ See the License for the specific language governing permissions and",
                "+  ~ limitations under the License.",
                "+  -->",
                "+",
                "+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"",
                "+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"",
                "+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">",
                "+",
                "+    <parent>",
                "+        <artifactId>spark-parent</artifactId>",
                "+        <groupId>org.apache.zeppelin</groupId>",
                "+        <version>0.9.0-SNAPSHOT</version>",
                "+        <relativePath>../pom.xml</relativePath>",
                "+    </parent>",
                "+",
                "+    <modelVersion>4.0.0</modelVersion>",
                "+    <groupId>org.apache.zeppelin</groupId>",
                "+    <artifactId>spark-scala-parent</artifactId>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "+    <packaging>pom</packaging>",
                "+",
                "+    <dependencies>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.zeppelin</groupId>",
                "+            <artifactId>zeppelin-interpreter</artifactId>",
                "+            <version>${project.version}</version>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.spark</groupId>",
                "+            <artifactId>spark-repl_${scala.binary.version}</artifactId>",
                "+            <version>${spark.version}</version>",
                "+            <scope>provided</scope>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.spark</groupId>",
                "+            <artifactId>spark-core_${scala.binary.version}</artifactId>",
                "+            <version>${spark.version}</version>",
                "+            <scope>provided</scope>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.spark</groupId>",
                "+            <artifactId>spark-hive_${scala.binary.version}</artifactId>",
                "+            <version>${spark.version}</version>",
                "+            <scope>provided</scope>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.scala-lang</groupId>",
                "+            <artifactId>scala-compiler</artifactId>",
                "+            <version>${scala.version}</version>",
                "+            <scope>provided</scope>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.scala-lang</groupId>",
                "+            <artifactId>scala-library</artifactId>",
                "+            <version>${scala.version}</version>",
                "+            <scope>provided</scope>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.scala-lang</groupId>",
                "+            <artifactId>scala-reflect</artifactId>",
                "+            <version>${scala.version}</version>",
                "+            <scope>provided</scope>",
                "+        </dependency>",
                "+",
                "+    </dependencies>",
                "+",
                "+    <build>",
                "+        <plugins>",
                "+            <plugin>",
                "+                <groupId>org.codehaus.mojo</groupId>",
                "+                <artifactId>build-helper-maven-plugin</artifactId>",
                "+                <executions>",
                "+                    <execution>",
                "+                        <id>add-scala-sources</id>",
                "+                        <phase>generate-sources</phase>",
                "+                        <goals>",
                "+                            <goal>add-source</goal>",
                "+                        </goals>",
                "+                        <configuration>",
                "+                            <sources>",
                "+                                <source>${project.basedir}/../spark-scala-parent/src/main/scala</source>",
                "+                            </sources>",
                "+                        </configuration>",
                "+                    </execution>",
                "+                    <execution>",
                "+                        <id>add-scala-test-sources</id>",
                "+                        <phase>generate-test-sources</phase>",
                "+                        <goals>",
                "+                            <goal>add-test-source</goal>",
                "+                        </goals>",
                "+                        <configuration>",
                "+                            <sources>",
                "+                                <source>${project.basedir}/../spark-scala-parent/src/test/scala</source>",
                "+                            </sources>",
                "+                        </configuration>",
                "+                    </execution>",
                "+                    <execution>",
                "+                        <id>add-resource</id>",
                "+                        <phase>generate-resources</phase>",
                "+                        <goals>",
                "+                            <goal>add-resource</goal>",
                "+                        </goals>",
                "+                        <configuration>",
                "+                            <resources>",
                "+                                <resource>",
                "+                                    <directory>${project.basedir}/../spark-scala-parent/src/main/resources</directory>",
                "+                                </resource>",
                "+                            </resources>",
                "+                        </configuration>",
                "+                    </execution>",
                "+                    <execution>",
                "+                        <id>add-test-resource</id>",
                "+                        <phase>generate-test-resources</phase>",
                "+                        <goals>",
                "+                            <goal>add-test-resource</goal>",
                "+                        </goals>",
                "+                        <configuration>",
                "+                            <resources>",
                "+                                <resource>",
                "+                                    <directory>${project.basedir}/../spark-scala-parent/src/test/resources</directory>",
                "+                                </resource>",
                "+                            </resources>",
                "+                        </configuration>",
                "+                    </execution>",
                "+                </executions>",
                "+            </plugin>",
                "+",
                "+            <plugin>",
                "+                <artifactId>maven-dependency-plugin</artifactId>",
                "+                <configuration>",
                "+                    <skip>true</skip>",
                "+                </configuration>",
                "+            </plugin>",
                "+",
                "+            <plugin>",
                "+                <artifactId>maven-resources-plugin</artifactId>",
                "+                <executions>",
                "+                    <execution>",
                "+                    <id>copy-interpreter-setting</id>",
                "+                    <phase>none</phase>",
                "+                    <configuration>",
                "+                        <skip>true</skip>",
                "+                    </configuration>",
                "+                    </execution>",
                "+                </executions>",
                "+            </plugin>",
                "+",
                "+        </plugins>",
                "+    </build>",
                "+",
                "+</project>",
                "\\ No newline at end of file",
                "diff --git a/spark/spark-scala-parent/src/main/scala/org/apache/zeppelin/spark/BaseSparkScalaInterpreter.scala b/spark/spark-scala-parent/src/main/scala/org/apache/zeppelin/spark/BaseSparkScalaInterpreter.scala",
                "new file mode 100644",
                "index 000000000..3ef4fe71e",
                "--- /dev/null",
                "+++ b/spark/spark-scala-parent/src/main/scala/org/apache/zeppelin/spark/BaseSparkScalaInterpreter.scala",
                "@@ -0,0 +1,338 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.zeppelin.spark",
                "+",
                "+",
                "+import java.io.File",
                "+",
                "+import org.apache.spark.sql.SQLContext",
                "+import org.apache.spark.{SparkConf, SparkContext}",
                "+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion",
                "+import org.apache.zeppelin.interpreter.util.InterpreterOutputStream",
                "+import org.apache.zeppelin.interpreter.{InterpreterContext, InterpreterResult}",
                "+import org.slf4j.{Logger, LoggerFactory}",
                "+",
                "+import scala.collection.JavaConverters._",
                "+import scala.tools.nsc.interpreter.Completion.ScalaCompleter",
                "+import scala.util.control.NonFatal",
                "+",
                "+/**",
                "+  * Base class for different scala versions of SparkInterpreter. It should be",
                "+  * binary compatible between multiple scala versions.",
                "+  * @param conf",
                "+  * @param depFiles",
                "+  */",
                "+abstract class BaseSparkScalaInterpreter(val conf: SparkConf,",
                "+                                         val depFiles: java.util.List[String]) {",
                "+",
                "+  protected lazy val LOGGER: Logger = LoggerFactory.getLogger(getClass)",
                "+",
                "+  private val isTest = conf.getBoolean(\"zeppelin.spark.test\", false)",
                "+",
                "+  protected var sc: SparkContext = _",
                "+",
                "+  protected var sqlContext: SQLContext = _",
                "+",
                "+  protected var sparkSession: Object = _",
                "+",
                "+  protected var sparkHttpServer: Object = _",
                "+",
                "+  protected var sparkUrl: String = _",
                "+",
                "+  protected var scalaCompleter: ScalaCompleter = _",
                "+",
                "+  protected val interpreterOutput: InterpreterOutputStream",
                "+",
                "+  protected def open(): Unit = {",
                "+    /* Required for scoped mode.",
                "+     * In scoped mode multiple scala compiler (repl) generates class in the same directory.",
                "+     * Class names is not randomly generated and look like '$line12.$read$$iw$$iw'",
                "+     * Therefore it's possible to generated class conflict(overwrite) with other repl generated",
                "+     * class.",
                "+     *",
                "+     * To prevent generated class name conflict,",
                "+     * change prefix of generated class name from each scala compiler (repl) instance.",
                "+     *",
                "+     * In Spark 2.x, REPL generated wrapper class name should compatible with the pattern",
                "+     * ^(\\$line(?:\\d+)\\.\\$read)(?:\\$\\$iw)+$",
                "+     *",
                "+     * As hashCode() can return a negative integer value and the minus character '-' is invalid",
                "+     * in a package name we change it to a numeric value '0' which still conforms to the regexp.",
                "+     *",
                "+     */",
                "+    System.setProperty(\"scala.repl.name.line\", (\"$line\" + this.hashCode).replace('-', '0'))",
                "+  }",
                "+",
                "+  protected def interpret(code: String, context: InterpreterContext): InterpreterResult",
                "+",
                "+  protected def interpret(code: String): InterpreterResult = interpret(code, null)",
                "+",
                "+  protected def scalaInterpret(code: String): scala.tools.nsc.interpreter.IR.Result",
                "+",
                "+  protected def completion(buf: String,",
                "+                           cursor: Int,",
                "+                           context: InterpreterContext): java.util.List[InterpreterCompletion] = {",
                "+    val completions = scalaCompleter.complete(buf, cursor).candidates",
                "+      .map(e => new InterpreterCompletion(e, e, null))",
                "+    scala.collection.JavaConversions.seqAsJavaList(completions)",
                "+  }",
                "+",
                "+  protected def getProgress(jobGroup: String, context: InterpreterContext): Int = {",
                "+    val jobIds = sc.statusTracker.getJobIdsForGroup(jobGroup)",
                "+    val jobs = jobIds.flatMap { id => sc.statusTracker.getJobInfo(id) }",
                "+    val stages = jobs.flatMap { job =>",
                "+      job.stageIds().flatMap(sc.statusTracker.getStageInfo)",
                "+    }",
                "+",
                "+    val taskCount = stages.map(_.numTasks).sum",
                "+    val completedTaskCount = stages.map(_.numCompletedTasks).sum",
                "+    if (taskCount == 0) {",
                "+      0",
                "+    } else {",
                "+      (100 * completedTaskCount.toDouble / taskCount).toInt",
                "+    }",
                "+  }",
                "+",
                "+  protected def bind(name: String, tpe: String, value: Object, modifier: List[String]): Unit",
                "+",
                "+  // for use in java side",
                "+  protected def bind(name: String,",
                "+                     tpe: String,",
                "+                     value: Object,",
                "+                     modifier: java.util.List[String]): Unit =",
                "+    bind(name, tpe, value, modifier.asScala.toList)",
                "+",
                "+  protected def close(): Unit = {",
                "+    if (sc != null) {",
                "+      sc.stop()",
                "+    }",
                "+    if (sparkHttpServer != null) {",
                "+      sparkHttpServer.getClass.getMethod(\"stop\").invoke(sparkHttpServer)",
                "+    }",
                "+    sc = null",
                "+    sqlContext = null",
                "+    if (sparkSession != null) {",
                "+      sparkSession.getClass.getMethod(\"stop\").invoke(sparkSession)",
                "+      sparkSession = null",
                "+    }",
                "+",
                "+  }",
                "+",
                "+  protected def createSparkContext(): Unit = {",
                "+    if (isSparkSessionPresent()) {",
                "+      spark2CreateContext()",
                "+    } else {",
                "+      spark1CreateContext()",
                "+    }",
                "+  }",
                "+",
                "+  private def spark1CreateContext(): Unit = {",
                "+    this.sc = SparkContext.getOrCreate(conf)",
                "+    if (!isTest) {",
                "+      interpreterOutput.write(\"Created SparkContext.\\n\".getBytes())",
                "+    }",
                "+    getUserFiles().foreach(file => sc.addFile(file))",
                "+",
                "+    sc.getClass.getMethod(\"ui\").invoke(sc).asInstanceOf[Option[_]] match {",
                "+      case Some(webui) =>",
                "+        sparkUrl = webui.getClass.getMethod(\"appUIAddress\").invoke(webui).asInstanceOf[String]",
                "+      case None =>",
                "+    }",
                "+",
                "+    val hiveSiteExisted: Boolean =",
                "+      Thread.currentThread().getContextClassLoader.getResource(\"hive-site.xml\") != null",
                "+    val hiveEnabled = conf.getBoolean(\"spark.useHiveContext\", false)",
                "+    if (hiveEnabled && hiveSiteExisted) {",
                "+      sqlContext = Class.forName(\"org.apache.spark.sql.hive.HiveContext\")",
                "+        .getConstructor(classOf[SparkContext]).newInstance(sc).asInstanceOf[SQLContext]",
                "+      if (!isTest) {",
                "+        interpreterOutput.write(\"Created sql context (with Hive support).\\n\".getBytes())",
                "+      }",
                "+    } else {",
                "+      if (hiveEnabled && !hiveSiteExisted && !isTest) {",
                "+        interpreterOutput.write((\"spark.useHiveContext is set as true but no hive-site.xml\" +",
                "+          \" is found in classpath, so zeppelin will fallback to SQLContext.\\n\").getBytes())",
                "+      }",
                "+      sqlContext = Class.forName(\"org.apache.spark.sql.SQLContext\")",
                "+        .getConstructor(classOf[SparkContext]).newInstance(sc).asInstanceOf[SQLContext]",
                "+      if (!isTest) {",
                "+        interpreterOutput.write(\"Created sql context.\\n\".getBytes())",
                "+      }",
                "+    }",
                "+",
                "+    bind(\"sc\", \"org.apache.spark.SparkContext\", sc, List(\"\"\"@transient\"\"\"))",
                "+    bind(\"sqlContext\", sqlContext.getClass.getCanonicalName, sqlContext, List(\"\"\"@transient\"\"\"))",
                "+",
                "+    interpret(\"import org.apache.spark.SparkContext._\")",
                "+    interpret(\"import sqlContext.implicits._\")",
                "+    interpret(\"import sqlContext.sql\")",
                "+    interpret(\"import org.apache.spark.sql.functions._\")",
                "+  }",
                "+",
                "+  private def spark2CreateContext(): Unit = {",
                "+    val sparkClz = Class.forName(\"org.apache.spark.sql.SparkSession$\")",
                "+    val sparkObj = sparkClz.getField(\"MODULE$\").get(null)",
                "+",
                "+    val builderMethod = sparkClz.getMethod(\"builder\")",
                "+    val builder = builderMethod.invoke(sparkObj)",
                "+    builder.getClass.getMethod(\"config\", classOf[SparkConf]).invoke(builder, conf)",
                "+",
                "+    if (conf.get(\"spark.sql.catalogImplementation\", \"in-memory\").toLowerCase == \"hive\"",
                "+        || conf.get(\"spark.useHiveContext\", \"false\").toLowerCase == \"true\") {",
                "+      val hiveSiteExisted: Boolean =",
                "+        Thread.currentThread().getContextClassLoader.getResource(\"hive-site.xml\") != null",
                "+      val hiveClassesPresent =",
                "+        sparkClz.getMethod(\"hiveClassesArePresent\").invoke(sparkObj).asInstanceOf[Boolean]",
                "+      if (hiveSiteExisted && hiveClassesPresent) {",
                "+        builder.getClass.getMethod(\"enableHiveSupport\").invoke(builder)",
                "+        sparkSession = builder.getClass.getMethod(\"getOrCreate\").invoke(builder)",
                "+        if (!isTest) {",
                "+          interpreterOutput.write(\"Created Spark session (with Hive support).\\n\".getBytes())",
                "+        }",
                "+      } else {",
                "+        if (!hiveClassesPresent && !isTest) {",
                "+          interpreterOutput.write(",
                "+            \"Hive support can not be enabled because spark is not built with hive\\n\".getBytes)",
                "+        }",
                "+        if (!hiveSiteExisted && !isTest) {",
                "+          interpreterOutput.write(",
                "+            \"Hive support can not be enabled because no hive-site.xml found\\n\".getBytes)",
                "+        }",
                "+        sparkSession = builder.getClass.getMethod(\"getOrCreate\").invoke(builder)",
                "+        if (!isTest) {",
                "+          interpreterOutput.write(\"Created Spark session.\\n\".getBytes())",
                "+        }",
                "+      }",
                "+    } else {",
                "+      sparkSession = builder.getClass.getMethod(\"getOrCreate\").invoke(builder)",
                "+      if (!isTest) {",
                "+        interpreterOutput.write(\"Created Spark session.\\n\".getBytes())",
                "+      }",
                "+    }",
                "+",
                "+    sc = sparkSession.getClass.getMethod(\"sparkContext\").invoke(sparkSession)",
                "+      .asInstanceOf[SparkContext]",
                "+    getUserFiles().foreach(file => sc.addFile(file))",
                "+    sqlContext = sparkSession.getClass.getMethod(\"sqlContext\").invoke(sparkSession)",
                "+      .asInstanceOf[SQLContext]",
                "+    sc.getClass.getMethod(\"uiWebUrl\").invoke(sc).asInstanceOf[Option[String]] match {",
                "+      case Some(url) => sparkUrl = url",
                "+      case None =>",
                "+    }",
                "+",
                "+    bind(\"spark\", sparkSession.getClass.getCanonicalName, sparkSession, List(\"\"\"@transient\"\"\"))",
                "+    bind(\"sc\", \"org.apache.spark.SparkContext\", sc, List(\"\"\"@transient\"\"\"))",
                "+    bind(\"sqlContext\", \"org.apache.spark.sql.SQLContext\", sqlContext, List(\"\"\"@transient\"\"\"))",
                "+",
                "+    interpret(\"import org.apache.spark.SparkContext._\")",
                "+    interpret(\"import spark.implicits._\")",
                "+    interpret(\"import spark.sql\")",
                "+    interpret(\"import org.apache.spark.sql.functions._\")",
                "+  }",
                "+",
                "+  private def isSparkSessionPresent(): Boolean = {",
                "+    try {",
                "+      Class.forName(\"org.apache.spark.sql.SparkSession\")",
                "+      true",
                "+    } catch {",
                "+      case _: ClassNotFoundException | _: NoClassDefFoundError => false",
                "+    }",
                "+  }",
                "+",
                "+  protected def getField(obj: Object, name: String): Object = {",
                "+    val field = obj.getClass.getField(name)",
                "+    field.setAccessible(true)",
                "+    field.get(obj)",
                "+  }",
                "+",
                "+  protected def getDeclareField(obj: Object, name: String): Object = {",
                "+    val field = obj.getClass.getDeclaredField(name)",
                "+    field.setAccessible(true)",
                "+    field.get(obj)",
                "+  }",
                "+",
                "+  protected def setDeclaredField(obj: Object, name: String, value: Object): Unit = {",
                "+    val field = obj.getClass.getDeclaredField(name)",
                "+    field.setAccessible(true)",
                "+    field.set(obj, value)",
                "+  }",
                "+",
                "+  protected def callMethod(obj: Object, name: String): Object = {",
                "+    callMethod(obj, name, Array.empty[Class[_]], Array.empty[Object])",
                "+  }",
                "+",
                "+  protected def callMethod(obj: Object, name: String,",
                "+                           parameterTypes: Array[Class[_]],",
                "+                           parameters: Array[Object]): Object = {",
                "+    val method = obj.getClass.getMethod(name, parameterTypes: _ *)",
                "+    method.setAccessible(true)",
                "+    method.invoke(obj, parameters: _ *)",
                "+  }",
                "+",
                "+  protected def startHttpServer(outputDir: File): Option[(Object, String)] = {",
                "+    try {",
                "+      val httpServerClass = Class.forName(\"org.apache.spark.HttpServer\")",
                "+      val securityManager = {",
                "+        val constructor = Class.forName(\"org.apache.spark.SecurityManager\")",
                "+          .getConstructor(classOf[SparkConf])",
                "+        constructor.setAccessible(true)",
                "+        constructor.newInstance(conf).asInstanceOf[Object]",
                "+      }",
                "+      val httpServerConstructor = httpServerClass",
                "+        .getConstructor(classOf[SparkConf],",
                "+          classOf[File],",
                "+          Class.forName(\"org.apache.spark.SecurityManager\"),",
                "+          classOf[Int],",
                "+          classOf[String])",
                "+      httpServerConstructor.setAccessible(true)",
                "+      // Create Http Server",
                "+      val port = conf.getInt(\"spark.replClassServer.port\", 0)",
                "+      val server = httpServerConstructor",
                "+        .newInstance(conf, outputDir, securityManager, new Integer(port), \"HTTP server\")",
                "+        .asInstanceOf[Object]",
                "+",
                "+      // Start Http Server",
                "+      val startMethod = server.getClass.getMethod(\"start\")",
                "+      startMethod.setAccessible(true)",
                "+      startMethod.invoke(server)",
                "+",
                "+      // Get uri of this Http Server",
                "+      val uriMethod = server.getClass.getMethod(\"uri\")",
                "+      uriMethod.setAccessible(true)",
                "+      val uri = uriMethod.invoke(server).asInstanceOf[String]",
                "+      Some((server, uri))",
                "+    } catch {",
                "+      // Spark 2.0+ removed HttpServer, so return null instead.",
                "+      case NonFatal(e) =>",
                "+        None",
                "+    }",
                "+  }",
                "+",
                "+  protected def getUserJars(): Seq[String] = {",
                "+    val sparkJars = conf.getOption(\"spark.jars\").map(_.split(\",\"))",
                "+      .map(_.filter(_.nonEmpty)).toSeq.flatten",
                "+    val depJars = depFiles.asScala.filter(_.endsWith(\".jar\"))",
                "+    val result = sparkJars ++ depJars",
                "+    conf.set(\"spark.jars\", result.mkString(\",\"))",
                "+    result",
                "+  }",
                "+",
                "+  protected def getUserFiles(): Seq[String] = {",
                "+    depFiles.asScala.filter(!_.endsWith(\".jar\"))",
                "+  }",
                "+}",
                "diff --git a/testing/install_external_dependencies.sh b/testing/install_external_dependencies.sh",
                "index e34296e3a..d6c07368b 100755",
                "--- a/testing/install_external_dependencies.sh",
                "+++ b/testing/install_external_dependencies.sh",
                "@@ -46,4 +46,4 @@ if [[ -n \"$PYTHON\" ]] ; then",
                "   conda config --add channels conda-forge",
                "-  conda install -q matplotlib pandasql ipython=5.4.1 jupyter_client ipykernel matplotlib bokeh=0.12.6",
                "-  pip install -q grpcio ggplot",
                "+  conda install -q matplotlib pandasql ipython=5.4.1 jupyter_client ipykernel matplotlib bokeh=0.12.10",
                "+  pip install -q grpcio ggplot bkzep==0.4.0",
                " fi",
                "diff --git a/zeppelin-display/pom.xml b/zeppelin-display/pom.xml",
                "index c6edd95e4..79a08a69a 100644",
                "--- a/zeppelin-display/pom.xml",
                "+++ b/zeppelin-display/pom.xml",
                "@@ -29,3 +29,3 @@",
                "   <groupId>org.apache.zeppelin</groupId>",
                "-  <artifactId>zeppelin-display_2.10</artifactId>",
                "+  <artifactId>zeppelin-display</artifactId>",
                "   <packaging>jar</packaging>",
                "@@ -47,2 +47,3 @@",
                "         <version>${scala.version}</version>",
                "+        <scope>provided</scope>",
                "       </dependency>",
                "@@ -53,2 +54,3 @@",
                "         <version>${scala.version}</version>",
                "+        <scope>provided</scope>",
                "       </dependency>",
                "@@ -59,2 +61,3 @@",
                "         <version>${scala.version}</version>",
                "+        <scope>provided</scope>",
                "       </dependency>",
                "@@ -86,9 +89,2 @@",
                "-    <dependency>",
                "-      <groupId>org.scala-lang</groupId>",
                "-      <artifactId>scala-library</artifactId>",
                "-      <version>${scala.version}</version>",
                "-      <scope>provided</scope>",
                "-    </dependency>",
                "-",
                "     <dependency>",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/BaseZeppelinContext.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/BaseZeppelinContext.java",
                "index 65bb06fe1..e38a29f82 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/BaseZeppelinContext.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/BaseZeppelinContext.java",
                "@@ -239,2 +239,4 @@ public abstract class BaseZeppelinContext {",
                "       } else {",
                "+        interpreterContext.out.write(\"ZeppelinContext doesn't support to show type: \"",
                "+            + o.getClass().getCanonicalName() + \"\\n\");",
                "         interpreterContext.out.write(o.toString());",
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java",
                "index fca84498a..37db1fce8 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java",
                "@@ -98,6 +98,6 @@ import java.util.concurrent.ConcurrentMap;",
                "  */",
                "-public class RemoteInterpreterServer",
                "-    extends Thread",
                "+public class RemoteInterpreterServer extends Thread",
                "     implements RemoteInterpreterService.Iface, AngularObjectRegistryListener {",
                "-  Logger logger = LoggerFactory.getLogger(RemoteInterpreterServer.class);",
                "+",
                "+  private static Logger logger = LoggerFactory.getLogger(RemoteInterpreterServer.class);",
                "@@ -257,2 +257,5 @@ public class RemoteInterpreterServer",
                "       throws TTransportException, InterruptedException, IOException {",
                "+    Class klass = RemoteInterpreterServer.class;",
                "+    URL location = klass.getResource('/' + klass.getName().replace('.', '/') + \".class\");",
                "+    logger.info(\"URL:\" + location);",
                "     String callbackHost = null;",
                "diff --git a/zeppelin-server/pom.xml b/zeppelin-server/pom.xml",
                "index a73cd9643..970f302fe 100644",
                "--- a/zeppelin-server/pom.xml",
                "+++ b/zeppelin-server/pom.xml",
                "@@ -263,2 +263,8 @@",
                "       <scope>test</scope>",
                "+      <exclusions>",
                "+        <exclusion>",
                "+          <groupId>org.scala-lang.modules</groupId>",
                "+          <artifactId>scala-xml_${scala.binary.version}</artifactId>",
                "+        </exclusion>",
                "+      </exclusions>",
                "     </dependency>",
                "diff --git a/zeppelin-zengine/pom.xml b/zeppelin-zengine/pom.xml",
                "index ac7536018..fade4dd61 100644",
                "--- a/zeppelin-zengine/pom.xml",
                "+++ b/zeppelin-zengine/pom.xml",
                "@@ -605,3 +605,3 @@",
                "           <groupId>org.apache.zeppelin</groupId>",
                "-          <artifactId>zeppelin-spark_2.10</artifactId>",
                "+          <artifactId>spark-interpreter</artifactId>",
                "           <version>${project.version}</version>"
            ],
            "changed_files": [
                ".travis.yml",
                "bin/interpreter.sh",
                "pom.xml",
                "python/pom.xml",
                "python/src/main/java/org/apache/zeppelin/python/IPythonInterpreter.java",
                "python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java",
                "r/pom.xml",
                "spark/interpreter/figure/null-1.png",
                "spark/interpreter/pom.xml",
                "spark/interpreter/src/main/java/org/apache/zeppelin/spark/AbstractSparkInterpreter.java",
                "spark/interpreter/src/main/java/org/apache/zeppelin/spark/DepInterpreter.java",
                "spark/interpreter/src/main/java/org/apache/zeppelin/spark/IPySparkInterpreter.java",
                "spark/interpreter/src/main/java/org/apache/zeppelin/spark/NewSparkInterpreter.java",
                "spark/interpreter/src/main/java/org/apache/zeppelin/spark/OldSparkInterpreter.java",
                "spark/interpreter/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java",
                "spark/interpreter/src/main/java/org/apache/zeppelin/spark/PythonUtils.java",
                "spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java",
                "spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkRInterpreter.java",
                "spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkSqlInterpreter.java",
                "spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkVersion.java",
                "spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkZeppelinContext.java",
                "spark/interpreter/src/main/java/org/apache/zeppelin/spark/Utils.java",
                "spark/interpreter/src/main/java/org/apache/zeppelin/spark/ZeppelinR.java",
                "spark/interpreter/src/main/java/org/apache/zeppelin/spark/ZeppelinRContext.java",
                "spark/interpreter/src/main/java/org/apache/zeppelin/spark/dep/SparkDependencyContext.java",
                "spark/interpreter/src/main/java/org/apache/zeppelin/spark/dep/SparkDependencyResolver.java",
                "spark/interpreter/src/main/resources/R/zeppelin_sparkr.R",
                "spark/interpreter/src/main/resources/interpreter-setting.json",
                "spark/interpreter/src/main/resources/python/zeppelin_ipyspark.py",
                "spark/interpreter/src/main/resources/python/zeppelin_pyspark.py",
                "spark/interpreter/src/main/scala/org/apache/spark/SparkRBackend.scala",
                "spark/interpreter/src/main/scala/org/apache/zeppelin/spark/ZeppelinRDisplay.scala",
                "spark/interpreter/src/main/scala/org/apache/zeppelin/spark/utils/DisplayUtils.scala",
                "spark/pom.xml",
                "spark/scala-2.10/pom.xml",
                "spark/scala-2.10/spark-scala-parent",
                "spark/scala-2.10/src/main/scala/org/apache/zeppelin/spark/SparkScala210Interpreter.scala",
                "spark/scala-2.11/pom.xml",
                "spark/scala-2.11/spark-scala-parent",
                "spark/scala-2.11/src/main/resources/log4j.properties",
                "spark/scala-2.11/src/main/scala/org/apache/zeppelin/spark/SparkScala211Interpreter.scala",
                "spark/spark-dependencies/pom.xml",
                "spark/spark-scala-parent/pom.xml",
                "spark/spark-scala-parent/src/main/scala/org/apache/zeppelin/spark/BaseSparkScalaInterpreter.scala",
                "testing/install_external_dependencies.sh",
                "zeppelin-display/pom.xml",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/BaseZeppelinContext.java",
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java",
                "zeppelin-server/pom.xml",
                "zeppelin-zengine/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3111": ""
            },
            "ghissue_refs": {
                "2709": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3111",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2709",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4a3057fa87fbe092f4a6b8dcc34e8f6866b7c700",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1507771765,
            "hunks": 156,
            "message": "ZEPPELIN-2982. Copy interpreter-setting.json to interpreter dir ### What is this PR for? 2 main changes. * Introduce `interpreter-parent` module, so that all the interpreter can reuse the plugin defined in `interpreter-parent` * Add new plugin for `copying interpreter-setting.json` to interpreter dir ### What type of PR is it? [ Improvement | Refactoring] ### Todos * [ ] - Task ### What is the Jira issue? * https://issues.apache.org/jira/browse/ZEPPELIN-2982 ### How should this be tested? * First time? Setup Travis CI as described on https://zeppelin.apache.org/contribution/contributions.html#continuous-integration * Strongly recommended: add automated unit tests for any new or changed behavior * Outline any manual steps to test the PR here. ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Jeff Zhang <zjffdu@apache.org> Closes #2613 from zjffdu/ZEPPELIN-2982 and squashes the following commits: ccccd32 [Jeff Zhang] update doc 8f643a7 [Jeff Zhang] ZEPPELIN-2982. Copy interpreter-setting.json to interpreter dir",
            "diff": [
                "diff --git a/alluxio/pom.xml b/alluxio/pom.xml",
                "index ed6b98128..f36494e94 100644",
                "--- a/alluxio/pom.xml",
                "+++ b/alluxio/pom.xml",
                "@@ -22,6 +22,6 @@",
                "     <parent>",
                "-        <artifactId>zeppelin</artifactId>",
                "+        <artifactId>interpreter-parent</artifactId>",
                "         <groupId>org.apache.zeppelin</groupId>",
                "         <version>0.8.0-SNAPSHOT</version>",
                "-        <relativePath>..</relativePath>",
                "+        <relativePath>../interpreter-parent</relativePath>",
                "     </parent>",
                "@@ -36,2 +36,3 @@",
                "         <alluxio.version>1.0.0</alluxio.version>",
                "+        <interpreter.name>alluxio</interpreter.name>",
                "     </properties>",
                "@@ -131,50 +132,8 @@",
                "                 <artifactId>maven-enforcer-plugin</artifactId>",
                "-                <executions>",
                "-                    <execution>",
                "-                        <id>enforce</id>",
                "-                        <phase>none</phase>",
                "-                    </execution>",
                "-                </executions>",
                "             </plugin>",
                "-",
                "             <plugin>",
                "                 <artifactId>maven-dependency-plugin</artifactId>",
                "-                <executions>",
                "-                    <execution>",
                "-                        <id>copy-dependencies</id>",
                "-                        <phase>package</phase>",
                "-                        <goals>",
                "-                            <goal>copy-dependencies</goal>",
                "-                        </goals>",
                "-                        <configuration>",
                "-                            <outputDirectory>${project.build.directory}/../../interpreter/alluxio</outputDirectory>",
                "-                            <overWriteReleases>false</overWriteReleases>",
                "-                            <overWriteSnapshots>false</overWriteSnapshots>",
                "-                            <overWriteIfNewer>true</overWriteIfNewer>",
                "-                            <includeScope>runtime</includeScope>",
                "-                        </configuration>",
                "-                    </execution>",
                "-                    <execution>",
                "-                        <id>copy-artifact</id>",
                "-                        <phase>package</phase>",
                "-                        <goals>",
                "-                            <goal>copy</goal>",
                "-                        </goals>",
                "-                        <configuration>",
                "-                            <outputDirectory>${project.build.directory}/../../interpreter/alluxio</outputDirectory>",
                "-                            <overWriteReleases>false</overWriteReleases>",
                "-                            <overWriteSnapshots>false</overWriteSnapshots>",
                "-                            <overWriteIfNewer>true</overWriteIfNewer>",
                "-                            <includeScope>runtime</includeScope>",
                "-                            <artifactItems>",
                "-                                <artifactItem>",
                "-                                    <groupId>${project.groupId}</groupId>",
                "-                                    <artifactId>${project.artifactId}</artifactId>",
                "-                                    <version>${project.version}</version>",
                "-                                    <type>${project.packaging}</type>",
                "-                                </artifactItem>",
                "-                            </artifactItems>",
                "-                        </configuration>",
                "-                    </execution>",
                "-                </executions>",
                "+            </plugin>",
                "+            <plugin>",
                "+                <artifactId>maven-resources-plugin</artifactId>",
                "             </plugin>",
                "diff --git a/angular/pom.xml b/angular/pom.xml",
                "index be43e496a..9ff2acb80 100644",
                "--- a/angular/pom.xml",
                "+++ b/angular/pom.xml",
                "@@ -22,6 +22,6 @@",
                "   <parent>",
                "-    <artifactId>zeppelin</artifactId>",
                "+    <artifactId>interpreter-parent</artifactId>",
                "     <groupId>org.apache.zeppelin</groupId>",
                "     <version>0.8.0-SNAPSHOT</version>",
                "-    <relativePath>..</relativePath>",
                "+    <relativePath>../interpreter-parent</relativePath>",
                "   </parent>",
                "@@ -34,2 +34,6 @@",
                "+  <properties>",
                "+    <interpreter.name>angular</interpreter.name>",
                "+  </properties>",
                "+",
                "   <dependencies>",
                "@@ -63,50 +67,8 @@",
                "         <artifactId>maven-enforcer-plugin</artifactId>",
                "-        <executions>",
                "-          <execution> ",
                "-            <id>enforce</id> ",
                "-            <phase>none</phase> ",
                "-          </execution>",
                "-        </executions>",
                "       </plugin>",
                "-",
                "       <plugin>",
                "         <artifactId>maven-dependency-plugin</artifactId>",
                "-        <executions>",
                "-          <execution>",
                "-            <id>copy-dependencies</id>",
                "-            <phase>package</phase>",
                "-            <goals>",
                "-              <goal>copy-dependencies</goal>",
                "-            </goals>",
                "-            <configuration>",
                "-              <outputDirectory>${project.build.directory}/../../interpreter/angular</outputDirectory>",
                "-              <overWriteReleases>false</overWriteReleases>",
                "-              <overWriteSnapshots>false</overWriteSnapshots>",
                "-              <overWriteIfNewer>true</overWriteIfNewer>",
                "-              <includeScope>runtime</includeScope>",
                "-            </configuration>",
                "-          </execution>",
                "-          <execution>",
                "-            <id>copy-artifact</id>",
                "-            <phase>package</phase>",
                "-            <goals>",
                "-              <goal>copy</goal>",
                "-            </goals>",
                "-            <configuration>",
                "-              <outputDirectory>${project.build.directory}/../../interpreter/angular</outputDirectory>",
                "-              <overWriteReleases>false</overWriteReleases>",
                "-              <overWriteSnapshots>false</overWriteSnapshots>",
                "-              <overWriteIfNewer>true</overWriteIfNewer>",
                "-              <includeScope>runtime</includeScope>",
                "-              <artifactItems>",
                "-                <artifactItem>",
                "-                  <groupId>${project.groupId}</groupId>",
                "-                  <artifactId>${project.artifactId}</artifactId>",
                "-                  <version>${project.version}</version>",
                "-                  <type>${project.packaging}</type>",
                "-                </artifactItem>",
                "-              </artifactItems>              ",
                "-            </configuration>",
                "-          </execution>",
                "-        </executions>",
                "+      </plugin>",
                "+      <plugin>",
                "+        <artifactId>maven-resources-plugin</artifactId>",
                "       </plugin>",
                "diff --git a/beam/pom.xml b/beam/pom.xml",
                "index 166652793..a1d476153 100644",
                "--- a/beam/pom.xml",
                "+++ b/beam/pom.xml",
                "@@ -22,6 +22,6 @@",
                "   <parent>",
                "-    <artifactId>zeppelin</artifactId>",
                "+    <artifactId>interpreter-parent</artifactId>",
                "     <groupId>org.apache.zeppelin</groupId>",
                "     <version>0.8.0-SNAPSHOT</version>",
                "-    <relativePath>..</relativePath>",
                "+    <relativePath>../interpreter-parent</relativePath>",
                "   </parent>",
                "@@ -43,2 +43,3 @@",
                "     <commons.exec.version>1.3</commons.exec.version>",
                "+    <interpreter.name>beam</interpreter.name>",
                "   </properties>",
                "@@ -242,65 +243,14 @@",
                "   </dependencies>",
                "+",
                "   <build>",
                "     <plugins>",
                "-  ",
                "-      <plugin>",
                "-        <groupId>org.apache.maven.plugins</groupId>",
                "-        <artifactId>maven-deploy-plugin</artifactId>",
                "-        <configuration>",
                "-          <skip>true</skip>",
                "-        </configuration>",
                "-      </plugin>",
                "-  ",
                "       <plugin>",
                "         <artifactId>maven-enforcer-plugin</artifactId>",
                "-        <executions>",
                "-          <execution>",
                "-            <id>enforce</id>",
                "-            <phase>none</phase>",
                "-          </execution>",
                "-        </executions>",
                "       </plugin>",
                "-  ",
                "       <plugin>",
                "         <artifactId>maven-dependency-plugin</artifactId>",
                "-        <executions>",
                "-          <execution>",
                "-            <id>copy-dependencies</id>",
                "-            <phase>package</phase>",
                "-            <goals>",
                "-              <goal>copy-dependencies</goal>",
                "-            </goals>",
                "-            <configuration>",
                "-              <outputDirectory>${project.build.directory}/../../interpreter/beam</outputDirectory>",
                "-              <overWriteReleases>false</overWriteReleases>",
                "-              <overWriteSnapshots>false</overWriteSnapshots>",
                "-              <overWriteIfNewer>true</overWriteIfNewer>",
                "-              <includeScope>runtime</includeScope>",
                "-            </configuration>",
                "-          </execution>",
                "-          <execution>",
                "-            <id>copy-artifact</id>",
                "-            <phase>package</phase>",
                "-            <goals>",
                "-              <goal>copy</goal>",
                "-            </goals>",
                "-            <configuration>",
                "-              <outputDirectory>${project.build.directory}/../../interpreter/beam</outputDirectory>",
                "-              <overWriteReleases>false</overWriteReleases>",
                "-              <overWriteSnapshots>false</overWriteSnapshots>",
                "-              <overWriteIfNewer>true</overWriteIfNewer>",
                "-              <includeScope>runtime</includeScope>",
                "-              <artifactItems>",
                "-                <artifactItem>",
                "-                  <groupId>${project.groupId}</groupId>",
                "-                  <artifactId>${project.artifactId}</artifactId>",
                "-                  <version>${project.version}</version>",
                "-                  <type>${project.packaging}</type>",
                "-                </artifactItem>",
                "-              </artifactItems>",
                "-            </configuration>",
                "-          </execution>",
                "-        </executions>",
                "       </plugin>",
                "-   ",
                "+      <plugin>",
                "+        <artifactId>maven-resources-plugin</artifactId>",
                "+      </plugin>",
                "     </plugins>",
                "diff --git a/bigquery/pom.xml b/bigquery/pom.xml",
                "index f974b9881..db88edafa 100644",
                "--- a/bigquery/pom.xml",
                "+++ b/bigquery/pom.xml",
                "@@ -23,5 +23,6 @@",
                "   <parent>",
                "-    <artifactId>zeppelin</artifactId>",
                "+    <artifactId>interpreter-parent</artifactId>",
                "     <groupId>org.apache.zeppelin</groupId>",
                "     <version>0.8.0-SNAPSHOT</version>",
                "+    <relativePath>../interpreter-parent</relativePath>",
                "   </parent>",
                "@@ -43,2 +44,3 @@",
                "     <gson.version>2.6</gson.version>",
                "+    <interpreter.name>bigquery</interpreter.name>",
                "   </properties>",
                "@@ -101,8 +103,8 @@",
                "         <artifactId>maven-enforcer-plugin</artifactId>",
                "-        <executions>",
                "-          <execution>",
                "-            <id>enforce</id>",
                "-            <phase>none</phase>",
                "-          </execution>",
                "-        </executions>",
                "+      </plugin>",
                "+      <plugin>",
                "+        <artifactId>maven-dependency-plugin</artifactId>",
                "+      </plugin>",
                "+      <plugin>",
                "+        <artifactId>maven-resources-plugin</artifactId>",
                "       </plugin>",
                "@@ -118,61 +120,20 @@",
                "       </plugin>",
                "-",
                "       <plugin>",
                "-        <artifactId>maven-dependency-plugin</artifactId>",
                "-        <executions>",
                "-          <execution>",
                "-            <id>copy-dependencies</id>",
                "-            <phase>package</phase>",
                "-            <goals>",
                "-              <goal>copy-dependencies</goal>",
                "-            </goals>",
                "-            <configuration>",
                "-              <outputDirectory>${project.build.directory}/../../interpreter/bqsql</outputDirectory>",
                "-              <overWriteReleases>false</overWriteReleases>",
                "-              <overWriteSnapshots>false</overWriteSnapshots>",
                "-              <overWriteIfNewer>true</overWriteIfNewer>",
                "-              <includeScope>runtime</includeScope>",
                "-            </configuration>",
                "-          </execution>",
                "-          <execution>",
                "-            <id>copy-artifact</id>",
                "-            <phase>package</phase>",
                "-            <goals>",
                "-              <goal>copy</goal>",
                "-            </goals>",
                "-            <configuration>",
                "-              <outputDirectory>${project.build.directory}/../../interpreter/bqsql</outputDirectory>",
                "-              <overWriteReleases>false</overWriteReleases>",
                "-              <overWriteSnapshots>false</overWriteSnapshots>",
                "-              <overWriteIfNewer>true</overWriteIfNewer>",
                "-              <includeScope>runtime</includeScope>",
                "-              <artifactItems>",
                "-                <artifactItem>",
                "-                  <groupId>${project.groupId}</groupId>",
                "-                  <artifactId>${project.artifactId}</artifactId>",
                "-                  <version>${project.version}</version>",
                "-                  <type>${project.packaging}</type>",
                "-                </artifactItem>",
                "-              </artifactItems>",
                "-            </configuration>",
                "-          </execution>",
                "-        </executions>",
                "+        <artifactId>maven-assembly-plugin</artifactId>",
                "+        <configuration>",
                "+          <archive>",
                "+            <manifest>",
                "+              <mainClass>",
                "+                org.apache.zeppelin.bigquery.BigQueryInterpreter",
                "+              </mainClass>",
                "+            </manifest>",
                "+          </archive>",
                "+          <descriptorRefs>",
                "+            <descriptorRef>jar-with-dependencies</descriptorRef>",
                "+          </descriptorRefs>",
                "+        </configuration>",
                "       </plugin>",
                "-      <plugin>",
                "-            <artifactId>maven-assembly-plugin</artifactId>",
                "-            <configuration>",
                "-                <archive>",
                "-                    <manifest>",
                "-                        <mainClass>",
                "-\t\t\t\torg.apache.zeppelin.bigquery.BigQueryInterpreter                            ",
                "-                        </mainClass>",
                "-                    </manifest>",
                "-                </archive>",
                "-                <descriptorRefs>",
                "-                    <descriptorRef>jar-with-dependencies</descriptorRef>",
                "-                </descriptorRefs>",
                "-            </configuration>",
                "-        </plugin>",
                "     </plugins>",
                "   </build>",
                "+",
                " </project>",
                "diff --git a/cassandra/pom.xml b/cassandra/pom.xml",
                "index 05108e9fd..4b139e9c6 100644",
                "--- a/cassandra/pom.xml",
                "+++ b/cassandra/pom.xml",
                "@@ -22,6 +22,6 @@",
                "     <parent>",
                "-        <artifactId>zeppelin</artifactId>",
                "+        <artifactId>interpreter-parent</artifactId>",
                "         <groupId>org.apache.zeppelin</groupId>",
                "         <version>0.8.0-SNAPSHOT</version>",
                "-        <relativePath>..</relativePath>",
                "+        <relativePath>../interpreter-parent</relativePath>",
                "     </parent>",
                "@@ -51,2 +51,3 @@",
                "         <plugin.scalate.version>1.7.1</plugin.scalate.version>",
                "+        <interpreter.name>cassandra</interpreter.name>",
                "     </properties>",
                "@@ -243,52 +244,11 @@",
                "                 <artifactId>maven-enforcer-plugin</artifactId>",
                "-                <executions>",
                "-                    <execution>",
                "-                        <id>enforce</id>",
                "-                        <phase>none</phase>",
                "-                    </execution>",
                "-                </executions>",
                "             </plugin>",
                "-",
                "             <plugin>",
                "                 <artifactId>maven-dependency-plugin</artifactId>",
                "-                <executions>",
                "-                    <execution>",
                "-                        <id>copy-dependencies</id>",
                "-                        <phase>package</phase>",
                "-                        <goals>",
                "-                            <goal>copy-dependencies</goal>",
                "-                        </goals>",
                "-                        <configuration>",
                "-                            <outputDirectory>${project.build.directory}/../../interpreter/cassandra</outputDirectory>",
                "-                            <overWriteReleases>false</overWriteReleases>",
                "-                            <overWriteSnapshots>false</overWriteSnapshots>",
                "-                            <overWriteIfNewer>true</overWriteIfNewer>",
                "-                            <includeScope>runtime</includeScope>",
                "-                        </configuration>",
                "-                    </execution>",
                "-                    <execution>",
                "-                        <id>copy-artifact</id>",
                "-                        <phase>package</phase>",
                "-                        <goals>",
                "-                            <goal>copy</goal>",
                "-                        </goals>",
                "-                        <configuration>",
                "-                            <outputDirectory>${project.build.directory}/../../interpreter/cassandra</outputDirectory>",
                "-                            <overWriteReleases>false</overWriteReleases>",
                "-                            <overWriteSnapshots>false</overWriteSnapshots>",
                "-                            <overWriteIfNewer>true</overWriteIfNewer>",
                "-                            <includeScope>runtime</includeScope>",
                "-                            <artifactItems>",
                "-                                <artifactItem>",
                "-                                    <groupId>${project.groupId}</groupId>",
                "-                                    <artifactId>${project.artifactId}</artifactId>",
                "-                                    <version>${project.version}</version>",
                "-                                    <type>${project.packaging}</type>",
                "-                                </artifactItem>",
                "-                            </artifactItems>",
                "-                        </configuration>",
                "-                    </execution>",
                "-                </executions>",
                "+            </plugin>",
                "+            <plugin>",
                "+                <artifactId>maven-resources-plugin</artifactId>",
                "             </plugin>",
                "         </plugins>",
                "+",
                "     </build>",
                "diff --git a/elasticsearch/pom.xml b/elasticsearch/pom.xml",
                "index 6042a14ea..b317e2858 100644",
                "--- a/elasticsearch/pom.xml",
                "+++ b/elasticsearch/pom.xml",
                "@@ -22,6 +22,6 @@",
                "   <parent>",
                "-    <artifactId>zeppelin</artifactId>",
                "+    <artifactId>interpreter-parent</artifactId>",
                "     <groupId>org.apache.zeppelin</groupId>",
                "     <version>0.8.0-SNAPSHOT</version>",
                "-    <relativePath>..</relativePath>",
                "+    <relativePath>../interpreter-parent</relativePath>",
                "   </parent>",
                "@@ -34,2 +34,3 @@",
                "   <properties>",
                "+    <interpreter.name>elasticsearch</interpreter.name>",
                "     <elasticsearch.version>2.4.3</elasticsearch.version>",
                "@@ -95,50 +96,8 @@",
                "         <artifactId>maven-enforcer-plugin</artifactId>",
                "-        <executions>",
                "-          <execution> ",
                "-            <id>enforce</id> ",
                "-            <phase>none</phase> ",
                "-          </execution>",
                "-        </executions>",
                "       </plugin>",
                "-",
                "       <plugin>",
                "         <artifactId>maven-dependency-plugin</artifactId>",
                "-        <executions>",
                "-          <execution>",
                "-            <id>copy-dependencies</id>",
                "-            <phase>package</phase>",
                "-            <goals>",
                "-              <goal>copy-dependencies</goal>",
                "-            </goals>",
                "-            <configuration>",
                "-              <outputDirectory>${project.build.directory}/../../interpreter/elasticsearch</outputDirectory>",
                "-              <overWriteReleases>false</overWriteReleases>",
                "-              <overWriteSnapshots>false</overWriteSnapshots>",
                "-              <overWriteIfNewer>true</overWriteIfNewer>",
                "-              <includeScope>runtime</includeScope>",
                "-            </configuration>",
                "-          </execution>",
                "-          <execution>",
                "-            <id>copy-artifact</id>",
                "-            <phase>package</phase>",
                "-            <goals>",
                "-              <goal>copy</goal>",
                "-            </goals>",
                "-            <configuration>",
                "-              <outputDirectory>${project.build.directory}/../../interpreter/elasticsearch</outputDirectory>",
                "-              <overWriteReleases>false</overWriteReleases>",
                "-              <overWriteSnapshots>false</overWriteSnapshots>",
                "-              <overWriteIfNewer>true</overWriteIfNewer>",
                "-              <includeScope>runtime</includeScope>",
                "-              <artifactItems>",
                "-                <artifactItem>",
                "-                  <groupId>${project.groupId}</groupId>",
                "-                  <artifactId>${project.artifactId}</artifactId>",
                "-                  <version>${project.version}</version>",
                "-                  <type>${project.packaging}</type>",
                "-                </artifactItem>",
                "-              </artifactItems>              ",
                "-            </configuration>",
                "-          </execution>",
                "-        </executions>",
                "+      </plugin>",
                "+      <plugin>",
                "+        <artifactId>maven-resources-plugin</artifactId>",
                "       </plugin>",
                "diff --git a/file/pom.xml b/file/pom.xml",
                "index 2493c1fae..1a7668321 100644",
                "--- a/file/pom.xml",
                "+++ b/file/pom.xml",
                "@@ -22,5 +22,6 @@",
                "   <parent>",
                "-    <artifactId>zeppelin</artifactId>",
                "+    <artifactId>interpreter-parent</artifactId>",
                "     <groupId>org.apache.zeppelin</groupId>",
                "     <version>0.8.0-SNAPSHOT</version>",
                "+    <relativePath>../interpreter-parent</relativePath>",
                "   </parent>",
                "@@ -35,2 +36,3 @@",
                "     <!--library versions-->",
                "+    <interpreter.name>file</interpreter.name>",
                "     <ws.rsapi.version>2.0</ws.rsapi.version>",
                "@@ -40,2 +42,3 @@",
                "     <plugin.surefire.version>2.18.1</plugin.surefire.version>",
                "+    <interpreter.name>file</interpreter.name>",
                "   </properties>",
                "@@ -81,58 +84,10 @@",
                "     <plugins>",
                "-      <plugin>",
                "-        <groupId>org.apache.maven.plugins</groupId>",
                "-        <artifactId>maven-surefire-plugin</artifactId>",
                "-        <version>${plugin.surefire.version}</version>",
                "-      </plugin>",
                "-",
                "       <plugin>",
                "         <artifactId>maven-enforcer-plugin</artifactId>",
                "-        <executions>",
                "-          <execution> ",
                "-            <id>enforce</id> ",
                "-            <phase>none</phase> ",
                "-          </execution>",
                "-        </executions>",
                "       </plugin>",
                "-",
                "       <plugin>",
                "         <artifactId>maven-dependency-plugin</artifactId>",
                "-        <executions>",
                "-          <execution>",
                "-            <id>copy-dependencies</id>",
                "-            <phase>package</phase>",
                "-            <goals>",
                "-              <goal>copy-dependencies</goal>",
                "-            </goals>",
                "-            <configuration>",
                "-              <outputDirectory>${project.build.directory}/../../interpreter/file</outputDirectory>",
                "-              <overWriteReleases>false</overWriteReleases>",
                "-              <overWriteSnapshots>false</overWriteSnapshots>",
                "-              <overWriteIfNewer>true</overWriteIfNewer>",
                "-              <includeScope>runtime</includeScope>",
                "-            </configuration>",
                "-          </execution>",
                "-          <execution>",
                "-            <id>copy-artifact</id>",
                "-            <phase>package</phase>",
                "-            <goals>",
                "-              <goal>copy</goal>",
                "-            </goals>",
                "-            <configuration>",
                "-              <outputDirectory>${project.build.directory}/../../interpreter/file</outputDirectory>",
                "-              <overWriteReleases>false</overWriteReleases>",
                "-              <overWriteSnapshots>false</overWriteSnapshots>",
                "-              <overWriteIfNewer>true</overWriteIfNewer>",
                "-              <!--<includeScope>runtime</includeScope>-->",
                "-              <artifactItems>",
                "-                <artifactItem>",
                "-                  <groupId>${project.groupId}</groupId>",
                "-                  <artifactId>${project.artifactId}</artifactId>",
                "-                  <version>${project.version}</version>",
                "-                  <type>${project.packaging}</type>",
                "-                </artifactItem>",
                "-              </artifactItems>              ",
                "-            </configuration>",
                "-          </execution>",
                "-        </executions>",
                "+      </plugin>",
                "+      <plugin>",
                "+        <artifactId>maven-resources-plugin</artifactId>",
                "       </plugin>",
                "diff --git a/flink/pom.xml b/flink/pom.xml",
                "index 19e7c5e48..5c0cc3bf9 100644",
                "--- a/flink/pom.xml",
                "+++ b/flink/pom.xml",
                "@@ -22,6 +22,6 @@",
                "   <parent>",
                "-    <artifactId>zeppelin</artifactId>",
                "+    <artifactId>interpreter-parent</artifactId>",
                "     <groupId>org.apache.zeppelin</groupId>",
                "     <version>0.8.0-SNAPSHOT</version>",
                "-    <relativePath>..</relativePath>",
                "+    <relativePath>../interpreter-parent</relativePath>",
                "   </parent>",
                "@@ -37,2 +37,3 @@",
                "     <!--library versions-->",
                "+    <interpreter.name>flink</interpreter.name>",
                "     <flink.version>1.1.3</flink.version>",
                "@@ -282,64 +283,12 @@",
                "-      <plugin>",
                "-        <artifactId>maven-enforcer-plugin</artifactId>",
                "-        <executions>",
                "-          <execution>",
                "-            <id>enforce</id>",
                "-            <phase>none</phase>",
                "-          </execution>",
                "-        </executions>",
                "-      </plugin>",
                "+        <plugin>",
                "+            <artifactId>maven-enforcer-plugin</artifactId>",
                "+        </plugin>",
                "+        <plugin>",
                "+            <artifactId>maven-dependency-plugin</artifactId>",
                "+        </plugin>",
                "+        <plugin>",
                "+            <artifactId>maven-resources-plugin</artifactId>",
                "+        </plugin>",
                "-      <plugin>",
                "-        <groupId>org.apache.maven.plugins</groupId>",
                "-        <artifactId>maven-surefire-plugin</artifactId>",
                "-        <configuration>",
                "-          <forkCount>1</forkCount>",
                "-          <reuseForks>false</reuseForks>",
                "-          <argLine>-Xmx1024m -XX:MaxPermSize=256m</argLine>",
                "-        </configuration>",
                "-      </plugin>",
                "-",
                "-      <plugin>",
                "-        <groupId>org.apache.maven.plugins</groupId>",
                "-        <artifactId>maven-dependency-plugin</artifactId>",
                "-        <executions>",
                "-          <execution>",
                "-            <id>copy-dependencies</id>",
                "-            <phase>package</phase>",
                "-            <goals>",
                "-              <goal>copy-dependencies</goal>",
                "-            </goals>",
                "-            <configuration>",
                "-              <outputDirectory>${project.build.directory}/../../interpreter/flink</outputDirectory>",
                "-              <overWriteReleases>false</overWriteReleases>",
                "-              <overWriteSnapshots>false</overWriteSnapshots>",
                "-              <overWriteIfNewer>true</overWriteIfNewer>",
                "-              <includeScope>runtime</includeScope>",
                "-            </configuration>",
                "-          </execution>",
                "-          <execution>",
                "-            <id>copy-artifact</id>",
                "-            <phase>package</phase>",
                "-            <goals>",
                "-              <goal>copy</goal>",
                "-            </goals>",
                "-            <configuration>",
                "-              <outputDirectory>${project.build.directory}/../../interpreter/flink</outputDirectory>",
                "-              <overWriteReleases>false</overWriteReleases>",
                "-              <overWriteSnapshots>false</overWriteSnapshots>",
                "-              <overWriteIfNewer>true</overWriteIfNewer>",
                "-              <includeScope>runtime</includeScope>",
                "-              <artifactItems>",
                "-                <artifactItem>",
                "-                  <groupId>${project.groupId}</groupId>",
                "-                  <artifactId>${project.artifactId}</artifactId>",
                "-                  <version>${project.version}</version>",
                "-                  <type>${project.packaging}</type>",
                "-                </artifactItem>",
                "-              </artifactItems>",
                "-            </configuration>",
                "-          </execution>",
                "-        </executions>",
                "-      </plugin>",
                "     </plugins>",
                "diff --git a/geode/pom.xml b/geode/pom.xml",
                "index e8eb9fc84..4a9dadd23 100644",
                "--- a/geode/pom.xml",
                "+++ b/geode/pom.xml",
                "@@ -23,5 +23,6 @@",
                "   <parent>",
                "-    <artifactId>zeppelin</artifactId>",
                "+    <artifactId>interpreter-parent</artifactId>",
                "     <groupId>org.apache.zeppelin</groupId>",
                "     <version>0.8.0-SNAPSHOT</version>",
                "+    <relativePath>../interpreter-parent</relativePath>",
                "   </parent>",
                "@@ -36,2 +37,3 @@",
                "     <!--library versions-->",
                "+    <interpreter.name>geode</interpreter.name>",
                "     <geode.version>1.1.0</geode.version>",
                "@@ -88,50 +90,8 @@",
                "         <artifactId>maven-enforcer-plugin</artifactId>",
                "-        <executions>",
                "-          <execution>",
                "-            <id>enforce</id>",
                "-            <phase>none</phase>",
                "-          </execution>",
                "-        </executions>",
                "       </plugin>",
                "-",
                "       <plugin>",
                "         <artifactId>maven-dependency-plugin</artifactId>",
                "-        <executions>",
                "-          <execution>",
                "-            <id>copy-dependencies</id>",
                "-            <phase>package</phase>",
                "-            <goals>",
                "-              <goal>copy-dependencies</goal>",
                "-            </goals>",
                "-            <configuration>",
                "-              <outputDirectory>${project.build.directory}/../../interpreter/geode</outputDirectory>",
                "-              <overWriteReleases>false</overWriteReleases>",
                "-              <overWriteSnapshots>false</overWriteSnapshots>",
                "-              <overWriteIfNewer>true</overWriteIfNewer>",
                "-              <includeScope>runtime</includeScope>",
                "-            </configuration>",
                "-          </execution>",
                "-          <execution>",
                "-            <id>copy-artifact</id>",
                "-            <phase>package</phase>",
                "-            <goals>",
                "-              <goal>copy</goal>",
                "-            </goals>",
                "-            <configuration>",
                "-              <outputDirectory>${project.build.directory}/../../interpreter/geode</outputDirectory>",
                "-              <overWriteReleases>false</overWriteReleases>",
                "-              <overWriteSnapshots>false</overWriteSnapshots>",
                "-              <overWriteIfNewer>true</overWriteIfNewer>",
                "-              <includeScope>runtime</includeScope>",
                "-              <artifactItems>",
                "-                <artifactItem>",
                "-                  <groupId>${project.groupId}</groupId>",
                "-                  <artifactId>${project.artifactId}</artifactId>",
                "-                  <version>${project.version}</version>",
                "-                  <type>${project.packaging}</type>",
                "-                </artifactItem>",
                "-              </artifactItems>",
                "-            </configuration>",
                "-          </execution>",
                "-        </executions>",
                "+      </plugin>",
                "+      <plugin>",
                "+        <artifactId>maven-resources-plugin</artifactId>",
                "       </plugin>",
                "diff --git a/groovy/pom.xml b/groovy/pom.xml",
                "index bee50bd82..64c51f856 100644",
                "--- a/groovy/pom.xml",
                "+++ b/groovy/pom.xml",
                "@@ -22,3 +22,3 @@",
                "   <parent>",
                "-    <artifactId>zeppelin</artifactId>",
                "+    <artifactId>interpreter-parent</artifactId>",
                "     <groupId>org.apache.zeppelin</groupId>",
                "@@ -26,3 +26,3 @@",
                "     <version>0.8.0-SNAPSHOT</version>",
                "-    <relativePath>..</relativePath>",
                "+    <relativePath>../interpreter-parent</relativePath>",
                "   </parent>",
                "@@ -35,2 +35,6 @@",
                "+  <properties>",
                "+    <interpreter.name>groovy</interpreter.name>",
                "+  </properties>",
                "+",
                "   <dependencies>",
                "@@ -69,77 +73,10 @@",
                "     <plugins>",
                "-      <plugin>",
                "-        <groupId>org.apache.maven.plugins</groupId>",
                "-        <artifactId>maven-compiler-plugin</artifactId>",
                "-        <version>3.1</version>",
                "-        <configuration>",
                "-          <showDeprecation>true</showDeprecation>",
                "-          <compilerArgs>",
                "-            <!--arg>-verbose</arg-->",
                "-            <arg>-Xlint:unchecked</arg>",
                "-          </compilerArgs>",
                "-        </configuration>",
                "-      </plugin>",
                "- ",
                "-      <!--TODO: comment local `maven-checkstyle-plugin` and use zeppelin common check style-->",
                "-      <plugin>",
                "-        <groupId>org.apache.maven.plugins</groupId>",
                "-        <artifactId>maven-checkstyle-plugin</artifactId>",
                "-        <configuration>",
                "-          <skip>true</skip>",
                "-        </configuration>",
                "-        <executions>",
                "-        </executions>",
                "-      </plugin>",
                "       <plugin>",
                "         <artifactId>maven-enforcer-plugin</artifactId>",
                "-        <version>1.3.1</version>            ",
                "-        <executions> ",
                "-          <execution> ",
                "-            <id>enforce</id> ",
                "-            <phase>none</phase> ",
                "-          </execution>",
                "-        </executions>",
                "       </plugin>",
                "-",
                "       <plugin>",
                "         <artifactId>maven-dependency-plugin</artifactId>",
                "-        <version>2.8</version>",
                "-        <executions>",
                "-          <execution>",
                "-            <id>copy-dependencies</id>",
                "-            <phase>package</phase>",
                "-            <goals>",
                "-              <goal>copy-dependencies</goal>",
                "-            </goals>",
                "-            <configuration>",
                "-              <outputDirectory>${project.build.directory}/../../interpreter/groovy</outputDirectory>",
                "-              <overWriteReleases>false</overWriteReleases>",
                "-              <overWriteSnapshots>false</overWriteSnapshots>",
                "-              <overWriteIfNewer>true</overWriteIfNewer>",
                "-              <includeScope>runtime</includeScope>",
                "-            </configuration>",
                "-          </execution>",
                "-          <execution>",
                "-            <id>copy-artifact</id>",
                "-            <phase>package</phase>",
                "-            <goals>",
                "-              <goal>copy</goal>",
                "-            </goals>",
                "-            <configuration>",
                "-              <outputDirectory>${project.build.directory}/../../interpreter/groovy</outputDirectory>",
                "-              <overWriteReleases>false</overWriteReleases>",
                "-              <overWriteSnapshots>false</overWriteSnapshots>",
                "-              <overWriteIfNewer>true</overWriteIfNewer>",
                "-              <includeScope>runtime</includeScope>",
                "-              <artifactItems>",
                "-                <artifactItem>",
                "-                  <groupId>${project.groupId}</groupId>",
                "-                  <artifactId>${project.artifactId}</artifactId>",
                "-                  <version>${project.version}</version>",
                "-                  <type>${project.packaging}</type>",
                "-                </artifactItem>",
                "-              </artifactItems>              ",
                "-            </configuration>",
                "-          </execution>",
                "-        </executions>",
                "+      </plugin>",
                "+      <plugin>",
                "+        <artifactId>maven-resources-plugin</artifactId>",
                "       </plugin>",
                "diff --git a/groovy/src/main/java/org/apache/zeppelin/groovy/GObject.java b/groovy/src/main/java/org/apache/zeppelin/groovy/GObject.java",
                "index 7f6809a89..ce7d00f64 100644",
                "--- a/groovy/src/main/java/org/apache/zeppelin/groovy/GObject.java",
                "+++ b/groovy/src/main/java/org/apache/zeppelin/groovy/GObject.java",
                "@@ -174,3 +174,3 @@ public class GObject extends groovy.lang.GroovyObjectSupport {",
                "    * <pre> g.html().with{",
                "-   * \th1(\"hello\")",
                "+   *  h1(\"hello\")",
                "    *  h2(\"world\")",
                "diff --git a/groovy/src/main/java/org/apache/zeppelin/groovy/GroovyInterpreter.java b/groovy/src/main/java/org/apache/zeppelin/groovy/GroovyInterpreter.java",
                "index e10828368..8c83ef783 100644",
                "--- a/groovy/src/main/java/org/apache/zeppelin/groovy/GroovyInterpreter.java",
                "+++ b/groovy/src/main/java/org/apache/zeppelin/groovy/GroovyInterpreter.java",
                "@@ -206,3 +206,3 @@ public class GroovyInterpreter extends Interpreter {",
                "           t.interrupt();",
                "-          //t.stop(); //TODO: need some way to terminate maybe through GObject..",
                "+          //t.stop(); //TODO(dlukyanov): need some way to terminate maybe through GObject..",
                "         } catch (Throwable t) {",
                "diff --git a/hbase/pom.xml b/hbase/pom.xml",
                "index 08b0cd707..8f27631ea 100644",
                "--- a/hbase/pom.xml",
                "+++ b/hbase/pom.xml",
                "@@ -22,5 +22,6 @@",
                "   <parent>",
                "-    <artifactId>zeppelin</artifactId>",
                "+    <artifactId>interpreter-parent</artifactId>",
                "     <groupId>org.apache.zeppelin</groupId>",
                "     <version>0.8.0-SNAPSHOT</version>",
                "+    <relativePath>../interpreter-parent</relativePath>",
                "   </parent>",
                "@@ -35,2 +36,3 @@",
                "     <!--library versions-->",
                "+    <interpreter.name>hbase</interpreter.name>",
                "     <hbase.hbase.version>1.0.0</hbase.hbase.version>",
                "@@ -117,50 +119,8 @@",
                "         <artifactId>maven-enforcer-plugin</artifactId>",
                "-        <executions>",
                "-          <execution>",
                "-            <id>enforce</id>",
                "-            <phase>none</phase>",
                "-          </execution>",
                "-        </executions>",
                "       </plugin>",
                "-",
                "       <plugin>",
                "         <artifactId>maven-dependency-plugin</artifactId>",
                "-        <executions>",
                "-          <execution>",
                "-            <id>copy-dependencies</id>",
                "-            <phase>package</phase>",
                "-            <goals>",
                "-              <goal>copy-dependencies</goal>",
                "-            </goals>",
                "-            <configuration>",
                "-              <outputDirectory>${project.build.directory}/../../interpreter/hbase</outputDirectory>",
                "-              <overWriteReleases>false</overWriteReleases>",
                "-              <overWriteSnapshots>false</overWriteSnapshots>",
                "-              <overWriteIfNewer>true</overWriteIfNewer>",
                "-              <includeScope>runtime</includeScope>",
                "-            </configuration>",
                "-          </execution>",
                "-          <execution>",
                "-            <id>copy-artifact</id>",
                "-            <phase>package</phase>",
                "-            <goals>",
                "-              <goal>copy</goal>",
                "-            </goals>",
                "-            <configuration>",
                "-              <outputDirectory>${project.build.directory}/../../interpreter/hbase</outputDirectory>",
                "-              <overWriteReleases>false</overWriteReleases>",
                "-              <overWriteSnapshots>false</overWriteSnapshots>",
                "-              <overWriteIfNewer>true</overWriteIfNewer>",
                "-              <includeScope>runtime</includeScope>",
                "-              <artifactItems>",
                "-                <artifactItem>",
                "-                  <groupId>${project.groupId}</groupId>",
                "-                  <artifactId>${project.artifactId}</artifactId>",
                "-                  <version>${project.version}</version>",
                "-                  <type>${project.packaging}</type>",
                "-                </artifactItem>",
                "-              </artifactItems>",
                "-            </configuration>",
                "-          </execution>",
                "-        </executions>",
                "+      </plugin>",
                "+      <plugin>",
                "+        <artifactId>maven-resources-plugin</artifactId>",
                "       </plugin>",
                "@@ -168,2 +128,3 @@",
                "   </build>",
                "+",
                " </project>",
                "diff --git a/helium-dev/pom.xml b/helium-dev/pom.xml",
                "index 77c4dee8e..8514946d7 100644",
                "--- a/helium-dev/pom.xml",
                "+++ b/helium-dev/pom.xml",
                "@@ -25,4 +25,5 @@",
                "     <groupId>org.apache.zeppelin</groupId>",
                "-    <artifactId>zeppelin</artifactId>",
                "+    <artifactId>interpreter-parent</artifactId>",
                "     <version>0.8.0-SNAPSHOT</version>",
                "+    <relativePath>../interpreter-parent</relativePath>",
                "   </parent>",
                "@@ -34,2 +35,6 @@",
                "+  <properties>",
                "+    <interpreter.name>helium-dev</interpreter.name>",
                "+  </properties>",
                "+",
                "   <dependencies>",
                "@@ -45,42 +50,10 @@",
                "     <plugins>",
                "+      <plugin>",
                "+        <artifactId>maven-enforcer-plugin</artifactId>",
                "+      </plugin>",
                "       <plugin>",
                "         <artifactId>maven-dependency-plugin</artifactId>",
                "-        <executions>",
                "-          <execution>",
                "-            <id>copy-dependencies</id>",
                "-            <phase>package</phase>",
                "-            <goals>",
                "-              <goal>copy-dependencies</goal>",
                "-            </goals>",
                "-            <configuration>",
                "-              <outputDirectory>${project.build.directory}/../../interpreter/helium-dev</outputDirectory>",
                "-              <overWriteReleases>false</overWriteReleases>",
                "-              <overWriteSnapshots>false</overWriteSnapshots>",
                "-              <overWriteIfNewer>true</overWriteIfNewer>",
                "-              <includeScope>runtime</includeScope>",
                "-            </configuration>",
                "-          </execution>",
                "-          <execution>",
                "-            <id>copy-artifact</id>",
                "-            <phase>package</phase>",
                "-            <goals>",
                "-              <goal>copy</goal>",
                "-            </goals>",
                "-            <configuration>",
                "-              <outputDirectory>${project.build.directory}/../../interpreter/helium-dev</outputDirectory>",
                "-              <overWriteReleases>false</overWriteReleases>",
                "-              <overWriteSnapshots>false</overWriteSnapshots>",
                "-              <overWriteIfNewer>true</overWriteIfNewer>",
                "-              <includeScope>runtime</includeScope>",
                "-              <artifactItems>",
                "-                <artifactItem>",
                "-                  <groupId>${project.groupId}</groupId>",
                "-                  <artifactId>${project.artifactId}</artifactId>",
                "-                  <version>${project.version}</version>",
                "-                  <type>${project.packaging}</type>",
                "-                </artifactItem>",
                "-              </artifactItems>",
                "-            </configuration>",
                "-          </execution>",
                "-        </executions>",
                "+      </plugin>",
                "+      <plugin>",
                "+        <artifactId>maven-resources-plugin</artifactId>",
                "       </plugin>",
                "diff --git a/ignite/pom.xml b/ignite/pom.xml",
                "index 9b1855c6f..ccbd37d8e 100644",
                "--- a/ignite/pom.xml",
                "+++ b/ignite/pom.xml",
                "@@ -22,6 +22,6 @@",
                "   <parent>",
                "-    <artifactId>zeppelin</artifactId>",
                "+    <artifactId>interpreter-parent</artifactId>",
                "     <groupId>org.apache.zeppelin</groupId>",
                "     <version>0.8.0-SNAPSHOT</version>",
                "-    <relativePath>..</relativePath>",
                "+    <relativePath>../interpreter-parent</relativePath>",
                "   </parent>",
                "@@ -34,2 +34,3 @@",
                "   <properties>",
                "+    <interpreter.name>ignite</interpreter.name>",
                "     <ignite.version>2.2.0</ignite.version>",
                "@@ -108,51 +109,8 @@",
                "         <artifactId>maven-enforcer-plugin</artifactId>",
                "-        <executions>",
                "-          <execution> ",
                "-            <id>enforce</id> ",
                "-            <phase>none</phase> ",
                "-          </execution>",
                "-        </executions>",
                "       </plugin>",
                "-",
                "       <plugin>",
                "-        <groupId>org.apache.maven.plugins</groupId>",
                "         <artifactId>maven-dependency-plugin</artifactId>",
                "-        <executions>",
                "-          <execution>",
                "-            <id>copy-dependencies</id>",
                "-            <phase>package</phase>",
                "-            <goals>",
                "-              <goal>copy-dependencies</goal>",
                "-            </goals>",
                "-            <configuration>",
                "-              <outputDirectory>${project.build.directory}/../../interpreter/ignite</outputDirectory>",
                "-              <overWriteReleases>false</overWriteReleases>",
                "-              <overWriteSnapshots>false</overWriteSnapshots>",
                "-              <overWriteIfNewer>true</overWriteIfNewer>",
                "-              <includeScope>runtime</includeScope>",
                "-            </configuration>",
                "-          </execution>",
                "-          <execution>",
                "-            <id>copy-artifact</id>",
                "-            <phase>package</phase>",
                "-            <goals>",
                "-              <goal>copy</goal>",
                "-            </goals>",
                "-            <configuration>",
                "-              <outputDirectory>${project.build.directory}/../../interpreter/ignite</outputDirectory>",
                "-              <overWriteReleases>false</overWriteReleases>",
                "-              <overWriteSnapshots>false</overWriteSnapshots>",
                "-              <overWriteIfNewer>true</overWriteIfNewer>",
                "-              <includeScope>runtime</includeScope>",
                "-              <artifactItems>",
                "-                <artifactItem>",
                "-                  <groupId>${project.groupId}</groupId>",
                "-                  <artifactId>${project.artifactId}</artifactId>",
                "-                  <version>${project.version}</version>",
                "-                  <type>${project.packaging}</type>",
                "-                </artifactItem>",
                "-              </artifactItems>              ",
                "-            </configuration>",
                "-          </execution>",
                "-        </executions>",
                "+      </plugin>",
                "+      <plugin>",
                "+        <artifactId>maven-resources-plugin</artifactId>",
                "       </plugin>",
                "diff --git a/interpreter-parent/pom.xml b/interpreter-parent/pom.xml",
                "new file mode 100644",
                "index 000000000..32bdc570e",
                "--- /dev/null",
                "+++ b/interpreter-parent/pom.xml",
                "@@ -0,0 +1,138 @@",
                "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "+<!--",
                "+  ~ Licensed to the Apache Software Foundation (ASF) under one or more",
                "+  ~ contributor license agreements.  See the NOTICE file distributed with",
                "+  ~ this work for additional information regarding copyright ownership.",
                "+  ~ The ASF licenses this file to You under the Apache License, Version 2.0",
                "+  ~ (the \"License\"); you may not use this file except in compliance with",
                "+  ~ the License.  You may obtain a copy of the License at",
                "+  ~",
                "+  ~    http://www.apache.org/licenses/LICENSE-2.0",
                "+  ~",
                "+  ~ Unless required by applicable law or agreed to in writing, software",
                "+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+  ~ See the License for the specific language governing permissions and",
                "+  ~ limitations under the License.",
                "+  -->",
                "+",
                "+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">",
                "+  <modelVersion>4.0.0</modelVersion>",
                "+",
                "+  <parent>",
                "+    <artifactId>zeppelin</artifactId>",
                "+    <groupId>org.apache.zeppelin</groupId>",
                "+    <version>0.8.0-SNAPSHOT</version>",
                "+    <relativePath>..</relativePath>",
                "+  </parent>",
                "+",
                "+  <groupId>org.apache.zeppelin</groupId>",
                "+  <artifactId>interpreter-parent</artifactId>",
                "+  <packaging>pom</packaging>",
                "+  <version>0.8.0-SNAPSHOT</version>",
                "+  <name>Zeppelin: Interpreter Parent</name>",
                "+",
                "+  <dependencyManagement>",
                "+    <dependencies>",
                "+      <dependency>",
                "+        <groupId>${project.groupId}</groupId>",
                "+        <artifactId>zeppelin-interpreter</artifactId>",
                "+        <version>0.8.0-SNAPSHOT</version>",
                "+        <scope>provided</scope>",
                "+      </dependency>",
                "+",
                "+      <dependency>",
                "+        <groupId>junit</groupId>",
                "+        <artifactId>junit</artifactId>",
                "+        <version>${junit.version}</version>",
                "+        <scope>test</scope>",
                "+      </dependency>",
                "+",
                "+      <dependency>",
                "+        <groupId>org.slf4j</groupId>",
                "+        <artifactId>slf4j-api</artifactId>",
                "+        <version>${slf4j.version}</version>",
                "+      </dependency>",
                "+",
                "+      <dependency>",
                "+        <groupId>org.slf4j</groupId>",
                "+        <artifactId>slf4j-log4j12</artifactId>",
                "+        <version>${slf4j.version}</version>",
                "+      </dependency>",
                "+    </dependencies>",
                "+  </dependencyManagement>",
                "+",
                "+  <build>",
                "+    <pluginManagement>",
                "+      <plugins>",
                "+        <plugin>",
                "+          <artifactId>maven-enforcer-plugin</artifactId>",
                "+          <executions>",
                "+            <execution>",
                "+              <id>enforce</id>",
                "+              <phase>none</phase>",
                "+            </execution>",
                "+          </executions>",
                "+        </plugin>",
                "+",
                "+        <plugin>",
                "+          <artifactId>maven-dependency-plugin</artifactId>",
                "+          <executions>",
                "+            <execution>",
                "+              <id>copy-interpreter-dependencies</id>",
                "+              <phase>package</phase>",
                "+              <goals>",
                "+                <goal>copy-dependencies</goal>",
                "+              </goals>",
                "+              <configuration>",
                "+                <outputDirectory>${project.build.directory}/../../interpreter/${interpreter.name}</outputDirectory>",
                "+                <overWriteReleases>false</overWriteReleases>",
                "+                <overWriteSnapshots>false</overWriteSnapshots>",
                "+                <overWriteIfNewer>true</overWriteIfNewer>",
                "+                <includeScope>runtime</includeScope>",
                "+              </configuration>",
                "+            </execution>",
                "+            <execution>",
                "+              <id>copy-artifact</id>",
                "+              <phase>package</phase>",
                "+              <goals>",
                "+                <goal>copy</goal>",
                "+              </goals>",
                "+              <configuration>",
                "+                <outputDirectory>${project.build.directory}/../../interpreter/${interpreter.name}</outputDirectory>",
                "+                <overWriteReleases>false</overWriteReleases>",
                "+                <overWriteSnapshots>false</overWriteSnapshots>",
                "+                <overWriteIfNewer>true</overWriteIfNewer>",
                "+                <artifactItems>",
                "+                  <artifactItem>",
                "+                    <groupId>${project.groupId}</groupId>",
                "+                    <artifactId>${project.artifactId}</artifactId>",
                "+                    <version>${project.version}</version>",
                "+                    <type>${project.packaging}</type>",
                "+                  </artifactItem>",
                "+                </artifactItems>",
                "+              </configuration>",
                "+            </execution>",
                "+          </executions>",
                "+        </plugin>",
                "+",
                "+        <plugin>",
                "+          <artifactId>maven-resources-plugin</artifactId>",
                "+          <executions>",
                "+            <execution>",
                "+              <id>copy-interpreter-setting</id>",
                "+              <phase>package</phase>",
                "+              <goals>",
                "+                <goal>resources</goal>",
                "+              </goals>",
                "+              <configuration>",
                "+                <outputDirectory>${project.build.directory}/../../interpreter/${interpreter.name}</outputDirectory>",
                "+              </configuration>",
                "+            </execution>",
                "+          </executions>",
                "+        </plugin>",
                "+      </plugins>",
                "+    </pluginManagement>",
                "+  </build>",
                "+",
                "+</project>",
                "diff --git a/jdbc/pom.xml b/jdbc/pom.xml",
                "index 71d33109e..beec50c0a 100644",
                "--- a/jdbc/pom.xml",
                "+++ b/jdbc/pom.xml",
                "@@ -23,5 +23,6 @@",
                "   <parent>",
                "-    <artifactId>zeppelin</artifactId>",
                "+    <artifactId>interpreter-parent</artifactId>",
                "     <groupId>org.apache.zeppelin</groupId>",
                "     <version>0.8.0-SNAPSHOT</version>",
                "+    <relativePath>../interpreter-parent</relativePath>",
                "   </parent>",
                "@@ -36,2 +37,3 @@",
                "     <!--library versions-->",
                "+    <interpreter.name>jdbc</interpreter.name>",
                "     <postgresql.version>9.4-1201-jdbc41</postgresql.version>",
                "@@ -160,50 +162,8 @@",
                "         <artifactId>maven-enforcer-plugin</artifactId>",
                "-        <executions>",
                "-          <execution>",
                "-            <id>enforce</id>",
                "-            <phase>none</phase>",
                "-          </execution>",
                "-        </executions>",
                "       </plugin>",
                "-",
                "       <plugin>",
                "         <artifactId>maven-dependency-plugin</artifactId>",
                "-        <executions>",
                "-          <execution>",
                "-            <id>copy-dependencies</id>",
                "-            <phase>package</phase>",
                "-            <goals>",
                "-              <goal>copy-dependencies</goal>",
                "-            </goals>",
                "-            <configuration>",
                "-              <outputDirectory>${project.build.directory}/../../interpreter/jdbc</outputDirectory>",
                "-              <overWriteReleases>false</overWriteReleases>",
                "-              <overWriteSnapshots>false</overWriteSnapshots>",
                "-              <overWriteIfNewer>true</overWriteIfNewer>",
                "-              <includeScope>runtime</includeScope>",
                "-            </configuration>",
                "-          </execution>",
                "-          <execution>",
                "-            <id>copy-artifact</id>",
                "-            <phase>package</phase>",
                "-            <goals>",
                "-              <goal>copy</goal>",
                "-            </goals>",
                "-            <configuration>",
                "-              <outputDirectory>${project.build.directory}/../../interpreter/jdbc</outputDirectory>",
                "-              <overWriteReleases>false</overWriteReleases>",
                "-              <overWriteSnapshots>false</overWriteSnapshots>",
                "-              <overWriteIfNewer>true</overWriteIfNewer>",
                "-              <includeScope>runtime</includeScope>",
                "-              <artifactItems>",
                "-                <artifactItem>",
                "-                  <groupId>${project.groupId}</groupId>",
                "-                  <artifactId>${project.artifactId}</artifactId>",
                "-                  <version>${project.version}</version>",
                "-                  <type>${project.packaging}</type>",
                "-                </artifactItem>",
                "-              </artifactItems>",
                "-            </configuration>",
                "-          </execution>",
                "-        </executions>",
                "+      </plugin>",
                "+      <plugin>",
                "+        <artifactId>maven-resources-plugin</artifactId>",
                "       </plugin>",
                "diff --git a/kylin/pom.xml b/kylin/pom.xml",
                "index c3559cd04..b70facbcc 100644",
                "--- a/kylin/pom.xml",
                "+++ b/kylin/pom.xml",
                "@@ -23,5 +23,6 @@",
                "     <parent>",
                "-        <artifactId>zeppelin</artifactId>",
                "+        <artifactId>interpreter-parent</artifactId>",
                "         <groupId>org.apache.zeppelin</groupId>",
                "         <version>0.8.0-SNAPSHOT</version>",
                "+        <relativePath>../interpreter-parent</relativePath>",
                "     </parent>",
                "@@ -35,2 +36,6 @@",
                "+    <properties>",
                "+        <interpreter.name>kylin</interpreter.name>",
                "+    </properties>",
                "+",
                "     <dependencies>",
                "@@ -63,50 +68,8 @@",
                "                 <artifactId>maven-enforcer-plugin</artifactId>",
                "-                <executions>",
                "-                    <execution>",
                "-                        <id>enforce</id>",
                "-                        <phase>none</phase>",
                "-                    </execution>",
                "-                </executions>",
                "             </plugin>",
                "-",
                "             <plugin>",
                "                 <artifactId>maven-dependency-plugin</artifactId>",
                "-                <executions>",
                "-                    <execution>",
                "-                        <id>copy-dependencies</id>",
                "-                        <phase>package</phase>",
                "-                        <goals>",
                "-                            <goal>copy-dependencies</goal>",
                "-                        </goals>",
                "-                        <configuration>",
                "-                            <outputDirectory>${project.build.directory}/../../interpreter/kylin</outputDirectory>",
                "-                            <overWriteReleases>false</overWriteReleases>",
                "-                            <overWriteSnapshots>false</overWriteSnapshots>",
                "-                            <overWriteIfNewer>true</overWriteIfNewer>",
                "-                            <includeScope>runtime</includeScope>",
                "-                        </configuration>",
                "-                    </execution>",
                "-                    <execution>",
                "-                        <id>copy-artifact</id>",
                "-                        <phase>package</phase>",
                "-                        <goals>",
                "-                            <goal>copy</goal>",
                "-                        </goals>",
                "-                        <configuration>",
                "-                            <outputDirectory>${project.build.directory}/../../interpreter/kylin</outputDirectory>",
                "-                            <overWriteReleases>false</overWriteReleases>",
                "-                            <overWriteSnapshots>false</overWriteSnapshots>",
                "-                            <overWriteIfNewer>true</overWriteIfNewer>",
                "-                            <includeScope>runtime</includeScope>",
                "-                            <artifactItems>",
                "-                                <artifactItem>",
                "-                                    <groupId>${project.groupId}</groupId>",
                "-                                    <artifactId>${project.artifactId}</artifactId>",
                "-                                    <version>${project.version}</version>",
                "-                                    <type>${project.packaging}</type>",
                "-                                </artifactItem>",
                "-                            </artifactItems>",
                "-                        </configuration>",
                "-                    </execution>",
                "-                </executions>",
                "+            </plugin>",
                "+            <plugin>",
                "+                <artifactId>maven-resources-plugin</artifactId>",
                "             </plugin>",
                "@@ -115,3 +78,2 @@",
                "-",
                " </project>",
                "diff --git a/lens/pom.xml b/lens/pom.xml",
                "index 032835579..ecc0a12ed 100644",
                "--- a/lens/pom.xml",
                "+++ b/lens/pom.xml",
                "@@ -22,6 +22,6 @@",
                "   <parent>",
                "-    <artifactId>zeppelin</artifactId>",
                "+    <artifactId>interpreter-parent</artifactId>",
                "     <groupId>org.apache.zeppelin</groupId>",
                "     <version>0.8.0-SNAPSHOT</version>",
                "-    <relativePath>..</relativePath>",
                "+    <relativePath>../interpreter-parent</relativePath>",
                "   </parent>",
                "@@ -36,2 +36,3 @@",
                "     <!--library versions-->",
                "+    <interpreter.name>lens</interpreter.name>",
                "     <lens.version>2.5.0-beta</lens.version>",
                "@@ -165,65 +166,9 @@",
                "         <artifactId>maven-enforcer-plugin</artifactId>",
                "-        <executions>",
                "-          <execution> ",
                "-            <id>enforce</id> ",
                "-            <phase>none</phase> ",
                "-          </execution>",
                "-        </executions>",
                "       </plugin>",
                "-",
                "       <plugin>",
                "         <artifactId>maven-dependency-plugin</artifactId>",
                "-        <executions>",
                "-          <execution>",
                "-            <id>copy-dependencies</id>",
                "-            <phase>package</phase>",
                "-            <goals>",
                "-              <goal>copy-dependencies</goal>",
                "-            </goals>",
                "-            <configuration>",
                "-              <outputDirectory>${project.build.directory}/../../interpreter/lens</outputDirectory>",
                "-              <overWriteReleases>false</overWriteReleases>",
                "-              <overWriteSnapshots>false</overWriteSnapshots>",
                "-              <overWriteIfNewer>true</overWriteIfNewer>",
                "-              <includeScope>runtime</includeScope>",
                "-            </configuration>",
                "-          </execution>",
                "-          <execution>",
                "-            <id>copy-artifact</id>",
                "-            <phase>package</phase>",
                "-            <goals>",
                "-              <goal>copy</goal>",
                "-            </goals>",
                "-            <configuration>",
                "-              <outputDirectory>${project.build.directory}/../../interpreter/lens</outputDirectory>",
                "-              <overWriteReleases>false</overWriteReleases>",
                "-              <overWriteSnapshots>false</overWriteSnapshots>",
                "-              <overWriteIfNewer>true</overWriteIfNewer>",
                "-              <includeScope>runtime</includeScope>",
                "-              <artifactItems>",
                "-                <artifactItem>",
                "-                  <groupId>${project.groupId}</groupId>",
                "-                  <artifactId>${project.artifactId}</artifactId>",
                "-                  <version>${project.version}</version>",
                "-                  <type>${project.packaging}</type>",
                "-                </artifactItem>",
                "-              </artifactItems>              ",
                "-            </configuration>",
                "-          </execution>",
                "-        </executions>",
                "       </plugin>",
                "-",
                "-\t<plugin>",
                "-          <groupId>org.apache.maven.plugins</groupId>",
                "-          <artifactId>maven-clean-plugin</artifactId>",
                "-          <configuration>",
                "-            <filesets>",
                "-              <fileset>",
                "-                <directory>${basedir}/../interpreter/lens</directory>",
                "-                <followSymlinks>false</followSymlinks>",
                "-              </fileset>",
                "-            </filesets>",
                "-          </configuration>",
                "-        </plugin>",
                "-",
                "+      <plugin>",
                "+        <artifactId>maven-resources-plugin</artifactId>",
                "+      </plugin>",
                "     </plugins>",
                "diff --git a/livy/pom.xml b/livy/pom.xml",
                "index e7217fb9d..0ec174a9c 100644",
                "--- a/livy/pom.xml",
                "+++ b/livy/pom.xml",
                "@@ -24,6 +24,6 @@",
                "     <parent>",
                "-        <artifactId>zeppelin</artifactId>",
                "+        <artifactId>interpreter-parent</artifactId>",
                "         <groupId>org.apache.zeppelin</groupId>",
                "         <version>0.8.0-SNAPSHOT</version>",
                "-        <relativePath>..</relativePath>",
                "+        <relativePath>../interpreter-parent</relativePath>",
                "     </parent>",
                "@@ -38,2 +38,3 @@",
                "         <!--library versions-->",
                "+        <interpreter.name>livy</interpreter.name>",
                "         <commons.exec.version>1.3</commons.exec.version>",
                "@@ -195,52 +196,8 @@",
                "                 <artifactId>maven-enforcer-plugin</artifactId>",
                "-                <executions>",
                "-                    <execution>",
                "-                        <id>enforce</id>",
                "-                        <phase>none</phase>",
                "-                    </execution>",
                "-                </executions>",
                "             </plugin>",
                "-",
                "             <plugin>",
                "                 <artifactId>maven-dependency-plugin</artifactId>",
                "-                <executions>",
                "-                    <execution>",
                "-                        <id>copy-dependencies</id>",
                "-                        <phase>package</phase>",
                "-                        <goals>",
                "-                            <goal>copy-dependencies</goal>",
                "-                        </goals>",
                "-                        <configuration>",
                "-                            <outputDirectory>${project.build.directory}/../../interpreter/livy",
                "-                            </outputDirectory>",
                "-                            <overWriteReleases>false</overWriteReleases>",
                "-                            <overWriteSnapshots>false</overWriteSnapshots>",
                "-                            <overWriteIfNewer>true</overWriteIfNewer>",
                "-                            <includeScope>runtime</includeScope>",
                "-                        </configuration>",
                "-                    </execution>",
                "-                    <execution>",
                "-                        <id>copy-artifact</id>",
                "-                        <phase>package</phase>",
                "-                        <goals>",
                "-                            <goal>copy</goal>",
                "-                        </goals>",
                "-                        <configuration>",
                "-                            <outputDirectory>${project.build.directory}/../../interpreter/livy",
                "-                            </outputDirectory>",
                "-                            <overWriteReleases>false</overWriteReleases>",
                "-                            <overWriteSnapshots>false</overWriteSnapshots>",
                "-                            <overWriteIfNewer>true</overWriteIfNewer>",
                "-                            <includeScope>runtime</includeScope>",
                "-                            <artifactItems>",
                "-                                <artifactItem>",
                "-                                    <groupId>${project.groupId}</groupId>",
                "-                                    <artifactId>${project.artifactId}</artifactId>",
                "-                                    <version>${project.version}</version>",
                "-                                    <type>${project.packaging}</type>",
                "-                                </artifactItem>",
                "-                            </artifactItems>",
                "-                        </configuration>",
                "-                    </execution>",
                "-                </executions>",
                "+            </plugin>",
                "+            <plugin>",
                "+                <artifactId>maven-resources-plugin</artifactId>",
                "             </plugin>",
                "diff --git a/markdown/pom.xml b/markdown/pom.xml",
                "index 9675aa709..ca9544980 100644",
                "--- a/markdown/pom.xml",
                "+++ b/markdown/pom.xml",
                "@@ -22,6 +22,6 @@",
                "   <parent>",
                "-    <artifactId>zeppelin</artifactId>",
                "+    <artifactId>interpreter-parent</artifactId>",
                "     <groupId>org.apache.zeppelin</groupId>",
                "     <version>0.8.0-SNAPSHOT</version>",
                "-    <relativePath>..</relativePath>",
                "+    <relativePath>../interpreter-parent</relativePath>",
                "   </parent>",
                "@@ -35,2 +35,3 @@",
                "   <properties>",
                "+    <interpreter.name>md</interpreter.name>",
                "     <commons.lang3.version>3.4</commons.lang3.version>",
                "@@ -87,50 +88,8 @@",
                "         <artifactId>maven-enforcer-plugin</artifactId>",
                "-        <executions>",
                "-          <execution> ",
                "-            <id>enforce</id> ",
                "-            <phase>none</phase> ",
                "-          </execution>",
                "-        </executions>",
                "       </plugin>",
                "-",
                "       <plugin>",
                "         <artifactId>maven-dependency-plugin</artifactId>",
                "-        <executions>",
                "-          <execution>",
                "-            <id>copy-dependencies</id>",
                "-            <phase>package</phase>",
                "-            <goals>",
                "-              <goal>copy-dependencies</goal>",
                "-            </goals>",
                "-            <configuration>",
                "-              <outputDirectory>${project.build.directory}/../../interpreter/md</outputDirectory>",
                "-              <overWriteReleases>false</overWriteReleases>",
                "-              <overWriteSnapshots>false</overWriteSnapshots>",
                "-              <overWriteIfNewer>true</overWriteIfNewer>",
                "-              <includeScope>runtime</includeScope>",
                "-            </configuration>",
                "-          </execution>",
                "-          <execution>",
                "-            <id>copy-artifact</id>",
                "-            <phase>package</phase>",
                "-            <goals>",
                "-              <goal>copy</goal>",
                "-            </goals>",
                "-            <configuration>",
                "-              <outputDirectory>${project.build.directory}/../../interpreter/md</outputDirectory>",
                "-              <overWriteReleases>false</overWriteReleases>",
                "-              <overWriteSnapshots>false</overWriteSnapshots>",
                "-              <overWriteIfNewer>true</overWriteIfNewer>",
                "-              <includeScope>runtime</includeScope>",
                "-              <artifactItems>",
                "-                <artifactItem>",
                "-                  <groupId>${project.groupId}</groupId>",
                "-                  <artifactId>${project.artifactId}</artifactId>",
                "-                  <version>${project.version}</version>",
                "-                  <type>${project.packaging}</type>",
                "-                </artifactItem>",
                "-              </artifactItems>              ",
                "-            </configuration>",
                "-          </execution>",
                "-        </executions>",
                "+      </plugin>",
                "+      <plugin>",
                "+        <artifactId>maven-resources-plugin</artifactId>",
                "       </plugin>",
                "diff --git a/pig/pom.xml b/pig/pom.xml",
                "index f76a3f90c..4a56a3429 100644",
                "--- a/pig/pom.xml",
                "+++ b/pig/pom.xml",
                "@@ -24,5 +24,6 @@",
                "     <parent>",
                "-        <artifactId>zeppelin</artifactId>",
                "+        <artifactId>interpreter-parent</artifactId>",
                "         <groupId>org.apache.zeppelin</groupId>",
                "         <version>0.8.0-SNAPSHOT</version>",
                "+        <relativePath>../interpreter-parent</relativePath>",
                "     </parent>",
                "@@ -38,2 +39,3 @@",
                "     <properties>",
                "+        <interpreter.name>pig</interpreter.name>",
                "         <pig.version>0.17.0</pig.version>",
                "@@ -177,54 +179,9 @@",
                "                 <artifactId>maven-enforcer-plugin</artifactId>",
                "-                <executions>",
                "-                    <execution>",
                "-                        <id>enforce</id>",
                "-                        <phase>none</phase>",
                "-                    </execution>",
                "-                </executions>",
                "             </plugin>",
                "-",
                "             <plugin>",
                "                 <artifactId>maven-dependency-plugin</artifactId>",
                "-                <executions>",
                "-                    <execution>",
                "-                        <id>copy-dependencies</id>",
                "-                        <phase>package</phase>",
                "-                        <goals>",
                "-                            <goal>copy-dependencies</goal>",
                "-                        </goals>",
                "-                        <configuration>",
                "-                            <outputDirectory>${project.build.directory}/../../interpreter/pig",
                "-                            </outputDirectory>",
                "-                            <overWriteReleases>false</overWriteReleases>",
                "-                            <overWriteSnapshots>false</overWriteSnapshots>",
                "-                            <overWriteIfNewer>true</overWriteIfNewer>",
                "-                            <includeScope>runtime</includeScope>",
                "-                        </configuration>",
                "-                    </execution>",
                "-                    <execution>",
                "-                        <id>copy-artifact</id>",
                "-                        <phase>package</phase>",
                "-                        <goals>",
                "-                            <goal>copy</goal>",
                "-                        </goals>",
                "-                        <configuration>",
                "-                            <outputDirectory>${project.build.directory}/../../interpreter/pig",
                "-                            </outputDirectory>",
                "-                            <overWriteReleases>false</overWriteReleases>",
                "-                            <overWriteSnapshots>false</overWriteSnapshots>",
                "-                            <overWriteIfNewer>true</overWriteIfNewer>",
                "-                            <includeScope>runtime</includeScope>",
                "-                            <artifactItems>",
                "-                                <artifactItem>",
                "-                                    <groupId>${project.groupId}</groupId>",
                "-                                    <artifactId>${project.artifactId}</artifactId>",
                "-                                    <version>${project.version}</version>",
                "-                                    <type>${project.packaging}</type>",
                "-                                </artifactItem>",
                "-                            </artifactItems>",
                "-                        </configuration>",
                "-                    </execution>",
                "-                </executions>",
                "             </plugin>",
                "-",
                "+            <plugin>",
                "+                <artifactId>maven-resources-plugin</artifactId>",
                "+            </plugin>",
                "             <plugin>",
                "diff --git a/python/pom.xml b/python/pom.xml",
                "index d46cd10c2..a906b5d5f 100644",
                "--- a/python/pom.xml",
                "+++ b/python/pom.xml",
                "@@ -22,6 +22,6 @@",
                "   <parent>",
                "-    <artifactId>zeppelin</artifactId>",
                "+    <artifactId>interpreter-parent</artifactId>",
                "     <groupId>org.apache.zeppelin</groupId>",
                "     <version>0.8.0-SNAPSHOT</version>",
                "-    <relativePath>..</relativePath>",
                "+    <relativePath>../interpreter-parent</relativePath>",
                "   </parent>",
                "@@ -35,2 +35,3 @@",
                "   <properties>",
                "+    <interpreter.name>python</interpreter.name>",
                "     <python.py4j.version>0.9.2</python.py4j.version>",
                "@@ -143,13 +144,2 @@",
                "-      <plugin>",
                "-        <artifactId>maven-enforcer-plugin</artifactId>",
                "-        <version>1.3.1</version>",
                "-        <executions>",
                "-          <execution>",
                "-            <id>enforce</id>",
                "-            <phase>none</phase>",
                "-          </execution>",
                "-        </executions>",
                "-      </plugin>",
                "-",
                "       <plugin>",
                "@@ -214,43 +204,10 @@",
                "+      <plugin>",
                "+        <artifactId>maven-enforcer-plugin</artifactId>",
                "+      </plugin>",
                "       <plugin>",
                "         <artifactId>maven-dependency-plugin</artifactId>",
                "-        <version>2.8</version>",
                "-        <executions>",
                "-          <execution>",
                "-            <id>copy-dependencies</id>",
                "-            <phase>package</phase>",
                "-            <goals>",
                "-              <goal>copy-dependencies</goal>",
                "-            </goals>",
                "-            <configuration>",
                "-              <outputDirectory>${project.build.directory}/../../interpreter/python</outputDirectory>",
                "-              <overWriteReleases>false</overWriteReleases>",
                "-              <overWriteSnapshots>false</overWriteSnapshots>",
                "-              <overWriteIfNewer>true</overWriteIfNewer>",
                "-              <includeScope>runtime</includeScope>",
                "-            </configuration>",
                "-          </execution>",
                "-          <execution>",
                "-            <id>copy-artifact</id>",
                "-            <phase>package</phase>",
                "-            <goals>",
                "-              <goal>copy</goal>",
                "-            </goals>",
                "-            <configuration>",
                "-              <outputDirectory>${project.build.directory}/../../interpreter/python</outputDirectory>",
                "-              <overWriteReleases>false</overWriteReleases>",
                "-              <overWriteSnapshots>false</overWriteSnapshots>",
                "-              <overWriteIfNewer>true</overWriteIfNewer>",
                "-              <includeScope>runtime</includeScope>",
                "-              <artifactItems>",
                "-                <artifactItem>",
                "-                  <groupId>${project.groupId}</groupId>",
                "-                  <artifactId>${project.artifactId}</artifactId>",
                "-                  <version>${project.version}</version>",
                "-                  <type>${project.packaging}</type>",
                "-                </artifactItem>",
                "-              </artifactItems>",
                "-            </configuration>",
                "-          </execution>",
                "-        </executions>",
                "+      </plugin>",
                "+      <plugin>",
                "+        <artifactId>maven-resources-plugin</artifactId>",
                "       </plugin>",
                "diff --git a/scalding/pom.xml b/scalding/pom.xml",
                "index cc1015f21..763afe0bb 100644",
                "--- a/scalding/pom.xml",
                "+++ b/scalding/pom.xml",
                "@@ -22,6 +22,6 @@",
                "   <parent>",
                "-    <artifactId>zeppelin</artifactId>",
                "+    <artifactId>interpreter-parent</artifactId>",
                "     <groupId>org.apache.zeppelin</groupId>",
                "     <version>0.8.0-SNAPSHOT</version>",
                "-    <relativePath>..</relativePath>",
                "+    <relativePath>../interpreter-parent</relativePath>",
                "   </parent>",
                "@@ -35,2 +35,3 @@",
                "   <properties>",
                "+    <interpreter.name>scalding</interpreter.name>",
                "     <!--library versions-->",
                "@@ -149,51 +150,10 @@",
                "         <artifactId>maven-enforcer-plugin</artifactId>",
                "-        <executions>",
                "-          <execution> ",
                "-            <id>enforce</id> ",
                "-            <phase>none</phase> ",
                "-          </execution>",
                "-        </executions>",
                "       </plugin>",
                "-",
                "       <plugin>",
                "         <artifactId>maven-dependency-plugin</artifactId>",
                "-        <executions>",
                "-          <execution>",
                "-            <id>copy-dependencies</id>",
                "-            <phase>package</phase>",
                "-            <goals>",
                "-              <goal>copy-dependencies</goal>",
                "-            </goals>",
                "-            <configuration>",
                "-              <outputDirectory>${project.build.directory}/../../interpreter/scalding</outputDirectory>",
                "-              <overWriteReleases>false</overWriteReleases>",
                "-              <overWriteSnapshots>false</overWriteSnapshots>",
                "-              <overWriteIfNewer>true</overWriteIfNewer>",
                "-              <includeScope>runtime</includeScope>",
                "-            </configuration>",
                "-          </execution>",
                "-          <execution>",
                "-            <id>copy-artifact</id>",
                "-            <phase>package</phase>",
                "-            <goals>",
                "-              <goal>copy</goal>",
                "-            </goals>",
                "-            <configuration>",
                "-              <outputDirectory>${project.build.directory}/../../interpreter/scalding</outputDirectory>",
                "-              <overWriteReleases>false</overWriteReleases>",
                "-              <overWriteSnapshots>false</overWriteSnapshots>",
                "-              <overWriteIfNewer>true</overWriteIfNewer>",
                "-              <includeScope>runtime</includeScope>",
                "-              <artifactItems>",
                "-                <artifactItem>",
                "-                  <groupId>${project.groupId}</groupId>",
                "-                  <artifactId>${project.artifactId}</artifactId>",
                "-                  <version>${project.version}</version>",
                "-                  <type>${project.packaging}</type>",
                "-                </artifactItem>",
                "-              </artifactItems>              ",
                "-            </configuration>",
                "-          </execution>",
                "-        </executions>",
                "       </plugin>",
                "+      <plugin>",
                "+        <artifactId>maven-resources-plugin</artifactId>",
                "+      </plugin>",
                "+",
                "       <!-- Plugin to compile Scala code -->",
                "diff --git a/scio/pom.xml b/scio/pom.xml",
                "index 3d17dc88e..27ccb0cc7 100644",
                "--- a/scio/pom.xml",
                "+++ b/scio/pom.xml",
                "@@ -22,6 +22,6 @@",
                "   <parent>",
                "-    <artifactId>zeppelin</artifactId>",
                "+    <artifactId>interpreter-parent</artifactId>",
                "     <groupId>org.apache.zeppelin</groupId>",
                "     <version>0.8.0-SNAPSHOT</version>",
                "-    <relativePath>..</relativePath>",
                "+    <relativePath>../interpreter-parent</relativePath>",
                "   </parent>",
                "@@ -36,2 +36,3 @@",
                "   <properties>",
                "+    <interpreter.name>scio</interpreter.name>",
                "     <!--library versions-->",
                "@@ -108,8 +109,8 @@",
                "         <artifactId>maven-enforcer-plugin</artifactId>",
                "-        <executions>",
                "-          <execution>",
                "-            <id>enforce</id>",
                "-            <phase>none</phase>",
                "-          </execution>",
                "-        </executions>",
                "+      </plugin>",
                "+      <plugin>",
                "+        <artifactId>maven-dependency-plugin</artifactId>",
                "+      </plugin>",
                "+      <plugin>",
                "+        <artifactId>maven-resources-plugin</artifactId>",
                "       </plugin>",
                "@@ -158,30 +159,2 @@",
                "-      <plugin>",
                "-        <groupId>org.apache.maven.plugins</groupId>",
                "-        <artifactId>maven-dependency-plugin</artifactId>",
                "-        <executions>",
                "-          <execution>",
                "-            <phase>package</phase>",
                "-            <goals>",
                "-              <goal>copy</goal>",
                "-            </goals>",
                "-            <configuration>",
                "-              <outputDirectory>${project.build.directory}/../../interpreter/scio</outputDirectory>",
                "-              <overWriteReleases>false</overWriteReleases>",
                "-              <overWriteSnapshots>false</overWriteSnapshots>",
                "-              <overWriteIfNewer>true</overWriteIfNewer>",
                "-              <includeScope>runtime</includeScope>",
                "-              <artifactItems>",
                "-                <artifactItem>",
                "-                  <groupId>${project.groupId}</groupId>",
                "-                  <artifactId>${project.artifactId}</artifactId>",
                "-                  <version>${project.version}</version>",
                "-                  <type>${project.packaging}</type>",
                "-                </artifactItem>",
                "-              </artifactItems>",
                "-            </configuration>",
                "-          </execution>",
                "-        </executions>",
                "-      </plugin>",
                "-",
                "       <plugin>",
                "diff --git a/shell/pom.xml b/shell/pom.xml",
                "index 58d890084..0157d86f5 100644",
                "--- a/shell/pom.xml",
                "+++ b/shell/pom.xml",
                "@@ -22,6 +22,6 @@",
                "   <parent>",
                "-    <artifactId>zeppelin</artifactId>",
                "+    <artifactId>interpreter-parent</artifactId>",
                "     <groupId>org.apache.zeppelin</groupId>",
                "     <version>0.8.0-SNAPSHOT</version>",
                "-    <relativePath>..</relativePath>",
                "+    <relativePath>../interpreter-parent</relativePath>",
                "   </parent>",
                "@@ -35,2 +35,4 @@",
                "   <properties>",
                "+    <interpreter.name>sh</interpreter.name>",
                "+",
                "     <!--library versions -->",
                "@@ -38,2 +40,3 @@",
                "     <commons.exec.version>1.3</commons.exec.version>",
                "+    <interpreter.name>sh</interpreter.name>",
                "   </properties>",
                "@@ -44,4 +47,2 @@",
                "       <artifactId>zeppelin-interpreter</artifactId>",
                "-      <version>${project.version}</version>",
                "-      <scope>provided</scope>",
                "     </dependency>",
                "@@ -81,50 +82,8 @@",
                "         <artifactId>maven-enforcer-plugin</artifactId>",
                "-        <executions>",
                "-          <execution> ",
                "-            <id>enforce</id> ",
                "-            <phase>none</phase> ",
                "-          </execution>",
                "-        </executions>",
                "       </plugin>",
                "-",
                "       <plugin>",
                "         <artifactId>maven-dependency-plugin</artifactId>",
                "-        <executions>",
                "-          <execution>",
                "-            <id>copy-dependencies</id>",
                "-            <phase>package</phase>",
                "-            <goals>",
                "-              <goal>copy-dependencies</goal>",
                "-            </goals>",
                "-            <configuration>",
                "-              <outputDirectory>${project.build.directory}/../../interpreter/sh</outputDirectory>",
                "-              <overWriteReleases>false</overWriteReleases>",
                "-              <overWriteSnapshots>false</overWriteSnapshots>",
                "-              <overWriteIfNewer>true</overWriteIfNewer>",
                "-              <includeScope>runtime</includeScope>",
                "-            </configuration>",
                "-          </execution>",
                "-          <execution>",
                "-            <id>copy-artifact</id>",
                "-            <phase>package</phase>",
                "-            <goals>",
                "-              <goal>copy</goal>",
                "-            </goals>",
                "-            <configuration>",
                "-              <outputDirectory>${project.build.directory}/../../interpreter/sh</outputDirectory>",
                "-              <overWriteReleases>false</overWriteReleases>",
                "-              <overWriteSnapshots>false</overWriteSnapshots>",
                "-              <overWriteIfNewer>true</overWriteIfNewer>",
                "-              <includeScope>runtime</includeScope>",
                "-              <artifactItems>",
                "-                <artifactItem>",
                "-                  <groupId>${project.groupId}</groupId>",
                "-                  <artifactId>${project.artifactId}</artifactId>",
                "-                  <version>${project.version}</version>",
                "-                  <type>${project.packaging}</type>",
                "-                </artifactItem>",
                "-              </artifactItems>              ",
                "-            </configuration>",
                "-          </execution>",
                "-        </executions>",
                "+      </plugin>",
                "+      <plugin>",
                "+        <artifactId>maven-resources-plugin</artifactId>",
                "       </plugin>",
                "diff --git a/zeppelin-interpreter/pom.xml b/zeppelin-interpreter/pom.xml",
                "index d08ce4edf..00184dacf 100644",
                "--- a/zeppelin-interpreter/pom.xml",
                "+++ b/zeppelin-interpreter/pom.xml",
                "@@ -234,2 +234,77 @@",
                "   </dependencies>",
                "+",
                "+  <build>",
                "+    <pluginManagement>",
                "+      <plugins>",
                "+",
                "+        <plugin>",
                "+          <artifactId>maven-enforcer-plugin</artifactId>",
                "+          <executions>",
                "+            <execution>",
                "+              <id>enforce</id>",
                "+              <phase>none</phase>",
                "+            </execution>",
                "+          </executions>",
                "+        </plugin>",
                "+",
                "+        <plugin>",
                "+          <artifactId>maven-dependency-plugin</artifactId>",
                "+          <executions>",
                "+            <execution>",
                "+              <id>copy-dependencies</id>",
                "+              <phase>package</phase>",
                "+              <goals>",
                "+                <goal>copy-dependencies</goal>",
                "+              </goals>",
                "+              <configuration>",
                "+                <outputDirectory>${basedir}/interpreter/${project.name}</outputDirectory>",
                "+                <overWriteReleases>false</overWriteReleases>",
                "+                <overWriteSnapshots>false</overWriteSnapshots>",
                "+                <overWriteIfNewer>true</overWriteIfNewer>",
                "+                <includeScope>runtime</includeScope>",
                "+              </configuration>",
                "+            </execution>",
                "+            <execution>",
                "+              <id>copy-artifact</id>",
                "+              <phase>package</phase>",
                "+              <goals>",
                "+                <goal>copy</goal>",
                "+              </goals>",
                "+              <configuration>",
                "+                <outputDirectory>${basedir}/interpreter/${project.name}</outputDirectory>",
                "+                <overWriteReleases>false</overWriteReleases>",
                "+                <overWriteSnapshots>false</overWriteSnapshots>",
                "+                <overWriteIfNewer>true</overWriteIfNewer>",
                "+                <artifactItems>",
                "+                  <artifactItem>",
                "+                    <groupId>${project.groupId}</groupId>",
                "+                    <artifactId>${project.artifactId}</artifactId>",
                "+                    <version>${project.version}</version>",
                "+                    <type>${project.packaging}</type>",
                "+                  </artifactItem>",
                "+                </artifactItems>",
                "+              </configuration>",
                "+            </execution>",
                "+          </executions>",
                "+        </plugin>",
                "+",
                "+        <plugin>",
                "+          <artifactId>maven-resources-plugin</artifactId>",
                "+          <executions>",
                "+            <execution>",
                "+              <id>copy-resources</id>",
                "+              <phase>package</phase>",
                "+              <goals>",
                "+                <goal>resources</goal>",
                "+              </goals>",
                "+              <configuration>",
                "+                <outputDirectory>${basedir}/interpreter/{project.name}</outputDirectory>",
                "+              </configuration>",
                "+            </execution>",
                "+          </executions>",
                "+        </plugin>",
                "+      </plugins>",
                "+    </pluginManagement>",
                "+  </build>",
                "+",
                " </project>",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java",
                "index 4b130e39b..9dfce219e 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java",
                "@@ -194,4 +194,11 @@ public class InterpreterSettingManager {",
                "                   interpreterSettingTemplate.getProperties()));",
                "-          mergedProperties.putAll(InterpreterSetting.convertInterpreterProperties(",
                "-              savedInterpreterSetting.getProperties()));",
                "+          Map<String, InterpreterProperty> savedProperties = InterpreterSetting",
                "+              .convertInterpreterProperties(savedInterpreterSetting.getProperties());",
                "+          for (Map.Entry<String, InterpreterProperty> entry : savedProperties.entrySet()) {",
                "+            // only merge properties whose value is not empty",
                "+            if (entry.getValue().getValue() != null && !",
                "+                StringUtils.isBlank(entry.getValue().toString())) {",
                "+              mergedProperties.put(entry.getKey(), entry.getValue());",
                "+            }",
                "+          }",
                "           savedInterpreterSetting.setProperties(mergedProperties);"
            ],
            "changed_files": [
                "alluxio/pom.xml",
                "angular/pom.xml",
                "beam/pom.xml",
                "bigquery/pom.xml",
                "cassandra/pom.xml",
                "elasticsearch/pom.xml",
                "file/pom.xml",
                "flink/pom.xml",
                "geode/pom.xml",
                "groovy/pom.xml",
                "groovy/src/main/java/org/apache/zeppelin/groovy/GObject.java",
                "groovy/src/main/java/org/apache/zeppelin/groovy/GroovyInterpreter.java",
                "hbase/pom.xml",
                "helium-dev/pom.xml",
                "ignite/pom.xml",
                "interpreter-parent/pom.xml",
                "jdbc/pom.xml",
                "kylin/pom.xml",
                "lens/pom.xml",
                "livy/pom.xml",
                "markdown/pom.xml",
                "pig/pom.xml",
                "python/pom.xml",
                "scalding/pom.xml",
                "scio/pom.xml",
                "shell/pom.xml",
                "zeppelin-interpreter/pom.xml",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-2982": ""
            },
            "ghissue_refs": {
                "2613": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-2982",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2613",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "14427442ee9db0248ec9aa26b23c82cca450d2e1",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1510153701,
            "hunks": 1,
            "message": "[ZEPPELIN-3042] updating jgit to support post-commit hooks ### What is this PR for? Git functionality in Zeppelin is provided by `jgit`, but it's fixed to an old version. A newer version of said library supports new things, primarily post-commit hooks. ### What type of PR is it? Improvement ### Todos * [ x ] - CI ([two failed, but due to yarn](https://travis-ci.org/kokes/zeppelin)) ### What is the Jira issue? [ZEPPELIN-3042](https://issues.apache.org/jira/browse/ZEPPELIN-3042) ### Questions: * Does the licenses files need update? -- Yes, only because the license file notes the exact version of included libraries. `jgit` hasn't changed, license-wise, so it's only a matter of updating the version information * Is there breaking changes for older versions? -- nope * Does this needs documentation? -- possibly, to let people know they get use post-commit hooks now? Author: Ondrej Kokes <ondrej.kokes@gmail.com> Closes #2658 from kokes/jgit-update and squashes the following commits: a2cde16 [Ondrej Kokes] [ZEPPELIN-3042] newer jgit supports post-commit hooks a4fc816 [Ondrej Kokes] [ZEPPELIN-3042] newer jgit supports post-commit hooks",
            "diff": [
                "diff --git a/zeppelin-zengine/pom.xml b/zeppelin-zengine/pom.xml",
                "index d1a227052..a29d4a095 100644",
                "--- a/zeppelin-zengine/pom.xml",
                "+++ b/zeppelin-zengine/pom.xml",
                "@@ -48,3 +48,3 @@",
                "     <xml.apis.version>1.4.01</xml.apis.version>",
                "-    <eclipse.jgit.version>4.1.1.201511131810-r</eclipse.jgit.version>",
                "+    <eclipse.jgit.version>4.9.0.201710071750-r</eclipse.jgit.version>",
                "     <frontend.maven.plugin.version>1.3</frontend.maven.plugin.version>"
            ],
            "changed_files": [
                "zeppelin-zengine/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3042": ""
            },
            "ghissue_refs": {
                "2658": "[hotfix] Downgrade JGit from 4.9.0 to 4.5.4 #2693"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3042",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2658",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "922a228bcb237431bc76caa0f21805d80c58a256",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1514507270,
            "hunks": 1,
            "message": "ZEPPELIN-3119. Build issue with CDH ### What is this PR for? This PR is for building Zeppelin with CDH. Build command ``` mvn clean package -Pspark-1.6 -Ppyspark -Dhadoop.version=2.6.0-cdh5.12.0 -Phadoop-2.6 -Pscala-2.10  -Pyarn -DskipTests ``` ### What type of PR is it? [Bug Fix] ### Todos * [ ] - Task ### What is the Jira issue? * https://issues.apache.org/jira/browse/ZEPPELIN-3119 ### How should this be tested? * Build it manually with CDH ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Jeff Zhang <zjffdu@apache.org> Closes #2723 from zjffdu/ZEPPELIN-3119 and squashes the following commits: ffaf137 [Jeff Zhang] ZEPPELIN-3119. Build issue with CDH",
            "diff": [
                "diff --git a/zeppelin-zengine/pom.xml b/zeppelin-zengine/pom.xml",
                "index fd2d1dca9..070470572 100644",
                "--- a/zeppelin-zengine/pom.xml",
                "+++ b/zeppelin-zengine/pom.xml",
                "@@ -366,2 +366,26 @@",
                "         </exclusion>",
                "+        <exclusion>",
                "+          <groupId>com.fasterxml.jackson.core</groupId>",
                "+          <artifactId>jackson-core</artifactId>",
                "+        </exclusion>",
                "+        <exclusion>",
                "+          <groupId>org.codehaus.jackson</groupId>",
                "+          <artifactId>jackson-mapper-asl</artifactId>",
                "+        </exclusion>",
                "+        <exclusion>",
                "+          <groupId>com.fasterxml.jackson.core</groupId>",
                "+          <artifactId>jackson-annotations</artifactId>",
                "+        </exclusion>",
                "+        <exclusion>",
                "+          <groupId>org.apache.zookeeper</groupId>",
                "+          <artifactId>zookeeper</artifactId>",
                "+        </exclusion>",
                "+        <exclusion>",
                "+          <groupId>org.codehaus.jackson</groupId>",
                "+          <artifactId>jackson-core-asl</artifactId>",
                "+        </exclusion>",
                "+        <exclusion>",
                "+          <groupId>com.fasterxml.jackson.core</groupId>",
                "+          <artifactId>jackson-databind</artifactId>",
                "+        </exclusion>",
                "       </exclusions>"
            ],
            "changed_files": [
                "zeppelin-zengine/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3119": ""
            },
            "ghissue_refs": {
                "2723": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3119",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2723",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "88bdee718622857ce74f941c52ff2053dde5a6d9",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1506713751,
            "hunks": 4,
            "message": "[ZEPPELIN-2961] Remove unnecessary interpreter-setting.json file in the spark interpreter. ### What is this PR for? Based on Leemoonsoo 's work in #2602 , remove the unnecessary `interpreter-setting.json` ### What type of PR is it? [ Improvement ] ### Todos * [ ] - Task ### What is the Jira issue? * https://issues.apache.org/jira/browse/ZEPPELIN-2961 ### How should this be tested? * Travis build pass and manually verified. ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Lee moon soo <moon@apache.org> Closes #2724 from zjffdu/ZEPPELIN-2961 and squashes the following commits: 1c5cb83 [Lee moon soo] [ZEPPELIN-2961] Remove unnecessary interpreter-setting.json file in the spark interpreter.",
            "diff": [
                "diff --git a/spark/pom.xml b/spark/pom.xml",
                "index 36e4a6cbf..71110e30a 100644",
                "--- a/spark/pom.xml",
                "+++ b/spark/pom.xml",
                "@@ -342,15 +342,2 @@",
                "   <build>",
                "-    <!-- sparkr resources -->",
                "-    <resources>",
                "-      <resource>",
                "-        <directory>src/main/resources</directory>",
                "-        <excludes>",
                "-          <exclude>interpreter-setting.json</exclude>",
                "-        </excludes>",
                "-      </resource>",
                "-      <resource>",
                "-        <directory>src/main/sparkr-resources</directory>",
                "-      </resource>",
                "-    </resources>",
                "-",
                "     <plugins>",
                "@@ -551,2 +538,18 @@",
                "       </plugin>",
                "+",
                "+      <plugin>",
                "+        <artifactId>maven-resources-plugin</artifactId>",
                "+        <executions>",
                "+          <execution>",
                "+            <id>copy-interpreter-setting</id>",
                "+            <phase>package</phase>",
                "+            <goals>",
                "+              <goal>resources</goal>",
                "+            </goals>",
                "+            <configuration>",
                "+              <outputDirectory>${project.build.directory}/../../interpreter/spark</outputDirectory>",
                "+            </configuration>",
                "+          </execution>",
                "+        </executions>",
                "+      </plugin>",
                "     </plugins>",
                "diff --git a/spark/src/main/resources/interpreter-setting.json b/spark/src/main/resources/interpreter-setting.json",
                "index d656532eb..f98bd7212 100644",
                "--- a/spark/src/main/resources/interpreter-setting.json",
                "+++ b/spark/src/main/resources/interpreter-setting.json",
                "@@ -185,2 +185,41 @@",
                "     }",
                "+  },",
                "+  {",
                "+    \"group\": \"spark\",",
                "+    \"name\": \"r\",",
                "+    \"className\": \"org.apache.zeppelin.spark.SparkRInterpreter\",",
                "+    \"properties\": {",
                "+      \"zeppelin.R.knitr\": {",
                "+        \"envName\": \"ZEPPELIN_R_KNITR\",",
                "+        \"propertyName\": \"zeppelin.R.knitr\",",
                "+        \"defaultValue\": true,",
                "+        \"description\": \"whether use knitr or not\",",
                "+        \"type\": \"checkbox\"",
                "+      },",
                "+      \"zeppelin.R.cmd\": {",
                "+        \"envName\": \"ZEPPELIN_R_CMD\",",
                "+        \"propertyName\": \"zeppelin.R.cmd\",",
                "+        \"defaultValue\": \"R\",",
                "+        \"description\": \"R repl path\",",
                "+        \"type\": \"string\"",
                "+      },",
                "+      \"zeppelin.R.image.width\": {",
                "+        \"envName\": \"ZEPPELIN_R_IMAGE_WIDTH\",",
                "+        \"propertyName\": \"zeppelin.R.image.width\",",
                "+        \"defaultValue\": \"100%\",",
                "+        \"description\": \"\",",
                "+        \"type\": \"number\"",
                "+      },",
                "+      \"zeppelin.R.render.options\": {",
                "+        \"envName\": \"ZEPPELIN_R_RENDER_OPTIONS\",",
                "+        \"propertyName\": \"zeppelin.R.render.options\",",
                "+        \"defaultValue\": \"out.format = 'html', comment = NA, echo = FALSE, results = 'asis', message = F, warning = F\",",
                "+        \"description\": \"\",",
                "+        \"type\": \"textarea\"",
                "+      }",
                "+    },",
                "+    \"editor\": {",
                "+      \"language\": \"r\",",
                "+      \"editOnDblClick\": false",
                "+    }",
                "   }",
                "diff --git a/spark/src/main/sparkr-resources/interpreter-setting.json b/spark/src/main/sparkr-resources/interpreter-setting.json",
                "deleted file mode 100644",
                "index 300aff031..000000000",
                "--- a/spark/src/main/sparkr-resources/interpreter-setting.json",
                "+++ /dev/null",
                "@@ -1,204 +0,0 @@",
                "-[",
                "-  {",
                "-    \"group\": \"spark\",",
                "-    \"name\": \"spark\",",
                "-    \"className\": \"org.apache.zeppelin.spark.SparkInterpreter\",",
                "-    \"defaultInterpreter\": true,",
                "-    \"properties\": {",
                "-      \"spark.executor.memory\": {",
                "-        \"envName\": null,",
                "-        \"propertyName\": \"spark.executor.memory\",",
                "-        \"defaultValue\": \"\",",
                "-        \"description\": \"Executor memory per worker instance. ex) 512m, 32g\",",
                "-        \"type\": \"string\"",
                "-      },",
                "-      \"args\": {",
                "-        \"envName\": null,",
                "-        \"propertyName\": null,",
                "-        \"defaultValue\": \"\",",
                "-        \"description\": \"spark commandline args\",",
                "-        \"type\": \"string\"",
                "-      },",
                "-      \"zeppelin.spark.useHiveContext\": {",
                "-        \"envName\": \"ZEPPELIN_SPARK_USEHIVECONTEXT\",",
                "-        \"propertyName\": \"zeppelin.spark.useHiveContext\",",
                "-        \"defaultValue\": true,",
                "-        \"description\": \"Use HiveContext instead of SQLContext if it is true.\",",
                "-        \"type\": \"checkbox\"",
                "-      },",
                "-      \"spark.app.name\": {",
                "-        \"envName\": \"SPARK_APP_NAME\",",
                "-        \"propertyName\": \"spark.app.name\",",
                "-        \"defaultValue\": \"Zeppelin\",",
                "-        \"description\": \"The name of spark application.\",",
                "-        \"type\": \"string\"",
                "-      },",
                "-      \"zeppelin.spark.printREPLOutput\": {",
                "-        \"envName\": null,",
                "-        \"propertyName\": \"zeppelin.spark.printREPLOutput\",",
                "-        \"defaultValue\": true,",
                "-        \"description\": \"Print REPL output\",",
                "-        \"type\": \"checkbox\"",
                "-      },",
                "-      \"spark.cores.max\": {",
                "-        \"envName\": null,",
                "-        \"propertyName\": \"spark.cores.max\",",
                "-        \"defaultValue\": \"\",",
                "-        \"description\": \"Total number of cores to use. Empty value uses all available core.\",",
                "-        \"type\": \"number\"",
                "-      },",
                "-      \"zeppelin.spark.maxResult\": {",
                "-        \"envName\": \"ZEPPELIN_SPARK_MAXRESULT\",",
                "-        \"propertyName\": \"zeppelin.spark.maxResult\",",
                "-        \"defaultValue\": \"1000\",",
                "-        \"description\": \"Max number of Spark SQL result to display.\",",
                "-        \"type\": \"number\"",
                "-      },",
                "-      \"master\": {",
                "-        \"envName\": \"MASTER\",",
                "-        \"propertyName\": \"spark.master\",",
                "-        \"defaultValue\": \"local[*]\",",
                "-        \"description\": \"Spark master uri. ex) spark://masterhost:7077\",",
                "-        \"type\": \"string\"",
                "-      },",
                "-      \"zeppelin.spark.unSupportedVersionCheck\": {",
                "-        \"envName\": null,",
                "-        \"propertyName\": \"zeppelin.spark.enableSupportedVersionCheck\",",
                "-        \"defaultValue\": true,",
                "-        \"description\": \"Do not change - developer only setting, not for production use\",",
                "-        \"type\": \"checkbox\"",
                "-      }",
                "-    },",
                "-    \"editor\": {",
                "-      \"language\": \"scala\"",
                "-    }",
                "-  },",
                "-  {",
                "-    \"group\": \"spark\",",
                "-    \"name\": \"sql\",",
                "-    \"className\": \"org.apache.zeppelin.spark.SparkSqlInterpreter\",",
                "-    \"properties\": {",
                "-      \"zeppelin.spark.concurrentSQL\": {",
                "-        \"envName\": \"ZEPPELIN_SPARK_CONCURRENTSQL\",",
                "-        \"propertyName\": \"zeppelin.spark.concurrentSQL\",",
                "-        \"defaultValue\": false,",
                "-        \"description\": \"Execute multiple SQL concurrently if set true.\",",
                "-        \"type\": \"checkbox\"",
                "-      },",
                "-      \"zeppelin.spark.sql.stacktrace\": {",
                "-        \"envName\": \"ZEPPELIN_SPARK_SQL_STACKTRACE\",",
                "-        \"propertyName\": \"zeppelin.spark.sql.stacktrace\",",
                "-        \"defaultValue\": false,",
                "-        \"description\": \"Show full exception stacktrace for SQL queries if set to true.\",",
                "-        \"type\": \"checkbox\"",
                "-      },",
                "-      \"zeppelin.spark.maxResult\": {",
                "-        \"envName\": \"ZEPPELIN_SPARK_MAXRESULT\",",
                "-        \"propertyName\": \"zeppelin.spark.maxResult\",",
                "-        \"defaultValue\": \"1000\",",
                "-        \"description\": \"Max number of Spark SQL result to display.\",",
                "-        \"type\": \"number\"",
                "-      },",
                "-      \"zeppelin.spark.importImplicit\": {",
                "-        \"envName\": \"ZEPPELIN_SPARK_IMPORTIMPLICIT\",",
                "-        \"propertyName\": \"zeppelin.spark.importImplicit\",",
                "-        \"defaultValue\": true,",
                "-        \"description\": \"Import implicits, UDF collection, and sql if set true. true by default.\",",
                "-        \"type\": \"checkbox\"",
                "-      }",
                "-    },",
                "-    \"editor\": {",
                "-      \"language\": \"sql\"",
                "-    }",
                "-  },",
                "-  {",
                "-    \"group\": \"spark\",",
                "-    \"name\": \"dep\",",
                "-    \"className\": \"org.apache.zeppelin.spark.DepInterpreter\",",
                "-    \"properties\": {",
                "-      \"zeppelin.dep.localrepo\": {",
                "-        \"envName\": \"ZEPPELIN_DEP_LOCALREPO\",",
                "-        \"propertyName\": null,",
                "-        \"defaultValue\": \"local-repo\",",
                "-        \"description\": \"local repository for dependency loader\",",
                "-        \"type\": \"string\"",
                "-      },",
                "-      \"zeppelin.dep.additionalRemoteRepository\": {",
                "-        \"envName\": null,",
                "-        \"propertyName\": null,",
                "-        \"defaultValue\": \"spark-packages,http://dl.bintray.com/spark-packages/maven,false;\",",
                "-        \"description\": \"A list of 'id,remote-repository-URL,is-snapshot;' for each remote repository.\",",
                "-        \"type\": \"textarea\"",
                "-      }",
                "-    },",
                "-    \"editor\": {",
                "-      \"language\": \"scala\"",
                "-    }",
                "-  },",
                "-  {",
                "-    \"group\": \"spark\",",
                "-    \"name\": \"pyspark\",",
                "-    \"className\": \"org.apache.zeppelin.spark.PySparkInterpreter\",",
                "-    \"properties\": {",
                "-      \"zeppelin.pyspark.python\": {",
                "-        \"envName\": \"PYSPARK_PYTHON\",",
                "-        \"propertyName\": null,",
                "-        \"defaultValue\": \"python\",",
                "-        \"description\": \"Python command to run pyspark with\",",
                "-        \"type\": \"string\"",
                "-      }",
                "-    },",
                "-    \"editor\": {",
                "-      \"language\": \"python\"",
                "-    }",
                "-  },",
                "-  {",
                "-    \"group\": \"spark\",",
                "-    \"name\": \"r\",",
                "-    \"className\": \"org.apache.zeppelin.spark.SparkRInterpreter\",",
                "-    \"properties\": {",
                "-      \"zeppelin.R.knitr\": {",
                "-        \"envName\": \"ZEPPELIN_R_KNITR\",",
                "-        \"propertyName\": \"zeppelin.R.knitr\",",
                "-        \"defaultValue\": true,",
                "-        \"description\": \"whether use knitr or not\",",
                "-        \"type\": \"checkbox\"",
                "-      },",
                "-      \"zeppelin.R.cmd\": {",
                "-        \"envName\": \"ZEPPELIN_R_CMD\",",
                "-        \"propertyName\": \"zeppelin.R.cmd\",",
                "-        \"defaultValue\": \"R\",",
                "-        \"description\": \"R repl path\",",
                "-        \"type\": \"string\"",
                "-      },",
                "-      \"zeppelin.R.image.width\": {",
                "-        \"envName\": \"ZEPPELIN_R_IMAGE_WIDTH\",",
                "-        \"propertyName\": \"zeppelin.R.image.width\",",
                "-        \"defaultValue\": \"100%\",",
                "-        \"description\": \"\",",
                "-        \"type\": \"number\"",
                "-      },",
                "-      \"zeppelin.R.render.options\": {",
                "-        \"envName\": \"ZEPPELIN_R_RENDER_OPTIONS\",",
                "-        \"propertyName\": \"zeppelin.R.render.options\",",
                "-        \"defaultValue\": \"out.format = 'html', comment = NA, echo = FALSE, results = 'asis', message = F, warning = F\",",
                "-        \"description\": \"\",",
                "-        \"type\": \"textarea\"",
                "-      }",
                "-    },",
                "-    \"editor\": {",
                "-      \"language\": \"r\"",
                "-    }",
                "-  },",
                "-",
                "-  {",
                "-    \"group\": \"spark\",",
                "-    \"name\": \"ipyspark\",",
                "-    \"className\": \"org.apache.zeppelin.spark.IPySparkInterpreter\",",
                "-    \"properties\": {},",
                "-    \"editor\": {",
                "-      \"language\": \"python\",",
                "-      \"editOnDblClick\": false",
                "-    }",
                "-  }",
                "-]"
            ],
            "changed_files": [
                "spark/pom.xml",
                "spark/src/main/resources/interpreter-setting.json",
                "spark/src/main/sparkr-resources/interpreter-setting.json"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-2961": ""
            },
            "ghissue_refs": {
                "2602": "[ZEPPELIN-2961] Remove unnecessary interpreter-setting.json file in the spark interpreter. #2724",
                "2724": "[ZEPPELIN-2961] Remove unnecessary 'interpreter-setting.json' file in the spark interpreter. #2602"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-2961",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2602, 2724",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "23c5cac8245aea16bfc0568cf2e5c2ae6dfd0e6d",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1510141156,
            "hunks": 22,
            "message": "ZEPPELIN-3029. Cannot delete an interpreter ### What is this PR for? Only copy interpreterSetting from interpreterSettingTemplates when zeppelin is started the first time (interpreter.json doesn't exist) ### What type of PR is it? [Bug Fix] ### Todos * [ ] - Task ### What is the Jira issue? * https://issues.apache.org/jira/browse/ZEPPELIN-3029 ### How should this be tested? * Manually verified.  Delete an interpreter, and then restart zeppelin to check. ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Jeff Zhang <zjffdu@apache.org> Closes #2648 from zjffdu/ZEPPELIN-3029 and squashes the following commits: 255e607 [Jeff Zhang] Address comments 4865aba [Jeff Zhang] ZEPPELIN-3029. Cannot delete an interpreter",
            "diff": [
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/ClassloaderInterpreter.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/ClassloaderInterpreter.java",
                "deleted file mode 100644",
                "index f8afa4573..000000000",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/ClassloaderInterpreter.java",
                "+++ /dev/null",
                "@@ -1,261 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one or more",
                "- * contributor license agreements.  See the NOTICE file distributed with",
                "- * this work for additional information regarding copyright ownership.",
                "- * The ASF licenses this file to You under the Apache License, Version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with",
                "- * the License.  You may obtain a copy of the License at",
                "- *",
                "- *    http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- * See the License for the specific language governing permissions and",
                "- * limitations under the License.",
                "- */",
                "-",
                "-package org.apache.zeppelin.interpreter;",
                "-",
                "-import java.net.URL;",
                "-import java.util.List;",
                "-import java.util.Properties;",
                "-",
                "-import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;",
                "-import org.apache.zeppelin.scheduler.Scheduler;",
                "-",
                "-/**",
                "- * Add to the classpath interpreters.",
                "- *",
                "- */",
                "-public class ClassloaderInterpreter",
                "-    extends Interpreter",
                "-    implements WrappedInterpreter {",
                "-",
                "-  private ClassLoader cl;",
                "-  private Interpreter intp;",
                "-",
                "-  public ClassloaderInterpreter(Interpreter intp, ClassLoader cl) {",
                "-    super(new Properties());",
                "-    this.cl = cl;",
                "-    this.intp = intp;",
                "-  }",
                "-",
                "-  @Override",
                "-  public Interpreter getInnerInterpreter() {",
                "-    return intp;",
                "-  }",
                "-",
                "-  public ClassLoader getClassloader() {",
                "-    return cl;",
                "-  }",
                "-",
                "-  @Override",
                "-  public InterpreterResult interpret(String st, InterpreterContext context)",
                "-      throws InterpreterException {",
                "-    ClassLoader oldcl = Thread.currentThread().getContextClassLoader();",
                "-    Thread.currentThread().setContextClassLoader(cl);",
                "-    try {",
                "-      return intp.interpret(st, context);",
                "-    } catch (InterpreterException e) {",
                "-      throw e;",
                "-    } catch (Exception e) {",
                "-      throw new InterpreterException(e);",
                "-    } finally {",
                "-      cl = Thread.currentThread().getContextClassLoader();",
                "-      Thread.currentThread().setContextClassLoader(oldcl);",
                "-    }",
                "-  }",
                "-",
                "-",
                "-  @Override",
                "-  public void open() throws InterpreterException {",
                "-    ClassLoader oldcl = Thread.currentThread().getContextClassLoader();",
                "-    Thread.currentThread().setContextClassLoader(cl);",
                "-    try {",
                "-      intp.open();",
                "-    } catch (Exception e) {",
                "-      throw new InterpreterException(e);",
                "-    } finally {",
                "-      cl = Thread.currentThread().getContextClassLoader();",
                "-      Thread.currentThread().setContextClassLoader(oldcl);",
                "-    }",
                "-  }",
                "-",
                "-  @Override",
                "-  public void close() throws InterpreterException {",
                "-    ClassLoader oldcl = Thread.currentThread().getContextClassLoader();",
                "-    Thread.currentThread().setContextClassLoader(cl);",
                "-    try {",
                "-      intp.close();",
                "-    } catch (Exception e) {",
                "-      throw new InterpreterException(e);",
                "-    } finally {",
                "-      cl = Thread.currentThread().getContextClassLoader();",
                "-      Thread.currentThread().setContextClassLoader(oldcl);",
                "-    }",
                "-  }",
                "-",
                "-  @Override",
                "-  public void cancel(InterpreterContext context) throws InterpreterException {",
                "-    ClassLoader oldcl = Thread.currentThread().getContextClassLoader();",
                "-    Thread.currentThread().setContextClassLoader(cl);",
                "-    try {",
                "-      intp.cancel(context);",
                "-    } catch (Exception e) {",
                "-      throw new InterpreterException(e);",
                "-    } finally {",
                "-      cl = Thread.currentThread().getContextClassLoader();",
                "-      Thread.currentThread().setContextClassLoader(oldcl);",
                "-    }",
                "-  }",
                "-",
                "-  @Override",
                "-  public FormType getFormType() throws InterpreterException {",
                "-    ClassLoader oldcl = Thread.currentThread().getContextClassLoader();",
                "-    Thread.currentThread().setContextClassLoader(cl);",
                "-    try {",
                "-      return intp.getFormType();",
                "-    } finally {",
                "-      cl = Thread.currentThread().getContextClassLoader();",
                "-      Thread.currentThread().setContextClassLoader(oldcl);",
                "-    }",
                "-  }",
                "-",
                "-  @Override",
                "-  public int getProgress(InterpreterContext context) throws InterpreterException {",
                "-    ClassLoader oldcl = Thread.currentThread().getContextClassLoader();",
                "-    Thread.currentThread().setContextClassLoader(cl);",
                "-    try {",
                "-      return intp.getProgress(context);",
                "-    } catch (Exception e) {",
                "-      throw new InterpreterException(e);",
                "-    } finally {",
                "-      cl = Thread.currentThread().getContextClassLoader();",
                "-      Thread.currentThread().setContextClassLoader(oldcl);",
                "-    }",
                "-  }",
                "-",
                "-  @Override",
                "-  public Scheduler getScheduler() {",
                "-    ClassLoader oldcl = Thread.currentThread().getContextClassLoader();",
                "-    Thread.currentThread().setContextClassLoader(cl);",
                "-    try {",
                "-      return intp.getScheduler();",
                "-    } finally {",
                "-      cl = Thread.currentThread().getContextClassLoader();",
                "-      Thread.currentThread().setContextClassLoader(oldcl);",
                "-    }",
                "-  }",
                "-",
                "-  @Override",
                "-  public List<InterpreterCompletion> completion(String buf, int cursor,",
                "-      InterpreterContext interpreterContext) throws InterpreterException {",
                "-    ClassLoader oldcl = Thread.currentThread().getContextClassLoader();",
                "-    Thread.currentThread().setContextClassLoader(cl);",
                "-    try {",
                "-      List completion = intp.completion(buf, cursor, interpreterContext);",
                "-      return completion;",
                "-    } finally {",
                "-      cl = Thread.currentThread().getContextClassLoader();",
                "-      Thread.currentThread().setContextClassLoader(oldcl);",
                "-    }",
                "-  }",
                "-",
                "-",
                "-  @Override",
                "-  public String getClassName() {",
                "-    ClassLoader oldcl = Thread.currentThread().getContextClassLoader();",
                "-    Thread.currentThread().setContextClassLoader(cl);",
                "-    try {",
                "-      return intp.getClassName();",
                "-    } finally {",
                "-      cl = Thread.currentThread().getContextClassLoader();",
                "-      Thread.currentThread().setContextClassLoader(oldcl);",
                "-    }",
                "-  }",
                "-",
                "-  @Override",
                "-  public void setInterpreterGroup(InterpreterGroup interpreterGroup) {",
                "-    ClassLoader oldcl = Thread.currentThread().getContextClassLoader();",
                "-    Thread.currentThread().setContextClassLoader(cl);",
                "-    try {",
                "-      intp.setInterpreterGroup(interpreterGroup);",
                "-    } finally {",
                "-      cl = Thread.currentThread().getContextClassLoader();",
                "-      Thread.currentThread().setContextClassLoader(oldcl);",
                "-    }",
                "-  }",
                "-",
                "-  @Override",
                "-  public InterpreterGroup getInterpreterGroup() {",
                "-    ClassLoader oldcl = Thread.currentThread().getContextClassLoader();",
                "-    Thread.currentThread().setContextClassLoader(cl);",
                "-    try {",
                "-      return intp.getInterpreterGroup();",
                "-    } finally {",
                "-      cl = Thread.currentThread().getContextClassLoader();",
                "-      Thread.currentThread().setContextClassLoader(oldcl);",
                "-    }",
                "-  }",
                "-",
                "-  @Override",
                "-  public void setClassloaderUrls(URL [] urls) {",
                "-    ClassLoader oldcl = Thread.currentThread().getContextClassLoader();",
                "-    Thread.currentThread().setContextClassLoader(cl);",
                "-    try {",
                "-      intp.setClassloaderUrls(urls);",
                "-    } finally {",
                "-      cl = Thread.currentThread().getContextClassLoader();",
                "-      Thread.currentThread().setContextClassLoader(oldcl);",
                "-    }",
                "-  }",
                "-",
                "-  @Override",
                "-  public URL [] getClassloaderUrls() {",
                "-    ClassLoader oldcl = Thread.currentThread().getContextClassLoader();",
                "-    Thread.currentThread().setContextClassLoader(cl);",
                "-    try {",
                "-      return intp.getClassloaderUrls();",
                "-    } finally {",
                "-      cl = Thread.currentThread().getContextClassLoader();",
                "-      Thread.currentThread().setContextClassLoader(oldcl);",
                "-    }",
                "-  }",
                "-",
                "-  @Override",
                "-  public void setProperties(Properties properties) {",
                "-    ClassLoader oldcl = Thread.currentThread().getContextClassLoader();",
                "-    Thread.currentThread().setContextClassLoader(cl);",
                "-    try {",
                "-      intp.setProperties(properties);",
                "-    } finally {",
                "-      cl = Thread.currentThread().getContextClassLoader();",
                "-      Thread.currentThread().setContextClassLoader(oldcl);",
                "-    }",
                "-  }",
                "-",
                "-  @Override",
                "-  public Properties getProperties() {",
                "-    ClassLoader oldcl = Thread.currentThread().getContextClassLoader();",
                "-    Thread.currentThread().setContextClassLoader(cl);",
                "-    try {",
                "-      return intp.getProperties();",
                "-    } finally {",
                "-      cl = Thread.currentThread().getContextClassLoader();",
                "-      Thread.currentThread().setContextClassLoader(oldcl);",
                "-    }",
                "-  }",
                "-",
                "-  @Override",
                "-  public String getProperty(String key) {",
                "-    ClassLoader oldcl = Thread.currentThread().getContextClassLoader();",
                "-    Thread.currentThread().setContextClassLoader(cl);",
                "-    try {",
                "-      return intp.getProperty(key);",
                "-    } finally {",
                "-      cl = Thread.currentThread().getContextClassLoader();",
                "-      Thread.currentThread().setContextClassLoader(oldcl);",
                "-    }",
                "-  }",
                "-}",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "index 0596cc525..944672cfd 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "@@ -311,26 +311,33 @@ public class InterpreterSetting {",
                "-  public void setAngularObjectRegistryListener(AngularObjectRegistryListener",
                "+  public InterpreterSetting setAngularObjectRegistryListener(AngularObjectRegistryListener",
                "                                                    angularObjectRegistryListener) {",
                "     this.angularObjectRegistryListener = angularObjectRegistryListener;",
                "+    return this;",
                "   }",
                "-  public void setAppEventListener(ApplicationEventListener appEventListener) {",
                "+  public InterpreterSetting setAppEventListener(ApplicationEventListener appEventListener) {",
                "     this.appEventListener = appEventListener;",
                "+    return this;",
                "   }",
                "-  public void setRemoteInterpreterProcessListener(RemoteInterpreterProcessListener",
                "+  public InterpreterSetting setRemoteInterpreterProcessListener(RemoteInterpreterProcessListener",
                "                                                       remoteInterpreterProcessListener) {",
                "     this.remoteInterpreterProcessListener = remoteInterpreterProcessListener;",
                "+    return this;",
                "   }",
                "-  public void setDependencyResolver(DependencyResolver dependencyResolver) {",
                "+  public InterpreterSetting setDependencyResolver(DependencyResolver dependencyResolver) {",
                "     this.dependencyResolver = dependencyResolver;",
                "+    return this;",
                "   }",
                "-  public void setInterpreterSettingManager(InterpreterSettingManager interpreterSettingManager) {",
                "+  public InterpreterSetting setInterpreterSettingManager(",
                "+      InterpreterSettingManager interpreterSettingManager) {",
                "     this.interpreterSettingManager = interpreterSettingManager;",
                "+    return this;",
                "   }",
                "-  public void setLifecycleManager(LifecycleManager lifecycleManager) {",
                "+  public InterpreterSetting setLifecycleManager(LifecycleManager lifecycleManager) {",
                "     this.lifecycleManager = lifecycleManager;",
                "+    return this;",
                "   }",
                "@@ -513,4 +520,5 @@ public class InterpreterSetting {",
                "-  public void setConf(ZeppelinConfiguration conf) {",
                "+  public InterpreterSetting setConf(ZeppelinConfiguration conf) {",
                "     this.conf = conf;",
                "+    return this;",
                "   }",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java",
                "index fb869547d..0b7efd5db 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java",
                "@@ -167,2 +167,14 @@ public class InterpreterSettingManager {",
                "+",
                "+  private void initInterpreterSetting(InterpreterSetting interpreterSetting) {",
                "+    interpreterSetting.setConf(conf)",
                "+        .setInterpreterSettingManager(this)",
                "+        .setAngularObjectRegistryListener(angularObjectRegistryListener)",
                "+        .setRemoteInterpreterProcessListener(remoteInterpreterProcessListener)",
                "+        .setAppEventListener(appEventListener)",
                "+        .setDependencyResolver(dependencyResolver)",
                "+        .setLifecycleManager(lifecycleManager)",
                "+        .postProcessing();",
                "+  }",
                "+",
                "   /**",
                "@@ -174,2 +186,7 @@ public class InterpreterSettingManager {",
                "       LOGGER.warn(\"Interpreter Setting file {} doesn't exist\", interpreterSettingPath);",
                "+      for (InterpreterSetting interpreterSettingTemplate : interpreterSettingTemplates.values()) {",
                "+        InterpreterSetting interpreterSetting = new InterpreterSetting(interpreterSettingTemplate);",
                "+        initInterpreterSetting(interpreterSetting);",
                "+        interpreterSettings.put(interpreterSetting.getId(), interpreterSetting);",
                "+      }",
                "       return;",
                "@@ -181,10 +198,2 @@ public class InterpreterSettingManager {",
                "       for (InterpreterSetting savedInterpreterSetting : infoSaving.interpreterSettings.values()) {",
                "-        savedInterpreterSetting.setConf(conf);",
                "-        savedInterpreterSetting.setInterpreterSettingManager(this);",
                "-        savedInterpreterSetting.setAngularObjectRegistryListener(angularObjectRegistryListener);",
                "-        savedInterpreterSetting.setRemoteInterpreterProcessListener(",
                "-            remoteInterpreterProcessListener);",
                "-        savedInterpreterSetting.setAppEventListener(appEventListener);",
                "-        savedInterpreterSetting.setDependencyResolver(dependencyResolver);",
                "-        savedInterpreterSetting.setLifecycleManager(lifecycleManager);",
                "         savedInterpreterSetting.setProperties(InterpreterSetting.convertInterpreterProperties(",
                "@@ -192,2 +201,3 @@ public class InterpreterSettingManager {",
                "         ));",
                "+        initInterpreterSetting(savedInterpreterSetting);",
                "@@ -379,10 +389,3 @@ public class InterpreterSettingManager {",
                "     InterpreterSetting interpreterSetting = new InterpreterSetting(interpreterSettingTemplate);",
                "-    interpreterSetting.setAngularObjectRegistryListener(angularObjectRegistryListener);",
                "-    interpreterSetting.setRemoteInterpreterProcessListener(remoteInterpreterProcessListener);",
                "-    interpreterSetting.setAppEventListener(appEventListener);",
                "-    interpreterSetting.setDependencyResolver(dependencyResolver);",
                "-    interpreterSetting.setInterpreterSettingManager(this);",
                "-    interpreterSetting.setLifecycleManager(lifecycleManager);",
                "-    interpreterSetting.postProcessing();",
                "-    interpreterSettings.put(interpreterSetting.getId(), interpreterSetting);",
                "+    initInterpreterSetting(interpreterSetting);",
                "   }",
                "@@ -642,9 +645,3 @@ public class InterpreterSettingManager {",
                "     setting.setProperties(p);",
                "-    setting.setAppEventListener(appEventListener);",
                "-    setting.setRemoteInterpreterProcessListener(remoteInterpreterProcessListener);",
                "-    setting.setDependencyResolver(dependencyResolver);",
                "-    setting.setAngularObjectRegistryListener(angularObjectRegistryListener);",
                "-    setting.setLifecycleManager(lifecycleManager);",
                "-    setting.setInterpreterSettingManager(this);",
                "-    setting.postProcessing();",
                "+    initInterpreterSetting(setting);",
                "     interpreterSettings.put(setting.getId(), setting);",
                "@@ -657,8 +654,3 @@ public class InterpreterSettingManager {",
                "     interpreterSettingTemplates.put(interpreterSetting.getName(), interpreterSetting);",
                "-    interpreterSetting.setAppEventListener(appEventListener);",
                "-    interpreterSetting.setDependencyResolver(dependencyResolver);",
                "-    interpreterSetting.setLifecycleManager(lifecycleManager);",
                "-    interpreterSetting.setAngularObjectRegistryListener(angularObjectRegistryListener);",
                "-    interpreterSetting.setRemoteInterpreterProcessListener(remoteInterpreterProcessListener);",
                "-    interpreterSetting.setInterpreterSettingManager(this);",
                "+    initInterpreterSetting(interpreterSetting);",
                "     interpreterSettings.put(interpreterSetting.getId(), interpreterSetting);"
            ],
            "changed_files": [
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/ClassloaderInterpreter.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3029": ""
            },
            "ghissue_refs": {
                "2648": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3029",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2648",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "aa5deb96855f24a7c45905bc118538542403d113",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1513649344,
            "hunks": 12,
            "message": "ZEPPELIN-3104. Support Hadoop 3.0 ### What is this PR for? This is for supporting hadoop3 which is released recently. Adding 2 profiles: hadoop2 and hadoop3 for hadoop 2.x support and hadoop 3.x support ### What type of PR is it? [ Improvement ] ### Todos * [ ] - Task ### What is the Jira issue? * https://issues.apache.org/jira/browse/ZEPPELIN-3104 ### How should this be tested? * Travis build is pass ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Jeff Zhang <zjffdu@apache.org> Closes #2728 from zjffdu/ZEPPELIN-3104 and squashes the following commits: b5e93a6 [Jeff Zhang] ZEPPELIN-3104. Support Hadoop 3.0",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index 7b661bf7a..e1631435b 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -55,3 +55,3 @@ matrix:",
                "       jdk: \"oraclejdk8\"",
                "-      env: PYTHON=\"2\" WEB_E2E=\"true\" SCALA_VER=\"2.11\" SPARK_VER=\"2.1.0\" HADOOP_VER=\"2.6\" PROFILE=\"-Pweb-ci -Pscala-2.11\" BUILD_FLAG=\"package -DskipTests -DskipRat\" TEST_FLAG=\"verify -DskipRat\" MODULES=\"-pl ${INTERPRETERS}\" TEST_MODULES=\"-pl zeppelin-web\" TEST_PROJECTS=\"-Pweb-e2e\"",
                "+      env: PYTHON=\"2\" WEB_E2E=\"true\" SCALA_VER=\"2.11\" SPARK_VER=\"2.1.0\" HADOOP_VER=\"2.6\" PROFILE=\"-Phadoop2 -Pscala-2.11\" BUILD_FLAG=\"package -DskipTests -DskipRat\" TEST_FLAG=\"verify -DskipRat\" MODULES=\"-pl ${INTERPRETERS}\" TEST_MODULES=\"-pl zeppelin-web\" TEST_PROJECTS=\"-Pweb-e2e\"",
                "       addons:",
                "@@ -77,3 +77,3 @@ matrix:",
                "         firefox: \"31.0\"",
                "-      env: PYTHON=\"2\" SCALA_VER=\"2.10\" SPARK_VER=\"1.6.3\" HADOOP_VER=\"2.6\" PROFILE=\"-Pweb-ci -Pspark-1.6 -Phadoop-2.6 -Phelium-dev -Pexamples -Pintegration\" BUILD_FLAG=\"package -DskipTests -DskipRat\" TEST_FLAG=\"verify -DskipRat\" TEST_PROJECTS=\"-pl .,zeppelin-integration -DfailIfNoTests=false\"",
                "+      env: PYTHON=\"2\" SCALA_VER=\"2.10\" SPARK_VER=\"1.6.3\" HADOOP_VER=\"2.6\" PROFILE=\"-Pweb-ci -Pspark-1.6 -Phadoop2 -Phadoop-2.6 -Phelium-dev -Pexamples -Pintegration\" BUILD_FLAG=\"package -DskipTests -DskipRat\" TEST_FLAG=\"verify -DskipRat\" TEST_PROJECTS=\"-pl .,zeppelin-integration -DfailIfNoTests=false\"",
                "@@ -87,3 +87,3 @@ matrix:",
                "       dist: trusty",
                "-      env: PYTHON=\"2\" SCALA_VER=\"2.11\" SPARK_VER=\"2.2.0\" HADOOP_VER=\"2.6\" PROFILE=\"-Pweb-ci -Pspark-2.2 -Phadoop-2.6 -Pscala-2.11\" SPARKR=\"true\" BUILD_FLAG=\"install -DskipTests -DskipRat\" TEST_FLAG=\"test -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-zengine,zeppelin-server,zeppelin-display,spark-dependencies,spark,python,livy\" TEST_PROJECTS=\"-Dtest=ZeppelinSparkClusterTest,org.apache.zeppelin.spark.*,org.apache.zeppelin.livy.* -DfailIfNoTests=false\"",
                "+      env: PYTHON=\"2\" SCALA_VER=\"2.11\" SPARK_VER=\"2.2.0\" HADOOP_VER=\"2.6\" PROFILE=\"-Pweb-ci -Pspark-2.2 -Phadoop3 -Phadoop-2.6 -Pscala-2.11\" SPARKR=\"true\" BUILD_FLAG=\"install -DskipTests -DskipRat\" TEST_FLAG=\"test -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-zengine,zeppelin-server,zeppelin-display,spark-dependencies,spark,python,livy\" TEST_PROJECTS=\"-Dtest=ZeppelinSparkClusterTest,org.apache.zeppelin.spark.*,org.apache.zeppelin.livy.* -DfailIfNoTests=false\"",
                "@@ -92,3 +92,3 @@ matrix:",
                "       dist: trusty",
                "-      env: PYTHON=\"2\" SCALA_VER=\"2.11\" SPARK_VER=\"2.1.0\" HADOOP_VER=\"2.6\" PROFILE=\"-Pweb-ci -Pspark-2.1 -Phadoop-2.6 -Pscala-2.11\" SPARKR=\"true\" BUILD_FLAG=\"install -DskipTests -DskipRat\" TEST_FLAG=\"test -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-zengine,zeppelin-server,zeppelin-display,spark-dependencies,spark,python,livy\" TEST_PROJECTS=\"-Dtest=ZeppelinSparkClusterTest,org.apache.zeppelin.spark.*,org.apache.zeppelin.livy.* -DfailIfNoTests=false\"",
                "+      env: PYTHON=\"2\" SCALA_VER=\"2.11\" SPARK_VER=\"2.1.0\" HADOOP_VER=\"2.6\" PROFILE=\"-Pweb-ci -Pspark-2.1 -Phadoop2 -Phadoop-2.6 -Pscala-2.11\" SPARKR=\"true\" BUILD_FLAG=\"install -DskipTests -DskipRat\" TEST_FLAG=\"test -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-zengine,zeppelin-server,zeppelin-display,spark-dependencies,spark,python,livy\" TEST_PROJECTS=\"-Dtest=ZeppelinSparkClusterTest,org.apache.zeppelin.spark.*,org.apache.zeppelin.livy.* -DfailIfNoTests=false\"",
                "@@ -97,3 +97,3 @@ matrix:",
                "       dist: trusty",
                "-      env: PYTHON=\"2\" SCALA_VER=\"2.11\" SPARK_VER=\"2.0.2\" HADOOP_VER=\"2.6\" PROFILE=\"-Pweb-ci -Pspark-2.0 -Phadoop-2.6 -Pscala-2.11\" SPARKR=\"true\" BUILD_FLAG=\"install -DskipTests -DskipRat\" TEST_FLAG=\"test -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-zengine,zeppelin-server,zeppelin-display,spark-dependencies,spark,python\" TEST_PROJECTS=\"-Dtest=ZeppelinSparkClusterTest,org.apache.zeppelin.spark.* -DfailIfNoTests=false\"",
                "+      env: PYTHON=\"2\" SCALA_VER=\"2.11\" SPARK_VER=\"2.0.2\" HADOOP_VER=\"2.6\" PROFILE=\"-Pweb-ci -Pspark-2.0 -Phadoop3 -Phadoop-2.6 -Pscala-2.11\" SPARKR=\"true\" BUILD_FLAG=\"install -DskipTests -DskipRat\" TEST_FLAG=\"test -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-zengine,zeppelin-server,zeppelin-display,spark-dependencies,spark,python\" TEST_PROJECTS=\"-Dtest=ZeppelinSparkClusterTest,org.apache.zeppelin.spark.* -DfailIfNoTests=false\"",
                "@@ -102,3 +102,3 @@ matrix:",
                "       dist: trusty",
                "-      env: PYTHON=\"3\" SCALA_VER=\"2.10\" SPARK_VER=\"1.6.3\" HADOOP_VER=\"2.6\" PROFILE=\"-Pweb-ci -Pspark-1.6 -Phadoop-2.6 -Pscala-2.10\" SPARKR=\"true\" BUILD_FLAG=\"install -DskipTests -DskipRat\" TEST_FLAG=\"test -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-zengine,zeppelin-server,zeppelin-display,spark-dependencies,spark,python\" TEST_PROJECTS=\"-Dtest=ZeppelinSparkClusterTest,org.apache.zeppelin.spark.*,org.apache.zeppelin.spark.* -DfailIfNoTests=false\"",
                "+      env: PYTHON=\"3\" SCALA_VER=\"2.10\" SPARK_VER=\"1.6.3\" HADOOP_VER=\"2.6\" PROFILE=\"-Pweb-ci -Pspark-1.6 -Phadoop2 -Phadoop-2.6 -Pscala-2.10\" SPARKR=\"true\" BUILD_FLAG=\"install -DskipTests -DskipRat\" TEST_FLAG=\"test -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-zengine,zeppelin-server,zeppelin-display,spark-dependencies,spark,python\" TEST_PROJECTS=\"-Dtest=ZeppelinSparkClusterTest,org.apache.zeppelin.spark.*,org.apache.zeppelin.spark.* -DfailIfNoTests=false\"",
                "@@ -107,3 +107,3 @@ matrix:",
                "       dist: trusty",
                "-      env: PYTHON=\"2\" SCALA_VER=\"2.11\" SPARK_VER=\"1.6.3\" HADOOP_VER=\"2.6\" PROFILE=\"-Pweb-ci -Pspark-1.6 -Phadoop-2.6 -Pscala-2.11\" SPARKR=\"true\" BUILD_FLAG=\"install -DskipTests -DskipRat\" TEST_FLAG=\"test -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-zengine,zeppelin-server,zeppelin-display,spark-dependencies,spark,python\" TEST_PROJECTS=\"-Dtest=ZeppelinSparkClusterTest,org.apache.zeppelin.spark.* -DfailIfNoTests=false\"",
                "+      env: PYTHON=\"2\" SCALA_VER=\"2.11\" SPARK_VER=\"1.6.3\" HADOOP_VER=\"2.6\" PROFILE=\"-Pweb-ci -Pspark-1.6 -Phadoop3 -Phadoop-2.6 -Pscala-2.11\" SPARKR=\"true\" BUILD_FLAG=\"install -DskipTests -DskipRat\" TEST_FLAG=\"test -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-zengine,zeppelin-server,zeppelin-display,spark-dependencies,spark,python\" TEST_PROJECTS=\"-Dtest=ZeppelinSparkClusterTest,org.apache.zeppelin.spark.* -DfailIfNoTests=false\"",
                "@@ -113,3 +113,3 @@ matrix:",
                "       jdk: \"openjdk7\"",
                "-      env: PYTHON=\"2\" SCALA_VER=\"2.10\" SPARK_VER=\"1.6.1\" HADOOP_VER=\"2.6\" LIVY_VER=\"0.4.0-incubating\" PROFILE=\"-Pspark-1.6 -Phadoop-2.6 -Pscala-2.10\" BUILD_FLAG=\"install -am -DskipTests -DskipRat\" TEST_FLAG=\"verify -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-display,spark-dependencies,spark,python,livy\" TEST_PROJECTS=\"-Dtest=LivySQLInterpreterTest,org.apache.zeppelin.spark.PySpark*Test,org.apache.zeppelin.python.* -Dpyspark.test.exclude='' -DfailIfNoTests=false\"",
                "+      env: PYTHON=\"2\" SCALA_VER=\"2.10\" SPARK_VER=\"1.6.1\" HADOOP_VER=\"2.6\" LIVY_VER=\"0.4.0-incubating\" PROFILE=\"-Pspark-1.6 -Phadoop 2-Phadoop-2.6 -Pscala-2.10\" BUILD_FLAG=\"install -am -DskipTests -DskipRat\" TEST_FLAG=\"verify -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-display,spark-dependencies,spark,python,livy\" TEST_PROJECTS=\"-Dtest=LivySQLInterpreterTest,org.apache.zeppelin.spark.PySpark*Test,org.apache.zeppelin.python.* -Dpyspark.test.exclude='' -DfailIfNoTests=false\"",
                "@@ -119,3 +119,3 @@ matrix:",
                "       jdk: \"openjdk7\"",
                "-      env: PYTHON=\"3\" SCALA_VER=\"2.11\" SPARK_VER=\"2.0.0\" HADOOP_VER=\"2.6\" LIVY_VER=\"0.4.0-incubating\" PROFILE=\"-Pspark-2.0 -Phadoop-2.6 -Pscala-2.11\" BUILD_FLAG=\"install -am -DskipTests -DskipRat\" TEST_FLAG=\"verify -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-display,spark-dependencies,spark,python,livy\" TEST_PROJECTS=\"-Dtest=LivySQLInterpreterTest,org.apache.zeppelin.spark.PySpark*Test,org.apache.zeppelin.python.* -Dpyspark.test.exclude='' -DfailIfNoTests=false\"",
                "+      env: PYTHON=\"3\" SCALA_VER=\"2.11\" SPARK_VER=\"2.0.0\" HADOOP_VER=\"2.6\" LIVY_VER=\"0.4.0-incubating\" PROFILE=\"-Pspark-2.0 -Phadoop3 -Phadoop-2.6 -Pscala-2.11\" BUILD_FLAG=\"install -am -DskipTests -DskipRat\" TEST_FLAG=\"verify -DskipRat\" MODULES=\"-pl .,zeppelin-interpreter,zeppelin-display,spark-dependencies,spark,python,livy\" TEST_PROJECTS=\"-Dtest=LivySQLInterpreterTest,org.apache.zeppelin.spark.PySpark*Test,org.apache.zeppelin.python.* -Dpyspark.test.exclude='' -DfailIfNoTests=false\"",
                "diff --git a/zeppelin-server/src/main/java/org/apache/zeppelin/utils/SecurityUtils.java b/zeppelin-server/src/main/java/org/apache/zeppelin/utils/SecurityUtils.java",
                "index 983166b61..e24af20c3 100644",
                "--- a/zeppelin-server/src/main/java/org/apache/zeppelin/utils/SecurityUtils.java",
                "+++ b/zeppelin-server/src/main/java/org/apache/zeppelin/utils/SecurityUtils.java",
                "@@ -43,3 +43,2 @@ import org.apache.zeppelin.realm.ActiveDirectoryGroupRealm;",
                " import org.apache.zeppelin.realm.LdapRealm;",
                "-import org.mortbay.log.Log;",
                " import org.slf4j.Logger;",
                "diff --git a/zeppelin-zengine/pom.xml b/zeppelin-zengine/pom.xml",
                "index 070470572..a549372a1 100644",
                "--- a/zeppelin-zengine/pom.xml",
                "+++ b/zeppelin-zengine/pom.xml",
                "@@ -301,352 +301,2 @@",
                "-    <dependency>",
                "-      <groupId>org.apache.hadoop</groupId>",
                "-      <artifactId>hadoop-client</artifactId>",
                "-      <version>${hadoop.version}</version>",
                "-      <exclusions>",
                "-        <exclusion>",
                "-          <groupId>com.sun.jersey</groupId>",
                "-          <artifactId>jersey-core</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>com.sun.jersey</groupId>",
                "-          <artifactId>jersey-json</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>com.sun.jersey</groupId>",
                "-          <artifactId>jersey-client</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>com.sun.jersey</groupId>",
                "-          <artifactId>jersey-server</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>javax.servlet</groupId>",
                "-          <artifactId>servlet-api</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>org.apache.avro</groupId>",
                "-          <artifactId>avro</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>org.apache.jackrabbit</groupId>",
                "-          <artifactId>jackrabbit-webdav</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>io.netty</groupId>",
                "-          <artifactId>netty</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>commons-httpclient</groupId>",
                "-          <artifactId>commons-httpclient</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>org.eclipse.jgit</groupId>",
                "-          <artifactId>org.eclipse.jgit</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>com.jcraft</groupId>",
                "-          <artifactId>jsch</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>org.apache.commons</groupId>",
                "-          <artifactId>commons-compress</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>xml-apis</groupId>",
                "-          <artifactId>xml-apis</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>xerces</groupId>",
                "-          <artifactId>xercesImpl</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>com.google.guava</groupId>",
                "-          <artifactId>guava</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>com.fasterxml.jackson.core</groupId>",
                "-          <artifactId>jackson-core</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>org.codehaus.jackson</groupId>",
                "-          <artifactId>jackson-mapper-asl</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>com.fasterxml.jackson.core</groupId>",
                "-          <artifactId>jackson-annotations</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>org.apache.zookeeper</groupId>",
                "-          <artifactId>zookeeper</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>org.codehaus.jackson</groupId>",
                "-          <artifactId>jackson-core-asl</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>com.fasterxml.jackson.core</groupId>",
                "-          <artifactId>jackson-databind</artifactId>",
                "-        </exclusion>",
                "-      </exclusions>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.apache.hadoop</groupId>",
                "-      <artifactId>hadoop-common</artifactId>",
                "-      <version>${hadoop.version}</version>",
                "-      <classifier>tests</classifier>",
                "-      <scope>test</scope>",
                "-      <exclusions>",
                "-        <exclusion>",
                "-          <groupId>com.sun.jersey</groupId>",
                "-          <artifactId>jersey-core</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>com.sun.jersey</groupId>",
                "-          <artifactId>jersey-json</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>com.sun.jersey</groupId>",
                "-          <artifactId>jersey-client</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>com.sun.jersey</groupId>",
                "-          <artifactId>jersey-server</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>javax.servlet</groupId>",
                "-          <artifactId>servlet-api</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>org.apache.avro</groupId>",
                "-          <artifactId>avro</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>org.apache.jackrabbit</groupId>",
                "-          <artifactId>jackrabbit-webdav</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>io.netty</groupId>",
                "-          <artifactId>netty</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>commons-httpclient</groupId>",
                "-          <artifactId>commons-httpclient</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>org.eclipse.jgit</groupId>",
                "-          <artifactId>org.eclipse.jgit</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>com.jcraft</groupId>",
                "-          <artifactId>jsch</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>org.apache.commons</groupId>",
                "-          <artifactId>commons-compress</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>xml-apis</groupId>",
                "-          <artifactId>xml-apis</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>xerces</groupId>",
                "-          <artifactId>xercesImpl</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>org.codehaus.jackson</groupId>",
                "-          <artifactId>jackson-mapper-asl</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>org.codehaus.jackson</groupId>",
                "-          <artifactId>jackson-core-asl</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>com.google.guava</groupId>",
                "-          <artifactId>guava</artifactId>",
                "-        </exclusion>",
                "-      </exclusions>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.apache.hadoop</groupId>",
                "-      <artifactId>hadoop-hdfs</artifactId>",
                "-      <version>${hadoop.version}</version>",
                "-      <classifier>tests</classifier>",
                "-      <scope>test</scope>",
                "-      <exclusions>",
                "-        <!--<exclusion>-->",
                "-          <!--<groupId>com.sun.jersey</groupId>-->",
                "-          <!--<artifactId>jersey-core</artifactId>-->",
                "-        <!--</exclusion>-->",
                "-        <exclusion>",
                "-          <groupId>com.sun.jersey</groupId>",
                "-          <artifactId>jersey-json</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>com.sun.jersey</groupId>",
                "-          <artifactId>jersey-client</artifactId>",
                "-        </exclusion>",
                "-        <!--<exclusion>-->",
                "-          <!--<groupId>com.sun.jersey</groupId>-->",
                "-          <!--<artifactId>jersey-server</artifactId>-->",
                "-        <!--</exclusion>-->",
                "-        <exclusion>",
                "-          <groupId>javax.servlet</groupId>",
                "-          <artifactId>servlet-api</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>org.apache.avro</groupId>",
                "-          <artifactId>avro</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>org.apache.jackrabbit</groupId>",
                "-          <artifactId>jackrabbit-webdav</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>io.netty</groupId>",
                "-          <artifactId>netty</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>commons-httpclient</groupId>",
                "-          <artifactId>commons-httpclient</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>org.eclipse.jgit</groupId>",
                "-          <artifactId>org.eclipse.jgit</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>com.jcraft</groupId>",
                "-          <artifactId>jsch</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>org.apache.commons</groupId>",
                "-          <artifactId>commons-compress</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>xml-apis</groupId>",
                "-          <artifactId>xml-apis</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>xerces</groupId>",
                "-          <artifactId>xercesImpl</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>com.google.guava</groupId>",
                "-          <artifactId>guava</artifactId>",
                "-        </exclusion>",
                "-      </exclusions>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.apache.hadoop</groupId>",
                "-      <artifactId>hadoop-yarn-server-tests</artifactId>",
                "-      <version>${hadoop.version}</version>",
                "-      <classifier>tests</classifier>",
                "-      <scope>test</scope>",
                "-      <exclusions>",
                "-        <exclusion>",
                "-          <groupId>com.sun.jersey</groupId>",
                "-          <artifactId>jersey-core</artifactId>",
                "-        </exclusion>",
                "-        <!--<exclusion>-->",
                "-          <!--<groupId>com.sun.jersey</groupId>-->",
                "-          <!--<artifactId>jersey-json</artifactId>-->",
                "-        <!--</exclusion>-->",
                "-        <exclusion>",
                "-          <groupId>com.sun.jersey</groupId>",
                "-          <artifactId>jersey-client</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>com.sun.jersey</groupId>",
                "-          <artifactId>jersey-server</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>javax.servlet</groupId>",
                "-          <artifactId>servlet-api</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>org.apache.avro</groupId>",
                "-          <artifactId>avro</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>org.apache.jackrabbit</groupId>",
                "-          <artifactId>jackrabbit-webdav</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>io.netty</groupId>",
                "-          <artifactId>netty</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>commons-httpclient</groupId>",
                "-          <artifactId>commons-httpclient</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>org.eclipse.jgit</groupId>",
                "-          <artifactId>org.eclipse.jgit</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>com.jcraft</groupId>",
                "-          <artifactId>jsch</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>org.apache.commons</groupId>",
                "-          <artifactId>commons-compress</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>xml-apis</groupId>",
                "-          <artifactId>xml-apis</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>xerces</groupId>",
                "-          <artifactId>xercesImpl</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>org.codehaus.jackson</groupId>",
                "-          <artifactId>jackson-core-asl</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>org.codehaus.jackson</groupId>",
                "-          <artifactId>jackson-jaxrs</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>org.codehaus.jackson</groupId>",
                "-          <artifactId>jackson-xc</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>org.codehaus.jackson</groupId>",
                "-          <artifactId>jackson-mapper-asl</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>com.google.guava</groupId>",
                "-          <artifactId>guava</artifactId>",
                "-        </exclusion>",
                "-      </exclusions>",
                "-    </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.apache.zeppelin</groupId>",
                "-      <artifactId>zeppelin-spark_2.10</artifactId>",
                "-      <version>${project.version}</version>",
                "-      <scope>test</scope>",
                "-      <exclusions>",
                "-        <exclusion>",
                "-          <groupId>com.google.protobuf</groupId>",
                "-          <artifactId>protobuf-java</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>com.google.guava</groupId>",
                "-          <artifactId>guava</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>com.google.errorprone</groupId>",
                "-          <artifactId>error_prone_annotations</artifactId>",
                "-        </exclusion>",
                "-        <exclusion>",
                "-          <groupId>io.grpc</groupId>",
                "-          <artifactId>grpc-context</artifactId>",
                "-        </exclusion>",
                "-      </exclusions>",
                "-    </dependency>",
                "   </dependencies>",
                "@@ -675,2 +325,367 @@",
                "   </build>",
                "+",
                "+  <profiles>",
                "+",
                "+    <profile>",
                "+      <id>hadoop2</id>",
                "+",
                "+      <activation>",
                "+        <activeByDefault>true</activeByDefault>",
                "+      </activation>",
                "+",
                "+      <dependencies>",
                "+        <dependency>",
                "+          <groupId>org.apache.hadoop</groupId>",
                "+          <artifactId>hadoop-client</artifactId>",
                "+          <version>${hadoop.version}</version>",
                "+          <exclusions>",
                "+            <exclusion>",
                "+              <groupId>com.sun.jersey</groupId>",
                "+              <artifactId>jersey-core</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>com.sun.jersey</groupId>",
                "+              <artifactId>jersey-json</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>com.sun.jersey</groupId>",
                "+              <artifactId>jersey-client</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>com.sun.jersey</groupId>",
                "+              <artifactId>jersey-server</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>javax.servlet</groupId>",
                "+              <artifactId>servlet-api</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>org.apache.avro</groupId>",
                "+              <artifactId>avro</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>org.apache.jackrabbit</groupId>",
                "+              <artifactId>jackrabbit-webdav</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>io.netty</groupId>",
                "+              <artifactId>netty</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>commons-httpclient</groupId>",
                "+              <artifactId>commons-httpclient</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>org.eclipse.jgit</groupId>",
                "+              <artifactId>org.eclipse.jgit</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>com.jcraft</groupId>",
                "+              <artifactId>jsch</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>org.apache.commons</groupId>",
                "+              <artifactId>commons-compress</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>xml-apis</groupId>",
                "+              <artifactId>xml-apis</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>xerces</groupId>",
                "+              <artifactId>xercesImpl</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>com.google.guava</groupId>",
                "+              <artifactId>guava</artifactId>",
                "+            </exclusion>",
                "+          </exclusions>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+          <groupId>org.apache.hadoop</groupId>",
                "+          <artifactId>hadoop-common</artifactId>",
                "+          <version>${hadoop.version}</version>",
                "+          <classifier>tests</classifier>",
                "+          <scope>test</scope>",
                "+          <exclusions>",
                "+            <exclusion>",
                "+              <groupId>com.sun.jersey</groupId>",
                "+              <artifactId>jersey-core</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>com.sun.jersey</groupId>",
                "+              <artifactId>jersey-json</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>com.sun.jersey</groupId>",
                "+              <artifactId>jersey-client</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>com.sun.jersey</groupId>",
                "+              <artifactId>jersey-server</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>javax.servlet</groupId>",
                "+              <artifactId>servlet-api</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>org.apache.avro</groupId>",
                "+              <artifactId>avro</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>org.apache.jackrabbit</groupId>",
                "+              <artifactId>jackrabbit-webdav</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>io.netty</groupId>",
                "+              <artifactId>netty</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>commons-httpclient</groupId>",
                "+              <artifactId>commons-httpclient</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>org.eclipse.jgit</groupId>",
                "+              <artifactId>org.eclipse.jgit</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>com.jcraft</groupId>",
                "+              <artifactId>jsch</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>org.apache.commons</groupId>",
                "+              <artifactId>commons-compress</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>xml-apis</groupId>",
                "+              <artifactId>xml-apis</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>xerces</groupId>",
                "+              <artifactId>xercesImpl</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>org.codehaus.jackson</groupId>",
                "+              <artifactId>jackson-mapper-asl</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>org.codehaus.jackson</groupId>",
                "+              <artifactId>jackson-core-asl</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>com.google.guava</groupId>",
                "+              <artifactId>guava</artifactId>",
                "+            </exclusion>",
                "+          </exclusions>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+          <groupId>org.apache.hadoop</groupId>",
                "+          <artifactId>hadoop-hdfs</artifactId>",
                "+          <version>${hadoop.version}</version>",
                "+          <classifier>tests</classifier>",
                "+          <scope>test</scope>",
                "+          <exclusions>",
                "+            <!--<exclusion>-->",
                "+            <!--<groupId>com.sun.jersey</groupId>-->",
                "+            <!--<artifactId>jersey-core</artifactId>-->",
                "+            <!--</exclusion>-->",
                "+            <exclusion>",
                "+              <groupId>com.sun.jersey</groupId>",
                "+              <artifactId>jersey-json</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>com.sun.jersey</groupId>",
                "+              <artifactId>jersey-client</artifactId>",
                "+            </exclusion>",
                "+            <!--<exclusion>-->",
                "+            <!--<groupId>com.sun.jersey</groupId>-->",
                "+            <!--<artifactId>jersey-server</artifactId>-->",
                "+            <!--</exclusion>-->",
                "+            <exclusion>",
                "+              <groupId>javax.servlet</groupId>",
                "+              <artifactId>servlet-api</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>org.apache.avro</groupId>",
                "+              <artifactId>avro</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>org.apache.jackrabbit</groupId>",
                "+              <artifactId>jackrabbit-webdav</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>io.netty</groupId>",
                "+              <artifactId>netty</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>commons-httpclient</groupId>",
                "+              <artifactId>commons-httpclient</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>org.eclipse.jgit</groupId>",
                "+              <artifactId>org.eclipse.jgit</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>com.jcraft</groupId>",
                "+              <artifactId>jsch</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>org.apache.commons</groupId>",
                "+              <artifactId>commons-compress</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>xml-apis</groupId>",
                "+              <artifactId>xml-apis</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>xerces</groupId>",
                "+              <artifactId>xercesImpl</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>com.google.guava</groupId>",
                "+              <artifactId>guava</artifactId>",
                "+            </exclusion>",
                "+          </exclusions>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+          <groupId>org.apache.hadoop</groupId>",
                "+          <artifactId>hadoop-yarn-server-tests</artifactId>",
                "+          <version>${hadoop.version}</version>",
                "+          <classifier>tests</classifier>",
                "+          <scope>test</scope>",
                "+          <exclusions>",
                "+            <exclusion>",
                "+              <groupId>com.sun.jersey</groupId>",
                "+              <artifactId>jersey-core</artifactId>",
                "+            </exclusion>",
                "+            <!--<exclusion>-->",
                "+            <!--<groupId>com.sun.jersey</groupId>-->",
                "+            <!--<artifactId>jersey-json</artifactId>-->",
                "+            <!--</exclusion>-->",
                "+            <exclusion>",
                "+              <groupId>com.sun.jersey</groupId>",
                "+              <artifactId>jersey-client</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>com.sun.jersey</groupId>",
                "+              <artifactId>jersey-server</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>javax.servlet</groupId>",
                "+              <artifactId>servlet-api</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>org.apache.avro</groupId>",
                "+              <artifactId>avro</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>org.apache.jackrabbit</groupId>",
                "+              <artifactId>jackrabbit-webdav</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>io.netty</groupId>",
                "+              <artifactId>netty</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>commons-httpclient</groupId>",
                "+              <artifactId>commons-httpclient</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>org.eclipse.jgit</groupId>",
                "+              <artifactId>org.eclipse.jgit</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>com.jcraft</groupId>",
                "+              <artifactId>jsch</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>org.apache.commons</groupId>",
                "+              <artifactId>commons-compress</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>xml-apis</groupId>",
                "+              <artifactId>xml-apis</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>xerces</groupId>",
                "+              <artifactId>xercesImpl</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>org.codehaus.jackson</groupId>",
                "+              <artifactId>jackson-core-asl</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>org.codehaus.jackson</groupId>",
                "+              <artifactId>jackson-jaxrs</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>org.codehaus.jackson</groupId>",
                "+              <artifactId>jackson-xc</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>org.codehaus.jackson</groupId>",
                "+              <artifactId>jackson-mapper-asl</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>com.google.guava</groupId>",
                "+              <artifactId>guava</artifactId>",
                "+            </exclusion>",
                "+          </exclusions>",
                "+        </dependency>",
                "+",
                "+        <dependency>",
                "+          <groupId>org.apache.zeppelin</groupId>",
                "+          <artifactId>zeppelin-spark_2.10</artifactId>",
                "+          <version>${project.version}</version>",
                "+          <scope>test</scope>",
                "+          <exclusions>",
                "+            <exclusion>",
                "+              <groupId>com.google.protobuf</groupId>",
                "+              <artifactId>protobuf-java</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>com.google.guava</groupId>",
                "+              <artifactId>guava</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>com.google.errorprone</groupId>",
                "+              <artifactId>error_prone_annotations</artifactId>",
                "+            </exclusion>",
                "+            <exclusion>",
                "+              <groupId>io.grpc</groupId>",
                "+              <artifactId>grpc-context</artifactId>",
                "+            </exclusion>",
                "+          </exclusions>",
                "+        </dependency>",
                "+      </dependencies>",
                "+    </profile>",
                "+",
                "+    <profile>",
                "+      <id>hadoop3</id>",
                "+      <properties>",
                "+        <hadoop.version>3.0.0</hadoop.version>",
                "+      </properties>",
                "+      <dependencies>",
                "+        <dependency>",
                "+          <groupId>org.apache.hadoop</groupId>",
                "+          <artifactId>hadoop-client-api</artifactId>",
                "+          <version>${hadoop.version}</version>",
                "+        </dependency>",
                "+        <dependency>",
                "+          <groupId>org.apache.hadoop</groupId>",
                "+          <artifactId>hadoop-client-runtime</artifactId>",
                "+          <version>${hadoop.version}</version>",
                "+        </dependency>",
                "+        <dependency>",
                "+          <groupId>org.apache.hadoop</groupId>",
                "+          <artifactId>hadoop-client-minicluster</artifactId>",
                "+          <version>${hadoop.version}</version>",
                "+          <scope>test</scope>",
                "+        </dependency>",
                "+      </dependencies>",
                "+    </profile>",
                "+  </profiles>",
                " </project>"
            ],
            "changed_files": [
                ".travis.yml",
                "zeppelin-server/src/main/java/org/apache/zeppelin/utils/SecurityUtils.java",
                "zeppelin-zengine/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3104": ""
            },
            "ghissue_refs": {
                "2728": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3104",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2728",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "66644126af792986add25cb1aca5e5e7471b465a",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1517480567,
            "hunks": 12,
            "message": "ZEPPELIN-3157. Fixed Checkstyle errors in hbase module ### What is this PR for? Fixed Checkstyle issues in the **hbase** module. ### What type of PR is it? Improvement ### Todos * [ ] - Task ### What is the Jira issue? * https://issues.apache.org/jira/browse/ZEPPELIN-3157 ### How should this be tested? * CI pass ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? no * Is there breaking changes for older versions? no * Does this needs documentation? no Author: Jan Hentschel <jan.hentschel@ultratendency.com> Closes #2758 from HorizonNet/ZEPPELIN-3157 and squashes the following commits: 4aa4eae [Jan Hentschel] ZEPPELIN-3157. Fixed Checkstyle errors in hbase module",
            "diff": [
                "diff --git a/hbase/pom.xml b/hbase/pom.xml",
                "index 46886fd42..f189c074e 100644",
                "--- a/hbase/pom.xml",
                "+++ b/hbase/pom.xml",
                "@@ -126,2 +126,9 @@",
                "       </plugin>",
                "+      <plugin>",
                "+        <groupId>org.apache.maven.plugins</groupId>",
                "+        <artifactId>maven-checkstyle-plugin</artifactId>",
                "+        <configuration>",
                "+          <skip>false</skip>",
                "+        </configuration>",
                "+      </plugin>",
                "     </plugins>",
                "diff --git a/hbase/src/main/java/org/apache/zeppelin/hbase/HbaseInterpreter.java b/hbase/src/main/java/org/apache/zeppelin/hbase/HbaseInterpreter.java",
                "index 63c192833..adddacfe9 100644",
                "--- a/hbase/src/main/java/org/apache/zeppelin/hbase/HbaseInterpreter.java",
                "+++ b/hbase/src/main/java/org/apache/zeppelin/hbase/HbaseInterpreter.java",
                "@@ -16,7 +16,4 @@ package org.apache.zeppelin.hbase;",
                "-import org.apache.zeppelin.interpreter.*;",
                "-import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;",
                "-import org.apache.zeppelin.scheduler.Scheduler;",
                "-import org.apache.zeppelin.scheduler.SchedulerFactory;",
                " import org.jruby.embed.LocalContextScope;",
                "+import org.jruby.embed.ScriptingContainer;",
                " import org.slf4j.Logger;",
                "@@ -24,8 +21,4 @@ import org.slf4j.LoggerFactory;",
                "-import org.jruby.embed.ScriptingContainer;",
                "-",
                " import java.io.File;",
                " import java.io.FileInputStream;",
                "-import java.io.FileNotFoundException;",
                "-import java.io.InputStream;",
                " import java.io.IOException;",
                "@@ -34,4 +27,2 @@ import java.nio.file.Path;",
                " import java.nio.file.Paths;",
                "-import java.util.ArrayList;",
                "-import java.util.Arrays;",
                " import java.util.List;",
                "@@ -39,2 +30,10 @@ import java.util.Properties;",
                "+import org.apache.zeppelin.interpreter.Interpreter;",
                "+import org.apache.zeppelin.interpreter.InterpreterContext;",
                "+import org.apache.zeppelin.interpreter.InterpreterException;",
                "+import org.apache.zeppelin.interpreter.InterpreterResult;",
                "+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;",
                "+import org.apache.zeppelin.scheduler.Scheduler;",
                "+import org.apache.zeppelin.scheduler.SchedulerFactory;",
                "+",
                " /**",
                "@@ -76,12 +75,12 @@ public class HbaseInterpreter extends Interpreter {",
                "     if (!Boolean.parseBoolean(getProperty(HBASE_TEST_MODE))) {",
                "-      String hbase_home = getProperty(HBASE_HOME);",
                "-      String ruby_src = getProperty(HBASE_RUBY_SRC);",
                "-      Path abs_ruby_src = Paths.get(hbase_home, ruby_src).toAbsolutePath();",
                "+      String hbaseHome = getProperty(HBASE_HOME);",
                "+      String rubySrc = getProperty(HBASE_RUBY_SRC);",
                "+      Path absRubySrc = Paths.get(hbaseHome, rubySrc).toAbsolutePath();",
                "-      logger.info(\"Home:\" + hbase_home);",
                "-      logger.info(\"Ruby Src:\" + ruby_src);",
                "+      logger.info(\"Home:\" + hbaseHome);",
                "+      logger.info(\"Ruby Src:\" + rubySrc);",
                "-      File f = abs_ruby_src.toFile();",
                "+      File f = absRubySrc.toFile();",
                "       if (!f.exists() || !f.isDirectory()) {",
                "-        throw new InterpreterException(\"HBase ruby sources is not available at '\" + abs_ruby_src",
                "+        throw new InterpreterException(\"HBase ruby sources is not available at '\" + absRubySrc",
                "             + \"'\");",
                "@@ -89,10 +88,10 @@ public class HbaseInterpreter extends Interpreter {",
                "-      logger.info(\"Absolute Ruby Source:\" + abs_ruby_src.toString());",
                "+      logger.info(\"Absolute Ruby Source:\" + absRubySrc.toString());",
                "       // hirb.rb:41 requires the following system properties to be set.",
                "       Properties sysProps = System.getProperties();",
                "-      sysProps.setProperty(HBASE_RUBY_SRC, abs_ruby_src.toString());",
                "+      sysProps.setProperty(HBASE_RUBY_SRC, absRubySrc.toString());",
                "-      Path abs_hirb_path = Paths.get(hbase_home, \"bin/hirb.rb\");",
                "+      Path absHirbPath = Paths.get(hbaseHome, \"bin/hirb.rb\");",
                "       try {",
                "-        FileInputStream fis = new FileInputStream(abs_hirb_path.toFile());",
                "+        FileInputStream fis = new FileInputStream(absHirbPath.toFile());",
                "         this.scriptingContainer.runScriptlet(fis, \"hirb.rb\");"
            ],
            "changed_files": [
                "hbase/pom.xml",
                "hbase/src/main/java/org/apache/zeppelin/hbase/HbaseInterpreter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3157": ""
            },
            "ghissue_refs": {
                "2758": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3157",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2758",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6b0f6e7a086be19323ae59e3a85408914dd1676d",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1507587562,
            "hunks": 3,
            "message": "ZEPPELIN-2985: correct grammar in keyboard tooltip ### What is this PR for? The tooltip for \"List of shortcut\" should read \"List of shortcuts\" (plural). ### What type of PR is it? Bug Fix ### Todos * N/A ### What is the Jira issue? * https://issues.apache.org/jira/browse/ZEPPELIN-2985 ### How should this be tested? * Hover over tooltip. Ensure that tooltip contains changes and behaves like a   tooltip. (Shows up then hides based on cursor position) ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Gabe Fernando <gef756@gmail.com> Closes #2617 from gef756/dev-kb-tooltip and squashes the following commits: b0365de [Gabe Fernando] ENH: correct grammar in keyboard tooltip",
            "diff": [
                "diff --git a/zeppelin-web/src/app/notebook/notebook-actionBar.html b/zeppelin-web/src/app/notebook/notebook-actionBar.html",
                "index 0e04d4934..b121fee52 100644",
                "--- a/zeppelin-web/src/app/notebook/notebook-actionBar.html",
                "+++ b/zeppelin-web/src/app/notebook/notebook-actionBar.html",
                "@@ -21,6 +21,6 @@ limitations under the License.",
                "            ng-blur=\"updateNoteName(input.value);input.showEditor = false;\" ng-enter=\"updateNoteName(input.value);input.showEditor = false;\" />",
                "-      <p class=\"form-control-static2\" ",
                "-         tooltip-placement=\"bottom\" ",
                "+      <p class=\"form-control-static2\"",
                "+         tooltip-placement=\"bottom\"",
                "          uib-tooltip={{noteName(note)}}",
                "-         ng-click=\"input.showEditor = !revisionView; input.value = note.name\" ",
                "+         ng-click=\"input.showEditor = !revisionView; input.value = note.name\"",
                "          ng-show=\"!input.showEditor\">{{noteName(note)}}</p>",
                "@@ -302,3 +302,3 @@ limitations under the License.",
                "               data-target=\"#shortcutModal\"",
                "-              tooltip-placement=\"bottom\" uib-tooltip=\"List of shortcut\">",
                "+              tooltip-placement=\"bottom\" uib-tooltip=\"List of shortcuts\">",
                "           <i class=\"fa fa-keyboard-o\"></i>"
            ],
            "changed_files": [
                "zeppelin-web/src/app/notebook/notebook-actionBar.html"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-2985": ""
            },
            "ghissue_refs": {
                "2617": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-2985",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2617",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "81e73cd8da109ce823ee705efcb802baa7a9d102",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1517193674,
            "hunks": 94,
            "message": "ZEPPELIN-3192. Bump up Zeppelin version to 0.9.0-SNAPSHOT ### What is this PR for? trivial pom file change ### What type of PR is it? [Improvement] ### Todos * [ ] - Task ### What is the Jira issue? * https://issues.apache.org/jira/browse/ZEPPELIN-3192 ### How should this be tested? * Travis pass ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Jeff Zhang <zjffdu@apache.org> Closes #2748 from zjffdu/ZEPPELIN-3192 and squashes the following commits: 635acde [Jeff Zhang] ZEPPELIN-3192. Bump up Zeppelin version to 0.9.0-SNAPSHOT",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index 5f44dcdfd..677209b85 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -77,3 +77,3 @@ matrix:",
                "         firefox: \"31.0\"",
                "-      env: PYTHON=\"2\" SCALA_VER=\"2.10\" SPARK_VER=\"1.6.3\" HADOOP_VER=\"2.6\" PROFILE=\"-Pweb-ci -Pspark-1.6 -Phadoop2 -Phadoop-2.6 -Phelium-dev -Pexamples -Pintegration\" BUILD_FLAG=\"package -DskipTests -DskipRat\" TEST_FLAG=\"verify -DskipRat\" TEST_PROJECTS=\"-pl .,zeppelin-integration -DfailIfNoTests=false\"",
                "+      env: PYTHON=\"2\" SCALA_VER=\"2.10\" SPARK_VER=\"1.6.3\" HADOOP_VER=\"2.6\" PROFILE=\"-Pweb-ci -Pspark-1.6 -Phadoop2 -Phadoop-2.6 -Phelium-dev -Pexamples -Pintegration\" BUILD_FLAG=\"install -DskipTests -DskipRat\" TEST_FLAG=\"verify -DskipRat\" TEST_PROJECTS=\"-pl .,zeppelin-integration -DfailIfNoTests=false\"",
                "diff --git a/alluxio/pom.xml b/alluxio/pom.xml",
                "index f36494e94..6ef7a01b2 100644",
                "--- a/alluxio/pom.xml",
                "+++ b/alluxio/pom.xml",
                "@@ -24,3 +24,3 @@",
                "         <groupId>org.apache.zeppelin</groupId>",
                "-        <version>0.8.0-SNAPSHOT</version>",
                "+        <version>0.9.0-SNAPSHOT</version>",
                "         <relativePath>../interpreter-parent</relativePath>",
                "@@ -31,3 +31,3 @@",
                "     <packaging>jar</packaging>",
                "-    <version>0.8.0-SNAPSHOT</version>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "     <name>Zeppelin: Alluxio interpreter</name>",
                "diff --git a/angular/pom.xml b/angular/pom.xml",
                "index 9ff2acb80..f9d74481a 100644",
                "--- a/angular/pom.xml",
                "+++ b/angular/pom.xml",
                "@@ -24,3 +24,3 @@",
                "     <groupId>org.apache.zeppelin</groupId>",
                "-    <version>0.8.0-SNAPSHOT</version>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "     <relativePath>../interpreter-parent</relativePath>",
                "@@ -31,3 +31,3 @@",
                "   <packaging>jar</packaging>",
                "-  <version>0.8.0-SNAPSHOT</version>",
                "+  <version>0.9.0-SNAPSHOT</version>",
                "   <name>Zeppelin: Angular interpreter</name>",
                "diff --git a/beam/pom.xml b/beam/pom.xml",
                "index a1d476153..726ec147d 100644",
                "--- a/beam/pom.xml",
                "+++ b/beam/pom.xml",
                "@@ -24,3 +24,3 @@",
                "     <groupId>org.apache.zeppelin</groupId>",
                "-    <version>0.8.0-SNAPSHOT</version>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "     <relativePath>../interpreter-parent</relativePath>",
                "@@ -31,3 +31,3 @@",
                "   <packaging>jar</packaging>",
                "-  <version>0.8.0-SNAPSHOT</version>",
                "+  <version>0.9.0-SNAPSHOT</version>",
                "   <name>Zeppelin: Beam interpreter</name>",
                "diff --git a/bigquery/pom.xml b/bigquery/pom.xml",
                "index db88edafa..c116c2fdd 100644",
                "--- a/bigquery/pom.xml",
                "+++ b/bigquery/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <groupId>org.apache.zeppelin</groupId>",
                "-    <version>0.8.0-SNAPSHOT</version>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "     <relativePath>../interpreter-parent</relativePath>",
                "@@ -32,3 +32,3 @@",
                "   <packaging>jar</packaging>",
                "-  <version>0.8.0-SNAPSHOT</version>",
                "+  <version>0.9.0-SNAPSHOT</version>",
                "   <name>Zeppelin: BigQuery interpreter</name>",
                "diff --git a/cassandra/pom.xml b/cassandra/pom.xml",
                "index 4b139e9c6..a07ed824f 100644",
                "--- a/cassandra/pom.xml",
                "+++ b/cassandra/pom.xml",
                "@@ -24,3 +24,3 @@",
                "         <groupId>org.apache.zeppelin</groupId>",
                "-        <version>0.8.0-SNAPSHOT</version>",
                "+        <version>0.9.0-SNAPSHOT</version>",
                "         <relativePath>../interpreter-parent</relativePath>",
                "@@ -31,3 +31,3 @@",
                "     <packaging>jar</packaging>",
                "-    <version>0.8.0-SNAPSHOT</version>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "     <name>Zeppelin: Apache Cassandra interpreter</name>",
                "diff --git a/dev/change_zeppelin_version.sh b/dev/change_zeppelin_version.sh",
                "index cb9c0179c..7646e9db4 100755",
                "--- a/dev/change_zeppelin_version.sh",
                "+++ b/dev/change_zeppelin_version.sh",
                "@@ -21,3 +21,3 @@ usage() {",
                "   echo \"usage) $0 [OLD version] [NEW version]\"",
                "-  echo \"   ex. $0 0.8.0-SNAPSHOT 0.8.0\"",
                "+  echo \"   ex. $0 0.9.0-SNAPSHOT 0.9.0\"",
                "   exit 1",
                "diff --git a/docs/_config.yml b/docs/_config.yml",
                "index 69d0d8369..d436f8bd6 100644",
                "--- a/docs/_config.yml",
                "+++ b/docs/_config.yml",
                "@@ -23,3 +23,3 @@ author :",
                "-ZEPPELIN_VERSION : 0.8.0-SNAPSHOT",
                "+ZEPPELIN_VERSION : 0.9.0-SNAPSHOT",
                "@@ -61,3 +61,3 @@ JB :",
                "   #     This means always setting the protocol (http|https) or prefixing with \"/\"",
                "-  BASE_PATH : /docs/0.8.0-SNAPSHOT",
                "+  BASE_PATH : /docs/0.9.0-SNAPSHOT",
                "diff --git a/elasticsearch/pom.xml b/elasticsearch/pom.xml",
                "index b317e2858..f80cbc5e7 100644",
                "--- a/elasticsearch/pom.xml",
                "+++ b/elasticsearch/pom.xml",
                "@@ -24,3 +24,3 @@",
                "     <groupId>org.apache.zeppelin</groupId>",
                "-    <version>0.8.0-SNAPSHOT</version>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "     <relativePath>../interpreter-parent</relativePath>",
                "@@ -30,3 +30,3 @@",
                "   <packaging>jar</packaging>",
                "-  <version>0.8.0-SNAPSHOT</version>",
                "+  <version>0.9.0-SNAPSHOT</version>",
                "   <name>Zeppelin: Elasticsearch interpreter</name>",
                "diff --git a/file/pom.xml b/file/pom.xml",
                "index 1a7668321..e649991ec 100644",
                "--- a/file/pom.xml",
                "+++ b/file/pom.xml",
                "@@ -24,3 +24,3 @@",
                "     <groupId>org.apache.zeppelin</groupId>",
                "-    <version>0.8.0-SNAPSHOT</version>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "     <relativePath>../interpreter-parent</relativePath>",
                "@@ -31,3 +31,3 @@",
                "   <packaging>jar</packaging>",
                "-  <version>0.8.0-SNAPSHOT</version>",
                "+  <version>0.9.0-SNAPSHOT</version>",
                "   <name>Zeppelin: File System Interpreters</name>",
                "diff --git a/flink/pom.xml b/flink/pom.xml",
                "index 5c0cc3bf9..455092d8a 100644",
                "--- a/flink/pom.xml",
                "+++ b/flink/pom.xml",
                "@@ -24,3 +24,3 @@",
                "     <groupId>org.apache.zeppelin</groupId>",
                "-    <version>0.8.0-SNAPSHOT</version>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "     <relativePath>../interpreter-parent</relativePath>",
                "@@ -31,3 +31,3 @@",
                "   <packaging>jar</packaging>",
                "-  <version>0.8.0-SNAPSHOT</version>",
                "+  <version>0.9.0-SNAPSHOT</version>",
                "   <name>Zeppelin: Flink</name>",
                "diff --git a/geode/pom.xml b/geode/pom.xml",
                "index 4a9dadd23..d2adaad47 100644",
                "--- a/geode/pom.xml",
                "+++ b/geode/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <groupId>org.apache.zeppelin</groupId>",
                "-    <version>0.8.0-SNAPSHOT</version>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "     <relativePath>../interpreter-parent</relativePath>",
                "@@ -32,3 +32,3 @@",
                "   <packaging>jar</packaging>",
                "-  <version>0.8.0-SNAPSHOT</version>",
                "+  <version>0.9.0-SNAPSHOT</version>",
                "   <name>Zeppelin: Apache Geode interpreter</name>",
                "diff --git a/groovy/pom.xml b/groovy/pom.xml",
                "index 64c51f856..8de336534 100644",
                "--- a/groovy/pom.xml",
                "+++ b/groovy/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <!--version>0.6.2</version-->",
                "-    <version>0.8.0-SNAPSHOT</version>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "     <relativePath>../interpreter-parent</relativePath>",
                "@@ -32,3 +32,3 @@",
                "   <packaging>jar</packaging>",
                "-  <version>0.8.0-SNAPSHOT</version>",
                "+  <version>0.9.0-SNAPSHOT</version>",
                "   <name>Zeppelin: Groovy interpreter</name>",
                "diff --git a/hbase/pom.xml b/hbase/pom.xml",
                "index 8f27631ea..46886fd42 100644",
                "--- a/hbase/pom.xml",
                "+++ b/hbase/pom.xml",
                "@@ -24,3 +24,3 @@",
                "     <groupId>org.apache.zeppelin</groupId>",
                "-    <version>0.8.0-SNAPSHOT</version>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "     <relativePath>../interpreter-parent</relativePath>",
                "@@ -31,3 +31,3 @@",
                "   <packaging>jar</packaging>",
                "-  <version>0.8.0-SNAPSHOT</version>",
                "+  <version>0.9.0-SNAPSHOT</version>",
                "   <name>Zeppelin: HBase interpreter</name>",
                "diff --git a/helium-dev/pom.xml b/helium-dev/pom.xml",
                "index 8514946d7..77c597916 100644",
                "--- a/helium-dev/pom.xml",
                "+++ b/helium-dev/pom.xml",
                "@@ -26,3 +26,3 @@",
                "     <artifactId>interpreter-parent</artifactId>",
                "-    <version>0.8.0-SNAPSHOT</version>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "     <relativePath>../interpreter-parent</relativePath>",
                "@@ -32,3 +32,3 @@",
                "   <artifactId>helium-dev</artifactId>",
                "-  <version>0.8.0-SNAPSHOT</version>",
                "+  <version>0.9.0-SNAPSHOT</version>",
                "   <name>Zeppelin: Helium development interpreter</name>",
                "diff --git a/ignite/pom.xml b/ignite/pom.xml",
                "index 5ce6e3729..cd778b8c1 100644",
                "--- a/ignite/pom.xml",
                "+++ b/ignite/pom.xml",
                "@@ -24,3 +24,3 @@",
                "     <groupId>org.apache.zeppelin</groupId>",
                "-    <version>0.8.0-SNAPSHOT</version>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "     <relativePath>../interpreter-parent</relativePath>",
                "@@ -30,3 +30,3 @@",
                "   <packaging>jar</packaging>",
                "-  <version>0.8.0-SNAPSHOT</version>",
                "+  <version>0.9.0-SNAPSHOT</version>",
                "   <name>Zeppelin: Apache Ignite interpreter</name>",
                "diff --git a/interpreter-parent/pom.xml b/interpreter-parent/pom.xml",
                "index fc924c19a..cbfedd5d4 100644",
                "--- a/interpreter-parent/pom.xml",
                "+++ b/interpreter-parent/pom.xml",
                "@@ -24,3 +24,3 @@",
                "     <groupId>org.apache.zeppelin</groupId>",
                "-    <version>0.8.0-SNAPSHOT</version>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "     <relativePath>..</relativePath>",
                "@@ -31,3 +31,3 @@",
                "   <packaging>pom</packaging>",
                "-  <version>0.8.0-SNAPSHOT</version>",
                "+  <version>0.9.0-SNAPSHOT</version>",
                "   <name>Zeppelin: Interpreter Parent</name>",
                "diff --git a/jdbc/pom.xml b/jdbc/pom.xml",
                "index beec50c0a..2f8976a9d 100644",
                "--- a/jdbc/pom.xml",
                "+++ b/jdbc/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <groupId>org.apache.zeppelin</groupId>",
                "-    <version>0.8.0-SNAPSHOT</version>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "     <relativePath>../interpreter-parent</relativePath>",
                "@@ -32,3 +32,3 @@",
                "   <packaging>jar</packaging>",
                "-  <version>0.8.0-SNAPSHOT</version>",
                "+  <version>0.9.0-SNAPSHOT</version>",
                "   <name>Zeppelin: JDBC interpreter</name>",
                "diff --git a/kylin/pom.xml b/kylin/pom.xml",
                "index b70facbcc..6d78fdfc5 100644",
                "--- a/kylin/pom.xml",
                "+++ b/kylin/pom.xml",
                "@@ -25,3 +25,3 @@",
                "         <groupId>org.apache.zeppelin</groupId>",
                "-        <version>0.8.0-SNAPSHOT</version>",
                "+        <version>0.9.0-SNAPSHOT</version>",
                "         <relativePath>../interpreter-parent</relativePath>",
                "@@ -33,3 +33,3 @@",
                "     <packaging>jar</packaging>",
                "-    <version>0.8.0-SNAPSHOT</version>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "     <name>Zeppelin: Kylin interpreter</name>",
                "diff --git a/lens/pom.xml b/lens/pom.xml",
                "index ecc0a12ed..828e8f3e9 100644",
                "--- a/lens/pom.xml",
                "+++ b/lens/pom.xml",
                "@@ -24,3 +24,3 @@",
                "     <groupId>org.apache.zeppelin</groupId>",
                "-    <version>0.8.0-SNAPSHOT</version>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "     <relativePath>../interpreter-parent</relativePath>",
                "@@ -31,3 +31,3 @@",
                "   <packaging>jar</packaging>",
                "-  <version>0.8.0-SNAPSHOT</version>",
                "+  <version>0.9.0-SNAPSHOT</version>",
                "   <name>Zeppelin: Lens interpreter</name>",
                "diff --git a/livy/pom.xml b/livy/pom.xml",
                "index 0ec174a9c..1c9d8fb8e 100644",
                "--- a/livy/pom.xml",
                "+++ b/livy/pom.xml",
                "@@ -26,3 +26,3 @@",
                "         <groupId>org.apache.zeppelin</groupId>",
                "-        <version>0.8.0-SNAPSHOT</version>",
                "+        <version>0.9.0-SNAPSHOT</version>",
                "         <relativePath>../interpreter-parent</relativePath>",
                "@@ -33,3 +33,3 @@",
                "     <packaging>jar</packaging>",
                "-    <version>0.8.0-SNAPSHOT</version>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "     <name>Zeppelin: Livy interpreter</name>",
                "diff --git a/markdown/pom.xml b/markdown/pom.xml",
                "index ca9544980..4feb3bca6 100644",
                "--- a/markdown/pom.xml",
                "+++ b/markdown/pom.xml",
                "@@ -24,3 +24,3 @@",
                "     <groupId>org.apache.zeppelin</groupId>",
                "-    <version>0.8.0-SNAPSHOT</version>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "     <relativePath>../interpreter-parent</relativePath>",
                "@@ -31,3 +31,3 @@",
                "   <packaging>jar</packaging>",
                "-  <version>0.8.0-SNAPSHOT</version>",
                "+  <version>0.9.0-SNAPSHOT</version>",
                "   <name>Zeppelin: Markdown interpreter</name>",
                "diff --git a/neo4j/pom.xml b/neo4j/pom.xml",
                "index 298726fb8..2bf9e9a36 100644",
                "--- a/neo4j/pom.xml",
                "+++ b/neo4j/pom.xml",
                "@@ -24,3 +24,3 @@",
                "     <groupId>org.apache.zeppelin</groupId>",
                "-    <version>0.8.0-SNAPSHOT</version>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "     <relativePath>..</relativePath>",
                "@@ -31,3 +31,3 @@",
                "   <packaging>jar</packaging>",
                "-  <version>0.8.0-SNAPSHOT</version>",
                "+  <version>0.9.0-SNAPSHOT</version>",
                "   <name>Zeppelin: Neo4j interpreter</name>",
                "diff --git a/pig/pom.xml b/pig/pom.xml",
                "index 4a56a3429..4553b5cf5 100644",
                "--- a/pig/pom.xml",
                "+++ b/pig/pom.xml",
                "@@ -26,3 +26,3 @@",
                "         <groupId>org.apache.zeppelin</groupId>",
                "-        <version>0.8.0-SNAPSHOT</version>",
                "+        <version>0.9.0-SNAPSHOT</version>",
                "         <relativePath>../interpreter-parent</relativePath>",
                "@@ -33,3 +33,3 @@",
                "     <packaging>jar</packaging>",
                "-    <version>0.8.0-SNAPSHOT</version>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "     <name>Zeppelin: Apache Pig Interpreter</name>",
                "diff --git a/pom.xml b/pom.xml",
                "index bb1a1e2d6..880bea636 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -26,3 +26,3 @@",
                "   <packaging>pom</packaging>",
                "-  <version>0.8.0-SNAPSHOT</version>",
                "+  <version>0.9.0-SNAPSHOT</version>",
                "   <name>Zeppelin</name>",
                "diff --git a/python/pom.xml b/python/pom.xml",
                "index a906b5d5f..3ce47b063 100644",
                "--- a/python/pom.xml",
                "+++ b/python/pom.xml",
                "@@ -24,3 +24,3 @@",
                "     <groupId>org.apache.zeppelin</groupId>",
                "-    <version>0.8.0-SNAPSHOT</version>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "     <relativePath>../interpreter-parent</relativePath>",
                "@@ -31,3 +31,3 @@",
                "   <packaging>jar</packaging>",
                "-  <version>0.8.0-SNAPSHOT</version>",
                "+  <version>0.9.0-SNAPSHOT</version>",
                "   <name>Zeppelin: Python interpreter</name>",
                "diff --git a/r/pom.xml b/r/pom.xml",
                "index 4c1b21833..8c80b3420 100644",
                "--- a/r/pom.xml",
                "+++ b/r/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <groupId>org.apache.zeppelin</groupId>",
                "-    <version>0.8.0-SNAPSHOT</version>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "     <relativePath>..</relativePath>",
                "diff --git a/scalding/pom.xml b/scalding/pom.xml",
                "index 763afe0bb..ec7fe40ba 100644",
                "--- a/scalding/pom.xml",
                "+++ b/scalding/pom.xml",
                "@@ -24,3 +24,3 @@",
                "     <groupId>org.apache.zeppelin</groupId>",
                "-    <version>0.8.0-SNAPSHOT</version>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "     <relativePath>../interpreter-parent</relativePath>",
                "@@ -31,3 +31,3 @@",
                "   <packaging>jar</packaging>",
                "-  <version>0.8.0-SNAPSHOT</version>",
                "+  <version>0.9.0-SNAPSHOT</version>",
                "   <name>Zeppelin: Scalding interpreter</name>",
                "diff --git a/scio/pom.xml b/scio/pom.xml",
                "index 27ccb0cc7..a62ff2b83 100644",
                "--- a/scio/pom.xml",
                "+++ b/scio/pom.xml",
                "@@ -24,3 +24,3 @@",
                "     <groupId>org.apache.zeppelin</groupId>",
                "-    <version>0.8.0-SNAPSHOT</version>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "     <relativePath>../interpreter-parent</relativePath>",
                "@@ -31,3 +31,3 @@",
                "   <packaging>jar</packaging>",
                "-  <version>0.8.0-SNAPSHOT</version>",
                "+  <version>0.9.0-SNAPSHOT</version>",
                "   <name>Zeppelin: Scio</name>",
                "diff --git a/scripts/docker/zeppelin/bin/Dockerfile b/scripts/docker/zeppelin/bin/Dockerfile",
                "index da5a67764..4f6166a26 100644",
                "--- a/scripts/docker/zeppelin/bin/Dockerfile",
                "+++ b/scripts/docker/zeppelin/bin/Dockerfile",
                "@@ -19,3 +19,3 @@ MAINTAINER Apache Software Foundation <dev@zeppelin.apache.org>",
                " # `Z_VERSION` will be updated by `dev/change_zeppelin_version.sh`",
                "-ENV Z_VERSION=\"0.8.0-SNAPSHOT\"",
                "+ENV Z_VERSION=\"0.9.0-SNAPSHOT\"",
                " ENV LOG_TAG=\"[ZEPPELIN_${Z_VERSION}]:\" \\",
                "diff --git a/shell/pom.xml b/shell/pom.xml",
                "index 56714f5b1..6a7fda9ed 100644",
                "--- a/shell/pom.xml",
                "+++ b/shell/pom.xml",
                "@@ -24,3 +24,3 @@",
                "     <groupId>org.apache.zeppelin</groupId>",
                "-    <version>0.8.0-SNAPSHOT</version>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "     <relativePath>../interpreter-parent</relativePath>",
                "@@ -31,3 +31,3 @@",
                "   <packaging>jar</packaging>",
                "-  <version>0.8.0-SNAPSHOT</version>",
                "+  <version>0.9.0-SNAPSHOT</version>",
                "   <name>Zeppelin: Shell interpreter</name>",
                "diff --git a/spark-dependencies/pom.xml b/spark-dependencies/pom.xml",
                "index b7904c091..15138cd59 100644",
                "--- a/spark-dependencies/pom.xml",
                "+++ b/spark-dependencies/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <groupId>org.apache.zeppelin</groupId>",
                "-    <version>0.8.0-SNAPSHOT</version>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "     <relativePath>..</relativePath>",
                "@@ -32,3 +32,3 @@",
                "   <packaging>jar</packaging>",
                "-  <version>0.8.0-SNAPSHOT</version>",
                "+  <version>0.9.0-SNAPSHOT</version>",
                "   <name>Zeppelin: Spark dependencies</name>",
                "diff --git a/spark/pom.xml b/spark/pom.xml",
                "index 71110e30a..1972f26d3 100644",
                "--- a/spark/pom.xml",
                "+++ b/spark/pom.xml",
                "@@ -24,3 +24,3 @@",
                "     <groupId>org.apache.zeppelin</groupId>",
                "-    <version>0.8.0-SNAPSHOT</version>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "     <relativePath>..</relativePath>",
                "@@ -31,3 +31,3 @@",
                "   <packaging>jar</packaging>",
                "-  <version>0.8.0-SNAPSHOT</version>",
                "+  <version>0.9.0-SNAPSHOT</version>",
                "   <name>Zeppelin: Spark</name>",
                "diff --git a/zeppelin-display/pom.xml b/zeppelin-display/pom.xml",
                "index 4058aefbf..c6edd95e4 100644",
                "--- a/zeppelin-display/pom.xml",
                "+++ b/zeppelin-display/pom.xml",
                "@@ -24,3 +24,3 @@",
                "     <groupId>org.apache.zeppelin</groupId>",
                "-    <version>0.8.0-SNAPSHOT</version>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "     <relativePath>..</relativePath>",
                "@@ -31,3 +31,3 @@",
                "   <packaging>jar</packaging>",
                "-  <version>0.8.0-SNAPSHOT</version>",
                "+  <version>0.9.0-SNAPSHOT</version>",
                "   <name>Zeppelin: Display system apis</name>",
                "diff --git a/zeppelin-distribution/pom.xml b/zeppelin-distribution/pom.xml",
                "index ed05c9383..84a19b54f 100644",
                "--- a/zeppelin-distribution/pom.xml",
                "+++ b/zeppelin-distribution/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <groupId>org.apache.zeppelin</groupId>",
                "-    <version>0.8.0-SNAPSHOT</version>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "     <relativePath>..</relativePath>",
                "diff --git a/zeppelin-examples/pom.xml b/zeppelin-examples/pom.xml",
                "index e9f04731b..bfbffa086 100644",
                "--- a/zeppelin-examples/pom.xml",
                "+++ b/zeppelin-examples/pom.xml",
                "@@ -24,3 +24,3 @@",
                "     <groupId>org.apache.zeppelin</groupId>",
                "-    <version>0.8.0-SNAPSHOT</version>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "     <relativePath>..</relativePath>",
                "@@ -31,3 +31,3 @@",
                "   <packaging>pom</packaging>",
                "-  <version>0.8.0-SNAPSHOT</version>",
                "+  <version>0.9.0-SNAPSHOT</version>",
                "   <name>Zeppelin: Examples</name>",
                "diff --git a/zeppelin-examples/zeppelin-example-clock/pom.xml b/zeppelin-examples/zeppelin-example-clock/pom.xml",
                "index d4fed2171..6b24987cb 100644",
                "--- a/zeppelin-examples/zeppelin-example-clock/pom.xml",
                "+++ b/zeppelin-examples/zeppelin-example-clock/pom.xml",
                "@@ -24,3 +24,3 @@",
                "     <groupId>org.apache.zeppelin</groupId>",
                "-    <version>0.8.0-SNAPSHOT</version>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "     <relativePath>..</relativePath>",
                "@@ -31,3 +31,3 @@",
                "   <packaging>jar</packaging>",
                "-  <version>0.8.0-SNAPSHOT</version>",
                "+  <version>0.9.0-SNAPSHOT</version>",
                "   <name>Zeppelin: Example application - Clock</name>",
                "diff --git a/zeppelin-examples/zeppelin-example-clock/zeppelin-example-clock.json b/zeppelin-examples/zeppelin-example-clock/zeppelin-example-clock.json",
                "index 3db70e939..34701ac0e 100644",
                "--- a/zeppelin-examples/zeppelin-example-clock/zeppelin-example-clock.json",
                "+++ b/zeppelin-examples/zeppelin-example-clock/zeppelin-example-clock.json",
                "@@ -20,3 +20,3 @@",
                "   \"description\" : \"Clock (example)\",",
                "-  \"artifact\" : \"zeppelin-examples/zeppelin-example-clock/target/zeppelin-example-clock-0.8.0-SNAPSHOT.jar\",",
                "+  \"artifact\" : \"zeppelin-examples/zeppelin-example-clock/target/zeppelin-example-clock-0.9.0-SNAPSHOT.jar\",",
                "   \"className\" : \"org.apache.zeppelin.example.app.clock.Clock\",",
                "diff --git a/zeppelin-examples/zeppelin-example-horizontalbar/pom.xml b/zeppelin-examples/zeppelin-example-horizontalbar/pom.xml",
                "index 8e08c4a3a..51e87043e 100644",
                "--- a/zeppelin-examples/zeppelin-example-horizontalbar/pom.xml",
                "+++ b/zeppelin-examples/zeppelin-example-horizontalbar/pom.xml",
                "@@ -24,3 +24,3 @@",
                "     <groupId>org.apache.zeppelin</groupId>",
                "-    <version>0.8.0-SNAPSHOT</version>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "     <relativePath>..</relativePath>",
                "@@ -31,3 +31,3 @@",
                "   <packaging>jar</packaging>",
                "-  <version>0.8.0-SNAPSHOT</version>",
                "+  <version>0.9.0-SNAPSHOT</version>",
                "   <name>Zeppelin: Example application - Horizontal Bar chart</name>",
                "diff --git a/zeppelin-examples/zeppelin-example-spell-echo/pom.xml b/zeppelin-examples/zeppelin-example-spell-echo/pom.xml",
                "index 348abd203..d38284948 100644",
                "--- a/zeppelin-examples/zeppelin-example-spell-echo/pom.xml",
                "+++ b/zeppelin-examples/zeppelin-example-spell-echo/pom.xml",
                "@@ -24,3 +24,3 @@",
                "     <groupId>org.apache.zeppelin</groupId>",
                "-    <version>0.8.0-SNAPSHOT</version>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "     <relativePath>..</relativePath>",
                "@@ -31,3 +31,3 @@",
                "   <packaging>jar</packaging>",
                "-  <version>0.8.0-SNAPSHOT</version>",
                "+  <version>0.9.0-SNAPSHOT</version>",
                "   <name>Zeppelin: Example Spell - Echo</name>",
                "diff --git a/zeppelin-examples/zeppelin-example-spell-flowchart/pom.xml b/zeppelin-examples/zeppelin-example-spell-flowchart/pom.xml",
                "index b3575c99c..3f22d3155 100644",
                "--- a/zeppelin-examples/zeppelin-example-spell-flowchart/pom.xml",
                "+++ b/zeppelin-examples/zeppelin-example-spell-flowchart/pom.xml",
                "@@ -24,3 +24,3 @@",
                "     <groupId>org.apache.zeppelin</groupId>",
                "-    <version>0.8.0-SNAPSHOT</version>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "     <relativePath>..</relativePath>",
                "@@ -31,3 +31,3 @@",
                "   <packaging>jar</packaging>",
                "-  <version>0.8.0-SNAPSHOT</version>",
                "+  <version>0.9.0-SNAPSHOT</version>",
                "   <name>Zeppelin: Example Spell - Flowchart</name>",
                "diff --git a/zeppelin-examples/zeppelin-example-spell-markdown/pom.xml b/zeppelin-examples/zeppelin-example-spell-markdown/pom.xml",
                "index b615eadc8..777b3d49f 100644",
                "--- a/zeppelin-examples/zeppelin-example-spell-markdown/pom.xml",
                "+++ b/zeppelin-examples/zeppelin-example-spell-markdown/pom.xml",
                "@@ -24,3 +24,3 @@",
                "     <groupId>org.apache.zeppelin</groupId>",
                "-    <version>0.8.0-SNAPSHOT</version>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "     <relativePath>..</relativePath>",
                "@@ -31,3 +31,3 @@",
                "   <packaging>jar</packaging>",
                "-  <version>0.8.0-SNAPSHOT</version>",
                "+  <version>0.9.0-SNAPSHOT</version>",
                "   <name>Zeppelin: Example Spell - Markdown</name>",
                "diff --git a/zeppelin-examples/zeppelin-example-spell-translator/pom.xml b/zeppelin-examples/zeppelin-example-spell-translator/pom.xml",
                "index 09e6daaad..51e1e48cb 100644",
                "--- a/zeppelin-examples/zeppelin-example-spell-translator/pom.xml",
                "+++ b/zeppelin-examples/zeppelin-example-spell-translator/pom.xml",
                "@@ -24,3 +24,3 @@",
                "     <groupId>org.apache.zeppelin</groupId>",
                "-    <version>0.8.0-SNAPSHOT</version>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "     <relativePath>..</relativePath>",
                "@@ -31,3 +31,3 @@",
                "   <packaging>jar</packaging>",
                "-  <version>0.8.0-SNAPSHOT</version>",
                "+  <version>0.9.0-SNAPSHOT</version>",
                "   <name>Zeppelin: Example Spell - Translator</name>",
                "diff --git a/zeppelin-integration/pom.xml b/zeppelin-integration/pom.xml",
                "index e939a6351..eafa48540 100644",
                "--- a/zeppelin-integration/pom.xml",
                "+++ b/zeppelin-integration/pom.xml",
                "@@ -26,3 +26,3 @@",
                "     <groupId>org.apache.zeppelin</groupId>",
                "-    <version>0.8.0-SNAPSHOT</version>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "     <relativePath>..</relativePath>",
                "@@ -33,3 +33,3 @@",
                "   <packaging>jar</packaging>",
                "-  <version>0.8.0-SNAPSHOT</version>",
                "+  <version>0.9.0-SNAPSHOT</version>",
                "   <name>Zeppelin: Integration Test</name>",
                "diff --git a/zeppelin-interpreter/pom.xml b/zeppelin-interpreter/pom.xml",
                "index b0fd99209..da31f7872 100644",
                "--- a/zeppelin-interpreter/pom.xml",
                "+++ b/zeppelin-interpreter/pom.xml",
                "@@ -26,3 +26,3 @@",
                "     <groupId>org.apache.zeppelin</groupId>",
                "-    <version>0.8.0-SNAPSHOT</version>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "     <relativePath>..</relativePath>",
                "@@ -33,3 +33,3 @@",
                "   <packaging>jar</packaging>",
                "-  <version>0.8.0-SNAPSHOT</version>",
                "+  <version>0.9.0-SNAPSHOT</version>",
                "   <name>Zeppelin: Interpreter</name>",
                "diff --git a/zeppelin-jupyter/pom.xml b/zeppelin-jupyter/pom.xml",
                "index eef0e367b..eab1d6280 100644",
                "--- a/zeppelin-jupyter/pom.xml",
                "+++ b/zeppelin-jupyter/pom.xml",
                "@@ -26,3 +26,3 @@",
                "     <groupId>org.apache.zeppelin</groupId>",
                "-    <version>0.8.0-SNAPSHOT</version>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "     <relativePath>..</relativePath>",
                "@@ -32,3 +32,3 @@",
                "   <packaging>jar</packaging>",
                "-  <version>0.8.0-SNAPSHOT</version>",
                "+  <version>0.9.0-SNAPSHOT</version>",
                "   <name>Zeppelin: Jupyter Support</name>",
                "diff --git a/zeppelin-server/pom.xml b/zeppelin-server/pom.xml",
                "index 296d58f01..a73cd9643 100644",
                "--- a/zeppelin-server/pom.xml",
                "+++ b/zeppelin-server/pom.xml",
                "@@ -24,3 +24,3 @@",
                "     <groupId>org.apache.zeppelin</groupId>",
                "-    <version>0.8.0-SNAPSHOT</version>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "     <relativePath>..</relativePath>",
                "@@ -31,3 +31,3 @@",
                "   <packaging>jar</packaging>",
                "-  <version>0.8.0-SNAPSHOT</version>",
                "+  <version>0.9.0-SNAPSHOT</version>",
                "   <name>Zeppelin: Server</name>",
                "diff --git a/zeppelin-web/pom.xml b/zeppelin-web/pom.xml",
                "index efec03941..444f8b29a 100644",
                "--- a/zeppelin-web/pom.xml",
                "+++ b/zeppelin-web/pom.xml",
                "@@ -24,3 +24,3 @@",
                "     <groupId>org.apache.zeppelin</groupId>",
                "-    <version>0.8.0-SNAPSHOT</version>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "     <relativePath>..</relativePath>",
                "@@ -31,3 +31,3 @@",
                "   <packaging>war</packaging>",
                "-  <version>0.8.0-SNAPSHOT</version>",
                "+  <version>0.9.0-SNAPSHOT</version>",
                "   <name>Zeppelin: web Application</name>",
                "diff --git a/zeppelin-web/src/app/spell/package.json b/zeppelin-web/src/app/spell/package.json",
                "index 7003e062b..3962887f5 100644",
                "--- a/zeppelin-web/src/app/spell/package.json",
                "+++ b/zeppelin-web/src/app/spell/package.json",
                "@@ -3,3 +3,3 @@",
                "   \"description\": \"Zeppelin Spell Framework\",",
                "-  \"version\": \"0.8.0-SNAPSHOT\",",
                "+  \"version\": \"0.9.0-SNAPSHOT\",",
                "   \"main\": \"index\",",
                "diff --git a/zeppelin-web/src/app/tabledata/package.json b/zeppelin-web/src/app/tabledata/package.json",
                "index 2eec9090f..837e29d49 100644",
                "--- a/zeppelin-web/src/app/tabledata/package.json",
                "+++ b/zeppelin-web/src/app/tabledata/package.json",
                "@@ -3,3 +3,3 @@",
                "   \"description\": \"tabledata api\",",
                "-  \"version\": \"0.8.0-SNAPSHOT\",",
                "+  \"version\": \"0.9.0-SNAPSHOT\",",
                "   \"main\": \"tabledata\",",
                "diff --git a/zeppelin-web/src/app/visualization/package.json b/zeppelin-web/src/app/visualization/package.json",
                "index 51a181490..cd5a9eb6c 100644",
                "--- a/zeppelin-web/src/app/visualization/package.json",
                "+++ b/zeppelin-web/src/app/visualization/package.json",
                "@@ -3,3 +3,3 @@",
                "   \"description\": \"Visualization API\",",
                "-  \"version\": \"0.8.0-SNAPSHOT\",",
                "+  \"version\": \"0.9.0-SNAPSHOT\",",
                "   \"main\": \"visualization\",",
                "diff --git a/zeppelin-zengine/pom.xml b/zeppelin-zengine/pom.xml",
                "index 08de7ad50..ac7536018 100644",
                "--- a/zeppelin-zengine/pom.xml",
                "+++ b/zeppelin-zengine/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <groupId>org.apache.zeppelin</groupId>",
                "-    <version>0.8.0-SNAPSHOT</version>",
                "+    <version>0.9.0-SNAPSHOT</version>",
                "     <relativePath>..</relativePath>",
                "@@ -32,3 +32,3 @@",
                "   <packaging>jar</packaging>",
                "-  <version>0.8.0-SNAPSHOT</version>",
                "+  <version>0.9.0-SNAPSHOT</version>",
                "   <name>Zeppelin: Zengine</name>"
            ],
            "changed_files": [
                ".travis.yml",
                "alluxio/pom.xml",
                "angular/pom.xml",
                "beam/pom.xml",
                "bigquery/pom.xml",
                "cassandra/pom.xml",
                "dev/change_zeppelin_version.sh",
                "docs/_config.yml",
                "elasticsearch/pom.xml",
                "file/pom.xml",
                "flink/pom.xml",
                "geode/pom.xml",
                "groovy/pom.xml",
                "hbase/pom.xml",
                "helium-dev/pom.xml",
                "ignite/pom.xml",
                "interpreter-parent/pom.xml",
                "jdbc/pom.xml",
                "kylin/pom.xml",
                "lens/pom.xml",
                "livy/pom.xml",
                "markdown/pom.xml",
                "neo4j/pom.xml",
                "pig/pom.xml",
                "pom.xml",
                "python/pom.xml",
                "r/pom.xml",
                "scalding/pom.xml",
                "scio/pom.xml",
                "scripts/docker/zeppelin/bin/Dockerfile",
                "shell/pom.xml",
                "spark-dependencies/pom.xml",
                "spark/pom.xml",
                "zeppelin-display/pom.xml",
                "zeppelin-distribution/pom.xml",
                "zeppelin-examples/pom.xml",
                "zeppelin-examples/zeppelin-example-clock/pom.xml",
                "zeppelin-examples/zeppelin-example-clock/zeppelin-example-clock.json",
                "zeppelin-examples/zeppelin-example-horizontalbar/pom.xml",
                "zeppelin-examples/zeppelin-example-spell-echo/pom.xml",
                "zeppelin-examples/zeppelin-example-spell-flowchart/pom.xml",
                "zeppelin-examples/zeppelin-example-spell-markdown/pom.xml",
                "zeppelin-examples/zeppelin-example-spell-translator/pom.xml",
                "zeppelin-integration/pom.xml",
                "zeppelin-interpreter/pom.xml",
                "zeppelin-jupyter/pom.xml",
                "zeppelin-server/pom.xml",
                "zeppelin-web/pom.xml",
                "zeppelin-web/src/app/spell/package.json",
                "zeppelin-web/src/app/tabledata/package.json",
                "zeppelin-web/src/app/visualization/package.json",
                "zeppelin-zengine/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "ZEPPELIN-3192": ""
            },
            "ghissue_refs": {
                "2748": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: ZEPPELIN-3192",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2748",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6d590c40bea2f9d898de089730488fc7ab8d2059",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1508851858,
            "hunks": 26,
            "message": "[HOTFIX] fix build spark and R interpreters ### What is this PR for? Fix build interpreters (apark and R) which broken after https://github.com/apache/zeppelin/pull/2592 and https://github.com/apache/zeppelin/pull/2596 ### What type of PR is it? [Hot Fix] ### How should this be tested? build interpreters ### Questions: * Does the licenses files need update? no * Is there breaking changes for older versions? no * Does this needs documentation? no Author: tinkoff-dwh <tinkoff.dwh@gmail.com> Closes #2630 from tinkoff-dwh/fix_r_interpretator and squashes the following commits: 0c9828bb [tinkoff-dwh] [HOTFIX] fix build spark and R interpreters",
            "diff": [
                "diff --git a/r/src/main/java/org/apache/zeppelin/rinterpreter/KnitR.java b/r/src/main/java/org/apache/zeppelin/rinterpreter/KnitR.java",
                "index bdc5b8686..ab29efe9b 100644",
                "--- a/r/src/main/java/org/apache/zeppelin/rinterpreter/KnitR.java",
                "+++ b/r/src/main/java/org/apache/zeppelin/rinterpreter/KnitR.java",
                "@@ -36,8 +36,8 @@ public class KnitR extends Interpreter implements WrappedInterpreter {",
                "-  public KnitR(Properties property, Boolean startSpark) {",
                "-    super(property);",
                "-    intp = new KnitRInterpreter(property, startSpark);",
                "+  public KnitR(Properties properties, Boolean startSpark) {",
                "+    super(properties);",
                "+    intp = new KnitRInterpreter(properties, startSpark);",
                "   }",
                "-  public KnitR(Properties property) {",
                "-    this(property, true);",
                "+  public KnitR(Properties properties) {",
                "+    this(properties, true);",
                "   }",
                "@@ -49,3 +49,3 @@ public class KnitR extends Interpreter implements WrappedInterpreter {",
                "   @Override",
                "-  public void open() {",
                "+  public void open() throws InterpreterException {",
                "     intp.open();",
                "@@ -54,3 +54,3 @@ public class KnitR extends Interpreter implements WrappedInterpreter {",
                "   @Override",
                "-  public void close() {",
                "+  public void close() throws InterpreterException {",
                "     intp.close();",
                "@@ -59,3 +59,4 @@ public class KnitR extends Interpreter implements WrappedInterpreter {",
                "   @Override",
                "-  public InterpreterResult interpret(String s, InterpreterContext interpreterContext) {",
                "+  public InterpreterResult interpret(String s, InterpreterContext interpreterContext)",
                "+      throws InterpreterException {",
                "     return intp.interpret(s, interpreterContext);",
                "@@ -64,3 +65,3 @@ public class KnitR extends Interpreter implements WrappedInterpreter {",
                "   @Override",
                "-  public void cancel(InterpreterContext interpreterContext) {",
                "+  public void cancel(InterpreterContext interpreterContext) throws InterpreterException {",
                "     intp.cancel(interpreterContext);",
                "@@ -69,3 +70,3 @@ public class KnitR extends Interpreter implements WrappedInterpreter {",
                "   @Override",
                "-  public FormType getFormType() {",
                "+  public FormType getFormType() throws InterpreterException {",
                "     return intp.getFormType();",
                "@@ -74,3 +75,3 @@ public class KnitR extends Interpreter implements WrappedInterpreter {",
                "   @Override",
                "-  public int getProgress(InterpreterContext interpreterContext) {",
                "+  public int getProgress(InterpreterContext interpreterContext) throws InterpreterException {",
                "     return intp.getProgress(interpreterContext);",
                "@@ -80,3 +81,3 @@ public class KnitR extends Interpreter implements WrappedInterpreter {",
                "   public List<InterpreterCompletion> completion(String s, int i,",
                "-      InterpreterContext interpreterContext) {",
                "+      InterpreterContext interpreterContext) throws InterpreterException {",
                "     List completion = intp.completion(s, i, interpreterContext);",
                "@@ -96,5 +97,5 @@ public class KnitR extends Interpreter implements WrappedInterpreter {",
                "   @Override",
                "-  public void setProperty(Properties property) {",
                "-    super.setProperty(property);",
                "-    intp.setProperty(property);",
                "+  public void setProperties(Properties properties) {",
                "+    super.setProperties(properties);",
                "+    intp.setProperties(properties);",
                "   }",
                "@@ -102,4 +103,4 @@ public class KnitR extends Interpreter implements WrappedInterpreter {",
                "   @Override",
                "-  public Properties getProperty() {",
                "-    return intp.getProperty();",
                "+  public Properties getProperties() {",
                "+    return intp.getProperties();",
                "   }",
                "diff --git a/r/src/main/java/org/apache/zeppelin/rinterpreter/RRepl.java b/r/src/main/java/org/apache/zeppelin/rinterpreter/RRepl.java",
                "index 81891f80c..bdf7dae87 100644",
                "--- a/r/src/main/java/org/apache/zeppelin/rinterpreter/RRepl.java",
                "+++ b/r/src/main/java/org/apache/zeppelin/rinterpreter/RRepl.java",
                "@@ -36,8 +36,8 @@ public class RRepl extends Interpreter implements WrappedInterpreter {",
                "-  public RRepl(Properties property, Boolean startSpark) {",
                "-    super(property);",
                "-    intp = new RReplInterpreter(property, startSpark);",
                "+  public RRepl(Properties properties, Boolean startSpark) {",
                "+    super(properties);",
                "+    intp = new RReplInterpreter(properties, startSpark);",
                "   }",
                "-  public RRepl(Properties property) {",
                "-    this(property, true);",
                "+  public RRepl(Properties properties) {",
                "+    this(properties, true);",
                "   }",
                "@@ -49,3 +49,3 @@ public class RRepl extends Interpreter implements WrappedInterpreter {",
                "   @Override",
                "-  public void open() {",
                "+  public void open() throws InterpreterException {",
                "     intp.open();",
                "@@ -54,3 +54,3 @@ public class RRepl extends Interpreter implements WrappedInterpreter {",
                "   @Override",
                "-  public void close() {",
                "+  public void close() throws InterpreterException {",
                "     intp.close();",
                "@@ -59,3 +59,4 @@ public class RRepl extends Interpreter implements WrappedInterpreter {",
                "   @Override",
                "-  public InterpreterResult interpret(String s, InterpreterContext interpreterContext) {",
                "+  public InterpreterResult interpret(String s, InterpreterContext interpreterContext)",
                "+      throws InterpreterException {",
                "     return intp.interpret(s, interpreterContext);",
                "@@ -64,3 +65,3 @@ public class RRepl extends Interpreter implements WrappedInterpreter {",
                "   @Override",
                "-  public void cancel(InterpreterContext interpreterContext) {",
                "+  public void cancel(InterpreterContext interpreterContext) throws InterpreterException {",
                "     intp.cancel(interpreterContext);",
                "@@ -69,3 +70,3 @@ public class RRepl extends Interpreter implements WrappedInterpreter {",
                "   @Override",
                "-  public FormType getFormType() {",
                "+  public FormType getFormType() throws InterpreterException {",
                "     return intp.getFormType();",
                "@@ -74,3 +75,3 @@ public class RRepl extends Interpreter implements WrappedInterpreter {",
                "   @Override",
                "-  public int getProgress(InterpreterContext interpreterContext) {",
                "+  public int getProgress(InterpreterContext interpreterContext) throws InterpreterException {",
                "     return intp.getProgress(interpreterContext);",
                "@@ -80,3 +81,3 @@ public class RRepl extends Interpreter implements WrappedInterpreter {",
                "   public List<InterpreterCompletion> completion(String s, int i,",
                "-      InterpreterContext interpreterContext) {",
                "+      InterpreterContext interpreterContext) throws InterpreterException {",
                "     List completion = intp.completion(s, i, interpreterContext);",
                "@@ -96,5 +97,5 @@ public class RRepl extends Interpreter implements WrappedInterpreter {",
                "   @Override",
                "-  public void setProperty(Properties property) {",
                "-    super.setProperty(property);",
                "-    intp.setProperty(property);",
                "+  public void setProperties(Properties properties) {",
                "+    super.setProperties(properties);",
                "+    intp.setProperties(properties);",
                "   }",
                "@@ -102,4 +103,4 @@ public class RRepl extends Interpreter implements WrappedInterpreter {",
                "   @Override",
                "-  public Properties getProperty() {",
                "-    return intp.getProperty();",
                "+  public Properties getProperties() {",
                "+    return intp.getProperties();",
                "   }",
                "diff --git a/r/src/main/scala/org/apache/zeppelin/rinterpreter/KnitRInterpreter.scala b/r/src/main/scala/org/apache/zeppelin/rinterpreter/KnitRInterpreter.scala",
                "index bc779c7a4..64b1d2686 100644",
                "--- a/r/src/main/scala/org/apache/zeppelin/rinterpreter/KnitRInterpreter.scala",
                "+++ b/r/src/main/scala/org/apache/zeppelin/rinterpreter/KnitRInterpreter.scala",
                "@@ -29,5 +29,5 @@ import org.apache.zeppelin.rinterpreter.rscala.RException",
                "-class KnitRInterpreter(property: Properties, startSpark : Boolean = true) extends RInterpreter(property, startSpark) {",
                "-  def this(property : Properties) = {",
                "-    this(property, true)",
                "+class KnitRInterpreter(properties: Properties, startSpark : Boolean = true) extends RInterpreter(properties, startSpark) {",
                "+  def this(properties : Properties) = {",
                "+    this(properties, true)",
                "   }",
                "diff --git a/r/src/main/scala/org/apache/zeppelin/rinterpreter/RInterpreter.scala b/r/src/main/scala/org/apache/zeppelin/rinterpreter/RInterpreter.scala",
                "index 9f5181d1b..0783f6c38 100644",
                "--- a/r/src/main/scala/org/apache/zeppelin/rinterpreter/RInterpreter.scala",
                "+++ b/r/src/main/scala/org/apache/zeppelin/rinterpreter/RInterpreter.scala",
                "@@ -43,3 +43,3 @@ abstract class RInterpreter(properties : Properties, startSpark : Boolean = true",
                "-  protected lazy val rContext : RContext = synchronized{ RContext(property, this.getInterpreterGroup().getId()) }",
                "+  protected lazy val rContext : RContext = synchronized{ RContext(properties, this.getInterpreterGroup().getId()) }",
                "diff --git a/r/src/main/scala/org/apache/zeppelin/rinterpreter/RReplInterpreter.scala b/r/src/main/scala/org/apache/zeppelin/rinterpreter/RReplInterpreter.scala",
                "index 63be30240..013ccd8dd 100644",
                "--- a/r/src/main/scala/org/apache/zeppelin/rinterpreter/RReplInterpreter.scala",
                "+++ b/r/src/main/scala/org/apache/zeppelin/rinterpreter/RReplInterpreter.scala",
                "@@ -28,8 +28,8 @@ import org.apache.zeppelin.rinterpreter.rscala.RException",
                "-class RReplInterpreter(property: Properties, startSpark : Boolean = true) extends RInterpreter(property, startSpark) {",
                "+class RReplInterpreter(properties: Properties, startSpark : Boolean = true) extends RInterpreter(properties, startSpark) {",
                "- // protected val rContext : RContext = RContext(property)",
                "+ // protected val rContext : RContext = RContext(properties)",
                "-  def this(property : Properties) = {",
                "-    this(property, true)",
                "+  def this(properties : Properties) = {",
                "+    this(properties, true)",
                "   }",
                "diff --git a/spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java b/spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java",
                "index 053682520..71a439f49 100644",
                "--- a/spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java",
                "+++ b/spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java",
                "@@ -934,3 +934,3 @@ public class SparkInterpreter extends Interpreter {",
                "-    String sparkUrlProp = property.getProperty(\"zeppelin.spark.uiWebUrl\", \"\");",
                "+    String sparkUrlProp = getProperty(\"zeppelin.spark.uiWebUrl\", \"\");",
                "     if (!StringUtils.isBlank(sparkUrlProp)) {"
            ],
            "changed_files": [
                "r/src/main/java/org/apache/zeppelin/rinterpreter/KnitR.java",
                "r/src/main/java/org/apache/zeppelin/rinterpreter/RRepl.java",
                "r/src/main/scala/org/apache/zeppelin/rinterpreter/KnitRInterpreter.scala",
                "r/src/main/scala/org/apache/zeppelin/rinterpreter/RInterpreter.scala",
                "r/src/main/scala/org/apache/zeppelin/rinterpreter/RReplInterpreter.scala",
                "spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2630": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2630",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a424f5c655623c8128824f95a673ad7cb06d09a7",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1507708499,
            "hunks": 5,
            "message": "[MINOR][Code Refactoring] Configuration name change for keytab and principal used for FileSystemNotebookRepo ### What is this PR for? Trivial change for configuration name change. ### What type of PR is it? [Refactoring] ### Todos * [ ] - Task ### What is the Jira issue? * No jira created ### How should this be tested? * First time? Setup Travis CI as described on https://zeppelin.apache.org/contribution/contributions.html#continuous-integration * Strongly recommended: add automated unit tests for any new or changed behavior * Outline any manual steps to test the PR here. ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Jeff Zhang <zjffdu@apache.org> Closes #2620 from zjffdu/minor_refactoring and squashes the following commits: c68ce76 [Jeff Zhang] [MINOR][Code Refactoring] Configuration name change for keytab and principal used for FileSystemNotebookRepo",
            "diff": [
                "diff --git a/conf/zeppelin-site.xml.template b/conf/zeppelin-site.xml.template",
                "index f1bfb6103..b25ba19c8 100755",
                "--- a/conf/zeppelin-site.xml.template",
                "+++ b/conf/zeppelin-site.xml.template",
                "@@ -183,3 +183,3 @@",
                " <property>",
                "-  <name>zeppelin.hdfs.keytab</name>",
                "+  <name>zeppelin.server.kerberos.keytab</name>",
                "   <value></value>",
                "@@ -189,3 +189,3 @@",
                " <property>",
                "-  <name>zeppelin.hdfs.principal</name>",
                "+  <name>zeppelin.server.kerberos.principal</name>",
                "   <value></value>",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "index f329d47f6..3a82bc589 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "@@ -695,4 +695,4 @@ public class ZeppelinConfiguration extends XMLConfiguration {",
                "-    ZEPPELIN_HDFS_KEYTAB(\"zeppelin.hdfs.keytab\", \"\"),",
                "-    ZEPPELIN_HDFS_PRINCIPAL(\"zeppelin.hdfs.principal\", \"\"),",
                "+    ZEPPELIN_SERVER_KERBEROS_KEYTAB(\"zeppelin.server.kerberos.keytab\", \"\"),",
                "+    ZEPPELIN_SERVER_KERBEROS_PRINCIPAL(\"zeppelin.server.kerberos.principal\", \"\"),",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/FileSystemNotebookRepo.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/FileSystemNotebookRepo.java",
                "index 150ac26ce..ba858e692 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/FileSystemNotebookRepo.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/FileSystemNotebookRepo.java",
                "@@ -22,3 +22,2 @@ import java.net.URI;",
                " import java.net.URISyntaxException;",
                "-import java.security.PrivilegedAction;",
                " import java.security.PrivilegedExceptionAction;",
                "@@ -52,4 +51,6 @@ public class FileSystemNotebookRepo implements NotebookRepo {",
                "     if (isSecurityEnabled) {",
                "-      String keytab = zConf.getString(ZeppelinConfiguration.ConfVars.ZEPPELIN_HDFS_KEYTAB);",
                "-      String principal = zConf.getString(ZeppelinConfiguration.ConfVars.ZEPPELIN_HDFS_PRINCIPAL);",
                "+      String keytab = zConf.getString(",
                "+          ZeppelinConfiguration.ConfVars.ZEPPELIN_SERVER_KERBEROS_KEYTAB);",
                "+      String principal = zConf.getString(",
                "+          ZeppelinConfiguration.ConfVars.ZEPPELIN_SERVER_KERBEROS_PRINCIPAL);",
                "       if (StringUtils.isBlank(keytab) || StringUtils.isBlank(principal)) {"
            ],
            "changed_files": [
                "conf/zeppelin-site.xml.template",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/FileSystemNotebookRepo.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2620": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2620",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3505625c26a45df14d6412b73da0b33aac68e908",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1512996788,
            "hunks": 1,
            "message": "[HOTFIX]: Fix IPythonInterpreter unit test ### What is this PR for? This is for hotfix of `IPythonInterpreter` unit test failure. Just specify the version of ipython in `install_external_dependencies.sh`, otherwise latest ipython version will be installed, and the behavior may change. ### What type of PR is it? [Hot Fix] ### Todos * [ ] - Task ### What is the Jira issue? * ### How should this be tested? * CI pass ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Jeff Zhang <zjffdu@apache.org> Closes #2703 from zjffdu/ipython_version and squashes the following commits: b4c7b42 [Jeff Zhang] HotFix: Fix IPythonInterpreter unit test",
            "diff": [
                "diff --git a/testing/install_external_dependencies.sh b/testing/install_external_dependencies.sh",
                "index daa670bc7..e34296e3a 100755",
                "--- a/testing/install_external_dependencies.sh",
                "+++ b/testing/install_external_dependencies.sh",
                "@@ -46,3 +46,3 @@ if [[ -n \"$PYTHON\" ]] ; then",
                "   conda config --add channels conda-forge",
                "-  conda install -q matplotlib pandasql ipython jupyter_client ipykernel matplotlib bokeh=0.12.6",
                "+  conda install -q matplotlib pandasql ipython=5.4.1 jupyter_client ipykernel matplotlib bokeh=0.12.6",
                "   pip install -q grpcio ggplot"
            ],
            "changed_files": [
                "testing/install_external_dependencies.sh"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2703": "[ZEPPELIN-3077] Cron scheduler is easy to get stuck when one of the cron jobs takes long time or gets stuck #2687"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2703",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "24cc08ed9000b90cb0988dc65160e3cc4aa5d295",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1509496901,
            "hunks": 1,
            "message": "[HOTFIX] Fix bokeh testing failure ### What is this PR for? HotFix for bokeh testing failure, just specify the bokeh version ### What type of PR is it? [Hot Fix] ### Todos * [ ] - Task ### What is the Jira issue? No jira created ### How should this be tested? Ci Pass ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Jeff Zhang <zjffdu@apache.org> Closes #2639 from zjffdu/HotFix_Bokeh and squashes the following commits: 1c2d353 [Jeff Zhang] [HOTFIX] Fix bokeh testing failure",
            "diff": [
                "diff --git a/testing/install_external_dependencies.sh b/testing/install_external_dependencies.sh",
                "index dc1b986d2..daa670bc7 100755",
                "--- a/testing/install_external_dependencies.sh",
                "+++ b/testing/install_external_dependencies.sh",
                "@@ -46,3 +46,3 @@ if [[ -n \"$PYTHON\" ]] ; then",
                "   conda config --add channels conda-forge",
                "-  conda install -q matplotlib pandasql ipython jupyter_client ipykernel matplotlib bokeh",
                "+  conda install -q matplotlib pandasql ipython jupyter_client ipykernel matplotlib bokeh=0.12.6",
                "   pip install -q grpcio ggplot"
            ],
            "changed_files": [
                "testing/install_external_dependencies.sh"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2639": "[HOTFIX] Fix bokeh testing failure jinxliu/zeppelin#3"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2639",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2a33fd379bfc13d5def66143f4387ce9a7719b15",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1510733764,
            "hunks": 0,
            "message": "available_interpreters.png replace. ### What is this PR for? Change `docs/assets/themes/zeppelin/img/available_interpreters.png` file. replace old `elasticsearch` logo to new one. ### What type of PR is it? Documentation ### Todos * [x] - replace old `elasticsearch` logo to new one on `available_interpreters.png` file. ### What is the Jira issue? N/A ### How should this be tested? N/A ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? N. * Is there breaking changes for older versions? N. * Does this needs documentation? N. Author: Jongmin Kim <kimjmin@gmail.com> Closes #2669 from kimjmin/master and squashes the following commits: 349194d9 [Jongmin Kim] available_interpreters.png file change. b5e53410 [Jongmin Kim] Revert \"available_interpreters.png file change.\" 61341759 [Jongmin Kim] available_interpreters.png file change.",
            "diff": [
                "diff --git a/docs/assets/themes/zeppelin/img/available_interpreters.png b/docs/assets/themes/zeppelin/img/available_interpreters.png",
                "index cb1a384c7..3be54af6b 100644",
                "Binary files a/docs/assets/themes/zeppelin/img/available_interpreters.png and b/docs/assets/themes/zeppelin/img/available_interpreters.png differ"
            ],
            "changed_files": [
                "docs/assets/themes/zeppelin/img/available_interpreters.png"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2669": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2669",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "625b268553efe199710b772d4c589d8d526e366f",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1512143706,
            "hunks": 1,
            "message": "[hotfix] Downgrade JGit from 4.9.0 to 4.5.4 ### What is this PR for? The version of JGit was updated to 4.9.0 at https://github.com/apache/zeppelin/pull/2658. However, this version does not support Java 7 and Travis CI test always fails now: https://travis-ci.org/kjmrknsn/zeppelin/builds/310104872 To fix this issue, downgrade JGit from 4.9.0 to 4.5.4 which is the latest JGit version which supports Java 7: https://projects.eclipse.org/projects/technology.jgit. I confirmed that Travis CI test was passed with JGit 4.5.4: https://travis-ci.org/kjmrknsn/zeppelin/builds/310107611 Now, all PRs to Zeppelin don't pass Travis CI tests, so it's preferable that this PR is merged soon. ### What type of PR is it? [Bug Fix] ### Todos ### What is the Jira issue? ### How should this be tested? I confirmed that Travis CI test passed with JGit 4.5.4: https://travis-ci.org/kjmrknsn/zeppelin/builds/310107611 ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? Yes. zeppelin-distribution/src/bin_license/LICENSE was updated at this PR. * Is there breaking changes for older versions? No. * Does this needs documentation? No. Author: Keiji Yoshida <kjmrknsn@gmail.com> Closes #2693 from kjmrknsn/ci-test-against-jgit-4.5.4 and squashes the following commits: 27b08c9 [Keiji Yoshida] CI Test against JGit 4.5.4",
            "diff": [
                "diff --git a/zeppelin-zengine/pom.xml b/zeppelin-zengine/pom.xml",
                "index a29d4a095..fd2d1dca9 100644",
                "--- a/zeppelin-zengine/pom.xml",
                "+++ b/zeppelin-zengine/pom.xml",
                "@@ -48,3 +48,3 @@",
                "     <xml.apis.version>1.4.01</xml.apis.version>",
                "-    <eclipse.jgit.version>4.9.0.201710071750-r</eclipse.jgit.version>",
                "+    <eclipse.jgit.version>4.5.4.201711221230-r</eclipse.jgit.version>",
                "     <frontend.maven.plugin.version>1.3</frontend.maven.plugin.version>"
            ],
            "changed_files": [
                "zeppelin-zengine/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2693": "[ZEPPELIN-3042] updating jgit to support post-commit hooks #2658"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2693",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "71a019e8b5242766bb722a8d429c6955c292fd88",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1510763429,
            "hunks": 2,
            "message": "Fix typo (isNotebokPublic -> isNotebookPublic) ### What is this PR for? Fix typo (isNotebokPublic -> isNotebookPublic) ### What type of PR is it? [Refactoring] ### Todos ### What is the Jira issue? ### How should this be tested? * By unit tests ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? No. * Is there breaking changes for older versions? No. * Does this needs documentation? No. Author: Keiji Yoshida <kjmrknsn@gmail.com> Closes #2672 from kjmrknsn/feature/fix-typo and squashes the following commits: c131dd9 [Keiji Yoshida] Fix typo (isNotebokPublic -> isNotebookPublic)",
            "diff": [
                "diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "index f45e27b3e..f234ed469 100644",
                "--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "@@ -502,3 +502,3 @@ public class ZeppelinConfiguration extends XMLConfiguration {",
                "-  public boolean isNotebokPublic() {",
                "+  public boolean isNotebookPublic() {",
                "     return getBoolean(ConfVars.ZEPPELIN_NOTEBOOK_PUBLIC);",
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/NotebookAuthorization.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/NotebookAuthorization.java",
                "index 5f0f0667e..5cf8192bb 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/NotebookAuthorization.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/NotebookAuthorization.java",
                "@@ -160,3 +160,3 @@ public class NotebookAuthorization {",
                "   public boolean isPublic() {",
                "-    return conf.isNotebokPublic();",
                "+    return conf.isNotebookPublic();",
                "   }"
            ],
            "changed_files": [
                "zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/NotebookAuthorization.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2672": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2672",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "1a79b51d55d12bcf2674ebdf52f56eb25e92ac67",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1508939617,
            "hunks": 1,
            "message": "[HotFix] - Incorrect interpreter dir ### What is this PR for? This is for the bug hotfix introduced in #2592 . The issue is that new interpreter created can not run properly because the incorrect interpreter dir. Thanks tinkoff-dwh for reporting this issue. ### What type of PR is it? [ Hot Fix] ### Todos * [ ] - Task ### How should this be tested? * First time? Setup Travis CI as described on https://zeppelin.apache.org/contribution/contributions.html#continuous-integration * Strongly recommended: add automated unit tests for any new or changed behavior * Outline any manual steps to test the PR here. ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Jeff Zhang <zjffdu@apache.org> Closes #2632 from zjffdu/HotFix_Interpreter and squashes the following commits: 2d7ab03 [Jeff Zhang] [HotFix] - Incorrect interpreter dir",
            "diff": [
                "diff --git a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "index 3b42752d5..93481bec5 100644",
                "--- a/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "+++ b/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "@@ -647,3 +647,3 @@ public class InterpreterSetting {",
                "     InterpreterLaunchContext launchContext = new",
                "-        InterpreterLaunchContext(getJavaProperties(), option, interpreterRunner, id, name);",
                "+        InterpreterLaunchContext(getJavaProperties(), option, interpreterRunner, id, group);",
                "     RemoteInterpreterProcess process = (RemoteInterpreterProcess) launcher.launch(launchContext);"
            ],
            "changed_files": [
                "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2592": "[HOTFIX] fix build spark and R interpreters #2630 [HotFix] - Incorrect interpreter dir #2632",
                "2632": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2592, 2632",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4660ab073de97926375cd682dc33ad8edc38a2b9",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1517570013,
            "hunks": 9,
            "message": "[HOTFIX] Fix spark version mismatch ### What is this PR for? Trivial fix for version mismatch in pom file. ### What type of PR is it? [Hot Fix] ### Todos * [ ] - Task ### What is the Jira issue? * No jira ### How should this be tested? * CI pass ### Screenshots (if appropriate) ### Questions: * Does the licenses files need update? No * Is there breaking changes for older versions? No * Does this needs documentation? No Author: Jeff Zhang <zjffdu@apache.org> Closes #2761 from zjffdu/spark_version and squashes the following commits: bf41fa4 [Jeff Zhang] [HOTFIX] Fix spark version mismatch",
            "diff": [
                "diff --git a/spark/interpreter/pom.xml b/spark/interpreter/pom.xml",
                "index 449646242..122cb14fb 100644",
                "--- a/spark/interpreter/pom.xml",
                "+++ b/spark/interpreter/pom.xml",
                "@@ -24,3 +24,3 @@",
                "     <groupId>org.apache.zeppelin</groupId>",
                "-    <version>0.9.0-SNAPSHOT</version>",
                "+    <version>0.8.0-SNAPSHOT</version>",
                "     <relativePath>../pom.xml</relativePath>",
                "@@ -31,3 +31,3 @@",
                "   <packaging>jar</packaging>",
                "-  <version>0.9.0-SNAPSHOT</version>",
                "+  <version>0.8.0-SNAPSHOT</version>",
                "   <name>Zeppelin: Spark Interpreter</name>",
                "diff --git a/spark/pom.xml b/spark/pom.xml",
                "index df66b35e5..4ccf69951 100644",
                "--- a/spark/pom.xml",
                "+++ b/spark/pom.xml",
                "@@ -26,3 +26,3 @@",
                "         <groupId>org.apache.zeppelin</groupId>",
                "-        <version>0.9.0-SNAPSHOT</version>",
                "+        <version>0.8.0-SNAPSHOT</version>",
                "         <relativePath>../interpreter-parent/pom.xml</relativePath>",
                "diff --git a/spark/scala-2.10/pom.xml b/spark/scala-2.10/pom.xml",
                "index e32e620bf..9252bad44 100644",
                "--- a/spark/scala-2.10/pom.xml",
                "+++ b/spark/scala-2.10/pom.xml",
                "@@ -23,3 +23,3 @@",
                "   <artifactId>spark-scala-2.10</artifactId>",
                "-  <version>0.9.0-SNAPSHOT</version>",
                "+  <version>0.8.0-SNAPSHOT</version>",
                "   <packaging>jar</packaging>",
                "@@ -30,3 +30,3 @@",
                "     <artifactId>spark-scala-parent</artifactId>",
                "-    <version>0.9.0-SNAPSHOT</version>",
                "+    <version>0.8.0-SNAPSHOT</version>",
                "     <relativePath>../spark-scala-parent/pom.xml</relativePath>",
                "diff --git a/spark/scala-2.11/pom.xml b/spark/scala-2.11/pom.xml",
                "index d9113d107..77b3cdfb0 100644",
                "--- a/spark/scala-2.11/pom.xml",
                "+++ b/spark/scala-2.11/pom.xml",
                "@@ -23,3 +23,3 @@",
                "   <artifactId>spark-scala-2.11</artifactId>",
                "-  <version>0.9.0-SNAPSHOT</version>",
                "+  <version>0.8.0-SNAPSHOT</version>",
                "   <packaging>jar</packaging>",
                "@@ -30,3 +30,3 @@",
                "     <artifactId>spark-scala-parent</artifactId>",
                "-    <version>0.9.0-SNAPSHOT</version>",
                "+    <version>0.8.0-SNAPSHOT</version>",
                "     <relativePath>../spark-scala-parent/pom.xml</relativePath>",
                "diff --git a/spark/spark-scala-parent/pom.xml b/spark/spark-scala-parent/pom.xml",
                "index 830fa59a6..90556785a 100644",
                "--- a/spark/spark-scala-parent/pom.xml",
                "+++ b/spark/spark-scala-parent/pom.xml",
                "@@ -25,3 +25,3 @@",
                "         <groupId>org.apache.zeppelin</groupId>",
                "-        <version>0.9.0-SNAPSHOT</version>",
                "+        <version>0.8.0-SNAPSHOT</version>",
                "         <relativePath>../pom.xml</relativePath>",
                "@@ -32,3 +32,3 @@",
                "     <artifactId>spark-scala-parent</artifactId>",
                "-    <version>0.9.0-SNAPSHOT</version>",
                "+    <version>0.8.0-SNAPSHOT</version>",
                "     <packaging>pom</packaging>"
            ],
            "changed_files": [
                "spark/interpreter/pom.xml",
                "spark/pom.xml",
                "spark/scala-2.10/pom.xml",
                "spark/scala-2.11/pom.xml",
                "spark/spark-scala-parent/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2761": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2761",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "dfa1250f95e6d8c7601f23b5b116dff8442a21f3",
            "repository": "https://github.com/apache/zeppelin",
            "timestamp": 1508134971,
            "hunks": 3,
            "message": "[HOTFIX] fix interpreter.cmd script ### What is this PR for? interpreter.cmd works incorrect after https://github.com/apache/zeppelin/pull/2562 ### What type of PR is it? Bug Fix ### Questions: * Does the licenses files need update? no * Is there breaking changes for older versions? no * Does this needs documentation? no Author: tinkoff-dwh <tinkoff.dwh@gmail.com> Closes #2607 from tinkoff-dwh/master and squashes the following commits: 1932202 [tinkoff-dwh] Merge remote-tracking branch 'upstream/master' c7f5124 [tinkoff-dwh] Merge remote-tracking branch 'upstream/master' 8baa87b [tinkoff-dwh] [HOTFIX] fix interpreter.cmd script",
            "diff": [
                "diff --git a/bin/interpreter.cmd b/bin/interpreter.cmd",
                "index eb5979995..8877c4540 100644",
                "--- a/bin/interpreter.cmd",
                "+++ b/bin/interpreter.cmd",
                "@@ -29,2 +29,3 @@ if /I \"%~1\"==\"-d\" (",
                " if /I \"%~1\"==\"-p\" set PORT=%~2",
                "+if /I \"%~1\"==\"-c\" set CALLBACK_HOST=%~2",
                " if /I \"%~1\"==\"-l\" set LOCAL_INTERPRETER_REPO=%~2",
                "@@ -129,3 +130,3 @@ if defined SPARK_SUBMIT (",
                "-    \"%SPARK_SUBMIT%\" --class %ZEPPELIN_SERVER% --jars %CLASSPATH% --driver-java-options \"!JAVA_INTP_OPTS!\" %SPARK_SUBMIT_OPTIONS% \"%SPARK_APP_JAR%\" %PORT%",
                "+    \"%SPARK_SUBMIT%\" --class %ZEPPELIN_SERVER% --jars %CLASSPATH% --driver-java-options \"!JAVA_INTP_OPTS!\" %SPARK_SUBMIT_OPTIONS% \"%SPARK_APP_JAR%\" \"%CALLBACK_HOST%\" %PORT%",
                " ) else (",
                "@@ -133,3 +134,3 @@ if defined SPARK_SUBMIT (",
                "-    \"%ZEPPELIN_RUNNER%\" !JAVA_INTP_OPTS! %ZEPPELIN_INTP_MEM% -cp %ZEPPELIN_CLASSPATH_OVERRIDES%;%CLASSPATH% %ZEPPELIN_SERVER% %PORT%",
                "+    \"%ZEPPELIN_RUNNER%\" !JAVA_INTP_OPTS! %ZEPPELIN_INTP_MEM% -cp %ZEPPELIN_CLASSPATH_OVERRIDES%;%CLASSPATH% %ZEPPELIN_SERVER% \"%CALLBACK_HOST%\" %PORT%",
                " )"
            ],
            "changed_files": [
                "bin/interpreter.cmd"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "2607": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.10.0",
                "v0.10.1",
                "v0.10.1-rc1",
                "v0.10.1-rc2",
                "v0.11.0",
                "v0.11.0-rc1",
                "v0.11.1",
                "v0.11.1-rc1",
                "v0.11.2-rc1",
                "v0.8.0",
                "v0.8.0-docker",
                "v0.8.0-rc1",
                "v0.8.0-rc2",
                "v0.8.0-rc3",
                "v0.8.0-rc4",
                "v0.8.0-rc5",
                "v0.8.0-rc6",
                "v0.8.1",
                "v0.8.1-docker",
                "v0.8.1-rc1",
                "v0.8.2",
                "v0.8.2-docker",
                "v0.8.2-rc1",
                "v0.9.0-docker",
                "v0.9.0-preview1"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 2607",
                    "relevance": 2
                }
            ]
        }
    ]
}
